

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Jun 05 21:33:39 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2685
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    66                           	psect	param0,global,class=BANK0,space=1,delta=1
    67  0000                     
    68                           	psect	idataCOMRAM
    69  005E26                     __pidataCOMRAM:
    70                           	opt stack 0
    71                           
    72                           ;initializer for ISR_Bassa@F16869
    73  005E26  03                 	db	3
    74  005E27  06                 	db	6
    75                           
    76                           	psect	idataBANK0
    77  005E28                     __pidataBANK0:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _delay_quartz_frequency_value
    81  005E28  10                 	db	16
    82                           
    83                           	psect	idataBANK1
    84  005E1E                     __pidataBANK1:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _larghezza
    88  005E1E  0000               	dw	0
    89  005E20  4200               	dw	16896
    90                           
    91                           ;initializer for _raggio
    92  005E22  0000               	dw	0
    93  005E24  4260               	dw	16992
    94                           
    95                           	psect	smallconst
    96  000D00                     __psmallconst:
    97                           	opt stack 0
    98  000D00  00                 	db	0
    99  000D01                     atan@coeff_a:
   100                           	opt stack 0
   101  000D01  3C06               	dw	15366
   102  000D03  4204               	dw	16900
   103  000D05  9F7D               	dw	40829
   104  000D07  426A               	dw	17002
   105  000D09  905C               	dw	36956
   106  000D0B  4201               	dw	16897
   107  000D0D  4D60               	dw	19808
   108  000D0F  40BB               	dw	16571
   109  000D11  EC51               	dw	60497
   110  000D13  3E47               	dw	15943
   111  000D15  8DDE               	dw	36318
   112  000D17  BB1F               	dw	47903
   113  000D19                     __end_ofatan@coeff_a:
   114                           	opt stack 0
   115  000D19                     atan@coeff_b:
   116                           	opt stack 0
   117  000D19  3C06               	dw	15366
   118  000D1B  4204               	dw	16900
   119  000D1D  59C0               	dw	22976
   120  000D1F  428B               	dw	17035
   121  000D21  0474               	dw	1140
   122  000D23  4244               	dw	16964
   123  000D25  9BF9               	dw	39929
   124  000D27  414F               	dw	16719
   125  000D29  0000               	dw	0
   126  000D2B  3F80               	dw	16256
   127  000D2D                     __end_ofatan@coeff_b:
   128                           	opt stack 0
   129  000D2D                     sin@coeff_a:
   130                           	opt stack 0
   131  000D2D  F3EC               	dw	62444
   132  000D2F  484A               	dw	18506
   133  000D31  9535               	dw	38197
   134  000D33  C795               	dw	51093
   135  000D35  C117               	dw	49431
   136  000D37  45DC               	dw	17884
   137  000D39  DBFD               	dw	56317
   138  000D3B  C36D               	dw	50029
   139  000D3D  B372               	dw	45938
   140  000D3F  4033               	dw	16435
   141  000D41                     __end_ofsin@coeff_a:
   142                           	opt stack 0
   143  000D41                     sin@coeff_b:
   144                           	opt stack 0
   145  000D41  342B               	dw	13355
   146  000D43  4801               	dw	18433
   147  000D45  9D7F               	dw	40319
   148  000D47  45B0               	dw	17840
   149  000D49  FFE7               	dw	65511
   150  000D4B  42D9               	dw	17113
   151  000D4D  0000               	dw	0
   152  000D4F  3F80               	dw	16256
   153  000D51                     __end_ofsin@coeff_b:
   154                           	opt stack 0
   155  0000                     _RXB1CON	set	3920
   156  0000                     _RXB1CONbits	set	3920
   157  0000                     _RXB1D0	set	3926
   158  0000                     _RXB1D1	set	3927
   159  0000                     _RXB1D2	set	3928
   160  0000                     _RXB1D3	set	3929
   161  0000                     _RXB1D4	set	3930
   162  0000                     _RXB1D5	set	3931
   163  0000                     _RXB1D6	set	3932
   164  0000                     _RXB1D7	set	3933
   165  0000                     _RXB1DLC	set	3925
   166  0000                     _RXB1DLCbits	set	3925
   167  0000                     _RXB1EIDH	set	3923
   168  0000                     _RXB1EIDL	set	3924
   169  0000                     _RXB1SIDH	set	3921
   170  0000                     _RXB1SIDL	set	3922
   171  0000                     _RXB1SIDLbits	set	3922
   172  0000                     _RXF0EIDH	set	3842
   173  0000                     _RXF0EIDL	set	3843
   174  0000                     _RXF0SIDH	set	3840
   175  0000                     _RXF0SIDL	set	3841
   176  0000                     _RXF0SIDLbits	set	3841
   177  0000                     _RXF1EIDH	set	3846
   178  0000                     _RXF1EIDL	set	3847
   179  0000                     _RXF1SIDH	set	3844
   180  0000                     _RXF1SIDL	set	3845
   181  0000                     _RXF1SIDLbits	set	3845
   182  0000                     _RXF2EIDH	set	3850
   183  0000                     _RXF2EIDL	set	3851
   184  0000                     _RXF2SIDH	set	3848
   185  0000                     _RXF2SIDL	set	3849
   186  0000                     _RXF2SIDLbits	set	3849
   187  0000                     _RXF3EIDH	set	3854
   188  0000                     _RXF3EIDL	set	3855
   189  0000                     _RXF3SIDH	set	3852
   190  0000                     _RXF3SIDL	set	3853
   191  0000                     _RXF3SIDLbits	set	3853
   192  0000                     _RXF4EIDH	set	3858
   193  0000                     _RXF4EIDL	set	3859
   194  0000                     _RXF4SIDH	set	3856
   195  0000                     _RXF4SIDL	set	3857
   196  0000                     _RXF4SIDLbits	set	3857
   197  0000                     _RXF5EIDH	set	3862
   198  0000                     _RXF5EIDL	set	3863
   199  0000                     _RXF5SIDH	set	3860
   200  0000                     _RXF5SIDL	set	3861
   201  0000                     _RXF5SIDLbits	set	3861
   202  0000                     _RXM0EIDH	set	3866
   203  0000                     _RXM0EIDL	set	3867
   204  0000                     _RXM0SIDH	set	3864
   205  0000                     _RXM0SIDL	set	3865
   206  0000                     _RXM0SIDLbits	set	3865
   207  0000                     _RXM1EIDH	set	3870
   208  0000                     _RXM1EIDL	set	3871
   209  0000                     _RXM1SIDH	set	3868
   210  0000                     _RXM1SIDL	set	3869
   211  0000                     _RXM1SIDLbits	set	3869
   212  0000                     _TXB0CONbits	set	3904
   213  0000                     _TXB0D0	set	3910
   214  0000                     _TXB0D1	set	3911
   215  0000                     _TXB0D2	set	3912
   216  0000                     _TXB0D3	set	3913
   217  0000                     _TXB0D4	set	3914
   218  0000                     _TXB0D5	set	3915
   219  0000                     _TXB0D6	set	3916
   220  0000                     _TXB0D7	set	3917
   221  0000                     _TXB0DLC	set	3909
   222  0000                     _TXB0DLCbits	set	3909
   223  0000                     _TXB0EIDH	set	3907
   224  0000                     _TXB0EIDL	set	3908
   225  0000                     _TXB0SIDH	set	3905
   226  0000                     _TXB0SIDL	set	3906
   227  0000                     _TXB0SIDLbits	set	3906
   228  0000                     _TXB1CONbits	set	3888
   229  0000                     _TXB1D0	set	3894
   230  0000                     _TXB1D1	set	3895
   231  0000                     _TXB1D2	set	3896
   232  0000                     _TXB1D3	set	3897
   233  0000                     _TXB1D4	set	3898
   234  0000                     _TXB1D5	set	3899
   235  0000                     _TXB1D6	set	3900
   236  0000                     _TXB1D7	set	3901
   237  0000                     _TXB1DLC	set	3893
   238  0000                     _TXB1DLCbits	set	3893
   239  0000                     _TXB1EIDH	set	3891
   240  0000                     _TXB1EIDL	set	3892
   241  0000                     _TXB1SIDH	set	3889
   242  0000                     _TXB1SIDL	set	3890
   243  0000                     _TXB1SIDLbits	set	3890
   244  0000                     _TXB2CONbits	set	3872
   245  0000                     _TXB2D0	set	3878
   246  0000                     _TXB2D1	set	3879
   247  0000                     _TXB2D2	set	3880
   248  0000                     _TXB2D3	set	3881
   249  0000                     _TXB2D4	set	3882
   250  0000                     _TXB2D5	set	3883
   251  0000                     _TXB2D6	set	3884
   252  0000                     _TXB2D7	set	3885
   253  0000                     _TXB2DLC	set	3877
   254  0000                     _TXB2DLCbits	set	3877
   255  0000                     _TXB2EIDH	set	3875
   256  0000                     _TXB2EIDL	set	3876
   257  0000                     _TXB2SIDH	set	3873
   258  0000                     _TXB2SIDL	set	3874
   259  0000                     _TXB2SIDLbits	set	3874
   260  0000                     _ADCON1	set	4033
   261  0000                     _BRGCON1	set	3952
   262  0000                     _BRGCON2	set	3953
   263  0000                     _BRGCON2bits	set	3953
   264  0000                     _BRGCON3	set	3954
   265  0000                     _BRGCON3bits	set	3954
   266  0000                     _CANCON	set	3951
   267  0000                     _CANCONbits	set	3951
   268  0000                     _CANSTAT	set	3950
   269  0000                     _COMSTATbits	set	3956
   270  0000                     _INTCON2bits	set	4081
   271  0000                     _INTCONbits	set	4082
   272  0000                     _IPR3bits	set	4005
   273  0000                     _LATA	set	3977
   274  0000                     _LATB	set	3978
   275  0000                     _LATBbits	set	3978
   276  0000                     _LATC	set	3979
   277  0000                     _PIE3bits	set	4003
   278  0000                     _PIR3bits	set	4004
   279  0000                     _PORTA	set	3968
   280  0000                     _PORTBbits	set	3969
   281  0000                     _RCONbits	set	4048
   282  0000                     _RXB0CON	set	3936
   283  0000                     _RXB0CONbits	set	3936
   284  0000                     _RXB0D0	set	3942
   285  0000                     _RXB0D1	set	3943
   286  0000                     _RXB0D2	set	3944
   287  0000                     _RXB0D3	set	3945
   288  0000                     _RXB0D4	set	3946
   289  0000                     _RXB0D5	set	3947
   290  0000                     _RXB0D6	set	3948
   291  0000                     _RXB0D7	set	3949
   292  0000                     _RXB0DLC	set	3941
   293  0000                     _RXB0DLCbits	set	3941
   294  0000                     _RXB0EIDH	set	3939
   295  0000                     _RXB0EIDL	set	3940
   296  0000                     _RXB0SIDH	set	3937
   297  0000                     _RXB0SIDL	set	3938
   298  0000                     _RXB0SIDLbits	set	3938
   299  0000                     _RXERRCNT	set	3957
   300  0000                     _T0CON	set	4053
   301  0000                     _T0CONbits	set	4053
   302  0000                     _T3CON	set	4017
   303  0000                     _TMR0H	set	4055
   304  0000                     _TMR0L	set	4054
   305  0000                     _TMR3H	set	4019
   306  0000                     _TMR3L	set	4018
   307  0000                     _TRISA	set	3986
   308  0000                     _TRISB	set	3987
   309  0000                     _TRISBbits	set	3987
   310  0000                     _TRISC	set	3988
   311  0000                     _TXERRCNT	set	3958
   312                           
   313                           ; #config settings
   314  000D51  00                 	db	0	; dummy byte at the end
   315  0000                     
   316                           	psect	cinit
   317  005A20                     __pcinit:
   318                           	opt stack 0
   319  005A20                     start_initialization:
   320                           	opt stack 0
   321  005A20                     __initialization:
   322                           	opt stack 0
   323                           
   324                           ; Clear objects allocated to BANK1 (141 bytes)
   325  005A20  EE01  F000         	lfsr	0,__pbssBANK1
   326  005A24  0E8D               	movlw	141
   327  005A26                     clear_0:
   328  005A26  6AEE               	clrf	postinc0,c
   329  005A28  06E8               	decf	wreg,f,c
   330  005A2A  E1FD               	bnz	clear_0
   331                           
   332                           ; Clear objects allocated to BANK0 (16 bytes)
   333  005A2C  EE00  F0D7         	lfsr	0,__pbssBANK0
   334  005A30  0E10               	movlw	16
   335  005A32                     clear_1:
   336  005A32  6AEE               	clrf	postinc0,c
   337  005A34  06E8               	decf	wreg,f,c
   338  005A36  E1FD               	bnz	clear_1
   339                           
   340                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   341  005A38  6A52               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   342  005A3A  6A51               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   343                           
   344                           ; Clear objects allocated to COMRAM (39 bytes)
   345  005A3C  EE00  F02A         	lfsr	0,__pbssCOMRAM
   346  005A40  0E27               	movlw	39
   347  005A42                     clear_2:
   348  005A42  6AEE               	clrf	postinc0,c
   349  005A44  06E8               	decf	wreg,f,c
   350  005A46  E1FD               	bnz	clear_2
   351                           
   352                           ; Initialize objects allocated to BANK1 (8 bytes)
   353                           ; load TBLPTR registers with __pidataBANK1
   354  005A48  0E1E               	movlw	low __pidataBANK1
   355  005A4A  6EF6               	movwf	tblptrl,c
   356  005A4C  0E5E               	movlw	high __pidataBANK1
   357  005A4E  6EF7               	movwf	tblptrh,c
   358  005A50  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   359  005A52  6EF8               	movwf	tblptru,c
   360  005A54  EE01  F0F0         	lfsr	0,__pdataBANK1
   361  005A58  EE10 F008          	lfsr	1,8
   362  005A5C                     copy_data0:
   363  005A5C  0009               	tblrd		*+
   364  005A5E  CFF5 FFEE          	movff	tablat,postinc0
   365  005A62  50E5               	movf	postdec1,w,c
   366  005A64  50E1               	movf	fsr1l,w,c
   367  005A66  E1FA               	bnz	copy_data0
   368                           
   369                           ; Initialize objects allocated to BANK0 (1 bytes)
   370                           ; load TBLPTR registers with __pidataBANK0
   371  005A68  0E28               	movlw	low __pidataBANK0
   372  005A6A  6EF6               	movwf	tblptrl,c
   373  005A6C  0E5E               	movlw	high __pidataBANK0
   374  005A6E  6EF7               	movwf	tblptrh,c
   375  005A70  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   376  005A72  6EF8               	movwf	tblptru,c
   377  005A74  0009               	tblrd		*+	;fetch initializer
   378  005A76  CFF5 F0E7          	movff	tablat,__pdataBANK0
   379                           
   380                           ; Initialize objects allocated to COMRAM (2 bytes)
   381                           ; load TBLPTR registers with __pidataCOMRAM
   382  005A7A  0E26               	movlw	low __pidataCOMRAM
   383  005A7C  6EF6               	movwf	tblptrl,c
   384  005A7E  0E5E               	movlw	high __pidataCOMRAM
   385  005A80  6EF7               	movwf	tblptrh,c
   386  005A82  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   387  005A84  6EF8               	movwf	tblptru,c
   388  005A86  0009               	tblrd		*+	;fetch initializer
   389  005A88  CFF5 F053          	movff	tablat,__pdataCOMRAM
   390  005A8C  0009               	tblrd		*+	;fetch initializer
   391  005A8E  CFF5 F054          	movff	tablat,__pdataCOMRAM+1
   392  005A92                     end_of_initialization:
   393                           	opt stack 0
   394  005A92                     __end_of__initialization:
   395                           	opt stack 0
   396  005A92  0100               	movlb	0
   397  005A94  EFA7  F02A         	goto	_main	;jump to C main() function
   398                           tblptru	equ	0xFF8
   399                           tblptrh	equ	0xFF7
   400                           tblptrl	equ	0xFF6
   401                           tablat	equ	0xFF5
   402                           postinc0	equ	0xFEE
   403                           wreg	equ	0xFE8
   404                           postdec1	equ	0xFE5
   405                           fsr1l	equ	0xFE1
   406                           
   407                           	psect	bitbssCOMRAM
   408  000288                     __pbitbssCOMRAM:
   409                           	opt stack 0
   410  000288                     _MUX_toggle:
   411                           	opt stack 0
   412  000288                     	ds	1
   413  000289                     _activation:
   414                           	opt stack 0
   415  000289                     	ds	1
   416  00028A                     _asd:
   417                           	opt stack 0
   418  00028A                     	ds	1
   419  00028B                     _avvicinamento:
   420                           	opt stack 0
   421  00028B                     	ds	1
   422  00028C                     _dir:
   423                           	opt stack 0
   424  00028C                     	ds	1
   425  00028D                     _distance_error:
   426                           	opt stack 0
   427  00028D                     	ds	1
   428  00028E                     _distance_received:
   429                           	opt stack 0
   430  00028E                     	ds	1
   431  00028F                     _distance_received1:
   432                           	opt stack 0
   433  00028F                     	ds	1
   434  000290                     _distance_wait:
   435                           	opt stack 0
   436  000290                     	ds	1
   437  000291                     _first:
   438                           	opt stack 0
   439  000291                     	ds	1
   440  000292                     _new_distance:
   441                           	opt stack 0
   442  000292                     	ds	1
   443  000293                     _old_dir_correction:
   444                           	opt stack 0
   445  000293                     	ds	1
   446  000294                     _request_sent:
   447                           	opt stack 0
   448  000294                     	ds	1
   449  000295                     _request_sent1:
   450                           	opt stack 0
   451  000295                     	ds	1
   452  000296                     _start_operation:
   453                           	opt stack 0
   454  000296                     	ds	1
   455  000297                     _steering_correction_dir:
   456                           	opt stack 0
   457  000297                     	ds	1
   458                           tblptru	equ	0xFF8
   459                           tblptrh	equ	0xFF7
   460                           tblptrl	equ	0xFF6
   461                           tablat	equ	0xFF5
   462                           postinc0	equ	0xFEE
   463                           wreg	equ	0xFE8
   464                           postdec1	equ	0xFE5
   465                           fsr1l	equ	0xFE1
   466                           
   467                           	psect	bssCOMRAM
   468  00002A                     __pbssCOMRAM:
   469                           	opt stack 0
   470  00002A                     _sensor_distance:
   471                           	opt stack 0
   472  00002A                     	ds	16
   473  00003A                     _MUX_select:
   474                           	opt stack 0
   475  00003A                     	ds	8
   476  000042                     _distance:
   477                           	opt stack 0
   478  000042                     	ds	2
   479  000044                     _distance_dx:
   480                           	opt stack 0
   481  000044                     	ds	2
   482  000046                     _distance_sx:
   483                           	opt stack 0
   484  000046                     	ds	2
   485  000048                     _pulse_time:
   486                           	opt stack 0
   487  000048                     	ds	2
   488  00004A                     _timerValue2:
   489                           	opt stack 0
   490  00004A                     	ds	2
   491  00004C                     _MUX_index:
   492                           	opt stack 0
   493  00004C                     	ds	1
   494  00004D                     _TMR3H_temp:
   495                           	opt stack 0
   496  00004D                     	ds	1
   497  00004E                     _TMR3L_temp:
   498                           	opt stack 0
   499  00004E                     	ds	1
   500  00004F                     _counter:
   501                           	opt stack 0
   502  00004F                     	ds	1
   503  000050                     _steering_correction:
   504                           	opt stack 0
   505  000050                     	ds	1
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec1	equ	0xFE5
   513                           fsr1l	equ	0xFE1
   514                           
   515                           	psect	dataCOMRAM
   516  000053                     __pdataCOMRAM:
   517                           	opt stack 0
   518  000053                     ISR_Bassa@F16869:
   519                           	opt stack 0
   520  000053                     	ds	2
   521                           tblptru	equ	0xFF8
   522                           tblptrh	equ	0xFF7
   523                           tblptrl	equ	0xFF6
   524                           tablat	equ	0xFF5
   525                           postinc0	equ	0xFEE
   526                           wreg	equ	0xFE8
   527                           postdec1	equ	0xFE5
   528                           fsr1l	equ	0xFE1
   529                           
   530                           	psect	bssBANK0
   531  0000D7                     __pbssBANK0:
   532                           	opt stack 0
   533  0000D7                     _alignment_gap:
   534                           	opt stack 0
   535  0000D7                     	ds	4
   536  0000DB                     _x:
   537                           	opt stack 0
   538  0000DB                     	ds	4
   539  0000DF                     _z:
   540                           	opt stack 0
   541  0000DF                     	ds	4
   542  0000E3                     _clock_counter_reference:
   543                           	opt stack 0
   544  0000E3                     	ds	2
   545  0000E5                     _set_speed:
   546                           	opt stack 0
   547  0000E5                     	ds	2
   548                           tblptru	equ	0xFF8
   549                           tblptrh	equ	0xFF7
   550                           tblptrl	equ	0xFF6
   551                           tablat	equ	0xFF5
   552                           postinc0	equ	0xFEE
   553                           wreg	equ	0xFE8
   554                           postdec1	equ	0xFE5
   555                           fsr1l	equ	0xFE1
   556                           
   557                           	psect	dataBANK0
   558  0000E7                     __pdataBANK0:
   559                           	opt stack 0
   560  0000E7                     _delay_quartz_frequency_value:
   561                           	opt stack 0
   562  0000E7                     	ds	1
   563                           tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           postdec1	equ	0xFE5
   570                           fsr1l	equ	0xFE1
   571                           
   572                           	psect	bssBANK1
   573  000100                     __pbssBANK1:
   574                           	opt stack 0
   575  000100                     _data_speed_rx:
   576                           	opt stack 0
   577  000100                     	ds	8
   578  000108                     _distance_set:
   579                           	opt stack 0
   580  000108                     	ds	8
   581  000110                     _sensor_distance_old:
   582                           	opt stack 0
   583  000110                     	ds	8
   584  000118                     _J_var:
   585                           	opt stack 0
   586  000118                     	ds	4
   587  00011C                     _K_var:
   588                           	opt stack 0
   589  00011C                     	ds	4
   590  000120                     _Pmin:
   591                           	opt stack 0
   592  000120                     	ds	4
   593  000124                     _alfa:
   594                           	opt stack 0
   595  000124                     	ds	4
   596  000128                     _beta:
   597                           	opt stack 0
   598  000128                     	ds	4
   599  00012C                     _bordo:
   600                           	opt stack 0
   601  00012C                     	ds	4
   602  000130                     _n:
   603                           	opt stack 0
   604  000130                     	ds	4
   605  000134                     _old_alignment_gap:
   606                           	opt stack 0
   607  000134                     	ds	4
   608  000138                     _prima_sterzata:
   609                           	opt stack 0
   610  000138                     	ds	4
   611  00013C                     _actual_speed:
   612                           	opt stack 0
   613  00013C                     	ds	2
   614  00013E                     _distance_average:
   615                           	opt stack 0
   616  00013E                     	ds	2
   617  000140                     _errno:
   618                           	opt stack 0
   619  000140                     	ds	2
   620  000142                     _left_speed:
   621                           	opt stack 0
   622  000142                     	ds	2
   623  000144                     _right_speed:
   624                           	opt stack 0
   625  000144                     	ds	2
   626  000146                     _msg:
   627                           	opt stack 0
   628  000146                     	ds	15
   629  000155                     _data:
   630                           	opt stack 0
   631  000155                     	ds	8
   632  00015D                     _data_brake:
   633                           	opt stack 0
   634  00015D                     	ds	8
   635  000165                     _data_correction:
   636                           	opt stack 0
   637  000165                     	ds	8
   638  00016D                     _data_speed:
   639                           	opt stack 0
   640  00016D                     	ds	8
   641  000175                     _data_steering:
   642                           	opt stack 0
   643  000175                     	ds	8
   644  00017D                     _data_test:
   645                           	opt stack 0
   646  00017D                     	ds	8
   647  000185                     _sensor_distance_short:
   648                           	opt stack 0
   649  000185                     	ds	8
   650                           tblptru	equ	0xFF8
   651                           tblptrh	equ	0xFF7
   652                           tblptrl	equ	0xFF6
   653                           tablat	equ	0xFF5
   654                           postinc0	equ	0xFEE
   655                           wreg	equ	0xFE8
   656                           postdec1	equ	0xFE5
   657                           fsr1l	equ	0xFE1
   658                           
   659                           	psect	dataBANK1
   660  0001F0                     __pdataBANK1:
   661                           	opt stack 0
   662  0001F0                     _larghezza:
   663                           	opt stack 0
   664  0001F0                     	ds	4
   665  0001F4                     _raggio:
   666                           	opt stack 0
   667  0001F4                     	ds	4
   668                           tblptru	equ	0xFF8
   669                           tblptrh	equ	0xFF7
   670                           tblptrl	equ	0xFF6
   671                           tablat	equ	0xFF5
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           postdec1	equ	0xFE5
   675                           fsr1l	equ	0xFE1
   676                           
   677                           	psect	cstackBANK1
   678  00018D                     __pcstackBANK1:
   679                           	opt stack 0
   680  00018D                     ??_sqrt:
   681  00018D                     sin@y:
   682                           	opt stack 0
   683                           
   684                           ; 4 bytes @ 0x0
   685  00018D                     	ds	4
   686  000191                     sqrt@og:
   687                           	opt stack 0
   688  000191                     _sin$3680:
   689                           	opt stack 0
   690                           
   691                           ; 4 bytes @ 0x4
   692  000191                     	ds	4
   693  000195                     sin@x2:
   694                           	opt stack 0
   695  000195                     sqrt@z:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x8
   699  000195                     	ds	4
   700  000199                     sin@sgn:
   701                           	opt stack 0
   702  000199                     sqrt@i:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0xC
   706  000199                     	ds	1
   707  00019A                     sqrt@q:
   708                           	opt stack 0
   709                           
   710                           ; 4 bytes @ 0xD
   711  00019A                     	ds	4
   712  00019E                     sqrt@x:
   713                           	opt stack 0
   714                           
   715                           ; 4 bytes @ 0x11
   716  00019E                     	ds	4
   717  0001A2                     ?_asin:
   718                           	opt stack 0
   719  0001A2                     asin@x:
   720                           	opt stack 0
   721                           
   722                           ; 4 bytes @ 0x15
   723  0001A2                     	ds	4
   724  0001A6                     asin@sgn:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x19
   728  0001A6                     	ds	4
   729  0001AA                     _asin$3675:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x1D
   733  0001AA                     	ds	4
   734  0001AE                     _asin$3678:
   735                           	opt stack 0
   736                           
   737                           ; 4 bytes @ 0x21
   738  0001AE                     	ds	4
   739  0001B2                     _asin$3677:
   740                           	opt stack 0
   741                           
   742                           ; 4 bytes @ 0x25
   743  0001B2                     	ds	4
   744  0001B6                     asin@y:
   745                           	opt stack 0
   746                           
   747                           ; 4 bytes @ 0x29
   748  0001B6                     	ds	4
   749  0001BA                     _asin$3676:
   750                           	opt stack 0
   751                           
   752                           ; 4 bytes @ 0x2D
   753  0001BA                     	ds	4
   754  0001BE                     ??_park_search:
   755  0001BE                     ?_cos:
   756                           	opt stack 0
   757  0001BE                     cos@f:
   758                           	opt stack 0
   759                           
   760                           ; 4 bytes @ 0x31
   761  0001BE                     	ds	4
   762  0001C2                     _cos$3679:
   763                           	opt stack 0
   764                           
   765                           ; 4 bytes @ 0x35
   766  0001C2                     	ds	4
   767  0001C6                     _matematica$3668:
   768                           	opt stack 0
   769                           
   770                           ; 4 bytes @ 0x39
   771  0001C6                     	ds	4
   772  0001CA                     _matematica$3669:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0x3D
   776  0001CA                     	ds	4
   777  0001CE                     _matematica$3670:
   778                           	opt stack 0
   779                           
   780                           ; 4 bytes @ 0x41
   781  0001CE                     	ds	4
   782  0001D2                     _matematica$3671:
   783                           	opt stack 0
   784                           
   785                           ; 4 bytes @ 0x45
   786  0001D2                     	ds	4
   787  0001D6                     _matematica$3673:
   788                           	opt stack 0
   789                           
   790                           ; 4 bytes @ 0x49
   791  0001D6                     	ds	4
   792  0001DA                     _matematica$3674:
   793                           	opt stack 0
   794                           
   795                           ; 4 bytes @ 0x4D
   796  0001DA                     	ds	4
   797  0001DE                     _matematica$3672:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x51
   801  0001DE                     	ds	4
   802  0001E2                     ??_park_routine:
   803                           
   804                           ; 0 bytes @ 0x55
   805  0001E2                     	ds	2
   806  0001E4                     _park_routine$3666:
   807                           	opt stack 0
   808                           
   809                           ; 4 bytes @ 0x57
   810  0001E4                     	ds	4
   811  0001E8                     _park_routine$3667:
   812                           	opt stack 0
   813                           
   814                           ; 4 bytes @ 0x5B
   815  0001E8                     	ds	4
   816  0001EC                     ??_main:
   817                           
   818                           ; 0 bytes @ 0x5F
   819  0001EC                     	ds	4
   820                           tblptru	equ	0xFF8
   821                           tblptrh	equ	0xFF7
   822                           tblptrl	equ	0xFF6
   823                           tablat	equ	0xFF5
   824                           postinc0	equ	0xFEE
   825                           wreg	equ	0xFE8
   826                           postdec1	equ	0xFE5
   827                           fsr1l	equ	0xFE1
   828                           
   829                           	psect	cstackBANK0
   830  000060                     __pcstackBANK0:
   831                           	opt stack 0
   832  000060                     ?___lwdiv:
   833                           	opt stack 0
   834  000060                     ___lwdiv@dividend:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x0
   838  000060                     	ds	2
   839  000062                     ___lwdiv@divisor:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x2
   843  000062                     	ds	2
   844  000064                     ___lwdiv@counter:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x4
   848  000064                     	ds	1
   849  000065                     ___lwdiv@quotient:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x5
   853  000065                     	ds	2
   854  000067                     ??_ISR_Alta:
   855                           
   856                           ; 0 bytes @ 0x7
   857  000067                     	ds	16
   858  000077                     ?_abs:
   859                           	opt stack 0
   860  000077                     ?___wmul:
   861                           	opt stack 0
   862  000077                     ?___flpack:
   863                           	opt stack 0
   864  000077                     CANOperationMode@mode:
   865                           	opt stack 0
   866  000077                     _CANisTxReady$2841:
   867                           	opt stack 0
   868  000077                     ___wmul@multiplier:
   869                           	opt stack 0
   870  000077                     abs@a:
   871                           	opt stack 0
   872  000077                     CANsendMessage@identifier:
   873                           	opt stack 0
   874  000077                     CANSetMask@mask:
   875                           	opt stack 0
   876  000077                     CANSetFilter@filter:
   877                           	opt stack 0
   878  000077                     ___flpack@arg:
   879                           	opt stack 0
   880  000077                     frexp@value:
   881                           	opt stack 0
   882                           
   883                           ; 4 bytes @ 0x17
   884  000077                     	ds	2
   885  000079                     ??_abs:
   886  000079                     ___wmul@multiplicand:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x19
   890  000079                     	ds	2
   891  00007B                     CANSetMask@type:
   892                           	opt stack 0
   893  00007B                     CANSetFilter@type:
   894                           	opt stack 0
   895  00007B                     ___flpack@exp:
   896                           	opt stack 0
   897  00007B                     CANsendMessage@data:
   898                           	opt stack 0
   899  00007B                     ___wmul@product:
   900                           	opt stack 0
   901  00007B                     frexp@eptr:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x1B
   905  00007B                     	ds	1
   906  00007C                     ??_CANSetMask:
   907  00007C                     ??_CANSetFilter:
   908  00007C                     ___flpack@sign:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x1C
   912  00007C                     	ds	1
   913  00007D                     ??___flpack:
   914  00007D                     ??_frexp:
   915  00007D                     CANsendMessage@dataLength:
   916                           	opt stack 0
   917  00007D                     delay_ms@value_ms:
   918                           	opt stack 0
   919                           
   920                           ; 2 bytes @ 0x1D
   921  00007D                     	ds	1
   922  00007E                     CANsendMessage@flags:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x1E
   926  00007E                     	ds	1
   927  00007F                     ??_CANsendMessage:
   928  00007F                     delay_s@value_s:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x1F
   932  00007F                     	ds	1
   933  000080                     CANSetMask@numBuffer:
   934                           	opt stack 0
   935  000080                     CANSetFilter@numBuffer:
   936                           	opt stack 0
   937  000080                     delay_s@repeat_loop:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x20
   941  000080                     	ds	1
   942  000081                     ?___fldiv:
   943                           	opt stack 0
   944  000081                     ?___awtofl:
   945                           	opt stack 0
   946  000081                     ?___lwtofl:
   947                           	opt stack 0
   948  000081                     ___awtofl@c:
   949                           	opt stack 0
   950  000081                     ___lwtofl@c:
   951                           	opt stack 0
   952  000081                     CANSetMask@tamp:
   953                           	opt stack 0
   954  000081                     CANSetFilter@tamp:
   955                           	opt stack 0
   956  000081                     ___fldiv@f1:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x21
   960  000081                     	ds	2
   961  000083                     CANsendMessage@tamp:
   962                           	opt stack 0
   963                           
   964                           ; 4 bytes @ 0x23
   965  000083                     	ds	2
   966  000085                     CANInitialize@phaseSeg1:
   967                           	opt stack 0
   968  000085                     ___awtofl@sign:
   969                           	opt stack 0
   970  000085                     ___fldiv@f2:
   971                           	opt stack 0
   972                           
   973                           ; 4 bytes @ 0x25
   974  000085                     	ds	1
   975  000086                     CANInitialize@phaseSeg2:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x26
   979  000086                     	ds	1
   980  000087                     CANInitialize@SJW:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0x27
   984  000087                     	ds	1
   985  000088                     CANInitialize@BRP:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x28
   989  000088                     	ds	1
   990  000089                     CANInitialize@flags:
   991                           	opt stack 0
   992  000089                     ___fldiv@f3:
   993                           	opt stack 0
   994                           
   995                           ; 4 bytes @ 0x29
   996  000089                     	ds	1
   997  00008A                     ??_CANInitialize:
   998                           
   999                           ; 0 bytes @ 0x2A
  1000  00008A                     	ds	3
  1001  00008D                     ___fldiv@cntr:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x2D
  1005  00008D                     	ds	1
  1006  00008E                     CANInitialize@propSeg:
  1007                           	opt stack 0
  1008  00008E                     ___fldiv@exp:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x2E
  1012  00008E                     	ds	1
  1013  00008F                     CANInitialize@FilterConfig1:
  1014                           	opt stack 0
  1015  00008F                     ___fldiv@sign:
  1016                           	opt stack 0
  1017                           
  1018                           ; 1 bytes @ 0x2F
  1019  00008F                     	ds	1
  1020  000090                     ?___flmul:
  1021                           	opt stack 0
  1022  000090                     CANInitialize@FilterConfig2:
  1023                           	opt stack 0
  1024  000090                     ___flmul@f1:
  1025                           	opt stack 0
  1026                           
  1027                           ; 4 bytes @ 0x30
  1028  000090                     	ds	1
  1029  000091                     
  1030                           ; 0 bytes @ 0x31
  1031  000091                     	ds	3
  1032  000094                     ___flmul@f2:
  1033                           	opt stack 0
  1034                           
  1035                           ; 4 bytes @ 0x34
  1036  000094                     	ds	4
  1037  000098                     ___flmul@exp:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x38
  1041  000098                     	ds	1
  1042  000099                     ___flmul@f3_as_product:
  1043                           	opt stack 0
  1044                           
  1045                           ; 4 bytes @ 0x39
  1046  000099                     	ds	4
  1047  00009D                     ___flmul@cntr:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x3D
  1051  00009D                     	ds	1
  1052  00009E                     ___flmul@sign:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x3E
  1056  00009E                     	ds	1
  1057  00009F                     ?___fladd:
  1058                           	opt stack 0
  1059  00009F                     ___fladd@f1:
  1060                           	opt stack 0
  1061                           
  1062                           ; 4 bytes @ 0x3F
  1063  00009F                     	ds	4
  1064  0000A3                     ___fladd@f2:
  1065                           	opt stack 0
  1066                           
  1067                           ; 4 bytes @ 0x43
  1068  0000A3                     	ds	4
  1069  0000A7                     ??___fladd:
  1070                           
  1071                           ; 0 bytes @ 0x47
  1072  0000A7                     	ds	1
  1073  0000A8                     ___fladd@sign:
  1074                           	opt stack 0
  1075                           
  1076                           ; 1 bytes @ 0x48
  1077  0000A8                     	ds	1
  1078  0000A9                     ___fladd@exp2:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x49
  1082  0000A9                     	ds	1
  1083  0000AA                     ___fladd@exp1:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x4A
  1087  0000AA                     	ds	1
  1088  0000AB                     ?_eval_poly:
  1089                           	opt stack 0
  1090  0000AB                     ?___flneg:
  1091                           	opt stack 0
  1092  0000AB                     eval_poly@x:
  1093                           	opt stack 0
  1094  0000AB                     ___flneg@f1:
  1095                           	opt stack 0
  1096                           
  1097                           ; 4 bytes @ 0x4B
  1098  0000AB                     	ds	4
  1099  0000AF                     ?_fabs:
  1100                           	opt stack 0
  1101  0000AF                     ?___fltol:
  1102                           	opt stack 0
  1103  0000AF                     eval_poly@d:
  1104                           	opt stack 0
  1105  0000AF                     fabs@d:
  1106                           	opt stack 0
  1107  0000AF                     ___fltol@f1:
  1108                           	opt stack 0
  1109                           
  1110                           ; 4 bytes @ 0x4F
  1111  0000AF                     	ds	2
  1112  0000B1                     eval_poly@n:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x51
  1116  0000B1                     	ds	2
  1117  0000B3                     ??_eval_poly:
  1118  0000B3                     ??___fltol:
  1119  0000B3                     ___flge@ff1:
  1120                           	opt stack 0
  1121                           
  1122                           ; 4 bytes @ 0x53
  1123  0000B3                     	ds	4
  1124  0000B7                     ___fltol@sign1:
  1125                           	opt stack 0
  1126  0000B7                     eval_poly@res:
  1127                           	opt stack 0
  1128  0000B7                     ___flge@ff2:
  1129                           	opt stack 0
  1130                           
  1131                           ; 4 bytes @ 0x57
  1132  0000B7                     	ds	1
  1133  0000B8                     ___fltol@exp1:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x58
  1137  0000B8                     	ds	1
  1138  0000B9                     ?___altofl:
  1139                           	opt stack 0
  1140  0000B9                     ___altofl@c:
  1141                           	opt stack 0
  1142                           
  1143                           ; 4 bytes @ 0x59
  1144  0000B9                     	ds	2
  1145  0000BB                     ??___flge:
  1146                           
  1147                           ; 0 bytes @ 0x5B
  1148  0000BB                     	ds	2
  1149  0000BD                     ___altofl@sign:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x5D
  1153  0000BD                     	ds	2
  1154  0000BF                     ?_atan:
  1155                           	opt stack 0
  1156  0000BF                     ?_floor:
  1157                           	opt stack 0
  1158  0000BF                     atan@f:
  1159                           	opt stack 0
  1160  0000BF                     floor@x:
  1161                           	opt stack 0
  1162                           
  1163                           ; 4 bytes @ 0x5F
  1164  0000BF                     	ds	4
  1165  0000C3                     atan@y:
  1166                           	opt stack 0
  1167  0000C3                     floor@i:
  1168                           	opt stack 0
  1169                           
  1170                           ; 4 bytes @ 0x63
  1171  0000C3                     	ds	4
  1172  0000C7                     floor@expon:
  1173                           	opt stack 0
  1174  0000C7                     atan@x:
  1175                           	opt stack 0
  1176                           
  1177                           ; 4 bytes @ 0x67
  1178  0000C7                     	ds	2
  1179  0000C9                     ?___flsub:
  1180                           	opt stack 0
  1181  0000C9                     ___flsub@f1:
  1182                           	opt stack 0
  1183                           
  1184                           ; 4 bytes @ 0x69
  1185  0000C9                     	ds	2
  1186  0000CB                     atan@recip:
  1187                           	opt stack 0
  1188                           
  1189                           ; 1 bytes @ 0x6B
  1190  0000CB                     	ds	1
  1191  0000CC                     atan@val_squared:
  1192                           	opt stack 0
  1193                           
  1194                           ; 4 bytes @ 0x6C
  1195  0000CC                     	ds	1
  1196  0000CD                     ___flsub@f2:
  1197                           	opt stack 0
  1198                           
  1199                           ; 4 bytes @ 0x6D
  1200  0000CD                     	ds	3
  1201  0000D0                     atan@val:
  1202                           	opt stack 0
  1203                           
  1204                           ; 4 bytes @ 0x70
  1205  0000D0                     	ds	1
  1206  0000D1                     ?_sqrt:
  1207                           	opt stack 0
  1208  0000D1                     ?_sin:
  1209                           	opt stack 0
  1210  0000D1                     sin@f:
  1211                           	opt stack 0
  1212  0000D1                     sqrt@y:
  1213                           	opt stack 0
  1214                           
  1215                           ; 4 bytes @ 0x71
  1216  0000D1                     	ds	4
  1217  0000D5                     ??_parallelo:
  1218  0000D5                     
  1219                           ; 0 bytes @ 0x75
  1220  0000D5                     	ds	2
  1221                           tblptru	equ	0xFF8
  1222                           tblptrh	equ	0xFF7
  1223                           tblptrl	equ	0xFF6
  1224                           tablat	equ	0xFF5
  1225                           postinc0	equ	0xFEE
  1226                           wreg	equ	0xFE8
  1227                           postdec1	equ	0xFE5
  1228                           fsr1l	equ	0xFE1
  1229                           
  1230                           	psect	cstackCOMRAM
  1231  000001                     __pcstackCOMRAM:
  1232                           	opt stack 0
  1233  000001                     ?i1___wmul:
  1234                           	opt stack 0
  1235  000001                     CANreceiveMessage@msg:
  1236                           	opt stack 0
  1237  000001                     i1___wmul@multiplier:
  1238                           	opt stack 0
  1239  000001                     i1CANsendMessage@identifier:
  1240                           	opt stack 0
  1241                           
  1242                           ; 4 bytes @ 0x0
  1243  000001                     	ds	2
  1244  000003                     ??_CANreceiveMessage:
  1245  000003                     i1___wmul@multiplicand:
  1246                           	opt stack 0
  1247                           
  1248                           ; 2 bytes @ 0x2
  1249  000003                     	ds	2
  1250  000005                     i1CANsendMessage@data:
  1251                           	opt stack 0
  1252  000005                     i1___wmul@product:
  1253                           	opt stack 0
  1254                           
  1255                           ; 2 bytes @ 0x4
  1256  000005                     	ds	2
  1257  000007                     i1CANsendMessage@dataLength:
  1258                           	opt stack 0
  1259  000007                     i1delay_ms@value_ms:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0x6
  1263  000007                     	ds	1
  1264  000008                     i1CANsendMessage@flags:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x7
  1268  000008                     	ds	1
  1269  000009                     ??i1_CANsendMessage:
  1270  000009                     
  1271                           ; 0 bytes @ 0x8
  1272  000009                     	ds	2
  1273  00000B                     CANreceiveMessage@error:
  1274                           	opt stack 0
  1275                           
  1276                           ; 1 bytes @ 0xA
  1277  00000B                     	ds	1
  1278  00000C                     CANreceiveMessage@tamp:
  1279                           	opt stack 0
  1280                           
  1281                           ; 1 bytes @ 0xB
  1282  00000C                     	ds	1
  1283  00000D                     i1CANsendMessage@tamp:
  1284                           	opt stack 0
  1285                           
  1286                           ; 4 bytes @ 0xC
  1287  00000D                     	ds	4
  1288  000011                     ??_ISR_Bassa:
  1289                           
  1290                           ; 0 bytes @ 0x10
  1291  000011                     	ds	21
  1292  000026                     ISR_Bassa@MUX_index_collision:
  1293                           	opt stack 0
  1294                           
  1295                           ; 2 bytes @ 0x25
  1296  000026                     	ds	2
  1297  000028                     ISR_Bassa@PORTA_temp:
  1298                           	opt stack 0
  1299                           
  1300                           ; 1 bytes @ 0x27
  1301  000028                     	ds	1
  1302  000029                     ISR_Bassa@i:
  1303                           	opt stack 0
  1304                           
  1305                           ; 1 bytes @ 0x28
  1306  000029                     	ds	1
  1307                           tblptru	equ	0xFF8
  1308                           tblptrh	equ	0xFF7
  1309                           tblptrl	equ	0xFF6
  1310                           tablat	equ	0xFF5
  1311                           postinc0	equ	0xFEE
  1312                           wreg	equ	0xFE8
  1313                           postdec1	equ	0xFE5
  1314                           fsr1l	equ	0xFE1
  1315                           
  1316 ;;
  1317 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1318 ;;
  1319 ;; *************** function _main *****************
  1320 ;; Defined at:
  1321 ;;		line 235 in file "parcheggio.c"
  1322 ;; Parameters:    Size  Location     Type
  1323 ;;		None
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;		None
  1326 ;; Return value:  Size  Location     Type
  1327 ;;		None               void
  1328 ;; Registers used:
  1329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1330 ;; Tracked objects:
  1331 ;;		On entry : 0/0
  1332 ;;		On exit  : 0/0
  1333 ;;		Unchanged: 0/0
  1334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1337 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  1338 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  1339 ;;Total ram usage:        4 bytes
  1340 ;; Hardware stack levels required when called:   12
  1341 ;; This function calls:
  1342 ;;		_CANisTxReady
  1343 ;;		_CANsendMessage
  1344 ;;		_configurations
  1345 ;;		_delay_ms
  1346 ;;		_park_routine
  1347 ;;		_park_search
  1348 ;; This function is called by:
  1349 ;;		Startup code after reset
  1350 ;; This function uses a non-reentrant model
  1351 ;;
  1352                           
  1353                           	psect	text0
  1354  00554E                     __ptext0:
  1355                           	opt stack 0
  1356  00554E                     _main:
  1357                           	opt stack 19
  1358                           
  1359                           ;parcheggio.c: 236: MUX_select[0] = 0b00000000;
  1360                           
  1361                           ; BSR set to: 15
  1362                           ;incstack = 0
  1363  00554E  0E00               	movlw	0
  1364  005550  6E3A               	movwf	_MUX_select,c	;volatile
  1365                           
  1366                           ;parcheggio.c: 237: MUX_select[1] = 0b00000001;
  1367  005552  0E01               	movlw	1
  1368  005554  6E3B               	movwf	_MUX_select+1,c	;volatile
  1369                           
  1370                           ;parcheggio.c: 238: MUX_select[2] = 0b00000010;
  1371  005556  0E02               	movlw	2
  1372  005558  6E3C               	movwf	_MUX_select+2,c	;volatile
  1373                           
  1374                           ;parcheggio.c: 239: MUX_select[3] = 0b00000011;
  1375  00555A  0E03               	movlw	3
  1376  00555C  6E3D               	movwf	_MUX_select+3,c	;volatile
  1377                           
  1378                           ;parcheggio.c: 240: MUX_select[4] = 0b00000100;
  1379  00555E  0E04               	movlw	4
  1380  005560  6E3E               	movwf	_MUX_select+4,c	;volatile
  1381                           
  1382                           ;parcheggio.c: 241: MUX_select[5] = 0b00000101;
  1383  005562  0E05               	movlw	5
  1384  005564  6E3F               	movwf	_MUX_select+5,c	;volatile
  1385                           
  1386                           ;parcheggio.c: 242: MUX_select[6] = 0b00000110;
  1387  005566  0E06               	movlw	6
  1388  005568  6E40               	movwf	_MUX_select+6,c	;volatile
  1389                           
  1390                           ;parcheggio.c: 243: MUX_select[7] = 0b00000111;
  1391  00556A  0E07               	movlw	7
  1392  00556C  6E41               	movwf	_MUX_select+7,c	;volatile
  1393                           
  1394                           ;parcheggio.c: 245: configurations();
  1395  00556E  EC4C  F02D         	call	_configurations	;wreg free
  1396                           
  1397                           ;parcheggio.c: 247: PORTBbits.RB4 = 0;
  1398  005572  9881               	bcf	3969,4,c	;volatile
  1399                           
  1400                           ;parcheggio.c: 248: PORTBbits.RB5 = 0;
  1401  005574  9A81               	bcf	3969,5,c	;volatile
  1402                           
  1403                           ;parcheggio.c: 249: PORTBbits.RB6 = 0;
  1404  005576  9C81               	bcf	3969,6,c	;volatile
  1405                           
  1406                           ;parcheggio.c: 251: request_sent = 0;
  1407  005578  9852               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1408                           
  1409                           ;parcheggio.c: 252: start_operation = 0;
  1410  00557A  9C52               	bcf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  1411                           
  1412                           ;parcheggio.c: 253: delay_ms(500);
  1413  00557C  0E01               	movlw	1
  1414  00557E  0100               	movlb	0	; () banked
  1415  005580  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1416  005582  0EF4               	movlw	244
  1417  005584  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1418  005586  EC41  F02E         	call	_delay_ms	;wreg free
  1419                           
  1420                           ;parcheggio.c: 256: while (activation != 1) {
  1421                           
  1422                           ;parcheggio.c: 255: while (1) {
  1423  00558A  D026               	goto	l6806
  1424  00558C                     l6800:
  1425                           
  1426                           ;parcheggio.c: 257: delay_ms(10);
  1427  00558C  0E00               	movlw	0
  1428  00558E  0100               	movlb	0	; () banked
  1429  005590  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1430  005592  0E0A               	movlw	10
  1431  005594  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1432  005596  EC41  F02E         	call	_delay_ms	;wreg free
  1433                           
  1434                           ;parcheggio.c: 258: while (!CANisTxReady());
  1435  00559A  D000               	goto	l6802
  1436  00559C                     l6802:
  1437  00559C  ECF0  F02E         	call	_CANisTxReady	;wreg free
  1438  0055A0  0900               	iorlw	0
  1439  0055A2  B4D8               	btfsc	status,2,c
  1440  0055A4  D7FB               	goto	l6802
  1441                           
  1442                           ;parcheggio.c: 259: PORTBbits.RB4 = ~PORTBbits.RB4;
  1443  0055A6  7881               	btg	3969,4,c	;volatile
  1444                           
  1445                           ;parcheggio.c: 260: CANsendMessage(0b00000010001, sensor_distance_short, 2, CAN_CONFIG_S
      +                          TD_MSG & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1446  0055A8  0E11               	movlw	17
  1447  0055AA  0100               	movlb	0	; () banked
  1448  0055AC  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1449  0055AE  0E00               	movlw	0
  1450  0055B0  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1451  0055B2  0E00               	movlw	0
  1452  0055B4  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1453  0055B6  0E00               	movlw	0
  1454  0055B8  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1455  0055BA  0E85               	movlw	low _sensor_distance_short
  1456  0055BC  0100               	movlb	0	; () banked
  1457  0055BE  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1458  0055C0  0E01               	movlw	high _sensor_distance_short
  1459  0055C2  0100               	movlb	0	; () banked
  1460  0055C4  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1461  0055C6  0E02               	movlw	2
  1462  0055C8  0100               	movlb	0	; () banked
  1463  0055CA  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1464  0055CC  0EBC               	movlw	188
  1465  0055CE  0100               	movlb	0	; () banked
  1466  0055D0  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1467  0055D2  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1468  0055D6  D000               	goto	l6806
  1469  0055D8                     l6806:
  1470  0055D8  A251               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1471  0055DA  D7D8               	goto	l6800
  1472                           
  1473                           ;parcheggio.c: 261: }
  1474                           ;parcheggio.c: 263: park_search();
  1475  0055DC  EC82  F025         	call	_park_search	;wreg free
  1476                           
  1477                           ;parcheggio.c: 265: left_speed = data_speed_rx[1];
  1478  0055E0  C101  F142         	movff	_data_speed_rx+1,_left_speed	;volatile
  1479  0055E4  0101               	movlb	1	; () banked
  1480  0055E6  6B43               	clrf	(_left_speed+1)& (0+255),b	;volatile
  1481                           
  1482                           ; BSR set to: 1
  1483                           ;parcheggio.c: 266: left_speed = ((left_speed << 8) | (data_speed_rx[0]));
  1484  0055E8  0101               	movlb	1	; () banked
  1485  0055EA  5142               	movf	_left_speed& (0+255),w,b	;volatile
  1486  0055EC  0101               	movlb	1	; () banked
  1487  0055EE  6FEC               	movwf	??_main& (0+255),b
  1488  0055F0  0101               	movlb	1	; () banked
  1489  0055F2  5100               	movf	_data_speed_rx& (0+255),w,b	;volatile
  1490  0055F4  0101               	movlb	1	; () banked
  1491  0055F6  6F42               	movwf	_left_speed& (0+255),b	;volatile
  1492  0055F8  C1EC  F143         	movff	??_main,_left_speed+1	;volatile
  1493                           
  1494                           ; BSR set to: 1
  1495                           ;parcheggio.c: 267: right_speed = data_speed_rx[3];
  1496  0055FC  C103  F144         	movff	_data_speed_rx+3,_right_speed	;volatile
  1497  005600  0101               	movlb	1	; () banked
  1498  005602  6B45               	clrf	(_right_speed+1)& (0+255),b	;volatile
  1499                           
  1500                           ; BSR set to: 1
  1501                           ;parcheggio.c: 268: right_speed = ((right_speed << 8) | (data_speed_rx[2]));
  1502  005604  0101               	movlb	1	; () banked
  1503  005606  5144               	movf	_right_speed& (0+255),w,b	;volatile
  1504  005608  0101               	movlb	1	; () banked
  1505  00560A  6FEC               	movwf	??_main& (0+255),b
  1506  00560C  0101               	movlb	1	; () banked
  1507  00560E  5102               	movf	(_data_speed_rx+2)& (0+255),w,b	;volatile
  1508  005610  0101               	movlb	1	; () banked
  1509  005612  6F44               	movwf	_right_speed& (0+255),b	;volatile
  1510  005614  C1EC  F145         	movff	??_main,_right_speed+1	;volatile
  1511                           
  1512                           ; BSR set to: 1
  1513                           ;parcheggio.c: 269: actual_speed = (right_speed + left_speed) / 2;
  1514  005618  0101               	movlb	1	; () banked
  1515  00561A  5142               	movf	_left_speed& (0+255),w,b	;volatile
  1516  00561C  0101               	movlb	1	; () banked
  1517  00561E  2544               	addwf	_right_speed& (0+255),w,b	;volatile
  1518  005620  0101               	movlb	1	; () banked
  1519  005622  6FEC               	movwf	??_main& (0+255),b
  1520  005624  0101               	movlb	1	; () banked
  1521  005626  5143               	movf	(_left_speed+1)& (0+255),w,b	;volatile
  1522  005628  0101               	movlb	1	; () banked
  1523  00562A  2145               	addwfc	(_right_speed+1)& (0+255),w,b	;volatile
  1524  00562C  0101               	movlb	1	; () banked
  1525  00562E  6FED               	movwf	(??_main+1)& (0+255),b
  1526  005630  90D8               	bcf	status,0,c
  1527  005632  0101               	movlb	1	; () banked
  1528  005634  31ED               	rrcf	(??_main+1)& (0+255),w,b
  1529  005636  0101               	movlb	1	; () banked
  1530  005638  6FEE               	movwf	(??_main+2)& (0+255),b
  1531  00563A  0101               	movlb	1	; () banked
  1532  00563C  31EC               	rrcf	??_main& (0+255),w,b
  1533  00563E  0101               	movlb	1	; () banked
  1534  005640  6F3C               	movwf	_actual_speed& (0+255),b	;volatile
  1535  005642  C1EE  F13D         	movff	??_main+2,_actual_speed+1	;volatile
  1536                           
  1537                           ; BSR set to: 1
  1538                           ;parcheggio.c: 271: park_routine();
  1539  005646  ECBC  F018         	call	_park_routine	;wreg free
  1540  00564A  D7C6               	goto	l6806
  1541  00564C  EFA4  F001         	goto	start
  1542  005650                     __end_of_main:
  1543                           	opt stack 0
  1544                           tblptru	equ	0xFF8
  1545                           tblptrh	equ	0xFF7
  1546                           tblptrl	equ	0xFF6
  1547                           tablat	equ	0xFF5
  1548                           postinc0	equ	0xFEE
  1549                           wreg	equ	0xFE8
  1550                           postdec1	equ	0xFE5
  1551                           fsr1l	equ	0xFE1
  1552                           status	equ	0xFD8
  1553                           
  1554 ;; *************** function _park_search *****************
  1555 ;; Defined at:
  1556 ;;		line 275 in file "parcheggio.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;		None
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;		None
  1561 ;; Return value:  Size  Location     Type
  1562 ;;		None               void
  1563 ;; Registers used:
  1564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1572 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1573 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1574 ;;Total ram usage:        2 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; Hardware stack levels required when called:   11
  1577 ;; This function calls:
  1578 ;;		_CANisTxReady
  1579 ;;		_CANsendMessage
  1580 ;;		___awtofl
  1581 ;;		_abs
  1582 ;;		_parallelo
  1583 ;; This function is called by:
  1584 ;;		_main
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           	psect	text1
  1589  004B04                     __ptext1:
  1590                           	opt stack 0
  1591  004B04                     _park_search:
  1592                           	opt stack 19
  1593                           
  1594                           ;parcheggio.c: 276: while ((activation == 1) && (PORTBbits.RB5 == 0)) {
  1595                           
  1596                           ;incstack = 0
  1597  004B04  D0DD               	goto	l746
  1598  004B06                     l6528:
  1599                           
  1600                           ;parcheggio.c: 278: parallelo();
  1601  004B06  EC2E  F021         	call	_parallelo	;wreg free
  1602                           
  1603                           ;parcheggio.c: 280: if (sensor_distance[0] > 50) {
  1604  004B0A  502B               	movf	_sensor_distance+1,w,c	;volatile
  1605  004B0C  E104               	bnz	u8160
  1606  004B0E  0E33               	movlw	51
  1607  004B10  5C2A               	subwf	_sensor_distance,w,c	;volatile
  1608  004B12  A0D8               	btfss	status,0,c
  1609  004B14  D02D               	goto	l748
  1610  004B16                     u8160:
  1611                           
  1612                           ;parcheggio.c: 281: if (request_sent == 0) {
  1613  004B16  A852               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1614  004B18  D002               	goto	l6536
  1615  004B1A  D028               	goto	l6544
  1616                           
  1617                           ;parcheggio.c: 282: while (!CANisTxReady());
  1618  004B1C  D000               	goto	l6536
  1619  004B1E                     l6536:
  1620  004B1E  ECF0  F02E         	call	_CANisTxReady	;wreg free
  1621  004B22  0900               	iorlw	0
  1622  004B24  B4D8               	btfsc	status,2,c
  1623  004B26  D7FB               	goto	l6536
  1624                           
  1625                           ;parcheggio.c: 283: CANsendMessage(0b00000001010, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1626  004B28  0E0A               	movlw	10
  1627  004B2A  0100               	movlb	0	; () banked
  1628  004B2C  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1629  004B2E  0E00               	movlw	0
  1630  004B30  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1631  004B32  0E00               	movlw	0
  1632  004B34  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1633  004B36  0E00               	movlw	0
  1634  004B38  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1635  004B3A  0E55               	movlw	low _data
  1636  004B3C  0100               	movlb	0	; () banked
  1637  004B3E  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1638  004B40  0E01               	movlw	high _data
  1639  004B42  0100               	movlb	0	; () banked
  1640  004B44  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1641  004B46  0E08               	movlw	8
  1642  004B48  0100               	movlb	0	; () banked
  1643  004B4A  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1644  004B4C  0EFC               	movlw	252
  1645  004B4E  0100               	movlb	0	; () banked
  1646  004B50  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1647  004B52  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1648                           
  1649                           ;parcheggio.c: 284: request_sent = 1;
  1650  004B56  8852               	bsf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1651                           
  1652                           ;parcheggio.c: 285: alignment_gap = 0;
  1653  004B58  0E00               	movlw	0
  1654  004B5A  0100               	movlb	0	; () banked
  1655  004B5C  6FD7               	movwf	_alignment_gap& (0+255),b	;volatile
  1656  004B5E  0E00               	movlw	0
  1657  004B60  6FD8               	movwf	(_alignment_gap+1)& (0+255),b	;volatile
  1658  004B62  0E00               	movlw	0
  1659  004B64  6FD9               	movwf	(_alignment_gap+2)& (0+255),b	;volatile
  1660  004B66  0E00               	movlw	0
  1661  004B68  6FDA               	movwf	(_alignment_gap+3)& (0+255),b	;volatile
  1662  004B6A  D000               	goto	l6544
  1663  004B6C                     l6544:
  1664                           
  1665                           ;parcheggio.c: 286: }
  1666                           ;parcheggio.c: 287: LATBbits.LATB4 = 1;
  1667  004B6C  888A               	bsf	3978,4,c	;volatile
  1668                           
  1669                           ;parcheggio.c: 288: } else {
  1670  004B6E  D027               	goto	l6548
  1671  004B70                     l748:
  1672                           
  1673                           ;parcheggio.c: 289: LATBbits.LATB4 = 0;
  1674  004B70  988A               	bcf	3978,4,c	;volatile
  1675                           
  1676                           ;parcheggio.c: 290: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  1677  004B72  EE20  F02C         	lfsr	2,_sensor_distance+2	;volatile
  1678  004B76  CFDE F1BE          	movff	postinc2,??_park_search
  1679  004B7A  CFDD F1BF          	movff	postdec2,??_park_search+1
  1680  004B7E  0101               	movlb	1	; () banked
  1681  004B80  1FBE               	comf	??_park_search& (0+255),f,b
  1682  004B82  1FBF               	comf	(??_park_search+1)& (0+255),f,b
  1683  004B84  4BBE               	infsnz	??_park_search& (0+255),f,b
  1684  004B86  2BBF               	incf	(??_park_search+1)& (0+255),f,b
  1685  004B88  502A               	movf	_sensor_distance,w,c	;volatile
  1686  004B8A  0101               	movlb	1	; () banked
  1687  004B8C  25BE               	addwf	??_park_search& (0+255),w,b
  1688  004B8E  0100               	movlb	0	; () banked
  1689  004B90  6F77               	movwf	abs@a& (0+255),b
  1690  004B92  502B               	movf	_sensor_distance+1,w,c	;volatile
  1691  004B94  0101               	movlb	1	; () banked
  1692  004B96  21BF               	addwfc	(??_park_search+1)& (0+255),w,b
  1693  004B98  0100               	movlb	0	; () banked
  1694  004B9A  6F78               	movwf	(abs@a+1)& (0+255),b
  1695  004B9C  ECC6  F02E         	call	_abs	;wreg free
  1696  004BA0  C077  F081         	movff	?_abs,___awtofl@c
  1697  004BA4  C078  F082         	movff	?_abs+1,___awtofl@c+1
  1698  004BA8  ECDE  F02D         	call	___awtofl	;wreg free
  1699  004BAC  C081  F0D7         	movff	?___awtofl,_alignment_gap	;volatile
  1700  004BB0  C082  F0D8         	movff	?___awtofl+1,_alignment_gap+1	;volatile
  1701  004BB4  C083  F0D9         	movff	?___awtofl+2,_alignment_gap+2	;volatile
  1702  004BB8  C084  F0DA         	movff	?___awtofl+3,_alignment_gap+3	;volatile
  1703  004BBC  D000               	goto	l6548
  1704  004BBE                     l6548:
  1705                           
  1706                           ;parcheggio.c: 291: }
  1707                           ;parcheggio.c: 293: if ((sensor_distance[0] < 50) && (request_sent == 1)&&(sensor_distan
      +                          ce[1] < 50)) {
  1708  004BBE  502B               	movf	_sensor_distance+1,w,c	;volatile
  1709  004BC0  E12B               	bnz	l6560
  1710  004BC2  0E32               	movlw	50
  1711  004BC4  5C2A               	subwf	_sensor_distance,w,c	;volatile
  1712  004BC6  B0D8               	btfsc	status,0,c
  1713  004BC8  D027               	goto	l6560
  1714  004BCA  A852               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1715  004BCC  D025               	goto	l6560
  1716  004BCE  502D               	movf	_sensor_distance+3,w,c	;volatile
  1717  004BD0  E123               	bnz	l6560
  1718  004BD2  0E32               	movlw	50
  1719  004BD4  5C2C               	subwf	_sensor_distance+2,w,c	;volatile
  1720  004BD6  B0D8               	btfsc	status,0,c
  1721  004BD8  D01F               	goto	l6560
  1722                           
  1723                           ;parcheggio.c: 294: request_sent = 0;
  1724  004BDA  9852               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1725                           
  1726                           ;parcheggio.c: 295: while (!CANisTxReady());
  1727  004BDC  D000               	goto	l6556
  1728  004BDE                     l6556:
  1729  004BDE  ECF0  F02E         	call	_CANisTxReady	;wreg free
  1730  004BE2  0900               	iorlw	0
  1731  004BE4  B4D8               	btfsc	status,2,c
  1732  004BE6  D7FB               	goto	l6556
  1733                           
  1734                           ;parcheggio.c: 296: CANsendMessage(0b00000001001, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1735  004BE8  0E09               	movlw	9
  1736  004BEA  0100               	movlb	0	; () banked
  1737  004BEC  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1738  004BEE  0E00               	movlw	0
  1739  004BF0  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1740  004BF2  0E00               	movlw	0
  1741  004BF4  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1742  004BF6  0E00               	movlw	0
  1743  004BF8  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1744  004BFA  0E55               	movlw	low _data
  1745  004BFC  0100               	movlb	0	; () banked
  1746  004BFE  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1747  004C00  0E01               	movlw	high _data
  1748  004C02  0100               	movlb	0	; () banked
  1749  004C04  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1750  004C06  0E08               	movlw	8
  1751  004C08  0100               	movlb	0	; () banked
  1752  004C0A  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1753  004C0C  0EFC               	movlw	252
  1754  004C0E  0100               	movlb	0	; () banked
  1755  004C10  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1756  004C12  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1757  004C16  D000               	goto	l6560
  1758  004C18                     l6560:
  1759                           
  1760                           ;parcheggio.c: 297: }
  1761                           ;parcheggio.c: 299: if (distance_received == 1) {
  1762  004C18  AC51               	btfss	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1763  004C1A  D052               	goto	l746
  1764                           
  1765                           ;parcheggio.c: 300: if (distance_average > 65) {
  1766  004C1C  0101               	movlb	1	; () banked
  1767  004C1E  513F               	movf	(_distance_average+1)& (0+255),w,b	;volatile
  1768  004C20  E105               	bnz	u8240
  1769  004C22  0E42               	movlw	66
  1770  004C24  0101               	movlb	1	; () banked
  1771  004C26  5D3E               	subwf	_distance_average& (0+255),w,b	;volatile
  1772  004C28  A0D8               	btfss	status,0,c
  1773  004C2A  D047               	goto	l759
  1774  004C2C                     u8240:
  1775                           
  1776                           ; BSR set to: 1
  1777                           ;parcheggio.c: 301: PORTBbits.RB5 = 1;
  1778  004C2C  8A81               	bsf	3969,5,c	;volatile
  1779                           
  1780                           ; BSR set to: 1
  1781                           ;parcheggio.c: 302: data[0] = 1;
  1782  004C2E  0E01               	movlw	1
  1783  004C30  0101               	movlb	1	; () banked
  1784  004C32  6F55               	movwf	_data& (0+255),b	;volatile
  1785                           
  1786                           ; BSR set to: 1
  1787                           ;parcheggio.c: 303: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  1788  004C34  0E0D               	movlw	13
  1789  004C36  0100               	movlb	0	; () banked
  1790  004C38  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1791  004C3A  0E00               	movlw	0
  1792  004C3C  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1793  004C3E  0E00               	movlw	0
  1794  004C40  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1795  004C42  0E00               	movlw	0
  1796  004C44  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1797  004C46  0E55               	movlw	low _data
  1798  004C48  0100               	movlb	0	; () banked
  1799  004C4A  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1800  004C4C  0E01               	movlw	high _data
  1801  004C4E  0100               	movlb	0	; () banked
  1802  004C50  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1803  004C52  0E01               	movlw	1
  1804  004C54  0100               	movlb	0	; () banked
  1805  004C56  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1806  004C58  0EBC               	movlw	188
  1807  004C5A  0100               	movlb	0	; () banked
  1808  004C5C  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1809  004C5E  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1810                           
  1811                           ;parcheggio.c: 304: if ((request_sent1 == 0)&&(sensor_distance[0] < 40)) {
  1812  004C62  BA52               	btfsc	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1813  004C64  D02D               	goto	l746
  1814  004C66  502B               	movf	_sensor_distance+1,w,c	;volatile
  1815  004C68  E12B               	bnz	l746
  1816  004C6A  0E28               	movlw	40
  1817  004C6C  5C2A               	subwf	_sensor_distance,w,c	;volatile
  1818  004C6E  B0D8               	btfsc	status,0,c
  1819  004C70  D027               	goto	l746
  1820                           
  1821                           ;parcheggio.c: 305: data_test[0] = 50;
  1822  004C72  0E32               	movlw	50
  1823  004C74  0101               	movlb	1	; () banked
  1824  004C76  6F7D               	movwf	_data_test& (0+255),b	;volatile
  1825                           
  1826                           ; BSR set to: 1
  1827                           ;parcheggio.c: 306: asd = 1;
  1828  004C78  8451               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  1829                           
  1830                           ; BSR set to: 1
  1831                           
  1832                           ;parcheggio.c: 307: while (!CANisTxReady());
  1833  004C7A  D000               	goto	l6578
  1834  004C7C                     l6578:
  1835  004C7C  ECF0  F02E         	call	_CANisTxReady	;wreg free
  1836  004C80  0900               	iorlw	0
  1837  004C82  B4D8               	btfsc	status,2,c
  1838  004C84  D7FB               	goto	l6578
  1839                           
  1840                           ;parcheggio.c: 308: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1841  004C86  0E0F               	movlw	15
  1842  004C88  0100               	movlb	0	; () banked
  1843  004C8A  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1844  004C8C  0E00               	movlw	0
  1845  004C8E  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1846  004C90  0E00               	movlw	0
  1847  004C92  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1848  004C94  0E00               	movlw	0
  1849  004C96  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1850  004C98  0E7D               	movlw	low _data_test
  1851  004C9A  0100               	movlb	0	; () banked
  1852  004C9C  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1853  004C9E  0E01               	movlw	high _data_test
  1854  004CA0  0100               	movlb	0	; () banked
  1855  004CA2  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1856  004CA4  0E08               	movlw	8
  1857  004CA6  0100               	movlb	0	; () banked
  1858  004CA8  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1859  004CAA  0EBC               	movlw	188
  1860  004CAC  0100               	movlb	0	; () banked
  1861  004CAE  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1862  004CB0  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1863                           
  1864                           ;parcheggio.c: 310: distance_received1 = 0;
  1865  004CB4  9E51               	bcf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
  1866                           
  1867                           ;parcheggio.c: 311: request_sent1 = 1;
  1868  004CB6  8A52               	bsf	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1869                           
  1870                           ;parcheggio.c: 312: }
  1871                           ;parcheggio.c: 313: } else {
  1872  004CB8  D003               	goto	l746
  1873  004CBA                     l759:
  1874                           
  1875                           ; BSR set to: 1
  1876                           ;parcheggio.c: 314: distance_received = 0;
  1877  004CBA  9C51               	bcf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1878                           
  1879                           ;parcheggio.c: 315: PORTBbits.RB5 = 0;
  1880  004CBC  9A81               	bcf	3969,5,c	;volatile
  1881                           
  1882                           ; BSR set to: 1
  1883  004CBE  D000               	goto	l746
  1884  004CC0                     l746:
  1885  004CC0  A251               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1886  004CC2  0012               	return	
  1887  004CC4  BA81               	btfsc	3969,5,c	;volatile
  1888  004CC6  0012               	return	
  1889  004CC8  D71E               	goto	l6528
  1890  004CCA  0012               	return	
  1891  004CCC  0012               	return		;funcret
  1892  004CCE                     __end_of_park_search:
  1893                           	opt stack 0
  1894                           tblptru	equ	0xFF8
  1895                           tblptrh	equ	0xFF7
  1896                           tblptrl	equ	0xFF6
  1897                           tablat	equ	0xFF5
  1898                           postinc0	equ	0xFEE
  1899                           wreg	equ	0xFE8
  1900                           postdec1	equ	0xFE5
  1901                           fsr1l	equ	0xFE1
  1902                           postinc2	equ	0xFDE
  1903                           postdec2	equ	0xFDD
  1904                           status	equ	0xFD8
  1905                           
  1906 ;; *************** function _park_routine *****************
  1907 ;; Defined at:
  1908 ;;		line 321 in file "parcheggio.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;		None
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;		None
  1913 ;; Return value:  Size  Location     Type
  1914 ;;		None               void
  1915 ;; Registers used:
  1916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1923 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  1924 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1925 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  1926 ;;Total ram usage:       10 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; Hardware stack levels required when called:   11
  1929 ;; This function calls:
  1930 ;;		_CANisTxReady
  1931 ;;		_CANsendMessage
  1932 ;;		___fladd
  1933 ;;		___flneg
  1934 ;;		___fltol
  1935 ;;		___lwtofl
  1936 ;;		_can_send
  1937 ;;		_delay_ms
  1938 ;;		_delay_s
  1939 ;;		_matematica
  1940 ;;		_parallelo
  1941 ;; This function is called by:
  1942 ;;		_main
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text2
  1947  003178                     __ptext2:
  1948                           	opt stack 0
  1949  003178                     _park_routine:
  1950                           	opt stack 19
  1951                           
  1952                           ;parcheggio.c: 322: avvicinamento = 0;
  1953                           
  1954                           ;incstack = 0
  1955  003178  9651               	bcf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  1956                           
  1957                           ;parcheggio.c: 323: data_correction[0] = 0;
  1958  00317A  0E00               	movlw	0
  1959  00317C  0101               	movlb	1	; () banked
  1960  00317E  6F65               	movwf	_data_correction& (0+255),b	;volatile
  1961                           
  1962                           ; BSR set to: 1
  1963                           ;parcheggio.c: 325: parallelo();
  1964  003180  EC2E  F021         	call	_parallelo	;wreg free
  1965                           
  1966                           ;parcheggio.c: 327: while ((asd == 1)&&(PORTBbits.RB5 == 1) && (activation == 1)) {
  1967  003184  D02F               	goto	l6608
  1968  003186                     l6594:
  1969                           
  1970                           ;parcheggio.c: 328: delay_ms(50);
  1971  003186  0E00               	movlw	0
  1972  003188  0100               	movlb	0	; () banked
  1973  00318A  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1974  00318C  0E32               	movlw	50
  1975  00318E  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1976  003190  EC41  F02E         	call	_delay_ms	;wreg free
  1977                           
  1978                           ;parcheggio.c: 329: PORTBbits.RB6 = ~PORTBbits.RB6;
  1979  003194  7C81               	btg	3969,6,c	;volatile
  1980                           
  1981                           ;parcheggio.c: 330: parallelo();
  1982  003196  EC2E  F021         	call	_parallelo	;wreg free
  1983                           
  1984                           ;parcheggio.c: 331: if (data_correction[0] > 30) {
  1985  00319A  0E1E               	movlw	30
  1986  00319C  0101               	movlb	1	; () banked
  1987  00319E  6565               	cpfsgt	_data_correction& (0+255),b	;volatile
  1988  0031A0  D004               	goto	l6604
  1989                           
  1990                           ; BSR set to: 1
  1991                           ;parcheggio.c: 332: data_correction[0] = 0;
  1992  0031A2  0E00               	movlw	0
  1993  0031A4  0101               	movlb	1	; () banked
  1994  0031A6  6F65               	movwf	_data_correction& (0+255),b	;volatile
  1995                           
  1996                           ; BSR set to: 1
  1997                           
  1998                           ; BSR set to: 1
  1999                           ;parcheggio.c: 333: }
  2000                           ;parcheggio.c: 334: while (!CANisTxReady());
  2001  0031A8  D000               	goto	l6604
  2002  0031AA                     l6604:
  2003  0031AA  ECF0  F02E         	call	_CANisTxReady	;wreg free
  2004  0031AE  0900               	iorlw	0
  2005  0031B0  B4D8               	btfsc	status,2,c
  2006  0031B2  D7FB               	goto	l6604
  2007                           
  2008                           ;parcheggio.c: 335: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2009  0031B4  0E10               	movlw	16
  2010  0031B6  0100               	movlb	0	; () banked
  2011  0031B8  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2012  0031BA  0E00               	movlw	0
  2013  0031BC  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2014  0031BE  0E00               	movlw	0
  2015  0031C0  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2016  0031C2  0E00               	movlw	0
  2017  0031C4  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2018  0031C6  0E65               	movlw	low _data_correction
  2019  0031C8  0100               	movlb	0	; () banked
  2020  0031CA  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2021  0031CC  0E01               	movlw	high _data_correction
  2022  0031CE  0100               	movlb	0	; () banked
  2023  0031D0  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2024  0031D2  0E08               	movlw	8
  2025  0031D4  0100               	movlb	0	; () banked
  2026  0031D6  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2027  0031D8  0EBC               	movlw	188
  2028  0031DA  0100               	movlb	0	; () banked
  2029  0031DC  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2030  0031DE  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2031  0031E2  D000               	goto	l6608
  2032  0031E4                     l6608:
  2033  0031E4  B451               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2034  0031E6  AA81               	btfss	3969,5,c	;volatile
  2035  0031E8  D002               	goto	l779
  2036  0031EA  B251               	btfsc	_activation/(0+8),_activation& (0+7),c	;volatile
  2037  0031EC  D7CC               	goto	l6594
  2038  0031EE                     l779:
  2039                           
  2040                           ;parcheggio.c: 336: }
  2041                           ;parcheggio.c: 338: if ((PORTBbits.RB5 == 1) && (activation == 1)) {
  2042  0031EE  BA81               	btfsc	3969,5,c	;volatile
  2043  0031F0  A251               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2044  0031F2  D030               	goto	l6628
  2045                           
  2046                           ;parcheggio.c: 339: PORTBbits.RB6 = 0;
  2047  0031F4  9C81               	bcf	3969,6,c	;volatile
  2048                           
  2049                           ;parcheggio.c: 340: data[0] = 2;
  2050  0031F6  0E02               	movlw	2
  2051  0031F8  0101               	movlb	1	; () banked
  2052  0031FA  6F55               	movwf	_data& (0+255),b	;volatile
  2053                           
  2054                           ; BSR set to: 1
  2055                           ;parcheggio.c: 341: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  2056  0031FC  0E0D               	movlw	13
  2057  0031FE  0100               	movlb	0	; () banked
  2058  003200  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2059  003202  0E00               	movlw	0
  2060  003204  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2061  003206  0E00               	movlw	0
  2062  003208  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2063  00320A  0E00               	movlw	0
  2064  00320C  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2065  00320E  0E55               	movlw	low _data
  2066  003210  0100               	movlb	0	; () banked
  2067  003212  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2068  003214  0E01               	movlw	high _data
  2069  003216  0100               	movlb	0	; () banked
  2070  003218  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2071  00321A  0E01               	movlw	1
  2072  00321C  0100               	movlb	0	; () banked
  2073  00321E  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2074  003220  0EBC               	movlw	188
  2075  003222  0100               	movlb	0	; () banked
  2076  003224  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2077  003226  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2078                           
  2079                           ;parcheggio.c: 342: }
  2080                           ;parcheggio.c: 344: while ((start_operation != 1)&&(activation == 1)) {
  2081  00322A  D014               	goto	l6628
  2082  00322C                     l782:
  2083                           
  2084                           ;parcheggio.c: 345: if (first == 0) {
  2085  00322C  B252               	btfsc	_first/(0+8),_first& (0+7),c	;volatile
  2086  00322E  D012               	goto	l6628
  2087                           
  2088                           ;parcheggio.c: 346: set_speed = 0;
  2089  003230  0E00               	movlw	0
  2090  003232  0100               	movlb	0	; () banked
  2091  003234  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2092  003236  0E00               	movlw	0
  2093  003238  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2094                           
  2095                           ;parcheggio.c: 347: data_steering[0] = 90;
  2096  00323A  0E5A               	movlw	90
  2097  00323C  0101               	movlb	1	; () banked
  2098  00323E  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2099                           
  2100                           ;parcheggio.c: 348: data_brake [0] = 0;
  2101  003240  0E00               	movlw	0
  2102  003242  0101               	movlb	1	; () banked
  2103  003244  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2104                           
  2105                           ;parcheggio.c: 349: data_brake [1] = 1;
  2106  003246  0E01               	movlw	1
  2107  003248  0101               	movlb	1	; () banked
  2108  00324A  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2109                           
  2110                           ; BSR set to: 1
  2111                           ;parcheggio.c: 350: can_send();
  2112  00324C  EC1F  F02A         	call	_can_send	;wreg free
  2113                           
  2114                           ;parcheggio.c: 351: first = 1;
  2115  003250  8252               	bsf	_first/(0+8),_first& (0+7),c	;volatile
  2116  003252  D000               	goto	l6628
  2117  003254                     l6628:
  2118  003254  AC52               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  2119  003256  A251               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2120  003258  D1CD               	goto	l6738
  2121  00325A  D7E8               	goto	l782
  2122                           
  2123                           ;parcheggio.c: 352: }
  2124                           ;parcheggio.c: 353: }
  2125                           ;parcheggio.c: 355: while ((PORTBbits.RB5 == 1) && (activation == 1)&&(start_operation =
      +                          = 1)) {
  2126  00325C  D1CB               	goto	l6738
  2127  00325E                     l788:
  2128                           
  2129                           ;parcheggio.c: 356: LATBbits.LATB4 = 1;
  2130  00325E  888A               	bsf	3978,4,c	;volatile
  2131                           
  2132                           ;parcheggio.c: 358: bordo = (sensor_distance[1]/ 2);
  2133  003260  90D8               	bcf	status,0,c
  2134  003262  302D               	rrcf	_sensor_distance+3,w,c	;volatile
  2135  003264  0101               	movlb	1	; () banked
  2136  003266  6FE2               	movwf	??_park_routine& (0+255),b
  2137  003268  302C               	rrcf	_sensor_distance+2,w,c	;volatile
  2138  00326A  0100               	movlb	0	; () banked
  2139  00326C  6F81               	movwf	___lwtofl@c& (0+255),b
  2140  00326E  C1E2  F082         	movff	??_park_routine,___lwtofl@c+1
  2141  003272  EC96  F02E         	call	___lwtofl	;wreg free
  2142  003276  C081  F12C         	movff	?___lwtofl,_bordo	;volatile
  2143  00327A  C082  F12D         	movff	?___lwtofl+1,_bordo+1	;volatile
  2144  00327E  C083  F12E         	movff	?___lwtofl+2,_bordo+2	;volatile
  2145  003282  C084  F12F         	movff	?___lwtofl+3,_bordo+3	;volatile
  2146                           
  2147                           ;parcheggio.c: 359: matematica();
  2148  003286  EC60  F013         	call	_matematica	;wreg free
  2149                           
  2150                           ;parcheggio.c: 361: set_speed = 0;
  2151  00328A  0E00               	movlw	0
  2152  00328C  0100               	movlb	0	; () banked
  2153  00328E  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2154  003290  0E00               	movlw	0
  2155  003292  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;parcheggio.c: 362: data_steering[0] = 90;
  2159  003294  0E5A               	movlw	90
  2160  003296  0101               	movlb	1	; () banked
  2161  003298  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2162                           
  2163                           ; BSR set to: 1
  2164                           ;parcheggio.c: 363: data_brake [0] = 0;
  2165  00329A  0E00               	movlw	0
  2166  00329C  0101               	movlb	1	; () banked
  2167  00329E  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2168                           
  2169                           ; BSR set to: 1
  2170                           ;parcheggio.c: 364: data_brake [1] = 1;
  2171  0032A0  0E01               	movlw	1
  2172  0032A2  0101               	movlb	1	; () banked
  2173  0032A4  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2174                           
  2175                           ; BSR set to: 1
  2176                           ;parcheggio.c: 365: can_send();
  2177  0032A6  EC1F  F02A         	call	_can_send	;wreg free
  2178                           
  2179                           ;parcheggio.c: 367: delay_s(1);
  2180  0032AA  0E01               	movlw	1
  2181  0032AC  ECAF  F02E         	call	_delay_s
  2182                           
  2183                           ;parcheggio.c: 369: data_brake [0] = 3;
  2184  0032B0  0E03               	movlw	3
  2185  0032B2  0101               	movlb	1	; () banked
  2186  0032B4  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2187                           
  2188                           ; BSR set to: 1
  2189                           ;parcheggio.c: 370: data_brake [1] = 1;
  2190  0032B6  0E01               	movlw	1
  2191  0032B8  0101               	movlb	1	; () banked
  2192  0032BA  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2193                           
  2194                           ; BSR set to: 1
  2195                           ;parcheggio.c: 372: set_speed = 300;
  2196  0032BC  0E01               	movlw	1
  2197  0032BE  0100               	movlb	0	; () banked
  2198  0032C0  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2199  0032C2  0E2C               	movlw	44
  2200  0032C4  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;parcheggio.c: 373: dir = 0;
  2204  0032C6  9851               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;parcheggio.c: 374: data_steering[0] = 90;
  2208  0032C8  0E5A               	movlw	90
  2209  0032CA  0101               	movlb	1	; () banked
  2210  0032CC  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2211                           
  2212                           ; BSR set to: 1
  2213                           ;parcheggio.c: 375: data_test[0] = ((60 + Pmin + 5)-(n + 15));
  2214  0032CE  0E00               	movlw	0
  2215  0032D0  0100               	movlb	0	; () banked
  2216  0032D2  6FA3               	movwf	___fladd@f2& (0+255),b
  2217  0032D4  0E00               	movlw	0
  2218  0032D6  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2219  0032D8  0E70               	movlw	112
  2220  0032DA  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2221  0032DC  0E41               	movlw	65
  2222  0032DE  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2223  0032E0  C130  F09F         	movff	_n,___fladd@f1	;volatile
  2224  0032E4  C131  F0A0         	movff	_n+1,___fladd@f1+1	;volatile
  2225  0032E8  C132  F0A1         	movff	_n+2,___fladd@f1+2	;volatile
  2226  0032EC  C133  F0A2         	movff	_n+3,___fladd@f1+3	;volatile
  2227  0032F0  ECF8  F01F         	call	___fladd	;wreg free
  2228  0032F4  C09F  F0AB         	movff	?___fladd,___flneg@f1
  2229  0032F8  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  2230  0032FC  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  2231  003300  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  2232  003304  EC23  F02E         	call	___flneg	;wreg free
  2233  003308  C0AB  F1E4         	movff	?___flneg,_park_routine$3666
  2234  00330C  C0AC  F1E5         	movff	?___flneg+1,_park_routine$3666+1
  2235  003310  C0AD  F1E6         	movff	?___flneg+2,_park_routine$3666+2
  2236  003314  C0AE  F1E7         	movff	?___flneg+3,_park_routine$3666+3
  2237                           
  2238                           ;parcheggio.c: 375: data_test[0] = ((60 + Pmin + 5)-(n + 15));
  2239  003318  C120  F0A3         	movff	_Pmin,___fladd@f2	;volatile
  2240  00331C  C121  F0A4         	movff	_Pmin+1,___fladd@f2+1	;volatile
  2241  003320  C122  F0A5         	movff	_Pmin+2,___fladd@f2+2	;volatile
  2242  003324  C123  F0A6         	movff	_Pmin+3,___fladd@f2+3	;volatile
  2243  003328  C1E4  F09F         	movff	_park_routine$3666,___fladd@f1
  2244  00332C  C1E5  F0A0         	movff	_park_routine$3666+1,___fladd@f1+1
  2245  003330  C1E6  F0A1         	movff	_park_routine$3666+2,___fladd@f1+2
  2246  003334  C1E7  F0A2         	movff	_park_routine$3666+3,___fladd@f1+3
  2247  003338  ECF8  F01F         	call	___fladd	;wreg free
  2248  00333C  C09F  F1E8         	movff	?___fladd,_park_routine$3667
  2249  003340  C0A0  F1E9         	movff	?___fladd+1,_park_routine$3667+1
  2250  003344  C0A1  F1EA         	movff	?___fladd+2,_park_routine$3667+2
  2251  003348  C0A2  F1EB         	movff	?___fladd+3,_park_routine$3667+3
  2252                           
  2253                           ;parcheggio.c: 375: data_test[0] = ((60 + Pmin + 5)-(n + 15));
  2254  00334C  0E00               	movlw	0
  2255  00334E  0100               	movlb	0	; () banked
  2256  003350  6FA3               	movwf	___fladd@f2& (0+255),b
  2257  003352  0E00               	movlw	0
  2258  003354  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2259  003356  0E82               	movlw	130
  2260  003358  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2261  00335A  0E42               	movlw	66
  2262  00335C  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2263  00335E  C1E8  F09F         	movff	_park_routine$3667,___fladd@f1
  2264  003362  C1E9  F0A0         	movff	_park_routine$3667+1,___fladd@f1+1
  2265  003366  C1EA  F0A1         	movff	_park_routine$3667+2,___fladd@f1+2
  2266  00336A  C1EB  F0A2         	movff	_park_routine$3667+3,___fladd@f1+3
  2267  00336E  ECF8  F01F         	call	___fladd	;wreg free
  2268  003372  C09F  F0AF         	movff	?___fladd,___fltol@f1
  2269  003376  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  2270  00337A  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  2271  00337E  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  2272  003382  EC05  F029         	call	___fltol	;wreg free
  2273  003386  0100               	movlb	0	; () banked
  2274  003388  51AF               	movf	?___fltol& (0+255),w,b
  2275  00338A  0101               	movlb	1	; () banked
  2276  00338C  6F7D               	movwf	_data_test& (0+255),b	;volatile
  2277                           
  2278                           ; BSR set to: 1
  2279                           ;parcheggio.c: 376: asd = 1;
  2280  00338E  8451               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2281                           
  2282                           ; BSR set to: 1
  2283                           
  2284                           ;parcheggio.c: 377: while (!CANisTxReady());
  2285  003390  D000               	goto	l6666
  2286  003392                     l6666:
  2287  003392  ECF0  F02E         	call	_CANisTxReady	;wreg free
  2288  003396  0900               	iorlw	0
  2289  003398  B4D8               	btfsc	status,2,c
  2290  00339A  D7FB               	goto	l6666
  2291                           
  2292                           ;parcheggio.c: 378: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2293  00339C  0E0F               	movlw	15
  2294  00339E  0100               	movlb	0	; () banked
  2295  0033A0  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2296  0033A2  0E00               	movlw	0
  2297  0033A4  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2298  0033A6  0E00               	movlw	0
  2299  0033A8  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2300  0033AA  0E00               	movlw	0
  2301  0033AC  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2302  0033AE  0E7D               	movlw	low _data_test
  2303  0033B0  0100               	movlb	0	; () banked
  2304  0033B2  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2305  0033B4  0E01               	movlw	high _data_test
  2306  0033B6  0100               	movlb	0	; () banked
  2307  0033B8  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2308  0033BA  0E08               	movlw	8
  2309  0033BC  0100               	movlb	0	; () banked
  2310  0033BE  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2311  0033C0  0EBC               	movlw	188
  2312  0033C2  0100               	movlb	0	; () banked
  2313  0033C4  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2314  0033C6  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2315                           
  2316                           ;parcheggio.c: 379: can_send();
  2317  0033CA  EC1F  F02A         	call	_can_send	;wreg free
  2318                           
  2319                           ;parcheggio.c: 381: while (asd == 1);
  2320  0033CE  D000               	goto	l792
  2321  0033D0                     l792:
  2322  0033D0  B451               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2323  0033D2  D7FE               	goto	l792
  2324                           
  2325                           ;parcheggio.c: 383: set_speed = 0;
  2326  0033D4  0E00               	movlw	0
  2327  0033D6  0100               	movlb	0	; () banked
  2328  0033D8  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2329  0033DA  0E00               	movlw	0
  2330  0033DC  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2331                           
  2332                           ;parcheggio.c: 384: data_steering[0] = 90;
  2333  0033DE  0E5A               	movlw	90
  2334  0033E0  0101               	movlb	1	; () banked
  2335  0033E2  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2336                           
  2337                           ;parcheggio.c: 385: data_brake [0] = 0;
  2338  0033E4  0E00               	movlw	0
  2339  0033E6  0101               	movlb	1	; () banked
  2340  0033E8  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2341                           
  2342                           ;parcheggio.c: 386: data_brake [1] = 1;
  2343  0033EA  0E01               	movlw	1
  2344  0033EC  0101               	movlb	1	; () banked
  2345  0033EE  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2346                           
  2347                           ; BSR set to: 1
  2348                           ;parcheggio.c: 387: can_send();
  2349  0033F0  EC1F  F02A         	call	_can_send	;wreg free
  2350                           
  2351                           ;parcheggio.c: 389: delay_s(1);
  2352  0033F4  0E01               	movlw	1
  2353  0033F6  ECAF  F02E         	call	_delay_s
  2354                           
  2355                           ;parcheggio.c: 391: data_brake [0] = 3;
  2356  0033FA  0E03               	movlw	3
  2357  0033FC  0101               	movlb	1	; () banked
  2358  0033FE  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2359                           
  2360                           ; BSR set to: 1
  2361                           ;parcheggio.c: 392: data_brake [1] = 1;
  2362  003400  0E01               	movlw	1
  2363  003402  0101               	movlb	1	; () banked
  2364  003404  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2365                           
  2366                           ; BSR set to: 1
  2367                           ;parcheggio.c: 393: set_speed = 300;
  2368  003406  0E01               	movlw	1
  2369  003408  0100               	movlb	0	; () banked
  2370  00340A  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2371  00340C  0E2C               	movlw	44
  2372  00340E  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;parcheggio.c: 394: dir = 0;
  2376  003410  9851               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;parcheggio.c: 395: data_steering[0] = 180;
  2380  003412  0EB4               	movlw	180
  2381  003414  0101               	movlb	1	; () banked
  2382  003416  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2383                           
  2384                           ; BSR set to: 1
  2385                           ;parcheggio.c: 396: data_test[0] = prima_sterzata;
  2386  003418  C138  F0AF         	movff	_prima_sterzata,___fltol@f1	;volatile
  2387  00341C  C139  F0B0         	movff	_prima_sterzata+1,___fltol@f1+1	;volatile
  2388  003420  C13A  F0B1         	movff	_prima_sterzata+2,___fltol@f1+2	;volatile
  2389  003424  C13B  F0B2         	movff	_prima_sterzata+3,___fltol@f1+3	;volatile
  2390  003428  EC05  F029         	call	___fltol	;wreg free
  2391  00342C  0100               	movlb	0	; () banked
  2392  00342E  51AF               	movf	?___fltol& (0+255),w,b
  2393  003430  0101               	movlb	1	; () banked
  2394  003432  6F7D               	movwf	_data_test& (0+255),b	;volatile
  2395                           
  2396                           ; BSR set to: 1
  2397                           ;parcheggio.c: 397: asd = 1;
  2398  003434  8451               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2399                           
  2400                           ; BSR set to: 1
  2401                           
  2402                           ;parcheggio.c: 398: while (!CANisTxReady());
  2403  003436  D000               	goto	l6690
  2404  003438                     l6690:
  2405  003438  ECF0  F02E         	call	_CANisTxReady	;wreg free
  2406  00343C  0900               	iorlw	0
  2407  00343E  B4D8               	btfsc	status,2,c
  2408  003440  D7FB               	goto	l6690
  2409                           
  2410                           ;parcheggio.c: 399: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2411  003442  0E0F               	movlw	15
  2412  003444  0100               	movlb	0	; () banked
  2413  003446  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2414  003448  0E00               	movlw	0
  2415  00344A  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2416  00344C  0E00               	movlw	0
  2417  00344E  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2418  003450  0E00               	movlw	0
  2419  003452  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2420  003454  0E7D               	movlw	low _data_test
  2421  003456  0100               	movlb	0	; () banked
  2422  003458  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2423  00345A  0E01               	movlw	high _data_test
  2424  00345C  0100               	movlb	0	; () banked
  2425  00345E  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2426  003460  0E08               	movlw	8
  2427  003462  0100               	movlb	0	; () banked
  2428  003464  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2429  003466  0EBC               	movlw	188
  2430  003468  0100               	movlb	0	; () banked
  2431  00346A  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2432  00346C  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2433                           
  2434                           ;parcheggio.c: 400: can_send();
  2435  003470  EC1F  F02A         	call	_can_send	;wreg free
  2436                           
  2437                           ;parcheggio.c: 402: while (asd == 1);
  2438  003474  D000               	goto	l798
  2439  003476                     l798:
  2440  003476  B451               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2441  003478  D7FE               	goto	l798
  2442                           
  2443                           ;parcheggio.c: 404: set_speed = 300;
  2444  00347A  0E01               	movlw	1
  2445  00347C  0100               	movlb	0	; () banked
  2446  00347E  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2447  003480  0E2C               	movlw	44
  2448  003482  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2449                           
  2450                           ;parcheggio.c: 405: data_steering[0] = 0;
  2451  003484  0E00               	movlw	0
  2452  003486  0101               	movlb	1	; () banked
  2453  003488  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2454                           
  2455                           ; BSR set to: 1
  2456                           ;parcheggio.c: 406: asd = 1;
  2457  00348A  8451               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2458                           
  2459                           ; BSR set to: 1
  2460                           ;parcheggio.c: 407: data_test[0] = prima_sterzata + 9;
  2461  00348C  0E00               	movlw	0
  2462  00348E  0100               	movlb	0	; () banked
  2463  003490  6FA3               	movwf	___fladd@f2& (0+255),b
  2464  003492  0E00               	movlw	0
  2465  003494  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2466  003496  0E10               	movlw	16
  2467  003498  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2468  00349A  0E41               	movlw	65
  2469  00349C  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2470  00349E  C138  F09F         	movff	_prima_sterzata,___fladd@f1	;volatile
  2471  0034A2  C139  F0A0         	movff	_prima_sterzata+1,___fladd@f1+1	;volatile
  2472  0034A6  C13A  F0A1         	movff	_prima_sterzata+2,___fladd@f1+2	;volatile
  2473  0034AA  C13B  F0A2         	movff	_prima_sterzata+3,___fladd@f1+3	;volatile
  2474  0034AE  ECF8  F01F         	call	___fladd	;wreg free
  2475  0034B2  C09F  F0AF         	movff	?___fladd,___fltol@f1
  2476  0034B6  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  2477  0034BA  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  2478  0034BE  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  2479  0034C2  EC05  F029         	call	___fltol	;wreg free
  2480  0034C6  0100               	movlb	0	; () banked
  2481  0034C8  51AF               	movf	?___fltol& (0+255),w,b
  2482  0034CA  0101               	movlb	1	; () banked
  2483  0034CC  6F7D               	movwf	_data_test& (0+255),b	;volatile
  2484                           
  2485                           ; BSR set to: 1
  2486                           
  2487                           ;parcheggio.c: 408: while (!CANisTxReady());
  2488  0034CE  D000               	goto	l6700
  2489  0034D0                     l6700:
  2490  0034D0  ECF0  F02E         	call	_CANisTxReady	;wreg free
  2491  0034D4  0900               	iorlw	0
  2492  0034D6  B4D8               	btfsc	status,2,c
  2493  0034D8  D7FB               	goto	l6700
  2494                           
  2495                           ;parcheggio.c: 409: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2496  0034DA  0E0F               	movlw	15
  2497  0034DC  0100               	movlb	0	; () banked
  2498  0034DE  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2499  0034E0  0E00               	movlw	0
  2500  0034E2  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2501  0034E4  0E00               	movlw	0
  2502  0034E6  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2503  0034E8  0E00               	movlw	0
  2504  0034EA  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2505  0034EC  0E7D               	movlw	low _data_test
  2506  0034EE  0100               	movlb	0	; () banked
  2507  0034F0  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2508  0034F2  0E01               	movlw	high _data_test
  2509  0034F4  0100               	movlb	0	; () banked
  2510  0034F6  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2511  0034F8  0E08               	movlw	8
  2512  0034FA  0100               	movlb	0	; () banked
  2513  0034FC  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2514  0034FE  0EBC               	movlw	188
  2515  003500  0100               	movlb	0	; () banked
  2516  003502  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2517  003504  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2518                           
  2519                           ;parcheggio.c: 410: can_send();
  2520  003508  EC1F  F02A         	call	_can_send	;wreg free
  2521                           
  2522                           ;parcheggio.c: 412: while (asd == 1);
  2523  00350C  D000               	goto	l804
  2524  00350E                     l804:
  2525  00350E  B451               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2526  003510  D7FE               	goto	l804
  2527                           
  2528                           ;parcheggio.c: 414: data_brake [0] = 0;
  2529  003512  0E00               	movlw	0
  2530  003514  0101               	movlb	1	; () banked
  2531  003516  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2532                           
  2533                           ;parcheggio.c: 415: data_brake [1] = 1;
  2534  003518  0E01               	movlw	1
  2535  00351A  0101               	movlb	1	; () banked
  2536  00351C  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2537                           
  2538                           ;parcheggio.c: 416: set_speed = 0;
  2539  00351E  0E00               	movlw	0
  2540  003520  0100               	movlb	0	; () banked
  2541  003522  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2542  003524  0E00               	movlw	0
  2543  003526  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2544                           
  2545                           ;parcheggio.c: 417: data_steering[0] = 90;
  2546  003528  0E5A               	movlw	90
  2547  00352A  0101               	movlb	1	; () banked
  2548  00352C  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2549                           
  2550                           ; BSR set to: 1
  2551                           ;parcheggio.c: 418: can_send();
  2552  00352E  EC1F  F02A         	call	_can_send	;wreg free
  2553                           
  2554                           ;parcheggio.c: 420: delay_s(1);
  2555  003532  0E01               	movlw	1
  2556  003534  ECAF  F02E         	call	_delay_s
  2557                           
  2558                           ;parcheggio.c: 422: avvicinamento = 1;
  2559  003538  8651               	bsf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  2560                           
  2561                           ;parcheggio.c: 423: if (sensor_distance [6] > 20) {
  2562  00353A  5037               	movf	_sensor_distance+13,w,c	;volatile
  2563  00353C  E104               	bnz	u8460
  2564  00353E  0E15               	movlw	21
  2565  003540  5C36               	subwf	_sensor_distance+12,w,c	;volatile
  2566  003542  A0D8               	btfss	status,0,c
  2567  003544  D01A               	goto	l6722
  2568  003546                     u8460:
  2569                           
  2570                           ;parcheggio.c: 424: data_brake [0] = 3;
  2571  003546  0E03               	movlw	3
  2572  003548  0101               	movlb	1	; () banked
  2573  00354A  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2574                           
  2575                           ;parcheggio.c: 425: data_brake [1] = 1;
  2576  00354C  0E01               	movlw	1
  2577  00354E  0101               	movlb	1	; () banked
  2578  003550  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2579                           
  2580                           ;parcheggio.c: 426: set_speed = 300;
  2581  003552  0E01               	movlw	1
  2582  003554  0100               	movlb	0	; () banked
  2583  003556  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2584  003558  0E2C               	movlw	44
  2585  00355A  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2586                           
  2587                           ;parcheggio.c: 427: data_steering[0] = 90;
  2588  00355C  0E5A               	movlw	90
  2589  00355E  0101               	movlb	1	; () banked
  2590  003560  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2591                           
  2592                           ; BSR set to: 1
  2593                           ;parcheggio.c: 428: dir = 1;
  2594  003562  8851               	bsf	_dir/(0+8),_dir& (0+7),c	;volatile
  2595                           
  2596                           ; BSR set to: 1
  2597                           ;parcheggio.c: 429: can_send();
  2598  003564  EC1F  F02A         	call	_can_send	;wreg free
  2599                           
  2600                           ;parcheggio.c: 430: while (sensor_distance [6] > 20);
  2601  003568  D000               	goto	l6720
  2602  00356A                     l6720:
  2603  00356A  5037               	movf	_sensor_distance+13,w,c	;volatile
  2604  00356C  E1FE               	bnz	l6720
  2605  00356E  0E15               	movlw	21
  2606  003570  5C36               	subwf	_sensor_distance+12,w,c	;volatile
  2607  003572  A0D8               	btfss	status,0,c
  2608  003574  D002               	goto	l6722
  2609  003576  D7F9               	goto	l6720
  2610  003578  D000               	goto	l6722
  2611  00357A                     l6722:
  2612                           
  2613                           ;parcheggio.c: 431: }
  2614                           ;parcheggio.c: 432: data_brake [0] = 0;
  2615  00357A  0E00               	movlw	0
  2616  00357C  0101               	movlb	1	; () banked
  2617  00357E  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2618                           
  2619                           ;parcheggio.c: 433: data_brake [1] = 1;
  2620  003580  0E01               	movlw	1
  2621  003582  0101               	movlb	1	; () banked
  2622  003584  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2623                           
  2624                           ;parcheggio.c: 434: set_speed = 0;
  2625  003586  0E00               	movlw	0
  2626  003588  0100               	movlb	0	; () banked
  2627  00358A  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2628  00358C  0E00               	movlw	0
  2629  00358E  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2630                           
  2631                           ;parcheggio.c: 435: data_steering[0] = 90;
  2632  003590  0E5A               	movlw	90
  2633  003592  0101               	movlb	1	; () banked
  2634  003594  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2635                           
  2636                           ; BSR set to: 1
  2637                           ;parcheggio.c: 436: dir = 0;
  2638  003596  9851               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  2639                           
  2640                           ; BSR set to: 1
  2641                           ;parcheggio.c: 437: can_send();
  2642  003598  EC1F  F02A         	call	_can_send	;wreg free
  2643                           
  2644                           ;parcheggio.c: 439: delay_s(1);
  2645  00359C  0E01               	movlw	1
  2646  00359E  ECAF  F02E         	call	_delay_s
  2647                           
  2648                           ;parcheggio.c: 441: data[0] = 3;
  2649  0035A2  0E03               	movlw	3
  2650  0035A4  0101               	movlb	1	; () banked
  2651  0035A6  6F55               	movwf	_data& (0+255),b	;volatile
  2652                           
  2653                           ; BSR set to: 1
  2654                           
  2655                           ;parcheggio.c: 442: while (!CANisTxReady());
  2656  0035A8  D000               	goto	l6732
  2657  0035AA                     l6732:
  2658  0035AA  ECF0  F02E         	call	_CANisTxReady	;wreg free
  2659  0035AE  0900               	iorlw	0
  2660  0035B0  B4D8               	btfsc	status,2,c
  2661  0035B2  D7FB               	goto	l6732
  2662                           
  2663                           ;parcheggio.c: 443: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  2664  0035B4  0E0D               	movlw	13
  2665  0035B6  0100               	movlb	0	; () banked
  2666  0035B8  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2667  0035BA  0E00               	movlw	0
  2668  0035BC  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2669  0035BE  0E00               	movlw	0
  2670  0035C0  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2671  0035C2  0E00               	movlw	0
  2672  0035C4  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2673  0035C6  0E55               	movlw	low _data
  2674  0035C8  0100               	movlb	0	; () banked
  2675  0035CA  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2676  0035CC  0E01               	movlw	high _data
  2677  0035CE  0100               	movlb	0	; () banked
  2678  0035D0  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2679  0035D2  0E08               	movlw	8
  2680  0035D4  0100               	movlb	0	; () banked
  2681  0035D6  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2682  0035D8  0EBC               	movlw	188
  2683  0035DA  0100               	movlb	0	; () banked
  2684  0035DC  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2685  0035DE  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2686                           
  2687                           ;parcheggio.c: 444: delay_ms(100);
  2688  0035E2  0E00               	movlw	0
  2689  0035E4  0100               	movlb	0	; () banked
  2690  0035E6  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  2691  0035E8  0E64               	movlw	100
  2692  0035EA  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  2693  0035EC  EC41  F02E         	call	_delay_ms	;wreg free
  2694  0035F0  00FF               	reset		;# 
  2695  0035F2  D000               	goto	l6738
  2696  0035F4                     l6738:
  2697  0035F4  AA81               	btfss	3969,5,c	;volatile
  2698  0035F6  0012               	return	
  2699  0035F8  A251               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2700  0035FA  0012               	return	
  2701  0035FC  AC52               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  2702  0035FE  0012               	return	
  2703  003600  D62E               	goto	l788
  2704  003602  0012               	return	
  2705  003604  0012               	return		;funcret
  2706  003606                     __end_of_park_routine:
  2707                           	opt stack 0
  2708                           tblptru	equ	0xFF8
  2709                           tblptrh	equ	0xFF7
  2710                           tblptrl	equ	0xFF6
  2711                           tablat	equ	0xFF5
  2712                           postinc0	equ	0xFEE
  2713                           wreg	equ	0xFE8
  2714                           postdec1	equ	0xFE5
  2715                           fsr1l	equ	0xFE1
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           status	equ	0xFD8
  2719                           
  2720 ;; *************** function _parallelo *****************
  2721 ;; Defined at:
  2722 ;;		line 472 in file "parcheggio.c"
  2723 ;; Parameters:    Size  Location     Type
  2724 ;;		None
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;		None
  2727 ;; Return value:  Size  Location     Type
  2728 ;;		None               void
  2729 ;; Registers used:
  2730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2731 ;; Tracked objects:
  2732 ;;		On entry : 0/0
  2733 ;;		On exit  : 0/0
  2734 ;;		Unchanged: 0/0
  2735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2738 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2739 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2740 ;;Total ram usage:        2 bytes
  2741 ;; Hardware stack levels used:    1
  2742 ;; Hardware stack levels required when called:   10
  2743 ;; This function calls:
  2744 ;;		___awtofl
  2745 ;;		___fladd
  2746 ;;		___fldiv
  2747 ;;		___flge
  2748 ;;		___flmul
  2749 ;;		___fltol
  2750 ;;		_abs
  2751 ;;		_asin
  2752 ;;		_can_send
  2753 ;;		_sqrt
  2754 ;; This function is called by:
  2755 ;;		_park_search
  2756 ;;		_park_routine
  2757 ;; This function uses a non-reentrant model
  2758 ;;
  2759                           
  2760                           	psect	text3
  2761  00425C                     __ptext3:
  2762                           	opt stack 0
  2763  00425C                     _parallelo:
  2764                           	opt stack 19
  2765                           
  2766                           ;parcheggio.c: 473: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  2767                           
  2768                           ;incstack = 0
  2769  00425C  EE20  F02C         	lfsr	2,_sensor_distance+2	;volatile
  2770  004260  CFDE F0D5          	movff	postinc2,??_parallelo
  2771  004264  CFDD F0D6          	movff	postdec2,??_parallelo+1
  2772  004268  0100               	movlb	0	; () banked
  2773  00426A  1FD5               	comf	??_parallelo& (0+255),f,b
  2774  00426C  1FD6               	comf	(??_parallelo+1)& (0+255),f,b
  2775  00426E  4BD5               	infsnz	??_parallelo& (0+255),f,b
  2776  004270  2BD6               	incf	(??_parallelo+1)& (0+255),f,b
  2777  004272  502A               	movf	_sensor_distance,w,c	;volatile
  2778  004274  0100               	movlb	0	; () banked
  2779  004276  25D5               	addwf	??_parallelo& (0+255),w,b
  2780  004278  0100               	movlb	0	; () banked
  2781  00427A  6F77               	movwf	abs@a& (0+255),b
  2782  00427C  502B               	movf	_sensor_distance+1,w,c	;volatile
  2783  00427E  0100               	movlb	0	; () banked
  2784  004280  21D6               	addwfc	(??_parallelo+1)& (0+255),w,b
  2785  004282  0100               	movlb	0	; () banked
  2786  004284  6F78               	movwf	(abs@a+1)& (0+255),b
  2787  004286  ECC6  F02E         	call	_abs	;wreg free
  2788  00428A  C077  F081         	movff	?_abs,___awtofl@c
  2789  00428E  C078  F082         	movff	?_abs+1,___awtofl@c+1
  2790  004292  ECDE  F02D         	call	___awtofl	;wreg free
  2791  004296  C081  F0D7         	movff	?___awtofl,_alignment_gap	;volatile
  2792  00429A  C082  F0D8         	movff	?___awtofl+1,_alignment_gap+1	;volatile
  2793  00429E  C083  F0D9         	movff	?___awtofl+2,_alignment_gap+2	;volatile
  2794  0042A2  C084  F0DA         	movff	?___awtofl+3,_alignment_gap+3	;volatile
  2795                           
  2796                           ;parcheggio.c: 474: if (alignment_gap < 30) {
  2797  0042A6  C0D7  F0B3         	movff	_alignment_gap,___flge@ff1	;volatile
  2798  0042AA  C0D8  F0B4         	movff	_alignment_gap+1,___flge@ff1+1	;volatile
  2799  0042AE  C0D9  F0B5         	movff	_alignment_gap+2,___flge@ff1+2	;volatile
  2800  0042B2  C0DA  F0B6         	movff	_alignment_gap+3,___flge@ff1+3	;volatile
  2801  0042B6  0E00               	movlw	0
  2802  0042B8  0100               	movlb	0	; () banked
  2803  0042BA  6FB7               	movwf	___flge@ff2& (0+255),b
  2804  0042BC  0E00               	movlw	0
  2805  0042BE  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  2806  0042C0  0EF0               	movlw	240
  2807  0042C2  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  2808  0042C4  0E41               	movlw	65
  2809  0042C6  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  2810  0042C8  EC28  F02B         	call	___flge	;wreg free
  2811  0042CC  0100               	movlb	0	; () banked
  2812  0042CE  B0D8               	btfsc	status,0,c
  2813  0042D0  D0EC               	goto	l6488
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;parcheggio.c: 475: if ((sensor_distance[0] < 30) && (sensor_distance[1] < 30)) {
  2817  0042D2  502B               	movf	_sensor_distance+1,w,c	;volatile
  2818  0042D4  E103               	bnz	u8101
  2819  0042D6  0E1E               	movlw	30
  2820  0042D8  5C2A               	subwf	_sensor_distance,w,c	;volatile
  2821  0042DA  B0D8               	btfsc	status,0,c
  2822  0042DC                     u8101:
  2823  0042DC  0012               	return	
  2824                           
  2825                           ; BSR set to: 0
  2826  0042DE  502D               	movf	_sensor_distance+3,w,c	;volatile
  2827  0042E0  E103               	bnz	u8111
  2828  0042E2  0E1E               	movlw	30
  2829  0042E4  5C2C               	subwf	_sensor_distance+2,w,c	;volatile
  2830  0042E6  B0D8               	btfsc	status,0,c
  2831  0042E8                     u8111:
  2832  0042E8  0012               	return	
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;parcheggio.c: 476: x = (((6)*(6)) + ((alignment_gap * alignment_gap)));
  2836  0042EA  C0D7  F094         	movff	_alignment_gap,___flmul@f2	;volatile
  2837  0042EE  C0D8  F095         	movff	_alignment_gap+1,___flmul@f2+1	;volatile
  2838  0042F2  C0D9  F096         	movff	_alignment_gap+2,___flmul@f2+2	;volatile
  2839  0042F6  C0DA  F097         	movff	_alignment_gap+3,___flmul@f2+3	;volatile
  2840  0042FA  C0D7  F090         	movff	_alignment_gap,___flmul@f1	;volatile
  2841  0042FE  C0D8  F091         	movff	_alignment_gap+1,___flmul@f1+1	;volatile
  2842  004302  C0D9  F092         	movff	_alignment_gap+2,___flmul@f1+2	;volatile
  2843  004306  C0DA  F093         	movff	_alignment_gap+3,___flmul@f1+3	;volatile
  2844  00430A  EC27  F027         	call	___flmul	;wreg free
  2845  00430E  C090  F09F         	movff	?___flmul,___fladd@f1
  2846  004312  C091  F0A0         	movff	?___flmul+1,___fladd@f1+1
  2847  004316  C092  F0A1         	movff	?___flmul+2,___fladd@f1+2
  2848  00431A  C093  F0A2         	movff	?___flmul+3,___fladd@f1+3
  2849  00431E  0E00               	movlw	0
  2850  004320  0100               	movlb	0	; () banked
  2851  004322  6FA3               	movwf	___fladd@f2& (0+255),b
  2852  004324  0E00               	movlw	0
  2853  004326  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2854  004328  0E10               	movlw	16
  2855  00432A  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2856  00432C  0E42               	movlw	66
  2857  00432E  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2858  004330  ECF8  F01F         	call	___fladd	;wreg free
  2859  004334  C09F  F0DB         	movff	?___fladd,_x	;volatile
  2860  004338  C0A0  F0DC         	movff	?___fladd+1,_x+1	;volatile
  2861  00433C  C0A1  F0DD         	movff	?___fladd+2,_x+2	;volatile
  2862  004340  C0A2  F0DE         	movff	?___fladd+3,_x+3	;volatile
  2863                           
  2864                           ;parcheggio.c: 477: x = sqrt(x);
  2865  004344  C0DB  F0D1         	movff	_x,sqrt@y	;volatile
  2866  004348  C0DC  F0D2         	movff	_x+1,sqrt@y+1	;volatile
  2867  00434C  C0DD  F0D3         	movff	_x+2,sqrt@y+2	;volatile
  2868  004350  C0DE  F0D4         	movff	_x+3,sqrt@y+3	;volatile
  2869  004354  EC87  F023         	call	_sqrt	;wreg free
  2870  004358  C0D1  F0DB         	movff	?_sqrt,_x	;volatile
  2871  00435C  C0D2  F0DC         	movff	?_sqrt+1,_x+1	;volatile
  2872  004360  C0D3  F0DD         	movff	?_sqrt+2,_x+2	;volatile
  2873  004364  C0D4  F0DE         	movff	?_sqrt+3,_x+3	;volatile
  2874                           
  2875                           ;parcheggio.c: 478: z = alignment_gap / x;
  2876  004368  C0D7  F081         	movff	_alignment_gap,___fldiv@f1	;volatile
  2877  00436C  C0D8  F082         	movff	_alignment_gap+1,___fldiv@f1+1	;volatile
  2878  004370  C0D9  F083         	movff	_alignment_gap+2,___fldiv@f1+2	;volatile
  2879  004374  C0DA  F084         	movff	_alignment_gap+3,___fldiv@f1+3	;volatile
  2880  004378  C0DB  F085         	movff	_x,___fldiv@f2	;volatile
  2881  00437C  C0DC  F086         	movff	_x+1,___fldiv@f2+1	;volatile
  2882  004380  C0DD  F087         	movff	_x+2,___fldiv@f2+2	;volatile
  2883  004384  C0DE  F088         	movff	_x+3,___fldiv@f2+3	;volatile
  2884  004388  ECD9  F027         	call	___fldiv	;wreg free
  2885  00438C  C081  F0DF         	movff	?___fldiv,_z	;volatile
  2886  004390  C082  F0E0         	movff	?___fldiv+1,_z+1	;volatile
  2887  004394  C083  F0E1         	movff	?___fldiv+2,_z+2	;volatile
  2888  004398  C084  F0E2         	movff	?___fldiv+3,_z+3	;volatile
  2889                           
  2890                           ;parcheggio.c: 479: z = asin(z);
  2891  00439C  C0DF  F1A2         	movff	_z,asin@x	;volatile
  2892  0043A0  C0E0  F1A3         	movff	_z+1,asin@x+1	;volatile
  2893  0043A4  C0E1  F1A4         	movff	_z+2,asin@x+2	;volatile
  2894  0043A8  C0E2  F1A5         	movff	_z+3,asin@x+3	;volatile
  2895  0043AC  ECD8  F01C         	call	_asin	;wreg free
  2896  0043B0  C1A2  F0DF         	movff	?_asin,_z	;volatile
  2897  0043B4  C1A3  F0E0         	movff	?_asin+1,_z+1	;volatile
  2898  0043B8  C1A4  F0E1         	movff	?_asin+2,_z+2	;volatile
  2899  0043BC  C1A5  F0E2         	movff	?_asin+3,_z+3	;volatile
  2900                           
  2901                           ;parcheggio.c: 480: z = z / 3.14159265358979323846 * 180;
  2902  0043C0  0EDB               	movlw	219
  2903  0043C2  0100               	movlb	0	; () banked
  2904  0043C4  6F85               	movwf	___fldiv@f2& (0+255),b
  2905  0043C6  0E0F               	movlw	15
  2906  0043C8  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  2907  0043CA  0E49               	movlw	73
  2908  0043CC  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  2909  0043CE  0E40               	movlw	64
  2910  0043D0  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  2911  0043D2  C0DF  F081         	movff	_z,___fldiv@f1	;volatile
  2912  0043D6  C0E0  F082         	movff	_z+1,___fldiv@f1+1	;volatile
  2913  0043DA  C0E1  F083         	movff	_z+2,___fldiv@f1+2	;volatile
  2914  0043DE  C0E2  F084         	movff	_z+3,___fldiv@f1+3	;volatile
  2915  0043E2  ECD9  F027         	call	___fldiv	;wreg free
  2916  0043E6  C081  F090         	movff	?___fldiv,___flmul@f1
  2917  0043EA  C082  F091         	movff	?___fldiv+1,___flmul@f1+1
  2918  0043EE  C083  F092         	movff	?___fldiv+2,___flmul@f1+2
  2919  0043F2  C084  F093         	movff	?___fldiv+3,___flmul@f1+3
  2920  0043F6  0E00               	movlw	0
  2921  0043F8  0100               	movlb	0	; () banked
  2922  0043FA  6F94               	movwf	___flmul@f2& (0+255),b
  2923  0043FC  0E00               	movlw	0
  2924  0043FE  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  2925  004400  0E34               	movlw	52
  2926  004402  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  2927  004404  0E43               	movlw	67
  2928  004406  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  2929  004408  EC27  F027         	call	___flmul	;wreg free
  2930  00440C  C090  F0DF         	movff	?___flmul,_z	;volatile
  2931  004410  C091  F0E0         	movff	?___flmul+1,_z+1	;volatile
  2932  004414  C092  F0E1         	movff	?___flmul+2,_z+2	;volatile
  2933  004418  C093  F0E2         	movff	?___flmul+3,_z+3	;volatile
  2934                           
  2935                           ;parcheggio.c: 481: data_correction[0] = z;
  2936  00441C  C0DF  F0AF         	movff	_z,___fltol@f1	;volatile
  2937  004420  C0E0  F0B0         	movff	_z+1,___fltol@f1+1	;volatile
  2938  004424  C0E1  F0B1         	movff	_z+2,___fltol@f1+2	;volatile
  2939  004428  C0E2  F0B2         	movff	_z+3,___fltol@f1+3	;volatile
  2940  00442C  EC05  F029         	call	___fltol	;wreg free
  2941  004430  0100               	movlb	0	; () banked
  2942  004432  51AF               	movf	?___fltol& (0+255),w,b
  2943  004434  0101               	movlb	1	; () banked
  2944  004436  6F65               	movwf	_data_correction& (0+255),b	;volatile
  2945                           
  2946                           ; BSR set to: 1
  2947                           ;parcheggio.c: 483: if (sensor_distance[0] < sensor_distance[1]) {
  2948  004438  502C               	movf	_sensor_distance+2,w,c	;volatile
  2949  00443A  5C2A               	subwf	_sensor_distance,w,c	;volatile
  2950  00443C  502D               	movf	_sensor_distance+3,w,c	;volatile
  2951  00443E  582B               	subwfb	_sensor_distance+1,w,c	;volatile
  2952  004440  B0D8               	btfsc	status,0,c
  2953  004442  D002               	goto	l6480
  2954                           
  2955                           ; BSR set to: 1
  2956                           ;parcheggio.c: 484: data_correction[1] = 0;
  2957  004444  0E00               	movlw	0
  2958  004446  D001               	goto	L1
  2959  004448                     l6480:
  2960                           
  2961                           ; BSR set to: 1
  2962                           ;parcheggio.c: 486: data_correction[1] = 1;
  2963  004448  0E01               	movlw	1
  2964  00444A                     L1:
  2965  00444A  0101               	movlb	1	; () banked
  2966  00444C  6F66               	movwf	(_data_correction+1)& (0+255),b	;volatile
  2967  00444E  D000               	goto	l6482
  2968  004450                     l6482:
  2969                           
  2970                           ; BSR set to: 1
  2971                           ;parcheggio.c: 487: }
  2972                           ;parcheggio.c: 488: if ((old_alignment_gap != alignment_gap) || (old_dir_correction != d
      +                          ata_correction[1])) {
  2973  004450  0100               	movlb	0	; () banked
  2974  004452  51D7               	movf	_alignment_gap& (0+255),w,b	;volatile
  2975  004454  0101               	movlb	1	; () banked
  2976  004456  1934               	xorwf	_old_alignment_gap& (0+255),w,b	;volatile
  2977  004458  E117               	bnz	l843
  2978  00445A  0100               	movlb	0	; () banked
  2979  00445C  51D8               	movf	(_alignment_gap+1)& (0+255),w,b	;volatile
  2980  00445E  0101               	movlb	1	; () banked
  2981  004460  1935               	xorwf	(_old_alignment_gap+1)& (0+255),w,b	;volatile
  2982  004462  E112               	bnz	l843
  2983  004464  0100               	movlb	0	; () banked
  2984  004466  51D9               	movf	(_alignment_gap+2)& (0+255),w,b	;volatile
  2985  004468  0101               	movlb	1	; () banked
  2986  00446A  1936               	xorwf	(_old_alignment_gap+2)& (0+255),w,b	;volatile
  2987  00446C  E10D               	bnz	l843
  2988  00446E  0100               	movlb	0	; () banked
  2989  004470  51DA               	movf	(_alignment_gap+3)& (0+255),w,b	;volatile
  2990  004472  0101               	movlb	1	; () banked
  2991  004474  1937               	xorwf	(_old_alignment_gap+3)& (0+255),w,b	;volatile
  2992  004476  A4D8               	btfss	status,2,c
  2993  004478  D007               	goto	l843
  2994                           
  2995                           ; BSR set to: 1
  2996  00447A  0E00               	movlw	0
  2997  00447C  B652               	btfsc	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  2998  00447E  0E01               	movlw	1
  2999  004480  0101               	movlb	1	; () banked
  3000  004482  1966               	xorwf	(_data_correction+1)& (0+255),w,b	;volatile
  3001  004484  B4D8               	btfsc	status,2,c
  3002  004486  0012               	return	
  3003  004488                     l843:
  3004                           
  3005                           ; BSR set to: 1
  3006                           ;parcheggio.c: 489: old_alignment_gap = alignment_gap;
  3007  004488  C0D7  F134         	movff	_alignment_gap,_old_alignment_gap	;volatile
  3008  00448C  C0D8  F135         	movff	_alignment_gap+1,_old_alignment_gap+1	;volatile
  3009  004490  C0D9  F136         	movff	_alignment_gap+2,_old_alignment_gap+2	;volatile
  3010  004494  C0DA  F137         	movff	_alignment_gap+3,_old_alignment_gap+3	;volatile
  3011                           
  3012                           ;parcheggio.c: 490: old_dir_correction = data_correction[1];
  3013  004498  0101               	movlb	1	; () banked
  3014  00449A  B166               	btfsc	(_data_correction+1)& (0+255),0,b	;volatile
  3015  00449C  D002               	bra	u8155
  3016  00449E  9652               	bcf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  3017  0044A0  D001               	bra	u8156
  3018  0044A2                     u8155:
  3019  0044A2  8652               	bsf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  3020  0044A4                     u8156:
  3021                           
  3022                           ;parcheggio.c: 491: can_send();
  3023  0044A4  EC1F  F02A         	call	_can_send	;wreg free
  3024                           
  3025                           ;parcheggio.c: 492: }
  3026                           ;parcheggio.c: 493: }
  3027                           ;parcheggio.c: 494: } else {
  3028  0044A8  0012               	return	
  3029  0044AA                     l6488:
  3030                           
  3031                           ;parcheggio.c: 495: data_correction[0] = 0;
  3032  0044AA  0E00               	movlw	0
  3033  0044AC  0101               	movlb	1	; () banked
  3034  0044AE  6F65               	movwf	_data_correction& (0+255),b	;volatile
  3035                           
  3036                           ; BSR set to: 1
  3037                           ;parcheggio.c: 496: can_send();
  3038  0044B0  EC1F  F02A         	call	_can_send	;wreg free
  3039  0044B4  0012               	return	
  3040  0044B6  0012               	return		;funcret
  3041  0044B8                     __end_of_parallelo:
  3042                           	opt stack 0
  3043                           tblptru	equ	0xFF8
  3044                           tblptrh	equ	0xFF7
  3045                           tblptrl	equ	0xFF6
  3046                           tablat	equ	0xFF5
  3047                           postinc0	equ	0xFEE
  3048                           wreg	equ	0xFE8
  3049                           postdec1	equ	0xFE5
  3050                           fsr1l	equ	0xFE1
  3051                           postinc2	equ	0xFDE
  3052                           postdec2	equ	0xFDD
  3053                           status	equ	0xFD8
  3054                           
  3055 ;; *************** function _can_send *****************
  3056 ;; Defined at:
  3057 ;;		line 449 in file "parcheggio.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;		None
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;		None
  3062 ;; Return value:  Size  Location     Type
  3063 ;;		None               void
  3064 ;; Registers used:
  3065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3075 ;;Total ram usage:        0 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    6
  3078 ;; This function calls:
  3079 ;;		_CANisTxReady
  3080 ;;		_CANsendMessage
  3081 ;; This function is called by:
  3082 ;;		_park_routine
  3083 ;;		_parallelo
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text4
  3088  00543E                     __ptext4:
  3089                           	opt stack 0
  3090  00543E                     _can_send:
  3091                           	opt stack 22
  3092                           
  3093                           ;parcheggio.c: 450: if (start_operation == 1) {
  3094                           
  3095                           ;incstack = 0
  3096  00543E  BC52               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  3097  005440  D002               	goto	l4884
  3098  005442  D067               	goto	l4904
  3099                           
  3100                           ;parcheggio.c: 452: while (CANisTxReady() != 1);
  3101  005444  D000               	goto	l4884
  3102  005446                     l4884:
  3103  005446  ECF0  F02E         	call	_CANisTxReady	;wreg free
  3104  00544A  06E8               	decf	wreg,f,c
  3105  00544C  A4D8               	btfss	status,2,c
  3106  00544E  D7FB               	goto	l4884
  3107                           
  3108                           ;parcheggio.c: 453: CANsendMessage(0b00000000111, data_steering, 8, CAN_CONFIG_STD_MSG &
      +                           CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3109  005450  0E07               	movlw	7
  3110  005452  0100               	movlb	0	; () banked
  3111  005454  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3112  005456  0E00               	movlw	0
  3113  005458  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3114  00545A  0E00               	movlw	0
  3115  00545C  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3116  00545E  0E00               	movlw	0
  3117  005460  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3118  005462  0E75               	movlw	low _data_steering
  3119  005464  0100               	movlb	0	; () banked
  3120  005466  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3121  005468  0E01               	movlw	high _data_steering
  3122  00546A  0100               	movlb	0	; () banked
  3123  00546C  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3124  00546E  0E08               	movlw	8
  3125  005470  0100               	movlb	0	; () banked
  3126  005472  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3127  005474  0EBC               	movlw	188
  3128  005476  0100               	movlb	0	; () banked
  3129  005478  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3130  00547A  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3131                           
  3132                           ;parcheggio.c: 456: data_speed[0] = set_speed;
  3133  00547E  C0E5  F16D         	movff	_set_speed,_data_speed	;volatile
  3134                           
  3135                           ;parcheggio.c: 457: data_speed[1] = (set_speed >> 8);
  3136  005482  0100               	movlb	0	; () banked
  3137  005484  51E6               	movf	(_set_speed+1)& (0+255),w,b	;volatile
  3138  005486  0101               	movlb	1	; () banked
  3139  005488  6F6E               	movwf	(_data_speed+1)& (0+255),b	;volatile
  3140                           
  3141                           ; BSR set to: 1
  3142                           ;parcheggio.c: 458: data_speed[2] = dir;
  3143  00548A  0E00               	movlw	0
  3144  00548C  B851               	btfsc	_dir/(0+8),_dir& (0+7),c	;volatile
  3145  00548E  0E01               	movlw	1
  3146  005490  0101               	movlb	1	; () banked
  3147  005492  6F6F               	movwf	(_data_speed+2)& (0+255),b	;volatile
  3148                           
  3149                           ; BSR set to: 1
  3150                           
  3151                           ;parcheggio.c: 459: while (CANisTxReady() != 1);
  3152  005494  D000               	goto	l4894
  3153  005496                     l4894:
  3154  005496  ECF0  F02E         	call	_CANisTxReady	;wreg free
  3155  00549A  06E8               	decf	wreg,f,c
  3156  00549C  A4D8               	btfss	status,2,c
  3157  00549E  D7FB               	goto	l4894
  3158                           
  3159                           ;parcheggio.c: 460: CANsendMessage(0b00000000101, data_speed, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3160  0054A0  0E05               	movlw	5
  3161  0054A2  0100               	movlb	0	; () banked
  3162  0054A4  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3163  0054A6  0E00               	movlw	0
  3164  0054A8  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3165  0054AA  0E00               	movlw	0
  3166  0054AC  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3167  0054AE  0E00               	movlw	0
  3168  0054B0  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3169  0054B2  0E6D               	movlw	low _data_speed
  3170  0054B4  0100               	movlb	0	; () banked
  3171  0054B6  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3172  0054B8  0E01               	movlw	high _data_speed
  3173  0054BA  0100               	movlb	0	; () banked
  3174  0054BC  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3175  0054BE  0E08               	movlw	8
  3176  0054C0  0100               	movlb	0	; () banked
  3177  0054C2  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3178  0054C4  0EBC               	movlw	188
  3179  0054C6  0100               	movlb	0	; () banked
  3180  0054C8  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3181  0054CA  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3182                           
  3183                           ;parcheggio.c: 463: data_brake[1] = 0;
  3184  0054CE  0E00               	movlw	0
  3185  0054D0  0101               	movlb	1	; () banked
  3186  0054D2  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  3187                           
  3188                           ; BSR set to: 1
  3189                           
  3190                           ;parcheggio.c: 464: while (CANisTxReady() != 1);
  3191  0054D4  D000               	goto	l4900
  3192  0054D6                     l4900:
  3193  0054D6  ECF0  F02E         	call	_CANisTxReady	;wreg free
  3194  0054DA  06E8               	decf	wreg,f,c
  3195  0054DC  A4D8               	btfss	status,2,c
  3196  0054DE  D7FB               	goto	l4900
  3197                           
  3198                           ;parcheggio.c: 465: CANsendMessage(0b00000000110, data_brake, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3199  0054E0  0E06               	movlw	6
  3200  0054E2  0100               	movlb	0	; () banked
  3201  0054E4  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3202  0054E6  0E00               	movlw	0
  3203  0054E8  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3204  0054EA  0E00               	movlw	0
  3205  0054EC  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3206  0054EE  0E00               	movlw	0
  3207  0054F0  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3208  0054F2  0E5D               	movlw	low _data_brake
  3209  0054F4  0100               	movlb	0	; () banked
  3210  0054F6  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3211  0054F8  0E01               	movlw	high _data_brake
  3212  0054FA  0100               	movlb	0	; () banked
  3213  0054FC  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3214  0054FE  0E08               	movlw	8
  3215  005500  0100               	movlb	0	; () banked
  3216  005502  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3217  005504  0EBC               	movlw	188
  3218  005506  0100               	movlb	0	; () banked
  3219  005508  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3220  00550A  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3221                           
  3222                           ;parcheggio.c: 466: } else {
  3223  00550E  0012               	return	
  3224                           
  3225                           ;parcheggio.c: 467: while (CANisTxReady() != 1);
  3226  005510  D000               	goto	l4904
  3227  005512                     l4904:
  3228  005512  ECF0  F02E         	call	_CANisTxReady	;wreg free
  3229  005516  06E8               	decf	wreg,f,c
  3230  005518  A4D8               	btfss	status,2,c
  3231  00551A  D7FB               	goto	l4904
  3232                           
  3233                           ;parcheggio.c: 468: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3234  00551C  0E10               	movlw	16
  3235  00551E  0100               	movlb	0	; () banked
  3236  005520  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3237  005522  0E00               	movlw	0
  3238  005524  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3239  005526  0E00               	movlw	0
  3240  005528  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3241  00552A  0E00               	movlw	0
  3242  00552C  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3243  00552E  0E65               	movlw	low _data_correction
  3244  005530  0100               	movlb	0	; () banked
  3245  005532  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3246  005534  0E01               	movlw	high _data_correction
  3247  005536  0100               	movlb	0	; () banked
  3248  005538  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3249  00553A  0E08               	movlw	8
  3250  00553C  0100               	movlb	0	; () banked
  3251  00553E  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3252  005540  0EBC               	movlw	188
  3253  005542  0100               	movlb	0	; () banked
  3254  005544  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3255  005546  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3256  00554A  0012               	return	
  3257  00554C  0012               	return		;funcret
  3258  00554E                     __end_of_can_send:
  3259                           	opt stack 0
  3260                           tblptru	equ	0xFF8
  3261                           tblptrh	equ	0xFF7
  3262                           tblptrl	equ	0xFF6
  3263                           tablat	equ	0xFF5
  3264                           postinc0	equ	0xFEE
  3265                           wreg	equ	0xFE8
  3266                           postdec1	equ	0xFE5
  3267                           fsr1l	equ	0xFE1
  3268                           postinc2	equ	0xFDE
  3269                           postdec2	equ	0xFDD
  3270                           status	equ	0xFD8
  3271                           
  3272 ;; *************** function _CANsendMessage *****************
  3273 ;; Defined at:
  3274 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  identifier      4   23[BANK0 ] unsigned long 
  3277 ;;  data            2   27[BANK0 ] PTR unsigned char 
  3278 ;;		 -> data_speed(8), data_brake(8), data_steering(8), data_correction(8), 
  3279 ;;		 -> data_test(8), data(8), sensor_distance_short(8), 
  3280 ;;  dataLength      1   29[BANK0 ] unsigned char 
  3281 ;;  flags           1   30[BANK0 ] enum E16376
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;  tamp            4   35[BANK0 ] unsigned long 
  3284 ;; Return value:  Size  Location     Type
  3285 ;;		None               void
  3286 ;; Registers used:
  3287 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3293 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3294 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3295 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3296 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3297 ;;Total ram usage:       16 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    5
  3300 ;; This function calls:
  3301 ;;		Nothing
  3302 ;; This function is called by:
  3303 ;;		_main
  3304 ;;		_park_search
  3305 ;;		_park_routine
  3306 ;;		_can_send
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           	psect	text5
  3311  00187C                     __ptext5:
  3312                           	opt stack 0
  3313  00187C                     _CANsendMessage:
  3314                           	opt stack 22
  3315                           
  3316                           ;inc\CANlib.h: 296: unsigned long tamp;
  3317                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
  3318                           
  3319                           ;incstack = 0
  3320  00187C  010F               	movlb	15	; () banked
  3321  00187E  B740               	btfsc	64,3,b	;volatile
  3322  001880  D142               	goto	l361
  3323                           
  3324                           ; BSR set to: 15
  3325                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
  3326  001882  C07D  FF45         	movff	CANsendMessage@dataLength,3909	;volatile
  3327                           
  3328                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
  3329  001886  0100               	movlb	0	; () banked
  3330  001888  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  3331  00188A  D003               	goto	l362
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
  3335  00188C  010F               	movlb	15	; () banked
  3336  00188E  8D45               	bsf	69,6,b	;volatile
  3337  001890  D002               	goto	l363
  3338  001892                     l362:
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;inc\CANlib.h: 302: else
  3342                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
  3343  001892  010F               	movlb	15	; () banked
  3344  001894  9D45               	bcf	69,6,b	;volatile
  3345  001896                     l363:
  3346                           
  3347                           ; BSR set to: 15
  3348                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
  3349  001896  0100               	movlb	0	; () banked
  3350  001898  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  3351  00189A  D07A               	goto	l364
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;inc\CANlib.h: 306: {
  3355                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
  3356  00189C  0100               	movlb	0	; () banked
  3357  00189E  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  3358  0018A0  0100               	movlb	0	; () banked
  3359  0018A2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3360  0018A4  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3361  0018A6  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3362  0018A8  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
  3366  0018AA  C083  FF44         	movff	CANsendMessage@tamp,3908	;volatile
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
  3370  0018AE  0E00               	movlw	0
  3371  0018B0  0100               	movlb	0	; () banked
  3372  0018B2  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3373  0018B4  0100               	movlb	0	; () banked
  3374  0018B6  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3375  0018B8  0EFF               	movlw	255
  3376  0018BA  0100               	movlb	0	; () banked
  3377  0018BC  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3378  0018BE  0100               	movlb	0	; () banked
  3379  0018C0  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3380  0018C2  0E00               	movlw	0
  3381  0018C4  0100               	movlb	0	; () banked
  3382  0018C6  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3383  0018C8  0100               	movlb	0	; () banked
  3384  0018CA  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3385  0018CC  0E00               	movlw	0
  3386  0018CE  0100               	movlb	0	; () banked
  3387  0018D0  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3388  0018D2  0100               	movlb	0	; () banked
  3389  0018D4  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
  3393  0018D6  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3394  0018DA  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3395  0018DE  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3396  0018E2  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3397  0018E6  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  3398  0018EA  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  3399  0018EE  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  3400  0018F2  0100               	movlb	0	; () banked
  3401  0018F4  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  3402  0018F6  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3403  0018FA  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3404  0018FE  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3405  001902  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
  3409  001906  C083  FF43         	movff	CANsendMessage@tamp,3907	;volatile
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
  3413  00190A  0E00               	movlw	0
  3414  00190C  010F               	movlb	15	; () banked
  3415  00190E  6F42               	movwf	66,b	;volatile
  3416                           
  3417                           ; BSR set to: 15
  3418                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
  3419  001910  010F               	movlb	15	; () banked
  3420  001912  8742               	bsf	66,3,b	;volatile
  3421                           
  3422                           ; BSR set to: 15
  3423                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
  3424  001914  0100               	movlb	0	; () banked
  3425  001916  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  3426  001918  D002               	goto	l365
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
  3430  00191A  010F               	movlb	15	; () banked
  3431  00191C  8142               	bsf	66,0,b	;volatile
  3432  00191E                     l365:
  3433                           
  3434                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
  3435  00191E  0100               	movlb	0	; () banked
  3436  001920  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  3437  001922  D002               	goto	l366
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
  3441  001924  010F               	movlb	15	; () banked
  3442  001926  8342               	bsf	66,1,b	;volatile
  3443  001928                     l366:
  3444                           
  3445                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
  3446  001928  0100               	movlb	0	; () banked
  3447  00192A  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  3448  00192C  D002               	goto	l367
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
  3452  00192E  010F               	movlb	15	; () banked
  3453  001930  8B42               	bsf	66,5,b	;volatile
  3454  001932                     l367:
  3455                           
  3456                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
  3457  001932  0100               	movlb	0	; () banked
  3458  001934  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  3459  001936  D002               	goto	l368
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
  3463  001938  010F               	movlb	15	; () banked
  3464  00193A  8D42               	bsf	66,6,b	;volatile
  3465  00193C                     l368:
  3466                           
  3467                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
  3468  00193C  0100               	movlb	0	; () banked
  3469  00193E  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  3470  001940  D003               	goto	l4148
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
  3474  001942  010F               	movlb	15	; () banked
  3475  001944  8F42               	bsf	66,7,b	;volatile
  3476  001946  D000               	goto	l4148
  3477  001948                     l4148:
  3478                           
  3479                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
  3480  001948  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3481  00194C  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3482  001950  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3483  001954  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3484  001958  0E16               	movlw	22
  3485  00195A  D006               	goto	u4320
  3486  00195C                     u4325:
  3487  00195C  0100               	movlb	0	; () banked
  3488  00195E  90D8               	bcf	status,0,c
  3489  001960  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3490  001962  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3491  001964  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3492  001966  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3493  001968                     u4320:
  3494  001968  2EE8               	decfsz	wreg,f,c
  3495  00196A  D7F8               	goto	u4325
  3496  00196C  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3497  001970  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3498  001974  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3499  001978  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
  3503  00197C  0100               	movlb	0	; () banked
  3504  00197E  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3505  001980  0100               	movlb	0	; () banked
  3506  001982  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3507  001984  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3508  001986  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3509  001988  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
  3513  00198A  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  3514                           
  3515                           ;inc\CANlib.h: 332: }
  3516  00198E  D05A               	goto	l4168
  3517  001990                     l364:
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;inc\CANlib.h: 334: else
  3521                           ;inc\CANlib.h: 336: {
  3522                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
  3523  001990  010F               	movlb	15	; () banked
  3524  001992  9742               	bcf	66,3,b	;volatile
  3525                           
  3526                           ; BSR set to: 15
  3527                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
  3528  001994  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3529  001998  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3530  00199C  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3531  0019A0  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3532  0019A4  0E04               	movlw	4
  3533  0019A6  D006               	goto	u4330
  3534  0019A8                     u4335:
  3535  0019A8  0100               	movlb	0	; () banked
  3536  0019AA  90D8               	bcf	status,0,c
  3537  0019AC  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3538  0019AE  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3539  0019B0  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3540  0019B2  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3541  0019B4                     u4330:
  3542  0019B4  2EE8               	decfsz	wreg,f,c
  3543  0019B6  D7F8               	goto	u4335
  3544  0019B8  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3545  0019BC  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3546  0019C0  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3547  0019C4  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
  3551  0019C8  0100               	movlb	0	; () banked
  3552  0019CA  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3553  0019CC  0100               	movlb	0	; () banked
  3554  0019CE  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3555  0019D0  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3556  0019D2  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3557  0019D4  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
  3561  0019D6  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
  3565  0019DA  0E07               	movlw	7
  3566  0019DC  0100               	movlb	0	; () banked
  3567  0019DE  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3568  0019E0  0100               	movlb	0	; () banked
  3569  0019E2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3570  0019E4  0E00               	movlw	0
  3571  0019E6  0100               	movlb	0	; () banked
  3572  0019E8  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3573  0019EA  0100               	movlb	0	; () banked
  3574  0019EC  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3575  0019EE  0E00               	movlw	0
  3576  0019F0  0100               	movlb	0	; () banked
  3577  0019F2  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3578  0019F4  0100               	movlb	0	; () banked
  3579  0019F6  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3580  0019F8  0E00               	movlw	0
  3581  0019FA  0100               	movlb	0	; () banked
  3582  0019FC  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3583  0019FE  0100               	movlb	0	; () banked
  3584  001A00  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;inc\CANlib.h: 344: tamp = tamp << 5;
  3588  001A02  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3589  001A06  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3590  001A0A  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3591  001A0E  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3592  001A12  0E05               	movlw	5
  3593  001A14                     u4345:
  3594  001A14  90D8               	bcf	status,0,c
  3595  001A16  0100               	movlb	0	; () banked
  3596  001A18  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  3597  001A1A  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  3598  001A1C  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  3599  001A1E  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  3600  001A20  2EE8               	decfsz	wreg,f,c
  3601  001A22  D7F8               	goto	u4345
  3602  001A24  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3603  001A28  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3604  001A2C  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3605  001A30  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
  3609  001A34  010F               	movlb	15	; () banked
  3610  001A36  5142               	movf	66,w,b	;volatile
  3611  001A38  0B1F               	andlw	31
  3612  001A3A  010F               	movlb	15	; () banked
  3613  001A3C  6F42               	movwf	66,b	;volatile
  3614                           
  3615                           ; BSR set to: 15
  3616                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
  3617  001A3E  C083  FF42         	movff	CANsendMessage@tamp,3906	;volatile
  3618  001A42  D000               	goto	l4168
  3619  001A44                     l4168:
  3620                           
  3621                           ;inc\CANlib.h: 347: }
  3622                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
  3623  001A44  0100               	movlb	0	; () banked
  3624  001A46  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  3625  001A48  D003               	goto	l371
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
  3629  001A4A  010F               	movlb	15	; () banked
  3630  001A4C  8140               	bsf	64,0,b	;volatile
  3631  001A4E  D002               	goto	l372
  3632  001A50                     l371:
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;inc\CANlib.h: 351: else
  3636                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
  3637  001A50  010F               	movlb	15	; () banked
  3638  001A52  9140               	bcf	64,0,b	;volatile
  3639  001A54                     l372:
  3640                           
  3641                           ; BSR set to: 15
  3642                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
  3643  001A54  0100               	movlb	0	; () banked
  3644  001A56  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  3645  001A58  D003               	goto	l373
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
  3649  001A5A  010F               	movlb	15	; () banked
  3650  001A5C  8340               	bsf	64,1,b	;volatile
  3651  001A5E  D003               	goto	l4174
  3652  001A60                     l373:
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;inc\CANlib.h: 355: else
  3656                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
  3657  001A60  010F               	movlb	15	; () banked
  3658  001A62  9340               	bcf	64,1,b	;volatile
  3659  001A64  D000               	goto	l4174
  3660  001A66                     l4174:
  3661                           
  3662                           ; BSR set to: 15
  3663                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
  3664  001A66  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  3665  001A6A  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  3666  001A6E  50DF               	movf	indf2,w,c
  3667  001A70  010F               	movlb	15	; () banked
  3668  001A72  6F46               	movwf	70,b	;volatile
  3669                           
  3670                           ; BSR set to: 15
  3671                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
  3672  001A74  0100               	movlb	0	; () banked
  3673  001A76  EE20 F001          	lfsr	2,1
  3674  001A7A  517B               	movf	CANsendMessage@data& (0+255),w,b
  3675  001A7C  26D9               	addwf	fsr2l,f,c
  3676  001A7E  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3677  001A80  22DA               	addwfc	fsr2h,f,c
  3678  001A82  50DF               	movf	indf2,w,c
  3679  001A84  010F               	movlb	15	; () banked
  3680  001A86  6F47               	movwf	71,b	;volatile
  3681                           
  3682                           ; BSR set to: 15
  3683                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
  3684  001A88  0100               	movlb	0	; () banked
  3685  001A8A  EE20 F002          	lfsr	2,2
  3686  001A8E  517B               	movf	CANsendMessage@data& (0+255),w,b
  3687  001A90  26D9               	addwf	fsr2l,f,c
  3688  001A92  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3689  001A94  22DA               	addwfc	fsr2h,f,c
  3690  001A96  50DF               	movf	indf2,w,c
  3691  001A98  010F               	movlb	15	; () banked
  3692  001A9A  6F48               	movwf	72,b	;volatile
  3693                           
  3694                           ; BSR set to: 15
  3695                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
  3696  001A9C  0100               	movlb	0	; () banked
  3697  001A9E  EE20 F003          	lfsr	2,3
  3698  001AA2  517B               	movf	CANsendMessage@data& (0+255),w,b
  3699  001AA4  26D9               	addwf	fsr2l,f,c
  3700  001AA6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3701  001AA8  22DA               	addwfc	fsr2h,f,c
  3702  001AAA  50DF               	movf	indf2,w,c
  3703  001AAC  010F               	movlb	15	; () banked
  3704  001AAE  6F49               	movwf	73,b	;volatile
  3705                           
  3706                           ; BSR set to: 15
  3707                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
  3708  001AB0  0100               	movlb	0	; () banked
  3709  001AB2  EE20 F004          	lfsr	2,4
  3710  001AB6  517B               	movf	CANsendMessage@data& (0+255),w,b
  3711  001AB8  26D9               	addwf	fsr2l,f,c
  3712  001ABA  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3713  001ABC  22DA               	addwfc	fsr2h,f,c
  3714  001ABE  50DF               	movf	indf2,w,c
  3715  001AC0  010F               	movlb	15	; () banked
  3716  001AC2  6F4A               	movwf	74,b	;volatile
  3717                           
  3718                           ; BSR set to: 15
  3719                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
  3720  001AC4  0100               	movlb	0	; () banked
  3721  001AC6  EE20 F005          	lfsr	2,5
  3722  001ACA  517B               	movf	CANsendMessage@data& (0+255),w,b
  3723  001ACC  26D9               	addwf	fsr2l,f,c
  3724  001ACE  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3725  001AD0  22DA               	addwfc	fsr2h,f,c
  3726  001AD2  50DF               	movf	indf2,w,c
  3727  001AD4  010F               	movlb	15	; () banked
  3728  001AD6  6F4B               	movwf	75,b	;volatile
  3729                           
  3730                           ; BSR set to: 15
  3731                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
  3732  001AD8  0100               	movlb	0	; () banked
  3733  001ADA  EE20 F006          	lfsr	2,6
  3734  001ADE  517B               	movf	CANsendMessage@data& (0+255),w,b
  3735  001AE0  26D9               	addwf	fsr2l,f,c
  3736  001AE2  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3737  001AE4  22DA               	addwfc	fsr2h,f,c
  3738  001AE6  50DF               	movf	indf2,w,c
  3739  001AE8  010F               	movlb	15	; () banked
  3740  001AEA  6F4C               	movwf	76,b	;volatile
  3741                           
  3742                           ; BSR set to: 15
  3743                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
  3744  001AEC  0100               	movlb	0	; () banked
  3745  001AEE  EE20 F007          	lfsr	2,7
  3746  001AF2  517B               	movf	CANsendMessage@data& (0+255),w,b
  3747  001AF4  26D9               	addwf	fsr2l,f,c
  3748  001AF6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3749  001AF8  22DA               	addwfc	fsr2h,f,c
  3750  001AFA  50DF               	movf	indf2,w,c
  3751  001AFC  010F               	movlb	15	; () banked
  3752  001AFE  6F4D               	movwf	77,b	;volatile
  3753                           
  3754                           ; BSR set to: 15
  3755                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
  3756  001B00  010F               	movlb	15	; () banked
  3757  001B02  8740               	bsf	64,3,b	;volatile
  3758                           
  3759                           ; BSR set to: 15
  3760                           ;inc\CANlib.h: 368: return;
  3761  001B04  0012               	return	
  3762  001B06                     l361:
  3763                           
  3764                           ; BSR set to: 15
  3765                           ;inc\CANlib.h: 369: }
  3766                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
  3767  001B06  010F               	movlb	15	; () banked
  3768  001B08  B730               	btfsc	48,3,b	;volatile
  3769  001B0A  D142               	goto	l376
  3770                           
  3771                           ; BSR set to: 15
  3772                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
  3773  001B0C  C07D  FF35         	movff	CANsendMessage@dataLength,3893	;volatile
  3774                           
  3775                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
  3776  001B10  0100               	movlb	0	; () banked
  3777  001B12  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  3778  001B14  D003               	goto	l377
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
  3782  001B16  010F               	movlb	15	; () banked
  3783  001B18  8D35               	bsf	53,6,b	;volatile
  3784  001B1A  D002               	goto	l378
  3785  001B1C                     l377:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;inc\CANlib.h: 378: else
  3789                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
  3790  001B1C  010F               	movlb	15	; () banked
  3791  001B1E  9D35               	bcf	53,6,b	;volatile
  3792  001B20                     l378:
  3793                           
  3794                           ; BSR set to: 15
  3795                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
  3796  001B20  0100               	movlb	0	; () banked
  3797  001B22  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  3798  001B24  D07A               	goto	l379
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;inc\CANlib.h: 382: {
  3802                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
  3803  001B26  0100               	movlb	0	; () banked
  3804  001B28  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  3805  001B2A  0100               	movlb	0	; () banked
  3806  001B2C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3807  001B2E  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3808  001B30  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3809  001B32  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
  3813  001B34  C083  FF34         	movff	CANsendMessage@tamp,3892	;volatile
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
  3817  001B38  0E00               	movlw	0
  3818  001B3A  0100               	movlb	0	; () banked
  3819  001B3C  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3820  001B3E  0100               	movlb	0	; () banked
  3821  001B40  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3822  001B42  0EFF               	movlw	255
  3823  001B44  0100               	movlb	0	; () banked
  3824  001B46  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3825  001B48  0100               	movlb	0	; () banked
  3826  001B4A  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3827  001B4C  0E00               	movlw	0
  3828  001B4E  0100               	movlb	0	; () banked
  3829  001B50  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3830  001B52  0100               	movlb	0	; () banked
  3831  001B54  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3832  001B56  0E00               	movlw	0
  3833  001B58  0100               	movlb	0	; () banked
  3834  001B5A  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3835  001B5C  0100               	movlb	0	; () banked
  3836  001B5E  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
  3840  001B60  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3841  001B64  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3842  001B68  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3843  001B6C  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3844  001B70  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  3845  001B74  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  3846  001B78  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  3847  001B7C  0100               	movlb	0	; () banked
  3848  001B7E  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  3849  001B80  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3850  001B84  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3851  001B88  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3852  001B8C  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
  3856  001B90  C083  FF33         	movff	CANsendMessage@tamp,3891	;volatile
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
  3860  001B94  0E00               	movlw	0
  3861  001B96  010F               	movlb	15	; () banked
  3862  001B98  6F32               	movwf	50,b	;volatile
  3863                           
  3864                           ; BSR set to: 15
  3865                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
  3866  001B9A  010F               	movlb	15	; () banked
  3867  001B9C  8732               	bsf	50,3,b	;volatile
  3868                           
  3869                           ; BSR set to: 15
  3870                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
  3871  001B9E  0100               	movlb	0	; () banked
  3872  001BA0  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  3873  001BA2  D002               	goto	l380
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
  3877  001BA4  010F               	movlb	15	; () banked
  3878  001BA6  8132               	bsf	50,0,b	;volatile
  3879  001BA8                     l380:
  3880                           
  3881                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
  3882  001BA8  0100               	movlb	0	; () banked
  3883  001BAA  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  3884  001BAC  D002               	goto	l381
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
  3888  001BAE  010F               	movlb	15	; () banked
  3889  001BB0  8332               	bsf	50,1,b	;volatile
  3890  001BB2                     l381:
  3891                           
  3892                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
  3893  001BB2  0100               	movlb	0	; () banked
  3894  001BB4  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  3895  001BB6  D002               	goto	l382
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
  3899  001BB8  010F               	movlb	15	; () banked
  3900  001BBA  8B32               	bsf	50,5,b	;volatile
  3901  001BBC                     l382:
  3902                           
  3903                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
  3904  001BBC  0100               	movlb	0	; () banked
  3905  001BBE  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  3906  001BC0  D002               	goto	l383
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
  3910  001BC2  010F               	movlb	15	; () banked
  3911  001BC4  8D32               	bsf	50,6,b	;volatile
  3912  001BC6                     l383:
  3913                           
  3914                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
  3915  001BC6  0100               	movlb	0	; () banked
  3916  001BC8  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  3917  001BCA  D003               	goto	l4224
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
  3921  001BCC  010F               	movlb	15	; () banked
  3922  001BCE  8F32               	bsf	50,7,b	;volatile
  3923  001BD0  D000               	goto	l4224
  3924  001BD2                     l4224:
  3925                           
  3926                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
  3927  001BD2  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3928  001BD6  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3929  001BDA  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3930  001BDE  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3931  001BE2  0E16               	movlw	22
  3932  001BE4  D006               	goto	u4450
  3933  001BE6                     u4455:
  3934  001BE6  0100               	movlb	0	; () banked
  3935  001BE8  90D8               	bcf	status,0,c
  3936  001BEA  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3937  001BEC  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3938  001BEE  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3939  001BF0  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3940  001BF2                     u4450:
  3941  001BF2  2EE8               	decfsz	wreg,f,c
  3942  001BF4  D7F8               	goto	u4455
  3943  001BF6  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3944  001BFA  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3945  001BFE  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3946  001C02  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
  3950  001C06  0100               	movlb	0	; () banked
  3951  001C08  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3952  001C0A  0100               	movlb	0	; () banked
  3953  001C0C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3954  001C0E  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3955  001C10  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3956  001C12  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
  3960  001C14  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  3961                           
  3962                           ;inc\CANlib.h: 407: }
  3963  001C18  D05A               	goto	l4244
  3964  001C1A                     l379:
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;inc\CANlib.h: 409: else
  3968                           ;inc\CANlib.h: 411: {
  3969                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
  3970  001C1A  010F               	movlb	15	; () banked
  3971  001C1C  9732               	bcf	50,3,b	;volatile
  3972                           
  3973                           ; BSR set to: 15
  3974                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
  3975  001C1E  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3976  001C22  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3977  001C26  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3978  001C2A  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3979  001C2E  0E04               	movlw	4
  3980  001C30  D006               	goto	u4460
  3981  001C32                     u4465:
  3982  001C32  0100               	movlb	0	; () banked
  3983  001C34  90D8               	bcf	status,0,c
  3984  001C36  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3985  001C38  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3986  001C3A  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3987  001C3C  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3988  001C3E                     u4460:
  3989  001C3E  2EE8               	decfsz	wreg,f,c
  3990  001C40  D7F8               	goto	u4465
  3991  001C42  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3992  001C46  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3993  001C4A  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3994  001C4E  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
  3998  001C52  0100               	movlb	0	; () banked
  3999  001C54  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4000  001C56  0100               	movlb	0	; () banked
  4001  001C58  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4002  001C5A  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4003  001C5C  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4004  001C5E  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
  4008  001C60  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
  4012  001C64  0E07               	movlw	7
  4013  001C66  0100               	movlb	0	; () banked
  4014  001C68  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4015  001C6A  0100               	movlb	0	; () banked
  4016  001C6C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4017  001C6E  0E00               	movlw	0
  4018  001C70  0100               	movlb	0	; () banked
  4019  001C72  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4020  001C74  0100               	movlb	0	; () banked
  4021  001C76  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4022  001C78  0E00               	movlw	0
  4023  001C7A  0100               	movlb	0	; () banked
  4024  001C7C  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4025  001C7E  0100               	movlb	0	; () banked
  4026  001C80  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4027  001C82  0E00               	movlw	0
  4028  001C84  0100               	movlb	0	; () banked
  4029  001C86  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4030  001C88  0100               	movlb	0	; () banked
  4031  001C8A  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;inc\CANlib.h: 419: tamp = tamp << 5;
  4035  001C8C  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4036  001C90  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4037  001C94  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4038  001C98  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4039  001C9C  0E05               	movlw	5
  4040  001C9E                     u4475:
  4041  001C9E  90D8               	bcf	status,0,c
  4042  001CA0  0100               	movlb	0	; () banked
  4043  001CA2  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  4044  001CA4  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  4045  001CA6  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  4046  001CA8  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  4047  001CAA  2EE8               	decfsz	wreg,f,c
  4048  001CAC  D7F8               	goto	u4475
  4049  001CAE  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4050  001CB2  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4051  001CB6  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4052  001CBA  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
  4056  001CBE  010F               	movlb	15	; () banked
  4057  001CC0  5132               	movf	50,w,b	;volatile
  4058  001CC2  0B1F               	andlw	31
  4059  001CC4  010F               	movlb	15	; () banked
  4060  001CC6  6F32               	movwf	50,b	;volatile
  4061                           
  4062                           ; BSR set to: 15
  4063                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
  4064  001CC8  C083  FF32         	movff	CANsendMessage@tamp,3890	;volatile
  4065  001CCC  D000               	goto	l4244
  4066  001CCE                     l4244:
  4067                           
  4068                           ;inc\CANlib.h: 422: }
  4069                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
  4070  001CCE  0100               	movlb	0	; () banked
  4071  001CD0  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  4072  001CD2  D003               	goto	l386
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
  4076  001CD4  010F               	movlb	15	; () banked
  4077  001CD6  8130               	bsf	48,0,b	;volatile
  4078  001CD8  D002               	goto	l387
  4079  001CDA                     l386:
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;inc\CANlib.h: 426: else
  4083                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
  4084  001CDA  010F               	movlb	15	; () banked
  4085  001CDC  9130               	bcf	48,0,b	;volatile
  4086  001CDE                     l387:
  4087                           
  4088                           ; BSR set to: 15
  4089                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
  4090  001CDE  0100               	movlb	0	; () banked
  4091  001CE0  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  4092  001CE2  D003               	goto	l388
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
  4096  001CE4  010F               	movlb	15	; () banked
  4097  001CE6  8330               	bsf	48,1,b	;volatile
  4098  001CE8  D003               	goto	l4250
  4099  001CEA                     l388:
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;inc\CANlib.h: 430: else
  4103                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
  4104  001CEA  010F               	movlb	15	; () banked
  4105  001CEC  9330               	bcf	48,1,b	;volatile
  4106  001CEE  D000               	goto	l4250
  4107  001CF0                     l4250:
  4108                           
  4109                           ; BSR set to: 15
  4110                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
  4111  001CF0  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  4112  001CF4  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  4113  001CF8  50DF               	movf	indf2,w,c
  4114  001CFA  010F               	movlb	15	; () banked
  4115  001CFC  6F36               	movwf	54,b	;volatile
  4116                           
  4117                           ; BSR set to: 15
  4118                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
  4119  001CFE  0100               	movlb	0	; () banked
  4120  001D00  EE20 F001          	lfsr	2,1
  4121  001D04  517B               	movf	CANsendMessage@data& (0+255),w,b
  4122  001D06  26D9               	addwf	fsr2l,f,c
  4123  001D08  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4124  001D0A  22DA               	addwfc	fsr2h,f,c
  4125  001D0C  50DF               	movf	indf2,w,c
  4126  001D0E  010F               	movlb	15	; () banked
  4127  001D10  6F37               	movwf	55,b	;volatile
  4128                           
  4129                           ; BSR set to: 15
  4130                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
  4131  001D12  0100               	movlb	0	; () banked
  4132  001D14  EE20 F002          	lfsr	2,2
  4133  001D18  517B               	movf	CANsendMessage@data& (0+255),w,b
  4134  001D1A  26D9               	addwf	fsr2l,f,c
  4135  001D1C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4136  001D1E  22DA               	addwfc	fsr2h,f,c
  4137  001D20  50DF               	movf	indf2,w,c
  4138  001D22  010F               	movlb	15	; () banked
  4139  001D24  6F38               	movwf	56,b	;volatile
  4140                           
  4141                           ; BSR set to: 15
  4142                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
  4143  001D26  0100               	movlb	0	; () banked
  4144  001D28  EE20 F003          	lfsr	2,3
  4145  001D2C  517B               	movf	CANsendMessage@data& (0+255),w,b
  4146  001D2E  26D9               	addwf	fsr2l,f,c
  4147  001D30  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4148  001D32  22DA               	addwfc	fsr2h,f,c
  4149  001D34  50DF               	movf	indf2,w,c
  4150  001D36  010F               	movlb	15	; () banked
  4151  001D38  6F39               	movwf	57,b	;volatile
  4152                           
  4153                           ; BSR set to: 15
  4154                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
  4155  001D3A  0100               	movlb	0	; () banked
  4156  001D3C  EE20 F004          	lfsr	2,4
  4157  001D40  517B               	movf	CANsendMessage@data& (0+255),w,b
  4158  001D42  26D9               	addwf	fsr2l,f,c
  4159  001D44  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4160  001D46  22DA               	addwfc	fsr2h,f,c
  4161  001D48  50DF               	movf	indf2,w,c
  4162  001D4A  010F               	movlb	15	; () banked
  4163  001D4C  6F3A               	movwf	58,b	;volatile
  4164                           
  4165                           ; BSR set to: 15
  4166                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
  4167  001D4E  0100               	movlb	0	; () banked
  4168  001D50  EE20 F005          	lfsr	2,5
  4169  001D54  517B               	movf	CANsendMessage@data& (0+255),w,b
  4170  001D56  26D9               	addwf	fsr2l,f,c
  4171  001D58  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4172  001D5A  22DA               	addwfc	fsr2h,f,c
  4173  001D5C  50DF               	movf	indf2,w,c
  4174  001D5E  010F               	movlb	15	; () banked
  4175  001D60  6F3B               	movwf	59,b	;volatile
  4176                           
  4177                           ; BSR set to: 15
  4178                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
  4179  001D62  0100               	movlb	0	; () banked
  4180  001D64  EE20 F006          	lfsr	2,6
  4181  001D68  517B               	movf	CANsendMessage@data& (0+255),w,b
  4182  001D6A  26D9               	addwf	fsr2l,f,c
  4183  001D6C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4184  001D6E  22DA               	addwfc	fsr2h,f,c
  4185  001D70  50DF               	movf	indf2,w,c
  4186  001D72  010F               	movlb	15	; () banked
  4187  001D74  6F3C               	movwf	60,b	;volatile
  4188                           
  4189                           ; BSR set to: 15
  4190                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
  4191  001D76  0100               	movlb	0	; () banked
  4192  001D78  EE20 F007          	lfsr	2,7
  4193  001D7C  517B               	movf	CANsendMessage@data& (0+255),w,b
  4194  001D7E  26D9               	addwf	fsr2l,f,c
  4195  001D80  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4196  001D82  22DA               	addwfc	fsr2h,f,c
  4197  001D84  50DF               	movf	indf2,w,c
  4198  001D86  010F               	movlb	15	; () banked
  4199  001D88  6F3D               	movwf	61,b	;volatile
  4200                           
  4201                           ; BSR set to: 15
  4202                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
  4203  001D8A  010F               	movlb	15	; () banked
  4204  001D8C  8730               	bsf	48,3,b	;volatile
  4205                           
  4206                           ; BSR set to: 15
  4207                           ;inc\CANlib.h: 444: return;
  4208  001D8E  0012               	return	
  4209  001D90                     l376:
  4210                           
  4211                           ; BSR set to: 15
  4212                           ;inc\CANlib.h: 445: }
  4213                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
  4214  001D90  010F               	movlb	15	; () banked
  4215  001D92  B720               	btfsc	32,3,b	;volatile
  4216  001D94  0012               	return	
  4217                           
  4218                           ; BSR set to: 15
  4219                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
  4220  001D96  C07D  FF25         	movff	CANsendMessage@dataLength,3877	;volatile
  4221                           
  4222                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
  4223  001D9A  0100               	movlb	0	; () banked
  4224  001D9C  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  4225  001D9E  D003               	goto	l391
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
  4229  001DA0  010F               	movlb	15	; () banked
  4230  001DA2  8D25               	bsf	37,6,b	;volatile
  4231  001DA4  D002               	goto	l392
  4232  001DA6                     l391:
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;inc\CANlib.h: 454: else
  4236                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
  4237  001DA6  010F               	movlb	15	; () banked
  4238  001DA8  9D25               	bcf	37,6,b	;volatile
  4239  001DAA                     l392:
  4240                           
  4241                           ; BSR set to: 15
  4242                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
  4243  001DAA  0100               	movlb	0	; () banked
  4244  001DAC  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  4245  001DAE  D07A               	goto	l393
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;inc\CANlib.h: 458: {
  4249                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
  4250  001DB0  0100               	movlb	0	; () banked
  4251  001DB2  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  4252  001DB4  0100               	movlb	0	; () banked
  4253  001DB6  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4254  001DB8  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4255  001DBA  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4256  001DBC  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
  4260  001DBE  C083  FF24         	movff	CANsendMessage@tamp,3876	;volatile
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
  4264  001DC2  0E00               	movlw	0
  4265  001DC4  0100               	movlb	0	; () banked
  4266  001DC6  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4267  001DC8  0100               	movlb	0	; () banked
  4268  001DCA  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4269  001DCC  0EFF               	movlw	255
  4270  001DCE  0100               	movlb	0	; () banked
  4271  001DD0  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4272  001DD2  0100               	movlb	0	; () banked
  4273  001DD4  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4274  001DD6  0E00               	movlw	0
  4275  001DD8  0100               	movlb	0	; () banked
  4276  001DDA  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4277  001DDC  0100               	movlb	0	; () banked
  4278  001DDE  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4279  001DE0  0E00               	movlw	0
  4280  001DE2  0100               	movlb	0	; () banked
  4281  001DE4  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4282  001DE6  0100               	movlb	0	; () banked
  4283  001DE8  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4284                           
  4285                           ; BSR set to: 0
  4286                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
  4287  001DEA  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4288  001DEE  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4289  001DF2  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4290  001DF6  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4291  001DFA  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  4292  001DFE  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  4293  001E02  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  4294  001E06  0100               	movlb	0	; () banked
  4295  001E08  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  4296  001E0A  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4297  001E0E  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4298  001E12  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4299  001E16  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
  4303  001E1A  C083  FF23         	movff	CANsendMessage@tamp,3875	;volatile
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
  4307  001E1E  0E00               	movlw	0
  4308  001E20  010F               	movlb	15	; () banked
  4309  001E22  6F22               	movwf	34,b	;volatile
  4310                           
  4311                           ; BSR set to: 15
  4312                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
  4313  001E24  010F               	movlb	15	; () banked
  4314  001E26  8722               	bsf	34,3,b	;volatile
  4315                           
  4316                           ; BSR set to: 15
  4317                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
  4318  001E28  0100               	movlb	0	; () banked
  4319  001E2A  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  4320  001E2C  D002               	goto	l394
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
  4324  001E2E  010F               	movlb	15	; () banked
  4325  001E30  8122               	bsf	34,0,b	;volatile
  4326  001E32                     l394:
  4327                           
  4328                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
  4329  001E32  0100               	movlb	0	; () banked
  4330  001E34  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  4331  001E36  D002               	goto	l395
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
  4335  001E38  010F               	movlb	15	; () banked
  4336  001E3A  8322               	bsf	34,1,b	;volatile
  4337  001E3C                     l395:
  4338                           
  4339                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
  4340  001E3C  0100               	movlb	0	; () banked
  4341  001E3E  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  4342  001E40  D002               	goto	l396
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
  4346  001E42  010F               	movlb	15	; () banked
  4347  001E44  8B22               	bsf	34,5,b	;volatile
  4348  001E46                     l396:
  4349                           
  4350                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
  4351  001E46  0100               	movlb	0	; () banked
  4352  001E48  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  4353  001E4A  D002               	goto	l397
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
  4357  001E4C  010F               	movlb	15	; () banked
  4358  001E4E  8D22               	bsf	34,6,b	;volatile
  4359  001E50                     l397:
  4360                           
  4361                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
  4362  001E50  0100               	movlb	0	; () banked
  4363  001E52  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  4364  001E54  D003               	goto	l4300
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
  4368  001E56  010F               	movlb	15	; () banked
  4369  001E58  8F22               	bsf	34,7,b	;volatile
  4370  001E5A  D000               	goto	l4300
  4371  001E5C                     l4300:
  4372                           
  4373                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
  4374  001E5C  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4375  001E60  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4376  001E64  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4377  001E68  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4378  001E6C  0E16               	movlw	22
  4379  001E6E  D006               	goto	u4580
  4380  001E70                     u4585:
  4381  001E70  0100               	movlb	0	; () banked
  4382  001E72  90D8               	bcf	status,0,c
  4383  001E74  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4384  001E76  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4385  001E78  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4386  001E7A  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4387  001E7C                     u4580:
  4388  001E7C  2EE8               	decfsz	wreg,f,c
  4389  001E7E  D7F8               	goto	u4585
  4390  001E80  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4391  001E84  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4392  001E88  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4393  001E8C  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
  4397  001E90  0100               	movlb	0	; () banked
  4398  001E92  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4399  001E94  0100               	movlb	0	; () banked
  4400  001E96  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4401  001E98  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4402  001E9A  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4403  001E9C  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
  4407  001E9E  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  4408                           
  4409                           ;inc\CANlib.h: 483: }
  4410  001EA2  D05A               	goto	l4320
  4411  001EA4                     l393:
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;inc\CANlib.h: 485: else
  4415                           ;inc\CANlib.h: 487: {
  4416                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
  4417  001EA4  010F               	movlb	15	; () banked
  4418  001EA6  9722               	bcf	34,3,b	;volatile
  4419                           
  4420                           ; BSR set to: 15
  4421                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
  4422  001EA8  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4423  001EAC  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4424  001EB0  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4425  001EB4  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4426  001EB8  0E04               	movlw	4
  4427  001EBA  D006               	goto	u4590
  4428  001EBC                     u4595:
  4429  001EBC  0100               	movlb	0	; () banked
  4430  001EBE  90D8               	bcf	status,0,c
  4431  001EC0  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4432  001EC2  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4433  001EC4  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4434  001EC6  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4435  001EC8                     u4590:
  4436  001EC8  2EE8               	decfsz	wreg,f,c
  4437  001ECA  D7F8               	goto	u4595
  4438  001ECC  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4439  001ED0  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4440  001ED4  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4441  001ED8  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
  4445  001EDC  0100               	movlb	0	; () banked
  4446  001EDE  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4447  001EE0  0100               	movlb	0	; () banked
  4448  001EE2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4449  001EE4  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4450  001EE6  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4451  001EE8  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
  4455  001EEA  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
  4459  001EEE  0E07               	movlw	7
  4460  001EF0  0100               	movlb	0	; () banked
  4461  001EF2  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4462  001EF4  0100               	movlb	0	; () banked
  4463  001EF6  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4464  001EF8  0E00               	movlw	0
  4465  001EFA  0100               	movlb	0	; () banked
  4466  001EFC  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4467  001EFE  0100               	movlb	0	; () banked
  4468  001F00  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4469  001F02  0E00               	movlw	0
  4470  001F04  0100               	movlb	0	; () banked
  4471  001F06  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4472  001F08  0100               	movlb	0	; () banked
  4473  001F0A  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4474  001F0C  0E00               	movlw	0
  4475  001F0E  0100               	movlb	0	; () banked
  4476  001F10  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4477  001F12  0100               	movlb	0	; () banked
  4478  001F14  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;inc\CANlib.h: 495: tamp = tamp << 5;
  4482  001F16  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4483  001F1A  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4484  001F1E  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4485  001F22  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4486  001F26  0E05               	movlw	5
  4487  001F28                     u4605:
  4488  001F28  90D8               	bcf	status,0,c
  4489  001F2A  0100               	movlb	0	; () banked
  4490  001F2C  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  4491  001F2E  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  4492  001F30  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  4493  001F32  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  4494  001F34  2EE8               	decfsz	wreg,f,c
  4495  001F36  D7F8               	goto	u4605
  4496  001F38  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4497  001F3C  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4498  001F40  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4499  001F44  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
  4503  001F48  010F               	movlb	15	; () banked
  4504  001F4A  5122               	movf	34,w,b	;volatile
  4505  001F4C  0B1F               	andlw	31
  4506  001F4E  010F               	movlb	15	; () banked
  4507  001F50  6F22               	movwf	34,b	;volatile
  4508                           
  4509                           ; BSR set to: 15
  4510                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
  4511  001F52  C083  FF22         	movff	CANsendMessage@tamp,3874	;volatile
  4512  001F56  D000               	goto	l4320
  4513  001F58                     l4320:
  4514                           
  4515                           ;inc\CANlib.h: 498: }
  4516                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
  4517  001F58  0100               	movlb	0	; () banked
  4518  001F5A  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  4519  001F5C  D003               	goto	l400
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
  4523  001F5E  010F               	movlb	15	; () banked
  4524  001F60  8120               	bsf	32,0,b	;volatile
  4525  001F62  D002               	goto	l401
  4526  001F64                     l400:
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;inc\CANlib.h: 502: else
  4530                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
  4531  001F64  010F               	movlb	15	; () banked
  4532  001F66  9120               	bcf	32,0,b	;volatile
  4533  001F68                     l401:
  4534                           
  4535                           ; BSR set to: 15
  4536                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
  4537  001F68  0100               	movlb	0	; () banked
  4538  001F6A  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  4539  001F6C  D003               	goto	l402
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
  4543  001F6E  010F               	movlb	15	; () banked
  4544  001F70  8320               	bsf	32,1,b	;volatile
  4545  001F72  D003               	goto	l4326
  4546  001F74                     l402:
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;inc\CANlib.h: 506: else
  4550                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
  4551  001F74  010F               	movlb	15	; () banked
  4552  001F76  9320               	bcf	32,1,b	;volatile
  4553  001F78  D000               	goto	l4326
  4554  001F7A                     l4326:
  4555                           
  4556                           ; BSR set to: 15
  4557                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
  4558  001F7A  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  4559  001F7E  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  4560  001F82  50DF               	movf	indf2,w,c
  4561  001F84  010F               	movlb	15	; () banked
  4562  001F86  6F26               	movwf	38,b	;volatile
  4563                           
  4564                           ; BSR set to: 15
  4565                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
  4566  001F88  0100               	movlb	0	; () banked
  4567  001F8A  EE20 F001          	lfsr	2,1
  4568  001F8E  517B               	movf	CANsendMessage@data& (0+255),w,b
  4569  001F90  26D9               	addwf	fsr2l,f,c
  4570  001F92  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4571  001F94  22DA               	addwfc	fsr2h,f,c
  4572  001F96  50DF               	movf	indf2,w,c
  4573  001F98  010F               	movlb	15	; () banked
  4574  001F9A  6F27               	movwf	39,b	;volatile
  4575                           
  4576                           ; BSR set to: 15
  4577                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
  4578  001F9C  0100               	movlb	0	; () banked
  4579  001F9E  EE20 F002          	lfsr	2,2
  4580  001FA2  517B               	movf	CANsendMessage@data& (0+255),w,b
  4581  001FA4  26D9               	addwf	fsr2l,f,c
  4582  001FA6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4583  001FA8  22DA               	addwfc	fsr2h,f,c
  4584  001FAA  50DF               	movf	indf2,w,c
  4585  001FAC  010F               	movlb	15	; () banked
  4586  001FAE  6F28               	movwf	40,b	;volatile
  4587                           
  4588                           ; BSR set to: 15
  4589                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
  4590  001FB0  0100               	movlb	0	; () banked
  4591  001FB2  EE20 F003          	lfsr	2,3
  4592  001FB6  517B               	movf	CANsendMessage@data& (0+255),w,b
  4593  001FB8  26D9               	addwf	fsr2l,f,c
  4594  001FBA  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4595  001FBC  22DA               	addwfc	fsr2h,f,c
  4596  001FBE  50DF               	movf	indf2,w,c
  4597  001FC0  010F               	movlb	15	; () banked
  4598  001FC2  6F29               	movwf	41,b	;volatile
  4599                           
  4600                           ; BSR set to: 15
  4601                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
  4602  001FC4  0100               	movlb	0	; () banked
  4603  001FC6  EE20 F004          	lfsr	2,4
  4604  001FCA  517B               	movf	CANsendMessage@data& (0+255),w,b
  4605  001FCC  26D9               	addwf	fsr2l,f,c
  4606  001FCE  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4607  001FD0  22DA               	addwfc	fsr2h,f,c
  4608  001FD2  50DF               	movf	indf2,w,c
  4609  001FD4  010F               	movlb	15	; () banked
  4610  001FD6  6F2A               	movwf	42,b	;volatile
  4611                           
  4612                           ; BSR set to: 15
  4613                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
  4614  001FD8  0100               	movlb	0	; () banked
  4615  001FDA  EE20 F005          	lfsr	2,5
  4616  001FDE  517B               	movf	CANsendMessage@data& (0+255),w,b
  4617  001FE0  26D9               	addwf	fsr2l,f,c
  4618  001FE2  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4619  001FE4  22DA               	addwfc	fsr2h,f,c
  4620  001FE6  50DF               	movf	indf2,w,c
  4621  001FE8  010F               	movlb	15	; () banked
  4622  001FEA  6F2B               	movwf	43,b	;volatile
  4623                           
  4624                           ; BSR set to: 15
  4625                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
  4626  001FEC  0100               	movlb	0	; () banked
  4627  001FEE  EE20 F006          	lfsr	2,6
  4628  001FF2  517B               	movf	CANsendMessage@data& (0+255),w,b
  4629  001FF4  26D9               	addwf	fsr2l,f,c
  4630  001FF6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4631  001FF8  22DA               	addwfc	fsr2h,f,c
  4632  001FFA  50DF               	movf	indf2,w,c
  4633  001FFC  010F               	movlb	15	; () banked
  4634  001FFE  6F2C               	movwf	44,b	;volatile
  4635                           
  4636                           ; BSR set to: 15
  4637                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
  4638  002000  0100               	movlb	0	; () banked
  4639  002002  EE20 F007          	lfsr	2,7
  4640  002006  517B               	movf	CANsendMessage@data& (0+255),w,b
  4641  002008  26D9               	addwf	fsr2l,f,c
  4642  00200A  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4643  00200C  22DA               	addwfc	fsr2h,f,c
  4644  00200E  50DF               	movf	indf2,w,c
  4645  002010  010F               	movlb	15	; () banked
  4646  002012  6F2D               	movwf	45,b	;volatile
  4647                           
  4648                           ; BSR set to: 15
  4649                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
  4650  002014  010F               	movlb	15	; () banked
  4651  002016  8720               	bsf	32,3,b	;volatile
  4652                           
  4653                           ; BSR set to: 15
  4654                           ;inc\CANlib.h: 520: return;
  4655  002018  0012               	return	
  4656                           
  4657                           ; BSR set to: 15
  4658                           
  4659                           ; BSR set to: 15
  4660  00201A  0012               	return		;funcret
  4661  00201C                     __end_of_CANsendMessage:
  4662                           	opt stack 0
  4663                           tblptru	equ	0xFF8
  4664                           tblptrh	equ	0xFF7
  4665                           tblptrl	equ	0xFF6
  4666                           tablat	equ	0xFF5
  4667                           postinc0	equ	0xFEE
  4668                           wreg	equ	0xFE8
  4669                           postdec1	equ	0xFE5
  4670                           fsr1l	equ	0xFE1
  4671                           indf2	equ	0xFDF
  4672                           postinc2	equ	0xFDE
  4673                           postdec2	equ	0xFDD
  4674                           fsr2h	equ	0xFDA
  4675                           fsr2l	equ	0xFD9
  4676                           status	equ	0xFD8
  4677                           
  4678 ;; *************** function _CANisTxReady *****************
  4679 ;; Defined at:
  4680 ;;		line 1154 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  4681 ;; Parameters:    Size  Location     Type
  4682 ;;		None
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;		None
  4685 ;; Return value:  Size  Location     Type
  4686 ;;                  1    wreg      unsigned char 
  4687 ;; Registers used:
  4688 ;;		wreg, status,2
  4689 ;; Tracked objects:
  4690 ;;		On entry : 0/0
  4691 ;;		On exit  : 0/0
  4692 ;;		Unchanged: 0/0
  4693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4697 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4698 ;;Total ram usage:        1 bytes
  4699 ;; Hardware stack levels used:    1
  4700 ;; Hardware stack levels required when called:    5
  4701 ;; This function calls:
  4702 ;;		Nothing
  4703 ;; This function is called by:
  4704 ;;		_main
  4705 ;;		_park_search
  4706 ;;		_park_routine
  4707 ;;		_can_send
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711                           	psect	text6
  4712  005DE0                     __ptext6:
  4713                           	opt stack 0
  4714  005DE0                     _CANisTxReady:
  4715                           	opt stack 22
  4716                           
  4717                           ;inc\CANlib.h: 1156: return (!TXB0CONbits.TXREQ || !TXB1CONbits.TXREQ || !TXB2CONbits.TX
      +                          REQ);
  4718                           
  4719                           ; BSR set to: 15
  4720                           ;incstack = 0
  4721  005DE0  0E01               	movlw	1
  4722  005DE2  0100               	movlb	0	; () banked
  4723  005DE4  6F77               	movwf	_CANisTxReady$2841& (0+255),b
  4724                           
  4725                           ; BSR set to: 0
  4726  005DE6  010F               	movlb	15	; () banked
  4727  005DE8  A740               	btfss	64,3,b	;volatile
  4728  005DEA  D009               	goto	l554
  4729                           
  4730                           ; BSR set to: 15
  4731  005DEC  010F               	movlb	15	; () banked
  4732  005DEE  A730               	btfss	48,3,b	;volatile
  4733  005DF0  D006               	goto	l554
  4734                           
  4735                           ; BSR set to: 15
  4736  005DF2  010F               	movlb	15	; () banked
  4737  005DF4  A720               	btfss	32,3,b	;volatile
  4738  005DF6  D003               	goto	l554
  4739                           
  4740                           ; BSR set to: 15
  4741  005DF8  0E00               	movlw	0
  4742  005DFA  0100               	movlb	0	; () banked
  4743  005DFC  6F77               	movwf	_CANisTxReady$2841& (0+255),b
  4744  005DFE                     l554:
  4745  005DFE  0100               	movlb	0	; () banked
  4746  005E00  5177               	movf	_CANisTxReady$2841& (0+255),w,b
  4747  005E02  0012               	return	
  4748                           
  4749                           ; BSR set to: 0
  4750                           
  4751                           ; BSR set to: 0
  4752  005E04  0012               	return		;funcret
  4753  005E06                     __end_of_CANisTxReady:
  4754                           	opt stack 0
  4755                           tblptru	equ	0xFF8
  4756                           tblptrh	equ	0xFF7
  4757                           tblptrl	equ	0xFF6
  4758                           tablat	equ	0xFF5
  4759                           postinc0	equ	0xFEE
  4760                           wreg	equ	0xFE8
  4761                           postdec1	equ	0xFE5
  4762                           fsr1l	equ	0xFE1
  4763                           indf2	equ	0xFDF
  4764                           postinc2	equ	0xFDE
  4765                           postdec2	equ	0xFDD
  4766                           fsr2h	equ	0xFDA
  4767                           fsr2l	equ	0xFD9
  4768                           status	equ	0xFD8
  4769                           
  4770 ;; *************** function _abs *****************
  4771 ;; Defined at:
  4772 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\abs.c"
  4773 ;; Parameters:    Size  Location     Type
  4774 ;;  a               2   23[BANK0 ] int 
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;		None
  4777 ;; Return value:  Size  Location     Type
  4778 ;;                  2   23[BANK0 ] int 
  4779 ;; Registers used:
  4780 ;;		wreg, status,2, status,0
  4781 ;; Tracked objects:
  4782 ;;		On entry : 0/0
  4783 ;;		On exit  : 0/0
  4784 ;;		Unchanged: 0/0
  4785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4786 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4788 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4789 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;Total ram usage:        4 bytes
  4791 ;; Hardware stack levels used:    1
  4792 ;; Hardware stack levels required when called:    5
  4793 ;; This function calls:
  4794 ;;		Nothing
  4795 ;; This function is called by:
  4796 ;;		_park_search
  4797 ;;		_parallelo
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           	psect	text7
  4802  005D8C                     __ptext7:
  4803                           	opt stack 0
  4804  005D8C                     _abs:
  4805                           	opt stack 23
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;incstack = 0
  4809  005D8C  0100               	movlb	0	; () banked
  4810  005D8E  AF78               	btfss	(abs@a+1)& (0+255),7,b
  4811  005D90  D00E               	goto	l901
  4812                           
  4813                           ; BSR set to: 0
  4814  005D92  C077  F079         	movff	abs@a,??_abs
  4815  005D96  C078  F07A         	movff	abs@a+1,??_abs+1
  4816  005D9A  0100               	movlb	0	; () banked
  4817  005D9C  1F79               	comf	??_abs& (0+255),f,b
  4818  005D9E  1F7A               	comf	(??_abs+1)& (0+255),f,b
  4819  005DA0  4B79               	infsnz	??_abs& (0+255),f,b
  4820  005DA2  2B7A               	incf	(??_abs+1)& (0+255),f,b
  4821  005DA4  C079  F077         	movff	??_abs,?_abs
  4822  005DA8  C07A  F078         	movff	??_abs+1,?_abs+1
  4823  005DAC  0012               	return	
  4824  005DAE                     l901:
  4825                           
  4826                           ; BSR set to: 0
  4827  005DAE  C077  F077         	movff	abs@a,?_abs
  4828  005DB2  C078  F078         	movff	abs@a+1,?_abs+1
  4829                           
  4830                           ; BSR set to: 0
  4831  005DB6  0012               	return		;funcret
  4832  005DB8                     __end_of_abs:
  4833                           	opt stack 0
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           postinc0	equ	0xFEE
  4839                           wreg	equ	0xFE8
  4840                           postdec1	equ	0xFE5
  4841                           fsr1l	equ	0xFE1
  4842                           indf2	equ	0xFDF
  4843                           postinc2	equ	0xFDE
  4844                           postdec2	equ	0xFDD
  4845                           fsr2h	equ	0xFDA
  4846                           fsr2l	equ	0xFD9
  4847                           status	equ	0xFD8
  4848                           
  4849 ;; *************** function ___awtofl *****************
  4850 ;; Defined at:
  4851 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;  c               2   33[BANK0 ] int 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  f1              4    0        int 
  4856 ;;  sign            1   37[BANK0 ] unsigned char 
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  4   33[BANK0 ] unsigned char 
  4859 ;; Registers used:
  4860 ;;		wreg, status,2, status,0, cstack
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4866 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;Total ram usage:        5 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:    6
  4873 ;; This function calls:
  4874 ;;		___flpack
  4875 ;; This function is called by:
  4876 ;;		_park_search
  4877 ;;		_parallelo
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text8
  4882  005BBC                     __ptext8:
  4883                           	opt stack 0
  4884  005BBC                     ___awtofl:
  4885                           	opt stack 22
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;incstack = 0
  4889  005BBC  0E00               	movlw	0
  4890  005BBE  0100               	movlb	0	; () banked
  4891  005BC0  6F85               	movwf	___awtofl@sign& (0+255),b
  4892                           
  4893                           ; BSR set to: 0
  4894  005BC2  0100               	movlb	0	; () banked
  4895  005BC4  AF82               	btfss	(___awtofl@c+1)& (0+255),7,b
  4896  005BC6  D008               	goto	l6456
  4897                           
  4898                           ; BSR set to: 0
  4899  005BC8  0100               	movlb	0	; () banked
  4900  005BCA  6D81               	negf	___awtofl@c& (0+255),b
  4901  005BCC  1F82               	comf	(___awtofl@c+1)& (0+255),f,b
  4902  005BCE  B0D8               	btfsc	status,0,c
  4903  005BD0  2B82               	incf	(___awtofl@c+1)& (0+255),f,b
  4904  005BD2  0100               	movlb	0	; () banked
  4905  005BD4  2B85               	incf	___awtofl@sign& (0+255),f,b
  4906  005BD6  D000               	goto	l6456
  4907  005BD8                     l6456:
  4908                           
  4909                           ; BSR set to: 0
  4910  005BD8  C081  F077         	movff	___awtofl@c,___flpack@arg
  4911  005BDC  C082  F078         	movff	___awtofl@c+1,___flpack@arg+1
  4912  005BE0  0100               	movlb	0	; () banked
  4913  005BE2  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  4914  005BE4  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  4915  005BE6  0E96               	movlw	150
  4916  005BE8  0100               	movlb	0	; () banked
  4917  005BEA  6F7B               	movwf	___flpack@exp& (0+255),b
  4918  005BEC  C085  F07C         	movff	___awtofl@sign,___flpack@sign
  4919  005BF0  EC67  F026         	call	___flpack	;wreg free
  4920  005BF4  C077  F081         	movff	?___flpack,?___awtofl
  4921  005BF8  C078  F082         	movff	?___flpack+1,?___awtofl+1
  4922  005BFC  C079  F083         	movff	?___flpack+2,?___awtofl+2
  4923  005C00  C07A  F084         	movff	?___flpack+3,?___awtofl+3
  4924  005C04  0012               	return	
  4925  005C06  0012               	return		;funcret
  4926  005C08                     __end_of___awtofl:
  4927                           	opt stack 0
  4928                           tblptru	equ	0xFF8
  4929                           tblptrh	equ	0xFF7
  4930                           tblptrl	equ	0xFF6
  4931                           tablat	equ	0xFF5
  4932                           postinc0	equ	0xFEE
  4933                           wreg	equ	0xFE8
  4934                           postdec1	equ	0xFE5
  4935                           fsr1l	equ	0xFE1
  4936                           indf2	equ	0xFDF
  4937                           postinc2	equ	0xFDE
  4938                           postdec2	equ	0xFDD
  4939                           fsr2h	equ	0xFDA
  4940                           fsr2l	equ	0xFD9
  4941                           status	equ	0xFD8
  4942                           
  4943 ;; *************** function _matematica *****************
  4944 ;; Defined at:
  4945 ;;		line 500 in file "parcheggio.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;		None
  4948 ;; Auto vars:     Size  Location     Type
  4949 ;;		None
  4950 ;; Return value:  Size  Location     Type
  4951 ;;		None               void
  4952 ;; Registers used:
  4953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4954 ;; Tracked objects:
  4955 ;;		On entry : 0/0
  4956 ;;		On exit  : 0/0
  4957 ;;		Unchanged: 0/0
  4958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4960 ;;      Locals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  4961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4962 ;;      Totals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  4963 ;;Total ram usage:       28 bytes
  4964 ;; Hardware stack levels used:    1
  4965 ;; Hardware stack levels required when called:   10
  4966 ;; This function calls:
  4967 ;;		___fladd
  4968 ;;		___fldiv
  4969 ;;		___flmul
  4970 ;;		___flneg
  4971 ;;		_asin
  4972 ;;		_cos
  4973 ;; This function is called by:
  4974 ;;		_park_routine
  4975 ;; This function uses a non-reentrant model
  4976 ;;
  4977                           
  4978                           	psect	text9
  4979  0026C0                     __ptext9:
  4980                           	opt stack 0
  4981  0026C0                     _matematica:
  4982                           	opt stack 19
  4983                           
  4984                           ;parcheggio.c: 501: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  4985                           
  4986                           ;incstack = 0
  4987  0026C0  C12C  F0A3         	movff	_bordo,___fladd@f2	;volatile
  4988  0026C4  C12D  F0A4         	movff	_bordo+1,___fladd@f2+1	;volatile
  4989  0026C8  C12E  F0A5         	movff	_bordo+2,___fladd@f2+2	;volatile
  4990  0026CC  C12F  F0A6         	movff	_bordo+3,___fladd@f2+3	;volatile
  4991  0026D0  0E00               	movlw	0
  4992  0026D2  0100               	movlb	0	; () banked
  4993  0026D4  6F85               	movwf	___fldiv@f2& (0+255),b
  4994  0026D6  0E00               	movlw	0
  4995  0026D8  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  4996  0026DA  0E00               	movlw	0
  4997  0026DC  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  4998  0026DE  0E40               	movlw	64
  4999  0026E0  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5000  0026E2  C1F0  F081         	movff	_larghezza,___fldiv@f1	;volatile
  5001  0026E6  C1F1  F082         	movff	_larghezza+1,___fldiv@f1+1	;volatile
  5002  0026EA  C1F2  F083         	movff	_larghezza+2,___fldiv@f1+2	;volatile
  5003  0026EE  C1F3  F084         	movff	_larghezza+3,___fldiv@f1+3	;volatile
  5004  0026F2  ECD9  F027         	call	___fldiv	;wreg free
  5005  0026F6  C081  F09F         	movff	?___fldiv,___fladd@f1
  5006  0026FA  C082  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  5007  0026FE  C083  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  5008  002702  C084  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  5009  002706  ECF8  F01F         	call	___fladd	;wreg free
  5010  00270A  C09F  F0AB         	movff	?___fladd,___flneg@f1
  5011  00270E  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  5012  002712  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  5013  002716  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  5014  00271A  EC23  F02E         	call	___flneg	;wreg free
  5015  00271E  C0AB  F1C6         	movff	?___flneg,_matematica$3668
  5016  002722  C0AC  F1C7         	movff	?___flneg+1,_matematica$3668+1
  5017  002726  C0AD  F1C8         	movff	?___flneg+2,_matematica$3668+2
  5018  00272A  C0AE  F1C9         	movff	?___flneg+3,_matematica$3668+3
  5019                           
  5020                           ;parcheggio.c: 501: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  5021  00272E  C1C6  F0A3         	movff	_matematica$3668,___fladd@f2
  5022  002732  C1C7  F0A4         	movff	_matematica$3668+1,___fladd@f2+1
  5023  002736  C1C8  F0A5         	movff	_matematica$3668+2,___fladd@f2+2
  5024  00273A  C1C9  F0A6         	movff	_matematica$3668+3,___fladd@f2+3
  5025  00273E  0E00               	movlw	0
  5026  002740  0100               	movlb	0	; () banked
  5027  002742  6F94               	movwf	___flmul@f2& (0+255),b
  5028  002744  0E00               	movlw	0
  5029  002746  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5030  002748  0E00               	movlw	0
  5031  00274A  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5032  00274C  0E40               	movlw	64
  5033  00274E  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5034  002750  C1F4  F090         	movff	_raggio,___flmul@f1	;volatile
  5035  002754  C1F5  F091         	movff	_raggio+1,___flmul@f1+1	;volatile
  5036  002758  C1F6  F092         	movff	_raggio+2,___flmul@f1+2	;volatile
  5037  00275C  C1F7  F093         	movff	_raggio+3,___flmul@f1+3	;volatile
  5038  002760  EC27  F027         	call	___flmul	;wreg free
  5039  002764  C090  F09F         	movff	?___flmul,___fladd@f1
  5040  002768  C091  F0A0         	movff	?___flmul+1,___fladd@f1+1
  5041  00276C  C092  F0A1         	movff	?___flmul+2,___fladd@f1+2
  5042  002770  C093  F0A2         	movff	?___flmul+3,___fladd@f1+3
  5043  002774  ECF8  F01F         	call	___fladd	;wreg free
  5044  002778  C09F  F1CA         	movff	?___fladd,_matematica$3669
  5045  00277C  C0A0  F1CB         	movff	?___fladd+1,_matematica$3669+1
  5046  002780  C0A1  F1CC         	movff	?___fladd+2,_matematica$3669+2
  5047  002784  C0A2  F1CD         	movff	?___fladd+3,_matematica$3669+3
  5048                           
  5049                           ;parcheggio.c: 501: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  5050  002788  0E00               	movlw	0
  5051  00278A  0100               	movlb	0	; () banked
  5052  00278C  6F85               	movwf	___fldiv@f2& (0+255),b
  5053  00278E  0E00               	movlw	0
  5054  002790  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5055  002792  0E00               	movlw	0
  5056  002794  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5057  002796  0E40               	movlw	64
  5058  002798  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5059  00279A  C1F0  F081         	movff	_larghezza,___fldiv@f1	;volatile
  5060  00279E  C1F1  F082         	movff	_larghezza+1,___fldiv@f1+1	;volatile
  5061  0027A2  C1F2  F083         	movff	_larghezza+2,___fldiv@f1+2	;volatile
  5062  0027A6  C1F3  F084         	movff	_larghezza+3,___fldiv@f1+3	;volatile
  5063  0027AA  ECD9  F027         	call	___fldiv	;wreg free
  5064  0027AE  C081  F0AB         	movff	?___fldiv,___flneg@f1
  5065  0027B2  C082  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  5066  0027B6  C083  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  5067  0027BA  C084  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  5068  0027BE  EC23  F02E         	call	___flneg	;wreg free
  5069  0027C2  C0AB  F0A3         	movff	?___flneg,___fladd@f2
  5070  0027C6  C0AC  F0A4         	movff	?___flneg+1,___fladd@f2+1
  5071  0027CA  C0AD  F0A5         	movff	?___flneg+2,___fladd@f2+2
  5072  0027CE  C0AE  F0A6         	movff	?___flneg+3,___fladd@f2+3
  5073  0027D2  C1CA  F09F         	movff	_matematica$3669,___fladd@f1
  5074  0027D6  C1CB  F0A0         	movff	_matematica$3669+1,___fladd@f1+1
  5075  0027DA  C1CC  F0A1         	movff	_matematica$3669+2,___fladd@f1+2
  5076  0027DE  C1CD  F0A2         	movff	_matematica$3669+3,___fladd@f1+3
  5077  0027E2  ECF8  F01F         	call	___fladd	;wreg free
  5078  0027E6  C09F  F1CE         	movff	?___fladd,_matematica$3670
  5079  0027EA  C0A0  F1CF         	movff	?___fladd+1,_matematica$3670+1
  5080  0027EE  C0A1  F1D0         	movff	?___fladd+2,_matematica$3670+2
  5081  0027F2  C0A2  F1D1         	movff	?___fladd+3,_matematica$3670+3
  5082                           
  5083                           ;parcheggio.c: 501: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  5084  0027F6  C1CE  F081         	movff	_matematica$3670,___fldiv@f1
  5085  0027FA  C1CF  F082         	movff	_matematica$3670+1,___fldiv@f1+1
  5086  0027FE  C1D0  F083         	movff	_matematica$3670+2,___fldiv@f1+2
  5087  002802  C1D1  F084         	movff	_matematica$3670+3,___fldiv@f1+3
  5088  002806  0E00               	movlw	0
  5089  002808  0100               	movlb	0	; () banked
  5090  00280A  6F94               	movwf	___flmul@f2& (0+255),b
  5091  00280C  0E00               	movlw	0
  5092  00280E  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5093  002810  0E00               	movlw	0
  5094  002812  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5095  002814  0E40               	movlw	64
  5096  002816  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5097  002818  C1F4  F090         	movff	_raggio,___flmul@f1	;volatile
  5098  00281C  C1F5  F091         	movff	_raggio+1,___flmul@f1+1	;volatile
  5099  002820  C1F6  F092         	movff	_raggio+2,___flmul@f1+2	;volatile
  5100  002824  C1F7  F093         	movff	_raggio+3,___flmul@f1+3	;volatile
  5101  002828  EC27  F027         	call	___flmul	;wreg free
  5102  00282C  C090  F085         	movff	?___flmul,___fldiv@f2
  5103  002830  C091  F086         	movff	?___flmul+1,___fldiv@f2+1
  5104  002834  C092  F087         	movff	?___flmul+2,___fldiv@f2+2
  5105  002838  C093  F088         	movff	?___flmul+3,___fldiv@f2+3
  5106  00283C  ECD9  F027         	call	___fldiv	;wreg free
  5107  002840  C081  F1D2         	movff	?___fldiv,_matematica$3671
  5108  002844  C082  F1D3         	movff	?___fldiv+1,_matematica$3671+1
  5109  002848  C083  F1D4         	movff	?___fldiv+2,_matematica$3671+2
  5110  00284C  C084  F1D5         	movff	?___fldiv+3,_matematica$3671+3
  5111                           
  5112                           ;parcheggio.c: 501: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  5113  002850  C1D2  F1A2         	movff	_matematica$3671,asin@x
  5114  002854  C1D3  F1A3         	movff	_matematica$3671+1,asin@x+1
  5115  002858  C1D4  F1A4         	movff	_matematica$3671+2,asin@x+2
  5116  00285C  C1D5  F1A5         	movff	_matematica$3671+3,asin@x+3
  5117  002860  ECD8  F01C         	call	_asin	;wreg free
  5118  002864  C1A2  F124         	movff	?_asin,_alfa	;volatile
  5119  002868  C1A3  F125         	movff	?_asin+1,_alfa+1	;volatile
  5120  00286C  C1A4  F126         	movff	?_asin+2,_alfa+2	;volatile
  5121  002870  C1A5  F127         	movff	?_asin+3,_alfa+3	;volatile
  5122                           
  5123                           ;parcheggio.c: 502: alfa = alfa / 3.14159265358979323846 * 180;
  5124  002874  0EDB               	movlw	219
  5125  002876  0100               	movlb	0	; () banked
  5126  002878  6F85               	movwf	___fldiv@f2& (0+255),b
  5127  00287A  0E0F               	movlw	15
  5128  00287C  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5129  00287E  0E49               	movlw	73
  5130  002880  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5131  002882  0E40               	movlw	64
  5132  002884  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5133  002886  C124  F081         	movff	_alfa,___fldiv@f1	;volatile
  5134  00288A  C125  F082         	movff	_alfa+1,___fldiv@f1+1	;volatile
  5135  00288E  C126  F083         	movff	_alfa+2,___fldiv@f1+2	;volatile
  5136  002892  C127  F084         	movff	_alfa+3,___fldiv@f1+3	;volatile
  5137  002896  ECD9  F027         	call	___fldiv	;wreg free
  5138  00289A  C081  F090         	movff	?___fldiv,___flmul@f1
  5139  00289E  C082  F091         	movff	?___fldiv+1,___flmul@f1+1
  5140  0028A2  C083  F092         	movff	?___fldiv+2,___flmul@f1+2
  5141  0028A6  C084  F093         	movff	?___fldiv+3,___flmul@f1+3
  5142  0028AA  0E00               	movlw	0
  5143  0028AC  0100               	movlb	0	; () banked
  5144  0028AE  6F94               	movwf	___flmul@f2& (0+255),b
  5145  0028B0  0E00               	movlw	0
  5146  0028B2  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5147  0028B4  0E34               	movlw	52
  5148  0028B6  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5149  0028B8  0E43               	movlw	67
  5150  0028BA  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5151  0028BC  EC27  F027         	call	___flmul	;wreg free
  5152  0028C0  C090  F124         	movff	?___flmul,_alfa	;volatile
  5153  0028C4  C091  F125         	movff	?___flmul+1,_alfa+1	;volatile
  5154  0028C8  C092  F126         	movff	?___flmul+2,_alfa+2	;volatile
  5155  0028CC  C093  F127         	movff	?___flmul+3,_alfa+3	;volatile
  5156                           
  5157                           ;parcheggio.c: 503: beta = 90 - alfa;
  5158  0028D0  C124  F0AB         	movff	_alfa,___flneg@f1	;volatile
  5159  0028D4  C125  F0AC         	movff	_alfa+1,___flneg@f1+1	;volatile
  5160  0028D8  C126  F0AD         	movff	_alfa+2,___flneg@f1+2	;volatile
  5161  0028DC  C127  F0AE         	movff	_alfa+3,___flneg@f1+3	;volatile
  5162  0028E0  EC23  F02E         	call	___flneg	;wreg free
  5163  0028E4  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5164  0028E8  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5165  0028EC  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5166  0028F0  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5167  0028F4  0E00               	movlw	0
  5168  0028F6  0100               	movlb	0	; () banked
  5169  0028F8  6FA3               	movwf	___fladd@f2& (0+255),b
  5170  0028FA  0E00               	movlw	0
  5171  0028FC  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5172  0028FE  0EB4               	movlw	180
  5173  002900  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5174  002902  0E42               	movlw	66
  5175  002904  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5176  002906  ECF8  F01F         	call	___fladd	;wreg free
  5177  00290A  C09F  F128         	movff	?___fladd,_beta	;volatile
  5178  00290E  C0A0  F129         	movff	?___fladd+1,_beta+1	;volatile
  5179  002912  C0A1  F12A         	movff	?___fladd+2,_beta+2	;volatile
  5180  002916  C0A2  F12B         	movff	?___fladd+3,_beta+3	;volatile
  5181                           
  5182                           ;parcheggio.c: 504: alfa = (alfa * 3.14159265358979323846) / 180;
  5183  00291A  0EDB               	movlw	219
  5184  00291C  0100               	movlb	0	; () banked
  5185  00291E  6F94               	movwf	___flmul@f2& (0+255),b
  5186  002920  0E0F               	movlw	15
  5187  002922  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5188  002924  0E49               	movlw	73
  5189  002926  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5190  002928  0E40               	movlw	64
  5191  00292A  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5192  00292C  C124  F090         	movff	_alfa,___flmul@f1	;volatile
  5193  002930  C125  F091         	movff	_alfa+1,___flmul@f1+1	;volatile
  5194  002934  C126  F092         	movff	_alfa+2,___flmul@f1+2	;volatile
  5195  002938  C127  F093         	movff	_alfa+3,___flmul@f1+3	;volatile
  5196  00293C  EC27  F027         	call	___flmul	;wreg free
  5197  002940  C090  F081         	movff	?___flmul,___fldiv@f1
  5198  002944  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5199  002948  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5200  00294C  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5201  002950  0E00               	movlw	0
  5202  002952  0100               	movlb	0	; () banked
  5203  002954  6F85               	movwf	___fldiv@f2& (0+255),b
  5204  002956  0E00               	movlw	0
  5205  002958  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5206  00295A  0E34               	movlw	52
  5207  00295C  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5208  00295E  0E43               	movlw	67
  5209  002960  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5210  002962  ECD9  F027         	call	___fldiv	;wreg free
  5211  002966  C081  F124         	movff	?___fldiv,_alfa	;volatile
  5212  00296A  C082  F125         	movff	?___fldiv+1,_alfa+1	;volatile
  5213  00296E  C083  F126         	movff	?___fldiv+2,_alfa+2	;volatile
  5214  002972  C084  F127         	movff	?___fldiv+3,_alfa+3	;volatile
  5215                           
  5216                           ;parcheggio.c: 505: n = cos(alfa);
  5217  002976  C124  F1BE         	movff	_alfa,cos@f	;volatile
  5218  00297A  C125  F1BF         	movff	_alfa+1,cos@f+1	;volatile
  5219  00297E  C126  F1C0         	movff	_alfa+2,cos@f+2	;volatile
  5220  002982  C127  F1C1         	movff	_alfa+3,cos@f+3	;volatile
  5221  002986  ECA4  F02B         	call	_cos	;wreg free
  5222  00298A  C1BE  F130         	movff	?_cos,_n	;volatile
  5223  00298E  C1BF  F131         	movff	?_cos+1,_n+1	;volatile
  5224  002992  C1C0  F132         	movff	?_cos+2,_n+2	;volatile
  5225  002996  C1C1  F133         	movff	?_cos+3,_n+3	;volatile
  5226                           
  5227                           ;parcheggio.c: 506: n = 2 * raggio *n;
  5228  00299A  C130  F094         	movff	_n,___flmul@f2	;volatile
  5229  00299E  C131  F095         	movff	_n+1,___flmul@f2+1	;volatile
  5230  0029A2  C132  F096         	movff	_n+2,___flmul@f2+2	;volatile
  5231  0029A6  C133  F097         	movff	_n+3,___flmul@f2+3	;volatile
  5232  0029AA  C1F4  F090         	movff	_raggio,___flmul@f1	;volatile
  5233  0029AE  C1F5  F091         	movff	_raggio+1,___flmul@f1+1	;volatile
  5234  0029B2  C1F6  F092         	movff	_raggio+2,___flmul@f1+2	;volatile
  5235  0029B6  C1F7  F093         	movff	_raggio+3,___flmul@f1+3	;volatile
  5236  0029BA  EC27  F027         	call	___flmul	;wreg free
  5237  0029BE  C090  F1DE         	movff	?___flmul,_matematica$3672
  5238  0029C2  C091  F1DF         	movff	?___flmul+1,_matematica$3672+1
  5239  0029C6  C092  F1E0         	movff	?___flmul+2,_matematica$3672+2
  5240  0029CA  C093  F1E1         	movff	?___flmul+3,_matematica$3672+3
  5241                           
  5242                           ;parcheggio.c: 506: n = 2 * raggio *n;
  5243  0029CE  C1DE  F090         	movff	_matematica$3672,___flmul@f1
  5244  0029D2  C1DF  F091         	movff	_matematica$3672+1,___flmul@f1+1
  5245  0029D6  C1E0  F092         	movff	_matematica$3672+2,___flmul@f1+2
  5246  0029DA  C1E1  F093         	movff	_matematica$3672+3,___flmul@f1+3
  5247  0029DE  0E00               	movlw	0
  5248  0029E0  0100               	movlb	0	; () banked
  5249  0029E2  6F94               	movwf	___flmul@f2& (0+255),b
  5250  0029E4  0E00               	movlw	0
  5251  0029E6  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5252  0029E8  0E00               	movlw	0
  5253  0029EA  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5254  0029EC  0E40               	movlw	64
  5255  0029EE  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5256  0029F0  EC27  F027         	call	___flmul	;wreg free
  5257  0029F4  C090  F130         	movff	?___flmul,_n	;volatile
  5258  0029F8  C091  F131         	movff	?___flmul+1,_n+1	;volatile
  5259  0029FC  C092  F132         	movff	?___flmul+2,_n+2	;volatile
  5260  002A00  C093  F133         	movff	?___flmul+3,_n+3	;volatile
  5261                           
  5262                           ;parcheggio.c: 507: prima_sterzata = 2 * 3.14159265358979323846 * raggio * beta / 360;
  5263  002A04  C128  F094         	movff	_beta,___flmul@f2	;volatile
  5264  002A08  C129  F095         	movff	_beta+1,___flmul@f2+1	;volatile
  5265  002A0C  C12A  F096         	movff	_beta+2,___flmul@f2+2	;volatile
  5266  002A10  C12B  F097         	movff	_beta+3,___flmul@f2+3	;volatile
  5267  002A14  C1F4  F090         	movff	_raggio,___flmul@f1	;volatile
  5268  002A18  C1F5  F091         	movff	_raggio+1,___flmul@f1+1	;volatile
  5269  002A1C  C1F6  F092         	movff	_raggio+2,___flmul@f1+2	;volatile
  5270  002A20  C1F7  F093         	movff	_raggio+3,___flmul@f1+3	;volatile
  5271  002A24  EC27  F027         	call	___flmul	;wreg free
  5272  002A28  C090  F1DE         	movff	?___flmul,_matematica$3672
  5273  002A2C  C091  F1DF         	movff	?___flmul+1,_matematica$3672+1
  5274  002A30  C092  F1E0         	movff	?___flmul+2,_matematica$3672+2
  5275  002A34  C093  F1E1         	movff	?___flmul+3,_matematica$3672+3
  5276                           
  5277                           ;parcheggio.c: 507: prima_sterzata = 2 * 3.14159265358979323846 * raggio * beta / 360;
  5278  002A38  0EDB               	movlw	219
  5279  002A3A  0100               	movlb	0	; () banked
  5280  002A3C  6F94               	movwf	___flmul@f2& (0+255),b
  5281  002A3E  0E0F               	movlw	15
  5282  002A40  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5283  002A42  0EC9               	movlw	201
  5284  002A44  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5285  002A46  0E40               	movlw	64
  5286  002A48  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5287  002A4A  C1DE  F090         	movff	_matematica$3672,___flmul@f1
  5288  002A4E  C1DF  F091         	movff	_matematica$3672+1,___flmul@f1+1
  5289  002A52  C1E0  F092         	movff	_matematica$3672+2,___flmul@f1+2
  5290  002A56  C1E1  F093         	movff	_matematica$3672+3,___flmul@f1+3
  5291  002A5A  EC27  F027         	call	___flmul	;wreg free
  5292  002A5E  C090  F081         	movff	?___flmul,___fldiv@f1
  5293  002A62  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5294  002A66  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5295  002A6A  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5296  002A6E  0E00               	movlw	0
  5297  002A70  0100               	movlb	0	; () banked
  5298  002A72  6F85               	movwf	___fldiv@f2& (0+255),b
  5299  002A74  0E00               	movlw	0
  5300  002A76  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5301  002A78  0EB4               	movlw	180
  5302  002A7A  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5303  002A7C  0E43               	movlw	67
  5304  002A7E  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5305  002A80  ECD9  F027         	call	___fldiv	;wreg free
  5306  002A84  C081  F138         	movff	?___fldiv,_prima_sterzata	;volatile
  5307  002A88  C082  F139         	movff	?___fldiv+1,_prima_sterzata+1	;volatile
  5308  002A8C  C083  F13A         	movff	?___fldiv+2,_prima_sterzata+2	;volatile
  5309  002A90  C084  F13B         	movff	?___fldiv+3,_prima_sterzata+3	;volatile
  5310                           
  5311                           ;parcheggio.c: 508: K_var = raggio + (2 * larghezza / 3);
  5312  002A94  0E00               	movlw	0
  5313  002A96  0100               	movlb	0	; () banked
  5314  002A98  6F85               	movwf	___fldiv@f2& (0+255),b
  5315  002A9A  0E00               	movlw	0
  5316  002A9C  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5317  002A9E  0E40               	movlw	64
  5318  002AA0  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5319  002AA2  0E40               	movlw	64
  5320  002AA4  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5321  002AA6  0E00               	movlw	0
  5322  002AA8  0100               	movlb	0	; () banked
  5323  002AAA  6F94               	movwf	___flmul@f2& (0+255),b
  5324  002AAC  0E00               	movlw	0
  5325  002AAE  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5326  002AB0  0E00               	movlw	0
  5327  002AB2  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5328  002AB4  0E40               	movlw	64
  5329  002AB6  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5330  002AB8  C1F0  F090         	movff	_larghezza,___flmul@f1	;volatile
  5331  002ABC  C1F1  F091         	movff	_larghezza+1,___flmul@f1+1	;volatile
  5332  002AC0  C1F2  F092         	movff	_larghezza+2,___flmul@f1+2	;volatile
  5333  002AC4  C1F3  F093         	movff	_larghezza+3,___flmul@f1+3	;volatile
  5334  002AC8  EC27  F027         	call	___flmul	;wreg free
  5335  002ACC  C090  F081         	movff	?___flmul,___fldiv@f1
  5336  002AD0  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5337  002AD4  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5338  002AD8  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5339  002ADC  ECD9  F027         	call	___fldiv	;wreg free
  5340  002AE0  C081  F09F         	movff	?___fldiv,___fladd@f1
  5341  002AE4  C082  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  5342  002AE8  C083  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  5343  002AEC  C084  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  5344  002AF0  C1F4  F0A3         	movff	_raggio,___fladd@f2	;volatile
  5345  002AF4  C1F5  F0A4         	movff	_raggio+1,___fladd@f2+1	;volatile
  5346  002AF8  C1F6  F0A5         	movff	_raggio+2,___fladd@f2+2	;volatile
  5347  002AFC  C1F7  F0A6         	movff	_raggio+3,___fladd@f2+3	;volatile
  5348  002B00  ECF8  F01F         	call	___fladd	;wreg free
  5349  002B04  C09F  F11C         	movff	?___fladd,_K_var	;volatile
  5350  002B08  C0A0  F11D         	movff	?___fladd+1,_K_var+1	;volatile
  5351  002B0C  C0A1  F11E         	movff	?___fladd+2,_K_var+2	;volatile
  5352  002B10  C0A2  F11F         	movff	?___fladd+3,_K_var+3	;volatile
  5353                           
  5354                           ;parcheggio.c: 509: J_var = raggio - (2 * larghezza / 3);
  5355  002B14  0E00               	movlw	0
  5356  002B16  0100               	movlb	0	; () banked
  5357  002B18  6F85               	movwf	___fldiv@f2& (0+255),b
  5358  002B1A  0E00               	movlw	0
  5359  002B1C  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5360  002B1E  0E40               	movlw	64
  5361  002B20  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5362  002B22  0E40               	movlw	64
  5363  002B24  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5364  002B26  0E00               	movlw	0
  5365  002B28  0100               	movlb	0	; () banked
  5366  002B2A  6F94               	movwf	___flmul@f2& (0+255),b
  5367  002B2C  0E00               	movlw	0
  5368  002B2E  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5369  002B30  0E00               	movlw	0
  5370  002B32  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5371  002B34  0E40               	movlw	64
  5372  002B36  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5373  002B38  C1F0  F090         	movff	_larghezza,___flmul@f1	;volatile
  5374  002B3C  C1F1  F091         	movff	_larghezza+1,___flmul@f1+1	;volatile
  5375  002B40  C1F2  F092         	movff	_larghezza+2,___flmul@f1+2	;volatile
  5376  002B44  C1F3  F093         	movff	_larghezza+3,___flmul@f1+3	;volatile
  5377  002B48  EC27  F027         	call	___flmul	;wreg free
  5378  002B4C  C090  F081         	movff	?___flmul,___fldiv@f1
  5379  002B50  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5380  002B54  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5381  002B58  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5382  002B5C  ECD9  F027         	call	___fldiv	;wreg free
  5383  002B60  C081  F0AB         	movff	?___fldiv,___flneg@f1
  5384  002B64  C082  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  5385  002B68  C083  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  5386  002B6C  C084  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  5387  002B70  EC23  F02E         	call	___flneg	;wreg free
  5388  002B74  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5389  002B78  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5390  002B7C  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5391  002B80  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5392  002B84  C1F4  F0A3         	movff	_raggio,___fladd@f2	;volatile
  5393  002B88  C1F5  F0A4         	movff	_raggio+1,___fladd@f2+1	;volatile
  5394  002B8C  C1F6  F0A5         	movff	_raggio+2,___fladd@f2+2	;volatile
  5395  002B90  C1F7  F0A6         	movff	_raggio+3,___fladd@f2+3	;volatile
  5396  002B94  ECF8  F01F         	call	___fladd	;wreg free
  5397  002B98  C09F  F118         	movff	?___fladd,_J_var	;volatile
  5398  002B9C  C0A0  F119         	movff	?___fladd+1,_J_var+1	;volatile
  5399  002BA0  C0A1  F11A         	movff	?___fladd+2,_J_var+2	;volatile
  5400  002BA4  C0A2  F11B         	movff	?___fladd+3,_J_var+3	;volatile
  5401                           
  5402                           ;parcheggio.c: 510: Pmin = K_var * cos(asin((J_var / K_var)));
  5403  002BA8  C11C  F085         	movff	_K_var,___fldiv@f2	;volatile
  5404  002BAC  C11D  F086         	movff	_K_var+1,___fldiv@f2+1	;volatile
  5405  002BB0  C11E  F087         	movff	_K_var+2,___fldiv@f2+2	;volatile
  5406  002BB4  C11F  F088         	movff	_K_var+3,___fldiv@f2+3	;volatile
  5407  002BB8  C118  F081         	movff	_J_var,___fldiv@f1	;volatile
  5408  002BBC  C119  F082         	movff	_J_var+1,___fldiv@f1+1	;volatile
  5409  002BC0  C11A  F083         	movff	_J_var+2,___fldiv@f1+2	;volatile
  5410  002BC4  C11B  F084         	movff	_J_var+3,___fldiv@f1+3	;volatile
  5411  002BC8  ECD9  F027         	call	___fldiv	;wreg free
  5412  002BCC  C081  F1D6         	movff	?___fldiv,_matematica$3673
  5413  002BD0  C082  F1D7         	movff	?___fldiv+1,_matematica$3673+1
  5414  002BD4  C083  F1D8         	movff	?___fldiv+2,_matematica$3673+2
  5415  002BD8  C084  F1D9         	movff	?___fldiv+3,_matematica$3673+3
  5416                           
  5417                           ;parcheggio.c: 510: Pmin = K_var * cos(asin((J_var / K_var)));
  5418  002BDC  C1D6  F1A2         	movff	_matematica$3673,asin@x
  5419  002BE0  C1D7  F1A3         	movff	_matematica$3673+1,asin@x+1
  5420  002BE4  C1D8  F1A4         	movff	_matematica$3673+2,asin@x+2
  5421  002BE8  C1D9  F1A5         	movff	_matematica$3673+3,asin@x+3
  5422  002BEC  ECD8  F01C         	call	_asin	;wreg free
  5423  002BF0  C1A2  F1BE         	movff	?_asin,cos@f
  5424  002BF4  C1A3  F1BF         	movff	?_asin+1,cos@f+1
  5425  002BF8  C1A4  F1C0         	movff	?_asin+2,cos@f+2
  5426  002BFC  C1A5  F1C1         	movff	?_asin+3,cos@f+3
  5427  002C00  ECA4  F02B         	call	_cos	;wreg free
  5428  002C04  C1BE  F1DA         	movff	?_cos,_matematica$3674
  5429  002C08  C1BF  F1DB         	movff	?_cos+1,_matematica$3674+1
  5430  002C0C  C1C0  F1DC         	movff	?_cos+2,_matematica$3674+2
  5431  002C10  C1C1  F1DD         	movff	?_cos+3,_matematica$3674+3
  5432                           
  5433                           ;parcheggio.c: 510: Pmin = K_var * cos(asin((J_var / K_var)));
  5434  002C14  C1DA  F090         	movff	_matematica$3674,___flmul@f1
  5435  002C18  C1DB  F091         	movff	_matematica$3674+1,___flmul@f1+1
  5436  002C1C  C1DC  F092         	movff	_matematica$3674+2,___flmul@f1+2
  5437  002C20  C1DD  F093         	movff	_matematica$3674+3,___flmul@f1+3
  5438  002C24  C11C  F094         	movff	_K_var,___flmul@f2	;volatile
  5439  002C28  C11D  F095         	movff	_K_var+1,___flmul@f2+1	;volatile
  5440  002C2C  C11E  F096         	movff	_K_var+2,___flmul@f2+2	;volatile
  5441  002C30  C11F  F097         	movff	_K_var+3,___flmul@f2+3	;volatile
  5442  002C34  EC27  F027         	call	___flmul	;wreg free
  5443  002C38  C090  F120         	movff	?___flmul,_Pmin	;volatile
  5444  002C3C  C091  F121         	movff	?___flmul+1,_Pmin+1	;volatile
  5445  002C40  C092  F122         	movff	?___flmul+2,_Pmin+2	;volatile
  5446  002C44  C093  F123         	movff	?___flmul+3,_Pmin+3	;volatile
  5447  002C48  0012               	return		;funcret
  5448  002C4A                     __end_of_matematica:
  5449                           	opt stack 0
  5450                           tblptru	equ	0xFF8
  5451                           tblptrh	equ	0xFF7
  5452                           tblptrl	equ	0xFF6
  5453                           tablat	equ	0xFF5
  5454                           postinc0	equ	0xFEE
  5455                           wreg	equ	0xFE8
  5456                           postdec1	equ	0xFE5
  5457                           fsr1l	equ	0xFE1
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function _cos *****************
  5466 ;; Defined at:
  5467 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\cos.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  f               4   49[BANK1 ] unsigned char 
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;		None
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  4   49[BANK1 ] unsigned char 
  5474 ;; Registers used:
  5475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5481 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5485 ;;Total ram usage:        8 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:    9
  5488 ;; This function calls:
  5489 ;;		___fladd
  5490 ;;		___flge
  5491 ;;		_sin
  5492 ;; This function is called by:
  5493 ;;		_matematica
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text10
  5498  005748                     __ptext10:
  5499                           	opt stack 0
  5500  005748                     _cos:
  5501                           	opt stack 19
  5502                           
  5503                           ;incstack = 0
  5504  005748  0EDB               	movlw	219
  5505  00574A  0100               	movlb	0	; () banked
  5506  00574C  6FB3               	movwf	___flge@ff1& (0+255),b
  5507  00574E  0E0F               	movlw	15
  5508  005750  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5509  005752  0E49               	movlw	73
  5510  005754  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5511  005756  0E40               	movlw	64
  5512  005758  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5513  00575A  C1BE  F0B7         	movff	cos@f,___flge@ff2
  5514  00575E  C1BF  F0B8         	movff	cos@f+1,___flge@ff2+1
  5515  005762  C1C0  F0B9         	movff	cos@f+2,___flge@ff2+2
  5516  005766  C1C1  F0BA         	movff	cos@f+3,___flge@ff2+3
  5517  00576A  EC28  F02B         	call	___flge	;wreg free
  5518  00576E  0100               	movlb	0	; () banked
  5519  005770  B0D8               	btfsc	status,0,c
  5520  005772  D02E               	goto	l6444
  5521                           
  5522                           ; BSR set to: 0
  5523  005774  C1BE  F09F         	movff	cos@f,___fladd@f1
  5524  005778  C1BF  F0A0         	movff	cos@f+1,___fladd@f1+1
  5525  00577C  C1C0  F0A1         	movff	cos@f+2,___fladd@f1+2
  5526  005780  C1C1  F0A2         	movff	cos@f+3,___fladd@f1+3
  5527  005784  0EE4               	movlw	228
  5528  005786  0100               	movlb	0	; () banked
  5529  005788  6FA3               	movwf	___fladd@f2& (0+255),b
  5530  00578A  0ECB               	movlw	203
  5531  00578C  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5532  00578E  0E96               	movlw	150
  5533  005790  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5534  005792  0EC0               	movlw	192
  5535  005794  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5536  005796  ECF8  F01F         	call	___fladd	;wreg free
  5537  00579A  C09F  F1C2         	movff	?___fladd,_cos$3679
  5538  00579E  C0A0  F1C3         	movff	?___fladd+1,_cos$3679+1
  5539  0057A2  C0A1  F1C4         	movff	?___fladd+2,_cos$3679+2
  5540  0057A6  C0A2  F1C5         	movff	?___fladd+3,_cos$3679+3
  5541  0057AA  C1C2  F0D1         	movff	_cos$3679,sin@f
  5542  0057AE  C1C3  F0D2         	movff	_cos$3679+1,sin@f+1
  5543  0057B2  C1C4  F0D3         	movff	_cos$3679+2,sin@f+2
  5544  0057B6  C1C5  F0D4         	movff	_cos$3679+3,sin@f+3
  5545  0057BA  EC6A  F01E         	call	_sin	;wreg free
  5546  0057BE  C0D1  F1BE         	movff	?_sin,?_cos
  5547  0057C2  C0D2  F1BF         	movff	?_sin+1,?_cos+1
  5548  0057C6  C0D3  F1C0         	movff	?_sin+2,?_cos+2
  5549  0057CA  C0D4  F1C1         	movff	?_sin+3,?_cos+3
  5550  0057CE  0012               	return	
  5551  0057D0                     l6444:
  5552  0057D0  C1BE  F09F         	movff	cos@f,___fladd@f1
  5553  0057D4  C1BF  F0A0         	movff	cos@f+1,___fladd@f1+1
  5554  0057D8  C1C0  F0A1         	movff	cos@f+2,___fladd@f1+2
  5555  0057DC  C1C1  F0A2         	movff	cos@f+3,___fladd@f1+3
  5556  0057E0  0EDB               	movlw	219
  5557  0057E2  0100               	movlb	0	; () banked
  5558  0057E4  6FA3               	movwf	___fladd@f2& (0+255),b
  5559  0057E6  0E0F               	movlw	15
  5560  0057E8  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5561  0057EA  0EC9               	movlw	201
  5562  0057EC  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5563  0057EE  0E3F               	movlw	63
  5564  0057F0  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5565  0057F2  ECF8  F01F         	call	___fladd	;wreg free
  5566  0057F6  C09F  F1C2         	movff	?___fladd,_cos$3679
  5567  0057FA  C0A0  F1C3         	movff	?___fladd+1,_cos$3679+1
  5568  0057FE  C0A1  F1C4         	movff	?___fladd+2,_cos$3679+2
  5569  005802  C0A2  F1C5         	movff	?___fladd+3,_cos$3679+3
  5570  005806  C1C2  F0D1         	movff	_cos$3679,sin@f
  5571  00580A  C1C3  F0D2         	movff	_cos$3679+1,sin@f+1
  5572  00580E  C1C4  F0D3         	movff	_cos$3679+2,sin@f+2
  5573  005812  C1C5  F0D4         	movff	_cos$3679+3,sin@f+3
  5574  005816  EC6A  F01E         	call	_sin	;wreg free
  5575  00581A  C0D1  F1BE         	movff	?_sin,?_cos
  5576  00581E  C0D2  F1BF         	movff	?_sin+1,?_cos+1
  5577  005822  C0D3  F1C0         	movff	?_sin+2,?_cos+2
  5578  005826  C0D4  F1C1         	movff	?_sin+3,?_cos+3
  5579  00582A  0012               	return	
  5580  00582C  0012               	return		;funcret
  5581  00582E                     __end_of_cos:
  5582                           	opt stack 0
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           postinc0	equ	0xFEE
  5588                           wreg	equ	0xFE8
  5589                           postdec1	equ	0xFE5
  5590                           fsr1l	equ	0xFE1
  5591                           indf2	equ	0xFDF
  5592                           postinc2	equ	0xFDE
  5593                           postdec2	equ	0xFDD
  5594                           fsr2h	equ	0xFDA
  5595                           fsr2l	equ	0xFD9
  5596                           status	equ	0xFD8
  5597                           
  5598 ;; *************** function _sin *****************
  5599 ;; Defined at:
  5600 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sin.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;  f               4  113[BANK0 ] unsigned char 
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;  x2              4    8[BANK1 ] unsigned char 
  5605 ;;  y               4    0[BANK1 ] unsigned char 
  5606 ;;  sgn             1   12[BANK1 ] unsigned char 
  5607 ;; Return value:  Size  Location     Type
  5608 ;;                  4  113[BANK0 ] unsigned char 
  5609 ;; Registers used:
  5610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5616 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;      Totals:         0       4      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5620 ;;Total ram usage:       17 bytes
  5621 ;; Hardware stack levels used:    1
  5622 ;; Hardware stack levels required when called:    8
  5623 ;; This function calls:
  5624 ;;		___fladd
  5625 ;;		___fldiv
  5626 ;;		___flge
  5627 ;;		___flmul
  5628 ;;		___flneg
  5629 ;;		___flsub
  5630 ;;		_eval_poly
  5631 ;;		_floor
  5632 ;; This function is called by:
  5633 ;;		_cos
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text11
  5638  003CD4                     __ptext11:
  5639                           	opt stack 0
  5640  003CD4                     _sin:
  5641                           	opt stack 19
  5642                           
  5643                           ;incstack = 0
  5644  003CD4  0E00               	movlw	0
  5645  003CD6  0101               	movlb	1	; () banked
  5646  003CD8  6F99               	movwf	sin@sgn& (0+255),b
  5647                           
  5648                           ; BSR set to: 1
  5649  003CDA  0100               	movlb	0	; () banked
  5650  003CDC  AFD4               	btfss	(sin@f+3)& (0+255),7,b
  5651  003CDE  D016               	goto	l6370
  5652                           
  5653                           ; BSR set to: 0
  5654  003CE0  C0D1  F0AB         	movff	sin@f,___flneg@f1
  5655  003CE4  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  5656  003CE8  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  5657  003CEC  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  5658  003CF0  EC23  F02E         	call	___flneg	;wreg free
  5659  003CF4  C0AB  F0D1         	movff	?___flneg,sin@f
  5660  003CF8  C0AC  F0D2         	movff	?___flneg+1,sin@f+1
  5661  003CFC  C0AD  F0D3         	movff	?___flneg+2,sin@f+2
  5662  003D00  C0AE  F0D4         	movff	?___flneg+3,sin@f+3
  5663  003D04  0E01               	movlw	1
  5664  003D06  0101               	movlb	1	; () banked
  5665  003D08  6F99               	movwf	sin@sgn& (0+255),b
  5666  003D0A  D000               	goto	l6370
  5667  003D0C                     l6370:
  5668  003D0C  C0D1  F090         	movff	sin@f,___flmul@f1
  5669  003D10  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5670  003D14  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5671  003D18  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5672  003D1C  0E83               	movlw	131
  5673  003D1E  0100               	movlb	0	; () banked
  5674  003D20  6F94               	movwf	___flmul@f2& (0+255),b
  5675  003D22  0EF9               	movlw	249
  5676  003D24  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5677  003D26  0E22               	movlw	34
  5678  003D28  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5679  003D2A  0E3E               	movlw	62
  5680  003D2C  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5681  003D2E  EC27  F027         	call	___flmul	;wreg free
  5682  003D32  C090  F0D1         	movff	?___flmul,sin@f
  5683  003D36  C091  F0D2         	movff	?___flmul+1,sin@f+1
  5684  003D3A  C092  F0D3         	movff	?___flmul+2,sin@f+2
  5685  003D3E  C093  F0D4         	movff	?___flmul+3,sin@f+3
  5686  003D42  C0D1  F0C9         	movff	sin@f,___flsub@f1
  5687  003D46  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  5688  003D4A  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  5689  003D4E  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  5690  003D52  C0D1  F0BF         	movff	sin@f,floor@x
  5691  003D56  C0D2  F0C0         	movff	sin@f+1,floor@x+1
  5692  003D5A  C0D3  F0C1         	movff	sin@f+2,floor@x+2
  5693  003D5E  C0D4  F0C2         	movff	sin@f+3,floor@x+3
  5694  003D62  EC74  F028         	call	_floor	;wreg free
  5695  003D66  C0BF  F0CD         	movff	?_floor,___flsub@f2
  5696  003D6A  C0C0  F0CE         	movff	?_floor+1,___flsub@f2+1
  5697  003D6E  C0C1  F0CF         	movff	?_floor+2,___flsub@f2+2
  5698  003D72  C0C2  F0D0         	movff	?_floor+3,___flsub@f2+3
  5699  003D76  EC82  F02D         	call	___flsub	;wreg free
  5700  003D7A  C0C9  F0D1         	movff	?___flsub,sin@f
  5701  003D7E  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  5702  003D82  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  5703  003D86  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  5704  003D8A  C0D1  F090         	movff	sin@f,___flmul@f1
  5705  003D8E  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5706  003D92  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5707  003D96  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5708  003D9A  0E00               	movlw	0
  5709  003D9C  0100               	movlb	0	; () banked
  5710  003D9E  6F94               	movwf	___flmul@f2& (0+255),b
  5711  003DA0  0E00               	movlw	0
  5712  003DA2  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5713  003DA4  0E80               	movlw	128
  5714  003DA6  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5715  003DA8  0E40               	movlw	64
  5716  003DAA  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5717  003DAC  EC27  F027         	call	___flmul	;wreg free
  5718  003DB0  C090  F0D1         	movff	?___flmul,sin@f
  5719  003DB4  C091  F0D2         	movff	?___flmul+1,sin@f+1
  5720  003DB8  C092  F0D3         	movff	?___flmul+2,sin@f+2
  5721  003DBC  C093  F0D4         	movff	?___flmul+3,sin@f+3
  5722  003DC0  0E00               	movlw	0
  5723  003DC2  0100               	movlb	0	; () banked
  5724  003DC4  6FB3               	movwf	___flge@ff1& (0+255),b
  5725  003DC6  0E00               	movlw	0
  5726  003DC8  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5727  003DCA  0E00               	movlw	0
  5728  003DCC  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5729  003DCE  0E40               	movlw	64
  5730  003DD0  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5731  003DD2  C0D1  F0B7         	movff	sin@f,___flge@ff2
  5732  003DD6  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  5733  003DDA  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  5734  003DDE  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  5735  003DE2  EC28  F02B         	call	___flge	;wreg free
  5736  003DE6  0100               	movlb	0	; () banked
  5737  003DE8  B0D8               	btfsc	status,0,c
  5738  003DEA  D026               	goto	l6382
  5739                           
  5740                           ; BSR set to: 0
  5741  003DEC  C0D1  F0C9         	movff	sin@f,___flsub@f1
  5742  003DF0  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  5743  003DF4  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  5744  003DF8  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  5745  003DFC  0E00               	movlw	0
  5746  003DFE  0100               	movlb	0	; () banked
  5747  003E00  6FCD               	movwf	___flsub@f2& (0+255),b
  5748  003E02  0E00               	movlw	0
  5749  003E04  6FCE               	movwf	(___flsub@f2+1)& (0+255),b
  5750  003E06  0E00               	movlw	0
  5751  003E08  6FCF               	movwf	(___flsub@f2+2)& (0+255),b
  5752  003E0A  0E40               	movlw	64
  5753  003E0C  6FD0               	movwf	(___flsub@f2+3)& (0+255),b
  5754  003E0E  EC82  F02D         	call	___flsub	;wreg free
  5755  003E12  C0C9  F0D1         	movff	?___flsub,sin@f
  5756  003E16  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  5757  003E1A  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  5758  003E1E  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  5759  003E22  0101               	movlb	1	; () banked
  5760  003E24  5199               	movf	sin@sgn& (0+255),w,b
  5761  003E26  0101               	movlb	1	; () banked
  5762  003E28  A4D8               	btfss	status,2,c
  5763  003E2A  D002               	goto	u8000
  5764  003E2C  0E01               	movlw	1
  5765  003E2E  D001               	goto	u8010
  5766  003E30                     u8000:
  5767  003E30  0E00               	movlw	0
  5768  003E32                     u8010:
  5769  003E32  0101               	movlb	1	; () banked
  5770  003E34  6F99               	movwf	sin@sgn& (0+255),b
  5771  003E36  D000               	goto	l6382
  5772  003E38                     l6382:
  5773  003E38  0E00               	movlw	0
  5774  003E3A  0100               	movlb	0	; () banked
  5775  003E3C  6FB3               	movwf	___flge@ff1& (0+255),b
  5776  003E3E  0E00               	movlw	0
  5777  003E40  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5778  003E42  0E80               	movlw	128
  5779  003E44  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5780  003E46  0E3F               	movlw	63
  5781  003E48  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5782  003E4A  C0D1  F0B7         	movff	sin@f,___flge@ff2
  5783  003E4E  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  5784  003E52  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  5785  003E56  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  5786  003E5A  EC28  F02B         	call	___flge	;wreg free
  5787  003E5E  0100               	movlb	0	; () banked
  5788  003E60  B0D8               	btfsc	status,0,c
  5789  003E62  D025               	goto	l1466
  5790                           
  5791                           ; BSR set to: 0
  5792  003E64  C0D1  F0AB         	movff	sin@f,___flneg@f1
  5793  003E68  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  5794  003E6C  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  5795  003E70  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  5796  003E74  EC23  F02E         	call	___flneg	;wreg free
  5797  003E78  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5798  003E7C  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5799  003E80  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5800  003E84  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5801  003E88  0E00               	movlw	0
  5802  003E8A  0100               	movlb	0	; () banked
  5803  003E8C  6FA3               	movwf	___fladd@f2& (0+255),b
  5804  003E8E  0E00               	movlw	0
  5805  003E90  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5806  003E92  0E00               	movlw	0
  5807  003E94  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5808  003E96  0E40               	movlw	64
  5809  003E98  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5810  003E9A  ECF8  F01F         	call	___fladd	;wreg free
  5811  003E9E  C09F  F0D1         	movff	?___fladd,sin@f
  5812  003EA2  C0A0  F0D2         	movff	?___fladd+1,sin@f+1
  5813  003EA6  C0A1  F0D3         	movff	?___fladd+2,sin@f+2
  5814  003EAA  C0A2  F0D4         	movff	?___fladd+3,sin@f+3
  5815  003EAE                     l1466:
  5816  003EAE  C0D1  F090         	movff	sin@f,___flmul@f1
  5817  003EB2  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5818  003EB6  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5819  003EBA  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5820  003EBE  C0D1  F094         	movff	sin@f,___flmul@f2
  5821  003EC2  C0D2  F095         	movff	sin@f+1,___flmul@f2+1
  5822  003EC6  C0D3  F096         	movff	sin@f+2,___flmul@f2+2
  5823  003ECA  C0D4  F097         	movff	sin@f+3,___flmul@f2+3
  5824  003ECE  EC27  F027         	call	___flmul	;wreg free
  5825  003ED2  C090  F195         	movff	?___flmul,sin@x2
  5826  003ED6  C091  F196         	movff	?___flmul+1,sin@x2+1
  5827  003EDA  C092  F197         	movff	?___flmul+2,sin@x2+2
  5828  003EDE  C093  F198         	movff	?___flmul+3,sin@x2+3
  5829  003EE2  C195  F0AB         	movff	sin@x2,eval_poly@x
  5830  003EE6  C196  F0AC         	movff	sin@x2+1,eval_poly@x+1
  5831  003EEA  C197  F0AD         	movff	sin@x2+2,eval_poly@x+2
  5832  003EEE  C198  F0AE         	movff	sin@x2+3,eval_poly@x+3
  5833  003EF2  0E41               	movlw	low sin@coeff_b
  5834  003EF4  0100               	movlb	0	; () banked
  5835  003EF6  6FAF               	movwf	eval_poly@d& (0+255),b
  5836  003EF8  0E0D               	movlw	high sin@coeff_b
  5837  003EFA  0100               	movlb	0	; () banked
  5838  003EFC  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  5839  003EFE  0E00               	movlw	0
  5840  003F00  0100               	movlb	0	; () banked
  5841  003F02  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  5842  003F04  0E03               	movlw	3
  5843  003F06  6FB1               	movwf	eval_poly@n& (0+255),b
  5844  003F08  EC92  F029         	call	_eval_poly	;wreg free
  5845  003F0C  C0AB  F18D         	movff	?_eval_poly,sin@y
  5846  003F10  C0AC  F18E         	movff	?_eval_poly+1,sin@y+1
  5847  003F14  C0AD  F18F         	movff	?_eval_poly+2,sin@y+2
  5848  003F18  C0AE  F190         	movff	?_eval_poly+3,sin@y+3
  5849  003F1C  C18D  F085         	movff	sin@y,___fldiv@f2
  5850  003F20  C18E  F086         	movff	sin@y+1,___fldiv@f2+1
  5851  003F24  C18F  F087         	movff	sin@y+2,___fldiv@f2+2
  5852  003F28  C190  F088         	movff	sin@y+3,___fldiv@f2+3
  5853  003F2C  0E00               	movlw	0
  5854  003F2E  0100               	movlb	0	; () banked
  5855  003F30  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  5856  003F32  0E04               	movlw	4
  5857  003F34  6FB1               	movwf	eval_poly@n& (0+255),b
  5858  003F36  0E2D               	movlw	low sin@coeff_a
  5859  003F38  0100               	movlb	0	; () banked
  5860  003F3A  6FAF               	movwf	eval_poly@d& (0+255),b
  5861  003F3C  0E0D               	movlw	high sin@coeff_a
  5862  003F3E  0100               	movlb	0	; () banked
  5863  003F40  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  5864  003F42  C195  F0AB         	movff	sin@x2,eval_poly@x
  5865  003F46  C196  F0AC         	movff	sin@x2+1,eval_poly@x+1
  5866  003F4A  C197  F0AD         	movff	sin@x2+2,eval_poly@x+2
  5867  003F4E  C198  F0AE         	movff	sin@x2+3,eval_poly@x+3
  5868  003F52  EC92  F029         	call	_eval_poly	;wreg free
  5869  003F56  C0AB  F081         	movff	?_eval_poly,___fldiv@f1
  5870  003F5A  C0AC  F082         	movff	?_eval_poly+1,___fldiv@f1+1
  5871  003F5E  C0AD  F083         	movff	?_eval_poly+2,___fldiv@f1+2
  5872  003F62  C0AE  F084         	movff	?_eval_poly+3,___fldiv@f1+3
  5873  003F66  ECD9  F027         	call	___fldiv	;wreg free
  5874  003F6A  C081  F191         	movff	?___fldiv,_sin$3680
  5875  003F6E  C082  F192         	movff	?___fldiv+1,_sin$3680+1
  5876  003F72  C083  F193         	movff	?___fldiv+2,_sin$3680+2
  5877  003F76  C084  F194         	movff	?___fldiv+3,_sin$3680+3
  5878  003F7A  C0D1  F090         	movff	sin@f,___flmul@f1
  5879  003F7E  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5880  003F82  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5881  003F86  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5882  003F8A  C191  F094         	movff	_sin$3680,___flmul@f2
  5883  003F8E  C192  F095         	movff	_sin$3680+1,___flmul@f2+1
  5884  003F92  C193  F096         	movff	_sin$3680+2,___flmul@f2+2
  5885  003F96  C194  F097         	movff	_sin$3680+3,___flmul@f2+3
  5886  003F9A  EC27  F027         	call	___flmul	;wreg free
  5887  003F9E  C090  F0D1         	movff	?___flmul,sin@f
  5888  003FA2  C091  F0D2         	movff	?___flmul+1,sin@f+1
  5889  003FA6  C092  F0D3         	movff	?___flmul+2,sin@f+2
  5890  003FAA  C093  F0D4         	movff	?___flmul+3,sin@f+3
  5891  003FAE  0101               	movlb	1	; () banked
  5892  003FB0  5199               	movf	sin@sgn& (0+255),w,b
  5893  003FB2  0101               	movlb	1	; () banked
  5894  003FB4  B4D8               	btfsc	status,2,c
  5895  003FB6  D013               	goto	l1467
  5896                           
  5897                           ; BSR set to: 1
  5898  003FB8  C0D1  F0AB         	movff	sin@f,___flneg@f1
  5899  003FBC  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  5900  003FC0  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  5901  003FC4  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  5902  003FC8  EC23  F02E         	call	___flneg	;wreg free
  5903  003FCC  C0AB  F0D1         	movff	?___flneg,?_sin
  5904  003FD0  C0AC  F0D2         	movff	?___flneg+1,?_sin+1
  5905  003FD4  C0AD  F0D3         	movff	?___flneg+2,?_sin+2
  5906  003FD8  C0AE  F0D4         	movff	?___flneg+3,?_sin+3
  5907  003FDC  0012               	return	
  5908  003FDE                     l1467:
  5909                           
  5910                           ; BSR set to: 1
  5911  003FDE  C0D1  F0D1         	movff	sin@f,?_sin
  5912  003FE2  C0D2  F0D2         	movff	sin@f+1,?_sin+1
  5913  003FE6  C0D3  F0D3         	movff	sin@f+2,?_sin+2
  5914  003FEA  C0D4  F0D4         	movff	sin@f+3,?_sin+3
  5915  003FEE  0012               	return		;funcret
  5916  003FF0                     __end_of_sin:
  5917                           	opt stack 0
  5918                           tblptru	equ	0xFF8
  5919                           tblptrh	equ	0xFF7
  5920                           tblptrl	equ	0xFF6
  5921                           tablat	equ	0xFF5
  5922                           postinc0	equ	0xFEE
  5923                           wreg	equ	0xFE8
  5924                           postdec1	equ	0xFE5
  5925                           fsr1l	equ	0xFE1
  5926                           indf2	equ	0xFDF
  5927                           postinc2	equ	0xFDE
  5928                           postdec2	equ	0xFDD
  5929                           fsr2h	equ	0xFDA
  5930                           fsr2l	equ	0xFD9
  5931                           status	equ	0xFD8
  5932                           
  5933 ;; *************** function _floor *****************
  5934 ;; Defined at:
  5935 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  5936 ;; Parameters:    Size  Location     Type
  5937 ;;  x               4   95[BANK0 ] unsigned char 
  5938 ;; Auto vars:     Size  Location     Type
  5939 ;;  i               4   99[BANK0 ] unsigned char 
  5940 ;;  expon           2  103[BANK0 ] int 
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  4   95[BANK0 ] int 
  5943 ;; Registers used:
  5944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5950 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5951 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5953 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;Total ram usage:       10 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:    7
  5957 ;; This function calls:
  5958 ;;		___altofl
  5959 ;;		___fladd
  5960 ;;		___flge
  5961 ;;		___fltol
  5962 ;;		_frexp
  5963 ;; This function is called by:
  5964 ;;		_sin
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text12
  5969  0050E8                     __ptext12:
  5970                           	opt stack 0
  5971  0050E8                     _floor:
  5972                           	opt stack 19
  5973                           
  5974                           ;incstack = 0
  5975  0050E8  C0BF  F077         	movff	floor@x,frexp@value
  5976  0050EC  C0C0  F078         	movff	floor@x+1,frexp@value+1
  5977  0050F0  C0C1  F079         	movff	floor@x+2,frexp@value+2
  5978  0050F4  C0C2  F07A         	movff	floor@x+3,frexp@value+3
  5979  0050F8  0EC7               	movlw	low floor@expon
  5980  0050FA  0100               	movlb	0	; () banked
  5981  0050FC  6F7B               	movwf	frexp@eptr& (0+255),b
  5982  0050FE  0E00               	movlw	high floor@expon
  5983  005100  0100               	movlb	0	; () banked
  5984  005102  6F7C               	movwf	(frexp@eptr+1)& (0+255),b
  5985  005104  EC85  F02C         	call	_frexp	;wreg free
  5986  005108  0100               	movlb	0	; () banked
  5987  00510A  AFC8               	btfss	(floor@expon+1)& (0+255),7,b
  5988  00510C  D017               	goto	l6292
  5989                           
  5990                           ; BSR set to: 0
  5991  00510E  0100               	movlb	0	; () banked
  5992  005110  AFC2               	btfss	(floor@x+3)& (0+255),7,b
  5993  005112  D00A               	goto	l6288
  5994                           
  5995                           ; BSR set to: 0
  5996  005114  0E00               	movlw	0
  5997  005116  0100               	movlb	0	; () banked
  5998  005118  6FBF               	movwf	?_floor& (0+255),b
  5999  00511A  0E00               	movlw	0
  6000  00511C  6FC0               	movwf	(?_floor+1)& (0+255),b
  6001  00511E  0E80               	movlw	128
  6002  005120  6FC1               	movwf	(?_floor+2)& (0+255),b
  6003  005122  0EBF               	movlw	191
  6004  005124  6FC2               	movwf	(?_floor+3)& (0+255),b
  6005                           
  6006                           ; BSR set to: 0
  6007  005126  0012               	return	
  6008  005128                     l6288:
  6009                           
  6010                           ; BSR set to: 0
  6011  005128  0E00               	movlw	0
  6012  00512A  0100               	movlb	0	; () banked
  6013  00512C  6FBF               	movwf	?_floor& (0+255),b
  6014  00512E  0E00               	movlw	0
  6015  005130  6FC0               	movwf	(?_floor+1)& (0+255),b
  6016  005132  0E00               	movlw	0
  6017  005134  6FC1               	movwf	(?_floor+2)& (0+255),b
  6018  005136  0E00               	movlw	0
  6019  005138  6FC2               	movwf	(?_floor+3)& (0+255),b
  6020                           
  6021                           ; BSR set to: 0
  6022  00513A  0012               	return	
  6023  00513C                     l6292:
  6024                           
  6025                           ; BSR set to: 0
  6026  00513C  0100               	movlb	0	; () banked
  6027  00513E  51C8               	movf	(floor@expon+1)& (0+255),w,b
  6028  005140  E105               	bnz	u7880
  6029  005142  0E1D               	movlw	29
  6030  005144  0100               	movlb	0	; () banked
  6031  005146  5DC7               	subwf	floor@expon& (0+255),w,b
  6032  005148  A0D8               	btfss	status,0,c
  6033  00514A  D009               	goto	l6296
  6034  00514C                     u7880:
  6035                           
  6036                           ; BSR set to: 0
  6037  00514C  C0BF  F0BF         	movff	floor@x,?_floor
  6038  005150  C0C0  F0C0         	movff	floor@x+1,?_floor+1
  6039  005154  C0C1  F0C1         	movff	floor@x+2,?_floor+2
  6040  005158  C0C2  F0C2         	movff	floor@x+3,?_floor+3
  6041  00515C  0012               	return	
  6042  00515E                     l6296:
  6043                           
  6044                           ; BSR set to: 0
  6045  00515E  C0BF  F0AF         	movff	floor@x,___fltol@f1
  6046  005162  C0C0  F0B0         	movff	floor@x+1,___fltol@f1+1
  6047  005166  C0C1  F0B1         	movff	floor@x+2,___fltol@f1+2
  6048  00516A  C0C2  F0B2         	movff	floor@x+3,___fltol@f1+3
  6049  00516E  EC05  F029         	call	___fltol	;wreg free
  6050  005172  C0AF  F0B9         	movff	?___fltol,___altofl@c
  6051  005176  C0B0  F0BA         	movff	?___fltol+1,___altofl@c+1
  6052  00517A  C0B1  F0BB         	movff	?___fltol+2,___altofl@c+2
  6053  00517E  C0B2  F0BC         	movff	?___fltol+3,___altofl@c+3
  6054  005182  ECB2  F02D         	call	___altofl	;wreg free
  6055  005186  C0B9  F0C3         	movff	?___altofl,floor@i
  6056  00518A  C0BA  F0C4         	movff	?___altofl+1,floor@i+1
  6057  00518E  C0BB  F0C5         	movff	?___altofl+2,floor@i+2
  6058  005192  C0BC  F0C6         	movff	?___altofl+3,floor@i+3
  6059  005196  C0BF  F0B3         	movff	floor@x,___flge@ff1
  6060  00519A  C0C0  F0B4         	movff	floor@x+1,___flge@ff1+1
  6061  00519E  C0C1  F0B5         	movff	floor@x+2,___flge@ff1+2
  6062  0051A2  C0C2  F0B6         	movff	floor@x+3,___flge@ff1+3
  6063  0051A6  C0C3  F0B7         	movff	floor@i,___flge@ff2
  6064  0051AA  C0C4  F0B8         	movff	floor@i+1,___flge@ff2+1
  6065  0051AE  C0C5  F0B9         	movff	floor@i+2,___flge@ff2+2
  6066  0051B2  C0C6  F0BA         	movff	floor@i+3,___flge@ff2+3
  6067  0051B6  EC28  F02B         	call	___flge	;wreg free
  6068  0051BA  0100               	movlb	0	; () banked
  6069  0051BC  B0D8               	btfsc	status,0,c
  6070  0051BE  D01C               	goto	l1486
  6071                           
  6072                           ; BSR set to: 0
  6073  0051C0  C0C3  F09F         	movff	floor@i,___fladd@f1
  6074  0051C4  C0C4  F0A0         	movff	floor@i+1,___fladd@f1+1
  6075  0051C8  C0C5  F0A1         	movff	floor@i+2,___fladd@f1+2
  6076  0051CC  C0C6  F0A2         	movff	floor@i+3,___fladd@f1+3
  6077  0051D0  0E00               	movlw	0
  6078  0051D2  0100               	movlb	0	; () banked
  6079  0051D4  6FA3               	movwf	___fladd@f2& (0+255),b
  6080  0051D6  0E00               	movlw	0
  6081  0051D8  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6082  0051DA  0E80               	movlw	128
  6083  0051DC  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6084  0051DE  0EBF               	movlw	191
  6085  0051E0  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6086  0051E2  ECF8  F01F         	call	___fladd	;wreg free
  6087  0051E6  C09F  F0BF         	movff	?___fladd,?_floor
  6088  0051EA  C0A0  F0C0         	movff	?___fladd+1,?_floor+1
  6089  0051EE  C0A1  F0C1         	movff	?___fladd+2,?_floor+2
  6090  0051F2  C0A2  F0C2         	movff	?___fladd+3,?_floor+3
  6091  0051F6  0012               	return	
  6092  0051F8                     l1486:
  6093                           
  6094                           ; BSR set to: 0
  6095  0051F8  C0C3  F0BF         	movff	floor@i,?_floor
  6096  0051FC  C0C4  F0C0         	movff	floor@i+1,?_floor+1
  6097  005200  C0C5  F0C1         	movff	floor@i+2,?_floor+2
  6098  005204  C0C6  F0C2         	movff	floor@i+3,?_floor+3
  6099  005208  0012               	return		;funcret
  6100  00520A                     __end_of_floor:
  6101                           	opt stack 0
  6102                           tblptru	equ	0xFF8
  6103                           tblptrh	equ	0xFF7
  6104                           tblptrl	equ	0xFF6
  6105                           tablat	equ	0xFF5
  6106                           postinc0	equ	0xFEE
  6107                           wreg	equ	0xFE8
  6108                           postdec1	equ	0xFE5
  6109                           fsr1l	equ	0xFE1
  6110                           indf2	equ	0xFDF
  6111                           postinc2	equ	0xFDE
  6112                           postdec2	equ	0xFDD
  6113                           fsr2h	equ	0xFDA
  6114                           fsr2l	equ	0xFD9
  6115                           status	equ	0xFD8
  6116                           
  6117 ;; *************** function _frexp *****************
  6118 ;; Defined at:
  6119 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;  value           4   23[BANK0 ] int 
  6122 ;;  eptr            2   27[BANK0 ] PTR int 
  6123 ;;		 -> floor@expon(2), 
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  4   23[BANK0 ] PTR int 
  6128 ;; Registers used:
  6129 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6135 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;Total ram usage:        8 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    5
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_floor
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           	psect	text13
  6150  00590A                     __ptext13:
  6151                           	opt stack 0
  6152  00590A                     _frexp:
  6153                           	opt stack 20
  6154                           
  6155                           ;incstack = 0
  6156  00590A  0100               	movlb	0	; () banked
  6157  00590C  5177               	movf	frexp@value& (0+255),w,b
  6158  00590E  0100               	movlb	0	; () banked
  6159  005910  1178               	iorwf	(frexp@value+1)& (0+255),w,b
  6160  005912  0100               	movlb	0	; () banked
  6161  005914  1179               	iorwf	(frexp@value+2)& (0+255),w,b
  6162  005916  0100               	movlb	0	; () banked
  6163  005918  117A               	iorwf	(frexp@value+3)& (0+255),w,b
  6164  00591A  A4D8               	btfss	status,2,c
  6165  00591C  D009               	goto	l6208
  6166                           
  6167                           ; BSR set to: 0
  6168  00591E  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6169  005922  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6170  005926  0E00               	movlw	0
  6171  005928  6EDE               	movwf	postinc2,c
  6172  00592A  0E00               	movlw	0
  6173  00592C  6EDD               	movwf	postdec2,c
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;	Return value of _frexp is never used
  6177  00592E  0012               	return	
  6178  005930                     l6208:
  6179                           
  6180                           ; BSR set to: 0
  6181  005930  0100               	movlb	0	; () banked
  6182  005932  517A               	movf	(frexp@value+3)& (0+255),w,b
  6183  005934  0B7F               	andlw	127
  6184  005936  0100               	movlb	0	; () banked
  6185  005938  6F7D               	movwf	??_frexp& (0+255),b
  6186  00593A  6B7E               	clrf	(??_frexp+1)& (0+255),b
  6187  00593C  90D8               	bcf	status,0,c
  6188  00593E  0100               	movlb	0	; () banked
  6189  005940  377D               	rlcf	??_frexp& (0+255),f,b
  6190  005942  377E               	rlcf	(??_frexp+1)& (0+255),f,b
  6191  005944  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6192  005948  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6193  00594C  C07D  FFDE         	movff	??_frexp,postinc2
  6194  005950  C07E  FFDD         	movff	??_frexp+1,postdec2
  6195  005954  0100               	movlb	0	; () banked
  6196  005956  AF79               	btfss	(frexp@value+2)& (0+255),7,b
  6197  005958  D004               	goto	u7790
  6198  00595A  0100               	movlb	0	; () banked
  6199  00595C  6B7D               	clrf	??_frexp& (0+255),b
  6200  00595E  2B7D               	incf	??_frexp& (0+255),f,b
  6201  005960  D002               	goto	u7798
  6202  005962                     u7790:
  6203  005962  0100               	movlb	0	; () banked
  6204  005964  6B7D               	clrf	??_frexp& (0+255),b
  6205  005966                     u7798:
  6206  005966  0100               	movlb	0	; () banked
  6207  005968  517D               	movf	??_frexp& (0+255),w,b
  6208  00596A  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6209  00596E  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6210  005972  12DE               	iorwf	postinc2,f,c
  6211  005974  0E00               	movlw	0
  6212  005976  12DD               	iorwf	postdec2,f,c
  6213                           
  6214                           ; BSR set to: 0
  6215  005978  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6216  00597C  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6217  005980  0E82               	movlw	130
  6218  005982  26DE               	addwf	postinc2,f,c
  6219  005984  0EFF               	movlw	255
  6220  005986  22DD               	addwfc	postdec2,f,c
  6221                           
  6222                           ; BSR set to: 0
  6223  005988  817A               	bsf	(frexp@value+3)& (0+255),0,b
  6224  00598A  837A               	bsf	(frexp@value+3)& (0+255),1,b
  6225  00598C  857A               	bsf	(frexp@value+3)& (0+255),2,b
  6226  00598E  877A               	bsf	(frexp@value+3)& (0+255),3,b
  6227  005990  897A               	bsf	(frexp@value+3)& (0+255),4,b
  6228  005992  8B7A               	bsf	(frexp@value+3)& (0+255),5,b
  6229  005994  9D7A               	bcf	(frexp@value+3)& (0+255),6,b
  6230                           
  6231                           ; BSR set to: 0
  6232  005996  0100               	movlb	0	; () banked
  6233  005998  9F79               	bcf	(frexp@value+2)& (0+255),7,b
  6234  00599A  0012               	return	
  6235                           
  6236                           ; BSR set to: 0
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;	Return value of _frexp is never used
  6240  00599C  0012               	return		;funcret
  6241  00599E                     __end_of_frexp:
  6242                           	opt stack 0
  6243                           tblptru	equ	0xFF8
  6244                           tblptrh	equ	0xFF7
  6245                           tblptrl	equ	0xFF6
  6246                           tablat	equ	0xFF5
  6247                           postinc0	equ	0xFEE
  6248                           wreg	equ	0xFE8
  6249                           postdec1	equ	0xFE5
  6250                           fsr1l	equ	0xFE1
  6251                           indf2	equ	0xFDF
  6252                           postinc2	equ	0xFDE
  6253                           postdec2	equ	0xFDD
  6254                           fsr2h	equ	0xFDA
  6255                           fsr2l	equ	0xFD9
  6256                           status	equ	0xFD8
  6257                           
  6258 ;; *************** function ___fltol *****************
  6259 ;; Defined at:
  6260 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  6261 ;; Parameters:    Size  Location     Type
  6262 ;;  f1              4   79[BANK0 ] PTR int 
  6263 ;; Auto vars:     Size  Location     Type
  6264 ;;  exp1            1   88[BANK0 ] unsigned char 
  6265 ;;  sign1           1   87[BANK0 ] unsigned char 
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  4   79[BANK0 ] long 
  6268 ;; Registers used:
  6269 ;;		wreg, status,2, status,0
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6275 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6276 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6277 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6278 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;Total ram usage:       10 bytes
  6280 ;; Hardware stack levels used:    1
  6281 ;; Hardware stack levels required when called:    5
  6282 ;; This function calls:
  6283 ;;		Nothing
  6284 ;; This function is called by:
  6285 ;;		_park_routine
  6286 ;;		_parallelo
  6287 ;;		_floor
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           	psect	text14
  6292  00520A                     __ptext14:
  6293                           	opt stack 0
  6294  00520A                     ___fltol:
  6295                           	opt stack 23
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;incstack = 0
  6299  00520A  0100               	movlb	0	; () banked
  6300  00520C  35B1               	rlcf	(___fltol@f1+2)& (0+255),w,b
  6301  00520E  35B2               	rlcf	(___fltol@f1+3)& (0+255),w,b
  6302  005210  0100               	movlb	0	; () banked
  6303  005212  6FB8               	movwf	___fltol@exp1& (0+255),b
  6304  005214  0100               	movlb	0	; () banked
  6305  005216  51B8               	movf	___fltol@exp1& (0+255),w,b
  6306  005218  A4D8               	btfss	status,2,c
  6307  00521A  D00A               	goto	l6164
  6308                           
  6309                           ; BSR set to: 0
  6310  00521C  0E00               	movlw	0
  6311  00521E  0100               	movlb	0	; () banked
  6312  005220  6FAF               	movwf	?___fltol& (0+255),b
  6313  005222  0E00               	movlw	0
  6314  005224  6FB0               	movwf	(?___fltol+1)& (0+255),b
  6315  005226  0E00               	movlw	0
  6316  005228  6FB1               	movwf	(?___fltol+2)& (0+255),b
  6317  00522A  0E00               	movlw	0
  6318  00522C  6FB2               	movwf	(?___fltol+3)& (0+255),b
  6319                           
  6320                           ; BSR set to: 0
  6321  00522E  0012               	return	
  6322  005230                     l6164:
  6323                           
  6324                           ; BSR set to: 0
  6325  005230  C0AF  F0B3         	movff	___fltol@f1,??___fltol
  6326  005234  C0B0  F0B4         	movff	___fltol@f1+1,??___fltol+1
  6327  005238  C0B1  F0B5         	movff	___fltol@f1+2,??___fltol+2
  6328  00523C  C0B2  F0B6         	movff	___fltol@f1+3,??___fltol+3
  6329  005240  0E20               	movlw	32
  6330  005242  D006               	goto	u7720
  6331  005244                     u7725:
  6332  005244  0100               	movlb	0	; () banked
  6333  005246  90D8               	bcf	status,0,c
  6334  005248  33B6               	rrcf	(??___fltol+3)& (0+255),f,b
  6335  00524A  33B5               	rrcf	(??___fltol+2)& (0+255),f,b
  6336  00524C  33B4               	rrcf	(??___fltol+1)& (0+255),f,b
  6337  00524E  33B3               	rrcf	??___fltol& (0+255),f,b
  6338  005250                     u7720:
  6339  005250  2EE8               	decfsz	wreg,f,c
  6340  005252  D7F8               	goto	u7725
  6341  005254  0100               	movlb	0	; () banked
  6342  005256  51B3               	movf	??___fltol& (0+255),w,b
  6343  005258  0100               	movlb	0	; () banked
  6344  00525A  6FB7               	movwf	___fltol@sign1& (0+255),b
  6345                           
  6346                           ; BSR set to: 0
  6347  00525C  0100               	movlb	0	; () banked
  6348  00525E  8FB1               	bsf	(___fltol@f1+2)& (0+255),7,b
  6349                           
  6350                           ; BSR set to: 0
  6351  005260  0EFF               	movlw	255
  6352  005262  0100               	movlb	0	; () banked
  6353  005264  17AF               	andwf	___fltol@f1& (0+255),f,b
  6354  005266  0EFF               	movlw	255
  6355  005268  17B0               	andwf	(___fltol@f1+1)& (0+255),f,b
  6356  00526A  0EFF               	movlw	255
  6357  00526C  17B1               	andwf	(___fltol@f1+2)& (0+255),f,b
  6358  00526E  0E00               	movlw	0
  6359  005270  17B2               	andwf	(___fltol@f1+3)& (0+255),f,b
  6360                           
  6361                           ; BSR set to: 0
  6362  005272  0E96               	movlw	150
  6363  005274  0100               	movlb	0	; () banked
  6364  005276  5FB8               	subwf	___fltol@exp1& (0+255),f,b
  6365                           
  6366                           ; BSR set to: 0
  6367  005278  0100               	movlb	0	; () banked
  6368  00527A  AFB8               	btfss	___fltol@exp1& (0+255),7,b
  6369  00527C  D01B               	goto	l6184
  6370                           
  6371                           ; BSR set to: 0
  6372  00527E  0100               	movlb	0	; () banked
  6373  005280  51B8               	movf	___fltol@exp1& (0+255),w,b
  6374  005282  0A80               	xorlw	128
  6375  005284  0F97               	addlw	151
  6376  005286  B0D8               	btfsc	status,0,c
  6377  005288  D00B               	goto	l6180
  6378                           
  6379                           ; BSR set to: 0
  6380  00528A  0E00               	movlw	0
  6381  00528C  0100               	movlb	0	; () banked
  6382  00528E  6FAF               	movwf	?___fltol& (0+255),b
  6383  005290  0E00               	movlw	0
  6384  005292  6FB0               	movwf	(?___fltol+1)& (0+255),b
  6385  005294  0E00               	movlw	0
  6386  005296  6FB1               	movwf	(?___fltol+2)& (0+255),b
  6387  005298  0E00               	movlw	0
  6388  00529A  6FB2               	movwf	(?___fltol+3)& (0+255),b
  6389                           
  6390                           ; BSR set to: 0
  6391  00529C  0012               	return	
  6392                           
  6393                           ; BSR set to: 0
  6394  00529E  D000               	goto	l6180
  6395  0052A0                     l6180:
  6396                           
  6397                           ; BSR set to: 0
  6398  0052A0  0100               	movlb	0	; () banked
  6399  0052A2  90D8               	bcf	status,0,c
  6400  0052A4  33B2               	rrcf	(___fltol@f1+3)& (0+255),f,b
  6401  0052A6  33B1               	rrcf	(___fltol@f1+2)& (0+255),f,b
  6402  0052A8  33B0               	rrcf	(___fltol@f1+1)& (0+255),f,b
  6403  0052AA  33AF               	rrcf	___fltol@f1& (0+255),f,b
  6404                           
  6405                           ; BSR set to: 0
  6406  0052AC  0100               	movlb	0	; () banked
  6407  0052AE  3FB8               	incfsz	___fltol@exp1& (0+255),f,b
  6408  0052B0  D7F7               	goto	l6180
  6409                           
  6410                           ; BSR set to: 0
  6411  0052B2  D01F               	goto	l6194
  6412  0052B4                     l6184:
  6413                           
  6414                           ; BSR set to: 0
  6415  0052B4  0E1F               	movlw	31
  6416  0052B6  0100               	movlb	0	; () banked
  6417  0052B8  65B8               	cpfsgt	___fltol@exp1& (0+255),b
  6418  0052BA  D014               	goto	l6192
  6419                           
  6420                           ; BSR set to: 0
  6421  0052BC  0E00               	movlw	0
  6422  0052BE  0100               	movlb	0	; () banked
  6423  0052C0  6FAF               	movwf	?___fltol& (0+255),b
  6424  0052C2  0E00               	movlw	0
  6425  0052C4  6FB0               	movwf	(?___fltol+1)& (0+255),b
  6426  0052C6  0E00               	movlw	0
  6427  0052C8  6FB1               	movwf	(?___fltol+2)& (0+255),b
  6428  0052CA  0E00               	movlw	0
  6429  0052CC  6FB2               	movwf	(?___fltol+3)& (0+255),b
  6430                           
  6431                           ; BSR set to: 0
  6432  0052CE  0012               	return	
  6433                           
  6434                           ; BSR set to: 0
  6435  0052D0  D009               	goto	l6192
  6436  0052D2                     l6190:
  6437                           
  6438                           ; BSR set to: 0
  6439  0052D2  0100               	movlb	0	; () banked
  6440  0052D4  90D8               	bcf	status,0,c
  6441  0052D6  37AF               	rlcf	___fltol@f1& (0+255),f,b
  6442  0052D8  37B0               	rlcf	(___fltol@f1+1)& (0+255),f,b
  6443  0052DA  37B1               	rlcf	(___fltol@f1+2)& (0+255),f,b
  6444  0052DC  37B2               	rlcf	(___fltol@f1+3)& (0+255),f,b
  6445  0052DE  0100               	movlb	0	; () banked
  6446  0052E0  07B8               	decf	___fltol@exp1& (0+255),f,b
  6447  0052E2  D000               	goto	l6192
  6448  0052E4                     l6192:
  6449                           
  6450                           ; BSR set to: 0
  6451  0052E4  0100               	movlb	0	; () banked
  6452  0052E6  51B8               	movf	___fltol@exp1& (0+255),w,b
  6453  0052E8  0100               	movlb	0	; () banked
  6454  0052EA  B4D8               	btfsc	status,2,c
  6455  0052EC  D002               	goto	l6194
  6456  0052EE  D7F1               	goto	l6190
  6457                           
  6458                           ; BSR set to: 0
  6459  0052F0  D000               	goto	l6194
  6460  0052F2                     l6194:
  6461                           
  6462                           ; BSR set to: 0
  6463  0052F2  0100               	movlb	0	; () banked
  6464  0052F4  51B7               	movf	___fltol@sign1& (0+255),w,b
  6465  0052F6  0100               	movlb	0	; () banked
  6466  0052F8  B4D8               	btfsc	status,2,c
  6467  0052FA  D00A               	goto	l6198
  6468                           
  6469                           ; BSR set to: 0
  6470  0052FC  0100               	movlb	0	; () banked
  6471  0052FE  1FB2               	comf	(___fltol@f1+3)& (0+255),f,b
  6472  005300  1FB1               	comf	(___fltol@f1+2)& (0+255),f,b
  6473  005302  1FB0               	comf	(___fltol@f1+1)& (0+255),f,b
  6474  005304  6DAF               	negf	___fltol@f1& (0+255),b
  6475  005306  0E00               	movlw	0
  6476  005308  23B0               	addwfc	(___fltol@f1+1)& (0+255),f,b
  6477  00530A  23B1               	addwfc	(___fltol@f1+2)& (0+255),f,b
  6478  00530C  23B2               	addwfc	(___fltol@f1+3)& (0+255),f,b
  6479  00530E  D000               	goto	l6198
  6480  005310                     l6198:
  6481                           
  6482                           ; BSR set to: 0
  6483  005310  C0AF  F0AF         	movff	___fltol@f1,?___fltol
  6484  005314  C0B0  F0B0         	movff	___fltol@f1+1,?___fltol+1
  6485  005318  C0B1  F0B1         	movff	___fltol@f1+2,?___fltol+2
  6486  00531C  C0B2  F0B2         	movff	___fltol@f1+3,?___fltol+3
  6487  005320  0012               	return	
  6488                           
  6489                           ; BSR set to: 0
  6490                           
  6491                           ; BSR set to: 0
  6492  005322  0012               	return		;funcret
  6493  005324                     __end_of___fltol:
  6494                           	opt stack 0
  6495                           tblptru	equ	0xFF8
  6496                           tblptrh	equ	0xFF7
  6497                           tblptrl	equ	0xFF6
  6498                           tablat	equ	0xFF5
  6499                           postinc0	equ	0xFEE
  6500                           wreg	equ	0xFE8
  6501                           postdec1	equ	0xFE5
  6502                           fsr1l	equ	0xFE1
  6503                           indf2	equ	0xFDF
  6504                           postinc2	equ	0xFDE
  6505                           postdec2	equ	0xFDD
  6506                           fsr2h	equ	0xFDA
  6507                           fsr2l	equ	0xFD9
  6508                           status	equ	0xFD8
  6509                           
  6510 ;; *************** function ___altofl *****************
  6511 ;; Defined at:
  6512 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;  c               4   89[BANK0 ] long 
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;  sign            1   93[BANK0 ] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;                  4   89[BANK0 ] unsigned char 
  6519 ;; Registers used:
  6520 ;;		wreg, status,2, status,0, cstack
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6526 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;Total ram usage:        5 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    6
  6533 ;; This function calls:
  6534 ;;		___flpack
  6535 ;; This function is called by:
  6536 ;;		_floor
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           	psect	text15
  6541  005B64                     __ptext15:
  6542                           	opt stack 0
  6543  005B64                     ___altofl:
  6544                           	opt stack 19
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;incstack = 0
  6548  005B64  0E00               	movlw	0
  6549  005B66  0100               	movlb	0	; () banked
  6550  005B68  6FBD               	movwf	___altofl@sign& (0+255),b
  6551                           
  6552                           ; BSR set to: 0
  6553  005B6A  0100               	movlb	0	; () banked
  6554  005B6C  AFBC               	btfss	(___altofl@c+3)& (0+255),7,b
  6555  005B6E  D00D               	goto	l6014
  6556                           
  6557                           ; BSR set to: 0
  6558  005B70  0100               	movlb	0	; () banked
  6559  005B72  1FBC               	comf	(___altofl@c+3)& (0+255),f,b
  6560  005B74  1FBB               	comf	(___altofl@c+2)& (0+255),f,b
  6561  005B76  1FBA               	comf	(___altofl@c+1)& (0+255),f,b
  6562  005B78  6DB9               	negf	___altofl@c& (0+255),b
  6563  005B7A  0E00               	movlw	0
  6564  005B7C  23BA               	addwfc	(___altofl@c+1)& (0+255),f,b
  6565  005B7E  23BB               	addwfc	(___altofl@c+2)& (0+255),f,b
  6566  005B80  23BC               	addwfc	(___altofl@c+3)& (0+255),f,b
  6567                           
  6568                           ; BSR set to: 0
  6569  005B82  0E01               	movlw	1
  6570  005B84  0100               	movlb	0	; () banked
  6571  005B86  6FBD               	movwf	___altofl@sign& (0+255),b
  6572  005B88  D000               	goto	l6014
  6573  005B8A                     l6014:
  6574                           
  6575                           ; BSR set to: 0
  6576  005B8A  C0B9  F077         	movff	___altofl@c,___flpack@arg
  6577  005B8E  C0BA  F078         	movff	___altofl@c+1,___flpack@arg+1
  6578  005B92  C0BB  F079         	movff	___altofl@c+2,___flpack@arg+2
  6579  005B96  C0BC  F07A         	movff	___altofl@c+3,___flpack@arg+3
  6580  005B9A  0E96               	movlw	150
  6581  005B9C  0100               	movlb	0	; () banked
  6582  005B9E  6F7B               	movwf	___flpack@exp& (0+255),b
  6583  005BA0  C0BD  F07C         	movff	___altofl@sign,___flpack@sign
  6584  005BA4  EC67  F026         	call	___flpack	;wreg free
  6585  005BA8  C077  F0B9         	movff	?___flpack,?___altofl
  6586  005BAC  C078  F0BA         	movff	?___flpack+1,?___altofl+1
  6587  005BB0  C079  F0BB         	movff	?___flpack+2,?___altofl+2
  6588  005BB4  C07A  F0BC         	movff	?___flpack+3,?___altofl+3
  6589  005BB8  0012               	return	
  6590  005BBA  0012               	return		;funcret
  6591  005BBC                     __end_of___altofl:
  6592                           	opt stack 0
  6593                           tblptru	equ	0xFF8
  6594                           tblptrh	equ	0xFF7
  6595                           tblptrl	equ	0xFF6
  6596                           tablat	equ	0xFF5
  6597                           postinc0	equ	0xFEE
  6598                           wreg	equ	0xFE8
  6599                           postdec1	equ	0xFE5
  6600                           fsr1l	equ	0xFE1
  6601                           indf2	equ	0xFDF
  6602                           postinc2	equ	0xFDE
  6603                           postdec2	equ	0xFDD
  6604                           fsr2h	equ	0xFDA
  6605                           fsr2l	equ	0xFD9
  6606                           status	equ	0xFD8
  6607                           
  6608 ;; *************** function _asin *****************
  6609 ;; Defined at:
  6610 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\asin.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  x               4   21[BANK1 ] unsigned char 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  y               4   41[BANK1 ] unsigned char 
  6615 ;;  sgn             4   25[BANK1 ] unsigned char 
  6616 ;; Return value:  Size  Location     Type
  6617 ;;                  4   21[BANK1 ] unsigned char 
  6618 ;; Registers used:
  6619 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6625 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;      Totals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;Total ram usage:       28 bytes
  6630 ;; Hardware stack levels used:    1
  6631 ;; Hardware stack levels required when called:    9
  6632 ;; This function calls:
  6633 ;;		___fladd
  6634 ;;		___fldiv
  6635 ;;		___flge
  6636 ;;		___flmul
  6637 ;;		___flneg
  6638 ;;		_atan
  6639 ;;		_fabs
  6640 ;;		_sqrt
  6641 ;; This function is called by:
  6642 ;;		_parallelo
  6643 ;;		_matematica
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646                           
  6647                           	psect	text16
  6648  0039B0                     __ptext16:
  6649                           	opt stack 0
  6650  0039B0                     _asin:
  6651                           	opt stack 19
  6652                           
  6653                           ;incstack = 0
  6654  0039B0  0E00               	movlw	0
  6655  0039B2  0100               	movlb	0	; () banked
  6656  0039B4  6FB3               	movwf	___flge@ff1& (0+255),b
  6657  0039B6  0E00               	movlw	0
  6658  0039B8  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6659  0039BA  0E80               	movlw	128
  6660  0039BC  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6661  0039BE  0E3F               	movlw	63
  6662  0039C0  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6663  0039C2  C1A2  F0AF         	movff	asin@x,fabs@d
  6664  0039C6  C1A3  F0B0         	movff	asin@x+1,fabs@d+1
  6665  0039CA  C1A4  F0B1         	movff	asin@x+2,fabs@d+2
  6666  0039CE  C1A5  F0B2         	movff	asin@x+3,fabs@d+3
  6667  0039D2  EC04  F02E         	call	_fabs	;wreg free
  6668  0039D6  C0AF  F0B7         	movff	?_fabs,___flge@ff2
  6669  0039DA  C0B0  F0B8         	movff	?_fabs+1,___flge@ff2+1
  6670  0039DE  C0B1  F0B9         	movff	?_fabs+2,___flge@ff2+2
  6671  0039E2  C0B2  F0BA         	movff	?_fabs+3,___flge@ff2+3
  6672  0039E6  EC28  F02B         	call	___flge	;wreg free
  6673  0039EA  0100               	movlb	0	; () banked
  6674  0039EC  B0D8               	btfsc	status,0,c
  6675  0039EE  D00F               	goto	l6402
  6676                           
  6677                           ; BSR set to: 0
  6678  0039F0  0E00               	movlw	0
  6679  0039F2  0101               	movlb	1	; () banked
  6680  0039F4  6F41               	movwf	(_errno+1)& (0+255),b
  6681  0039F6  0E21               	movlw	33
  6682  0039F8  6F40               	movwf	_errno& (0+255),b
  6683  0039FA  0E00               	movlw	0
  6684  0039FC  0101               	movlb	1	; () banked
  6685  0039FE  6FA2               	movwf	?_asin& (0+255),b
  6686  003A00  0E00               	movlw	0
  6687  003A02  6FA3               	movwf	(?_asin+1)& (0+255),b
  6688  003A04  0E00               	movlw	0
  6689  003A06  6FA4               	movwf	(?_asin+2)& (0+255),b
  6690  003A08  0E00               	movlw	0
  6691  003A0A  6FA5               	movwf	(?_asin+3)& (0+255),b
  6692                           
  6693                           ; BSR set to: 1
  6694  003A0C  0012               	return	
  6695  003A0E                     l6402:
  6696  003A0E  0E00               	movlw	0
  6697  003A10  0101               	movlb	1	; () banked
  6698  003A12  6FA6               	movwf	asin@sgn& (0+255),b
  6699  003A14  0E00               	movlw	0
  6700  003A16  6FA7               	movwf	(asin@sgn+1)& (0+255),b
  6701  003A18  0E80               	movlw	128
  6702  003A1A  6FA8               	movwf	(asin@sgn+2)& (0+255),b
  6703  003A1C  0E3F               	movlw	63
  6704  003A1E  6FA9               	movwf	(asin@sgn+3)& (0+255),b
  6705                           
  6706                           ; BSR set to: 1
  6707  003A20  C1A2  F094         	movff	asin@x,___flmul@f2
  6708  003A24  C1A3  F095         	movff	asin@x+1,___flmul@f2+1
  6709  003A28  C1A4  F096         	movff	asin@x+2,___flmul@f2+2
  6710  003A2C  C1A5  F097         	movff	asin@x+3,___flmul@f2+3
  6711  003A30  C1A2  F090         	movff	asin@x,___flmul@f1
  6712  003A34  C1A3  F091         	movff	asin@x+1,___flmul@f1+1
  6713  003A38  C1A4  F092         	movff	asin@x+2,___flmul@f1+2
  6714  003A3C  C1A5  F093         	movff	asin@x+3,___flmul@f1+3
  6715  003A40  EC27  F027         	call	___flmul	;wreg free
  6716  003A44  C090  F0AB         	movff	?___flmul,___flneg@f1
  6717  003A48  C091  F0AC         	movff	?___flmul+1,___flneg@f1+1
  6718  003A4C  C092  F0AD         	movff	?___flmul+2,___flneg@f1+2
  6719  003A50  C093  F0AE         	movff	?___flmul+3,___flneg@f1+3
  6720  003A54  EC23  F02E         	call	___flneg	;wreg free
  6721  003A58  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6722  003A5C  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6723  003A60  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6724  003A64  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6725  003A68  0E00               	movlw	0
  6726  003A6A  0100               	movlb	0	; () banked
  6727  003A6C  6FA3               	movwf	___fladd@f2& (0+255),b
  6728  003A6E  0E00               	movlw	0
  6729  003A70  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6730  003A72  0E80               	movlw	128
  6731  003A74  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6732  003A76  0E3F               	movlw	63
  6733  003A78  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6734  003A7A  ECF8  F01F         	call	___fladd	;wreg free
  6735  003A7E  C09F  F1AA         	movff	?___fladd,_asin$3675
  6736  003A82  C0A0  F1AB         	movff	?___fladd+1,_asin$3675+1
  6737  003A86  C0A1  F1AC         	movff	?___fladd+2,_asin$3675+2
  6738  003A8A  C0A2  F1AD         	movff	?___fladd+3,_asin$3675+3
  6739  003A8E  C1AA  F0D1         	movff	_asin$3675,sqrt@y
  6740  003A92  C1AB  F0D2         	movff	_asin$3675+1,sqrt@y+1
  6741  003A96  C1AC  F0D3         	movff	_asin$3675+2,sqrt@y+2
  6742  003A9A  C1AD  F0D4         	movff	_asin$3675+3,sqrt@y+3
  6743  003A9E  EC87  F023         	call	_sqrt	;wreg free
  6744  003AA2  C0D1  F1B6         	movff	?_sqrt,asin@y
  6745  003AA6  C0D2  F1B7         	movff	?_sqrt+1,asin@y+1
  6746  003AAA  C0D3  F1B8         	movff	?_sqrt+2,asin@y+2
  6747  003AAE  C0D4  F1B9         	movff	?_sqrt+3,asin@y+3
  6748  003AB2  C1A2  F0AF         	movff	asin@x,fabs@d
  6749  003AB6  C1A3  F0B0         	movff	asin@x+1,fabs@d+1
  6750  003ABA  C1A4  F0B1         	movff	asin@x+2,fabs@d+2
  6751  003ABE  C1A5  F0B2         	movff	asin@x+3,fabs@d+3
  6752  003AC2  EC04  F02E         	call	_fabs	;wreg free
  6753  003AC6  C0AF  F0B3         	movff	?_fabs,___flge@ff1
  6754  003ACA  C0B0  F0B4         	movff	?_fabs+1,___flge@ff1+1
  6755  003ACE  C0B1  F0B5         	movff	?_fabs+2,___flge@ff1+2
  6756  003AD2  C0B2  F0B6         	movff	?_fabs+3,___flge@ff1+3
  6757  003AD6  0E8F               	movlw	143
  6758  003AD8  0100               	movlb	0	; () banked
  6759  003ADA  6FB7               	movwf	___flge@ff2& (0+255),b
  6760  003ADC  0EC2               	movlw	194
  6761  003ADE  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  6762  003AE0  0E35               	movlw	53
  6763  003AE2  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  6764  003AE4  0E3F               	movlw	63
  6765  003AE6  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  6766  003AE8  EC28  F02B         	call	___flge	;wreg free
  6767  003AEC  0100               	movlb	0	; () banked
  6768  003AEE  B0D8               	btfsc	status,0,c
  6769  003AF0  D02D               	goto	l6416
  6770                           
  6771                           ; BSR set to: 0
  6772  003AF2  C1A2  F081         	movff	asin@x,___fldiv@f1
  6773  003AF6  C1A3  F082         	movff	asin@x+1,___fldiv@f1+1
  6774  003AFA  C1A4  F083         	movff	asin@x+2,___fldiv@f1+2
  6775  003AFE  C1A5  F084         	movff	asin@x+3,___fldiv@f1+3
  6776  003B02  C1B6  F085         	movff	asin@y,___fldiv@f2
  6777  003B06  C1B7  F086         	movff	asin@y+1,___fldiv@f2+1
  6778  003B0A  C1B8  F087         	movff	asin@y+2,___fldiv@f2+2
  6779  003B0E  C1B9  F088         	movff	asin@y+3,___fldiv@f2+3
  6780  003B12  ECD9  F027         	call	___fldiv	;wreg free
  6781  003B16  C081  F1BA         	movff	?___fldiv,_asin$3676
  6782  003B1A  C082  F1BB         	movff	?___fldiv+1,_asin$3676+1
  6783  003B1E  C083  F1BC         	movff	?___fldiv+2,_asin$3676+2
  6784  003B22  C084  F1BD         	movff	?___fldiv+3,_asin$3676+3
  6785  003B26  C1BA  F0BF         	movff	_asin$3676,atan@f
  6786  003B2A  C1BB  F0C0         	movff	_asin$3676+1,atan@f+1
  6787  003B2E  C1BC  F0C1         	movff	_asin$3676+2,atan@f+2
  6788  003B32  C1BD  F0C2         	movff	_asin$3676+3,atan@f+3
  6789  003B36  EC5C  F022         	call	_atan	;wreg free
  6790  003B3A  C0BF  F1A2         	movff	?_atan,?_asin
  6791  003B3E  C0C0  F1A3         	movff	?_atan+1,?_asin+1
  6792  003B42  C0C1  F1A4         	movff	?_atan+2,?_asin+2
  6793  003B46  C0C2  F1A5         	movff	?_atan+3,?_asin+3
  6794  003B4A  0012               	return	
  6795  003B4C                     l6416:
  6796  003B4C  0101               	movlb	1	; () banked
  6797  003B4E  AFA5               	btfss	(asin@x+3)& (0+255),7,b
  6798  003B50  D06E               	goto	l6428
  6799                           
  6800                           ; BSR set to: 1
  6801  003B52  C1A2  F085         	movff	asin@x,___fldiv@f2
  6802  003B56  C1A3  F086         	movff	asin@x+1,___fldiv@f2+1
  6803  003B5A  C1A4  F087         	movff	asin@x+2,___fldiv@f2+2
  6804  003B5E  C1A5  F088         	movff	asin@x+3,___fldiv@f2+3
  6805  003B62  C1B6  F0AB         	movff	asin@y,___flneg@f1
  6806  003B66  C1B7  F0AC         	movff	asin@y+1,___flneg@f1+1
  6807  003B6A  C1B8  F0AD         	movff	asin@y+2,___flneg@f1+2
  6808  003B6E  C1B9  F0AE         	movff	asin@y+3,___flneg@f1+3
  6809  003B72  EC23  F02E         	call	___flneg	;wreg free
  6810  003B76  C0AB  F081         	movff	?___flneg,___fldiv@f1
  6811  003B7A  C0AC  F082         	movff	?___flneg+1,___fldiv@f1+1
  6812  003B7E  C0AD  F083         	movff	?___flneg+2,___fldiv@f1+2
  6813  003B82  C0AE  F084         	movff	?___flneg+3,___fldiv@f1+3
  6814  003B86  ECD9  F027         	call	___fldiv	;wreg free
  6815  003B8A  C081  F1BA         	movff	?___fldiv,_asin$3676
  6816  003B8E  C082  F1BB         	movff	?___fldiv+1,_asin$3676+1
  6817  003B92  C083  F1BC         	movff	?___fldiv+2,_asin$3676+2
  6818  003B96  C084  F1BD         	movff	?___fldiv+3,_asin$3676+3
  6819  003B9A  C1BA  F0BF         	movff	_asin$3676,atan@f
  6820  003B9E  C1BB  F0C0         	movff	_asin$3676+1,atan@f+1
  6821  003BA2  C1BC  F0C1         	movff	_asin$3676+2,atan@f+2
  6822  003BA6  C1BD  F0C2         	movff	_asin$3676+3,atan@f+3
  6823  003BAA  EC5C  F022         	call	_atan	;wreg free
  6824  003BAE  C0BF  F1B2         	movff	?_atan,_asin$3677
  6825  003BB2  C0C0  F1B3         	movff	?_atan+1,_asin$3677+1
  6826  003BB6  C0C1  F1B4         	movff	?_atan+2,_asin$3677+2
  6827  003BBA  C0C2  F1B5         	movff	?_atan+3,_asin$3677+3
  6828  003BBE  0EDB               	movlw	219
  6829  003BC0  0100               	movlb	0	; () banked
  6830  003BC2  6FA3               	movwf	___fladd@f2& (0+255),b
  6831  003BC4  0E0F               	movlw	15
  6832  003BC6  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6833  003BC8  0EC9               	movlw	201
  6834  003BCA  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6835  003BCC  0E3F               	movlw	63
  6836  003BCE  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6837  003BD0  C1B2  F0AB         	movff	_asin$3677,___flneg@f1
  6838  003BD4  C1B3  F0AC         	movff	_asin$3677+1,___flneg@f1+1
  6839  003BD8  C1B4  F0AD         	movff	_asin$3677+2,___flneg@f1+2
  6840  003BDC  C1B5  F0AE         	movff	_asin$3677+3,___flneg@f1+3
  6841  003BE0  EC23  F02E         	call	___flneg	;wreg free
  6842  003BE4  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6843  003BE8  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6844  003BEC  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6845  003BF0  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6846  003BF4  ECF8  F01F         	call	___fladd	;wreg free
  6847  003BF8  C09F  F1AE         	movff	?___fladd,_asin$3678
  6848  003BFC  C0A0  F1AF         	movff	?___fladd+1,_asin$3678+1
  6849  003C00  C0A1  F1B0         	movff	?___fladd+2,_asin$3678+2
  6850  003C04  C0A2  F1B1         	movff	?___fladd+3,_asin$3678+3
  6851  003C08  C1AE  F0AB         	movff	_asin$3678,___flneg@f1
  6852  003C0C  C1AF  F0AC         	movff	_asin$3678+1,___flneg@f1+1
  6853  003C10  C1B0  F0AD         	movff	_asin$3678+2,___flneg@f1+2
  6854  003C14  C1B1  F0AE         	movff	_asin$3678+3,___flneg@f1+3
  6855  003C18  EC23  F02E         	call	___flneg	;wreg free
  6856  003C1C  C0AB  F1A2         	movff	?___flneg,?_asin
  6857  003C20  C0AC  F1A3         	movff	?___flneg+1,?_asin+1
  6858  003C24  C0AD  F1A4         	movff	?___flneg+2,?_asin+2
  6859  003C28  C0AE  F1A5         	movff	?___flneg+3,?_asin+3
  6860  003C2C  0012               	return	
  6861  003C2E                     l6428:
  6862  003C2E  C1A2  F085         	movff	asin@x,___fldiv@f2
  6863  003C32  C1A3  F086         	movff	asin@x+1,___fldiv@f2+1
  6864  003C36  C1A4  F087         	movff	asin@x+2,___fldiv@f2+2
  6865  003C3A  C1A5  F088         	movff	asin@x+3,___fldiv@f2+3
  6866  003C3E  C1B6  F081         	movff	asin@y,___fldiv@f1
  6867  003C42  C1B7  F082         	movff	asin@y+1,___fldiv@f1+1
  6868  003C46  C1B8  F083         	movff	asin@y+2,___fldiv@f1+2
  6869  003C4A  C1B9  F084         	movff	asin@y+3,___fldiv@f1+3
  6870  003C4E  ECD9  F027         	call	___fldiv	;wreg free
  6871  003C52  C081  F1BA         	movff	?___fldiv,_asin$3676
  6872  003C56  C082  F1BB         	movff	?___fldiv+1,_asin$3676+1
  6873  003C5A  C083  F1BC         	movff	?___fldiv+2,_asin$3676+2
  6874  003C5E  C084  F1BD         	movff	?___fldiv+3,_asin$3676+3
  6875  003C62  C1BA  F0BF         	movff	_asin$3676,atan@f
  6876  003C66  C1BB  F0C0         	movff	_asin$3676+1,atan@f+1
  6877  003C6A  C1BC  F0C1         	movff	_asin$3676+2,atan@f+2
  6878  003C6E  C1BD  F0C2         	movff	_asin$3676+3,atan@f+3
  6879  003C72  EC5C  F022         	call	_atan	;wreg free
  6880  003C76  C0BF  F1B2         	movff	?_atan,_asin$3677
  6881  003C7A  C0C0  F1B3         	movff	?_atan+1,_asin$3677+1
  6882  003C7E  C0C1  F1B4         	movff	?_atan+2,_asin$3677+2
  6883  003C82  C0C2  F1B5         	movff	?_atan+3,_asin$3677+3
  6884  003C86  C1B2  F0AB         	movff	_asin$3677,___flneg@f1
  6885  003C8A  C1B3  F0AC         	movff	_asin$3677+1,___flneg@f1+1
  6886  003C8E  C1B4  F0AD         	movff	_asin$3677+2,___flneg@f1+2
  6887  003C92  C1B5  F0AE         	movff	_asin$3677+3,___flneg@f1+3
  6888  003C96  EC23  F02E         	call	___flneg	;wreg free
  6889  003C9A  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6890  003C9E  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6891  003CA2  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6892  003CA6  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6893  003CAA  0EDB               	movlw	219
  6894  003CAC  0100               	movlb	0	; () banked
  6895  003CAE  6FA3               	movwf	___fladd@f2& (0+255),b
  6896  003CB0  0E0F               	movlw	15
  6897  003CB2  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6898  003CB4  0EC9               	movlw	201
  6899  003CB6  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6900  003CB8  0E3F               	movlw	63
  6901  003CBA  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6902  003CBC  ECF8  F01F         	call	___fladd	;wreg free
  6903  003CC0  C09F  F1A2         	movff	?___fladd,?_asin
  6904  003CC4  C0A0  F1A3         	movff	?___fladd+1,?_asin+1
  6905  003CC8  C0A1  F1A4         	movff	?___fladd+2,?_asin+2
  6906  003CCC  C0A2  F1A5         	movff	?___fladd+3,?_asin+3
  6907  003CD0  0012               	return	
  6908  003CD2  0012               	return		;funcret
  6909  003CD4                     __end_of_asin:
  6910                           	opt stack 0
  6911                           tblptru	equ	0xFF8
  6912                           tblptrh	equ	0xFF7
  6913                           tblptrl	equ	0xFF6
  6914                           tablat	equ	0xFF5
  6915                           postinc0	equ	0xFEE
  6916                           wreg	equ	0xFE8
  6917                           postdec1	equ	0xFE5
  6918                           fsr1l	equ	0xFE1
  6919                           indf2	equ	0xFDF
  6920                           postinc2	equ	0xFDE
  6921                           postdec2	equ	0xFDD
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8
  6925                           
  6926 ;; *************** function _sqrt *****************
  6927 ;; Defined at:
  6928 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;  y               4  113[BANK0 ] unsigned char 
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;  x               4   17[BANK1 ] unsigned char 
  6933 ;;  q               4   13[BANK1 ] unsigned char 
  6934 ;;  z               4    8[BANK1 ] unsigned char 
  6935 ;;  og              4    4[BANK1 ] unsigned char 
  6936 ;;  i               1   12[BANK1 ] unsigned char 
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  4  113[BANK0 ] unsigned char 
  6939 ;; Registers used:
  6940 ;;		wreg, status,2, status,0, cstack
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6946 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6947 ;;      Locals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  6948 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6949 ;;      Totals:         0       4      21       0       0       0       0       0       0       0       0       0       
      +0       0
  6950 ;;Total ram usage:       25 bytes
  6951 ;; Hardware stack levels used:    1
  6952 ;; Hardware stack levels required when called:    8
  6953 ;; This function calls:
  6954 ;;		___flge
  6955 ;;		___flmul
  6956 ;;		___flsub
  6957 ;; This function is called by:
  6958 ;;		_parallelo
  6959 ;;		_asin
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           	psect	text17
  6964  00470E                     __ptext17:
  6965                           	opt stack 0
  6966  00470E                     _sqrt:
  6967                           	opt stack 20
  6968                           
  6969                           ;incstack = 0
  6970  00470E  0E00               	movlw	0
  6971  004710  0100               	movlb	0	; () banked
  6972  004712  6FB3               	movwf	___flge@ff1& (0+255),b
  6973  004714  0E00               	movlw	0
  6974  004716  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6975  004718  0E00               	movlw	0
  6976  00471A  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6977  00471C  0E00               	movlw	0
  6978  00471E  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6979  004720  C0D1  F0B7         	movff	sqrt@y,___flge@ff2
  6980  004724  C0D2  F0B8         	movff	sqrt@y+1,___flge@ff2+1
  6981  004728  C0D3  F0B9         	movff	sqrt@y+2,___flge@ff2+2
  6982  00472C  C0D4  F0BA         	movff	sqrt@y+3,___flge@ff2+3
  6983  004730  EC28  F02B         	call	___flge	;wreg free
  6984  004734  0100               	movlb	0	; () banked
  6985  004736  A0D8               	btfss	status,0,c
  6986  004738  D012               	goto	l1473
  6987                           
  6988                           ; BSR set to: 0
  6989  00473A  0100               	movlb	0	; () banked
  6990  00473C  AFD4               	btfss	(sqrt@y+3)& (0+255),7,b
  6991  00473E  D005               	goto	l1474
  6992                           
  6993                           ; BSR set to: 0
  6994  004740  0E00               	movlw	0
  6995  004742  0101               	movlb	1	; () banked
  6996  004744  6F41               	movwf	(_errno+1)& (0+255),b
  6997  004746  0E21               	movlw	33
  6998  004748  6F40               	movwf	_errno& (0+255),b
  6999  00474A                     l1474:
  7000  00474A  0E00               	movlw	0
  7001  00474C  0100               	movlb	0	; () banked
  7002  00474E  6FD1               	movwf	?_sqrt& (0+255),b
  7003  004750  0E00               	movlw	0
  7004  004752  6FD2               	movwf	(?_sqrt+1)& (0+255),b
  7005  004754  0E00               	movlw	0
  7006  004756  6FD3               	movwf	(?_sqrt+2)& (0+255),b
  7007  004758  0E00               	movlw	0
  7008  00475A  6FD4               	movwf	(?_sqrt+3)& (0+255),b
  7009                           
  7010                           ; BSR set to: 0
  7011  00475C  0012               	return	
  7012  00475E                     l1473:
  7013                           
  7014                           ; BSR set to: 0
  7015  00475E  C0D1  F195         	movff	sqrt@y,sqrt@z
  7016  004762  C0D2  F196         	movff	sqrt@y+1,sqrt@z+1
  7017  004766  C0D3  F197         	movff	sqrt@y+2,sqrt@z+2
  7018  00476A  C0D4  F198         	movff	sqrt@y+3,sqrt@z+3
  7019                           
  7020                           ; BSR set to: 0
  7021  00476E  C0D1  F18D         	movff	sqrt@y,??_sqrt
  7022  004772  C0D2  F18E         	movff	sqrt@y+1,??_sqrt+1
  7023  004776  C0D3  F18F         	movff	sqrt@y+2,??_sqrt+2
  7024  00477A  C0D4  F190         	movff	sqrt@y+3,??_sqrt+3
  7025  00477E  0101               	movlb	1	; () banked
  7026  004780  1F8D               	comf	??_sqrt& (0+255),f,b
  7027  004782  1F8E               	comf	(??_sqrt+1)& (0+255),f,b
  7028  004784  1F8F               	comf	(??_sqrt+2)& (0+255),f,b
  7029  004786  1F90               	comf	(??_sqrt+3)& (0+255),f,b
  7030  004788  2B8D               	incf	??_sqrt& (0+255),f,b
  7031  00478A  0E00               	movlw	0
  7032  00478C  238E               	addwfc	(??_sqrt+1)& (0+255),f,b
  7033  00478E  238F               	addwfc	(??_sqrt+2)& (0+255),f,b
  7034  004790  2390               	addwfc	(??_sqrt+3)& (0+255),f,b
  7035  004792  0E5E               	movlw	94
  7036  004794  0101               	movlb	1	; () banked
  7037  004796  258D               	addwf	??_sqrt& (0+255),w,b
  7038  004798  0101               	movlb	1	; () banked
  7039  00479A  6F9E               	movwf	sqrt@x& (0+255),b
  7040  00479C  0EC8               	movlw	200
  7041  00479E  0101               	movlb	1	; () banked
  7042  0047A0  218E               	addwfc	(??_sqrt+1)& (0+255),w,b
  7043  0047A2  0101               	movlb	1	; () banked
  7044  0047A4  6F9F               	movwf	(sqrt@x+1)& (0+255),b
  7045  0047A6  0E6E               	movlw	110
  7046  0047A8  0101               	movlb	1	; () banked
  7047  0047AA  218F               	addwfc	(??_sqrt+2)& (0+255),w,b
  7048  0047AC  0101               	movlb	1	; () banked
  7049  0047AE  6FA0               	movwf	(sqrt@x+2)& (0+255),b
  7050  0047B0  0EBE               	movlw	190
  7051  0047B2  0101               	movlb	1	; () banked
  7052  0047B4  2190               	addwfc	(??_sqrt+3)& (0+255),w,b
  7053  0047B6  0101               	movlb	1	; () banked
  7054  0047B8  6FA1               	movwf	(sqrt@x+3)& (0+255),b
  7055                           
  7056                           ; BSR set to: 1
  7057  0047BA  0101               	movlb	1	; () banked
  7058  0047BC  90D8               	bcf	status,0,c
  7059  0047BE  33A1               	rrcf	(sqrt@x+3)& (0+255),f,b
  7060  0047C0  33A0               	rrcf	(sqrt@x+2)& (0+255),f,b
  7061  0047C2  339F               	rrcf	(sqrt@x+1)& (0+255),f,b
  7062  0047C4  339E               	rrcf	sqrt@x& (0+255),f,b
  7063                           
  7064                           ; BSR set to: 1
  7065  0047C6  0E00               	movlw	0
  7066  0047C8  0101               	movlb	1	; () banked
  7067  0047CA  5F95               	subwf	sqrt@z& (0+255),f,b
  7068  0047CC  0E00               	movlw	0
  7069  0047CE  5B96               	subwfb	(sqrt@z+1)& (0+255),f,b
  7070  0047D0  0E80               	movlw	128
  7071  0047D2  5B97               	subwfb	(sqrt@z+2)& (0+255),f,b
  7072  0047D4  0E00               	movlw	0
  7073  0047D6  5B98               	subwfb	(sqrt@z+3)& (0+255),f,b
  7074                           
  7075                           ; BSR set to: 1
  7076  0047D8  0E04               	movlw	4
  7077  0047DA  0101               	movlb	1	; () banked
  7078  0047DC  6F99               	movwf	sqrt@i& (0+255),b
  7079  0047DE  D000               	goto	l6318
  7080  0047E0                     l6318:
  7081                           
  7082                           ; BSR set to: 1
  7083  0047E0  C19E  F191         	movff	sqrt@x,sqrt@og
  7084  0047E4  C19F  F192         	movff	sqrt@x+1,sqrt@og+1
  7085  0047E8  C1A0  F193         	movff	sqrt@x+2,sqrt@og+2
  7086  0047EC  C1A1  F194         	movff	sqrt@x+3,sqrt@og+3
  7087                           
  7088                           ; BSR set to: 1
  7089  0047F0  C19E  F090         	movff	sqrt@x,___flmul@f1
  7090  0047F4  C19F  F091         	movff	sqrt@x+1,___flmul@f1+1
  7091  0047F8  C1A0  F092         	movff	sqrt@x+2,___flmul@f1+2
  7092  0047FC  C1A1  F093         	movff	sqrt@x+3,___flmul@f1+3
  7093  004800  C195  F094         	movff	sqrt@z,___flmul@f2
  7094  004804  C196  F095         	movff	sqrt@z+1,___flmul@f2+1
  7095  004808  C197  F096         	movff	sqrt@z+2,___flmul@f2+2
  7096  00480C  C198  F097         	movff	sqrt@z+3,___flmul@f2+3
  7097  004810  EC27  F027         	call	___flmul	;wreg free
  7098  004814  C090  F19A         	movff	?___flmul,sqrt@q
  7099  004818  C091  F19B         	movff	?___flmul+1,sqrt@q+1
  7100  00481C  C092  F19C         	movff	?___flmul+2,sqrt@q+2
  7101  004820  C093  F19D         	movff	?___flmul+3,sqrt@q+3
  7102  004824  C19A  F090         	movff	sqrt@q,___flmul@f1
  7103  004828  C19B  F091         	movff	sqrt@q+1,___flmul@f1+1
  7104  00482C  C19C  F092         	movff	sqrt@q+2,___flmul@f1+2
  7105  004830  C19D  F093         	movff	sqrt@q+3,___flmul@f1+3
  7106  004834  C19E  F094         	movff	sqrt@x,___flmul@f2
  7107  004838  C19F  F095         	movff	sqrt@x+1,___flmul@f2+1
  7108  00483C  C1A0  F096         	movff	sqrt@x+2,___flmul@f2+2
  7109  004840  C1A1  F097         	movff	sqrt@x+3,___flmul@f2+3
  7110  004844  EC27  F027         	call	___flmul	;wreg free
  7111  004848  C090  F19A         	movff	?___flmul,sqrt@q
  7112  00484C  C091  F19B         	movff	?___flmul+1,sqrt@q+1
  7113  004850  C092  F19C         	movff	?___flmul+2,sqrt@q+2
  7114  004854  C093  F19D         	movff	?___flmul+3,sqrt@q+3
  7115  004858  C19A  F090         	movff	sqrt@q,___flmul@f1
  7116  00485C  C19B  F091         	movff	sqrt@q+1,___flmul@f1+1
  7117  004860  C19C  F092         	movff	sqrt@q+2,___flmul@f1+2
  7118  004864  C19D  F093         	movff	sqrt@q+3,___flmul@f1+3
  7119  004868  C19E  F094         	movff	sqrt@x,___flmul@f2
  7120  00486C  C19F  F095         	movff	sqrt@x+1,___flmul@f2+1
  7121  004870  C1A0  F096         	movff	sqrt@x+2,___flmul@f2+2
  7122  004874  C1A1  F097         	movff	sqrt@x+3,___flmul@f2+3
  7123  004878  EC27  F027         	call	___flmul	;wreg free
  7124  00487C  C090  F19A         	movff	?___flmul,sqrt@q
  7125  004880  C091  F19B         	movff	?___flmul+1,sqrt@q+1
  7126  004884  C092  F19C         	movff	?___flmul+2,sqrt@q+2
  7127  004888  C093  F19D         	movff	?___flmul+3,sqrt@q+3
  7128  00488C  C19E  F090         	movff	sqrt@x,___flmul@f1
  7129  004890  C19F  F091         	movff	sqrt@x+1,___flmul@f1+1
  7130  004894  C1A0  F092         	movff	sqrt@x+2,___flmul@f1+2
  7131  004898  C1A1  F093         	movff	sqrt@x+3,___flmul@f1+3
  7132  00489C  0E00               	movlw	0
  7133  00489E  0100               	movlb	0	; () banked
  7134  0048A0  6F94               	movwf	___flmul@f2& (0+255),b
  7135  0048A2  0E00               	movlw	0
  7136  0048A4  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  7137  0048A6  0EC0               	movlw	192
  7138  0048A8  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  7139  0048AA  0E3F               	movlw	63
  7140  0048AC  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  7141  0048AE  EC27  F027         	call	___flmul	;wreg free
  7142  0048B2  C090  F19E         	movff	?___flmul,sqrt@x
  7143  0048B6  C091  F19F         	movff	?___flmul+1,sqrt@x+1
  7144  0048BA  C092  F1A0         	movff	?___flmul+2,sqrt@x+2
  7145  0048BE  C093  F1A1         	movff	?___flmul+3,sqrt@x+3
  7146  0048C2  C19E  F0C9         	movff	sqrt@x,___flsub@f1
  7147  0048C6  C19F  F0CA         	movff	sqrt@x+1,___flsub@f1+1
  7148  0048CA  C1A0  F0CB         	movff	sqrt@x+2,___flsub@f1+2
  7149  0048CE  C1A1  F0CC         	movff	sqrt@x+3,___flsub@f1+3
  7150  0048D2  C19A  F0CD         	movff	sqrt@q,___flsub@f2
  7151  0048D6  C19B  F0CE         	movff	sqrt@q+1,___flsub@f2+1
  7152  0048DA  C19C  F0CF         	movff	sqrt@q+2,___flsub@f2+2
  7153  0048DE  C19D  F0D0         	movff	sqrt@q+3,___flsub@f2+3
  7154  0048E2  EC82  F02D         	call	___flsub	;wreg free
  7155  0048E6  C0C9  F19E         	movff	?___flsub,sqrt@x
  7156  0048EA  C0CA  F19F         	movff	?___flsub+1,sqrt@x+1
  7157  0048EE  C0CB  F1A0         	movff	?___flsub+2,sqrt@x+2
  7158  0048F2  C0CC  F1A1         	movff	?___flsub+3,sqrt@x+3
  7159  0048F6  0101               	movlb	1	; () banked
  7160  0048F8  2F99               	decfsz	sqrt@i& (0+255),f,b
  7161  0048FA  D772               	goto	l6318
  7162  0048FC  D000               	goto	l6332
  7163  0048FE                     l6332:
  7164                           
  7165                           ; BSR set to: 1
  7166  0048FE  C19E  F090         	movff	sqrt@x,___flmul@f1
  7167  004902  C19F  F091         	movff	sqrt@x+1,___flmul@f1+1
  7168  004906  C1A0  F092         	movff	sqrt@x+2,___flmul@f1+2
  7169  00490A  C1A1  F093         	movff	sqrt@x+3,___flmul@f1+3
  7170  00490E  C0D1  F094         	movff	sqrt@y,___flmul@f2
  7171  004912  C0D2  F095         	movff	sqrt@y+1,___flmul@f2+1
  7172  004916  C0D3  F096         	movff	sqrt@y+2,___flmul@f2+2
  7173  00491A  C0D4  F097         	movff	sqrt@y+3,___flmul@f2+3
  7174  00491E  EC27  F027         	call	___flmul	;wreg free
  7175  004922  C090  F0D1         	movff	?___flmul,?_sqrt
  7176  004926  C091  F0D2         	movff	?___flmul+1,?_sqrt+1
  7177  00492A  C092  F0D3         	movff	?___flmul+2,?_sqrt+2
  7178  00492E  C093  F0D4         	movff	?___flmul+3,?_sqrt+3
  7179  004932  0012               	return	
  7180  004934  0012               	return		;funcret
  7181  004936                     __end_of_sqrt:
  7182                           	opt stack 0
  7183                           tblptru	equ	0xFF8
  7184                           tblptrh	equ	0xFF7
  7185                           tblptrl	equ	0xFF6
  7186                           tablat	equ	0xFF5
  7187                           postinc0	equ	0xFEE
  7188                           wreg	equ	0xFE8
  7189                           postdec1	equ	0xFE5
  7190                           fsr1l	equ	0xFE1
  7191                           indf2	equ	0xFDF
  7192                           postinc2	equ	0xFDE
  7193                           postdec2	equ	0xFDD
  7194                           fsr2h	equ	0xFDA
  7195                           fsr2l	equ	0xFD9
  7196                           status	equ	0xFD8
  7197                           
  7198 ;; *************** function ___flsub *****************
  7199 ;; Defined at:
  7200 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;  f1              4  105[BANK0 ] unsigned char 
  7203 ;;  f2              4  109[BANK0 ] unsigned char 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  4  105[BANK0 ] unsigned char 
  7208 ;; Registers used:
  7209 ;;		wreg, status,2, status,0, cstack
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7215 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;Total ram usage:        8 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    7
  7222 ;; This function calls:
  7223 ;;		___fladd
  7224 ;; This function is called by:
  7225 ;;		_sin
  7226 ;;		_sqrt
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           	psect	text18
  7231  005B04                     __ptext18:
  7232                           	opt stack 0
  7233  005B04                     ___flsub:
  7234                           	opt stack 20
  7235                           
  7236                           ;incstack = 0
  7237  005B04  0100               	movlb	0	; () banked
  7238  005B06  51CD               	movf	___flsub@f2& (0+255),w,b
  7239  005B08  0100               	movlb	0	; () banked
  7240  005B0A  11CE               	iorwf	(___flsub@f2+1)& (0+255),w,b
  7241  005B0C  0100               	movlb	0	; () banked
  7242  005B0E  11CF               	iorwf	(___flsub@f2+2)& (0+255),w,b
  7243  005B10  0100               	movlb	0	; () banked
  7244  005B12  11D0               	iorwf	(___flsub@f2+3)& (0+255),w,b
  7245  005B14  B4D8               	btfsc	status,2,c
  7246  005B16  D00A               	goto	l6262
  7247                           
  7248                           ; BSR set to: 0
  7249  005B18  0E00               	movlw	0
  7250  005B1A  0100               	movlb	0	; () banked
  7251  005B1C  1BCD               	xorwf	___flsub@f2& (0+255),f,b
  7252  005B1E  0E00               	movlw	0
  7253  005B20  1BCE               	xorwf	(___flsub@f2+1)& (0+255),f,b
  7254  005B22  0E00               	movlw	0
  7255  005B24  1BCF               	xorwf	(___flsub@f2+2)& (0+255),f,b
  7256  005B26  0E80               	movlw	128
  7257  005B28  1BD0               	xorwf	(___flsub@f2+3)& (0+255),f,b
  7258  005B2A  D000               	goto	l6262
  7259  005B2C                     l6262:
  7260                           
  7261                           ; BSR set to: 0
  7262  005B2C  C0C9  F09F         	movff	___flsub@f1,___fladd@f1
  7263  005B30  C0CA  F0A0         	movff	___flsub@f1+1,___fladd@f1+1
  7264  005B34  C0CB  F0A1         	movff	___flsub@f1+2,___fladd@f1+2
  7265  005B38  C0CC  F0A2         	movff	___flsub@f1+3,___fladd@f1+3
  7266  005B3C  C0CD  F0A3         	movff	___flsub@f2,___fladd@f2
  7267  005B40  C0CE  F0A4         	movff	___flsub@f2+1,___fladd@f2+1
  7268  005B44  C0CF  F0A5         	movff	___flsub@f2+2,___fladd@f2+2
  7269  005B48  C0D0  F0A6         	movff	___flsub@f2+3,___fladd@f2+3
  7270  005B4C  ECF8  F01F         	call	___fladd	;wreg free
  7271  005B50  C09F  F0C9         	movff	?___fladd,?___flsub
  7272  005B54  C0A0  F0CA         	movff	?___fladd+1,?___flsub+1
  7273  005B58  C0A1  F0CB         	movff	?___fladd+2,?___flsub+2
  7274  005B5C  C0A2  F0CC         	movff	?___fladd+3,?___flsub+3
  7275  005B60  0012               	return	
  7276  005B62  0012               	return		;funcret
  7277  005B64                     __end_of___flsub:
  7278                           	opt stack 0
  7279                           tblptru	equ	0xFF8
  7280                           tblptrh	equ	0xFF7
  7281                           tblptrl	equ	0xFF6
  7282                           tablat	equ	0xFF5
  7283                           postinc0	equ	0xFEE
  7284                           wreg	equ	0xFE8
  7285                           postdec1	equ	0xFE5
  7286                           fsr1l	equ	0xFE1
  7287                           indf2	equ	0xFDF
  7288                           postinc2	equ	0xFDE
  7289                           postdec2	equ	0xFDD
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           
  7294 ;; *************** function _atan *****************
  7295 ;; Defined at:
  7296 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atan.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  f               4   95[BANK0 ] unsigned char 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;  val             4  112[BANK0 ] unsigned char 
  7301 ;;  val_squared     4  108[BANK0 ] unsigned char 
  7302 ;;  x               4  103[BANK0 ] unsigned char 
  7303 ;;  y               4   99[BANK0 ] unsigned char 
  7304 ;;  recip           1  107[BANK0 ] unsigned char 
  7305 ;; Return value:  Size  Location     Type
  7306 ;;                  4   95[BANK0 ] unsigned char 
  7307 ;; Registers used:
  7308 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7309 ;; Tracked objects:
  7310 ;;		On entry : 0/0
  7311 ;;		On exit  : 0/0
  7312 ;;		Unchanged: 0/0
  7313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7314 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7317 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7318 ;;Total ram usage:       21 bytes
  7319 ;; Hardware stack levels used:    1
  7320 ;; Hardware stack levels required when called:    8
  7321 ;; This function calls:
  7322 ;;		___fladd
  7323 ;;		___fldiv
  7324 ;;		___flge
  7325 ;;		___flmul
  7326 ;;		___flneg
  7327 ;;		_eval_poly
  7328 ;;		_fabs
  7329 ;; This function is called by:
  7330 ;;		_asin
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           	psect	text19
  7335  0044B8                     __ptext19:
  7336                           	opt stack 0
  7337  0044B8                     _atan:
  7338                           	opt stack 19
  7339                           
  7340                           ;incstack = 0
  7341  0044B8  C0BF  F0AF         	movff	atan@f,fabs@d
  7342  0044BC  C0C0  F0B0         	movff	atan@f+1,fabs@d+1
  7343  0044C0  C0C1  F0B1         	movff	atan@f+2,fabs@d+2
  7344  0044C4  C0C2  F0B2         	movff	atan@f+3,fabs@d+3
  7345  0044C8  EC04  F02E         	call	_fabs	;wreg free
  7346  0044CC  C0AF  F0D0         	movff	?_fabs,atan@val
  7347  0044D0  C0B0  F0D1         	movff	?_fabs+1,atan@val+1
  7348  0044D4  C0B1  F0D2         	movff	?_fabs+2,atan@val+2
  7349  0044D8  C0B2  F0D3         	movff	?_fabs+3,atan@val+3
  7350  0044DC  0100               	movlb	0	; () banked
  7351  0044DE  51D0               	movf	atan@val& (0+255),w,b
  7352  0044E0  0100               	movlb	0	; () banked
  7353  0044E2  11D1               	iorwf	(atan@val+1)& (0+255),w,b
  7354  0044E4  0100               	movlb	0	; () banked
  7355  0044E6  11D2               	iorwf	(atan@val+2)& (0+255),w,b
  7356  0044E8  0100               	movlb	0	; () banked
  7357  0044EA  11D3               	iorwf	(atan@val+3)& (0+255),w,b
  7358  0044EC  A4D8               	btfss	status,2,c
  7359  0044EE  D00A               	goto	l6342
  7360                           
  7361                           ; BSR set to: 0
  7362  0044F0  0E00               	movlw	0
  7363  0044F2  0100               	movlb	0	; () banked
  7364  0044F4  6FBF               	movwf	?_atan& (0+255),b
  7365  0044F6  0E00               	movlw	0
  7366  0044F8  6FC0               	movwf	(?_atan+1)& (0+255),b
  7367  0044FA  0E00               	movlw	0
  7368  0044FC  6FC1               	movwf	(?_atan+2)& (0+255),b
  7369  0044FE  0E00               	movlw	0
  7370  004500  6FC2               	movwf	(?_atan+3)& (0+255),b
  7371                           
  7372                           ; BSR set to: 0
  7373  004502  0012               	return	
  7374  004504                     l6342:
  7375                           
  7376                           ; BSR set to: 0
  7377  004504  0E00               	movlw	0
  7378  004506  0100               	movlb	0	; () banked
  7379  004508  6FB3               	movwf	___flge@ff1& (0+255),b
  7380  00450A  0E00               	movlw	0
  7381  00450C  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  7382  00450E  0E80               	movlw	128
  7383  004510  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  7384  004512  0E3F               	movlw	63
  7385  004514  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  7386  004516  C0D0  F0B7         	movff	atan@val,___flge@ff2
  7387  00451A  C0D1  F0B8         	movff	atan@val+1,___flge@ff2+1
  7388  00451E  C0D2  F0B9         	movff	atan@val+2,___flge@ff2+2
  7389  004522  C0D3  F0BA         	movff	atan@val+3,___flge@ff2+3
  7390  004526  EC28  F02B         	call	___flge	;wreg free
  7391  00452A  0100               	movlb	0	; () banked
  7392  00452C  B0D8               	btfsc	status,0,c
  7393  00452E  D002               	goto	u7930
  7394  004530  0E01               	movlw	1
  7395  004532  D001               	goto	u7940
  7396  004534                     u7930:
  7397  004534  0E00               	movlw	0
  7398  004536                     u7940:
  7399  004536  0100               	movlb	0	; () banked
  7400  004538  6FCB               	movwf	atan@recip& (0+255),b
  7401  00453A  0100               	movlb	0	; () banked
  7402  00453C  51CB               	movf	atan@recip& (0+255),w,b
  7403  00453E  B4D8               	btfsc	status,2,c
  7404  004540  D01B               	goto	l1027
  7405                           
  7406                           ; BSR set to: 0
  7407  004542  0E00               	movlw	0
  7408  004544  0100               	movlb	0	; () banked
  7409  004546  6F81               	movwf	___fldiv@f1& (0+255),b
  7410  004548  0E00               	movlw	0
  7411  00454A  6F82               	movwf	(___fldiv@f1+1)& (0+255),b
  7412  00454C  0E80               	movlw	128
  7413  00454E  6F83               	movwf	(___fldiv@f1+2)& (0+255),b
  7414  004550  0E3F               	movlw	63
  7415  004552  6F84               	movwf	(___fldiv@f1+3)& (0+255),b
  7416  004554  C0D0  F085         	movff	atan@val,___fldiv@f2
  7417  004558  C0D1  F086         	movff	atan@val+1,___fldiv@f2+1
  7418  00455C  C0D2  F087         	movff	atan@val+2,___fldiv@f2+2
  7419  004560  C0D3  F088         	movff	atan@val+3,___fldiv@f2+3
  7420  004564  ECD9  F027         	call	___fldiv	;wreg free
  7421  004568  C081  F0D0         	movff	?___fldiv,atan@val
  7422  00456C  C082  F0D1         	movff	?___fldiv+1,atan@val+1
  7423  004570  C083  F0D2         	movff	?___fldiv+2,atan@val+2
  7424  004574  C084  F0D3         	movff	?___fldiv+3,atan@val+3
  7425  004578                     l1027:
  7426  004578  C0D0  F090         	movff	atan@val,___flmul@f1
  7427  00457C  C0D1  F091         	movff	atan@val+1,___flmul@f1+1
  7428  004580  C0D2  F092         	movff	atan@val+2,___flmul@f1+2
  7429  004584  C0D3  F093         	movff	atan@val+3,___flmul@f1+3
  7430  004588  C0D0  F094         	movff	atan@val,___flmul@f2
  7431  00458C  C0D1  F095         	movff	atan@val+1,___flmul@f2+1
  7432  004590  C0D2  F096         	movff	atan@val+2,___flmul@f2+2
  7433  004594  C0D3  F097         	movff	atan@val+3,___flmul@f2+3
  7434  004598  EC27  F027         	call	___flmul	;wreg free
  7435  00459C  C090  F0CC         	movff	?___flmul,atan@val_squared
  7436  0045A0  C091  F0CD         	movff	?___flmul+1,atan@val_squared+1
  7437  0045A4  C092  F0CE         	movff	?___flmul+2,atan@val_squared+2
  7438  0045A8  C093  F0CF         	movff	?___flmul+3,atan@val_squared+3
  7439  0045AC  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  7440  0045B0  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  7441  0045B4  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  7442  0045B8  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  7443  0045BC  0E19               	movlw	low atan@coeff_b
  7444  0045BE  0100               	movlb	0	; () banked
  7445  0045C0  6FAF               	movwf	eval_poly@d& (0+255),b
  7446  0045C2  0E0D               	movlw	high atan@coeff_b
  7447  0045C4  0100               	movlb	0	; () banked
  7448  0045C6  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  7449  0045C8  0E00               	movlw	0
  7450  0045CA  0100               	movlb	0	; () banked
  7451  0045CC  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  7452  0045CE  0E04               	movlw	4
  7453  0045D0  6FB1               	movwf	eval_poly@n& (0+255),b
  7454  0045D2  EC92  F029         	call	_eval_poly	;wreg free
  7455  0045D6  C0AB  F0C3         	movff	?_eval_poly,atan@y
  7456  0045DA  C0AC  F0C4         	movff	?_eval_poly+1,atan@y+1
  7457  0045DE  C0AD  F0C5         	movff	?_eval_poly+2,atan@y+2
  7458  0045E2  C0AE  F0C6         	movff	?_eval_poly+3,atan@y+3
  7459  0045E6  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  7460  0045EA  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  7461  0045EE  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  7462  0045F2  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  7463  0045F6  0E01               	movlw	low atan@coeff_a
  7464  0045F8  0100               	movlb	0	; () banked
  7465  0045FA  6FAF               	movwf	eval_poly@d& (0+255),b
  7466  0045FC  0E0D               	movlw	high atan@coeff_a
  7467  0045FE  0100               	movlb	0	; () banked
  7468  004600  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  7469  004602  0E00               	movlw	0
  7470  004604  0100               	movlb	0	; () banked
  7471  004606  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  7472  004608  0E05               	movlw	5
  7473  00460A  6FB1               	movwf	eval_poly@n& (0+255),b
  7474  00460C  EC92  F029         	call	_eval_poly	;wreg free
  7475  004610  C0AB  F0C7         	movff	?_eval_poly,atan@x
  7476  004614  C0AC  F0C8         	movff	?_eval_poly+1,atan@x+1
  7477  004618  C0AD  F0C9         	movff	?_eval_poly+2,atan@x+2
  7478  00461C  C0AE  F0CA         	movff	?_eval_poly+3,atan@x+3
  7479  004620  C0D0  F090         	movff	atan@val,___flmul@f1
  7480  004624  C0D1  F091         	movff	atan@val+1,___flmul@f1+1
  7481  004628  C0D2  F092         	movff	atan@val+2,___flmul@f1+2
  7482  00462C  C0D3  F093         	movff	atan@val+3,___flmul@f1+3
  7483  004630  C0C3  F085         	movff	atan@y,___fldiv@f2
  7484  004634  C0C4  F086         	movff	atan@y+1,___fldiv@f2+1
  7485  004638  C0C5  F087         	movff	atan@y+2,___fldiv@f2+2
  7486  00463C  C0C6  F088         	movff	atan@y+3,___fldiv@f2+3
  7487  004640  C0C7  F081         	movff	atan@x,___fldiv@f1
  7488  004644  C0C8  F082         	movff	atan@x+1,___fldiv@f1+1
  7489  004648  C0C9  F083         	movff	atan@x+2,___fldiv@f1+2
  7490  00464C  C0CA  F084         	movff	atan@x+3,___fldiv@f1+3
  7491  004650  ECD9  F027         	call	___fldiv	;wreg free
  7492  004654  C081  F094         	movff	?___fldiv,___flmul@f2
  7493  004658  C082  F095         	movff	?___fldiv+1,___flmul@f2+1
  7494  00465C  C083  F096         	movff	?___fldiv+2,___flmul@f2+2
  7495  004660  C084  F097         	movff	?___fldiv+3,___flmul@f2+3
  7496  004664  EC27  F027         	call	___flmul	;wreg free
  7497  004668  C090  F0D0         	movff	?___flmul,atan@val
  7498  00466C  C091  F0D1         	movff	?___flmul+1,atan@val+1
  7499  004670  C092  F0D2         	movff	?___flmul+2,atan@val+2
  7500  004674  C093  F0D3         	movff	?___flmul+3,atan@val+3
  7501  004678  0100               	movlb	0	; () banked
  7502  00467A  51CB               	movf	atan@recip& (0+255),w,b
  7503  00467C  0100               	movlb	0	; () banked
  7504  00467E  B4D8               	btfsc	status,2,c
  7505  004680  D026               	goto	l6354
  7506                           
  7507                           ; BSR set to: 0
  7508  004682  C0D0  F0AB         	movff	atan@val,___flneg@f1
  7509  004686  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  7510  00468A  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  7511  00468E  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  7512  004692  EC23  F02E         	call	___flneg	;wreg free
  7513  004696  C0AB  F09F         	movff	?___flneg,___fladd@f1
  7514  00469A  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  7515  00469E  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  7516  0046A2  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  7517  0046A6  0EDB               	movlw	219
  7518  0046A8  0100               	movlb	0	; () banked
  7519  0046AA  6FA3               	movwf	___fladd@f2& (0+255),b
  7520  0046AC  0E0F               	movlw	15
  7521  0046AE  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  7522  0046B0  0EC9               	movlw	201
  7523  0046B2  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  7524  0046B4  0E3F               	movlw	63
  7525  0046B6  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  7526  0046B8  ECF8  F01F         	call	___fladd	;wreg free
  7527  0046BC  C09F  F0D0         	movff	?___fladd,atan@val
  7528  0046C0  C0A0  F0D1         	movff	?___fladd+1,atan@val+1
  7529  0046C4  C0A1  F0D2         	movff	?___fladd+2,atan@val+2
  7530  0046C8  C0A2  F0D3         	movff	?___fladd+3,atan@val+3
  7531  0046CC  D000               	goto	l6354
  7532  0046CE                     l6354:
  7533  0046CE  0100               	movlb	0	; () banked
  7534  0046D0  BFC2               	btfsc	(atan@f+3)& (0+255),7,b
  7535  0046D2  D009               	goto	l6358
  7536                           
  7537                           ; BSR set to: 0
  7538  0046D4  C0D0  F0BF         	movff	atan@val,?_atan
  7539  0046D8  C0D1  F0C0         	movff	atan@val+1,?_atan+1
  7540  0046DC  C0D2  F0C1         	movff	atan@val+2,?_atan+2
  7541  0046E0  C0D3  F0C2         	movff	atan@val+3,?_atan+3
  7542  0046E4  0012               	return	
  7543  0046E6                     l6358:
  7544                           
  7545                           ; BSR set to: 0
  7546  0046E6  C0D0  F0AB         	movff	atan@val,___flneg@f1
  7547  0046EA  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  7548  0046EE  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  7549  0046F2  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  7550  0046F6  EC23  F02E         	call	___flneg	;wreg free
  7551  0046FA  C0AB  F0BF         	movff	?___flneg,?_atan
  7552  0046FE  C0AC  F0C0         	movff	?___flneg+1,?_atan+1
  7553  004702  C0AD  F0C1         	movff	?___flneg+2,?_atan+2
  7554  004706  C0AE  F0C2         	movff	?___flneg+3,?_atan+3
  7555  00470A  0012               	return	
  7556  00470C  0012               	return		;funcret
  7557  00470E                     __end_of_atan:
  7558                           	opt stack 0
  7559                           tblptru	equ	0xFF8
  7560                           tblptrh	equ	0xFF7
  7561                           tblptrl	equ	0xFF6
  7562                           tablat	equ	0xFF5
  7563                           postinc0	equ	0xFEE
  7564                           wreg	equ	0xFE8
  7565                           postdec1	equ	0xFE5
  7566                           fsr1l	equ	0xFE1
  7567                           indf2	equ	0xFDF
  7568                           postinc2	equ	0xFDE
  7569                           postdec2	equ	0xFDD
  7570                           fsr2h	equ	0xFDA
  7571                           fsr2l	equ	0xFD9
  7572                           status	equ	0xFD8
  7573                           
  7574 ;; *************** function _fabs *****************
  7575 ;; Defined at:
  7576 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fabs.c"
  7577 ;; Parameters:    Size  Location     Type
  7578 ;;  d               4   79[BANK0 ] unsigned char 
  7579 ;; Auto vars:     Size  Location     Type
  7580 ;;		None
  7581 ;; Return value:  Size  Location     Type
  7582 ;;                  4   79[BANK0 ] unsigned char 
  7583 ;; Registers used:
  7584 ;;		wreg, status,2, status,0, cstack
  7585 ;; Tracked objects:
  7586 ;;		On entry : 0/0
  7587 ;;		On exit  : 0/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7590 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;Total ram usage:        4 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; Hardware stack levels required when called:    6
  7597 ;; This function calls:
  7598 ;;		___flneg
  7599 ;; This function is called by:
  7600 ;;		_asin
  7601 ;;		_atan
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           	psect	text20
  7606  005C08                     __ptext20:
  7607                           	opt stack 0
  7608  005C08                     _fabs:
  7609                           	opt stack 21
  7610                           
  7611                           ;incstack = 0
  7612  005C08  0100               	movlb	0	; () banked
  7613  005C0A  AFB2               	btfss	(fabs@d+3)& (0+255),7,b
  7614  005C0C  D013               	goto	l1144
  7615                           
  7616                           ; BSR set to: 0
  7617  005C0E  C0AF  F0AB         	movff	fabs@d,___flneg@f1
  7618  005C12  C0B0  F0AC         	movff	fabs@d+1,___flneg@f1+1
  7619  005C16  C0B1  F0AD         	movff	fabs@d+2,___flneg@f1+2
  7620  005C1A  C0B2  F0AE         	movff	fabs@d+3,___flneg@f1+3
  7621  005C1E  EC23  F02E         	call	___flneg	;wreg free
  7622  005C22  C0AB  F0AF         	movff	?___flneg,?_fabs
  7623  005C26  C0AC  F0B0         	movff	?___flneg+1,?_fabs+1
  7624  005C2A  C0AD  F0B1         	movff	?___flneg+2,?_fabs+2
  7625  005C2E  C0AE  F0B2         	movff	?___flneg+3,?_fabs+3
  7626  005C32  0012               	return	
  7627  005C34                     l1144:
  7628                           
  7629                           ; BSR set to: 0
  7630  005C34  C0AF  F0AF         	movff	fabs@d,?_fabs
  7631  005C38  C0B0  F0B0         	movff	fabs@d+1,?_fabs+1
  7632  005C3C  C0B1  F0B1         	movff	fabs@d+2,?_fabs+2
  7633  005C40  C0B2  F0B2         	movff	fabs@d+3,?_fabs+3
  7634  005C44  0012               	return		;funcret
  7635  005C46                     __end_of_fabs:
  7636                           	opt stack 0
  7637                           tblptru	equ	0xFF8
  7638                           tblptrh	equ	0xFF7
  7639                           tblptrl	equ	0xFF6
  7640                           tablat	equ	0xFF5
  7641                           postinc0	equ	0xFEE
  7642                           wreg	equ	0xFE8
  7643                           postdec1	equ	0xFE5
  7644                           fsr1l	equ	0xFE1
  7645                           indf2	equ	0xFDF
  7646                           postinc2	equ	0xFDE
  7647                           postdec2	equ	0xFDD
  7648                           fsr2h	equ	0xFDA
  7649                           fsr2l	equ	0xFD9
  7650                           status	equ	0xFD8
  7651                           
  7652 ;; *************** function ___flneg *****************
  7653 ;; Defined at:
  7654 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;  f1              4   75[BANK0 ] unsigned char 
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;		None
  7659 ;; Return value:  Size  Location     Type
  7660 ;;                  4   75[BANK0 ] unsigned char 
  7661 ;; Registers used:
  7662 ;;		wreg, status,2, status,0
  7663 ;; Tracked objects:
  7664 ;;		On entry : 0/0
  7665 ;;		On exit  : 0/0
  7666 ;;		Unchanged: 0/0
  7667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7668 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7671 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7672 ;;Total ram usage:        4 bytes
  7673 ;; Hardware stack levels used:    1
  7674 ;; Hardware stack levels required when called:    5
  7675 ;; This function calls:
  7676 ;;		Nothing
  7677 ;; This function is called by:
  7678 ;;		_park_routine
  7679 ;;		_matematica
  7680 ;;		_asin
  7681 ;;		_atan
  7682 ;;		_fabs
  7683 ;;		_sin
  7684 ;; This function uses a non-reentrant model
  7685 ;;
  7686                           
  7687                           	psect	text21
  7688  005C46                     __ptext21:
  7689                           	opt stack 0
  7690  005C46                     ___flneg:
  7691                           	opt stack 21
  7692                           
  7693                           ;incstack = 0
  7694  005C46  0100               	movlb	0	; () banked
  7695  005C48  51AB               	movf	___flneg@f1& (0+255),w,b
  7696  005C4A  0100               	movlb	0	; () banked
  7697  005C4C  11AC               	iorwf	(___flneg@f1+1)& (0+255),w,b
  7698  005C4E  0100               	movlb	0	; () banked
  7699  005C50  11AD               	iorwf	(___flneg@f1+2)& (0+255),w,b
  7700  005C52  0100               	movlb	0	; () banked
  7701  005C54  11AE               	iorwf	(___flneg@f1+3)& (0+255),w,b
  7702  005C56  B4D8               	btfsc	status,2,c
  7703  005C58  D00A               	goto	l6154
  7704                           
  7705                           ; BSR set to: 0
  7706  005C5A  0E00               	movlw	0
  7707  005C5C  0100               	movlb	0	; () banked
  7708  005C5E  1BAB               	xorwf	___flneg@f1& (0+255),f,b
  7709  005C60  0E00               	movlw	0
  7710  005C62  1BAC               	xorwf	(___flneg@f1+1)& (0+255),f,b
  7711  005C64  0E00               	movlw	0
  7712  005C66  1BAD               	xorwf	(___flneg@f1+2)& (0+255),f,b
  7713  005C68  0E80               	movlw	128
  7714  005C6A  1BAE               	xorwf	(___flneg@f1+3)& (0+255),f,b
  7715  005C6C  D000               	goto	l6154
  7716  005C6E                     l6154:
  7717                           
  7718                           ; BSR set to: 0
  7719  005C6E  C0AB  F0AB         	movff	___flneg@f1,?___flneg
  7720  005C72  C0AC  F0AC         	movff	___flneg@f1+1,?___flneg+1
  7721  005C76  C0AD  F0AD         	movff	___flneg@f1+2,?___flneg+2
  7722  005C7A  C0AE  F0AE         	movff	___flneg@f1+3,?___flneg+3
  7723  005C7E  0012               	return	
  7724                           
  7725                           ; BSR set to: 0
  7726                           
  7727                           ; BSR set to: 0
  7728  005C80  0012               	return		;funcret
  7729  005C82                     __end_of___flneg:
  7730                           	opt stack 0
  7731                           tblptru	equ	0xFF8
  7732                           tblptrh	equ	0xFF7
  7733                           tblptrl	equ	0xFF6
  7734                           tablat	equ	0xFF5
  7735                           postinc0	equ	0xFEE
  7736                           wreg	equ	0xFE8
  7737                           postdec1	equ	0xFE5
  7738                           fsr1l	equ	0xFE1
  7739                           indf2	equ	0xFDF
  7740                           postinc2	equ	0xFDE
  7741                           postdec2	equ	0xFDD
  7742                           fsr2h	equ	0xFDA
  7743                           fsr2l	equ	0xFD9
  7744                           status	equ	0xFD8
  7745                           
  7746 ;; *************** function _eval_poly *****************
  7747 ;; Defined at:
  7748 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  7749 ;; Parameters:    Size  Location     Type
  7750 ;;  x               4   75[BANK0 ] unsigned char 
  7751 ;;  d               2   79[BANK0 ] PTR const 
  7752 ;;		 -> sin@coeff_a(20), sin@coeff_b(16), atan@coeff_a(24), atan@coeff_b(20), 
  7753 ;;  n               2   81[BANK0 ] int 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;  res             4   87[BANK0 ] int 
  7756 ;; Return value:  Size  Location     Type
  7757 ;;                  4   75[BANK0 ] int 
  7758 ;; Registers used:
  7759 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7765 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;Total ram usage:       16 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; Hardware stack levels required when called:    7
  7772 ;; This function calls:
  7773 ;;		___fladd
  7774 ;;		___flmul
  7775 ;; This function is called by:
  7776 ;;		_atan
  7777 ;;		_sin
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           	psect	text22
  7782  005324                     __ptext22:
  7783                           	opt stack 0
  7784  005324                     _eval_poly:
  7785                           	opt stack 19
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;incstack = 0
  7789  005324  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  7790  005328  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  7791  00532C  0100               	movlb	0	; () banked
  7792  00532E  90D8               	bcf	status,0,c
  7793  005330  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7794  005332  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7795  005334  0100               	movlb	0	; () banked
  7796  005336  90D8               	bcf	status,0,c
  7797  005338  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7798  00533A  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7799  00533C  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  7800  005340  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  7801  005344  0100               	movlb	0	; () banked
  7802  005346  51B3               	movf	??_eval_poly& (0+255),w,b
  7803  005348  0100               	movlb	0	; () banked
  7804  00534A  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  7805  00534C  0100               	movlb	0	; () banked
  7806  00534E  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  7807  005350  0100               	movlb	0	; () banked
  7808  005352  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  7809  005354  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  7810  005358  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  7811  00535C                     	if	0	;tblptru may be non-zero
  7812  00535C                     	endif
  7813  00535C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7814  00535C  0E00               	movlw	low (__mediumconst shr (0+16))
  7815  00535E  6EF8               	movwf	tblptru,c
  7816  005360                     	endif
  7817  005360  0009               	tblrd		*+
  7818  005362  CFF5 F0B7          	movff	tablat,eval_poly@res
  7819  005366  0009               	tblrd		*+
  7820  005368  CFF5 F0B8          	movff	tablat,eval_poly@res+1
  7821  00536C  0009               	tblrd		*+
  7822  00536E  CFF5 F0B9          	movff	tablat,eval_poly@res+2
  7823  005372  000A               	tblrd		*-
  7824  005374  CFF5 F0BA          	movff	tablat,eval_poly@res+3
  7825  005378  D053               	goto	l6276
  7826  00537A                     l6274:
  7827                           
  7828                           ; BSR set to: 0
  7829  00537A  C0B7  F094         	movff	eval_poly@res,___flmul@f2
  7830  00537E  C0B8  F095         	movff	eval_poly@res+1,___flmul@f2+1
  7831  005382  C0B9  F096         	movff	eval_poly@res+2,___flmul@f2+2
  7832  005386  C0BA  F097         	movff	eval_poly@res+3,___flmul@f2+3
  7833  00538A  C0AB  F090         	movff	eval_poly@x,___flmul@f1
  7834  00538E  C0AC  F091         	movff	eval_poly@x+1,___flmul@f1+1
  7835  005392  C0AD  F092         	movff	eval_poly@x+2,___flmul@f1+2
  7836  005396  C0AE  F093         	movff	eval_poly@x+3,___flmul@f1+3
  7837  00539A  EC27  F027         	call	___flmul	;wreg free
  7838  00539E  C090  F09F         	movff	?___flmul,___fladd@f1
  7839  0053A2  C091  F0A0         	movff	?___flmul+1,___fladd@f1+1
  7840  0053A6  C092  F0A1         	movff	?___flmul+2,___fladd@f1+2
  7841  0053AA  C093  F0A2         	movff	?___flmul+3,___fladd@f1+3
  7842  0053AE  0100               	movlb	0	; () banked
  7843  0053B0  07B1               	decf	eval_poly@n& (0+255),f,b
  7844  0053B2  A0D8               	btfss	status,0,c
  7845  0053B4  07B2               	decf	(eval_poly@n+1)& (0+255),f,b
  7846  0053B6  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  7847  0053BA  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  7848  0053BE  0100               	movlb	0	; () banked
  7849  0053C0  90D8               	bcf	status,0,c
  7850  0053C2  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7851  0053C4  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7852  0053C6  0100               	movlb	0	; () banked
  7853  0053C8  90D8               	bcf	status,0,c
  7854  0053CA  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7855  0053CC  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7856  0053CE  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  7857  0053D2  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  7858  0053D6  0100               	movlb	0	; () banked
  7859  0053D8  51B3               	movf	??_eval_poly& (0+255),w,b
  7860  0053DA  0100               	movlb	0	; () banked
  7861  0053DC  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  7862  0053DE  0100               	movlb	0	; () banked
  7863  0053E0  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  7864  0053E2  0100               	movlb	0	; () banked
  7865  0053E4  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  7866  0053E6  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  7867  0053EA  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  7868  0053EE                     	if	0	;tblptru may be non-zero
  7869  0053EE                     	endif
  7870  0053EE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7871  0053EE  0E00               	movlw	low (__mediumconst shr (0+16))
  7872  0053F0  6EF8               	movwf	tblptru,c
  7873  0053F2                     	endif
  7874  0053F2  0009               	tblrd		*+
  7875  0053F4  CFF5 F0A3          	movff	tablat,___fladd@f2
  7876  0053F8  0009               	tblrd		*+
  7877  0053FA  CFF5 F0A4          	movff	tablat,___fladd@f2+1
  7878  0053FE  0009               	tblrd		*+
  7879  005400  CFF5 F0A5          	movff	tablat,___fladd@f2+2
  7880  005404  000A               	tblrd		*-
  7881  005406  CFF5 F0A6          	movff	tablat,___fladd@f2+3
  7882  00540A  ECF8  F01F         	call	___fladd	;wreg free
  7883  00540E  C09F  F0B7         	movff	?___fladd,eval_poly@res
  7884  005412  C0A0  F0B8         	movff	?___fladd+1,eval_poly@res+1
  7885  005416  C0A1  F0B9         	movff	?___fladd+2,eval_poly@res+2
  7886  00541A  C0A2  F0BA         	movff	?___fladd+3,eval_poly@res+3
  7887  00541E  D000               	goto	l6276
  7888  005420                     l6276:
  7889  005420  0100               	movlb	0	; () banked
  7890  005422  51B1               	movf	eval_poly@n& (0+255),w,b
  7891  005424  0100               	movlb	0	; () banked
  7892  005426  11B2               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7893  005428  A4D8               	btfss	status,2,c
  7894  00542A  D7A7               	goto	l6274
  7895                           
  7896                           ; BSR set to: 0
  7897  00542C  C0B7  F0AB         	movff	eval_poly@res,?_eval_poly
  7898  005430  C0B8  F0AC         	movff	eval_poly@res+1,?_eval_poly+1
  7899  005434  C0B9  F0AD         	movff	eval_poly@res+2,?_eval_poly+2
  7900  005438  C0BA  F0AE         	movff	eval_poly@res+3,?_eval_poly+3
  7901                           
  7902                           ; BSR set to: 0
  7903  00543C  0012               	return		;funcret
  7904  00543E                     __end_of_eval_poly:
  7905                           	opt stack 0
  7906                           tblptru	equ	0xFF8
  7907                           tblptrh	equ	0xFF7
  7908                           tblptrl	equ	0xFF6
  7909                           tablat	equ	0xFF5
  7910                           postinc0	equ	0xFEE
  7911                           wreg	equ	0xFE8
  7912                           postdec1	equ	0xFE5
  7913                           fsr1l	equ	0xFE1
  7914                           indf2	equ	0xFDF
  7915                           postinc2	equ	0xFDE
  7916                           postdec2	equ	0xFDD
  7917                           fsr2h	equ	0xFDA
  7918                           fsr2l	equ	0xFD9
  7919                           status	equ	0xFD8
  7920                           
  7921 ;; *************** function ___flmul *****************
  7922 ;; Defined at:
  7923 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;  f1              4   48[BANK0 ] int 
  7926 ;;  f2              4   52[BANK0 ] int 
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;  f3_as_produc    4   57[BANK0 ] unsigned long 
  7929 ;;  sign            1   62[BANK0 ] unsigned char 
  7930 ;;  cntr            1   61[BANK0 ] unsigned char 
  7931 ;;  exp             1   56[BANK0 ] unsigned char 
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  4   48[BANK0 ] unsigned char 
  7934 ;; Registers used:
  7935 ;;		wreg, status,2, status,0, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7941 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;Total ram usage:       15 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    6
  7948 ;; This function calls:
  7949 ;;		___flpack
  7950 ;; This function is called by:
  7951 ;;		_parallelo
  7952 ;;		_matematica
  7953 ;;		_asin
  7954 ;;		_atan
  7955 ;;		_eval_poly
  7956 ;;		_sin
  7957 ;;		_sqrt
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961                           	psect	text23
  7962  004E4E                     __ptext23:
  7963                           	opt stack 0
  7964  004E4E                     ___flmul:
  7965                           	opt stack 21
  7966                           
  7967                           ; BSR set to: 0
  7968                           ;incstack = 0
  7969  004E4E  0100               	movlb	0	; () banked
  7970  004E50  3592               	rlcf	(___flmul@f1+2)& (0+255),w,b
  7971  004E52  3593               	rlcf	(___flmul@f1+3)& (0+255),w,b
  7972  004E54  0100               	movlb	0	; () banked
  7973  004E56  6F98               	movwf	___flmul@exp& (0+255),b
  7974  004E58  0100               	movlb	0	; () banked
  7975  004E5A  5198               	movf	___flmul@exp& (0+255),w,b
  7976  004E5C  A4D8               	btfss	status,2,c
  7977  004E5E  D00A               	goto	l6092
  7978                           
  7979                           ; BSR set to: 0
  7980  004E60  0E00               	movlw	0
  7981  004E62  0100               	movlb	0	; () banked
  7982  004E64  6F90               	movwf	?___flmul& (0+255),b
  7983  004E66  0E00               	movlw	0
  7984  004E68  6F91               	movwf	(?___flmul+1)& (0+255),b
  7985  004E6A  0E00               	movlw	0
  7986  004E6C  6F92               	movwf	(?___flmul+2)& (0+255),b
  7987  004E6E  0E00               	movlw	0
  7988  004E70  6F93               	movwf	(?___flmul+3)& (0+255),b
  7989                           
  7990                           ; BSR set to: 0
  7991  004E72  0012               	return	
  7992  004E74                     l6092:
  7993                           
  7994                           ; BSR set to: 0
  7995  004E74  0100               	movlb	0	; () banked
  7996  004E76  3596               	rlcf	(___flmul@f2+2)& (0+255),w,b
  7997  004E78  3597               	rlcf	(___flmul@f2+3)& (0+255),w,b
  7998  004E7A  0100               	movlb	0	; () banked
  7999  004E7C  6F9E               	movwf	___flmul@sign& (0+255),b
  8000  004E7E  0100               	movlb	0	; () banked
  8001  004E80  519E               	movf	___flmul@sign& (0+255),w,b
  8002  004E82  A4D8               	btfss	status,2,c
  8003  004E84  D00A               	goto	l6098
  8004                           
  8005                           ; BSR set to: 0
  8006  004E86  0E00               	movlw	0
  8007  004E88  0100               	movlb	0	; () banked
  8008  004E8A  6F90               	movwf	?___flmul& (0+255),b
  8009  004E8C  0E00               	movlw	0
  8010  004E8E  6F91               	movwf	(?___flmul+1)& (0+255),b
  8011  004E90  0E00               	movlw	0
  8012  004E92  6F92               	movwf	(?___flmul+2)& (0+255),b
  8013  004E94  0E00               	movlw	0
  8014  004E96  6F93               	movwf	(?___flmul+3)& (0+255),b
  8015                           
  8016                           ; BSR set to: 0
  8017  004E98  0012               	return	
  8018  004E9A                     l6098:
  8019                           
  8020                           ; BSR set to: 0
  8021  004E9A  0100               	movlb	0	; () banked
  8022  004E9C  519E               	movf	___flmul@sign& (0+255),w,b
  8023  004E9E  0F7B               	addlw	123
  8024  004EA0  0100               	movlb	0	; () banked
  8025  004EA2  2798               	addwf	___flmul@exp& (0+255),f,b
  8026                           
  8027                           ; BSR set to: 0
  8028  004EA4  C093  F09E         	movff	___flmul@f1+3,___flmul@sign
  8029  004EA8  0100               	movlb	0	; () banked
  8030  004EAA  5197               	movf	(___flmul@f2+3)& (0+255),w,b
  8031  004EAC  0100               	movlb	0	; () banked
  8032  004EAE  1B9E               	xorwf	___flmul@sign& (0+255),f,b
  8033  004EB0  0E80               	movlw	128
  8034  004EB2  0100               	movlb	0	; () banked
  8035  004EB4  179E               	andwf	___flmul@sign& (0+255),f,b
  8036                           
  8037                           ; BSR set to: 0
  8038  004EB6  0100               	movlb	0	; () banked
  8039  004EB8  8F92               	bsf	(___flmul@f1+2)& (0+255),7,b
  8040                           
  8041                           ; BSR set to: 0
  8042  004EBA  0100               	movlb	0	; () banked
  8043  004EBC  8F96               	bsf	(___flmul@f2+2)& (0+255),7,b
  8044  004EBE  0EFF               	movlw	255
  8045  004EC0  0100               	movlb	0	; () banked
  8046  004EC2  1794               	andwf	___flmul@f2& (0+255),f,b
  8047  004EC4  0EFF               	movlw	255
  8048  004EC6  1795               	andwf	(___flmul@f2+1)& (0+255),f,b
  8049  004EC8  0EFF               	movlw	255
  8050  004ECA  1796               	andwf	(___flmul@f2+2)& (0+255),f,b
  8051  004ECC  0E00               	movlw	0
  8052  004ECE  1797               	andwf	(___flmul@f2+3)& (0+255),f,b
  8053                           
  8054                           ; BSR set to: 0
  8055  004ED0  0E00               	movlw	0
  8056  004ED2  0100               	movlb	0	; () banked
  8057  004ED4  6F99               	movwf	___flmul@f3_as_product& (0+255),b
  8058  004ED6  0E00               	movlw	0
  8059  004ED8  6F9A               	movwf	(___flmul@f3_as_product+1)& (0+255),b
  8060  004EDA  0E00               	movlw	0
  8061  004EDC  6F9B               	movwf	(___flmul@f3_as_product+2)& (0+255),b
  8062  004EDE  0E00               	movlw	0
  8063  004EE0  6F9C               	movwf	(___flmul@f3_as_product+3)& (0+255),b
  8064                           
  8065                           ; BSR set to: 0
  8066  004EE2  0E07               	movlw	7
  8067  004EE4  0100               	movlb	0	; () banked
  8068  004EE6  6F9D               	movwf	___flmul@cntr& (0+255),b
  8069  004EE8  D000               	goto	l6110
  8070  004EEA                     l6110:
  8071                           
  8072                           ; BSR set to: 0
  8073  004EEA  0100               	movlb	0	; () banked
  8074  004EEC  A190               	btfss	___flmul@f1& (0+255),0,b
  8075  004EEE  D011               	goto	l6114
  8076                           
  8077                           ; BSR set to: 0
  8078  004EF0  0100               	movlb	0	; () banked
  8079  004EF2  5194               	movf	___flmul@f2& (0+255),w,b
  8080  004EF4  0100               	movlb	0	; () banked
  8081  004EF6  2799               	addwf	___flmul@f3_as_product& (0+255),f,b
  8082  004EF8  0100               	movlb	0	; () banked
  8083  004EFA  5195               	movf	(___flmul@f2+1)& (0+255),w,b
  8084  004EFC  0100               	movlb	0	; () banked
  8085  004EFE  239A               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8086  004F00  0100               	movlb	0	; () banked
  8087  004F02  5196               	movf	(___flmul@f2+2)& (0+255),w,b
  8088  004F04  0100               	movlb	0	; () banked
  8089  004F06  239B               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8090  004F08  0100               	movlb	0	; () banked
  8091  004F0A  5197               	movf	(___flmul@f2+3)& (0+255),w,b
  8092  004F0C  0100               	movlb	0	; () banked
  8093  004F0E  239C               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8094  004F10  D000               	goto	l6114
  8095  004F12                     l6114:
  8096                           
  8097                           ; BSR set to: 0
  8098  004F12  0100               	movlb	0	; () banked
  8099  004F14  90D8               	bcf	status,0,c
  8100  004F16  3393               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8101  004F18  3392               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8102  004F1A  3391               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8103  004F1C  3390               	rrcf	___flmul@f1& (0+255),f,b
  8104                           
  8105                           ; BSR set to: 0
  8106  004F1E  0100               	movlb	0	; () banked
  8107  004F20  90D8               	bcf	status,0,c
  8108  004F22  3794               	rlcf	___flmul@f2& (0+255),f,b
  8109  004F24  3795               	rlcf	(___flmul@f2+1)& (0+255),f,b
  8110  004F26  3796               	rlcf	(___flmul@f2+2)& (0+255),f,b
  8111  004F28  3797               	rlcf	(___flmul@f2+3)& (0+255),f,b
  8112                           
  8113                           ; BSR set to: 0
  8114  004F2A  0100               	movlb	0	; () banked
  8115  004F2C  2F9D               	decfsz	___flmul@cntr& (0+255),f,b
  8116  004F2E  D7DD               	goto	l6110
  8117  004F30  D000               	goto	l6120
  8118  004F32                     l6120:
  8119                           
  8120                           ; BSR set to: 0
  8121  004F32  0E11               	movlw	17
  8122  004F34  0100               	movlb	0	; () banked
  8123  004F36  6F9D               	movwf	___flmul@cntr& (0+255),b
  8124  004F38  D000               	goto	l6122
  8125  004F3A                     l6122:
  8126                           
  8127                           ; BSR set to: 0
  8128  004F3A  0100               	movlb	0	; () banked
  8129  004F3C  A190               	btfss	___flmul@f1& (0+255),0,b
  8130  004F3E  D011               	goto	l6126
  8131                           
  8132                           ; BSR set to: 0
  8133  004F40  0100               	movlb	0	; () banked
  8134  004F42  5194               	movf	___flmul@f2& (0+255),w,b
  8135  004F44  0100               	movlb	0	; () banked
  8136  004F46  2799               	addwf	___flmul@f3_as_product& (0+255),f,b
  8137  004F48  0100               	movlb	0	; () banked
  8138  004F4A  5195               	movf	(___flmul@f2+1)& (0+255),w,b
  8139  004F4C  0100               	movlb	0	; () banked
  8140  004F4E  239A               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8141  004F50  0100               	movlb	0	; () banked
  8142  004F52  5196               	movf	(___flmul@f2+2)& (0+255),w,b
  8143  004F54  0100               	movlb	0	; () banked
  8144  004F56  239B               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8145  004F58  0100               	movlb	0	; () banked
  8146  004F5A  5197               	movf	(___flmul@f2+3)& (0+255),w,b
  8147  004F5C  0100               	movlb	0	; () banked
  8148  004F5E  239C               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8149  004F60  D000               	goto	l6126
  8150  004F62                     l6126:
  8151                           
  8152                           ; BSR set to: 0
  8153  004F62  0100               	movlb	0	; () banked
  8154  004F64  90D8               	bcf	status,0,c
  8155  004F66  3393               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8156  004F68  3392               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8157  004F6A  3391               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8158  004F6C  3390               	rrcf	___flmul@f1& (0+255),f,b
  8159                           
  8160                           ; BSR set to: 0
  8161  004F6E  0100               	movlb	0	; () banked
  8162  004F70  90D8               	bcf	status,0,c
  8163  004F72  339C               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
  8164  004F74  339B               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
  8165  004F76  339A               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
  8166  004F78  3399               	rrcf	___flmul@f3_as_product& (0+255),f,b
  8167                           
  8168                           ; BSR set to: 0
  8169  004F7A  0100               	movlb	0	; () banked
  8170  004F7C  2F9D               	decfsz	___flmul@cntr& (0+255),f,b
  8171  004F7E  D7DD               	goto	l6122
  8172  004F80  D000               	goto	l6132
  8173  004F82                     l6132:
  8174                           
  8175                           ; BSR set to: 0
  8176  004F82  C099  F077         	movff	___flmul@f3_as_product,___flpack@arg
  8177  004F86  C09A  F078         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  8178  004F8A  C09B  F079         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  8179  004F8E  C09C  F07A         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  8180  004F92  C098  F07B         	movff	___flmul@exp,___flpack@exp
  8181  004F96  C09E  F07C         	movff	___flmul@sign,___flpack@sign
  8182  004F9A  EC67  F026         	call	___flpack	;wreg free
  8183  004F9E  C077  F090         	movff	?___flpack,?___flmul
  8184  004FA2  C078  F091         	movff	?___flpack+1,?___flmul+1
  8185  004FA6  C079  F092         	movff	?___flpack+2,?___flmul+2
  8186  004FAA  C07A  F093         	movff	?___flpack+3,?___flmul+3
  8187  004FAE  0012               	return	
  8188  004FB0  0012               	return		;funcret
  8189  004FB2                     __end_of___flmul:
  8190                           	opt stack 0
  8191                           tblptru	equ	0xFF8
  8192                           tblptrh	equ	0xFF7
  8193                           tblptrl	equ	0xFF6
  8194                           tablat	equ	0xFF5
  8195                           postinc0	equ	0xFEE
  8196                           wreg	equ	0xFE8
  8197                           postdec1	equ	0xFE5
  8198                           fsr1l	equ	0xFE1
  8199                           indf2	equ	0xFDF
  8200                           postinc2	equ	0xFDE
  8201                           postdec2	equ	0xFDD
  8202                           fsr2h	equ	0xFDA
  8203                           fsr2l	equ	0xFD9
  8204                           status	equ	0xFD8
  8205                           
  8206 ;; *************** function ___fladd *****************
  8207 ;; Defined at:
  8208 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;  f1              4   63[BANK0 ] unsigned char 
  8211 ;;  f2              4   67[BANK0 ] unsigned char 
  8212 ;; Auto vars:     Size  Location     Type
  8213 ;;  exp1            1   74[BANK0 ] unsigned char 
  8214 ;;  exp2            1   73[BANK0 ] unsigned char 
  8215 ;;  sign            1   72[BANK0 ] unsigned char 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  4   63[BANK0 ] unsigned char 
  8218 ;; Registers used:
  8219 ;;		wreg, status,2, status,0, cstack
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8225 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;Total ram usage:       12 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    6
  8232 ;; This function calls:
  8233 ;;		___flpack
  8234 ;; This function is called by:
  8235 ;;		_park_routine
  8236 ;;		_parallelo
  8237 ;;		_matematica
  8238 ;;		_asin
  8239 ;;		_atan
  8240 ;;		_cos
  8241 ;;		_eval_poly
  8242 ;;		___flsub
  8243 ;;		_sin
  8244 ;;		_floor
  8245 ;; This function uses a non-reentrant model
  8246 ;;
  8247                           
  8248                           	psect	text24
  8249  003FF0                     __ptext24:
  8250                           	opt stack 0
  8251  003FF0                     ___fladd:
  8252                           	opt stack 20
  8253                           
  8254                           ;incstack = 0
  8255  003FF0  0100               	movlb	0	; () banked
  8256  003FF2  35A1               	rlcf	(___fladd@f1+2)& (0+255),w,b
  8257  003FF4  35A2               	rlcf	(___fladd@f1+3)& (0+255),w,b
  8258  003FF6  0100               	movlb	0	; () banked
  8259  003FF8  6FAA               	movwf	___fladd@exp1& (0+255),b
  8260  003FFA  0100               	movlb	0	; () banked
  8261  003FFC  35A5               	rlcf	(___fladd@f2+2)& (0+255),w,b
  8262  003FFE  35A6               	rlcf	(___fladd@f2+3)& (0+255),w,b
  8263  004000  0100               	movlb	0	; () banked
  8264  004002  6FA9               	movwf	___fladd@exp2& (0+255),b
  8265  004004  0100               	movlb	0	; () banked
  8266  004006  51AA               	movf	___fladd@exp1& (0+255),w,b
  8267  004008  0100               	movlb	0	; () banked
  8268  00400A  B4D8               	btfsc	status,2,c
  8269  00400C  D011               	goto	l1152
  8270                           
  8271                           ; BSR set to: 0
  8272  00400E  0100               	movlb	0	; () banked
  8273  004010  51A9               	movf	___fladd@exp2& (0+255),w,b
  8274  004012  0100               	movlb	0	; () banked
  8275  004014  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  8276  004016  B0D8               	btfsc	status,0,c
  8277  004018  D014               	goto	l6024
  8278                           
  8279                           ; BSR set to: 0
  8280  00401A  0100               	movlb	0	; () banked
  8281  00401C  51AA               	movf	___fladd@exp1& (0+255),w,b
  8282  00401E  0800               	sublw	0
  8283  004020  0100               	movlb	0	; () banked
  8284  004022  25A9               	addwf	___fladd@exp2& (0+255),w,b
  8285  004024  0100               	movlb	0	; () banked
  8286  004026  6FA7               	movwf	??___fladd& (0+255),b
  8287  004028  0E20               	movlw	32
  8288  00402A  0100               	movlb	0	; () banked
  8289  00402C  65A7               	cpfsgt	??___fladd& (0+255),b
  8290  00402E  D009               	goto	l6024
  8291  004030                     l1152:
  8292                           
  8293                           ; BSR set to: 0
  8294  004030  C0A3  F09F         	movff	___fladd@f2,?___fladd
  8295  004034  C0A4  F0A0         	movff	___fladd@f2+1,?___fladd+1
  8296  004038  C0A5  F0A1         	movff	___fladd@f2+2,?___fladd+2
  8297  00403C  C0A6  F0A2         	movff	___fladd@f2+3,?___fladd+3
  8298  004040  0012               	return	
  8299  004042                     l6024:
  8300                           
  8301                           ; BSR set to: 0
  8302  004042  0100               	movlb	0	; () banked
  8303  004044  51A9               	movf	___fladd@exp2& (0+255),w,b
  8304  004046  0100               	movlb	0	; () banked
  8305  004048  B4D8               	btfsc	status,2,c
  8306  00404A  D011               	goto	l1156
  8307                           
  8308                           ; BSR set to: 0
  8309  00404C  0100               	movlb	0	; () banked
  8310  00404E  51AA               	movf	___fladd@exp1& (0+255),w,b
  8311  004050  0100               	movlb	0	; () banked
  8312  004052  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  8313  004054  B0D8               	btfsc	status,0,c
  8314  004056  D014               	goto	l6030
  8315                           
  8316                           ; BSR set to: 0
  8317  004058  0100               	movlb	0	; () banked
  8318  00405A  51A9               	movf	___fladd@exp2& (0+255),w,b
  8319  00405C  0800               	sublw	0
  8320  00405E  0100               	movlb	0	; () banked
  8321  004060  25AA               	addwf	___fladd@exp1& (0+255),w,b
  8322  004062  0100               	movlb	0	; () banked
  8323  004064  6FA7               	movwf	??___fladd& (0+255),b
  8324  004066  0E20               	movlw	32
  8325  004068  0100               	movlb	0	; () banked
  8326  00406A  65A7               	cpfsgt	??___fladd& (0+255),b
  8327  00406C  D009               	goto	l6030
  8328  00406E                     l1156:
  8329                           
  8330                           ; BSR set to: 0
  8331  00406E  C09F  F09F         	movff	___fladd@f1,?___fladd
  8332  004072  C0A0  F0A0         	movff	___fladd@f1+1,?___fladd+1
  8333  004076  C0A1  F0A1         	movff	___fladd@f1+2,?___fladd+2
  8334  00407A  C0A2  F0A2         	movff	___fladd@f1+3,?___fladd+3
  8335  00407E  0012               	return	
  8336  004080                     l6030:
  8337                           
  8338                           ; BSR set to: 0
  8339  004080  0E06               	movlw	6
  8340  004082  0100               	movlb	0	; () banked
  8341  004084  6FA8               	movwf	___fladd@sign& (0+255),b
  8342                           
  8343                           ; BSR set to: 0
  8344  004086  0100               	movlb	0	; () banked
  8345  004088  AFA2               	btfss	(___fladd@f1+3)& (0+255),7,b
  8346  00408A  D003               	goto	l6036
  8347                           
  8348                           ; BSR set to: 0
  8349  00408C  0100               	movlb	0	; () banked
  8350  00408E  8FA8               	bsf	___fladd@sign& (0+255),7,b
  8351  004090  D000               	goto	l6036
  8352  004092                     l6036:
  8353                           
  8354                           ; BSR set to: 0
  8355  004092  0100               	movlb	0	; () banked
  8356  004094  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  8357  004096  D002               	goto	l1158
  8358                           
  8359                           ; BSR set to: 0
  8360  004098  0100               	movlb	0	; () banked
  8361  00409A  8DA8               	bsf	___fladd@sign& (0+255),6,b
  8362  00409C                     l1158:
  8363                           
  8364                           ; BSR set to: 0
  8365  00409C  0100               	movlb	0	; () banked
  8366  00409E  8FA1               	bsf	(___fladd@f1+2)& (0+255),7,b
  8367                           
  8368                           ; BSR set to: 0
  8369  0040A0  0EFF               	movlw	255
  8370  0040A2  0100               	movlb	0	; () banked
  8371  0040A4  179F               	andwf	___fladd@f1& (0+255),f,b
  8372  0040A6  0EFF               	movlw	255
  8373  0040A8  17A0               	andwf	(___fladd@f1+1)& (0+255),f,b
  8374  0040AA  0EFF               	movlw	255
  8375  0040AC  17A1               	andwf	(___fladd@f1+2)& (0+255),f,b
  8376  0040AE  0E00               	movlw	0
  8377  0040B0  17A2               	andwf	(___fladd@f1+3)& (0+255),f,b
  8378                           
  8379                           ; BSR set to: 0
  8380  0040B2  0100               	movlb	0	; () banked
  8381  0040B4  8FA5               	bsf	(___fladd@f2+2)& (0+255),7,b
  8382  0040B6  0EFF               	movlw	255
  8383  0040B8  0100               	movlb	0	; () banked
  8384  0040BA  17A3               	andwf	___fladd@f2& (0+255),f,b
  8385  0040BC  0EFF               	movlw	255
  8386  0040BE  17A4               	andwf	(___fladd@f2+1)& (0+255),f,b
  8387  0040C0  0EFF               	movlw	255
  8388  0040C2  17A5               	andwf	(___fladd@f2+2)& (0+255),f,b
  8389  0040C4  0E00               	movlw	0
  8390  0040C6  17A6               	andwf	(___fladd@f2+3)& (0+255),f,b
  8391  0040C8  0100               	movlb	0	; () banked
  8392  0040CA  51A9               	movf	___fladd@exp2& (0+255),w,b
  8393  0040CC  0100               	movlb	0	; () banked
  8394  0040CE  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  8395  0040D0  B0D8               	btfsc	status,0,c
  8396  0040D2  D02A               	goto	l6054
  8397  0040D4                     l6044:
  8398                           
  8399                           ; BSR set to: 0
  8400  0040D4  0100               	movlb	0	; () banked
  8401  0040D6  90D8               	bcf	status,0,c
  8402  0040D8  37A3               	rlcf	___fladd@f2& (0+255),f,b
  8403  0040DA  37A4               	rlcf	(___fladd@f2+1)& (0+255),f,b
  8404  0040DC  37A5               	rlcf	(___fladd@f2+2)& (0+255),f,b
  8405  0040DE  37A6               	rlcf	(___fladd@f2+3)& (0+255),f,b
  8406  0040E0  0100               	movlb	0	; () banked
  8407  0040E2  07A9               	decf	___fladd@exp2& (0+255),f,b
  8408                           
  8409                           ; BSR set to: 0
  8410  0040E4  0100               	movlb	0	; () banked
  8411  0040E6  51AA               	movf	___fladd@exp1& (0+255),w,b
  8412  0040E8  0100               	movlb	0	; () banked
  8413  0040EA  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  8414  0040EC  B4D8               	btfsc	status,2,c
  8415  0040EE  D014               	goto	l6052
  8416                           
  8417                           ; BSR set to: 0
  8418  0040F0  0100               	movlb	0	; () banked
  8419  0040F2  07A8               	decf	___fladd@sign& (0+255),f,b
  8420  0040F4  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  8421  0040F8  0E07               	movlw	7
  8422  0040FA  0100               	movlb	0	; () banked
  8423  0040FC  17A7               	andwf	??___fladd& (0+255),f,b
  8424  0040FE  B4D8               	btfsc	status,2,c
  8425  004100  D00B               	goto	l6052
  8426  004102  D7E8               	goto	l6044
  8427                           
  8428                           ; BSR set to: 0
  8429                           
  8430                           ; BSR set to: 0
  8431  004104  D009               	goto	l6052
  8432  004106                     l6050:
  8433                           
  8434                           ; BSR set to: 0
  8435  004106  0100               	movlb	0	; () banked
  8436  004108  90D8               	bcf	status,0,c
  8437  00410A  33A2               	rrcf	(___fladd@f1+3)& (0+255),f,b
  8438  00410C  33A1               	rrcf	(___fladd@f1+2)& (0+255),f,b
  8439  00410E  33A0               	rrcf	(___fladd@f1+1)& (0+255),f,b
  8440  004110  339F               	rrcf	___fladd@f1& (0+255),f,b
  8441  004112  0100               	movlb	0	; () banked
  8442  004114  2BAA               	incf	___fladd@exp1& (0+255),f,b
  8443  004116  D000               	goto	l6052
  8444  004118                     l6052:
  8445                           
  8446                           ; BSR set to: 0
  8447  004118  0100               	movlb	0	; () banked
  8448  00411A  51A9               	movf	___fladd@exp2& (0+255),w,b
  8449  00411C  0100               	movlb	0	; () banked
  8450  00411E  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  8451  004120  B4D8               	btfsc	status,2,c
  8452  004122  D032               	goto	l1167
  8453  004124  D7F0               	goto	l6050
  8454                           
  8455                           ; BSR set to: 0
  8456  004126  D030               	goto	l1167
  8457  004128                     l6054:
  8458                           
  8459                           ; BSR set to: 0
  8460  004128  0100               	movlb	0	; () banked
  8461  00412A  51AA               	movf	___fladd@exp1& (0+255),w,b
  8462  00412C  0100               	movlb	0	; () banked
  8463  00412E  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  8464  004130  B0D8               	btfsc	status,0,c
  8465  004132  D02A               	goto	l1167
  8466  004134                     l6056:
  8467                           
  8468                           ; BSR set to: 0
  8469  004134  0100               	movlb	0	; () banked
  8470  004136  90D8               	bcf	status,0,c
  8471  004138  379F               	rlcf	___fladd@f1& (0+255),f,b
  8472  00413A  37A0               	rlcf	(___fladd@f1+1)& (0+255),f,b
  8473  00413C  37A1               	rlcf	(___fladd@f1+2)& (0+255),f,b
  8474  00413E  37A2               	rlcf	(___fladd@f1+3)& (0+255),f,b
  8475  004140  0100               	movlb	0	; () banked
  8476  004142  07AA               	decf	___fladd@exp1& (0+255),f,b
  8477                           
  8478                           ; BSR set to: 0
  8479  004144  0100               	movlb	0	; () banked
  8480  004146  51AA               	movf	___fladd@exp1& (0+255),w,b
  8481  004148  0100               	movlb	0	; () banked
  8482  00414A  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  8483  00414C  B4D8               	btfsc	status,2,c
  8484  00414E  D014               	goto	l6064
  8485                           
  8486                           ; BSR set to: 0
  8487  004150  0100               	movlb	0	; () banked
  8488  004152  07A8               	decf	___fladd@sign& (0+255),f,b
  8489  004154  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  8490  004158  0E07               	movlw	7
  8491  00415A  0100               	movlb	0	; () banked
  8492  00415C  17A7               	andwf	??___fladd& (0+255),f,b
  8493  00415E  B4D8               	btfsc	status,2,c
  8494  004160  D00B               	goto	l6064
  8495  004162  D7E8               	goto	l6056
  8496                           
  8497                           ; BSR set to: 0
  8498                           
  8499                           ; BSR set to: 0
  8500  004164  D009               	goto	l6064
  8501  004166                     l6062:
  8502                           
  8503                           ; BSR set to: 0
  8504  004166  0100               	movlb	0	; () banked
  8505  004168  90D8               	bcf	status,0,c
  8506  00416A  33A6               	rrcf	(___fladd@f2+3)& (0+255),f,b
  8507  00416C  33A5               	rrcf	(___fladd@f2+2)& (0+255),f,b
  8508  00416E  33A4               	rrcf	(___fladd@f2+1)& (0+255),f,b
  8509  004170  33A3               	rrcf	___fladd@f2& (0+255),f,b
  8510  004172  0100               	movlb	0	; () banked
  8511  004174  2BA9               	incf	___fladd@exp2& (0+255),f,b
  8512  004176  D000               	goto	l6064
  8513  004178                     l6064:
  8514                           
  8515                           ; BSR set to: 0
  8516  004178  0100               	movlb	0	; () banked
  8517  00417A  51A9               	movf	___fladd@exp2& (0+255),w,b
  8518  00417C  0100               	movlb	0	; () banked
  8519  00417E  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  8520  004180  B4D8               	btfsc	status,2,c
  8521  004182  D002               	goto	l1167
  8522  004184  D7F0               	goto	l6062
  8523                           
  8524                           ; BSR set to: 0
  8525  004186  D000               	goto	l1167
  8526  004188                     l1167:
  8527                           
  8528                           ; BSR set to: 0
  8529  004188  0100               	movlb	0	; () banked
  8530  00418A  AFA8               	btfss	___fladd@sign& (0+255),7,b
  8531  00418C  D011               	goto	l6068
  8532                           
  8533                           ; BSR set to: 0
  8534  00418E  0EFF               	movlw	255
  8535  004190  0100               	movlb	0	; () banked
  8536  004192  1B9F               	xorwf	___fladd@f1& (0+255),f,b
  8537  004194  0EFF               	movlw	255
  8538  004196  1BA0               	xorwf	(___fladd@f1+1)& (0+255),f,b
  8539  004198  0EFF               	movlw	255
  8540  00419A  1BA1               	xorwf	(___fladd@f1+2)& (0+255),f,b
  8541  00419C  0EFF               	movlw	255
  8542  00419E  1BA2               	xorwf	(___fladd@f1+3)& (0+255),f,b
  8543  0041A0  0E01               	movlw	1
  8544  0041A2  0100               	movlb	0	; () banked
  8545  0041A4  279F               	addwf	___fladd@f1& (0+255),f,b
  8546  0041A6  0E00               	movlw	0
  8547  0041A8  23A0               	addwfc	(___fladd@f1+1)& (0+255),f,b
  8548  0041AA  23A1               	addwfc	(___fladd@f1+2)& (0+255),f,b
  8549  0041AC  23A2               	addwfc	(___fladd@f1+3)& (0+255),f,b
  8550  0041AE  D000               	goto	l6068
  8551  0041B0                     l6068:
  8552                           
  8553                           ; BSR set to: 0
  8554  0041B0  0100               	movlb	0	; () banked
  8555  0041B2  ADA8               	btfss	___fladd@sign& (0+255),6,b
  8556  0041B4  D011               	goto	l6072
  8557                           
  8558                           ; BSR set to: 0
  8559  0041B6  0EFF               	movlw	255
  8560  0041B8  0100               	movlb	0	; () banked
  8561  0041BA  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  8562  0041BC  0EFF               	movlw	255
  8563  0041BE  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  8564  0041C0  0EFF               	movlw	255
  8565  0041C2  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  8566  0041C4  0EFF               	movlw	255
  8567  0041C6  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  8568  0041C8  0E01               	movlw	1
  8569  0041CA  0100               	movlb	0	; () banked
  8570  0041CC  27A3               	addwf	___fladd@f2& (0+255),f,b
  8571  0041CE  0E00               	movlw	0
  8572  0041D0  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8573  0041D2  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8574  0041D4  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8575  0041D6  D000               	goto	l6072
  8576  0041D8                     l6072:
  8577                           
  8578                           ; BSR set to: 0
  8579  0041D8  0E00               	movlw	0
  8580  0041DA  0100               	movlb	0	; () banked
  8581  0041DC  6FA8               	movwf	___fladd@sign& (0+255),b
  8582                           
  8583                           ; BSR set to: 0
  8584  0041DE  0100               	movlb	0	; () banked
  8585  0041E0  519F               	movf	___fladd@f1& (0+255),w,b
  8586  0041E2  0100               	movlb	0	; () banked
  8587  0041E4  27A3               	addwf	___fladd@f2& (0+255),f,b
  8588  0041E6  0100               	movlb	0	; () banked
  8589  0041E8  51A0               	movf	(___fladd@f1+1)& (0+255),w,b
  8590  0041EA  0100               	movlb	0	; () banked
  8591  0041EC  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8592  0041EE  0100               	movlb	0	; () banked
  8593  0041F0  51A1               	movf	(___fladd@f1+2)& (0+255),w,b
  8594  0041F2  0100               	movlb	0	; () banked
  8595  0041F4  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8596  0041F6  0100               	movlb	0	; () banked
  8597  0041F8  51A2               	movf	(___fladd@f1+3)& (0+255),w,b
  8598  0041FA  0100               	movlb	0	; () banked
  8599  0041FC  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8600                           
  8601                           ; BSR set to: 0
  8602  0041FE  0100               	movlb	0	; () banked
  8603  004200  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  8604  004202  D014               	goto	l6082
  8605                           
  8606                           ; BSR set to: 0
  8607  004204  0EFF               	movlw	255
  8608  004206  0100               	movlb	0	; () banked
  8609  004208  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  8610  00420A  0EFF               	movlw	255
  8611  00420C  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  8612  00420E  0EFF               	movlw	255
  8613  004210  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  8614  004212  0EFF               	movlw	255
  8615  004214  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  8616  004216  0E01               	movlw	1
  8617  004218  0100               	movlb	0	; () banked
  8618  00421A  27A3               	addwf	___fladd@f2& (0+255),f,b
  8619  00421C  0E00               	movlw	0
  8620  00421E  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8621  004220  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8622  004222  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8623                           
  8624                           ; BSR set to: 0
  8625  004224  0E01               	movlw	1
  8626  004226  0100               	movlb	0	; () banked
  8627  004228  6FA8               	movwf	___fladd@sign& (0+255),b
  8628  00422A  D000               	goto	l6082
  8629  00422C                     l6082:
  8630                           
  8631                           ; BSR set to: 0
  8632  00422C  C0A3  F077         	movff	___fladd@f2,___flpack@arg
  8633  004230  C0A4  F078         	movff	___fladd@f2+1,___flpack@arg+1
  8634  004234  C0A5  F079         	movff	___fladd@f2+2,___flpack@arg+2
  8635  004238  C0A6  F07A         	movff	___fladd@f2+3,___flpack@arg+3
  8636  00423C  C0AA  F07B         	movff	___fladd@exp1,___flpack@exp
  8637  004240  C0A8  F07C         	movff	___fladd@sign,___flpack@sign
  8638  004244  EC67  F026         	call	___flpack	;wreg free
  8639  004248  C077  F09F         	movff	?___flpack,?___fladd
  8640  00424C  C078  F0A0         	movff	?___flpack+1,?___fladd+1
  8641  004250  C079  F0A1         	movff	?___flpack+2,?___fladd+2
  8642  004254  C07A  F0A2         	movff	?___flpack+3,?___fladd+3
  8643  004258  0012               	return	
  8644  00425A  0012               	return		;funcret
  8645  00425C                     __end_of___fladd:
  8646                           	opt stack 0
  8647                           tblptru	equ	0xFF8
  8648                           tblptrh	equ	0xFF7
  8649                           tblptrl	equ	0xFF6
  8650                           tablat	equ	0xFF5
  8651                           postinc0	equ	0xFEE
  8652                           wreg	equ	0xFE8
  8653                           postdec1	equ	0xFE5
  8654                           fsr1l	equ	0xFE1
  8655                           indf2	equ	0xFDF
  8656                           postinc2	equ	0xFDE
  8657                           postdec2	equ	0xFDD
  8658                           fsr2h	equ	0xFDA
  8659                           fsr2l	equ	0xFD9
  8660                           status	equ	0xFD8
  8661                           
  8662 ;; *************** function ___flge *****************
  8663 ;; Defined at:
  8664 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;  ff1             4   83[BANK0 ] unsigned char 
  8667 ;;  ff2             4   87[BANK0 ] unsigned char 
  8668 ;; Auto vars:     Size  Location     Type
  8669 ;;		None
  8670 ;; Return value:  Size  Location     Type
  8671 ;;		None               void
  8672 ;; Registers used:
  8673 ;;		wreg, status,2, status,0
  8674 ;; Tracked objects:
  8675 ;;		On entry : 0/0
  8676 ;;		On exit  : 0/0
  8677 ;;		Unchanged: 0/0
  8678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8679 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8681 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8682 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;Total ram usage:       12 bytes
  8684 ;; Hardware stack levels used:    1
  8685 ;; Hardware stack levels required when called:    5
  8686 ;; This function calls:
  8687 ;;		Nothing
  8688 ;; This function is called by:
  8689 ;;		_parallelo
  8690 ;;		_asin
  8691 ;;		_atan
  8692 ;;		_cos
  8693 ;;		_sin
  8694 ;;		_sqrt
  8695 ;;		_floor
  8696 ;; This function uses a non-reentrant model
  8697 ;;
  8698                           
  8699                           	psect	text25
  8700  005650                     __ptext25:
  8701                           	opt stack 0
  8702  005650                     ___flge:
  8703                           	opt stack 22
  8704                           
  8705                           ;incstack = 0
  8706  005650  0100               	movlb	0	; () banked
  8707  005652  AFB6               	btfss	(___flge@ff1+3)& (0+255),7,b
  8708  005654  D027               	goto	l6140
  8709                           
  8710                           ; BSR set to: 0
  8711  005656  C0B3  F0BB         	movff	___flge@ff1,??___flge
  8712  00565A  C0B4  F0BC         	movff	___flge@ff1+1,??___flge+1
  8713  00565E  C0B5  F0BD         	movff	___flge@ff1+2,??___flge+2
  8714  005662  C0B6  F0BE         	movff	___flge@ff1+3,??___flge+3
  8715  005666  0100               	movlb	0	; () banked
  8716  005668  1FBB               	comf	??___flge& (0+255),f,b
  8717  00566A  1FBC               	comf	(??___flge+1)& (0+255),f,b
  8718  00566C  1FBD               	comf	(??___flge+2)& (0+255),f,b
  8719  00566E  1FBE               	comf	(??___flge+3)& (0+255),f,b
  8720  005670  2BBB               	incf	??___flge& (0+255),f,b
  8721  005672  0E00               	movlw	0
  8722  005674  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  8723  005676  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  8724  005678  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  8725  00567A  0E00               	movlw	0
  8726  00567C  0100               	movlb	0	; () banked
  8727  00567E  25BB               	addwf	??___flge& (0+255),w,b
  8728  005680  0100               	movlb	0	; () banked
  8729  005682  6FB3               	movwf	___flge@ff1& (0+255),b
  8730  005684  0E00               	movlw	0
  8731  005686  0100               	movlb	0	; () banked
  8732  005688  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  8733  00568A  0100               	movlb	0	; () banked
  8734  00568C  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  8735  00568E  0E00               	movlw	0
  8736  005690  0100               	movlb	0	; () banked
  8737  005692  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  8738  005694  0100               	movlb	0	; () banked
  8739  005696  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  8740  005698  0E80               	movlw	128
  8741  00569A  0100               	movlb	0	; () banked
  8742  00569C  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  8743  00569E  0100               	movlb	0	; () banked
  8744  0056A0  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  8745  0056A2  D000               	goto	l6140
  8746  0056A4                     l6140:
  8747                           
  8748                           ; BSR set to: 0
  8749  0056A4  0100               	movlb	0	; () banked
  8750  0056A6  AFBA               	btfss	(___flge@ff2+3)& (0+255),7,b
  8751  0056A8  D026               	goto	l1192
  8752                           
  8753                           ; BSR set to: 0
  8754  0056AA  C0B7  F0BB         	movff	___flge@ff2,??___flge
  8755  0056AE  C0B8  F0BC         	movff	___flge@ff2+1,??___flge+1
  8756  0056B2  C0B9  F0BD         	movff	___flge@ff2+2,??___flge+2
  8757  0056B6  C0BA  F0BE         	movff	___flge@ff2+3,??___flge+3
  8758  0056BA  0100               	movlb	0	; () banked
  8759  0056BC  1FBB               	comf	??___flge& (0+255),f,b
  8760  0056BE  1FBC               	comf	(??___flge+1)& (0+255),f,b
  8761  0056C0  1FBD               	comf	(??___flge+2)& (0+255),f,b
  8762  0056C2  1FBE               	comf	(??___flge+3)& (0+255),f,b
  8763  0056C4  2BBB               	incf	??___flge& (0+255),f,b
  8764  0056C6  0E00               	movlw	0
  8765  0056C8  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  8766  0056CA  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  8767  0056CC  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  8768  0056CE  0E00               	movlw	0
  8769  0056D0  0100               	movlb	0	; () banked
  8770  0056D2  25BB               	addwf	??___flge& (0+255),w,b
  8771  0056D4  0100               	movlb	0	; () banked
  8772  0056D6  6FB7               	movwf	___flge@ff2& (0+255),b
  8773  0056D8  0E00               	movlw	0
  8774  0056DA  0100               	movlb	0	; () banked
  8775  0056DC  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  8776  0056DE  0100               	movlb	0	; () banked
  8777  0056E0  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  8778  0056E2  0E00               	movlw	0
  8779  0056E4  0100               	movlb	0	; () banked
  8780  0056E6  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  8781  0056E8  0100               	movlb	0	; () banked
  8782  0056EA  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  8783  0056EC  0E80               	movlw	128
  8784  0056EE  0100               	movlb	0	; () banked
  8785  0056F0  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  8786  0056F2  0100               	movlb	0	; () banked
  8787  0056F4  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  8788  0056F6                     l1192:
  8789                           
  8790                           ; BSR set to: 0
  8791  0056F6  0E00               	movlw	0
  8792  0056F8  0100               	movlb	0	; () banked
  8793  0056FA  1BB3               	xorwf	___flge@ff1& (0+255),f,b
  8794  0056FC  0E00               	movlw	0
  8795  0056FE  1BB4               	xorwf	(___flge@ff1+1)& (0+255),f,b
  8796  005700  0E00               	movlw	0
  8797  005702  1BB5               	xorwf	(___flge@ff1+2)& (0+255),f,b
  8798  005704  0E80               	movlw	128
  8799  005706  1BB6               	xorwf	(___flge@ff1+3)& (0+255),f,b
  8800  005708  0E00               	movlw	0
  8801  00570A  0100               	movlb	0	; () banked
  8802  00570C  1BB7               	xorwf	___flge@ff2& (0+255),f,b
  8803  00570E  0E00               	movlw	0
  8804  005710  1BB8               	xorwf	(___flge@ff2+1)& (0+255),f,b
  8805  005712  0E00               	movlw	0
  8806  005714  1BB9               	xorwf	(___flge@ff2+2)& (0+255),f,b
  8807  005716  0E80               	movlw	128
  8808  005718  1BBA               	xorwf	(___flge@ff2+3)& (0+255),f,b
  8809  00571A  0100               	movlb	0	; () banked
  8810  00571C  51B7               	movf	___flge@ff2& (0+255),w,b
  8811  00571E  0100               	movlb	0	; () banked
  8812  005720  5DB3               	subwf	___flge@ff1& (0+255),w,b
  8813  005722  0100               	movlb	0	; () banked
  8814  005724  51B8               	movf	(___flge@ff2+1)& (0+255),w,b
  8815  005726  0100               	movlb	0	; () banked
  8816  005728  59B4               	subwfb	(___flge@ff1+1)& (0+255),w,b
  8817  00572A  0100               	movlb	0	; () banked
  8818  00572C  51B9               	movf	(___flge@ff2+2)& (0+255),w,b
  8819  00572E  0100               	movlb	0	; () banked
  8820  005730  59B5               	subwfb	(___flge@ff1+2)& (0+255),w,b
  8821  005732  0100               	movlb	0	; () banked
  8822  005734  51BA               	movf	(___flge@ff2+3)& (0+255),w,b
  8823  005736  0100               	movlb	0	; () banked
  8824  005738  59B6               	subwfb	(___flge@ff1+3)& (0+255),w,b
  8825  00573A  B0D8               	btfsc	status,0,c
  8826  00573C  D002               	goto	l6146
  8827                           
  8828                           ; BSR set to: 0
  8829  00573E  90D8               	bcf	status,0,c
  8830  005740  0012               	return	
  8831  005742                     l6146:
  8832                           
  8833                           ; BSR set to: 0
  8834  005742  80D8               	bsf	status,0,c
  8835                           
  8836                           ; BSR set to: 0
  8837  005744  0012               	return	
  8838                           
  8839                           ; BSR set to: 0
  8840                           
  8841                           ; BSR set to: 0
  8842  005746  0012               	return		;funcret
  8843  005748                     __end_of___flge:
  8844                           	opt stack 0
  8845                           tblptru	equ	0xFF8
  8846                           tblptrh	equ	0xFF7
  8847                           tblptrl	equ	0xFF6
  8848                           tablat	equ	0xFF5
  8849                           postinc0	equ	0xFEE
  8850                           wreg	equ	0xFE8
  8851                           postdec1	equ	0xFE5
  8852                           fsr1l	equ	0xFE1
  8853                           indf2	equ	0xFDF
  8854                           postinc2	equ	0xFDE
  8855                           postdec2	equ	0xFDD
  8856                           fsr2h	equ	0xFDA
  8857                           fsr2l	equ	0xFD9
  8858                           status	equ	0xFD8
  8859                           
  8860 ;; *************** function ___fldiv *****************
  8861 ;; Defined at:
  8862 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  8863 ;; Parameters:    Size  Location     Type
  8864 ;;  f1              4   33[BANK0 ] unsigned char 
  8865 ;;  f2              4   37[BANK0 ] unsigned char 
  8866 ;; Auto vars:     Size  Location     Type
  8867 ;;  f3              4   41[BANK0 ] unsigned char 
  8868 ;;  sign            1   47[BANK0 ] unsigned char 
  8869 ;;  exp             1   46[BANK0 ] unsigned char 
  8870 ;;  cntr            1   45[BANK0 ] unsigned char 
  8871 ;; Return value:  Size  Location     Type
  8872 ;;                  4   33[BANK0 ] unsigned char 
  8873 ;; Registers used:
  8874 ;;		wreg, status,2, status,0, cstack
  8875 ;; Tracked objects:
  8876 ;;		On entry : 0/0
  8877 ;;		On exit  : 0/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8880 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8883 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8884 ;;Total ram usage:       15 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; Hardware stack levels required when called:    6
  8887 ;; This function calls:
  8888 ;;		___flpack
  8889 ;; This function is called by:
  8890 ;;		_parallelo
  8891 ;;		_matematica
  8892 ;;		_asin
  8893 ;;		_atan
  8894 ;;		_sin
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           	psect	text26
  8899  004FB2                     __ptext26:
  8900                           	opt stack 0
  8901  004FB2                     ___fldiv:
  8902                           	opt stack 20
  8903                           
  8904                           ; BSR set to: 0
  8905                           ;incstack = 0
  8906  004FB2  0100               	movlb	0	; () banked
  8907  004FB4  3583               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  8908  004FB6  3584               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  8909  004FB8  0100               	movlb	0	; () banked
  8910  004FBA  6F8E               	movwf	___fldiv@exp& (0+255),b
  8911  004FBC  0100               	movlb	0	; () banked
  8912  004FBE  518E               	movf	___fldiv@exp& (0+255),w,b
  8913  004FC0  A4D8               	btfss	status,2,c
  8914  004FC2  D00A               	goto	l6224
  8915                           
  8916                           ; BSR set to: 0
  8917  004FC4  0E00               	movlw	0
  8918  004FC6  0100               	movlb	0	; () banked
  8919  004FC8  6F81               	movwf	?___fldiv& (0+255),b
  8920  004FCA  0E00               	movlw	0
  8921  004FCC  6F82               	movwf	(?___fldiv+1)& (0+255),b
  8922  004FCE  0E00               	movlw	0
  8923  004FD0  6F83               	movwf	(?___fldiv+2)& (0+255),b
  8924  004FD2  0E00               	movlw	0
  8925  004FD4  6F84               	movwf	(?___fldiv+3)& (0+255),b
  8926                           
  8927                           ; BSR set to: 0
  8928  004FD6  0012               	return	
  8929  004FD8                     l6224:
  8930                           
  8931                           ; BSR set to: 0
  8932  004FD8  0100               	movlb	0	; () banked
  8933  004FDA  3587               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  8934  004FDC  3588               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  8935  004FDE  0100               	movlb	0	; () banked
  8936  004FE0  6F8F               	movwf	___fldiv@sign& (0+255),b
  8937  004FE2  0100               	movlb	0	; () banked
  8938  004FE4  518F               	movf	___fldiv@sign& (0+255),w,b
  8939  004FE6  A4D8               	btfss	status,2,c
  8940  004FE8  D00A               	goto	l6230
  8941                           
  8942                           ; BSR set to: 0
  8943  004FEA  0E00               	movlw	0
  8944  004FEC  0100               	movlb	0	; () banked
  8945  004FEE  6F81               	movwf	?___fldiv& (0+255),b
  8946  004FF0  0E00               	movlw	0
  8947  004FF2  6F82               	movwf	(?___fldiv+1)& (0+255),b
  8948  004FF4  0E00               	movlw	0
  8949  004FF6  6F83               	movwf	(?___fldiv+2)& (0+255),b
  8950  004FF8  0E00               	movlw	0
  8951  004FFA  6F84               	movwf	(?___fldiv+3)& (0+255),b
  8952                           
  8953                           ; BSR set to: 0
  8954  004FFC  0012               	return	
  8955  004FFE                     l6230:
  8956                           
  8957                           ; BSR set to: 0
  8958  004FFE  0100               	movlb	0	; () banked
  8959  005000  518F               	movf	___fldiv@sign& (0+255),w,b
  8960  005002  0F89               	addlw	137
  8961  005004  0100               	movlb	0	; () banked
  8962  005006  5F8E               	subwf	___fldiv@exp& (0+255),f,b
  8963                           
  8964                           ; BSR set to: 0
  8965  005008  C084  F08F         	movff	___fldiv@f1+3,___fldiv@sign
  8966  00500C  0100               	movlb	0	; () banked
  8967  00500E  5188               	movf	(___fldiv@f2+3)& (0+255),w,b
  8968  005010  0100               	movlb	0	; () banked
  8969  005012  1B8F               	xorwf	___fldiv@sign& (0+255),f,b
  8970  005014  0E80               	movlw	128
  8971  005016  0100               	movlb	0	; () banked
  8972  005018  178F               	andwf	___fldiv@sign& (0+255),f,b
  8973                           
  8974                           ; BSR set to: 0
  8975  00501A  0100               	movlb	0	; () banked
  8976  00501C  8F83               	bsf	(___fldiv@f1+2)& (0+255),7,b
  8977                           
  8978                           ; BSR set to: 0
  8979  00501E  0EFF               	movlw	255
  8980  005020  0100               	movlb	0	; () banked
  8981  005022  1781               	andwf	___fldiv@f1& (0+255),f,b
  8982  005024  0EFF               	movlw	255
  8983  005026  1782               	andwf	(___fldiv@f1+1)& (0+255),f,b
  8984  005028  0EFF               	movlw	255
  8985  00502A  1783               	andwf	(___fldiv@f1+2)& (0+255),f,b
  8986  00502C  0E00               	movlw	0
  8987  00502E  1784               	andwf	(___fldiv@f1+3)& (0+255),f,b
  8988  005030  0100               	movlb	0	; () banked
  8989  005032  8F87               	bsf	(___fldiv@f2+2)& (0+255),7,b
  8990                           
  8991                           ; BSR set to: 0
  8992  005034  0EFF               	movlw	255
  8993  005036  0100               	movlb	0	; () banked
  8994  005038  1785               	andwf	___fldiv@f2& (0+255),f,b
  8995  00503A  0EFF               	movlw	255
  8996  00503C  1786               	andwf	(___fldiv@f2+1)& (0+255),f,b
  8997  00503E  0EFF               	movlw	255
  8998  005040  1787               	andwf	(___fldiv@f2+2)& (0+255),f,b
  8999  005042  0E00               	movlw	0
  9000  005044  1788               	andwf	(___fldiv@f2+3)& (0+255),f,b
  9001                           
  9002                           ; BSR set to: 0
  9003  005046  0E20               	movlw	32
  9004  005048  0100               	movlb	0	; () banked
  9005  00504A  6F8D               	movwf	___fldiv@cntr& (0+255),b
  9006  00504C  D000               	goto	l6242
  9007  00504E                     l6242:
  9008                           
  9009                           ; BSR set to: 0
  9010  00504E  0100               	movlb	0	; () banked
  9011  005050  90D8               	bcf	status,0,c
  9012  005052  3789               	rlcf	___fldiv@f3& (0+255),f,b
  9013  005054  378A               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  9014  005056  378B               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  9015  005058  378C               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  9016                           
  9017                           ; BSR set to: 0
  9018  00505A  0100               	movlb	0	; () banked
  9019  00505C  5185               	movf	___fldiv@f2& (0+255),w,b
  9020  00505E  0100               	movlb	0	; () banked
  9021  005060  5D81               	subwf	___fldiv@f1& (0+255),w,b
  9022  005062  0100               	movlb	0	; () banked
  9023  005064  5186               	movf	(___fldiv@f2+1)& (0+255),w,b
  9024  005066  0100               	movlb	0	; () banked
  9025  005068  5982               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  9026  00506A  0100               	movlb	0	; () banked
  9027  00506C  5187               	movf	(___fldiv@f2+2)& (0+255),w,b
  9028  00506E  0100               	movlb	0	; () banked
  9029  005070  5983               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  9030  005072  0100               	movlb	0	; () banked
  9031  005074  5188               	movf	(___fldiv@f2+3)& (0+255),w,b
  9032  005076  0100               	movlb	0	; () banked
  9033  005078  5984               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  9034  00507A  A0D8               	btfss	status,0,c
  9035  00507C  D013               	goto	l6250
  9036                           
  9037                           ; BSR set to: 0
  9038  00507E  0100               	movlb	0	; () banked
  9039  005080  5185               	movf	___fldiv@f2& (0+255),w,b
  9040  005082  0100               	movlb	0	; () banked
  9041  005084  5F81               	subwf	___fldiv@f1& (0+255),f,b
  9042  005086  0100               	movlb	0	; () banked
  9043  005088  5186               	movf	(___fldiv@f2+1)& (0+255),w,b
  9044  00508A  0100               	movlb	0	; () banked
  9045  00508C  5B82               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  9046  00508E  0100               	movlb	0	; () banked
  9047  005090  5187               	movf	(___fldiv@f2+2)& (0+255),w,b
  9048  005092  0100               	movlb	0	; () banked
  9049  005094  5B83               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  9050  005096  0100               	movlb	0	; () banked
  9051  005098  5188               	movf	(___fldiv@f2+3)& (0+255),w,b
  9052  00509A  0100               	movlb	0	; () banked
  9053  00509C  5B84               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  9054                           
  9055                           ; BSR set to: 0
  9056  00509E  0100               	movlb	0	; () banked
  9057  0050A0  8189               	bsf	___fldiv@f3& (0+255),0,b
  9058  0050A2  D000               	goto	l6250
  9059  0050A4                     l6250:
  9060                           
  9061                           ; BSR set to: 0
  9062  0050A4  0100               	movlb	0	; () banked
  9063  0050A6  90D8               	bcf	status,0,c
  9064  0050A8  3781               	rlcf	___fldiv@f1& (0+255),f,b
  9065  0050AA  3782               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  9066  0050AC  3783               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  9067  0050AE  3784               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  9068                           
  9069                           ; BSR set to: 0
  9070  0050B0  0100               	movlb	0	; () banked
  9071  0050B2  2F8D               	decfsz	___fldiv@cntr& (0+255),f,b
  9072  0050B4  D7CC               	goto	l6242
  9073  0050B6  D000               	goto	l6254
  9074  0050B8                     l6254:
  9075                           
  9076                           ; BSR set to: 0
  9077  0050B8  C089  F077         	movff	___fldiv@f3,___flpack@arg
  9078  0050BC  C08A  F078         	movff	___fldiv@f3+1,___flpack@arg+1
  9079  0050C0  C08B  F079         	movff	___fldiv@f3+2,___flpack@arg+2
  9080  0050C4  C08C  F07A         	movff	___fldiv@f3+3,___flpack@arg+3
  9081  0050C8  C08E  F07B         	movff	___fldiv@exp,___flpack@exp
  9082  0050CC  C08F  F07C         	movff	___fldiv@sign,___flpack@sign
  9083  0050D0  EC67  F026         	call	___flpack	;wreg free
  9084  0050D4  C077  F081         	movff	?___flpack,?___fldiv
  9085  0050D8  C078  F082         	movff	?___flpack+1,?___fldiv+1
  9086  0050DC  C079  F083         	movff	?___flpack+2,?___fldiv+2
  9087  0050E0  C07A  F084         	movff	?___flpack+3,?___fldiv+3
  9088  0050E4  0012               	return	
  9089  0050E6  0012               	return		;funcret
  9090  0050E8                     __end_of___fldiv:
  9091                           	opt stack 0
  9092                           tblptru	equ	0xFF8
  9093                           tblptrh	equ	0xFF7
  9094                           tblptrl	equ	0xFF6
  9095                           tablat	equ	0xFF5
  9096                           postinc0	equ	0xFEE
  9097                           wreg	equ	0xFE8
  9098                           postdec1	equ	0xFE5
  9099                           fsr1l	equ	0xFE1
  9100                           indf2	equ	0xFDF
  9101                           postinc2	equ	0xFDE
  9102                           postdec2	equ	0xFDD
  9103                           fsr2h	equ	0xFDA
  9104                           fsr2l	equ	0xFD9
  9105                           status	equ	0xFD8
  9106                           
  9107 ;; *************** function _delay_s *****************
  9108 ;; Defined at:
  9109 ;;		line 102 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  9110 ;; Parameters:    Size  Location     Type
  9111 ;;  value_s         1    wreg     unsigned char 
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;  value_s         1   31[BANK0 ] unsigned char 
  9114 ;;  repeat_loop     1   32[BANK0 ] unsigned char 
  9115 ;; Return value:  Size  Location     Type
  9116 ;;		None               void
  9117 ;; Registers used:
  9118 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9119 ;; Tracked objects:
  9120 ;;		On entry : 0/0
  9121 ;;		On exit  : 0/0
  9122 ;;		Unchanged: 0/0
  9123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9125 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;Total ram usage:        2 bytes
  9129 ;; Hardware stack levels used:    1
  9130 ;; Hardware stack levels required when called:    7
  9131 ;; This function calls:
  9132 ;;		_delay_ms
  9133 ;; This function is called by:
  9134 ;;		_park_routine
  9135 ;; This function uses a non-reentrant model
  9136 ;;
  9137                           
  9138                           	psect	text27
  9139  005D5E                     __ptext27:
  9140                           	opt stack 0
  9141  005D5E                     _delay_s:
  9142                           	opt stack 22
  9143                           
  9144                           ;incstack = 0
  9145                           ;delay_s@value_s stored from wreg
  9146  005D5E  0100               	movlb	0	; () banked
  9147  005D60  6F7F               	movwf	delay_s@value_s& (0+255),b
  9148                           
  9149                           ; BSR set to: 0
  9150                           ;src\delay.c: 104: unsigned char repeat_loop;
  9151                           ;src\delay.c: 106: for (repeat_loop = 0; repeat_loop < value_s; repeat_loop++)
  9152  005D62  0E00               	movlw	0
  9153  005D64  0100               	movlb	0	; () banked
  9154  005D66  6F80               	movwf	delay_s@repeat_loop& (0+255),b
  9155  005D68  D00A               	goto	l5030
  9156  005D6A                     l5026:
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;src\delay.c: 107: delay_ms (1000);
  9160  005D6A  0E03               	movlw	3
  9161  005D6C  0100               	movlb	0	; () banked
  9162  005D6E  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  9163  005D70  0EE8               	movlw	232
  9164  005D72  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  9165  005D74  EC41  F02E         	call	_delay_ms	;wreg free
  9166  005D78  0100               	movlb	0	; () banked
  9167  005D7A  2B80               	incf	delay_s@repeat_loop& (0+255),f,b
  9168  005D7C  D000               	goto	l5030
  9169  005D7E                     l5030:
  9170                           
  9171                           ; BSR set to: 0
  9172  005D7E  0100               	movlb	0	; () banked
  9173  005D80  517F               	movf	delay_s@value_s& (0+255),w,b
  9174  005D82  0100               	movlb	0	; () banked
  9175  005D84  5D80               	subwf	delay_s@repeat_loop& (0+255),w,b
  9176  005D86  A0D8               	btfss	status,0,c
  9177  005D88  D7F0               	goto	l5026
  9178                           
  9179                           ; BSR set to: 0
  9180                           
  9181                           ; BSR set to: 0
  9182  005D8A  0012               	return		;funcret
  9183  005D8C                     __end_of_delay_s:
  9184                           	opt stack 0
  9185                           tblptru	equ	0xFF8
  9186                           tblptrh	equ	0xFF7
  9187                           tblptrl	equ	0xFF6
  9188                           tablat	equ	0xFF5
  9189                           postinc0	equ	0xFEE
  9190                           wreg	equ	0xFE8
  9191                           postdec1	equ	0xFE5
  9192                           fsr1l	equ	0xFE1
  9193                           indf2	equ	0xFDF
  9194                           postinc2	equ	0xFDE
  9195                           postdec2	equ	0xFDD
  9196                           fsr2h	equ	0xFDA
  9197                           fsr2l	equ	0xFD9
  9198                           status	equ	0xFD8
  9199                           
  9200 ;; *************** function _delay_ms *****************
  9201 ;; Defined at:
  9202 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  9203 ;; Parameters:    Size  Location     Type
  9204 ;;  value_ms        2   29[BANK0 ] unsigned int 
  9205 ;; Auto vars:     Size  Location     Type
  9206 ;;		None
  9207 ;; Return value:  Size  Location     Type
  9208 ;;		None               void
  9209 ;; Registers used:
  9210 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9211 ;; Tracked objects:
  9212 ;;		On entry : 0/0
  9213 ;;		On exit  : 0/0
  9214 ;;		Unchanged: 0/0
  9215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9216 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;Total ram usage:        2 bytes
  9221 ;; Hardware stack levels used:    1
  9222 ;; Hardware stack levels required when called:    6
  9223 ;; This function calls:
  9224 ;;		___wmul
  9225 ;; This function is called by:
  9226 ;;		_delay_s
  9227 ;;		_main
  9228 ;;		_park_routine
  9229 ;; This function uses a non-reentrant model
  9230 ;;
  9231                           
  9232                           	psect	text28
  9233  005C82                     __ptext28:
  9234                           	opt stack 0
  9235  005C82                     _delay_ms:
  9236                           	opt stack 22
  9237                           
  9238                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
  9239                           
  9240                           ; BSR set to: 0
  9241                           ;incstack = 0
  9242  005C82  C0E7  F077         	movff	_delay_quartz_frequency_value,___wmul@multiplier	;volatile
  9243  005C86  0100               	movlb	0	; () banked
  9244  005C88  6B78               	clrf	(___wmul@multiplier+1)& (0+255),b
  9245  005C8A  C07D  F079         	movff	delay_ms@value_ms,___wmul@multiplicand
  9246  005C8E  C07E  F07A         	movff	delay_ms@value_ms+1,___wmul@multiplicand+1
  9247  005C92  EC5E  F02E         	call	___wmul	;wreg free
  9248  005C96  C077  F0E3         	movff	?___wmul,_clock_counter_reference	;volatile
  9249  005C9A  C078  F0E4         	movff	?___wmul+1,_clock_counter_reference+1	;volatile
  9250                           
  9251                           ;src\delay.c: 75: while (clock_counter_reference) {
  9252  005C9E  D007               	goto	l567
  9253  005CA0                     l4872:
  9254                           
  9255                           ;src\delay.c: 85: _delay(240);
  9256  005CA0  0E50               	movlw	80
  9257  005CA2                     u8587:
  9258  005CA2  2EE8               	decfsz	wreg,f,c
  9259  005CA4  D7FE               	goto	u8587
  9260                           
  9261                           ;src\delay.c: 88: clock_counter_reference--;
  9262  005CA6  0100               	movlb	0	; () banked
  9263  005CA8  07E3               	decf	_clock_counter_reference& (0+255),f,b	;volatile
  9264  005CAA  A0D8               	btfss	status,0,c
  9265  005CAC  07E4               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
  9266  005CAE                     l567:
  9267  005CAE  0100               	movlb	0	; () banked
  9268  005CB0  51E3               	movf	_clock_counter_reference& (0+255),w,b	;volatile
  9269  005CB2  0100               	movlb	0	; () banked
  9270  005CB4  11E4               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
  9271  005CB6  A4D8               	btfss	status,2,c
  9272  005CB8  D7F3               	goto	l4872
  9273                           
  9274                           ; BSR set to: 0
  9275                           
  9276                           ; BSR set to: 0
  9277  005CBA  0012               	return		;funcret
  9278  005CBC                     __end_of_delay_ms:
  9279                           	opt stack 0
  9280                           tblptru	equ	0xFF8
  9281                           tblptrh	equ	0xFF7
  9282                           tblptrl	equ	0xFF6
  9283                           tablat	equ	0xFF5
  9284                           postinc0	equ	0xFEE
  9285                           wreg	equ	0xFE8
  9286                           postdec1	equ	0xFE5
  9287                           fsr1l	equ	0xFE1
  9288                           indf2	equ	0xFDF
  9289                           postinc2	equ	0xFDE
  9290                           postdec2	equ	0xFDD
  9291                           fsr2h	equ	0xFDA
  9292                           fsr2l	equ	0xFD9
  9293                           status	equ	0xFD8
  9294                           
  9295 ;; *************** function ___wmul *****************
  9296 ;; Defined at:
  9297 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9298 ;; Parameters:    Size  Location     Type
  9299 ;;  multiplier      2   23[BANK0 ] unsigned int 
  9300 ;;  multiplicand    2   25[BANK0 ] unsigned int 
  9301 ;; Auto vars:     Size  Location     Type
  9302 ;;  product         2   27[BANK0 ] unsigned int 
  9303 ;; Return value:  Size  Location     Type
  9304 ;;                  2   23[BANK0 ] unsigned int 
  9305 ;; Registers used:
  9306 ;;		wreg, status,2, status,0, prodl, prodh
  9307 ;; Tracked objects:
  9308 ;;		On entry : 0/0
  9309 ;;		On exit  : 0/0
  9310 ;;		Unchanged: 0/0
  9311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9312 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;Total ram usage:        6 bytes
  9317 ;; Hardware stack levels used:    1
  9318 ;; Hardware stack levels required when called:    5
  9319 ;; This function calls:
  9320 ;;		Nothing
  9321 ;; This function is called by:
  9322 ;;		_delay_ms
  9323 ;; This function uses a non-reentrant model
  9324 ;;
  9325                           
  9326                           	psect	text29
  9327  005CBC                     __ptext29:
  9328                           	opt stack 0
  9329  005CBC                     ___wmul:
  9330                           	opt stack 22
  9331                           
  9332                           ; BSR set to: 0
  9333                           ;incstack = 0
  9334  005CBC  0100               	movlb	0	; () banked
  9335  005CBE  5177               	movf	___wmul@multiplier& (0+255),w,b
  9336  005CC0  0100               	movlb	0	; () banked
  9337  005CC2  0379               	mulwf	___wmul@multiplicand& (0+255),b
  9338  005CC4  CFF3 F07B          	movff	prodl,___wmul@product
  9339  005CC8  CFF4 F07C          	movff	prodh,___wmul@product+1
  9340  005CCC  0100               	movlb	0	; () banked
  9341  005CCE  5177               	movf	___wmul@multiplier& (0+255),w,b
  9342  005CD0  0100               	movlb	0	; () banked
  9343  005CD2  037A               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9344  005CD4  50F3               	movf	prodl,w,c
  9345  005CD6  0100               	movlb	0	; () banked
  9346  005CD8  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  9347  005CDA  0100               	movlb	0	; () banked
  9348  005CDC  5178               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9349  005CDE  0100               	movlb	0	; () banked
  9350  005CE0  0379               	mulwf	___wmul@multiplicand& (0+255),b
  9351  005CE2  50F3               	movf	prodl,w,c
  9352  005CE4  0100               	movlb	0	; () banked
  9353  005CE6  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  9354                           
  9355                           ; BSR set to: 0
  9356  005CE8  C07B  F077         	movff	___wmul@product,?___wmul
  9357  005CEC  C07C  F078         	movff	___wmul@product+1,?___wmul+1
  9358  005CF0  0012               	return	
  9359                           
  9360                           ; BSR set to: 0
  9361                           
  9362                           ; BSR set to: 0
  9363  005CF2  0012               	return		;funcret
  9364  005CF4                     __end_of___wmul:
  9365                           	opt stack 0
  9366                           tblptru	equ	0xFF8
  9367                           tblptrh	equ	0xFF7
  9368                           tblptrl	equ	0xFF6
  9369                           tablat	equ	0xFF5
  9370                           prodh	equ	0xFF4
  9371                           prodl	equ	0xFF3
  9372                           postinc0	equ	0xFEE
  9373                           wreg	equ	0xFE8
  9374                           postdec1	equ	0xFE5
  9375                           fsr1l	equ	0xFE1
  9376                           indf2	equ	0xFDF
  9377                           postinc2	equ	0xFDE
  9378                           postdec2	equ	0xFDD
  9379                           fsr2h	equ	0xFDA
  9380                           fsr2l	equ	0xFD9
  9381                           status	equ	0xFD8
  9382                           
  9383 ;; *************** function ___lwtofl *****************
  9384 ;; Defined at:
  9385 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  9386 ;; Parameters:    Size  Location     Type
  9387 ;;  c               2   33[BANK0 ] unsigned int 
  9388 ;; Auto vars:     Size  Location     Type
  9389 ;;		None
  9390 ;; Return value:  Size  Location     Type
  9391 ;;                  4   33[BANK0 ] unsigned int 
  9392 ;; Registers used:
  9393 ;;		wreg, status,2, status,0, cstack
  9394 ;; Tracked objects:
  9395 ;;		On entry : 0/0
  9396 ;;		On exit  : 0/0
  9397 ;;		Unchanged: 0/0
  9398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9399 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9402 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9403 ;;Total ram usage:        4 bytes
  9404 ;; Hardware stack levels used:    1
  9405 ;; Hardware stack levels required when called:    6
  9406 ;; This function calls:
  9407 ;;		___flpack
  9408 ;; This function is called by:
  9409 ;;		_park_routine
  9410 ;; This function uses a non-reentrant model
  9411 ;;
  9412                           
  9413                           	psect	text30
  9414  005D2C                     __ptext30:
  9415                           	opt stack 0
  9416  005D2C                     ___lwtofl:
  9417                           	opt stack 23
  9418                           
  9419                           ; BSR set to: 0
  9420                           ;incstack = 0
  9421  005D2C  C081  F077         	movff	___lwtofl@c,___flpack@arg
  9422  005D30  C082  F078         	movff	___lwtofl@c+1,___flpack@arg+1
  9423  005D34  0100               	movlb	0	; () banked
  9424  005D36  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  9425  005D38  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  9426  005D3A  0E96               	movlw	150
  9427  005D3C  0100               	movlb	0	; () banked
  9428  005D3E  6F7B               	movwf	___flpack@exp& (0+255),b
  9429  005D40  0E00               	movlw	0
  9430  005D42  0100               	movlb	0	; () banked
  9431  005D44  6F7C               	movwf	___flpack@sign& (0+255),b
  9432  005D46  EC67  F026         	call	___flpack	;wreg free
  9433  005D4A  C077  F081         	movff	?___flpack,?___lwtofl
  9434  005D4E  C078  F082         	movff	?___flpack+1,?___lwtofl+1
  9435  005D52  C079  F083         	movff	?___flpack+2,?___lwtofl+2
  9436  005D56  C07A  F084         	movff	?___flpack+3,?___lwtofl+3
  9437  005D5A  0012               	return	
  9438  005D5C  0012               	return		;funcret
  9439  005D5E                     __end_of___lwtofl:
  9440                           	opt stack 0
  9441                           tblptru	equ	0xFF8
  9442                           tblptrh	equ	0xFF7
  9443                           tblptrl	equ	0xFF6
  9444                           tablat	equ	0xFF5
  9445                           prodh	equ	0xFF4
  9446                           prodl	equ	0xFF3
  9447                           postinc0	equ	0xFEE
  9448                           wreg	equ	0xFE8
  9449                           postdec1	equ	0xFE5
  9450                           fsr1l	equ	0xFE1
  9451                           indf2	equ	0xFDF
  9452                           postinc2	equ	0xFDE
  9453                           postdec2	equ	0xFDD
  9454                           fsr2h	equ	0xFDA
  9455                           fsr2l	equ	0xFD9
  9456                           status	equ	0xFD8
  9457                           
  9458 ;; *************** function ___flpack *****************
  9459 ;; Defined at:
  9460 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  9461 ;; Parameters:    Size  Location     Type
  9462 ;;  arg             4   23[BANK0 ] unsigned long 
  9463 ;;  exp             1   27[BANK0 ] unsigned char 
  9464 ;;  sign            1   28[BANK0 ] unsigned char 
  9465 ;; Auto vars:     Size  Location     Type
  9466 ;;		None
  9467 ;; Return value:  Size  Location     Type
  9468 ;;                  4   23[BANK0 ] unsigned char 
  9469 ;; Registers used:
  9470 ;;		wreg, status,2, status,0
  9471 ;; Tracked objects:
  9472 ;;		On entry : 0/0
  9473 ;;		On exit  : 0/0
  9474 ;;		Unchanged: 0/0
  9475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9476 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;Total ram usage:       10 bytes
  9481 ;; Hardware stack levels used:    1
  9482 ;; Hardware stack levels required when called:    5
  9483 ;; This function calls:
  9484 ;;		Nothing
  9485 ;; This function is called by:
  9486 ;;		___altofl
  9487 ;;		___awtofl
  9488 ;;		___fladd
  9489 ;;		___fldiv
  9490 ;;		___flmul
  9491 ;;		___lwtofl
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text31
  9496  004CCE                     __ptext31:
  9497                           	opt stack 0
  9498  004CCE                     ___flpack:
  9499                           	opt stack 20
  9500                           
  9501                           ;incstack = 0
  9502  004CCE  0100               	movlb	0	; () banked
  9503  004CD0  517B               	movf	___flpack@exp& (0+255),w,b
  9504  004CD2  0100               	movlb	0	; () banked
  9505  004CD4  B4D8               	btfsc	status,2,c
  9506  004CD6  D00A               	goto	l5976
  9507                           
  9508                           ; BSR set to: 0
  9509  004CD8  0100               	movlb	0	; () banked
  9510  004CDA  5177               	movf	___flpack@arg& (0+255),w,b
  9511  004CDC  0100               	movlb	0	; () banked
  9512  004CDE  1178               	iorwf	(___flpack@arg+1)& (0+255),w,b
  9513  004CE0  0100               	movlb	0	; () banked
  9514  004CE2  1179               	iorwf	(___flpack@arg+2)& (0+255),w,b
  9515  004CE4  0100               	movlb	0	; () banked
  9516  004CE6  117A               	iorwf	(___flpack@arg+3)& (0+255),w,b
  9517  004CE8  A4D8               	btfss	status,2,c
  9518  004CEA  D014               	goto	l5982
  9519  004CEC                     l5976:
  9520                           
  9521                           ; BSR set to: 0
  9522  004CEC  0E00               	movlw	0
  9523  004CEE  0100               	movlb	0	; () banked
  9524  004CF0  6F77               	movwf	?___flpack& (0+255),b
  9525  004CF2  0E00               	movlw	0
  9526  004CF4  6F78               	movwf	(?___flpack+1)& (0+255),b
  9527  004CF6  0E00               	movlw	0
  9528  004CF8  6F79               	movwf	(?___flpack+2)& (0+255),b
  9529  004CFA  0E00               	movlw	0
  9530  004CFC  6F7A               	movwf	(?___flpack+3)& (0+255),b
  9531                           
  9532                           ; BSR set to: 0
  9533  004CFE  0012               	return	
  9534                           
  9535                           ; BSR set to: 0
  9536  004D00  D009               	goto	l5982
  9537  004D02                     l5980:
  9538                           
  9539                           ; BSR set to: 0
  9540  004D02  0100               	movlb	0	; () banked
  9541  004D04  2B7B               	incf	___flpack@exp& (0+255),f,b
  9542  004D06  0100               	movlb	0	; () banked
  9543  004D08  90D8               	bcf	status,0,c
  9544  004D0A  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
  9545  004D0C  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
  9546  004D0E  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
  9547  004D10  3377               	rrcf	___flpack@arg& (0+255),f,b
  9548  004D12  D000               	goto	l5982
  9549  004D14                     l5982:
  9550                           
  9551                           ; BSR set to: 0
  9552  004D14  0E00               	movlw	0
  9553  004D16  0100               	movlb	0	; () banked
  9554  004D18  1577               	andwf	___flpack@arg& (0+255),w,b
  9555  004D1A  0100               	movlb	0	; () banked
  9556  004D1C  6F7D               	movwf	??___flpack& (0+255),b
  9557  004D1E  0E00               	movlw	0
  9558  004D20  0100               	movlb	0	; () banked
  9559  004D22  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
  9560  004D24  0100               	movlb	0	; () banked
  9561  004D26  6F7E               	movwf	(??___flpack+1)& (0+255),b
  9562  004D28  0E00               	movlw	0
  9563  004D2A  0100               	movlb	0	; () banked
  9564  004D2C  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
  9565  004D2E  0100               	movlb	0	; () banked
  9566  004D30  6F7F               	movwf	(??___flpack+2)& (0+255),b
  9567  004D32  0EFE               	movlw	254
  9568  004D34  0100               	movlb	0	; () banked
  9569  004D36  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
  9570  004D38  0100               	movlb	0	; () banked
  9571  004D3A  6F80               	movwf	(??___flpack+3)& (0+255),b
  9572  004D3C  0100               	movlb	0	; () banked
  9573  004D3E  517D               	movf	??___flpack& (0+255),w,b
  9574  004D40  0100               	movlb	0	; () banked
  9575  004D42  117E               	iorwf	(??___flpack+1)& (0+255),w,b
  9576  004D44  0100               	movlb	0	; () banked
  9577  004D46  117F               	iorwf	(??___flpack+2)& (0+255),w,b
  9578  004D48  0100               	movlb	0	; () banked
  9579  004D4A  1180               	iorwf	(??___flpack+3)& (0+255),w,b
  9580  004D4C  B4D8               	btfsc	status,2,c
  9581  004D4E  D011               	goto	l1124
  9582  004D50  D7D8               	goto	l5980
  9583                           
  9584                           ; BSR set to: 0
  9585  004D52  D00F               	goto	l1124
  9586  004D54                     l5984:
  9587                           
  9588                           ; BSR set to: 0
  9589  004D54  0100               	movlb	0	; () banked
  9590  004D56  2B7B               	incf	___flpack@exp& (0+255),f,b
  9591                           
  9592                           ; BSR set to: 0
  9593  004D58  0E01               	movlw	1
  9594  004D5A  0100               	movlb	0	; () banked
  9595  004D5C  2777               	addwf	___flpack@arg& (0+255),f,b
  9596  004D5E  0E00               	movlw	0
  9597  004D60  2378               	addwfc	(___flpack@arg+1)& (0+255),f,b
  9598  004D62  2379               	addwfc	(___flpack@arg+2)& (0+255),f,b
  9599  004D64  237A               	addwfc	(___flpack@arg+3)& (0+255),f,b
  9600                           
  9601                           ; BSR set to: 0
  9602  004D66  0100               	movlb	0	; () banked
  9603  004D68  90D8               	bcf	status,0,c
  9604  004D6A  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
  9605  004D6C  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
  9606  004D6E  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
  9607  004D70  3377               	rrcf	___flpack@arg& (0+255),f,b
  9608  004D72                     l1124:
  9609                           
  9610                           ; BSR set to: 0
  9611  004D72  0E00               	movlw	0
  9612  004D74  0100               	movlb	0	; () banked
  9613  004D76  1577               	andwf	___flpack@arg& (0+255),w,b
  9614  004D78  0100               	movlb	0	; () banked
  9615  004D7A  6F7D               	movwf	??___flpack& (0+255),b
  9616  004D7C  0E00               	movlw	0
  9617  004D7E  0100               	movlb	0	; () banked
  9618  004D80  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
  9619  004D82  0100               	movlb	0	; () banked
  9620  004D84  6F7E               	movwf	(??___flpack+1)& (0+255),b
  9621  004D86  0E00               	movlw	0
  9622  004D88  0100               	movlb	0	; () banked
  9623  004D8A  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
  9624  004D8C  0100               	movlb	0	; () banked
  9625  004D8E  6F7F               	movwf	(??___flpack+2)& (0+255),b
  9626  004D90  0EFF               	movlw	255
  9627  004D92  0100               	movlb	0	; () banked
  9628  004D94  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
  9629  004D96  0100               	movlb	0	; () banked
  9630  004D98  6F80               	movwf	(??___flpack+3)& (0+255),b
  9631  004D9A  0100               	movlb	0	; () banked
  9632  004D9C  517D               	movf	??___flpack& (0+255),w,b
  9633  004D9E  0100               	movlb	0	; () banked
  9634  004DA0  117E               	iorwf	(??___flpack+1)& (0+255),w,b
  9635  004DA2  0100               	movlb	0	; () banked
  9636  004DA4  117F               	iorwf	(??___flpack+2)& (0+255),w,b
  9637  004DA6  0100               	movlb	0	; () banked
  9638  004DA8  1180               	iorwf	(??___flpack+3)& (0+255),w,b
  9639  004DAA  B4D8               	btfsc	status,2,c
  9640  004DAC  D00B               	goto	l5992
  9641  004DAE  D7D2               	goto	l5984
  9642                           
  9643                           ; BSR set to: 0
  9644  004DB0  D009               	goto	l5992
  9645  004DB2                     l5990:
  9646                           
  9647                           ; BSR set to: 0
  9648  004DB2  0100               	movlb	0	; () banked
  9649  004DB4  077B               	decf	___flpack@exp& (0+255),f,b
  9650  004DB6  0100               	movlb	0	; () banked
  9651  004DB8  90D8               	bcf	status,0,c
  9652  004DBA  3777               	rlcf	___flpack@arg& (0+255),f,b
  9653  004DBC  3778               	rlcf	(___flpack@arg+1)& (0+255),f,b
  9654  004DBE  3779               	rlcf	(___flpack@arg+2)& (0+255),f,b
  9655  004DC0  377A               	rlcf	(___flpack@arg+3)& (0+255),f,b
  9656  004DC2  D000               	goto	l5992
  9657  004DC4                     l5992:
  9658                           
  9659                           ; BSR set to: 0
  9660  004DC4  0100               	movlb	0	; () banked
  9661  004DC6  BF79               	btfsc	(___flpack@arg+2)& (0+255),7,b
  9662  004DC8  D005               	goto	l1131
  9663                           
  9664                           ; BSR set to: 0
  9665  004DCA  0E02               	movlw	2
  9666  004DCC  0100               	movlb	0	; () banked
  9667  004DCE  617B               	cpfslt	___flpack@exp& (0+255),b
  9668  004DD0  D7F0               	goto	l5990
  9669  004DD2  D000               	goto	l1131
  9670  004DD4                     l1131:
  9671                           
  9672                           ; BSR set to: 0
  9673  004DD4  0100               	movlb	0	; () banked
  9674  004DD6  B17B               	btfsc	___flpack@exp& (0+255),0,b
  9675  004DD8  D009               	goto	l1132
  9676                           
  9677                           ; BSR set to: 0
  9678  004DDA  0EFF               	movlw	255
  9679  004DDC  0100               	movlb	0	; () banked
  9680  004DDE  1777               	andwf	___flpack@arg& (0+255),f,b
  9681  004DE0  0EFF               	movlw	255
  9682  004DE2  1778               	andwf	(___flpack@arg+1)& (0+255),f,b
  9683  004DE4  0E7F               	movlw	127
  9684  004DE6  1779               	andwf	(___flpack@arg+2)& (0+255),f,b
  9685  004DE8  0EFF               	movlw	255
  9686  004DEA  177A               	andwf	(___flpack@arg+3)& (0+255),f,b
  9687  004DEC                     l1132:
  9688                           
  9689                           ; BSR set to: 0
  9690  004DEC  0100               	movlb	0	; () banked
  9691  004DEE  90D8               	bcf	status,0,c
  9692  004DF0  337B               	rrcf	___flpack@exp& (0+255),f,b
  9693  004DF2  C07B  F07D         	movff	___flpack@exp,??___flpack
  9694  004DF6  0100               	movlb	0	; () banked
  9695  004DF8  6B7E               	clrf	(??___flpack+1)& (0+255),b
  9696  004DFA  6B7F               	clrf	(??___flpack+2)& (0+255),b
  9697  004DFC  6B80               	clrf	(??___flpack+3)& (0+255),b
  9698  004DFE  C07D  F080         	movff	??___flpack,??___flpack+3
  9699  004E02  0100               	movlb	0	; () banked
  9700  004E04  6B7F               	clrf	(??___flpack+2)& (0+255),b
  9701  004E06  6B7E               	clrf	(??___flpack+1)& (0+255),b
  9702  004E08  6B7D               	clrf	??___flpack& (0+255),b
  9703  004E0A  0100               	movlb	0	; () banked
  9704  004E0C  517D               	movf	??___flpack& (0+255),w,b
  9705  004E0E  0100               	movlb	0	; () banked
  9706  004E10  1377               	iorwf	___flpack@arg& (0+255),f,b
  9707  004E12  0100               	movlb	0	; () banked
  9708  004E14  517E               	movf	(??___flpack+1)& (0+255),w,b
  9709  004E16  0100               	movlb	0	; () banked
  9710  004E18  1378               	iorwf	(___flpack@arg+1)& (0+255),f,b
  9711  004E1A  0100               	movlb	0	; () banked
  9712  004E1C  517F               	movf	(??___flpack+2)& (0+255),w,b
  9713  004E1E  0100               	movlb	0	; () banked
  9714  004E20  1379               	iorwf	(___flpack@arg+2)& (0+255),f,b
  9715  004E22  0100               	movlb	0	; () banked
  9716  004E24  5180               	movf	(??___flpack+3)& (0+255),w,b
  9717  004E26  0100               	movlb	0	; () banked
  9718  004E28  137A               	iorwf	(___flpack@arg+3)& (0+255),f,b
  9719                           
  9720                           ; BSR set to: 0
  9721  004E2A  0100               	movlb	0	; () banked
  9722  004E2C  517C               	movf	___flpack@sign& (0+255),w,b
  9723  004E2E  0100               	movlb	0	; () banked
  9724  004E30  B4D8               	btfsc	status,2,c
  9725  004E32  D003               	goto	l6002
  9726                           
  9727                           ; BSR set to: 0
  9728  004E34  0100               	movlb	0	; () banked
  9729  004E36  8F7A               	bsf	(___flpack@arg+3)& (0+255),7,b
  9730  004E38  D000               	goto	l6002
  9731  004E3A                     l6002:
  9732                           
  9733                           ; BSR set to: 0
  9734  004E3A  C077  F077         	movff	___flpack@arg,?___flpack
  9735  004E3E  C078  F078         	movff	___flpack@arg+1,?___flpack+1
  9736  004E42  C079  F079         	movff	___flpack@arg+2,?___flpack+2
  9737  004E46  C07A  F07A         	movff	___flpack@arg+3,?___flpack+3
  9738  004E4A  0012               	return	
  9739                           
  9740                           ; BSR set to: 0
  9741                           
  9742                           ; BSR set to: 0
  9743  004E4C  0012               	return		;funcret
  9744  004E4E                     __end_of___flpack:
  9745                           	opt stack 0
  9746                           tblptru	equ	0xFF8
  9747                           tblptrh	equ	0xFF7
  9748                           tblptrl	equ	0xFF6
  9749                           tablat	equ	0xFF5
  9750                           prodh	equ	0xFF4
  9751                           prodl	equ	0xFF3
  9752                           postinc0	equ	0xFEE
  9753                           wreg	equ	0xFE8
  9754                           postdec1	equ	0xFE5
  9755                           fsr1l	equ	0xFE1
  9756                           indf2	equ	0xFDF
  9757                           postinc2	equ	0xFDE
  9758                           postdec2	equ	0xFDD
  9759                           fsr2h	equ	0xFDA
  9760                           fsr2l	equ	0xFD9
  9761                           status	equ	0xFD8
  9762                           
  9763 ;; *************** function _configurations *****************
  9764 ;; Defined at:
  9765 ;;		line 513 in file "parcheggio.c"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;		None
  9768 ;; Auto vars:     Size  Location     Type
  9769 ;;		None
  9770 ;; Return value:  Size  Location     Type
  9771 ;;		None               void
  9772 ;; Registers used:
  9773 ;;		wreg, status,2, status,0, cstack
  9774 ;; Tracked objects:
  9775 ;;		On entry : 0/0
  9776 ;;		On exit  : 0/0
  9777 ;;		Unchanged: 0/0
  9778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;Total ram usage:        0 bytes
  9784 ;; Hardware stack levels used:    1
  9785 ;; Hardware stack levels required when called:    7
  9786 ;; This function calls:
  9787 ;;		_CANInitialize
  9788 ;; This function is called by:
  9789 ;;		_main
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           	psect	text32
  9794  005A98                     __ptext32:
  9795                           	opt stack 0
  9796  005A98                     _configurations:
  9797                           	opt stack 23
  9798                           
  9799                           ;parcheggio.c: 514: LATA = 0x00;
  9800                           
  9801                           ; BSR set to: 0
  9802                           ;incstack = 0
  9803  005A98  0E00               	movlw	0
  9804  005A9A  6E89               	movwf	3977,c	;volatile
  9805                           
  9806                           ;parcheggio.c: 515: TRISA = 0b11110000;
  9807  005A9C  0EF0               	movlw	240
  9808  005A9E  6E92               	movwf	3986,c	;volatile
  9809                           
  9810                           ;parcheggio.c: 516: LATB = 0x00;
  9811  005AA0  0E00               	movlw	0
  9812  005AA2  6E8A               	movwf	3978,c	;volatile
  9813                           
  9814                           ;parcheggio.c: 517: TRISB = 0b10001010;
  9815  005AA4  0E8A               	movlw	138
  9816  005AA6  6E93               	movwf	3987,c	;volatile
  9817                           
  9818                           ;parcheggio.c: 518: LATC = 0x00;
  9819  005AA8  0E00               	movlw	0
  9820  005AAA  6E8B               	movwf	3979,c	;volatile
  9821                           
  9822                           ;parcheggio.c: 519: TRISC = 0b11111111;
  9823  005AAC  6894               	setf	3988,c	;volatile
  9824                           
  9825                           ;parcheggio.c: 521: ADCON1 = 0xFF;
  9826  005AAE  68C1               	setf	4033,c	;volatile
  9827                           
  9828                           ;parcheggio.c: 522: CANInitialize(4, 6, 5, 1, 3, CAN_CONFIG_LINE_FILTER_OFF & CAN_CONFIG
      +                          _SAMPLE_ONCE & CAN_CONFIG_ALL_VALID_MSG & CAN_CONFIG_DBL_BUFFER_ON);
  9829  005AB0  0E06               	movlw	6
  9830  005AB2  0100               	movlb	0	; () banked
  9831  005AB4  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
  9832  005AB6  0E05               	movlw	5
  9833  005AB8  0100               	movlb	0	; () banked
  9834  005ABA  6F86               	movwf	CANInitialize@phaseSeg2& (0+255),b
  9835  005ABC  0E01               	movlw	1
  9836  005ABE  0100               	movlb	0	; () banked
  9837  005AC0  6F87               	movwf	CANInitialize@SJW& (0+255),b
  9838  005AC2  0E03               	movlw	3
  9839  005AC4  0100               	movlb	0	; () banked
  9840  005AC6  6F88               	movwf	CANInitialize@BRP& (0+255),b
  9841  005AC8  0E9D               	movlw	157
  9842  005ACA  0100               	movlb	0	; () banked
  9843  005ACC  6F89               	movwf	CANInitialize@flags& (0+255),b
  9844  005ACE  0E04               	movlw	4
  9845  005AD0  EC9B  F024         	call	_CANInitialize
  9846                           
  9847                           ;parcheggio.c: 525: RCONbits.IPEN = 1;
  9848  005AD4  8ED0               	bsf	4048,7,c	;volatile
  9849                           
  9850                           ;parcheggio.c: 526: IPR3bits.RXB1IP = 0;
  9851  005AD6  92A5               	bcf	4005,1,c	;volatile
  9852                           
  9853                           ;parcheggio.c: 527: IPR3bits.RXB0IP = 0;
  9854  005AD8  90A5               	bcf	4005,0,c	;volatile
  9855                           
  9856                           ;parcheggio.c: 528: INTCON2bits.TMR0IP = 0;
  9857  005ADA  94F1               	bcf	intcon2,2,c	;volatile
  9858                           
  9859                           ;parcheggio.c: 531: PIR3bits.RXB1IF = 0;
  9860  005ADC  92A4               	bcf	4004,1,c	;volatile
  9861                           
  9862                           ;parcheggio.c: 532: PIR3bits.RXB0IF = 0;
  9863  005ADE  90A4               	bcf	4004,0,c	;volatile
  9864                           
  9865                           ;parcheggio.c: 533: INTCONbits.INT0IF = 0;
  9866  005AE0  92F2               	bcf	intcon,1,c	;volatile
  9867                           
  9868                           ;parcheggio.c: 534: INTCONbits.TMR0IF = 0;
  9869  005AE2  94F2               	bcf	intcon,2,c	;volatile
  9870                           
  9871                           ;parcheggio.c: 538: PIE3bits.RXB1IE = 1;
  9872  005AE4  82A3               	bsf	4003,1,c	;volatile
  9873                           
  9874                           ;parcheggio.c: 539: PIE3bits.RXB0IE = 1;
  9875  005AE6  80A3               	bsf	4003,0,c	;volatile
  9876                           
  9877                           ;parcheggio.c: 540: INTCONbits.TMR0IE = 1;
  9878  005AE8  8AF2               	bsf	intcon,5,c	;volatile
  9879                           
  9880                           ;parcheggio.c: 541: INTCONbits.INT0IE = 0;
  9881  005AEA  98F2               	bcf	intcon,4,c	;volatile
  9882                           
  9883                           ;parcheggio.c: 544: T0CON = 0x80;
  9884  005AEC  0E80               	movlw	128
  9885  005AEE  6ED5               	movwf	4053,c	;volatile
  9886                           
  9887                           ;parcheggio.c: 545: TMR0H = 0x34;
  9888  005AF0  0E34               	movlw	52
  9889  005AF2  6ED7               	movwf	4055,c	;volatile
  9890                           
  9891                           ;parcheggio.c: 546: TMR0L = 0xE0;
  9892  005AF4  0EE0               	movlw	224
  9893  005AF6  6ED6               	movwf	4054,c	;volatile
  9894                           
  9895                           ;parcheggio.c: 547: T3CON = 0x11;
  9896  005AF8  0E11               	movlw	17
  9897  005AFA  6EB1               	movwf	4017,c	;volatile
  9898                           
  9899                           ;parcheggio.c: 549: INTCON2bits.INTEDG0 = 1;
  9900  005AFC  8CF1               	bsf	intcon2,6,c	;volatile
  9901                           
  9902                           ;parcheggio.c: 550: INTCONbits.GIEL = 1;
  9903  005AFE  8CF2               	bsf	intcon,6,c	;volatile
  9904                           
  9905                           ;parcheggio.c: 551: INTCONbits.GIEH = 1;
  9906  005B00  8EF2               	bsf	intcon,7,c	;volatile
  9907  005B02  0012               	return		;funcret
  9908  005B04                     __end_of_configurations:
  9909                           	opt stack 0
  9910                           tblptru	equ	0xFF8
  9911                           tblptrh	equ	0xFF7
  9912                           tblptrl	equ	0xFF6
  9913                           tablat	equ	0xFF5
  9914                           prodh	equ	0xFF4
  9915                           prodl	equ	0xFF3
  9916                           intcon	equ	0xFF2
  9917                           intcon2	equ	0xFF1
  9918                           postinc0	equ	0xFEE
  9919                           wreg	equ	0xFE8
  9920                           postdec1	equ	0xFE5
  9921                           fsr1l	equ	0xFE1
  9922                           indf2	equ	0xFDF
  9923                           postinc2	equ	0xFDE
  9924                           postdec2	equ	0xFDD
  9925                           fsr2h	equ	0xFDA
  9926                           fsr2l	equ	0xFD9
  9927                           status	equ	0xFD8
  9928                           
  9929 ;; *************** function _CANInitialize *****************
  9930 ;; Defined at:
  9931 ;;		line 218 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  9932 ;; Parameters:    Size  Location     Type
  9933 ;;  propSeg         1    wreg     unsigned char 
  9934 ;;  phaseSeg1       1   37[BANK0 ] unsigned char 
  9935 ;;  phaseSeg2       1   38[BANK0 ] unsigned char 
  9936 ;;  SJW             1   39[BANK0 ] unsigned char 
  9937 ;;  BRP             1   40[BANK0 ] unsigned char 
  9938 ;;  flags           1   41[BANK0 ] enum E16354
  9939 ;; Auto vars:     Size  Location     Type
  9940 ;;  propSeg         1   46[BANK0 ] unsigned char 
  9941 ;;  FilterConfig    1   48[BANK0 ] unsigned char 
  9942 ;;  FilterConfig    1   47[BANK0 ] unsigned char 
  9943 ;; Return value:  Size  Location     Type
  9944 ;;		None               void
  9945 ;; Registers used:
  9946 ;;		wreg, status,2, status,0, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9952 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;Total ram usage:       12 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    6
  9959 ;; This function calls:
  9960 ;;		_CANOperationMode
  9961 ;;		_CANSetFilter
  9962 ;;		_CANSetMask
  9963 ;; This function is called by:
  9964 ;;		_configurations
  9965 ;; This function uses a non-reentrant model
  9966 ;;
  9967                           
  9968                           	psect	text33
  9969  004936                     __ptext33:
  9970                           	opt stack 0
  9971  004936                     _CANInitialize:
  9972                           	opt stack 23
  9973                           
  9974                           ;incstack = 0
  9975                           ;CANInitialize@propSeg stored from wreg
  9976  004936  0100               	movlb	0	; () banked
  9977  004938  6F8E               	movwf	CANInitialize@propSeg& (0+255),b
  9978                           
  9979                           ; BSR set to: 0
  9980                           ;inc\CANlib.h: 220: BYTE FilterConfig1;
  9981                           ;inc\CANlib.h: 221: BYTE FilterConfig2;
  9982                           ;inc\CANlib.h: 223: CANOperationMode(CAN_OP_MODE_CONFIG);
  9983  00493A  0E80               	movlw	128
  9984  00493C  EC03  F02F         	call	_CANOperationMode
  9985                           
  9986                           ;inc\CANlib.h: 225: BRGCON1 = 0x00;
  9987  004940  0E00               	movlw	0
  9988  004942  6E70               	movwf	3952,c	;volatile
  9989                           
  9990                           ;inc\CANlib.h: 226: BRGCON2 = 0x00;
  9991  004944  0E00               	movlw	0
  9992  004946  6E71               	movwf	3953,c	;volatile
  9993                           
  9994                           ;inc\CANlib.h: 227: BRGCON3 = 0x00;
  9995  004948  0E00               	movlw	0
  9996  00494A  6E72               	movwf	3954,c	;volatile
  9997                           
  9998                           ;inc\CANlib.h: 229: SJW= SJW << 6;
  9999  00494C  0100               	movlb	0	; () banked
 10000  00494E  4187               	rrncf	CANInitialize@SJW& (0+255),w,b
 10001  004950  42E8               	rrncf	wreg,f,c
 10002  004952  0BC0               	andlw	192
 10003  004954  0100               	movlb	0	; () banked
 10004  004956  6F87               	movwf	CANInitialize@SJW& (0+255),b
 10005                           
 10006                           ; BSR set to: 0
 10007                           ;inc\CANlib.h: 230: BRGCON1 |= SJW;
 10008  004958  0100               	movlb	0	; () banked
 10009  00495A  5187               	movf	CANInitialize@SJW& (0+255),w,b
 10010  00495C  1270               	iorwf	3952,f,c	;volatile
 10011                           
 10012                           ; BSR set to: 0
 10013                           ;inc\CANlib.h: 231: BRGCON1 |= BRP;
 10014  00495E  0100               	movlb	0	; () banked
 10015  004960  5188               	movf	CANInitialize@BRP& (0+255),w,b
 10016  004962  1270               	iorwf	3952,f,c	;volatile
 10017                           
 10018                           ; BSR set to: 0
 10019                           ;inc\CANlib.h: 233: BRGCON2 |= propSeg;
 10020  004964  0100               	movlb	0	; () banked
 10021  004966  518E               	movf	CANInitialize@propSeg& (0+255),w,b
 10022  004968  1271               	iorwf	3953,f,c	;volatile
 10023                           
 10024                           ; BSR set to: 0
 10025                           ;inc\CANlib.h: 234: phaseSeg1 = phaseSeg1 <<3;
 10026  00496A  0100               	movlb	0	; () banked
 10027  00496C  3985               	swapf	CANInitialize@phaseSeg1& (0+255),w,b
 10028  00496E  42E8               	rrncf	wreg,f,c
 10029  004970  0BF8               	andlw	248
 10030  004972  0100               	movlb	0	; () banked
 10031  004974  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
 10032                           
 10033                           ; BSR set to: 0
 10034                           ;inc\CANlib.h: 235: BRGCON2 |= phaseSeg1;
 10035  004976  0100               	movlb	0	; () banked
 10036  004978  5185               	movf	CANInitialize@phaseSeg1& (0+255),w,b
 10037  00497A  1271               	iorwf	3953,f,c	;volatile
 10038                           
 10039                           ; BSR set to: 0
 10040                           ;inc\CANlib.h: 237: if ( !(flags & CAN_CONFIG_SAMPLE_BIT) )
 10041  00497C  0100               	movlb	0	; () banked
 10042  00497E  A589               	btfss	CANInitialize@flags& (0+255),2,b
 10043                           
 10044                           ; BSR set to: 0
 10045                           ;inc\CANlib.h: 238: BRGCON2bits.SAM= 1;
 10046  004980  8C71               	bsf	3953,6,c	;volatile
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;inc\CANlib.h: 240: if ( flags & CAN_CONFIG_PHSEG2_PRG_BIT )
 10050  004982  0100               	movlb	0	; () banked
 10051  004984  A189               	btfss	CANInitialize@flags& (0+255),0,b
 10052  004986  D002               	goto	l4998
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;inc\CANlib.h: 241: BRGCON2bits.SEG2PHTS = 1;
 10056  004988  8E71               	bsf	3953,7,c	;volatile
 10057  00498A  D000               	goto	l4998
 10058  00498C                     l4998:
 10059                           
 10060                           ; BSR set to: 0
 10061                           ;inc\CANlib.h: 243: BRGCON3 |= phaseSeg2;
 10062  00498C  0100               	movlb	0	; () banked
 10063  00498E  5186               	movf	CANInitialize@phaseSeg2& (0+255),w,b
 10064  004990  1272               	iorwf	3954,f,c	;volatile
 10065                           
 10066                           ; BSR set to: 0
 10067                           ;inc\CANlib.h: 245: if ( flags & CAN_CONFIG_LINE_FILTER_BIT )
 10068  004992  0100               	movlb	0	; () banked
 10069  004994  A389               	btfss	CANInitialize@flags& (0+255),1,b
 10070  004996  D002               	goto	l5004
 10071                           
 10072                           ; BSR set to: 0
 10073                           ;inc\CANlib.h: 246: BRGCON3bits.WAKFIL = 1;
 10074  004998  8C72               	bsf	3954,6,c	;volatile
 10075  00499A  D000               	goto	l5004
 10076  00499C                     l5004:
 10077                           
 10078                           ; BSR set to: 0
 10079                           ;inc\CANlib.h: 251: RXB0CON = flags & CAN_CONFIG_MSG_BITS;
 10080  00499C  0100               	movlb	0	; () banked
 10081  00499E  5189               	movf	CANInitialize@flags& (0+255),w,b
 10082  0049A0  0B60               	andlw	96
 10083  0049A2  6E60               	movwf	3936,c	;volatile
 10084                           
 10085                           ;inc\CANlib.h: 252: if ( (flags & CAN_CONFIG_DBL_BUFFER_BIT)== CAN_CONFIG_DBL_BUFFER_ON 
      +                          )
 10086  0049A4  0100               	movlb	0	; () banked
 10087  0049A6  5189               	movf	CANInitialize@flags& (0+255),w,b
 10088  0049A8  0B10               	andlw	16
 10089  0049AA  0AFF               	xorlw	255
 10090  0049AC  B4D8               	btfsc	status,2,c
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;inc\CANlib.h: 253: RXB0CONbits.RXB0DBEN = 1;
 10094  0049AE  8460               	bsf	3936,2,c	;volatile
 10095                           
 10096                           ; BSR set to: 0
 10097                           ;inc\CANlib.h: 255: RXB1CON = RXB0CON;
 10098  0049B0  CF60 FF50          	movff	3936,3920	;volatile
 10099                           
 10100                           ; BSR set to: 0
 10101                           ;inc\CANlib.h: 259: CANSetMask (CAN_MASK_B1, 0x00000000, CAN_CONFIG_XTD_MSG);
 10102  0049B4  0E00               	movlw	0
 10103  0049B6  0100               	movlb	0	; () banked
 10104  0049B8  6F77               	movwf	CANSetMask@mask& (0+255),b
 10105  0049BA  0E00               	movlw	0
 10106  0049BC  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10107  0049BE  0E00               	movlw	0
 10108  0049C0  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10109  0049C2  0E00               	movlw	0
 10110  0049C4  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10111  0049C6  0EF7               	movlw	247
 10112  0049C8  0100               	movlb	0	; () banked
 10113  0049CA  6F7B               	movwf	CANSetMask@type& (0+255),b
 10114  0049CC  0E01               	movlw	1
 10115  0049CE  EC03  F01B         	call	_CANSetMask
 10116                           
 10117                           ;inc\CANlib.h: 260: CANSetMask (CAN_MASK_B2, 0x00000000, CAN_CONFIG_XTD_MSG);
 10118  0049D2  0E00               	movlw	0
 10119  0049D4  0100               	movlb	0	; () banked
 10120  0049D6  6F77               	movwf	CANSetMask@mask& (0+255),b
 10121  0049D8  0E00               	movlw	0
 10122  0049DA  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10123  0049DC  0E00               	movlw	0
 10124  0049DE  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10125  0049E0  0E00               	movlw	0
 10126  0049E2  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10127  0049E4  0EF7               	movlw	247
 10128  0049E6  0100               	movlb	0	; () banked
 10129  0049E8  6F7B               	movwf	CANSetMask@type& (0+255),b
 10130  0049EA  0E02               	movlw	2
 10131  0049EC  EC03  F01B         	call	_CANSetMask
 10132                           
 10133                           ;inc\CANlib.h: 263: switch( (flags & CAN_CONFIG_MSG_BITS) | ~CAN_CONFIG_MSG_BITS )
 10134  0049F0  D00F               	goto	l5016
 10135  0049F2                     l5010:
 10136                           
 10137                           ;inc\CANlib.h: 266: FilterConfig1 = CAN_CONFIG_XTD_MSG;
 10138  0049F2  0EF7               	movlw	247
 10139  0049F4  0100               	movlb	0	; () banked
 10140  0049F6  6F8F               	movwf	CANInitialize@FilterConfig1& (0+255),b
 10141  0049F8  D007               	goto	l5012
 10142  0049FA                     l356:
 10143                           
 10144                           ; BSR set to: 0
 10145                           ;inc\CANlib.h: 271: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10146  0049FA  0100               	movlb	0	; () banked
 10147  0049FC  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10148                           
 10149                           ;inc\CANlib.h: 272: FilterConfig2 = CAN_CONFIG_STD_MSG;
 10150  0049FE  0100               	movlb	0	; () banked
 10151  004A00  6990               	setf	CANInitialize@FilterConfig2& (0+255),b
 10152                           
 10153                           ;inc\CANlib.h: 273: break;
 10154  004A02  D028               	goto	l5018
 10155  004A04                     l357:
 10156                           
 10157                           ; BSR set to: 0
 10158                           ;inc\CANlib.h: 275: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10159  004A04  0100               	movlb	0	; () banked
 10160  004A06  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10161  004A08                     l5012:
 10162                           
 10163                           ; BSR set to: 0
 10164                           ;inc\CANlib.h: 276: FilterConfig2 = CAN_CONFIG_XTD_MSG;
 10165  004A08  0EF7               	movlw	247
 10166  004A0A  0100               	movlb	0	; () banked
 10167  004A0C  6F90               	movwf	CANInitialize@FilterConfig2& (0+255),b
 10168                           
 10169                           ; BSR set to: 0
 10170                           ;inc\CANlib.h: 278: }
 10171                           
 10172                           ;inc\CANlib.h: 277: break;
 10173  004A0E  D022               	goto	l5018
 10174  004A10                     l5016:
 10175  004A10  0E9F               	movlw	159
 10176  004A12  0100               	movlb	0	; () banked
 10177  004A14  6F8A               	movwf	??_CANInitialize& (0+255),b
 10178  004A16  0EFF               	movlw	255
 10179  004A18  0100               	movlb	0	; () banked
 10180  004A1A  6F8B               	movwf	(??_CANInitialize+1)& (0+255),b
 10181  004A1C  0100               	movlb	0	; () banked
 10182  004A1E  5189               	movf	CANInitialize@flags& (0+255),w,b
 10183  004A20  0B60               	andlw	96
 10184  004A22  0100               	movlb	0	; () banked
 10185  004A24  6F8C               	movwf	(??_CANInitialize+2)& (0+255),b
 10186  004A26  6B8D               	clrf	(??_CANInitialize+3)& (0+255),b
 10187  004A28  0100               	movlb	0	; () banked
 10188  004A2A  518A               	movf	??_CANInitialize& (0+255),w,b
 10189  004A2C  0100               	movlb	0	; () banked
 10190  004A2E  138C               	iorwf	(??_CANInitialize+2)& (0+255),f,b
 10191  004A30  0100               	movlb	0	; () banked
 10192  004A32  518B               	movf	(??_CANInitialize+1)& (0+255),w,b
 10193  004A34  0100               	movlb	0	; () banked
 10194  004A36  138D               	iorwf	(??_CANInitialize+3)& (0+255),f,b
 10195                           
 10196                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10197                           ; Switch size 1, requested type "space"
 10198                           ; Number of cases is 1, Range of values is 0 to 0
 10199                           ; switch strategies available:
 10200                           ; Name         Instructions Cycles
 10201                           ; simple_byte            4     3 (average)
 10202                           ;	Chosen strategy is simple_byte
 10203  004A38  0100               	movlb	0	; () banked
 10204  004A3A  518D               	movf	(??_CANInitialize+3)& (0+255),w,b
 10205  004A3C  0A00               	xorlw	0	; case 0
 10206  004A3E  A4D8               	btfss	status,2,c
 10207  004A40  D7E1               	goto	l357
 10208                           
 10209                           ; BSR set to: 0
 10210                           ; Switch size 1, requested type "space"
 10211                           ; Number of cases is 2, Range of values is 191 to 223
 10212                           ; switch strategies available:
 10213                           ; Name         Instructions Cycles
 10214                           ; simple_byte            7     4 (average)
 10215                           ;	Chosen strategy is simple_byte
 10216  004A42  0100               	movlb	0	; () banked
 10217  004A44  518C               	movf	(??_CANInitialize+2)& (0+255),w,b
 10218  004A46  0ABF               	xorlw	191	; case 191
 10219  004A48  B4D8               	btfsc	status,2,c
 10220  004A4A  D7D7               	goto	l356
 10221  004A4C  0A60               	xorlw	96	; case 223
 10222  004A4E  B4D8               	btfsc	status,2,c
 10223  004A50  D7D0               	goto	l5010
 10224  004A52  D7D8               	goto	l357
 10225  004A54                     l5018:
 10226                           
 10227                           ; BSR set to: 0
 10228                           ;inc\CANlib.h: 280: CANSetFilter(CAN_FILTER_B1_F1, 0, FilterConfig1);
 10229  004A54  0E00               	movlw	0
 10230  004A56  0100               	movlb	0	; () banked
 10231  004A58  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10232  004A5A  0E00               	movlw	0
 10233  004A5C  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10234  004A5E  0E00               	movlw	0
 10235  004A60  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10236  004A62  0E00               	movlw	0
 10237  004A64  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10238  004A66  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10239  004A6A  0E00               	movlw	0
 10240  004A6C  ECA9  F006         	call	_CANSetFilter
 10241                           
 10242                           ;inc\CANlib.h: 281: CANSetFilter(CAN_FILTER_B1_F2, 0, FilterConfig1);
 10243  004A70  0E00               	movlw	0
 10244  004A72  0100               	movlb	0	; () banked
 10245  004A74  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10246  004A76  0E00               	movlw	0
 10247  004A78  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10248  004A7A  0E00               	movlw	0
 10249  004A7C  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10250  004A7E  0E00               	movlw	0
 10251  004A80  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10252  004A82  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10253  004A86  0E01               	movlw	1
 10254  004A88  ECA9  F006         	call	_CANSetFilter
 10255                           
 10256                           ;inc\CANlib.h: 282: CANSetFilter(CAN_FILTER_B2_F1, 0, FilterConfig2);
 10257  004A8C  0E00               	movlw	0
 10258  004A8E  0100               	movlb	0	; () banked
 10259  004A90  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10260  004A92  0E00               	movlw	0
 10261  004A94  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10262  004A96  0E00               	movlw	0
 10263  004A98  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10264  004A9A  0E00               	movlw	0
 10265  004A9C  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10266  004A9E  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10267  004AA2  0E02               	movlw	2
 10268  004AA4  ECA9  F006         	call	_CANSetFilter
 10269                           
 10270                           ;inc\CANlib.h: 283: CANSetFilter(CAN_FILTER_B2_F2, 0, FilterConfig2);
 10271  004AA8  0E00               	movlw	0
 10272  004AAA  0100               	movlb	0	; () banked
 10273  004AAC  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10274  004AAE  0E00               	movlw	0
 10275  004AB0  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10276  004AB2  0E00               	movlw	0
 10277  004AB4  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10278  004AB6  0E00               	movlw	0
 10279  004AB8  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10280  004ABA  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10281  004ABE  0E03               	movlw	3
 10282  004AC0  ECA9  F006         	call	_CANSetFilter
 10283                           
 10284                           ;inc\CANlib.h: 284: CANSetFilter(CAN_FILTER_B2_F3, 0, FilterConfig2);
 10285  004AC4  0E00               	movlw	0
 10286  004AC6  0100               	movlb	0	; () banked
 10287  004AC8  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10288  004ACA  0E00               	movlw	0
 10289  004ACC  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10290  004ACE  0E00               	movlw	0
 10291  004AD0  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10292  004AD2  0E00               	movlw	0
 10293  004AD4  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10294  004AD6  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10295  004ADA  0E04               	movlw	4
 10296  004ADC  ECA9  F006         	call	_CANSetFilter
 10297                           
 10298                           ;inc\CANlib.h: 285: CANSetFilter(CAN_FILTER_B2_F4, 0, FilterConfig2);
 10299  004AE0  0E00               	movlw	0
 10300  004AE2  0100               	movlb	0	; () banked
 10301  004AE4  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10302  004AE6  0E00               	movlw	0
 10303  004AE8  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10304  004AEA  0E00               	movlw	0
 10305  004AEC  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10306  004AEE  0E00               	movlw	0
 10307  004AF0  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10308  004AF2  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10309  004AF6  0E05               	movlw	5
 10310  004AF8  ECA9  F006         	call	_CANSetFilter
 10311                           
 10312                           ;inc\CANlib.h: 287: CANOperationMode(CAN_OP_MODE_NORMAL);
 10313  004AFC  0E00               	movlw	0
 10314  004AFE  EC03  F02F         	call	_CANOperationMode
 10315  004B02  0012               	return		;funcret
 10316  004B04                     __end_of_CANInitialize:
 10317                           	opt stack 0
 10318                           tblptru	equ	0xFF8
 10319                           tblptrh	equ	0xFF7
 10320                           tblptrl	equ	0xFF6
 10321                           tablat	equ	0xFF5
 10322                           prodh	equ	0xFF4
 10323                           prodl	equ	0xFF3
 10324                           intcon	equ	0xFF2
 10325                           intcon2	equ	0xFF1
 10326                           postinc0	equ	0xFEE
 10327                           wreg	equ	0xFE8
 10328                           postdec1	equ	0xFE5
 10329                           fsr1l	equ	0xFE1
 10330                           indf2	equ	0xFDF
 10331                           postinc2	equ	0xFDE
 10332                           postdec2	equ	0xFDD
 10333                           fsr2h	equ	0xFDA
 10334                           fsr2l	equ	0xFD9
 10335                           status	equ	0xFD8
 10336                           
 10337 ;; *************** function _CANSetMask *****************
 10338 ;; Defined at:
 10339 ;;		line 640 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 10340 ;; Parameters:    Size  Location     Type
 10341 ;;  numBuffer       1    wreg     enum E16388
 10342 ;;  mask            4   23[BANK0 ] unsigned long 
 10343 ;;  type            1   27[BANK0 ] enum E16354
 10344 ;; Auto vars:     Size  Location     Type
 10345 ;;  numBuffer       1   32[BANK0 ] enum E16388
 10346 ;;  tamp            4   33[BANK0 ] unsigned long 
 10347 ;; Return value:  Size  Location     Type
 10348 ;;		None               void
 10349 ;; Registers used:
 10350 ;;		wreg, status,2, status,0
 10351 ;; Tracked objects:
 10352 ;;		On entry : 0/0
 10353 ;;		On exit  : 0/0
 10354 ;;		Unchanged: 0/0
 10355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10356 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10357 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10358 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10359 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10360 ;;Total ram usage:       14 bytes
 10361 ;; Hardware stack levels used:    1
 10362 ;; Hardware stack levels required when called:    5
 10363 ;; This function calls:
 10364 ;;		Nothing
 10365 ;; This function is called by:
 10366 ;;		_CANInitialize
 10367 ;; This function uses a non-reentrant model
 10368 ;;
 10369                           
 10370                           	psect	text34
 10371  003606                     __ptext34:
 10372                           	opt stack 0
 10373  003606                     _CANSetMask:
 10374                           	opt stack 23
 10375                           
 10376                           ;incstack = 0
 10377                           ;CANSetMask@numBuffer stored from wreg
 10378  003606  0100               	movlb	0	; () banked
 10379  003608  6F80               	movwf	CANSetMask@numBuffer& (0+255),b
 10380                           
 10381                           ; BSR set to: 0
 10382                           ;inc\CANlib.h: 643: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_STD_MSG))
 10383  00360A  0100               	movlb	0	; () banked
 10384  00360C  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 10385  00360E  A4D8               	btfss	status,2,c
 10386  003610  D057               	goto	l4478
 10387                           
 10388                           ; BSR set to: 0
 10389  003612  0100               	movlb	0	; () banked
 10390  003614  297B               	incf	CANSetMask@type& (0+255),w,b
 10391  003616  A4D8               	btfss	status,2,c
 10392  003618  D053               	goto	l4478
 10393                           
 10394                           ; BSR set to: 0
 10395                           ;inc\CANlib.h: 644: {
 10396                           ;inc\CANlib.h: 645: tamp = (mask >> 3);
 10397  00361A  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10398  00361E  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10399  003622  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10400  003626  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10401  00362A  0E04               	movlw	4
 10402  00362C  D006               	goto	u4830
 10403  00362E                     u4835:
 10404  00362E  0100               	movlb	0	; () banked
 10405  003630  90D8               	bcf	status,0,c
 10406  003632  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10407  003634  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10408  003636  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10409  003638  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10410  00363A                     u4830:
 10411  00363A  2EE8               	decfsz	wreg,f,c
 10412  00363C  D7F8               	goto	u4835
 10413  00363E  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10414  003642  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10415  003646  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10416  00364A  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;inc\CANlib.h: 646: tamp = tamp & 0x000000FF;
 10420  00364E  0100               	movlb	0	; () banked
 10421  003650  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10422  003652  0100               	movlb	0	; () banked
 10423  003654  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10424  003656  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10425  003658  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10426  00365A  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10427                           
 10428                           ; BSR set to: 0
 10429                           ;inc\CANlib.h: 647: RXM0SIDH = (unsigned char) tamp;
 10430  00365C  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 10431                           
 10432                           ; BSR set to: 0
 10433                           ;inc\CANlib.h: 649: tamp = mask & 0x00000007;
 10434  003660  0E07               	movlw	7
 10435  003662  0100               	movlb	0	; () banked
 10436  003664  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10437  003666  0100               	movlb	0	; () banked
 10438  003668  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10439  00366A  0E00               	movlw	0
 10440  00366C  0100               	movlb	0	; () banked
 10441  00366E  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10442  003670  0100               	movlb	0	; () banked
 10443  003672  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10444  003674  0E00               	movlw	0
 10445  003676  0100               	movlb	0	; () banked
 10446  003678  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10447  00367A  0100               	movlb	0	; () banked
 10448  00367C  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10449  00367E  0E00               	movlw	0
 10450  003680  0100               	movlb	0	; () banked
 10451  003682  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10452  003684  0100               	movlb	0	; () banked
 10453  003686  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10454                           
 10455                           ; BSR set to: 0
 10456                           ;inc\CANlib.h: 650: tamp = tamp << 5;
 10457  003688  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10458  00368C  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10459  003690  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10460  003694  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10461  003698  0E05               	movlw	5
 10462  00369A                     u4845:
 10463  00369A  90D8               	bcf	status,0,c
 10464  00369C  0100               	movlb	0	; () banked
 10465  00369E  377C               	rlcf	??_CANSetMask& (0+255),f,b
 10466  0036A0  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 10467  0036A2  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 10468  0036A4  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 10469  0036A6  2EE8               	decfsz	wreg,f,c
 10470  0036A8  D7F8               	goto	u4845
 10471  0036AA  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10472  0036AE  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10473  0036B2  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10474  0036B6  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10475                           
 10476                           ; BSR set to: 0
 10477                           ;inc\CANlib.h: 651: RXM0SIDL = (unsigned char) tamp;
 10478  0036BA  C081  FF19         	movff	CANSetMask@tamp,3865	;volatile
 10479  0036BE  D000               	goto	l4478
 10480  0036C0                     l4478:
 10481                           
 10482                           ; BSR set to: 0
 10483                           ;inc\CANlib.h: 652: }
 10484                           ;inc\CANlib.h: 654: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_STD_MSG))
 10485  0036C0  0E02               	movlw	2
 10486  0036C2  0100               	movlb	0	; () banked
 10487  0036C4  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 10488  0036C6  A4D8               	btfss	status,2,c
 10489  0036C8  D057               	goto	l4494
 10490                           
 10491                           ; BSR set to: 0
 10492  0036CA  0100               	movlb	0	; () banked
 10493  0036CC  297B               	incf	CANSetMask@type& (0+255),w,b
 10494  0036CE  A4D8               	btfss	status,2,c
 10495  0036D0  D053               	goto	l4494
 10496                           
 10497                           ; BSR set to: 0
 10498                           ;inc\CANlib.h: 655: {
 10499                           ;inc\CANlib.h: 656: tamp = (mask >> 3);
 10500  0036D2  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10501  0036D6  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10502  0036DA  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10503  0036DE  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10504  0036E2  0E04               	movlw	4
 10505  0036E4  D006               	goto	u4870
 10506  0036E6                     u4875:
 10507  0036E6  0100               	movlb	0	; () banked
 10508  0036E8  90D8               	bcf	status,0,c
 10509  0036EA  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10510  0036EC  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10511  0036EE  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10512  0036F0  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10513  0036F2                     u4870:
 10514  0036F2  2EE8               	decfsz	wreg,f,c
 10515  0036F4  D7F8               	goto	u4875
 10516  0036F6  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10517  0036FA  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10518  0036FE  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10519  003702  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10520                           
 10521                           ; BSR set to: 0
 10522                           ;inc\CANlib.h: 657: tamp = tamp & 0x000000FF;
 10523  003706  0100               	movlb	0	; () banked
 10524  003708  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10525  00370A  0100               	movlb	0	; () banked
 10526  00370C  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10527  00370E  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10528  003710  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10529  003712  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10530                           
 10531                           ; BSR set to: 0
 10532                           ;inc\CANlib.h: 658: RXM1SIDH = (unsigned char) tamp;
 10533  003714  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 10534                           
 10535                           ; BSR set to: 0
 10536                           ;inc\CANlib.h: 660: tamp = mask & 0x00000007;
 10537  003718  0E07               	movlw	7
 10538  00371A  0100               	movlb	0	; () banked
 10539  00371C  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10540  00371E  0100               	movlb	0	; () banked
 10541  003720  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10542  003722  0E00               	movlw	0
 10543  003724  0100               	movlb	0	; () banked
 10544  003726  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10545  003728  0100               	movlb	0	; () banked
 10546  00372A  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10547  00372C  0E00               	movlw	0
 10548  00372E  0100               	movlb	0	; () banked
 10549  003730  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10550  003732  0100               	movlb	0	; () banked
 10551  003734  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10552  003736  0E00               	movlw	0
 10553  003738  0100               	movlb	0	; () banked
 10554  00373A  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10555  00373C  0100               	movlb	0	; () banked
 10556  00373E  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10557                           
 10558                           ; BSR set to: 0
 10559                           ;inc\CANlib.h: 661: tamp = tamp << 5;
 10560  003740  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10561  003744  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10562  003748  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10563  00374C  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10564  003750  0E05               	movlw	5
 10565  003752                     u4885:
 10566  003752  90D8               	bcf	status,0,c
 10567  003754  0100               	movlb	0	; () banked
 10568  003756  377C               	rlcf	??_CANSetMask& (0+255),f,b
 10569  003758  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 10570  00375A  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 10571  00375C  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 10572  00375E  2EE8               	decfsz	wreg,f,c
 10573  003760  D7F8               	goto	u4885
 10574  003762  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10575  003766  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10576  00376A  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10577  00376E  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10578                           
 10579                           ; BSR set to: 0
 10580                           ;inc\CANlib.h: 662: RXM1SIDL = (unsigned char) tamp;
 10581  003772  C081  FF1D         	movff	CANSetMask@tamp,3869	;volatile
 10582  003776  D000               	goto	l4494
 10583  003778                     l4494:
 10584                           
 10585                           ; BSR set to: 0
 10586                           ;inc\CANlib.h: 663: }
 10587                           ;inc\CANlib.h: 665: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_XTD_MSG))
 10588  003778  0100               	movlb	0	; () banked
 10589  00377A  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 10590  00377C  A4D8               	btfss	status,2,c
 10591  00377E  D089               	goto	l4526
 10592                           
 10593                           ; BSR set to: 0
 10594  003780  0EF7               	movlw	247
 10595  003782  0100               	movlb	0	; () banked
 10596  003784  197B               	xorwf	CANSetMask@type& (0+255),w,b
 10597  003786  A4D8               	btfss	status,2,c
 10598  003788  D084               	goto	l4526
 10599                           
 10600                           ; BSR set to: 0
 10601                           ;inc\CANlib.h: 666: {
 10602                           ;inc\CANlib.h: 667: tamp = mask & 0x000000FF;
 10603  00378A  0100               	movlb	0	; () banked
 10604  00378C  5177               	movf	CANSetMask@mask& (0+255),w,b
 10605  00378E  0100               	movlb	0	; () banked
 10606  003790  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10607  003792  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10608  003794  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10609  003796  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10610                           
 10611                           ; BSR set to: 0
 10612                           ;inc\CANlib.h: 668: RXM0EIDL = (unsigned char) tamp;
 10613  003798  C081  FF1B         	movff	CANSetMask@tamp,3867	;volatile
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;inc\CANlib.h: 670: tamp = mask & 0x0000FF00;
 10617  00379C  0E00               	movlw	0
 10618  00379E  0100               	movlb	0	; () banked
 10619  0037A0  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10620  0037A2  0100               	movlb	0	; () banked
 10621  0037A4  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10622  0037A6  0EFF               	movlw	255
 10623  0037A8  0100               	movlb	0	; () banked
 10624  0037AA  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10625  0037AC  0100               	movlb	0	; () banked
 10626  0037AE  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10627  0037B0  0E00               	movlw	0
 10628  0037B2  0100               	movlb	0	; () banked
 10629  0037B4  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10630  0037B6  0100               	movlb	0	; () banked
 10631  0037B8  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10632  0037BA  0E00               	movlw	0
 10633  0037BC  0100               	movlb	0	; () banked
 10634  0037BE  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10635  0037C0  0100               	movlb	0	; () banked
 10636  0037C2  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10637                           
 10638                           ; BSR set to: 0
 10639                           ;inc\CANlib.h: 671: tamp = tamp >> 8;
 10640  0037C4  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10641  0037C8  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10642  0037CC  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10643  0037D0  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10644  0037D4  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 10645  0037D8  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 10646  0037DC  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 10647  0037E0  0100               	movlb	0	; () banked
 10648  0037E2  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 10649  0037E4  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10650  0037E8  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10651  0037EC  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10652  0037F0  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10653                           
 10654                           ; BSR set to: 0
 10655                           ;inc\CANlib.h: 672: RXM0EIDH = (unsigned char) tamp;
 10656  0037F4  C081  FF1A         	movff	CANSetMask@tamp,3866	;volatile
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;inc\CANlib.h: 674: if (mask & 0x00010000)
 10660  0037F8  0100               	movlb	0	; () banked
 10661  0037FA  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 10662  0037FC  D003               	goto	l430
 10663                           
 10664                           ; BSR set to: 0
 10665                           ;inc\CANlib.h: 675: RXM0SIDLbits.EID16 = 0x01;
 10666  0037FE  010F               	movlb	15	; () banked
 10667  003800  8119               	bsf	25,0,b	;volatile
 10668  003802  D002               	goto	l431
 10669  003804                     l430:
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;inc\CANlib.h: 676: else
 10673                           ;inc\CANlib.h: 677: RXM0SIDLbits.EID16 = 0x00;
 10674  003804  010F               	movlb	15	; () banked
 10675  003806  9119               	bcf	25,0,b	;volatile
 10676  003808                     l431:
 10677                           
 10678                           ; BSR set to: 15
 10679                           ;inc\CANlib.h: 679: if (mask & 0x00020000)
 10680  003808  0100               	movlb	0	; () banked
 10681  00380A  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 10682  00380C  D003               	goto	l432
 10683                           
 10684                           ; BSR set to: 0
 10685                           ;inc\CANlib.h: 680: RXM0SIDLbits.EID17 = 0x01;
 10686  00380E  010F               	movlb	15	; () banked
 10687  003810  8319               	bsf	25,1,b	;volatile
 10688  003812  D002               	goto	l433
 10689  003814                     l432:
 10690                           
 10691                           ; BSR set to: 0
 10692                           ;inc\CANlib.h: 681: else
 10693                           ;inc\CANlib.h: 682: RXM0SIDLbits.EID17 = 0x00;
 10694  003814  010F               	movlb	15	; () banked
 10695  003816  9319               	bcf	25,1,b	;volatile
 10696  003818                     l433:
 10697                           
 10698                           ; BSR set to: 15
 10699                           ;inc\CANlib.h: 684: if (mask & 0x00040000)
 10700  003818  0100               	movlb	0	; () banked
 10701  00381A  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 10702  00381C  D003               	goto	l434
 10703                           
 10704                           ; BSR set to: 0
 10705                           ;inc\CANlib.h: 685: RXM0SIDLbits.SID0 = 0x01;
 10706  00381E  010F               	movlb	15	; () banked
 10707  003820  8B19               	bsf	25,5,b	;volatile
 10708  003822  D002               	goto	l435
 10709  003824                     l434:
 10710                           
 10711                           ; BSR set to: 0
 10712                           ;inc\CANlib.h: 686: else
 10713                           ;inc\CANlib.h: 687: RXM0SIDLbits.SID0 = 0x00;
 10714  003824  010F               	movlb	15	; () banked
 10715  003826  9B19               	bcf	25,5,b	;volatile
 10716  003828                     l435:
 10717                           
 10718                           ; BSR set to: 15
 10719                           ;inc\CANlib.h: 689: if (mask & 0x00080000)
 10720  003828  0100               	movlb	0	; () banked
 10721  00382A  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 10722  00382C  D003               	goto	l436
 10723                           
 10724                           ; BSR set to: 0
 10725                           ;inc\CANlib.h: 690: RXM0SIDLbits.SID1 = 0x01;
 10726  00382E  010F               	movlb	15	; () banked
 10727  003830  8D19               	bsf	25,6,b	;volatile
 10728  003832  D002               	goto	l437
 10729  003834                     l436:
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;inc\CANlib.h: 691: else
 10733                           ;inc\CANlib.h: 692: RXM0SIDLbits.SID1 = 0x00;
 10734  003834  010F               	movlb	15	; () banked
 10735  003836  9D19               	bcf	25,6,b	;volatile
 10736  003838                     l437:
 10737                           
 10738                           ; BSR set to: 15
 10739                           ;inc\CANlib.h: 694: if (mask & 0x00100000)
 10740  003838  0100               	movlb	0	; () banked
 10741  00383A  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 10742  00383C  D003               	goto	l438
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;inc\CANlib.h: 695: RXM0SIDLbits.SID2 = 0x01 ;
 10746  00383E  010F               	movlb	15	; () banked
 10747  003840  8F19               	bsf	25,7,b	;volatile
 10748  003842  D003               	goto	l4520
 10749  003844                     l438:
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;inc\CANlib.h: 696: else
 10753                           ;inc\CANlib.h: 697: RXM0SIDLbits.SID2 = 0x00 ;
 10754  003844  010F               	movlb	15	; () banked
 10755  003846  9F19               	bcf	25,7,b	;volatile
 10756  003848  D000               	goto	l4520
 10757  00384A                     l4520:
 10758                           
 10759                           ; BSR set to: 15
 10760                           ;inc\CANlib.h: 699: tamp = (mask >> 21);
 10761  00384A  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10762  00384E  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10763  003852  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10764  003856  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10765  00385A  0E16               	movlw	22
 10766  00385C  D006               	goto	u4960
 10767  00385E                     u4965:
 10768  00385E  0100               	movlb	0	; () banked
 10769  003860  90D8               	bcf	status,0,c
 10770  003862  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10771  003864  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10772  003866  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10773  003868  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10774  00386A                     u4960:
 10775  00386A  2EE8               	decfsz	wreg,f,c
 10776  00386C  D7F8               	goto	u4965
 10777  00386E  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10778  003872  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10779  003876  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10780  00387A  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;inc\CANlib.h: 700: tamp = tamp & 0x000000FF;
 10784  00387E  0100               	movlb	0	; () banked
 10785  003880  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10786  003882  0100               	movlb	0	; () banked
 10787  003884  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10788  003886  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10789  003888  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10790  00388A  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;inc\CANlib.h: 701: RXM0SIDH = (unsigned char) tamp;
 10794  00388C  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 10795  003890  D000               	goto	l4526
 10796  003892                     l4526:
 10797                           
 10798                           ; BSR set to: 0
 10799                           ;inc\CANlib.h: 702: }
 10800                           ;inc\CANlib.h: 704: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_XTD_MSG))
 10801  003892  0E02               	movlw	2
 10802  003894  0100               	movlb	0	; () banked
 10803  003896  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 10804  003898  A4D8               	btfss	status,2,c
 10805  00389A  0012               	return	
 10806                           
 10807                           ; BSR set to: 0
 10808  00389C  0EF7               	movlw	247
 10809  00389E  0100               	movlb	0	; () banked
 10810  0038A0  197B               	xorwf	CANSetMask@type& (0+255),w,b
 10811  0038A2  A4D8               	btfss	status,2,c
 10812  0038A4  0012               	return	
 10813                           
 10814                           ; BSR set to: 0
 10815                           ;inc\CANlib.h: 705: {
 10816                           ;inc\CANlib.h: 706: tamp = mask & 0x000000FF;
 10817  0038A6  0100               	movlb	0	; () banked
 10818  0038A8  5177               	movf	CANSetMask@mask& (0+255),w,b
 10819  0038AA  0100               	movlb	0	; () banked
 10820  0038AC  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10821  0038AE  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10822  0038B0  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10823  0038B2  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10824                           
 10825                           ; BSR set to: 0
 10826                           ;inc\CANlib.h: 707: RXM1EIDL = (unsigned char) tamp;
 10827  0038B4  C081  FF1F         	movff	CANSetMask@tamp,3871	;volatile
 10828                           
 10829                           ; BSR set to: 0
 10830                           ;inc\CANlib.h: 709: tamp = mask & 0x0000FF00;
 10831  0038B8  0E00               	movlw	0
 10832  0038BA  0100               	movlb	0	; () banked
 10833  0038BC  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10834  0038BE  0100               	movlb	0	; () banked
 10835  0038C0  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10836  0038C2  0EFF               	movlw	255
 10837  0038C4  0100               	movlb	0	; () banked
 10838  0038C6  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10839  0038C8  0100               	movlb	0	; () banked
 10840  0038CA  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10841  0038CC  0E00               	movlw	0
 10842  0038CE  0100               	movlb	0	; () banked
 10843  0038D0  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10844  0038D2  0100               	movlb	0	; () banked
 10845  0038D4  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10846  0038D6  0E00               	movlw	0
 10847  0038D8  0100               	movlb	0	; () banked
 10848  0038DA  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10849  0038DC  0100               	movlb	0	; () banked
 10850  0038DE  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10851                           
 10852                           ; BSR set to: 0
 10853                           ;inc\CANlib.h: 710: tamp = tamp >> 8;
 10854  0038E0  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10855  0038E4  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10856  0038E8  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10857  0038EC  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10858  0038F0  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 10859  0038F4  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 10860  0038F8  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 10861  0038FC  0100               	movlb	0	; () banked
 10862  0038FE  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 10863  003900  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10864  003904  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10865  003908  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10866  00390C  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10867                           
 10868                           ; BSR set to: 0
 10869                           ;inc\CANlib.h: 711: RXM1EIDH = (unsigned char) tamp;
 10870  003910  C081  FF1E         	movff	CANSetMask@tamp,3870	;volatile
 10871                           
 10872                           ; BSR set to: 0
 10873                           ;inc\CANlib.h: 713: if (mask & 0x00010000)
 10874  003914  0100               	movlb	0	; () banked
 10875  003916  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 10876  003918  D003               	goto	l441
 10877                           
 10878                           ; BSR set to: 0
 10879                           ;inc\CANlib.h: 714: RXM1SIDLbits.EID16 = 0x01;
 10880  00391A  010F               	movlb	15	; () banked
 10881  00391C  811D               	bsf	29,0,b	;volatile
 10882  00391E  D002               	goto	l442
 10883  003920                     l441:
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;inc\CANlib.h: 715: else
 10887                           ;inc\CANlib.h: 716: RXM1SIDLbits.EID16 = 0x00;
 10888  003920  010F               	movlb	15	; () banked
 10889  003922  911D               	bcf	29,0,b	;volatile
 10890  003924                     l442:
 10891                           
 10892                           ; BSR set to: 15
 10893                           ;inc\CANlib.h: 718: if (mask & 0x00020000)
 10894  003924  0100               	movlb	0	; () banked
 10895  003926  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 10896  003928  D003               	goto	l443
 10897                           
 10898                           ; BSR set to: 0
 10899                           ;inc\CANlib.h: 719: RXM1SIDLbits.EID17 = 0x01;
 10900  00392A  010F               	movlb	15	; () banked
 10901  00392C  831D               	bsf	29,1,b	;volatile
 10902  00392E  D002               	goto	l444
 10903  003930                     l443:
 10904                           
 10905                           ; BSR set to: 0
 10906                           ;inc\CANlib.h: 720: else
 10907                           ;inc\CANlib.h: 721: RXM1SIDLbits.EID17 = 0x00;
 10908  003930  010F               	movlb	15	; () banked
 10909  003932  931D               	bcf	29,1,b	;volatile
 10910  003934                     l444:
 10911                           
 10912                           ; BSR set to: 15
 10913                           ;inc\CANlib.h: 723: if (mask & 0x00040000)
 10914  003934  0100               	movlb	0	; () banked
 10915  003936  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 10916  003938  D003               	goto	l445
 10917                           
 10918                           ; BSR set to: 0
 10919                           ;inc\CANlib.h: 724: RXM1SIDLbits.SID0 = 0x01;
 10920  00393A  010F               	movlb	15	; () banked
 10921  00393C  8B1D               	bsf	29,5,b	;volatile
 10922  00393E  D002               	goto	l446
 10923  003940                     l445:
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;inc\CANlib.h: 725: else
 10927                           ;inc\CANlib.h: 726: RXM1SIDLbits.SID0 = 0x00;
 10928  003940  010F               	movlb	15	; () banked
 10929  003942  9B1D               	bcf	29,5,b	;volatile
 10930  003944                     l446:
 10931                           
 10932                           ; BSR set to: 15
 10933                           ;inc\CANlib.h: 728: if (mask & 0x00080000)
 10934  003944  0100               	movlb	0	; () banked
 10935  003946  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 10936  003948  D003               	goto	l447
 10937                           
 10938                           ; BSR set to: 0
 10939                           ;inc\CANlib.h: 729: RXM1SIDLbits.SID1 = 0x01;
 10940  00394A  010F               	movlb	15	; () banked
 10941  00394C  8D1D               	bsf	29,6,b	;volatile
 10942  00394E  D002               	goto	l448
 10943  003950                     l447:
 10944                           
 10945                           ; BSR set to: 0
 10946                           ;inc\CANlib.h: 730: else
 10947                           ;inc\CANlib.h: 731: RXM1SIDLbits.SID1 = 0x00;
 10948  003950  010F               	movlb	15	; () banked
 10949  003952  9D1D               	bcf	29,6,b	;volatile
 10950  003954                     l448:
 10951                           
 10952                           ; BSR set to: 15
 10953                           ;inc\CANlib.h: 733: if (mask & 0x00100000)
 10954  003954  0100               	movlb	0	; () banked
 10955  003956  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 10956  003958  D003               	goto	l449
 10957                           
 10958                           ; BSR set to: 0
 10959                           ;inc\CANlib.h: 734: RXM1SIDLbits.SID2 = 0x01 ;
 10960  00395A  010F               	movlb	15	; () banked
 10961  00395C  8F1D               	bsf	29,7,b	;volatile
 10962  00395E  D003               	goto	l4552
 10963  003960                     l449:
 10964                           
 10965                           ; BSR set to: 0
 10966                           ;inc\CANlib.h: 735: else
 10967                           ;inc\CANlib.h: 736: RXM1SIDLbits.SID2 = 0x00 ;
 10968  003960  010F               	movlb	15	; () banked
 10969  003962  9F1D               	bcf	29,7,b	;volatile
 10970  003964  D000               	goto	l4552
 10971  003966                     l4552:
 10972                           
 10973                           ; BSR set to: 15
 10974                           ;inc\CANlib.h: 738: tamp = (mask >> 21);
 10975  003966  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10976  00396A  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10977  00396E  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10978  003972  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10979  003976  0E16               	movlw	22
 10980  003978  D006               	goto	u5040
 10981  00397A                     u5045:
 10982  00397A  0100               	movlb	0	; () banked
 10983  00397C  90D8               	bcf	status,0,c
 10984  00397E  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10985  003980  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10986  003982  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10987  003984  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10988  003986                     u5040:
 10989  003986  2EE8               	decfsz	wreg,f,c
 10990  003988  D7F8               	goto	u5045
 10991  00398A  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10992  00398E  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10993  003992  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10994  003996  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10995                           
 10996                           ; BSR set to: 0
 10997                           ;inc\CANlib.h: 739: tamp = tamp & 0x000000FF;
 10998  00399A  0100               	movlb	0	; () banked
 10999  00399C  5181               	movf	CANSetMask@tamp& (0+255),w,b
 11000  00399E  0100               	movlb	0	; () banked
 11001  0039A0  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11002  0039A2  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 11003  0039A4  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 11004  0039A6  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 11005                           
 11006                           ; BSR set to: 0
 11007                           ;inc\CANlib.h: 740: RXM1SIDH = (unsigned char) tamp;
 11008  0039A8  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 11009  0039AC  0012               	return	
 11010                           
 11011                           ; BSR set to: 0
 11012                           
 11013                           ; BSR set to: 0
 11014  0039AE  0012               	return		;funcret
 11015  0039B0                     __end_of_CANSetMask:
 11016                           	opt stack 0
 11017                           tblptru	equ	0xFF8
 11018                           tblptrh	equ	0xFF7
 11019                           tblptrl	equ	0xFF6
 11020                           tablat	equ	0xFF5
 11021                           prodh	equ	0xFF4
 11022                           prodl	equ	0xFF3
 11023                           intcon	equ	0xFF2
 11024                           intcon2	equ	0xFF1
 11025                           postinc0	equ	0xFEE
 11026                           wreg	equ	0xFE8
 11027                           postdec1	equ	0xFE5
 11028                           fsr1l	equ	0xFE1
 11029                           indf2	equ	0xFDF
 11030                           postinc2	equ	0xFDE
 11031                           postdec2	equ	0xFDD
 11032                           fsr2h	equ	0xFDA
 11033                           fsr2l	equ	0xFD9
 11034                           status	equ	0xFD8
 11035                           
 11036 ;; *************** function _CANSetFilter *****************
 11037 ;; Defined at:
 11038 ;;		line 748 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 11039 ;; Parameters:    Size  Location     Type
 11040 ;;  numBuffer       1    wreg     enum E16391
 11041 ;;  filter          4   23[BANK0 ] unsigned long 
 11042 ;;  type            1   27[BANK0 ] enum E16354
 11043 ;; Auto vars:     Size  Location     Type
 11044 ;;  numBuffer       1   32[BANK0 ] enum E16391
 11045 ;;  tamp            4   33[BANK0 ] unsigned long 
 11046 ;; Return value:  Size  Location     Type
 11047 ;;		None               void
 11048 ;; Registers used:
 11049 ;;		wreg, status,2, status,0
 11050 ;; Tracked objects:
 11051 ;;		On entry : 0/0
 11052 ;;		On exit  : 0/0
 11053 ;;		Unchanged: 0/0
 11054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11055 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11056 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11057 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11058 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11059 ;;Total ram usage:       14 bytes
 11060 ;; Hardware stack levels used:    1
 11061 ;; Hardware stack levels required when called:    5
 11062 ;; This function calls:
 11063 ;;		Nothing
 11064 ;; This function is called by:
 11065 ;;		_CANInitialize
 11066 ;; This function uses a non-reentrant model
 11067 ;;
 11068                           
 11069                           	psect	text35
 11070  000D52                     __ptext35:
 11071                           	opt stack 0
 11072  000D52                     _CANSetFilter:
 11073                           	opt stack 23
 11074                           
 11075                           ; BSR set to: 0
 11076                           ;incstack = 0
 11077                           ;CANSetFilter@numBuffer stored from wreg
 11078  000D52  0100               	movlb	0	; () banked
 11079  000D54  6F80               	movwf	CANSetFilter@numBuffer& (0+255),b
 11080                           
 11081                           ; BSR set to: 0
 11082                           ;inc\CANlib.h: 750: unsigned long tamp;
 11083                           ;inc\CANlib.h: 752: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_STD_MSG))
 11084  000D56  0100               	movlb	0	; () banked
 11085  000D58  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 11086  000D5A  0100               	movlb	0	; () banked
 11087  000D5C  A4D8               	btfss	status,2,c
 11088  000D5E  D059               	goto	l4576
 11089                           
 11090                           ; BSR set to: 0
 11091  000D60  0100               	movlb	0	; () banked
 11092  000D62  297B               	incf	CANSetFilter@type& (0+255),w,b
 11093  000D64  A4D8               	btfss	status,2,c
 11094  000D66  D055               	goto	l4576
 11095                           
 11096                           ; BSR set to: 0
 11097                           ;inc\CANlib.h: 753: {
 11098                           ;inc\CANlib.h: 754: RXF0SIDLbits.EXIDEN = 0x00;
 11099  000D68  010F               	movlb	15	; () banked
 11100  000D6A  9701               	bcf	1,3,b	;volatile
 11101                           
 11102                           ; BSR set to: 15
 11103                           ;inc\CANlib.h: 756: tamp = (filter >> 3);
 11104  000D6C  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11105  000D70  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11106  000D74  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11107  000D78  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11108  000D7C  0E04               	movlw	4
 11109  000D7E  D006               	goto	u5070
 11110  000D80                     u5075:
 11111  000D80  0100               	movlb	0	; () banked
 11112  000D82  90D8               	bcf	status,0,c
 11113  000D84  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11114  000D86  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11115  000D88  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11116  000D8A  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11117  000D8C                     u5070:
 11118  000D8C  2EE8               	decfsz	wreg,f,c
 11119  000D8E  D7F8               	goto	u5075
 11120  000D90  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11121  000D94  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11122  000D98  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11123  000D9C  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11124                           
 11125                           ; BSR set to: 0
 11126                           ;inc\CANlib.h: 757: tamp = tamp & 0x000000FF;
 11127  000DA0  0100               	movlb	0	; () banked
 11128  000DA2  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11129  000DA4  0100               	movlb	0	; () banked
 11130  000DA6  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11131  000DA8  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11132  000DAA  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11133  000DAC  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11134                           
 11135                           ; BSR set to: 0
 11136                           ;inc\CANlib.h: 758: RXF0SIDH = (unsigned char) tamp;
 11137  000DAE  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 11138                           
 11139                           ; BSR set to: 0
 11140                           ;inc\CANlib.h: 760: tamp = filter & 0x00000007;
 11141  000DB2  0E07               	movlw	7
 11142  000DB4  0100               	movlb	0	; () banked
 11143  000DB6  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11144  000DB8  0100               	movlb	0	; () banked
 11145  000DBA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11146  000DBC  0E00               	movlw	0
 11147  000DBE  0100               	movlb	0	; () banked
 11148  000DC0  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11149  000DC2  0100               	movlb	0	; () banked
 11150  000DC4  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11151  000DC6  0E00               	movlw	0
 11152  000DC8  0100               	movlb	0	; () banked
 11153  000DCA  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11154  000DCC  0100               	movlb	0	; () banked
 11155  000DCE  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11156  000DD0  0E00               	movlw	0
 11157  000DD2  0100               	movlb	0	; () banked
 11158  000DD4  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11159  000DD6  0100               	movlb	0	; () banked
 11160  000DD8  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;inc\CANlib.h: 761: tamp = tamp << 5;
 11164  000DDA  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11165  000DDE  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11166  000DE2  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11167  000DE6  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11168  000DEA  0E05               	movlw	5
 11169  000DEC                     u5085:
 11170  000DEC  90D8               	bcf	status,0,c
 11171  000DEE  0100               	movlb	0	; () banked
 11172  000DF0  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11173  000DF2  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11174  000DF4  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11175  000DF6  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11176  000DF8  2EE8               	decfsz	wreg,f,c
 11177  000DFA  D7F8               	goto	u5085
 11178  000DFC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11179  000E00  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11180  000E04  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11181  000E08  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11182                           
 11183                           ; BSR set to: 0
 11184                           ;inc\CANlib.h: 762: RXF0SIDL = (unsigned char) tamp;
 11185  000E0C  C081  FF01         	movff	CANSetFilter@tamp,3841	;volatile
 11186  000E10  D000               	goto	l4576
 11187  000E12                     l4576:
 11188                           
 11189                           ; BSR set to: 0
 11190                           ;inc\CANlib.h: 763: }
 11191                           ;inc\CANlib.h: 765: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_STD_MSG))
 11192  000E12  0100               	movlb	0	; () banked
 11193  000E14  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 11194  000E16  A4D8               	btfss	status,2,c
 11195  000E18  D059               	goto	l4594
 11196                           
 11197                           ; BSR set to: 0
 11198  000E1A  0100               	movlb	0	; () banked
 11199  000E1C  297B               	incf	CANSetFilter@type& (0+255),w,b
 11200  000E1E  A4D8               	btfss	status,2,c
 11201  000E20  D055               	goto	l4594
 11202                           
 11203                           ; BSR set to: 0
 11204                           ;inc\CANlib.h: 766: {
 11205                           ;inc\CANlib.h: 767: RXF1SIDLbits.EXIDEN = 0x00;
 11206  000E22  010F               	movlb	15	; () banked
 11207  000E24  9705               	bcf	5,3,b	;volatile
 11208                           
 11209                           ; BSR set to: 15
 11210                           ;inc\CANlib.h: 769: tamp = (filter >> 3);
 11211  000E26  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11212  000E2A  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11213  000E2E  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11214  000E32  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11215  000E36  0E04               	movlw	4
 11216  000E38  D006               	goto	u5110
 11217  000E3A                     u5115:
 11218  000E3A  0100               	movlb	0	; () banked
 11219  000E3C  90D8               	bcf	status,0,c
 11220  000E3E  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11221  000E40  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11222  000E42  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11223  000E44  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11224  000E46                     u5110:
 11225  000E46  2EE8               	decfsz	wreg,f,c
 11226  000E48  D7F8               	goto	u5115
 11227  000E4A  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11228  000E4E  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11229  000E52  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11230  000E56  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11231                           
 11232                           ; BSR set to: 0
 11233                           ;inc\CANlib.h: 770: tamp = tamp & 0x000000FF;
 11234  000E5A  0100               	movlb	0	; () banked
 11235  000E5C  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11236  000E5E  0100               	movlb	0	; () banked
 11237  000E60  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11238  000E62  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11239  000E64  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11240  000E66  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11241                           
 11242                           ; BSR set to: 0
 11243                           ;inc\CANlib.h: 771: RXF1SIDH = (unsigned char) tamp;
 11244  000E68  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;inc\CANlib.h: 773: tamp = filter & 0x00000007;
 11248  000E6C  0E07               	movlw	7
 11249  000E6E  0100               	movlb	0	; () banked
 11250  000E70  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11251  000E72  0100               	movlb	0	; () banked
 11252  000E74  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11253  000E76  0E00               	movlw	0
 11254  000E78  0100               	movlb	0	; () banked
 11255  000E7A  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11256  000E7C  0100               	movlb	0	; () banked
 11257  000E7E  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11258  000E80  0E00               	movlw	0
 11259  000E82  0100               	movlb	0	; () banked
 11260  000E84  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11261  000E86  0100               	movlb	0	; () banked
 11262  000E88  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11263  000E8A  0E00               	movlw	0
 11264  000E8C  0100               	movlb	0	; () banked
 11265  000E8E  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11266  000E90  0100               	movlb	0	; () banked
 11267  000E92  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11268                           
 11269                           ; BSR set to: 0
 11270                           ;inc\CANlib.h: 774: tamp = tamp << 5;
 11271  000E94  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11272  000E98  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11273  000E9C  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11274  000EA0  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11275  000EA4  0E05               	movlw	5
 11276  000EA6                     u5125:
 11277  000EA6  90D8               	bcf	status,0,c
 11278  000EA8  0100               	movlb	0	; () banked
 11279  000EAA  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11280  000EAC  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11281  000EAE  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11282  000EB0  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11283  000EB2  2EE8               	decfsz	wreg,f,c
 11284  000EB4  D7F8               	goto	u5125
 11285  000EB6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11286  000EBA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11287  000EBE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11288  000EC2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11289                           
 11290                           ; BSR set to: 0
 11291                           ;inc\CANlib.h: 775: RXF1SIDL = (unsigned char) tamp;
 11292  000EC6  C081  FF05         	movff	CANSetFilter@tamp,3845	;volatile
 11293  000ECA  D000               	goto	l4594
 11294  000ECC                     l4594:
 11295                           
 11296                           ; BSR set to: 0
 11297                           ;inc\CANlib.h: 776: }
 11298                           ;inc\CANlib.h: 778: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_STD_MSG))
 11299  000ECC  0E02               	movlw	2
 11300  000ECE  0100               	movlb	0	; () banked
 11301  000ED0  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11302  000ED2  A4D8               	btfss	status,2,c
 11303  000ED4  D059               	goto	l4612
 11304                           
 11305                           ; BSR set to: 0
 11306  000ED6  0100               	movlb	0	; () banked
 11307  000ED8  297B               	incf	CANSetFilter@type& (0+255),w,b
 11308  000EDA  A4D8               	btfss	status,2,c
 11309  000EDC  D055               	goto	l4612
 11310                           
 11311                           ; BSR set to: 0
 11312                           ;inc\CANlib.h: 779: {
 11313                           ;inc\CANlib.h: 780: RXF2SIDLbits.EXIDEN = 0x00;
 11314  000EDE  010F               	movlb	15	; () banked
 11315  000EE0  9709               	bcf	9,3,b	;volatile
 11316                           
 11317                           ; BSR set to: 15
 11318                           ;inc\CANlib.h: 782: tamp = (filter >> 3);
 11319  000EE2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11320  000EE6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11321  000EEA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11322  000EEE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11323  000EF2  0E04               	movlw	4
 11324  000EF4  D006               	goto	u5150
 11325  000EF6                     u5155:
 11326  000EF6  0100               	movlb	0	; () banked
 11327  000EF8  90D8               	bcf	status,0,c
 11328  000EFA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11329  000EFC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11330  000EFE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11331  000F00  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11332  000F02                     u5150:
 11333  000F02  2EE8               	decfsz	wreg,f,c
 11334  000F04  D7F8               	goto	u5155
 11335  000F06  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11336  000F0A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11337  000F0E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11338  000F12  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11339                           
 11340                           ; BSR set to: 0
 11341                           ;inc\CANlib.h: 783: tamp = tamp & 0x000000FF;
 11342  000F16  0100               	movlb	0	; () banked
 11343  000F18  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11344  000F1A  0100               	movlb	0	; () banked
 11345  000F1C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11346  000F1E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11347  000F20  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11348  000F22  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11349                           
 11350                           ; BSR set to: 0
 11351                           ;inc\CANlib.h: 784: RXF2SIDH = (unsigned char) tamp;
 11352  000F24  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 11353                           
 11354                           ; BSR set to: 0
 11355                           ;inc\CANlib.h: 786: tamp = filter & 0x00000007;
 11356  000F28  0E07               	movlw	7
 11357  000F2A  0100               	movlb	0	; () banked
 11358  000F2C  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11359  000F2E  0100               	movlb	0	; () banked
 11360  000F30  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11361  000F32  0E00               	movlw	0
 11362  000F34  0100               	movlb	0	; () banked
 11363  000F36  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11364  000F38  0100               	movlb	0	; () banked
 11365  000F3A  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11366  000F3C  0E00               	movlw	0
 11367  000F3E  0100               	movlb	0	; () banked
 11368  000F40  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11369  000F42  0100               	movlb	0	; () banked
 11370  000F44  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11371  000F46  0E00               	movlw	0
 11372  000F48  0100               	movlb	0	; () banked
 11373  000F4A  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11374  000F4C  0100               	movlb	0	; () banked
 11375  000F4E  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11376                           
 11377                           ; BSR set to: 0
 11378                           ;inc\CANlib.h: 787: tamp = tamp << 5;
 11379  000F50  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11380  000F54  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11381  000F58  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11382  000F5C  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11383  000F60  0E05               	movlw	5
 11384  000F62                     u5165:
 11385  000F62  90D8               	bcf	status,0,c
 11386  000F64  0100               	movlb	0	; () banked
 11387  000F66  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11388  000F68  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11389  000F6A  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11390  000F6C  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11391  000F6E  2EE8               	decfsz	wreg,f,c
 11392  000F70  D7F8               	goto	u5165
 11393  000F72  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11394  000F76  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11395  000F7A  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11396  000F7E  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;inc\CANlib.h: 788: RXF2SIDL = (unsigned char) tamp;
 11400  000F82  C081  FF09         	movff	CANSetFilter@tamp,3849	;volatile
 11401  000F86  D000               	goto	l4612
 11402  000F88                     l4612:
 11403                           
 11404                           ; BSR set to: 0
 11405                           ;inc\CANlib.h: 789: }
 11406                           ;inc\CANlib.h: 791: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_STD_MSG))
 11407  000F88  0E03               	movlw	3
 11408  000F8A  0100               	movlb	0	; () banked
 11409  000F8C  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11410  000F8E  A4D8               	btfss	status,2,c
 11411  000F90  D059               	goto	l4630
 11412                           
 11413                           ; BSR set to: 0
 11414  000F92  0100               	movlb	0	; () banked
 11415  000F94  297B               	incf	CANSetFilter@type& (0+255),w,b
 11416  000F96  A4D8               	btfss	status,2,c
 11417  000F98  D055               	goto	l4630
 11418                           
 11419                           ; BSR set to: 0
 11420                           ;inc\CANlib.h: 792: {
 11421                           ;inc\CANlib.h: 793: RXF3SIDLbits.EXIDEN = 0x00;
 11422  000F9A  010F               	movlb	15	; () banked
 11423  000F9C  970D               	bcf	13,3,b	;volatile
 11424                           
 11425                           ; BSR set to: 15
 11426                           ;inc\CANlib.h: 795: tamp = (filter >> 3);
 11427  000F9E  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11428  000FA2  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11429  000FA6  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11430  000FAA  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11431  000FAE  0E04               	movlw	4
 11432  000FB0  D006               	goto	u5190
 11433  000FB2                     u5195:
 11434  000FB2  0100               	movlb	0	; () banked
 11435  000FB4  90D8               	bcf	status,0,c
 11436  000FB6  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11437  000FB8  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11438  000FBA  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11439  000FBC  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11440  000FBE                     u5190:
 11441  000FBE  2EE8               	decfsz	wreg,f,c
 11442  000FC0  D7F8               	goto	u5195
 11443  000FC2  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11444  000FC6  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11445  000FCA  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11446  000FCE  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11447                           
 11448                           ; BSR set to: 0
 11449                           ;inc\CANlib.h: 796: tamp = tamp & 0x000000FF;
 11450  000FD2  0100               	movlb	0	; () banked
 11451  000FD4  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11452  000FD6  0100               	movlb	0	; () banked
 11453  000FD8  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11454  000FDA  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11455  000FDC  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11456  000FDE  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;inc\CANlib.h: 797: RXF3SIDH = (unsigned char) tamp;
 11460  000FE0  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;inc\CANlib.h: 799: tamp = filter & 0x00000007;
 11464  000FE4  0E07               	movlw	7
 11465  000FE6  0100               	movlb	0	; () banked
 11466  000FE8  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11467  000FEA  0100               	movlb	0	; () banked
 11468  000FEC  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11469  000FEE  0E00               	movlw	0
 11470  000FF0  0100               	movlb	0	; () banked
 11471  000FF2  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11472  000FF4  0100               	movlb	0	; () banked
 11473  000FF6  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11474  000FF8  0E00               	movlw	0
 11475  000FFA  0100               	movlb	0	; () banked
 11476  000FFC  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11477  000FFE  0100               	movlb	0	; () banked
 11478  001000  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11479  001002  0E00               	movlw	0
 11480  001004  0100               	movlb	0	; () banked
 11481  001006  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11482  001008  0100               	movlb	0	; () banked
 11483  00100A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11484                           
 11485                           ; BSR set to: 0
 11486                           ;inc\CANlib.h: 800: tamp = tamp << 5;
 11487  00100C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11488  001010  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11489  001014  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11490  001018  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11491  00101C  0E05               	movlw	5
 11492  00101E                     u5205:
 11493  00101E  90D8               	bcf	status,0,c
 11494  001020  0100               	movlb	0	; () banked
 11495  001022  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11496  001024  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11497  001026  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11498  001028  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11499  00102A  2EE8               	decfsz	wreg,f,c
 11500  00102C  D7F8               	goto	u5205
 11501  00102E  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11502  001032  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11503  001036  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11504  00103A  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11505                           
 11506                           ; BSR set to: 0
 11507                           ;inc\CANlib.h: 801: RXF3SIDL = (unsigned char) tamp;
 11508  00103E  C081  FF0D         	movff	CANSetFilter@tamp,3853	;volatile
 11509  001042  D000               	goto	l4630
 11510  001044                     l4630:
 11511                           
 11512                           ; BSR set to: 0
 11513                           ;inc\CANlib.h: 802: }
 11514                           ;inc\CANlib.h: 804: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_STD_MSG))
 11515  001044  0E04               	movlw	4
 11516  001046  0100               	movlb	0	; () banked
 11517  001048  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11518  00104A  A4D8               	btfss	status,2,c
 11519  00104C  D059               	goto	l4648
 11520                           
 11521                           ; BSR set to: 0
 11522  00104E  0100               	movlb	0	; () banked
 11523  001050  297B               	incf	CANSetFilter@type& (0+255),w,b
 11524  001052  A4D8               	btfss	status,2,c
 11525  001054  D055               	goto	l4648
 11526                           
 11527                           ; BSR set to: 0
 11528                           ;inc\CANlib.h: 805: {
 11529                           ;inc\CANlib.h: 806: RXF4SIDLbits.EXIDEN = 0x00;
 11530  001056  010F               	movlb	15	; () banked
 11531  001058  9711               	bcf	17,3,b	;volatile
 11532                           
 11533                           ; BSR set to: 15
 11534                           ;inc\CANlib.h: 808: tamp = (filter >> 3);
 11535  00105A  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11536  00105E  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11537  001062  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11538  001066  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11539  00106A  0E04               	movlw	4
 11540  00106C  D006               	goto	u5230
 11541  00106E                     u5235:
 11542  00106E  0100               	movlb	0	; () banked
 11543  001070  90D8               	bcf	status,0,c
 11544  001072  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11545  001074  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11546  001076  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11547  001078  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11548  00107A                     u5230:
 11549  00107A  2EE8               	decfsz	wreg,f,c
 11550  00107C  D7F8               	goto	u5235
 11551  00107E  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11552  001082  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11553  001086  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11554  00108A  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11555                           
 11556                           ; BSR set to: 0
 11557                           ;inc\CANlib.h: 809: tamp = tamp & 0x000000FF;
 11558  00108E  0100               	movlb	0	; () banked
 11559  001090  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11560  001092  0100               	movlb	0	; () banked
 11561  001094  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11562  001096  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11563  001098  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11564  00109A  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11565                           
 11566                           ; BSR set to: 0
 11567                           ;inc\CANlib.h: 810: RXF4SIDH = (unsigned char) tamp;
 11568  00109C  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;inc\CANlib.h: 812: tamp = filter & 0x00000007;
 11572  0010A0  0E07               	movlw	7
 11573  0010A2  0100               	movlb	0	; () banked
 11574  0010A4  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11575  0010A6  0100               	movlb	0	; () banked
 11576  0010A8  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11577  0010AA  0E00               	movlw	0
 11578  0010AC  0100               	movlb	0	; () banked
 11579  0010AE  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11580  0010B0  0100               	movlb	0	; () banked
 11581  0010B2  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11582  0010B4  0E00               	movlw	0
 11583  0010B6  0100               	movlb	0	; () banked
 11584  0010B8  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11585  0010BA  0100               	movlb	0	; () banked
 11586  0010BC  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11587  0010BE  0E00               	movlw	0
 11588  0010C0  0100               	movlb	0	; () banked
 11589  0010C2  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11590  0010C4  0100               	movlb	0	; () banked
 11591  0010C6  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11592                           
 11593                           ; BSR set to: 0
 11594                           ;inc\CANlib.h: 813: tamp = tamp << 5;
 11595  0010C8  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11596  0010CC  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11597  0010D0  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11598  0010D4  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11599  0010D8  0E05               	movlw	5
 11600  0010DA                     u5245:
 11601  0010DA  90D8               	bcf	status,0,c
 11602  0010DC  0100               	movlb	0	; () banked
 11603  0010DE  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11604  0010E0  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11605  0010E2  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11606  0010E4  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11607  0010E6  2EE8               	decfsz	wreg,f,c
 11608  0010E8  D7F8               	goto	u5245
 11609  0010EA  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11610  0010EE  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11611  0010F2  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11612  0010F6  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11613                           
 11614                           ; BSR set to: 0
 11615                           ;inc\CANlib.h: 814: RXF4SIDL = (unsigned char) tamp;
 11616  0010FA  C081  FF11         	movff	CANSetFilter@tamp,3857	;volatile
 11617  0010FE  D000               	goto	l4648
 11618  001100                     l4648:
 11619                           
 11620                           ; BSR set to: 0
 11621                           ;inc\CANlib.h: 815: }
 11622                           ;inc\CANlib.h: 817: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_STD_MSG))
 11623  001100  0E05               	movlw	5
 11624  001102  0100               	movlb	0	; () banked
 11625  001104  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11626  001106  A4D8               	btfss	status,2,c
 11627  001108  D059               	goto	l4666
 11628                           
 11629                           ; BSR set to: 0
 11630  00110A  0100               	movlb	0	; () banked
 11631  00110C  297B               	incf	CANSetFilter@type& (0+255),w,b
 11632  00110E  A4D8               	btfss	status,2,c
 11633  001110  D055               	goto	l4666
 11634                           
 11635                           ; BSR set to: 0
 11636                           ;inc\CANlib.h: 818: {
 11637                           ;inc\CANlib.h: 819: RXF5SIDLbits.EXIDEN = 0x00;
 11638  001112  010F               	movlb	15	; () banked
 11639  001114  9715               	bcf	21,3,b	;volatile
 11640                           
 11641                           ; BSR set to: 15
 11642                           ;inc\CANlib.h: 821: tamp = (filter >> 3);
 11643  001116  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11644  00111A  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11645  00111E  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11646  001122  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11647  001126  0E04               	movlw	4
 11648  001128  D006               	goto	u5270
 11649  00112A                     u5275:
 11650  00112A  0100               	movlb	0	; () banked
 11651  00112C  90D8               	bcf	status,0,c
 11652  00112E  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11653  001130  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11654  001132  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11655  001134  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11656  001136                     u5270:
 11657  001136  2EE8               	decfsz	wreg,f,c
 11658  001138  D7F8               	goto	u5275
 11659  00113A  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11660  00113E  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11661  001142  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11662  001146  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11663                           
 11664                           ; BSR set to: 0
 11665                           ;inc\CANlib.h: 822: tamp = tamp & 0x000000FF;
 11666  00114A  0100               	movlb	0	; () banked
 11667  00114C  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11668  00114E  0100               	movlb	0	; () banked
 11669  001150  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11670  001152  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11671  001154  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11672  001156  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;inc\CANlib.h: 823: RXF5SIDH = (unsigned char) tamp;
 11676  001158  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 11677                           
 11678                           ; BSR set to: 0
 11679                           ;inc\CANlib.h: 825: tamp = filter & 0x00000007;
 11680  00115C  0E07               	movlw	7
 11681  00115E  0100               	movlb	0	; () banked
 11682  001160  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11683  001162  0100               	movlb	0	; () banked
 11684  001164  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11685  001166  0E00               	movlw	0
 11686  001168  0100               	movlb	0	; () banked
 11687  00116A  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11688  00116C  0100               	movlb	0	; () banked
 11689  00116E  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11690  001170  0E00               	movlw	0
 11691  001172  0100               	movlb	0	; () banked
 11692  001174  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11693  001176  0100               	movlb	0	; () banked
 11694  001178  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11695  00117A  0E00               	movlw	0
 11696  00117C  0100               	movlb	0	; () banked
 11697  00117E  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11698  001180  0100               	movlb	0	; () banked
 11699  001182  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11700                           
 11701                           ; BSR set to: 0
 11702                           ;inc\CANlib.h: 826: tamp = tamp << 5;
 11703  001184  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11704  001188  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11705  00118C  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11706  001190  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11707  001194  0E05               	movlw	5
 11708  001196                     u5285:
 11709  001196  90D8               	bcf	status,0,c
 11710  001198  0100               	movlb	0	; () banked
 11711  00119A  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11712  00119C  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11713  00119E  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11714  0011A0  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11715  0011A2  2EE8               	decfsz	wreg,f,c
 11716  0011A4  D7F8               	goto	u5285
 11717  0011A6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11718  0011AA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11719  0011AE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11720  0011B2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11721                           
 11722                           ; BSR set to: 0
 11723                           ;inc\CANlib.h: 827: RXF5SIDL = (unsigned char) tamp;
 11724  0011B6  C081  FF15         	movff	CANSetFilter@tamp,3861	;volatile
 11725  0011BA  D000               	goto	l4666
 11726  0011BC                     l4666:
 11727                           
 11728                           ; BSR set to: 0
 11729                           ;inc\CANlib.h: 828: }
 11730                           ;inc\CANlib.h: 831: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_XTD_MSG))
 11731  0011BC  0100               	movlb	0	; () banked
 11732  0011BE  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 11733  0011C0  0100               	movlb	0	; () banked
 11734  0011C2  A4D8               	btfss	status,2,c
 11735  0011C4  D08B               	goto	l4700
 11736                           
 11737                           ; BSR set to: 0
 11738  0011C6  0EF7               	movlw	247
 11739  0011C8  0100               	movlb	0	; () banked
 11740  0011CA  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 11741  0011CC  A4D8               	btfss	status,2,c
 11742  0011CE  D086               	goto	l4700
 11743                           
 11744                           ; BSR set to: 0
 11745                           ;inc\CANlib.h: 832: {
 11746                           ;inc\CANlib.h: 833: RXF0SIDLbits.EXIDEN = 0x01;
 11747  0011D0  010F               	movlb	15	; () banked
 11748  0011D2  8701               	bsf	1,3,b	;volatile
 11749                           
 11750                           ; BSR set to: 15
 11751                           ;inc\CANlib.h: 835: tamp = filter & 0x000000FF;
 11752  0011D4  0100               	movlb	0	; () banked
 11753  0011D6  5177               	movf	CANSetFilter@filter& (0+255),w,b
 11754  0011D8  0100               	movlb	0	; () banked
 11755  0011DA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11756  0011DC  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11757  0011DE  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11758  0011E0  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;inc\CANlib.h: 836: RXF0EIDL = (unsigned char) tamp;
 11762  0011E2  C081  FF03         	movff	CANSetFilter@tamp,3843	;volatile
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;inc\CANlib.h: 838: tamp = filter & 0x0000FF00;
 11766  0011E6  0E00               	movlw	0
 11767  0011E8  0100               	movlb	0	; () banked
 11768  0011EA  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11769  0011EC  0100               	movlb	0	; () banked
 11770  0011EE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11771  0011F0  0EFF               	movlw	255
 11772  0011F2  0100               	movlb	0	; () banked
 11773  0011F4  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11774  0011F6  0100               	movlb	0	; () banked
 11775  0011F8  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11776  0011FA  0E00               	movlw	0
 11777  0011FC  0100               	movlb	0	; () banked
 11778  0011FE  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11779  001200  0100               	movlb	0	; () banked
 11780  001202  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11781  001204  0E00               	movlw	0
 11782  001206  0100               	movlb	0	; () banked
 11783  001208  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11784  00120A  0100               	movlb	0	; () banked
 11785  00120C  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11786                           
 11787                           ; BSR set to: 0
 11788                           ;inc\CANlib.h: 839: tamp = tamp >> 8;
 11789  00120E  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11790  001212  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11791  001216  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11792  00121A  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11793  00121E  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 11794  001222  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 11795  001226  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 11796  00122A  0100               	movlb	0	; () banked
 11797  00122C  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 11798  00122E  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11799  001232  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11800  001236  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11801  00123A  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11802                           
 11803                           ; BSR set to: 0
 11804                           ;inc\CANlib.h: 840: RXF0EIDH = (unsigned char) tamp;
 11805  00123E  C081  FF02         	movff	CANSetFilter@tamp,3842	;volatile
 11806                           
 11807                           ; BSR set to: 0
 11808                           ;inc\CANlib.h: 842: if (filter & 0x00010000)
 11809  001242  0100               	movlb	0	; () banked
 11810  001244  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 11811  001246  D003               	goto	l461
 11812                           
 11813                           ; BSR set to: 0
 11814                           ;inc\CANlib.h: 843: RXF0SIDLbits.EID16 = 0x01;
 11815  001248  010F               	movlb	15	; () banked
 11816  00124A  8101               	bsf	1,0,b	;volatile
 11817  00124C  D002               	goto	l462
 11818  00124E                     l461:
 11819                           
 11820                           ; BSR set to: 0
 11821                           ;inc\CANlib.h: 844: else
 11822                           ;inc\CANlib.h: 845: RXF0SIDLbits.EID16 = 0x00;
 11823  00124E  010F               	movlb	15	; () banked
 11824  001250  9101               	bcf	1,0,b	;volatile
 11825  001252                     l462:
 11826                           
 11827                           ; BSR set to: 15
 11828                           ;inc\CANlib.h: 847: if (filter & 0x00020000)
 11829  001252  0100               	movlb	0	; () banked
 11830  001254  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 11831  001256  D003               	goto	l463
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;inc\CANlib.h: 848: RXF0SIDLbits.EID17 = 0x01;
 11835  001258  010F               	movlb	15	; () banked
 11836  00125A  8301               	bsf	1,1,b	;volatile
 11837  00125C  D002               	goto	l464
 11838  00125E                     l463:
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;inc\CANlib.h: 849: else
 11842                           ;inc\CANlib.h: 850: RXF0SIDLbits.EID17 = 0x00;
 11843  00125E  010F               	movlb	15	; () banked
 11844  001260  9301               	bcf	1,1,b	;volatile
 11845  001262                     l464:
 11846                           
 11847                           ; BSR set to: 15
 11848                           ;inc\CANlib.h: 852: if (filter & 0x00040000)
 11849  001262  0100               	movlb	0	; () banked
 11850  001264  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 11851  001266  D003               	goto	l465
 11852                           
 11853                           ; BSR set to: 0
 11854                           ;inc\CANlib.h: 853: RXF0SIDLbits.SID0 = 0x01;
 11855  001268  010F               	movlb	15	; () banked
 11856  00126A  8B01               	bsf	1,5,b	;volatile
 11857  00126C  D002               	goto	l466
 11858  00126E                     l465:
 11859                           
 11860                           ; BSR set to: 0
 11861                           ;inc\CANlib.h: 854: else
 11862                           ;inc\CANlib.h: 855: RXF0SIDLbits.SID0 = 0x00;
 11863  00126E  010F               	movlb	15	; () banked
 11864  001270  9B01               	bcf	1,5,b	;volatile
 11865  001272                     l466:
 11866                           
 11867                           ; BSR set to: 15
 11868                           ;inc\CANlib.h: 857: if (filter & 0x00080000)
 11869  001272  0100               	movlb	0	; () banked
 11870  001274  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 11871  001276  D003               	goto	l467
 11872                           
 11873                           ; BSR set to: 0
 11874                           ;inc\CANlib.h: 858: RXF0SIDLbits.SID1 = 0x01;
 11875  001278  010F               	movlb	15	; () banked
 11876  00127A  8D01               	bsf	1,6,b	;volatile
 11877  00127C  D002               	goto	l468
 11878  00127E                     l467:
 11879                           
 11880                           ; BSR set to: 0
 11881                           ;inc\CANlib.h: 859: else
 11882                           ;inc\CANlib.h: 860: RXF0SIDLbits.SID1 = 0x00;
 11883  00127E  010F               	movlb	15	; () banked
 11884  001280  9D01               	bcf	1,6,b	;volatile
 11885  001282                     l468:
 11886                           
 11887                           ; BSR set to: 15
 11888                           ;inc\CANlib.h: 862: if (filter & 0x00100000)
 11889  001282  0100               	movlb	0	; () banked
 11890  001284  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 11891  001286  D003               	goto	l469
 11892                           
 11893                           ; BSR set to: 0
 11894                           ;inc\CANlib.h: 863: RXF0SIDLbits.SID2 = 0x01 ;
 11895  001288  010F               	movlb	15	; () banked
 11896  00128A  8F01               	bsf	1,7,b	;volatile
 11897  00128C  D003               	goto	l4694
 11898  00128E                     l469:
 11899                           
 11900                           ; BSR set to: 0
 11901                           ;inc\CANlib.h: 864: else
 11902                           ;inc\CANlib.h: 865: RXF0SIDLbits.SID2 = 0x00 ;
 11903  00128E  010F               	movlb	15	; () banked
 11904  001290  9F01               	bcf	1,7,b	;volatile
 11905  001292  D000               	goto	l4694
 11906  001294                     l4694:
 11907                           
 11908                           ; BSR set to: 15
 11909                           ;inc\CANlib.h: 867: tamp = (filter >> 21);
 11910  001294  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11911  001298  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11912  00129C  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11913  0012A0  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11914  0012A4  0E16               	movlw	22
 11915  0012A6  D006               	goto	u5360
 11916  0012A8                     u5365:
 11917  0012A8  0100               	movlb	0	; () banked
 11918  0012AA  90D8               	bcf	status,0,c
 11919  0012AC  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11920  0012AE  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11921  0012B0  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11922  0012B2  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11923  0012B4                     u5360:
 11924  0012B4  2EE8               	decfsz	wreg,f,c
 11925  0012B6  D7F8               	goto	u5365
 11926  0012B8  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11927  0012BC  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11928  0012C0  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11929  0012C4  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11930                           
 11931                           ; BSR set to: 0
 11932                           ;inc\CANlib.h: 868: tamp = tamp & 0x000000FF;
 11933  0012C8  0100               	movlb	0	; () banked
 11934  0012CA  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11935  0012CC  0100               	movlb	0	; () banked
 11936  0012CE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11937  0012D0  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11938  0012D2  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11939  0012D4  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;inc\CANlib.h: 869: RXF0SIDH = (unsigned char) tamp;
 11943  0012D6  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 11944  0012DA  D000               	goto	l4700
 11945  0012DC                     l4700:
 11946                           
 11947                           ; BSR set to: 0
 11948                           ;inc\CANlib.h: 870: }
 11949                           ;inc\CANlib.h: 872: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_XTD_MSG))
 11950  0012DC  0100               	movlb	0	; () banked
 11951  0012DE  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 11952  0012E0  A4D8               	btfss	status,2,c
 11953  0012E2  D08B               	goto	l4734
 11954                           
 11955                           ; BSR set to: 0
 11956  0012E4  0EF7               	movlw	247
 11957  0012E6  0100               	movlb	0	; () banked
 11958  0012E8  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 11959  0012EA  A4D8               	btfss	status,2,c
 11960  0012EC  D086               	goto	l4734
 11961                           
 11962                           ; BSR set to: 0
 11963                           ;inc\CANlib.h: 873: {
 11964                           ;inc\CANlib.h: 874: RXF1SIDLbits.EXIDEN = 0x01;
 11965  0012EE  010F               	movlb	15	; () banked
 11966  0012F0  8705               	bsf	5,3,b	;volatile
 11967                           
 11968                           ; BSR set to: 15
 11969                           ;inc\CANlib.h: 876: tamp = filter & 0x000000FF;
 11970  0012F2  0100               	movlb	0	; () banked
 11971  0012F4  5177               	movf	CANSetFilter@filter& (0+255),w,b
 11972  0012F6  0100               	movlb	0	; () banked
 11973  0012F8  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11974  0012FA  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11975  0012FC  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11976  0012FE  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11977                           
 11978                           ; BSR set to: 0
 11979                           ;inc\CANlib.h: 877: RXF1EIDL = (unsigned char) tamp;
 11980  001300  C081  FF07         	movff	CANSetFilter@tamp,3847	;volatile
 11981                           
 11982                           ; BSR set to: 0
 11983                           ;inc\CANlib.h: 879: tamp = filter & 0x0000FF00;
 11984  001304  0E00               	movlw	0
 11985  001306  0100               	movlb	0	; () banked
 11986  001308  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11987  00130A  0100               	movlb	0	; () banked
 11988  00130C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11989  00130E  0EFF               	movlw	255
 11990  001310  0100               	movlb	0	; () banked
 11991  001312  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11992  001314  0100               	movlb	0	; () banked
 11993  001316  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11994  001318  0E00               	movlw	0
 11995  00131A  0100               	movlb	0	; () banked
 11996  00131C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11997  00131E  0100               	movlb	0	; () banked
 11998  001320  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11999  001322  0E00               	movlw	0
 12000  001324  0100               	movlb	0	; () banked
 12001  001326  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12002  001328  0100               	movlb	0	; () banked
 12003  00132A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12004                           
 12005                           ; BSR set to: 0
 12006                           ;inc\CANlib.h: 880: tamp = tamp >> 8;
 12007  00132C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12008  001330  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12009  001334  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12010  001338  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12011  00133C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12012  001340  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12013  001344  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12014  001348  0100               	movlb	0	; () banked
 12015  00134A  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12016  00134C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12017  001350  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12018  001354  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12019  001358  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12020                           
 12021                           ; BSR set to: 0
 12022                           ;inc\CANlib.h: 881: RXF1EIDH = (unsigned char) tamp;
 12023  00135C  C081  FF06         	movff	CANSetFilter@tamp,3846	;volatile
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;inc\CANlib.h: 883: if (filter & 0x00010000)
 12027  001360  0100               	movlb	0	; () banked
 12028  001362  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12029  001364  D003               	goto	l472
 12030                           
 12031                           ; BSR set to: 0
 12032                           ;inc\CANlib.h: 884: RXF1SIDLbits.EID16 = 0x01;
 12033  001366  010F               	movlb	15	; () banked
 12034  001368  8105               	bsf	5,0,b	;volatile
 12035  00136A  D002               	goto	l473
 12036  00136C                     l472:
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;inc\CANlib.h: 885: else
 12040                           ;inc\CANlib.h: 886: RXF1SIDLbits.EID16 = 0x00;
 12041  00136C  010F               	movlb	15	; () banked
 12042  00136E  9105               	bcf	5,0,b	;volatile
 12043  001370                     l473:
 12044                           
 12045                           ; BSR set to: 15
 12046                           ;inc\CANlib.h: 888: if (filter & 0x00020000)
 12047  001370  0100               	movlb	0	; () banked
 12048  001372  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12049  001374  D003               	goto	l474
 12050                           
 12051                           ; BSR set to: 0
 12052                           ;inc\CANlib.h: 889: RXF1SIDLbits.EID17 = 0x01;
 12053  001376  010F               	movlb	15	; () banked
 12054  001378  8305               	bsf	5,1,b	;volatile
 12055  00137A  D002               	goto	l475
 12056  00137C                     l474:
 12057                           
 12058                           ; BSR set to: 0
 12059                           ;inc\CANlib.h: 890: else
 12060                           ;inc\CANlib.h: 891: RXF1SIDLbits.EID17 = 0x00;
 12061  00137C  010F               	movlb	15	; () banked
 12062  00137E  9305               	bcf	5,1,b	;volatile
 12063  001380                     l475:
 12064                           
 12065                           ; BSR set to: 15
 12066                           ;inc\CANlib.h: 893: if (filter & 0x00040000)
 12067  001380  0100               	movlb	0	; () banked
 12068  001382  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12069  001384  D003               	goto	l476
 12070                           
 12071                           ; BSR set to: 0
 12072                           ;inc\CANlib.h: 894: RXF1SIDLbits.SID0 = 0x01;
 12073  001386  010F               	movlb	15	; () banked
 12074  001388  8B05               	bsf	5,5,b	;volatile
 12075  00138A  D002               	goto	l477
 12076  00138C                     l476:
 12077                           
 12078                           ; BSR set to: 0
 12079                           ;inc\CANlib.h: 895: else
 12080                           ;inc\CANlib.h: 896: RXF1SIDLbits.SID0 = 0x00;
 12081  00138C  010F               	movlb	15	; () banked
 12082  00138E  9B05               	bcf	5,5,b	;volatile
 12083  001390                     l477:
 12084                           
 12085                           ; BSR set to: 15
 12086                           ;inc\CANlib.h: 898: if (filter & 0x00080000)
 12087  001390  0100               	movlb	0	; () banked
 12088  001392  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12089  001394  D003               	goto	l478
 12090                           
 12091                           ; BSR set to: 0
 12092                           ;inc\CANlib.h: 899: RXF1SIDLbits.SID1 = 0x01;
 12093  001396  010F               	movlb	15	; () banked
 12094  001398  8D05               	bsf	5,6,b	;volatile
 12095  00139A  D002               	goto	l479
 12096  00139C                     l478:
 12097                           
 12098                           ; BSR set to: 0
 12099                           ;inc\CANlib.h: 900: else
 12100                           ;inc\CANlib.h: 901: RXF1SIDLbits.SID1 = 0x00;
 12101  00139C  010F               	movlb	15	; () banked
 12102  00139E  9D05               	bcf	5,6,b	;volatile
 12103  0013A0                     l479:
 12104                           
 12105                           ; BSR set to: 15
 12106                           ;inc\CANlib.h: 903: if (filter & 0x00100000)
 12107  0013A0  0100               	movlb	0	; () banked
 12108  0013A2  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12109  0013A4  D003               	goto	l480
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;inc\CANlib.h: 904: RXF1SIDLbits.SID2 = 0x01 ;
 12113  0013A6  010F               	movlb	15	; () banked
 12114  0013A8  8F05               	bsf	5,7,b	;volatile
 12115  0013AA  D003               	goto	l4728
 12116  0013AC                     l480:
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;inc\CANlib.h: 905: else
 12120                           ;inc\CANlib.h: 906: RXF1SIDLbits.SID2 = 0x00 ;
 12121  0013AC  010F               	movlb	15	; () banked
 12122  0013AE  9F05               	bcf	5,7,b	;volatile
 12123  0013B0  D000               	goto	l4728
 12124  0013B2                     l4728:
 12125                           
 12126                           ; BSR set to: 15
 12127                           ;inc\CANlib.h: 908: tamp = (filter >> 21);
 12128  0013B2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12129  0013B6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12130  0013BA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12131  0013BE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12132  0013C2  0E16               	movlw	22
 12133  0013C4  D006               	goto	u5440
 12134  0013C6                     u5445:
 12135  0013C6  0100               	movlb	0	; () banked
 12136  0013C8  90D8               	bcf	status,0,c
 12137  0013CA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12138  0013CC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12139  0013CE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12140  0013D0  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12141  0013D2                     u5440:
 12142  0013D2  2EE8               	decfsz	wreg,f,c
 12143  0013D4  D7F8               	goto	u5445
 12144  0013D6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12145  0013DA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12146  0013DE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12147  0013E2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12148                           
 12149                           ; BSR set to: 0
 12150                           ;inc\CANlib.h: 909: tamp = tamp & 0x000000FF;
 12151  0013E6  0100               	movlb	0	; () banked
 12152  0013E8  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12153  0013EA  0100               	movlb	0	; () banked
 12154  0013EC  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12155  0013EE  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12156  0013F0  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12157  0013F2  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;inc\CANlib.h: 910: RXF1SIDH = (unsigned char) tamp;
 12161  0013F4  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 12162  0013F8  D000               	goto	l4734
 12163  0013FA                     l4734:
 12164                           
 12165                           ; BSR set to: 0
 12166                           ;inc\CANlib.h: 911: }
 12167                           ;inc\CANlib.h: 914: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_XTD_MSG))
 12168  0013FA  0E02               	movlw	2
 12169  0013FC  0100               	movlb	0	; () banked
 12170  0013FE  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12171  001400  A4D8               	btfss	status,2,c
 12172  001402  D08B               	goto	l4768
 12173                           
 12174                           ; BSR set to: 0
 12175  001404  0EF7               	movlw	247
 12176  001406  0100               	movlb	0	; () banked
 12177  001408  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12178  00140A  A4D8               	btfss	status,2,c
 12179  00140C  D086               	goto	l4768
 12180                           
 12181                           ; BSR set to: 0
 12182                           ;inc\CANlib.h: 915: {
 12183                           ;inc\CANlib.h: 916: RXF2SIDLbits.EXIDEN = 0x01;
 12184  00140E  010F               	movlb	15	; () banked
 12185  001410  8709               	bsf	9,3,b	;volatile
 12186                           
 12187                           ; BSR set to: 15
 12188                           ;inc\CANlib.h: 918: tamp = filter & 0x000000FF;
 12189  001412  0100               	movlb	0	; () banked
 12190  001414  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12191  001416  0100               	movlb	0	; () banked
 12192  001418  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12193  00141A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12194  00141C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12195  00141E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12196                           
 12197                           ; BSR set to: 0
 12198                           ;inc\CANlib.h: 919: RXF2EIDL = (unsigned char) tamp;
 12199  001420  C081  FF0B         	movff	CANSetFilter@tamp,3851	;volatile
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;inc\CANlib.h: 921: tamp = filter & 0x0000FF00;
 12203  001424  0E00               	movlw	0
 12204  001426  0100               	movlb	0	; () banked
 12205  001428  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12206  00142A  0100               	movlb	0	; () banked
 12207  00142C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12208  00142E  0EFF               	movlw	255
 12209  001430  0100               	movlb	0	; () banked
 12210  001432  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12211  001434  0100               	movlb	0	; () banked
 12212  001436  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12213  001438  0E00               	movlw	0
 12214  00143A  0100               	movlb	0	; () banked
 12215  00143C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12216  00143E  0100               	movlb	0	; () banked
 12217  001440  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12218  001442  0E00               	movlw	0
 12219  001444  0100               	movlb	0	; () banked
 12220  001446  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12221  001448  0100               	movlb	0	; () banked
 12222  00144A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12223                           
 12224                           ; BSR set to: 0
 12225                           ;inc\CANlib.h: 922: tamp = tamp >> 8;
 12226  00144C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12227  001450  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12228  001454  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12229  001458  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12230  00145C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12231  001460  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12232  001464  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12233  001468  0100               	movlb	0	; () banked
 12234  00146A  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12235  00146C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12236  001470  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12237  001474  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12238  001478  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12239                           
 12240                           ; BSR set to: 0
 12241                           ;inc\CANlib.h: 923: RXF2EIDH = (unsigned char) tamp;
 12242  00147C  C081  FF0A         	movff	CANSetFilter@tamp,3850	;volatile
 12243                           
 12244                           ; BSR set to: 0
 12245                           ;inc\CANlib.h: 925: if (filter & 0x00010000)
 12246  001480  0100               	movlb	0	; () banked
 12247  001482  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12248  001484  D003               	goto	l483
 12249                           
 12250                           ; BSR set to: 0
 12251                           ;inc\CANlib.h: 926: RXF2SIDLbits.EID16 = 0x01;
 12252  001486  010F               	movlb	15	; () banked
 12253  001488  8109               	bsf	9,0,b	;volatile
 12254  00148A  D002               	goto	l484
 12255  00148C                     l483:
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;inc\CANlib.h: 927: else
 12259                           ;inc\CANlib.h: 928: RXF2SIDLbits.EID16 = 0x00;
 12260  00148C  010F               	movlb	15	; () banked
 12261  00148E  9109               	bcf	9,0,b	;volatile
 12262  001490                     l484:
 12263                           
 12264                           ; BSR set to: 15
 12265                           ;inc\CANlib.h: 930: if (filter & 0x00020000)
 12266  001490  0100               	movlb	0	; () banked
 12267  001492  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12268  001494  D003               	goto	l485
 12269                           
 12270                           ; BSR set to: 0
 12271                           ;inc\CANlib.h: 931: RXF2SIDLbits.EID17 = 0x01;
 12272  001496  010F               	movlb	15	; () banked
 12273  001498  8309               	bsf	9,1,b	;volatile
 12274  00149A  D002               	goto	l486
 12275  00149C                     l485:
 12276                           
 12277                           ; BSR set to: 0
 12278                           ;inc\CANlib.h: 932: else
 12279                           ;inc\CANlib.h: 933: RXF2SIDLbits.EID17 = 0x00;
 12280  00149C  010F               	movlb	15	; () banked
 12281  00149E  9309               	bcf	9,1,b	;volatile
 12282  0014A0                     l486:
 12283                           
 12284                           ; BSR set to: 15
 12285                           ;inc\CANlib.h: 935: if (filter & 0x00040000)
 12286  0014A0  0100               	movlb	0	; () banked
 12287  0014A2  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12288  0014A4  D003               	goto	l487
 12289                           
 12290                           ; BSR set to: 0
 12291                           ;inc\CANlib.h: 936: RXF2SIDLbits.SID0 = 0x01;
 12292  0014A6  010F               	movlb	15	; () banked
 12293  0014A8  8B09               	bsf	9,5,b	;volatile
 12294  0014AA  D002               	goto	l488
 12295  0014AC                     l487:
 12296                           
 12297                           ; BSR set to: 0
 12298                           ;inc\CANlib.h: 937: else
 12299                           ;inc\CANlib.h: 938: RXF2SIDLbits.SID0 = 0x00;
 12300  0014AC  010F               	movlb	15	; () banked
 12301  0014AE  9B09               	bcf	9,5,b	;volatile
 12302  0014B0                     l488:
 12303                           
 12304                           ; BSR set to: 15
 12305                           ;inc\CANlib.h: 940: if (filter & 0x00080000)
 12306  0014B0  0100               	movlb	0	; () banked
 12307  0014B2  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12308  0014B4  D003               	goto	l489
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;inc\CANlib.h: 941: RXF2SIDLbits.SID1 = 0x01;
 12312  0014B6  010F               	movlb	15	; () banked
 12313  0014B8  8D09               	bsf	9,6,b	;volatile
 12314  0014BA  D002               	goto	l490
 12315  0014BC                     l489:
 12316                           
 12317                           ; BSR set to: 0
 12318                           ;inc\CANlib.h: 942: else
 12319                           ;inc\CANlib.h: 943: RXF2SIDLbits.SID1 = 0x00;
 12320  0014BC  010F               	movlb	15	; () banked
 12321  0014BE  9D09               	bcf	9,6,b	;volatile
 12322  0014C0                     l490:
 12323                           
 12324                           ; BSR set to: 15
 12325                           ;inc\CANlib.h: 945: if (filter & 0x00100000)
 12326  0014C0  0100               	movlb	0	; () banked
 12327  0014C2  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12328  0014C4  D003               	goto	l491
 12329                           
 12330                           ; BSR set to: 0
 12331                           ;inc\CANlib.h: 946: RXF2SIDLbits.SID2 = 0x01 ;
 12332  0014C6  010F               	movlb	15	; () banked
 12333  0014C8  8F09               	bsf	9,7,b	;volatile
 12334  0014CA  D003               	goto	l4762
 12335  0014CC                     l491:
 12336                           
 12337                           ; BSR set to: 0
 12338                           ;inc\CANlib.h: 947: else
 12339                           ;inc\CANlib.h: 948: RXF2SIDLbits.SID2 = 0x00 ;
 12340  0014CC  010F               	movlb	15	; () banked
 12341  0014CE  9F09               	bcf	9,7,b	;volatile
 12342  0014D0  D000               	goto	l4762
 12343  0014D2                     l4762:
 12344                           
 12345                           ; BSR set to: 15
 12346                           ;inc\CANlib.h: 950: tamp = (filter >> 21);
 12347  0014D2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12348  0014D6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12349  0014DA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12350  0014DE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12351  0014E2  0E16               	movlw	22
 12352  0014E4  D006               	goto	u5520
 12353  0014E6                     u5525:
 12354  0014E6  0100               	movlb	0	; () banked
 12355  0014E8  90D8               	bcf	status,0,c
 12356  0014EA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12357  0014EC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12358  0014EE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12359  0014F0  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12360  0014F2                     u5520:
 12361  0014F2  2EE8               	decfsz	wreg,f,c
 12362  0014F4  D7F8               	goto	u5525
 12363  0014F6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12364  0014FA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12365  0014FE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12366  001502  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;inc\CANlib.h: 951: tamp = tamp & 0x000000FF;
 12370  001506  0100               	movlb	0	; () banked
 12371  001508  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12372  00150A  0100               	movlb	0	; () banked
 12373  00150C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12374  00150E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12375  001510  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12376  001512  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12377                           
 12378                           ; BSR set to: 0
 12379                           ;inc\CANlib.h: 952: RXF2SIDH = (unsigned char) tamp;
 12380  001514  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 12381  001518  D000               	goto	l4768
 12382  00151A                     l4768:
 12383                           
 12384                           ; BSR set to: 0
 12385                           ;inc\CANlib.h: 953: }
 12386                           ;inc\CANlib.h: 955: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_XTD_MSG))
 12387  00151A  0E03               	movlw	3
 12388  00151C  0100               	movlb	0	; () banked
 12389  00151E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12390  001520  A4D8               	btfss	status,2,c
 12391  001522  D08B               	goto	l4802
 12392                           
 12393                           ; BSR set to: 0
 12394  001524  0EF7               	movlw	247
 12395  001526  0100               	movlb	0	; () banked
 12396  001528  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12397  00152A  A4D8               	btfss	status,2,c
 12398  00152C  D086               	goto	l4802
 12399                           
 12400                           ; BSR set to: 0
 12401                           ;inc\CANlib.h: 956: {
 12402                           ;inc\CANlib.h: 957: RXF3SIDLbits.EXIDEN = 0x01;
 12403  00152E  010F               	movlb	15	; () banked
 12404  001530  870D               	bsf	13,3,b	;volatile
 12405                           
 12406                           ; BSR set to: 15
 12407                           ;inc\CANlib.h: 959: tamp = filter & 0x000000FF;
 12408  001532  0100               	movlb	0	; () banked
 12409  001534  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12410  001536  0100               	movlb	0	; () banked
 12411  001538  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12412  00153A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12413  00153C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12414  00153E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12415                           
 12416                           ; BSR set to: 0
 12417                           ;inc\CANlib.h: 960: RXF3EIDL = (unsigned char) tamp;
 12418  001540  C081  FF0F         	movff	CANSetFilter@tamp,3855	;volatile
 12419                           
 12420                           ; BSR set to: 0
 12421                           ;inc\CANlib.h: 962: tamp = filter & 0x0000FF00;
 12422  001544  0E00               	movlw	0
 12423  001546  0100               	movlb	0	; () banked
 12424  001548  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12425  00154A  0100               	movlb	0	; () banked
 12426  00154C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12427  00154E  0EFF               	movlw	255
 12428  001550  0100               	movlb	0	; () banked
 12429  001552  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12430  001554  0100               	movlb	0	; () banked
 12431  001556  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12432  001558  0E00               	movlw	0
 12433  00155A  0100               	movlb	0	; () banked
 12434  00155C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12435  00155E  0100               	movlb	0	; () banked
 12436  001560  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12437  001562  0E00               	movlw	0
 12438  001564  0100               	movlb	0	; () banked
 12439  001566  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12440  001568  0100               	movlb	0	; () banked
 12441  00156A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12442                           
 12443                           ; BSR set to: 0
 12444                           ;inc\CANlib.h: 963: tamp = tamp >> 8;
 12445  00156C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12446  001570  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12447  001574  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12448  001578  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12449  00157C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12450  001580  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12451  001584  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12452  001588  0100               	movlb	0	; () banked
 12453  00158A  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12454  00158C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12455  001590  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12456  001594  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12457  001598  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12458                           
 12459                           ; BSR set to: 0
 12460                           ;inc\CANlib.h: 964: RXF3EIDH = (unsigned char) tamp;
 12461  00159C  C081  FF0E         	movff	CANSetFilter@tamp,3854	;volatile
 12462                           
 12463                           ; BSR set to: 0
 12464                           ;inc\CANlib.h: 966: if (filter & 0x00010000)
 12465  0015A0  0100               	movlb	0	; () banked
 12466  0015A2  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12467  0015A4  D003               	goto	l494
 12468                           
 12469                           ; BSR set to: 0
 12470                           ;inc\CANlib.h: 967: RXF3SIDLbits.EID16 = 0x01;
 12471  0015A6  010F               	movlb	15	; () banked
 12472  0015A8  810D               	bsf	13,0,b	;volatile
 12473  0015AA  D002               	goto	l495
 12474  0015AC                     l494:
 12475                           
 12476                           ; BSR set to: 0
 12477                           ;inc\CANlib.h: 968: else
 12478                           ;inc\CANlib.h: 969: RXF3SIDLbits.EID16 = 0x00;
 12479  0015AC  010F               	movlb	15	; () banked
 12480  0015AE  910D               	bcf	13,0,b	;volatile
 12481  0015B0                     l495:
 12482                           
 12483                           ; BSR set to: 15
 12484                           ;inc\CANlib.h: 971: if (filter & 0x00020000)
 12485  0015B0  0100               	movlb	0	; () banked
 12486  0015B2  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12487  0015B4  D003               	goto	l496
 12488                           
 12489                           ; BSR set to: 0
 12490                           ;inc\CANlib.h: 972: RXF3SIDLbits.EID17 = 0x01;
 12491  0015B6  010F               	movlb	15	; () banked
 12492  0015B8  830D               	bsf	13,1,b	;volatile
 12493  0015BA  D002               	goto	l497
 12494  0015BC                     l496:
 12495                           
 12496                           ; BSR set to: 0
 12497                           ;inc\CANlib.h: 973: else
 12498                           ;inc\CANlib.h: 974: RXF3SIDLbits.EID17 = 0x00;
 12499  0015BC  010F               	movlb	15	; () banked
 12500  0015BE  930D               	bcf	13,1,b	;volatile
 12501  0015C0                     l497:
 12502                           
 12503                           ; BSR set to: 15
 12504                           ;inc\CANlib.h: 976: if (filter & 0x00040000)
 12505  0015C0  0100               	movlb	0	; () banked
 12506  0015C2  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12507  0015C4  D003               	goto	l498
 12508                           
 12509                           ; BSR set to: 0
 12510                           ;inc\CANlib.h: 977: RXF3SIDLbits.SID0 = 0x01;
 12511  0015C6  010F               	movlb	15	; () banked
 12512  0015C8  8B0D               	bsf	13,5,b	;volatile
 12513  0015CA  D002               	goto	l499
 12514  0015CC                     l498:
 12515                           
 12516                           ; BSR set to: 0
 12517                           ;inc\CANlib.h: 978: else
 12518                           ;inc\CANlib.h: 979: RXF3SIDLbits.SID0 = 0x00;
 12519  0015CC  010F               	movlb	15	; () banked
 12520  0015CE  9B0D               	bcf	13,5,b	;volatile
 12521  0015D0                     l499:
 12522                           
 12523                           ; BSR set to: 15
 12524                           ;inc\CANlib.h: 981: if (filter & 0x00080000)
 12525  0015D0  0100               	movlb	0	; () banked
 12526  0015D2  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12527  0015D4  D003               	goto	l500
 12528                           
 12529                           ; BSR set to: 0
 12530                           ;inc\CANlib.h: 982: RXF3SIDLbits.SID1 = 0x01;
 12531  0015D6  010F               	movlb	15	; () banked
 12532  0015D8  8D0D               	bsf	13,6,b	;volatile
 12533  0015DA  D002               	goto	l501
 12534  0015DC                     l500:
 12535                           
 12536                           ; BSR set to: 0
 12537                           ;inc\CANlib.h: 983: else
 12538                           ;inc\CANlib.h: 984: RXF3SIDLbits.SID1 = 0x00;
 12539  0015DC  010F               	movlb	15	; () banked
 12540  0015DE  9D0D               	bcf	13,6,b	;volatile
 12541  0015E0                     l501:
 12542                           
 12543                           ; BSR set to: 15
 12544                           ;inc\CANlib.h: 986: if (filter & 0x00100000)
 12545  0015E0  0100               	movlb	0	; () banked
 12546  0015E2  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12547  0015E4  D003               	goto	l502
 12548                           
 12549                           ; BSR set to: 0
 12550                           ;inc\CANlib.h: 987: RXF3SIDLbits.SID2 = 0x01 ;
 12551  0015E6  010F               	movlb	15	; () banked
 12552  0015E8  8F0D               	bsf	13,7,b	;volatile
 12553  0015EA  D003               	goto	l4796
 12554  0015EC                     l502:
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;inc\CANlib.h: 988: else
 12558                           ;inc\CANlib.h: 989: RXF3SIDLbits.SID2 = 0x00 ;
 12559  0015EC  010F               	movlb	15	; () banked
 12560  0015EE  9F0D               	bcf	13,7,b	;volatile
 12561  0015F0  D000               	goto	l4796
 12562  0015F2                     l4796:
 12563                           
 12564                           ; BSR set to: 15
 12565                           ;inc\CANlib.h: 991: tamp = (filter >> 21);
 12566  0015F2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12567  0015F6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12568  0015FA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12569  0015FE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12570  001602  0E16               	movlw	22
 12571  001604  D006               	goto	u5600
 12572  001606                     u5605:
 12573  001606  0100               	movlb	0	; () banked
 12574  001608  90D8               	bcf	status,0,c
 12575  00160A  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12576  00160C  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12577  00160E  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12578  001610  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12579  001612                     u5600:
 12580  001612  2EE8               	decfsz	wreg,f,c
 12581  001614  D7F8               	goto	u5605
 12582  001616  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12583  00161A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12584  00161E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12585  001622  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12586                           
 12587                           ; BSR set to: 0
 12588                           ;inc\CANlib.h: 992: tamp = tamp & 0x000000FF;
 12589  001626  0100               	movlb	0	; () banked
 12590  001628  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12591  00162A  0100               	movlb	0	; () banked
 12592  00162C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12593  00162E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12594  001630  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12595  001632  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12596                           
 12597                           ; BSR set to: 0
 12598                           ;inc\CANlib.h: 993: RXF3SIDH = (unsigned char) tamp;
 12599  001634  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 12600  001638  D000               	goto	l4802
 12601  00163A                     l4802:
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;inc\CANlib.h: 994: }
 12605                           ;inc\CANlib.h: 996: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_XTD_MSG))
 12606  00163A  0E04               	movlw	4
 12607  00163C  0100               	movlb	0	; () banked
 12608  00163E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12609  001640  A4D8               	btfss	status,2,c
 12610  001642  D08B               	goto	l4836
 12611                           
 12612                           ; BSR set to: 0
 12613  001644  0EF7               	movlw	247
 12614  001646  0100               	movlb	0	; () banked
 12615  001648  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12616  00164A  A4D8               	btfss	status,2,c
 12617  00164C  D086               	goto	l4836
 12618                           
 12619                           ; BSR set to: 0
 12620                           ;inc\CANlib.h: 997: {
 12621                           ;inc\CANlib.h: 998: RXF4SIDLbits.EXIDEN = 0x01;
 12622  00164E  010F               	movlb	15	; () banked
 12623  001650  8711               	bsf	17,3,b	;volatile
 12624                           
 12625                           ; BSR set to: 15
 12626                           ;inc\CANlib.h: 1000: tamp = filter & 0x000000FF;
 12627  001652  0100               	movlb	0	; () banked
 12628  001654  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12629  001656  0100               	movlb	0	; () banked
 12630  001658  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12631  00165A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12632  00165C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12633  00165E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12634                           
 12635                           ; BSR set to: 0
 12636                           ;inc\CANlib.h: 1001: RXF4EIDL = (unsigned char) tamp;
 12637  001660  C081  FF13         	movff	CANSetFilter@tamp,3859	;volatile
 12638                           
 12639                           ; BSR set to: 0
 12640                           ;inc\CANlib.h: 1003: tamp = filter & 0x0000FF00;
 12641  001664  0E00               	movlw	0
 12642  001666  0100               	movlb	0	; () banked
 12643  001668  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12644  00166A  0100               	movlb	0	; () banked
 12645  00166C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12646  00166E  0EFF               	movlw	255
 12647  001670  0100               	movlb	0	; () banked
 12648  001672  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12649  001674  0100               	movlb	0	; () banked
 12650  001676  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12651  001678  0E00               	movlw	0
 12652  00167A  0100               	movlb	0	; () banked
 12653  00167C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12654  00167E  0100               	movlb	0	; () banked
 12655  001680  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12656  001682  0E00               	movlw	0
 12657  001684  0100               	movlb	0	; () banked
 12658  001686  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12659  001688  0100               	movlb	0	; () banked
 12660  00168A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;inc\CANlib.h: 1004: tamp = tamp >> 8;
 12664  00168C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12665  001690  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12666  001694  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12667  001698  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12668  00169C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12669  0016A0  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12670  0016A4  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12671  0016A8  0100               	movlb	0	; () banked
 12672  0016AA  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12673  0016AC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12674  0016B0  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12675  0016B4  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12676  0016B8  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12677                           
 12678                           ; BSR set to: 0
 12679                           ;inc\CANlib.h: 1005: RXF4EIDH = (unsigned char) tamp;
 12680  0016BC  C081  FF12         	movff	CANSetFilter@tamp,3858	;volatile
 12681                           
 12682                           ; BSR set to: 0
 12683                           ;inc\CANlib.h: 1007: if (filter & 0x00010000)
 12684  0016C0  0100               	movlb	0	; () banked
 12685  0016C2  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12686  0016C4  D003               	goto	l505
 12687                           
 12688                           ; BSR set to: 0
 12689                           ;inc\CANlib.h: 1008: RXF4SIDLbits.EID16 = 0x01;
 12690  0016C6  010F               	movlb	15	; () banked
 12691  0016C8  8111               	bsf	17,0,b	;volatile
 12692  0016CA  D002               	goto	l506
 12693  0016CC                     l505:
 12694                           
 12695                           ; BSR set to: 0
 12696                           ;inc\CANlib.h: 1009: else
 12697                           ;inc\CANlib.h: 1010: RXF4SIDLbits.EID16 = 0x00;
 12698  0016CC  010F               	movlb	15	; () banked
 12699  0016CE  9111               	bcf	17,0,b	;volatile
 12700  0016D0                     l506:
 12701                           
 12702                           ; BSR set to: 15
 12703                           ;inc\CANlib.h: 1012: if (filter & 0x00020000)
 12704  0016D0  0100               	movlb	0	; () banked
 12705  0016D2  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12706  0016D4  D003               	goto	l507
 12707                           
 12708                           ; BSR set to: 0
 12709                           ;inc\CANlib.h: 1013: RXF4SIDLbits.EID17 = 0x01;
 12710  0016D6  010F               	movlb	15	; () banked
 12711  0016D8  8311               	bsf	17,1,b	;volatile
 12712  0016DA  D002               	goto	l508
 12713  0016DC                     l507:
 12714                           
 12715                           ; BSR set to: 0
 12716                           ;inc\CANlib.h: 1014: else
 12717                           ;inc\CANlib.h: 1015: RXF4SIDLbits.EID17 = 0x00;
 12718  0016DC  010F               	movlb	15	; () banked
 12719  0016DE  9311               	bcf	17,1,b	;volatile
 12720  0016E0                     l508:
 12721                           
 12722                           ; BSR set to: 15
 12723                           ;inc\CANlib.h: 1017: if (filter & 0x00040000)
 12724  0016E0  0100               	movlb	0	; () banked
 12725  0016E2  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12726  0016E4  D003               	goto	l509
 12727                           
 12728                           ; BSR set to: 0
 12729                           ;inc\CANlib.h: 1018: RXF4SIDLbits.SID0 = 0x01;
 12730  0016E6  010F               	movlb	15	; () banked
 12731  0016E8  8B11               	bsf	17,5,b	;volatile
 12732  0016EA  D002               	goto	l510
 12733  0016EC                     l509:
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;inc\CANlib.h: 1019: else
 12737                           ;inc\CANlib.h: 1020: RXF4SIDLbits.SID0 = 0x00;
 12738  0016EC  010F               	movlb	15	; () banked
 12739  0016EE  9B11               	bcf	17,5,b	;volatile
 12740  0016F0                     l510:
 12741                           
 12742                           ; BSR set to: 15
 12743                           ;inc\CANlib.h: 1022: if (filter & 0x00080000)
 12744  0016F0  0100               	movlb	0	; () banked
 12745  0016F2  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12746  0016F4  D003               	goto	l511
 12747                           
 12748                           ; BSR set to: 0
 12749                           ;inc\CANlib.h: 1023: RXF4SIDLbits.SID1 = 0x01;
 12750  0016F6  010F               	movlb	15	; () banked
 12751  0016F8  8D11               	bsf	17,6,b	;volatile
 12752  0016FA  D002               	goto	l512
 12753  0016FC                     l511:
 12754                           
 12755                           ; BSR set to: 0
 12756                           ;inc\CANlib.h: 1024: else
 12757                           ;inc\CANlib.h: 1025: RXF4SIDLbits.SID1 = 0x00;
 12758  0016FC  010F               	movlb	15	; () banked
 12759  0016FE  9D11               	bcf	17,6,b	;volatile
 12760  001700                     l512:
 12761                           
 12762                           ; BSR set to: 15
 12763                           ;inc\CANlib.h: 1027: if (filter & 0x00100000)
 12764  001700  0100               	movlb	0	; () banked
 12765  001702  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12766  001704  D003               	goto	l513
 12767                           
 12768                           ; BSR set to: 0
 12769                           ;inc\CANlib.h: 1028: RXF4SIDLbits.SID2 = 0x01 ;
 12770  001706  010F               	movlb	15	; () banked
 12771  001708  8F11               	bsf	17,7,b	;volatile
 12772  00170A  D003               	goto	l4830
 12773  00170C                     l513:
 12774                           
 12775                           ; BSR set to: 0
 12776                           ;inc\CANlib.h: 1029: else
 12777                           ;inc\CANlib.h: 1030: RXF4SIDLbits.SID2 = 0x00 ;
 12778  00170C  010F               	movlb	15	; () banked
 12779  00170E  9F11               	bcf	17,7,b	;volatile
 12780  001710  D000               	goto	l4830
 12781  001712                     l4830:
 12782                           
 12783                           ; BSR set to: 15
 12784                           ;inc\CANlib.h: 1032: tamp = (filter >> 21);
 12785  001712  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12786  001716  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12787  00171A  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12788  00171E  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12789  001722  0E16               	movlw	22
 12790  001724  D006               	goto	u5680
 12791  001726                     u5685:
 12792  001726  0100               	movlb	0	; () banked
 12793  001728  90D8               	bcf	status,0,c
 12794  00172A  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12795  00172C  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12796  00172E  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12797  001730  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12798  001732                     u5680:
 12799  001732  2EE8               	decfsz	wreg,f,c
 12800  001734  D7F8               	goto	u5685
 12801  001736  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12802  00173A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12803  00173E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12804  001742  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12805                           
 12806                           ; BSR set to: 0
 12807                           ;inc\CANlib.h: 1033: tamp = tamp & 0x000000FF;
 12808  001746  0100               	movlb	0	; () banked
 12809  001748  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12810  00174A  0100               	movlb	0	; () banked
 12811  00174C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12812  00174E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12813  001750  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12814  001752  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12815                           
 12816                           ; BSR set to: 0
 12817                           ;inc\CANlib.h: 1034: RXF4SIDH = (unsigned char) tamp;
 12818  001754  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 12819  001758  D000               	goto	l4836
 12820  00175A                     l4836:
 12821                           
 12822                           ; BSR set to: 0
 12823                           ;inc\CANlib.h: 1035: }
 12824                           ;inc\CANlib.h: 1037: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_XTD_MSG))
 12825  00175A  0E05               	movlw	5
 12826  00175C  0100               	movlb	0	; () banked
 12827  00175E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12828  001760  A4D8               	btfss	status,2,c
 12829  001762  0012               	return	
 12830                           
 12831                           ; BSR set to: 0
 12832  001764  0EF7               	movlw	247
 12833  001766  0100               	movlb	0	; () banked
 12834  001768  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12835  00176A  A4D8               	btfss	status,2,c
 12836  00176C  0012               	return	
 12837                           
 12838                           ; BSR set to: 0
 12839                           ;inc\CANlib.h: 1038: {
 12840                           ;inc\CANlib.h: 1039: RXF5SIDLbits.EXIDEN = 0x01;
 12841  00176E  010F               	movlb	15	; () banked
 12842  001770  8715               	bsf	21,3,b	;volatile
 12843                           
 12844                           ; BSR set to: 15
 12845                           ;inc\CANlib.h: 1041: tamp = filter & 0x000000FF;
 12846  001772  0100               	movlb	0	; () banked
 12847  001774  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12848  001776  0100               	movlb	0	; () banked
 12849  001778  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12850  00177A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12851  00177C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12852  00177E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12853                           
 12854                           ; BSR set to: 0
 12855                           ;inc\CANlib.h: 1042: RXF5EIDL = (unsigned char) tamp;
 12856  001780  C081  FF17         	movff	CANSetFilter@tamp,3863	;volatile
 12857                           
 12858                           ; BSR set to: 0
 12859                           ;inc\CANlib.h: 1044: tamp = filter & 0x0000FF00;
 12860  001784  0E00               	movlw	0
 12861  001786  0100               	movlb	0	; () banked
 12862  001788  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12863  00178A  0100               	movlb	0	; () banked
 12864  00178C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12865  00178E  0EFF               	movlw	255
 12866  001790  0100               	movlb	0	; () banked
 12867  001792  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12868  001794  0100               	movlb	0	; () banked
 12869  001796  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12870  001798  0E00               	movlw	0
 12871  00179A  0100               	movlb	0	; () banked
 12872  00179C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12873  00179E  0100               	movlb	0	; () banked
 12874  0017A0  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12875  0017A2  0E00               	movlw	0
 12876  0017A4  0100               	movlb	0	; () banked
 12877  0017A6  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12878  0017A8  0100               	movlb	0	; () banked
 12879  0017AA  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;inc\CANlib.h: 1045: tamp = tamp >> 8;
 12883  0017AC  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12884  0017B0  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12885  0017B4  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12886  0017B8  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12887  0017BC  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12888  0017C0  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12889  0017C4  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12890  0017C8  0100               	movlb	0	; () banked
 12891  0017CA  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12892  0017CC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12893  0017D0  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12894  0017D4  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12895  0017D8  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12896                           
 12897                           ; BSR set to: 0
 12898                           ;inc\CANlib.h: 1046: RXF5EIDH = (unsigned char) tamp;
 12899  0017DC  C081  FF16         	movff	CANSetFilter@tamp,3862	;volatile
 12900                           
 12901                           ; BSR set to: 0
 12902                           ;inc\CANlib.h: 1048: if (filter & 0x00010000)
 12903  0017E0  0100               	movlb	0	; () banked
 12904  0017E2  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12905  0017E4  D003               	goto	l516
 12906                           
 12907                           ; BSR set to: 0
 12908                           ;inc\CANlib.h: 1049: RXF5SIDLbits.EID16 = 0x01;
 12909  0017E6  010F               	movlb	15	; () banked
 12910  0017E8  8115               	bsf	21,0,b	;volatile
 12911  0017EA  D002               	goto	l517
 12912  0017EC                     l516:
 12913                           
 12914                           ; BSR set to: 0
 12915                           ;inc\CANlib.h: 1050: else
 12916                           ;inc\CANlib.h: 1051: RXF5SIDLbits.EID16 = 0x00;
 12917  0017EC  010F               	movlb	15	; () banked
 12918  0017EE  9115               	bcf	21,0,b	;volatile
 12919  0017F0                     l517:
 12920                           
 12921                           ; BSR set to: 15
 12922                           ;inc\CANlib.h: 1053: if (filter & 0x00020000)
 12923  0017F0  0100               	movlb	0	; () banked
 12924  0017F2  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12925  0017F4  D003               	goto	l518
 12926                           
 12927                           ; BSR set to: 0
 12928                           ;inc\CANlib.h: 1054: RXF5SIDLbits.EID17 = 0x01;
 12929  0017F6  010F               	movlb	15	; () banked
 12930  0017F8  8315               	bsf	21,1,b	;volatile
 12931  0017FA  D002               	goto	l519
 12932  0017FC                     l518:
 12933                           
 12934                           ; BSR set to: 0
 12935                           ;inc\CANlib.h: 1055: else
 12936                           ;inc\CANlib.h: 1056: RXF5SIDLbits.EID17 = 0x00;
 12937  0017FC  010F               	movlb	15	; () banked
 12938  0017FE  9315               	bcf	21,1,b	;volatile
 12939  001800                     l519:
 12940                           
 12941                           ; BSR set to: 15
 12942                           ;inc\CANlib.h: 1058: if (filter & 0x00040000)
 12943  001800  0100               	movlb	0	; () banked
 12944  001802  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12945  001804  D003               	goto	l520
 12946                           
 12947                           ; BSR set to: 0
 12948                           ;inc\CANlib.h: 1059: RXF5SIDLbits.SID0 = 0x01;
 12949  001806  010F               	movlb	15	; () banked
 12950  001808  8B15               	bsf	21,5,b	;volatile
 12951  00180A  D002               	goto	l521
 12952  00180C                     l520:
 12953                           
 12954                           ; BSR set to: 0
 12955                           ;inc\CANlib.h: 1060: else
 12956                           ;inc\CANlib.h: 1061: RXF5SIDLbits.SID0 = 0x00;
 12957  00180C  010F               	movlb	15	; () banked
 12958  00180E  9B15               	bcf	21,5,b	;volatile
 12959  001810                     l521:
 12960                           
 12961                           ; BSR set to: 15
 12962                           ;inc\CANlib.h: 1063: if (filter & 0x00080000)
 12963  001810  0100               	movlb	0	; () banked
 12964  001812  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12965  001814  D003               	goto	l522
 12966                           
 12967                           ; BSR set to: 0
 12968                           ;inc\CANlib.h: 1064: RXF5SIDLbits.SID1 = 0x01;
 12969  001816  010F               	movlb	15	; () banked
 12970  001818  8D15               	bsf	21,6,b	;volatile
 12971  00181A  D002               	goto	l523
 12972  00181C                     l522:
 12973                           
 12974                           ; BSR set to: 0
 12975                           ;inc\CANlib.h: 1065: else
 12976                           ;inc\CANlib.h: 1066: RXF5SIDLbits.SID1 = 0x00;
 12977  00181C  010F               	movlb	15	; () banked
 12978  00181E  9D15               	bcf	21,6,b	;volatile
 12979  001820                     l523:
 12980                           
 12981                           ; BSR set to: 15
 12982                           ;inc\CANlib.h: 1068: if (filter & 0x00100000)
 12983  001820  0100               	movlb	0	; () banked
 12984  001822  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12985  001824  D003               	goto	l524
 12986                           
 12987                           ; BSR set to: 0
 12988                           ;inc\CANlib.h: 1069: RXF5SIDLbits.SID2 = 0x01 ;
 12989  001826  010F               	movlb	15	; () banked
 12990  001828  8F15               	bsf	21,7,b	;volatile
 12991  00182A  D003               	goto	l4864
 12992  00182C                     l524:
 12993                           
 12994                           ; BSR set to: 0
 12995                           ;inc\CANlib.h: 1070: else
 12996                           ;inc\CANlib.h: 1071: RXF5SIDLbits.SID2 = 0x00 ;
 12997  00182C  010F               	movlb	15	; () banked
 12998  00182E  9F15               	bcf	21,7,b	;volatile
 12999  001830  D000               	goto	l4864
 13000  001832                     l4864:
 13001                           
 13002                           ; BSR set to: 15
 13003                           ;inc\CANlib.h: 1073: tamp = (filter >> 21);
 13004  001832  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 13005  001836  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 13006  00183A  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 13007  00183E  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 13008  001842  0E16               	movlw	22
 13009  001844  D006               	goto	u5760
 13010  001846                     u5765:
 13011  001846  0100               	movlb	0	; () banked
 13012  001848  90D8               	bcf	status,0,c
 13013  00184A  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 13014  00184C  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 13015  00184E  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 13016  001850  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 13017  001852                     u5760:
 13018  001852  2EE8               	decfsz	wreg,f,c
 13019  001854  D7F8               	goto	u5765
 13020  001856  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 13021  00185A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 13022  00185E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 13023  001862  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 13024                           
 13025                           ; BSR set to: 0
 13026                           ;inc\CANlib.h: 1074: tamp = tamp & 0x000000FF;
 13027  001866  0100               	movlb	0	; () banked
 13028  001868  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 13029  00186A  0100               	movlb	0	; () banked
 13030  00186C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13031  00186E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 13032  001870  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 13033  001872  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 13034                           
 13035                           ; BSR set to: 0
 13036                           ;inc\CANlib.h: 1075: RXF5SIDH = (unsigned char) tamp;
 13037  001874  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 13038  001878  0012               	return	
 13039                           
 13040                           ; BSR set to: 0
 13041                           
 13042                           ; BSR set to: 0
 13043  00187A  0012               	return		;funcret
 13044  00187C                     __end_of_CANSetFilter:
 13045                           	opt stack 0
 13046                           tblptru	equ	0xFF8
 13047                           tblptrh	equ	0xFF7
 13048                           tblptrl	equ	0xFF6
 13049                           tablat	equ	0xFF5
 13050                           prodh	equ	0xFF4
 13051                           prodl	equ	0xFF3
 13052                           intcon	equ	0xFF2
 13053                           intcon2	equ	0xFF1
 13054                           postinc0	equ	0xFEE
 13055                           wreg	equ	0xFE8
 13056                           postdec1	equ	0xFE5
 13057                           fsr1l	equ	0xFE1
 13058                           indf2	equ	0xFDF
 13059                           postinc2	equ	0xFDE
 13060                           postdec2	equ	0xFDD
 13061                           fsr2h	equ	0xFDA
 13062                           fsr2l	equ	0xFD9
 13063                           status	equ	0xFD8
 13064                           
 13065 ;; *************** function _CANOperationMode *****************
 13066 ;; Defined at:
 13067 ;;		line 206 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 13068 ;; Parameters:    Size  Location     Type
 13069 ;;  mode            1    wreg     enum E16348
 13070 ;; Auto vars:     Size  Location     Type
 13071 ;;  mode            1   23[BANK0 ] enum E16348
 13072 ;; Return value:  Size  Location     Type
 13073 ;;		None               void
 13074 ;; Registers used:
 13075 ;;		wreg, status,2, status,0
 13076 ;; Tracked objects:
 13077 ;;		On entry : 0/0
 13078 ;;		On exit  : 0/0
 13079 ;;		Unchanged: 0/0
 13080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13082 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13085 ;;Total ram usage:        1 bytes
 13086 ;; Hardware stack levels used:    1
 13087 ;; Hardware stack levels required when called:    5
 13088 ;; This function calls:
 13089 ;;		Nothing
 13090 ;; This function is called by:
 13091 ;;		_CANInitialize
 13092 ;; This function uses a non-reentrant model
 13093 ;;
 13094                           
 13095                           	psect	text36
 13096  005E06                     __ptext36:
 13097                           	opt stack 0
 13098  005E06                     _CANOperationMode:
 13099                           	opt stack 23
 13100                           
 13101                           ; BSR set to: 0
 13102                           ;incstack = 0
 13103                           ;CANOperationMode@mode stored from wreg
 13104  005E06  0100               	movlb	0	; () banked
 13105  005E08  6F77               	movwf	CANOperationMode@mode& (0+255),b
 13106                           
 13107                           ; BSR set to: 0
 13108                           ;inc\CANlib.h: 208: CANCON = mode;
 13109  005E0A  C077  FF6F         	movff	CANOperationMode@mode,3951	;volatile
 13110                           
 13111                           ; BSR set to: 0
 13112                           
 13113                           ;inc\CANlib.h: 210: while((CANSTAT & 0b11100000) != mode );
 13114  005E0E  D000               	goto	l4460
 13115  005E10                     l4460:
 13116                           
 13117                           ; BSR set to: 0
 13118  005E10  506E               	movf	3950,w,c	;volatile
 13119  005E12  0BE0               	andlw	224
 13120  005E14  0100               	movlb	0	; () banked
 13121  005E16  1977               	xorwf	CANOperationMode@mode& (0+255),w,b
 13122  005E18  A4D8               	btfss	status,2,c
 13123  005E1A  D7FA               	goto	l4460
 13124                           
 13125                           ; BSR set to: 0
 13126                           
 13127                           ; BSR set to: 0
 13128  005E1C  0012               	return		;funcret
 13129  005E1E                     __end_of_CANOperationMode:
 13130                           	opt stack 0
 13131                           tblptru	equ	0xFF8
 13132                           tblptrh	equ	0xFF7
 13133                           tblptrl	equ	0xFF6
 13134                           tablat	equ	0xFF5
 13135                           prodh	equ	0xFF4
 13136                           prodl	equ	0xFF3
 13137                           intcon	equ	0xFF2
 13138                           intcon2	equ	0xFF1
 13139                           postinc0	equ	0xFEE
 13140                           wreg	equ	0xFE8
 13141                           postdec1	equ	0xFE5
 13142                           fsr1l	equ	0xFE1
 13143                           indf2	equ	0xFDF
 13144                           postinc2	equ	0xFDE
 13145                           postdec2	equ	0xFDD
 13146                           fsr2h	equ	0xFDA
 13147                           fsr2l	equ	0xFD9
 13148                           status	equ	0xFD8
 13149                           
 13150 ;; *************** function _ISR_Bassa *****************
 13151 ;; Defined at:
 13152 ;;		line 125 in file "parcheggio.c"
 13153 ;; Parameters:    Size  Location     Type
 13154 ;;		None
 13155 ;; Auto vars:     Size  Location     Type
 13156 ;;  i               1   40[COMRAM] unsigned char 
 13157 ;;  MUX_index_co    2   37[COMRAM] unsigned char [2]
 13158 ;;  PORTA_temp      1   39[COMRAM] unsigned char 
 13159 ;; Return value:  Size  Location     Type
 13160 ;;		None               void
 13161 ;; Registers used:
 13162 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13163 ;; Tracked objects:
 13164 ;;		On entry : 0/0
 13165 ;;		On exit  : 0/0
 13166 ;;		Unchanged: 0/0
 13167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13169 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13170 ;;      Temps:         21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13171 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13172 ;;Total ram usage:       25 bytes
 13173 ;; Hardware stack levels used:    1
 13174 ;; Hardware stack levels required when called:    4
 13175 ;; This function calls:
 13176 ;;		_CANreceiveMessage
 13177 ;;		i1_CANsendMessage
 13178 ;;		i1_delay_ms
 13179 ;; This function is called by:
 13180 ;;		Interrupt level 1
 13181 ;; This function uses a non-reentrant model
 13182 ;;
 13183                           
 13184                           	psect	intcodelo
 13185  000018                     __pintcodelo:
 13186                           	opt stack 0
 13187  000018                     _ISR_Bassa:
 13188                           	opt stack 19
 13189                           
 13190                           ; BSR set to: 0
 13191                           ;incstack = 0
 13192  000018  CFD8 F015          	movff	status,??_ISR_Bassa+4
 13193  00001C  CFE8 F016          	movff	wreg,??_ISR_Bassa+5
 13194  000020  CFE0 F017          	movff	bsr,??_ISR_Bassa+6
 13195  000024  CFFA F018          	movff	pclath,??_ISR_Bassa+7
 13196  000028  CFFB F019          	movff	pclatu,??_ISR_Bassa+8
 13197  00002C  CFE9 F01A          	movff	fsr0l,??_ISR_Bassa+9
 13198  000030  CFEA F01B          	movff	fsr0h,??_ISR_Bassa+10
 13199  000034  CFE1 F01C          	movff	fsr1l,??_ISR_Bassa+11
 13200  000038  CFE2 F01D          	movff	fsr1h,??_ISR_Bassa+12
 13201  00003C  CFD9 F01E          	movff	fsr2l,??_ISR_Bassa+13
 13202  000040  CFDA F01F          	movff	fsr2h,??_ISR_Bassa+14
 13203  000044  CFF3 F020          	movff	prodl,??_ISR_Bassa+15
 13204  000048  CFF4 F021          	movff	prodh,??_ISR_Bassa+16
 13205  00004C  CFF6 F022          	movff	tblptrl,??_ISR_Bassa+17
 13206  000050  CFF7 F023          	movff	tblptrh,??_ISR_Bassa+18
 13207  000054  CFF8 F024          	movff	tblptru,??_ISR_Bassa+19
 13208  000058  CFF5 F025          	movff	tablat,??_ISR_Bassa+20
 13209                           
 13210                           ;parcheggio.c: 128: if (INTCONbits.TMR0IF == 1) {
 13211  00005C  A4F2               	btfss	intcon,2,c	;volatile
 13212  00005E  D0B4               	goto	i1l5860
 13213                           
 13214                           ;parcheggio.c: 129: INTCONbits.INT0IE = 0;
 13215  000060  98F2               	bcf	intcon,4,c	;volatile
 13216                           
 13217                           ;parcheggio.c: 130: T0CONbits.TMR0ON = 0;
 13218  000062  9ED5               	bcf	4053,7,c	;volatile
 13219                           
 13220                           ;parcheggio.c: 131: TMR0H = 0x34;
 13221  000064  0E34               	movlw	52
 13222  000066  6ED7               	movwf	4055,c	;volatile
 13223                           
 13224                           ;parcheggio.c: 132: TMR0L = 0xE0;
 13225  000068  0EE0               	movlw	224
 13226  00006A  6ED6               	movwf	4054,c	;volatile
 13227                           
 13228                           ;parcheggio.c: 133: T0CONbits.TMR0ON = 1;
 13229  00006C  8ED5               	bsf	4053,7,c	;volatile
 13230                           
 13231                           ;parcheggio.c: 135: if (distance_error == 1) {
 13232  00006E  AA51               	btfss	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13233  000070  D00C               	goto	i1l704
 13234                           
 13235                           ;parcheggio.c: 136: sensor_distance[MUX_index] = 5000;
 13236  000072  504C               	movf	_MUX_index,w,c	;volatile
 13237  000074  0D02               	mullw	2
 13238  000076  0E2A               	movlw	low _sensor_distance
 13239  000078  24F3               	addwf	prodl,w,c
 13240  00007A  6ED9               	movwf	fsr2l,c
 13241  00007C  0E00               	movlw	high _sensor_distance
 13242  00007E  20F4               	addwfc	prodh,w,c
 13243  000080  6EDA               	movwf	fsr2h,c
 13244  000082  0E88               	movlw	136
 13245  000084  6EDE               	movwf	postinc2,c
 13246  000086  0E13               	movlw	19
 13247  000088  6EDD               	movwf	postdec2,c
 13248  00008A                     i1l704:
 13249                           
 13250                           ;parcheggio.c: 137: }
 13251                           ;parcheggio.c: 139: if ((sensor_distance[MUX_index] < 250)&&(start_operation == 0)&&((MU
      +                          X_index == 3) || (MUX_index == 6))) {
 13252  00008A  504C               	movf	_MUX_index,w,c	;volatile
 13253  00008C  0D02               	mullw	2
 13254  00008E  0E2A               	movlw	low _sensor_distance
 13255  000090  24F3               	addwf	prodl,w,c
 13256  000092  6ED9               	movwf	fsr2l,c
 13257  000094  0E00               	movlw	high _sensor_distance
 13258  000096  20F4               	addwfc	prodh,w,c
 13259  000098  6EDA               	movwf	fsr2h,c
 13260  00009A  0E01               	movlw	1
 13261  00009C  50DB               	movf	plusw2,w,c
 13262  00009E  E118               	bnz	i1l5804
 13263  0000A0  0EFA               	movlw	250
 13264  0000A2  5CDE               	subwf	postinc2,w,c
 13265  0000A4  B0D8               	btfsc	status,0,c
 13266  0000A6  D014               	goto	i1l5804
 13267  0000A8  BC52               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13268  0000AA  D012               	goto	i1l5804
 13269  0000AC  0E03               	movlw	3
 13270  0000AE  184C               	xorwf	_MUX_index,w,c	;volatile
 13271  0000B0  B4D8               	btfsc	status,2,c
 13272  0000B2  D004               	goto	i1l5800
 13273  0000B4  0E06               	movlw	6
 13274  0000B6  184C               	xorwf	_MUX_index,w,c	;volatile
 13275  0000B8  A4D8               	btfss	status,2,c
 13276  0000BA  D00A               	goto	i1l5804
 13277  0000BC                     i1l5800:
 13278                           
 13279                           ;parcheggio.c: 140: if (MUX_index == 3) {
 13280  0000BC  0E03               	movlw	3
 13281  0000BE  184C               	xorwf	_MUX_index,w,c	;volatile
 13282  0000C0  A4D8               	btfss	status,2,c
 13283  0000C2  D003               	goto	i1l708
 13284                           
 13285                           ;parcheggio.c: 141: sensor_distance_short[1] = sensor_distance[3];
 13286  0000C4  C030  F186         	movff	_sensor_distance+6,_sensor_distance_short+1	;volatile
 13287                           
 13288                           ;parcheggio.c: 142: } else {
 13289  0000C8  D00D               	goto	i1l710
 13290  0000CA                     i1l708:
 13291                           
 13292                           ;parcheggio.c: 143: sensor_distance_short[0] = sensor_distance[6];
 13293  0000CA  C036  F185         	movff	_sensor_distance+12,_sensor_distance_short	;volatile
 13294                           
 13295                           ;parcheggio.c: 144: }
 13296                           ;parcheggio.c: 145: } else {
 13297  0000CE  D00A               	goto	i1l710
 13298  0000D0                     i1l5804:
 13299                           
 13300                           ;parcheggio.c: 146: sensor_distance_short[MUX_index] = 255;
 13301  0000D0  504C               	movf	_MUX_index,w,c	;volatile
 13302  0000D2  0D01               	mullw	1
 13303  0000D4  0E85               	movlw	low _sensor_distance_short
 13304  0000D6  24F3               	addwf	prodl,w,c
 13305  0000D8  6ED9               	movwf	fsr2l,c
 13306  0000DA  0E01               	movlw	high _sensor_distance_short
 13307  0000DC  20F4               	addwfc	prodh,w,c
 13308  0000DE  6EDA               	movwf	fsr2h,c
 13309  0000E0  0EFF               	movlw	255
 13310  0000E2  6EDF               	movwf	indf2,c
 13311  0000E4                     i1l710:
 13312                           
 13313                           ;parcheggio.c: 147: }
 13314                           ;parcheggio.c: 148: if ((sensor_distance[MUX_index] < 10)&&(start_operation == 1)&&(avvi
      +                          cinamento == 0)&&((MUX_index!=0)||(MUX_index!=1))) {
 13315  0000E4  504C               	movf	_MUX_index,w,c	;volatile
 13316  0000E6  0D02               	mullw	2
 13317  0000E8  0E2A               	movlw	low _sensor_distance
 13318  0000EA  24F3               	addwf	prodl,w,c
 13319  0000EC  6ED9               	movwf	fsr2l,c
 13320  0000EE  0E00               	movlw	high _sensor_distance
 13321  0000F0  20F4               	addwfc	prodh,w,c
 13322  0000F2  6EDA               	movwf	fsr2h,c
 13323  0000F4  0E01               	movlw	1
 13324  0000F6  50DB               	movf	plusw2,w,c
 13325  0000F8  E12E               	bnz	i1l5824
 13326  0000FA  0E0A               	movlw	10
 13327  0000FC  5CDE               	subwf	postinc2,w,c
 13328  0000FE  B0D8               	btfsc	status,0,c
 13329  000100  D02A               	goto	i1l5824
 13330  000102  BC52               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13331  000104  B651               	btfsc	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
 13332  000106  D027               	goto	i1l5824
 13333  000108  504C               	movf	_MUX_index,w,c	;volatile
 13334  00010A  A4D8               	btfss	status,2,c
 13335  00010C  D003               	goto	i1l5814
 13336  00010E  044C               	decf	_MUX_index,w,c	;volatile
 13337  000110  B4D8               	btfsc	status,2,c
 13338  000112  D021               	goto	i1l5824
 13339  000114                     i1l5814:
 13340                           
 13341                           ;parcheggio.c: 149: counter++;
 13342  000114  2A4F               	incf	_counter,f,c	;volatile
 13343                           
 13344                           ;parcheggio.c: 150: if (counter > 0) {
 13345  000116  504F               	movf	_counter,w,c	;volatile
 13346  000118  B4D8               	btfsc	status,2,c
 13347  00011A  D01D               	goto	i1l5824
 13348                           
 13349                           ;parcheggio.c: 151: data[0] = 4;
 13350  00011C  0E04               	movlw	4
 13351  00011E  0101               	movlb	1	; () banked
 13352  000120  6F55               	movwf	_data& (0+255),b	;volatile
 13353                           
 13354                           ; BSR set to: 1
 13355                           ;parcheggio.c: 152: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
 13356  000122  0E0D               	movlw	13
 13357  000124  6E01               	movwf	i1CANsendMessage@identifier,c
 13358  000126  0E00               	movlw	0
 13359  000128  6E02               	movwf	i1CANsendMessage@identifier+1,c
 13360  00012A  0E00               	movlw	0
 13361  00012C  6E03               	movwf	i1CANsendMessage@identifier+2,c
 13362  00012E  0E00               	movlw	0
 13363  000130  6E04               	movwf	i1CANsendMessage@identifier+3,c
 13364  000132  0E55               	movlw	low _data
 13365  000134  6E05               	movwf	i1CANsendMessage@data,c
 13366  000136  0E01               	movlw	high _data
 13367  000138  6E06               	movwf	i1CANsendMessage@data+1,c
 13368  00013A  0E08               	movlw	8
 13369  00013C  6E07               	movwf	i1CANsendMessage@dataLength,c
 13370  00013E  0EBC               	movlw	188
 13371  000140  6E08               	movwf	i1CANsendMessage@flags,c
 13372  000142  EC0E  F010         	call	i1_CANsendMessage	;wreg free
 13373                           
 13374                           ;parcheggio.c: 153: delay_ms(20);
 13375  000146  0E00               	movlw	0
 13376  000148  6E08               	movwf	i1delay_ms@value_ms+1,c
 13377  00014A  0E14               	movlw	20
 13378  00014C  6E07               	movwf	i1delay_ms@value_ms,c
 13379  00014E  EC7A  F02E         	call	i1_delay_ms	;wreg free
 13380  000152  00FF               	reset		;# 
 13381  000154  D000               	goto	i1l5824
 13382  000156                     i1l5824:
 13383                           
 13384                           ;parcheggio.c: 155: }
 13385                           ;parcheggio.c: 156: }
 13386                           ;parcheggio.c: 158: MUX_index++;
 13387  000156  2A4C               	incf	_MUX_index,f,c	;volatile
 13388                           
 13389                           ;parcheggio.c: 159: if (activation == 0) {
 13390  000158  B251               	btfsc	_activation/(0+8),_activation& (0+7),c	;volatile
 13391  00015A  D015               	goto	i1l5832
 13392                           
 13393                           ;parcheggio.c: 160: unsigned char MUX_index_collision [] = {3, 6};
 13394  00015C  C053  F026         	movff	ISR_Bassa@F16869,ISR_Bassa@MUX_index_collision
 13395  000160  C054  F027         	movff	ISR_Bassa@F16869+1,ISR_Bassa@MUX_index_collision+1
 13396                           
 13397                           ;parcheggio.c: 161: MUX_toggle = ~MUX_toggle;
 13398  000164  7051               	btg	_MUX_toggle/(0+8),_MUX_toggle& (0+7),c	;volatile
 13399                           
 13400                           ;parcheggio.c: 162: MUX_index = MUX_index_collision[MUX_toggle];
 13401  000166  A051               	btfss	_MUX_toggle/(0+8),_MUX_toggle& (0+7),c	;volatile
 13402  000168  D002               	goto	i1u719_20
 13403  00016A  0E01               	movlw	1
 13404  00016C  D001               	goto	i1u720_20
 13405  00016E                     i1u719_20:
 13406  00016E  0E00               	movlw	0
 13407  000170                     i1u720_20:
 13408  000170  6E11               	movwf	??_ISR_Bassa& (0+255),c
 13409  000172  6A12               	clrf	(??_ISR_Bassa+1)& (0+255),c
 13410  000174  0E26               	movlw	low ISR_Bassa@MUX_index_collision
 13411  000176  2411               	addwf	??_ISR_Bassa,w,c
 13412  000178  6ED9               	movwf	fsr2l,c
 13413  00017A  0E00               	movlw	high ISR_Bassa@MUX_index_collision
 13414  00017C  2012               	addwfc	??_ISR_Bassa+1,w,c
 13415  00017E  6EDA               	movwf	fsr2h,c
 13416  000180  50DF               	movf	indf2,w,c
 13417  000182  6E4C               	movwf	_MUX_index,c	;volatile
 13418  000184  D000               	goto	i1l5832
 13419  000186                     i1l5832:
 13420                           
 13421                           ;parcheggio.c: 163: }
 13422                           ;parcheggio.c: 165: if (MUX_index == 8) {
 13423  000186  0E08               	movlw	8
 13424  000188  184C               	xorwf	_MUX_index,w,c	;volatile
 13425  00018A  A4D8               	btfss	status,2,c
 13426  00018C  D002               	goto	i1l718
 13427                           
 13428                           ;parcheggio.c: 166: MUX_index = 0;
 13429  00018E  0E00               	movlw	0
 13430  000190  6E4C               	movwf	_MUX_index,c	;volatile
 13431  000192                     i1l718:
 13432                           
 13433                           ;parcheggio.c: 167: }
 13434                           ;parcheggio.c: 169: unsigned char PORTA_temp = 0;
 13435  000192  0E00               	movlw	0
 13436  000194  6E28               	movwf	ISR_Bassa@PORTA_temp,c
 13437                           
 13438                           ;parcheggio.c: 170: PORTA_temp = MUX_select[MUX_index];
 13439  000196  504C               	movf	_MUX_index,w,c	;volatile
 13440  000198  0D01               	mullw	1
 13441  00019A  0E3A               	movlw	low _MUX_select
 13442  00019C  24F3               	addwf	prodl,w,c
 13443  00019E  6ED9               	movwf	fsr2l,c
 13444  0001A0  0E00               	movlw	high _MUX_select
 13445  0001A2  20F4               	addwfc	prodh,w,c
 13446  0001A4  6EDA               	movwf	fsr2h,c
 13447  0001A6  50DF               	movf	indf2,w,c
 13448  0001A8  6E28               	movwf	ISR_Bassa@PORTA_temp,c
 13449                           
 13450                           ;parcheggio.c: 171: PORTA = PORTA_temp;
 13451  0001AA  C028  FF80         	movff	ISR_Bassa@PORTA_temp,3968	;volatile
 13452                           
 13453                           ;parcheggio.c: 173: TRISBbits.RB0 = 0;
 13454  0001AE  9093               	bcf	3987,0,c	;volatile
 13455                           
 13456                           ;parcheggio.c: 174: LATBbits.LATB0 = 1;
 13457  0001B0  808A               	bsf	3978,0,c	;volatile
 13458                           
 13459                           ;parcheggio.c: 175: _delay((unsigned long)((15)*(16000000/4000000.0)));
 13460  0001B2  0E14               	movlw	20
 13461  0001B4                     i1u859_27:
 13462  0001B4  2EE8               	decfsz	wreg,f,c
 13463  0001B6  D7FE               	goto	i1u859_27
 13464                           
 13465                           ;parcheggio.c: 176: distance_error = 1;
 13466  0001B8  8A51               	bsf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13467                           
 13468                           ;parcheggio.c: 177: LATBbits.LATB0 = 0;
 13469  0001BA  908A               	bcf	3978,0,c	;volatile
 13470                           
 13471                           ;parcheggio.c: 178: TRISBbits.RB0 = 1;
 13472  0001BC  8093               	bsf	3987,0,c	;volatile
 13473                           
 13474                           ;parcheggio.c: 179: INTCONbits.INT0IF = 0;
 13475  0001BE  92F2               	bcf	intcon,1,c	;volatile
 13476                           
 13477                           ;parcheggio.c: 180: INTCON2bits.INTEDG0 = 1;
 13478  0001C0  8CF1               	bsf	intcon2,6,c	;volatile
 13479                           
 13480                           ;parcheggio.c: 181: INTCONbits.INT0IE = 1;
 13481  0001C2  88F2               	bsf	intcon,4,c	;volatile
 13482                           
 13483                           ;parcheggio.c: 182: INTCONbits.TMR0IF = 0;
 13484  0001C4  94F2               	bcf	intcon,2,c	;volatile
 13485  0001C6  D000               	goto	i1l5860
 13486  0001C8                     i1l5860:
 13487                           
 13488                           ;parcheggio.c: 184: }
 13489                           ;parcheggio.c: 187: if ((PIR3bits.RXB0IF == 1) || (PIR3bits.RXB1IF == 1)) {
 13490  0001C8  B0A4               	btfsc	4004,0,c	;volatile
 13491  0001CA  D002               	goto	i1l5864
 13492  0001CC  A2A4               	btfss	4004,1,c	;volatile
 13493  0001CE  D099               	goto	i1l731
 13494  0001D0                     i1l5864:
 13495                           
 13496                           ;parcheggio.c: 188: CANreceiveMessage(&msg);
 13497  0001D0  0E46               	movlw	low _msg
 13498  0001D2  6E01               	movwf	CANreceiveMessage@msg,c
 13499  0001D4  0E01               	movlw	high _msg
 13500  0001D6  6E02               	movwf	CANreceiveMessage@msg+1,c
 13501  0001D8  EC25  F016         	call	_CANreceiveMessage	;wreg free
 13502                           
 13503                           ;parcheggio.c: 190: if (msg.identifier == 0b00000001111) {
 13504  0001DC  0E0F               	movlw	15
 13505  0001DE  0101               	movlb	1	; () banked
 13506  0001E0  1946               	xorwf	_msg& (0+255),w,b
 13507  0001E2  0101               	movlb	1	; () banked
 13508  0001E4  1147               	iorwf	(_msg+1)& (0+255),w,b
 13509  0001E6  0101               	movlb	1	; () banked
 13510  0001E8  1148               	iorwf	(_msg+2)& (0+255),w,b
 13511  0001EA  0101               	movlb	1	; () banked
 13512  0001EC  1149               	iorwf	(_msg+3)& (0+255),w,b
 13513  0001EE  A4D8               	btfss	status,2,c
 13514  0001F0  D002               	goto	i1l5870
 13515                           
 13516                           ; BSR set to: 1
 13517                           ;parcheggio.c: 191: asd = 0;
 13518  0001F2  9451               	bcf	_asd/(0+8),_asd& (0+7),c	;volatile
 13519  0001F4  D000               	goto	i1l5870
 13520  0001F6                     i1l5870:
 13521                           
 13522                           ; BSR set to: 1
 13523                           ;parcheggio.c: 192: }
 13524                           ;parcheggio.c: 194: if ((msg.identifier == 0b00000001001) && (msg.RTR != 1)) {
 13525  0001F6  0E09               	movlw	9
 13526  0001F8  0101               	movlb	1	; () banked
 13527  0001FA  1946               	xorwf	_msg& (0+255),w,b
 13528  0001FC  0101               	movlb	1	; () banked
 13529  0001FE  1147               	iorwf	(_msg+1)& (0+255),w,b
 13530  000200  0101               	movlb	1	; () banked
 13531  000202  1148               	iorwf	(_msg+2)& (0+255),w,b
 13532  000204  0101               	movlb	1	; () banked
 13533  000206  1149               	iorwf	(_msg+3)& (0+255),w,b
 13534  000208  A4D8               	btfss	status,2,c
 13535  00020A  D02E               	goto	i1l5886
 13536                           
 13537                           ; BSR set to: 1
 13538  00020C  0101               	movlb	1	; () banked
 13539  00020E  0554               	decf	(_msg+14)& (0+255),w,b
 13540  000210  B4D8               	btfsc	status,2,c
 13541  000212  D02A               	goto	i1l5886
 13542                           
 13543                           ; BSR set to: 1
 13544                           ;parcheggio.c: 195: distance_average = 0;
 13545  000214  0E00               	movlw	0
 13546  000216  0101               	movlb	1	; () banked
 13547  000218  6F3F               	movwf	(_distance_average+1)& (0+255),b	;volatile
 13548  00021A  0E00               	movlw	0
 13549  00021C  6F3E               	movwf	_distance_average& (0+255),b	;volatile
 13550                           
 13551                           ; BSR set to: 1
 13552                           ;parcheggio.c: 196: distance_dx = msg.data[1];
 13553  00021E  C14B  F044         	movff	_msg+5,_distance_dx	;volatile
 13554  000222  6A45               	clrf	_distance_dx+1,c	;volatile
 13555                           
 13556                           ;parcheggio.c: 197: distance_dx = ((distance_dx << 8) | msg.data[0]);
 13557  000224  5044               	movf	_distance_dx,w,c	;volatile
 13558  000226  6E11               	movwf	??_ISR_Bassa& (0+255),c
 13559  000228  0101               	movlb	1	; () banked
 13560  00022A  514A               	movf	(_msg+4)& (0+255),w,b
 13561  00022C  6E44               	movwf	_distance_dx,c	;volatile
 13562  00022E  C011  F045         	movff	??_ISR_Bassa,_distance_dx+1	;volatile
 13563                           
 13564                           ; BSR set to: 1
 13565                           ;parcheggio.c: 198: distance_sx = msg.data[3];
 13566  000232  C14D  F046         	movff	_msg+7,_distance_sx	;volatile
 13567  000236  6A47               	clrf	_distance_sx+1,c	;volatile
 13568                           
 13569                           ;parcheggio.c: 199: distance_sx = ((distance_sx << 8) | msg.data[2]);
 13570  000238  5046               	movf	_distance_sx,w,c	;volatile
 13571  00023A  6E11               	movwf	??_ISR_Bassa& (0+255),c
 13572  00023C  0101               	movlb	1	; () banked
 13573  00023E  514C               	movf	(_msg+6)& (0+255),w,b
 13574  000240  6E46               	movwf	_distance_sx,c	;volatile
 13575  000242  C011  F047         	movff	??_ISR_Bassa,_distance_sx+1	;volatile
 13576                           
 13577                           ; BSR set to: 1
 13578                           ;parcheggio.c: 200: distance_average = (distance_sx + distance_dx) / 2;
 13579  000246  5044               	movf	_distance_dx,w,c	;volatile
 13580  000248  2446               	addwf	_distance_sx,w,c	;volatile
 13581  00024A  6E11               	movwf	??_ISR_Bassa& (0+255),c
 13582  00024C  5045               	movf	_distance_dx+1,w,c	;volatile
 13583  00024E  2047               	addwfc	_distance_sx+1,w,c	;volatile
 13584  000250  6E12               	movwf	(??_ISR_Bassa+1)& (0+255),c
 13585  000252  90D8               	bcf	status,0,c
 13586  000254  3012               	rrcf	??_ISR_Bassa+1,w,c
 13587  000256  6E13               	movwf	(??_ISR_Bassa+2)& (0+255),c
 13588  000258  3011               	rrcf	??_ISR_Bassa,w,c
 13589  00025A  0101               	movlb	1	; () banked
 13590  00025C  6F3E               	movwf	_distance_average& (0+255),b	;volatile
 13591  00025E  C013  F13F         	movff	??_ISR_Bassa+2,_distance_average+1	;volatile
 13592                           
 13593                           ; BSR set to: 1
 13594                           ;parcheggio.c: 201: distance_received = 1;
 13595  000262  8C51               	bsf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
 13596                           
 13597                           ; BSR set to: 1
 13598                           ;parcheggio.c: 202: distance_received1 = 1;
 13599  000264  8E51               	bsf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
 13600  000266  D000               	goto	i1l5886
 13601  000268                     i1l5886:
 13602                           
 13603                           ; BSR set to: 1
 13604                           ;parcheggio.c: 203: }
 13605                           ;parcheggio.c: 205: if (msg.identifier == 0b00000001100) {
 13606  000268  0E0C               	movlw	12
 13607  00026A  0101               	movlb	1	; () banked
 13608  00026C  1946               	xorwf	_msg& (0+255),w,b
 13609  00026E  0101               	movlb	1	; () banked
 13610  000270  1147               	iorwf	(_msg+1)& (0+255),w,b
 13611  000272  0101               	movlb	1	; () banked
 13612  000274  1148               	iorwf	(_msg+2)& (0+255),w,b
 13613  000276  0101               	movlb	1	; () banked
 13614  000278  1149               	iorwf	(_msg+3)& (0+255),w,b
 13615  00027A  A4D8               	btfss	status,2,c
 13616  00027C  D00D               	goto	i1l5892
 13617                           
 13618                           ; BSR set to: 1
 13619                           ;parcheggio.c: 206: if (msg.data[0] == 1) {
 13620  00027E  0101               	movlb	1	; () banked
 13621  000280  054A               	decf	(_msg+4)& (0+255),w,b
 13622  000282  A4D8               	btfss	status,2,c
 13623  000284  D003               	goto	i1l725
 13624                           
 13625                           ; BSR set to: 1
 13626                           ;parcheggio.c: 207: activation = 1;
 13627  000286  8251               	bsf	_activation/(0+8),_activation& (0+7),c	;volatile
 13628                           
 13629                           ;parcheggio.c: 208: PORTBbits.RB6 = 1;
 13630  000288  8C81               	bsf	3969,6,c	;volatile
 13631                           
 13632                           ;parcheggio.c: 209: } else {
 13633  00028A  D006               	goto	i1l5892
 13634  00028C                     i1l725:
 13635                           
 13636                           ; BSR set to: 1
 13637                           ;parcheggio.c: 210: activation = 0;
 13638  00028C  9251               	bcf	_activation/(0+8),_activation& (0+7),c	;volatile
 13639                           
 13640                           ;parcheggio.c: 211: PORTBbits.RB4 = 0;
 13641  00028E  9881               	bcf	3969,4,c	;volatile
 13642                           
 13643                           ;parcheggio.c: 212: PORTBbits.RB5 = 0;
 13644  000290  9A81               	bcf	3969,5,c	;volatile
 13645                           
 13646                           ;parcheggio.c: 213: PORTBbits.RB6 = 0;
 13647  000292  9C81               	bcf	3969,6,c	;volatile
 13648                           
 13649                           ;parcheggio.c: 214: request_sent = 0;
 13650  000294  9852               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
 13651                           
 13652                           ; BSR set to: 1
 13653  000296  D000               	goto	i1l5892
 13654  000298                     i1l5892:
 13655                           
 13656                           ; BSR set to: 1
 13657                           ;parcheggio.c: 215: }
 13658                           ;parcheggio.c: 216: }
 13659                           ;parcheggio.c: 218: if (msg.identifier == 0b00000001110) {
 13660  000298  0E0E               	movlw	14
 13661  00029A  0101               	movlb	1	; () banked
 13662  00029C  1946               	xorwf	_msg& (0+255),w,b
 13663  00029E  0101               	movlb	1	; () banked
 13664  0002A0  1147               	iorwf	(_msg+1)& (0+255),w,b
 13665  0002A2  0101               	movlb	1	; () banked
 13666  0002A4  1148               	iorwf	(_msg+2)& (0+255),w,b
 13667  0002A6  0101               	movlb	1	; () banked
 13668  0002A8  1149               	iorwf	(_msg+3)& (0+255),w,b
 13669  0002AA  A4D8               	btfss	status,2,c
 13670  0002AC  D002               	goto	i1l5896
 13671                           
 13672                           ; BSR set to: 1
 13673                           ;parcheggio.c: 219: start_operation = 1;
 13674  0002AE  8C52               	bsf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13675  0002B0  D000               	goto	i1l5896
 13676  0002B2                     i1l5896:
 13677                           
 13678                           ; BSR set to: 1
 13679                           ;parcheggio.c: 220: }
 13680                           ;parcheggio.c: 223: if (msg.identifier == 0b00000001000) {
 13681  0002B2  0E08               	movlw	8
 13682  0002B4  0101               	movlb	1	; () banked
 13683  0002B6  1946               	xorwf	_msg& (0+255),w,b
 13684  0002B8  0101               	movlb	1	; () banked
 13685  0002BA  1147               	iorwf	(_msg+1)& (0+255),w,b
 13686  0002BC  0101               	movlb	1	; () banked
 13687  0002BE  1148               	iorwf	(_msg+2)& (0+255),w,b
 13688  0002C0  0101               	movlb	1	; () banked
 13689  0002C2  1149               	iorwf	(_msg+3)& (0+255),w,b
 13690  0002C4  A4D8               	btfss	status,2,c
 13691  0002C6  D01A               	goto	i1l728
 13692                           
 13693                           ; BSR set to: 1
 13694                           ;parcheggio.c: 224: for (unsigned char i = 0; i < 8; i++) {
 13695  0002C8  0E00               	movlw	0
 13696  0002CA  6E29               	movwf	ISR_Bassa@i,c
 13697  0002CC                     i1l5900:
 13698                           
 13699                           ; BSR set to: 1
 13700  0002CC  0E07               	movlw	7
 13701  0002CE  6429               	cpfsgt	ISR_Bassa@i,c
 13702  0002D0  D001               	goto	i1l5904
 13703                           
 13704                           ; BSR set to: 1
 13705  0002D2  D014               	goto	i1l728
 13706  0002D4                     i1l5904:
 13707                           
 13708                           ;parcheggio.c: 225: data_speed_rx[i] = msg.data[i];
 13709  0002D4  5029               	movf	ISR_Bassa@i,w,c
 13710  0002D6  0D01               	mullw	1
 13711  0002D8  0E4A               	movlw	low (_msg+4)
 13712  0002DA  24F3               	addwf	prodl,w,c
 13713  0002DC  6ED9               	movwf	fsr2l,c
 13714  0002DE  0E01               	movlw	high (_msg+4)
 13715  0002E0  20F4               	addwfc	prodh,w,c
 13716  0002E2  6EDA               	movwf	fsr2h,c
 13717  0002E4  5029               	movf	ISR_Bassa@i,w,c
 13718  0002E6  0D01               	mullw	1
 13719  0002E8  0E00               	movlw	low _data_speed_rx
 13720  0002EA  24F3               	addwf	prodl,w,c
 13721  0002EC  6EE1               	movwf	fsr1l,c
 13722  0002EE  0E01               	movlw	high _data_speed_rx
 13723  0002F0  20F4               	addwfc	prodh,w,c
 13724  0002F2  6EE2               	movwf	fsr1h,c
 13725  0002F4  CFDF FFE7          	movff	indf2,indf1
 13726  0002F8  2A29               	incf	ISR_Bassa@i,f,c
 13727  0002FA  D7E8               	goto	i1l5900
 13728  0002FC                     i1l728:
 13729                           
 13730                           ;parcheggio.c: 226: }
 13731                           ;parcheggio.c: 227: }
 13732                           ;parcheggio.c: 230: PIR3bits.RXB0IF = 0;
 13733  0002FC  90A4               	bcf	4004,0,c	;volatile
 13734                           
 13735                           ;parcheggio.c: 231: PIR3bits.RXB1IF = 0;
 13736  0002FE  92A4               	bcf	4004,1,c	;volatile
 13737  000300  D000               	goto	i1l731
 13738  000302                     i1l731:
 13739  000302  C025  FFF5         	movff	??_ISR_Bassa+20,tablat
 13740  000306  C024  FFF8         	movff	??_ISR_Bassa+19,tblptru
 13741  00030A  C023  FFF7         	movff	??_ISR_Bassa+18,tblptrh
 13742  00030E  C022  FFF6         	movff	??_ISR_Bassa+17,tblptrl
 13743  000312  C021  FFF4         	movff	??_ISR_Bassa+16,prodh
 13744  000316  C020  FFF3         	movff	??_ISR_Bassa+15,prodl
 13745  00031A  C01F  FFDA         	movff	??_ISR_Bassa+14,fsr2h
 13746  00031E  C01E  FFD9         	movff	??_ISR_Bassa+13,fsr2l
 13747  000322  C01D  FFE2         	movff	??_ISR_Bassa+12,fsr1h
 13748  000326  C01C  FFE1         	movff	??_ISR_Bassa+11,fsr1l
 13749  00032A  C01B  FFEA         	movff	??_ISR_Bassa+10,fsr0h
 13750  00032E  C01A  FFE9         	movff	??_ISR_Bassa+9,fsr0l
 13751  000332  C019  FFFB         	movff	??_ISR_Bassa+8,pclatu
 13752  000336  C018  FFFA         	movff	??_ISR_Bassa+7,pclath
 13753  00033A  C017  FFE0         	movff	??_ISR_Bassa+6,bsr
 13754  00033E  C016  FFE8         	movff	??_ISR_Bassa+5,wreg
 13755  000342  C015  FFD8         	movff	??_ISR_Bassa+4,status
 13756  000346  0010               	retfie	
 13757  000348                     __end_of_ISR_Bassa:
 13758                           	opt stack 0
 13759                           pclatu	equ	0xFFB
 13760                           pclath	equ	0xFFA
 13761                           tblptru	equ	0xFF8
 13762                           tblptrh	equ	0xFF7
 13763                           tblptrl	equ	0xFF6
 13764                           tablat	equ	0xFF5
 13765                           prodh	equ	0xFF4
 13766                           prodl	equ	0xFF3
 13767                           intcon	equ	0xFF2
 13768                           intcon2	equ	0xFF1
 13769                           postinc0	equ	0xFEE
 13770                           fsr0h	equ	0xFEA
 13771                           fsr0l	equ	0xFE9
 13772                           wreg	equ	0xFE8
 13773                           indf1	equ	0xFE7
 13774                           postdec1	equ	0xFE5
 13775                           fsr1h	equ	0xFE2
 13776                           fsr1l	equ	0xFE1
 13777                           bsr	equ	0xFE0
 13778                           indf2	equ	0xFDF
 13779                           postinc2	equ	0xFDE
 13780                           postdec2	equ	0xFDD
 13781                           plusw2	equ	0xFDB
 13782                           fsr2h	equ	0xFDA
 13783                           fsr2l	equ	0xFD9
 13784                           status	equ	0xFD8
 13785                           
 13786 ;; *************** function i1_delay_ms *****************
 13787 ;; Defined at:
 13788 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
 13789 ;; Parameters:    Size  Location     Type
 13790 ;;  value_ms        2    6[COMRAM] unsigned int 
 13791 ;; Auto vars:     Size  Location     Type
 13792 ;;		None
 13793 ;; Return value:  Size  Location     Type
 13794 ;;		None               void
 13795 ;; Registers used:
 13796 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13797 ;; Tracked objects:
 13798 ;;		On entry : 0/0
 13799 ;;		On exit  : 0/0
 13800 ;;		Unchanged: 0/0
 13801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13802 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13805 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13806 ;;Total ram usage:        2 bytes
 13807 ;; Hardware stack levels used:    1
 13808 ;; Hardware stack levels required when called:    3
 13809 ;; This function calls:
 13810 ;;		i1___wmul
 13811 ;; This function is called by:
 13812 ;;		_ISR_Bassa
 13813 ;; This function uses a non-reentrant model
 13814 ;;
 13815                           
 13816                           	psect	text38
 13817  005CF4                     __ptext38:
 13818                           	opt stack 0
 13819  005CF4                     i1_delay_ms:
 13820                           	opt stack 19
 13821                           
 13822                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
 13823                           
 13824                           ;incstack = 0
 13825  005CF4  C0E7  F001         	movff	_delay_quartz_frequency_value,i1___wmul@multiplier	;volatile
 13826  005CF8  6A02               	clrf	i1___wmul@multiplier+1,c
 13827  005CFA  C007  F003         	movff	i1delay_ms@value_ms,i1___wmul@multiplicand
 13828  005CFE  C008  F004         	movff	i1delay_ms@value_ms+1,i1___wmul@multiplicand+1
 13829  005D02  ECDC  F02E         	call	i1___wmul	;wreg free
 13830  005D06  C001  F0E3         	movff	?i1___wmul,_clock_counter_reference	;volatile
 13831  005D0A  C002  F0E4         	movff	?i1___wmul+1,_clock_counter_reference+1	;volatile
 13832                           
 13833                           ;src\delay.c: 75: while (clock_counter_reference) {
 13834  005D0E  D007               	goto	i1l567
 13835  005D10                     i1l5758:
 13836                           
 13837                           ;src\delay.c: 85: _delay(240);
 13838  005D10  0E50               	movlw	80
 13839  005D12                     i1u860_27:
 13840  005D12  2EE8               	decfsz	wreg,f,c
 13841  005D14  D7FE               	goto	i1u860_27
 13842                           
 13843                           ;src\delay.c: 88: clock_counter_reference--;
 13844  005D16  0100               	movlb	0	; () banked
 13845  005D18  07E3               	decf	_clock_counter_reference& (0+255),f,b	;volatile
 13846  005D1A  A0D8               	btfss	status,0,c
 13847  005D1C  07E4               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
 13848  005D1E                     i1l567:
 13849  005D1E  0100               	movlb	0	; () banked
 13850  005D20  51E3               	movf	_clock_counter_reference& (0+255),w,b	;volatile
 13851  005D22  0100               	movlb	0	; () banked
 13852  005D24  11E4               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
 13853  005D26  A4D8               	btfss	status,2,c
 13854  005D28  D7F3               	goto	i1l5758
 13855                           
 13856                           ; BSR set to: 0
 13857                           
 13858                           ; BSR set to: 0
 13859  005D2A  0012               	return		;funcret
 13860  005D2C                     __end_ofi1_delay_ms:
 13861                           	opt stack 0
 13862                           pclatu	equ	0xFFB
 13863                           pclath	equ	0xFFA
 13864                           tblptru	equ	0xFF8
 13865                           tblptrh	equ	0xFF7
 13866                           tblptrl	equ	0xFF6
 13867                           tablat	equ	0xFF5
 13868                           prodh	equ	0xFF4
 13869                           prodl	equ	0xFF3
 13870                           intcon	equ	0xFF2
 13871                           intcon2	equ	0xFF1
 13872                           postinc0	equ	0xFEE
 13873                           fsr0h	equ	0xFEA
 13874                           fsr0l	equ	0xFE9
 13875                           wreg	equ	0xFE8
 13876                           indf1	equ	0xFE7
 13877                           postdec1	equ	0xFE5
 13878                           fsr1h	equ	0xFE2
 13879                           fsr1l	equ	0xFE1
 13880                           bsr	equ	0xFE0
 13881                           indf2	equ	0xFDF
 13882                           postinc2	equ	0xFDE
 13883                           postdec2	equ	0xFDD
 13884                           plusw2	equ	0xFDB
 13885                           fsr2h	equ	0xFDA
 13886                           fsr2l	equ	0xFD9
 13887                           status	equ	0xFD8
 13888                           
 13889 ;; *************** function i1___wmul *****************
 13890 ;; Defined at:
 13891 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 13892 ;; Parameters:    Size  Location     Type
 13893 ;;  multiplier      2    0[COMRAM] unsigned int 
 13894 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13895 ;; Auto vars:     Size  Location     Type
 13896 ;;  __wmul          2    4[COMRAM] unsigned int 
 13897 ;; Return value:  Size  Location     Type
 13898 ;;                  2    0[COMRAM] unsigned int 
 13899 ;; Registers used:
 13900 ;;		wreg, status,2, status,0, prodl, prodh
 13901 ;; Tracked objects:
 13902 ;;		On entry : 0/0
 13903 ;;		On exit  : 0/0
 13904 ;;		Unchanged: 0/0
 13905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13906 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13907 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13909 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13910 ;;Total ram usage:        6 bytes
 13911 ;; Hardware stack levels used:    1
 13912 ;; Hardware stack levels required when called:    2
 13913 ;; This function calls:
 13914 ;;		Nothing
 13915 ;; This function is called by:
 13916 ;;		i1_delay_ms
 13917 ;; This function uses a non-reentrant model
 13918 ;;
 13919                           
 13920                           	psect	text39
 13921  005DB8                     __ptext39:
 13922                           	opt stack 0
 13923  005DB8                     i1___wmul:
 13924                           	opt stack 19
 13925                           
 13926                           ; BSR set to: 0
 13927                           ;incstack = 0
 13928  005DB8  5001               	movf	i1___wmul@multiplier,w,c
 13929  005DBA  0203               	mulwf	i1___wmul@multiplicand,c
 13930  005DBC  CFF3 F005          	movff	prodl,i1___wmul@product
 13931  005DC0  CFF4 F006          	movff	prodh,i1___wmul@product+1
 13932  005DC4  5001               	movf	i1___wmul@multiplier,w,c
 13933  005DC6  0204               	mulwf	i1___wmul@multiplicand+1,c
 13934  005DC8  50F3               	movf	prodl,w,c
 13935  005DCA  2606               	addwf	i1___wmul@product+1,f,c
 13936  005DCC  5002               	movf	i1___wmul@multiplier+1,w,c
 13937  005DCE  0203               	mulwf	i1___wmul@multiplicand,c
 13938  005DD0  50F3               	movf	prodl,w,c
 13939  005DD2  2606               	addwf	i1___wmul@product+1,f,c
 13940  005DD4  C005  F001         	movff	i1___wmul@product,?i1___wmul
 13941  005DD8  C006  F002         	movff	i1___wmul@product+1,?i1___wmul+1
 13942  005DDC  0012               	return	
 13943  005DDE  0012               	return		;funcret
 13944  005DE0                     __end_ofi1___wmul:
 13945                           	opt stack 0
 13946                           pclatu	equ	0xFFB
 13947                           pclath	equ	0xFFA
 13948                           tblptru	equ	0xFF8
 13949                           tblptrh	equ	0xFF7
 13950                           tblptrl	equ	0xFF6
 13951                           tablat	equ	0xFF5
 13952                           prodh	equ	0xFF4
 13953                           prodl	equ	0xFF3
 13954                           intcon	equ	0xFF2
 13955                           intcon2	equ	0xFF1
 13956                           postinc0	equ	0xFEE
 13957                           fsr0h	equ	0xFEA
 13958                           fsr0l	equ	0xFE9
 13959                           wreg	equ	0xFE8
 13960                           indf1	equ	0xFE7
 13961                           postdec1	equ	0xFE5
 13962                           fsr1h	equ	0xFE2
 13963                           fsr1l	equ	0xFE1
 13964                           bsr	equ	0xFE0
 13965                           indf2	equ	0xFDF
 13966                           postinc2	equ	0xFDE
 13967                           postdec2	equ	0xFDD
 13968                           plusw2	equ	0xFDB
 13969                           fsr2h	equ	0xFDA
 13970                           fsr2l	equ	0xFD9
 13971                           status	equ	0xFD8
 13972                           
 13973 ;; *************** function i1_CANsendMessage *****************
 13974 ;; Defined at:
 13975 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 13976 ;; Parameters:    Size  Location     Type
 13977 ;;  identifier      4    0[COMRAM] unsigned long 
 13978 ;;  data            2    4[COMRAM] PTR unsigned char 
 13979 ;;		 -> data_speed(8), data_brake(8), data_steering(8), data_correction(8), 
 13980 ;;		 -> data_test(8), data(8), sensor_distance_short(8), 
 13981 ;;  dataLength      1    6[COMRAM] unsigned char 
 13982 ;;  flags           1    7[COMRAM] enum E16376
 13983 ;; Auto vars:     Size  Location     Type
 13984 ;;  CANsendMessa    4   12[COMRAM] unsigned long 
 13985 ;; Return value:  Size  Location     Type
 13986 ;;		None               void
 13987 ;; Registers used:
 13988 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13989 ;; Tracked objects:
 13990 ;;		On entry : 0/0
 13991 ;;		On exit  : 0/0
 13992 ;;		Unchanged: 0/0
 13993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13994 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13995 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13996 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13997 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13998 ;;Total ram usage:       16 bytes
 13999 ;; Hardware stack levels used:    1
 14000 ;; Hardware stack levels required when called:    2
 14001 ;; This function calls:
 14002 ;;		Nothing
 14003 ;; This function is called by:
 14004 ;;		_ISR_Bassa
 14005 ;; This function uses a non-reentrant model
 14006 ;;
 14007                           
 14008                           	psect	text40
 14009  00201C                     __ptext40:
 14010                           	opt stack 0
 14011  00201C                     i1_CANsendMessage:
 14012                           	opt stack 20
 14013                           
 14014                           ;inc\CANlib.h: 296: unsigned long tamp;
 14015                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
 14016                           
 14017                           ;incstack = 0
 14018  00201C  010F               	movlb	15	; () banked
 14019  00201E  B740               	btfsc	64,3,b	;volatile
 14020  002020  D118               	goto	i1l361
 14021                           
 14022                           ; BSR set to: 15
 14023                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
 14024  002022  C007  FF45         	movff	i1CANsendMessage@dataLength,3909	;volatile
 14025                           
 14026                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
 14027  002026  AC08               	btfss	i1CANsendMessage@flags,6,c
 14028  002028  D003               	goto	i1l362
 14029                           
 14030                           ; BSR set to: 15
 14031                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
 14032  00202A  010F               	movlb	15	; () banked
 14033  00202C  8D45               	bsf	69,6,b	;volatile
 14034  00202E  D002               	goto	i1l363
 14035  002030                     i1l362:
 14036                           
 14037                           ; BSR set to: 15
 14038                           ;inc\CANlib.h: 302: else
 14039                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
 14040  002030  010F               	movlb	15	; () banked
 14041  002032  9D45               	bcf	69,6,b	;volatile
 14042  002034                     i1l363:
 14043                           
 14044                           ; BSR set to: 15
 14045                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
 14046  002034  A608               	btfss	i1CANsendMessage@flags,3,c
 14047  002036  D067               	goto	i1l364
 14048                           
 14049                           ; BSR set to: 15
 14050                           ;inc\CANlib.h: 306: {
 14051                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
 14052  002038  5001               	movf	i1CANsendMessage@identifier,w,c
 14053  00203A  6E0D               	movwf	i1CANsendMessage@tamp,c
 14054  00203C  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14055  00203E  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14056  002040  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14057                           
 14058                           ; BSR set to: 15
 14059                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
 14060  002042  C00D  FF44         	movff	i1CANsendMessage@tamp,3908	;volatile
 14061                           
 14062                           ; BSR set to: 15
 14063                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
 14064  002046  0E00               	movlw	0
 14065  002048  1401               	andwf	i1CANsendMessage@identifier,w,c
 14066  00204A  6E0D               	movwf	i1CANsendMessage@tamp,c
 14067  00204C  0EFF               	movlw	255
 14068  00204E  1402               	andwf	i1CANsendMessage@identifier+1,w,c
 14069  002050  6E0E               	movwf	i1CANsendMessage@tamp+1,c
 14070  002052  0E00               	movlw	0
 14071  002054  1403               	andwf	i1CANsendMessage@identifier+2,w,c
 14072  002056  6E0F               	movwf	i1CANsendMessage@tamp+2,c
 14073  002058  0E00               	movlw	0
 14074  00205A  1404               	andwf	i1CANsendMessage@identifier+3,w,c
 14075  00205C  6E10               	movwf	i1CANsendMessage@tamp+3,c
 14076                           
 14077                           ; BSR set to: 15
 14078                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
 14079  00205E  C00D  F009         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14080  002062  C00E  F00A         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14081  002066  C00F  F00B         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14082  00206A  C010  F00C         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14083  00206E  C00A  F009         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14084  002072  C00B  F00A         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14085  002076  C00C  F00B         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14086  00207A  6A0C               	clrf	??i1_CANsendMessage+3,c
 14087  00207C  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14088  002080  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14089  002084  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14090  002088  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14091                           
 14092                           ; BSR set to: 15
 14093                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
 14094  00208C  C00D  FF43         	movff	i1CANsendMessage@tamp,3907	;volatile
 14095                           
 14096                           ; BSR set to: 15
 14097                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
 14098  002090  0E00               	movlw	0
 14099  002092  010F               	movlb	15	; () banked
 14100  002094  6F42               	movwf	66,b	;volatile
 14101                           
 14102                           ; BSR set to: 15
 14103                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
 14104  002096  010F               	movlb	15	; () banked
 14105  002098  8742               	bsf	66,3,b	;volatile
 14106                           
 14107                           ; BSR set to: 15
 14108                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
 14109  00209A  A003               	btfss	i1CANsendMessage@identifier+2,0,c
 14110  00209C  D002               	goto	i1l365
 14111                           
 14112                           ; BSR set to: 15
 14113                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
 14114  00209E  010F               	movlb	15	; () banked
 14115  0020A0  8142               	bsf	66,0,b	;volatile
 14116  0020A2                     i1l365:
 14117                           
 14118                           ; BSR set to: 15
 14119                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
 14120  0020A2  A203               	btfss	i1CANsendMessage@identifier+2,1,c
 14121  0020A4  D002               	goto	i1l366
 14122                           
 14123                           ; BSR set to: 15
 14124                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
 14125  0020A6  010F               	movlb	15	; () banked
 14126  0020A8  8342               	bsf	66,1,b	;volatile
 14127  0020AA                     i1l366:
 14128                           
 14129                           ; BSR set to: 15
 14130                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
 14131  0020AA  A403               	btfss	i1CANsendMessage@identifier+2,2,c
 14132  0020AC  D002               	goto	i1l367
 14133                           
 14134                           ; BSR set to: 15
 14135                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
 14136  0020AE  010F               	movlb	15	; () banked
 14137  0020B0  8B42               	bsf	66,5,b	;volatile
 14138  0020B2                     i1l367:
 14139                           
 14140                           ; BSR set to: 15
 14141                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
 14142  0020B2  A603               	btfss	i1CANsendMessage@identifier+2,3,c
 14143  0020B4  D002               	goto	i1l368
 14144                           
 14145                           ; BSR set to: 15
 14146                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
 14147  0020B6  010F               	movlb	15	; () banked
 14148  0020B8  8D42               	bsf	66,6,b	;volatile
 14149  0020BA                     i1l368:
 14150                           
 14151                           ; BSR set to: 15
 14152                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
 14153  0020BA  A803               	btfss	i1CANsendMessage@identifier+2,4,c
 14154  0020BC  D003               	goto	i1l5558
 14155                           
 14156                           ; BSR set to: 15
 14157                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
 14158  0020BE  010F               	movlb	15	; () banked
 14159  0020C0  8F42               	bsf	66,7,b	;volatile
 14160  0020C2  D000               	goto	i1l5558
 14161  0020C4                     i1l5558:
 14162                           
 14163                           ; BSR set to: 15
 14164                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
 14165  0020C4  C001  F009         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14166  0020C8  C002  F00A         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14167  0020CC  C003  F00B         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14168  0020D0  C004  F00C         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14169  0020D4  0E16               	movlw	22
 14170  0020D6  D005               	goto	i1u672_20
 14171  0020D8                     i1u672_25:
 14172  0020D8  90D8               	bcf	status,0,c
 14173  0020DA  320C               	rrcf	??i1_CANsendMessage+3,f,c
 14174  0020DC  320B               	rrcf	??i1_CANsendMessage+2,f,c
 14175  0020DE  320A               	rrcf	??i1_CANsendMessage+1,f,c
 14176  0020E0  3209               	rrcf	??i1_CANsendMessage,f,c
 14177  0020E2                     i1u672_20:
 14178  0020E2  2EE8               	decfsz	wreg,f,c
 14179  0020E4  D7F9               	goto	i1u672_25
 14180  0020E6  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14181  0020EA  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14182  0020EE  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14183  0020F2  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14184                           
 14185                           ; BSR set to: 15
 14186                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
 14187  0020F6  500D               	movf	i1CANsendMessage@tamp,w,c
 14188  0020F8  6E0D               	movwf	i1CANsendMessage@tamp,c
 14189  0020FA  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14190  0020FC  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14191  0020FE  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14192                           
 14193                           ; BSR set to: 15
 14194                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
 14195  002100  C00D  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14196                           
 14197                           ;inc\CANlib.h: 332: }
 14198  002104  D04E               	goto	i1l5578
 14199  002106                     i1l364:
 14200                           
 14201                           ; BSR set to: 15
 14202                           ;inc\CANlib.h: 334: else
 14203                           ;inc\CANlib.h: 336: {
 14204                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
 14205  002106  010F               	movlb	15	; () banked
 14206  002108  9742               	bcf	66,3,b	;volatile
 14207                           
 14208                           ; BSR set to: 15
 14209                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
 14210  00210A  C001  F009         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14211  00210E  C002  F00A         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14212  002112  C003  F00B         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14213  002116  C004  F00C         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14214  00211A  0E04               	movlw	4
 14215  00211C  D005               	goto	i1u673_20
 14216  00211E                     i1u673_25:
 14217  00211E  90D8               	bcf	status,0,c
 14218  002120  320C               	rrcf	??i1_CANsendMessage+3,f,c
 14219  002122  320B               	rrcf	??i1_CANsendMessage+2,f,c
 14220  002124  320A               	rrcf	??i1_CANsendMessage+1,f,c
 14221  002126  3209               	rrcf	??i1_CANsendMessage,f,c
 14222  002128                     i1u673_20:
 14223  002128  2EE8               	decfsz	wreg,f,c
 14224  00212A  D7F9               	goto	i1u673_25
 14225  00212C  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14226  002130  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14227  002134  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14228  002138  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14229                           
 14230                           ; BSR set to: 15
 14231                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
 14232  00213C  500D               	movf	i1CANsendMessage@tamp,w,c
 14233  00213E  6E0D               	movwf	i1CANsendMessage@tamp,c
 14234  002140  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14235  002142  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14236  002144  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14237                           
 14238                           ; BSR set to: 15
 14239                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
 14240  002146  C00D  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14241                           
 14242                           ; BSR set to: 15
 14243                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
 14244  00214A  0E07               	movlw	7
 14245  00214C  1401               	andwf	i1CANsendMessage@identifier,w,c
 14246  00214E  6E0D               	movwf	i1CANsendMessage@tamp,c
 14247  002150  0E00               	movlw	0
 14248  002152  1402               	andwf	i1CANsendMessage@identifier+1,w,c
 14249  002154  6E0E               	movwf	i1CANsendMessage@tamp+1,c
 14250  002156  0E00               	movlw	0
 14251  002158  1403               	andwf	i1CANsendMessage@identifier+2,w,c
 14252  00215A  6E0F               	movwf	i1CANsendMessage@tamp+2,c
 14253  00215C  0E00               	movlw	0
 14254  00215E  1404               	andwf	i1CANsendMessage@identifier+3,w,c
 14255  002160  6E10               	movwf	i1CANsendMessage@tamp+3,c
 14256                           
 14257                           ; BSR set to: 15
 14258                           ;inc\CANlib.h: 344: tamp = tamp << 5;
 14259  002162  C00D  F009         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14260  002166  C00E  F00A         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14261  00216A  C00F  F00B         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14262  00216E  C010  F00C         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14263  002172  0E05               	movlw	5
 14264  002174                     i1u674_25:
 14265  002174  90D8               	bcf	status,0,c
 14266  002176  3609               	rlcf	??i1_CANsendMessage,f,c
 14267  002178  360A               	rlcf	??i1_CANsendMessage+1,f,c
 14268  00217A  360B               	rlcf	??i1_CANsendMessage+2,f,c
 14269  00217C  360C               	rlcf	??i1_CANsendMessage+3,f,c
 14270  00217E  2EE8               	decfsz	wreg,f,c
 14271  002180  D7F9               	goto	i1u674_25
 14272  002182  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14273  002186  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14274  00218A  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14275  00218E  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14276                           
 14277                           ; BSR set to: 15
 14278                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
 14279  002192  010F               	movlb	15	; () banked
 14280  002194  5142               	movf	66,w,b	;volatile
 14281  002196  0B1F               	andlw	31
 14282  002198  010F               	movlb	15	; () banked
 14283  00219A  6F42               	movwf	66,b	;volatile
 14284                           
 14285                           ; BSR set to: 15
 14286                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
 14287  00219C  C00D  FF42         	movff	i1CANsendMessage@tamp,3906	;volatile
 14288  0021A0  D000               	goto	i1l5578
 14289  0021A2                     i1l5578:
 14290                           
 14291                           ; BSR set to: 15
 14292                           ;inc\CANlib.h: 347: }
 14293                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
 14294  0021A2  A008               	btfss	i1CANsendMessage@flags,0,c
 14295  0021A4  D003               	goto	i1l371
 14296                           
 14297                           ; BSR set to: 15
 14298                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
 14299  0021A6  010F               	movlb	15	; () banked
 14300  0021A8  8140               	bsf	64,0,b	;volatile
 14301  0021AA  D002               	goto	i1l372
 14302  0021AC                     i1l371:
 14303                           
 14304                           ; BSR set to: 15
 14305                           ;inc\CANlib.h: 351: else
 14306                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
 14307  0021AC  010F               	movlb	15	; () banked
 14308  0021AE  9140               	bcf	64,0,b	;volatile
 14309  0021B0                     i1l372:
 14310                           
 14311                           ; BSR set to: 15
 14312                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
 14313  0021B0  A208               	btfss	i1CANsendMessage@flags,1,c
 14314  0021B2  D003               	goto	i1l373
 14315                           
 14316                           ; BSR set to: 15
 14317                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
 14318  0021B4  010F               	movlb	15	; () banked
 14319  0021B6  8340               	bsf	64,1,b	;volatile
 14320  0021B8  D003               	goto	i1l5584
 14321  0021BA                     i1l373:
 14322                           
 14323                           ; BSR set to: 15
 14324                           ;inc\CANlib.h: 355: else
 14325                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
 14326  0021BA  010F               	movlb	15	; () banked
 14327  0021BC  9340               	bcf	64,1,b	;volatile
 14328  0021BE  D000               	goto	i1l5584
 14329  0021C0                     i1l5584:
 14330                           
 14331                           ; BSR set to: 15
 14332                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
 14333  0021C0  C005  FFD9         	movff	i1CANsendMessage@data,fsr2l
 14334  0021C4  C006  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 14335  0021C8  50DF               	movf	indf2,w,c
 14336  0021CA  010F               	movlb	15	; () banked
 14337  0021CC  6F46               	movwf	70,b	;volatile
 14338                           
 14339                           ; BSR set to: 15
 14340                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
 14341  0021CE  EE20 F001          	lfsr	2,1
 14342  0021D2  5005               	movf	i1CANsendMessage@data,w,c
 14343  0021D4  26D9               	addwf	fsr2l,f,c
 14344  0021D6  5006               	movf	i1CANsendMessage@data+1,w,c
 14345  0021D8  22DA               	addwfc	fsr2h,f,c
 14346  0021DA  50DF               	movf	indf2,w,c
 14347  0021DC  010F               	movlb	15	; () banked
 14348  0021DE  6F47               	movwf	71,b	;volatile
 14349                           
 14350                           ; BSR set to: 15
 14351                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
 14352  0021E0  EE20 F002          	lfsr	2,2
 14353  0021E4  5005               	movf	i1CANsendMessage@data,w,c
 14354  0021E6  26D9               	addwf	fsr2l,f,c
 14355  0021E8  5006               	movf	i1CANsendMessage@data+1,w,c
 14356  0021EA  22DA               	addwfc	fsr2h,f,c
 14357  0021EC  50DF               	movf	indf2,w,c
 14358  0021EE  010F               	movlb	15	; () banked
 14359  0021F0  6F48               	movwf	72,b	;volatile
 14360                           
 14361                           ; BSR set to: 15
 14362                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
 14363  0021F2  EE20 F003          	lfsr	2,3
 14364  0021F6  5005               	movf	i1CANsendMessage@data,w,c
 14365  0021F8  26D9               	addwf	fsr2l,f,c
 14366  0021FA  5006               	movf	i1CANsendMessage@data+1,w,c
 14367  0021FC  22DA               	addwfc	fsr2h,f,c
 14368  0021FE  50DF               	movf	indf2,w,c
 14369  002200  010F               	movlb	15	; () banked
 14370  002202  6F49               	movwf	73,b	;volatile
 14371                           
 14372                           ; BSR set to: 15
 14373                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
 14374  002204  EE20 F004          	lfsr	2,4
 14375  002208  5005               	movf	i1CANsendMessage@data,w,c
 14376  00220A  26D9               	addwf	fsr2l,f,c
 14377  00220C  5006               	movf	i1CANsendMessage@data+1,w,c
 14378  00220E  22DA               	addwfc	fsr2h,f,c
 14379  002210  50DF               	movf	indf2,w,c
 14380  002212  010F               	movlb	15	; () banked
 14381  002214  6F4A               	movwf	74,b	;volatile
 14382                           
 14383                           ; BSR set to: 15
 14384                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
 14385  002216  EE20 F005          	lfsr	2,5
 14386  00221A  5005               	movf	i1CANsendMessage@data,w,c
 14387  00221C  26D9               	addwf	fsr2l,f,c
 14388  00221E  5006               	movf	i1CANsendMessage@data+1,w,c
 14389  002220  22DA               	addwfc	fsr2h,f,c
 14390  002222  50DF               	movf	indf2,w,c
 14391  002224  010F               	movlb	15	; () banked
 14392  002226  6F4B               	movwf	75,b	;volatile
 14393                           
 14394                           ; BSR set to: 15
 14395                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
 14396  002228  EE20 F006          	lfsr	2,6
 14397  00222C  5005               	movf	i1CANsendMessage@data,w,c
 14398  00222E  26D9               	addwf	fsr2l,f,c
 14399  002230  5006               	movf	i1CANsendMessage@data+1,w,c
 14400  002232  22DA               	addwfc	fsr2h,f,c
 14401  002234  50DF               	movf	indf2,w,c
 14402  002236  010F               	movlb	15	; () banked
 14403  002238  6F4C               	movwf	76,b	;volatile
 14404                           
 14405                           ; BSR set to: 15
 14406                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
 14407  00223A  EE20 F007          	lfsr	2,7
 14408  00223E  5005               	movf	i1CANsendMessage@data,w,c
 14409  002240  26D9               	addwf	fsr2l,f,c
 14410  002242  5006               	movf	i1CANsendMessage@data+1,w,c
 14411  002244  22DA               	addwfc	fsr2h,f,c
 14412  002246  50DF               	movf	indf2,w,c
 14413  002248  010F               	movlb	15	; () banked
 14414  00224A  6F4D               	movwf	77,b	;volatile
 14415                           
 14416                           ; BSR set to: 15
 14417                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
 14418  00224C  010F               	movlb	15	; () banked
 14419  00224E  8740               	bsf	64,3,b	;volatile
 14420                           
 14421                           ; BSR set to: 15
 14422                           ;inc\CANlib.h: 368: return;
 14423  002250  0012               	return	
 14424  002252                     i1l361:
 14425                           
 14426                           ; BSR set to: 15
 14427                           ;inc\CANlib.h: 369: }
 14428                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
 14429  002252  010F               	movlb	15	; () banked
 14430  002254  B730               	btfsc	48,3,b	;volatile
 14431  002256  D118               	goto	i1l376
 14432                           
 14433                           ; BSR set to: 15
 14434                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
 14435  002258  C007  FF35         	movff	i1CANsendMessage@dataLength,3893	;volatile
 14436                           
 14437                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
 14438  00225C  AC08               	btfss	i1CANsendMessage@flags,6,c
 14439  00225E  D003               	goto	i1l377
 14440                           
 14441                           ; BSR set to: 15
 14442                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
 14443  002260  010F               	movlb	15	; () banked
 14444  002262  8D35               	bsf	53,6,b	;volatile
 14445  002264  D002               	goto	i1l378
 14446  002266                     i1l377:
 14447                           
 14448                           ; BSR set to: 15
 14449                           ;inc\CANlib.h: 378: else
 14450                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
 14451  002266  010F               	movlb	15	; () banked
 14452  002268  9D35               	bcf	53,6,b	;volatile
 14453  00226A                     i1l378:
 14454                           
 14455                           ; BSR set to: 15
 14456                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
 14457  00226A  A608               	btfss	i1CANsendMessage@flags,3,c
 14458  00226C  D067               	goto	i1l379
 14459                           
 14460                           ; BSR set to: 15
 14461                           ;inc\CANlib.h: 382: {
 14462                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
 14463  00226E  5001               	movf	i1CANsendMessage@identifier,w,c
 14464  002270  6E0D               	movwf	i1CANsendMessage@tamp,c
 14465  002272  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14466  002274  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14467  002276  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14468                           
 14469                           ; BSR set to: 15
 14470                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
 14471  002278  C00D  FF34         	movff	i1CANsendMessage@tamp,3892	;volatile
 14472                           
 14473                           ; BSR set to: 15
 14474                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
 14475  00227C  0E00               	movlw	0
 14476  00227E  1401               	andwf	i1CANsendMessage@identifier,w,c
 14477  002280  6E0D               	movwf	i1CANsendMessage@tamp,c
 14478  002282  0EFF               	movlw	255
 14479  002284  1402               	andwf	i1CANsendMessage@identifier+1,w,c
 14480  002286  6E0E               	movwf	i1CANsendMessage@tamp+1,c
 14481  002288  0E00               	movlw	0
 14482  00228A  1403               	andwf	i1CANsendMessage@identifier+2,w,c
 14483  00228C  6E0F               	movwf	i1CANsendMessage@tamp+2,c
 14484  00228E  0E00               	movlw	0
 14485  002290  1404               	andwf	i1CANsendMessage@identifier+3,w,c
 14486  002292  6E10               	movwf	i1CANsendMessage@tamp+3,c
 14487                           
 14488                           ; BSR set to: 15
 14489                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
 14490  002294  C00D  F009         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14491  002298  C00E  F00A         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14492  00229C  C00F  F00B         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14493  0022A0  C010  F00C         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14494  0022A4  C00A  F009         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14495  0022A8  C00B  F00A         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14496  0022AC  C00C  F00B         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14497  0022B0  6A0C               	clrf	??i1_CANsendMessage+3,c
 14498  0022B2  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14499  0022B6  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14500  0022BA  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14501  0022BE  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14502                           
 14503                           ; BSR set to: 15
 14504                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
 14505  0022C2  C00D  FF33         	movff	i1CANsendMessage@tamp,3891	;volatile
 14506                           
 14507                           ; BSR set to: 15
 14508                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
 14509  0022C6  0E00               	movlw	0
 14510  0022C8  010F               	movlb	15	; () banked
 14511  0022CA  6F32               	movwf	50,b	;volatile
 14512                           
 14513                           ; BSR set to: 15
 14514                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
 14515  0022CC  010F               	movlb	15	; () banked
 14516  0022CE  8732               	bsf	50,3,b	;volatile
 14517                           
 14518                           ; BSR set to: 15
 14519                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
 14520  0022D0  A003               	btfss	i1CANsendMessage@identifier+2,0,c
 14521  0022D2  D002               	goto	i1l380
 14522                           
 14523                           ; BSR set to: 15
 14524                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
 14525  0022D4  010F               	movlb	15	; () banked
 14526  0022D6  8132               	bsf	50,0,b	;volatile
 14527  0022D8                     i1l380:
 14528                           
 14529                           ; BSR set to: 15
 14530                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
 14531  0022D8  A203               	btfss	i1CANsendMessage@identifier+2,1,c
 14532  0022DA  D002               	goto	i1l381
 14533                           
 14534                           ; BSR set to: 15
 14535                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
 14536  0022DC  010F               	movlb	15	; () banked
 14537  0022DE  8332               	bsf	50,1,b	;volatile
 14538  0022E0                     i1l381:
 14539                           
 14540                           ; BSR set to: 15
 14541                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
 14542  0022E0  A403               	btfss	i1CANsendMessage@identifier+2,2,c
 14543  0022E2  D002               	goto	i1l382
 14544                           
 14545                           ; BSR set to: 15
 14546                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
 14547  0022E4  010F               	movlb	15	; () banked
 14548  0022E6  8B32               	bsf	50,5,b	;volatile
 14549  0022E8                     i1l382:
 14550                           
 14551                           ; BSR set to: 15
 14552                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
 14553  0022E8  A603               	btfss	i1CANsendMessage@identifier+2,3,c
 14554  0022EA  D002               	goto	i1l383
 14555                           
 14556                           ; BSR set to: 15
 14557                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
 14558  0022EC  010F               	movlb	15	; () banked
 14559  0022EE  8D32               	bsf	50,6,b	;volatile
 14560  0022F0                     i1l383:
 14561                           
 14562                           ; BSR set to: 15
 14563                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
 14564  0022F0  A803               	btfss	i1CANsendMessage@identifier+2,4,c
 14565  0022F2  D003               	goto	i1l5634
 14566                           
 14567                           ; BSR set to: 15
 14568                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
 14569  0022F4  010F               	movlb	15	; () banked
 14570  0022F6  8F32               	bsf	50,7,b	;volatile
 14571  0022F8  D000               	goto	i1l5634
 14572  0022FA                     i1l5634:
 14573                           
 14574                           ; BSR set to: 15
 14575                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
 14576  0022FA  C001  F009         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14577  0022FE  C002  F00A         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14578  002302  C003  F00B         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14579  002306  C004  F00C         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14580  00230A  0E16               	movlw	22
 14581  00230C  D005               	goto	i1u685_20
 14582  00230E                     i1u685_25:
 14583  00230E  90D8               	bcf	status,0,c
 14584  002310  320C               	rrcf	??i1_CANsendMessage+3,f,c
 14585  002312  320B               	rrcf	??i1_CANsendMessage+2,f,c
 14586  002314  320A               	rrcf	??i1_CANsendMessage+1,f,c
 14587  002316  3209               	rrcf	??i1_CANsendMessage,f,c
 14588  002318                     i1u685_20:
 14589  002318  2EE8               	decfsz	wreg,f,c
 14590  00231A  D7F9               	goto	i1u685_25
 14591  00231C  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14592  002320  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14593  002324  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14594  002328  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14595                           
 14596                           ; BSR set to: 15
 14597                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
 14598  00232C  500D               	movf	i1CANsendMessage@tamp,w,c
 14599  00232E  6E0D               	movwf	i1CANsendMessage@tamp,c
 14600  002330  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14601  002332  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14602  002334  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14603                           
 14604                           ; BSR set to: 15
 14605                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
 14606  002336  C00D  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 14607                           
 14608                           ;inc\CANlib.h: 407: }
 14609  00233A  D04E               	goto	i1l5654
 14610  00233C                     i1l379:
 14611                           
 14612                           ; BSR set to: 15
 14613                           ;inc\CANlib.h: 409: else
 14614                           ;inc\CANlib.h: 411: {
 14615                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
 14616  00233C  010F               	movlb	15	; () banked
 14617  00233E  9732               	bcf	50,3,b	;volatile
 14618                           
 14619                           ; BSR set to: 15
 14620                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
 14621  002340  C001  F009         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14622  002344  C002  F00A         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14623  002348  C003  F00B         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14624  00234C  C004  F00C         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14625  002350  0E04               	movlw	4
 14626  002352  D005               	goto	i1u686_20
 14627  002354                     i1u686_25:
 14628  002354  90D8               	bcf	status,0,c
 14629  002356  320C               	rrcf	??i1_CANsendMessage+3,f,c
 14630  002358  320B               	rrcf	??i1_CANsendMessage+2,f,c
 14631  00235A  320A               	rrcf	??i1_CANsendMessage+1,f,c
 14632  00235C  3209               	rrcf	??i1_CANsendMessage,f,c
 14633  00235E                     i1u686_20:
 14634  00235E  2EE8               	decfsz	wreg,f,c
 14635  002360  D7F9               	goto	i1u686_25
 14636  002362  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14637  002366  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14638  00236A  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14639  00236E  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14640                           
 14641                           ; BSR set to: 15
 14642                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
 14643  002372  500D               	movf	i1CANsendMessage@tamp,w,c
 14644  002374  6E0D               	movwf	i1CANsendMessage@tamp,c
 14645  002376  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14646  002378  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14647  00237A  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14648                           
 14649                           ; BSR set to: 15
 14650                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
 14651  00237C  C00D  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 14652                           
 14653                           ; BSR set to: 15
 14654                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
 14655  002380  0E07               	movlw	7
 14656  002382  1401               	andwf	i1CANsendMessage@identifier,w,c
 14657  002384  6E0D               	movwf	i1CANsendMessage@tamp,c
 14658  002386  0E00               	movlw	0
 14659  002388  1402               	andwf	i1CANsendMessage@identifier+1,w,c
 14660  00238A  6E0E               	movwf	i1CANsendMessage@tamp+1,c
 14661  00238C  0E00               	movlw	0
 14662  00238E  1403               	andwf	i1CANsendMessage@identifier+2,w,c
 14663  002390  6E0F               	movwf	i1CANsendMessage@tamp+2,c
 14664  002392  0E00               	movlw	0
 14665  002394  1404               	andwf	i1CANsendMessage@identifier+3,w,c
 14666  002396  6E10               	movwf	i1CANsendMessage@tamp+3,c
 14667                           
 14668                           ; BSR set to: 15
 14669                           ;inc\CANlib.h: 419: tamp = tamp << 5;
 14670  002398  C00D  F009         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14671  00239C  C00E  F00A         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14672  0023A0  C00F  F00B         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14673  0023A4  C010  F00C         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14674  0023A8  0E05               	movlw	5
 14675  0023AA                     i1u687_25:
 14676  0023AA  90D8               	bcf	status,0,c
 14677  0023AC  3609               	rlcf	??i1_CANsendMessage,f,c
 14678  0023AE  360A               	rlcf	??i1_CANsendMessage+1,f,c
 14679  0023B0  360B               	rlcf	??i1_CANsendMessage+2,f,c
 14680  0023B2  360C               	rlcf	??i1_CANsendMessage+3,f,c
 14681  0023B4  2EE8               	decfsz	wreg,f,c
 14682  0023B6  D7F9               	goto	i1u687_25
 14683  0023B8  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14684  0023BC  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14685  0023C0  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14686  0023C4  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14687                           
 14688                           ; BSR set to: 15
 14689                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
 14690  0023C8  010F               	movlb	15	; () banked
 14691  0023CA  5132               	movf	50,w,b	;volatile
 14692  0023CC  0B1F               	andlw	31
 14693  0023CE  010F               	movlb	15	; () banked
 14694  0023D0  6F32               	movwf	50,b	;volatile
 14695                           
 14696                           ; BSR set to: 15
 14697                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
 14698  0023D2  C00D  FF32         	movff	i1CANsendMessage@tamp,3890	;volatile
 14699  0023D6  D000               	goto	i1l5654
 14700  0023D8                     i1l5654:
 14701                           
 14702                           ; BSR set to: 15
 14703                           ;inc\CANlib.h: 422: }
 14704                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
 14705  0023D8  A008               	btfss	i1CANsendMessage@flags,0,c
 14706  0023DA  D003               	goto	i1l386
 14707                           
 14708                           ; BSR set to: 15
 14709                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
 14710  0023DC  010F               	movlb	15	; () banked
 14711  0023DE  8130               	bsf	48,0,b	;volatile
 14712  0023E0  D002               	goto	i1l387
 14713  0023E2                     i1l386:
 14714                           
 14715                           ; BSR set to: 15
 14716                           ;inc\CANlib.h: 426: else
 14717                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
 14718  0023E2  010F               	movlb	15	; () banked
 14719  0023E4  9130               	bcf	48,0,b	;volatile
 14720  0023E6                     i1l387:
 14721                           
 14722                           ; BSR set to: 15
 14723                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
 14724  0023E6  A208               	btfss	i1CANsendMessage@flags,1,c
 14725  0023E8  D003               	goto	i1l388
 14726                           
 14727                           ; BSR set to: 15
 14728                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
 14729  0023EA  010F               	movlb	15	; () banked
 14730  0023EC  8330               	bsf	48,1,b	;volatile
 14731  0023EE  D003               	goto	i1l5660
 14732  0023F0                     i1l388:
 14733                           
 14734                           ; BSR set to: 15
 14735                           ;inc\CANlib.h: 430: else
 14736                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
 14737  0023F0  010F               	movlb	15	; () banked
 14738  0023F2  9330               	bcf	48,1,b	;volatile
 14739  0023F4  D000               	goto	i1l5660
 14740  0023F6                     i1l5660:
 14741                           
 14742                           ; BSR set to: 15
 14743                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
 14744  0023F6  C005  FFD9         	movff	i1CANsendMessage@data,fsr2l
 14745  0023FA  C006  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 14746  0023FE  50DF               	movf	indf2,w,c
 14747  002400  010F               	movlb	15	; () banked
 14748  002402  6F36               	movwf	54,b	;volatile
 14749                           
 14750                           ; BSR set to: 15
 14751                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
 14752  002404  EE20 F001          	lfsr	2,1
 14753  002408  5005               	movf	i1CANsendMessage@data,w,c
 14754  00240A  26D9               	addwf	fsr2l,f,c
 14755  00240C  5006               	movf	i1CANsendMessage@data+1,w,c
 14756  00240E  22DA               	addwfc	fsr2h,f,c
 14757  002410  50DF               	movf	indf2,w,c
 14758  002412  010F               	movlb	15	; () banked
 14759  002414  6F37               	movwf	55,b	;volatile
 14760                           
 14761                           ; BSR set to: 15
 14762                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
 14763  002416  EE20 F002          	lfsr	2,2
 14764  00241A  5005               	movf	i1CANsendMessage@data,w,c
 14765  00241C  26D9               	addwf	fsr2l,f,c
 14766  00241E  5006               	movf	i1CANsendMessage@data+1,w,c
 14767  002420  22DA               	addwfc	fsr2h,f,c
 14768  002422  50DF               	movf	indf2,w,c
 14769  002424  010F               	movlb	15	; () banked
 14770  002426  6F38               	movwf	56,b	;volatile
 14771                           
 14772                           ; BSR set to: 15
 14773                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
 14774  002428  EE20 F003          	lfsr	2,3
 14775  00242C  5005               	movf	i1CANsendMessage@data,w,c
 14776  00242E  26D9               	addwf	fsr2l,f,c
 14777  002430  5006               	movf	i1CANsendMessage@data+1,w,c
 14778  002432  22DA               	addwfc	fsr2h,f,c
 14779  002434  50DF               	movf	indf2,w,c
 14780  002436  010F               	movlb	15	; () banked
 14781  002438  6F39               	movwf	57,b	;volatile
 14782                           
 14783                           ; BSR set to: 15
 14784                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
 14785  00243A  EE20 F004          	lfsr	2,4
 14786  00243E  5005               	movf	i1CANsendMessage@data,w,c
 14787  002440  26D9               	addwf	fsr2l,f,c
 14788  002442  5006               	movf	i1CANsendMessage@data+1,w,c
 14789  002444  22DA               	addwfc	fsr2h,f,c
 14790  002446  50DF               	movf	indf2,w,c
 14791  002448  010F               	movlb	15	; () banked
 14792  00244A  6F3A               	movwf	58,b	;volatile
 14793                           
 14794                           ; BSR set to: 15
 14795                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
 14796  00244C  EE20 F005          	lfsr	2,5
 14797  002450  5005               	movf	i1CANsendMessage@data,w,c
 14798  002452  26D9               	addwf	fsr2l,f,c
 14799  002454  5006               	movf	i1CANsendMessage@data+1,w,c
 14800  002456  22DA               	addwfc	fsr2h,f,c
 14801  002458  50DF               	movf	indf2,w,c
 14802  00245A  010F               	movlb	15	; () banked
 14803  00245C  6F3B               	movwf	59,b	;volatile
 14804                           
 14805                           ; BSR set to: 15
 14806                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
 14807  00245E  EE20 F006          	lfsr	2,6
 14808  002462  5005               	movf	i1CANsendMessage@data,w,c
 14809  002464  26D9               	addwf	fsr2l,f,c
 14810  002466  5006               	movf	i1CANsendMessage@data+1,w,c
 14811  002468  22DA               	addwfc	fsr2h,f,c
 14812  00246A  50DF               	movf	indf2,w,c
 14813  00246C  010F               	movlb	15	; () banked
 14814  00246E  6F3C               	movwf	60,b	;volatile
 14815                           
 14816                           ; BSR set to: 15
 14817                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
 14818  002470  EE20 F007          	lfsr	2,7
 14819  002474  5005               	movf	i1CANsendMessage@data,w,c
 14820  002476  26D9               	addwf	fsr2l,f,c
 14821  002478  5006               	movf	i1CANsendMessage@data+1,w,c
 14822  00247A  22DA               	addwfc	fsr2h,f,c
 14823  00247C  50DF               	movf	indf2,w,c
 14824  00247E  010F               	movlb	15	; () banked
 14825  002480  6F3D               	movwf	61,b	;volatile
 14826                           
 14827                           ; BSR set to: 15
 14828                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
 14829  002482  010F               	movlb	15	; () banked
 14830  002484  8730               	bsf	48,3,b	;volatile
 14831                           
 14832                           ; BSR set to: 15
 14833                           ;inc\CANlib.h: 444: return;
 14834  002486  0012               	return	
 14835  002488                     i1l376:
 14836                           
 14837                           ; BSR set to: 15
 14838                           ;inc\CANlib.h: 445: }
 14839                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
 14840  002488  010F               	movlb	15	; () banked
 14841  00248A  B720               	btfsc	32,3,b	;volatile
 14842  00248C  0012               	return	
 14843                           
 14844                           ; BSR set to: 15
 14845                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
 14846  00248E  C007  FF25         	movff	i1CANsendMessage@dataLength,3877	;volatile
 14847                           
 14848                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
 14849  002492  AC08               	btfss	i1CANsendMessage@flags,6,c
 14850  002494  D003               	goto	i1l391
 14851                           
 14852                           ; BSR set to: 15
 14853                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
 14854  002496  010F               	movlb	15	; () banked
 14855  002498  8D25               	bsf	37,6,b	;volatile
 14856  00249A  D002               	goto	i1l392
 14857  00249C                     i1l391:
 14858                           
 14859                           ; BSR set to: 15
 14860                           ;inc\CANlib.h: 454: else
 14861                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
 14862  00249C  010F               	movlb	15	; () banked
 14863  00249E  9D25               	bcf	37,6,b	;volatile
 14864  0024A0                     i1l392:
 14865                           
 14866                           ; BSR set to: 15
 14867                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
 14868  0024A0  A608               	btfss	i1CANsendMessage@flags,3,c
 14869  0024A2  D067               	goto	i1l393
 14870                           
 14871                           ; BSR set to: 15
 14872                           ;inc\CANlib.h: 458: {
 14873                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
 14874  0024A4  5001               	movf	i1CANsendMessage@identifier,w,c
 14875  0024A6  6E0D               	movwf	i1CANsendMessage@tamp,c
 14876  0024A8  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14877  0024AA  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14878  0024AC  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14879                           
 14880                           ; BSR set to: 15
 14881                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
 14882  0024AE  C00D  FF24         	movff	i1CANsendMessage@tamp,3876	;volatile
 14883                           
 14884                           ; BSR set to: 15
 14885                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
 14886  0024B2  0E00               	movlw	0
 14887  0024B4  1401               	andwf	i1CANsendMessage@identifier,w,c
 14888  0024B6  6E0D               	movwf	i1CANsendMessage@tamp,c
 14889  0024B8  0EFF               	movlw	255
 14890  0024BA  1402               	andwf	i1CANsendMessage@identifier+1,w,c
 14891  0024BC  6E0E               	movwf	i1CANsendMessage@tamp+1,c
 14892  0024BE  0E00               	movlw	0
 14893  0024C0  1403               	andwf	i1CANsendMessage@identifier+2,w,c
 14894  0024C2  6E0F               	movwf	i1CANsendMessage@tamp+2,c
 14895  0024C4  0E00               	movlw	0
 14896  0024C6  1404               	andwf	i1CANsendMessage@identifier+3,w,c
 14897  0024C8  6E10               	movwf	i1CANsendMessage@tamp+3,c
 14898                           
 14899                           ; BSR set to: 15
 14900                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
 14901  0024CA  C00D  F009         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14902  0024CE  C00E  F00A         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14903  0024D2  C00F  F00B         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14904  0024D6  C010  F00C         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14905  0024DA  C00A  F009         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14906  0024DE  C00B  F00A         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14907  0024E2  C00C  F00B         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14908  0024E6  6A0C               	clrf	??i1_CANsendMessage+3,c
 14909  0024E8  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14910  0024EC  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14911  0024F0  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14912  0024F4  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14913                           
 14914                           ; BSR set to: 15
 14915                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
 14916  0024F8  C00D  FF23         	movff	i1CANsendMessage@tamp,3875	;volatile
 14917                           
 14918                           ; BSR set to: 15
 14919                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
 14920  0024FC  0E00               	movlw	0
 14921  0024FE  010F               	movlb	15	; () banked
 14922  002500  6F22               	movwf	34,b	;volatile
 14923                           
 14924                           ; BSR set to: 15
 14925                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
 14926  002502  010F               	movlb	15	; () banked
 14927  002504  8722               	bsf	34,3,b	;volatile
 14928                           
 14929                           ; BSR set to: 15
 14930                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
 14931  002506  A003               	btfss	i1CANsendMessage@identifier+2,0,c
 14932  002508  D002               	goto	i1l394
 14933                           
 14934                           ; BSR set to: 15
 14935                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
 14936  00250A  010F               	movlb	15	; () banked
 14937  00250C  8122               	bsf	34,0,b	;volatile
 14938  00250E                     i1l394:
 14939                           
 14940                           ; BSR set to: 15
 14941                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
 14942  00250E  A203               	btfss	i1CANsendMessage@identifier+2,1,c
 14943  002510  D002               	goto	i1l395
 14944                           
 14945                           ; BSR set to: 15
 14946                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
 14947  002512  010F               	movlb	15	; () banked
 14948  002514  8322               	bsf	34,1,b	;volatile
 14949  002516                     i1l395:
 14950                           
 14951                           ; BSR set to: 15
 14952                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
 14953  002516  A403               	btfss	i1CANsendMessage@identifier+2,2,c
 14954  002518  D002               	goto	i1l396
 14955                           
 14956                           ; BSR set to: 15
 14957                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
 14958  00251A  010F               	movlb	15	; () banked
 14959  00251C  8B22               	bsf	34,5,b	;volatile
 14960  00251E                     i1l396:
 14961                           
 14962                           ; BSR set to: 15
 14963                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
 14964  00251E  A603               	btfss	i1CANsendMessage@identifier+2,3,c
 14965  002520  D002               	goto	i1l397
 14966                           
 14967                           ; BSR set to: 15
 14968                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
 14969  002522  010F               	movlb	15	; () banked
 14970  002524  8D22               	bsf	34,6,b	;volatile
 14971  002526                     i1l397:
 14972                           
 14973                           ; BSR set to: 15
 14974                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
 14975  002526  A803               	btfss	i1CANsendMessage@identifier+2,4,c
 14976  002528  D003               	goto	i1l5710
 14977                           
 14978                           ; BSR set to: 15
 14979                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
 14980  00252A  010F               	movlb	15	; () banked
 14981  00252C  8F22               	bsf	34,7,b	;volatile
 14982  00252E  D000               	goto	i1l5710
 14983  002530                     i1l5710:
 14984                           
 14985                           ; BSR set to: 15
 14986                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
 14987  002530  C001  F009         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14988  002534  C002  F00A         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14989  002538  C003  F00B         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14990  00253C  C004  F00C         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14991  002540  0E16               	movlw	22
 14992  002542  D005               	goto	i1u698_20
 14993  002544                     i1u698_25:
 14994  002544  90D8               	bcf	status,0,c
 14995  002546  320C               	rrcf	??i1_CANsendMessage+3,f,c
 14996  002548  320B               	rrcf	??i1_CANsendMessage+2,f,c
 14997  00254A  320A               	rrcf	??i1_CANsendMessage+1,f,c
 14998  00254C  3209               	rrcf	??i1_CANsendMessage,f,c
 14999  00254E                     i1u698_20:
 15000  00254E  2EE8               	decfsz	wreg,f,c
 15001  002550  D7F9               	goto	i1u698_25
 15002  002552  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15003  002556  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15004  00255A  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15005  00255E  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15006                           
 15007                           ; BSR set to: 15
 15008                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
 15009  002562  500D               	movf	i1CANsendMessage@tamp,w,c
 15010  002564  6E0D               	movwf	i1CANsendMessage@tamp,c
 15011  002566  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 15012  002568  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 15013  00256A  6A10               	clrf	i1CANsendMessage@tamp+3,c
 15014                           
 15015                           ; BSR set to: 15
 15016                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
 15017  00256C  C00D  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15018                           
 15019                           ;inc\CANlib.h: 483: }
 15020  002570  D04E               	goto	i1l5730
 15021  002572                     i1l393:
 15022                           
 15023                           ; BSR set to: 15
 15024                           ;inc\CANlib.h: 485: else
 15025                           ;inc\CANlib.h: 487: {
 15026                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
 15027  002572  010F               	movlb	15	; () banked
 15028  002574  9722               	bcf	34,3,b	;volatile
 15029                           
 15030                           ; BSR set to: 15
 15031                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
 15032  002576  C001  F009         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15033  00257A  C002  F00A         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15034  00257E  C003  F00B         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15035  002582  C004  F00C         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15036  002586  0E04               	movlw	4
 15037  002588  D005               	goto	i1u699_20
 15038  00258A                     i1u699_25:
 15039  00258A  90D8               	bcf	status,0,c
 15040  00258C  320C               	rrcf	??i1_CANsendMessage+3,f,c
 15041  00258E  320B               	rrcf	??i1_CANsendMessage+2,f,c
 15042  002590  320A               	rrcf	??i1_CANsendMessage+1,f,c
 15043  002592  3209               	rrcf	??i1_CANsendMessage,f,c
 15044  002594                     i1u699_20:
 15045  002594  2EE8               	decfsz	wreg,f,c
 15046  002596  D7F9               	goto	i1u699_25
 15047  002598  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15048  00259C  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15049  0025A0  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15050  0025A4  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15051                           
 15052                           ; BSR set to: 15
 15053                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
 15054  0025A8  500D               	movf	i1CANsendMessage@tamp,w,c
 15055  0025AA  6E0D               	movwf	i1CANsendMessage@tamp,c
 15056  0025AC  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 15057  0025AE  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 15058  0025B0  6A10               	clrf	i1CANsendMessage@tamp+3,c
 15059                           
 15060                           ; BSR set to: 15
 15061                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
 15062  0025B2  C00D  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15063                           
 15064                           ; BSR set to: 15
 15065                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
 15066  0025B6  0E07               	movlw	7
 15067  0025B8  1401               	andwf	i1CANsendMessage@identifier,w,c
 15068  0025BA  6E0D               	movwf	i1CANsendMessage@tamp,c
 15069  0025BC  0E00               	movlw	0
 15070  0025BE  1402               	andwf	i1CANsendMessage@identifier+1,w,c
 15071  0025C0  6E0E               	movwf	i1CANsendMessage@tamp+1,c
 15072  0025C2  0E00               	movlw	0
 15073  0025C4  1403               	andwf	i1CANsendMessage@identifier+2,w,c
 15074  0025C6  6E0F               	movwf	i1CANsendMessage@tamp+2,c
 15075  0025C8  0E00               	movlw	0
 15076  0025CA  1404               	andwf	i1CANsendMessage@identifier+3,w,c
 15077  0025CC  6E10               	movwf	i1CANsendMessage@tamp+3,c
 15078                           
 15079                           ; BSR set to: 15
 15080                           ;inc\CANlib.h: 495: tamp = tamp << 5;
 15081  0025CE  C00D  F009         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 15082  0025D2  C00E  F00A         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 15083  0025D6  C00F  F00B         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 15084  0025DA  C010  F00C         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 15085  0025DE  0E05               	movlw	5
 15086  0025E0                     i1u700_25:
 15087  0025E0  90D8               	bcf	status,0,c
 15088  0025E2  3609               	rlcf	??i1_CANsendMessage,f,c
 15089  0025E4  360A               	rlcf	??i1_CANsendMessage+1,f,c
 15090  0025E6  360B               	rlcf	??i1_CANsendMessage+2,f,c
 15091  0025E8  360C               	rlcf	??i1_CANsendMessage+3,f,c
 15092  0025EA  2EE8               	decfsz	wreg,f,c
 15093  0025EC  D7F9               	goto	i1u700_25
 15094  0025EE  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15095  0025F2  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15096  0025F6  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15097  0025FA  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15098                           
 15099                           ; BSR set to: 15
 15100                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
 15101  0025FE  010F               	movlb	15	; () banked
 15102  002600  5122               	movf	34,w,b	;volatile
 15103  002602  0B1F               	andlw	31
 15104  002604  010F               	movlb	15	; () banked
 15105  002606  6F22               	movwf	34,b	;volatile
 15106                           
 15107                           ; BSR set to: 15
 15108                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
 15109  002608  C00D  FF22         	movff	i1CANsendMessage@tamp,3874	;volatile
 15110  00260C  D000               	goto	i1l5730
 15111  00260E                     i1l5730:
 15112                           
 15113                           ; BSR set to: 15
 15114                           ;inc\CANlib.h: 498: }
 15115                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
 15116  00260E  A008               	btfss	i1CANsendMessage@flags,0,c
 15117  002610  D003               	goto	i1l400
 15118                           
 15119                           ; BSR set to: 15
 15120                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
 15121  002612  010F               	movlb	15	; () banked
 15122  002614  8120               	bsf	32,0,b	;volatile
 15123  002616  D002               	goto	i1l401
 15124  002618                     i1l400:
 15125                           
 15126                           ; BSR set to: 15
 15127                           ;inc\CANlib.h: 502: else
 15128                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
 15129  002618  010F               	movlb	15	; () banked
 15130  00261A  9120               	bcf	32,0,b	;volatile
 15131  00261C                     i1l401:
 15132                           
 15133                           ; BSR set to: 15
 15134                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
 15135  00261C  A208               	btfss	i1CANsendMessage@flags,1,c
 15136  00261E  D003               	goto	i1l402
 15137                           
 15138                           ; BSR set to: 15
 15139                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
 15140  002620  010F               	movlb	15	; () banked
 15141  002622  8320               	bsf	32,1,b	;volatile
 15142  002624  D003               	goto	i1l5736
 15143  002626                     i1l402:
 15144                           
 15145                           ; BSR set to: 15
 15146                           ;inc\CANlib.h: 506: else
 15147                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
 15148  002626  010F               	movlb	15	; () banked
 15149  002628  9320               	bcf	32,1,b	;volatile
 15150  00262A  D000               	goto	i1l5736
 15151  00262C                     i1l5736:
 15152                           
 15153                           ; BSR set to: 15
 15154                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
 15155  00262C  C005  FFD9         	movff	i1CANsendMessage@data,fsr2l
 15156  002630  C006  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 15157  002634  50DF               	movf	indf2,w,c
 15158  002636  010F               	movlb	15	; () banked
 15159  002638  6F26               	movwf	38,b	;volatile
 15160                           
 15161                           ; BSR set to: 15
 15162                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
 15163  00263A  EE20 F001          	lfsr	2,1
 15164  00263E  5005               	movf	i1CANsendMessage@data,w,c
 15165  002640  26D9               	addwf	fsr2l,f,c
 15166  002642  5006               	movf	i1CANsendMessage@data+1,w,c
 15167  002644  22DA               	addwfc	fsr2h,f,c
 15168  002646  50DF               	movf	indf2,w,c
 15169  002648  010F               	movlb	15	; () banked
 15170  00264A  6F27               	movwf	39,b	;volatile
 15171                           
 15172                           ; BSR set to: 15
 15173                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
 15174  00264C  EE20 F002          	lfsr	2,2
 15175  002650  5005               	movf	i1CANsendMessage@data,w,c
 15176  002652  26D9               	addwf	fsr2l,f,c
 15177  002654  5006               	movf	i1CANsendMessage@data+1,w,c
 15178  002656  22DA               	addwfc	fsr2h,f,c
 15179  002658  50DF               	movf	indf2,w,c
 15180  00265A  010F               	movlb	15	; () banked
 15181  00265C  6F28               	movwf	40,b	;volatile
 15182                           
 15183                           ; BSR set to: 15
 15184                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
 15185  00265E  EE20 F003          	lfsr	2,3
 15186  002662  5005               	movf	i1CANsendMessage@data,w,c
 15187  002664  26D9               	addwf	fsr2l,f,c
 15188  002666  5006               	movf	i1CANsendMessage@data+1,w,c
 15189  002668  22DA               	addwfc	fsr2h,f,c
 15190  00266A  50DF               	movf	indf2,w,c
 15191  00266C  010F               	movlb	15	; () banked
 15192  00266E  6F29               	movwf	41,b	;volatile
 15193                           
 15194                           ; BSR set to: 15
 15195                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
 15196  002670  EE20 F004          	lfsr	2,4
 15197  002674  5005               	movf	i1CANsendMessage@data,w,c
 15198  002676  26D9               	addwf	fsr2l,f,c
 15199  002678  5006               	movf	i1CANsendMessage@data+1,w,c
 15200  00267A  22DA               	addwfc	fsr2h,f,c
 15201  00267C  50DF               	movf	indf2,w,c
 15202  00267E  010F               	movlb	15	; () banked
 15203  002680  6F2A               	movwf	42,b	;volatile
 15204                           
 15205                           ; BSR set to: 15
 15206                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
 15207  002682  EE20 F005          	lfsr	2,5
 15208  002686  5005               	movf	i1CANsendMessage@data,w,c
 15209  002688  26D9               	addwf	fsr2l,f,c
 15210  00268A  5006               	movf	i1CANsendMessage@data+1,w,c
 15211  00268C  22DA               	addwfc	fsr2h,f,c
 15212  00268E  50DF               	movf	indf2,w,c
 15213  002690  010F               	movlb	15	; () banked
 15214  002692  6F2B               	movwf	43,b	;volatile
 15215                           
 15216                           ; BSR set to: 15
 15217                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
 15218  002694  EE20 F006          	lfsr	2,6
 15219  002698  5005               	movf	i1CANsendMessage@data,w,c
 15220  00269A  26D9               	addwf	fsr2l,f,c
 15221  00269C  5006               	movf	i1CANsendMessage@data+1,w,c
 15222  00269E  22DA               	addwfc	fsr2h,f,c
 15223  0026A0  50DF               	movf	indf2,w,c
 15224  0026A2  010F               	movlb	15	; () banked
 15225  0026A4  6F2C               	movwf	44,b	;volatile
 15226                           
 15227                           ; BSR set to: 15
 15228                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
 15229  0026A6  EE20 F007          	lfsr	2,7
 15230  0026AA  5005               	movf	i1CANsendMessage@data,w,c
 15231  0026AC  26D9               	addwf	fsr2l,f,c
 15232  0026AE  5006               	movf	i1CANsendMessage@data+1,w,c
 15233  0026B0  22DA               	addwfc	fsr2h,f,c
 15234  0026B2  50DF               	movf	indf2,w,c
 15235  0026B4  010F               	movlb	15	; () banked
 15236  0026B6  6F2D               	movwf	45,b	;volatile
 15237                           
 15238                           ; BSR set to: 15
 15239                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
 15240  0026B8  010F               	movlb	15	; () banked
 15241  0026BA  8720               	bsf	32,3,b	;volatile
 15242                           
 15243                           ; BSR set to: 15
 15244                           ;inc\CANlib.h: 520: return;
 15245  0026BC  0012               	return	
 15246                           
 15247                           ; BSR set to: 15
 15248                           
 15249                           ; BSR set to: 15
 15250  0026BE  0012               	return		;funcret
 15251  0026C0                     __end_ofi1_CANsendMessage:
 15252                           	opt stack 0
 15253                           pclatu	equ	0xFFB
 15254                           pclath	equ	0xFFA
 15255                           tblptru	equ	0xFF8
 15256                           tblptrh	equ	0xFF7
 15257                           tblptrl	equ	0xFF6
 15258                           tablat	equ	0xFF5
 15259                           prodh	equ	0xFF4
 15260                           prodl	equ	0xFF3
 15261                           intcon	equ	0xFF2
 15262                           intcon2	equ	0xFF1
 15263                           postinc0	equ	0xFEE
 15264                           fsr0h	equ	0xFEA
 15265                           fsr0l	equ	0xFE9
 15266                           wreg	equ	0xFE8
 15267                           indf1	equ	0xFE7
 15268                           postdec1	equ	0xFE5
 15269                           fsr1h	equ	0xFE2
 15270                           fsr1l	equ	0xFE1
 15271                           bsr	equ	0xFE0
 15272                           indf2	equ	0xFDF
 15273                           postinc2	equ	0xFDE
 15274                           postdec2	equ	0xFDD
 15275                           plusw2	equ	0xFDB
 15276                           fsr2h	equ	0xFDA
 15277                           fsr2l	equ	0xFD9
 15278                           status	equ	0xFD8
 15279                           
 15280 ;; *************** function _CANreceiveMessage *****************
 15281 ;; Defined at:
 15282 ;;		line 528 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 15283 ;; Parameters:    Size  Location     Type
 15284 ;;  msg             2    0[COMRAM] PTR struct .
 15285 ;;		 -> msg(15), 
 15286 ;; Auto vars:     Size  Location     Type
 15287 ;;  tamp            1   11[COMRAM] unsigned char 
 15288 ;;  error           1   10[COMRAM] unsigned char 
 15289 ;; Return value:  Size  Location     Type
 15290 ;;                  1    wreg      unsigned char 
 15291 ;; Registers used:
 15292 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15293 ;; Tracked objects:
 15294 ;;		On entry : 0/0
 15295 ;;		On exit  : 0/0
 15296 ;;		Unchanged: 0/0
 15297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15298 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15299 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15300 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15301 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15302 ;;Total ram usage:       12 bytes
 15303 ;; Hardware stack levels used:    1
 15304 ;; Hardware stack levels required when called:    2
 15305 ;; This function calls:
 15306 ;;		Nothing
 15307 ;; This function is called by:
 15308 ;;		_ISR_Bassa
 15309 ;; This function uses a non-reentrant model
 15310 ;;
 15311                           
 15312                           	psect	text41
 15313  002C4A                     __ptext41:
 15314                           	opt stack 0
 15315  002C4A                     _CANreceiveMessage:
 15316                           	opt stack 20
 15317                           
 15318                           ;inc\CANlib.h: 530: BYTE tamp;
 15319                           ;inc\CANlib.h: 531: BYTE error = 0;
 15320                           
 15321                           ; BSR set to: 15
 15322                           ;incstack = 0
 15323  002C4A  0E00               	movlw	0
 15324  002C4C  6E0B               	movwf	CANreceiveMessage@error,c
 15325                           
 15326                           ;inc\CANlib.h: 533: if (COMSTATbits.RXB0OVFL == 0x01)
 15327  002C4E  AE74               	btfss	3956,7,c	;volatile
 15328  002C50  D002               	goto	i1l5110
 15329                           
 15330                           ;inc\CANlib.h: 534: error |= CAN_RX_BUFFER_1_OVFL;
 15331  002C52  800B               	bsf	CANreceiveMessage@error,0,c
 15332  002C54  D000               	goto	i1l5110
 15333  002C56                     i1l5110:
 15334                           
 15335                           ;inc\CANlib.h: 536: if (COMSTATbits.RXB1OVFL == 0x01)
 15336  002C56  AC74               	btfss	3956,6,c	;volatile
 15337  002C58  D002               	goto	i1l5114
 15338                           
 15339                           ;inc\CANlib.h: 537: error |= CAN_RX_BUFFER_2_OVFL;
 15340  002C5A  820B               	bsf	CANreceiveMessage@error,1,c
 15341  002C5C  D000               	goto	i1l5114
 15342  002C5E                     i1l5114:
 15343                           
 15344                           ;inc\CANlib.h: 540: if (RXB1CONbits.RXFUL ==0x01)
 15345  002C5E  010F               	movlb	15	; () banked
 15346  002C60  AF50               	btfss	80,7,b	;volatile
 15347  002C62  D149               	goto	i1l408
 15348                           
 15349                           ; BSR set to: 15
 15350                           ;inc\CANlib.h: 541: {
 15351                           ;inc\CANlib.h: 542: msg->identifier = 0;
 15352  002C64  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15353  002C68  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15354  002C6C  6ADE               	clrf	postinc2,c
 15355  002C6E  6ADE               	clrf	postinc2,c
 15356  002C70  6ADE               	clrf	postinc2,c
 15357  002C72  6ADD               	clrf	postdec2,c
 15358                           
 15359                           ; BSR set to: 15
 15360                           ;inc\CANlib.h: 543: msg->data[0] =RXB1D0;
 15361  002C74  EE20 F004          	lfsr	2,4
 15362  002C78  5001               	movf	CANreceiveMessage@msg,w,c
 15363  002C7A  26D9               	addwf	fsr2l,f,c
 15364  002C7C  5002               	movf	CANreceiveMessage@msg+1,w,c
 15365  002C7E  22DA               	addwfc	fsr2h,f,c
 15366  002C80  CF56 FFDF          	movff	3926,indf2	;volatile
 15367                           
 15368                           ; BSR set to: 15
 15369                           ;inc\CANlib.h: 544: msg->data[1] =RXB1D1;
 15370  002C84  EE20 F005          	lfsr	2,5
 15371  002C88  5001               	movf	CANreceiveMessage@msg,w,c
 15372  002C8A  26D9               	addwf	fsr2l,f,c
 15373  002C8C  5002               	movf	CANreceiveMessage@msg+1,w,c
 15374  002C8E  22DA               	addwfc	fsr2h,f,c
 15375  002C90  CF57 FFDF          	movff	3927,indf2	;volatile
 15376                           
 15377                           ; BSR set to: 15
 15378                           ;inc\CANlib.h: 545: msg->data[2] =RXB1D2;
 15379  002C94  EE20 F006          	lfsr	2,6
 15380  002C98  5001               	movf	CANreceiveMessage@msg,w,c
 15381  002C9A  26D9               	addwf	fsr2l,f,c
 15382  002C9C  5002               	movf	CANreceiveMessage@msg+1,w,c
 15383  002C9E  22DA               	addwfc	fsr2h,f,c
 15384  002CA0  CF58 FFDF          	movff	3928,indf2	;volatile
 15385                           
 15386                           ; BSR set to: 15
 15387                           ;inc\CANlib.h: 546: msg->data[3] =RXB1D3;
 15388  002CA4  EE20 F007          	lfsr	2,7
 15389  002CA8  5001               	movf	CANreceiveMessage@msg,w,c
 15390  002CAA  26D9               	addwf	fsr2l,f,c
 15391  002CAC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15392  002CAE  22DA               	addwfc	fsr2h,f,c
 15393  002CB0  CF59 FFDF          	movff	3929,indf2	;volatile
 15394                           
 15395                           ; BSR set to: 15
 15396                           ;inc\CANlib.h: 547: msg->data[4] =RXB1D4;
 15397  002CB4  EE20 F008          	lfsr	2,8
 15398  002CB8  5001               	movf	CANreceiveMessage@msg,w,c
 15399  002CBA  26D9               	addwf	fsr2l,f,c
 15400  002CBC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15401  002CBE  22DA               	addwfc	fsr2h,f,c
 15402  002CC0  CF5A FFDF          	movff	3930,indf2	;volatile
 15403                           
 15404                           ; BSR set to: 15
 15405                           ;inc\CANlib.h: 548: msg->data[5] =RXB1D5;
 15406  002CC4  EE20 F009          	lfsr	2,9
 15407  002CC8  5001               	movf	CANreceiveMessage@msg,w,c
 15408  002CCA  26D9               	addwf	fsr2l,f,c
 15409  002CCC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15410  002CCE  22DA               	addwfc	fsr2h,f,c
 15411  002CD0  CF5B FFDF          	movff	3931,indf2	;volatile
 15412                           
 15413                           ; BSR set to: 15
 15414                           ;inc\CANlib.h: 549: msg->data[6] =RXB1D6;
 15415  002CD4  EE20 F00A          	lfsr	2,10
 15416  002CD8  5001               	movf	CANreceiveMessage@msg,w,c
 15417  002CDA  26D9               	addwf	fsr2l,f,c
 15418  002CDC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15419  002CDE  22DA               	addwfc	fsr2h,f,c
 15420  002CE0  CF5C FFDF          	movff	3932,indf2	;volatile
 15421                           
 15422                           ; BSR set to: 15
 15423                           ;inc\CANlib.h: 550: msg->data[7] =RXB1D7;
 15424  002CE4  EE20 F00B          	lfsr	2,11
 15425  002CE8  5001               	movf	CANreceiveMessage@msg,w,c
 15426  002CEA  26D9               	addwf	fsr2l,f,c
 15427  002CEC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15428  002CEE  22DA               	addwfc	fsr2h,f,c
 15429  002CF0  CF5D FFDF          	movff	3933,indf2	;volatile
 15430                           
 15431                           ; BSR set to: 15
 15432                           ;inc\CANlib.h: 552: msg->RTR = RXB1DLCbits.RXRTR;
 15433  002CF4  EE20 F00E          	lfsr	2,14
 15434  002CF8  5001               	movf	CANreceiveMessage@msg,w,c
 15435  002CFA  26D9               	addwf	fsr2l,f,c
 15436  002CFC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15437  002CFE  22DA               	addwfc	fsr2h,f,c
 15438  002D00  010F               	movlb	15	; () banked
 15439  002D02  AD55               	btfss	85,6,b	;volatile
 15440  002D04  D002               	goto	i1u604_20
 15441  002D06  0E01               	movlw	1
 15442  002D08  D001               	goto	i1u604_26
 15443  002D0A                     i1u604_20:
 15444  002D0A  0E00               	movlw	0
 15445  002D0C                     i1u604_26:
 15446  002D0C  6EDF               	movwf	indf2,c
 15447                           
 15448                           ; BSR set to: 15
 15449                           ;inc\CANlib.h: 554: msg->length = RXB1DLC & 0x0F;
 15450  002D0E  EE20 F00D          	lfsr	2,13
 15451  002D12  5001               	movf	CANreceiveMessage@msg,w,c
 15452  002D14  26D9               	addwf	fsr2l,f,c
 15453  002D16  5002               	movf	CANreceiveMessage@msg+1,w,c
 15454  002D18  22DA               	addwfc	fsr2h,f,c
 15455  002D1A  010F               	movlb	15	; () banked
 15456  002D1C  5155               	movf	85,w,b	;volatile
 15457  002D1E  0B0F               	andlw	15
 15458  002D20  6EDF               	movwf	indf2,c
 15459                           
 15460                           ; BSR set to: 15
 15461                           ;inc\CANlib.h: 556: msg->type = RXB1SIDLbits.EXID;
 15462  002D22  EE20 F00C          	lfsr	2,12
 15463  002D26  5001               	movf	CANreceiveMessage@msg,w,c
 15464  002D28  26D9               	addwf	fsr2l,f,c
 15465  002D2A  5002               	movf	CANreceiveMessage@msg+1,w,c
 15466  002D2C  22DA               	addwfc	fsr2h,f,c
 15467  002D2E  010F               	movlb	15	; () banked
 15468  002D30  A752               	btfss	82,3,b	;volatile
 15469  002D32  D002               	goto	i1u605_20
 15470  002D34  0E01               	movlw	1
 15471  002D36  D001               	goto	i1u605_26
 15472  002D38                     i1u605_20:
 15473  002D38  0E00               	movlw	0
 15474  002D3A                     i1u605_26:
 15475  002D3A  6EDF               	movwf	indf2,c
 15476                           
 15477                           ; BSR set to: 15
 15478                           ;inc\CANlib.h: 558: if (RXB1SIDLbits.EXID == 0)
 15479  002D3C  010F               	movlb	15	; () banked
 15480  002D3E  B752               	btfsc	82,3,b	;volatile
 15481  002D40  D044               	goto	i1l5148
 15482                           
 15483                           ; BSR set to: 15
 15484                           ;inc\CANlib.h: 559: {
 15485                           ;inc\CANlib.h: 560: msg->identifier = ((unsigned long)RXB1SIDH)<< 3;
 15486  002D42  CF51 F003          	movff	3921,??_CANreceiveMessage	;volatile
 15487  002D46  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15488  002D48  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15489  002D4A  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15490  002D4C  0E03               	movlw	3
 15491  002D4E                     i1u607_25:
 15492  002D4E  90D8               	bcf	status,0,c
 15493  002D50  3603               	rlcf	??_CANreceiveMessage,f,c
 15494  002D52  3604               	rlcf	??_CANreceiveMessage+1,f,c
 15495  002D54  3605               	rlcf	??_CANreceiveMessage+2,f,c
 15496  002D56  3606               	rlcf	??_CANreceiveMessage+3,f,c
 15497  002D58  2EE8               	decfsz	wreg,f,c
 15498  002D5A  D7F9               	goto	i1u607_25
 15499  002D5C  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15500  002D60  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15501  002D64  C003  FFDE         	movff	??_CANreceiveMessage,postinc2
 15502  002D68  C004  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15503  002D6C  C005  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15504  002D70  C006  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15505                           
 15506                           ; BSR set to: 15
 15507                           ;inc\CANlib.h: 561: tamp = (RXB1SIDL >> 5 ) & 0x07;
 15508  002D74  010F               	movlb	15	; () banked
 15509  002D76  3952               	swapf	82,w,b	;volatile
 15510  002D78  42E8               	rrncf	wreg,f,c
 15511  002D7A  0B07               	andlw	7
 15512  002D7C  0B07               	andlw	7
 15513  002D7E  6E0C               	movwf	CANreceiveMessage@tamp,c
 15514                           
 15515                           ; BSR set to: 15
 15516                           ;inc\CANlib.h: 562: msg->identifier = msg->identifier + tamp;
 15517  002D80  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15518  002D84  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15519  002D88  CFDE F003          	movff	postinc2,??_CANreceiveMessage
 15520  002D8C  CFDE F004          	movff	postinc2,??_CANreceiveMessage+1
 15521  002D90  CFDE F005          	movff	postinc2,??_CANreceiveMessage+2
 15522  002D94  CFDE F006          	movff	postinc2,??_CANreceiveMessage+3
 15523  002D98  500C               	movf	CANreceiveMessage@tamp,w,c
 15524  002D9A  2403               	addwf	??_CANreceiveMessage,w,c
 15525  002D9C  6E07               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 15526  002D9E  0E00               	movlw	0
 15527  002DA0  2004               	addwfc	??_CANreceiveMessage+1,w,c
 15528  002DA2  6E08               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 15529  002DA4  0E00               	movlw	0
 15530  002DA6  2005               	addwfc	??_CANreceiveMessage+2,w,c
 15531  002DA8  6E09               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 15532  002DAA  0E00               	movlw	0
 15533  002DAC  2006               	addwfc	??_CANreceiveMessage+3,w,c
 15534  002DAE  6E0A               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 15535  002DB0  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15536  002DB4  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15537  002DB8  C007  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 15538  002DBC  C008  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 15539  002DC0  C009  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 15540  002DC4  C00A  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 15541                           
 15542                           ;inc\CANlib.h: 563: }
 15543  002DC8  D093               	goto	i1l5174
 15544  002DCA                     i1l5148:
 15545                           
 15546                           ; BSR set to: 15
 15547                           ;inc\CANlib.h: 564: else
 15548                           ;inc\CANlib.h: 565: {
 15549                           ;inc\CANlib.h: 566: msg->identifier = (unsigned long) RXB1EIDL;
 15550  002DCA  CF54 F003          	movff	3924,??_CANreceiveMessage	;volatile
 15551  002DCE  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15552  002DD0  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15553  002DD2  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15554  002DD4  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15555  002DD8  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15556  002DDC  C003  FFDE         	movff	??_CANreceiveMessage,postinc2
 15557  002DE0  C004  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15558  002DE4  C005  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15559  002DE8  C006  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15560                           
 15561                           ; BSR set to: 15
 15562                           ;inc\CANlib.h: 567: msg->identifier += ((unsigned long) RXB1EIDH) << 8;
 15563  002DEC  CF53 F003          	movff	3923,??_CANreceiveMessage	;volatile
 15564  002DF0  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15565  002DF2  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15566  002DF4  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15567  002DF6  C005  F006         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 15568  002DFA  C004  F005         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 15569  002DFE  C003  F004         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 15570  002E02  6A03               	clrf	??_CANreceiveMessage,c
 15571  002E04  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15572  002E08  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15573  002E0C  5003               	movf	??_CANreceiveMessage,w,c
 15574  002E0E  26DE               	addwf	postinc2,f,c
 15575  002E10  5004               	movf	??_CANreceiveMessage+1,w,c
 15576  002E12  22DE               	addwfc	postinc2,f,c
 15577  002E14  5005               	movf	??_CANreceiveMessage+2,w,c
 15578  002E16  22DE               	addwfc	postinc2,f,c
 15579  002E18  5006               	movf	??_CANreceiveMessage+3,w,c
 15580  002E1A  22DE               	addwfc	postinc2,f,c
 15581                           
 15582                           ; BSR set to: 15
 15583                           ;inc\CANlib.h: 569: if (RXB1SIDLbits.EID16)
 15584  002E1C  010F               	movlb	15	; () banked
 15585  002E1E  A152               	btfss	82,0,b	;volatile
 15586  002E20  D00D               	goto	i1l5156
 15587                           
 15588                           ; BSR set to: 15
 15589                           ;inc\CANlib.h: 570: msg->identifier |= 0x00010000;
 15590  002E22  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15591  002E26  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15592  002E2A  0E00               	movlw	0
 15593  002E2C  12DE               	iorwf	postinc2,f,c
 15594  002E2E  0E00               	movlw	0
 15595  002E30  12DE               	iorwf	postinc2,f,c
 15596  002E32  0E01               	movlw	1
 15597  002E34  12DE               	iorwf	postinc2,f,c
 15598  002E36  0E00               	movlw	0
 15599  002E38  12DE               	iorwf	postinc2,f,c
 15600  002E3A  D000               	goto	i1l5156
 15601  002E3C                     i1l5156:
 15602                           
 15603                           ; BSR set to: 15
 15604                           ;inc\CANlib.h: 571: if (RXB1SIDLbits.EID17)
 15605  002E3C  010F               	movlb	15	; () banked
 15606  002E3E  A352               	btfss	82,1,b	;volatile
 15607  002E40  D00D               	goto	i1l5160
 15608                           
 15609                           ; BSR set to: 15
 15610                           ;inc\CANlib.h: 572: msg->identifier |= 0x00020000;
 15611  002E42  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15612  002E46  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15613  002E4A  0E00               	movlw	0
 15614  002E4C  12DE               	iorwf	postinc2,f,c
 15615  002E4E  0E00               	movlw	0
 15616  002E50  12DE               	iorwf	postinc2,f,c
 15617  002E52  0E02               	movlw	2
 15618  002E54  12DE               	iorwf	postinc2,f,c
 15619  002E56  0E00               	movlw	0
 15620  002E58  12DE               	iorwf	postinc2,f,c
 15621  002E5A  D000               	goto	i1l5160
 15622  002E5C                     i1l5160:
 15623                           
 15624                           ; BSR set to: 15
 15625                           ;inc\CANlib.h: 573: if (RXB1SIDLbits.SID0)
 15626  002E5C  010F               	movlb	15	; () banked
 15627  002E5E  AB52               	btfss	82,5,b	;volatile
 15628  002E60  D00D               	goto	i1l5164
 15629                           
 15630                           ; BSR set to: 15
 15631                           ;inc\CANlib.h: 574: msg->identifier |= 0x00040000;
 15632  002E62  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15633  002E66  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15634  002E6A  0E00               	movlw	0
 15635  002E6C  12DE               	iorwf	postinc2,f,c
 15636  002E6E  0E00               	movlw	0
 15637  002E70  12DE               	iorwf	postinc2,f,c
 15638  002E72  0E04               	movlw	4
 15639  002E74  12DE               	iorwf	postinc2,f,c
 15640  002E76  0E00               	movlw	0
 15641  002E78  12DE               	iorwf	postinc2,f,c
 15642  002E7A  D000               	goto	i1l5164
 15643  002E7C                     i1l5164:
 15644                           
 15645                           ; BSR set to: 15
 15646                           ;inc\CANlib.h: 575: if (RXB1SIDLbits.SID1)
 15647  002E7C  010F               	movlb	15	; () banked
 15648  002E7E  AD52               	btfss	82,6,b	;volatile
 15649  002E80  D00D               	goto	i1l5168
 15650                           
 15651                           ; BSR set to: 15
 15652                           ;inc\CANlib.h: 576: msg->identifier |= 0x00080000;
 15653  002E82  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15654  002E86  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15655  002E8A  0E00               	movlw	0
 15656  002E8C  12DE               	iorwf	postinc2,f,c
 15657  002E8E  0E00               	movlw	0
 15658  002E90  12DE               	iorwf	postinc2,f,c
 15659  002E92  0E08               	movlw	8
 15660  002E94  12DE               	iorwf	postinc2,f,c
 15661  002E96  0E00               	movlw	0
 15662  002E98  12DE               	iorwf	postinc2,f,c
 15663  002E9A  D000               	goto	i1l5168
 15664  002E9C                     i1l5168:
 15665                           
 15666                           ; BSR set to: 15
 15667                           ;inc\CANlib.h: 577: if (RXB1SIDLbits.SID2)
 15668  002E9C  010F               	movlb	15	; () banked
 15669  002E9E  AF52               	btfss	82,7,b	;volatile
 15670  002EA0  D00D               	goto	i1l5172
 15671                           
 15672                           ; BSR set to: 15
 15673                           ;inc\CANlib.h: 578: msg->identifier |= 0x00100000;
 15674  002EA2  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15675  002EA6  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15676  002EAA  0E00               	movlw	0
 15677  002EAC  12DE               	iorwf	postinc2,f,c
 15678  002EAE  0E00               	movlw	0
 15679  002EB0  12DE               	iorwf	postinc2,f,c
 15680  002EB2  0E10               	movlw	16
 15681  002EB4  12DE               	iorwf	postinc2,f,c
 15682  002EB6  0E00               	movlw	0
 15683  002EB8  12DE               	iorwf	postinc2,f,c
 15684  002EBA  D000               	goto	i1l5172
 15685  002EBC                     i1l5172:
 15686                           
 15687                           ; BSR set to: 15
 15688                           ;inc\CANlib.h: 580: msg->identifier |= ((unsigned long) RXB1SIDH) << 21;
 15689  002EBC  CF51 F003          	movff	3921,??_CANreceiveMessage	;volatile
 15690  002EC0  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15691  002EC2  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15692  002EC4  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15693  002EC6  0E15               	movlw	21
 15694  002EC8                     i1u613_25:
 15695  002EC8  90D8               	bcf	status,0,c
 15696  002ECA  3603               	rlcf	??_CANreceiveMessage,f,c
 15697  002ECC  3604               	rlcf	??_CANreceiveMessage+1,f,c
 15698  002ECE  3605               	rlcf	??_CANreceiveMessage+2,f,c
 15699  002ED0  3606               	rlcf	??_CANreceiveMessage+3,f,c
 15700  002ED2  2EE8               	decfsz	wreg,f,c
 15701  002ED4  D7F9               	goto	i1u613_25
 15702  002ED6  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15703  002EDA  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15704  002EDE  5003               	movf	??_CANreceiveMessage,w,c
 15705  002EE0  12DE               	iorwf	postinc2,f,c
 15706  002EE2  5004               	movf	??_CANreceiveMessage+1,w,c
 15707  002EE4  12DE               	iorwf	postinc2,f,c
 15708  002EE6  5005               	movf	??_CANreceiveMessage+2,w,c
 15709  002EE8  12DE               	iorwf	postinc2,f,c
 15710  002EEA  5006               	movf	??_CANreceiveMessage+3,w,c
 15711  002EEC  12DE               	iorwf	postinc2,f,c
 15712  002EEE  D000               	goto	i1l5174
 15713  002EF0                     i1l5174:
 15714                           
 15715                           ; BSR set to: 15
 15716                           ;inc\CANlib.h: 581: }
 15717                           ;inc\CANlib.h: 583: RXB1CONbits.RXFUL = 0x00;
 15718  002EF0  010F               	movlb	15	; () banked
 15719  002EF2  9F50               	bcf	80,7,b	;volatile
 15720                           
 15721                           ; BSR set to: 15
 15722                           ;inc\CANlib.h: 584: return (error);
 15723                           ;	Return value of _CANreceiveMessage is never used
 15724  002EF4  0012               	return	
 15725  002EF6                     i1l408:
 15726                           
 15727                           ; BSR set to: 15
 15728                           ;inc\CANlib.h: 585: }
 15729                           ;inc\CANlib.h: 587: if (RXB0CONbits.RXFUL ==0x01)
 15730  002EF6  AE60               	btfss	3936,7,c	;volatile
 15731  002EF8  0012               	return	
 15732                           
 15733                           ; BSR set to: 15
 15734                           ;inc\CANlib.h: 588: {
 15735                           ;inc\CANlib.h: 589: msg->identifier = 0;
 15736  002EFA  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15737  002EFE  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15738  002F02  6ADE               	clrf	postinc2,c
 15739  002F04  6ADE               	clrf	postinc2,c
 15740  002F06  6ADE               	clrf	postinc2,c
 15741  002F08  6ADD               	clrf	postdec2,c
 15742                           
 15743                           ; BSR set to: 15
 15744                           ;inc\CANlib.h: 590: msg->data[0] =RXB0D0;
 15745  002F0A  EE20 F004          	lfsr	2,4
 15746  002F0E  5001               	movf	CANreceiveMessage@msg,w,c
 15747  002F10  26D9               	addwf	fsr2l,f,c
 15748  002F12  5002               	movf	CANreceiveMessage@msg+1,w,c
 15749  002F14  22DA               	addwfc	fsr2h,f,c
 15750  002F16  CF66 FFDF          	movff	3942,indf2	;volatile
 15751                           
 15752                           ; BSR set to: 15
 15753                           ;inc\CANlib.h: 591: msg->data[1] =RXB0D1;
 15754  002F1A  EE20 F005          	lfsr	2,5
 15755  002F1E  5001               	movf	CANreceiveMessage@msg,w,c
 15756  002F20  26D9               	addwf	fsr2l,f,c
 15757  002F22  5002               	movf	CANreceiveMessage@msg+1,w,c
 15758  002F24  22DA               	addwfc	fsr2h,f,c
 15759  002F26  CF67 FFDF          	movff	3943,indf2	;volatile
 15760                           
 15761                           ; BSR set to: 15
 15762                           ;inc\CANlib.h: 592: msg->data[2] =RXB0D2;
 15763  002F2A  EE20 F006          	lfsr	2,6
 15764  002F2E  5001               	movf	CANreceiveMessage@msg,w,c
 15765  002F30  26D9               	addwf	fsr2l,f,c
 15766  002F32  5002               	movf	CANreceiveMessage@msg+1,w,c
 15767  002F34  22DA               	addwfc	fsr2h,f,c
 15768  002F36  CF68 FFDF          	movff	3944,indf2	;volatile
 15769                           
 15770                           ; BSR set to: 15
 15771                           ;inc\CANlib.h: 593: msg->data[3] =RXB0D3;
 15772  002F3A  EE20 F007          	lfsr	2,7
 15773  002F3E  5001               	movf	CANreceiveMessage@msg,w,c
 15774  002F40  26D9               	addwf	fsr2l,f,c
 15775  002F42  5002               	movf	CANreceiveMessage@msg+1,w,c
 15776  002F44  22DA               	addwfc	fsr2h,f,c
 15777  002F46  CF69 FFDF          	movff	3945,indf2	;volatile
 15778                           
 15779                           ; BSR set to: 15
 15780                           ;inc\CANlib.h: 594: msg->data[4] =RXB0D4;
 15781  002F4A  EE20 F008          	lfsr	2,8
 15782  002F4E  5001               	movf	CANreceiveMessage@msg,w,c
 15783  002F50  26D9               	addwf	fsr2l,f,c
 15784  002F52  5002               	movf	CANreceiveMessage@msg+1,w,c
 15785  002F54  22DA               	addwfc	fsr2h,f,c
 15786  002F56  CF6A FFDF          	movff	3946,indf2	;volatile
 15787                           
 15788                           ; BSR set to: 15
 15789                           ;inc\CANlib.h: 595: msg->data[5] =RXB0D5;
 15790  002F5A  EE20 F009          	lfsr	2,9
 15791  002F5E  5001               	movf	CANreceiveMessage@msg,w,c
 15792  002F60  26D9               	addwf	fsr2l,f,c
 15793  002F62  5002               	movf	CANreceiveMessage@msg+1,w,c
 15794  002F64  22DA               	addwfc	fsr2h,f,c
 15795  002F66  CF6B FFDF          	movff	3947,indf2	;volatile
 15796                           
 15797                           ; BSR set to: 15
 15798                           ;inc\CANlib.h: 596: msg->data[6] =RXB0D6;
 15799  002F6A  EE20 F00A          	lfsr	2,10
 15800  002F6E  5001               	movf	CANreceiveMessage@msg,w,c
 15801  002F70  26D9               	addwf	fsr2l,f,c
 15802  002F72  5002               	movf	CANreceiveMessage@msg+1,w,c
 15803  002F74  22DA               	addwfc	fsr2h,f,c
 15804  002F76  CF6C FFDF          	movff	3948,indf2	;volatile
 15805                           
 15806                           ; BSR set to: 15
 15807                           ;inc\CANlib.h: 597: msg->data[7] =RXB0D7;
 15808  002F7A  EE20 F00B          	lfsr	2,11
 15809  002F7E  5001               	movf	CANreceiveMessage@msg,w,c
 15810  002F80  26D9               	addwf	fsr2l,f,c
 15811  002F82  5002               	movf	CANreceiveMessage@msg+1,w,c
 15812  002F84  22DA               	addwfc	fsr2h,f,c
 15813  002F86  CF6D FFDF          	movff	3949,indf2	;volatile
 15814                           
 15815                           ; BSR set to: 15
 15816                           ;inc\CANlib.h: 599: msg->RTR = RXB0DLCbits.RXRTR;
 15817  002F8A  EE20 F00E          	lfsr	2,14
 15818  002F8E  5001               	movf	CANreceiveMessage@msg,w,c
 15819  002F90  26D9               	addwf	fsr2l,f,c
 15820  002F92  5002               	movf	CANreceiveMessage@msg+1,w,c
 15821  002F94  22DA               	addwfc	fsr2h,f,c
 15822  002F96  AC65               	btfss	3941,6,c	;volatile
 15823  002F98  D002               	goto	i1u615_20
 15824  002F9A  0E01               	movlw	1
 15825  002F9C  D001               	goto	i1u615_26
 15826  002F9E                     i1u615_20:
 15827  002F9E  0E00               	movlw	0
 15828  002FA0                     i1u615_26:
 15829  002FA0  6EDF               	movwf	indf2,c
 15830                           
 15831                           ; BSR set to: 15
 15832                           ;inc\CANlib.h: 601: msg->length = RXB0DLC & 0x0F;
 15833  002FA2  EE20 F00D          	lfsr	2,13
 15834  002FA6  5001               	movf	CANreceiveMessage@msg,w,c
 15835  002FA8  26D9               	addwf	fsr2l,f,c
 15836  002FAA  5002               	movf	CANreceiveMessage@msg+1,w,c
 15837  002FAC  22DA               	addwfc	fsr2h,f,c
 15838  002FAE  5065               	movf	3941,w,c	;volatile
 15839  002FB0  0B0F               	andlw	15
 15840  002FB2  6EDF               	movwf	indf2,c
 15841                           
 15842                           ; BSR set to: 15
 15843                           ;inc\CANlib.h: 603: msg->type = RXB0SIDLbits.EXID;
 15844  002FB4  EE20 F00C          	lfsr	2,12
 15845  002FB8  5001               	movf	CANreceiveMessage@msg,w,c
 15846  002FBA  26D9               	addwf	fsr2l,f,c
 15847  002FBC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15848  002FBE  22DA               	addwfc	fsr2h,f,c
 15849  002FC0  A662               	btfss	3938,3,c	;volatile
 15850  002FC2  D002               	goto	i1u616_20
 15851  002FC4  0E01               	movlw	1
 15852  002FC6  D001               	goto	i1u616_26
 15853  002FC8                     i1u616_20:
 15854  002FC8  0E00               	movlw	0
 15855  002FCA                     i1u616_26:
 15856  002FCA  6EDF               	movwf	indf2,c
 15857                           
 15858                           ; BSR set to: 15
 15859                           ;inc\CANlib.h: 605: if (RXB0SIDLbits.EXID == 0)
 15860  002FCC  B662               	btfsc	3938,3,c	;volatile
 15861  002FCE  D043               	goto	i1l5210
 15862                           
 15863                           ; BSR set to: 15
 15864                           ;inc\CANlib.h: 606: {
 15865                           ;inc\CANlib.h: 607: msg->identifier = ((unsigned long)RXB0SIDH)<< 3;
 15866  002FD0  CF61 F003          	movff	3937,??_CANreceiveMessage	;volatile
 15867  002FD4  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15868  002FD6  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15869  002FD8  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15870  002FDA  0E03               	movlw	3
 15871  002FDC                     i1u618_25:
 15872  002FDC  90D8               	bcf	status,0,c
 15873  002FDE  3603               	rlcf	??_CANreceiveMessage,f,c
 15874  002FE0  3604               	rlcf	??_CANreceiveMessage+1,f,c
 15875  002FE2  3605               	rlcf	??_CANreceiveMessage+2,f,c
 15876  002FE4  3606               	rlcf	??_CANreceiveMessage+3,f,c
 15877  002FE6  2EE8               	decfsz	wreg,f,c
 15878  002FE8  D7F9               	goto	i1u618_25
 15879  002FEA  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15880  002FEE  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15881  002FF2  C003  FFDE         	movff	??_CANreceiveMessage,postinc2
 15882  002FF6  C004  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15883  002FFA  C005  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15884  002FFE  C006  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15885                           
 15886                           ; BSR set to: 15
 15887                           ;inc\CANlib.h: 608: tamp = (RXB0SIDL >> 5 ) & 0x07;
 15888  003002  3862               	swapf	3938,w,c	;volatile
 15889  003004  42E8               	rrncf	wreg,f,c
 15890  003006  0B07               	andlw	7
 15891  003008  0B07               	andlw	7
 15892  00300A  6E0C               	movwf	CANreceiveMessage@tamp,c
 15893                           
 15894                           ; BSR set to: 15
 15895                           ;inc\CANlib.h: 609: msg->identifier = msg->identifier + tamp;
 15896  00300C  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15897  003010  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15898  003014  CFDE F003          	movff	postinc2,??_CANreceiveMessage
 15899  003018  CFDE F004          	movff	postinc2,??_CANreceiveMessage+1
 15900  00301C  CFDE F005          	movff	postinc2,??_CANreceiveMessage+2
 15901  003020  CFDE F006          	movff	postinc2,??_CANreceiveMessage+3
 15902  003024  500C               	movf	CANreceiveMessage@tamp,w,c
 15903  003026  2403               	addwf	??_CANreceiveMessage,w,c
 15904  003028  6E07               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 15905  00302A  0E00               	movlw	0
 15906  00302C  2004               	addwfc	??_CANreceiveMessage+1,w,c
 15907  00302E  6E08               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 15908  003030  0E00               	movlw	0
 15909  003032  2005               	addwfc	??_CANreceiveMessage+2,w,c
 15910  003034  6E09               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 15911  003036  0E00               	movlw	0
 15912  003038  2006               	addwfc	??_CANreceiveMessage+3,w,c
 15913  00303A  6E0A               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 15914  00303C  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15915  003040  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15916  003044  C007  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 15917  003048  C008  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 15918  00304C  C009  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 15919  003050  C00A  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 15920                           
 15921                           ;inc\CANlib.h: 610: }
 15922  003054  D08E               	goto	i1l5236
 15923  003056                     i1l5210:
 15924                           
 15925                           ; BSR set to: 15
 15926                           ;inc\CANlib.h: 611: else
 15927                           ;inc\CANlib.h: 612: {
 15928                           ;inc\CANlib.h: 613: msg->identifier = (unsigned long) RXB0EIDL;
 15929  003056  CF64 F003          	movff	3940,??_CANreceiveMessage	;volatile
 15930  00305A  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15931  00305C  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15932  00305E  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15933  003060  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15934  003064  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15935  003068  C003  FFDE         	movff	??_CANreceiveMessage,postinc2
 15936  00306C  C004  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15937  003070  C005  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15938  003074  C006  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15939                           
 15940                           ; BSR set to: 15
 15941                           ;inc\CANlib.h: 614: msg->identifier += ((unsigned long) RXB0EIDH) << 8;
 15942  003078  CF63 F003          	movff	3939,??_CANreceiveMessage	;volatile
 15943  00307C  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15944  00307E  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15945  003080  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15946  003082  C005  F006         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 15947  003086  C004  F005         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 15948  00308A  C003  F004         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 15949  00308E  6A03               	clrf	??_CANreceiveMessage,c
 15950  003090  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15951  003094  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15952  003098  5003               	movf	??_CANreceiveMessage,w,c
 15953  00309A  26DE               	addwf	postinc2,f,c
 15954  00309C  5004               	movf	??_CANreceiveMessage+1,w,c
 15955  00309E  22DE               	addwfc	postinc2,f,c
 15956  0030A0  5005               	movf	??_CANreceiveMessage+2,w,c
 15957  0030A2  22DE               	addwfc	postinc2,f,c
 15958  0030A4  5006               	movf	??_CANreceiveMessage+3,w,c
 15959  0030A6  22DE               	addwfc	postinc2,f,c
 15960                           
 15961                           ; BSR set to: 15
 15962                           ;inc\CANlib.h: 616: if (RXB0SIDLbits.EID16)
 15963  0030A8  A062               	btfss	3938,0,c	;volatile
 15964  0030AA  D00D               	goto	i1l5218
 15965                           
 15966                           ; BSR set to: 15
 15967                           ;inc\CANlib.h: 617: msg->identifier |= 0x00010000;
 15968  0030AC  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15969  0030B0  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15970  0030B4  0E00               	movlw	0
 15971  0030B6  12DE               	iorwf	postinc2,f,c
 15972  0030B8  0E00               	movlw	0
 15973  0030BA  12DE               	iorwf	postinc2,f,c
 15974  0030BC  0E01               	movlw	1
 15975  0030BE  12DE               	iorwf	postinc2,f,c
 15976  0030C0  0E00               	movlw	0
 15977  0030C2  12DE               	iorwf	postinc2,f,c
 15978  0030C4  D000               	goto	i1l5218
 15979  0030C6                     i1l5218:
 15980                           
 15981                           ; BSR set to: 15
 15982                           ;inc\CANlib.h: 618: if (RXB0SIDLbits.EID17)
 15983  0030C6  A262               	btfss	3938,1,c	;volatile
 15984  0030C8  D00D               	goto	i1l5222
 15985                           
 15986                           ; BSR set to: 15
 15987                           ;inc\CANlib.h: 619: msg->identifier |= 0x00020000;
 15988  0030CA  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15989  0030CE  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15990  0030D2  0E00               	movlw	0
 15991  0030D4  12DE               	iorwf	postinc2,f,c
 15992  0030D6  0E00               	movlw	0
 15993  0030D8  12DE               	iorwf	postinc2,f,c
 15994  0030DA  0E02               	movlw	2
 15995  0030DC  12DE               	iorwf	postinc2,f,c
 15996  0030DE  0E00               	movlw	0
 15997  0030E0  12DE               	iorwf	postinc2,f,c
 15998  0030E2  D000               	goto	i1l5222
 15999  0030E4                     i1l5222:
 16000                           
 16001                           ; BSR set to: 15
 16002                           ;inc\CANlib.h: 620: if (RXB0SIDLbits.SID0)
 16003  0030E4  AA62               	btfss	3938,5,c	;volatile
 16004  0030E6  D00D               	goto	i1l5226
 16005                           
 16006                           ; BSR set to: 15
 16007                           ;inc\CANlib.h: 621: msg->identifier |= 0x00040000;
 16008  0030E8  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16009  0030EC  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16010  0030F0  0E00               	movlw	0
 16011  0030F2  12DE               	iorwf	postinc2,f,c
 16012  0030F4  0E00               	movlw	0
 16013  0030F6  12DE               	iorwf	postinc2,f,c
 16014  0030F8  0E04               	movlw	4
 16015  0030FA  12DE               	iorwf	postinc2,f,c
 16016  0030FC  0E00               	movlw	0
 16017  0030FE  12DE               	iorwf	postinc2,f,c
 16018  003100  D000               	goto	i1l5226
 16019  003102                     i1l5226:
 16020                           
 16021                           ; BSR set to: 15
 16022                           ;inc\CANlib.h: 622: if (RXB0SIDLbits.SID1)
 16023  003102  AC62               	btfss	3938,6,c	;volatile
 16024  003104  D00D               	goto	i1l5230
 16025                           
 16026                           ; BSR set to: 15
 16027                           ;inc\CANlib.h: 623: msg->identifier |= 0x00080000;
 16028  003106  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16029  00310A  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16030  00310E  0E00               	movlw	0
 16031  003110  12DE               	iorwf	postinc2,f,c
 16032  003112  0E00               	movlw	0
 16033  003114  12DE               	iorwf	postinc2,f,c
 16034  003116  0E08               	movlw	8
 16035  003118  12DE               	iorwf	postinc2,f,c
 16036  00311A  0E00               	movlw	0
 16037  00311C  12DE               	iorwf	postinc2,f,c
 16038  00311E  D000               	goto	i1l5230
 16039  003120                     i1l5230:
 16040                           
 16041                           ; BSR set to: 15
 16042                           ;inc\CANlib.h: 624: if (RXB0SIDLbits.SID2)
 16043  003120  AE62               	btfss	3938,7,c	;volatile
 16044  003122  D00D               	goto	i1l5234
 16045                           
 16046                           ; BSR set to: 15
 16047                           ;inc\CANlib.h: 625: msg->identifier |= 0x00100000;
 16048  003124  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16049  003128  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16050  00312C  0E00               	movlw	0
 16051  00312E  12DE               	iorwf	postinc2,f,c
 16052  003130  0E00               	movlw	0
 16053  003132  12DE               	iorwf	postinc2,f,c
 16054  003134  0E10               	movlw	16
 16055  003136  12DE               	iorwf	postinc2,f,c
 16056  003138  0E00               	movlw	0
 16057  00313A  12DE               	iorwf	postinc2,f,c
 16058  00313C  D000               	goto	i1l5234
 16059  00313E                     i1l5234:
 16060                           
 16061                           ; BSR set to: 15
 16062                           ;inc\CANlib.h: 627: msg->identifier |= ((unsigned long) RXB0SIDH) << 21;
 16063  00313E  CF61 F003          	movff	3937,??_CANreceiveMessage	;volatile
 16064  003142  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16065  003144  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16066  003146  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16067  003148  0E15               	movlw	21
 16068  00314A                     i1u624_25:
 16069  00314A  90D8               	bcf	status,0,c
 16070  00314C  3603               	rlcf	??_CANreceiveMessage,f,c
 16071  00314E  3604               	rlcf	??_CANreceiveMessage+1,f,c
 16072  003150  3605               	rlcf	??_CANreceiveMessage+2,f,c
 16073  003152  3606               	rlcf	??_CANreceiveMessage+3,f,c
 16074  003154  2EE8               	decfsz	wreg,f,c
 16075  003156  D7F9               	goto	i1u624_25
 16076  003158  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16077  00315C  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16078  003160  5003               	movf	??_CANreceiveMessage,w,c
 16079  003162  12DE               	iorwf	postinc2,f,c
 16080  003164  5004               	movf	??_CANreceiveMessage+1,w,c
 16081  003166  12DE               	iorwf	postinc2,f,c
 16082  003168  5005               	movf	??_CANreceiveMessage+2,w,c
 16083  00316A  12DE               	iorwf	postinc2,f,c
 16084  00316C  5006               	movf	??_CANreceiveMessage+3,w,c
 16085  00316E  12DE               	iorwf	postinc2,f,c
 16086  003170  D000               	goto	i1l5236
 16087  003172                     i1l5236:
 16088                           
 16089                           ; BSR set to: 15
 16090                           ;inc\CANlib.h: 629: }
 16091                           ;inc\CANlib.h: 630: RXB0CONbits.RXFUL = 0x00;
 16092  003172  9E60               	bcf	3936,7,c	;volatile
 16093                           
 16094                           ; BSR set to: 15
 16095                           ;inc\CANlib.h: 632: return (error);
 16096                           ;	Return value of _CANreceiveMessage is never used
 16097  003174  0012               	return	
 16098                           
 16099                           ; BSR set to: 15
 16100                           
 16101                           ; BSR set to: 15
 16102  003176  0012               	return		;funcret
 16103  003178                     __end_of_CANreceiveMessage:
 16104                           	opt stack 0
 16105                           pclatu	equ	0xFFB
 16106                           pclath	equ	0xFFA
 16107                           tblptru	equ	0xFF8
 16108                           tblptrh	equ	0xFF7
 16109                           tblptrl	equ	0xFF6
 16110                           tablat	equ	0xFF5
 16111                           prodh	equ	0xFF4
 16112                           prodl	equ	0xFF3
 16113                           intcon	equ	0xFF2
 16114                           intcon2	equ	0xFF1
 16115                           postinc0	equ	0xFEE
 16116                           fsr0h	equ	0xFEA
 16117                           fsr0l	equ	0xFE9
 16118                           wreg	equ	0xFE8
 16119                           indf1	equ	0xFE7
 16120                           postdec1	equ	0xFE5
 16121                           fsr1h	equ	0xFE2
 16122                           fsr1l	equ	0xFE1
 16123                           bsr	equ	0xFE0
 16124                           indf2	equ	0xFDF
 16125                           postinc2	equ	0xFDE
 16126                           postdec2	equ	0xFDD
 16127                           plusw2	equ	0xFDB
 16128                           fsr2h	equ	0xFDA
 16129                           fsr2l	equ	0xFD9
 16130                           status	equ	0xFD8
 16131                           
 16132 ;; *************** function _ISR_Alta *****************
 16133 ;; Defined at:
 16134 ;;		line 107 in file "parcheggio.c"
 16135 ;; Parameters:    Size  Location     Type
 16136 ;;		None
 16137 ;; Auto vars:     Size  Location     Type
 16138 ;;		None
 16139 ;; Return value:  Size  Location     Type
 16140 ;;		None               void
 16141 ;; Registers used:
 16142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16143 ;; Tracked objects:
 16144 ;;		On entry : 0/0
 16145 ;;		On exit  : 0/0
 16146 ;;		Unchanged: 0/0
 16147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16150 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16151 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16152 ;;Total ram usage:       16 bytes
 16153 ;; Hardware stack levels used:    1
 16154 ;; Hardware stack levels required when called:    1
 16155 ;; This function calls:
 16156 ;;		___lwdiv
 16157 ;; This function is called by:
 16158 ;;		Interrupt level 2
 16159 ;; This function uses a non-reentrant model
 16160 ;;
 16161                           
 16162                           	psect	intcode
 16163  000008                     __pintcode:
 16164                           	opt stack 0
 16165  000008                     _ISR_Alta:
 16166                           	opt stack 19
 16167                           
 16168                           ; BSR set to: 15
 16169                           ;incstack = 0
 16170  000008  CFFA F069          	movff	pclath,??_ISR_Alta+2
 16171  00000C  CFFB F06A          	movff	pclatu,??_ISR_Alta+3
 16172  000010  CFE9 F06B          	movff	fsr0l,??_ISR_Alta+4
 16173  000014  EF17  F02C         	goto	int_func
 16174                           pclatu	equ	0xFFB
 16175                           pclath	equ	0xFFA
 16176                           tblptru	equ	0xFF8
 16177                           tblptrh	equ	0xFF7
 16178                           tblptrl	equ	0xFF6
 16179                           tablat	equ	0xFF5
 16180                           prodh	equ	0xFF4
 16181                           prodl	equ	0xFF3
 16182                           intcon	equ	0xFF2
 16183                           intcon2	equ	0xFF1
 16184                           postinc0	equ	0xFEE
 16185                           fsr0h	equ	0xFEA
 16186                           fsr0l	equ	0xFE9
 16187                           wreg	equ	0xFE8
 16188                           indf1	equ	0xFE7
 16189                           postdec1	equ	0xFE5
 16190                           fsr1h	equ	0xFE2
 16191                           fsr1l	equ	0xFE1
 16192                           bsr	equ	0xFE0
 16193                           indf2	equ	0xFDF
 16194                           postinc2	equ	0xFDE
 16195                           postdec2	equ	0xFDD
 16196                           plusw2	equ	0xFDB
 16197                           fsr2h	equ	0xFDA
 16198                           fsr2l	equ	0xFD9
 16199                           status	equ	0xFD8
 16200                           
 16201                           	psect	intcode_body
 16202  00582E                     __pintcode_body:
 16203                           	opt stack 19
 16204  00582E                     int_func:
 16205                           	opt stack 19
 16206  00582E  CFEA F06C          	movff	fsr0h,??_ISR_Alta+5
 16207  005832  CFE1 F06D          	movff	fsr1l,??_ISR_Alta+6
 16208  005836  CFE2 F06E          	movff	fsr1h,??_ISR_Alta+7
 16209  00583A  CFD9 F06F          	movff	fsr2l,??_ISR_Alta+8
 16210  00583E  CFDA F070          	movff	fsr2h,??_ISR_Alta+9
 16211  005842  CFF3 F071          	movff	prodl,??_ISR_Alta+10
 16212  005846  CFF4 F072          	movff	prodh,??_ISR_Alta+11
 16213  00584A  CFF6 F073          	movff	tblptrl,??_ISR_Alta+12
 16214  00584E  CFF7 F074          	movff	tblptrh,??_ISR_Alta+13
 16215  005852  CFF8 F075          	movff	tblptru,??_ISR_Alta+14
 16216  005856  CFF5 F076          	movff	tablat,??_ISR_Alta+15
 16217                           
 16218                           ;parcheggio.c: 108: if (INTCON2bits.INTEDG0 == 1) {
 16219  00585A  ACF1               	btfss	intcon2,6,c	;volatile
 16220  00585C  D007               	goto	i2l698
 16221                           
 16222                           ;parcheggio.c: 109: INTCON2bits.INTEDG0 = 0;
 16223  00585E  9CF1               	bcf	intcon2,6,c	;volatile
 16224                           
 16225                           ;parcheggio.c: 110: TMR3H = 0;
 16226  005860  0E00               	movlw	0
 16227  005862  6EB3               	movwf	4019,c	;volatile
 16228                           
 16229                           ;parcheggio.c: 111: TMR3L = 0;
 16230  005864  0E00               	movlw	0
 16231  005866  6EB2               	movwf	4018,c	;volatile
 16232                           
 16233                           ;parcheggio.c: 112: distance_error = 0;
 16234  005868  9A51               	bcf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 16235                           
 16236                           ;parcheggio.c: 113: } else {
 16237  00586A  D031               	goto	i2l6782
 16238  00586C                     i2l698:
 16239                           
 16240                           ;parcheggio.c: 114: TMR3H_temp = TMR3H;
 16241  00586C  CFB3 F04D          	movff	4019,_TMR3H_temp	;volatile
 16242                           
 16243                           ;parcheggio.c: 115: TMR3L_temp = TMR3L;
 16244  005870  CFB2 F04E          	movff	4018,_TMR3L_temp	;volatile
 16245                           
 16246                           ;parcheggio.c: 116: timerValue2 = TMR3H_temp;
 16247  005874  C04D  F04A         	movff	_TMR3H_temp,_timerValue2	;volatile
 16248  005878  6A4B               	clrf	_timerValue2+1,c	;volatile
 16249                           
 16250                           ;parcheggio.c: 117: timerValue2 = ((timerValue2 << 8) | (TMR3L_temp));
 16251  00587A  504A               	movf	_timerValue2,w,c	;volatile
 16252  00587C  0100               	movlb	0	; () banked
 16253  00587E  6F67               	movwf	??_ISR_Alta& (0+255),b
 16254  005880  504E               	movf	_TMR3L_temp,w,c	;volatile
 16255  005882  6E4A               	movwf	_timerValue2,c	;volatile
 16256  005884  C067  F04B         	movff	??_ISR_Alta,_timerValue2+1	;volatile
 16257                           
 16258                           ; BSR set to: 0
 16259                           ;parcheggio.c: 118: pulse_time = timerValue2 / 2;
 16260  005888  90D8               	bcf	status,0,c
 16261  00588A  304B               	rrcf	_timerValue2+1,w,c	;volatile
 16262  00588C  0100               	movlb	0	; () banked
 16263  00588E  6F67               	movwf	??_ISR_Alta& (0+255),b
 16264  005890  304A               	rrcf	_timerValue2,w,c	;volatile
 16265  005892  6E48               	movwf	_pulse_time,c	;volatile
 16266  005894  C067  F049         	movff	??_ISR_Alta,_pulse_time+1	;volatile
 16267                           
 16268                           ; BSR set to: 0
 16269                           ;parcheggio.c: 119: sensor_distance[MUX_index] = pulse_time / 58;
 16270  005898  C048  F060         	movff	_pulse_time,___lwdiv@dividend	;volatile
 16271  00589C  C049  F061         	movff	_pulse_time+1,___lwdiv@dividend+1	;volatile
 16272  0058A0  0E00               	movlw	0
 16273  0058A2  0100               	movlb	0	; () banked
 16274  0058A4  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 16275  0058A6  0E3A               	movlw	58
 16276  0058A8  6F62               	movwf	___lwdiv@divisor& (0+255),b
 16277  0058AA  ECCF  F02C         	call	___lwdiv	;wreg free
 16278  0058AE  504C               	movf	_MUX_index,w,c	;volatile
 16279  0058B0  0D02               	mullw	2
 16280  0058B2  0E2A               	movlw	low _sensor_distance
 16281  0058B4  24F3               	addwf	prodl,w,c
 16282  0058B6  6ED9               	movwf	fsr2l,c
 16283  0058B8  0E00               	movlw	high _sensor_distance
 16284  0058BA  20F4               	addwfc	prodh,w,c
 16285  0058BC  6EDA               	movwf	fsr2h,c
 16286  0058BE  0100               	movlb	0	; () banked
 16287  0058C0  C060  FFDE         	movff	?___lwdiv,postinc2
 16288  0058C4  0100               	movlb	0	; () banked
 16289  0058C6  C061  FFDD         	movff	?___lwdiv+1,postdec2
 16290                           
 16291                           ; BSR set to: 0
 16292                           ;parcheggio.c: 120: INTCON2bits.INTEDG0 = 1;
 16293  0058CA  8CF1               	bsf	intcon2,6,c	;volatile
 16294  0058CC  D000               	goto	i2l6782
 16295  0058CE                     i2l6782:
 16296                           
 16297                           ;parcheggio.c: 121: }
 16298                           ;parcheggio.c: 122: INTCONbits.INT0IF = 0;
 16299  0058CE  92F2               	bcf	intcon,1,c	;volatile
 16300  0058D0  C076  FFF5         	movff	??_ISR_Alta+15,tablat
 16301  0058D4  C075  FFF8         	movff	??_ISR_Alta+14,tblptru
 16302  0058D8  C074  FFF7         	movff	??_ISR_Alta+13,tblptrh
 16303  0058DC  C073  FFF6         	movff	??_ISR_Alta+12,tblptrl
 16304  0058E0  C072  FFF4         	movff	??_ISR_Alta+11,prodh
 16305  0058E4  C071  FFF3         	movff	??_ISR_Alta+10,prodl
 16306  0058E8  C070  FFDA         	movff	??_ISR_Alta+9,fsr2h
 16307  0058EC  C06F  FFD9         	movff	??_ISR_Alta+8,fsr2l
 16308  0058F0  C06E  FFE2         	movff	??_ISR_Alta+7,fsr1h
 16309  0058F4  C06D  FFE1         	movff	??_ISR_Alta+6,fsr1l
 16310  0058F8  C06C  FFEA         	movff	??_ISR_Alta+5,fsr0h
 16311  0058FC  C06B  FFE9         	movff	??_ISR_Alta+4,fsr0l
 16312  005900  C06A  FFFB         	movff	??_ISR_Alta+3,pclatu
 16313  005904  C069  FFFA         	movff	??_ISR_Alta+2,pclath
 16314  005908  0011               	retfie		f
 16315  00590A                     __end_of_ISR_Alta:
 16316                           	opt stack 0
 16317                           pclatu	equ	0xFFB
 16318                           pclath	equ	0xFFA
 16319                           tblptru	equ	0xFF8
 16320                           tblptrh	equ	0xFF7
 16321                           tblptrl	equ	0xFF6
 16322                           tablat	equ	0xFF5
 16323                           prodh	equ	0xFF4
 16324                           prodl	equ	0xFF3
 16325                           intcon	equ	0xFF2
 16326                           intcon2	equ	0xFF1
 16327                           postinc0	equ	0xFEE
 16328                           fsr0h	equ	0xFEA
 16329                           fsr0l	equ	0xFE9
 16330                           wreg	equ	0xFE8
 16331                           indf1	equ	0xFE7
 16332                           postdec1	equ	0xFE5
 16333                           fsr1h	equ	0xFE2
 16334                           fsr1l	equ	0xFE1
 16335                           bsr	equ	0xFE0
 16336                           indf2	equ	0xFDF
 16337                           postinc2	equ	0xFDE
 16338                           postdec2	equ	0xFDD
 16339                           plusw2	equ	0xFDB
 16340                           fsr2h	equ	0xFDA
 16341                           fsr2l	equ	0xFD9
 16342                           status	equ	0xFD8
 16343                           
 16344 ;; *************** function ___lwdiv *****************
 16345 ;; Defined at:
 16346 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 16347 ;; Parameters:    Size  Location     Type
 16348 ;;  dividend        2    0[BANK0 ] unsigned int 
 16349 ;;  divisor         2    2[BANK0 ] unsigned int 
 16350 ;; Auto vars:     Size  Location     Type
 16351 ;;  quotient        2    5[BANK0 ] unsigned int 
 16352 ;;  counter         1    4[BANK0 ] unsigned char 
 16353 ;; Return value:  Size  Location     Type
 16354 ;;                  2    0[BANK0 ] unsigned int 
 16355 ;; Registers used:
 16356 ;;		wreg, status,2, status,0
 16357 ;; Tracked objects:
 16358 ;;		On entry : 0/0
 16359 ;;		On exit  : 0/0
 16360 ;;		Unchanged: 0/0
 16361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16362 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16363 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16365 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16366 ;;Total ram usage:        7 bytes
 16367 ;; Hardware stack levels used:    1
 16368 ;; This function calls:
 16369 ;;		Nothing
 16370 ;; This function is called by:
 16371 ;;		_ISR_Alta
 16372 ;; This function uses a non-reentrant model
 16373 ;;
 16374                           
 16375                           	psect	text43
 16376  00599E                     __ptext43:
 16377                           	opt stack 0
 16378  00599E                     ___lwdiv:
 16379                           	opt stack 19
 16380                           
 16381                           ;incstack = 0
 16382  00599E  0E00               	movlw	0
 16383  0059A0  0100               	movlb	0	; () banked
 16384  0059A2  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16385  0059A4  0E00               	movlw	0
 16386  0059A6  6F65               	movwf	___lwdiv@quotient& (0+255),b
 16387                           
 16388                           ; BSR set to: 0
 16389  0059A8  0100               	movlb	0	; () banked
 16390  0059AA  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16391  0059AC  0100               	movlb	0	; () banked
 16392  0059AE  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16393  0059B0  B4D8               	btfsc	status,2,c
 16394  0059B2  D031               	goto	i2l1426
 16395                           
 16396                           ; BSR set to: 0
 16397  0059B4  0E01               	movlw	1
 16398  0059B6  0100               	movlb	0	; () banked
 16399  0059B8  6F64               	movwf	___lwdiv@counter& (0+255),b
 16400  0059BA  D007               	goto	i2l6752
 16401  0059BC                     i2l6750:
 16402                           
 16403                           ; BSR set to: 0
 16404  0059BC  0100               	movlb	0	; () banked
 16405  0059BE  90D8               	bcf	status,0,c
 16406  0059C0  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 16407  0059C2  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16408  0059C4  0100               	movlb	0	; () banked
 16409  0059C6  2B64               	incf	___lwdiv@counter& (0+255),f,b
 16410  0059C8  D000               	goto	i2l6752
 16411  0059CA                     i2l6752:
 16412                           
 16413                           ; BSR set to: 0
 16414  0059CA  0100               	movlb	0	; () banked
 16415  0059CC  BF63               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
 16416  0059CE  D002               	goto	i2l6754
 16417  0059D0  D7F5               	goto	i2l6750
 16418                           
 16419                           ; BSR set to: 0
 16420  0059D2  D000               	goto	i2l6754
 16421  0059D4                     i2l6754:
 16422                           
 16423                           ; BSR set to: 0
 16424  0059D4  0100               	movlb	0	; () banked
 16425  0059D6  90D8               	bcf	status,0,c
 16426  0059D8  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 16427  0059DA  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16428                           
 16429                           ; BSR set to: 0
 16430  0059DC  0100               	movlb	0	; () banked
 16431  0059DE  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16432  0059E0  0100               	movlb	0	; () banked
 16433  0059E2  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 16434  0059E4  0100               	movlb	0	; () banked
 16435  0059E6  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16436  0059E8  0100               	movlb	0	; () banked
 16437  0059EA  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16438  0059EC  A0D8               	btfss	status,0,c
 16439  0059EE  D00B               	goto	i2l6762
 16440                           
 16441                           ; BSR set to: 0
 16442  0059F0  0100               	movlb	0	; () banked
 16443  0059F2  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16444  0059F4  0100               	movlb	0	; () banked
 16445  0059F6  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 16446  0059F8  0100               	movlb	0	; () banked
 16447  0059FA  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16448  0059FC  0100               	movlb	0	; () banked
 16449  0059FE  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16450                           
 16451                           ; BSR set to: 0
 16452  005A00  0100               	movlb	0	; () banked
 16453  005A02  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 16454  005A04  D000               	goto	i2l6762
 16455  005A06                     i2l6762:
 16456                           
 16457                           ; BSR set to: 0
 16458  005A06  0100               	movlb	0	; () banked
 16459  005A08  90D8               	bcf	status,0,c
 16460  005A0A  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16461  005A0C  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 16462                           
 16463                           ; BSR set to: 0
 16464  005A0E  0100               	movlb	0	; () banked
 16465  005A10  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 16466  005A12  D7E0               	goto	i2l6754
 16467  005A14  D000               	goto	i2l1426
 16468  005A16                     i2l1426:
 16469                           
 16470                           ; BSR set to: 0
 16471  005A16  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 16472  005A1A  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16473                           
 16474                           ; BSR set to: 0
 16475  005A1E  0012               	return		;funcret
 16476  005A20                     __end_of___lwdiv:
 16477                           	opt stack 0
 16478                           pclatu	equ	0xFFB
 16479                           pclath	equ	0xFFA
 16480                           tblptru	equ	0xFF8
 16481                           tblptrh	equ	0xFF7
 16482                           tblptrl	equ	0xFF6
 16483                           tablat	equ	0xFF5
 16484                           prodh	equ	0xFF4
 16485                           prodl	equ	0xFF3
 16486                           intcon	equ	0xFF2
 16487                           intcon2	equ	0xFF1
 16488                           postinc0	equ	0xFEE
 16489                           fsr0h	equ	0xFEA
 16490                           fsr0l	equ	0xFE9
 16491                           wreg	equ	0xFE8
 16492                           indf1	equ	0xFE7
 16493                           postdec1	equ	0xFE5
 16494                           fsr1h	equ	0xFE2
 16495                           fsr1l	equ	0xFE1
 16496                           bsr	equ	0xFE0
 16497                           indf2	equ	0xFDF
 16498                           postinc2	equ	0xFDE
 16499                           postdec2	equ	0xFDD
 16500                           plusw2	equ	0xFDB
 16501                           fsr2h	equ	0xFDA
 16502                           fsr2l	equ	0xFD9
 16503                           status	equ	0xFD8
 16504                           pclatu	equ	0xFFB
 16505                           pclath	equ	0xFFA
 16506                           tblptru	equ	0xFF8
 16507                           tblptrh	equ	0xFF7
 16508                           tblptrl	equ	0xFF6
 16509                           tablat	equ	0xFF5
 16510                           prodh	equ	0xFF4
 16511                           prodl	equ	0xFF3
 16512                           intcon	equ	0xFF2
 16513                           intcon2	equ	0xFF1
 16514                           postinc0	equ	0xFEE
 16515                           fsr0h	equ	0xFEA
 16516                           fsr0l	equ	0xFE9
 16517                           wreg	equ	0xFE8
 16518                           indf1	equ	0xFE7
 16519                           postdec1	equ	0xFE5
 16520                           fsr1h	equ	0xFE2
 16521                           fsr1l	equ	0xFE1
 16522                           bsr	equ	0xFE0
 16523                           indf2	equ	0xFDF
 16524                           postinc2	equ	0xFDE
 16525                           postdec2	equ	0xFDD
 16526                           plusw2	equ	0xFDB
 16527                           fsr2h	equ	0xFDA
 16528                           fsr2l	equ	0xFD9
 16529                           status	equ	0xFD8
 16530                           
 16531                           	psect	param0
 16532  0000                     pclatu	equ	0xFFB
 16533                           pclath	equ	0xFFA
 16534                           tblptru	equ	0xFF8
 16535                           tblptrh	equ	0xFF7
 16536                           tblptrl	equ	0xFF6
 16537                           tablat	equ	0xFF5
 16538                           prodh	equ	0xFF4
 16539                           prodl	equ	0xFF3
 16540                           intcon	equ	0xFF2
 16541                           intcon2	equ	0xFF1
 16542                           postinc0	equ	0xFEE
 16543                           fsr0h	equ	0xFEA
 16544                           fsr0l	equ	0xFE9
 16545                           wreg	equ	0xFE8
 16546                           indf1	equ	0xFE7
 16547                           postdec1	equ	0xFE5
 16548                           fsr1h	equ	0xFE2
 16549                           fsr1l	equ	0xFE1
 16550                           bsr	equ	0xFE0
 16551                           indf2	equ	0xFDF
 16552                           postinc2	equ	0xFDE
 16553                           postdec2	equ	0xFDD
 16554                           plusw2	equ	0xFDB
 16555                           fsr2h	equ	0xFDA
 16556                           fsr2l	equ	0xFD9
 16557                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    80
    Data        11
    BSS         196
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     41      84
    BANK0           160    119     136
    BANK1           256     99     248
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 24
		 -> sin@coeff_a(CODE[20]), sin@coeff_b(CODE[16]), atan@coeff_a(CODE[24]), atan@coeff_b(CODE[20]), 

    CANreceiveMessage@msg	PTR struct . size(2) Largest target is 15
		 -> msg(BANK1[15]), 

    CANsendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data_speed(BANK1[8]), data_brake(BANK1[8]), data_steering(BANK1[8]), data_correction(BANK1[8]), 
		 -> data_test(BANK1[8]), data(BANK1[8]), sensor_distance_short(BANK1[8]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Alta in COMRAM

    None.

Critical Paths under _ISR_Bassa in COMRAM

    _ISR_Bassa->i1_CANsendMessage
    i1_delay_ms->i1___wmul

Critical Paths under _main in BANK0

    _park_search->_parallelo
    _park_routine->_parallelo
    _parallelo->_sqrt
    _can_send->_CANsendMessage
    ___awtofl->___flpack
    _cos->_sin
    _sin->___flsub
    _floor->___flge
    ___fltol->___flneg
    ___altofl->___fltol
    _asin->_sqrt
    _sqrt->___flsub
    ___flsub->_floor
    _atan->___flge
    _fabs->___flneg
    ___flneg->___fladd
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___flge->_fabs
    ___fldiv->___flpack
    _delay_s->_delay_ms
    _delay_ms->___wmul
    ___lwtofl->___flpack
    _configurations->_CANInitialize
    _CANInitialize->_CANSetFilter
    _CANInitialize->_CANSetMask

Critical Paths under _ISR_Alta in BANK0

    _ISR_Alta->___lwdiv

Critical Paths under _ISR_Bassa in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_park_routine
    _park_routine->_matematica
    _parallelo->_asin
    _matematica->_cos
    _cos->_asin
    _asin->_sqrt

Critical Paths under _ISR_Alta in BANK1

    None.

Critical Paths under _ISR_Bassa in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Alta in BANK2

    None.

Critical Paths under _ISR_Bassa in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Alta in BANK3

    None.

Critical Paths under _ISR_Bassa in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Alta in BANK4

    None.

Critical Paths under _ISR_Bassa in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Alta in BANK5

    None.

Critical Paths under _ISR_Bassa in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Alta in BANK6

    None.

Critical Paths under _ISR_Bassa in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Alta in BANK7

    None.

Critical Paths under _ISR_Bassa in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Alta in BANK8

    None.

Critical Paths under _ISR_Bassa in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Alta in BANK9

    None.

Critical Paths under _ISR_Bassa in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Alta in BANK10

    None.

Critical Paths under _ISR_Bassa in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Alta in BANK11

    None.

Critical Paths under _ISR_Bassa in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Alta in BANK12

    None.

Critical Paths under _ISR_Bassa in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  488050
                                             95 BANK1      4     4      0
                       _CANisTxReady
                     _CANsendMessage
                     _configurations
                           _delay_ms
                       _park_routine
                        _park_search
 ---------------------------------------------------------------------------------
 (1) _park_search                                          2     2      0  141957
                                             49 BANK1      2     2      0
                       _CANisTxReady
                     _CANsendMessage
                           ___awtofl
                                _abs
                          _parallelo
 ---------------------------------------------------------------------------------
 (1) _park_routine                                        10    10      0  333335
                                             85 BANK1     10    10      0
                       _CANisTxReady
                     _CANsendMessage
                            ___fladd
                            ___flneg
                            ___fltol
                           ___lwtofl
                           _can_send
                           _delay_ms
                            _delay_s
                         _matematica
                          _parallelo
 ---------------------------------------------------------------------------------
 (2) _parallelo                                            2     2      0  132737
                                            117 BANK0      2     2      0
                           ___awtofl
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___fltol
                                _abs
                               _asin
                           _can_send
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _can_send                                             0     0      0    6155
                       _CANisTxReady
                     _CANsendMessage
 ---------------------------------------------------------------------------------
 (4) _CANsendMessage                                      16     8      8    6131
                                             23 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (4) _CANisTxReady                                         1     1      0      24
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     194
                                             23 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    2871
                                             33 BANK0      5     1      4
                           ___flpack
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (2) _matematica                                          32    32      0  174968
                                             57 BANK1     28    28      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                               _asin
                                _cos
 ---------------------------------------------------------------------------------
 (3) _cos                                                 12     8      4   69437
                                             49 BANK1      8     4      4
                            ___fladd
                             ___flge
                               _asin (ARG)
                                _sin
 ---------------------------------------------------------------------------------
 (4) _sin                                                 17    13      4   60313
                                            113 BANK0      4     0      4
                                              0 BANK1     13    13      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   13154
                                             95 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                8     2      6     452
                                             23 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     722
                                             79 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2794
                                             89 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (3) _asin                                                40    36      4   83814
                                             21 BANK1     28    24      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                               _atan
                               _fabs
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _sqrt                                                25    21      4   17317
                                            113 BANK0      4     0      4
                                              0 BANK1     21    21      0
                             ___flge
                            ___flmul
                            ___flneg (ARG)
                            ___flsub
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    7829
                                            105 BANK0      8     0      8
                            ___fladd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (4) _atan                                                21    17      4   40827
                                             95 BANK0     21    17      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (4) _fabs                                                 4     0      4    1621
                                             79 BANK0      4     0      4
                            ___flneg
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4    1297
                                             75 BANK0      4     0      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   15525
                                             75 BANK0     16     8      8
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             15     7      8    7190
                                             48 BANK0     15     7      8
                            ___fldiv (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             12     4      8    7157
                                             63 BANK0     12     4      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8    1584
                                             83 BANK0     12     4      8
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             15     7      8    5733
                                             33 BANK0     15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0     715
                                             31 BANK0      2     2      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2     669
                                             29 BANK0      2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     289
                                             23 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2692
                                             33 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (6) ___flpack                                            10     4      6    2584
                                             23 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (1) _configurations                                       0     0      0    5934
                      _CANInitialize
 ---------------------------------------------------------------------------------
 (2) _CANInitialize                                       12     7      5    5934
                                             37 BANK0     12     7      5
                   _CANOperationMode
                       _CANSetFilter
                         _CANSetMask
 ---------------------------------------------------------------------------------
 (3) _CANSetMask                                          14     9      5    1286
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANSetFilter                                        14     9      5    3858
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANOperationMode                                     1     1      0      44
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR_Bassa                                           25    25      0    3775
                                             16 COMRAM    25    25      0
                  _CANreceiveMessage
                   i1_CANsendMessage
                         i1_delay_ms
 ---------------------------------------------------------------------------------
 (9) i1_delay_ms                                           2     0      2     257
                                              6 COMRAM     2     0      2
                           i1___wmul
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) i1_CANsendMessage                                    16     8      8    2243
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (9) _CANreceiveMessage                                   12    10      2    1137
                                              0 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Alta                                           16    16      0     395
                                              7 BANK0     16    16      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (12) ___lwdiv                                             7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CANisTxReady
   _CANsendMessage
   _configurations
     _CANInitialize
       _CANOperationMode
       _CANSetFilter
       _CANSetMask
   _delay_ms
     ___wmul
   _park_routine
     _CANisTxReady
     _CANsendMessage
     ___fladd
       ___fldiv (ARG)
         ___flpack
       ___flmul (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___flpack (ARG)
     ___flneg
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flmul (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___flneg (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
     ___lwtofl
       ___flpack
     _can_send
       _CANisTxReady
       _CANsendMessage
     _delay_ms
       ___wmul
     _delay_s
       _delay_ms
         ___wmul
     _matematica
       ___fladd
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv
         ___flpack
       ___flmul
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___flneg
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv
           ___flpack
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
       _cos
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _asin (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _atan
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv
               ___flpack
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___flmul
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
             _eval_poly
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
             _fabs
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
           _sqrt
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___flmul
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flneg (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
             ___flsub (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               _floor (ARG)
                 ___altofl
                   ___flpack
                   ___fltol (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___flneg (ARG)
                       ___fladd (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                         ___flpack (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                 ___fladd
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flge
                   _fabs (ARG)
                     ___flneg
                       ___fladd (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                         ___flpack (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                 _frexp
         _sin (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
             _frexp
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv
         ___flpack
       ___flge
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
       ___flmul
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv
           ___flpack
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
             _frexp
   _park_search
     _CANisTxReady
     _CANsendMessage
     ___awtofl
       ___flpack
       _abs (ARG)
     _abs
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv
         ___flpack
       ___flge
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
       ___flmul
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv
           ___flpack
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
             _frexp

 _ISR_Bassa (ROOT)
   _CANreceiveMessage
   i1_CANsendMessage
   i1_delay_ms
     i1___wmul

 _ISR_Alta (ROOT)
   ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     63      F8       7       96.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     77      88       5       85.0%
BITCOMRAM           5F      0       2       0        2.1%
COMRAM              5F     29      54       1       88.4%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D4      20        0.0%
DATA                 0      0     1D4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Jun 05 21:33:39 2016

               ___altofl@sign 00BD                             _n 0130                             _x 00DB  
                           _z 00DF                  ___fldiv@cntr 008D          __end_of_CANSetFilter 187C  
                ___fldiv@sign 008F            delay_s@repeat_loop 0080                            bsr 000FE0  
         ___wmul@multiplicand 0079                   __CFG_BORV$3 000000              i1___wmul@product 0005  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000                  ___flpack@arg 0077  
                ___flpack@exp 007B                    _MUX_select 003A                           l400 1F64  
                         l401 1F68                           l402 1F74                           l500 15DC  
                         l501 15E0                           l510 16F0                           l502 15EC  
                         l430 3804                           l511 16FC                           l431 3808  
                         l520 180C                           l512 1700                           l432 3814  
                         l521 1810                           l513 170C                           l505 16CC  
                         l441 3920                           l433 3818                           l361 1B06  
                         l522 181C                           l506 16D0                           l442 3924  
                         l434 3824                           l362 1892                           l523 1820  
                         l507 16DC                           l443 3930                           l435 3828  
                         l371 1A50                           l363 1896                           l524 182C  
                         l516 17EC                           l508 16E0                           l444 3934  
                         l436 3834                           l356 49FA                           l380 1BA8  
                         l372 1A54                           l364 1990                           l517 17F0  
                         l509 16EC                           l461 124E                           l445 3940  
                         l437 3838                           l357 4A04                           l381 1BB2  
                         l373 1A60                           l365 191E                           l518 17FC  
                         l462 1252                           l446 3944                           l438 3844  
                         l382 1BBC                           l366 1928                           l519 1800  
                         l463 125E                           l447 3950                           l391 1DA6  
                         l383 1BC6                           l367 1932                           l480 13AC  
                         l472 136C                           l464 1262                           l448 3954  
                         l392 1DAA                           l376 1D90                           l368 193C  
                         l473 1370                           l465 126E                           l449 3960  
                         l393 1EA4                           l377 1B1C                           l490 14C0  
                         l474 137C                           l466 1272                           l554 5DFE  
                         l394 1E32                           l386 1CDA                           l378 1B20  
                         l491 14CC                           l483 148C                           l475 1380  
                         l467 127E                           l395 1E3C                           l387 1CDE  
                         l379 1C1A                           l484 1490                           l476 138C  
                         l468 1282                           l396 1E46                           l388 1CEA  
                         l804 350E                           l485 149C                           l477 1390  
                         l469 128E                           l901 5DAE                           l397 1E50  
                         l494 15AC                           l486 14A0                           l478 139C  
                         l495 15B0                           l487 14AC                           l479 13A0  
                         l567 5CAE                           l496 15BC                           l488 14B0  
                         l497 15C0                           l489 14BC                           l498 15CC  
                         l746 4CC0                           l499 15D0                           l843 4488  
                         l748 4B70                           l782 322C                           l759 4CBA  
                         l792 33D0                           l779 31EE                           l788 325E  
                         l798 3476                  __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000  
                  _MUX_toggle 0288                    i1_delay_ms 5CF4                           _abs 5D8C  
                         _asd 028A                           _dir 028C                           _cos 5748  
                         _msg 0146                           _sin 3CD4                           prod 000FF3  
                         wreg 000FE8               ?_configurations 0001                  ___flmul@cntr 009D  
                ___flmul@sign 009E                  __CFG_LVP$OFF 000000                 ___flpack@sign 007C  
                ___fltol@exp1 00B8                  __CFG_WDT$OFF 000000                          l1131 4DD4  
                        l1027 4578                          ?_abs 0077                          l1132 4DEC  
                        l1124 4D72                          l1152 4030                          l1144 5C34  
                        l1156 406E                          l1158 409C                          l1167 4188  
                        l1192 56F6                          l1473 475E                          l5010 49F2  
                        l1474 474A                          l1466 3EAE                          l1467 3FDE  
                        l5012 4A08                          l5004 499C                          l4300 1E5C  
                        l5030 5D7E                          l1486 51F8                          l5016 4A10  
                        l4320 1F58                          l4224 1BD2                          l5018 4A54  
                        l6002 4E3A                          l5026 5D6A                          l4250 1CF0  
                        l4244 1CCE                          l4148 1948                          ?_cos 01BE  
                        l6030 4080                          l6110 4EEA                          l6014 5B8A  
                        l4326 1F7A                          l4174 1A66                          l4520 384A  
                        l6024 4042                          l6120 4F32                          l4168 1A44  
                        l6050 4106                          l6122 4F3A                          l6114 4F12  
                        l4460 5E10                          l4700 12DC                          l4612 0F88  
                        l6140 56A4                          l6052 4118                          l6044 40D4  
                        l6036 4092                          l6132 4F82                          l4630 1044  
                        l4526 3892                          l6230 4FFE                          l6062 4166  
                        l6054 4128                          l6126 4F62                          l4552 3966  
                        l6224 4FD8                          l6072 41D8                          l6064 4178  
                        l6056 4134                          l6208 5930                          l4802 163A  
                        l6250 50A4                          l6242 504E                          l6146 5742  
                        l6082 422C                          l6154 5C6E                          l6402 3A0E  
                        l6068 41B0                          l6092 4E74                          l6332 48FE  
                        l6180 52A0                          l6164 5230                          l4900 54D6  
                        l4830 1712                          l4734 13FA                          l4494 3778  
                        l4478 36C0                          l6254 50B8                          l6342 4504  
                        l6262 5B2C                          l6318 47E0                          l6190 52D2  
                        l4728 13B2                          l4648 1100                          l4576 0E12  
                        l6416 3B4C                          l6192 52E4                          l6184 52B4  
                        l4904 5512                          l4762 14D2                          l4666 11BC  
                        l4594 0ECC                          l6098 4E9A                          l6274 537A  
                        l6354 46CE                          l6194 52F2                          l6370 3D0C  
                        l4836 175A                          l6276 5420                          l6428 3C2E  
                        l6292 513C                          l6444 57D0                          l6700 34D0  
                        l6604 31AA                          l4694 1294                          l6358 46E6  
                        l6198 5310                          l6382 3E38                          l4864 1832  
                        l4768 151A                          l4872 5CA0                          l6296 515E  
                        l6288 5128                          l6456 5BD8                          l6480 4448  
                        l6720 356A                          l6608 31E4                          l6560 4C18  
                        l6536 4B1E                          l6544 4B6C                          l6528 4B06  
                        l6800 558C                          l6482 4450                          l6722 357A  
                        l6802 559C                          l4796 15F2                          l4884 5446  
                        l6732 35AA                          l6628 3254                          l6556 4BDE  
                        l6548 4BBE                          l4894 5496                          l6806 55D8  
                        l6488 44AA                          l6690 3438                          l6666 3392  
                        l6738 35F4                          l6594 3186                          l6578 4C7C  
                        l5980 4D02                          l4998 498C                          l5990 4DB2  
                        l5982 4D14                          l5992 4DC4                          l5984 4D54  
                        l5976 4CEC                          ?_sin 00D1                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          u5110 0E46  
                        u5040 3986                          u4320 1968                          u4330 19B4  
                        u5115 0E3A                          u5205 101E                          u5125 0EA6  
                        u5045 397A                          u4325 195C                          u5230 107A  
                        u5150 0F02                          u5070 0D8C                          u4335 19A8  
                        u4345 1A14                          u4450 1BF2                          u5235 106E  
                        u5155 0EF6                          u5075 0D80                          u4460 1C3E  
                        u5245 10DA                          u5165 0F62                          u5085 0DEC  
                        u4605 1F28                          u5270 1136                          u5190 0FBE  
                        u4455 1BE6                          u5600 1612                          u5520 14F2  
                        u5440 13D2                          u5360 12B4                          u8000 3E30  
                        u4465 1C32                          u8010 3E32                          u5275 112A  
                        u5195 0FB2                          u4475 1C9E                          u4580 1E7C  
                        u5605 1606                          u5525 14E6                          u5445 13C6  
                        u5365 12A8                          u5285 1196                          u8101 42DC  
                        u4830 363A                          u4590 1EC8                          u8111 42E8  
                        u4585 1E70                          u4835 362E                          u4595 1EBC  
                        u4845 369A                          u4870 36F2                          u5760 1852  
                        u5680 1732                          u4960 386A                          u8240 4C2C  
                        u8160 4B16                          u4875 36E6                          u8155 44A2  
                        u8156 44A4                          u5765 1846                          u5685 1726  
                        u4965 385E                          u4885 3752                          u7720 5250  
                        u8460 3546                          u7725 5244                          u7930 4534  
                        u7940 4536                          u7790 5962                          u7880 514C  
                        u8587 5CA2                          u7798 5966      __end_ofi1_CANsendMessage 26C0  
         __size_of_CANSetMask 03AA                          _Pmin 0120                          abs@a 0077  
                        _alfa 0124                          _fabs 5C08                          _data 0155  
                        _beta 0128                          _atan 44B8                          _asin 39B0  
                        _main 554E                          cos@f 01BE                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr0l 000FE9                          fsr2h 000FDA  
                        indf1 000FE7                          fsr1l 000FE1                          indf2 000FDF  
                        fsr2l 000FD9                          _sqrt 470E                          pclat 000FFA  
                        sin@f 00D1                          sin@y 018D                          prodh 000FF4  
                        prodl 000FF3                          start 0348                 __CFG_IESO$OFF 000000  
              delay_s@value_s 007F           ISR_Bassa@PORTA_temp 0028                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000              _CANOperationMode 5E06                         ??_abs 0079  
                       ??_cos 00D5                         ??_sin 00D5    __size_of_CANreceiveMessage 052E  
                       ?_fabs 00AF                 ___fltol@sign1 00B7                         ?_atan 00BF  
                       ?_asin 01A2               __end_of___fladd 425C                         ?_main 0001  
             __end_of___fldiv 50E8               __end_of___flneg 5C82               __end_of___flmul 4FB2  
             __end_of___flsub 5B64               __end_of___fltol 5324                         ?_sqrt 00D1  
                       _T0CON 000FD5                         _T3CON 000FB1            __size_of_ISR_Bassa 0330  
             __end_of___lwdiv 5A20                         i1l400 2618                         i1l401 261C  
                       i1l402 2626                         i1l408 2EF6                         i1l361 2252  
                       i1l362 2030                         i1l371 21AC                         i1l363 2034  
                       i1l380 22D8                         i1l372 21B0                         i1l364 2106  
                       i1l381 22E0                         i1l373 21BA                         i1l365 20A2  
                       i1l382 22E8                         i1l366 20AA                         i1l710 00E4  
                       i1l391 249C                         i1l383 22F0                         i1l367 20B2  
                       i1l392 24A0                         i1l376 2488                         i1l368 20BA  
                       i1l704 008A                         i1l393 2572                         i1l377 2266  
                       i1l394 250E                         i1l386 23E2                         i1l378 226A  
                       i1l395 2516                         i1l387 23E6                         i1l379 233C  
                       i1l731 0302                         i1l396 251E                         i1l388 23F0  
                       i1l708 00CA                         i1l397 2526                         i1l725 028C  
                       i1l718 0192                         i1l567 5D1E                         i1l728 02FC  
                       i2l698 586C                         _TMR0H 000FD7                         _TMR0L 000FD6  
                       _TMR3H 000FB3                         _TMR3L 000FB2                         _PORTA 000F80  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
          __end_ofsin@coeff_a 0D41            __end_ofsin@coeff_b 0D51                 __CFG_PWRT$OFF 000000  
            __end_of_ISR_Alta 590A               __end_of_delay_s 5D8C                 __CFG_WRT0$OFF 000000  
                       _J_var 0118                 __CFG_WRT1$OFF 000000                         _K_var 011C  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000            CANInitialize@flags 0089  
              __CFG_EBTR2$OFF 000000                 ___awtofl@sign 0085                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         _bordo 012C                         fabs@d 00AF  
                       _first 0291                         _floor 50E8                         _frexp 590A  
                       _errno 0140                         atan@f 00BF                         atan@x 00C7  
                       atan@y 00C3                         asin@x 01A2                         asin@y 01B6  
              __pbitbssCOMRAM 0288                         sin@x2 0195                         tablat 000FF5  
        __end_of_CANisTxReady 5E06              __end_ofi1___wmul 5DE0                         plusw2 000FDB  
                       sqrt@i 0199                         sqrt@q 019A                         sqrt@x 019E  
                       sqrt@y 00D1                         sqrt@z 0195                         status 000FD8  
         i1___wmul@multiplier 0001                  ?_park_search 0001               __initialization 5A20  
                __end_of_fabs 5C46                  __end_of_atan 470E                  __end_of_asin 3CD4  
                __end_of_main 5650                  __end_of_sqrt 4936                        ??_fabs 00B3  
                      ??_atan 00C3                        ??_asin 00D5                        ??_main 01EC  
           _park_routine$3666 01E4             _park_routine$3667 01E8                        ??_sqrt 018D  
               __activetblptr 000003                   ?i1_delay_ms 0007             _CANisTxReady$2841 0077  
                      _ADCON1 000FC1                        ?_floor 00BF                        ?_frexp 0077  
            __end_of___altofl 5BBC                        _CANCON 000F6F              __end_of___flpack 4E4E  
          _distance_received1 028F              __end_of___awtofl 5C08               __CFG_BBSIZ$1024 000000  
               _avvicinamento 028B                        i1l5110 2C56                        i1l5210 3056  
                      i1l5114 2C5E                        i1l5230 3120                        i1l5222 30E4  
                      i1l5160 2E5C                        i1l5234 313E                        i1l5226 3102  
                      i1l5218 30C6                        i1l5236 3172                        i1l5172 2EBC  
                      i1l5164 2E7C                        i1l5156 2E3C                        i1l5148 2DCA  
                      i1l5174 2EF0                        i1l5168 2E9C                        i2l1426 5A16  
                      i1l5710 2530                        i1l5800 00BC                        i1l5730 260E  
                      i1l5634 22FA                        i1l5660 23F6                        i1l5900 02CC  
                      i1l5804 00D0                        i1l5654 23D8                        i1l5558 20C4  
                      i1l5814 0114                        i1l5736 262C                        i1l5584 21C0  
                      i1l5904 02D4                        i1l5832 0186                        i1l5824 0156  
                      i1l5578 21A2                        i1l5860 01C8                        i1l5758 5D10  
                      i1l5870 01F6                        i1l5864 01D0                        i1l5892 0298  
                      i1l5886 0268                        i1l5896 02B2                        i2l6750 59BC  
                      i2l6752 59CA                        i2l6762 5A06                        i2l6754 59D4  
                      i2l6782 58CE              __end_of___lwtofl 5D5E                        _RXB0D0 000F66  
                      _RXB0D1 000F67                        _RXB0D2 000F68                        _RXB0D3 000F69  
                      _RXB0D4 000F6A                        _RXB1D0 000F56                        _RXB0D5 000F6B  
                      _RXB1D1 000F57                        _RXB0D6 000F6C                        _RXB1D2 000F58  
                      _RXB0D7 000F6D                        _RXB1D3 000F59                        _RXB1D4 000F5A  
                      _RXB1D5 000F5B                        _RXB1D6 000F5C                        _RXB1D7 000F5D  
                      _TXB0D0 000F46                        _TXB0D1 000F47                        _TXB0D2 000F48  
                      _TXB0D3 000F49                        _TXB1D0 000F36                        _TXB0D4 000F4A  
                      _TXB1D1 000F37                        _TXB0D5 000F4B                        _TXB1D2 000F38  
                      _TXB0D6 000F4C                        _TXB1D3 000F39                        _TXB0D7 000F4D  
                      _TXB2D0 000F26                        _TXB1D4 000F3A                        _TXB2D1 000F27  
                      _TXB1D5 000F3B                        _TXB2D2 000F28                        _TXB1D6 000F3C  
                      _TXB2D3 000F29                        _TXB1D7 000F3D                        _TXB2D4 000F2A  
                      _TXB2D5 000F2B                        _TXB2D6 000F2C                        _TXB2D7 000F2D  
          CANsendMessage@data 007B              __end_of_can_send 554E            CANsendMessage@tamp 0083  
           __end_of_ISR_Bassa 0348              __end_of_delay_ms 5CBC         __size_of_CANSetFilter 0B2A  
              __CFG_XINST$OFF 000000                        ___flge 5650               _data_correction 0165  
                   ??___fladd 00A7                        ___wmul 5CBC                     ??___fldiv 0089  
                   ??___flneg 00AF                __CFG_STVREN$ON 000000                     ??___flmul 0098  
                   ??___flsub 00D1                     ??___fltol 00B3                     ??___lwdiv 0064  
                ??_CANSetMask 007C                        _raggio 01F4                        clear_0 5A26  
                      clear_1 5A32                        clear_2 5A42                     ??_delay_s 007F  
                      floor@i 00C3                        floor@x 00BF               __CFG_BOREN$BOHW 000000  
                __pdataCOMRAM 0053                        sin@sgn 0199                  __mediumconst 0000  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
             ISR_Bassa@F16869 0053                        sqrt@og 0191                  _CANSetFilter 0D52  
                  ___fladd@f1 009F                    ___fladd@f2 00A3                    ___flge@ff1 00B3  
                  ___flge@ff2 00B7                    ___altofl@c 00B9                    ___fldiv@f1 0081  
                  ___fldiv@f2 0085                    ___fldiv@f3 0089                    __accesstop 0060  
     __end_of__initialization 5A92            __end_of_CANSetMask 39B0               __CFG_PBADEN$OFF 000000  
                  ___flneg@f1 00AB                 ?_park_routine 0001                    ___flmul@f1 0090  
                  ___flmul@f2 0094                  eval_poly@res 00B7                 ___rparam_used 000000  
                  ___flsub@f1 00C9                    ___flsub@f2 00CD                    ___fltol@f1 00AF  
                  ___awtofl@c 0081           __size_ofi1_delay_ms 0038                __pcstackCOMRAM 0001  
                   ?_ISR_Alta 0001                  __pidataBANK0 5E28                  __pidataBANK1 5E1E  
               __end_of_floor 520A                 __end_of_frexp 599E              ??_configurations 0091  
                  ___lwtofl@c 0081                     ?i1___wmul 0001         CANSetFilter@numBuffer 0080  
                _actual_speed 013C         __size_of_CANisTxReady 0026                       ??_floor 00C3  
                     ??_frexp 007D      __end_of_CANOperationMode 5E1E                    __pbssBANK0 00D7  
                  __pbssBANK1 0100               _sensor_distance 002A            __size_of_eval_poly 011A  
           ?i1_CANsendMessage 0001                    _data_brake 015D                ??_park_routine 01E2  
     __size_of_CANsendMessage 07A0                    _data_speed 016D                    _activation 0289  
          ??i1_CANsendMessage 0009            __size_of_parallelo 025C          __size_of_park_search 01CA  
           _old_alignment_gap 0134                    ??_ISR_Alta 0067                       ?___flge 00B3  
                     ?___wmul 0077                     ?___altofl 00B9                     ?___flpack 0077  
                     _CANSTAT 000F6E                     ?___awtofl 0081                  _CANisTxReady 5DE0  
                     _BRGCON1 000F70                       _BRGCON2 000F71                       _BRGCON3 000F72  
                  ??i1___wmul 0005                     ?___lwtofl 0081                     ?_can_send 0001  
      __size_of_CANInitialize 01CE                     ?_delay_ms 007D                       _RXB0DLC 000F65  
                     _RXB1DLC 000F55                       _RXB0CON 000F60                       _RXB1CON 000F50  
                     _TXB0DLC 000F45                       _TXB1DLC 000F35                       _TXB2DLC 000F25  
         CANsendMessage@flags 007E                       __Hparam 0000                    _left_speed 0142  
                     __Lparam 0000              delay_ms@value_ms 007D               __size_of___flge 00F8  
                  _matematica 26C0                       ___fladd 3FF0                       ___fldiv 4FB2  
                     ___flneg 5C46                       ___flmul 4E4E                       ___flsub 5B04  
                     ___fltol 520A               __size_of___wmul 0038                       ___lwdiv 599E  
                __psmallconst 0D00                    ??___altofl 00BD                    ??___flpack 007D  
        CANInitialize@propSeg 008E                       __pcinit 5A20                    ??___awtofl 0085  
           __end_of_eval_poly 543E                       _delay_s 5D5E                       __ramtop 0D00  
                     __ptext0 554E                       __ptext1 4B04                       __ptext2 3178  
                     __ptext3 425C                       __ptext4 543E                       __ptext5 187C  
                     __ptext6 5DE0                       __ptext7 5D8C                       __ptext8 5BBC  
                     __ptext9 26C0                    ??___lwtofl 0085                     _T0CONbits 000FD5  
                ??i1_delay_ms 0009                       _counter 004F                    ??_can_send 0087  
                __size_of_abs 002C                  __size_of_cos 00E6               atan@val_squared 00CC  
                __size_of_sin 031C                       atan@val 00D0             __end_of_parallelo 44B8  
                  ??_delay_ms 007F                       asin@sgn 01A6        CANreceiveMessage@error 000B  
             _start_operation 0296                __pintcode_body 582E          end_of_initialization 5A92  
                     int_func 582E                 _CANInitialize 4936            __end_ofi1_delay_ms 5D2C  
                   _ISR_Bassa 0018                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE         i1___wmul@multiplicand 0003  
     _steering_correction_dir 0297                     _PORTBbits 000F81                CANSetMask@mask 0077  
              CANSetMask@tamp 0081                  _distance_set 0108                CANSetMask@type 007B  
        __end_of_park_routine 3606                     _TRISBbits 000F93                   ___fldiv@exp 008E  
                   _MUX_index 004C                    _pulse_time 0048       _clock_counter_reference 00E3  
                 ___flmul@exp 0098                _CANsendMessage 187C              CANInitialize@BRP 0088  
            CANInitialize@SJW 0087                ?_CANInitialize 0085                    ?_ISR_Bassa 0001  
                 ?_matematica 0001                __end_of___flge 5748             __size_of_ISR_Alta 5902  
              __end_of___wmul 5CF4                 __pidataCOMRAM 5E26                    floor@expon 00C7  
         start_initialization 5A20             __size_ofi1___wmul 0028                    eval_poly@d 00AF  
                  eval_poly@n 00B1                    eval_poly@x 00AB                   __end_of_abs 5DB8  
                 __end_of_cos 582E                   __end_of_sin 3FF0           CANSetMask@numBuffer 0080  
               _data_speed_rx 0100        __end_of_CANsendMessage 201C             ?_CANOperationMode 0001  
               _data_steering 0175            i1delay_ms@value_ms 0007                    frexp@value 0077  
          ??_CANOperationMode 0077             _distance_received 028E    CANInitialize@FilterConfig1 008F  
  CANInitialize@FilterConfig2 0090           _steering_correction 0050                      ??___flge 00BB  
ISR_Bassa@MUX_index_collision 0026                      ??___wmul 007B                   __pdataBANK0 00E7  
                 __pdataBANK1 01F0              __CFG_LPT1OSC$OFF 000000     __size_ofi1_CANsendMessage 06A4  
           __size_of___altofl 0058             __size_of___flpack 0180        CANInitialize@phaseSeg1 0085  
      CANInitialize@phaseSeg2 0086             __size_of___awtofl 004C                   __pbssCOMRAM 002A  
           __size_of___lwtofl 0032                 __pcstackBANK0 0060                 __pcstackBANK1 018D  
                 _BRGCON2bits 000F71                   _BRGCON3bits 000F72             __size_of_can_send 0110  
           __size_of_delay_ms 003A               ?_CANsendMessage 0077           __size_of_matematica 058A  
             ??_CANInitialize 008A                     _asin$3675 01AA                     _asin$3676 01BA  
                   _asin$3677 01B2                     _asin$3678 01AE                    sin@coeff_a 0D2D  
                  sin@coeff_b 0D41                 ??_park_search 01BE                 _alignment_gap 00D7  
          CANSetFilter@filter 0077                     _data_test 017D              ___lwdiv@dividend 0060  
                  ISR_Bassa@i 0029                   ??_ISR_Bassa 0011                     __pintcode 0008  
                    ?___fladd 009F                      ?___fldiv 0081                      ?___flneg 00AB  
                    ?___flmul 0090                      ?___flsub 00C9                      ?___fltol 00AF  
       __size_of_park_routine 048E                      ?___lwdiv 0060                   __pintcodelo 0018  
                    ?_delay_s 0001                   __smallconst 0D00                   _COMSTATbits 000F74  
                   _eval_poly 5324                     _larghezza 01F0              ___lwdiv@quotient 0065  
              __size_of_floor 0122                __size_of_frexp 0094       __size_of_configurations 006C  
                   _parallelo 425C                  _new_distance 0292         CANreceiveMessage@tamp 000C  
              _prima_sterzata 0138                ___wmul@product 007B                      _LATBbits 000F8A  
                   atan@recip 00CB                  _park_routine 3178  _delay_quartz_frequency_value 00E7  
                    _IPR3bits 000FA5                      _PIE3bits 000FA3                      i1u604_20 2D0A  
                    i1u700_25 25E0                      i1u604_26 2D0C                      i1u605_20 2D38  
                    i1u613_25 2EC8                      i1u605_26 2D3A                      i1u615_20 2F9E  
                    i1u607_25 2D4E                      i1u615_26 2FA0                      i1u616_20 2FC8  
                    i1u720_20 0170                      i1u624_25 314A                      i1u616_26 2FCA  
                    i1u618_25 2FDC                      i1u719_20 016E                      i1u672_20 20E2  
                    i1u672_25 20D8                      i1u673_20 2128                      i1u673_25 211E  
                    i1u674_25 2174                      i1u860_27 5D12                      i1u685_20 2318  
                    i1u685_25 230E                      _PIR3bits 000FA4                      i1u686_20 235E  
                    i1u686_25 2354                      i1u687_25 23AA                      i1u698_20 254E  
                    i1u698_25 2544                      i1u699_20 2594                      i1u699_25 258A  
                    i1u859_27 01B4                      _RXB0EIDH 000F63                      _RXB0EIDL 000F64  
                    _RXB1EIDH 000F53                      _RXB1EIDL 000F54                      _ISR_Alta 0008  
                   _set_speed 00E5                      _RCONbits 000FD0              __CFG_WDTPS$32768 000000  
                    _RXB0SIDH 000F61                      _RXB0SIDL 000F62                      _RXF0EIDH 000F02  
                    _RXB1SIDH 000F51                      _RXF0EIDL 000F03                      _RXB1SIDL 000F52  
                    _RXF1EIDH 000F06                      _RXF1EIDL 000F07                      _RXF2EIDH 000F0A  
                    _RXF2EIDL 000F0B                      _RXF3EIDH 000F0E                      _RXF3EIDL 000F0F  
                    _RXF4EIDH 000F12                      _RXF4EIDL 000F13                      _RXF5EIDH 000F16  
                    _RXF5EIDL 000F17                      _RXF0SIDH 000F00                      _RXF0SIDL 000F01  
         __end_of_park_search 4CCE                      _TXB0EIDH 000F43                      _RXF1SIDH 000F04  
                    _TXB0EIDL 000F44                      _RXF1SIDL 000F05                      _TXB1EIDH 000F33  
                    _RXF2SIDH 000F08                      _TXB1EIDL 000F34                      _RXF2SIDL 000F09  
                    _TXB2EIDH 000F23                      _RXF3SIDH 000F0C                      _TXB2EIDL 000F24  
                    _RXF3SIDL 000F0D                      _RXF4SIDH 000F10                      _RXF4SIDL 000F11  
                    _RXF5SIDH 000F14                      _RXF5SIDL 000F15                      _RXM0EIDH 000F1A  
                    _RXM0EIDL 000F1B                      _TXB0SIDH 000F41                      _RXM1EIDH 000F1E  
                    _TXB0SIDL 000F42                      _RXM1EIDL 000F1F                      _TXB1SIDH 000F31  
                    _TXB1SIDL 000F32                      _TXB2SIDH 000F21                      _TXB2SIDL 000F22  
                    _RXM0SIDH 000F18                      _RXM0SIDL 000F19                      _RXM1SIDH 000F1C  
                    _RXM1SIDL 000F1D                   _distance_dx 0044                   _distance_sx 0046  
                    _RXERRCNT 000F75                      _TXERRCNT 000F76             ___wmul@multiplier 0077  
                    i1___wmul 5DB8                    ?_eval_poly 00AB           __end_ofatan@coeff_a 0D19  
         __end_ofatan@coeff_b 0D2D                 ?_CANSetFilter 0077                   _INTCON2bits 000FF1  
                   copy_data0 5A5C                    _CANCONbits 000F6F                    ?_parallelo 0001  
            _distance_average 013E                     frexp@eptr 007B                      __Hparam0 0000  
                    __Lparam0 0000                  _RXB0SIDLbits 000F62                  _RXB1SIDLbits 000F52  
                ??_matematica 00D5                 _request_sent1 0295              __size_of___fladd 026C  
                  _CANSetMask 3606              __size_of___fldiv 0136              __size_of___flneg 003C  
            __size_of___flmul 0164              __size_of___flsub 0060              __size_of___fltol 011A  
                    ___altofl 5B64              i1_CANsendMessage 201C                      ___flpack 4CCE  
                    _cos$3679 01C2              __size_of___lwdiv 0082                      ___awtofl 5BBC  
            __size_of_delay_s 002E                      ___lwtofl 5D2C                      _can_send 543E  
                _RXF0SIDLbits 000F01                      _delay_ms 5C82               ___lwdiv@divisor 0062  
                _RXF1SIDLbits 000F05               ___lwdiv@counter 0064         i1CANsendMessage@flags 0008  
              ??_CANSetFilter 007C                      __ptext10 5748                      __ptext11 3CD4  
                    __ptext20 5C08                      __ptext12 50E8                      __ptext21 5C46  
                    __ptext13 590A                      __ptext30 5D2C                      __ptext22 5324  
                    __ptext14 520A                      __ptext31 4CCE                      __ptext23 4E4E  
                    __ptext15 5B64                      __ptext40 201C                      __ptext32 5A98  
                    __ptext24 3FF0                      __ptext16 39B0                      __ptext41 2C4A  
                    __ptext33 4936                      __ptext25 5650                      __ptext17 470E  
                    __ptext34 3606                      __ptext26 4FB2                      __ptext18 5B04  
                    __ptext43 599E                      __ptext35 0D52                      __ptext27 5D5E  
                    __ptext19 44B8                      __ptext36 5E06                      __ptext28 5C82  
                    __ptext29 5CBC                      __ptext38 5CF4                      __ptext39 5DB8  
                _RXF2SIDLbits 000F09                      _sin$3680 0191                  _RXF3SIDLbits 000F0D  
                    _distance 0042            __end_of_matematica 2C4A                  _RXF4SIDLbits 000F11  
                _RXF5SIDLbits 000F15      CANsendMessage@dataLength 007D                 __size_of_fabs 003E  
               __size_of_atan 0256                 __size_of_asin 0324                 __size_of_main 0102  
               __size_of_sqrt 0228                   _park_search 4B04          CANreceiveMessage@msg 0001  
                _TXB0SIDLbits 000F42                  _TXB1SIDLbits 000F32                  _TXB2SIDLbits 000F22  
   __size_of_CANOperationMode 0018                 ?_CANisTxReady 0001                   atan@coeff_a 0D01  
                 atan@coeff_b 0D19                   _RXB0DLCbits 000F65         ___flmul@f3_as_product 0099  
                 _RXB1DLCbits 000F55                  _RXM0SIDLbits 000F19                   _RXB0CONbits 000F60  
                 _RXB1CONbits 000F50             _CANreceiveMessage 2C4A                  _RXM1SIDLbits 000F1D  
                  _INTCONbits 000FF2                   ??_eval_poly 00B3              ??_CANsendMessage 007F  
  i1CANsendMessage@dataLength 0007            ?_CANreceiveMessage 0001                  _request_sent 0294  
              _configurations 5A98      CANsendMessage@identifier 0077                   ??_parallelo 00D5  
                    intlevel1 0000                      intlevel2 0000              CANSetFilter@tamp 0081  
            CANSetFilter@type 007B           ??_CANreceiveMessage 0003          i1CANsendMessage@data 0005  
        i1CANsendMessage@tamp 000D                   _TXB0DLCbits 000F45                   _right_speed 0144  
                 _TXB1DLCbits 000F35                   _TXB0CONbits 000F40                   _TXB2DLCbits 000F25  
                 _TXB1CONbits 000F30                   _TXB2CONbits 000F20          CANOperationMode@mode 0077  
                 ?_CANSetMask 0077                ??_CANisTxReady 0077                _distance_error 028D  
             _matematica$3670 01CE               _matematica$3671 01D2               _matematica$3672 01DE  
             _matematica$3673 01D6               _matematica$3674 01DA               _matematica$3668 01C6  
             _matematica$3669 01CA     __end_of_CANreceiveMessage 3178    i1CANsendMessage@identifier 0001  
                 _timerValue2 004A                    _TMR3H_temp 004D        __end_of_configurations 5B04  
                  _TMR3L_temp 004E                 _distance_wait 0290            _old_dir_correction 0293  
                ___fladd@exp1 00AA                  ___fladd@exp2 00A9                  ___fladd@sign 00A8  
       __end_of_CANInitialize 4B04         _sensor_distance_short 0185           _sensor_distance_old 0110  
