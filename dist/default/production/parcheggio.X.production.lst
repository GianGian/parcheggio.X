

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Jun 07 20:38:56 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2685
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    66                           	psect	param0,global,class=BANK0,space=1,delta=1
    67  0000                     
    68                           	psect	idataCOMRAM
    69  005FE8                     __pidataCOMRAM:
    70                           	opt stack 0
    71                           
    72                           ;initializer for ISR_Bassa@F16865
    73  005FE8  03                 	db	3
    74  005FE9  06                 	db	6
    75                           
    76                           	psect	idataBANK0
    77  005FEA                     __pidataBANK0:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _delay_quartz_frequency_value
    81  005FEA  10                 	db	16
    82                           
    83                           	psect	smallconst
    84  000D00                     __psmallconst:
    85                           	opt stack 0
    86  000D00  00                 	db	0
    87  000D01                     atan@coeff_a:
    88                           	opt stack 0
    89  000D01  3C06               	dw	15366
    90  000D03  4204               	dw	16900
    91  000D05  9F7D               	dw	40829
    92  000D07  426A               	dw	17002
    93  000D09  905C               	dw	36956
    94  000D0B  4201               	dw	16897
    95  000D0D  4D60               	dw	19808
    96  000D0F  40BB               	dw	16571
    97  000D11  EC51               	dw	60497
    98  000D13  3E47               	dw	15943
    99  000D15  8DDE               	dw	36318
   100  000D17  BB1F               	dw	47903
   101  000D19                     __end_ofatan@coeff_a:
   102                           	opt stack 0
   103  000D19                     atan@coeff_b:
   104                           	opt stack 0
   105  000D19  3C06               	dw	15366
   106  000D1B  4204               	dw	16900
   107  000D1D  59C0               	dw	22976
   108  000D1F  428B               	dw	17035
   109  000D21  0474               	dw	1140
   110  000D23  4244               	dw	16964
   111  000D25  9BF9               	dw	39929
   112  000D27  414F               	dw	16719
   113  000D29  0000               	dw	0
   114  000D2B  3F80               	dw	16256
   115  000D2D                     __end_ofatan@coeff_b:
   116                           	opt stack 0
   117  000D2D                     sin@coeff_a:
   118                           	opt stack 0
   119  000D2D  F3EC               	dw	62444
   120  000D2F  484A               	dw	18506
   121  000D31  9535               	dw	38197
   122  000D33  C795               	dw	51093
   123  000D35  C117               	dw	49431
   124  000D37  45DC               	dw	17884
   125  000D39  DBFD               	dw	56317
   126  000D3B  C36D               	dw	50029
   127  000D3D  B372               	dw	45938
   128  000D3F  4033               	dw	16435
   129  000D41                     __end_ofsin@coeff_a:
   130                           	opt stack 0
   131  000D41                     sin@coeff_b:
   132                           	opt stack 0
   133  000D41  342B               	dw	13355
   134  000D43  4801               	dw	18433
   135  000D45  9D7F               	dw	40319
   136  000D47  45B0               	dw	17840
   137  000D49  FFE7               	dw	65511
   138  000D4B  42D9               	dw	17113
   139  000D4D  0000               	dw	0
   140  000D4F  3F80               	dw	16256
   141  000D51                     __end_ofsin@coeff_b:
   142                           	opt stack 0
   143  0000                     _RXB1CON	set	3920
   144  0000                     _RXB1CONbits	set	3920
   145  0000                     _RXB1D0	set	3926
   146  0000                     _RXB1D1	set	3927
   147  0000                     _RXB1D2	set	3928
   148  0000                     _RXB1D3	set	3929
   149  0000                     _RXB1D4	set	3930
   150  0000                     _RXB1D5	set	3931
   151  0000                     _RXB1D6	set	3932
   152  0000                     _RXB1D7	set	3933
   153  0000                     _RXB1DLC	set	3925
   154  0000                     _RXB1DLCbits	set	3925
   155  0000                     _RXB1EIDH	set	3923
   156  0000                     _RXB1EIDL	set	3924
   157  0000                     _RXB1SIDH	set	3921
   158  0000                     _RXB1SIDL	set	3922
   159  0000                     _RXB1SIDLbits	set	3922
   160  0000                     _RXF0EIDH	set	3842
   161  0000                     _RXF0EIDL	set	3843
   162  0000                     _RXF0SIDH	set	3840
   163  0000                     _RXF0SIDL	set	3841
   164  0000                     _RXF0SIDLbits	set	3841
   165  0000                     _RXF1EIDH	set	3846
   166  0000                     _RXF1EIDL	set	3847
   167  0000                     _RXF1SIDH	set	3844
   168  0000                     _RXF1SIDL	set	3845
   169  0000                     _RXF1SIDLbits	set	3845
   170  0000                     _RXF2EIDH	set	3850
   171  0000                     _RXF2EIDL	set	3851
   172  0000                     _RXF2SIDH	set	3848
   173  0000                     _RXF2SIDL	set	3849
   174  0000                     _RXF2SIDLbits	set	3849
   175  0000                     _RXF3EIDH	set	3854
   176  0000                     _RXF3EIDL	set	3855
   177  0000                     _RXF3SIDH	set	3852
   178  0000                     _RXF3SIDL	set	3853
   179  0000                     _RXF3SIDLbits	set	3853
   180  0000                     _RXF4EIDH	set	3858
   181  0000                     _RXF4EIDL	set	3859
   182  0000                     _RXF4SIDH	set	3856
   183  0000                     _RXF4SIDL	set	3857
   184  0000                     _RXF4SIDLbits	set	3857
   185  0000                     _RXF5EIDH	set	3862
   186  0000                     _RXF5EIDL	set	3863
   187  0000                     _RXF5SIDH	set	3860
   188  0000                     _RXF5SIDL	set	3861
   189  0000                     _RXF5SIDLbits	set	3861
   190  0000                     _RXM0EIDH	set	3866
   191  0000                     _RXM0EIDL	set	3867
   192  0000                     _RXM0SIDH	set	3864
   193  0000                     _RXM0SIDL	set	3865
   194  0000                     _RXM0SIDLbits	set	3865
   195  0000                     _RXM1EIDH	set	3870
   196  0000                     _RXM1EIDL	set	3871
   197  0000                     _RXM1SIDH	set	3868
   198  0000                     _RXM1SIDL	set	3869
   199  0000                     _RXM1SIDLbits	set	3869
   200  0000                     _TXB0CONbits	set	3904
   201  0000                     _TXB0D0	set	3910
   202  0000                     _TXB0D1	set	3911
   203  0000                     _TXB0D2	set	3912
   204  0000                     _TXB0D3	set	3913
   205  0000                     _TXB0D4	set	3914
   206  0000                     _TXB0D5	set	3915
   207  0000                     _TXB0D6	set	3916
   208  0000                     _TXB0D7	set	3917
   209  0000                     _TXB0DLC	set	3909
   210  0000                     _TXB0DLCbits	set	3909
   211  0000                     _TXB0EIDH	set	3907
   212  0000                     _TXB0EIDL	set	3908
   213  0000                     _TXB0SIDH	set	3905
   214  0000                     _TXB0SIDL	set	3906
   215  0000                     _TXB0SIDLbits	set	3906
   216  0000                     _TXB1CONbits	set	3888
   217  0000                     _TXB1D0	set	3894
   218  0000                     _TXB1D1	set	3895
   219  0000                     _TXB1D2	set	3896
   220  0000                     _TXB1D3	set	3897
   221  0000                     _TXB1D4	set	3898
   222  0000                     _TXB1D5	set	3899
   223  0000                     _TXB1D6	set	3900
   224  0000                     _TXB1D7	set	3901
   225  0000                     _TXB1DLC	set	3893
   226  0000                     _TXB1DLCbits	set	3893
   227  0000                     _TXB1EIDH	set	3891
   228  0000                     _TXB1EIDL	set	3892
   229  0000                     _TXB1SIDH	set	3889
   230  0000                     _TXB1SIDL	set	3890
   231  0000                     _TXB1SIDLbits	set	3890
   232  0000                     _TXB2CONbits	set	3872
   233  0000                     _TXB2D0	set	3878
   234  0000                     _TXB2D1	set	3879
   235  0000                     _TXB2D2	set	3880
   236  0000                     _TXB2D3	set	3881
   237  0000                     _TXB2D4	set	3882
   238  0000                     _TXB2D5	set	3883
   239  0000                     _TXB2D6	set	3884
   240  0000                     _TXB2D7	set	3885
   241  0000                     _TXB2DLC	set	3877
   242  0000                     _TXB2DLCbits	set	3877
   243  0000                     _TXB2EIDH	set	3875
   244  0000                     _TXB2EIDL	set	3876
   245  0000                     _TXB2SIDH	set	3873
   246  0000                     _TXB2SIDL	set	3874
   247  0000                     _TXB2SIDLbits	set	3874
   248  0000                     _ADCON1	set	4033
   249  0000                     _BRGCON1	set	3952
   250  0000                     _BRGCON2	set	3953
   251  0000                     _BRGCON2bits	set	3953
   252  0000                     _BRGCON3	set	3954
   253  0000                     _BRGCON3bits	set	3954
   254  0000                     _CANCON	set	3951
   255  0000                     _CANCONbits	set	3951
   256  0000                     _CANSTAT	set	3950
   257  0000                     _COMSTATbits	set	3956
   258  0000                     _INTCON2bits	set	4081
   259  0000                     _INTCONbits	set	4082
   260  0000                     _IPR3bits	set	4005
   261  0000                     _LATA	set	3977
   262  0000                     _LATB	set	3978
   263  0000                     _LATBbits	set	3978
   264  0000                     _LATC	set	3979
   265  0000                     _PIE3bits	set	4003
   266  0000                     _PIR3bits	set	4004
   267  0000                     _PORTA	set	3968
   268  0000                     _PORTBbits	set	3969
   269  0000                     _RCONbits	set	4048
   270  0000                     _RXB0CON	set	3936
   271  0000                     _RXB0CONbits	set	3936
   272  0000                     _RXB0D0	set	3942
   273  0000                     _RXB0D1	set	3943
   274  0000                     _RXB0D2	set	3944
   275  0000                     _RXB0D3	set	3945
   276  0000                     _RXB0D4	set	3946
   277  0000                     _RXB0D5	set	3947
   278  0000                     _RXB0D6	set	3948
   279  0000                     _RXB0D7	set	3949
   280  0000                     _RXB0DLC	set	3941
   281  0000                     _RXB0DLCbits	set	3941
   282  0000                     _RXB0EIDH	set	3939
   283  0000                     _RXB0EIDL	set	3940
   284  0000                     _RXB0SIDH	set	3937
   285  0000                     _RXB0SIDL	set	3938
   286  0000                     _RXB0SIDLbits	set	3938
   287  0000                     _RXERRCNT	set	3957
   288  0000                     _T0CON	set	4053
   289  0000                     _T0CONbits	set	4053
   290  0000                     _T3CON	set	4017
   291  0000                     _TMR0H	set	4055
   292  0000                     _TMR0L	set	4054
   293  0000                     _TMR3H	set	4019
   294  0000                     _TMR3L	set	4018
   295  0000                     _TRISA	set	3986
   296  0000                     _TRISB	set	3987
   297  0000                     _TRISBbits	set	3987
   298  0000                     _TRISC	set	3988
   299  0000                     _TXERRCNT	set	3958
   300                           
   301                           ; #config settings
   302  000D51  00                 	db	0	; dummy byte at the end
   303  0000                     
   304                           	psect	cinit
   305  005C9E                     __pcinit:
   306                           	opt stack 0
   307  005C9E                     start_initialization:
   308                           	opt stack 0
   309  005C9E                     __initialization:
   310                           	opt stack 0
   311                           
   312                           ; Clear objects allocated to BANK1 (131 bytes)
   313  005C9E  EE01  F000         	lfsr	0,__pbssBANK1
   314  005CA2  0E83               	movlw	131
   315  005CA4                     clear_0:
   316  005CA4  6AEE               	clrf	postinc0,c
   317  005CA6  06E8               	decf	wreg,f,c
   318  005CA8  E1FD               	bnz	clear_0
   319                           
   320                           ; Clear objects allocated to BANK0 (17 bytes)
   321  005CAA  EE00  F0D7         	lfsr	0,__pbssBANK0
   322  005CAE  0E11               	movlw	17
   323  005CB0                     clear_1:
   324  005CB0  6AEE               	clrf	postinc0,c
   325  005CB2  06E8               	decf	wreg,f,c
   326  005CB4  E1FD               	bnz	clear_1
   327                           
   328                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   329  005CB6  6A55               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   330  005CB8  6A54               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   331                           
   332                           ; Clear objects allocated to COMRAM (43 bytes)
   333  005CBA  EE00  F001         	lfsr	0,__pbssCOMRAM
   334  005CBE  0E2B               	movlw	43
   335  005CC0                     clear_2:
   336  005CC0  6AEE               	clrf	postinc0,c
   337  005CC2  06E8               	decf	wreg,f,c
   338  005CC4  E1FD               	bnz	clear_2
   339                           
   340                           ; Initialize objects allocated to BANK0 (1 bytes)
   341                           ; load TBLPTR registers with __pidataBANK0
   342  005CC6  0EEA               	movlw	low __pidataBANK0
   343  005CC8  6EF6               	movwf	tblptrl,c
   344  005CCA  0E5F               	movlw	high __pidataBANK0
   345  005CCC  6EF7               	movwf	tblptrh,c
   346  005CCE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   347  005CD0  6EF8               	movwf	tblptru,c
   348  005CD2  0009               	tblrd		*+	;fetch initializer
   349  005CD4  CFF5 F0E8          	movff	tablat,__pdataBANK0
   350                           
   351                           ; Initialize objects allocated to COMRAM (2 bytes)
   352                           ; load TBLPTR registers with __pidataCOMRAM
   353  005CD8  0EE8               	movlw	low __pidataCOMRAM
   354  005CDA  6EF6               	movwf	tblptrl,c
   355  005CDC  0E5F               	movlw	high __pidataCOMRAM
   356  005CDE  6EF7               	movwf	tblptrh,c
   357  005CE0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   358  005CE2  6EF8               	movwf	tblptru,c
   359  005CE4  0009               	tblrd		*+	;fetch initializer
   360  005CE6  CFF5 F056          	movff	tablat,__pdataCOMRAM
   361  005CEA  0009               	tblrd		*+	;fetch initializer
   362  005CEC  CFF5 F057          	movff	tablat,__pdataCOMRAM+1
   363  005CF0                     end_of_initialization:
   364                           	opt stack 0
   365  005CF0                     __end_of__initialization:
   366                           	opt stack 0
   367  005CF0  0100               	movlb	0
   368  005CF2  EF08  F02D         	goto	_main	;jump to C main() function
   369                           tblptru	equ	0xFF8
   370                           tblptrh	equ	0xFF7
   371                           tblptrl	equ	0xFF6
   372                           tablat	equ	0xFF5
   373                           postinc0	equ	0xFEE
   374                           wreg	equ	0xFE8
   375                           
   376                           	psect	bitbssCOMRAM
   377  0002A0                     __pbitbssCOMRAM:
   378                           	opt stack 0
   379  0002A0                     _MUX_toggle:
   380                           	opt stack 0
   381  0002A0                     	ds	1
   382  0002A1                     _activation:
   383                           	opt stack 0
   384  0002A1                     	ds	1
   385  0002A2                     _asd:
   386                           	opt stack 0
   387  0002A2                     	ds	1
   388  0002A3                     _avvicinamento:
   389                           	opt stack 0
   390  0002A3                     	ds	1
   391  0002A4                     _dir:
   392                           	opt stack 0
   393  0002A4                     	ds	1
   394  0002A5                     _distance_error:
   395                           	opt stack 0
   396  0002A5                     	ds	1
   397  0002A6                     _distance_received:
   398                           	opt stack 0
   399  0002A6                     	ds	1
   400  0002A7                     _distance_received1:
   401                           	opt stack 0
   402  0002A7                     	ds	1
   403  0002A8                     _distance_wait:
   404                           	opt stack 0
   405  0002A8                     	ds	1
   406  0002A9                     _first:
   407                           	opt stack 0
   408  0002A9                     	ds	1
   409  0002AA                     _new_distance:
   410                           	opt stack 0
   411  0002AA                     	ds	1
   412  0002AB                     _old_dir_correction:
   413                           	opt stack 0
   414  0002AB                     	ds	1
   415  0002AC                     _request_sent:
   416                           	opt stack 0
   417  0002AC                     	ds	1
   418  0002AD                     _request_sent1:
   419                           	opt stack 0
   420  0002AD                     	ds	1
   421  0002AE                     _start_operation:
   422                           	opt stack 0
   423  0002AE                     	ds	1
   424  0002AF                     _steering_correction_dir:
   425                           	opt stack 0
   426  0002AF                     	ds	1
   427                           tblptru	equ	0xFF8
   428                           tblptrh	equ	0xFF7
   429                           tblptrl	equ	0xFF6
   430                           tablat	equ	0xFF5
   431                           postinc0	equ	0xFEE
   432                           wreg	equ	0xFE8
   433                           
   434                           	psect	bssCOMRAM
   435  000001                     __pbssCOMRAM:
   436                           	opt stack 0
   437  000001                     _sensor_distance:
   438                           	opt stack 0
   439  000001                     	ds	16
   440  000011                     _old_alignment_gap:
   441                           	opt stack 0
   442  000011                     	ds	4
   443  000015                     _distance_average:
   444                           	opt stack 0
   445  000015                     	ds	2
   446  000017                     _distance_dx:
   447                           	opt stack 0
   448  000017                     	ds	2
   449  000019                     _distance_sx:
   450                           	opt stack 0
   451  000019                     	ds	2
   452  00001B                     _pulse_time:
   453                           	opt stack 0
   454  00001B                     	ds	2
   455  00001D                     _timerValue2:
   456                           	opt stack 0
   457  00001D                     	ds	2
   458  00001F                     _MUX_index:
   459                           	opt stack 0
   460  00001F                     	ds	1
   461  000020                     _TMR3H_temp:
   462                           	opt stack 0
   463  000020                     	ds	1
   464  000021                     _TMR3L_temp:
   465                           	opt stack 0
   466  000021                     	ds	1
   467  000022                     _counter:
   468                           	opt stack 0
   469  000022                     	ds	1
   470  000023                     _steering_correction:
   471                           	opt stack 0
   472  000023                     	ds	1
   473  000024                     _data_brake:
   474                           	opt stack 0
   475  000024                     	ds	8
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           
   483                           	psect	dataCOMRAM
   484  000056                     __pdataCOMRAM:
   485                           	opt stack 0
   486  000056                     ISR_Bassa@F16865:
   487                           	opt stack 0
   488  000056                     	ds	2
   489                           tblptru	equ	0xFF8
   490                           tblptrh	equ	0xFF7
   491                           tblptrl	equ	0xFF6
   492                           tablat	equ	0xFF5
   493                           postinc0	equ	0xFEE
   494                           wreg	equ	0xFE8
   495                           
   496                           	psect	bssBANK0
   497  0000D7                     __pbssBANK0:
   498                           	opt stack 0
   499  0000D7                     _alignment_gap:
   500                           	opt stack 0
   501  0000D7                     	ds	4
   502  0000DB                     _x:
   503                           	opt stack 0
   504  0000DB                     	ds	4
   505  0000DF                     _z:
   506                           	opt stack 0
   507  0000DF                     	ds	4
   508  0000E3                     _clock_counter_reference:
   509                           	opt stack 0
   510  0000E3                     	ds	2
   511  0000E5                     _set_speed:
   512                           	opt stack 0
   513  0000E5                     	ds	2
   514  0000E7                     _counter_distance:
   515                           	opt stack 0
   516  0000E7                     	ds	1
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           
   524                           	psect	dataBANK0
   525  0000E8                     __pdataBANK0:
   526                           	opt stack 0
   527  0000E8                     _delay_quartz_frequency_value:
   528                           	opt stack 0
   529  0000E8                     	ds	1
   530                           tblptru	equ	0xFF8
   531                           tblptrh	equ	0xFF7
   532                           tblptrl	equ	0xFF6
   533                           tablat	equ	0xFF5
   534                           postinc0	equ	0xFEE
   535                           wreg	equ	0xFE8
   536                           
   537                           	psect	bssBANK1
   538  000100                     __pbssBANK1:
   539                           	opt stack 0
   540  000100                     _MUX_select:
   541                           	opt stack 0
   542  000100                     	ds	8
   543  000108                     _data_speed_rx:
   544                           	opt stack 0
   545  000108                     	ds	8
   546  000110                     _distance_set:
   547                           	opt stack 0
   548  000110                     	ds	8
   549  000118                     _sensor_distance_old:
   550                           	opt stack 0
   551  000118                     	ds	8
   552  000120                     _J_var:
   553                           	opt stack 0
   554  000120                     	ds	4
   555  000124                     _K_var:
   556                           	opt stack 0
   557  000124                     	ds	4
   558  000128                     _Pmin:
   559                           	opt stack 0
   560  000128                     	ds	4
   561  00012C                     _alfa:
   562                           	opt stack 0
   563  00012C                     	ds	4
   564  000130                     _beta:
   565                           	opt stack 0
   566  000130                     	ds	4
   567  000134                     _bordo:
   568                           	opt stack 0
   569  000134                     	ds	4
   570  000138                     _n:
   571                           	opt stack 0
   572  000138                     	ds	4
   573  00013C                     _prima_sterzata:
   574                           	opt stack 0
   575  00013C                     	ds	4
   576  000140                     _distance:
   577                           	opt stack 0
   578  000140                     	ds	2
   579  000142                     _errno:
   580                           	opt stack 0
   581  000142                     	ds	2
   582  000144                     _msg:
   583                           	opt stack 0
   584  000144                     	ds	15
   585  000153                     _data:
   586                           	opt stack 0
   587  000153                     	ds	8
   588  00015B                     _data_correction:
   589                           	opt stack 0
   590  00015B                     	ds	8
   591  000163                     _data_speed:
   592                           	opt stack 0
   593  000163                     	ds	8
   594  00016B                     _data_steering:
   595                           	opt stack 0
   596  00016B                     	ds	8
   597  000173                     _data_test:
   598                           	opt stack 0
   599  000173                     	ds	8
   600  00017B                     _sensor_distance_short:
   601                           	opt stack 0
   602  00017B                     	ds	8
   603                           tblptru	equ	0xFF8
   604                           tblptrh	equ	0xFF7
   605                           tblptrl	equ	0xFF6
   606                           tablat	equ	0xFF5
   607                           postinc0	equ	0xFEE
   608                           wreg	equ	0xFE8
   609                           
   610                           	psect	cstackBANK1
   611  000183                     __pcstackBANK1:
   612                           	opt stack 0
   613  000183                     ??_sqrt:
   614  000183                     sin@y:
   615                           	opt stack 0
   616                           
   617                           ; 4 bytes @ 0x0
   618  000183                     	ds	4
   619  000187                     sqrt@og:
   620                           	opt stack 0
   621  000187                     _sin$3683:
   622                           	opt stack 0
   623                           
   624                           ; 4 bytes @ 0x4
   625  000187                     	ds	4
   626  00018B                     sin@x2:
   627                           	opt stack 0
   628  00018B                     sqrt@z:
   629                           	opt stack 0
   630                           
   631                           ; 4 bytes @ 0x8
   632  00018B                     	ds	4
   633  00018F                     sin@sgn:
   634                           	opt stack 0
   635  00018F                     sqrt@i:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0xC
   639  00018F                     	ds	1
   640  000190                     sqrt@q:
   641                           	opt stack 0
   642                           
   643                           ; 4 bytes @ 0xD
   644  000190                     	ds	4
   645  000194                     sqrt@x:
   646                           	opt stack 0
   647                           
   648                           ; 4 bytes @ 0x11
   649  000194                     	ds	4
   650  000198                     ?_asin:
   651                           	opt stack 0
   652  000198                     asin@x:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0x15
   656  000198                     	ds	4
   657  00019C                     asin@sgn:
   658                           	opt stack 0
   659                           
   660                           ; 4 bytes @ 0x19
   661  00019C                     	ds	4
   662  0001A0                     _asin$3678:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x1D
   666  0001A0                     	ds	4
   667  0001A4                     _asin$3681:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x21
   671  0001A4                     	ds	4
   672  0001A8                     _asin$3680:
   673                           	opt stack 0
   674                           
   675                           ; 4 bytes @ 0x25
   676  0001A8                     	ds	4
   677  0001AC                     asin@y:
   678                           	opt stack 0
   679                           
   680                           ; 4 bytes @ 0x29
   681  0001AC                     	ds	4
   682  0001B0                     _asin$3679:
   683                           	opt stack 0
   684                           
   685                           ; 4 bytes @ 0x2D
   686  0001B0                     	ds	4
   687  0001B4                     ??_park_search:
   688  0001B4                     ?_cos:
   689                           	opt stack 0
   690  0001B4                     cos@f:
   691                           	opt stack 0
   692                           
   693                           ; 4 bytes @ 0x31
   694  0001B4                     	ds	4
   695  0001B8                     _cos$3682:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x35
   699  0001B8                     	ds	4
   700  0001BC                     ??_park_routine:
   701                           
   702                           ; 0 bytes @ 0x39
   703  0001BC                     	ds	4
   704  0001C0                     _park_routine$3666:
   705                           	opt stack 0
   706                           
   707                           ; 4 bytes @ 0x3D
   708  0001C0                     	ds	4
   709  0001C4                     _park_routine$3667:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x41
   713  0001C4                     	ds	4
   714  0001C8                     _park_routine$3669:
   715                           	opt stack 0
   716                           
   717                           ; 4 bytes @ 0x45
   718  0001C8                     	ds	4
   719  0001CC                     _park_routine$3670:
   720                           	opt stack 0
   721                           
   722                           ; 4 bytes @ 0x49
   723  0001CC                     	ds	4
   724  0001D0                     _park_routine$3664:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x4D
   728  0001D0                     	ds	4
   729  0001D4                     _park_routine$3665:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x51
   733  0001D4                     	ds	4
   734  0001D8                     _park_routine$3668:
   735                           	opt stack 0
   736                           
   737                           ; 4 bytes @ 0x55
   738  0001D8                     	ds	4
   739  0001DC                     park_routine@larghezza:
   740                           	opt stack 0
   741                           
   742                           ; 4 bytes @ 0x59
   743  0001DC                     	ds	4
   744  0001E0                     park_routine@raggio:
   745                           	opt stack 0
   746                           
   747                           ; 4 bytes @ 0x5D
   748  0001E0                     	ds	4
   749                           tblptru	equ	0xFF8
   750                           tblptrh	equ	0xFF7
   751                           tblptrl	equ	0xFF6
   752                           tablat	equ	0xFF5
   753                           postinc0	equ	0xFEE
   754                           wreg	equ	0xFE8
   755                           
   756                           	psect	cstackBANK0
   757  000060                     __pcstackBANK0:
   758                           	opt stack 0
   759  000060                     ?___lwdiv:
   760                           	opt stack 0
   761  000060                     ___lwdiv@dividend:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x0
   765  000060                     	ds	2
   766  000062                     ___lwdiv@divisor:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0x2
   770  000062                     	ds	2
   771  000064                     ___lwdiv@counter:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x4
   775  000064                     	ds	1
   776  000065                     ___lwdiv@quotient:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x5
   780  000065                     	ds	2
   781  000067                     ??_ISR_Alta:
   782                           
   783                           ; 0 bytes @ 0x7
   784  000067                     	ds	16
   785  000077                     ?_abs:
   786                           	opt stack 0
   787  000077                     ?___wmul:
   788                           	opt stack 0
   789  000077                     ?___flpack:
   790                           	opt stack 0
   791  000077                     CANOperationMode@mode:
   792                           	opt stack 0
   793  000077                     _CANisTxReady$2837:
   794                           	opt stack 0
   795  000077                     ___wmul@multiplier:
   796                           	opt stack 0
   797  000077                     abs@a:
   798                           	opt stack 0
   799  000077                     CANsendMessage@identifier:
   800                           	opt stack 0
   801  000077                     CANSetMask@mask:
   802                           	opt stack 0
   803  000077                     CANSetFilter@filter:
   804                           	opt stack 0
   805  000077                     ___flpack@arg:
   806                           	opt stack 0
   807  000077                     frexp@value:
   808                           	opt stack 0
   809                           
   810                           ; 4 bytes @ 0x17
   811  000077                     	ds	2
   812  000079                     ??_abs:
   813  000079                     ___wmul@multiplicand:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x19
   817  000079                     	ds	2
   818  00007B                     CANSetMask@type:
   819                           	opt stack 0
   820  00007B                     CANSetFilter@type:
   821                           	opt stack 0
   822  00007B                     ___flpack@exp:
   823                           	opt stack 0
   824  00007B                     CANsendMessage@data:
   825                           	opt stack 0
   826  00007B                     ___wmul@product:
   827                           	opt stack 0
   828  00007B                     frexp@eptr:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x1B
   832  00007B                     	ds	1
   833  00007C                     ??_CANSetMask:
   834  00007C                     ??_CANSetFilter:
   835  00007C                     ___flpack@sign:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x1C
   839  00007C                     	ds	1
   840  00007D                     ??___flpack:
   841  00007D                     ??_frexp:
   842  00007D                     CANsendMessage@dataLength:
   843                           	opt stack 0
   844  00007D                     delay_ms@value_ms:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x1D
   848  00007D                     	ds	1
   849  00007E                     CANsendMessage@flags:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x1E
   853  00007E                     	ds	1
   854  00007F                     ??_CANsendMessage:
   855  00007F                     delay_s@value_s:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x1F
   859  00007F                     	ds	1
   860  000080                     CANSetMask@numBuffer:
   861                           	opt stack 0
   862  000080                     CANSetFilter@numBuffer:
   863                           	opt stack 0
   864  000080                     delay_s@repeat_loop:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x20
   868  000080                     	ds	1
   869  000081                     ?___flmul:
   870                           	opt stack 0
   871  000081                     ?___awtofl:
   872                           	opt stack 0
   873  000081                     ?___lwtofl:
   874                           	opt stack 0
   875  000081                     ___awtofl@c:
   876                           	opt stack 0
   877  000081                     ___lwtofl@c:
   878                           	opt stack 0
   879  000081                     CANSetMask@tamp:
   880                           	opt stack 0
   881  000081                     CANSetFilter@tamp:
   882                           	opt stack 0
   883  000081                     ___flmul@f1:
   884                           	opt stack 0
   885                           
   886                           ; 4 bytes @ 0x21
   887  000081                     	ds	2
   888  000083                     CANsendMessage@tamp:
   889                           	opt stack 0
   890                           
   891                           ; 4 bytes @ 0x23
   892  000083                     	ds	2
   893  000085                     CANInitialize@phaseSeg1:
   894                           	opt stack 0
   895  000085                     ___awtofl@sign:
   896                           	opt stack 0
   897  000085                     ___flmul@f2:
   898                           	opt stack 0
   899                           
   900                           ; 4 bytes @ 0x25
   901  000085                     	ds	1
   902  000086                     CANInitialize@phaseSeg2:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x26
   906  000086                     	ds	1
   907  000087                     CANInitialize@SJW:
   908                           	opt stack 0
   909                           
   910                           ; 1 bytes @ 0x27
   911  000087                     	ds	1
   912  000088                     CANInitialize@BRP:
   913                           	opt stack 0
   914                           
   915                           ; 1 bytes @ 0x28
   916  000088                     	ds	1
   917  000089                     CANInitialize@flags:
   918                           	opt stack 0
   919  000089                     ___flmul@exp:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x29
   923  000089                     	ds	1
   924  00008A                     ??_CANInitialize:
   925  00008A                     ___flmul@f3_as_product:
   926                           	opt stack 0
   927                           
   928                           ; 4 bytes @ 0x2A
   929  00008A                     	ds	4
   930  00008E                     CANInitialize@propSeg:
   931                           	opt stack 0
   932  00008E                     ___flmul@cntr:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x2E
   936  00008E                     	ds	1
   937  00008F                     CANInitialize@FilterConfig1:
   938                           	opt stack 0
   939  00008F                     ___flmul@sign:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x2F
   943  00008F                     	ds	1
   944  000090                     ?___fldiv:
   945                           	opt stack 0
   946  000090                     CANInitialize@FilterConfig2:
   947                           	opt stack 0
   948  000090                     ___fldiv@f1:
   949                           	opt stack 0
   950                           
   951                           ; 4 bytes @ 0x30
   952  000090                     	ds	1
   953  000091                     
   954                           ; 0 bytes @ 0x31
   955  000091                     	ds	3
   956  000094                     ___fldiv@f2:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x34
   960  000094                     	ds	4
   961  000098                     ___fldiv@f3:
   962                           	opt stack 0
   963                           
   964                           ; 4 bytes @ 0x38
   965  000098                     	ds	4
   966  00009C                     ___fldiv@cntr:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x3C
   970  00009C                     	ds	1
   971  00009D                     ___fldiv@exp:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x3D
   975  00009D                     	ds	1
   976  00009E                     ___fldiv@sign:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x3E
   980  00009E                     	ds	1
   981  00009F                     ?___fladd:
   982                           	opt stack 0
   983  00009F                     ___fladd@f1:
   984                           	opt stack 0
   985                           
   986                           ; 4 bytes @ 0x3F
   987  00009F                     	ds	4
   988  0000A3                     ___fladd@f2:
   989                           	opt stack 0
   990                           
   991                           ; 4 bytes @ 0x43
   992  0000A3                     	ds	4
   993  0000A7                     ??___fladd:
   994                           
   995                           ; 0 bytes @ 0x47
   996  0000A7                     	ds	1
   997  0000A8                     ___fladd@sign:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x48
  1001  0000A8                     	ds	1
  1002  0000A9                     ___fladd@exp2:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x49
  1006  0000A9                     	ds	1
  1007  0000AA                     ___fladd@exp1:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x4A
  1011  0000AA                     	ds	1
  1012  0000AB                     ?_eval_poly:
  1013                           	opt stack 0
  1014  0000AB                     ?___flneg:
  1015                           	opt stack 0
  1016  0000AB                     eval_poly@x:
  1017                           	opt stack 0
  1018  0000AB                     ___flneg@f1:
  1019                           	opt stack 0
  1020                           
  1021                           ; 4 bytes @ 0x4B
  1022  0000AB                     	ds	4
  1023  0000AF                     ?_fabs:
  1024                           	opt stack 0
  1025  0000AF                     ?___fltol:
  1026                           	opt stack 0
  1027  0000AF                     eval_poly@d:
  1028                           	opt stack 0
  1029  0000AF                     fabs@d:
  1030                           	opt stack 0
  1031  0000AF                     ___fltol@f1:
  1032                           	opt stack 0
  1033                           
  1034                           ; 4 bytes @ 0x4F
  1035  0000AF                     	ds	2
  1036  0000B1                     eval_poly@n:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x51
  1040  0000B1                     	ds	2
  1041  0000B3                     ??_eval_poly:
  1042  0000B3                     ??___fltol:
  1043  0000B3                     ___flge@ff1:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x53
  1047  0000B3                     	ds	4
  1048  0000B7                     ___fltol@sign1:
  1049                           	opt stack 0
  1050  0000B7                     eval_poly@res:
  1051                           	opt stack 0
  1052  0000B7                     ___flge@ff2:
  1053                           	opt stack 0
  1054                           
  1055                           ; 4 bytes @ 0x57
  1056  0000B7                     	ds	1
  1057  0000B8                     ___fltol@exp1:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x58
  1061  0000B8                     	ds	1
  1062  0000B9                     ?___altofl:
  1063                           	opt stack 0
  1064  0000B9                     ___altofl@c:
  1065                           	opt stack 0
  1066                           
  1067                           ; 4 bytes @ 0x59
  1068  0000B9                     	ds	2
  1069  0000BB                     ??___flge:
  1070                           
  1071                           ; 0 bytes @ 0x5B
  1072  0000BB                     	ds	2
  1073  0000BD                     ___altofl@sign:
  1074                           	opt stack 0
  1075                           
  1076                           ; 1 bytes @ 0x5D
  1077  0000BD                     	ds	2
  1078  0000BF                     ?_atan:
  1079                           	opt stack 0
  1080  0000BF                     ?_floor:
  1081                           	opt stack 0
  1082  0000BF                     atan@f:
  1083                           	opt stack 0
  1084  0000BF                     floor@x:
  1085                           	opt stack 0
  1086                           
  1087                           ; 4 bytes @ 0x5F
  1088  0000BF                     	ds	4
  1089  0000C3                     atan@y:
  1090                           	opt stack 0
  1091  0000C3                     floor@i:
  1092                           	opt stack 0
  1093                           
  1094                           ; 4 bytes @ 0x63
  1095  0000C3                     	ds	4
  1096  0000C7                     floor@expon:
  1097                           	opt stack 0
  1098  0000C7                     atan@x:
  1099                           	opt stack 0
  1100                           
  1101                           ; 4 bytes @ 0x67
  1102  0000C7                     	ds	2
  1103  0000C9                     ?___flsub:
  1104                           	opt stack 0
  1105  0000C9                     ___flsub@f1:
  1106                           	opt stack 0
  1107                           
  1108                           ; 4 bytes @ 0x69
  1109  0000C9                     	ds	2
  1110  0000CB                     atan@recip:
  1111                           	opt stack 0
  1112                           
  1113                           ; 1 bytes @ 0x6B
  1114  0000CB                     	ds	1
  1115  0000CC                     atan@val_squared:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0x6C
  1119  0000CC                     	ds	1
  1120  0000CD                     ___flsub@f2:
  1121                           	opt stack 0
  1122                           
  1123                           ; 4 bytes @ 0x6D
  1124  0000CD                     	ds	3
  1125  0000D0                     atan@val:
  1126                           	opt stack 0
  1127                           
  1128                           ; 4 bytes @ 0x70
  1129  0000D0                     	ds	1
  1130  0000D1                     ?_sqrt:
  1131                           	opt stack 0
  1132  0000D1                     ?_sin:
  1133                           	opt stack 0
  1134  0000D1                     sin@f:
  1135                           	opt stack 0
  1136  0000D1                     sqrt@y:
  1137                           	opt stack 0
  1138                           
  1139                           ; 4 bytes @ 0x71
  1140  0000D1                     	ds	4
  1141  0000D5                     ??_parallelo:
  1142  0000D5                     
  1143                           ; 0 bytes @ 0x75
  1144  0000D5                     	ds	2
  1145  0000D7                     tblptru	equ	0xFF8
  1146                           tblptrh	equ	0xFF7
  1147                           tblptrl	equ	0xFF6
  1148                           tablat	equ	0xFF5
  1149                           postinc0	equ	0xFEE
  1150                           wreg	equ	0xFE8
  1151                           
  1152                           ; 0 bytes @ 0x77
  1153                           
  1154                           	psect	cstackCOMRAM
  1155  00002C                     __pcstackCOMRAM:
  1156                           	opt stack 0
  1157  00002C                     ?i1___wmul:
  1158                           	opt stack 0
  1159  00002C                     _CANisRxReady$2839:
  1160                           	opt stack 0
  1161  00002C                     i1_CANisTxReady$2837:
  1162                           	opt stack 0
  1163  00002C                     CANreceiveMessage@msg:
  1164                           	opt stack 0
  1165  00002C                     i1___wmul@multiplier:
  1166                           	opt stack 0
  1167  00002C                     i1CANsendMessage@identifier:
  1168                           	opt stack 0
  1169                           
  1170                           ; 4 bytes @ 0x0
  1171  00002C                     	ds	2
  1172  00002E                     ??_CANreceiveMessage:
  1173  00002E                     i1___wmul@multiplicand:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x2
  1177  00002E                     	ds	2
  1178  000030                     i1CANsendMessage@data:
  1179                           	opt stack 0
  1180  000030                     i1___wmul@product:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x4
  1184  000030                     	ds	2
  1185  000032                     i1CANsendMessage@dataLength:
  1186                           	opt stack 0
  1187  000032                     i1delay_ms@value_ms:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x6
  1191  000032                     	ds	1
  1192  000033                     i1CANsendMessage@flags:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x7
  1196  000033                     	ds	1
  1197  000034                     ??i1_CANsendMessage:
  1198  000034                     
  1199                           ; 0 bytes @ 0x8
  1200  000034                     	ds	2
  1201  000036                     CANreceiveMessage@error:
  1202                           	opt stack 0
  1203                           
  1204                           ; 1 bytes @ 0xA
  1205  000036                     	ds	1
  1206  000037                     CANreceiveMessage@tamp:
  1207                           	opt stack 0
  1208                           
  1209                           ; 1 bytes @ 0xB
  1210  000037                     	ds	1
  1211  000038                     i1CANsendMessage@tamp:
  1212                           	opt stack 0
  1213                           
  1214                           ; 4 bytes @ 0xC
  1215  000038                     	ds	4
  1216  00003C                     ??_ISR_Bassa:
  1217  00003C                     
  1218                           ; 0 bytes @ 0x10
  1219  00003C                     	ds	21
  1220  000051                     ISR_Bassa@MUX_index_collision:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x25
  1224  000051                     	ds	2
  1225  000053                     ISR_Bassa@PORTA_temp:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x27
  1229  000053                     	ds	1
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           postinc0	equ	0xFEE
  1235                           wreg	equ	0xFE8
  1236                           
  1237 ;;
  1238 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1239 ;;
  1240 ;; *************** function _main *****************
  1241 ;; Defined at:
  1242 ;;		line 235 in file "parcheggio.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;		None
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;		None
  1247 ;; Return value:  Size  Location     Type
  1248 ;;		None               void
  1249 ;; Registers used:
  1250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1260 ;;Total ram usage:        0 bytes
  1261 ;; Hardware stack levels required when called:   12
  1262 ;; This function calls:
  1263 ;;		_CANisTxReady
  1264 ;;		_CANsendMessage
  1265 ;;		_configurations
  1266 ;;		_delay_ms
  1267 ;;		_park_routine
  1268 ;;		_park_search
  1269 ;; This function is called by:
  1270 ;;		Startup code after reset
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           	psect	text0
  1275  005A10                     __ptext0:
  1276                           	opt stack 0
  1277  005A10                     _main:
  1278                           	opt stack 19
  1279                           
  1280                           ;parcheggio.c: 236: MUX_select[0] = 0b00000000;
  1281                           
  1282                           ;incstack = 0
  1283  005A10  0E00               	movlw	0
  1284  005A12  0101               	movlb	1	; () banked
  1285  005A14  6F00               	movwf	_MUX_select& (0+255),b	;volatile
  1286                           
  1287                           ;parcheggio.c: 237: MUX_select[1] = 0b00000001;
  1288  005A16  0E01               	movlw	1
  1289  005A18  0101               	movlb	1	; () banked
  1290  005A1A  6F01               	movwf	(_MUX_select+1)& (0+255),b	;volatile
  1291                           
  1292                           ;parcheggio.c: 238: MUX_select[2] = 0b00000010;
  1293  005A1C  0E02               	movlw	2
  1294  005A1E  0101               	movlb	1	; () banked
  1295  005A20  6F02               	movwf	(_MUX_select+2)& (0+255),b	;volatile
  1296                           
  1297                           ;parcheggio.c: 239: MUX_select[3] = 0b00000011;
  1298  005A22  0E03               	movlw	3
  1299  005A24  0101               	movlb	1	; () banked
  1300  005A26  6F03               	movwf	(_MUX_select+3)& (0+255),b	;volatile
  1301                           
  1302                           ;parcheggio.c: 240: MUX_select[4] = 0b00000100;
  1303  005A28  0E04               	movlw	4
  1304  005A2A  0101               	movlb	1	; () banked
  1305  005A2C  6F04               	movwf	(_MUX_select+4)& (0+255),b	;volatile
  1306                           
  1307                           ;parcheggio.c: 241: MUX_select[5] = 0b00000101;
  1308  005A2E  0E05               	movlw	5
  1309  005A30  0101               	movlb	1	; () banked
  1310  005A32  6F05               	movwf	(_MUX_select+5)& (0+255),b	;volatile
  1311                           
  1312                           ;parcheggio.c: 242: MUX_select[6] = 0b00000110;
  1313  005A34  0E06               	movlw	6
  1314  005A36  0101               	movlb	1	; () banked
  1315  005A38  6F06               	movwf	(_MUX_select+6)& (0+255),b	;volatile
  1316                           
  1317                           ;parcheggio.c: 243: MUX_select[7] = 0b00000111;
  1318  005A3A  0E07               	movlw	7
  1319  005A3C  0101               	movlb	1	; () banked
  1320  005A3E  6F07               	movwf	(_MUX_select+7)& (0+255),b	;volatile
  1321                           
  1322                           ; BSR set to: 1
  1323                           ;parcheggio.c: 245: configurations();
  1324  005A40  ECE9  F02D         	call	_configurations	;wreg free
  1325                           
  1326                           ;parcheggio.c: 247: PORTBbits.RB4 = 0;
  1327  005A44  9881               	bcf	3969,4,c	;volatile
  1328                           
  1329                           ;parcheggio.c: 248: PORTBbits.RB5 = 0;
  1330  005A46  9A81               	bcf	3969,5,c	;volatile
  1331                           
  1332                           ;parcheggio.c: 249: PORTBbits.RB6 = 0;
  1333  005A48  9C81               	bcf	3969,6,c	;volatile
  1334                           
  1335                           ;parcheggio.c: 251: request_sent = 0;
  1336  005A4A  9855               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1337                           
  1338                           ;parcheggio.c: 252: start_operation = 0;
  1339  005A4C  9C55               	bcf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  1340                           
  1341                           ;parcheggio.c: 253: delay_ms(500);
  1342  005A4E  0E01               	movlw	1
  1343  005A50  0100               	movlb	0	; () banked
  1344  005A52  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1345  005A54  0EF4               	movlw	244
  1346  005A56  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1347  005A58  EC0A  F02F         	call	_delay_ms	;wreg free
  1348                           
  1349                           ;parcheggio.c: 256: while (activation != 1) {
  1350                           
  1351                           ;parcheggio.c: 255: while (1) {
  1352  005A5C  D026               	goto	l7178
  1353  005A5E                     l7172:
  1354                           
  1355                           ;parcheggio.c: 257: delay_ms(10);
  1356  005A5E  0E00               	movlw	0
  1357  005A60  0100               	movlb	0	; () banked
  1358  005A62  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1359  005A64  0E0A               	movlw	10
  1360  005A66  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1361  005A68  EC0A  F02F         	call	_delay_ms	;wreg free
  1362                           
  1363                           ;parcheggio.c: 258: while (!CANisTxReady());
  1364  005A6C  D000               	goto	l7174
  1365  005A6E                     l7174:
  1366  005A6E  ECB9  F02F         	call	_CANisTxReady	;wreg free
  1367  005A72  0900               	iorlw	0
  1368  005A74  B4D8               	btfsc	status,2,c
  1369  005A76  D7FB               	goto	l7174
  1370                           
  1371                           ;parcheggio.c: 259: PORTBbits.RB4 = ~PORTBbits.RB4;
  1372  005A78  7881               	btg	3969,4,c	;volatile
  1373                           
  1374                           ;parcheggio.c: 260: CANsendMessage(0b00000010001, sensor_distance_short, 2, CAN_CONFIG_S
      +                          TD_MSG & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1375  005A7A  0E11               	movlw	17
  1376  005A7C  0100               	movlb	0	; () banked
  1377  005A7E  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1378  005A80  0E00               	movlw	0
  1379  005A82  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1380  005A84  0E00               	movlw	0
  1381  005A86  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1382  005A88  0E00               	movlw	0
  1383  005A8A  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1384  005A8C  0E7B               	movlw	low _sensor_distance_short
  1385  005A8E  0100               	movlb	0	; () banked
  1386  005A90  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1387  005A92  0E01               	movlw	high _sensor_distance_short
  1388  005A94  0100               	movlb	0	; () banked
  1389  005A96  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1390  005A98  0E02               	movlw	2
  1391  005A9A  0100               	movlb	0	; () banked
  1392  005A9C  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1393  005A9E  0EBC               	movlw	188
  1394  005AA0  0100               	movlb	0	; () banked
  1395  005AA2  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1396  005AA4  ECE5  F011         	call	_CANsendMessage	;wreg free
  1397  005AA8  D000               	goto	l7178
  1398  005AAA                     l7178:
  1399  005AAA  A254               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1400  005AAC  D7D8               	goto	l7172
  1401                           
  1402                           ;parcheggio.c: 261: }
  1403                           ;parcheggio.c: 263: park_search();
  1404  005AAE  EC19  F026         	call	_park_search	;wreg free
  1405                           
  1406                           ;parcheggio.c: 264: park_routine();
  1407  005AB2  ECA9  F006         	call	_park_routine	;wreg free
  1408  005AB6  D7F9               	goto	l7178
  1409  005AB8  EF94  F001         	goto	start
  1410  005ABC                     __end_of_main:
  1411                           	opt stack 0
  1412                           tblptru	equ	0xFF8
  1413                           tblptrh	equ	0xFF7
  1414                           tblptrl	equ	0xFF6
  1415                           tablat	equ	0xFF5
  1416                           postinc0	equ	0xFEE
  1417                           wreg	equ	0xFE8
  1418                           status	equ	0xFD8
  1419                           
  1420 ;; *************** function _park_search *****************
  1421 ;; Defined at:
  1422 ;;		line 268 in file "parcheggio.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;		None
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;		None
  1427 ;; Return value:  Size  Location     Type
  1428 ;;		None               void
  1429 ;; Registers used:
  1430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1438 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1439 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1440 ;;Total ram usage:        2 bytes
  1441 ;; Hardware stack levels used:    1
  1442 ;; Hardware stack levels required when called:   11
  1443 ;; This function calls:
  1444 ;;		_CANisTxReady
  1445 ;;		_CANsendMessage
  1446 ;;		___awtofl
  1447 ;;		_abs
  1448 ;;		_parallelo
  1449 ;; This function is called by:
  1450 ;;		_main
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text1
  1455  004C32                     __ptext1:
  1456                           	opt stack 0
  1457  004C32                     _park_search:
  1458                           	opt stack 19
  1459                           
  1460                           ;parcheggio.c: 269: while ((activation == 1) && (PORTBbits.RB5 == 0)) {
  1461                           
  1462                           ;incstack = 0
  1463  004C32  D0D8               	goto	l734
  1464  004C34                     l6842:
  1465                           
  1466                           ;parcheggio.c: 270: parallelo();
  1467  004C34  ECF4  F022         	call	_parallelo	;wreg free
  1468                           
  1469                           ;parcheggio.c: 271: if (sensor_distance[0] > 50) {
  1470  004C38  5002               	movf	_sensor_distance+1,w,c	;volatile
  1471  004C3A  E104               	bnz	u8490
  1472  004C3C  0E33               	movlw	51
  1473  004C3E  5C01               	subwf	_sensor_distance,w,c	;volatile
  1474  004C40  A0D8               	btfss	status,0,c
  1475  004C42  D024               	goto	l736
  1476  004C44                     u8490:
  1477                           
  1478                           ;parcheggio.c: 272: if (request_sent == 0) {
  1479  004C44  A855               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1480  004C46  D002               	goto	l6850
  1481  004C48  D01F               	goto	l6856
  1482                           
  1483                           ;parcheggio.c: 273: while (!CANisTxReady());
  1484  004C4A  D000               	goto	l6850
  1485  004C4C                     l6850:
  1486  004C4C  ECB9  F02F         	call	_CANisTxReady	;wreg free
  1487  004C50  0900               	iorlw	0
  1488  004C52  B4D8               	btfsc	status,2,c
  1489  004C54  D7FB               	goto	l6850
  1490                           
  1491                           ;parcheggio.c: 274: CANsendMessage(0b00000001010, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1492  004C56  0E0A               	movlw	10
  1493  004C58  0100               	movlb	0	; () banked
  1494  004C5A  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1495  004C5C  0E00               	movlw	0
  1496  004C5E  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1497  004C60  0E00               	movlw	0
  1498  004C62  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1499  004C64  0E00               	movlw	0
  1500  004C66  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1501  004C68  0E53               	movlw	low _data
  1502  004C6A  0100               	movlb	0	; () banked
  1503  004C6C  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1504  004C6E  0E01               	movlw	high _data
  1505  004C70  0100               	movlb	0	; () banked
  1506  004C72  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1507  004C74  0E08               	movlw	8
  1508  004C76  0100               	movlb	0	; () banked
  1509  004C78  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1510  004C7A  0EFC               	movlw	252
  1511  004C7C  0100               	movlb	0	; () banked
  1512  004C7E  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1513  004C80  ECE5  F011         	call	_CANsendMessage	;wreg free
  1514                           
  1515                           ;parcheggio.c: 275: request_sent = 1;
  1516  004C84  8855               	bsf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1517  004C86  D000               	goto	l6856
  1518  004C88                     l6856:
  1519                           
  1520                           ;parcheggio.c: 277: }
  1521                           ;parcheggio.c: 278: LATBbits.LATB4 = 1;
  1522  004C88  888A               	bsf	3978,4,c	;volatile
  1523                           
  1524                           ;parcheggio.c: 279: } else {
  1525  004C8A  D027               	goto	l6860
  1526  004C8C                     l736:
  1527                           
  1528                           ;parcheggio.c: 280: LATBbits.LATB4 = 0;
  1529  004C8C  988A               	bcf	3978,4,c	;volatile
  1530                           
  1531                           ;parcheggio.c: 281: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  1532  004C8E  EE20  F003         	lfsr	2,_sensor_distance+2	;volatile
  1533  004C92  CFDE F1B4          	movff	postinc2,??_park_search
  1534  004C96  CFDD F1B5          	movff	postdec2,??_park_search+1
  1535  004C9A  0101               	movlb	1	; () banked
  1536  004C9C  1FB4               	comf	??_park_search& (0+255),f,b
  1537  004C9E  1FB5               	comf	(??_park_search+1)& (0+255),f,b
  1538  004CA0  4BB4               	infsnz	??_park_search& (0+255),f,b
  1539  004CA2  2BB5               	incf	(??_park_search+1)& (0+255),f,b
  1540  004CA4  5001               	movf	_sensor_distance,w,c	;volatile
  1541  004CA6  0101               	movlb	1	; () banked
  1542  004CA8  25B4               	addwf	??_park_search& (0+255),w,b
  1543  004CAA  0100               	movlb	0	; () banked
  1544  004CAC  6F77               	movwf	abs@a& (0+255),b
  1545  004CAE  5002               	movf	_sensor_distance+1,w,c	;volatile
  1546  004CB0  0101               	movlb	1	; () banked
  1547  004CB2  21B5               	addwfc	(??_park_search+1)& (0+255),w,b
  1548  004CB4  0100               	movlb	0	; () banked
  1549  004CB6  6F78               	movwf	(abs@a+1)& (0+255),b
  1550  004CB8  EC8F  F02F         	call	_abs	;wreg free
  1551  004CBC  C077  F081         	movff	?_abs,___awtofl@c
  1552  004CC0  C078  F082         	movff	?_abs+1,___awtofl@c+1
  1553  004CC4  ECA7  F02E         	call	___awtofl	;wreg free
  1554  004CC8  C081  F0D7         	movff	?___awtofl,_alignment_gap	;volatile
  1555  004CCC  C082  F0D8         	movff	?___awtofl+1,_alignment_gap+1	;volatile
  1556  004CD0  C083  F0D9         	movff	?___awtofl+2,_alignment_gap+2	;volatile
  1557  004CD4  C084  F0DA         	movff	?___awtofl+3,_alignment_gap+3	;volatile
  1558  004CD8  D000               	goto	l6860
  1559  004CDA                     l6860:
  1560                           
  1561                           ;parcheggio.c: 282: }
  1562                           ;parcheggio.c: 284: if ((sensor_distance[0] < 50) && (request_sent == 1)&&(sensor_distan
      +                          ce[1] < 50)) {
  1563  004CDA  5002               	movf	_sensor_distance+1,w,c	;volatile
  1564  004CDC  E131               	bnz	l6876
  1565  004CDE  0E32               	movlw	50
  1566  004CE0  5C01               	subwf	_sensor_distance,w,c	;volatile
  1567  004CE2  B0D8               	btfsc	status,0,c
  1568  004CE4  D02D               	goto	l6876
  1569  004CE6  A855               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1570  004CE8  D02B               	goto	l6876
  1571  004CEA  5004               	movf	_sensor_distance+3,w,c	;volatile
  1572  004CEC  E129               	bnz	l6876
  1573  004CEE  0E32               	movlw	50
  1574  004CF0  5C03               	subwf	_sensor_distance+2,w,c	;volatile
  1575  004CF2  B0D8               	btfsc	status,0,c
  1576  004CF4  D025               	goto	l6876
  1577                           
  1578                           ;parcheggio.c: 285: counter_distance++;
  1579  004CF6  0100               	movlb	0	; () banked
  1580  004CF8  2BE7               	incf	_counter_distance& (0+255),f,b	;volatile
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;parcheggio.c: 286: if (counter_distance > 1) {
  1584  004CFA  0E01               	movlw	1
  1585  004CFC  0100               	movlb	0	; () banked
  1586  004CFE  65E7               	cpfsgt	_counter_distance& (0+255),b	;volatile
  1587  004D00  D01F               	goto	l6876
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;parcheggio.c: 287: request_sent = 0;
  1591  004D02  9855               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1592                           
  1593                           ; BSR set to: 0
  1594                           
  1595                           ;parcheggio.c: 288: while (!CANisTxReady());
  1596  004D04  D000               	goto	l6872
  1597  004D06                     l6872:
  1598  004D06  ECB9  F02F         	call	_CANisTxReady	;wreg free
  1599  004D0A  0900               	iorlw	0
  1600  004D0C  B4D8               	btfsc	status,2,c
  1601  004D0E  D7FB               	goto	l6872
  1602                           
  1603                           ;parcheggio.c: 289: CANsendMessage(0b00000001001, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1604  004D10  0E09               	movlw	9
  1605  004D12  0100               	movlb	0	; () banked
  1606  004D14  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1607  004D16  0E00               	movlw	0
  1608  004D18  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1609  004D1A  0E00               	movlw	0
  1610  004D1C  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1611  004D1E  0E00               	movlw	0
  1612  004D20  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1613  004D22  0E53               	movlw	low _data
  1614  004D24  0100               	movlb	0	; () banked
  1615  004D26  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1616  004D28  0E01               	movlw	high _data
  1617  004D2A  0100               	movlb	0	; () banked
  1618  004D2C  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1619  004D2E  0E08               	movlw	8
  1620  004D30  0100               	movlb	0	; () banked
  1621  004D32  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1622  004D34  0EFC               	movlw	252
  1623  004D36  0100               	movlb	0	; () banked
  1624  004D38  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1625  004D3A  ECE5  F011         	call	_CANsendMessage	;wreg free
  1626  004D3E  D000               	goto	l6876
  1627  004D40                     l6876:
  1628                           
  1629                           ;parcheggio.c: 290: }
  1630                           ;parcheggio.c: 291: }
  1631                           ;parcheggio.c: 293: if (distance_received == 1) {
  1632  004D40  AC54               	btfss	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1633  004D42  D050               	goto	l734
  1634                           
  1635                           ;parcheggio.c: 294: if (distance_average > 65) {
  1636  004D44  5016               	movf	_distance_average+1,w,c	;volatile
  1637  004D46  E104               	bnz	u8580
  1638  004D48  0E42               	movlw	66
  1639  004D4A  5C15               	subwf	_distance_average,w,c	;volatile
  1640  004D4C  A0D8               	btfss	status,0,c
  1641  004D4E  D047               	goto	l748
  1642  004D50                     u8580:
  1643                           
  1644                           ;parcheggio.c: 295: PORTBbits.RB5 = 1;
  1645  004D50  8A81               	bsf	3969,5,c	;volatile
  1646                           
  1647                           ;parcheggio.c: 296: data[0] = 1;
  1648  004D52  0E01               	movlw	1
  1649  004D54  0101               	movlb	1	; () banked
  1650  004D56  6F53               	movwf	_data& (0+255),b	;volatile
  1651                           
  1652                           ; BSR set to: 1
  1653                           ;parcheggio.c: 297: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  1654  004D58  0E0D               	movlw	13
  1655  004D5A  0100               	movlb	0	; () banked
  1656  004D5C  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1657  004D5E  0E00               	movlw	0
  1658  004D60  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1659  004D62  0E00               	movlw	0
  1660  004D64  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1661  004D66  0E00               	movlw	0
  1662  004D68  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1663  004D6A  0E53               	movlw	low _data
  1664  004D6C  0100               	movlb	0	; () banked
  1665  004D6E  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1666  004D70  0E01               	movlw	high _data
  1667  004D72  0100               	movlb	0	; () banked
  1668  004D74  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1669  004D76  0E01               	movlw	1
  1670  004D78  0100               	movlb	0	; () banked
  1671  004D7A  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1672  004D7C  0EBC               	movlw	188
  1673  004D7E  0100               	movlb	0	; () banked
  1674  004D80  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1675  004D82  ECE5  F011         	call	_CANsendMessage	;wreg free
  1676                           
  1677                           ;parcheggio.c: 298: if ((request_sent1 == 0)&&(sensor_distance[0] < 40)) {
  1678  004D86  BA55               	btfsc	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1679  004D88  D02D               	goto	l734
  1680  004D8A  5002               	movf	_sensor_distance+1,w,c	;volatile
  1681  004D8C  E12B               	bnz	l734
  1682  004D8E  0E28               	movlw	40
  1683  004D90  5C01               	subwf	_sensor_distance,w,c	;volatile
  1684  004D92  B0D8               	btfsc	status,0,c
  1685  004D94  D027               	goto	l734
  1686                           
  1687                           ;parcheggio.c: 299: data_test[0] = 50;
  1688  004D96  0E32               	movlw	50
  1689  004D98  0101               	movlb	1	; () banked
  1690  004D9A  6F73               	movwf	_data_test& (0+255),b	;volatile
  1691                           
  1692                           ; BSR set to: 1
  1693                           ;parcheggio.c: 300: asd = 1;
  1694  004D9C  8454               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  1695                           
  1696                           ; BSR set to: 1
  1697                           
  1698                           ;parcheggio.c: 301: while (!CANisTxReady());
  1699  004D9E  D000               	goto	l6894
  1700  004DA0                     l6894:
  1701  004DA0  ECB9  F02F         	call	_CANisTxReady	;wreg free
  1702  004DA4  0900               	iorlw	0
  1703  004DA6  B4D8               	btfsc	status,2,c
  1704  004DA8  D7FB               	goto	l6894
  1705                           
  1706                           ;parcheggio.c: 302: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1707  004DAA  0E0F               	movlw	15
  1708  004DAC  0100               	movlb	0	; () banked
  1709  004DAE  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1710  004DB0  0E00               	movlw	0
  1711  004DB2  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1712  004DB4  0E00               	movlw	0
  1713  004DB6  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1714  004DB8  0E00               	movlw	0
  1715  004DBA  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1716  004DBC  0E73               	movlw	low _data_test
  1717  004DBE  0100               	movlb	0	; () banked
  1718  004DC0  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1719  004DC2  0E01               	movlw	high _data_test
  1720  004DC4  0100               	movlb	0	; () banked
  1721  004DC6  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1722  004DC8  0E08               	movlw	8
  1723  004DCA  0100               	movlb	0	; () banked
  1724  004DCC  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1725  004DCE  0EBC               	movlw	188
  1726  004DD0  0100               	movlb	0	; () banked
  1727  004DD2  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1728  004DD4  ECE5  F011         	call	_CANsendMessage	;wreg free
  1729                           
  1730                           ;parcheggio.c: 304: distance_received1 = 0;
  1731  004DD8  9E54               	bcf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
  1732                           
  1733                           ;parcheggio.c: 305: request_sent1 = 1;
  1734  004DDA  8A55               	bsf	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1735                           
  1736                           ;parcheggio.c: 306: }
  1737                           ;parcheggio.c: 307: } else {
  1738  004DDC  D003               	goto	l734
  1739  004DDE                     l748:
  1740                           
  1741                           ;parcheggio.c: 308: distance_received = 0;
  1742  004DDE  9C54               	bcf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1743                           
  1744                           ;parcheggio.c: 309: PORTBbits.RB5 = 0;
  1745  004DE0  9A81               	bcf	3969,5,c	;volatile
  1746  004DE2  D000               	goto	l734
  1747  004DE4                     l734:
  1748  004DE4  A254               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1749  004DE6  0012               	return	
  1750  004DE8  BA81               	btfsc	3969,5,c	;volatile
  1751  004DEA  0012               	return	
  1752  004DEC  D723               	goto	l6842
  1753  004DEE  0012               	return	
  1754  004DF0  0012               	return		;funcret
  1755  004DF2                     __end_of_park_search:
  1756                           	opt stack 0
  1757                           tblptru	equ	0xFF8
  1758                           tblptrh	equ	0xFF7
  1759                           tblptrl	equ	0xFF6
  1760                           tablat	equ	0xFF5
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           postinc2	equ	0xFDE
  1764                           postdec2	equ	0xFDD
  1765                           status	equ	0xFD8
  1766                           
  1767 ;; *************** function _park_routine *****************
  1768 ;; Defined at:
  1769 ;;		line 315 in file "parcheggio.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;  raggio          4   93[BANK1 ] const float 
  1774 ;;  larghezza       4   89[BANK1 ] const float 
  1775 ;; Return value:  Size  Location     Type
  1776 ;;		None               void
  1777 ;; Registers used:
  1778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1779 ;; Tracked objects:
  1780 ;;		On entry : 0/0
  1781 ;;		On exit  : 0/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1785 ;;      Locals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  1786 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  1787 ;;      Totals:         0       0      40       0       0       0       0       0       0       0       0       0       
      +0       0
  1788 ;;Total ram usage:       40 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; Hardware stack levels required when called:   11
  1791 ;; This function calls:
  1792 ;;		_CANisTxReady
  1793 ;;		_CANsendMessage
  1794 ;;		___fladd
  1795 ;;		___fldiv
  1796 ;;		___flmul
  1797 ;;		___flneg
  1798 ;;		___fltol
  1799 ;;		___lwtofl
  1800 ;;		_asin
  1801 ;;		_can_send
  1802 ;;		_cos
  1803 ;;		_delay_ms
  1804 ;;		_delay_s
  1805 ;;		_parallelo
  1806 ;; This function is called by:
  1807 ;;		_main
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text2
  1812  000D52                     __ptext2:
  1813                           	opt stack 0
  1814  000D52                     _park_routine:
  1815                           	opt stack 19
  1816                           
  1817                           ;parcheggio.c: 316: avvicinamento = 0;
  1818                           
  1819                           ;incstack = 0
  1820  000D52  9654               	bcf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  1821                           
  1822                           ;parcheggio.c: 317: data_correction[0] = 0;
  1823  000D54  0E00               	movlw	0
  1824  000D56  0101               	movlb	1	; () banked
  1825  000D58  6F5B               	movwf	_data_correction& (0+255),b	;volatile
  1826                           
  1827                           ; BSR set to: 1
  1828                           ;parcheggio.c: 319: parallelo();
  1829  000D5A  ECF4  F022         	call	_parallelo	;wreg free
  1830                           
  1831                           ;parcheggio.c: 321: while ((asd == 1)&&(PORTBbits.RB5 == 1) && (activation == 1)) {
  1832  000D5E  D02F               	goto	l6924
  1833  000D60                     l6910:
  1834                           
  1835                           ;parcheggio.c: 322: delay_ms(50);
  1836  000D60  0E00               	movlw	0
  1837  000D62  0100               	movlb	0	; () banked
  1838  000D64  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1839  000D66  0E32               	movlw	50
  1840  000D68  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1841  000D6A  EC0A  F02F         	call	_delay_ms	;wreg free
  1842                           
  1843                           ;parcheggio.c: 323: PORTBbits.RB6 = ~PORTBbits.RB6;
  1844  000D6E  7C81               	btg	3969,6,c	;volatile
  1845                           
  1846                           ;parcheggio.c: 324: parallelo();
  1847  000D70  ECF4  F022         	call	_parallelo	;wreg free
  1848                           
  1849                           ;parcheggio.c: 325: if (data_correction[0] > 30) {
  1850  000D74  0E1E               	movlw	30
  1851  000D76  0101               	movlb	1	; () banked
  1852  000D78  655B               	cpfsgt	_data_correction& (0+255),b	;volatile
  1853  000D7A  D004               	goto	l6920
  1854                           
  1855                           ; BSR set to: 1
  1856                           ;parcheggio.c: 326: data_correction[0] = 0;
  1857  000D7C  0E00               	movlw	0
  1858  000D7E  0101               	movlb	1	; () banked
  1859  000D80  6F5B               	movwf	_data_correction& (0+255),b	;volatile
  1860                           
  1861                           ; BSR set to: 1
  1862                           
  1863                           ; BSR set to: 1
  1864                           ;parcheggio.c: 327: }
  1865                           ;parcheggio.c: 328: while (!CANisTxReady());
  1866  000D82  D000               	goto	l6920
  1867  000D84                     l6920:
  1868  000D84  ECB9  F02F         	call	_CANisTxReady	;wreg free
  1869  000D88  0900               	iorlw	0
  1870  000D8A  B4D8               	btfsc	status,2,c
  1871  000D8C  D7FB               	goto	l6920
  1872                           
  1873                           ;parcheggio.c: 329: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1874  000D8E  0E10               	movlw	16
  1875  000D90  0100               	movlb	0	; () banked
  1876  000D92  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1877  000D94  0E00               	movlw	0
  1878  000D96  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1879  000D98  0E00               	movlw	0
  1880  000D9A  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1881  000D9C  0E00               	movlw	0
  1882  000D9E  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1883  000DA0  0E5B               	movlw	low _data_correction
  1884  000DA2  0100               	movlb	0	; () banked
  1885  000DA4  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1886  000DA6  0E01               	movlw	high _data_correction
  1887  000DA8  0100               	movlb	0	; () banked
  1888  000DAA  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1889  000DAC  0E08               	movlw	8
  1890  000DAE  0100               	movlb	0	; () banked
  1891  000DB0  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1892  000DB2  0EBC               	movlw	188
  1893  000DB4  0100               	movlb	0	; () banked
  1894  000DB6  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1895  000DB8  ECE5  F011         	call	_CANsendMessage	;wreg free
  1896  000DBC  D000               	goto	l6924
  1897  000DBE                     l6924:
  1898  000DBE  B454               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  1899  000DC0  AA81               	btfss	3969,5,c	;volatile
  1900  000DC2  D002               	goto	l768
  1901  000DC4  B254               	btfsc	_activation/(0+8),_activation& (0+7),c	;volatile
  1902  000DC6  D7CC               	goto	l6910
  1903  000DC8                     l768:
  1904                           
  1905                           ;parcheggio.c: 330: }
  1906                           ;parcheggio.c: 332: if ((PORTBbits.RB5 == 1) && (activation == 1)) {
  1907  000DC8  BA81               	btfsc	3969,5,c	;volatile
  1908  000DCA  A254               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1909  000DCC  D02E               	goto	l6944
  1910                           
  1911                           ;parcheggio.c: 333: PORTBbits.RB6 = 0;
  1912  000DCE  9C81               	bcf	3969,6,c	;volatile
  1913                           
  1914                           ;parcheggio.c: 334: data[0] = 2;
  1915  000DD0  0E02               	movlw	2
  1916  000DD2  0101               	movlb	1	; () banked
  1917  000DD4  6F53               	movwf	_data& (0+255),b	;volatile
  1918                           
  1919                           ; BSR set to: 1
  1920                           ;parcheggio.c: 335: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  1921  000DD6  0E0D               	movlw	13
  1922  000DD8  0100               	movlb	0	; () banked
  1923  000DDA  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1924  000DDC  0E00               	movlw	0
  1925  000DDE  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1926  000DE0  0E00               	movlw	0
  1927  000DE2  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1928  000DE4  0E00               	movlw	0
  1929  000DE6  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1930  000DE8  0E53               	movlw	low _data
  1931  000DEA  0100               	movlb	0	; () banked
  1932  000DEC  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1933  000DEE  0E01               	movlw	high _data
  1934  000DF0  0100               	movlb	0	; () banked
  1935  000DF2  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1936  000DF4  0E01               	movlw	1
  1937  000DF6  0100               	movlb	0	; () banked
  1938  000DF8  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1939  000DFA  0EBC               	movlw	188
  1940  000DFC  0100               	movlb	0	; () banked
  1941  000DFE  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1942  000E00  ECE5  F011         	call	_CANsendMessage	;wreg free
  1943                           
  1944                           ;parcheggio.c: 336: }
  1945                           ;parcheggio.c: 338: while ((start_operation != 1)&&(activation == 1)) {
  1946  000E04  D012               	goto	l6944
  1947  000E06                     l771:
  1948                           
  1949                           ;parcheggio.c: 339: if (first == 0) {
  1950  000E06  B255               	btfsc	_first/(0+8),_first& (0+7),c	;volatile
  1951  000E08  D010               	goto	l6944
  1952                           
  1953                           ;parcheggio.c: 340: set_speed = 0;
  1954  000E0A  0E00               	movlw	0
  1955  000E0C  0100               	movlb	0	; () banked
  1956  000E0E  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  1957  000E10  0E00               	movlw	0
  1958  000E12  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  1959                           
  1960                           ;parcheggio.c: 341: data_steering[0] = 90;
  1961  000E14  0E5A               	movlw	90
  1962  000E16  0101               	movlb	1	; () banked
  1963  000E18  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  1964                           
  1965                           ;parcheggio.c: 342: data_brake [0] = 0;
  1966  000E1A  0E00               	movlw	0
  1967  000E1C  6E24               	movwf	_data_brake,c	;volatile
  1968                           
  1969                           ;parcheggio.c: 343: data_brake [1] = 1;
  1970  000E1E  0E01               	movlw	1
  1971  000E20  6E25               	movwf	_data_brake+1,c	;volatile
  1972                           
  1973                           ; BSR set to: 1
  1974                           ;parcheggio.c: 344: can_send();
  1975  000E22  ECB1  F02A         	call	_can_send	;wreg free
  1976                           
  1977                           ;parcheggio.c: 345: first = 1;
  1978  000E26  8255               	bsf	_first/(0+8),_first& (0+7),c	;volatile
  1979  000E28  D000               	goto	l6944
  1980  000E2A                     l6944:
  1981  000E2A  AC55               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  1982  000E2C  A254               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1983  000E2E  EF46  F00C         	goto	l7110
  1984  000E32  D7E9               	goto	l771
  1985                           
  1986                           ;parcheggio.c: 346: }
  1987                           ;parcheggio.c: 347: }
  1988                           ;parcheggio.c: 349: while ((PORTBbits.RB5 == 1) && (activation == 1)&&(start_operation =
      +                          = 1)) {
  1989  000E34  EF46  F00C         	goto	l7110
  1990  000E38                     l777:
  1991                           
  1992                           ;parcheggio.c: 350: LATBbits.LATB4 = 1;
  1993  000E38  888A               	bsf	3978,4,c	;volatile
  1994                           
  1995                           ;parcheggio.c: 352: bordo = ((sensor_distance[1] + sensor_distance[0]) / 2);
  1996  000E3A  5001               	movf	_sensor_distance,w,c	;volatile
  1997  000E3C  2403               	addwf	_sensor_distance+2,w,c	;volatile
  1998  000E3E  0101               	movlb	1	; () banked
  1999  000E40  6FBC               	movwf	??_park_routine& (0+255),b
  2000  000E42  5002               	movf	_sensor_distance+1,w,c	;volatile
  2001  000E44  2004               	addwfc	_sensor_distance+3,w,c	;volatile
  2002  000E46  0101               	movlb	1	; () banked
  2003  000E48  6FBD               	movwf	(??_park_routine+1)& (0+255),b
  2004  000E4A  90D8               	bcf	status,0,c
  2005  000E4C  0101               	movlb	1	; () banked
  2006  000E4E  31BD               	rrcf	(??_park_routine+1)& (0+255),w,b
  2007  000E50  0101               	movlb	1	; () banked
  2008  000E52  6FBE               	movwf	(??_park_routine+2)& (0+255),b
  2009  000E54  0101               	movlb	1	; () banked
  2010  000E56  31BC               	rrcf	??_park_routine& (0+255),w,b
  2011  000E58  0100               	movlb	0	; () banked
  2012  000E5A  6F81               	movwf	___lwtofl@c& (0+255),b
  2013  000E5C  C1BE  F082         	movff	??_park_routine+2,___lwtofl@c+1
  2014  000E60  EC5F  F02F         	call	___lwtofl	;wreg free
  2015  000E64  C081  F134         	movff	?___lwtofl,_bordo	;volatile
  2016  000E68  C082  F135         	movff	?___lwtofl+1,_bordo+1	;volatile
  2017  000E6C  C083  F136         	movff	?___lwtofl+2,_bordo+2	;volatile
  2018  000E70  C084  F137         	movff	?___lwtofl+3,_bordo+3	;volatile
  2019                           
  2020                           ;parcheggio.c: 353: delay_ms(100);
  2021  000E74  0E00               	movlw	0
  2022  000E76  0100               	movlb	0	; () banked
  2023  000E78  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  2024  000E7A  0E64               	movlw	100
  2025  000E7C  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  2026  000E7E  EC0A  F02F         	call	_delay_ms	;wreg free
  2027                           
  2028                           ;parcheggio.c: 354: bordo = bordo + ((sensor_distance[1] + sensor_distance[0]) / 2);
  2029  000E82  5001               	movf	_sensor_distance,w,c	;volatile
  2030  000E84  2403               	addwf	_sensor_distance+2,w,c	;volatile
  2031  000E86  0101               	movlb	1	; () banked
  2032  000E88  6FBC               	movwf	??_park_routine& (0+255),b
  2033  000E8A  5002               	movf	_sensor_distance+1,w,c	;volatile
  2034  000E8C  2004               	addwfc	_sensor_distance+3,w,c	;volatile
  2035  000E8E  0101               	movlb	1	; () banked
  2036  000E90  6FBD               	movwf	(??_park_routine+1)& (0+255),b
  2037  000E92  90D8               	bcf	status,0,c
  2038  000E94  0101               	movlb	1	; () banked
  2039  000E96  31BD               	rrcf	(??_park_routine+1)& (0+255),w,b
  2040  000E98  0101               	movlb	1	; () banked
  2041  000E9A  6FBE               	movwf	(??_park_routine+2)& (0+255),b
  2042  000E9C  0101               	movlb	1	; () banked
  2043  000E9E  31BC               	rrcf	??_park_routine& (0+255),w,b
  2044  000EA0  0100               	movlb	0	; () banked
  2045  000EA2  6F81               	movwf	___lwtofl@c& (0+255),b
  2046  000EA4  C1BE  F082         	movff	??_park_routine+2,___lwtofl@c+1
  2047  000EA8  EC5F  F02F         	call	___lwtofl	;wreg free
  2048  000EAC  C081  F09F         	movff	?___lwtofl,___fladd@f1
  2049  000EB0  C082  F0A0         	movff	?___lwtofl+1,___fladd@f1+1
  2050  000EB4  C083  F0A1         	movff	?___lwtofl+2,___fladd@f1+2
  2051  000EB8  C084  F0A2         	movff	?___lwtofl+3,___fladd@f1+3
  2052  000EBC  C134  F0A3         	movff	_bordo,___fladd@f2	;volatile
  2053  000EC0  C135  F0A4         	movff	_bordo+1,___fladd@f2+1	;volatile
  2054  000EC4  C136  F0A5         	movff	_bordo+2,___fladd@f2+2	;volatile
  2055  000EC8  C137  F0A6         	movff	_bordo+3,___fladd@f2+3	;volatile
  2056  000ECC  EC93  F020         	call	___fladd	;wreg free
  2057  000ED0  C09F  F134         	movff	?___fladd,_bordo	;volatile
  2058  000ED4  C0A0  F135         	movff	?___fladd+1,_bordo+1	;volatile
  2059  000ED8  C0A1  F136         	movff	?___fladd+2,_bordo+2	;volatile
  2060  000EDC  C0A2  F137         	movff	?___fladd+3,_bordo+3	;volatile
  2061                           
  2062                           ;parcheggio.c: 355: bordo = bordo/2;
  2063  000EE0  C134  F090         	movff	_bordo,___fldiv@f1	;volatile
  2064  000EE4  C135  F091         	movff	_bordo+1,___fldiv@f1+1	;volatile
  2065  000EE8  C136  F092         	movff	_bordo+2,___fldiv@f1+2	;volatile
  2066  000EEC  C137  F093         	movff	_bordo+3,___fldiv@f1+3	;volatile
  2067  000EF0  0E00               	movlw	0
  2068  000EF2  0100               	movlb	0	; () banked
  2069  000EF4  6F94               	movwf	___fldiv@f2& (0+255),b
  2070  000EF6  0E00               	movlw	0
  2071  000EF8  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2072  000EFA  0E00               	movlw	0
  2073  000EFC  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2074  000EFE  0E40               	movlw	64
  2075  000F00  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2076  000F02  EC6B  F028         	call	___fldiv	;wreg free
  2077  000F06  C090  F134         	movff	?___fldiv,_bordo	;volatile
  2078  000F0A  C091  F135         	movff	?___fldiv+1,_bordo+1	;volatile
  2079  000F0E  C092  F136         	movff	?___fldiv+2,_bordo+2	;volatile
  2080  000F12  C093  F137         	movff	?___fldiv+3,_bordo+3	;volatile
  2081                           
  2082                           ;parcheggio.c: 356: const float raggio = 56;
  2083  000F16  0E00               	movlw	0
  2084  000F18  0101               	movlb	1	; () banked
  2085  000F1A  6FE0               	movwf	park_routine@raggio& (0+255),b
  2086  000F1C  0E00               	movlw	0
  2087  000F1E  6FE1               	movwf	(park_routine@raggio+1)& (0+255),b
  2088  000F20  0E60               	movlw	96
  2089  000F22  6FE2               	movwf	(park_routine@raggio+2)& (0+255),b
  2090  000F24  0E42               	movlw	66
  2091  000F26  6FE3               	movwf	(park_routine@raggio+3)& (0+255),b
  2092                           
  2093                           ; BSR set to: 1
  2094                           ;parcheggio.c: 357: const float larghezza = 33;
  2095  000F28  0E00               	movlw	0
  2096  000F2A  0101               	movlb	1	; () banked
  2097  000F2C  6FDC               	movwf	park_routine@larghezza& (0+255),b
  2098  000F2E  0E00               	movlw	0
  2099  000F30  6FDD               	movwf	(park_routine@larghezza+1)& (0+255),b
  2100  000F32  0E04               	movlw	4
  2101  000F34  6FDE               	movwf	(park_routine@larghezza+2)& (0+255),b
  2102  000F36  0E42               	movlw	66
  2103  000F38  6FDF               	movwf	(park_routine@larghezza+3)& (0+255),b
  2104                           
  2105                           ; BSR set to: 1
  2106                           ;parcheggio.c: 358: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2107  000F3A  C134  F0A3         	movff	_bordo,___fladd@f2	;volatile
  2108  000F3E  C135  F0A4         	movff	_bordo+1,___fladd@f2+1	;volatile
  2109  000F42  C136  F0A5         	movff	_bordo+2,___fladd@f2+2	;volatile
  2110  000F46  C137  F0A6         	movff	_bordo+3,___fladd@f2+3	;volatile
  2111  000F4A  0E00               	movlw	0
  2112  000F4C  0100               	movlb	0	; () banked
  2113  000F4E  6F94               	movwf	___fldiv@f2& (0+255),b
  2114  000F50  0E00               	movlw	0
  2115  000F52  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2116  000F54  0E00               	movlw	0
  2117  000F56  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2118  000F58  0E40               	movlw	64
  2119  000F5A  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2120  000F5C  C1DC  F090         	movff	park_routine@larghezza,___fldiv@f1
  2121  000F60  C1DD  F091         	movff	park_routine@larghezza+1,___fldiv@f1+1
  2122  000F64  C1DE  F092         	movff	park_routine@larghezza+2,___fldiv@f1+2
  2123  000F68  C1DF  F093         	movff	park_routine@larghezza+3,___fldiv@f1+3
  2124  000F6C  EC6B  F028         	call	___fldiv	;wreg free
  2125  000F70  C090  F09F         	movff	?___fldiv,___fladd@f1
  2126  000F74  C091  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  2127  000F78  C092  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  2128  000F7C  C093  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  2129  000F80  EC93  F020         	call	___fladd	;wreg free
  2130  000F84  C09F  F0AB         	movff	?___fladd,___flneg@f1
  2131  000F88  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  2132  000F8C  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  2133  000F90  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  2134  000F94  ECEC  F02E         	call	___flneg	;wreg free
  2135  000F98  C0AB  F1D0         	movff	?___flneg,_park_routine$3664
  2136  000F9C  C0AC  F1D1         	movff	?___flneg+1,_park_routine$3664+1
  2137  000FA0  C0AD  F1D2         	movff	?___flneg+2,_park_routine$3664+2
  2138  000FA4  C0AE  F1D3         	movff	?___flneg+3,_park_routine$3664+3
  2139                           
  2140                           ;parcheggio.c: 358: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2141  000FA8  C1D0  F0A3         	movff	_park_routine$3664,___fladd@f2
  2142  000FAC  C1D1  F0A4         	movff	_park_routine$3664+1,___fladd@f2+1
  2143  000FB0  C1D2  F0A5         	movff	_park_routine$3664+2,___fladd@f2+2
  2144  000FB4  C1D3  F0A6         	movff	_park_routine$3664+3,___fladd@f2+3
  2145  000FB8  0E00               	movlw	0
  2146  000FBA  0100               	movlb	0	; () banked
  2147  000FBC  6F85               	movwf	___flmul@f2& (0+255),b
  2148  000FBE  0E00               	movlw	0
  2149  000FC0  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2150  000FC2  0E00               	movlw	0
  2151  000FC4  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2152  000FC6  0E40               	movlw	64
  2153  000FC8  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2154  000FCA  C1E0  F081         	movff	park_routine@raggio,___flmul@f1
  2155  000FCE  C1E1  F082         	movff	park_routine@raggio+1,___flmul@f1+1
  2156  000FD2  C1E2  F083         	movff	park_routine@raggio+2,___flmul@f1+2
  2157  000FD6  C1E3  F084         	movff	park_routine@raggio+3,___flmul@f1+3
  2158  000FDA  ECB9  F027         	call	___flmul	;wreg free
  2159  000FDE  C081  F09F         	movff	?___flmul,___fladd@f1
  2160  000FE2  C082  F0A0         	movff	?___flmul+1,___fladd@f1+1
  2161  000FE6  C083  F0A1         	movff	?___flmul+2,___fladd@f1+2
  2162  000FEA  C084  F0A2         	movff	?___flmul+3,___fladd@f1+3
  2163  000FEE  EC93  F020         	call	___fladd	;wreg free
  2164  000FF2  C09F  F1D4         	movff	?___fladd,_park_routine$3665
  2165  000FF6  C0A0  F1D5         	movff	?___fladd+1,_park_routine$3665+1
  2166  000FFA  C0A1  F1D6         	movff	?___fladd+2,_park_routine$3665+2
  2167  000FFE  C0A2  F1D7         	movff	?___fladd+3,_park_routine$3665+3
  2168                           
  2169                           ;parcheggio.c: 358: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2170  001002  0E00               	movlw	0
  2171  001004  0100               	movlb	0	; () banked
  2172  001006  6F94               	movwf	___fldiv@f2& (0+255),b
  2173  001008  0E00               	movlw	0
  2174  00100A  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2175  00100C  0E00               	movlw	0
  2176  00100E  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2177  001010  0E40               	movlw	64
  2178  001012  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2179  001014  C1DC  F090         	movff	park_routine@larghezza,___fldiv@f1
  2180  001018  C1DD  F091         	movff	park_routine@larghezza+1,___fldiv@f1+1
  2181  00101C  C1DE  F092         	movff	park_routine@larghezza+2,___fldiv@f1+2
  2182  001020  C1DF  F093         	movff	park_routine@larghezza+3,___fldiv@f1+3
  2183  001024  EC6B  F028         	call	___fldiv	;wreg free
  2184  001028  C090  F0AB         	movff	?___fldiv,___flneg@f1
  2185  00102C  C091  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  2186  001030  C092  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  2187  001034  C093  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  2188  001038  ECEC  F02E         	call	___flneg	;wreg free
  2189  00103C  C0AB  F0A3         	movff	?___flneg,___fladd@f2
  2190  001040  C0AC  F0A4         	movff	?___flneg+1,___fladd@f2+1
  2191  001044  C0AD  F0A5         	movff	?___flneg+2,___fladd@f2+2
  2192  001048  C0AE  F0A6         	movff	?___flneg+3,___fladd@f2+3
  2193  00104C  C1D4  F09F         	movff	_park_routine$3665,___fladd@f1
  2194  001050  C1D5  F0A0         	movff	_park_routine$3665+1,___fladd@f1+1
  2195  001054  C1D6  F0A1         	movff	_park_routine$3665+2,___fladd@f1+2
  2196  001058  C1D7  F0A2         	movff	_park_routine$3665+3,___fladd@f1+3
  2197  00105C  EC93  F020         	call	___fladd	;wreg free
  2198  001060  C09F  F1C0         	movff	?___fladd,_park_routine$3666
  2199  001064  C0A0  F1C1         	movff	?___fladd+1,_park_routine$3666+1
  2200  001068  C0A1  F1C2         	movff	?___fladd+2,_park_routine$3666+2
  2201  00106C  C0A2  F1C3         	movff	?___fladd+3,_park_routine$3666+3
  2202                           
  2203                           ;parcheggio.c: 358: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2204  001070  C1C0  F090         	movff	_park_routine$3666,___fldiv@f1
  2205  001074  C1C1  F091         	movff	_park_routine$3666+1,___fldiv@f1+1
  2206  001078  C1C2  F092         	movff	_park_routine$3666+2,___fldiv@f1+2
  2207  00107C  C1C3  F093         	movff	_park_routine$3666+3,___fldiv@f1+3
  2208  001080  0E00               	movlw	0
  2209  001082  0100               	movlb	0	; () banked
  2210  001084  6F85               	movwf	___flmul@f2& (0+255),b
  2211  001086  0E00               	movlw	0
  2212  001088  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2213  00108A  0E00               	movlw	0
  2214  00108C  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2215  00108E  0E40               	movlw	64
  2216  001090  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2217  001092  C1E0  F081         	movff	park_routine@raggio,___flmul@f1
  2218  001096  C1E1  F082         	movff	park_routine@raggio+1,___flmul@f1+1
  2219  00109A  C1E2  F083         	movff	park_routine@raggio+2,___flmul@f1+2
  2220  00109E  C1E3  F084         	movff	park_routine@raggio+3,___flmul@f1+3
  2221  0010A2  ECB9  F027         	call	___flmul	;wreg free
  2222  0010A6  C081  F094         	movff	?___flmul,___fldiv@f2
  2223  0010AA  C082  F095         	movff	?___flmul+1,___fldiv@f2+1
  2224  0010AE  C083  F096         	movff	?___flmul+2,___fldiv@f2+2
  2225  0010B2  C084  F097         	movff	?___flmul+3,___fldiv@f2+3
  2226  0010B6  EC6B  F028         	call	___fldiv	;wreg free
  2227  0010BA  C090  F1C4         	movff	?___fldiv,_park_routine$3667
  2228  0010BE  C091  F1C5         	movff	?___fldiv+1,_park_routine$3667+1
  2229  0010C2  C092  F1C6         	movff	?___fldiv+2,_park_routine$3667+2
  2230  0010C6  C093  F1C7         	movff	?___fldiv+3,_park_routine$3667+3
  2231                           
  2232                           ;parcheggio.c: 358: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2233  0010CA  C1C4  F198         	movff	_park_routine$3667,asin@x
  2234  0010CE  C1C5  F199         	movff	_park_routine$3667+1,asin@x+1
  2235  0010D2  C1C6  F19A         	movff	_park_routine$3667+2,asin@x+2
  2236  0010D6  C1C7  F19B         	movff	_park_routine$3667+3,asin@x+3
  2237  0010DA  EC73  F01D         	call	_asin	;wreg free
  2238  0010DE  C198  F12C         	movff	?_asin,_alfa	;volatile
  2239  0010E2  C199  F12D         	movff	?_asin+1,_alfa+1	;volatile
  2240  0010E6  C19A  F12E         	movff	?_asin+2,_alfa+2	;volatile
  2241  0010EA  C19B  F12F         	movff	?_asin+3,_alfa+3	;volatile
  2242                           
  2243                           ;parcheggio.c: 359: alfa = alfa / 3.14159265358979323846 * 180;
  2244  0010EE  0EDB               	movlw	219
  2245  0010F0  0100               	movlb	0	; () banked
  2246  0010F2  6F94               	movwf	___fldiv@f2& (0+255),b
  2247  0010F4  0E0F               	movlw	15
  2248  0010F6  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2249  0010F8  0E49               	movlw	73
  2250  0010FA  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2251  0010FC  0E40               	movlw	64
  2252  0010FE  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2253  001100  C12C  F090         	movff	_alfa,___fldiv@f1	;volatile
  2254  001104  C12D  F091         	movff	_alfa+1,___fldiv@f1+1	;volatile
  2255  001108  C12E  F092         	movff	_alfa+2,___fldiv@f1+2	;volatile
  2256  00110C  C12F  F093         	movff	_alfa+3,___fldiv@f1+3	;volatile
  2257  001110  EC6B  F028         	call	___fldiv	;wreg free
  2258  001114  C090  F081         	movff	?___fldiv,___flmul@f1
  2259  001118  C091  F082         	movff	?___fldiv+1,___flmul@f1+1
  2260  00111C  C092  F083         	movff	?___fldiv+2,___flmul@f1+2
  2261  001120  C093  F084         	movff	?___fldiv+3,___flmul@f1+3
  2262  001124  0E00               	movlw	0
  2263  001126  0100               	movlb	0	; () banked
  2264  001128  6F85               	movwf	___flmul@f2& (0+255),b
  2265  00112A  0E00               	movlw	0
  2266  00112C  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2267  00112E  0E34               	movlw	52
  2268  001130  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2269  001132  0E43               	movlw	67
  2270  001134  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2271  001136  ECB9  F027         	call	___flmul	;wreg free
  2272  00113A  C081  F12C         	movff	?___flmul,_alfa	;volatile
  2273  00113E  C082  F12D         	movff	?___flmul+1,_alfa+1	;volatile
  2274  001142  C083  F12E         	movff	?___flmul+2,_alfa+2	;volatile
  2275  001146  C084  F12F         	movff	?___flmul+3,_alfa+3	;volatile
  2276                           
  2277                           ;parcheggio.c: 360: beta = 90 - alfa;
  2278  00114A  C12C  F0AB         	movff	_alfa,___flneg@f1	;volatile
  2279  00114E  C12D  F0AC         	movff	_alfa+1,___flneg@f1+1	;volatile
  2280  001152  C12E  F0AD         	movff	_alfa+2,___flneg@f1+2	;volatile
  2281  001156  C12F  F0AE         	movff	_alfa+3,___flneg@f1+3	;volatile
  2282  00115A  ECEC  F02E         	call	___flneg	;wreg free
  2283  00115E  C0AB  F09F         	movff	?___flneg,___fladd@f1
  2284  001162  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  2285  001166  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  2286  00116A  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  2287  00116E  0E00               	movlw	0
  2288  001170  0100               	movlb	0	; () banked
  2289  001172  6FA3               	movwf	___fladd@f2& (0+255),b
  2290  001174  0E00               	movlw	0
  2291  001176  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2292  001178  0EB4               	movlw	180
  2293  00117A  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2294  00117C  0E42               	movlw	66
  2295  00117E  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2296  001180  EC93  F020         	call	___fladd	;wreg free
  2297  001184  C09F  F130         	movff	?___fladd,_beta	;volatile
  2298  001188  C0A0  F131         	movff	?___fladd+1,_beta+1	;volatile
  2299  00118C  C0A1  F132         	movff	?___fladd+2,_beta+2	;volatile
  2300  001190  C0A2  F133         	movff	?___fladd+3,_beta+3	;volatile
  2301                           
  2302                           ;parcheggio.c: 361: alfa = (alfa * 3.14159265358979323846) / 180;
  2303  001194  0EDB               	movlw	219
  2304  001196  0100               	movlb	0	; () banked
  2305  001198  6F85               	movwf	___flmul@f2& (0+255),b
  2306  00119A  0E0F               	movlw	15
  2307  00119C  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2308  00119E  0E49               	movlw	73
  2309  0011A0  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2310  0011A2  0E40               	movlw	64
  2311  0011A4  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2312  0011A6  C12C  F081         	movff	_alfa,___flmul@f1	;volatile
  2313  0011AA  C12D  F082         	movff	_alfa+1,___flmul@f1+1	;volatile
  2314  0011AE  C12E  F083         	movff	_alfa+2,___flmul@f1+2	;volatile
  2315  0011B2  C12F  F084         	movff	_alfa+3,___flmul@f1+3	;volatile
  2316  0011B6  ECB9  F027         	call	___flmul	;wreg free
  2317  0011BA  C081  F090         	movff	?___flmul,___fldiv@f1
  2318  0011BE  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  2319  0011C2  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  2320  0011C6  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  2321  0011CA  0E00               	movlw	0
  2322  0011CC  0100               	movlb	0	; () banked
  2323  0011CE  6F94               	movwf	___fldiv@f2& (0+255),b
  2324  0011D0  0E00               	movlw	0
  2325  0011D2  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2326  0011D4  0E34               	movlw	52
  2327  0011D6  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2328  0011D8  0E43               	movlw	67
  2329  0011DA  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2330  0011DC  EC6B  F028         	call	___fldiv	;wreg free
  2331  0011E0  C090  F12C         	movff	?___fldiv,_alfa	;volatile
  2332  0011E4  C091  F12D         	movff	?___fldiv+1,_alfa+1	;volatile
  2333  0011E8  C092  F12E         	movff	?___fldiv+2,_alfa+2	;volatile
  2334  0011EC  C093  F12F         	movff	?___fldiv+3,_alfa+3	;volatile
  2335                           
  2336                           ;parcheggio.c: 362: n = cos(alfa);
  2337  0011F0  C12C  F1B4         	movff	_alfa,cos@f	;volatile
  2338  0011F4  C12D  F1B5         	movff	_alfa+1,cos@f+1	;volatile
  2339  0011F8  C12E  F1B6         	movff	_alfa+2,cos@f+2	;volatile
  2340  0011FC  C12F  F1B7         	movff	_alfa+3,cos@f+3	;volatile
  2341  001200  ECB4  F02B         	call	_cos	;wreg free
  2342  001204  C1B4  F138         	movff	?_cos,_n	;volatile
  2343  001208  C1B5  F139         	movff	?_cos+1,_n+1	;volatile
  2344  00120C  C1B6  F13A         	movff	?_cos+2,_n+2	;volatile
  2345  001210  C1B7  F13B         	movff	?_cos+3,_n+3	;volatile
  2346                           
  2347                           ;parcheggio.c: 363: n = 2 * raggio *n;
  2348  001214  C138  F085         	movff	_n,___flmul@f2	;volatile
  2349  001218  C139  F086         	movff	_n+1,___flmul@f2+1	;volatile
  2350  00121C  C13A  F087         	movff	_n+2,___flmul@f2+2	;volatile
  2351  001220  C13B  F088         	movff	_n+3,___flmul@f2+3	;volatile
  2352  001224  C1E0  F081         	movff	park_routine@raggio,___flmul@f1
  2353  001228  C1E1  F082         	movff	park_routine@raggio+1,___flmul@f1+1
  2354  00122C  C1E2  F083         	movff	park_routine@raggio+2,___flmul@f1+2
  2355  001230  C1E3  F084         	movff	park_routine@raggio+3,___flmul@f1+3
  2356  001234  ECB9  F027         	call	___flmul	;wreg free
  2357  001238  C081  F1D8         	movff	?___flmul,_park_routine$3668
  2358  00123C  C082  F1D9         	movff	?___flmul+1,_park_routine$3668+1
  2359  001240  C083  F1DA         	movff	?___flmul+2,_park_routine$3668+2
  2360  001244  C084  F1DB         	movff	?___flmul+3,_park_routine$3668+3
  2361                           
  2362                           ;parcheggio.c: 363: n = 2 * raggio *n;
  2363  001248  C1D8  F081         	movff	_park_routine$3668,___flmul@f1
  2364  00124C  C1D9  F082         	movff	_park_routine$3668+1,___flmul@f1+1
  2365  001250  C1DA  F083         	movff	_park_routine$3668+2,___flmul@f1+2
  2366  001254  C1DB  F084         	movff	_park_routine$3668+3,___flmul@f1+3
  2367  001258  0E00               	movlw	0
  2368  00125A  0100               	movlb	0	; () banked
  2369  00125C  6F85               	movwf	___flmul@f2& (0+255),b
  2370  00125E  0E00               	movlw	0
  2371  001260  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2372  001262  0E00               	movlw	0
  2373  001264  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2374  001266  0E40               	movlw	64
  2375  001268  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2376  00126A  ECB9  F027         	call	___flmul	;wreg free
  2377  00126E  C081  F138         	movff	?___flmul,_n	;volatile
  2378  001272  C082  F139         	movff	?___flmul+1,_n+1	;volatile
  2379  001276  C083  F13A         	movff	?___flmul+2,_n+2	;volatile
  2380  00127A  C084  F13B         	movff	?___flmul+3,_n+3	;volatile
  2381                           
  2382                           ;parcheggio.c: 364: prima_sterzata = 2 * 3.14159265358979323846 * raggio * (beta / 360);
  2383  00127E  C1E0  F085         	movff	park_routine@raggio,___flmul@f2
  2384  001282  C1E1  F086         	movff	park_routine@raggio+1,___flmul@f2+1
  2385  001286  C1E2  F087         	movff	park_routine@raggio+2,___flmul@f2+2
  2386  00128A  C1E3  F088         	movff	park_routine@raggio+3,___flmul@f2+3
  2387  00128E  0E00               	movlw	0
  2388  001290  0100               	movlb	0	; () banked
  2389  001292  6F94               	movwf	___fldiv@f2& (0+255),b
  2390  001294  0E00               	movlw	0
  2391  001296  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2392  001298  0EB4               	movlw	180
  2393  00129A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2394  00129C  0E43               	movlw	67
  2395  00129E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2396  0012A0  C130  F090         	movff	_beta,___fldiv@f1	;volatile
  2397  0012A4  C131  F091         	movff	_beta+1,___fldiv@f1+1	;volatile
  2398  0012A8  C132  F092         	movff	_beta+2,___fldiv@f1+2	;volatile
  2399  0012AC  C133  F093         	movff	_beta+3,___fldiv@f1+3	;volatile
  2400  0012B0  EC6B  F028         	call	___fldiv	;wreg free
  2401  0012B4  C090  F081         	movff	?___fldiv,___flmul@f1
  2402  0012B8  C091  F082         	movff	?___fldiv+1,___flmul@f1+1
  2403  0012BC  C092  F083         	movff	?___fldiv+2,___flmul@f1+2
  2404  0012C0  C093  F084         	movff	?___fldiv+3,___flmul@f1+3
  2405  0012C4  ECB9  F027         	call	___flmul	;wreg free
  2406  0012C8  C081  F1D8         	movff	?___flmul,_park_routine$3668
  2407  0012CC  C082  F1D9         	movff	?___flmul+1,_park_routine$3668+1
  2408  0012D0  C083  F1DA         	movff	?___flmul+2,_park_routine$3668+2
  2409  0012D4  C084  F1DB         	movff	?___flmul+3,_park_routine$3668+3
  2410                           
  2411                           ;parcheggio.c: 364: prima_sterzata = 2 * 3.14159265358979323846 * raggio * (beta / 360);
  2412  0012D8  C1D8  F081         	movff	_park_routine$3668,___flmul@f1
  2413  0012DC  C1D9  F082         	movff	_park_routine$3668+1,___flmul@f1+1
  2414  0012E0  C1DA  F083         	movff	_park_routine$3668+2,___flmul@f1+2
  2415  0012E4  C1DB  F084         	movff	_park_routine$3668+3,___flmul@f1+3
  2416  0012E8  0EDB               	movlw	219
  2417  0012EA  0100               	movlb	0	; () banked
  2418  0012EC  6F85               	movwf	___flmul@f2& (0+255),b
  2419  0012EE  0E0F               	movlw	15
  2420  0012F0  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2421  0012F2  0EC9               	movlw	201
  2422  0012F4  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2423  0012F6  0E40               	movlw	64
  2424  0012F8  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2425  0012FA  ECB9  F027         	call	___flmul	;wreg free
  2426  0012FE  C081  F13C         	movff	?___flmul,_prima_sterzata	;volatile
  2427  001302  C082  F13D         	movff	?___flmul+1,_prima_sterzata+1	;volatile
  2428  001306  C083  F13E         	movff	?___flmul+2,_prima_sterzata+2	;volatile
  2429  00130A  C084  F13F         	movff	?___flmul+3,_prima_sterzata+3	;volatile
  2430                           
  2431                           ;parcheggio.c: 365: K_var = raggio + (2 * larghezza / 3);
  2432  00130E  0E00               	movlw	0
  2433  001310  0100               	movlb	0	; () banked
  2434  001312  6F94               	movwf	___fldiv@f2& (0+255),b
  2435  001314  0E00               	movlw	0
  2436  001316  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2437  001318  0E40               	movlw	64
  2438  00131A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2439  00131C  0E40               	movlw	64
  2440  00131E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2441  001320  0E00               	movlw	0
  2442  001322  0100               	movlb	0	; () banked
  2443  001324  6F85               	movwf	___flmul@f2& (0+255),b
  2444  001326  0E00               	movlw	0
  2445  001328  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2446  00132A  0E00               	movlw	0
  2447  00132C  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2448  00132E  0E40               	movlw	64
  2449  001330  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2450  001332  C1DC  F081         	movff	park_routine@larghezza,___flmul@f1
  2451  001336  C1DD  F082         	movff	park_routine@larghezza+1,___flmul@f1+1
  2452  00133A  C1DE  F083         	movff	park_routine@larghezza+2,___flmul@f1+2
  2453  00133E  C1DF  F084         	movff	park_routine@larghezza+3,___flmul@f1+3
  2454  001342  ECB9  F027         	call	___flmul	;wreg free
  2455  001346  C081  F090         	movff	?___flmul,___fldiv@f1
  2456  00134A  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  2457  00134E  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  2458  001352  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  2459  001356  EC6B  F028         	call	___fldiv	;wreg free
  2460  00135A  C090  F09F         	movff	?___fldiv,___fladd@f1
  2461  00135E  C091  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  2462  001362  C092  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  2463  001366  C093  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  2464  00136A  C1E0  F0A3         	movff	park_routine@raggio,___fladd@f2
  2465  00136E  C1E1  F0A4         	movff	park_routine@raggio+1,___fladd@f2+1
  2466  001372  C1E2  F0A5         	movff	park_routine@raggio+2,___fladd@f2+2
  2467  001376  C1E3  F0A6         	movff	park_routine@raggio+3,___fladd@f2+3
  2468  00137A  EC93  F020         	call	___fladd	;wreg free
  2469  00137E  C09F  F124         	movff	?___fladd,_K_var	;volatile
  2470  001382  C0A0  F125         	movff	?___fladd+1,_K_var+1	;volatile
  2471  001386  C0A1  F126         	movff	?___fladd+2,_K_var+2	;volatile
  2472  00138A  C0A2  F127         	movff	?___fladd+3,_K_var+3	;volatile
  2473                           
  2474                           ;parcheggio.c: 366: J_var = raggio - (2 * larghezza / 3);
  2475  00138E  0E00               	movlw	0
  2476  001390  0100               	movlb	0	; () banked
  2477  001392  6F94               	movwf	___fldiv@f2& (0+255),b
  2478  001394  0E00               	movlw	0
  2479  001396  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2480  001398  0E40               	movlw	64
  2481  00139A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2482  00139C  0E40               	movlw	64
  2483  00139E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2484  0013A0  0E00               	movlw	0
  2485  0013A2  0100               	movlb	0	; () banked
  2486  0013A4  6F85               	movwf	___flmul@f2& (0+255),b
  2487  0013A6  0E00               	movlw	0
  2488  0013A8  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2489  0013AA  0E00               	movlw	0
  2490  0013AC  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2491  0013AE  0E40               	movlw	64
  2492  0013B0  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2493  0013B2  C1DC  F081         	movff	park_routine@larghezza,___flmul@f1
  2494  0013B6  C1DD  F082         	movff	park_routine@larghezza+1,___flmul@f1+1
  2495  0013BA  C1DE  F083         	movff	park_routine@larghezza+2,___flmul@f1+2
  2496  0013BE  C1DF  F084         	movff	park_routine@larghezza+3,___flmul@f1+3
  2497  0013C2  ECB9  F027         	call	___flmul	;wreg free
  2498  0013C6  C081  F090         	movff	?___flmul,___fldiv@f1
  2499  0013CA  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  2500  0013CE  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  2501  0013D2  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  2502  0013D6  EC6B  F028         	call	___fldiv	;wreg free
  2503  0013DA  C090  F0AB         	movff	?___fldiv,___flneg@f1
  2504  0013DE  C091  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  2505  0013E2  C092  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  2506  0013E6  C093  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  2507  0013EA  ECEC  F02E         	call	___flneg	;wreg free
  2508  0013EE  C0AB  F09F         	movff	?___flneg,___fladd@f1
  2509  0013F2  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  2510  0013F6  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  2511  0013FA  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  2512  0013FE  C1E0  F0A3         	movff	park_routine@raggio,___fladd@f2
  2513  001402  C1E1  F0A4         	movff	park_routine@raggio+1,___fladd@f2+1
  2514  001406  C1E2  F0A5         	movff	park_routine@raggio+2,___fladd@f2+2
  2515  00140A  C1E3  F0A6         	movff	park_routine@raggio+3,___fladd@f2+3
  2516  00140E  EC93  F020         	call	___fladd	;wreg free
  2517  001412  C09F  F120         	movff	?___fladd,_J_var	;volatile
  2518  001416  C0A0  F121         	movff	?___fladd+1,_J_var+1	;volatile
  2519  00141A  C0A1  F122         	movff	?___fladd+2,_J_var+2	;volatile
  2520  00141E  C0A2  F123         	movff	?___fladd+3,_J_var+3	;volatile
  2521                           
  2522                           ;parcheggio.c: 367: Pmin = K_var * cos(asin((J_var / K_var)));
  2523  001422  C124  F094         	movff	_K_var,___fldiv@f2	;volatile
  2524  001426  C125  F095         	movff	_K_var+1,___fldiv@f2+1	;volatile
  2525  00142A  C126  F096         	movff	_K_var+2,___fldiv@f2+2	;volatile
  2526  00142E  C127  F097         	movff	_K_var+3,___fldiv@f2+3	;volatile
  2527  001432  C120  F090         	movff	_J_var,___fldiv@f1	;volatile
  2528  001436  C121  F091         	movff	_J_var+1,___fldiv@f1+1	;volatile
  2529  00143A  C122  F092         	movff	_J_var+2,___fldiv@f1+2	;volatile
  2530  00143E  C123  F093         	movff	_J_var+3,___fldiv@f1+3	;volatile
  2531  001442  EC6B  F028         	call	___fldiv	;wreg free
  2532  001446  C090  F1C8         	movff	?___fldiv,_park_routine$3669
  2533  00144A  C091  F1C9         	movff	?___fldiv+1,_park_routine$3669+1
  2534  00144E  C092  F1CA         	movff	?___fldiv+2,_park_routine$3669+2
  2535  001452  C093  F1CB         	movff	?___fldiv+3,_park_routine$3669+3
  2536                           
  2537                           ;parcheggio.c: 367: Pmin = K_var * cos(asin((J_var / K_var)));
  2538  001456  C1C8  F198         	movff	_park_routine$3669,asin@x
  2539  00145A  C1C9  F199         	movff	_park_routine$3669+1,asin@x+1
  2540  00145E  C1CA  F19A         	movff	_park_routine$3669+2,asin@x+2
  2541  001462  C1CB  F19B         	movff	_park_routine$3669+3,asin@x+3
  2542  001466  EC73  F01D         	call	_asin	;wreg free
  2543  00146A  C198  F1B4         	movff	?_asin,cos@f
  2544  00146E  C199  F1B5         	movff	?_asin+1,cos@f+1
  2545  001472  C19A  F1B6         	movff	?_asin+2,cos@f+2
  2546  001476  C19B  F1B7         	movff	?_asin+3,cos@f+3
  2547  00147A  ECB4  F02B         	call	_cos	;wreg free
  2548  00147E  C1B4  F1CC         	movff	?_cos,_park_routine$3670
  2549  001482  C1B5  F1CD         	movff	?_cos+1,_park_routine$3670+1
  2550  001486  C1B6  F1CE         	movff	?_cos+2,_park_routine$3670+2
  2551  00148A  C1B7  F1CF         	movff	?_cos+3,_park_routine$3670+3
  2552                           
  2553                           ;parcheggio.c: 367: Pmin = K_var * cos(asin((J_var / K_var)));
  2554  00148E  C1CC  F081         	movff	_park_routine$3670,___flmul@f1
  2555  001492  C1CD  F082         	movff	_park_routine$3670+1,___flmul@f1+1
  2556  001496  C1CE  F083         	movff	_park_routine$3670+2,___flmul@f1+2
  2557  00149A  C1CF  F084         	movff	_park_routine$3670+3,___flmul@f1+3
  2558  00149E  C124  F085         	movff	_K_var,___flmul@f2	;volatile
  2559  0014A2  C125  F086         	movff	_K_var+1,___flmul@f2+1	;volatile
  2560  0014A6  C126  F087         	movff	_K_var+2,___flmul@f2+2	;volatile
  2561  0014AA  C127  F088         	movff	_K_var+3,___flmul@f2+3	;volatile
  2562  0014AE  ECB9  F027         	call	___flmul	;wreg free
  2563  0014B2  C081  F128         	movff	?___flmul,_Pmin	;volatile
  2564  0014B6  C082  F129         	movff	?___flmul+1,_Pmin+1	;volatile
  2565  0014BA  C083  F12A         	movff	?___flmul+2,_Pmin+2	;volatile
  2566  0014BE  C084  F12B         	movff	?___flmul+3,_Pmin+3	;volatile
  2567                           
  2568                           ;parcheggio.c: 369: set_speed = 0;
  2569  0014C2  0E00               	movlw	0
  2570  0014C4  0100               	movlb	0	; () banked
  2571  0014C6  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2572  0014C8  0E00               	movlw	0
  2573  0014CA  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;parcheggio.c: 370: data_steering[0] = 90;
  2577  0014CC  0E5A               	movlw	90
  2578  0014CE  0101               	movlb	1	; () banked
  2579  0014D0  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  2580                           
  2581                           ; BSR set to: 1
  2582                           ;parcheggio.c: 371: data_brake [0] = 0;
  2583  0014D2  0E00               	movlw	0
  2584  0014D4  6E24               	movwf	_data_brake,c	;volatile
  2585                           
  2586                           ; BSR set to: 1
  2587                           ;parcheggio.c: 372: data_brake [1] = 1;
  2588  0014D6  0E01               	movlw	1
  2589  0014D8  6E25               	movwf	_data_brake+1,c	;volatile
  2590                           
  2591                           ; BSR set to: 1
  2592                           ;parcheggio.c: 373: can_send();
  2593  0014DA  ECB1  F02A         	call	_can_send	;wreg free
  2594                           
  2595                           ;parcheggio.c: 375: delay_s(1);
  2596  0014DE  0E01               	movlw	1
  2597  0014E0  EC78  F02F         	call	_delay_s
  2598                           
  2599                           ;parcheggio.c: 377: data_brake [0] = 3;
  2600  0014E4  0E03               	movlw	3
  2601  0014E6  6E24               	movwf	_data_brake,c	;volatile
  2602                           
  2603                           ;parcheggio.c: 378: data_brake [1] = 1;
  2604  0014E8  0E01               	movlw	1
  2605  0014EA  6E25               	movwf	_data_brake+1,c	;volatile
  2606                           
  2607                           ;parcheggio.c: 380: set_speed = 300;
  2608  0014EC  0E01               	movlw	1
  2609  0014EE  0100               	movlb	0	; () banked
  2610  0014F0  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2611  0014F2  0E2C               	movlw	44
  2612  0014F4  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;parcheggio.c: 381: dir = 0;
  2616  0014F6  9854               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;parcheggio.c: 382: data_steering[0] = 90;
  2620  0014F8  0E5A               	movlw	90
  2621  0014FA  0101               	movlb	1	; () banked
  2622  0014FC  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  2623                           
  2624                           ; BSR set to: 1
  2625                           ;parcheggio.c: 383: data_test[0] = ((60 + Pmin + 6)-(n + 15));
  2626  0014FE  0E00               	movlw	0
  2627  001500  0100               	movlb	0	; () banked
  2628  001502  6FA3               	movwf	___fladd@f2& (0+255),b
  2629  001504  0E00               	movlw	0
  2630  001506  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2631  001508  0E70               	movlw	112
  2632  00150A  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2633  00150C  0E41               	movlw	65
  2634  00150E  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2635  001510  C138  F09F         	movff	_n,___fladd@f1	;volatile
  2636  001514  C139  F0A0         	movff	_n+1,___fladd@f1+1	;volatile
  2637  001518  C13A  F0A1         	movff	_n+2,___fladd@f1+2	;volatile
  2638  00151C  C13B  F0A2         	movff	_n+3,___fladd@f1+3	;volatile
  2639  001520  EC93  F020         	call	___fladd	;wreg free
  2640  001524  C09F  F0AB         	movff	?___fladd,___flneg@f1
  2641  001528  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  2642  00152C  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  2643  001530  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  2644  001534  ECEC  F02E         	call	___flneg	;wreg free
  2645  001538  C0AB  F1D0         	movff	?___flneg,_park_routine$3664
  2646  00153C  C0AC  F1D1         	movff	?___flneg+1,_park_routine$3664+1
  2647  001540  C0AD  F1D2         	movff	?___flneg+2,_park_routine$3664+2
  2648  001544  C0AE  F1D3         	movff	?___flneg+3,_park_routine$3664+3
  2649                           
  2650                           ;parcheggio.c: 383: data_test[0] = ((60 + Pmin + 6)-(n + 15));
  2651  001548  C128  F0A3         	movff	_Pmin,___fladd@f2	;volatile
  2652  00154C  C129  F0A4         	movff	_Pmin+1,___fladd@f2+1	;volatile
  2653  001550  C12A  F0A5         	movff	_Pmin+2,___fladd@f2+2	;volatile
  2654  001554  C12B  F0A6         	movff	_Pmin+3,___fladd@f2+3	;volatile
  2655  001558  C1D0  F09F         	movff	_park_routine$3664,___fladd@f1
  2656  00155C  C1D1  F0A0         	movff	_park_routine$3664+1,___fladd@f1+1
  2657  001560  C1D2  F0A1         	movff	_park_routine$3664+2,___fladd@f1+2
  2658  001564  C1D3  F0A2         	movff	_park_routine$3664+3,___fladd@f1+3
  2659  001568  EC93  F020         	call	___fladd	;wreg free
  2660  00156C  C09F  F1D4         	movff	?___fladd,_park_routine$3665
  2661  001570  C0A0  F1D5         	movff	?___fladd+1,_park_routine$3665+1
  2662  001574  C0A1  F1D6         	movff	?___fladd+2,_park_routine$3665+2
  2663  001578  C0A2  F1D7         	movff	?___fladd+3,_park_routine$3665+3
  2664                           
  2665                           ;parcheggio.c: 383: data_test[0] = ((60 + Pmin + 6)-(n + 15));
  2666  00157C  0E00               	movlw	0
  2667  00157E  0100               	movlb	0	; () banked
  2668  001580  6FA3               	movwf	___fladd@f2& (0+255),b
  2669  001582  0E00               	movlw	0
  2670  001584  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2671  001586  0E84               	movlw	132
  2672  001588  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2673  00158A  0E42               	movlw	66
  2674  00158C  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2675  00158E  C1D4  F09F         	movff	_park_routine$3665,___fladd@f1
  2676  001592  C1D5  F0A0         	movff	_park_routine$3665+1,___fladd@f1+1
  2677  001596  C1D6  F0A1         	movff	_park_routine$3665+2,___fladd@f1+2
  2678  00159A  C1D7  F0A2         	movff	_park_routine$3665+3,___fladd@f1+3
  2679  00159E  EC93  F020         	call	___fladd	;wreg free
  2680  0015A2  C09F  F0AF         	movff	?___fladd,___fltol@f1
  2681  0015A6  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  2682  0015AA  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  2683  0015AE  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  2684  0015B2  EC97  F029         	call	___fltol	;wreg free
  2685  0015B6  0100               	movlb	0	; () banked
  2686  0015B8  51AF               	movf	?___fltol& (0+255),w,b
  2687  0015BA  0101               	movlb	1	; () banked
  2688  0015BC  6F73               	movwf	_data_test& (0+255),b	;volatile
  2689                           
  2690                           ; BSR set to: 1
  2691                           ;parcheggio.c: 384: asd = 1;
  2692  0015BE  8454               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2693                           
  2694                           ; BSR set to: 1
  2695                           
  2696                           ;parcheggio.c: 385: while (!CANisTxReady());
  2697  0015C0  D000               	goto	l7026
  2698  0015C2                     l7026:
  2699  0015C2  ECB9  F02F         	call	_CANisTxReady	;wreg free
  2700  0015C6  0900               	iorlw	0
  2701  0015C8  B4D8               	btfsc	status,2,c
  2702  0015CA  D7FB               	goto	l7026
  2703                           
  2704                           ;parcheggio.c: 386: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2705  0015CC  0E0F               	movlw	15
  2706  0015CE  0100               	movlb	0	; () banked
  2707  0015D0  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2708  0015D2  0E00               	movlw	0
  2709  0015D4  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2710  0015D6  0E00               	movlw	0
  2711  0015D8  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2712  0015DA  0E00               	movlw	0
  2713  0015DC  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2714  0015DE  0E73               	movlw	low _data_test
  2715  0015E0  0100               	movlb	0	; () banked
  2716  0015E2  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2717  0015E4  0E01               	movlw	high _data_test
  2718  0015E6  0100               	movlb	0	; () banked
  2719  0015E8  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2720  0015EA  0E08               	movlw	8
  2721  0015EC  0100               	movlb	0	; () banked
  2722  0015EE  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2723  0015F0  0EBC               	movlw	188
  2724  0015F2  0100               	movlb	0	; () banked
  2725  0015F4  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2726  0015F6  ECE5  F011         	call	_CANsendMessage	;wreg free
  2727                           
  2728                           ;parcheggio.c: 387: can_send();
  2729  0015FA  ECB1  F02A         	call	_can_send	;wreg free
  2730                           
  2731                           ;parcheggio.c: 389: while (asd == 1);
  2732  0015FE  D000               	goto	l781
  2733  001600                     l781:
  2734  001600  B454               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2735  001602  D7FE               	goto	l781
  2736                           
  2737                           ;parcheggio.c: 391: set_speed = 0;
  2738  001604  0E00               	movlw	0
  2739  001606  0100               	movlb	0	; () banked
  2740  001608  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2741  00160A  0E00               	movlw	0
  2742  00160C  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2743                           
  2744                           ;parcheggio.c: 392: data_steering[0] = 90;
  2745  00160E  0E5A               	movlw	90
  2746  001610  0101               	movlb	1	; () banked
  2747  001612  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  2748                           
  2749                           ;parcheggio.c: 393: data_brake [0] = 0;
  2750  001614  0E00               	movlw	0
  2751  001616  6E24               	movwf	_data_brake,c	;volatile
  2752                           
  2753                           ;parcheggio.c: 394: data_brake [1] = 1;
  2754  001618  0E01               	movlw	1
  2755  00161A  6E25               	movwf	_data_brake+1,c	;volatile
  2756                           
  2757                           ; BSR set to: 1
  2758                           ;parcheggio.c: 395: can_send();
  2759  00161C  ECB1  F02A         	call	_can_send	;wreg free
  2760                           
  2761                           ;parcheggio.c: 397: delay_s(1);
  2762  001620  0E01               	movlw	1
  2763  001622  EC78  F02F         	call	_delay_s
  2764                           
  2765                           ;parcheggio.c: 399: data_brake [0] = 3;
  2766  001626  0E03               	movlw	3
  2767  001628  6E24               	movwf	_data_brake,c	;volatile
  2768                           
  2769                           ;parcheggio.c: 400: data_brake [1] = 1;
  2770  00162A  0E01               	movlw	1
  2771  00162C  6E25               	movwf	_data_brake+1,c	;volatile
  2772                           
  2773                           ;parcheggio.c: 401: set_speed = 300;
  2774  00162E  0E01               	movlw	1
  2775  001630  0100               	movlb	0	; () banked
  2776  001632  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2777  001634  0E2C               	movlw	44
  2778  001636  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;parcheggio.c: 402: dir = 0;
  2782  001638  9854               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;parcheggio.c: 403: data_steering[0] = 180;
  2786  00163A  0EB4               	movlw	180
  2787  00163C  0101               	movlb	1	; () banked
  2788  00163E  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  2789                           
  2790                           ; BSR set to: 1
  2791                           ;parcheggio.c: 404: data_test[0] = prima_sterzata - 10;
  2792  001640  0E00               	movlw	0
  2793  001642  0100               	movlb	0	; () banked
  2794  001644  6FA3               	movwf	___fladd@f2& (0+255),b
  2795  001646  0E00               	movlw	0
  2796  001648  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2797  00164A  0E20               	movlw	32
  2798  00164C  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2799  00164E  0EC1               	movlw	193
  2800  001650  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2801  001652  C13C  F09F         	movff	_prima_sterzata,___fladd@f1	;volatile
  2802  001656  C13D  F0A0         	movff	_prima_sterzata+1,___fladd@f1+1	;volatile
  2803  00165A  C13E  F0A1         	movff	_prima_sterzata+2,___fladd@f1+2	;volatile
  2804  00165E  C13F  F0A2         	movff	_prima_sterzata+3,___fladd@f1+3	;volatile
  2805  001662  EC93  F020         	call	___fladd	;wreg free
  2806  001666  C09F  F0AF         	movff	?___fladd,___fltol@f1
  2807  00166A  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  2808  00166E  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  2809  001672  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  2810  001676  EC97  F029         	call	___fltol	;wreg free
  2811  00167A  0100               	movlb	0	; () banked
  2812  00167C  51AF               	movf	?___fltol& (0+255),w,b
  2813  00167E  0101               	movlb	1	; () banked
  2814  001680  6F73               	movwf	_data_test& (0+255),b	;volatile
  2815                           
  2816                           ; BSR set to: 1
  2817                           ;parcheggio.c: 405: asd = 1;
  2818  001682  8454               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2819                           
  2820                           ; BSR set to: 1
  2821                           
  2822                           ;parcheggio.c: 406: while (!CANisTxReady());
  2823  001684  D000               	goto	l7050
  2824  001686                     l7050:
  2825  001686  ECB9  F02F         	call	_CANisTxReady	;wreg free
  2826  00168A  0900               	iorlw	0
  2827  00168C  B4D8               	btfsc	status,2,c
  2828  00168E  D7FB               	goto	l7050
  2829                           
  2830                           ;parcheggio.c: 407: CANsendMessage(0b00000001111, data_test, 1, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2831  001690  0E0F               	movlw	15
  2832  001692  0100               	movlb	0	; () banked
  2833  001694  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2834  001696  0E00               	movlw	0
  2835  001698  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2836  00169A  0E00               	movlw	0
  2837  00169C  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2838  00169E  0E00               	movlw	0
  2839  0016A0  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2840  0016A2  0E73               	movlw	low _data_test
  2841  0016A4  0100               	movlb	0	; () banked
  2842  0016A6  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2843  0016A8  0E01               	movlw	high _data_test
  2844  0016AA  0100               	movlb	0	; () banked
  2845  0016AC  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2846  0016AE  0E01               	movlw	1
  2847  0016B0  0100               	movlb	0	; () banked
  2848  0016B2  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2849  0016B4  0EBC               	movlw	188
  2850  0016B6  0100               	movlb	0	; () banked
  2851  0016B8  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2852  0016BA  ECE5  F011         	call	_CANsendMessage	;wreg free
  2853                           
  2854                           ;parcheggio.c: 408: while (!CANisTxReady());
  2855  0016BE  D000               	goto	l7054
  2856  0016C0                     l7054:
  2857  0016C0  ECB9  F02F         	call	_CANisTxReady	;wreg free
  2858  0016C4  0900               	iorlw	0
  2859  0016C6  B4D8               	btfsc	status,2,c
  2860  0016C8  D7FB               	goto	l7054
  2861                           
  2862                           ;parcheggio.c: 409: CANsendMessage(0xAA, data_test, 2, CAN_CONFIG_STD_MSG & CAN_NORMAL_T
      +                          X_FRAME & CAN_TX_PRIORITY_0);
  2863  0016CA  0EAA               	movlw	170
  2864  0016CC  0100               	movlb	0	; () banked
  2865  0016CE  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2866  0016D0  0E00               	movlw	0
  2867  0016D2  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2868  0016D4  0E00               	movlw	0
  2869  0016D6  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2870  0016D8  0E00               	movlw	0
  2871  0016DA  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2872  0016DC  0E73               	movlw	low _data_test
  2873  0016DE  0100               	movlb	0	; () banked
  2874  0016E0  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2875  0016E2  0E01               	movlw	high _data_test
  2876  0016E4  0100               	movlb	0	; () banked
  2877  0016E6  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2878  0016E8  0E02               	movlw	2
  2879  0016EA  0100               	movlb	0	; () banked
  2880  0016EC  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2881  0016EE  0EBC               	movlw	188
  2882  0016F0  0100               	movlb	0	; () banked
  2883  0016F2  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2884  0016F4  ECE5  F011         	call	_CANsendMessage	;wreg free
  2885                           
  2886                           ;parcheggio.c: 410: can_send();
  2887  0016F8  ECB1  F02A         	call	_can_send	;wreg free
  2888                           
  2889                           ;parcheggio.c: 412: while (asd == 1);
  2890  0016FC  D000               	goto	l790
  2891  0016FE                     l790:
  2892  0016FE  B454               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2893  001700  D7FE               	goto	l790
  2894                           
  2895                           ;parcheggio.c: 414: set_speed = 0;
  2896  001702  0E00               	movlw	0
  2897  001704  0100               	movlb	0	; () banked
  2898  001706  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2899  001708  0E00               	movlw	0
  2900  00170A  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2901                           
  2902                           ;parcheggio.c: 415: data_steering[0] = 0;
  2903  00170C  0E00               	movlw	0
  2904  00170E  0101               	movlb	1	; () banked
  2905  001710  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  2906                           
  2907                           ;parcheggio.c: 416: data_brake[0] = 1;
  2908  001712  0E01               	movlw	1
  2909  001714  6E24               	movwf	_data_brake,c	;volatile
  2910                           
  2911                           ; BSR set to: 1
  2912                           ;parcheggio.c: 417: asd = 1;
  2913  001716  8454               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2914                           
  2915                           ; BSR set to: 1
  2916                           ;parcheggio.c: 418: data_test[0] = prima_sterzata + 3;
  2917  001718  0E00               	movlw	0
  2918  00171A  0100               	movlb	0	; () banked
  2919  00171C  6FA3               	movwf	___fladd@f2& (0+255),b
  2920  00171E  0E00               	movlw	0
  2921  001720  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2922  001722  0E40               	movlw	64
  2923  001724  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2924  001726  0E40               	movlw	64
  2925  001728  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2926  00172A  C13C  F09F         	movff	_prima_sterzata,___fladd@f1	;volatile
  2927  00172E  C13D  F0A0         	movff	_prima_sterzata+1,___fladd@f1+1	;volatile
  2928  001732  C13E  F0A1         	movff	_prima_sterzata+2,___fladd@f1+2	;volatile
  2929  001736  C13F  F0A2         	movff	_prima_sterzata+3,___fladd@f1+3	;volatile
  2930  00173A  EC93  F020         	call	___fladd	;wreg free
  2931  00173E  C09F  F0AF         	movff	?___fladd,___fltol@f1
  2932  001742  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  2933  001746  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  2934  00174A  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  2935  00174E  EC97  F029         	call	___fltol	;wreg free
  2936  001752  0100               	movlb	0	; () banked
  2937  001754  51AF               	movf	?___fltol& (0+255),w,b
  2938  001756  0101               	movlb	1	; () banked
  2939  001758  6F73               	movwf	_data_test& (0+255),b	;volatile
  2940                           
  2941                           ; BSR set to: 1
  2942                           
  2943                           ;parcheggio.c: 419: while (!CANisTxReady());
  2944  00175A  D000               	goto	l7064
  2945  00175C                     l7064:
  2946  00175C  ECB9  F02F         	call	_CANisTxReady	;wreg free
  2947  001760  0900               	iorlw	0
  2948  001762  B4D8               	btfsc	status,2,c
  2949  001764  D7FB               	goto	l7064
  2950                           
  2951                           ;parcheggio.c: 420: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2952  001766  0E0F               	movlw	15
  2953  001768  0100               	movlb	0	; () banked
  2954  00176A  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2955  00176C  0E00               	movlw	0
  2956  00176E  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2957  001770  0E00               	movlw	0
  2958  001772  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2959  001774  0E00               	movlw	0
  2960  001776  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2961  001778  0E73               	movlw	low _data_test
  2962  00177A  0100               	movlb	0	; () banked
  2963  00177C  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2964  00177E  0E01               	movlw	high _data_test
  2965  001780  0100               	movlb	0	; () banked
  2966  001782  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2967  001784  0E08               	movlw	8
  2968  001786  0100               	movlb	0	; () banked
  2969  001788  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2970  00178A  0EBC               	movlw	188
  2971  00178C  0100               	movlb	0	; () banked
  2972  00178E  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2973  001790  ECE5  F011         	call	_CANsendMessage	;wreg free
  2974                           
  2975                           ;parcheggio.c: 421: can_send();
  2976  001794  ECB1  F02A         	call	_can_send	;wreg free
  2977                           
  2978                           ;parcheggio.c: 422: delay_s(1);
  2979  001798  0E01               	movlw	1
  2980  00179A  EC78  F02F         	call	_delay_s
  2981                           
  2982                           ;parcheggio.c: 423: set_speed = 200;
  2983  00179E  0E00               	movlw	0
  2984  0017A0  0100               	movlb	0	; () banked
  2985  0017A2  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2986  0017A4  0EC8               	movlw	200
  2987  0017A6  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;parcheggio.c: 424: data_brake[0] = 3;
  2991  0017A8  0E03               	movlw	3
  2992  0017AA  6E24               	movwf	_data_brake,c	;volatile
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;parcheggio.c: 425: can_send();
  2996  0017AC  ECB1  F02A         	call	_can_send	;wreg free
  2997                           
  2998                           ;parcheggio.c: 426: while (asd == 1);
  2999  0017B0  D000               	goto	l796
  3000  0017B2                     l796:
  3001  0017B2  B454               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  3002  0017B4  D7FE               	goto	l796
  3003                           
  3004                           ;parcheggio.c: 428: data_brake [0] = 0;
  3005  0017B6  0E00               	movlw	0
  3006  0017B8  6E24               	movwf	_data_brake,c	;volatile
  3007                           
  3008                           ;parcheggio.c: 429: data_brake [1] = 1;
  3009  0017BA  0E01               	movlw	1
  3010  0017BC  6E25               	movwf	_data_brake+1,c	;volatile
  3011                           
  3012                           ;parcheggio.c: 430: set_speed = 0;
  3013  0017BE  0E00               	movlw	0
  3014  0017C0  0100               	movlb	0	; () banked
  3015  0017C2  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3016  0017C4  0E00               	movlw	0
  3017  0017C6  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3018                           
  3019                           ;parcheggio.c: 431: data_steering[0] = 90;
  3020  0017C8  0E5A               	movlw	90
  3021  0017CA  0101               	movlb	1	; () banked
  3022  0017CC  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3023                           
  3024                           ; BSR set to: 1
  3025                           ;parcheggio.c: 432: can_send();
  3026  0017CE  ECB1  F02A         	call	_can_send	;wreg free
  3027                           
  3028                           ;parcheggio.c: 434: delay_s(1);
  3029  0017D2  0E01               	movlw	1
  3030  0017D4  EC78  F02F         	call	_delay_s
  3031                           
  3032                           ;parcheggio.c: 436: avvicinamento = 1;
  3033  0017D8  8654               	bsf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  3034                           
  3035                           ;parcheggio.c: 437: if (sensor_distance [6] > 20) {
  3036  0017DA  500E               	movf	_sensor_distance+13,w,c	;volatile
  3037  0017DC  E104               	bnz	u8810
  3038  0017DE  0E15               	movlw	21
  3039  0017E0  5C0D               	subwf	_sensor_distance+12,w,c	;volatile
  3040  0017E2  A0D8               	btfss	status,0,c
  3041  0017E4  D018               	goto	l7094
  3042  0017E6                     u8810:
  3043                           
  3044                           ;parcheggio.c: 438: data_brake [0] = 3;
  3045  0017E6  0E03               	movlw	3
  3046  0017E8  6E24               	movwf	_data_brake,c	;volatile
  3047                           
  3048                           ;parcheggio.c: 439: data_brake [1] = 1;
  3049  0017EA  0E01               	movlw	1
  3050  0017EC  6E25               	movwf	_data_brake+1,c	;volatile
  3051                           
  3052                           ;parcheggio.c: 440: set_speed = 300;
  3053  0017EE  0E01               	movlw	1
  3054  0017F0  0100               	movlb	0	; () banked
  3055  0017F2  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3056  0017F4  0E2C               	movlw	44
  3057  0017F6  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3058                           
  3059                           ;parcheggio.c: 441: data_steering[0] = 90;
  3060  0017F8  0E5A               	movlw	90
  3061  0017FA  0101               	movlb	1	; () banked
  3062  0017FC  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3063                           
  3064                           ; BSR set to: 1
  3065                           ;parcheggio.c: 442: dir = 1;
  3066  0017FE  8854               	bsf	_dir/(0+8),_dir& (0+7),c	;volatile
  3067                           
  3068                           ; BSR set to: 1
  3069                           ;parcheggio.c: 443: can_send();
  3070  001800  ECB1  F02A         	call	_can_send	;wreg free
  3071                           
  3072                           ;parcheggio.c: 444: while (sensor_distance [6] > 20);
  3073  001804  D000               	goto	l7092
  3074  001806                     l7092:
  3075  001806  500E               	movf	_sensor_distance+13,w,c	;volatile
  3076  001808  E1FE               	bnz	l7092
  3077  00180A  0E15               	movlw	21
  3078  00180C  5C0D               	subwf	_sensor_distance+12,w,c	;volatile
  3079  00180E  A0D8               	btfss	status,0,c
  3080  001810  D002               	goto	l7094
  3081  001812  D7F9               	goto	l7092
  3082  001814  D000               	goto	l7094
  3083  001816                     l7094:
  3084                           
  3085                           ;parcheggio.c: 445: }
  3086                           ;parcheggio.c: 446: data_brake [0] = 0;
  3087  001816  0E00               	movlw	0
  3088  001818  6E24               	movwf	_data_brake,c	;volatile
  3089                           
  3090                           ;parcheggio.c: 447: data_brake [1] = 1;
  3091  00181A  0E01               	movlw	1
  3092  00181C  6E25               	movwf	_data_brake+1,c	;volatile
  3093                           
  3094                           ;parcheggio.c: 448: set_speed = 0;
  3095  00181E  0E00               	movlw	0
  3096  001820  0100               	movlb	0	; () banked
  3097  001822  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3098  001824  0E00               	movlw	0
  3099  001826  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3100                           
  3101                           ;parcheggio.c: 449: data_steering[0] = 90;
  3102  001828  0E5A               	movlw	90
  3103  00182A  0101               	movlb	1	; () banked
  3104  00182C  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3105                           
  3106                           ; BSR set to: 1
  3107                           ;parcheggio.c: 450: dir = 0;
  3108  00182E  9854               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  3109                           
  3110                           ; BSR set to: 1
  3111                           ;parcheggio.c: 451: can_send();
  3112  001830  ECB1  F02A         	call	_can_send	;wreg free
  3113                           
  3114                           ;parcheggio.c: 453: delay_s(1);
  3115  001834  0E01               	movlw	1
  3116  001836  EC78  F02F         	call	_delay_s
  3117                           
  3118                           ;parcheggio.c: 455: data[0] = 3;
  3119  00183A  0E03               	movlw	3
  3120  00183C  0101               	movlb	1	; () banked
  3121  00183E  6F53               	movwf	_data& (0+255),b	;volatile
  3122                           
  3123                           ; BSR set to: 1
  3124                           
  3125                           ;parcheggio.c: 456: while (!CANisTxReady());
  3126  001840  D000               	goto	l7104
  3127  001842                     l7104:
  3128  001842  ECB9  F02F         	call	_CANisTxReady	;wreg free
  3129  001846  0900               	iorlw	0
  3130  001848  B4D8               	btfsc	status,2,c
  3131  00184A  D7FB               	goto	l7104
  3132                           
  3133                           ;parcheggio.c: 457: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  3134  00184C  0E0D               	movlw	13
  3135  00184E  0100               	movlb	0	; () banked
  3136  001850  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3137  001852  0E00               	movlw	0
  3138  001854  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3139  001856  0E00               	movlw	0
  3140  001858  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3141  00185A  0E00               	movlw	0
  3142  00185C  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3143  00185E  0E53               	movlw	low _data
  3144  001860  0100               	movlb	0	; () banked
  3145  001862  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3146  001864  0E01               	movlw	high _data
  3147  001866  0100               	movlb	0	; () banked
  3148  001868  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3149  00186A  0E08               	movlw	8
  3150  00186C  0100               	movlb	0	; () banked
  3151  00186E  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3152  001870  0EBC               	movlw	188
  3153  001872  0100               	movlb	0	; () banked
  3154  001874  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3155  001876  ECE5  F011         	call	_CANsendMessage	;wreg free
  3156                           
  3157                           ;parcheggio.c: 458: delay_ms(100);
  3158  00187A  0E00               	movlw	0
  3159  00187C  0100               	movlb	0	; () banked
  3160  00187E  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  3161  001880  0E64               	movlw	100
  3162  001882  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  3163  001884  EC0A  F02F         	call	_delay_ms	;wreg free
  3164  001888  00FF               	reset		;# 
  3165  00188A  D000               	goto	l7110
  3166  00188C                     l7110:
  3167  00188C  AA81               	btfss	3969,5,c	;volatile
  3168  00188E  0012               	return	
  3169  001890  A254               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  3170  001892  0012               	return	
  3171  001894  AC55               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  3172  001896  0012               	return	
  3173  001898  EF1C  F007         	goto	l777
  3174  00189C  0012               	return	
  3175  00189E  0012               	return		;funcret
  3176  0018A0                     __end_of_park_routine:
  3177                           	opt stack 0
  3178                           tblptru	equ	0xFF8
  3179                           tblptrh	equ	0xFF7
  3180                           tblptrl	equ	0xFF6
  3181                           tablat	equ	0xFF5
  3182                           postinc0	equ	0xFEE
  3183                           wreg	equ	0xFE8
  3184                           postinc2	equ	0xFDE
  3185                           postdec2	equ	0xFDD
  3186                           status	equ	0xFD8
  3187                           
  3188 ;; *************** function _parallelo *****************
  3189 ;; Defined at:
  3190 ;;		line 486 in file "parcheggio.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;		None
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;		None
  3195 ;; Return value:  Size  Location     Type
  3196 ;;		None               void
  3197 ;; Registers used:
  3198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3206 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3207 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3208 ;;Total ram usage:        2 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:   10
  3211 ;; This function calls:
  3212 ;;		___awtofl
  3213 ;;		___fladd
  3214 ;;		___fldiv
  3215 ;;		___flge
  3216 ;;		___flmul
  3217 ;;		___fltol
  3218 ;;		_abs
  3219 ;;		_asin
  3220 ;;		_can_send
  3221 ;;		_sqrt
  3222 ;; This function is called by:
  3223 ;;		_park_search
  3224 ;;		_park_routine
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           	psect	text3
  3229  0045E8                     __ptext3:
  3230                           	opt stack 0
  3231  0045E8                     _parallelo:
  3232                           	opt stack 19
  3233                           
  3234                           ;parcheggio.c: 487: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  3235                           
  3236                           ;incstack = 0
  3237  0045E8  EE20  F003         	lfsr	2,_sensor_distance+2	;volatile
  3238  0045EC  CFDE F0D5          	movff	postinc2,??_parallelo
  3239  0045F0  CFDD F0D6          	movff	postdec2,??_parallelo+1
  3240  0045F4  0100               	movlb	0	; () banked
  3241  0045F6  1FD5               	comf	??_parallelo& (0+255),f,b
  3242  0045F8  1FD6               	comf	(??_parallelo+1)& (0+255),f,b
  3243  0045FA  4BD5               	infsnz	??_parallelo& (0+255),f,b
  3244  0045FC  2BD6               	incf	(??_parallelo+1)& (0+255),f,b
  3245  0045FE  5001               	movf	_sensor_distance,w,c	;volatile
  3246  004600  0100               	movlb	0	; () banked
  3247  004602  25D5               	addwf	??_parallelo& (0+255),w,b
  3248  004604  0100               	movlb	0	; () banked
  3249  004606  6F77               	movwf	abs@a& (0+255),b
  3250  004608  5002               	movf	_sensor_distance+1,w,c	;volatile
  3251  00460A  0100               	movlb	0	; () banked
  3252  00460C  21D6               	addwfc	(??_parallelo+1)& (0+255),w,b
  3253  00460E  0100               	movlb	0	; () banked
  3254  004610  6F78               	movwf	(abs@a+1)& (0+255),b
  3255  004612  EC8F  F02F         	call	_abs	;wreg free
  3256  004616  C077  F081         	movff	?_abs,___awtofl@c
  3257  00461A  C078  F082         	movff	?_abs+1,___awtofl@c+1
  3258  00461E  ECA7  F02E         	call	___awtofl	;wreg free
  3259  004622  C081  F0D7         	movff	?___awtofl,_alignment_gap	;volatile
  3260  004626  C082  F0D8         	movff	?___awtofl+1,_alignment_gap+1	;volatile
  3261  00462A  C083  F0D9         	movff	?___awtofl+2,_alignment_gap+2	;volatile
  3262  00462E  C084  F0DA         	movff	?___awtofl+3,_alignment_gap+3	;volatile
  3263                           
  3264                           ;parcheggio.c: 488: if (alignment_gap < 30) {
  3265  004632  C0D7  F0B3         	movff	_alignment_gap,___flge@ff1	;volatile
  3266  004636  C0D8  F0B4         	movff	_alignment_gap+1,___flge@ff1+1	;volatile
  3267  00463A  C0D9  F0B5         	movff	_alignment_gap+2,___flge@ff1+2	;volatile
  3268  00463E  C0DA  F0B6         	movff	_alignment_gap+3,___flge@ff1+3	;volatile
  3269  004642  0E00               	movlw	0
  3270  004644  0100               	movlb	0	; () banked
  3271  004646  6FB7               	movwf	___flge@ff2& (0+255),b
  3272  004648  0E00               	movlw	0
  3273  00464A  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  3274  00464C  0EF0               	movlw	240
  3275  00464E  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  3276  004650  0E41               	movlw	65
  3277  004652  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  3278  004654  EC38  F02B         	call	___flge	;wreg free
  3279  004658  0100               	movlb	0	; () banked
  3280  00465A  B0D8               	btfsc	status,0,c
  3281  00465C  D0E8               	goto	l6772
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;parcheggio.c: 489: if ((sensor_distance[0] < 30) && (sensor_distance[1] < 30)) {
  3285  00465E  5002               	movf	_sensor_distance+1,w,c	;volatile
  3286  004660  E103               	bnz	u8421
  3287  004662  0E1E               	movlw	30
  3288  004664  5C01               	subwf	_sensor_distance,w,c	;volatile
  3289  004666  B0D8               	btfsc	status,0,c
  3290  004668                     u8421:
  3291  004668  0012               	return	
  3292                           
  3293                           ; BSR set to: 0
  3294  00466A  5004               	movf	_sensor_distance+3,w,c	;volatile
  3295  00466C  E103               	bnz	u8431
  3296  00466E  0E1E               	movlw	30
  3297  004670  5C03               	subwf	_sensor_distance+2,w,c	;volatile
  3298  004672  B0D8               	btfsc	status,0,c
  3299  004674                     u8431:
  3300  004674  0012               	return	
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;parcheggio.c: 490: x = (((6)*(6)) + ((alignment_gap * alignment_gap)));
  3304  004676  C0D7  F085         	movff	_alignment_gap,___flmul@f2	;volatile
  3305  00467A  C0D8  F086         	movff	_alignment_gap+1,___flmul@f2+1	;volatile
  3306  00467E  C0D9  F087         	movff	_alignment_gap+2,___flmul@f2+2	;volatile
  3307  004682  C0DA  F088         	movff	_alignment_gap+3,___flmul@f2+3	;volatile
  3308  004686  C0D7  F081         	movff	_alignment_gap,___flmul@f1	;volatile
  3309  00468A  C0D8  F082         	movff	_alignment_gap+1,___flmul@f1+1	;volatile
  3310  00468E  C0D9  F083         	movff	_alignment_gap+2,___flmul@f1+2	;volatile
  3311  004692  C0DA  F084         	movff	_alignment_gap+3,___flmul@f1+3	;volatile
  3312  004696  ECB9  F027         	call	___flmul	;wreg free
  3313  00469A  C081  F09F         	movff	?___flmul,___fladd@f1
  3314  00469E  C082  F0A0         	movff	?___flmul+1,___fladd@f1+1
  3315  0046A2  C083  F0A1         	movff	?___flmul+2,___fladd@f1+2
  3316  0046A6  C084  F0A2         	movff	?___flmul+3,___fladd@f1+3
  3317  0046AA  0E00               	movlw	0
  3318  0046AC  0100               	movlb	0	; () banked
  3319  0046AE  6FA3               	movwf	___fladd@f2& (0+255),b
  3320  0046B0  0E00               	movlw	0
  3321  0046B2  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  3322  0046B4  0E10               	movlw	16
  3323  0046B6  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  3324  0046B8  0E42               	movlw	66
  3325  0046BA  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  3326  0046BC  EC93  F020         	call	___fladd	;wreg free
  3327  0046C0  C09F  F0DB         	movff	?___fladd,_x	;volatile
  3328  0046C4  C0A0  F0DC         	movff	?___fladd+1,_x+1	;volatile
  3329  0046C8  C0A1  F0DD         	movff	?___fladd+2,_x+2	;volatile
  3330  0046CC  C0A2  F0DE         	movff	?___fladd+3,_x+3	;volatile
  3331                           
  3332                           ;parcheggio.c: 491: x = sqrt(x);
  3333  0046D0  C0DB  F0D1         	movff	_x,sqrt@y	;volatile
  3334  0046D4  C0DC  F0D2         	movff	_x+1,sqrt@y+1	;volatile
  3335  0046D8  C0DD  F0D3         	movff	_x+2,sqrt@y+2	;volatile
  3336  0046DC  C0DE  F0D4         	movff	_x+3,sqrt@y+3	;volatile
  3337  0046E0  EC1E  F024         	call	_sqrt	;wreg free
  3338  0046E4  C0D1  F0DB         	movff	?_sqrt,_x	;volatile
  3339  0046E8  C0D2  F0DC         	movff	?_sqrt+1,_x+1	;volatile
  3340  0046EC  C0D3  F0DD         	movff	?_sqrt+2,_x+2	;volatile
  3341  0046F0  C0D4  F0DE         	movff	?_sqrt+3,_x+3	;volatile
  3342                           
  3343                           ;parcheggio.c: 492: z = alignment_gap / x;
  3344  0046F4  C0D7  F090         	movff	_alignment_gap,___fldiv@f1	;volatile
  3345  0046F8  C0D8  F091         	movff	_alignment_gap+1,___fldiv@f1+1	;volatile
  3346  0046FC  C0D9  F092         	movff	_alignment_gap+2,___fldiv@f1+2	;volatile
  3347  004700  C0DA  F093         	movff	_alignment_gap+3,___fldiv@f1+3	;volatile
  3348  004704  C0DB  F094         	movff	_x,___fldiv@f2	;volatile
  3349  004708  C0DC  F095         	movff	_x+1,___fldiv@f2+1	;volatile
  3350  00470C  C0DD  F096         	movff	_x+2,___fldiv@f2+2	;volatile
  3351  004710  C0DE  F097         	movff	_x+3,___fldiv@f2+3	;volatile
  3352  004714  EC6B  F028         	call	___fldiv	;wreg free
  3353  004718  C090  F0DF         	movff	?___fldiv,_z	;volatile
  3354  00471C  C091  F0E0         	movff	?___fldiv+1,_z+1	;volatile
  3355  004720  C092  F0E1         	movff	?___fldiv+2,_z+2	;volatile
  3356  004724  C093  F0E2         	movff	?___fldiv+3,_z+3	;volatile
  3357                           
  3358                           ;parcheggio.c: 493: z = asin(z);
  3359  004728  C0DF  F198         	movff	_z,asin@x	;volatile
  3360  00472C  C0E0  F199         	movff	_z+1,asin@x+1	;volatile
  3361  004730  C0E1  F19A         	movff	_z+2,asin@x+2	;volatile
  3362  004734  C0E2  F19B         	movff	_z+3,asin@x+3	;volatile
  3363  004738  EC73  F01D         	call	_asin	;wreg free
  3364  00473C  C198  F0DF         	movff	?_asin,_z	;volatile
  3365  004740  C199  F0E0         	movff	?_asin+1,_z+1	;volatile
  3366  004744  C19A  F0E1         	movff	?_asin+2,_z+2	;volatile
  3367  004748  C19B  F0E2         	movff	?_asin+3,_z+3	;volatile
  3368                           
  3369                           ;parcheggio.c: 494: z = z / 3.14159265358979323846 * 180;
  3370  00474C  0EDB               	movlw	219
  3371  00474E  0100               	movlb	0	; () banked
  3372  004750  6F94               	movwf	___fldiv@f2& (0+255),b
  3373  004752  0E0F               	movlw	15
  3374  004754  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  3375  004756  0E49               	movlw	73
  3376  004758  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  3377  00475A  0E40               	movlw	64
  3378  00475C  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  3379  00475E  C0DF  F090         	movff	_z,___fldiv@f1	;volatile
  3380  004762  C0E0  F091         	movff	_z+1,___fldiv@f1+1	;volatile
  3381  004766  C0E1  F092         	movff	_z+2,___fldiv@f1+2	;volatile
  3382  00476A  C0E2  F093         	movff	_z+3,___fldiv@f1+3	;volatile
  3383  00476E  EC6B  F028         	call	___fldiv	;wreg free
  3384  004772  C090  F081         	movff	?___fldiv,___flmul@f1
  3385  004776  C091  F082         	movff	?___fldiv+1,___flmul@f1+1
  3386  00477A  C092  F083         	movff	?___fldiv+2,___flmul@f1+2
  3387  00477E  C093  F084         	movff	?___fldiv+3,___flmul@f1+3
  3388  004782  0E00               	movlw	0
  3389  004784  0100               	movlb	0	; () banked
  3390  004786  6F85               	movwf	___flmul@f2& (0+255),b
  3391  004788  0E00               	movlw	0
  3392  00478A  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  3393  00478C  0E34               	movlw	52
  3394  00478E  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  3395  004790  0E43               	movlw	67
  3396  004792  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  3397  004794  ECB9  F027         	call	___flmul	;wreg free
  3398  004798  C081  F0DF         	movff	?___flmul,_z	;volatile
  3399  00479C  C082  F0E0         	movff	?___flmul+1,_z+1	;volatile
  3400  0047A0  C083  F0E1         	movff	?___flmul+2,_z+2	;volatile
  3401  0047A4  C084  F0E2         	movff	?___flmul+3,_z+3	;volatile
  3402                           
  3403                           ;parcheggio.c: 495: data_correction[0] = z;
  3404  0047A8  C0DF  F0AF         	movff	_z,___fltol@f1	;volatile
  3405  0047AC  C0E0  F0B0         	movff	_z+1,___fltol@f1+1	;volatile
  3406  0047B0  C0E1  F0B1         	movff	_z+2,___fltol@f1+2	;volatile
  3407  0047B4  C0E2  F0B2         	movff	_z+3,___fltol@f1+3	;volatile
  3408  0047B8  EC97  F029         	call	___fltol	;wreg free
  3409  0047BC  0100               	movlb	0	; () banked
  3410  0047BE  51AF               	movf	?___fltol& (0+255),w,b
  3411  0047C0  0101               	movlb	1	; () banked
  3412  0047C2  6F5B               	movwf	_data_correction& (0+255),b	;volatile
  3413                           
  3414                           ; BSR set to: 1
  3415                           ;parcheggio.c: 497: if (sensor_distance[0] < sensor_distance[1]) {
  3416  0047C4  5003               	movf	_sensor_distance+2,w,c	;volatile
  3417  0047C6  5C01               	subwf	_sensor_distance,w,c	;volatile
  3418  0047C8  5004               	movf	_sensor_distance+3,w,c	;volatile
  3419  0047CA  5802               	subwfb	_sensor_distance+1,w,c	;volatile
  3420  0047CC  B0D8               	btfsc	status,0,c
  3421  0047CE  D002               	goto	l6764
  3422                           
  3423                           ; BSR set to: 1
  3424                           ;parcheggio.c: 498: data_correction[1] = 0;
  3425  0047D0  0E00               	movlw	0
  3426  0047D2  D001               	goto	L1
  3427  0047D4                     l6764:
  3428                           
  3429                           ; BSR set to: 1
  3430                           ;parcheggio.c: 500: data_correction[1] = 1;
  3431  0047D4  0E01               	movlw	1
  3432  0047D6                     L1:
  3433  0047D6  0101               	movlb	1	; () banked
  3434  0047D8  6F5C               	movwf	(_data_correction+1)& (0+255),b	;volatile
  3435  0047DA  D000               	goto	l6766
  3436  0047DC                     l6766:
  3437                           
  3438                           ; BSR set to: 1
  3439                           ;parcheggio.c: 501: }
  3440                           ;parcheggio.c: 502: if ((old_alignment_gap != alignment_gap) || (old_dir_correction != d
      +                          ata_correction[1])) {
  3441  0047DC  0100               	movlb	0	; () banked
  3442  0047DE  51D7               	movf	_alignment_gap& (0+255),w,b	;volatile
  3443  0047E0  1811               	xorwf	_old_alignment_gap,w,c	;volatile
  3444  0047E2  E114               	bnz	l835
  3445  0047E4  0100               	movlb	0	; () banked
  3446  0047E6  51D8               	movf	(_alignment_gap+1)& (0+255),w,b	;volatile
  3447  0047E8  1812               	xorwf	_old_alignment_gap+1,w,c	;volatile
  3448  0047EA  E110               	bnz	l835
  3449  0047EC  0100               	movlb	0	; () banked
  3450  0047EE  51D9               	movf	(_alignment_gap+2)& (0+255),w,b	;volatile
  3451  0047F0  1813               	xorwf	_old_alignment_gap+2,w,c	;volatile
  3452  0047F2  E10C               	bnz	l835
  3453  0047F4  0100               	movlb	0	; () banked
  3454  0047F6  51DA               	movf	(_alignment_gap+3)& (0+255),w,b	;volatile
  3455  0047F8  1814               	xorwf	_old_alignment_gap+3,w,c	;volatile
  3456  0047FA  A4D8               	btfss	status,2,c
  3457  0047FC  D007               	goto	l835
  3458                           
  3459                           ; BSR set to: 0
  3460  0047FE  0E00               	movlw	0
  3461  004800  B655               	btfsc	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  3462  004802  0E01               	movlw	1
  3463  004804  0101               	movlb	1	; () banked
  3464  004806  195C               	xorwf	(_data_correction+1)& (0+255),w,b	;volatile
  3465  004808  B4D8               	btfsc	status,2,c
  3466  00480A  0012               	return	
  3467  00480C                     l835:
  3468                           
  3469                           ;parcheggio.c: 503: old_alignment_gap = alignment_gap;
  3470  00480C  C0D7  F011         	movff	_alignment_gap,_old_alignment_gap	;volatile
  3471  004810  C0D8  F012         	movff	_alignment_gap+1,_old_alignment_gap+1	;volatile
  3472  004814  C0D9  F013         	movff	_alignment_gap+2,_old_alignment_gap+2	;volatile
  3473  004818  C0DA  F014         	movff	_alignment_gap+3,_old_alignment_gap+3	;volatile
  3474                           
  3475                           ;parcheggio.c: 504: old_dir_correction = data_correction[1];
  3476  00481C  0101               	movlb	1	; () banked
  3477  00481E  B15C               	btfsc	(_data_correction+1)& (0+255),0,b	;volatile
  3478  004820  D002               	bra	u8475
  3479  004822  9655               	bcf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  3480  004824  D001               	bra	u8476
  3481  004826                     u8475:
  3482  004826  8655               	bsf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  3483  004828                     u8476:
  3484                           
  3485                           ;parcheggio.c: 505: can_send();
  3486  004828  ECB1  F02A         	call	_can_send	;wreg free
  3487                           
  3488                           ;parcheggio.c: 506: }
  3489                           ;parcheggio.c: 507: }
  3490                           ;parcheggio.c: 508: } else {
  3491  00482C  0012               	return	
  3492  00482E                     l6772:
  3493                           
  3494                           ;parcheggio.c: 509: data_correction[0] = 0;
  3495  00482E  0E00               	movlw	0
  3496  004830  0101               	movlb	1	; () banked
  3497  004832  6F5B               	movwf	_data_correction& (0+255),b	;volatile
  3498                           
  3499                           ; BSR set to: 1
  3500                           ;parcheggio.c: 510: can_send();
  3501  004834  ECB1  F02A         	call	_can_send	;wreg free
  3502  004838  0012               	return	
  3503  00483A  0012               	return		;funcret
  3504  00483C                     __end_of_parallelo:
  3505                           	opt stack 0
  3506                           tblptru	equ	0xFF8
  3507                           tblptrh	equ	0xFF7
  3508                           tblptrl	equ	0xFF6
  3509                           tablat	equ	0xFF5
  3510                           postinc0	equ	0xFEE
  3511                           wreg	equ	0xFE8
  3512                           postinc2	equ	0xFDE
  3513                           postdec2	equ	0xFDD
  3514                           status	equ	0xFD8
  3515                           
  3516 ;; *************** function _can_send *****************
  3517 ;; Defined at:
  3518 ;;		line 463 in file "parcheggio.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;		None
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;		None
  3523 ;; Return value:  Size  Location     Type
  3524 ;;		None               void
  3525 ;; Registers used:
  3526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3536 ;;Total ram usage:        0 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    6
  3539 ;; This function calls:
  3540 ;;		_CANisTxReady
  3541 ;;		_CANsendMessage
  3542 ;; This function is called by:
  3543 ;;		_park_routine
  3544 ;;		_parallelo
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text4
  3549  005562                     __ptext4:
  3550                           	opt stack 0
  3551  005562                     _can_send:
  3552                           	opt stack 22
  3553                           
  3554                           ;parcheggio.c: 464: if (start_operation == 1) {
  3555                           
  3556                           ;incstack = 0
  3557  005562  BC55               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  3558  005564  D002               	goto	l6576
  3559  005566  D066               	goto	l6596
  3560                           
  3561                           ;parcheggio.c: 466: while (CANisTxReady() != 1);
  3562  005568  D000               	goto	l6576
  3563  00556A                     l6576:
  3564  00556A  ECB9  F02F         	call	_CANisTxReady	;wreg free
  3565  00556E  06E8               	decf	wreg,f,c
  3566  005570  A4D8               	btfss	status,2,c
  3567  005572  D7FB               	goto	l6576
  3568                           
  3569                           ;parcheggio.c: 467: CANsendMessage(0b00000000111, data_steering, 8, CAN_CONFIG_STD_MSG &
      +                           CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3570  005574  0E07               	movlw	7
  3571  005576  0100               	movlb	0	; () banked
  3572  005578  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3573  00557A  0E00               	movlw	0
  3574  00557C  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3575  00557E  0E00               	movlw	0
  3576  005580  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3577  005582  0E00               	movlw	0
  3578  005584  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3579  005586  0E6B               	movlw	low _data_steering
  3580  005588  0100               	movlb	0	; () banked
  3581  00558A  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3582  00558C  0E01               	movlw	high _data_steering
  3583  00558E  0100               	movlb	0	; () banked
  3584  005590  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3585  005592  0E08               	movlw	8
  3586  005594  0100               	movlb	0	; () banked
  3587  005596  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3588  005598  0EBC               	movlw	188
  3589  00559A  0100               	movlb	0	; () banked
  3590  00559C  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3591  00559E  ECE5  F011         	call	_CANsendMessage	;wreg free
  3592                           
  3593                           ;parcheggio.c: 470: data_speed[0] = set_speed;
  3594  0055A2  C0E5  F163         	movff	_set_speed,_data_speed	;volatile
  3595                           
  3596                           ;parcheggio.c: 471: data_speed[1] = (set_speed >> 8);
  3597  0055A6  0100               	movlb	0	; () banked
  3598  0055A8  51E6               	movf	(_set_speed+1)& (0+255),w,b	;volatile
  3599  0055AA  0101               	movlb	1	; () banked
  3600  0055AC  6F64               	movwf	(_data_speed+1)& (0+255),b	;volatile
  3601                           
  3602                           ; BSR set to: 1
  3603                           ;parcheggio.c: 472: data_speed[2] = dir;
  3604  0055AE  0E00               	movlw	0
  3605  0055B0  B854               	btfsc	_dir/(0+8),_dir& (0+7),c	;volatile
  3606  0055B2  0E01               	movlw	1
  3607  0055B4  0101               	movlb	1	; () banked
  3608  0055B6  6F65               	movwf	(_data_speed+2)& (0+255),b	;volatile
  3609                           
  3610                           ; BSR set to: 1
  3611                           
  3612                           ;parcheggio.c: 473: while (CANisTxReady() != 1);
  3613  0055B8  D000               	goto	l6586
  3614  0055BA                     l6586:
  3615  0055BA  ECB9  F02F         	call	_CANisTxReady	;wreg free
  3616  0055BE  06E8               	decf	wreg,f,c
  3617  0055C0  A4D8               	btfss	status,2,c
  3618  0055C2  D7FB               	goto	l6586
  3619                           
  3620                           ;parcheggio.c: 474: CANsendMessage(0b00000000101, data_speed, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3621  0055C4  0E05               	movlw	5
  3622  0055C6  0100               	movlb	0	; () banked
  3623  0055C8  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3624  0055CA  0E00               	movlw	0
  3625  0055CC  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3626  0055CE  0E00               	movlw	0
  3627  0055D0  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3628  0055D2  0E00               	movlw	0
  3629  0055D4  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3630  0055D6  0E63               	movlw	low _data_speed
  3631  0055D8  0100               	movlb	0	; () banked
  3632  0055DA  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3633  0055DC  0E01               	movlw	high _data_speed
  3634  0055DE  0100               	movlb	0	; () banked
  3635  0055E0  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3636  0055E2  0E08               	movlw	8
  3637  0055E4  0100               	movlb	0	; () banked
  3638  0055E6  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3639  0055E8  0EBC               	movlw	188
  3640  0055EA  0100               	movlb	0	; () banked
  3641  0055EC  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3642  0055EE  ECE5  F011         	call	_CANsendMessage	;wreg free
  3643                           
  3644                           ;parcheggio.c: 477: data_brake[1] = 0;
  3645  0055F2  0E00               	movlw	0
  3646  0055F4  6E25               	movwf	_data_brake+1,c	;volatile
  3647                           
  3648                           ;parcheggio.c: 478: while (CANisTxReady() != 1);
  3649  0055F6  D000               	goto	l6592
  3650  0055F8                     l6592:
  3651  0055F8  ECB9  F02F         	call	_CANisTxReady	;wreg free
  3652  0055FC  06E8               	decf	wreg,f,c
  3653  0055FE  A4D8               	btfss	status,2,c
  3654  005600  D7FB               	goto	l6592
  3655                           
  3656                           ;parcheggio.c: 479: CANsendMessage(0b00000000110, data_brake, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3657  005602  0E06               	movlw	6
  3658  005604  0100               	movlb	0	; () banked
  3659  005606  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3660  005608  0E00               	movlw	0
  3661  00560A  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3662  00560C  0E00               	movlw	0
  3663  00560E  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3664  005610  0E00               	movlw	0
  3665  005612  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3666  005614  0E24               	movlw	low _data_brake
  3667  005616  0100               	movlb	0	; () banked
  3668  005618  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3669  00561A  0E00               	movlw	high _data_brake
  3670  00561C  0100               	movlb	0	; () banked
  3671  00561E  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3672  005620  0E08               	movlw	8
  3673  005622  0100               	movlb	0	; () banked
  3674  005624  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3675  005626  0EBC               	movlw	188
  3676  005628  0100               	movlb	0	; () banked
  3677  00562A  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3678  00562C  ECE5  F011         	call	_CANsendMessage	;wreg free
  3679                           
  3680                           ;parcheggio.c: 480: } else {
  3681  005630  0012               	return	
  3682                           
  3683                           ;parcheggio.c: 481: while (CANisTxReady() != 1);
  3684  005632  D000               	goto	l6596
  3685  005634                     l6596:
  3686  005634  ECB9  F02F         	call	_CANisTxReady	;wreg free
  3687  005638  06E8               	decf	wreg,f,c
  3688  00563A  A4D8               	btfss	status,2,c
  3689  00563C  D7FB               	goto	l6596
  3690                           
  3691                           ;parcheggio.c: 482: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3692  00563E  0E10               	movlw	16
  3693  005640  0100               	movlb	0	; () banked
  3694  005642  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3695  005644  0E00               	movlw	0
  3696  005646  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3697  005648  0E00               	movlw	0
  3698  00564A  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3699  00564C  0E00               	movlw	0
  3700  00564E  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3701  005650  0E5B               	movlw	low _data_correction
  3702  005652  0100               	movlb	0	; () banked
  3703  005654  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3704  005656  0E01               	movlw	high _data_correction
  3705  005658  0100               	movlb	0	; () banked
  3706  00565A  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3707  00565C  0E08               	movlw	8
  3708  00565E  0100               	movlb	0	; () banked
  3709  005660  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3710  005662  0EBC               	movlw	188
  3711  005664  0100               	movlb	0	; () banked
  3712  005666  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3713  005668  ECE5  F011         	call	_CANsendMessage	;wreg free
  3714  00566C  0012               	return	
  3715  00566E  0012               	return		;funcret
  3716  005670                     __end_of_can_send:
  3717                           	opt stack 0
  3718                           tblptru	equ	0xFF8
  3719                           tblptrh	equ	0xFF7
  3720                           tblptrl	equ	0xFF6
  3721                           tablat	equ	0xFF5
  3722                           postinc0	equ	0xFEE
  3723                           wreg	equ	0xFE8
  3724                           postinc2	equ	0xFDE
  3725                           postdec2	equ	0xFDD
  3726                           status	equ	0xFD8
  3727                           
  3728 ;; *************** function _CANsendMessage *****************
  3729 ;; Defined at:
  3730 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;  identifier      4   23[BANK0 ] unsigned long 
  3733 ;;  data            2   27[BANK0 ] PTR unsigned char 
  3734 ;;		 -> data_speed(8), data_correction(8), data_test(8), data(8), 
  3735 ;;		 -> data_brake(8), data_steering(8), sensor_distance_short(8), 
  3736 ;;  dataLength      1   29[BANK0 ] unsigned char 
  3737 ;;  flags           1   30[BANK0 ] enum E16376
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;  tamp            4   35[BANK0 ] unsigned long 
  3740 ;; Return value:  Size  Location     Type
  3741 ;;		None               void
  3742 ;; Registers used:
  3743 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3744 ;; Tracked objects:
  3745 ;;		On entry : 0/0
  3746 ;;		On exit  : 0/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3749 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3750 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3751 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3752 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3753 ;;Total ram usage:       16 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; Hardware stack levels required when called:    5
  3756 ;; This function calls:
  3757 ;;		Nothing
  3758 ;; This function is called by:
  3759 ;;		_main
  3760 ;;		_park_search
  3761 ;;		_park_routine
  3762 ;;		_can_send
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           	psect	text5
  3767  0023CA                     __ptext5:
  3768                           	opt stack 0
  3769  0023CA                     _CANsendMessage:
  3770                           	opt stack 22
  3771                           
  3772                           ;inc\CANlib.h: 296: unsigned long tamp;
  3773                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
  3774                           
  3775                           ;incstack = 0
  3776  0023CA  010F               	movlb	15	; () banked
  3777  0023CC  B740               	btfsc	64,3,b	;volatile
  3778  0023CE  D142               	goto	l359
  3779                           
  3780                           ; BSR set to: 15
  3781                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
  3782  0023D0  C07D  FF45         	movff	CANsendMessage@dataLength,3909	;volatile
  3783                           
  3784                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
  3785  0023D4  0100               	movlb	0	; () banked
  3786  0023D6  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  3787  0023D8  D003               	goto	l360
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
  3791  0023DA  010F               	movlb	15	; () banked
  3792  0023DC  8D45               	bsf	69,6,b	;volatile
  3793  0023DE  D002               	goto	l361
  3794  0023E0                     l360:
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;inc\CANlib.h: 302: else
  3798                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
  3799  0023E0  010F               	movlb	15	; () banked
  3800  0023E2  9D45               	bcf	69,6,b	;volatile
  3801  0023E4                     l361:
  3802                           
  3803                           ; BSR set to: 15
  3804                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
  3805  0023E4  0100               	movlb	0	; () banked
  3806  0023E6  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  3807  0023E8  D07A               	goto	l362
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;inc\CANlib.h: 306: {
  3811                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
  3812  0023EA  0100               	movlb	0	; () banked
  3813  0023EC  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  3814  0023EE  0100               	movlb	0	; () banked
  3815  0023F0  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3816  0023F2  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3817  0023F4  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3818  0023F6  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
  3822  0023F8  C083  FF44         	movff	CANsendMessage@tamp,3908	;volatile
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
  3826  0023FC  0E00               	movlw	0
  3827  0023FE  0100               	movlb	0	; () banked
  3828  002400  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3829  002402  0100               	movlb	0	; () banked
  3830  002404  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3831  002406  0EFF               	movlw	255
  3832  002408  0100               	movlb	0	; () banked
  3833  00240A  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3834  00240C  0100               	movlb	0	; () banked
  3835  00240E  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3836  002410  0E00               	movlw	0
  3837  002412  0100               	movlb	0	; () banked
  3838  002414  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3839  002416  0100               	movlb	0	; () banked
  3840  002418  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3841  00241A  0E00               	movlw	0
  3842  00241C  0100               	movlb	0	; () banked
  3843  00241E  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3844  002420  0100               	movlb	0	; () banked
  3845  002422  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
  3849  002424  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3850  002428  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3851  00242C  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3852  002430  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3853  002434  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  3854  002438  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  3855  00243C  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  3856  002440  0100               	movlb	0	; () banked
  3857  002442  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  3858  002444  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3859  002448  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3860  00244C  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3861  002450  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
  3865  002454  C083  FF43         	movff	CANsendMessage@tamp,3907	;volatile
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
  3869  002458  0E00               	movlw	0
  3870  00245A  010F               	movlb	15	; () banked
  3871  00245C  6F42               	movwf	66,b	;volatile
  3872                           
  3873                           ; BSR set to: 15
  3874                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
  3875  00245E  010F               	movlb	15	; () banked
  3876  002460  8742               	bsf	66,3,b	;volatile
  3877                           
  3878                           ; BSR set to: 15
  3879                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
  3880  002462  0100               	movlb	0	; () banked
  3881  002464  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  3882  002466  D002               	goto	l363
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
  3886  002468  010F               	movlb	15	; () banked
  3887  00246A  8142               	bsf	66,0,b	;volatile
  3888  00246C                     l363:
  3889                           
  3890                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
  3891  00246C  0100               	movlb	0	; () banked
  3892  00246E  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  3893  002470  D002               	goto	l364
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
  3897  002472  010F               	movlb	15	; () banked
  3898  002474  8342               	bsf	66,1,b	;volatile
  3899  002476                     l364:
  3900                           
  3901                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
  3902  002476  0100               	movlb	0	; () banked
  3903  002478  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  3904  00247A  D002               	goto	l365
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
  3908  00247C  010F               	movlb	15	; () banked
  3909  00247E  8B42               	bsf	66,5,b	;volatile
  3910  002480                     l365:
  3911                           
  3912                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
  3913  002480  0100               	movlb	0	; () banked
  3914  002482  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  3915  002484  D002               	goto	l366
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
  3919  002486  010F               	movlb	15	; () banked
  3920  002488  8D42               	bsf	66,6,b	;volatile
  3921  00248A                     l366:
  3922                           
  3923                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
  3924  00248A  0100               	movlb	0	; () banked
  3925  00248C  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  3926  00248E  D003               	goto	l4208
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
  3930  002490  010F               	movlb	15	; () banked
  3931  002492  8F42               	bsf	66,7,b	;volatile
  3932  002494  D000               	goto	l4208
  3933  002496                     l4208:
  3934                           
  3935                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
  3936  002496  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3937  00249A  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3938  00249E  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3939  0024A2  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3940  0024A6  0E16               	movlw	22
  3941  0024A8  D006               	goto	u4360
  3942  0024AA                     u4365:
  3943  0024AA  0100               	movlb	0	; () banked
  3944  0024AC  90D8               	bcf	status,0,c
  3945  0024AE  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3946  0024B0  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3947  0024B2  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3948  0024B4  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3949  0024B6                     u4360:
  3950  0024B6  2EE8               	decfsz	wreg,f,c
  3951  0024B8  D7F8               	goto	u4365
  3952  0024BA  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3953  0024BE  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3954  0024C2  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3955  0024C6  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
  3959  0024CA  0100               	movlb	0	; () banked
  3960  0024CC  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3961  0024CE  0100               	movlb	0	; () banked
  3962  0024D0  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3963  0024D2  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3964  0024D4  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3965  0024D6  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
  3969  0024D8  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  3970                           
  3971                           ;inc\CANlib.h: 332: }
  3972  0024DC  D05A               	goto	l4228
  3973  0024DE                     l362:
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;inc\CANlib.h: 334: else
  3977                           ;inc\CANlib.h: 336: {
  3978                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
  3979  0024DE  010F               	movlb	15	; () banked
  3980  0024E0  9742               	bcf	66,3,b	;volatile
  3981                           
  3982                           ; BSR set to: 15
  3983                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
  3984  0024E2  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3985  0024E6  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3986  0024EA  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3987  0024EE  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3988  0024F2  0E04               	movlw	4
  3989  0024F4  D006               	goto	u4370
  3990  0024F6                     u4375:
  3991  0024F6  0100               	movlb	0	; () banked
  3992  0024F8  90D8               	bcf	status,0,c
  3993  0024FA  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3994  0024FC  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3995  0024FE  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3996  002500  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3997  002502                     u4370:
  3998  002502  2EE8               	decfsz	wreg,f,c
  3999  002504  D7F8               	goto	u4375
  4000  002506  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4001  00250A  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4002  00250E  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4003  002512  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
  4007  002516  0100               	movlb	0	; () banked
  4008  002518  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4009  00251A  0100               	movlb	0	; () banked
  4010  00251C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4011  00251E  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4012  002520  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4013  002522  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
  4017  002524  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
  4021  002528  0E07               	movlw	7
  4022  00252A  0100               	movlb	0	; () banked
  4023  00252C  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4024  00252E  0100               	movlb	0	; () banked
  4025  002530  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4026  002532  0E00               	movlw	0
  4027  002534  0100               	movlb	0	; () banked
  4028  002536  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4029  002538  0100               	movlb	0	; () banked
  4030  00253A  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4031  00253C  0E00               	movlw	0
  4032  00253E  0100               	movlb	0	; () banked
  4033  002540  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4034  002542  0100               	movlb	0	; () banked
  4035  002544  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4036  002546  0E00               	movlw	0
  4037  002548  0100               	movlb	0	; () banked
  4038  00254A  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4039  00254C  0100               	movlb	0	; () banked
  4040  00254E  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;inc\CANlib.h: 344: tamp = tamp << 5;
  4044  002550  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4045  002554  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4046  002558  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4047  00255C  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4048  002560  0E05               	movlw	5
  4049  002562                     u4385:
  4050  002562  90D8               	bcf	status,0,c
  4051  002564  0100               	movlb	0	; () banked
  4052  002566  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  4053  002568  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  4054  00256A  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  4055  00256C  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  4056  00256E  2EE8               	decfsz	wreg,f,c
  4057  002570  D7F8               	goto	u4385
  4058  002572  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4059  002576  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4060  00257A  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4061  00257E  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
  4065  002582  010F               	movlb	15	; () banked
  4066  002584  5142               	movf	66,w,b	;volatile
  4067  002586  0B1F               	andlw	31
  4068  002588  010F               	movlb	15	; () banked
  4069  00258A  6F42               	movwf	66,b	;volatile
  4070                           
  4071                           ; BSR set to: 15
  4072                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
  4073  00258C  C083  FF42         	movff	CANsendMessage@tamp,3906	;volatile
  4074  002590  D000               	goto	l4228
  4075  002592                     l4228:
  4076                           
  4077                           ;inc\CANlib.h: 347: }
  4078                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
  4079  002592  0100               	movlb	0	; () banked
  4080  002594  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  4081  002596  D003               	goto	l369
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
  4085  002598  010F               	movlb	15	; () banked
  4086  00259A  8140               	bsf	64,0,b	;volatile
  4087  00259C  D002               	goto	l370
  4088  00259E                     l369:
  4089                           
  4090                           ; BSR set to: 0
  4091                           ;inc\CANlib.h: 351: else
  4092                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
  4093  00259E  010F               	movlb	15	; () banked
  4094  0025A0  9140               	bcf	64,0,b	;volatile
  4095  0025A2                     l370:
  4096                           
  4097                           ; BSR set to: 15
  4098                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
  4099  0025A2  0100               	movlb	0	; () banked
  4100  0025A4  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  4101  0025A6  D003               	goto	l371
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
  4105  0025A8  010F               	movlb	15	; () banked
  4106  0025AA  8340               	bsf	64,1,b	;volatile
  4107  0025AC  D003               	goto	l4234
  4108  0025AE                     l371:
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;inc\CANlib.h: 355: else
  4112                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
  4113  0025AE  010F               	movlb	15	; () banked
  4114  0025B0  9340               	bcf	64,1,b	;volatile
  4115  0025B2  D000               	goto	l4234
  4116  0025B4                     l4234:
  4117                           
  4118                           ; BSR set to: 15
  4119                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
  4120  0025B4  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  4121  0025B8  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  4122  0025BC  50DF               	movf	indf2,w,c
  4123  0025BE  010F               	movlb	15	; () banked
  4124  0025C0  6F46               	movwf	70,b	;volatile
  4125                           
  4126                           ; BSR set to: 15
  4127                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
  4128  0025C2  0100               	movlb	0	; () banked
  4129  0025C4  EE20 F001          	lfsr	2,1
  4130  0025C8  517B               	movf	CANsendMessage@data& (0+255),w,b
  4131  0025CA  26D9               	addwf	fsr2l,f,c
  4132  0025CC  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4133  0025CE  22DA               	addwfc	fsr2h,f,c
  4134  0025D0  50DF               	movf	indf2,w,c
  4135  0025D2  010F               	movlb	15	; () banked
  4136  0025D4  6F47               	movwf	71,b	;volatile
  4137                           
  4138                           ; BSR set to: 15
  4139                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
  4140  0025D6  0100               	movlb	0	; () banked
  4141  0025D8  EE20 F002          	lfsr	2,2
  4142  0025DC  517B               	movf	CANsendMessage@data& (0+255),w,b
  4143  0025DE  26D9               	addwf	fsr2l,f,c
  4144  0025E0  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4145  0025E2  22DA               	addwfc	fsr2h,f,c
  4146  0025E4  50DF               	movf	indf2,w,c
  4147  0025E6  010F               	movlb	15	; () banked
  4148  0025E8  6F48               	movwf	72,b	;volatile
  4149                           
  4150                           ; BSR set to: 15
  4151                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
  4152  0025EA  0100               	movlb	0	; () banked
  4153  0025EC  EE20 F003          	lfsr	2,3
  4154  0025F0  517B               	movf	CANsendMessage@data& (0+255),w,b
  4155  0025F2  26D9               	addwf	fsr2l,f,c
  4156  0025F4  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4157  0025F6  22DA               	addwfc	fsr2h,f,c
  4158  0025F8  50DF               	movf	indf2,w,c
  4159  0025FA  010F               	movlb	15	; () banked
  4160  0025FC  6F49               	movwf	73,b	;volatile
  4161                           
  4162                           ; BSR set to: 15
  4163                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
  4164  0025FE  0100               	movlb	0	; () banked
  4165  002600  EE20 F004          	lfsr	2,4
  4166  002604  517B               	movf	CANsendMessage@data& (0+255),w,b
  4167  002606  26D9               	addwf	fsr2l,f,c
  4168  002608  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4169  00260A  22DA               	addwfc	fsr2h,f,c
  4170  00260C  50DF               	movf	indf2,w,c
  4171  00260E  010F               	movlb	15	; () banked
  4172  002610  6F4A               	movwf	74,b	;volatile
  4173                           
  4174                           ; BSR set to: 15
  4175                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
  4176  002612  0100               	movlb	0	; () banked
  4177  002614  EE20 F005          	lfsr	2,5
  4178  002618  517B               	movf	CANsendMessage@data& (0+255),w,b
  4179  00261A  26D9               	addwf	fsr2l,f,c
  4180  00261C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4181  00261E  22DA               	addwfc	fsr2h,f,c
  4182  002620  50DF               	movf	indf2,w,c
  4183  002622  010F               	movlb	15	; () banked
  4184  002624  6F4B               	movwf	75,b	;volatile
  4185                           
  4186                           ; BSR set to: 15
  4187                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
  4188  002626  0100               	movlb	0	; () banked
  4189  002628  EE20 F006          	lfsr	2,6
  4190  00262C  517B               	movf	CANsendMessage@data& (0+255),w,b
  4191  00262E  26D9               	addwf	fsr2l,f,c
  4192  002630  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4193  002632  22DA               	addwfc	fsr2h,f,c
  4194  002634  50DF               	movf	indf2,w,c
  4195  002636  010F               	movlb	15	; () banked
  4196  002638  6F4C               	movwf	76,b	;volatile
  4197                           
  4198                           ; BSR set to: 15
  4199                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
  4200  00263A  0100               	movlb	0	; () banked
  4201  00263C  EE20 F007          	lfsr	2,7
  4202  002640  517B               	movf	CANsendMessage@data& (0+255),w,b
  4203  002642  26D9               	addwf	fsr2l,f,c
  4204  002644  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4205  002646  22DA               	addwfc	fsr2h,f,c
  4206  002648  50DF               	movf	indf2,w,c
  4207  00264A  010F               	movlb	15	; () banked
  4208  00264C  6F4D               	movwf	77,b	;volatile
  4209                           
  4210                           ; BSR set to: 15
  4211                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
  4212  00264E  010F               	movlb	15	; () banked
  4213  002650  8740               	bsf	64,3,b	;volatile
  4214                           
  4215                           ; BSR set to: 15
  4216                           ;inc\CANlib.h: 368: return;
  4217  002652  0012               	return	
  4218  002654                     l359:
  4219                           
  4220                           ; BSR set to: 15
  4221                           ;inc\CANlib.h: 369: }
  4222                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
  4223  002654  010F               	movlb	15	; () banked
  4224  002656  B730               	btfsc	48,3,b	;volatile
  4225  002658  D142               	goto	l374
  4226                           
  4227                           ; BSR set to: 15
  4228                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
  4229  00265A  C07D  FF35         	movff	CANsendMessage@dataLength,3893	;volatile
  4230                           
  4231                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
  4232  00265E  0100               	movlb	0	; () banked
  4233  002660  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  4234  002662  D003               	goto	l375
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
  4238  002664  010F               	movlb	15	; () banked
  4239  002666  8D35               	bsf	53,6,b	;volatile
  4240  002668  D002               	goto	l376
  4241  00266A                     l375:
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;inc\CANlib.h: 378: else
  4245                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
  4246  00266A  010F               	movlb	15	; () banked
  4247  00266C  9D35               	bcf	53,6,b	;volatile
  4248  00266E                     l376:
  4249                           
  4250                           ; BSR set to: 15
  4251                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
  4252  00266E  0100               	movlb	0	; () banked
  4253  002670  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  4254  002672  D07A               	goto	l377
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;inc\CANlib.h: 382: {
  4258                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
  4259  002674  0100               	movlb	0	; () banked
  4260  002676  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  4261  002678  0100               	movlb	0	; () banked
  4262  00267A  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4263  00267C  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4264  00267E  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4265  002680  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
  4269  002682  C083  FF34         	movff	CANsendMessage@tamp,3892	;volatile
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
  4273  002686  0E00               	movlw	0
  4274  002688  0100               	movlb	0	; () banked
  4275  00268A  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4276  00268C  0100               	movlb	0	; () banked
  4277  00268E  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4278  002690  0EFF               	movlw	255
  4279  002692  0100               	movlb	0	; () banked
  4280  002694  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4281  002696  0100               	movlb	0	; () banked
  4282  002698  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4283  00269A  0E00               	movlw	0
  4284  00269C  0100               	movlb	0	; () banked
  4285  00269E  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4286  0026A0  0100               	movlb	0	; () banked
  4287  0026A2  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4288  0026A4  0E00               	movlw	0
  4289  0026A6  0100               	movlb	0	; () banked
  4290  0026A8  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4291  0026AA  0100               	movlb	0	; () banked
  4292  0026AC  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
  4296  0026AE  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4297  0026B2  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4298  0026B6  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4299  0026BA  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4300  0026BE  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  4301  0026C2  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  4302  0026C6  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  4303  0026CA  0100               	movlb	0	; () banked
  4304  0026CC  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  4305  0026CE  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4306  0026D2  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4307  0026D6  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4308  0026DA  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
  4312  0026DE  C083  FF33         	movff	CANsendMessage@tamp,3891	;volatile
  4313                           
  4314                           ; BSR set to: 0
  4315                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
  4316  0026E2  0E00               	movlw	0
  4317  0026E4  010F               	movlb	15	; () banked
  4318  0026E6  6F32               	movwf	50,b	;volatile
  4319                           
  4320                           ; BSR set to: 15
  4321                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
  4322  0026E8  010F               	movlb	15	; () banked
  4323  0026EA  8732               	bsf	50,3,b	;volatile
  4324                           
  4325                           ; BSR set to: 15
  4326                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
  4327  0026EC  0100               	movlb	0	; () banked
  4328  0026EE  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  4329  0026F0  D002               	goto	l378
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
  4333  0026F2  010F               	movlb	15	; () banked
  4334  0026F4  8132               	bsf	50,0,b	;volatile
  4335  0026F6                     l378:
  4336                           
  4337                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
  4338  0026F6  0100               	movlb	0	; () banked
  4339  0026F8  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  4340  0026FA  D002               	goto	l379
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
  4344  0026FC  010F               	movlb	15	; () banked
  4345  0026FE  8332               	bsf	50,1,b	;volatile
  4346  002700                     l379:
  4347                           
  4348                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
  4349  002700  0100               	movlb	0	; () banked
  4350  002702  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  4351  002704  D002               	goto	l380
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
  4355  002706  010F               	movlb	15	; () banked
  4356  002708  8B32               	bsf	50,5,b	;volatile
  4357  00270A                     l380:
  4358                           
  4359                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
  4360  00270A  0100               	movlb	0	; () banked
  4361  00270C  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  4362  00270E  D002               	goto	l381
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
  4366  002710  010F               	movlb	15	; () banked
  4367  002712  8D32               	bsf	50,6,b	;volatile
  4368  002714                     l381:
  4369                           
  4370                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
  4371  002714  0100               	movlb	0	; () banked
  4372  002716  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  4373  002718  D003               	goto	l4284
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
  4377  00271A  010F               	movlb	15	; () banked
  4378  00271C  8F32               	bsf	50,7,b	;volatile
  4379  00271E  D000               	goto	l4284
  4380  002720                     l4284:
  4381                           
  4382                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
  4383  002720  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4384  002724  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4385  002728  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4386  00272C  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4387  002730  0E16               	movlw	22
  4388  002732  D006               	goto	u4490
  4389  002734                     u4495:
  4390  002734  0100               	movlb	0	; () banked
  4391  002736  90D8               	bcf	status,0,c
  4392  002738  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4393  00273A  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4394  00273C  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4395  00273E  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4396  002740                     u4490:
  4397  002740  2EE8               	decfsz	wreg,f,c
  4398  002742  D7F8               	goto	u4495
  4399  002744  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4400  002748  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4401  00274C  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4402  002750  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
  4406  002754  0100               	movlb	0	; () banked
  4407  002756  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4408  002758  0100               	movlb	0	; () banked
  4409  00275A  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4410  00275C  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4411  00275E  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4412  002760  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
  4416  002762  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  4417                           
  4418                           ;inc\CANlib.h: 407: }
  4419  002766  D05A               	goto	l4304
  4420  002768                     l377:
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;inc\CANlib.h: 409: else
  4424                           ;inc\CANlib.h: 411: {
  4425                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
  4426  002768  010F               	movlb	15	; () banked
  4427  00276A  9732               	bcf	50,3,b	;volatile
  4428                           
  4429                           ; BSR set to: 15
  4430                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
  4431  00276C  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4432  002770  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4433  002774  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4434  002778  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4435  00277C  0E04               	movlw	4
  4436  00277E  D006               	goto	u4500
  4437  002780                     u4505:
  4438  002780  0100               	movlb	0	; () banked
  4439  002782  90D8               	bcf	status,0,c
  4440  002784  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4441  002786  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4442  002788  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4443  00278A  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4444  00278C                     u4500:
  4445  00278C  2EE8               	decfsz	wreg,f,c
  4446  00278E  D7F8               	goto	u4505
  4447  002790  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4448  002794  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4449  002798  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4450  00279C  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
  4454  0027A0  0100               	movlb	0	; () banked
  4455  0027A2  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4456  0027A4  0100               	movlb	0	; () banked
  4457  0027A6  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4458  0027A8  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4459  0027AA  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4460  0027AC  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
  4464  0027AE  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
  4468  0027B2  0E07               	movlw	7
  4469  0027B4  0100               	movlb	0	; () banked
  4470  0027B6  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4471  0027B8  0100               	movlb	0	; () banked
  4472  0027BA  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4473  0027BC  0E00               	movlw	0
  4474  0027BE  0100               	movlb	0	; () banked
  4475  0027C0  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4476  0027C2  0100               	movlb	0	; () banked
  4477  0027C4  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4478  0027C6  0E00               	movlw	0
  4479  0027C8  0100               	movlb	0	; () banked
  4480  0027CA  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4481  0027CC  0100               	movlb	0	; () banked
  4482  0027CE  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4483  0027D0  0E00               	movlw	0
  4484  0027D2  0100               	movlb	0	; () banked
  4485  0027D4  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4486  0027D6  0100               	movlb	0	; () banked
  4487  0027D8  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;inc\CANlib.h: 419: tamp = tamp << 5;
  4491  0027DA  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4492  0027DE  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4493  0027E2  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4494  0027E6  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4495  0027EA  0E05               	movlw	5
  4496  0027EC                     u4515:
  4497  0027EC  90D8               	bcf	status,0,c
  4498  0027EE  0100               	movlb	0	; () banked
  4499  0027F0  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  4500  0027F2  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  4501  0027F4  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  4502  0027F6  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  4503  0027F8  2EE8               	decfsz	wreg,f,c
  4504  0027FA  D7F8               	goto	u4515
  4505  0027FC  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4506  002800  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4507  002804  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4508  002808  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
  4512  00280C  010F               	movlb	15	; () banked
  4513  00280E  5132               	movf	50,w,b	;volatile
  4514  002810  0B1F               	andlw	31
  4515  002812  010F               	movlb	15	; () banked
  4516  002814  6F32               	movwf	50,b	;volatile
  4517                           
  4518                           ; BSR set to: 15
  4519                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
  4520  002816  C083  FF32         	movff	CANsendMessage@tamp,3890	;volatile
  4521  00281A  D000               	goto	l4304
  4522  00281C                     l4304:
  4523                           
  4524                           ;inc\CANlib.h: 422: }
  4525                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
  4526  00281C  0100               	movlb	0	; () banked
  4527  00281E  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  4528  002820  D003               	goto	l384
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
  4532  002822  010F               	movlb	15	; () banked
  4533  002824  8130               	bsf	48,0,b	;volatile
  4534  002826  D002               	goto	l385
  4535  002828                     l384:
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;inc\CANlib.h: 426: else
  4539                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
  4540  002828  010F               	movlb	15	; () banked
  4541  00282A  9130               	bcf	48,0,b	;volatile
  4542  00282C                     l385:
  4543                           
  4544                           ; BSR set to: 15
  4545                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
  4546  00282C  0100               	movlb	0	; () banked
  4547  00282E  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  4548  002830  D003               	goto	l386
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
  4552  002832  010F               	movlb	15	; () banked
  4553  002834  8330               	bsf	48,1,b	;volatile
  4554  002836  D003               	goto	l4310
  4555  002838                     l386:
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;inc\CANlib.h: 430: else
  4559                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
  4560  002838  010F               	movlb	15	; () banked
  4561  00283A  9330               	bcf	48,1,b	;volatile
  4562  00283C  D000               	goto	l4310
  4563  00283E                     l4310:
  4564                           
  4565                           ; BSR set to: 15
  4566                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
  4567  00283E  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  4568  002842  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  4569  002846  50DF               	movf	indf2,w,c
  4570  002848  010F               	movlb	15	; () banked
  4571  00284A  6F36               	movwf	54,b	;volatile
  4572                           
  4573                           ; BSR set to: 15
  4574                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
  4575  00284C  0100               	movlb	0	; () banked
  4576  00284E  EE20 F001          	lfsr	2,1
  4577  002852  517B               	movf	CANsendMessage@data& (0+255),w,b
  4578  002854  26D9               	addwf	fsr2l,f,c
  4579  002856  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4580  002858  22DA               	addwfc	fsr2h,f,c
  4581  00285A  50DF               	movf	indf2,w,c
  4582  00285C  010F               	movlb	15	; () banked
  4583  00285E  6F37               	movwf	55,b	;volatile
  4584                           
  4585                           ; BSR set to: 15
  4586                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
  4587  002860  0100               	movlb	0	; () banked
  4588  002862  EE20 F002          	lfsr	2,2
  4589  002866  517B               	movf	CANsendMessage@data& (0+255),w,b
  4590  002868  26D9               	addwf	fsr2l,f,c
  4591  00286A  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4592  00286C  22DA               	addwfc	fsr2h,f,c
  4593  00286E  50DF               	movf	indf2,w,c
  4594  002870  010F               	movlb	15	; () banked
  4595  002872  6F38               	movwf	56,b	;volatile
  4596                           
  4597                           ; BSR set to: 15
  4598                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
  4599  002874  0100               	movlb	0	; () banked
  4600  002876  EE20 F003          	lfsr	2,3
  4601  00287A  517B               	movf	CANsendMessage@data& (0+255),w,b
  4602  00287C  26D9               	addwf	fsr2l,f,c
  4603  00287E  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4604  002880  22DA               	addwfc	fsr2h,f,c
  4605  002882  50DF               	movf	indf2,w,c
  4606  002884  010F               	movlb	15	; () banked
  4607  002886  6F39               	movwf	57,b	;volatile
  4608                           
  4609                           ; BSR set to: 15
  4610                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
  4611  002888  0100               	movlb	0	; () banked
  4612  00288A  EE20 F004          	lfsr	2,4
  4613  00288E  517B               	movf	CANsendMessage@data& (0+255),w,b
  4614  002890  26D9               	addwf	fsr2l,f,c
  4615  002892  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4616  002894  22DA               	addwfc	fsr2h,f,c
  4617  002896  50DF               	movf	indf2,w,c
  4618  002898  010F               	movlb	15	; () banked
  4619  00289A  6F3A               	movwf	58,b	;volatile
  4620                           
  4621                           ; BSR set to: 15
  4622                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
  4623  00289C  0100               	movlb	0	; () banked
  4624  00289E  EE20 F005          	lfsr	2,5
  4625  0028A2  517B               	movf	CANsendMessage@data& (0+255),w,b
  4626  0028A4  26D9               	addwf	fsr2l,f,c
  4627  0028A6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4628  0028A8  22DA               	addwfc	fsr2h,f,c
  4629  0028AA  50DF               	movf	indf2,w,c
  4630  0028AC  010F               	movlb	15	; () banked
  4631  0028AE  6F3B               	movwf	59,b	;volatile
  4632                           
  4633                           ; BSR set to: 15
  4634                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
  4635  0028B0  0100               	movlb	0	; () banked
  4636  0028B2  EE20 F006          	lfsr	2,6
  4637  0028B6  517B               	movf	CANsendMessage@data& (0+255),w,b
  4638  0028B8  26D9               	addwf	fsr2l,f,c
  4639  0028BA  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4640  0028BC  22DA               	addwfc	fsr2h,f,c
  4641  0028BE  50DF               	movf	indf2,w,c
  4642  0028C0  010F               	movlb	15	; () banked
  4643  0028C2  6F3C               	movwf	60,b	;volatile
  4644                           
  4645                           ; BSR set to: 15
  4646                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
  4647  0028C4  0100               	movlb	0	; () banked
  4648  0028C6  EE20 F007          	lfsr	2,7
  4649  0028CA  517B               	movf	CANsendMessage@data& (0+255),w,b
  4650  0028CC  26D9               	addwf	fsr2l,f,c
  4651  0028CE  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4652  0028D0  22DA               	addwfc	fsr2h,f,c
  4653  0028D2  50DF               	movf	indf2,w,c
  4654  0028D4  010F               	movlb	15	; () banked
  4655  0028D6  6F3D               	movwf	61,b	;volatile
  4656                           
  4657                           ; BSR set to: 15
  4658                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
  4659  0028D8  010F               	movlb	15	; () banked
  4660  0028DA  8730               	bsf	48,3,b	;volatile
  4661                           
  4662                           ; BSR set to: 15
  4663                           ;inc\CANlib.h: 444: return;
  4664  0028DC  0012               	return	
  4665  0028DE                     l374:
  4666                           
  4667                           ; BSR set to: 15
  4668                           ;inc\CANlib.h: 445: }
  4669                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
  4670  0028DE  010F               	movlb	15	; () banked
  4671  0028E0  B720               	btfsc	32,3,b	;volatile
  4672  0028E2  0012               	return	
  4673                           
  4674                           ; BSR set to: 15
  4675                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
  4676  0028E4  C07D  FF25         	movff	CANsendMessage@dataLength,3877	;volatile
  4677                           
  4678                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
  4679  0028E8  0100               	movlb	0	; () banked
  4680  0028EA  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  4681  0028EC  D003               	goto	l389
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
  4685  0028EE  010F               	movlb	15	; () banked
  4686  0028F0  8D25               	bsf	37,6,b	;volatile
  4687  0028F2  D002               	goto	l390
  4688  0028F4                     l389:
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;inc\CANlib.h: 454: else
  4692                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
  4693  0028F4  010F               	movlb	15	; () banked
  4694  0028F6  9D25               	bcf	37,6,b	;volatile
  4695  0028F8                     l390:
  4696                           
  4697                           ; BSR set to: 15
  4698                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
  4699  0028F8  0100               	movlb	0	; () banked
  4700  0028FA  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  4701  0028FC  D07A               	goto	l391
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;inc\CANlib.h: 458: {
  4705                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
  4706  0028FE  0100               	movlb	0	; () banked
  4707  002900  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  4708  002902  0100               	movlb	0	; () banked
  4709  002904  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4710  002906  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4711  002908  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4712  00290A  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
  4716  00290C  C083  FF24         	movff	CANsendMessage@tamp,3876	;volatile
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
  4720  002910  0E00               	movlw	0
  4721  002912  0100               	movlb	0	; () banked
  4722  002914  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4723  002916  0100               	movlb	0	; () banked
  4724  002918  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4725  00291A  0EFF               	movlw	255
  4726  00291C  0100               	movlb	0	; () banked
  4727  00291E  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4728  002920  0100               	movlb	0	; () banked
  4729  002922  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4730  002924  0E00               	movlw	0
  4731  002926  0100               	movlb	0	; () banked
  4732  002928  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4733  00292A  0100               	movlb	0	; () banked
  4734  00292C  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4735  00292E  0E00               	movlw	0
  4736  002930  0100               	movlb	0	; () banked
  4737  002932  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4738  002934  0100               	movlb	0	; () banked
  4739  002936  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4740                           
  4741                           ; BSR set to: 0
  4742                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
  4743  002938  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4744  00293C  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4745  002940  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4746  002944  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4747  002948  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  4748  00294C  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  4749  002950  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  4750  002954  0100               	movlb	0	; () banked
  4751  002956  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  4752  002958  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4753  00295C  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4754  002960  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4755  002964  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
  4759  002968  C083  FF23         	movff	CANsendMessage@tamp,3875	;volatile
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
  4763  00296C  0E00               	movlw	0
  4764  00296E  010F               	movlb	15	; () banked
  4765  002970  6F22               	movwf	34,b	;volatile
  4766                           
  4767                           ; BSR set to: 15
  4768                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
  4769  002972  010F               	movlb	15	; () banked
  4770  002974  8722               	bsf	34,3,b	;volatile
  4771                           
  4772                           ; BSR set to: 15
  4773                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
  4774  002976  0100               	movlb	0	; () banked
  4775  002978  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  4776  00297A  D002               	goto	l392
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
  4780  00297C  010F               	movlb	15	; () banked
  4781  00297E  8122               	bsf	34,0,b	;volatile
  4782  002980                     l392:
  4783                           
  4784                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
  4785  002980  0100               	movlb	0	; () banked
  4786  002982  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  4787  002984  D002               	goto	l393
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
  4791  002986  010F               	movlb	15	; () banked
  4792  002988  8322               	bsf	34,1,b	;volatile
  4793  00298A                     l393:
  4794                           
  4795                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
  4796  00298A  0100               	movlb	0	; () banked
  4797  00298C  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  4798  00298E  D002               	goto	l394
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
  4802  002990  010F               	movlb	15	; () banked
  4803  002992  8B22               	bsf	34,5,b	;volatile
  4804  002994                     l394:
  4805                           
  4806                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
  4807  002994  0100               	movlb	0	; () banked
  4808  002996  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  4809  002998  D002               	goto	l395
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
  4813  00299A  010F               	movlb	15	; () banked
  4814  00299C  8D22               	bsf	34,6,b	;volatile
  4815  00299E                     l395:
  4816                           
  4817                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
  4818  00299E  0100               	movlb	0	; () banked
  4819  0029A0  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  4820  0029A2  D003               	goto	l4360
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
  4824  0029A4  010F               	movlb	15	; () banked
  4825  0029A6  8F22               	bsf	34,7,b	;volatile
  4826  0029A8  D000               	goto	l4360
  4827  0029AA                     l4360:
  4828                           
  4829                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
  4830  0029AA  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4831  0029AE  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4832  0029B2  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4833  0029B6  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4834  0029BA  0E16               	movlw	22
  4835  0029BC  D006               	goto	u4620
  4836  0029BE                     u4625:
  4837  0029BE  0100               	movlb	0	; () banked
  4838  0029C0  90D8               	bcf	status,0,c
  4839  0029C2  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4840  0029C4  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4841  0029C6  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4842  0029C8  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4843  0029CA                     u4620:
  4844  0029CA  2EE8               	decfsz	wreg,f,c
  4845  0029CC  D7F8               	goto	u4625
  4846  0029CE  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4847  0029D2  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4848  0029D6  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4849  0029DA  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
  4853  0029DE  0100               	movlb	0	; () banked
  4854  0029E0  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4855  0029E2  0100               	movlb	0	; () banked
  4856  0029E4  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4857  0029E6  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4858  0029E8  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4859  0029EA  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
  4863  0029EC  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  4864                           
  4865                           ;inc\CANlib.h: 483: }
  4866  0029F0  D05A               	goto	l4380
  4867  0029F2                     l391:
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;inc\CANlib.h: 485: else
  4871                           ;inc\CANlib.h: 487: {
  4872                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
  4873  0029F2  010F               	movlb	15	; () banked
  4874  0029F4  9722               	bcf	34,3,b	;volatile
  4875                           
  4876                           ; BSR set to: 15
  4877                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
  4878  0029F6  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4879  0029FA  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4880  0029FE  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4881  002A02  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4882  002A06  0E04               	movlw	4
  4883  002A08  D006               	goto	u4630
  4884  002A0A                     u4635:
  4885  002A0A  0100               	movlb	0	; () banked
  4886  002A0C  90D8               	bcf	status,0,c
  4887  002A0E  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4888  002A10  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4889  002A12  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4890  002A14  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4891  002A16                     u4630:
  4892  002A16  2EE8               	decfsz	wreg,f,c
  4893  002A18  D7F8               	goto	u4635
  4894  002A1A  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4895  002A1E  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4896  002A22  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4897  002A26  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
  4901  002A2A  0100               	movlb	0	; () banked
  4902  002A2C  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4903  002A2E  0100               	movlb	0	; () banked
  4904  002A30  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4905  002A32  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4906  002A34  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4907  002A36  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4908                           
  4909                           ; BSR set to: 0
  4910                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
  4911  002A38  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
  4915  002A3C  0E07               	movlw	7
  4916  002A3E  0100               	movlb	0	; () banked
  4917  002A40  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4918  002A42  0100               	movlb	0	; () banked
  4919  002A44  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4920  002A46  0E00               	movlw	0
  4921  002A48  0100               	movlb	0	; () banked
  4922  002A4A  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4923  002A4C  0100               	movlb	0	; () banked
  4924  002A4E  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4925  002A50  0E00               	movlw	0
  4926  002A52  0100               	movlb	0	; () banked
  4927  002A54  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4928  002A56  0100               	movlb	0	; () banked
  4929  002A58  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4930  002A5A  0E00               	movlw	0
  4931  002A5C  0100               	movlb	0	; () banked
  4932  002A5E  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4933  002A60  0100               	movlb	0	; () banked
  4934  002A62  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;inc\CANlib.h: 495: tamp = tamp << 5;
  4938  002A64  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4939  002A68  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4940  002A6C  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4941  002A70  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4942  002A74  0E05               	movlw	5
  4943  002A76                     u4645:
  4944  002A76  90D8               	bcf	status,0,c
  4945  002A78  0100               	movlb	0	; () banked
  4946  002A7A  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  4947  002A7C  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  4948  002A7E  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  4949  002A80  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  4950  002A82  2EE8               	decfsz	wreg,f,c
  4951  002A84  D7F8               	goto	u4645
  4952  002A86  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4953  002A8A  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4954  002A8E  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4955  002A92  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
  4959  002A96  010F               	movlb	15	; () banked
  4960  002A98  5122               	movf	34,w,b	;volatile
  4961  002A9A  0B1F               	andlw	31
  4962  002A9C  010F               	movlb	15	; () banked
  4963  002A9E  6F22               	movwf	34,b	;volatile
  4964                           
  4965                           ; BSR set to: 15
  4966                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
  4967  002AA0  C083  FF22         	movff	CANsendMessage@tamp,3874	;volatile
  4968  002AA4  D000               	goto	l4380
  4969  002AA6                     l4380:
  4970                           
  4971                           ;inc\CANlib.h: 498: }
  4972                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
  4973  002AA6  0100               	movlb	0	; () banked
  4974  002AA8  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  4975  002AAA  D003               	goto	l398
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
  4979  002AAC  010F               	movlb	15	; () banked
  4980  002AAE  8120               	bsf	32,0,b	;volatile
  4981  002AB0  D002               	goto	l399
  4982  002AB2                     l398:
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;inc\CANlib.h: 502: else
  4986                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
  4987  002AB2  010F               	movlb	15	; () banked
  4988  002AB4  9120               	bcf	32,0,b	;volatile
  4989  002AB6                     l399:
  4990                           
  4991                           ; BSR set to: 15
  4992                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
  4993  002AB6  0100               	movlb	0	; () banked
  4994  002AB8  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  4995  002ABA  D003               	goto	l400
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
  4999  002ABC  010F               	movlb	15	; () banked
  5000  002ABE  8320               	bsf	32,1,b	;volatile
  5001  002AC0  D003               	goto	l4386
  5002  002AC2                     l400:
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;inc\CANlib.h: 506: else
  5006                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
  5007  002AC2  010F               	movlb	15	; () banked
  5008  002AC4  9320               	bcf	32,1,b	;volatile
  5009  002AC6  D000               	goto	l4386
  5010  002AC8                     l4386:
  5011                           
  5012                           ; BSR set to: 15
  5013                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
  5014  002AC8  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  5015  002ACC  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  5016  002AD0  50DF               	movf	indf2,w,c
  5017  002AD2  010F               	movlb	15	; () banked
  5018  002AD4  6F26               	movwf	38,b	;volatile
  5019                           
  5020                           ; BSR set to: 15
  5021                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
  5022  002AD6  0100               	movlb	0	; () banked
  5023  002AD8  EE20 F001          	lfsr	2,1
  5024  002ADC  517B               	movf	CANsendMessage@data& (0+255),w,b
  5025  002ADE  26D9               	addwf	fsr2l,f,c
  5026  002AE0  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5027  002AE2  22DA               	addwfc	fsr2h,f,c
  5028  002AE4  50DF               	movf	indf2,w,c
  5029  002AE6  010F               	movlb	15	; () banked
  5030  002AE8  6F27               	movwf	39,b	;volatile
  5031                           
  5032                           ; BSR set to: 15
  5033                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
  5034  002AEA  0100               	movlb	0	; () banked
  5035  002AEC  EE20 F002          	lfsr	2,2
  5036  002AF0  517B               	movf	CANsendMessage@data& (0+255),w,b
  5037  002AF2  26D9               	addwf	fsr2l,f,c
  5038  002AF4  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5039  002AF6  22DA               	addwfc	fsr2h,f,c
  5040  002AF8  50DF               	movf	indf2,w,c
  5041  002AFA  010F               	movlb	15	; () banked
  5042  002AFC  6F28               	movwf	40,b	;volatile
  5043                           
  5044                           ; BSR set to: 15
  5045                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
  5046  002AFE  0100               	movlb	0	; () banked
  5047  002B00  EE20 F003          	lfsr	2,3
  5048  002B04  517B               	movf	CANsendMessage@data& (0+255),w,b
  5049  002B06  26D9               	addwf	fsr2l,f,c
  5050  002B08  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5051  002B0A  22DA               	addwfc	fsr2h,f,c
  5052  002B0C  50DF               	movf	indf2,w,c
  5053  002B0E  010F               	movlb	15	; () banked
  5054  002B10  6F29               	movwf	41,b	;volatile
  5055                           
  5056                           ; BSR set to: 15
  5057                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
  5058  002B12  0100               	movlb	0	; () banked
  5059  002B14  EE20 F004          	lfsr	2,4
  5060  002B18  517B               	movf	CANsendMessage@data& (0+255),w,b
  5061  002B1A  26D9               	addwf	fsr2l,f,c
  5062  002B1C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5063  002B1E  22DA               	addwfc	fsr2h,f,c
  5064  002B20  50DF               	movf	indf2,w,c
  5065  002B22  010F               	movlb	15	; () banked
  5066  002B24  6F2A               	movwf	42,b	;volatile
  5067                           
  5068                           ; BSR set to: 15
  5069                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
  5070  002B26  0100               	movlb	0	; () banked
  5071  002B28  EE20 F005          	lfsr	2,5
  5072  002B2C  517B               	movf	CANsendMessage@data& (0+255),w,b
  5073  002B2E  26D9               	addwf	fsr2l,f,c
  5074  002B30  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5075  002B32  22DA               	addwfc	fsr2h,f,c
  5076  002B34  50DF               	movf	indf2,w,c
  5077  002B36  010F               	movlb	15	; () banked
  5078  002B38  6F2B               	movwf	43,b	;volatile
  5079                           
  5080                           ; BSR set to: 15
  5081                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
  5082  002B3A  0100               	movlb	0	; () banked
  5083  002B3C  EE20 F006          	lfsr	2,6
  5084  002B40  517B               	movf	CANsendMessage@data& (0+255),w,b
  5085  002B42  26D9               	addwf	fsr2l,f,c
  5086  002B44  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5087  002B46  22DA               	addwfc	fsr2h,f,c
  5088  002B48  50DF               	movf	indf2,w,c
  5089  002B4A  010F               	movlb	15	; () banked
  5090  002B4C  6F2C               	movwf	44,b	;volatile
  5091                           
  5092                           ; BSR set to: 15
  5093                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
  5094  002B4E  0100               	movlb	0	; () banked
  5095  002B50  EE20 F007          	lfsr	2,7
  5096  002B54  517B               	movf	CANsendMessage@data& (0+255),w,b
  5097  002B56  26D9               	addwf	fsr2l,f,c
  5098  002B58  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5099  002B5A  22DA               	addwfc	fsr2h,f,c
  5100  002B5C  50DF               	movf	indf2,w,c
  5101  002B5E  010F               	movlb	15	; () banked
  5102  002B60  6F2D               	movwf	45,b	;volatile
  5103                           
  5104                           ; BSR set to: 15
  5105                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
  5106  002B62  010F               	movlb	15	; () banked
  5107  002B64  8720               	bsf	32,3,b	;volatile
  5108                           
  5109                           ; BSR set to: 15
  5110                           ;inc\CANlib.h: 520: return;
  5111  002B66  0012               	return	
  5112                           
  5113                           ; BSR set to: 15
  5114                           
  5115                           ; BSR set to: 15
  5116  002B68  0012               	return		;funcret
  5117  002B6A                     __end_of_CANsendMessage:
  5118                           	opt stack 0
  5119                           tblptru	equ	0xFF8
  5120                           tblptrh	equ	0xFF7
  5121                           tblptrl	equ	0xFF6
  5122                           tablat	equ	0xFF5
  5123                           postinc0	equ	0xFEE
  5124                           wreg	equ	0xFE8
  5125                           indf2	equ	0xFDF
  5126                           postinc2	equ	0xFDE
  5127                           postdec2	equ	0xFDD
  5128                           fsr2h	equ	0xFDA
  5129                           fsr2l	equ	0xFD9
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function _CANisTxReady *****************
  5133 ;; Defined at:
  5134 ;;		line 1154 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;		None
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;		None
  5139 ;; Return value:  Size  Location     Type
  5140 ;;                  1    wreg      unsigned char 
  5141 ;; Registers used:
  5142 ;;		wreg, status,2
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5149 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5151 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5152 ;;Total ram usage:        1 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; Hardware stack levels required when called:    5
  5155 ;; This function calls:
  5156 ;;		Nothing
  5157 ;; This function is called by:
  5158 ;;		_main
  5159 ;;		_park_search
  5160 ;;		_park_routine
  5161 ;;		_can_send
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text6
  5166  005F72                     __ptext6:
  5167                           	opt stack 0
  5168  005F72                     _CANisTxReady:
  5169                           	opt stack 22
  5170                           
  5171                           ;inc\CANlib.h: 1156: return (!TXB0CONbits.TXREQ || !TXB1CONbits.TXREQ || !TXB2CONbits.TX
      +                          REQ);
  5172                           
  5173                           ; BSR set to: 15
  5174                           ;incstack = 0
  5175  005F72  0E01               	movlw	1
  5176  005F74  0100               	movlb	0	; () banked
  5177  005F76  6F77               	movwf	_CANisTxReady$2837& (0+255),b
  5178                           
  5179                           ; BSR set to: 0
  5180  005F78  010F               	movlb	15	; () banked
  5181  005F7A  A740               	btfss	64,3,b	;volatile
  5182  005F7C  D009               	goto	l552
  5183                           
  5184                           ; BSR set to: 15
  5185  005F7E  010F               	movlb	15	; () banked
  5186  005F80  A730               	btfss	48,3,b	;volatile
  5187  005F82  D006               	goto	l552
  5188                           
  5189                           ; BSR set to: 15
  5190  005F84  010F               	movlb	15	; () banked
  5191  005F86  A720               	btfss	32,3,b	;volatile
  5192  005F88  D003               	goto	l552
  5193                           
  5194                           ; BSR set to: 15
  5195  005F8A  0E00               	movlw	0
  5196  005F8C  0100               	movlb	0	; () banked
  5197  005F8E  6F77               	movwf	_CANisTxReady$2837& (0+255),b
  5198  005F90                     l552:
  5199  005F90  0100               	movlb	0	; () banked
  5200  005F92  5177               	movf	_CANisTxReady$2837& (0+255),w,b
  5201  005F94  0012               	return	
  5202                           
  5203                           ; BSR set to: 0
  5204                           
  5205                           ; BSR set to: 0
  5206  005F96  0012               	return		;funcret
  5207  005F98                     __end_of_CANisTxReady:
  5208                           	opt stack 0
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           postinc0	equ	0xFEE
  5214                           wreg	equ	0xFE8
  5215                           indf2	equ	0xFDF
  5216                           postinc2	equ	0xFDE
  5217                           postdec2	equ	0xFDD
  5218                           fsr2h	equ	0xFDA
  5219                           fsr2l	equ	0xFD9
  5220                           status	equ	0xFD8
  5221                           
  5222 ;; *************** function _asin *****************
  5223 ;; Defined at:
  5224 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\asin.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  x               4   21[BANK1 ] unsigned char 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  y               4   41[BANK1 ] unsigned char 
  5229 ;;  sgn             4   25[BANK1 ] unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  4   21[BANK1 ] unsigned char 
  5232 ;; Registers used:
  5233 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5239 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5240 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Totals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;Total ram usage:       28 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    9
  5246 ;; This function calls:
  5247 ;;		___fladd
  5248 ;;		___fldiv
  5249 ;;		___flge
  5250 ;;		___flmul
  5251 ;;		___flneg
  5252 ;;		_atan
  5253 ;;		_fabs
  5254 ;;		_sqrt
  5255 ;; This function is called by:
  5256 ;;		_park_routine
  5257 ;;		_parallelo
  5258 ;;		_matematica
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           	psect	text7
  5263  003AE6                     __ptext7:
  5264                           	opt stack 0
  5265  003AE6                     _asin:
  5266                           	opt stack 19
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;incstack = 0
  5270  003AE6  0E00               	movlw	0
  5271  003AE8  0100               	movlb	0	; () banked
  5272  003AEA  6FB3               	movwf	___flge@ff1& (0+255),b
  5273  003AEC  0E00               	movlw	0
  5274  003AEE  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5275  003AF0  0E80               	movlw	128
  5276  003AF2  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5277  003AF4  0E3F               	movlw	63
  5278  003AF6  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5279  003AF8  C198  F0AF         	movff	asin@x,fabs@d
  5280  003AFC  C199  F0B0         	movff	asin@x+1,fabs@d+1
  5281  003B00  C19A  F0B1         	movff	asin@x+2,fabs@d+2
  5282  003B04  C19B  F0B2         	movff	asin@x+3,fabs@d+3
  5283  003B08  ECCD  F02E         	call	_fabs	;wreg free
  5284  003B0C  C0AF  F0B7         	movff	?_fabs,___flge@ff2
  5285  003B10  C0B0  F0B8         	movff	?_fabs+1,___flge@ff2+1
  5286  003B14  C0B1  F0B9         	movff	?_fabs+2,___flge@ff2+2
  5287  003B18  C0B2  F0BA         	movff	?_fabs+3,___flge@ff2+3
  5288  003B1C  EC38  F02B         	call	___flge	;wreg free
  5289  003B20  0100               	movlb	0	; () banked
  5290  003B22  B0D8               	btfsc	status,0,c
  5291  003B24  D00F               	goto	l6606
  5292                           
  5293                           ; BSR set to: 0
  5294  003B26  0E00               	movlw	0
  5295  003B28  0101               	movlb	1	; () banked
  5296  003B2A  6F43               	movwf	(_errno+1)& (0+255),b
  5297  003B2C  0E21               	movlw	33
  5298  003B2E  6F42               	movwf	_errno& (0+255),b
  5299  003B30  0E00               	movlw	0
  5300  003B32  0101               	movlb	1	; () banked
  5301  003B34  6F98               	movwf	?_asin& (0+255),b
  5302  003B36  0E00               	movlw	0
  5303  003B38  6F99               	movwf	(?_asin+1)& (0+255),b
  5304  003B3A  0E00               	movlw	0
  5305  003B3C  6F9A               	movwf	(?_asin+2)& (0+255),b
  5306  003B3E  0E00               	movlw	0
  5307  003B40  6F9B               	movwf	(?_asin+3)& (0+255),b
  5308                           
  5309                           ; BSR set to: 1
  5310  003B42  0012               	return	
  5311  003B44                     l6606:
  5312  003B44  0E00               	movlw	0
  5313  003B46  0101               	movlb	1	; () banked
  5314  003B48  6F9C               	movwf	asin@sgn& (0+255),b
  5315  003B4A  0E00               	movlw	0
  5316  003B4C  6F9D               	movwf	(asin@sgn+1)& (0+255),b
  5317  003B4E  0E80               	movlw	128
  5318  003B50  6F9E               	movwf	(asin@sgn+2)& (0+255),b
  5319  003B52  0E3F               	movlw	63
  5320  003B54  6F9F               	movwf	(asin@sgn+3)& (0+255),b
  5321                           
  5322                           ; BSR set to: 1
  5323  003B56  C198  F085         	movff	asin@x,___flmul@f2
  5324  003B5A  C199  F086         	movff	asin@x+1,___flmul@f2+1
  5325  003B5E  C19A  F087         	movff	asin@x+2,___flmul@f2+2
  5326  003B62  C19B  F088         	movff	asin@x+3,___flmul@f2+3
  5327  003B66  C198  F081         	movff	asin@x,___flmul@f1
  5328  003B6A  C199  F082         	movff	asin@x+1,___flmul@f1+1
  5329  003B6E  C19A  F083         	movff	asin@x+2,___flmul@f1+2
  5330  003B72  C19B  F084         	movff	asin@x+3,___flmul@f1+3
  5331  003B76  ECB9  F027         	call	___flmul	;wreg free
  5332  003B7A  C081  F0AB         	movff	?___flmul,___flneg@f1
  5333  003B7E  C082  F0AC         	movff	?___flmul+1,___flneg@f1+1
  5334  003B82  C083  F0AD         	movff	?___flmul+2,___flneg@f1+2
  5335  003B86  C084  F0AE         	movff	?___flmul+3,___flneg@f1+3
  5336  003B8A  ECEC  F02E         	call	___flneg	;wreg free
  5337  003B8E  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5338  003B92  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5339  003B96  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5340  003B9A  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5341  003B9E  0E00               	movlw	0
  5342  003BA0  0100               	movlb	0	; () banked
  5343  003BA2  6FA3               	movwf	___fladd@f2& (0+255),b
  5344  003BA4  0E00               	movlw	0
  5345  003BA6  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5346  003BA8  0E80               	movlw	128
  5347  003BAA  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5348  003BAC  0E3F               	movlw	63
  5349  003BAE  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5350  003BB0  EC93  F020         	call	___fladd	;wreg free
  5351  003BB4  C09F  F1A0         	movff	?___fladd,_asin$3678
  5352  003BB8  C0A0  F1A1         	movff	?___fladd+1,_asin$3678+1
  5353  003BBC  C0A1  F1A2         	movff	?___fladd+2,_asin$3678+2
  5354  003BC0  C0A2  F1A3         	movff	?___fladd+3,_asin$3678+3
  5355  003BC4  C1A0  F0D1         	movff	_asin$3678,sqrt@y
  5356  003BC8  C1A1  F0D2         	movff	_asin$3678+1,sqrt@y+1
  5357  003BCC  C1A2  F0D3         	movff	_asin$3678+2,sqrt@y+2
  5358  003BD0  C1A3  F0D4         	movff	_asin$3678+3,sqrt@y+3
  5359  003BD4  EC1E  F024         	call	_sqrt	;wreg free
  5360  003BD8  C0D1  F1AC         	movff	?_sqrt,asin@y
  5361  003BDC  C0D2  F1AD         	movff	?_sqrt+1,asin@y+1
  5362  003BE0  C0D3  F1AE         	movff	?_sqrt+2,asin@y+2
  5363  003BE4  C0D4  F1AF         	movff	?_sqrt+3,asin@y+3
  5364  003BE8  C198  F0AF         	movff	asin@x,fabs@d
  5365  003BEC  C199  F0B0         	movff	asin@x+1,fabs@d+1
  5366  003BF0  C19A  F0B1         	movff	asin@x+2,fabs@d+2
  5367  003BF4  C19B  F0B2         	movff	asin@x+3,fabs@d+3
  5368  003BF8  ECCD  F02E         	call	_fabs	;wreg free
  5369  003BFC  C0AF  F0B3         	movff	?_fabs,___flge@ff1
  5370  003C00  C0B0  F0B4         	movff	?_fabs+1,___flge@ff1+1
  5371  003C04  C0B1  F0B5         	movff	?_fabs+2,___flge@ff1+2
  5372  003C08  C0B2  F0B6         	movff	?_fabs+3,___flge@ff1+3
  5373  003C0C  0E8F               	movlw	143
  5374  003C0E  0100               	movlb	0	; () banked
  5375  003C10  6FB7               	movwf	___flge@ff2& (0+255),b
  5376  003C12  0EC2               	movlw	194
  5377  003C14  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  5378  003C16  0E35               	movlw	53
  5379  003C18  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  5380  003C1A  0E3F               	movlw	63
  5381  003C1C  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  5382  003C1E  EC38  F02B         	call	___flge	;wreg free
  5383  003C22  0100               	movlb	0	; () banked
  5384  003C24  B0D8               	btfsc	status,0,c
  5385  003C26  D02D               	goto	l6620
  5386                           
  5387                           ; BSR set to: 0
  5388  003C28  C198  F090         	movff	asin@x,___fldiv@f1
  5389  003C2C  C199  F091         	movff	asin@x+1,___fldiv@f1+1
  5390  003C30  C19A  F092         	movff	asin@x+2,___fldiv@f1+2
  5391  003C34  C19B  F093         	movff	asin@x+3,___fldiv@f1+3
  5392  003C38  C1AC  F094         	movff	asin@y,___fldiv@f2
  5393  003C3C  C1AD  F095         	movff	asin@y+1,___fldiv@f2+1
  5394  003C40  C1AE  F096         	movff	asin@y+2,___fldiv@f2+2
  5395  003C44  C1AF  F097         	movff	asin@y+3,___fldiv@f2+3
  5396  003C48  EC6B  F028         	call	___fldiv	;wreg free
  5397  003C4C  C090  F1B0         	movff	?___fldiv,_asin$3679
  5398  003C50  C091  F1B1         	movff	?___fldiv+1,_asin$3679+1
  5399  003C54  C092  F1B2         	movff	?___fldiv+2,_asin$3679+2
  5400  003C58  C093  F1B3         	movff	?___fldiv+3,_asin$3679+3
  5401  003C5C  C1B0  F0BF         	movff	_asin$3679,atan@f
  5402  003C60  C1B1  F0C0         	movff	_asin$3679+1,atan@f+1
  5403  003C64  C1B2  F0C1         	movff	_asin$3679+2,atan@f+2
  5404  003C68  C1B3  F0C2         	movff	_asin$3679+3,atan@f+3
  5405  003C6C  ECC9  F021         	call	_atan	;wreg free
  5406  003C70  C0BF  F198         	movff	?_atan,?_asin
  5407  003C74  C0C0  F199         	movff	?_atan+1,?_asin+1
  5408  003C78  C0C1  F19A         	movff	?_atan+2,?_asin+2
  5409  003C7C  C0C2  F19B         	movff	?_atan+3,?_asin+3
  5410  003C80  0012               	return	
  5411  003C82                     l6620:
  5412  003C82  0101               	movlb	1	; () banked
  5413  003C84  AF9B               	btfss	(asin@x+3)& (0+255),7,b
  5414  003C86  D06E               	goto	l6632
  5415                           
  5416                           ; BSR set to: 1
  5417  003C88  C198  F094         	movff	asin@x,___fldiv@f2
  5418  003C8C  C199  F095         	movff	asin@x+1,___fldiv@f2+1
  5419  003C90  C19A  F096         	movff	asin@x+2,___fldiv@f2+2
  5420  003C94  C19B  F097         	movff	asin@x+3,___fldiv@f2+3
  5421  003C98  C1AC  F0AB         	movff	asin@y,___flneg@f1
  5422  003C9C  C1AD  F0AC         	movff	asin@y+1,___flneg@f1+1
  5423  003CA0  C1AE  F0AD         	movff	asin@y+2,___flneg@f1+2
  5424  003CA4  C1AF  F0AE         	movff	asin@y+3,___flneg@f1+3
  5425  003CA8  ECEC  F02E         	call	___flneg	;wreg free
  5426  003CAC  C0AB  F090         	movff	?___flneg,___fldiv@f1
  5427  003CB0  C0AC  F091         	movff	?___flneg+1,___fldiv@f1+1
  5428  003CB4  C0AD  F092         	movff	?___flneg+2,___fldiv@f1+2
  5429  003CB8  C0AE  F093         	movff	?___flneg+3,___fldiv@f1+3
  5430  003CBC  EC6B  F028         	call	___fldiv	;wreg free
  5431  003CC0  C090  F1B0         	movff	?___fldiv,_asin$3679
  5432  003CC4  C091  F1B1         	movff	?___fldiv+1,_asin$3679+1
  5433  003CC8  C092  F1B2         	movff	?___fldiv+2,_asin$3679+2
  5434  003CCC  C093  F1B3         	movff	?___fldiv+3,_asin$3679+3
  5435  003CD0  C1B0  F0BF         	movff	_asin$3679,atan@f
  5436  003CD4  C1B1  F0C0         	movff	_asin$3679+1,atan@f+1
  5437  003CD8  C1B2  F0C1         	movff	_asin$3679+2,atan@f+2
  5438  003CDC  C1B3  F0C2         	movff	_asin$3679+3,atan@f+3
  5439  003CE0  ECC9  F021         	call	_atan	;wreg free
  5440  003CE4  C0BF  F1A8         	movff	?_atan,_asin$3680
  5441  003CE8  C0C0  F1A9         	movff	?_atan+1,_asin$3680+1
  5442  003CEC  C0C1  F1AA         	movff	?_atan+2,_asin$3680+2
  5443  003CF0  C0C2  F1AB         	movff	?_atan+3,_asin$3680+3
  5444  003CF4  0EDB               	movlw	219
  5445  003CF6  0100               	movlb	0	; () banked
  5446  003CF8  6FA3               	movwf	___fladd@f2& (0+255),b
  5447  003CFA  0E0F               	movlw	15
  5448  003CFC  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5449  003CFE  0EC9               	movlw	201
  5450  003D00  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5451  003D02  0E3F               	movlw	63
  5452  003D04  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5453  003D06  C1A8  F0AB         	movff	_asin$3680,___flneg@f1
  5454  003D0A  C1A9  F0AC         	movff	_asin$3680+1,___flneg@f1+1
  5455  003D0E  C1AA  F0AD         	movff	_asin$3680+2,___flneg@f1+2
  5456  003D12  C1AB  F0AE         	movff	_asin$3680+3,___flneg@f1+3
  5457  003D16  ECEC  F02E         	call	___flneg	;wreg free
  5458  003D1A  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5459  003D1E  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5460  003D22  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5461  003D26  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5462  003D2A  EC93  F020         	call	___fladd	;wreg free
  5463  003D2E  C09F  F1A4         	movff	?___fladd,_asin$3681
  5464  003D32  C0A0  F1A5         	movff	?___fladd+1,_asin$3681+1
  5465  003D36  C0A1  F1A6         	movff	?___fladd+2,_asin$3681+2
  5466  003D3A  C0A2  F1A7         	movff	?___fladd+3,_asin$3681+3
  5467  003D3E  C1A4  F0AB         	movff	_asin$3681,___flneg@f1
  5468  003D42  C1A5  F0AC         	movff	_asin$3681+1,___flneg@f1+1
  5469  003D46  C1A6  F0AD         	movff	_asin$3681+2,___flneg@f1+2
  5470  003D4A  C1A7  F0AE         	movff	_asin$3681+3,___flneg@f1+3
  5471  003D4E  ECEC  F02E         	call	___flneg	;wreg free
  5472  003D52  C0AB  F198         	movff	?___flneg,?_asin
  5473  003D56  C0AC  F199         	movff	?___flneg+1,?_asin+1
  5474  003D5A  C0AD  F19A         	movff	?___flneg+2,?_asin+2
  5475  003D5E  C0AE  F19B         	movff	?___flneg+3,?_asin+3
  5476  003D62  0012               	return	
  5477  003D64                     l6632:
  5478  003D64  C198  F094         	movff	asin@x,___fldiv@f2
  5479  003D68  C199  F095         	movff	asin@x+1,___fldiv@f2+1
  5480  003D6C  C19A  F096         	movff	asin@x+2,___fldiv@f2+2
  5481  003D70  C19B  F097         	movff	asin@x+3,___fldiv@f2+3
  5482  003D74  C1AC  F090         	movff	asin@y,___fldiv@f1
  5483  003D78  C1AD  F091         	movff	asin@y+1,___fldiv@f1+1
  5484  003D7C  C1AE  F092         	movff	asin@y+2,___fldiv@f1+2
  5485  003D80  C1AF  F093         	movff	asin@y+3,___fldiv@f1+3
  5486  003D84  EC6B  F028         	call	___fldiv	;wreg free
  5487  003D88  C090  F1B0         	movff	?___fldiv,_asin$3679
  5488  003D8C  C091  F1B1         	movff	?___fldiv+1,_asin$3679+1
  5489  003D90  C092  F1B2         	movff	?___fldiv+2,_asin$3679+2
  5490  003D94  C093  F1B3         	movff	?___fldiv+3,_asin$3679+3
  5491  003D98  C1B0  F0BF         	movff	_asin$3679,atan@f
  5492  003D9C  C1B1  F0C0         	movff	_asin$3679+1,atan@f+1
  5493  003DA0  C1B2  F0C1         	movff	_asin$3679+2,atan@f+2
  5494  003DA4  C1B3  F0C2         	movff	_asin$3679+3,atan@f+3
  5495  003DA8  ECC9  F021         	call	_atan	;wreg free
  5496  003DAC  C0BF  F1A8         	movff	?_atan,_asin$3680
  5497  003DB0  C0C0  F1A9         	movff	?_atan+1,_asin$3680+1
  5498  003DB4  C0C1  F1AA         	movff	?_atan+2,_asin$3680+2
  5499  003DB8  C0C2  F1AB         	movff	?_atan+3,_asin$3680+3
  5500  003DBC  C1A8  F0AB         	movff	_asin$3680,___flneg@f1
  5501  003DC0  C1A9  F0AC         	movff	_asin$3680+1,___flneg@f1+1
  5502  003DC4  C1AA  F0AD         	movff	_asin$3680+2,___flneg@f1+2
  5503  003DC8  C1AB  F0AE         	movff	_asin$3680+3,___flneg@f1+3
  5504  003DCC  ECEC  F02E         	call	___flneg	;wreg free
  5505  003DD0  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5506  003DD4  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5507  003DD8  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5508  003DDC  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5509  003DE0  0EDB               	movlw	219
  5510  003DE2  0100               	movlb	0	; () banked
  5511  003DE4  6FA3               	movwf	___fladd@f2& (0+255),b
  5512  003DE6  0E0F               	movlw	15
  5513  003DE8  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5514  003DEA  0EC9               	movlw	201
  5515  003DEC  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5516  003DEE  0E3F               	movlw	63
  5517  003DF0  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5518  003DF2  EC93  F020         	call	___fladd	;wreg free
  5519  003DF6  C09F  F198         	movff	?___fladd,?_asin
  5520  003DFA  C0A0  F199         	movff	?___fladd+1,?_asin+1
  5521  003DFE  C0A1  F19A         	movff	?___fladd+2,?_asin+2
  5522  003E02  C0A2  F19B         	movff	?___fladd+3,?_asin+3
  5523  003E06  0012               	return	
  5524  003E08  0012               	return		;funcret
  5525  003E0A                     __end_of_asin:
  5526                           	opt stack 0
  5527                           tblptru	equ	0xFF8
  5528                           tblptrh	equ	0xFF7
  5529                           tblptrl	equ	0xFF6
  5530                           tablat	equ	0xFF5
  5531                           postinc0	equ	0xFEE
  5532                           wreg	equ	0xFE8
  5533                           indf2	equ	0xFDF
  5534                           postinc2	equ	0xFDE
  5535                           postdec2	equ	0xFDD
  5536                           fsr2h	equ	0xFDA
  5537                           fsr2l	equ	0xFD9
  5538                           status	equ	0xFD8
  5539                           
  5540 ;; *************** function _sqrt *****************
  5541 ;; Defined at:
  5542 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;  y               4  113[BANK0 ] unsigned char 
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;  x               4   17[BANK1 ] unsigned char 
  5547 ;;  q               4   13[BANK1 ] unsigned char 
  5548 ;;  z               4    8[BANK1 ] unsigned char 
  5549 ;;  og              4    4[BANK1 ] unsigned char 
  5550 ;;  i               1   12[BANK1 ] unsigned char 
  5551 ;; Return value:  Size  Location     Type
  5552 ;;                  4  113[BANK0 ] unsigned char 
  5553 ;; Registers used:
  5554 ;;		wreg, status,2, status,0, cstack
  5555 ;; Tracked objects:
  5556 ;;		On entry : 0/0
  5557 ;;		On exit  : 0/0
  5558 ;;		Unchanged: 0/0
  5559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5560 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5561 ;;      Locals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  5562 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5563 ;;      Totals:         0       4      21       0       0       0       0       0       0       0       0       0       
      +0       0
  5564 ;;Total ram usage:       25 bytes
  5565 ;; Hardware stack levels used:    1
  5566 ;; Hardware stack levels required when called:    8
  5567 ;; This function calls:
  5568 ;;		___flge
  5569 ;;		___flmul
  5570 ;;		___flsub
  5571 ;; This function is called by:
  5572 ;;		_parallelo
  5573 ;;		_asin
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           	psect	text8
  5578  00483C                     __ptext8:
  5579                           	opt stack 0
  5580  00483C                     _sqrt:
  5581                           	opt stack 20
  5582                           
  5583                           ;incstack = 0
  5584  00483C  0E00               	movlw	0
  5585  00483E  0100               	movlb	0	; () banked
  5586  004840  6FB3               	movwf	___flge@ff1& (0+255),b
  5587  004842  0E00               	movlw	0
  5588  004844  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5589  004846  0E00               	movlw	0
  5590  004848  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5591  00484A  0E00               	movlw	0
  5592  00484C  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5593  00484E  C0D1  F0B7         	movff	sqrt@y,___flge@ff2
  5594  004852  C0D2  F0B8         	movff	sqrt@y+1,___flge@ff2+1
  5595  004856  C0D3  F0B9         	movff	sqrt@y+2,___flge@ff2+2
  5596  00485A  C0D4  F0BA         	movff	sqrt@y+3,___flge@ff2+3
  5597  00485E  EC38  F02B         	call	___flge	;wreg free
  5598  004862  0100               	movlb	0	; () banked
  5599  004864  A0D8               	btfss	status,0,c
  5600  004866  D012               	goto	l1465
  5601                           
  5602                           ; BSR set to: 0
  5603  004868  0100               	movlb	0	; () banked
  5604  00486A  AFD4               	btfss	(sqrt@y+3)& (0+255),7,b
  5605  00486C  D005               	goto	l1466
  5606                           
  5607                           ; BSR set to: 0
  5608  00486E  0E00               	movlw	0
  5609  004870  0101               	movlb	1	; () banked
  5610  004872  6F43               	movwf	(_errno+1)& (0+255),b
  5611  004874  0E21               	movlw	33
  5612  004876  6F42               	movwf	_errno& (0+255),b
  5613  004878                     l1466:
  5614  004878  0E00               	movlw	0
  5615  00487A  0100               	movlb	0	; () banked
  5616  00487C  6FD1               	movwf	?_sqrt& (0+255),b
  5617  00487E  0E00               	movlw	0
  5618  004880  6FD2               	movwf	(?_sqrt+1)& (0+255),b
  5619  004882  0E00               	movlw	0
  5620  004884  6FD3               	movwf	(?_sqrt+2)& (0+255),b
  5621  004886  0E00               	movlw	0
  5622  004888  6FD4               	movwf	(?_sqrt+3)& (0+255),b
  5623                           
  5624                           ; BSR set to: 0
  5625  00488A  0012               	return	
  5626  00488C                     l1465:
  5627                           
  5628                           ; BSR set to: 0
  5629  00488C  C0D1  F18B         	movff	sqrt@y,sqrt@z
  5630  004890  C0D2  F18C         	movff	sqrt@y+1,sqrt@z+1
  5631  004894  C0D3  F18D         	movff	sqrt@y+2,sqrt@z+2
  5632  004898  C0D4  F18E         	movff	sqrt@y+3,sqrt@z+3
  5633                           
  5634                           ; BSR set to: 0
  5635  00489C  C0D1  F183         	movff	sqrt@y,??_sqrt
  5636  0048A0  C0D2  F184         	movff	sqrt@y+1,??_sqrt+1
  5637  0048A4  C0D3  F185         	movff	sqrt@y+2,??_sqrt+2
  5638  0048A8  C0D4  F186         	movff	sqrt@y+3,??_sqrt+3
  5639  0048AC  0101               	movlb	1	; () banked
  5640  0048AE  1F83               	comf	??_sqrt& (0+255),f,b
  5641  0048B0  1F84               	comf	(??_sqrt+1)& (0+255),f,b
  5642  0048B2  1F85               	comf	(??_sqrt+2)& (0+255),f,b
  5643  0048B4  1F86               	comf	(??_sqrt+3)& (0+255),f,b
  5644  0048B6  2B83               	incf	??_sqrt& (0+255),f,b
  5645  0048B8  0E00               	movlw	0
  5646  0048BA  2384               	addwfc	(??_sqrt+1)& (0+255),f,b
  5647  0048BC  2385               	addwfc	(??_sqrt+2)& (0+255),f,b
  5648  0048BE  2386               	addwfc	(??_sqrt+3)& (0+255),f,b
  5649  0048C0  0E5E               	movlw	94
  5650  0048C2  0101               	movlb	1	; () banked
  5651  0048C4  2583               	addwf	??_sqrt& (0+255),w,b
  5652  0048C6  0101               	movlb	1	; () banked
  5653  0048C8  6F94               	movwf	sqrt@x& (0+255),b
  5654  0048CA  0EC8               	movlw	200
  5655  0048CC  0101               	movlb	1	; () banked
  5656  0048CE  2184               	addwfc	(??_sqrt+1)& (0+255),w,b
  5657  0048D0  0101               	movlb	1	; () banked
  5658  0048D2  6F95               	movwf	(sqrt@x+1)& (0+255),b
  5659  0048D4  0E6E               	movlw	110
  5660  0048D6  0101               	movlb	1	; () banked
  5661  0048D8  2185               	addwfc	(??_sqrt+2)& (0+255),w,b
  5662  0048DA  0101               	movlb	1	; () banked
  5663  0048DC  6F96               	movwf	(sqrt@x+2)& (0+255),b
  5664  0048DE  0EBE               	movlw	190
  5665  0048E0  0101               	movlb	1	; () banked
  5666  0048E2  2186               	addwfc	(??_sqrt+3)& (0+255),w,b
  5667  0048E4  0101               	movlb	1	; () banked
  5668  0048E6  6F97               	movwf	(sqrt@x+3)& (0+255),b
  5669                           
  5670                           ; BSR set to: 1
  5671  0048E8  0101               	movlb	1	; () banked
  5672  0048EA  90D8               	bcf	status,0,c
  5673  0048EC  3397               	rrcf	(sqrt@x+3)& (0+255),f,b
  5674  0048EE  3396               	rrcf	(sqrt@x+2)& (0+255),f,b
  5675  0048F0  3395               	rrcf	(sqrt@x+1)& (0+255),f,b
  5676  0048F2  3394               	rrcf	sqrt@x& (0+255),f,b
  5677                           
  5678                           ; BSR set to: 1
  5679  0048F4  0E00               	movlw	0
  5680  0048F6  0101               	movlb	1	; () banked
  5681  0048F8  5F8B               	subwf	sqrt@z& (0+255),f,b
  5682  0048FA  0E00               	movlw	0
  5683  0048FC  5B8C               	subwfb	(sqrt@z+1)& (0+255),f,b
  5684  0048FE  0E80               	movlw	128
  5685  004900  5B8D               	subwfb	(sqrt@z+2)& (0+255),f,b
  5686  004902  0E00               	movlw	0
  5687  004904  5B8E               	subwfb	(sqrt@z+3)& (0+255),f,b
  5688                           
  5689                           ; BSR set to: 1
  5690  004906  0E04               	movlw	4
  5691  004908  0101               	movlb	1	; () banked
  5692  00490A  6F8F               	movwf	sqrt@i& (0+255),b
  5693  00490C  D000               	goto	l6488
  5694  00490E                     l6488:
  5695                           
  5696                           ; BSR set to: 1
  5697  00490E  C194  F187         	movff	sqrt@x,sqrt@og
  5698  004912  C195  F188         	movff	sqrt@x+1,sqrt@og+1
  5699  004916  C196  F189         	movff	sqrt@x+2,sqrt@og+2
  5700  00491A  C197  F18A         	movff	sqrt@x+3,sqrt@og+3
  5701                           
  5702                           ; BSR set to: 1
  5703  00491E  C194  F081         	movff	sqrt@x,___flmul@f1
  5704  004922  C195  F082         	movff	sqrt@x+1,___flmul@f1+1
  5705  004926  C196  F083         	movff	sqrt@x+2,___flmul@f1+2
  5706  00492A  C197  F084         	movff	sqrt@x+3,___flmul@f1+3
  5707  00492E  C18B  F085         	movff	sqrt@z,___flmul@f2
  5708  004932  C18C  F086         	movff	sqrt@z+1,___flmul@f2+1
  5709  004936  C18D  F087         	movff	sqrt@z+2,___flmul@f2+2
  5710  00493A  C18E  F088         	movff	sqrt@z+3,___flmul@f2+3
  5711  00493E  ECB9  F027         	call	___flmul	;wreg free
  5712  004942  C081  F190         	movff	?___flmul,sqrt@q
  5713  004946  C082  F191         	movff	?___flmul+1,sqrt@q+1
  5714  00494A  C083  F192         	movff	?___flmul+2,sqrt@q+2
  5715  00494E  C084  F193         	movff	?___flmul+3,sqrt@q+3
  5716  004952  C190  F081         	movff	sqrt@q,___flmul@f1
  5717  004956  C191  F082         	movff	sqrt@q+1,___flmul@f1+1
  5718  00495A  C192  F083         	movff	sqrt@q+2,___flmul@f1+2
  5719  00495E  C193  F084         	movff	sqrt@q+3,___flmul@f1+3
  5720  004962  C194  F085         	movff	sqrt@x,___flmul@f2
  5721  004966  C195  F086         	movff	sqrt@x+1,___flmul@f2+1
  5722  00496A  C196  F087         	movff	sqrt@x+2,___flmul@f2+2
  5723  00496E  C197  F088         	movff	sqrt@x+3,___flmul@f2+3
  5724  004972  ECB9  F027         	call	___flmul	;wreg free
  5725  004976  C081  F190         	movff	?___flmul,sqrt@q
  5726  00497A  C082  F191         	movff	?___flmul+1,sqrt@q+1
  5727  00497E  C083  F192         	movff	?___flmul+2,sqrt@q+2
  5728  004982  C084  F193         	movff	?___flmul+3,sqrt@q+3
  5729  004986  C190  F081         	movff	sqrt@q,___flmul@f1
  5730  00498A  C191  F082         	movff	sqrt@q+1,___flmul@f1+1
  5731  00498E  C192  F083         	movff	sqrt@q+2,___flmul@f1+2
  5732  004992  C193  F084         	movff	sqrt@q+3,___flmul@f1+3
  5733  004996  C194  F085         	movff	sqrt@x,___flmul@f2
  5734  00499A  C195  F086         	movff	sqrt@x+1,___flmul@f2+1
  5735  00499E  C196  F087         	movff	sqrt@x+2,___flmul@f2+2
  5736  0049A2  C197  F088         	movff	sqrt@x+3,___flmul@f2+3
  5737  0049A6  ECB9  F027         	call	___flmul	;wreg free
  5738  0049AA  C081  F190         	movff	?___flmul,sqrt@q
  5739  0049AE  C082  F191         	movff	?___flmul+1,sqrt@q+1
  5740  0049B2  C083  F192         	movff	?___flmul+2,sqrt@q+2
  5741  0049B6  C084  F193         	movff	?___flmul+3,sqrt@q+3
  5742  0049BA  C194  F081         	movff	sqrt@x,___flmul@f1
  5743  0049BE  C195  F082         	movff	sqrt@x+1,___flmul@f1+1
  5744  0049C2  C196  F083         	movff	sqrt@x+2,___flmul@f1+2
  5745  0049C6  C197  F084         	movff	sqrt@x+3,___flmul@f1+3
  5746  0049CA  0E00               	movlw	0
  5747  0049CC  0100               	movlb	0	; () banked
  5748  0049CE  6F85               	movwf	___flmul@f2& (0+255),b
  5749  0049D0  0E00               	movlw	0
  5750  0049D2  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  5751  0049D4  0EC0               	movlw	192
  5752  0049D6  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  5753  0049D8  0E3F               	movlw	63
  5754  0049DA  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  5755  0049DC  ECB9  F027         	call	___flmul	;wreg free
  5756  0049E0  C081  F194         	movff	?___flmul,sqrt@x
  5757  0049E4  C082  F195         	movff	?___flmul+1,sqrt@x+1
  5758  0049E8  C083  F196         	movff	?___flmul+2,sqrt@x+2
  5759  0049EC  C084  F197         	movff	?___flmul+3,sqrt@x+3
  5760  0049F0  C194  F0C9         	movff	sqrt@x,___flsub@f1
  5761  0049F4  C195  F0CA         	movff	sqrt@x+1,___flsub@f1+1
  5762  0049F8  C196  F0CB         	movff	sqrt@x+2,___flsub@f1+2
  5763  0049FC  C197  F0CC         	movff	sqrt@x+3,___flsub@f1+3
  5764  004A00  C190  F0CD         	movff	sqrt@q,___flsub@f2
  5765  004A04  C191  F0CE         	movff	sqrt@q+1,___flsub@f2+1
  5766  004A08  C192  F0CF         	movff	sqrt@q+2,___flsub@f2+2
  5767  004A0C  C193  F0D0         	movff	sqrt@q+3,___flsub@f2+3
  5768  004A10  EC1F  F02E         	call	___flsub	;wreg free
  5769  004A14  C0C9  F194         	movff	?___flsub,sqrt@x
  5770  004A18  C0CA  F195         	movff	?___flsub+1,sqrt@x+1
  5771  004A1C  C0CB  F196         	movff	?___flsub+2,sqrt@x+2
  5772  004A20  C0CC  F197         	movff	?___flsub+3,sqrt@x+3
  5773  004A24  0101               	movlb	1	; () banked
  5774  004A26  2F8F               	decfsz	sqrt@i& (0+255),f,b
  5775  004A28  D772               	goto	l6488
  5776  004A2A  D000               	goto	l6502
  5777  004A2C                     l6502:
  5778                           
  5779                           ; BSR set to: 1
  5780  004A2C  C194  F081         	movff	sqrt@x,___flmul@f1
  5781  004A30  C195  F082         	movff	sqrt@x+1,___flmul@f1+1
  5782  004A34  C196  F083         	movff	sqrt@x+2,___flmul@f1+2
  5783  004A38  C197  F084         	movff	sqrt@x+3,___flmul@f1+3
  5784  004A3C  C0D1  F085         	movff	sqrt@y,___flmul@f2
  5785  004A40  C0D2  F086         	movff	sqrt@y+1,___flmul@f2+1
  5786  004A44  C0D3  F087         	movff	sqrt@y+2,___flmul@f2+2
  5787  004A48  C0D4  F088         	movff	sqrt@y+3,___flmul@f2+3
  5788  004A4C  ECB9  F027         	call	___flmul	;wreg free
  5789  004A50  C081  F0D1         	movff	?___flmul,?_sqrt
  5790  004A54  C082  F0D2         	movff	?___flmul+1,?_sqrt+1
  5791  004A58  C083  F0D3         	movff	?___flmul+2,?_sqrt+2
  5792  004A5C  C084  F0D4         	movff	?___flmul+3,?_sqrt+3
  5793  004A60  0012               	return	
  5794  004A62  0012               	return		;funcret
  5795  004A64                     __end_of_sqrt:
  5796                           	opt stack 0
  5797                           tblptru	equ	0xFF8
  5798                           tblptrh	equ	0xFF7
  5799                           tblptrl	equ	0xFF6
  5800                           tablat	equ	0xFF5
  5801                           postinc0	equ	0xFEE
  5802                           wreg	equ	0xFE8
  5803                           indf2	equ	0xFDF
  5804                           postinc2	equ	0xFDE
  5805                           postdec2	equ	0xFDD
  5806                           fsr2h	equ	0xFDA
  5807                           fsr2l	equ	0xFD9
  5808                           status	equ	0xFD8
  5809                           
  5810 ;; *************** function _atan *****************
  5811 ;; Defined at:
  5812 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atan.c"
  5813 ;; Parameters:    Size  Location     Type
  5814 ;;  f               4   95[BANK0 ] unsigned char 
  5815 ;; Auto vars:     Size  Location     Type
  5816 ;;  val             4  112[BANK0 ] unsigned char 
  5817 ;;  val_squared     4  108[BANK0 ] unsigned char 
  5818 ;;  x               4  103[BANK0 ] unsigned char 
  5819 ;;  y               4   99[BANK0 ] unsigned char 
  5820 ;;  recip           1  107[BANK0 ] unsigned char 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  4   95[BANK0 ] unsigned char 
  5823 ;; Registers used:
  5824 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5830 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5831 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;Total ram usage:       21 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    8
  5837 ;; This function calls:
  5838 ;;		___fladd
  5839 ;;		___fldiv
  5840 ;;		___flge
  5841 ;;		___flmul
  5842 ;;		___flneg
  5843 ;;		_eval_poly
  5844 ;;		_fabs
  5845 ;; This function is called by:
  5846 ;;		_asin
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text9
  5851  004392                     __ptext9:
  5852                           	opt stack 0
  5853  004392                     _atan:
  5854                           	opt stack 19
  5855                           
  5856                           ;incstack = 0
  5857  004392  C0BF  F0AF         	movff	atan@f,fabs@d
  5858  004396  C0C0  F0B0         	movff	atan@f+1,fabs@d+1
  5859  00439A  C0C1  F0B1         	movff	atan@f+2,fabs@d+2
  5860  00439E  C0C2  F0B2         	movff	atan@f+3,fabs@d+3
  5861  0043A2  ECCD  F02E         	call	_fabs	;wreg free
  5862  0043A6  C0AF  F0D0         	movff	?_fabs,atan@val
  5863  0043AA  C0B0  F0D1         	movff	?_fabs+1,atan@val+1
  5864  0043AE  C0B1  F0D2         	movff	?_fabs+2,atan@val+2
  5865  0043B2  C0B2  F0D3         	movff	?_fabs+3,atan@val+3
  5866  0043B6  0100               	movlb	0	; () banked
  5867  0043B8  51D0               	movf	atan@val& (0+255),w,b
  5868  0043BA  0100               	movlb	0	; () banked
  5869  0043BC  11D1               	iorwf	(atan@val+1)& (0+255),w,b
  5870  0043BE  0100               	movlb	0	; () banked
  5871  0043C0  11D2               	iorwf	(atan@val+2)& (0+255),w,b
  5872  0043C2  0100               	movlb	0	; () banked
  5873  0043C4  11D3               	iorwf	(atan@val+3)& (0+255),w,b
  5874  0043C6  A4D8               	btfss	status,2,c
  5875  0043C8  D00A               	goto	l6518
  5876                           
  5877                           ; BSR set to: 0
  5878  0043CA  0E00               	movlw	0
  5879  0043CC  0100               	movlb	0	; () banked
  5880  0043CE  6FBF               	movwf	?_atan& (0+255),b
  5881  0043D0  0E00               	movlw	0
  5882  0043D2  6FC0               	movwf	(?_atan+1)& (0+255),b
  5883  0043D4  0E00               	movlw	0
  5884  0043D6  6FC1               	movwf	(?_atan+2)& (0+255),b
  5885  0043D8  0E00               	movlw	0
  5886  0043DA  6FC2               	movwf	(?_atan+3)& (0+255),b
  5887                           
  5888                           ; BSR set to: 0
  5889  0043DC  0012               	return	
  5890  0043DE                     l6518:
  5891                           
  5892                           ; BSR set to: 0
  5893  0043DE  0E00               	movlw	0
  5894  0043E0  0100               	movlb	0	; () banked
  5895  0043E2  6FB3               	movwf	___flge@ff1& (0+255),b
  5896  0043E4  0E00               	movlw	0
  5897  0043E6  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5898  0043E8  0E80               	movlw	128
  5899  0043EA  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5900  0043EC  0E3F               	movlw	63
  5901  0043EE  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5902  0043F0  C0D0  F0B7         	movff	atan@val,___flge@ff2
  5903  0043F4  C0D1  F0B8         	movff	atan@val+1,___flge@ff2+1
  5904  0043F8  C0D2  F0B9         	movff	atan@val+2,___flge@ff2+2
  5905  0043FC  C0D3  F0BA         	movff	atan@val+3,___flge@ff2+3
  5906  004400  EC38  F02B         	call	___flge	;wreg free
  5907  004404  0100               	movlb	0	; () banked
  5908  004406  B0D8               	btfsc	status,0,c
  5909  004408  D002               	goto	u8100
  5910  00440A  0E01               	movlw	1
  5911  00440C  D001               	goto	u8110
  5912  00440E                     u8100:
  5913  00440E  0E00               	movlw	0
  5914  004410                     u8110:
  5915  004410  0100               	movlb	0	; () banked
  5916  004412  6FCB               	movwf	atan@recip& (0+255),b
  5917  004414  0100               	movlb	0	; () banked
  5918  004416  51CB               	movf	atan@recip& (0+255),w,b
  5919  004418  B4D8               	btfsc	status,2,c
  5920  00441A  D01B               	goto	l1019
  5921                           
  5922                           ; BSR set to: 0
  5923  00441C  0E00               	movlw	0
  5924  00441E  0100               	movlb	0	; () banked
  5925  004420  6F90               	movwf	___fldiv@f1& (0+255),b
  5926  004422  0E00               	movlw	0
  5927  004424  6F91               	movwf	(___fldiv@f1+1)& (0+255),b
  5928  004426  0E80               	movlw	128
  5929  004428  6F92               	movwf	(___fldiv@f1+2)& (0+255),b
  5930  00442A  0E3F               	movlw	63
  5931  00442C  6F93               	movwf	(___fldiv@f1+3)& (0+255),b
  5932  00442E  C0D0  F094         	movff	atan@val,___fldiv@f2
  5933  004432  C0D1  F095         	movff	atan@val+1,___fldiv@f2+1
  5934  004436  C0D2  F096         	movff	atan@val+2,___fldiv@f2+2
  5935  00443A  C0D3  F097         	movff	atan@val+3,___fldiv@f2+3
  5936  00443E  EC6B  F028         	call	___fldiv	;wreg free
  5937  004442  C090  F0D0         	movff	?___fldiv,atan@val
  5938  004446  C091  F0D1         	movff	?___fldiv+1,atan@val+1
  5939  00444A  C092  F0D2         	movff	?___fldiv+2,atan@val+2
  5940  00444E  C093  F0D3         	movff	?___fldiv+3,atan@val+3
  5941  004452                     l1019:
  5942  004452  C0D0  F081         	movff	atan@val,___flmul@f1
  5943  004456  C0D1  F082         	movff	atan@val+1,___flmul@f1+1
  5944  00445A  C0D2  F083         	movff	atan@val+2,___flmul@f1+2
  5945  00445E  C0D3  F084         	movff	atan@val+3,___flmul@f1+3
  5946  004462  C0D0  F085         	movff	atan@val,___flmul@f2
  5947  004466  C0D1  F086         	movff	atan@val+1,___flmul@f2+1
  5948  00446A  C0D2  F087         	movff	atan@val+2,___flmul@f2+2
  5949  00446E  C0D3  F088         	movff	atan@val+3,___flmul@f2+3
  5950  004472  ECB9  F027         	call	___flmul	;wreg free
  5951  004476  C081  F0CC         	movff	?___flmul,atan@val_squared
  5952  00447A  C082  F0CD         	movff	?___flmul+1,atan@val_squared+1
  5953  00447E  C083  F0CE         	movff	?___flmul+2,atan@val_squared+2
  5954  004482  C084  F0CF         	movff	?___flmul+3,atan@val_squared+3
  5955  004486  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  5956  00448A  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  5957  00448E  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  5958  004492  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  5959  004496  0E19               	movlw	low atan@coeff_b
  5960  004498  0100               	movlb	0	; () banked
  5961  00449A  6FAF               	movwf	eval_poly@d& (0+255),b
  5962  00449C  0E0D               	movlw	high atan@coeff_b
  5963  00449E  0100               	movlb	0	; () banked
  5964  0044A0  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  5965  0044A2  0E00               	movlw	0
  5966  0044A4  0100               	movlb	0	; () banked
  5967  0044A6  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  5968  0044A8  0E04               	movlw	4
  5969  0044AA  6FB1               	movwf	eval_poly@n& (0+255),b
  5970  0044AC  EC24  F02A         	call	_eval_poly	;wreg free
  5971  0044B0  C0AB  F0C3         	movff	?_eval_poly,atan@y
  5972  0044B4  C0AC  F0C4         	movff	?_eval_poly+1,atan@y+1
  5973  0044B8  C0AD  F0C5         	movff	?_eval_poly+2,atan@y+2
  5974  0044BC  C0AE  F0C6         	movff	?_eval_poly+3,atan@y+3
  5975  0044C0  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  5976  0044C4  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  5977  0044C8  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  5978  0044CC  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  5979  0044D0  0E01               	movlw	low atan@coeff_a
  5980  0044D2  0100               	movlb	0	; () banked
  5981  0044D4  6FAF               	movwf	eval_poly@d& (0+255),b
  5982  0044D6  0E0D               	movlw	high atan@coeff_a
  5983  0044D8  0100               	movlb	0	; () banked
  5984  0044DA  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  5985  0044DC  0E00               	movlw	0
  5986  0044DE  0100               	movlb	0	; () banked
  5987  0044E0  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  5988  0044E2  0E05               	movlw	5
  5989  0044E4  6FB1               	movwf	eval_poly@n& (0+255),b
  5990  0044E6  EC24  F02A         	call	_eval_poly	;wreg free
  5991  0044EA  C0AB  F0C7         	movff	?_eval_poly,atan@x
  5992  0044EE  C0AC  F0C8         	movff	?_eval_poly+1,atan@x+1
  5993  0044F2  C0AD  F0C9         	movff	?_eval_poly+2,atan@x+2
  5994  0044F6  C0AE  F0CA         	movff	?_eval_poly+3,atan@x+3
  5995  0044FA  C0D0  F081         	movff	atan@val,___flmul@f1
  5996  0044FE  C0D1  F082         	movff	atan@val+1,___flmul@f1+1
  5997  004502  C0D2  F083         	movff	atan@val+2,___flmul@f1+2
  5998  004506  C0D3  F084         	movff	atan@val+3,___flmul@f1+3
  5999  00450A  C0C3  F094         	movff	atan@y,___fldiv@f2
  6000  00450E  C0C4  F095         	movff	atan@y+1,___fldiv@f2+1
  6001  004512  C0C5  F096         	movff	atan@y+2,___fldiv@f2+2
  6002  004516  C0C6  F097         	movff	atan@y+3,___fldiv@f2+3
  6003  00451A  C0C7  F090         	movff	atan@x,___fldiv@f1
  6004  00451E  C0C8  F091         	movff	atan@x+1,___fldiv@f1+1
  6005  004522  C0C9  F092         	movff	atan@x+2,___fldiv@f1+2
  6006  004526  C0CA  F093         	movff	atan@x+3,___fldiv@f1+3
  6007  00452A  EC6B  F028         	call	___fldiv	;wreg free
  6008  00452E  C090  F085         	movff	?___fldiv,___flmul@f2
  6009  004532  C091  F086         	movff	?___fldiv+1,___flmul@f2+1
  6010  004536  C092  F087         	movff	?___fldiv+2,___flmul@f2+2
  6011  00453A  C093  F088         	movff	?___fldiv+3,___flmul@f2+3
  6012  00453E  ECB9  F027         	call	___flmul	;wreg free
  6013  004542  C081  F0D0         	movff	?___flmul,atan@val
  6014  004546  C082  F0D1         	movff	?___flmul+1,atan@val+1
  6015  00454A  C083  F0D2         	movff	?___flmul+2,atan@val+2
  6016  00454E  C084  F0D3         	movff	?___flmul+3,atan@val+3
  6017  004552  0100               	movlb	0	; () banked
  6018  004554  51CB               	movf	atan@recip& (0+255),w,b
  6019  004556  0100               	movlb	0	; () banked
  6020  004558  B4D8               	btfsc	status,2,c
  6021  00455A  D026               	goto	l6530
  6022                           
  6023                           ; BSR set to: 0
  6024  00455C  C0D0  F0AB         	movff	atan@val,___flneg@f1
  6025  004560  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  6026  004564  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  6027  004568  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  6028  00456C  ECEC  F02E         	call	___flneg	;wreg free
  6029  004570  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6030  004574  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6031  004578  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6032  00457C  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6033  004580  0EDB               	movlw	219
  6034  004582  0100               	movlb	0	; () banked
  6035  004584  6FA3               	movwf	___fladd@f2& (0+255),b
  6036  004586  0E0F               	movlw	15
  6037  004588  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6038  00458A  0EC9               	movlw	201
  6039  00458C  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6040  00458E  0E3F               	movlw	63
  6041  004590  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6042  004592  EC93  F020         	call	___fladd	;wreg free
  6043  004596  C09F  F0D0         	movff	?___fladd,atan@val
  6044  00459A  C0A0  F0D1         	movff	?___fladd+1,atan@val+1
  6045  00459E  C0A1  F0D2         	movff	?___fladd+2,atan@val+2
  6046  0045A2  C0A2  F0D3         	movff	?___fladd+3,atan@val+3
  6047  0045A6  D000               	goto	l6530
  6048  0045A8                     l6530:
  6049  0045A8  0100               	movlb	0	; () banked
  6050  0045AA  BFC2               	btfsc	(atan@f+3)& (0+255),7,b
  6051  0045AC  D009               	goto	l6534
  6052                           
  6053                           ; BSR set to: 0
  6054  0045AE  C0D0  F0BF         	movff	atan@val,?_atan
  6055  0045B2  C0D1  F0C0         	movff	atan@val+1,?_atan+1
  6056  0045B6  C0D2  F0C1         	movff	atan@val+2,?_atan+2
  6057  0045BA  C0D3  F0C2         	movff	atan@val+3,?_atan+3
  6058  0045BE  0012               	return	
  6059  0045C0                     l6534:
  6060                           
  6061                           ; BSR set to: 0
  6062  0045C0  C0D0  F0AB         	movff	atan@val,___flneg@f1
  6063  0045C4  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  6064  0045C8  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  6065  0045CC  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  6066  0045D0  ECEC  F02E         	call	___flneg	;wreg free
  6067  0045D4  C0AB  F0BF         	movff	?___flneg,?_atan
  6068  0045D8  C0AC  F0C0         	movff	?___flneg+1,?_atan+1
  6069  0045DC  C0AD  F0C1         	movff	?___flneg+2,?_atan+2
  6070  0045E0  C0AE  F0C2         	movff	?___flneg+3,?_atan+3
  6071  0045E4  0012               	return	
  6072  0045E6  0012               	return		;funcret
  6073  0045E8                     __end_of_atan:
  6074                           	opt stack 0
  6075                           tblptru	equ	0xFF8
  6076                           tblptrh	equ	0xFF7
  6077                           tblptrl	equ	0xFF6
  6078                           tablat	equ	0xFF5
  6079                           postinc0	equ	0xFEE
  6080                           wreg	equ	0xFE8
  6081                           indf2	equ	0xFDF
  6082                           postinc2	equ	0xFDE
  6083                           postdec2	equ	0xFDD
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function _fabs *****************
  6089 ;; Defined at:
  6090 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fabs.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  d               4   79[BANK0 ] unsigned char 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;		None
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  4   79[BANK0 ] unsigned char 
  6097 ;; Registers used:
  6098 ;;		wreg, status,2, status,0, cstack
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6104 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6107 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6108 ;;Total ram usage:        4 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:    6
  6111 ;; This function calls:
  6112 ;;		___flneg
  6113 ;; This function is called by:
  6114 ;;		_asin
  6115 ;;		_atan
  6116 ;; This function uses a non-reentrant model
  6117 ;;
  6118                           
  6119                           	psect	text10
  6120  005D9A                     __ptext10:
  6121                           	opt stack 0
  6122  005D9A                     _fabs:
  6123                           	opt stack 21
  6124                           
  6125                           ;incstack = 0
  6126  005D9A  0100               	movlb	0	; () banked
  6127  005D9C  AFB2               	btfss	(fabs@d+3)& (0+255),7,b
  6128  005D9E  D013               	goto	l1136
  6129                           
  6130                           ; BSR set to: 0
  6131  005DA0  C0AF  F0AB         	movff	fabs@d,___flneg@f1
  6132  005DA4  C0B0  F0AC         	movff	fabs@d+1,___flneg@f1+1
  6133  005DA8  C0B1  F0AD         	movff	fabs@d+2,___flneg@f1+2
  6134  005DAC  C0B2  F0AE         	movff	fabs@d+3,___flneg@f1+3
  6135  005DB0  ECEC  F02E         	call	___flneg	;wreg free
  6136  005DB4  C0AB  F0AF         	movff	?___flneg,?_fabs
  6137  005DB8  C0AC  F0B0         	movff	?___flneg+1,?_fabs+1
  6138  005DBC  C0AD  F0B1         	movff	?___flneg+2,?_fabs+2
  6139  005DC0  C0AE  F0B2         	movff	?___flneg+3,?_fabs+3
  6140  005DC4  0012               	return	
  6141  005DC6                     l1136:
  6142                           
  6143                           ; BSR set to: 0
  6144  005DC6  C0AF  F0AF         	movff	fabs@d,?_fabs
  6145  005DCA  C0B0  F0B0         	movff	fabs@d+1,?_fabs+1
  6146  005DCE  C0B1  F0B1         	movff	fabs@d+2,?_fabs+2
  6147  005DD2  C0B2  F0B2         	movff	fabs@d+3,?_fabs+3
  6148  005DD6  0012               	return		;funcret
  6149  005DD8                     __end_of_fabs:
  6150                           	opt stack 0
  6151                           tblptru	equ	0xFF8
  6152                           tblptrh	equ	0xFF7
  6153                           tblptrl	equ	0xFF6
  6154                           tablat	equ	0xFF5
  6155                           postinc0	equ	0xFEE
  6156                           wreg	equ	0xFE8
  6157                           indf2	equ	0xFDF
  6158                           postinc2	equ	0xFDE
  6159                           postdec2	equ	0xFDD
  6160                           fsr2h	equ	0xFDA
  6161                           fsr2l	equ	0xFD9
  6162                           status	equ	0xFD8
  6163                           
  6164 ;; *************** function _abs *****************
  6165 ;; Defined at:
  6166 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\abs.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;  a               2   23[BANK0 ] int 
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;		None
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  2   23[BANK0 ] int 
  6173 ;; Registers used:
  6174 ;;		wreg, status,2, status,0
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6180 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;Total ram usage:        4 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:    5
  6187 ;; This function calls:
  6188 ;;		Nothing
  6189 ;; This function is called by:
  6190 ;;		_park_search
  6191 ;;		_parallelo
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           	psect	text11
  6196  005F1E                     __ptext11:
  6197                           	opt stack 0
  6198  005F1E                     _abs:
  6199                           	opt stack 23
  6200                           
  6201                           ;incstack = 0
  6202  005F1E  0100               	movlb	0	; () banked
  6203  005F20  AF78               	btfss	(abs@a+1)& (0+255),7,b
  6204  005F22  D00E               	goto	l893
  6205                           
  6206                           ; BSR set to: 0
  6207  005F24  C077  F079         	movff	abs@a,??_abs
  6208  005F28  C078  F07A         	movff	abs@a+1,??_abs+1
  6209  005F2C  0100               	movlb	0	; () banked
  6210  005F2E  1F79               	comf	??_abs& (0+255),f,b
  6211  005F30  1F7A               	comf	(??_abs+1)& (0+255),f,b
  6212  005F32  4B79               	infsnz	??_abs& (0+255),f,b
  6213  005F34  2B7A               	incf	(??_abs+1)& (0+255),f,b
  6214  005F36  C079  F077         	movff	??_abs,?_abs
  6215  005F3A  C07A  F078         	movff	??_abs+1,?_abs+1
  6216  005F3E  0012               	return	
  6217  005F40                     l893:
  6218                           
  6219                           ; BSR set to: 0
  6220  005F40  C077  F077         	movff	abs@a,?_abs
  6221  005F44  C078  F078         	movff	abs@a+1,?_abs+1
  6222                           
  6223                           ; BSR set to: 0
  6224  005F48  0012               	return		;funcret
  6225  005F4A                     __end_of_abs:
  6226                           	opt stack 0
  6227                           tblptru	equ	0xFF8
  6228                           tblptrh	equ	0xFF7
  6229                           tblptrl	equ	0xFF6
  6230                           tablat	equ	0xFF5
  6231                           postinc0	equ	0xFEE
  6232                           wreg	equ	0xFE8
  6233                           indf2	equ	0xFDF
  6234                           postinc2	equ	0xFDE
  6235                           postdec2	equ	0xFDD
  6236                           fsr2h	equ	0xFDA
  6237                           fsr2l	equ	0xFD9
  6238                           status	equ	0xFD8
  6239                           
  6240 ;; *************** function ___awtofl *****************
  6241 ;; Defined at:
  6242 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  c               2   33[BANK0 ] int 
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;  f1              4    0        int 
  6247 ;;  sign            1   37[BANK0 ] unsigned char 
  6248 ;; Return value:  Size  Location     Type
  6249 ;;                  4   33[BANK0 ] unsigned char 
  6250 ;; Registers used:
  6251 ;;		wreg, status,2, status,0, cstack
  6252 ;; Tracked objects:
  6253 ;;		On entry : 0/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6257 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;Total ram usage:        5 bytes
  6262 ;; Hardware stack levels used:    1
  6263 ;; Hardware stack levels required when called:    6
  6264 ;; This function calls:
  6265 ;;		___flpack
  6266 ;; This function is called by:
  6267 ;;		_park_search
  6268 ;;		_parallelo
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           	psect	text12
  6273  005D4E                     __ptext12:
  6274                           	opt stack 0
  6275  005D4E                     ___awtofl:
  6276                           	opt stack 22
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;incstack = 0
  6280  005D4E  0E00               	movlw	0
  6281  005D50  0100               	movlb	0	; () banked
  6282  005D52  6F85               	movwf	___awtofl@sign& (0+255),b
  6283                           
  6284                           ; BSR set to: 0
  6285  005D54  0100               	movlb	0	; () banked
  6286  005D56  AF82               	btfss	(___awtofl@c+1)& (0+255),7,b
  6287  005D58  D008               	goto	l6646
  6288                           
  6289                           ; BSR set to: 0
  6290  005D5A  0100               	movlb	0	; () banked
  6291  005D5C  6D81               	negf	___awtofl@c& (0+255),b
  6292  005D5E  1F82               	comf	(___awtofl@c+1)& (0+255),f,b
  6293  005D60  B0D8               	btfsc	status,0,c
  6294  005D62  2B82               	incf	(___awtofl@c+1)& (0+255),f,b
  6295  005D64  0100               	movlb	0	; () banked
  6296  005D66  2B85               	incf	___awtofl@sign& (0+255),f,b
  6297  005D68  D000               	goto	l6646
  6298  005D6A                     l6646:
  6299                           
  6300                           ; BSR set to: 0
  6301  005D6A  C081  F077         	movff	___awtofl@c,___flpack@arg
  6302  005D6E  C082  F078         	movff	___awtofl@c+1,___flpack@arg+1
  6303  005D72  0100               	movlb	0	; () banked
  6304  005D74  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  6305  005D76  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  6306  005D78  0E96               	movlw	150
  6307  005D7A  0100               	movlb	0	; () banked
  6308  005D7C  6F7B               	movwf	___flpack@exp& (0+255),b
  6309  005D7E  C085  F07C         	movff	___awtofl@sign,___flpack@sign
  6310  005D82  ECF9  F026         	call	___flpack	;wreg free
  6311  005D86  C077  F081         	movff	?___flpack,?___awtofl
  6312  005D8A  C078  F082         	movff	?___flpack+1,?___awtofl+1
  6313  005D8E  C079  F083         	movff	?___flpack+2,?___awtofl+2
  6314  005D92  C07A  F084         	movff	?___flpack+3,?___awtofl+3
  6315  005D96  0012               	return	
  6316  005D98  0012               	return		;funcret
  6317  005D9A                     __end_of___awtofl:
  6318                           	opt stack 0
  6319                           tblptru	equ	0xFF8
  6320                           tblptrh	equ	0xFF7
  6321                           tblptrl	equ	0xFF6
  6322                           tablat	equ	0xFF5
  6323                           postinc0	equ	0xFEE
  6324                           wreg	equ	0xFE8
  6325                           indf2	equ	0xFDF
  6326                           postinc2	equ	0xFDE
  6327                           postdec2	equ	0xFDD
  6328                           fsr2h	equ	0xFDA
  6329                           fsr2l	equ	0xFD9
  6330                           status	equ	0xFD8
  6331                           
  6332 ;; *************** function _delay_s *****************
  6333 ;; Defined at:
  6334 ;;		line 102 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;  value_s         1    wreg     unsigned char 
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;  value_s         1   31[BANK0 ] unsigned char 
  6339 ;;  repeat_loop     1   32[BANK0 ] unsigned char 
  6340 ;; Return value:  Size  Location     Type
  6341 ;;		None               void
  6342 ;; Registers used:
  6343 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;Total ram usage:        2 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    7
  6356 ;; This function calls:
  6357 ;;		_delay_ms
  6358 ;; This function is called by:
  6359 ;;		_park_routine
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           	psect	text13
  6364  005EF0                     __ptext13:
  6365                           	opt stack 0
  6366  005EF0                     _delay_s:
  6367                           	opt stack 22
  6368                           
  6369                           ;incstack = 0
  6370                           ;delay_s@value_s stored from wreg
  6371  005EF0  0100               	movlb	0	; () banked
  6372  005EF2  6F7F               	movwf	delay_s@value_s& (0+255),b
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;src\delay.c: 104: unsigned char repeat_loop;
  6376                           ;src\delay.c: 106: for (repeat_loop = 0; repeat_loop < value_s; repeat_loop++)
  6377  005EF4  0E00               	movlw	0
  6378  005EF6  0100               	movlb	0	; () banked
  6379  005EF8  6F80               	movwf	delay_s@repeat_loop& (0+255),b
  6380  005EFA  D00A               	goto	l6742
  6381  005EFC                     l6738:
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;src\delay.c: 107: delay_ms (1000);
  6385  005EFC  0E03               	movlw	3
  6386  005EFE  0100               	movlb	0	; () banked
  6387  005F00  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  6388  005F02  0EE8               	movlw	232
  6389  005F04  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  6390  005F06  EC0A  F02F         	call	_delay_ms	;wreg free
  6391  005F0A  0100               	movlb	0	; () banked
  6392  005F0C  2B80               	incf	delay_s@repeat_loop& (0+255),f,b
  6393  005F0E  D000               	goto	l6742
  6394  005F10                     l6742:
  6395                           
  6396                           ; BSR set to: 0
  6397  005F10  0100               	movlb	0	; () banked
  6398  005F12  517F               	movf	delay_s@value_s& (0+255),w,b
  6399  005F14  0100               	movlb	0	; () banked
  6400  005F16  5D80               	subwf	delay_s@repeat_loop& (0+255),w,b
  6401  005F18  A0D8               	btfss	status,0,c
  6402  005F1A  D7F0               	goto	l6738
  6403                           
  6404                           ; BSR set to: 0
  6405                           
  6406                           ; BSR set to: 0
  6407  005F1C  0012               	return		;funcret
  6408  005F1E                     __end_of_delay_s:
  6409                           	opt stack 0
  6410                           tblptru	equ	0xFF8
  6411                           tblptrh	equ	0xFF7
  6412                           tblptrl	equ	0xFF6
  6413                           tablat	equ	0xFF5
  6414                           postinc0	equ	0xFEE
  6415                           wreg	equ	0xFE8
  6416                           indf2	equ	0xFDF
  6417                           postinc2	equ	0xFDE
  6418                           postdec2	equ	0xFDD
  6419                           fsr2h	equ	0xFDA
  6420                           fsr2l	equ	0xFD9
  6421                           status	equ	0xFD8
  6422                           
  6423 ;; *************** function _delay_ms *****************
  6424 ;; Defined at:
  6425 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;  value_ms        2   29[BANK0 ] unsigned int 
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;		None
  6430 ;; Return value:  Size  Location     Type
  6431 ;;		None               void
  6432 ;; Registers used:
  6433 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6439 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;Total ram usage:        2 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    6
  6446 ;; This function calls:
  6447 ;;		___wmul
  6448 ;; This function is called by:
  6449 ;;		_delay_s
  6450 ;;		_main
  6451 ;;		_park_routine
  6452 ;; This function uses a non-reentrant model
  6453 ;;
  6454                           
  6455                           	psect	text14
  6456  005E14                     __ptext14:
  6457                           	opt stack 0
  6458  005E14                     _delay_ms:
  6459                           	opt stack 22
  6460                           
  6461                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
  6462                           
  6463                           ; BSR set to: 0
  6464                           ;incstack = 0
  6465  005E14  C0E8  F077         	movff	_delay_quartz_frequency_value,___wmul@multiplier	;volatile
  6466  005E18  0100               	movlb	0	; () banked
  6467  005E1A  6B78               	clrf	(___wmul@multiplier+1)& (0+255),b
  6468  005E1C  C07D  F079         	movff	delay_ms@value_ms,___wmul@multiplicand
  6469  005E20  C07E  F07A         	movff	delay_ms@value_ms+1,___wmul@multiplicand+1
  6470  005E24  EC27  F02F         	call	___wmul	;wreg free
  6471  005E28  C077  F0E3         	movff	?___wmul,_clock_counter_reference	;volatile
  6472  005E2C  C078  F0E4         	movff	?___wmul+1,_clock_counter_reference+1	;volatile
  6473                           
  6474                           ;src\delay.c: 75: while (clock_counter_reference) {
  6475  005E30  D007               	goto	l565
  6476  005E32                     l6568:
  6477                           
  6478                           ;src\delay.c: 85: _delay(240);
  6479  005E32  0E50               	movlw	80
  6480  005E34                     u8937:
  6481  005E34  2EE8               	decfsz	wreg,f,c
  6482  005E36  D7FE               	goto	u8937
  6483                           
  6484                           ;src\delay.c: 88: clock_counter_reference--;
  6485  005E38  0100               	movlb	0	; () banked
  6486  005E3A  07E3               	decf	_clock_counter_reference& (0+255),f,b	;volatile
  6487  005E3C  A0D8               	btfss	status,0,c
  6488  005E3E  07E4               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
  6489  005E40                     l565:
  6490  005E40  0100               	movlb	0	; () banked
  6491  005E42  51E3               	movf	_clock_counter_reference& (0+255),w,b	;volatile
  6492  005E44  0100               	movlb	0	; () banked
  6493  005E46  11E4               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
  6494  005E48  A4D8               	btfss	status,2,c
  6495  005E4A  D7F3               	goto	l6568
  6496                           
  6497                           ; BSR set to: 0
  6498                           
  6499                           ; BSR set to: 0
  6500  005E4C  0012               	return		;funcret
  6501  005E4E                     __end_of_delay_ms:
  6502                           	opt stack 0
  6503                           tblptru	equ	0xFF8
  6504                           tblptrh	equ	0xFF7
  6505                           tblptrl	equ	0xFF6
  6506                           tablat	equ	0xFF5
  6507                           postinc0	equ	0xFEE
  6508                           wreg	equ	0xFE8
  6509                           indf2	equ	0xFDF
  6510                           postinc2	equ	0xFDE
  6511                           postdec2	equ	0xFDD
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           
  6516 ;; *************** function ___wmul *****************
  6517 ;; Defined at:
  6518 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  multiplier      2   23[BANK0 ] unsigned int 
  6521 ;;  multiplicand    2   25[BANK0 ] unsigned int 
  6522 ;; Auto vars:     Size  Location     Type
  6523 ;;  product         2   27[BANK0 ] unsigned int 
  6524 ;; Return value:  Size  Location     Type
  6525 ;;                  2   23[BANK0 ] unsigned int 
  6526 ;; Registers used:
  6527 ;;		wreg, status,2, status,0, prodl, prodh
  6528 ;; Tracked objects:
  6529 ;;		On entry : 0/0
  6530 ;;		On exit  : 0/0
  6531 ;;		Unchanged: 0/0
  6532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6533 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6534 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;Total ram usage:        6 bytes
  6538 ;; Hardware stack levels used:    1
  6539 ;; Hardware stack levels required when called:    5
  6540 ;; This function calls:
  6541 ;;		Nothing
  6542 ;; This function is called by:
  6543 ;;		_delay_ms
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           	psect	text15
  6548  005E4E                     __ptext15:
  6549                           	opt stack 0
  6550  005E4E                     ___wmul:
  6551                           	opt stack 22
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;incstack = 0
  6555  005E4E  0100               	movlb	0	; () banked
  6556  005E50  5177               	movf	___wmul@multiplier& (0+255),w,b
  6557  005E52  0100               	movlb	0	; () banked
  6558  005E54  0379               	mulwf	___wmul@multiplicand& (0+255),b
  6559  005E56  CFF3 F07B          	movff	prodl,___wmul@product
  6560  005E5A  CFF4 F07C          	movff	prodh,___wmul@product+1
  6561  005E5E  0100               	movlb	0	; () banked
  6562  005E60  5177               	movf	___wmul@multiplier& (0+255),w,b
  6563  005E62  0100               	movlb	0	; () banked
  6564  005E64  037A               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6565  005E66  50F3               	movf	prodl,w,c
  6566  005E68  0100               	movlb	0	; () banked
  6567  005E6A  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  6568  005E6C  0100               	movlb	0	; () banked
  6569  005E6E  5178               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6570  005E70  0100               	movlb	0	; () banked
  6571  005E72  0379               	mulwf	___wmul@multiplicand& (0+255),b
  6572  005E74  50F3               	movf	prodl,w,c
  6573  005E76  0100               	movlb	0	; () banked
  6574  005E78  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  6575                           
  6576                           ; BSR set to: 0
  6577  005E7A  C07B  F077         	movff	___wmul@product,?___wmul
  6578  005E7E  C07C  F078         	movff	___wmul@product+1,?___wmul+1
  6579  005E82  0012               	return	
  6580                           
  6581                           ; BSR set to: 0
  6582                           
  6583                           ; BSR set to: 0
  6584  005E84  0012               	return		;funcret
  6585  005E86                     __end_of___wmul:
  6586                           	opt stack 0
  6587                           tblptru	equ	0xFF8
  6588                           tblptrh	equ	0xFF7
  6589                           tblptrl	equ	0xFF6
  6590                           tablat	equ	0xFF5
  6591                           prodh	equ	0xFF4
  6592                           prodl	equ	0xFF3
  6593                           postinc0	equ	0xFEE
  6594                           wreg	equ	0xFE8
  6595                           indf2	equ	0xFDF
  6596                           postinc2	equ	0xFDE
  6597                           postdec2	equ	0xFDD
  6598                           fsr2h	equ	0xFDA
  6599                           fsr2l	equ	0xFD9
  6600                           status	equ	0xFD8
  6601                           
  6602 ;; *************** function _cos *****************
  6603 ;; Defined at:
  6604 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\cos.c"
  6605 ;; Parameters:    Size  Location     Type
  6606 ;;  f               4   49[BANK1 ] unsigned int 
  6607 ;; Auto vars:     Size  Location     Type
  6608 ;;		None
  6609 ;; Return value:  Size  Location     Type
  6610 ;;                  4   49[BANK1 ] unsigned int 
  6611 ;; Registers used:
  6612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6613 ;; Tracked objects:
  6614 ;;		On entry : 0/0
  6615 ;;		On exit  : 0/0
  6616 ;;		Unchanged: 0/0
  6617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6618 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6619 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;Total ram usage:        8 bytes
  6623 ;; Hardware stack levels used:    1
  6624 ;; Hardware stack levels required when called:    9
  6625 ;; This function calls:
  6626 ;;		___fladd
  6627 ;;		___flge
  6628 ;;		_sin
  6629 ;; This function is called by:
  6630 ;;		_park_routine
  6631 ;;		_matematica
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           	psect	text16
  6636  005768                     __ptext16:
  6637                           	opt stack 0
  6638  005768                     _cos:
  6639                           	opt stack 20
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;incstack = 0
  6643  005768  0EDB               	movlw	219
  6644  00576A  0100               	movlb	0	; () banked
  6645  00576C  6FB3               	movwf	___flge@ff1& (0+255),b
  6646  00576E  0E0F               	movlw	15
  6647  005770  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6648  005772  0E49               	movlw	73
  6649  005774  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6650  005776  0E40               	movlw	64
  6651  005778  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6652  00577A  C1B4  F0B7         	movff	cos@f,___flge@ff2
  6653  00577E  C1B5  F0B8         	movff	cos@f+1,___flge@ff2+1
  6654  005782  C1B6  F0B9         	movff	cos@f+2,___flge@ff2+2
  6655  005786  C1B7  F0BA         	movff	cos@f+3,___flge@ff2+3
  6656  00578A  EC38  F02B         	call	___flge	;wreg free
  6657  00578E  0100               	movlb	0	; () banked
  6658  005790  B0D8               	btfsc	status,0,c
  6659  005792  D02E               	goto	l6784
  6660                           
  6661                           ; BSR set to: 0
  6662  005794  C1B4  F09F         	movff	cos@f,___fladd@f1
  6663  005798  C1B5  F0A0         	movff	cos@f+1,___fladd@f1+1
  6664  00579C  C1B6  F0A1         	movff	cos@f+2,___fladd@f1+2
  6665  0057A0  C1B7  F0A2         	movff	cos@f+3,___fladd@f1+3
  6666  0057A4  0EE4               	movlw	228
  6667  0057A6  0100               	movlb	0	; () banked
  6668  0057A8  6FA3               	movwf	___fladd@f2& (0+255),b
  6669  0057AA  0ECB               	movlw	203
  6670  0057AC  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6671  0057AE  0E96               	movlw	150
  6672  0057B0  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6673  0057B2  0EC0               	movlw	192
  6674  0057B4  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6675  0057B6  EC93  F020         	call	___fladd	;wreg free
  6676  0057BA  C09F  F1B8         	movff	?___fladd,_cos$3682
  6677  0057BE  C0A0  F1B9         	movff	?___fladd+1,_cos$3682+1
  6678  0057C2  C0A1  F1BA         	movff	?___fladd+2,_cos$3682+2
  6679  0057C6  C0A2  F1BB         	movff	?___fladd+3,_cos$3682+3
  6680  0057CA  C1B8  F0D1         	movff	_cos$3682,sin@f
  6681  0057CE  C1B9  F0D2         	movff	_cos$3682+1,sin@f+1
  6682  0057D2  C1BA  F0D3         	movff	_cos$3682+2,sin@f+2
  6683  0057D6  C1BB  F0D4         	movff	_cos$3682+3,sin@f+3
  6684  0057DA  EC05  F01F         	call	_sin	;wreg free
  6685  0057DE  C0D1  F1B4         	movff	?_sin,?_cos
  6686  0057E2  C0D2  F1B5         	movff	?_sin+1,?_cos+1
  6687  0057E6  C0D3  F1B6         	movff	?_sin+2,?_cos+2
  6688  0057EA  C0D4  F1B7         	movff	?_sin+3,?_cos+3
  6689  0057EE  0012               	return	
  6690  0057F0                     l6784:
  6691  0057F0  C1B4  F09F         	movff	cos@f,___fladd@f1
  6692  0057F4  C1B5  F0A0         	movff	cos@f+1,___fladd@f1+1
  6693  0057F8  C1B6  F0A1         	movff	cos@f+2,___fladd@f1+2
  6694  0057FC  C1B7  F0A2         	movff	cos@f+3,___fladd@f1+3
  6695  005800  0EDB               	movlw	219
  6696  005802  0100               	movlb	0	; () banked
  6697  005804  6FA3               	movwf	___fladd@f2& (0+255),b
  6698  005806  0E0F               	movlw	15
  6699  005808  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6700  00580A  0EC9               	movlw	201
  6701  00580C  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6702  00580E  0E3F               	movlw	63
  6703  005810  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6704  005812  EC93  F020         	call	___fladd	;wreg free
  6705  005816  C09F  F1B8         	movff	?___fladd,_cos$3682
  6706  00581A  C0A0  F1B9         	movff	?___fladd+1,_cos$3682+1
  6707  00581E  C0A1  F1BA         	movff	?___fladd+2,_cos$3682+2
  6708  005822  C0A2  F1BB         	movff	?___fladd+3,_cos$3682+3
  6709  005826  C1B8  F0D1         	movff	_cos$3682,sin@f
  6710  00582A  C1B9  F0D2         	movff	_cos$3682+1,sin@f+1
  6711  00582E  C1BA  F0D3         	movff	_cos$3682+2,sin@f+2
  6712  005832  C1BB  F0D4         	movff	_cos$3682+3,sin@f+3
  6713  005836  EC05  F01F         	call	_sin	;wreg free
  6714  00583A  C0D1  F1B4         	movff	?_sin,?_cos
  6715  00583E  C0D2  F1B5         	movff	?_sin+1,?_cos+1
  6716  005842  C0D3  F1B6         	movff	?_sin+2,?_cos+2
  6717  005846  C0D4  F1B7         	movff	?_sin+3,?_cos+3
  6718  00584A  0012               	return	
  6719  00584C  0012               	return		;funcret
  6720  00584E                     __end_of_cos:
  6721                           	opt stack 0
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           postinc0	equ	0xFEE
  6729                           wreg	equ	0xFE8
  6730                           indf2	equ	0xFDF
  6731                           postinc2	equ	0xFDE
  6732                           postdec2	equ	0xFDD
  6733                           fsr2h	equ	0xFDA
  6734                           fsr2l	equ	0xFD9
  6735                           status	equ	0xFD8
  6736                           
  6737 ;; *************** function _sin *****************
  6738 ;; Defined at:
  6739 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sin.c"
  6740 ;; Parameters:    Size  Location     Type
  6741 ;;  f               4  113[BANK0 ] unsigned int 
  6742 ;; Auto vars:     Size  Location     Type
  6743 ;;  x2              4    8[BANK1 ] unsigned int 
  6744 ;;  y               4    0[BANK1 ] unsigned int 
  6745 ;;  sgn             1   12[BANK1 ] unsigned char 
  6746 ;; Return value:  Size  Location     Type
  6747 ;;                  4  113[BANK0 ] unsigned char 
  6748 ;; Registers used:
  6749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6755 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6756 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6758 ;;      Totals:         0       4      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6759 ;;Total ram usage:       17 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; Hardware stack levels required when called:    8
  6762 ;; This function calls:
  6763 ;;		___fladd
  6764 ;;		___fldiv
  6765 ;;		___flge
  6766 ;;		___flmul
  6767 ;;		___flneg
  6768 ;;		___flsub
  6769 ;;		_eval_poly
  6770 ;;		_floor
  6771 ;; This function is called by:
  6772 ;;		_cos
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           	psect	text17
  6777  003E0A                     __ptext17:
  6778                           	opt stack 0
  6779  003E0A                     _sin:
  6780                           	opt stack 20
  6781                           
  6782                           ;incstack = 0
  6783  003E0A  0E00               	movlw	0
  6784  003E0C  0101               	movlb	1	; () banked
  6785  003E0E  6F8F               	movwf	sin@sgn& (0+255),b
  6786                           
  6787                           ; BSR set to: 1
  6788  003E10  0100               	movlb	0	; () banked
  6789  003E12  AFD4               	btfss	(sin@f+3)& (0+255),7,b
  6790  003E14  D016               	goto	l6658
  6791                           
  6792                           ; BSR set to: 0
  6793  003E16  C0D1  F0AB         	movff	sin@f,___flneg@f1
  6794  003E1A  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  6795  003E1E  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  6796  003E22  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  6797  003E26  ECEC  F02E         	call	___flneg	;wreg free
  6798  003E2A  C0AB  F0D1         	movff	?___flneg,sin@f
  6799  003E2E  C0AC  F0D2         	movff	?___flneg+1,sin@f+1
  6800  003E32  C0AD  F0D3         	movff	?___flneg+2,sin@f+2
  6801  003E36  C0AE  F0D4         	movff	?___flneg+3,sin@f+3
  6802  003E3A  0E01               	movlw	1
  6803  003E3C  0101               	movlb	1	; () banked
  6804  003E3E  6F8F               	movwf	sin@sgn& (0+255),b
  6805  003E40  D000               	goto	l6658
  6806  003E42                     l6658:
  6807  003E42  C0D1  F081         	movff	sin@f,___flmul@f1
  6808  003E46  C0D2  F082         	movff	sin@f+1,___flmul@f1+1
  6809  003E4A  C0D3  F083         	movff	sin@f+2,___flmul@f1+2
  6810  003E4E  C0D4  F084         	movff	sin@f+3,___flmul@f1+3
  6811  003E52  0E83               	movlw	131
  6812  003E54  0100               	movlb	0	; () banked
  6813  003E56  6F85               	movwf	___flmul@f2& (0+255),b
  6814  003E58  0EF9               	movlw	249
  6815  003E5A  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  6816  003E5C  0E22               	movlw	34
  6817  003E5E  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  6818  003E60  0E3E               	movlw	62
  6819  003E62  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  6820  003E64  ECB9  F027         	call	___flmul	;wreg free
  6821  003E68  C081  F0D1         	movff	?___flmul,sin@f
  6822  003E6C  C082  F0D2         	movff	?___flmul+1,sin@f+1
  6823  003E70  C083  F0D3         	movff	?___flmul+2,sin@f+2
  6824  003E74  C084  F0D4         	movff	?___flmul+3,sin@f+3
  6825  003E78  C0D1  F0C9         	movff	sin@f,___flsub@f1
  6826  003E7C  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  6827  003E80  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  6828  003E84  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  6829  003E88  C0D1  F0BF         	movff	sin@f,floor@x
  6830  003E8C  C0D2  F0C0         	movff	sin@f+1,floor@x+1
  6831  003E90  C0D3  F0C1         	movff	sin@f+2,floor@x+2
  6832  003E94  C0D4  F0C2         	movff	sin@f+3,floor@x+3
  6833  003E98  EC06  F029         	call	_floor	;wreg free
  6834  003E9C  C0BF  F0CD         	movff	?_floor,___flsub@f2
  6835  003EA0  C0C0  F0CE         	movff	?_floor+1,___flsub@f2+1
  6836  003EA4  C0C1  F0CF         	movff	?_floor+2,___flsub@f2+2
  6837  003EA8  C0C2  F0D0         	movff	?_floor+3,___flsub@f2+3
  6838  003EAC  EC1F  F02E         	call	___flsub	;wreg free
  6839  003EB0  C0C9  F0D1         	movff	?___flsub,sin@f
  6840  003EB4  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  6841  003EB8  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  6842  003EBC  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  6843  003EC0  C0D1  F081         	movff	sin@f,___flmul@f1
  6844  003EC4  C0D2  F082         	movff	sin@f+1,___flmul@f1+1
  6845  003EC8  C0D3  F083         	movff	sin@f+2,___flmul@f1+2
  6846  003ECC  C0D4  F084         	movff	sin@f+3,___flmul@f1+3
  6847  003ED0  0E00               	movlw	0
  6848  003ED2  0100               	movlb	0	; () banked
  6849  003ED4  6F85               	movwf	___flmul@f2& (0+255),b
  6850  003ED6  0E00               	movlw	0
  6851  003ED8  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  6852  003EDA  0E80               	movlw	128
  6853  003EDC  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  6854  003EDE  0E40               	movlw	64
  6855  003EE0  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  6856  003EE2  ECB9  F027         	call	___flmul	;wreg free
  6857  003EE6  C081  F0D1         	movff	?___flmul,sin@f
  6858  003EEA  C082  F0D2         	movff	?___flmul+1,sin@f+1
  6859  003EEE  C083  F0D3         	movff	?___flmul+2,sin@f+2
  6860  003EF2  C084  F0D4         	movff	?___flmul+3,sin@f+3
  6861  003EF6  0E00               	movlw	0
  6862  003EF8  0100               	movlb	0	; () banked
  6863  003EFA  6FB3               	movwf	___flge@ff1& (0+255),b
  6864  003EFC  0E00               	movlw	0
  6865  003EFE  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6866  003F00  0E00               	movlw	0
  6867  003F02  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6868  003F04  0E40               	movlw	64
  6869  003F06  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6870  003F08  C0D1  F0B7         	movff	sin@f,___flge@ff2
  6871  003F0C  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  6872  003F10  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  6873  003F14  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  6874  003F18  EC38  F02B         	call	___flge	;wreg free
  6875  003F1C  0100               	movlb	0	; () banked
  6876  003F1E  B0D8               	btfsc	status,0,c
  6877  003F20  D026               	goto	l6670
  6878                           
  6879                           ; BSR set to: 0
  6880  003F22  C0D1  F0C9         	movff	sin@f,___flsub@f1
  6881  003F26  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  6882  003F2A  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  6883  003F2E  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  6884  003F32  0E00               	movlw	0
  6885  003F34  0100               	movlb	0	; () banked
  6886  003F36  6FCD               	movwf	___flsub@f2& (0+255),b
  6887  003F38  0E00               	movlw	0
  6888  003F3A  6FCE               	movwf	(___flsub@f2+1)& (0+255),b
  6889  003F3C  0E00               	movlw	0
  6890  003F3E  6FCF               	movwf	(___flsub@f2+2)& (0+255),b
  6891  003F40  0E40               	movlw	64
  6892  003F42  6FD0               	movwf	(___flsub@f2+3)& (0+255),b
  6893  003F44  EC1F  F02E         	call	___flsub	;wreg free
  6894  003F48  C0C9  F0D1         	movff	?___flsub,sin@f
  6895  003F4C  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  6896  003F50  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  6897  003F54  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  6898  003F58  0101               	movlb	1	; () banked
  6899  003F5A  518F               	movf	sin@sgn& (0+255),w,b
  6900  003F5C  0101               	movlb	1	; () banked
  6901  003F5E  A4D8               	btfss	status,2,c
  6902  003F60  D002               	goto	u8320
  6903  003F62  0E01               	movlw	1
  6904  003F64  D001               	goto	u8330
  6905  003F66                     u8320:
  6906  003F66  0E00               	movlw	0
  6907  003F68                     u8330:
  6908  003F68  0101               	movlb	1	; () banked
  6909  003F6A  6F8F               	movwf	sin@sgn& (0+255),b
  6910  003F6C  D000               	goto	l6670
  6911  003F6E                     l6670:
  6912  003F6E  0E00               	movlw	0
  6913  003F70  0100               	movlb	0	; () banked
  6914  003F72  6FB3               	movwf	___flge@ff1& (0+255),b
  6915  003F74  0E00               	movlw	0
  6916  003F76  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6917  003F78  0E80               	movlw	128
  6918  003F7A  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6919  003F7C  0E3F               	movlw	63
  6920  003F7E  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6921  003F80  C0D1  F0B7         	movff	sin@f,___flge@ff2
  6922  003F84  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  6923  003F88  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  6924  003F8C  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  6925  003F90  EC38  F02B         	call	___flge	;wreg free
  6926  003F94  0100               	movlb	0	; () banked
  6927  003F96  B0D8               	btfsc	status,0,c
  6928  003F98  D025               	goto	l1458
  6929                           
  6930                           ; BSR set to: 0
  6931  003F9A  C0D1  F0AB         	movff	sin@f,___flneg@f1
  6932  003F9E  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  6933  003FA2  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  6934  003FA6  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  6935  003FAA  ECEC  F02E         	call	___flneg	;wreg free
  6936  003FAE  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6937  003FB2  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6938  003FB6  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6939  003FBA  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6940  003FBE  0E00               	movlw	0
  6941  003FC0  0100               	movlb	0	; () banked
  6942  003FC2  6FA3               	movwf	___fladd@f2& (0+255),b
  6943  003FC4  0E00               	movlw	0
  6944  003FC6  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6945  003FC8  0E00               	movlw	0
  6946  003FCA  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6947  003FCC  0E40               	movlw	64
  6948  003FCE  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6949  003FD0  EC93  F020         	call	___fladd	;wreg free
  6950  003FD4  C09F  F0D1         	movff	?___fladd,sin@f
  6951  003FD8  C0A0  F0D2         	movff	?___fladd+1,sin@f+1
  6952  003FDC  C0A1  F0D3         	movff	?___fladd+2,sin@f+2
  6953  003FE0  C0A2  F0D4         	movff	?___fladd+3,sin@f+3
  6954  003FE4                     l1458:
  6955  003FE4  C0D1  F081         	movff	sin@f,___flmul@f1
  6956  003FE8  C0D2  F082         	movff	sin@f+1,___flmul@f1+1
  6957  003FEC  C0D3  F083         	movff	sin@f+2,___flmul@f1+2
  6958  003FF0  C0D4  F084         	movff	sin@f+3,___flmul@f1+3
  6959  003FF4  C0D1  F085         	movff	sin@f,___flmul@f2
  6960  003FF8  C0D2  F086         	movff	sin@f+1,___flmul@f2+1
  6961  003FFC  C0D3  F087         	movff	sin@f+2,___flmul@f2+2
  6962  004000  C0D4  F088         	movff	sin@f+3,___flmul@f2+3
  6963  004004  ECB9  F027         	call	___flmul	;wreg free
  6964  004008  C081  F18B         	movff	?___flmul,sin@x2
  6965  00400C  C082  F18C         	movff	?___flmul+1,sin@x2+1
  6966  004010  C083  F18D         	movff	?___flmul+2,sin@x2+2
  6967  004014  C084  F18E         	movff	?___flmul+3,sin@x2+3
  6968  004018  C18B  F0AB         	movff	sin@x2,eval_poly@x
  6969  00401C  C18C  F0AC         	movff	sin@x2+1,eval_poly@x+1
  6970  004020  C18D  F0AD         	movff	sin@x2+2,eval_poly@x+2
  6971  004024  C18E  F0AE         	movff	sin@x2+3,eval_poly@x+3
  6972  004028  0E41               	movlw	low sin@coeff_b
  6973  00402A  0100               	movlb	0	; () banked
  6974  00402C  6FAF               	movwf	eval_poly@d& (0+255),b
  6975  00402E  0E0D               	movlw	high sin@coeff_b
  6976  004030  0100               	movlb	0	; () banked
  6977  004032  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  6978  004034  0E00               	movlw	0
  6979  004036  0100               	movlb	0	; () banked
  6980  004038  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  6981  00403A  0E03               	movlw	3
  6982  00403C  6FB1               	movwf	eval_poly@n& (0+255),b
  6983  00403E  EC24  F02A         	call	_eval_poly	;wreg free
  6984  004042  C0AB  F183         	movff	?_eval_poly,sin@y
  6985  004046  C0AC  F184         	movff	?_eval_poly+1,sin@y+1
  6986  00404A  C0AD  F185         	movff	?_eval_poly+2,sin@y+2
  6987  00404E  C0AE  F186         	movff	?_eval_poly+3,sin@y+3
  6988  004052  C183  F094         	movff	sin@y,___fldiv@f2
  6989  004056  C184  F095         	movff	sin@y+1,___fldiv@f2+1
  6990  00405A  C185  F096         	movff	sin@y+2,___fldiv@f2+2
  6991  00405E  C186  F097         	movff	sin@y+3,___fldiv@f2+3
  6992  004062  0E00               	movlw	0
  6993  004064  0100               	movlb	0	; () banked
  6994  004066  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  6995  004068  0E04               	movlw	4
  6996  00406A  6FB1               	movwf	eval_poly@n& (0+255),b
  6997  00406C  0E2D               	movlw	low sin@coeff_a
  6998  00406E  0100               	movlb	0	; () banked
  6999  004070  6FAF               	movwf	eval_poly@d& (0+255),b
  7000  004072  0E0D               	movlw	high sin@coeff_a
  7001  004074  0100               	movlb	0	; () banked
  7002  004076  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  7003  004078  C18B  F0AB         	movff	sin@x2,eval_poly@x
  7004  00407C  C18C  F0AC         	movff	sin@x2+1,eval_poly@x+1
  7005  004080  C18D  F0AD         	movff	sin@x2+2,eval_poly@x+2
  7006  004084  C18E  F0AE         	movff	sin@x2+3,eval_poly@x+3
  7007  004088  EC24  F02A         	call	_eval_poly	;wreg free
  7008  00408C  C0AB  F090         	movff	?_eval_poly,___fldiv@f1
  7009  004090  C0AC  F091         	movff	?_eval_poly+1,___fldiv@f1+1
  7010  004094  C0AD  F092         	movff	?_eval_poly+2,___fldiv@f1+2
  7011  004098  C0AE  F093         	movff	?_eval_poly+3,___fldiv@f1+3
  7012  00409C  EC6B  F028         	call	___fldiv	;wreg free
  7013  0040A0  C090  F187         	movff	?___fldiv,_sin$3683
  7014  0040A4  C091  F188         	movff	?___fldiv+1,_sin$3683+1
  7015  0040A8  C092  F189         	movff	?___fldiv+2,_sin$3683+2
  7016  0040AC  C093  F18A         	movff	?___fldiv+3,_sin$3683+3
  7017  0040B0  C0D1  F081         	movff	sin@f,___flmul@f1
  7018  0040B4  C0D2  F082         	movff	sin@f+1,___flmul@f1+1
  7019  0040B8  C0D3  F083         	movff	sin@f+2,___flmul@f1+2
  7020  0040BC  C0D4  F084         	movff	sin@f+3,___flmul@f1+3
  7021  0040C0  C187  F085         	movff	_sin$3683,___flmul@f2
  7022  0040C4  C188  F086         	movff	_sin$3683+1,___flmul@f2+1
  7023  0040C8  C189  F087         	movff	_sin$3683+2,___flmul@f2+2
  7024  0040CC  C18A  F088         	movff	_sin$3683+3,___flmul@f2+3
  7025  0040D0  ECB9  F027         	call	___flmul	;wreg free
  7026  0040D4  C081  F0D1         	movff	?___flmul,sin@f
  7027  0040D8  C082  F0D2         	movff	?___flmul+1,sin@f+1
  7028  0040DC  C083  F0D3         	movff	?___flmul+2,sin@f+2
  7029  0040E0  C084  F0D4         	movff	?___flmul+3,sin@f+3
  7030  0040E4  0101               	movlb	1	; () banked
  7031  0040E6  518F               	movf	sin@sgn& (0+255),w,b
  7032  0040E8  0101               	movlb	1	; () banked
  7033  0040EA  B4D8               	btfsc	status,2,c
  7034  0040EC  D013               	goto	l1459
  7035                           
  7036                           ; BSR set to: 1
  7037  0040EE  C0D1  F0AB         	movff	sin@f,___flneg@f1
  7038  0040F2  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  7039  0040F6  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  7040  0040FA  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  7041  0040FE  ECEC  F02E         	call	___flneg	;wreg free
  7042  004102  C0AB  F0D1         	movff	?___flneg,?_sin
  7043  004106  C0AC  F0D2         	movff	?___flneg+1,?_sin+1
  7044  00410A  C0AD  F0D3         	movff	?___flneg+2,?_sin+2
  7045  00410E  C0AE  F0D4         	movff	?___flneg+3,?_sin+3
  7046  004112  0012               	return	
  7047  004114                     l1459:
  7048                           
  7049                           ; BSR set to: 1
  7050  004114  C0D1  F0D1         	movff	sin@f,?_sin
  7051  004118  C0D2  F0D2         	movff	sin@f+1,?_sin+1
  7052  00411C  C0D3  F0D3         	movff	sin@f+2,?_sin+2
  7053  004120  C0D4  F0D4         	movff	sin@f+3,?_sin+3
  7054  004124  0012               	return		;funcret
  7055  004126                     __end_of_sin:
  7056                           	opt stack 0
  7057                           tblptru	equ	0xFF8
  7058                           tblptrh	equ	0xFF7
  7059                           tblptrl	equ	0xFF6
  7060                           tablat	equ	0xFF5
  7061                           prodh	equ	0xFF4
  7062                           prodl	equ	0xFF3
  7063                           postinc0	equ	0xFEE
  7064                           wreg	equ	0xFE8
  7065                           indf2	equ	0xFDF
  7066                           postinc2	equ	0xFDE
  7067                           postdec2	equ	0xFDD
  7068                           fsr2h	equ	0xFDA
  7069                           fsr2l	equ	0xFD9
  7070                           status	equ	0xFD8
  7071                           
  7072 ;; *************** function _floor *****************
  7073 ;; Defined at:
  7074 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;  x               4   95[BANK0 ] unsigned char 
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;  i               4   99[BANK0 ] unsigned char 
  7079 ;;  expon           2  103[BANK0 ] int 
  7080 ;; Return value:  Size  Location     Type
  7081 ;;                  4   95[BANK0 ] int 
  7082 ;; Registers used:
  7083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7084 ;; Tracked objects:
  7085 ;;		On entry : 0/0
  7086 ;;		On exit  : 0/0
  7087 ;;		Unchanged: 0/0
  7088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7089 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;Total ram usage:       10 bytes
  7094 ;; Hardware stack levels used:    1
  7095 ;; Hardware stack levels required when called:    7
  7096 ;; This function calls:
  7097 ;;		___altofl
  7098 ;;		___fladd
  7099 ;;		___flge
  7100 ;;		___fltol
  7101 ;;		_frexp
  7102 ;; This function is called by:
  7103 ;;		_sin
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107                           	psect	text18
  7108  00520C                     __ptext18:
  7109                           	opt stack 0
  7110  00520C                     _floor:
  7111                           	opt stack 20
  7112                           
  7113                           ;incstack = 0
  7114  00520C  C0BF  F077         	movff	floor@x,frexp@value
  7115  005210  C0C0  F078         	movff	floor@x+1,frexp@value+1
  7116  005214  C0C1  F079         	movff	floor@x+2,frexp@value+2
  7117  005218  C0C2  F07A         	movff	floor@x+3,frexp@value+3
  7118  00521C  0EC7               	movlw	low floor@expon
  7119  00521E  0100               	movlb	0	; () banked
  7120  005220  6F7B               	movwf	frexp@eptr& (0+255),b
  7121  005222  0E00               	movlw	high floor@expon
  7122  005224  0100               	movlb	0	; () banked
  7123  005226  6F7C               	movwf	(frexp@eptr+1)& (0+255),b
  7124  005228  EC5E  F02D         	call	_frexp	;wreg free
  7125  00522C  0100               	movlb	0	; () banked
  7126  00522E  AFC8               	btfss	(floor@expon+1)& (0+255),7,b
  7127  005230  D017               	goto	l6552
  7128                           
  7129                           ; BSR set to: 0
  7130  005232  0100               	movlb	0	; () banked
  7131  005234  AFC2               	btfss	(floor@x+3)& (0+255),7,b
  7132  005236  D00A               	goto	l6548
  7133                           
  7134                           ; BSR set to: 0
  7135  005238  0E00               	movlw	0
  7136  00523A  0100               	movlb	0	; () banked
  7137  00523C  6FBF               	movwf	?_floor& (0+255),b
  7138  00523E  0E00               	movlw	0
  7139  005240  6FC0               	movwf	(?_floor+1)& (0+255),b
  7140  005242  0E80               	movlw	128
  7141  005244  6FC1               	movwf	(?_floor+2)& (0+255),b
  7142  005246  0EBF               	movlw	191
  7143  005248  6FC2               	movwf	(?_floor+3)& (0+255),b
  7144                           
  7145                           ; BSR set to: 0
  7146  00524A  0012               	return	
  7147  00524C                     l6548:
  7148                           
  7149                           ; BSR set to: 0
  7150  00524C  0E00               	movlw	0
  7151  00524E  0100               	movlb	0	; () banked
  7152  005250  6FBF               	movwf	?_floor& (0+255),b
  7153  005252  0E00               	movlw	0
  7154  005254  6FC0               	movwf	(?_floor+1)& (0+255),b
  7155  005256  0E00               	movlw	0
  7156  005258  6FC1               	movwf	(?_floor+2)& (0+255),b
  7157  00525A  0E00               	movlw	0
  7158  00525C  6FC2               	movwf	(?_floor+3)& (0+255),b
  7159                           
  7160                           ; BSR set to: 0
  7161  00525E  0012               	return	
  7162  005260                     l6552:
  7163                           
  7164                           ; BSR set to: 0
  7165  005260  0100               	movlb	0	; () banked
  7166  005262  51C8               	movf	(floor@expon+1)& (0+255),w,b
  7167  005264  E105               	bnz	u8170
  7168  005266  0E1D               	movlw	29
  7169  005268  0100               	movlb	0	; () banked
  7170  00526A  5DC7               	subwf	floor@expon& (0+255),w,b
  7171  00526C  A0D8               	btfss	status,0,c
  7172  00526E  D009               	goto	l6556
  7173  005270                     u8170:
  7174                           
  7175                           ; BSR set to: 0
  7176  005270  C0BF  F0BF         	movff	floor@x,?_floor
  7177  005274  C0C0  F0C0         	movff	floor@x+1,?_floor+1
  7178  005278  C0C1  F0C1         	movff	floor@x+2,?_floor+2
  7179  00527C  C0C2  F0C2         	movff	floor@x+3,?_floor+3
  7180  005280  0012               	return	
  7181  005282                     l6556:
  7182                           
  7183                           ; BSR set to: 0
  7184  005282  C0BF  F0AF         	movff	floor@x,___fltol@f1
  7185  005286  C0C0  F0B0         	movff	floor@x+1,___fltol@f1+1
  7186  00528A  C0C1  F0B1         	movff	floor@x+2,___fltol@f1+2
  7187  00528E  C0C2  F0B2         	movff	floor@x+3,___fltol@f1+3
  7188  005292  EC97  F029         	call	___fltol	;wreg free
  7189  005296  C0AF  F0B9         	movff	?___fltol,___altofl@c
  7190  00529A  C0B0  F0BA         	movff	?___fltol+1,___altofl@c+1
  7191  00529E  C0B1  F0BB         	movff	?___fltol+2,___altofl@c+2
  7192  0052A2  C0B2  F0BC         	movff	?___fltol+3,___altofl@c+3
  7193  0052A6  EC7B  F02E         	call	___altofl	;wreg free
  7194  0052AA  C0B9  F0C3         	movff	?___altofl,floor@i
  7195  0052AE  C0BA  F0C4         	movff	?___altofl+1,floor@i+1
  7196  0052B2  C0BB  F0C5         	movff	?___altofl+2,floor@i+2
  7197  0052B6  C0BC  F0C6         	movff	?___altofl+3,floor@i+3
  7198  0052BA  C0BF  F0B3         	movff	floor@x,___flge@ff1
  7199  0052BE  C0C0  F0B4         	movff	floor@x+1,___flge@ff1+1
  7200  0052C2  C0C1  F0B5         	movff	floor@x+2,___flge@ff1+2
  7201  0052C6  C0C2  F0B6         	movff	floor@x+3,___flge@ff1+3
  7202  0052CA  C0C3  F0B7         	movff	floor@i,___flge@ff2
  7203  0052CE  C0C4  F0B8         	movff	floor@i+1,___flge@ff2+1
  7204  0052D2  C0C5  F0B9         	movff	floor@i+2,___flge@ff2+2
  7205  0052D6  C0C6  F0BA         	movff	floor@i+3,___flge@ff2+3
  7206  0052DA  EC38  F02B         	call	___flge	;wreg free
  7207  0052DE  0100               	movlb	0	; () banked
  7208  0052E0  B0D8               	btfsc	status,0,c
  7209  0052E2  D01C               	goto	l1478
  7210                           
  7211                           ; BSR set to: 0
  7212  0052E4  C0C3  F09F         	movff	floor@i,___fladd@f1
  7213  0052E8  C0C4  F0A0         	movff	floor@i+1,___fladd@f1+1
  7214  0052EC  C0C5  F0A1         	movff	floor@i+2,___fladd@f1+2
  7215  0052F0  C0C6  F0A2         	movff	floor@i+3,___fladd@f1+3
  7216  0052F4  0E00               	movlw	0
  7217  0052F6  0100               	movlb	0	; () banked
  7218  0052F8  6FA3               	movwf	___fladd@f2& (0+255),b
  7219  0052FA  0E00               	movlw	0
  7220  0052FC  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  7221  0052FE  0E80               	movlw	128
  7222  005300  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  7223  005302  0EBF               	movlw	191
  7224  005304  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  7225  005306  EC93  F020         	call	___fladd	;wreg free
  7226  00530A  C09F  F0BF         	movff	?___fladd,?_floor
  7227  00530E  C0A0  F0C0         	movff	?___fladd+1,?_floor+1
  7228  005312  C0A1  F0C1         	movff	?___fladd+2,?_floor+2
  7229  005316  C0A2  F0C2         	movff	?___fladd+3,?_floor+3
  7230  00531A  0012               	return	
  7231  00531C                     l1478:
  7232                           
  7233                           ; BSR set to: 0
  7234  00531C  C0C3  F0BF         	movff	floor@i,?_floor
  7235  005320  C0C4  F0C0         	movff	floor@i+1,?_floor+1
  7236  005324  C0C5  F0C1         	movff	floor@i+2,?_floor+2
  7237  005328  C0C6  F0C2         	movff	floor@i+3,?_floor+3
  7238  00532C  0012               	return		;funcret
  7239  00532E                     __end_of_floor:
  7240                           	opt stack 0
  7241                           tblptru	equ	0xFF8
  7242                           tblptrh	equ	0xFF7
  7243                           tblptrl	equ	0xFF6
  7244                           tablat	equ	0xFF5
  7245                           prodh	equ	0xFF4
  7246                           prodl	equ	0xFF3
  7247                           postinc0	equ	0xFEE
  7248                           wreg	equ	0xFE8
  7249                           indf2	equ	0xFDF
  7250                           postinc2	equ	0xFDE
  7251                           postdec2	equ	0xFDD
  7252                           fsr2h	equ	0xFDA
  7253                           fsr2l	equ	0xFD9
  7254                           status	equ	0xFD8
  7255                           
  7256 ;; *************** function _frexp *****************
  7257 ;; Defined at:
  7258 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  7259 ;; Parameters:    Size  Location     Type
  7260 ;;  value           4   23[BANK0 ] int 
  7261 ;;  eptr            2   27[BANK0 ] PTR int 
  7262 ;;		 -> floor@expon(2), 
  7263 ;; Auto vars:     Size  Location     Type
  7264 ;;		None
  7265 ;; Return value:  Size  Location     Type
  7266 ;;                  4   23[BANK0 ] PTR int 
  7267 ;; Registers used:
  7268 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7274 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7278 ;;Total ram usage:        8 bytes
  7279 ;; Hardware stack levels used:    1
  7280 ;; Hardware stack levels required when called:    5
  7281 ;; This function calls:
  7282 ;;		Nothing
  7283 ;; This function is called by:
  7284 ;;		_floor
  7285 ;; This function uses a non-reentrant model
  7286 ;;
  7287                           
  7288                           	psect	text19
  7289  005ABC                     __ptext19:
  7290                           	opt stack 0
  7291  005ABC                     _frexp:
  7292                           	opt stack 21
  7293                           
  7294                           ;incstack = 0
  7295  005ABC  0100               	movlb	0	; () banked
  7296  005ABE  5177               	movf	frexp@value& (0+255),w,b
  7297  005AC0  0100               	movlb	0	; () banked
  7298  005AC2  1178               	iorwf	(frexp@value+1)& (0+255),w,b
  7299  005AC4  0100               	movlb	0	; () banked
  7300  005AC6  1179               	iorwf	(frexp@value+2)& (0+255),w,b
  7301  005AC8  0100               	movlb	0	; () banked
  7302  005ACA  117A               	iorwf	(frexp@value+3)& (0+255),w,b
  7303  005ACC  A4D8               	btfss	status,2,c
  7304  005ACE  D009               	goto	l6450
  7305                           
  7306                           ; BSR set to: 0
  7307  005AD0  C07B  FFD9         	movff	frexp@eptr,fsr2l
  7308  005AD4  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  7309  005AD8  0E00               	movlw	0
  7310  005ADA  6EDE               	movwf	postinc2,c
  7311  005ADC  0E00               	movlw	0
  7312  005ADE  6EDD               	movwf	postdec2,c
  7313                           
  7314                           ; BSR set to: 0
  7315                           ;	Return value of _frexp is never used
  7316  005AE0  0012               	return	
  7317  005AE2                     l6450:
  7318                           
  7319                           ; BSR set to: 0
  7320  005AE2  0100               	movlb	0	; () banked
  7321  005AE4  517A               	movf	(frexp@value+3)& (0+255),w,b
  7322  005AE6  0B7F               	andlw	127
  7323  005AE8  0100               	movlb	0	; () banked
  7324  005AEA  6F7D               	movwf	??_frexp& (0+255),b
  7325  005AEC  6B7E               	clrf	(??_frexp+1)& (0+255),b
  7326  005AEE  90D8               	bcf	status,0,c
  7327  005AF0  0100               	movlb	0	; () banked
  7328  005AF2  377D               	rlcf	??_frexp& (0+255),f,b
  7329  005AF4  377E               	rlcf	(??_frexp+1)& (0+255),f,b
  7330  005AF6  C07B  FFD9         	movff	frexp@eptr,fsr2l
  7331  005AFA  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  7332  005AFE  C07D  FFDE         	movff	??_frexp,postinc2
  7333  005B02  C07E  FFDD         	movff	??_frexp+1,postdec2
  7334  005B06  0100               	movlb	0	; () banked
  7335  005B08  AF79               	btfss	(frexp@value+2)& (0+255),7,b
  7336  005B0A  D004               	goto	u8030
  7337  005B0C  0100               	movlb	0	; () banked
  7338  005B0E  6B7D               	clrf	??_frexp& (0+255),b
  7339  005B10  2B7D               	incf	??_frexp& (0+255),f,b
  7340  005B12  D002               	goto	u8038
  7341  005B14                     u8030:
  7342  005B14  0100               	movlb	0	; () banked
  7343  005B16  6B7D               	clrf	??_frexp& (0+255),b
  7344  005B18                     u8038:
  7345  005B18  0100               	movlb	0	; () banked
  7346  005B1A  517D               	movf	??_frexp& (0+255),w,b
  7347  005B1C  C07B  FFD9         	movff	frexp@eptr,fsr2l
  7348  005B20  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  7349  005B24  12DE               	iorwf	postinc2,f,c
  7350  005B26  0E00               	movlw	0
  7351  005B28  12DD               	iorwf	postdec2,f,c
  7352                           
  7353                           ; BSR set to: 0
  7354  005B2A  C07B  FFD9         	movff	frexp@eptr,fsr2l
  7355  005B2E  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  7356  005B32  0E82               	movlw	130
  7357  005B34  26DE               	addwf	postinc2,f,c
  7358  005B36  0EFF               	movlw	255
  7359  005B38  22DD               	addwfc	postdec2,f,c
  7360                           
  7361                           ; BSR set to: 0
  7362  005B3A  817A               	bsf	(frexp@value+3)& (0+255),0,b
  7363  005B3C  837A               	bsf	(frexp@value+3)& (0+255),1,b
  7364  005B3E  857A               	bsf	(frexp@value+3)& (0+255),2,b
  7365  005B40  877A               	bsf	(frexp@value+3)& (0+255),3,b
  7366  005B42  897A               	bsf	(frexp@value+3)& (0+255),4,b
  7367  005B44  8B7A               	bsf	(frexp@value+3)& (0+255),5,b
  7368  005B46  9D7A               	bcf	(frexp@value+3)& (0+255),6,b
  7369                           
  7370                           ; BSR set to: 0
  7371  005B48  0100               	movlb	0	; () banked
  7372  005B4A  9F79               	bcf	(frexp@value+2)& (0+255),7,b
  7373  005B4C  0012               	return	
  7374                           
  7375                           ; BSR set to: 0
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;	Return value of _frexp is never used
  7379  005B4E  0012               	return		;funcret
  7380  005B50                     __end_of_frexp:
  7381                           	opt stack 0
  7382                           tblptru	equ	0xFF8
  7383                           tblptrh	equ	0xFF7
  7384                           tblptrl	equ	0xFF6
  7385                           tablat	equ	0xFF5
  7386                           prodh	equ	0xFF4
  7387                           prodl	equ	0xFF3
  7388                           postinc0	equ	0xFEE
  7389                           wreg	equ	0xFE8
  7390                           indf2	equ	0xFDF
  7391                           postinc2	equ	0xFDE
  7392                           postdec2	equ	0xFDD
  7393                           fsr2h	equ	0xFDA
  7394                           fsr2l	equ	0xFD9
  7395                           status	equ	0xFD8
  7396                           
  7397 ;; *************** function ___fltol *****************
  7398 ;; Defined at:
  7399 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;  f1              4   79[BANK0 ] PTR int 
  7402 ;; Auto vars:     Size  Location     Type
  7403 ;;  exp1            1   88[BANK0 ] unsigned char 
  7404 ;;  sign1           1   87[BANK0 ] unsigned char 
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  4   79[BANK0 ] long 
  7407 ;; Registers used:
  7408 ;;		wreg, status,2, status,0
  7409 ;; Tracked objects:
  7410 ;;		On entry : 0/0
  7411 ;;		On exit  : 0/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7414 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7416 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7417 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;Total ram usage:       10 bytes
  7419 ;; Hardware stack levels used:    1
  7420 ;; Hardware stack levels required when called:    5
  7421 ;; This function calls:
  7422 ;;		Nothing
  7423 ;; This function is called by:
  7424 ;;		_park_routine
  7425 ;;		_parallelo
  7426 ;;		_floor
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           	psect	text20
  7431  00532E                     __ptext20:
  7432                           	opt stack 0
  7433  00532E                     ___fltol:
  7434                           	opt stack 23
  7435                           
  7436                           ; BSR set to: 0
  7437                           ;incstack = 0
  7438  00532E  0100               	movlb	0	; () banked
  7439  005330  35B1               	rlcf	(___fltol@f1+2)& (0+255),w,b
  7440  005332  35B2               	rlcf	(___fltol@f1+3)& (0+255),w,b
  7441  005334  0100               	movlb	0	; () banked
  7442  005336  6FB8               	movwf	___fltol@exp1& (0+255),b
  7443  005338  0100               	movlb	0	; () banked
  7444  00533A  51B8               	movf	___fltol@exp1& (0+255),w,b
  7445  00533C  A4D8               	btfss	status,2,c
  7446  00533E  D00A               	goto	l6406
  7447                           
  7448                           ; BSR set to: 0
  7449  005340  0E00               	movlw	0
  7450  005342  0100               	movlb	0	; () banked
  7451  005344  6FAF               	movwf	?___fltol& (0+255),b
  7452  005346  0E00               	movlw	0
  7453  005348  6FB0               	movwf	(?___fltol+1)& (0+255),b
  7454  00534A  0E00               	movlw	0
  7455  00534C  6FB1               	movwf	(?___fltol+2)& (0+255),b
  7456  00534E  0E00               	movlw	0
  7457  005350  6FB2               	movwf	(?___fltol+3)& (0+255),b
  7458                           
  7459                           ; BSR set to: 0
  7460  005352  0012               	return	
  7461  005354                     l6406:
  7462                           
  7463                           ; BSR set to: 0
  7464  005354  C0AF  F0B3         	movff	___fltol@f1,??___fltol
  7465  005358  C0B0  F0B4         	movff	___fltol@f1+1,??___fltol+1
  7466  00535C  C0B1  F0B5         	movff	___fltol@f1+2,??___fltol+2
  7467  005360  C0B2  F0B6         	movff	___fltol@f1+3,??___fltol+3
  7468  005364  0E20               	movlw	32
  7469  005366  D006               	goto	u7960
  7470  005368                     u7965:
  7471  005368  0100               	movlb	0	; () banked
  7472  00536A  90D8               	bcf	status,0,c
  7473  00536C  33B6               	rrcf	(??___fltol+3)& (0+255),f,b
  7474  00536E  33B5               	rrcf	(??___fltol+2)& (0+255),f,b
  7475  005370  33B4               	rrcf	(??___fltol+1)& (0+255),f,b
  7476  005372  33B3               	rrcf	??___fltol& (0+255),f,b
  7477  005374                     u7960:
  7478  005374  2EE8               	decfsz	wreg,f,c
  7479  005376  D7F8               	goto	u7965
  7480  005378  0100               	movlb	0	; () banked
  7481  00537A  51B3               	movf	??___fltol& (0+255),w,b
  7482  00537C  0100               	movlb	0	; () banked
  7483  00537E  6FB7               	movwf	___fltol@sign1& (0+255),b
  7484                           
  7485                           ; BSR set to: 0
  7486  005380  0100               	movlb	0	; () banked
  7487  005382  8FB1               	bsf	(___fltol@f1+2)& (0+255),7,b
  7488                           
  7489                           ; BSR set to: 0
  7490  005384  0EFF               	movlw	255
  7491  005386  0100               	movlb	0	; () banked
  7492  005388  17AF               	andwf	___fltol@f1& (0+255),f,b
  7493  00538A  0EFF               	movlw	255
  7494  00538C  17B0               	andwf	(___fltol@f1+1)& (0+255),f,b
  7495  00538E  0EFF               	movlw	255
  7496  005390  17B1               	andwf	(___fltol@f1+2)& (0+255),f,b
  7497  005392  0E00               	movlw	0
  7498  005394  17B2               	andwf	(___fltol@f1+3)& (0+255),f,b
  7499                           
  7500                           ; BSR set to: 0
  7501  005396  0E96               	movlw	150
  7502  005398  0100               	movlb	0	; () banked
  7503  00539A  5FB8               	subwf	___fltol@exp1& (0+255),f,b
  7504                           
  7505                           ; BSR set to: 0
  7506  00539C  0100               	movlb	0	; () banked
  7507  00539E  AFB8               	btfss	___fltol@exp1& (0+255),7,b
  7508  0053A0  D01B               	goto	l6426
  7509                           
  7510                           ; BSR set to: 0
  7511  0053A2  0100               	movlb	0	; () banked
  7512  0053A4  51B8               	movf	___fltol@exp1& (0+255),w,b
  7513  0053A6  0A80               	xorlw	128
  7514  0053A8  0F97               	addlw	151
  7515  0053AA  B0D8               	btfsc	status,0,c
  7516  0053AC  D00B               	goto	l6422
  7517                           
  7518                           ; BSR set to: 0
  7519  0053AE  0E00               	movlw	0
  7520  0053B0  0100               	movlb	0	; () banked
  7521  0053B2  6FAF               	movwf	?___fltol& (0+255),b
  7522  0053B4  0E00               	movlw	0
  7523  0053B6  6FB0               	movwf	(?___fltol+1)& (0+255),b
  7524  0053B8  0E00               	movlw	0
  7525  0053BA  6FB1               	movwf	(?___fltol+2)& (0+255),b
  7526  0053BC  0E00               	movlw	0
  7527  0053BE  6FB2               	movwf	(?___fltol+3)& (0+255),b
  7528                           
  7529                           ; BSR set to: 0
  7530  0053C0  0012               	return	
  7531                           
  7532                           ; BSR set to: 0
  7533  0053C2  D000               	goto	l6422
  7534  0053C4                     l6422:
  7535                           
  7536                           ; BSR set to: 0
  7537  0053C4  0100               	movlb	0	; () banked
  7538  0053C6  90D8               	bcf	status,0,c
  7539  0053C8  33B2               	rrcf	(___fltol@f1+3)& (0+255),f,b
  7540  0053CA  33B1               	rrcf	(___fltol@f1+2)& (0+255),f,b
  7541  0053CC  33B0               	rrcf	(___fltol@f1+1)& (0+255),f,b
  7542  0053CE  33AF               	rrcf	___fltol@f1& (0+255),f,b
  7543                           
  7544                           ; BSR set to: 0
  7545  0053D0  0100               	movlb	0	; () banked
  7546  0053D2  3FB8               	incfsz	___fltol@exp1& (0+255),f,b
  7547  0053D4  D7F7               	goto	l6422
  7548                           
  7549                           ; BSR set to: 0
  7550  0053D6  D01F               	goto	l6436
  7551  0053D8                     l6426:
  7552                           
  7553                           ; BSR set to: 0
  7554  0053D8  0E1F               	movlw	31
  7555  0053DA  0100               	movlb	0	; () banked
  7556  0053DC  65B8               	cpfsgt	___fltol@exp1& (0+255),b
  7557  0053DE  D014               	goto	l6434
  7558                           
  7559                           ; BSR set to: 0
  7560  0053E0  0E00               	movlw	0
  7561  0053E2  0100               	movlb	0	; () banked
  7562  0053E4  6FAF               	movwf	?___fltol& (0+255),b
  7563  0053E6  0E00               	movlw	0
  7564  0053E8  6FB0               	movwf	(?___fltol+1)& (0+255),b
  7565  0053EA  0E00               	movlw	0
  7566  0053EC  6FB1               	movwf	(?___fltol+2)& (0+255),b
  7567  0053EE  0E00               	movlw	0
  7568  0053F0  6FB2               	movwf	(?___fltol+3)& (0+255),b
  7569                           
  7570                           ; BSR set to: 0
  7571  0053F2  0012               	return	
  7572                           
  7573                           ; BSR set to: 0
  7574  0053F4  D009               	goto	l6434
  7575  0053F6                     l6432:
  7576                           
  7577                           ; BSR set to: 0
  7578  0053F6  0100               	movlb	0	; () banked
  7579  0053F8  90D8               	bcf	status,0,c
  7580  0053FA  37AF               	rlcf	___fltol@f1& (0+255),f,b
  7581  0053FC  37B0               	rlcf	(___fltol@f1+1)& (0+255),f,b
  7582  0053FE  37B1               	rlcf	(___fltol@f1+2)& (0+255),f,b
  7583  005400  37B2               	rlcf	(___fltol@f1+3)& (0+255),f,b
  7584  005402  0100               	movlb	0	; () banked
  7585  005404  07B8               	decf	___fltol@exp1& (0+255),f,b
  7586  005406  D000               	goto	l6434
  7587  005408                     l6434:
  7588                           
  7589                           ; BSR set to: 0
  7590  005408  0100               	movlb	0	; () banked
  7591  00540A  51B8               	movf	___fltol@exp1& (0+255),w,b
  7592  00540C  0100               	movlb	0	; () banked
  7593  00540E  B4D8               	btfsc	status,2,c
  7594  005410  D002               	goto	l6436
  7595  005412  D7F1               	goto	l6432
  7596                           
  7597                           ; BSR set to: 0
  7598  005414  D000               	goto	l6436
  7599  005416                     l6436:
  7600                           
  7601                           ; BSR set to: 0
  7602  005416  0100               	movlb	0	; () banked
  7603  005418  51B7               	movf	___fltol@sign1& (0+255),w,b
  7604  00541A  0100               	movlb	0	; () banked
  7605  00541C  B4D8               	btfsc	status,2,c
  7606  00541E  D00A               	goto	l6440
  7607                           
  7608                           ; BSR set to: 0
  7609  005420  0100               	movlb	0	; () banked
  7610  005422  1FB2               	comf	(___fltol@f1+3)& (0+255),f,b
  7611  005424  1FB1               	comf	(___fltol@f1+2)& (0+255),f,b
  7612  005426  1FB0               	comf	(___fltol@f1+1)& (0+255),f,b
  7613  005428  6DAF               	negf	___fltol@f1& (0+255),b
  7614  00542A  0E00               	movlw	0
  7615  00542C  23B0               	addwfc	(___fltol@f1+1)& (0+255),f,b
  7616  00542E  23B1               	addwfc	(___fltol@f1+2)& (0+255),f,b
  7617  005430  23B2               	addwfc	(___fltol@f1+3)& (0+255),f,b
  7618  005432  D000               	goto	l6440
  7619  005434                     l6440:
  7620                           
  7621                           ; BSR set to: 0
  7622  005434  C0AF  F0AF         	movff	___fltol@f1,?___fltol
  7623  005438  C0B0  F0B0         	movff	___fltol@f1+1,?___fltol+1
  7624  00543C  C0B1  F0B1         	movff	___fltol@f1+2,?___fltol+2
  7625  005440  C0B2  F0B2         	movff	___fltol@f1+3,?___fltol+3
  7626  005444  0012               	return	
  7627                           
  7628                           ; BSR set to: 0
  7629                           
  7630                           ; BSR set to: 0
  7631  005446  0012               	return		;funcret
  7632  005448                     __end_of___fltol:
  7633                           	opt stack 0
  7634                           tblptru	equ	0xFF8
  7635                           tblptrh	equ	0xFF7
  7636                           tblptrl	equ	0xFF6
  7637                           tablat	equ	0xFF5
  7638                           prodh	equ	0xFF4
  7639                           prodl	equ	0xFF3
  7640                           postinc0	equ	0xFEE
  7641                           wreg	equ	0xFE8
  7642                           indf2	equ	0xFDF
  7643                           postinc2	equ	0xFDE
  7644                           postdec2	equ	0xFDD
  7645                           fsr2h	equ	0xFDA
  7646                           fsr2l	equ	0xFD9
  7647                           status	equ	0xFD8
  7648                           
  7649 ;; *************** function ___flge *****************
  7650 ;; Defined at:
  7651 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;  ff1             4   83[BANK0 ] long 
  7654 ;;  ff2             4   87[BANK0 ] long 
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;		None
  7657 ;; Return value:  Size  Location     Type
  7658 ;;		None               void
  7659 ;; Registers used:
  7660 ;;		wreg, status,2, status,0
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7666 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7668 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7669 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;Total ram usage:       12 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    5
  7673 ;; This function calls:
  7674 ;;		Nothing
  7675 ;; This function is called by:
  7676 ;;		_parallelo
  7677 ;;		_asin
  7678 ;;		_atan
  7679 ;;		_cos
  7680 ;;		_sin
  7681 ;;		_sqrt
  7682 ;;		_floor
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	text21
  7687  005670                     __ptext21:
  7688                           	opt stack 0
  7689  005670                     ___flge:
  7690                           	opt stack 22
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;incstack = 0
  7694  005670  0100               	movlb	0	; () banked
  7695  005672  AFB6               	btfss	(___flge@ff1+3)& (0+255),7,b
  7696  005674  D027               	goto	l6390
  7697                           
  7698                           ; BSR set to: 0
  7699  005676  C0B3  F0BB         	movff	___flge@ff1,??___flge
  7700  00567A  C0B4  F0BC         	movff	___flge@ff1+1,??___flge+1
  7701  00567E  C0B5  F0BD         	movff	___flge@ff1+2,??___flge+2
  7702  005682  C0B6  F0BE         	movff	___flge@ff1+3,??___flge+3
  7703  005686  0100               	movlb	0	; () banked
  7704  005688  1FBB               	comf	??___flge& (0+255),f,b
  7705  00568A  1FBC               	comf	(??___flge+1)& (0+255),f,b
  7706  00568C  1FBD               	comf	(??___flge+2)& (0+255),f,b
  7707  00568E  1FBE               	comf	(??___flge+3)& (0+255),f,b
  7708  005690  2BBB               	incf	??___flge& (0+255),f,b
  7709  005692  0E00               	movlw	0
  7710  005694  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  7711  005696  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  7712  005698  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  7713  00569A  0E00               	movlw	0
  7714  00569C  0100               	movlb	0	; () banked
  7715  00569E  25BB               	addwf	??___flge& (0+255),w,b
  7716  0056A0  0100               	movlb	0	; () banked
  7717  0056A2  6FB3               	movwf	___flge@ff1& (0+255),b
  7718  0056A4  0E00               	movlw	0
  7719  0056A6  0100               	movlb	0	; () banked
  7720  0056A8  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  7721  0056AA  0100               	movlb	0	; () banked
  7722  0056AC  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  7723  0056AE  0E00               	movlw	0
  7724  0056B0  0100               	movlb	0	; () banked
  7725  0056B2  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  7726  0056B4  0100               	movlb	0	; () banked
  7727  0056B6  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  7728  0056B8  0E80               	movlw	128
  7729  0056BA  0100               	movlb	0	; () banked
  7730  0056BC  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  7731  0056BE  0100               	movlb	0	; () banked
  7732  0056C0  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  7733  0056C2  D000               	goto	l6390
  7734  0056C4                     l6390:
  7735                           
  7736                           ; BSR set to: 0
  7737  0056C4  0100               	movlb	0	; () banked
  7738  0056C6  AFBA               	btfss	(___flge@ff2+3)& (0+255),7,b
  7739  0056C8  D026               	goto	l1184
  7740                           
  7741                           ; BSR set to: 0
  7742  0056CA  C0B7  F0BB         	movff	___flge@ff2,??___flge
  7743  0056CE  C0B8  F0BC         	movff	___flge@ff2+1,??___flge+1
  7744  0056D2  C0B9  F0BD         	movff	___flge@ff2+2,??___flge+2
  7745  0056D6  C0BA  F0BE         	movff	___flge@ff2+3,??___flge+3
  7746  0056DA  0100               	movlb	0	; () banked
  7747  0056DC  1FBB               	comf	??___flge& (0+255),f,b
  7748  0056DE  1FBC               	comf	(??___flge+1)& (0+255),f,b
  7749  0056E0  1FBD               	comf	(??___flge+2)& (0+255),f,b
  7750  0056E2  1FBE               	comf	(??___flge+3)& (0+255),f,b
  7751  0056E4  2BBB               	incf	??___flge& (0+255),f,b
  7752  0056E6  0E00               	movlw	0
  7753  0056E8  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  7754  0056EA  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  7755  0056EC  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  7756  0056EE  0E00               	movlw	0
  7757  0056F0  0100               	movlb	0	; () banked
  7758  0056F2  25BB               	addwf	??___flge& (0+255),w,b
  7759  0056F4  0100               	movlb	0	; () banked
  7760  0056F6  6FB7               	movwf	___flge@ff2& (0+255),b
  7761  0056F8  0E00               	movlw	0
  7762  0056FA  0100               	movlb	0	; () banked
  7763  0056FC  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  7764  0056FE  0100               	movlb	0	; () banked
  7765  005700  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  7766  005702  0E00               	movlw	0
  7767  005704  0100               	movlb	0	; () banked
  7768  005706  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  7769  005708  0100               	movlb	0	; () banked
  7770  00570A  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  7771  00570C  0E80               	movlw	128
  7772  00570E  0100               	movlb	0	; () banked
  7773  005710  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  7774  005712  0100               	movlb	0	; () banked
  7775  005714  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  7776  005716                     l1184:
  7777                           
  7778                           ; BSR set to: 0
  7779  005716  0E00               	movlw	0
  7780  005718  0100               	movlb	0	; () banked
  7781  00571A  1BB3               	xorwf	___flge@ff1& (0+255),f,b
  7782  00571C  0E00               	movlw	0
  7783  00571E  1BB4               	xorwf	(___flge@ff1+1)& (0+255),f,b
  7784  005720  0E00               	movlw	0
  7785  005722  1BB5               	xorwf	(___flge@ff1+2)& (0+255),f,b
  7786  005724  0E80               	movlw	128
  7787  005726  1BB6               	xorwf	(___flge@ff1+3)& (0+255),f,b
  7788  005728  0E00               	movlw	0
  7789  00572A  0100               	movlb	0	; () banked
  7790  00572C  1BB7               	xorwf	___flge@ff2& (0+255),f,b
  7791  00572E  0E00               	movlw	0
  7792  005730  1BB8               	xorwf	(___flge@ff2+1)& (0+255),f,b
  7793  005732  0E00               	movlw	0
  7794  005734  1BB9               	xorwf	(___flge@ff2+2)& (0+255),f,b
  7795  005736  0E80               	movlw	128
  7796  005738  1BBA               	xorwf	(___flge@ff2+3)& (0+255),f,b
  7797  00573A  0100               	movlb	0	; () banked
  7798  00573C  51B7               	movf	___flge@ff2& (0+255),w,b
  7799  00573E  0100               	movlb	0	; () banked
  7800  005740  5DB3               	subwf	___flge@ff1& (0+255),w,b
  7801  005742  0100               	movlb	0	; () banked
  7802  005744  51B8               	movf	(___flge@ff2+1)& (0+255),w,b
  7803  005746  0100               	movlb	0	; () banked
  7804  005748  59B4               	subwfb	(___flge@ff1+1)& (0+255),w,b
  7805  00574A  0100               	movlb	0	; () banked
  7806  00574C  51B9               	movf	(___flge@ff2+2)& (0+255),w,b
  7807  00574E  0100               	movlb	0	; () banked
  7808  005750  59B5               	subwfb	(___flge@ff1+2)& (0+255),w,b
  7809  005752  0100               	movlb	0	; () banked
  7810  005754  51BA               	movf	(___flge@ff2+3)& (0+255),w,b
  7811  005756  0100               	movlb	0	; () banked
  7812  005758  59B6               	subwfb	(___flge@ff1+3)& (0+255),w,b
  7813  00575A  B0D8               	btfsc	status,0,c
  7814  00575C  D002               	goto	l6396
  7815                           
  7816                           ; BSR set to: 0
  7817  00575E  90D8               	bcf	status,0,c
  7818  005760  0012               	return	
  7819  005762                     l6396:
  7820                           
  7821                           ; BSR set to: 0
  7822  005762  80D8               	bsf	status,0,c
  7823                           
  7824                           ; BSR set to: 0
  7825  005764  0012               	return	
  7826                           
  7827                           ; BSR set to: 0
  7828                           
  7829                           ; BSR set to: 0
  7830  005766  0012               	return		;funcret
  7831  005768                     __end_of___flge:
  7832                           	opt stack 0
  7833                           tblptru	equ	0xFF8
  7834                           tblptrh	equ	0xFF7
  7835                           tblptrl	equ	0xFF6
  7836                           tablat	equ	0xFF5
  7837                           prodh	equ	0xFF4
  7838                           prodl	equ	0xFF3
  7839                           postinc0	equ	0xFEE
  7840                           wreg	equ	0xFE8
  7841                           indf2	equ	0xFDF
  7842                           postinc2	equ	0xFDE
  7843                           postdec2	equ	0xFDD
  7844                           fsr2h	equ	0xFDA
  7845                           fsr2l	equ	0xFD9
  7846                           status	equ	0xFD8
  7847                           
  7848 ;; *************** function ___altofl *****************
  7849 ;; Defined at:
  7850 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  7851 ;; Parameters:    Size  Location     Type
  7852 ;;  c               4   89[BANK0 ] long 
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;  sign            1   93[BANK0 ] unsigned char 
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  4   89[BANK0 ] unsigned char 
  7857 ;; Registers used:
  7858 ;;		wreg, status,2, status,0, cstack
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7864 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;Total ram usage:        5 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; Hardware stack levels required when called:    6
  7871 ;; This function calls:
  7872 ;;		___flpack
  7873 ;; This function is called by:
  7874 ;;		_floor
  7875 ;; This function uses a non-reentrant model
  7876 ;;
  7877                           
  7878                           	psect	text22
  7879  005CF6                     __ptext22:
  7880                           	opt stack 0
  7881  005CF6                     ___altofl:
  7882                           	opt stack 20
  7883                           
  7884                           ; BSR set to: 0
  7885                           ;incstack = 0
  7886  005CF6  0E00               	movlw	0
  7887  005CF8  0100               	movlb	0	; () banked
  7888  005CFA  6FBD               	movwf	___altofl@sign& (0+255),b
  7889                           
  7890                           ; BSR set to: 0
  7891  005CFC  0100               	movlb	0	; () banked
  7892  005CFE  AFBC               	btfss	(___altofl@c+3)& (0+255),7,b
  7893  005D00  D00D               	goto	l6322
  7894                           
  7895                           ; BSR set to: 0
  7896  005D02  0100               	movlb	0	; () banked
  7897  005D04  1FBC               	comf	(___altofl@c+3)& (0+255),f,b
  7898  005D06  1FBB               	comf	(___altofl@c+2)& (0+255),f,b
  7899  005D08  1FBA               	comf	(___altofl@c+1)& (0+255),f,b
  7900  005D0A  6DB9               	negf	___altofl@c& (0+255),b
  7901  005D0C  0E00               	movlw	0
  7902  005D0E  23BA               	addwfc	(___altofl@c+1)& (0+255),f,b
  7903  005D10  23BB               	addwfc	(___altofl@c+2)& (0+255),f,b
  7904  005D12  23BC               	addwfc	(___altofl@c+3)& (0+255),f,b
  7905                           
  7906                           ; BSR set to: 0
  7907  005D14  0E01               	movlw	1
  7908  005D16  0100               	movlb	0	; () banked
  7909  005D18  6FBD               	movwf	___altofl@sign& (0+255),b
  7910  005D1A  D000               	goto	l6322
  7911  005D1C                     l6322:
  7912                           
  7913                           ; BSR set to: 0
  7914  005D1C  C0B9  F077         	movff	___altofl@c,___flpack@arg
  7915  005D20  C0BA  F078         	movff	___altofl@c+1,___flpack@arg+1
  7916  005D24  C0BB  F079         	movff	___altofl@c+2,___flpack@arg+2
  7917  005D28  C0BC  F07A         	movff	___altofl@c+3,___flpack@arg+3
  7918  005D2C  0E96               	movlw	150
  7919  005D2E  0100               	movlb	0	; () banked
  7920  005D30  6F7B               	movwf	___flpack@exp& (0+255),b
  7921  005D32  C0BD  F07C         	movff	___altofl@sign,___flpack@sign
  7922  005D36  ECF9  F026         	call	___flpack	;wreg free
  7923  005D3A  C077  F0B9         	movff	?___flpack,?___altofl
  7924  005D3E  C078  F0BA         	movff	?___flpack+1,?___altofl+1
  7925  005D42  C079  F0BB         	movff	?___flpack+2,?___altofl+2
  7926  005D46  C07A  F0BC         	movff	?___flpack+3,?___altofl+3
  7927  005D4A  0012               	return	
  7928  005D4C  0012               	return		;funcret
  7929  005D4E                     __end_of___altofl:
  7930                           	opt stack 0
  7931                           tblptru	equ	0xFF8
  7932                           tblptrh	equ	0xFF7
  7933                           tblptrl	equ	0xFF6
  7934                           tablat	equ	0xFF5
  7935                           prodh	equ	0xFF4
  7936                           prodl	equ	0xFF3
  7937                           postinc0	equ	0xFEE
  7938                           wreg	equ	0xFE8
  7939                           indf2	equ	0xFDF
  7940                           postinc2	equ	0xFDE
  7941                           postdec2	equ	0xFDD
  7942                           fsr2h	equ	0xFDA
  7943                           fsr2l	equ	0xFD9
  7944                           status	equ	0xFD8
  7945                           
  7946 ;; *************** function _eval_poly *****************
  7947 ;; Defined at:
  7948 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;  x               4   75[BANK0 ] unsigned char 
  7951 ;;  d               2   79[BANK0 ] PTR const 
  7952 ;;		 -> sin@coeff_a(20), sin@coeff_b(16), atan@coeff_a(24), atan@coeff_b(20), 
  7953 ;;  n               2   81[BANK0 ] int 
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;  res             4   87[BANK0 ] int 
  7956 ;; Return value:  Size  Location     Type
  7957 ;;                  4   75[BANK0 ] int 
  7958 ;; Registers used:
  7959 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7960 ;; Tracked objects:
  7961 ;;		On entry : 0/0
  7962 ;;		On exit  : 0/0
  7963 ;;		Unchanged: 0/0
  7964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7965 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7966 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7969 ;;Total ram usage:       16 bytes
  7970 ;; Hardware stack levels used:    1
  7971 ;; Hardware stack levels required when called:    7
  7972 ;; This function calls:
  7973 ;;		___fladd
  7974 ;;		___flmul
  7975 ;; This function is called by:
  7976 ;;		_atan
  7977 ;;		_sin
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           	psect	text23
  7982  005448                     __ptext23:
  7983                           	opt stack 0
  7984  005448                     _eval_poly:
  7985                           	opt stack 19
  7986                           
  7987                           ;incstack = 0
  7988  005448  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  7989  00544C  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  7990  005450  0100               	movlb	0	; () banked
  7991  005452  90D8               	bcf	status,0,c
  7992  005454  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7993  005456  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7994  005458  0100               	movlb	0	; () banked
  7995  00545A  90D8               	bcf	status,0,c
  7996  00545C  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7997  00545E  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7998  005460  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  7999  005464  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  8000  005468  0100               	movlb	0	; () banked
  8001  00546A  51B3               	movf	??_eval_poly& (0+255),w,b
  8002  00546C  0100               	movlb	0	; () banked
  8003  00546E  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  8004  005470  0100               	movlb	0	; () banked
  8005  005472  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  8006  005474  0100               	movlb	0	; () banked
  8007  005476  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  8008  005478  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  8009  00547C  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  8010  005480                     	if	0	;tblptru may be non-zero
  8011  005480                     	endif
  8012  005480                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8013  005480  0E00               	movlw	low (__mediumconst shr (0+16))
  8014  005482  6EF8               	movwf	tblptru,c
  8015  005484                     	endif
  8016  005484  0009               	tblrd		*+
  8017  005486  CFF5 F0B7          	movff	tablat,eval_poly@res
  8018  00548A  0009               	tblrd		*+
  8019  00548C  CFF5 F0B8          	movff	tablat,eval_poly@res+1
  8020  005490  0009               	tblrd		*+
  8021  005492  CFF5 F0B9          	movff	tablat,eval_poly@res+2
  8022  005496  000A               	tblrd		*-
  8023  005498  CFF5 F0BA          	movff	tablat,eval_poly@res+3
  8024  00549C  D053               	goto	l6384
  8025  00549E                     l6382:
  8026                           
  8027                           ; BSR set to: 0
  8028  00549E  C0B7  F085         	movff	eval_poly@res,___flmul@f2
  8029  0054A2  C0B8  F086         	movff	eval_poly@res+1,___flmul@f2+1
  8030  0054A6  C0B9  F087         	movff	eval_poly@res+2,___flmul@f2+2
  8031  0054AA  C0BA  F088         	movff	eval_poly@res+3,___flmul@f2+3
  8032  0054AE  C0AB  F081         	movff	eval_poly@x,___flmul@f1
  8033  0054B2  C0AC  F082         	movff	eval_poly@x+1,___flmul@f1+1
  8034  0054B6  C0AD  F083         	movff	eval_poly@x+2,___flmul@f1+2
  8035  0054BA  C0AE  F084         	movff	eval_poly@x+3,___flmul@f1+3
  8036  0054BE  ECB9  F027         	call	___flmul	;wreg free
  8037  0054C2  C081  F09F         	movff	?___flmul,___fladd@f1
  8038  0054C6  C082  F0A0         	movff	?___flmul+1,___fladd@f1+1
  8039  0054CA  C083  F0A1         	movff	?___flmul+2,___fladd@f1+2
  8040  0054CE  C084  F0A2         	movff	?___flmul+3,___fladd@f1+3
  8041  0054D2  0100               	movlb	0	; () banked
  8042  0054D4  07B1               	decf	eval_poly@n& (0+255),f,b
  8043  0054D6  A0D8               	btfss	status,0,c
  8044  0054D8  07B2               	decf	(eval_poly@n+1)& (0+255),f,b
  8045  0054DA  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  8046  0054DE  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  8047  0054E2  0100               	movlb	0	; () banked
  8048  0054E4  90D8               	bcf	status,0,c
  8049  0054E6  37B3               	rlcf	??_eval_poly& (0+255),f,b
  8050  0054E8  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  8051  0054EA  0100               	movlb	0	; () banked
  8052  0054EC  90D8               	bcf	status,0,c
  8053  0054EE  37B3               	rlcf	??_eval_poly& (0+255),f,b
  8054  0054F0  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  8055  0054F2  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  8056  0054F6  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  8057  0054FA  0100               	movlb	0	; () banked
  8058  0054FC  51B3               	movf	??_eval_poly& (0+255),w,b
  8059  0054FE  0100               	movlb	0	; () banked
  8060  005500  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  8061  005502  0100               	movlb	0	; () banked
  8062  005504  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  8063  005506  0100               	movlb	0	; () banked
  8064  005508  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  8065  00550A  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  8066  00550E  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  8067  005512                     	if	0	;tblptru may be non-zero
  8068  005512                     	endif
  8069  005512                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8070  005512  0E00               	movlw	low (__mediumconst shr (0+16))
  8071  005514  6EF8               	movwf	tblptru,c
  8072  005516                     	endif
  8073  005516  0009               	tblrd		*+
  8074  005518  CFF5 F0A3          	movff	tablat,___fladd@f2
  8075  00551C  0009               	tblrd		*+
  8076  00551E  CFF5 F0A4          	movff	tablat,___fladd@f2+1
  8077  005522  0009               	tblrd		*+
  8078  005524  CFF5 F0A5          	movff	tablat,___fladd@f2+2
  8079  005528  000A               	tblrd		*-
  8080  00552A  CFF5 F0A6          	movff	tablat,___fladd@f2+3
  8081  00552E  EC93  F020         	call	___fladd	;wreg free
  8082  005532  C09F  F0B7         	movff	?___fladd,eval_poly@res
  8083  005536  C0A0  F0B8         	movff	?___fladd+1,eval_poly@res+1
  8084  00553A  C0A1  F0B9         	movff	?___fladd+2,eval_poly@res+2
  8085  00553E  C0A2  F0BA         	movff	?___fladd+3,eval_poly@res+3
  8086  005542  D000               	goto	l6384
  8087  005544                     l6384:
  8088  005544  0100               	movlb	0	; () banked
  8089  005546  51B1               	movf	eval_poly@n& (0+255),w,b
  8090  005548  0100               	movlb	0	; () banked
  8091  00554A  11B2               	iorwf	(eval_poly@n+1)& (0+255),w,b
  8092  00554C  A4D8               	btfss	status,2,c
  8093  00554E  D7A7               	goto	l6382
  8094                           
  8095                           ; BSR set to: 0
  8096  005550  C0B7  F0AB         	movff	eval_poly@res,?_eval_poly
  8097  005554  C0B8  F0AC         	movff	eval_poly@res+1,?_eval_poly+1
  8098  005558  C0B9  F0AD         	movff	eval_poly@res+2,?_eval_poly+2
  8099  00555C  C0BA  F0AE         	movff	eval_poly@res+3,?_eval_poly+3
  8100                           
  8101                           ; BSR set to: 0
  8102  005560  0012               	return		;funcret
  8103  005562                     __end_of_eval_poly:
  8104                           	opt stack 0
  8105                           tblptru	equ	0xFF8
  8106                           tblptrh	equ	0xFF7
  8107                           tblptrl	equ	0xFF6
  8108                           tablat	equ	0xFF5
  8109                           prodh	equ	0xFF4
  8110                           prodl	equ	0xFF3
  8111                           postinc0	equ	0xFEE
  8112                           wreg	equ	0xFE8
  8113                           indf2	equ	0xFDF
  8114                           postinc2	equ	0xFDE
  8115                           postdec2	equ	0xFDD
  8116                           fsr2h	equ	0xFDA
  8117                           fsr2l	equ	0xFD9
  8118                           status	equ	0xFD8
  8119                           
  8120 ;; *************** function ___flmul *****************
  8121 ;; Defined at:
  8122 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  8123 ;; Parameters:    Size  Location     Type
  8124 ;;  f1              4   33[BANK0 ] int 
  8125 ;;  f2              4   37[BANK0 ] int 
  8126 ;; Auto vars:     Size  Location     Type
  8127 ;;  f3_as_produc    4   42[BANK0 ] unsigned long 
  8128 ;;  sign            1   47[BANK0 ] unsigned char 
  8129 ;;  cntr            1   46[BANK0 ] unsigned char 
  8130 ;;  exp             1   41[BANK0 ] unsigned char 
  8131 ;; Return value:  Size  Location     Type
  8132 ;;                  4   33[BANK0 ] unsigned char 
  8133 ;; Registers used:
  8134 ;;		wreg, status,2, status,0, cstack
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8140 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8141 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;Total ram usage:       15 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    6
  8147 ;; This function calls:
  8148 ;;		___flpack
  8149 ;; This function is called by:
  8150 ;;		_park_routine
  8151 ;;		_parallelo
  8152 ;;		_asin
  8153 ;;		_atan
  8154 ;;		_eval_poly
  8155 ;;		_sin
  8156 ;;		_sqrt
  8157 ;;		_matematica
  8158 ;; This function uses a non-reentrant model
  8159 ;;
  8160                           
  8161                           	psect	text24
  8162  004F72                     __ptext24:
  8163                           	opt stack 0
  8164  004F72                     ___flmul:
  8165                           	opt stack 21
  8166                           
  8167                           ; BSR set to: 0
  8168                           ;incstack = 0
  8169  004F72  0100               	movlb	0	; () banked
  8170  004F74  3583               	rlcf	(___flmul@f1+2)& (0+255),w,b
  8171  004F76  3584               	rlcf	(___flmul@f1+3)& (0+255),w,b
  8172  004F78  0100               	movlb	0	; () banked
  8173  004F7A  6F89               	movwf	___flmul@exp& (0+255),b
  8174  004F7C  0100               	movlb	0	; () banked
  8175  004F7E  5189               	movf	___flmul@exp& (0+255),w,b
  8176  004F80  A4D8               	btfss	status,2,c
  8177  004F82  D00A               	goto	l6262
  8178                           
  8179                           ; BSR set to: 0
  8180  004F84  0E00               	movlw	0
  8181  004F86  0100               	movlb	0	; () banked
  8182  004F88  6F81               	movwf	?___flmul& (0+255),b
  8183  004F8A  0E00               	movlw	0
  8184  004F8C  6F82               	movwf	(?___flmul+1)& (0+255),b
  8185  004F8E  0E00               	movlw	0
  8186  004F90  6F83               	movwf	(?___flmul+2)& (0+255),b
  8187  004F92  0E00               	movlw	0
  8188  004F94  6F84               	movwf	(?___flmul+3)& (0+255),b
  8189                           
  8190                           ; BSR set to: 0
  8191  004F96  0012               	return	
  8192  004F98                     l6262:
  8193                           
  8194                           ; BSR set to: 0
  8195  004F98  0100               	movlb	0	; () banked
  8196  004F9A  3587               	rlcf	(___flmul@f2+2)& (0+255),w,b
  8197  004F9C  3588               	rlcf	(___flmul@f2+3)& (0+255),w,b
  8198  004F9E  0100               	movlb	0	; () banked
  8199  004FA0  6F8F               	movwf	___flmul@sign& (0+255),b
  8200  004FA2  0100               	movlb	0	; () banked
  8201  004FA4  518F               	movf	___flmul@sign& (0+255),w,b
  8202  004FA6  A4D8               	btfss	status,2,c
  8203  004FA8  D00A               	goto	l6268
  8204                           
  8205                           ; BSR set to: 0
  8206  004FAA  0E00               	movlw	0
  8207  004FAC  0100               	movlb	0	; () banked
  8208  004FAE  6F81               	movwf	?___flmul& (0+255),b
  8209  004FB0  0E00               	movlw	0
  8210  004FB2  6F82               	movwf	(?___flmul+1)& (0+255),b
  8211  004FB4  0E00               	movlw	0
  8212  004FB6  6F83               	movwf	(?___flmul+2)& (0+255),b
  8213  004FB8  0E00               	movlw	0
  8214  004FBA  6F84               	movwf	(?___flmul+3)& (0+255),b
  8215                           
  8216                           ; BSR set to: 0
  8217  004FBC  0012               	return	
  8218  004FBE                     l6268:
  8219                           
  8220                           ; BSR set to: 0
  8221  004FBE  0100               	movlb	0	; () banked
  8222  004FC0  518F               	movf	___flmul@sign& (0+255),w,b
  8223  004FC2  0F7B               	addlw	123
  8224  004FC4  0100               	movlb	0	; () banked
  8225  004FC6  2789               	addwf	___flmul@exp& (0+255),f,b
  8226                           
  8227                           ; BSR set to: 0
  8228  004FC8  C084  F08F         	movff	___flmul@f1+3,___flmul@sign
  8229  004FCC  0100               	movlb	0	; () banked
  8230  004FCE  5188               	movf	(___flmul@f2+3)& (0+255),w,b
  8231  004FD0  0100               	movlb	0	; () banked
  8232  004FD2  1B8F               	xorwf	___flmul@sign& (0+255),f,b
  8233  004FD4  0E80               	movlw	128
  8234  004FD6  0100               	movlb	0	; () banked
  8235  004FD8  178F               	andwf	___flmul@sign& (0+255),f,b
  8236                           
  8237                           ; BSR set to: 0
  8238  004FDA  0100               	movlb	0	; () banked
  8239  004FDC  8F83               	bsf	(___flmul@f1+2)& (0+255),7,b
  8240                           
  8241                           ; BSR set to: 0
  8242  004FDE  0100               	movlb	0	; () banked
  8243  004FE0  8F87               	bsf	(___flmul@f2+2)& (0+255),7,b
  8244  004FE2  0EFF               	movlw	255
  8245  004FE4  0100               	movlb	0	; () banked
  8246  004FE6  1785               	andwf	___flmul@f2& (0+255),f,b
  8247  004FE8  0EFF               	movlw	255
  8248  004FEA  1786               	andwf	(___flmul@f2+1)& (0+255),f,b
  8249  004FEC  0EFF               	movlw	255
  8250  004FEE  1787               	andwf	(___flmul@f2+2)& (0+255),f,b
  8251  004FF0  0E00               	movlw	0
  8252  004FF2  1788               	andwf	(___flmul@f2+3)& (0+255),f,b
  8253                           
  8254                           ; BSR set to: 0
  8255  004FF4  0E00               	movlw	0
  8256  004FF6  0100               	movlb	0	; () banked
  8257  004FF8  6F8A               	movwf	___flmul@f3_as_product& (0+255),b
  8258  004FFA  0E00               	movlw	0
  8259  004FFC  6F8B               	movwf	(___flmul@f3_as_product+1)& (0+255),b
  8260  004FFE  0E00               	movlw	0
  8261  005000  6F8C               	movwf	(___flmul@f3_as_product+2)& (0+255),b
  8262  005002  0E00               	movlw	0
  8263  005004  6F8D               	movwf	(___flmul@f3_as_product+3)& (0+255),b
  8264                           
  8265                           ; BSR set to: 0
  8266  005006  0E07               	movlw	7
  8267  005008  0100               	movlb	0	; () banked
  8268  00500A  6F8E               	movwf	___flmul@cntr& (0+255),b
  8269  00500C  D000               	goto	l6280
  8270  00500E                     l6280:
  8271                           
  8272                           ; BSR set to: 0
  8273  00500E  0100               	movlb	0	; () banked
  8274  005010  A181               	btfss	___flmul@f1& (0+255),0,b
  8275  005012  D011               	goto	l6284
  8276                           
  8277                           ; BSR set to: 0
  8278  005014  0100               	movlb	0	; () banked
  8279  005016  5185               	movf	___flmul@f2& (0+255),w,b
  8280  005018  0100               	movlb	0	; () banked
  8281  00501A  278A               	addwf	___flmul@f3_as_product& (0+255),f,b
  8282  00501C  0100               	movlb	0	; () banked
  8283  00501E  5186               	movf	(___flmul@f2+1)& (0+255),w,b
  8284  005020  0100               	movlb	0	; () banked
  8285  005022  238B               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8286  005024  0100               	movlb	0	; () banked
  8287  005026  5187               	movf	(___flmul@f2+2)& (0+255),w,b
  8288  005028  0100               	movlb	0	; () banked
  8289  00502A  238C               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8290  00502C  0100               	movlb	0	; () banked
  8291  00502E  5188               	movf	(___flmul@f2+3)& (0+255),w,b
  8292  005030  0100               	movlb	0	; () banked
  8293  005032  238D               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8294  005034  D000               	goto	l6284
  8295  005036                     l6284:
  8296                           
  8297                           ; BSR set to: 0
  8298  005036  0100               	movlb	0	; () banked
  8299  005038  90D8               	bcf	status,0,c
  8300  00503A  3384               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8301  00503C  3383               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8302  00503E  3382               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8303  005040  3381               	rrcf	___flmul@f1& (0+255),f,b
  8304                           
  8305                           ; BSR set to: 0
  8306  005042  0100               	movlb	0	; () banked
  8307  005044  90D8               	bcf	status,0,c
  8308  005046  3785               	rlcf	___flmul@f2& (0+255),f,b
  8309  005048  3786               	rlcf	(___flmul@f2+1)& (0+255),f,b
  8310  00504A  3787               	rlcf	(___flmul@f2+2)& (0+255),f,b
  8311  00504C  3788               	rlcf	(___flmul@f2+3)& (0+255),f,b
  8312                           
  8313                           ; BSR set to: 0
  8314  00504E  0100               	movlb	0	; () banked
  8315  005050  2F8E               	decfsz	___flmul@cntr& (0+255),f,b
  8316  005052  D7DD               	goto	l6280
  8317  005054  D000               	goto	l6290
  8318  005056                     l6290:
  8319                           
  8320                           ; BSR set to: 0
  8321  005056  0E11               	movlw	17
  8322  005058  0100               	movlb	0	; () banked
  8323  00505A  6F8E               	movwf	___flmul@cntr& (0+255),b
  8324  00505C  D000               	goto	l6292
  8325  00505E                     l6292:
  8326                           
  8327                           ; BSR set to: 0
  8328  00505E  0100               	movlb	0	; () banked
  8329  005060  A181               	btfss	___flmul@f1& (0+255),0,b
  8330  005062  D011               	goto	l6296
  8331                           
  8332                           ; BSR set to: 0
  8333  005064  0100               	movlb	0	; () banked
  8334  005066  5185               	movf	___flmul@f2& (0+255),w,b
  8335  005068  0100               	movlb	0	; () banked
  8336  00506A  278A               	addwf	___flmul@f3_as_product& (0+255),f,b
  8337  00506C  0100               	movlb	0	; () banked
  8338  00506E  5186               	movf	(___flmul@f2+1)& (0+255),w,b
  8339  005070  0100               	movlb	0	; () banked
  8340  005072  238B               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8341  005074  0100               	movlb	0	; () banked
  8342  005076  5187               	movf	(___flmul@f2+2)& (0+255),w,b
  8343  005078  0100               	movlb	0	; () banked
  8344  00507A  238C               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8345  00507C  0100               	movlb	0	; () banked
  8346  00507E  5188               	movf	(___flmul@f2+3)& (0+255),w,b
  8347  005080  0100               	movlb	0	; () banked
  8348  005082  238D               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8349  005084  D000               	goto	l6296
  8350  005086                     l6296:
  8351                           
  8352                           ; BSR set to: 0
  8353  005086  0100               	movlb	0	; () banked
  8354  005088  90D8               	bcf	status,0,c
  8355  00508A  3384               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8356  00508C  3383               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8357  00508E  3382               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8358  005090  3381               	rrcf	___flmul@f1& (0+255),f,b
  8359                           
  8360                           ; BSR set to: 0
  8361  005092  0100               	movlb	0	; () banked
  8362  005094  90D8               	bcf	status,0,c
  8363  005096  338D               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
  8364  005098  338C               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
  8365  00509A  338B               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
  8366  00509C  338A               	rrcf	___flmul@f3_as_product& (0+255),f,b
  8367                           
  8368                           ; BSR set to: 0
  8369  00509E  0100               	movlb	0	; () banked
  8370  0050A0  2F8E               	decfsz	___flmul@cntr& (0+255),f,b
  8371  0050A2  D7DD               	goto	l6292
  8372  0050A4  D000               	goto	l6302
  8373  0050A6                     l6302:
  8374                           
  8375                           ; BSR set to: 0
  8376  0050A6  C08A  F077         	movff	___flmul@f3_as_product,___flpack@arg
  8377  0050AA  C08B  F078         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  8378  0050AE  C08C  F079         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  8379  0050B2  C08D  F07A         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  8380  0050B6  C089  F07B         	movff	___flmul@exp,___flpack@exp
  8381  0050BA  C08F  F07C         	movff	___flmul@sign,___flpack@sign
  8382  0050BE  ECF9  F026         	call	___flpack	;wreg free
  8383  0050C2  C077  F081         	movff	?___flpack,?___flmul
  8384  0050C6  C078  F082         	movff	?___flpack+1,?___flmul+1
  8385  0050CA  C079  F083         	movff	?___flpack+2,?___flmul+2
  8386  0050CE  C07A  F084         	movff	?___flpack+3,?___flmul+3
  8387  0050D2  0012               	return	
  8388  0050D4  0012               	return		;funcret
  8389  0050D6                     __end_of___flmul:
  8390                           	opt stack 0
  8391                           tblptru	equ	0xFF8
  8392                           tblptrh	equ	0xFF7
  8393                           tblptrl	equ	0xFF6
  8394                           tablat	equ	0xFF5
  8395                           prodh	equ	0xFF4
  8396                           prodl	equ	0xFF3
  8397                           postinc0	equ	0xFEE
  8398                           wreg	equ	0xFE8
  8399                           indf2	equ	0xFDF
  8400                           postinc2	equ	0xFDE
  8401                           postdec2	equ	0xFDD
  8402                           fsr2h	equ	0xFDA
  8403                           fsr2l	equ	0xFD9
  8404                           status	equ	0xFD8
  8405                           
  8406 ;; *************** function ___flsub *****************
  8407 ;; Defined at:
  8408 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;  f1              4  105[BANK0 ] unsigned char 
  8411 ;;  f2              4  109[BANK0 ] unsigned char 
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;		None
  8414 ;; Return value:  Size  Location     Type
  8415 ;;                  4  105[BANK0 ] unsigned char 
  8416 ;; Registers used:
  8417 ;;		wreg, status,2, status,0, cstack
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8423 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8426 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;Total ram usage:        8 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; Hardware stack levels required when called:    7
  8430 ;; This function calls:
  8431 ;;		___fladd
  8432 ;; This function is called by:
  8433 ;;		_sin
  8434 ;;		_sqrt
  8435 ;; This function uses a non-reentrant model
  8436 ;;
  8437                           
  8438                           	psect	text25
  8439  005C3E                     __ptext25:
  8440                           	opt stack 0
  8441  005C3E                     ___flsub:
  8442                           	opt stack 20
  8443                           
  8444                           ;incstack = 0
  8445  005C3E  0100               	movlb	0	; () banked
  8446  005C40  51CD               	movf	___flsub@f2& (0+255),w,b
  8447  005C42  0100               	movlb	0	; () banked
  8448  005C44  11CE               	iorwf	(___flsub@f2+1)& (0+255),w,b
  8449  005C46  0100               	movlb	0	; () banked
  8450  005C48  11CF               	iorwf	(___flsub@f2+2)& (0+255),w,b
  8451  005C4A  0100               	movlb	0	; () banked
  8452  005C4C  11D0               	iorwf	(___flsub@f2+3)& (0+255),w,b
  8453  005C4E  B4D8               	btfsc	status,2,c
  8454  005C50  D00A               	goto	l6370
  8455                           
  8456                           ; BSR set to: 0
  8457  005C52  0E00               	movlw	0
  8458  005C54  0100               	movlb	0	; () banked
  8459  005C56  1BCD               	xorwf	___flsub@f2& (0+255),f,b
  8460  005C58  0E00               	movlw	0
  8461  005C5A  1BCE               	xorwf	(___flsub@f2+1)& (0+255),f,b
  8462  005C5C  0E00               	movlw	0
  8463  005C5E  1BCF               	xorwf	(___flsub@f2+2)& (0+255),f,b
  8464  005C60  0E80               	movlw	128
  8465  005C62  1BD0               	xorwf	(___flsub@f2+3)& (0+255),f,b
  8466  005C64  D000               	goto	l6370
  8467  005C66                     l6370:
  8468                           
  8469                           ; BSR set to: 0
  8470  005C66  C0C9  F09F         	movff	___flsub@f1,___fladd@f1
  8471  005C6A  C0CA  F0A0         	movff	___flsub@f1+1,___fladd@f1+1
  8472  005C6E  C0CB  F0A1         	movff	___flsub@f1+2,___fladd@f1+2
  8473  005C72  C0CC  F0A2         	movff	___flsub@f1+3,___fladd@f1+3
  8474  005C76  C0CD  F0A3         	movff	___flsub@f2,___fladd@f2
  8475  005C7A  C0CE  F0A4         	movff	___flsub@f2+1,___fladd@f2+1
  8476  005C7E  C0CF  F0A5         	movff	___flsub@f2+2,___fladd@f2+2
  8477  005C82  C0D0  F0A6         	movff	___flsub@f2+3,___fladd@f2+3
  8478  005C86  EC93  F020         	call	___fladd	;wreg free
  8479  005C8A  C09F  F0C9         	movff	?___fladd,?___flsub
  8480  005C8E  C0A0  F0CA         	movff	?___fladd+1,?___flsub+1
  8481  005C92  C0A1  F0CB         	movff	?___fladd+2,?___flsub+2
  8482  005C96  C0A2  F0CC         	movff	?___fladd+3,?___flsub+3
  8483  005C9A  0012               	return	
  8484  005C9C  0012               	return		;funcret
  8485  005C9E                     __end_of___flsub:
  8486                           	opt stack 0
  8487                           tblptru	equ	0xFF8
  8488                           tblptrh	equ	0xFF7
  8489                           tblptrl	equ	0xFF6
  8490                           tablat	equ	0xFF5
  8491                           prodh	equ	0xFF4
  8492                           prodl	equ	0xFF3
  8493                           postinc0	equ	0xFEE
  8494                           wreg	equ	0xFE8
  8495                           indf2	equ	0xFDF
  8496                           postinc2	equ	0xFDE
  8497                           postdec2	equ	0xFDD
  8498                           fsr2h	equ	0xFDA
  8499                           fsr2l	equ	0xFD9
  8500                           status	equ	0xFD8
  8501                           
  8502 ;; *************** function ___fladd *****************
  8503 ;; Defined at:
  8504 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  8505 ;; Parameters:    Size  Location     Type
  8506 ;;  f1              4   63[BANK0 ] unsigned char 
  8507 ;;  f2              4   67[BANK0 ] unsigned char 
  8508 ;; Auto vars:     Size  Location     Type
  8509 ;;  exp1            1   74[BANK0 ] unsigned char 
  8510 ;;  exp2            1   73[BANK0 ] unsigned char 
  8511 ;;  sign            1   72[BANK0 ] unsigned char 
  8512 ;; Return value:  Size  Location     Type
  8513 ;;                  4   63[BANK0 ] unsigned char 
  8514 ;; Registers used:
  8515 ;;		wreg, status,2, status,0, cstack
  8516 ;; Tracked objects:
  8517 ;;		On entry : 0/0
  8518 ;;		On exit  : 0/0
  8519 ;;		Unchanged: 0/0
  8520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8521 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;Total ram usage:       12 bytes
  8526 ;; Hardware stack levels used:    1
  8527 ;; Hardware stack levels required when called:    6
  8528 ;; This function calls:
  8529 ;;		___flpack
  8530 ;; This function is called by:
  8531 ;;		_park_routine
  8532 ;;		_parallelo
  8533 ;;		_asin
  8534 ;;		_atan
  8535 ;;		_cos
  8536 ;;		_eval_poly
  8537 ;;		___flsub
  8538 ;;		_sin
  8539 ;;		_floor
  8540 ;;		_matematica
  8541 ;; This function uses a non-reentrant model
  8542 ;;
  8543                           
  8544                           	psect	text26
  8545  004126                     __ptext26:
  8546                           	opt stack 0
  8547  004126                     ___fladd:
  8548                           	opt stack 20
  8549                           
  8550                           ;incstack = 0
  8551  004126  0100               	movlb	0	; () banked
  8552  004128  35A1               	rlcf	(___fladd@f1+2)& (0+255),w,b
  8553  00412A  35A2               	rlcf	(___fladd@f1+3)& (0+255),w,b
  8554  00412C  0100               	movlb	0	; () banked
  8555  00412E  6FAA               	movwf	___fladd@exp1& (0+255),b
  8556  004130  0100               	movlb	0	; () banked
  8557  004132  35A5               	rlcf	(___fladd@f2+2)& (0+255),w,b
  8558  004134  35A6               	rlcf	(___fladd@f2+3)& (0+255),w,b
  8559  004136  0100               	movlb	0	; () banked
  8560  004138  6FA9               	movwf	___fladd@exp2& (0+255),b
  8561  00413A  0100               	movlb	0	; () banked
  8562  00413C  51AA               	movf	___fladd@exp1& (0+255),w,b
  8563  00413E  0100               	movlb	0	; () banked
  8564  004140  B4D8               	btfsc	status,2,c
  8565  004142  D011               	goto	l1144
  8566                           
  8567                           ; BSR set to: 0
  8568  004144  0100               	movlb	0	; () banked
  8569  004146  51A9               	movf	___fladd@exp2& (0+255),w,b
  8570  004148  0100               	movlb	0	; () banked
  8571  00414A  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  8572  00414C  B0D8               	btfsc	status,0,c
  8573  00414E  D014               	goto	l6194
  8574                           
  8575                           ; BSR set to: 0
  8576  004150  0100               	movlb	0	; () banked
  8577  004152  51AA               	movf	___fladd@exp1& (0+255),w,b
  8578  004154  0800               	sublw	0
  8579  004156  0100               	movlb	0	; () banked
  8580  004158  25A9               	addwf	___fladd@exp2& (0+255),w,b
  8581  00415A  0100               	movlb	0	; () banked
  8582  00415C  6FA7               	movwf	??___fladd& (0+255),b
  8583  00415E  0E20               	movlw	32
  8584  004160  0100               	movlb	0	; () banked
  8585  004162  65A7               	cpfsgt	??___fladd& (0+255),b
  8586  004164  D009               	goto	l6194
  8587  004166                     l1144:
  8588                           
  8589                           ; BSR set to: 0
  8590  004166  C0A3  F09F         	movff	___fladd@f2,?___fladd
  8591  00416A  C0A4  F0A0         	movff	___fladd@f2+1,?___fladd+1
  8592  00416E  C0A5  F0A1         	movff	___fladd@f2+2,?___fladd+2
  8593  004172  C0A6  F0A2         	movff	___fladd@f2+3,?___fladd+3
  8594  004176  0012               	return	
  8595  004178                     l6194:
  8596                           
  8597                           ; BSR set to: 0
  8598  004178  0100               	movlb	0	; () banked
  8599  00417A  51A9               	movf	___fladd@exp2& (0+255),w,b
  8600  00417C  0100               	movlb	0	; () banked
  8601  00417E  B4D8               	btfsc	status,2,c
  8602  004180  D011               	goto	l1148
  8603                           
  8604                           ; BSR set to: 0
  8605  004182  0100               	movlb	0	; () banked
  8606  004184  51AA               	movf	___fladd@exp1& (0+255),w,b
  8607  004186  0100               	movlb	0	; () banked
  8608  004188  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  8609  00418A  B0D8               	btfsc	status,0,c
  8610  00418C  D014               	goto	l6200
  8611                           
  8612                           ; BSR set to: 0
  8613  00418E  0100               	movlb	0	; () banked
  8614  004190  51A9               	movf	___fladd@exp2& (0+255),w,b
  8615  004192  0800               	sublw	0
  8616  004194  0100               	movlb	0	; () banked
  8617  004196  25AA               	addwf	___fladd@exp1& (0+255),w,b
  8618  004198  0100               	movlb	0	; () banked
  8619  00419A  6FA7               	movwf	??___fladd& (0+255),b
  8620  00419C  0E20               	movlw	32
  8621  00419E  0100               	movlb	0	; () banked
  8622  0041A0  65A7               	cpfsgt	??___fladd& (0+255),b
  8623  0041A2  D009               	goto	l6200
  8624  0041A4                     l1148:
  8625                           
  8626                           ; BSR set to: 0
  8627  0041A4  C09F  F09F         	movff	___fladd@f1,?___fladd
  8628  0041A8  C0A0  F0A0         	movff	___fladd@f1+1,?___fladd+1
  8629  0041AC  C0A1  F0A1         	movff	___fladd@f1+2,?___fladd+2
  8630  0041B0  C0A2  F0A2         	movff	___fladd@f1+3,?___fladd+3
  8631  0041B4  0012               	return	
  8632  0041B6                     l6200:
  8633                           
  8634                           ; BSR set to: 0
  8635  0041B6  0E06               	movlw	6
  8636  0041B8  0100               	movlb	0	; () banked
  8637  0041BA  6FA8               	movwf	___fladd@sign& (0+255),b
  8638                           
  8639                           ; BSR set to: 0
  8640  0041BC  0100               	movlb	0	; () banked
  8641  0041BE  AFA2               	btfss	(___fladd@f1+3)& (0+255),7,b
  8642  0041C0  D003               	goto	l6206
  8643                           
  8644                           ; BSR set to: 0
  8645  0041C2  0100               	movlb	0	; () banked
  8646  0041C4  8FA8               	bsf	___fladd@sign& (0+255),7,b
  8647  0041C6  D000               	goto	l6206
  8648  0041C8                     l6206:
  8649                           
  8650                           ; BSR set to: 0
  8651  0041C8  0100               	movlb	0	; () banked
  8652  0041CA  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  8653  0041CC  D002               	goto	l1150
  8654                           
  8655                           ; BSR set to: 0
  8656  0041CE  0100               	movlb	0	; () banked
  8657  0041D0  8DA8               	bsf	___fladd@sign& (0+255),6,b
  8658  0041D2                     l1150:
  8659                           
  8660                           ; BSR set to: 0
  8661  0041D2  0100               	movlb	0	; () banked
  8662  0041D4  8FA1               	bsf	(___fladd@f1+2)& (0+255),7,b
  8663                           
  8664                           ; BSR set to: 0
  8665  0041D6  0EFF               	movlw	255
  8666  0041D8  0100               	movlb	0	; () banked
  8667  0041DA  179F               	andwf	___fladd@f1& (0+255),f,b
  8668  0041DC  0EFF               	movlw	255
  8669  0041DE  17A0               	andwf	(___fladd@f1+1)& (0+255),f,b
  8670  0041E0  0EFF               	movlw	255
  8671  0041E2  17A1               	andwf	(___fladd@f1+2)& (0+255),f,b
  8672  0041E4  0E00               	movlw	0
  8673  0041E6  17A2               	andwf	(___fladd@f1+3)& (0+255),f,b
  8674                           
  8675                           ; BSR set to: 0
  8676  0041E8  0100               	movlb	0	; () banked
  8677  0041EA  8FA5               	bsf	(___fladd@f2+2)& (0+255),7,b
  8678  0041EC  0EFF               	movlw	255
  8679  0041EE  0100               	movlb	0	; () banked
  8680  0041F0  17A3               	andwf	___fladd@f2& (0+255),f,b
  8681  0041F2  0EFF               	movlw	255
  8682  0041F4  17A4               	andwf	(___fladd@f2+1)& (0+255),f,b
  8683  0041F6  0EFF               	movlw	255
  8684  0041F8  17A5               	andwf	(___fladd@f2+2)& (0+255),f,b
  8685  0041FA  0E00               	movlw	0
  8686  0041FC  17A6               	andwf	(___fladd@f2+3)& (0+255),f,b
  8687  0041FE  0100               	movlb	0	; () banked
  8688  004200  51A9               	movf	___fladd@exp2& (0+255),w,b
  8689  004202  0100               	movlb	0	; () banked
  8690  004204  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  8691  004206  B0D8               	btfsc	status,0,c
  8692  004208  D02A               	goto	l6224
  8693  00420A                     l6214:
  8694                           
  8695                           ; BSR set to: 0
  8696  00420A  0100               	movlb	0	; () banked
  8697  00420C  90D8               	bcf	status,0,c
  8698  00420E  37A3               	rlcf	___fladd@f2& (0+255),f,b
  8699  004210  37A4               	rlcf	(___fladd@f2+1)& (0+255),f,b
  8700  004212  37A5               	rlcf	(___fladd@f2+2)& (0+255),f,b
  8701  004214  37A6               	rlcf	(___fladd@f2+3)& (0+255),f,b
  8702  004216  0100               	movlb	0	; () banked
  8703  004218  07A9               	decf	___fladd@exp2& (0+255),f,b
  8704                           
  8705                           ; BSR set to: 0
  8706  00421A  0100               	movlb	0	; () banked
  8707  00421C  51AA               	movf	___fladd@exp1& (0+255),w,b
  8708  00421E  0100               	movlb	0	; () banked
  8709  004220  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  8710  004222  B4D8               	btfsc	status,2,c
  8711  004224  D014               	goto	l6222
  8712                           
  8713                           ; BSR set to: 0
  8714  004226  0100               	movlb	0	; () banked
  8715  004228  07A8               	decf	___fladd@sign& (0+255),f,b
  8716  00422A  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  8717  00422E  0E07               	movlw	7
  8718  004230  0100               	movlb	0	; () banked
  8719  004232  17A7               	andwf	??___fladd& (0+255),f,b
  8720  004234  B4D8               	btfsc	status,2,c
  8721  004236  D00B               	goto	l6222
  8722  004238  D7E8               	goto	l6214
  8723                           
  8724                           ; BSR set to: 0
  8725                           
  8726                           ; BSR set to: 0
  8727  00423A  D009               	goto	l6222
  8728  00423C                     l6220:
  8729                           
  8730                           ; BSR set to: 0
  8731  00423C  0100               	movlb	0	; () banked
  8732  00423E  90D8               	bcf	status,0,c
  8733  004240  33A2               	rrcf	(___fladd@f1+3)& (0+255),f,b
  8734  004242  33A1               	rrcf	(___fladd@f1+2)& (0+255),f,b
  8735  004244  33A0               	rrcf	(___fladd@f1+1)& (0+255),f,b
  8736  004246  339F               	rrcf	___fladd@f1& (0+255),f,b
  8737  004248  0100               	movlb	0	; () banked
  8738  00424A  2BAA               	incf	___fladd@exp1& (0+255),f,b
  8739  00424C  D000               	goto	l6222
  8740  00424E                     l6222:
  8741                           
  8742                           ; BSR set to: 0
  8743  00424E  0100               	movlb	0	; () banked
  8744  004250  51A9               	movf	___fladd@exp2& (0+255),w,b
  8745  004252  0100               	movlb	0	; () banked
  8746  004254  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  8747  004256  B4D8               	btfsc	status,2,c
  8748  004258  D032               	goto	l1159
  8749  00425A  D7F0               	goto	l6220
  8750                           
  8751                           ; BSR set to: 0
  8752  00425C  D030               	goto	l1159
  8753  00425E                     l6224:
  8754                           
  8755                           ; BSR set to: 0
  8756  00425E  0100               	movlb	0	; () banked
  8757  004260  51AA               	movf	___fladd@exp1& (0+255),w,b
  8758  004262  0100               	movlb	0	; () banked
  8759  004264  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  8760  004266  B0D8               	btfsc	status,0,c
  8761  004268  D02A               	goto	l1159
  8762  00426A                     l6226:
  8763                           
  8764                           ; BSR set to: 0
  8765  00426A  0100               	movlb	0	; () banked
  8766  00426C  90D8               	bcf	status,0,c
  8767  00426E  379F               	rlcf	___fladd@f1& (0+255),f,b
  8768  004270  37A0               	rlcf	(___fladd@f1+1)& (0+255),f,b
  8769  004272  37A1               	rlcf	(___fladd@f1+2)& (0+255),f,b
  8770  004274  37A2               	rlcf	(___fladd@f1+3)& (0+255),f,b
  8771  004276  0100               	movlb	0	; () banked
  8772  004278  07AA               	decf	___fladd@exp1& (0+255),f,b
  8773                           
  8774                           ; BSR set to: 0
  8775  00427A  0100               	movlb	0	; () banked
  8776  00427C  51AA               	movf	___fladd@exp1& (0+255),w,b
  8777  00427E  0100               	movlb	0	; () banked
  8778  004280  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  8779  004282  B4D8               	btfsc	status,2,c
  8780  004284  D014               	goto	l6234
  8781                           
  8782                           ; BSR set to: 0
  8783  004286  0100               	movlb	0	; () banked
  8784  004288  07A8               	decf	___fladd@sign& (0+255),f,b
  8785  00428A  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  8786  00428E  0E07               	movlw	7
  8787  004290  0100               	movlb	0	; () banked
  8788  004292  17A7               	andwf	??___fladd& (0+255),f,b
  8789  004294  B4D8               	btfsc	status,2,c
  8790  004296  D00B               	goto	l6234
  8791  004298  D7E8               	goto	l6226
  8792                           
  8793                           ; BSR set to: 0
  8794                           
  8795                           ; BSR set to: 0
  8796  00429A  D009               	goto	l6234
  8797  00429C                     l6232:
  8798                           
  8799                           ; BSR set to: 0
  8800  00429C  0100               	movlb	0	; () banked
  8801  00429E  90D8               	bcf	status,0,c
  8802  0042A0  33A6               	rrcf	(___fladd@f2+3)& (0+255),f,b
  8803  0042A2  33A5               	rrcf	(___fladd@f2+2)& (0+255),f,b
  8804  0042A4  33A4               	rrcf	(___fladd@f2+1)& (0+255),f,b
  8805  0042A6  33A3               	rrcf	___fladd@f2& (0+255),f,b
  8806  0042A8  0100               	movlb	0	; () banked
  8807  0042AA  2BA9               	incf	___fladd@exp2& (0+255),f,b
  8808  0042AC  D000               	goto	l6234
  8809  0042AE                     l6234:
  8810                           
  8811                           ; BSR set to: 0
  8812  0042AE  0100               	movlb	0	; () banked
  8813  0042B0  51A9               	movf	___fladd@exp2& (0+255),w,b
  8814  0042B2  0100               	movlb	0	; () banked
  8815  0042B4  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  8816  0042B6  B4D8               	btfsc	status,2,c
  8817  0042B8  D002               	goto	l1159
  8818  0042BA  D7F0               	goto	l6232
  8819                           
  8820                           ; BSR set to: 0
  8821  0042BC  D000               	goto	l1159
  8822  0042BE                     l1159:
  8823                           
  8824                           ; BSR set to: 0
  8825  0042BE  0100               	movlb	0	; () banked
  8826  0042C0  AFA8               	btfss	___fladd@sign& (0+255),7,b
  8827  0042C2  D011               	goto	l6238
  8828                           
  8829                           ; BSR set to: 0
  8830  0042C4  0EFF               	movlw	255
  8831  0042C6  0100               	movlb	0	; () banked
  8832  0042C8  1B9F               	xorwf	___fladd@f1& (0+255),f,b
  8833  0042CA  0EFF               	movlw	255
  8834  0042CC  1BA0               	xorwf	(___fladd@f1+1)& (0+255),f,b
  8835  0042CE  0EFF               	movlw	255
  8836  0042D0  1BA1               	xorwf	(___fladd@f1+2)& (0+255),f,b
  8837  0042D2  0EFF               	movlw	255
  8838  0042D4  1BA2               	xorwf	(___fladd@f1+3)& (0+255),f,b
  8839  0042D6  0E01               	movlw	1
  8840  0042D8  0100               	movlb	0	; () banked
  8841  0042DA  279F               	addwf	___fladd@f1& (0+255),f,b
  8842  0042DC  0E00               	movlw	0
  8843  0042DE  23A0               	addwfc	(___fladd@f1+1)& (0+255),f,b
  8844  0042E0  23A1               	addwfc	(___fladd@f1+2)& (0+255),f,b
  8845  0042E2  23A2               	addwfc	(___fladd@f1+3)& (0+255),f,b
  8846  0042E4  D000               	goto	l6238
  8847  0042E6                     l6238:
  8848                           
  8849                           ; BSR set to: 0
  8850  0042E6  0100               	movlb	0	; () banked
  8851  0042E8  ADA8               	btfss	___fladd@sign& (0+255),6,b
  8852  0042EA  D011               	goto	l6242
  8853                           
  8854                           ; BSR set to: 0
  8855  0042EC  0EFF               	movlw	255
  8856  0042EE  0100               	movlb	0	; () banked
  8857  0042F0  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  8858  0042F2  0EFF               	movlw	255
  8859  0042F4  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  8860  0042F6  0EFF               	movlw	255
  8861  0042F8  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  8862  0042FA  0EFF               	movlw	255
  8863  0042FC  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  8864  0042FE  0E01               	movlw	1
  8865  004300  0100               	movlb	0	; () banked
  8866  004302  27A3               	addwf	___fladd@f2& (0+255),f,b
  8867  004304  0E00               	movlw	0
  8868  004306  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8869  004308  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8870  00430A  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8871  00430C  D000               	goto	l6242
  8872  00430E                     l6242:
  8873                           
  8874                           ; BSR set to: 0
  8875  00430E  0E00               	movlw	0
  8876  004310  0100               	movlb	0	; () banked
  8877  004312  6FA8               	movwf	___fladd@sign& (0+255),b
  8878                           
  8879                           ; BSR set to: 0
  8880  004314  0100               	movlb	0	; () banked
  8881  004316  519F               	movf	___fladd@f1& (0+255),w,b
  8882  004318  0100               	movlb	0	; () banked
  8883  00431A  27A3               	addwf	___fladd@f2& (0+255),f,b
  8884  00431C  0100               	movlb	0	; () banked
  8885  00431E  51A0               	movf	(___fladd@f1+1)& (0+255),w,b
  8886  004320  0100               	movlb	0	; () banked
  8887  004322  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8888  004324  0100               	movlb	0	; () banked
  8889  004326  51A1               	movf	(___fladd@f1+2)& (0+255),w,b
  8890  004328  0100               	movlb	0	; () banked
  8891  00432A  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8892  00432C  0100               	movlb	0	; () banked
  8893  00432E  51A2               	movf	(___fladd@f1+3)& (0+255),w,b
  8894  004330  0100               	movlb	0	; () banked
  8895  004332  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8896                           
  8897                           ; BSR set to: 0
  8898  004334  0100               	movlb	0	; () banked
  8899  004336  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  8900  004338  D014               	goto	l6252
  8901                           
  8902                           ; BSR set to: 0
  8903  00433A  0EFF               	movlw	255
  8904  00433C  0100               	movlb	0	; () banked
  8905  00433E  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  8906  004340  0EFF               	movlw	255
  8907  004342  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  8908  004344  0EFF               	movlw	255
  8909  004346  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  8910  004348  0EFF               	movlw	255
  8911  00434A  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  8912  00434C  0E01               	movlw	1
  8913  00434E  0100               	movlb	0	; () banked
  8914  004350  27A3               	addwf	___fladd@f2& (0+255),f,b
  8915  004352  0E00               	movlw	0
  8916  004354  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8917  004356  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8918  004358  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8919                           
  8920                           ; BSR set to: 0
  8921  00435A  0E01               	movlw	1
  8922  00435C  0100               	movlb	0	; () banked
  8923  00435E  6FA8               	movwf	___fladd@sign& (0+255),b
  8924  004360  D000               	goto	l6252
  8925  004362                     l6252:
  8926                           
  8927                           ; BSR set to: 0
  8928  004362  C0A3  F077         	movff	___fladd@f2,___flpack@arg
  8929  004366  C0A4  F078         	movff	___fladd@f2+1,___flpack@arg+1
  8930  00436A  C0A5  F079         	movff	___fladd@f2+2,___flpack@arg+2
  8931  00436E  C0A6  F07A         	movff	___fladd@f2+3,___flpack@arg+3
  8932  004372  C0AA  F07B         	movff	___fladd@exp1,___flpack@exp
  8933  004376  C0A8  F07C         	movff	___fladd@sign,___flpack@sign
  8934  00437A  ECF9  F026         	call	___flpack	;wreg free
  8935  00437E  C077  F09F         	movff	?___flpack,?___fladd
  8936  004382  C078  F0A0         	movff	?___flpack+1,?___fladd+1
  8937  004386  C079  F0A1         	movff	?___flpack+2,?___fladd+2
  8938  00438A  C07A  F0A2         	movff	?___flpack+3,?___fladd+3
  8939  00438E  0012               	return	
  8940  004390  0012               	return		;funcret
  8941  004392                     __end_of___fladd:
  8942                           	opt stack 0
  8943                           tblptru	equ	0xFF8
  8944                           tblptrh	equ	0xFF7
  8945                           tblptrl	equ	0xFF6
  8946                           tablat	equ	0xFF5
  8947                           prodh	equ	0xFF4
  8948                           prodl	equ	0xFF3
  8949                           postinc0	equ	0xFEE
  8950                           wreg	equ	0xFE8
  8951                           indf2	equ	0xFDF
  8952                           postinc2	equ	0xFDE
  8953                           postdec2	equ	0xFDD
  8954                           fsr2h	equ	0xFDA
  8955                           fsr2l	equ	0xFD9
  8956                           status	equ	0xFD8
  8957                           
  8958 ;; *************** function ___flneg *****************
  8959 ;; Defined at:
  8960 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  8961 ;; Parameters:    Size  Location     Type
  8962 ;;  f1              4   75[BANK0 ] unsigned char 
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;		None
  8965 ;; Return value:  Size  Location     Type
  8966 ;;                  4   75[BANK0 ] unsigned char 
  8967 ;; Registers used:
  8968 ;;		wreg, status,2, status,0
  8969 ;; Tracked objects:
  8970 ;;		On entry : 0/0
  8971 ;;		On exit  : 0/0
  8972 ;;		Unchanged: 0/0
  8973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8974 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8978 ;;Total ram usage:        4 bytes
  8979 ;; Hardware stack levels used:    1
  8980 ;; Hardware stack levels required when called:    5
  8981 ;; This function calls:
  8982 ;;		Nothing
  8983 ;; This function is called by:
  8984 ;;		_park_routine
  8985 ;;		_asin
  8986 ;;		_atan
  8987 ;;		_fabs
  8988 ;;		_sin
  8989 ;;		_matematica
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           	psect	text27
  8994  005DD8                     __ptext27:
  8995                           	opt stack 0
  8996  005DD8                     ___flneg:
  8997                           	opt stack 21
  8998                           
  8999                           ;incstack = 0
  9000  005DD8  0100               	movlb	0	; () banked
  9001  005DDA  51AB               	movf	___flneg@f1& (0+255),w,b
  9002  005DDC  0100               	movlb	0	; () banked
  9003  005DDE  11AC               	iorwf	(___flneg@f1+1)& (0+255),w,b
  9004  005DE0  0100               	movlb	0	; () banked
  9005  005DE2  11AD               	iorwf	(___flneg@f1+2)& (0+255),w,b
  9006  005DE4  0100               	movlb	0	; () banked
  9007  005DE6  11AE               	iorwf	(___flneg@f1+3)& (0+255),w,b
  9008  005DE8  B4D8               	btfsc	status,2,c
  9009  005DEA  D00A               	goto	l6310
  9010                           
  9011                           ; BSR set to: 0
  9012  005DEC  0E00               	movlw	0
  9013  005DEE  0100               	movlb	0	; () banked
  9014  005DF0  1BAB               	xorwf	___flneg@f1& (0+255),f,b
  9015  005DF2  0E00               	movlw	0
  9016  005DF4  1BAC               	xorwf	(___flneg@f1+1)& (0+255),f,b
  9017  005DF6  0E00               	movlw	0
  9018  005DF8  1BAD               	xorwf	(___flneg@f1+2)& (0+255),f,b
  9019  005DFA  0E80               	movlw	128
  9020  005DFC  1BAE               	xorwf	(___flneg@f1+3)& (0+255),f,b
  9021  005DFE  D000               	goto	l6310
  9022  005E00                     l6310:
  9023                           
  9024                           ; BSR set to: 0
  9025  005E00  C0AB  F0AB         	movff	___flneg@f1,?___flneg
  9026  005E04  C0AC  F0AC         	movff	___flneg@f1+1,?___flneg+1
  9027  005E08  C0AD  F0AD         	movff	___flneg@f1+2,?___flneg+2
  9028  005E0C  C0AE  F0AE         	movff	___flneg@f1+3,?___flneg+3
  9029  005E10  0012               	return	
  9030                           
  9031                           ; BSR set to: 0
  9032                           
  9033                           ; BSR set to: 0
  9034  005E12  0012               	return		;funcret
  9035  005E14                     __end_of___flneg:
  9036                           	opt stack 0
  9037                           tblptru	equ	0xFF8
  9038                           tblptrh	equ	0xFF7
  9039                           tblptrl	equ	0xFF6
  9040                           tablat	equ	0xFF5
  9041                           prodh	equ	0xFF4
  9042                           prodl	equ	0xFF3
  9043                           postinc0	equ	0xFEE
  9044                           wreg	equ	0xFE8
  9045                           indf2	equ	0xFDF
  9046                           postinc2	equ	0xFDE
  9047                           postdec2	equ	0xFDD
  9048                           fsr2h	equ	0xFDA
  9049                           fsr2l	equ	0xFD9
  9050                           status	equ	0xFD8
  9051                           
  9052 ;; *************** function ___fldiv *****************
  9053 ;; Defined at:
  9054 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  9055 ;; Parameters:    Size  Location     Type
  9056 ;;  f1              4   48[BANK0 ] unsigned char 
  9057 ;;  f2              4   52[BANK0 ] unsigned char 
  9058 ;; Auto vars:     Size  Location     Type
  9059 ;;  f3              4   56[BANK0 ] unsigned char 
  9060 ;;  sign            1   62[BANK0 ] unsigned char 
  9061 ;;  exp             1   61[BANK0 ] unsigned char 
  9062 ;;  cntr            1   60[BANK0 ] unsigned char 
  9063 ;; Return value:  Size  Location     Type
  9064 ;;                  4   48[BANK0 ] unsigned char 
  9065 ;; Registers used:
  9066 ;;		wreg, status,2, status,0, cstack
  9067 ;; Tracked objects:
  9068 ;;		On entry : 0/0
  9069 ;;		On exit  : 0/0
  9070 ;;		Unchanged: 0/0
  9071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9072 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9073 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9075 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9076 ;;Total ram usage:       15 bytes
  9077 ;; Hardware stack levels used:    1
  9078 ;; Hardware stack levels required when called:    6
  9079 ;; This function calls:
  9080 ;;		___flpack
  9081 ;; This function is called by:
  9082 ;;		_park_routine
  9083 ;;		_parallelo
  9084 ;;		_asin
  9085 ;;		_atan
  9086 ;;		_sin
  9087 ;;		_matematica
  9088 ;; This function uses a non-reentrant model
  9089 ;;
  9090                           
  9091                           	psect	text28
  9092  0050D6                     __ptext28:
  9093                           	opt stack 0
  9094  0050D6                     ___fldiv:
  9095                           	opt stack 20
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;incstack = 0
  9099  0050D6  0100               	movlb	0	; () banked
  9100  0050D8  3592               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  9101  0050DA  3593               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  9102  0050DC  0100               	movlb	0	; () banked
  9103  0050DE  6F9D               	movwf	___fldiv@exp& (0+255),b
  9104  0050E0  0100               	movlb	0	; () banked
  9105  0050E2  519D               	movf	___fldiv@exp& (0+255),w,b
  9106  0050E4  A4D8               	btfss	status,2,c
  9107  0050E6  D00A               	goto	l6332
  9108                           
  9109                           ; BSR set to: 0
  9110  0050E8  0E00               	movlw	0
  9111  0050EA  0100               	movlb	0	; () banked
  9112  0050EC  6F90               	movwf	?___fldiv& (0+255),b
  9113  0050EE  0E00               	movlw	0
  9114  0050F0  6F91               	movwf	(?___fldiv+1)& (0+255),b
  9115  0050F2  0E00               	movlw	0
  9116  0050F4  6F92               	movwf	(?___fldiv+2)& (0+255),b
  9117  0050F6  0E00               	movlw	0
  9118  0050F8  6F93               	movwf	(?___fldiv+3)& (0+255),b
  9119                           
  9120                           ; BSR set to: 0
  9121  0050FA  0012               	return	
  9122  0050FC                     l6332:
  9123                           
  9124                           ; BSR set to: 0
  9125  0050FC  0100               	movlb	0	; () banked
  9126  0050FE  3596               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  9127  005100  3597               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  9128  005102  0100               	movlb	0	; () banked
  9129  005104  6F9E               	movwf	___fldiv@sign& (0+255),b
  9130  005106  0100               	movlb	0	; () banked
  9131  005108  519E               	movf	___fldiv@sign& (0+255),w,b
  9132  00510A  A4D8               	btfss	status,2,c
  9133  00510C  D00A               	goto	l6338
  9134                           
  9135                           ; BSR set to: 0
  9136  00510E  0E00               	movlw	0
  9137  005110  0100               	movlb	0	; () banked
  9138  005112  6F90               	movwf	?___fldiv& (0+255),b
  9139  005114  0E00               	movlw	0
  9140  005116  6F91               	movwf	(?___fldiv+1)& (0+255),b
  9141  005118  0E00               	movlw	0
  9142  00511A  6F92               	movwf	(?___fldiv+2)& (0+255),b
  9143  00511C  0E00               	movlw	0
  9144  00511E  6F93               	movwf	(?___fldiv+3)& (0+255),b
  9145                           
  9146                           ; BSR set to: 0
  9147  005120  0012               	return	
  9148  005122                     l6338:
  9149                           
  9150                           ; BSR set to: 0
  9151  005122  0100               	movlb	0	; () banked
  9152  005124  519E               	movf	___fldiv@sign& (0+255),w,b
  9153  005126  0F89               	addlw	137
  9154  005128  0100               	movlb	0	; () banked
  9155  00512A  5F9D               	subwf	___fldiv@exp& (0+255),f,b
  9156                           
  9157                           ; BSR set to: 0
  9158  00512C  C093  F09E         	movff	___fldiv@f1+3,___fldiv@sign
  9159  005130  0100               	movlb	0	; () banked
  9160  005132  5197               	movf	(___fldiv@f2+3)& (0+255),w,b
  9161  005134  0100               	movlb	0	; () banked
  9162  005136  1B9E               	xorwf	___fldiv@sign& (0+255),f,b
  9163  005138  0E80               	movlw	128
  9164  00513A  0100               	movlb	0	; () banked
  9165  00513C  179E               	andwf	___fldiv@sign& (0+255),f,b
  9166                           
  9167                           ; BSR set to: 0
  9168  00513E  0100               	movlb	0	; () banked
  9169  005140  8F92               	bsf	(___fldiv@f1+2)& (0+255),7,b
  9170                           
  9171                           ; BSR set to: 0
  9172  005142  0EFF               	movlw	255
  9173  005144  0100               	movlb	0	; () banked
  9174  005146  1790               	andwf	___fldiv@f1& (0+255),f,b
  9175  005148  0EFF               	movlw	255
  9176  00514A  1791               	andwf	(___fldiv@f1+1)& (0+255),f,b
  9177  00514C  0EFF               	movlw	255
  9178  00514E  1792               	andwf	(___fldiv@f1+2)& (0+255),f,b
  9179  005150  0E00               	movlw	0
  9180  005152  1793               	andwf	(___fldiv@f1+3)& (0+255),f,b
  9181  005154  0100               	movlb	0	; () banked
  9182  005156  8F96               	bsf	(___fldiv@f2+2)& (0+255),7,b
  9183                           
  9184                           ; BSR set to: 0
  9185  005158  0EFF               	movlw	255
  9186  00515A  0100               	movlb	0	; () banked
  9187  00515C  1794               	andwf	___fldiv@f2& (0+255),f,b
  9188  00515E  0EFF               	movlw	255
  9189  005160  1795               	andwf	(___fldiv@f2+1)& (0+255),f,b
  9190  005162  0EFF               	movlw	255
  9191  005164  1796               	andwf	(___fldiv@f2+2)& (0+255),f,b
  9192  005166  0E00               	movlw	0
  9193  005168  1797               	andwf	(___fldiv@f2+3)& (0+255),f,b
  9194                           
  9195                           ; BSR set to: 0
  9196  00516A  0E20               	movlw	32
  9197  00516C  0100               	movlb	0	; () banked
  9198  00516E  6F9C               	movwf	___fldiv@cntr& (0+255),b
  9199  005170  D000               	goto	l6350
  9200  005172                     l6350:
  9201                           
  9202                           ; BSR set to: 0
  9203  005172  0100               	movlb	0	; () banked
  9204  005174  90D8               	bcf	status,0,c
  9205  005176  3798               	rlcf	___fldiv@f3& (0+255),f,b
  9206  005178  3799               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  9207  00517A  379A               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  9208  00517C  379B               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  9209                           
  9210                           ; BSR set to: 0
  9211  00517E  0100               	movlb	0	; () banked
  9212  005180  5194               	movf	___fldiv@f2& (0+255),w,b
  9213  005182  0100               	movlb	0	; () banked
  9214  005184  5D90               	subwf	___fldiv@f1& (0+255),w,b
  9215  005186  0100               	movlb	0	; () banked
  9216  005188  5195               	movf	(___fldiv@f2+1)& (0+255),w,b
  9217  00518A  0100               	movlb	0	; () banked
  9218  00518C  5991               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  9219  00518E  0100               	movlb	0	; () banked
  9220  005190  5196               	movf	(___fldiv@f2+2)& (0+255),w,b
  9221  005192  0100               	movlb	0	; () banked
  9222  005194  5992               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  9223  005196  0100               	movlb	0	; () banked
  9224  005198  5197               	movf	(___fldiv@f2+3)& (0+255),w,b
  9225  00519A  0100               	movlb	0	; () banked
  9226  00519C  5993               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  9227  00519E  A0D8               	btfss	status,0,c
  9228  0051A0  D013               	goto	l6358
  9229                           
  9230                           ; BSR set to: 0
  9231  0051A2  0100               	movlb	0	; () banked
  9232  0051A4  5194               	movf	___fldiv@f2& (0+255),w,b
  9233  0051A6  0100               	movlb	0	; () banked
  9234  0051A8  5F90               	subwf	___fldiv@f1& (0+255),f,b
  9235  0051AA  0100               	movlb	0	; () banked
  9236  0051AC  5195               	movf	(___fldiv@f2+1)& (0+255),w,b
  9237  0051AE  0100               	movlb	0	; () banked
  9238  0051B0  5B91               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  9239  0051B2  0100               	movlb	0	; () banked
  9240  0051B4  5196               	movf	(___fldiv@f2+2)& (0+255),w,b
  9241  0051B6  0100               	movlb	0	; () banked
  9242  0051B8  5B92               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  9243  0051BA  0100               	movlb	0	; () banked
  9244  0051BC  5197               	movf	(___fldiv@f2+3)& (0+255),w,b
  9245  0051BE  0100               	movlb	0	; () banked
  9246  0051C0  5B93               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  9247                           
  9248                           ; BSR set to: 0
  9249  0051C2  0100               	movlb	0	; () banked
  9250  0051C4  8198               	bsf	___fldiv@f3& (0+255),0,b
  9251  0051C6  D000               	goto	l6358
  9252  0051C8                     l6358:
  9253                           
  9254                           ; BSR set to: 0
  9255  0051C8  0100               	movlb	0	; () banked
  9256  0051CA  90D8               	bcf	status,0,c
  9257  0051CC  3790               	rlcf	___fldiv@f1& (0+255),f,b
  9258  0051CE  3791               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  9259  0051D0  3792               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  9260  0051D2  3793               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  9261                           
  9262                           ; BSR set to: 0
  9263  0051D4  0100               	movlb	0	; () banked
  9264  0051D6  2F9C               	decfsz	___fldiv@cntr& (0+255),f,b
  9265  0051D8  D7CC               	goto	l6350
  9266  0051DA  D000               	goto	l6362
  9267  0051DC                     l6362:
  9268                           
  9269                           ; BSR set to: 0
  9270  0051DC  C098  F077         	movff	___fldiv@f3,___flpack@arg
  9271  0051E0  C099  F078         	movff	___fldiv@f3+1,___flpack@arg+1
  9272  0051E4  C09A  F079         	movff	___fldiv@f3+2,___flpack@arg+2
  9273  0051E8  C09B  F07A         	movff	___fldiv@f3+3,___flpack@arg+3
  9274  0051EC  C09D  F07B         	movff	___fldiv@exp,___flpack@exp
  9275  0051F0  C09E  F07C         	movff	___fldiv@sign,___flpack@sign
  9276  0051F4  ECF9  F026         	call	___flpack	;wreg free
  9277  0051F8  C077  F090         	movff	?___flpack,?___fldiv
  9278  0051FC  C078  F091         	movff	?___flpack+1,?___fldiv+1
  9279  005200  C079  F092         	movff	?___flpack+2,?___fldiv+2
  9280  005204  C07A  F093         	movff	?___flpack+3,?___fldiv+3
  9281  005208  0012               	return	
  9282  00520A  0012               	return		;funcret
  9283  00520C                     __end_of___fldiv:
  9284                           	opt stack 0
  9285                           tblptru	equ	0xFF8
  9286                           tblptrh	equ	0xFF7
  9287                           tblptrl	equ	0xFF6
  9288                           tablat	equ	0xFF5
  9289                           prodh	equ	0xFF4
  9290                           prodl	equ	0xFF3
  9291                           postinc0	equ	0xFEE
  9292                           wreg	equ	0xFE8
  9293                           indf2	equ	0xFDF
  9294                           postinc2	equ	0xFDE
  9295                           postdec2	equ	0xFDD
  9296                           fsr2h	equ	0xFDA
  9297                           fsr2l	equ	0xFD9
  9298                           status	equ	0xFD8
  9299                           
  9300 ;; *************** function ___lwtofl *****************
  9301 ;; Defined at:
  9302 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;  c               2   33[BANK0 ] unsigned int 
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;		None
  9307 ;; Return value:  Size  Location     Type
  9308 ;;                  4   33[BANK0 ] unsigned int 
  9309 ;; Registers used:
  9310 ;;		wreg, status,2, status,0, cstack
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9316 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;Total ram usage:        4 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    6
  9323 ;; This function calls:
  9324 ;;		___flpack
  9325 ;; This function is called by:
  9326 ;;		_park_routine
  9327 ;; This function uses a non-reentrant model
  9328 ;;
  9329                           
  9330                           	psect	text29
  9331  005EBE                     __ptext29:
  9332                           	opt stack 0
  9333  005EBE                     ___lwtofl:
  9334                           	opt stack 23
  9335                           
  9336                           ;incstack = 0
  9337  005EBE  C081  F077         	movff	___lwtofl@c,___flpack@arg
  9338  005EC2  C082  F078         	movff	___lwtofl@c+1,___flpack@arg+1
  9339  005EC6  0100               	movlb	0	; () banked
  9340  005EC8  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  9341  005ECA  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  9342  005ECC  0E96               	movlw	150
  9343  005ECE  0100               	movlb	0	; () banked
  9344  005ED0  6F7B               	movwf	___flpack@exp& (0+255),b
  9345  005ED2  0E00               	movlw	0
  9346  005ED4  0100               	movlb	0	; () banked
  9347  005ED6  6F7C               	movwf	___flpack@sign& (0+255),b
  9348  005ED8  ECF9  F026         	call	___flpack	;wreg free
  9349  005EDC  C077  F081         	movff	?___flpack,?___lwtofl
  9350  005EE0  C078  F082         	movff	?___flpack+1,?___lwtofl+1
  9351  005EE4  C079  F083         	movff	?___flpack+2,?___lwtofl+2
  9352  005EE8  C07A  F084         	movff	?___flpack+3,?___lwtofl+3
  9353  005EEC  0012               	return	
  9354  005EEE  0012               	return		;funcret
  9355  005EF0                     __end_of___lwtofl:
  9356                           	opt stack 0
  9357                           tblptru	equ	0xFF8
  9358                           tblptrh	equ	0xFF7
  9359                           tblptrl	equ	0xFF6
  9360                           tablat	equ	0xFF5
  9361                           prodh	equ	0xFF4
  9362                           prodl	equ	0xFF3
  9363                           postinc0	equ	0xFEE
  9364                           wreg	equ	0xFE8
  9365                           indf2	equ	0xFDF
  9366                           postinc2	equ	0xFDE
  9367                           postdec2	equ	0xFDD
  9368                           fsr2h	equ	0xFDA
  9369                           fsr2l	equ	0xFD9
  9370                           status	equ	0xFD8
  9371                           
  9372 ;; *************** function ___flpack *****************
  9373 ;; Defined at:
  9374 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  9375 ;; Parameters:    Size  Location     Type
  9376 ;;  arg             4   23[BANK0 ] unsigned long 
  9377 ;;  exp             1   27[BANK0 ] unsigned char 
  9378 ;;  sign            1   28[BANK0 ] unsigned char 
  9379 ;; Auto vars:     Size  Location     Type
  9380 ;;		None
  9381 ;; Return value:  Size  Location     Type
  9382 ;;                  4   23[BANK0 ] unsigned char 
  9383 ;; Registers used:
  9384 ;;		wreg, status,2, status,0
  9385 ;; Tracked objects:
  9386 ;;		On entry : 0/0
  9387 ;;		On exit  : 0/0
  9388 ;;		Unchanged: 0/0
  9389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9390 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;Total ram usage:       10 bytes
  9395 ;; Hardware stack levels used:    1
  9396 ;; Hardware stack levels required when called:    5
  9397 ;; This function calls:
  9398 ;;		Nothing
  9399 ;; This function is called by:
  9400 ;;		___altofl
  9401 ;;		___awtofl
  9402 ;;		___fladd
  9403 ;;		___fldiv
  9404 ;;		___flmul
  9405 ;;		___lwtofl
  9406 ;; This function uses a non-reentrant model
  9407 ;;
  9408                           
  9409                           	psect	text30
  9410  004DF2                     __ptext30:
  9411                           	opt stack 0
  9412  004DF2                     ___flpack:
  9413                           	opt stack 20
  9414                           
  9415                           ;incstack = 0
  9416  004DF2  0100               	movlb	0	; () banked
  9417  004DF4  517B               	movf	___flpack@exp& (0+255),w,b
  9418  004DF6  0100               	movlb	0	; () banked
  9419  004DF8  B4D8               	btfsc	status,2,c
  9420  004DFA  D00A               	goto	l6158
  9421                           
  9422                           ; BSR set to: 0
  9423  004DFC  0100               	movlb	0	; () banked
  9424  004DFE  5177               	movf	___flpack@arg& (0+255),w,b
  9425  004E00  0100               	movlb	0	; () banked
  9426  004E02  1178               	iorwf	(___flpack@arg+1)& (0+255),w,b
  9427  004E04  0100               	movlb	0	; () banked
  9428  004E06  1179               	iorwf	(___flpack@arg+2)& (0+255),w,b
  9429  004E08  0100               	movlb	0	; () banked
  9430  004E0A  117A               	iorwf	(___flpack@arg+3)& (0+255),w,b
  9431  004E0C  A4D8               	btfss	status,2,c
  9432  004E0E  D014               	goto	l6164
  9433  004E10                     l6158:
  9434                           
  9435                           ; BSR set to: 0
  9436  004E10  0E00               	movlw	0
  9437  004E12  0100               	movlb	0	; () banked
  9438  004E14  6F77               	movwf	?___flpack& (0+255),b
  9439  004E16  0E00               	movlw	0
  9440  004E18  6F78               	movwf	(?___flpack+1)& (0+255),b
  9441  004E1A  0E00               	movlw	0
  9442  004E1C  6F79               	movwf	(?___flpack+2)& (0+255),b
  9443  004E1E  0E00               	movlw	0
  9444  004E20  6F7A               	movwf	(?___flpack+3)& (0+255),b
  9445                           
  9446                           ; BSR set to: 0
  9447  004E22  0012               	return	
  9448                           
  9449                           ; BSR set to: 0
  9450  004E24  D009               	goto	l6164
  9451  004E26                     l6162:
  9452                           
  9453                           ; BSR set to: 0
  9454  004E26  0100               	movlb	0	; () banked
  9455  004E28  2B7B               	incf	___flpack@exp& (0+255),f,b
  9456  004E2A  0100               	movlb	0	; () banked
  9457  004E2C  90D8               	bcf	status,0,c
  9458  004E2E  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
  9459  004E30  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
  9460  004E32  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
  9461  004E34  3377               	rrcf	___flpack@arg& (0+255),f,b
  9462  004E36  D000               	goto	l6164
  9463  004E38                     l6164:
  9464                           
  9465                           ; BSR set to: 0
  9466  004E38  0E00               	movlw	0
  9467  004E3A  0100               	movlb	0	; () banked
  9468  004E3C  1577               	andwf	___flpack@arg& (0+255),w,b
  9469  004E3E  0100               	movlb	0	; () banked
  9470  004E40  6F7D               	movwf	??___flpack& (0+255),b
  9471  004E42  0E00               	movlw	0
  9472  004E44  0100               	movlb	0	; () banked
  9473  004E46  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
  9474  004E48  0100               	movlb	0	; () banked
  9475  004E4A  6F7E               	movwf	(??___flpack+1)& (0+255),b
  9476  004E4C  0E00               	movlw	0
  9477  004E4E  0100               	movlb	0	; () banked
  9478  004E50  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
  9479  004E52  0100               	movlb	0	; () banked
  9480  004E54  6F7F               	movwf	(??___flpack+2)& (0+255),b
  9481  004E56  0EFE               	movlw	254
  9482  004E58  0100               	movlb	0	; () banked
  9483  004E5A  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
  9484  004E5C  0100               	movlb	0	; () banked
  9485  004E5E  6F80               	movwf	(??___flpack+3)& (0+255),b
  9486  004E60  0100               	movlb	0	; () banked
  9487  004E62  517D               	movf	??___flpack& (0+255),w,b
  9488  004E64  0100               	movlb	0	; () banked
  9489  004E66  117E               	iorwf	(??___flpack+1)& (0+255),w,b
  9490  004E68  0100               	movlb	0	; () banked
  9491  004E6A  117F               	iorwf	(??___flpack+2)& (0+255),w,b
  9492  004E6C  0100               	movlb	0	; () banked
  9493  004E6E  1180               	iorwf	(??___flpack+3)& (0+255),w,b
  9494  004E70  B4D8               	btfsc	status,2,c
  9495  004E72  D011               	goto	l1116
  9496  004E74  D7D8               	goto	l6162
  9497                           
  9498                           ; BSR set to: 0
  9499  004E76  D00F               	goto	l1116
  9500  004E78                     l6166:
  9501                           
  9502                           ; BSR set to: 0
  9503  004E78  0100               	movlb	0	; () banked
  9504  004E7A  2B7B               	incf	___flpack@exp& (0+255),f,b
  9505                           
  9506                           ; BSR set to: 0
  9507  004E7C  0E01               	movlw	1
  9508  004E7E  0100               	movlb	0	; () banked
  9509  004E80  2777               	addwf	___flpack@arg& (0+255),f,b
  9510  004E82  0E00               	movlw	0
  9511  004E84  2378               	addwfc	(___flpack@arg+1)& (0+255),f,b
  9512  004E86  2379               	addwfc	(___flpack@arg+2)& (0+255),f,b
  9513  004E88  237A               	addwfc	(___flpack@arg+3)& (0+255),f,b
  9514                           
  9515                           ; BSR set to: 0
  9516  004E8A  0100               	movlb	0	; () banked
  9517  004E8C  90D8               	bcf	status,0,c
  9518  004E8E  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
  9519  004E90  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
  9520  004E92  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
  9521  004E94  3377               	rrcf	___flpack@arg& (0+255),f,b
  9522  004E96                     l1116:
  9523                           
  9524                           ; BSR set to: 0
  9525  004E96  0E00               	movlw	0
  9526  004E98  0100               	movlb	0	; () banked
  9527  004E9A  1577               	andwf	___flpack@arg& (0+255),w,b
  9528  004E9C  0100               	movlb	0	; () banked
  9529  004E9E  6F7D               	movwf	??___flpack& (0+255),b
  9530  004EA0  0E00               	movlw	0
  9531  004EA2  0100               	movlb	0	; () banked
  9532  004EA4  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
  9533  004EA6  0100               	movlb	0	; () banked
  9534  004EA8  6F7E               	movwf	(??___flpack+1)& (0+255),b
  9535  004EAA  0E00               	movlw	0
  9536  004EAC  0100               	movlb	0	; () banked
  9537  004EAE  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
  9538  004EB0  0100               	movlb	0	; () banked
  9539  004EB2  6F7F               	movwf	(??___flpack+2)& (0+255),b
  9540  004EB4  0EFF               	movlw	255
  9541  004EB6  0100               	movlb	0	; () banked
  9542  004EB8  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
  9543  004EBA  0100               	movlb	0	; () banked
  9544  004EBC  6F80               	movwf	(??___flpack+3)& (0+255),b
  9545  004EBE  0100               	movlb	0	; () banked
  9546  004EC0  517D               	movf	??___flpack& (0+255),w,b
  9547  004EC2  0100               	movlb	0	; () banked
  9548  004EC4  117E               	iorwf	(??___flpack+1)& (0+255),w,b
  9549  004EC6  0100               	movlb	0	; () banked
  9550  004EC8  117F               	iorwf	(??___flpack+2)& (0+255),w,b
  9551  004ECA  0100               	movlb	0	; () banked
  9552  004ECC  1180               	iorwf	(??___flpack+3)& (0+255),w,b
  9553  004ECE  B4D8               	btfsc	status,2,c
  9554  004ED0  D00B               	goto	l6174
  9555  004ED2  D7D2               	goto	l6166
  9556                           
  9557                           ; BSR set to: 0
  9558  004ED4  D009               	goto	l6174
  9559  004ED6                     l6172:
  9560                           
  9561                           ; BSR set to: 0
  9562  004ED6  0100               	movlb	0	; () banked
  9563  004ED8  077B               	decf	___flpack@exp& (0+255),f,b
  9564  004EDA  0100               	movlb	0	; () banked
  9565  004EDC  90D8               	bcf	status,0,c
  9566  004EDE  3777               	rlcf	___flpack@arg& (0+255),f,b
  9567  004EE0  3778               	rlcf	(___flpack@arg+1)& (0+255),f,b
  9568  004EE2  3779               	rlcf	(___flpack@arg+2)& (0+255),f,b
  9569  004EE4  377A               	rlcf	(___flpack@arg+3)& (0+255),f,b
  9570  004EE6  D000               	goto	l6174
  9571  004EE8                     l6174:
  9572                           
  9573                           ; BSR set to: 0
  9574  004EE8  0100               	movlb	0	; () banked
  9575  004EEA  BF79               	btfsc	(___flpack@arg+2)& (0+255),7,b
  9576  004EEC  D005               	goto	l1123
  9577                           
  9578                           ; BSR set to: 0
  9579  004EEE  0E02               	movlw	2
  9580  004EF0  0100               	movlb	0	; () banked
  9581  004EF2  617B               	cpfslt	___flpack@exp& (0+255),b
  9582  004EF4  D7F0               	goto	l6172
  9583  004EF6  D000               	goto	l1123
  9584  004EF8                     l1123:
  9585                           
  9586                           ; BSR set to: 0
  9587  004EF8  0100               	movlb	0	; () banked
  9588  004EFA  B17B               	btfsc	___flpack@exp& (0+255),0,b
  9589  004EFC  D009               	goto	l1124
  9590                           
  9591                           ; BSR set to: 0
  9592  004EFE  0EFF               	movlw	255
  9593  004F00  0100               	movlb	0	; () banked
  9594  004F02  1777               	andwf	___flpack@arg& (0+255),f,b
  9595  004F04  0EFF               	movlw	255
  9596  004F06  1778               	andwf	(___flpack@arg+1)& (0+255),f,b
  9597  004F08  0E7F               	movlw	127
  9598  004F0A  1779               	andwf	(___flpack@arg+2)& (0+255),f,b
  9599  004F0C  0EFF               	movlw	255
  9600  004F0E  177A               	andwf	(___flpack@arg+3)& (0+255),f,b
  9601  004F10                     l1124:
  9602                           
  9603                           ; BSR set to: 0
  9604  004F10  0100               	movlb	0	; () banked
  9605  004F12  90D8               	bcf	status,0,c
  9606  004F14  337B               	rrcf	___flpack@exp& (0+255),f,b
  9607  004F16  C07B  F07D         	movff	___flpack@exp,??___flpack
  9608  004F1A  0100               	movlb	0	; () banked
  9609  004F1C  6B7E               	clrf	(??___flpack+1)& (0+255),b
  9610  004F1E  6B7F               	clrf	(??___flpack+2)& (0+255),b
  9611  004F20  6B80               	clrf	(??___flpack+3)& (0+255),b
  9612  004F22  C07D  F080         	movff	??___flpack,??___flpack+3
  9613  004F26  0100               	movlb	0	; () banked
  9614  004F28  6B7F               	clrf	(??___flpack+2)& (0+255),b
  9615  004F2A  6B7E               	clrf	(??___flpack+1)& (0+255),b
  9616  004F2C  6B7D               	clrf	??___flpack& (0+255),b
  9617  004F2E  0100               	movlb	0	; () banked
  9618  004F30  517D               	movf	??___flpack& (0+255),w,b
  9619  004F32  0100               	movlb	0	; () banked
  9620  004F34  1377               	iorwf	___flpack@arg& (0+255),f,b
  9621  004F36  0100               	movlb	0	; () banked
  9622  004F38  517E               	movf	(??___flpack+1)& (0+255),w,b
  9623  004F3A  0100               	movlb	0	; () banked
  9624  004F3C  1378               	iorwf	(___flpack@arg+1)& (0+255),f,b
  9625  004F3E  0100               	movlb	0	; () banked
  9626  004F40  517F               	movf	(??___flpack+2)& (0+255),w,b
  9627  004F42  0100               	movlb	0	; () banked
  9628  004F44  1379               	iorwf	(___flpack@arg+2)& (0+255),f,b
  9629  004F46  0100               	movlb	0	; () banked
  9630  004F48  5180               	movf	(??___flpack+3)& (0+255),w,b
  9631  004F4A  0100               	movlb	0	; () banked
  9632  004F4C  137A               	iorwf	(___flpack@arg+3)& (0+255),f,b
  9633                           
  9634                           ; BSR set to: 0
  9635  004F4E  0100               	movlb	0	; () banked
  9636  004F50  517C               	movf	___flpack@sign& (0+255),w,b
  9637  004F52  0100               	movlb	0	; () banked
  9638  004F54  B4D8               	btfsc	status,2,c
  9639  004F56  D003               	goto	l6184
  9640                           
  9641                           ; BSR set to: 0
  9642  004F58  0100               	movlb	0	; () banked
  9643  004F5A  8F7A               	bsf	(___flpack@arg+3)& (0+255),7,b
  9644  004F5C  D000               	goto	l6184
  9645  004F5E                     l6184:
  9646                           
  9647                           ; BSR set to: 0
  9648  004F5E  C077  F077         	movff	___flpack@arg,?___flpack
  9649  004F62  C078  F078         	movff	___flpack@arg+1,?___flpack+1
  9650  004F66  C079  F079         	movff	___flpack@arg+2,?___flpack+2
  9651  004F6A  C07A  F07A         	movff	___flpack@arg+3,?___flpack+3
  9652  004F6E  0012               	return	
  9653                           
  9654                           ; BSR set to: 0
  9655                           
  9656                           ; BSR set to: 0
  9657  004F70  0012               	return		;funcret
  9658  004F72                     __end_of___flpack:
  9659                           	opt stack 0
  9660                           tblptru	equ	0xFF8
  9661                           tblptrh	equ	0xFF7
  9662                           tblptrl	equ	0xFF6
  9663                           tablat	equ	0xFF5
  9664                           prodh	equ	0xFF4
  9665                           prodl	equ	0xFF3
  9666                           postinc0	equ	0xFEE
  9667                           wreg	equ	0xFE8
  9668                           indf2	equ	0xFDF
  9669                           postinc2	equ	0xFDE
  9670                           postdec2	equ	0xFDD
  9671                           fsr2h	equ	0xFDA
  9672                           fsr2l	equ	0xFD9
  9673                           status	equ	0xFD8
  9674                           
  9675 ;; *************** function _configurations *****************
  9676 ;; Defined at:
  9677 ;;		line 529 in file "parcheggio.c"
  9678 ;; Parameters:    Size  Location     Type
  9679 ;;		None
  9680 ;; Auto vars:     Size  Location     Type
  9681 ;;		None
  9682 ;; Return value:  Size  Location     Type
  9683 ;;		None               void
  9684 ;; Registers used:
  9685 ;;		wreg, status,2, status,0, cstack
  9686 ;; Tracked objects:
  9687 ;;		On entry : 0/0
  9688 ;;		On exit  : 0/0
  9689 ;;		Unchanged: 0/0
  9690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9695 ;;Total ram usage:        0 bytes
  9696 ;; Hardware stack levels used:    1
  9697 ;; Hardware stack levels required when called:    7
  9698 ;; This function calls:
  9699 ;;		_CANInitialize
  9700 ;; This function is called by:
  9701 ;;		_main
  9702 ;; This function uses a non-reentrant model
  9703 ;;
  9704                           
  9705                           	psect	text31
  9706  005BD2                     __ptext31:
  9707                           	opt stack 0
  9708  005BD2                     _configurations:
  9709                           	opt stack 23
  9710                           
  9711                           ;parcheggio.c: 530: LATA = 0x00;
  9712                           
  9713                           ; BSR set to: 0
  9714                           ;incstack = 0
  9715  005BD2  0E00               	movlw	0
  9716  005BD4  6E89               	movwf	3977,c	;volatile
  9717                           
  9718                           ;parcheggio.c: 531: TRISA = 0b11110000;
  9719  005BD6  0EF0               	movlw	240
  9720  005BD8  6E92               	movwf	3986,c	;volatile
  9721                           
  9722                           ;parcheggio.c: 532: LATB = 0x00;
  9723  005BDA  0E00               	movlw	0
  9724  005BDC  6E8A               	movwf	3978,c	;volatile
  9725                           
  9726                           ;parcheggio.c: 533: TRISB = 0b10001010;
  9727  005BDE  0E8A               	movlw	138
  9728  005BE0  6E93               	movwf	3987,c	;volatile
  9729                           
  9730                           ;parcheggio.c: 534: LATC = 0x00;
  9731  005BE2  0E00               	movlw	0
  9732  005BE4  6E8B               	movwf	3979,c	;volatile
  9733                           
  9734                           ;parcheggio.c: 535: TRISC = 0b11111111;
  9735  005BE6  6894               	setf	3988,c	;volatile
  9736                           
  9737                           ;parcheggio.c: 537: ADCON1 = 0xFF;
  9738  005BE8  68C1               	setf	4033,c	;volatile
  9739                           
  9740                           ;parcheggio.c: 538: CANInitialize(4, 6, 5, 1, 3, CAN_CONFIG_LINE_FILTER_OFF & CAN_CONFIG
      +                          _SAMPLE_ONCE & CAN_CONFIG_ALL_VALID_MSG & CAN_CONFIG_DBL_BUFFER_ON);
  9741  005BEA  0E06               	movlw	6
  9742  005BEC  0100               	movlb	0	; () banked
  9743  005BEE  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
  9744  005BF0  0E05               	movlw	5
  9745  005BF2  0100               	movlb	0	; () banked
  9746  005BF4  6F86               	movwf	CANInitialize@phaseSeg2& (0+255),b
  9747  005BF6  0E01               	movlw	1
  9748  005BF8  0100               	movlb	0	; () banked
  9749  005BFA  6F87               	movwf	CANInitialize@SJW& (0+255),b
  9750  005BFC  0E03               	movlw	3
  9751  005BFE  0100               	movlb	0	; () banked
  9752  005C00  6F88               	movwf	CANInitialize@BRP& (0+255),b
  9753  005C02  0E9D               	movlw	157
  9754  005C04  0100               	movlb	0	; () banked
  9755  005C06  6F89               	movwf	CANInitialize@flags& (0+255),b
  9756  005C08  0E04               	movlw	4
  9757  005C0A  EC32  F025         	call	_CANInitialize
  9758                           
  9759                           ;parcheggio.c: 541: RCONbits.IPEN = 1;
  9760  005C0E  8ED0               	bsf	4048,7,c	;volatile
  9761                           
  9762                           ;parcheggio.c: 542: IPR3bits.RXB1IP = 0;
  9763  005C10  92A5               	bcf	4005,1,c	;volatile
  9764                           
  9765                           ;parcheggio.c: 543: IPR3bits.RXB0IP = 0;
  9766  005C12  90A5               	bcf	4005,0,c	;volatile
  9767                           
  9768                           ;parcheggio.c: 544: INTCON2bits.TMR0IP = 0;
  9769  005C14  94F1               	bcf	intcon2,2,c	;volatile
  9770                           
  9771                           ;parcheggio.c: 547: PIR3bits.RXB1IF = 0;
  9772  005C16  92A4               	bcf	4004,1,c	;volatile
  9773                           
  9774                           ;parcheggio.c: 548: PIR3bits.RXB0IF = 0;
  9775  005C18  90A4               	bcf	4004,0,c	;volatile
  9776                           
  9777                           ;parcheggio.c: 549: INTCONbits.INT0IF = 0;
  9778  005C1A  92F2               	bcf	intcon,1,c	;volatile
  9779                           
  9780                           ;parcheggio.c: 550: INTCONbits.TMR0IF = 0;
  9781  005C1C  94F2               	bcf	intcon,2,c	;volatile
  9782                           
  9783                           ;parcheggio.c: 554: PIE3bits.RXB1IE = 1;
  9784  005C1E  82A3               	bsf	4003,1,c	;volatile
  9785                           
  9786                           ;parcheggio.c: 555: PIE3bits.RXB0IE = 1;
  9787  005C20  80A3               	bsf	4003,0,c	;volatile
  9788                           
  9789                           ;parcheggio.c: 556: INTCONbits.TMR0IE = 1;
  9790  005C22  8AF2               	bsf	intcon,5,c	;volatile
  9791                           
  9792                           ;parcheggio.c: 557: INTCONbits.INT0IE = 0;
  9793  005C24  98F2               	bcf	intcon,4,c	;volatile
  9794                           
  9795                           ;parcheggio.c: 560: T0CON = 0x80;
  9796  005C26  0E80               	movlw	128
  9797  005C28  6ED5               	movwf	4053,c	;volatile
  9798                           
  9799                           ;parcheggio.c: 561: TMR0H = 0x34;
  9800  005C2A  0E34               	movlw	52
  9801  005C2C  6ED7               	movwf	4055,c	;volatile
  9802                           
  9803                           ;parcheggio.c: 562: TMR0L = 0xE0;
  9804  005C2E  0EE0               	movlw	224
  9805  005C30  6ED6               	movwf	4054,c	;volatile
  9806                           
  9807                           ;parcheggio.c: 563: T3CON = 0x11;
  9808  005C32  0E11               	movlw	17
  9809  005C34  6EB1               	movwf	4017,c	;volatile
  9810                           
  9811                           ;parcheggio.c: 565: INTCON2bits.INTEDG0 = 1;
  9812  005C36  8CF1               	bsf	intcon2,6,c	;volatile
  9813                           
  9814                           ;parcheggio.c: 566: INTCONbits.GIEL = 1;
  9815  005C38  8CF2               	bsf	intcon,6,c	;volatile
  9816                           
  9817                           ;parcheggio.c: 567: INTCONbits.GIEH = 1;
  9818  005C3A  8EF2               	bsf	intcon,7,c	;volatile
  9819  005C3C  0012               	return		;funcret
  9820  005C3E                     __end_of_configurations:
  9821                           	opt stack 0
  9822                           tblptru	equ	0xFF8
  9823                           tblptrh	equ	0xFF7
  9824                           tblptrl	equ	0xFF6
  9825                           tablat	equ	0xFF5
  9826                           prodh	equ	0xFF4
  9827                           prodl	equ	0xFF3
  9828                           intcon	equ	0xFF2
  9829                           intcon2	equ	0xFF1
  9830                           postinc0	equ	0xFEE
  9831                           wreg	equ	0xFE8
  9832                           indf2	equ	0xFDF
  9833                           postinc2	equ	0xFDE
  9834                           postdec2	equ	0xFDD
  9835                           fsr2h	equ	0xFDA
  9836                           fsr2l	equ	0xFD9
  9837                           status	equ	0xFD8
  9838                           
  9839 ;; *************** function _CANInitialize *****************
  9840 ;; Defined at:
  9841 ;;		line 218 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  9842 ;; Parameters:    Size  Location     Type
  9843 ;;  propSeg         1    wreg     unsigned char 
  9844 ;;  phaseSeg1       1   37[BANK0 ] unsigned char 
  9845 ;;  phaseSeg2       1   38[BANK0 ] unsigned char 
  9846 ;;  SJW             1   39[BANK0 ] unsigned char 
  9847 ;;  BRP             1   40[BANK0 ] unsigned char 
  9848 ;;  flags           1   41[BANK0 ] enum E16354
  9849 ;; Auto vars:     Size  Location     Type
  9850 ;;  propSeg         1   46[BANK0 ] unsigned char 
  9851 ;;  FilterConfig    1   48[BANK0 ] unsigned char 
  9852 ;;  FilterConfig    1   47[BANK0 ] unsigned char 
  9853 ;; Return value:  Size  Location     Type
  9854 ;;		None               void
  9855 ;; Registers used:
  9856 ;;		wreg, status,2, status,0, cstack
  9857 ;; Tracked objects:
  9858 ;;		On entry : 0/0
  9859 ;;		On exit  : 0/0
  9860 ;;		Unchanged: 0/0
  9861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9862 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9866 ;;Total ram usage:       12 bytes
  9867 ;; Hardware stack levels used:    1
  9868 ;; Hardware stack levels required when called:    6
  9869 ;; This function calls:
  9870 ;;		_CANOperationMode
  9871 ;;		_CANSetFilter
  9872 ;;		_CANSetMask
  9873 ;; This function is called by:
  9874 ;;		_configurations
  9875 ;; This function uses a non-reentrant model
  9876 ;;
  9877                           
  9878                           	psect	text32
  9879  004A64                     __ptext32:
  9880                           	opt stack 0
  9881  004A64                     _CANInitialize:
  9882                           	opt stack 23
  9883                           
  9884                           ;incstack = 0
  9885                           ;CANInitialize@propSeg stored from wreg
  9886  004A64  0100               	movlb	0	; () banked
  9887  004A66  6F8E               	movwf	CANInitialize@propSeg& (0+255),b
  9888                           
  9889                           ; BSR set to: 0
  9890                           ;inc\CANlib.h: 220: BYTE FilterConfig1;
  9891                           ;inc\CANlib.h: 221: BYTE FilterConfig2;
  9892                           ;inc\CANlib.h: 223: CANOperationMode(CAN_OP_MODE_CONFIG);
  9893  004A68  0E80               	movlw	128
  9894  004A6A  ECDC  F02F         	call	_CANOperationMode
  9895                           
  9896                           ;inc\CANlib.h: 225: BRGCON1 = 0x00;
  9897  004A6E  0E00               	movlw	0
  9898  004A70  6E70               	movwf	3952,c	;volatile
  9899                           
  9900                           ;inc\CANlib.h: 226: BRGCON2 = 0x00;
  9901  004A72  0E00               	movlw	0
  9902  004A74  6E71               	movwf	3953,c	;volatile
  9903                           
  9904                           ;inc\CANlib.h: 227: BRGCON3 = 0x00;
  9905  004A76  0E00               	movlw	0
  9906  004A78  6E72               	movwf	3954,c	;volatile
  9907                           
  9908                           ;inc\CANlib.h: 229: SJW= SJW << 6;
  9909  004A7A  0100               	movlb	0	; () banked
  9910  004A7C  4187               	rrncf	CANInitialize@SJW& (0+255),w,b
  9911  004A7E  42E8               	rrncf	wreg,f,c
  9912  004A80  0BC0               	andlw	192
  9913  004A82  0100               	movlb	0	; () banked
  9914  004A84  6F87               	movwf	CANInitialize@SJW& (0+255),b
  9915                           
  9916                           ; BSR set to: 0
  9917                           ;inc\CANlib.h: 230: BRGCON1 |= SJW;
  9918  004A86  0100               	movlb	0	; () banked
  9919  004A88  5187               	movf	CANInitialize@SJW& (0+255),w,b
  9920  004A8A  1270               	iorwf	3952,f,c	;volatile
  9921                           
  9922                           ; BSR set to: 0
  9923                           ;inc\CANlib.h: 231: BRGCON1 |= BRP;
  9924  004A8C  0100               	movlb	0	; () banked
  9925  004A8E  5188               	movf	CANInitialize@BRP& (0+255),w,b
  9926  004A90  1270               	iorwf	3952,f,c	;volatile
  9927                           
  9928                           ; BSR set to: 0
  9929                           ;inc\CANlib.h: 233: BRGCON2 |= propSeg;
  9930  004A92  0100               	movlb	0	; () banked
  9931  004A94  518E               	movf	CANInitialize@propSeg& (0+255),w,b
  9932  004A96  1271               	iorwf	3953,f,c	;volatile
  9933                           
  9934                           ; BSR set to: 0
  9935                           ;inc\CANlib.h: 234: phaseSeg1 = phaseSeg1 <<3;
  9936  004A98  0100               	movlb	0	; () banked
  9937  004A9A  3985               	swapf	CANInitialize@phaseSeg1& (0+255),w,b
  9938  004A9C  42E8               	rrncf	wreg,f,c
  9939  004A9E  0BF8               	andlw	248
  9940  004AA0  0100               	movlb	0	; () banked
  9941  004AA2  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;inc\CANlib.h: 235: BRGCON2 |= phaseSeg1;
  9945  004AA4  0100               	movlb	0	; () banked
  9946  004AA6  5185               	movf	CANInitialize@phaseSeg1& (0+255),w,b
  9947  004AA8  1271               	iorwf	3953,f,c	;volatile
  9948                           
  9949                           ; BSR set to: 0
  9950                           ;inc\CANlib.h: 237: if ( !(flags & CAN_CONFIG_SAMPLE_BIT) )
  9951  004AAA  0100               	movlb	0	; () banked
  9952  004AAC  A589               	btfss	CANInitialize@flags& (0+255),2,b
  9953                           
  9954                           ; BSR set to: 0
  9955                           ;inc\CANlib.h: 238: BRGCON2bits.SAM= 1;
  9956  004AAE  8C71               	bsf	3953,6,c	;volatile
  9957                           
  9958                           ; BSR set to: 0
  9959                           ;inc\CANlib.h: 240: if ( flags & CAN_CONFIG_PHSEG2_PRG_BIT )
  9960  004AB0  0100               	movlb	0	; () banked
  9961  004AB2  A189               	btfss	CANInitialize@flags& (0+255),0,b
  9962  004AB4  D002               	goto	l6710
  9963                           
  9964                           ; BSR set to: 0
  9965                           ;inc\CANlib.h: 241: BRGCON2bits.SEG2PHTS = 1;
  9966  004AB6  8E71               	bsf	3953,7,c	;volatile
  9967  004AB8  D000               	goto	l6710
  9968  004ABA                     l6710:
  9969                           
  9970                           ; BSR set to: 0
  9971                           ;inc\CANlib.h: 243: BRGCON3 |= phaseSeg2;
  9972  004ABA  0100               	movlb	0	; () banked
  9973  004ABC  5186               	movf	CANInitialize@phaseSeg2& (0+255),w,b
  9974  004ABE  1272               	iorwf	3954,f,c	;volatile
  9975                           
  9976                           ; BSR set to: 0
  9977                           ;inc\CANlib.h: 245: if ( flags & CAN_CONFIG_LINE_FILTER_BIT )
  9978  004AC0  0100               	movlb	0	; () banked
  9979  004AC2  A389               	btfss	CANInitialize@flags& (0+255),1,b
  9980  004AC4  D002               	goto	l6716
  9981                           
  9982                           ; BSR set to: 0
  9983                           ;inc\CANlib.h: 246: BRGCON3bits.WAKFIL = 1;
  9984  004AC6  8C72               	bsf	3954,6,c	;volatile
  9985  004AC8  D000               	goto	l6716
  9986  004ACA                     l6716:
  9987                           
  9988                           ; BSR set to: 0
  9989                           ;inc\CANlib.h: 251: RXB0CON = flags & CAN_CONFIG_MSG_BITS;
  9990  004ACA  0100               	movlb	0	; () banked
  9991  004ACC  5189               	movf	CANInitialize@flags& (0+255),w,b
  9992  004ACE  0B60               	andlw	96
  9993  004AD0  6E60               	movwf	3936,c	;volatile
  9994                           
  9995                           ;inc\CANlib.h: 252: if ( (flags & CAN_CONFIG_DBL_BUFFER_BIT)== CAN_CONFIG_DBL_BUFFER_ON 
      +                          )
  9996  004AD2  0100               	movlb	0	; () banked
  9997  004AD4  5189               	movf	CANInitialize@flags& (0+255),w,b
  9998  004AD6  0B10               	andlw	16
  9999  004AD8  0AFF               	xorlw	255
 10000  004ADA  B4D8               	btfsc	status,2,c
 10001                           
 10002                           ; BSR set to: 0
 10003                           ;inc\CANlib.h: 253: RXB0CONbits.RXB0DBEN = 1;
 10004  004ADC  8460               	bsf	3936,2,c	;volatile
 10005                           
 10006                           ; BSR set to: 0
 10007                           ;inc\CANlib.h: 255: RXB1CON = RXB0CON;
 10008  004ADE  CF60 FF50          	movff	3936,3920	;volatile
 10009                           
 10010                           ; BSR set to: 0
 10011                           ;inc\CANlib.h: 259: CANSetMask (CAN_MASK_B1, 0x00000000, CAN_CONFIG_XTD_MSG);
 10012  004AE2  0E00               	movlw	0
 10013  004AE4  0100               	movlb	0	; () banked
 10014  004AE6  6F77               	movwf	CANSetMask@mask& (0+255),b
 10015  004AE8  0E00               	movlw	0
 10016  004AEA  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10017  004AEC  0E00               	movlw	0
 10018  004AEE  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10019  004AF0  0E00               	movlw	0
 10020  004AF2  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10021  004AF4  0EF7               	movlw	247
 10022  004AF6  0100               	movlb	0	; () banked
 10023  004AF8  6F7B               	movwf	CANSetMask@type& (0+255),b
 10024  004AFA  0E01               	movlw	1
 10025  004AFC  EC9E  F01B         	call	_CANSetMask
 10026                           
 10027                           ;inc\CANlib.h: 260: CANSetMask (CAN_MASK_B2, 0x00000000, CAN_CONFIG_XTD_MSG);
 10028  004B00  0E00               	movlw	0
 10029  004B02  0100               	movlb	0	; () banked
 10030  004B04  6F77               	movwf	CANSetMask@mask& (0+255),b
 10031  004B06  0E00               	movlw	0
 10032  004B08  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10033  004B0A  0E00               	movlw	0
 10034  004B0C  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10035  004B0E  0E00               	movlw	0
 10036  004B10  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10037  004B12  0EF7               	movlw	247
 10038  004B14  0100               	movlb	0	; () banked
 10039  004B16  6F7B               	movwf	CANSetMask@type& (0+255),b
 10040  004B18  0E02               	movlw	2
 10041  004B1A  EC9E  F01B         	call	_CANSetMask
 10042                           
 10043                           ;inc\CANlib.h: 263: switch( (flags & CAN_CONFIG_MSG_BITS) | ~CAN_CONFIG_MSG_BITS )
 10044  004B1E  D00F               	goto	l6728
 10045  004B20                     l6722:
 10046                           
 10047                           ;inc\CANlib.h: 266: FilterConfig1 = CAN_CONFIG_XTD_MSG;
 10048  004B20  0EF7               	movlw	247
 10049  004B22  0100               	movlb	0	; () banked
 10050  004B24  6F8F               	movwf	CANInitialize@FilterConfig1& (0+255),b
 10051  004B26  D007               	goto	l6724
 10052  004B28                     l354:
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;inc\CANlib.h: 271: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10056  004B28  0100               	movlb	0	; () banked
 10057  004B2A  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10058                           
 10059                           ;inc\CANlib.h: 272: FilterConfig2 = CAN_CONFIG_STD_MSG;
 10060  004B2C  0100               	movlb	0	; () banked
 10061  004B2E  6990               	setf	CANInitialize@FilterConfig2& (0+255),b
 10062                           
 10063                           ;inc\CANlib.h: 273: break;
 10064  004B30  D028               	goto	l6730
 10065  004B32                     l355:
 10066                           
 10067                           ; BSR set to: 0
 10068                           ;inc\CANlib.h: 275: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10069  004B32  0100               	movlb	0	; () banked
 10070  004B34  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10071  004B36                     l6724:
 10072                           
 10073                           ; BSR set to: 0
 10074                           ;inc\CANlib.h: 276: FilterConfig2 = CAN_CONFIG_XTD_MSG;
 10075  004B36  0EF7               	movlw	247
 10076  004B38  0100               	movlb	0	; () banked
 10077  004B3A  6F90               	movwf	CANInitialize@FilterConfig2& (0+255),b
 10078                           
 10079                           ; BSR set to: 0
 10080                           ;inc\CANlib.h: 278: }
 10081                           
 10082                           ;inc\CANlib.h: 277: break;
 10083  004B3C  D022               	goto	l6730
 10084  004B3E                     l6728:
 10085  004B3E  0E9F               	movlw	159
 10086  004B40  0100               	movlb	0	; () banked
 10087  004B42  6F8A               	movwf	??_CANInitialize& (0+255),b
 10088  004B44  0EFF               	movlw	255
 10089  004B46  0100               	movlb	0	; () banked
 10090  004B48  6F8B               	movwf	(??_CANInitialize+1)& (0+255),b
 10091  004B4A  0100               	movlb	0	; () banked
 10092  004B4C  5189               	movf	CANInitialize@flags& (0+255),w,b
 10093  004B4E  0B60               	andlw	96
 10094  004B50  0100               	movlb	0	; () banked
 10095  004B52  6F8C               	movwf	(??_CANInitialize+2)& (0+255),b
 10096  004B54  6B8D               	clrf	(??_CANInitialize+3)& (0+255),b
 10097  004B56  0100               	movlb	0	; () banked
 10098  004B58  518A               	movf	??_CANInitialize& (0+255),w,b
 10099  004B5A  0100               	movlb	0	; () banked
 10100  004B5C  138C               	iorwf	(??_CANInitialize+2)& (0+255),f,b
 10101  004B5E  0100               	movlb	0	; () banked
 10102  004B60  518B               	movf	(??_CANInitialize+1)& (0+255),w,b
 10103  004B62  0100               	movlb	0	; () banked
 10104  004B64  138D               	iorwf	(??_CANInitialize+3)& (0+255),f,b
 10105                           
 10106                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10107                           ; Switch size 1, requested type "space"
 10108                           ; Number of cases is 1, Range of values is 0 to 0
 10109                           ; switch strategies available:
 10110                           ; Name         Instructions Cycles
 10111                           ; simple_byte            4     3 (average)
 10112                           ;	Chosen strategy is simple_byte
 10113  004B66  0100               	movlb	0	; () banked
 10114  004B68  518D               	movf	(??_CANInitialize+3)& (0+255),w,b
 10115  004B6A  0A00               	xorlw	0	; case 0
 10116  004B6C  A4D8               	btfss	status,2,c
 10117  004B6E  D7E1               	goto	l355
 10118                           
 10119                           ; BSR set to: 0
 10120                           ; Switch size 1, requested type "space"
 10121                           ; Number of cases is 2, Range of values is 191 to 223
 10122                           ; switch strategies available:
 10123                           ; Name         Instructions Cycles
 10124                           ; simple_byte            7     4 (average)
 10125                           ;	Chosen strategy is simple_byte
 10126  004B70  0100               	movlb	0	; () banked
 10127  004B72  518C               	movf	(??_CANInitialize+2)& (0+255),w,b
 10128  004B74  0ABF               	xorlw	191	; case 191
 10129  004B76  B4D8               	btfsc	status,2,c
 10130  004B78  D7D7               	goto	l354
 10131  004B7A  0A60               	xorlw	96	; case 223
 10132  004B7C  B4D8               	btfsc	status,2,c
 10133  004B7E  D7D0               	goto	l6722
 10134  004B80  D7D8               	goto	l355
 10135  004B82                     l6730:
 10136                           
 10137                           ; BSR set to: 0
 10138                           ;inc\CANlib.h: 280: CANSetFilter(CAN_FILTER_B1_F1, 0, FilterConfig1);
 10139  004B82  0E00               	movlw	0
 10140  004B84  0100               	movlb	0	; () banked
 10141  004B86  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10142  004B88  0E00               	movlw	0
 10143  004B8A  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10144  004B8C  0E00               	movlw	0
 10145  004B8E  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10146  004B90  0E00               	movlw	0
 10147  004B92  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10148  004B94  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10149  004B98  0E00               	movlw	0
 10150  004B9A  EC50  F00C         	call	_CANSetFilter
 10151                           
 10152                           ;inc\CANlib.h: 281: CANSetFilter(CAN_FILTER_B1_F2, 0, FilterConfig1);
 10153  004B9E  0E00               	movlw	0
 10154  004BA0  0100               	movlb	0	; () banked
 10155  004BA2  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10156  004BA4  0E00               	movlw	0
 10157  004BA6  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10158  004BA8  0E00               	movlw	0
 10159  004BAA  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10160  004BAC  0E00               	movlw	0
 10161  004BAE  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10162  004BB0  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10163  004BB4  0E01               	movlw	1
 10164  004BB6  EC50  F00C         	call	_CANSetFilter
 10165                           
 10166                           ;inc\CANlib.h: 282: CANSetFilter(CAN_FILTER_B2_F1, 0, FilterConfig2);
 10167  004BBA  0E00               	movlw	0
 10168  004BBC  0100               	movlb	0	; () banked
 10169  004BBE  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10170  004BC0  0E00               	movlw	0
 10171  004BC2  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10172  004BC4  0E00               	movlw	0
 10173  004BC6  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10174  004BC8  0E00               	movlw	0
 10175  004BCA  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10176  004BCC  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10177  004BD0  0E02               	movlw	2
 10178  004BD2  EC50  F00C         	call	_CANSetFilter
 10179                           
 10180                           ;inc\CANlib.h: 283: CANSetFilter(CAN_FILTER_B2_F2, 0, FilterConfig2);
 10181  004BD6  0E00               	movlw	0
 10182  004BD8  0100               	movlb	0	; () banked
 10183  004BDA  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10184  004BDC  0E00               	movlw	0
 10185  004BDE  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10186  004BE0  0E00               	movlw	0
 10187  004BE2  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10188  004BE4  0E00               	movlw	0
 10189  004BE6  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10190  004BE8  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10191  004BEC  0E03               	movlw	3
 10192  004BEE  EC50  F00C         	call	_CANSetFilter
 10193                           
 10194                           ;inc\CANlib.h: 284: CANSetFilter(CAN_FILTER_B2_F3, 0, FilterConfig2);
 10195  004BF2  0E00               	movlw	0
 10196  004BF4  0100               	movlb	0	; () banked
 10197  004BF6  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10198  004BF8  0E00               	movlw	0
 10199  004BFA  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10200  004BFC  0E00               	movlw	0
 10201  004BFE  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10202  004C00  0E00               	movlw	0
 10203  004C02  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10204  004C04  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10205  004C08  0E04               	movlw	4
 10206  004C0A  EC50  F00C         	call	_CANSetFilter
 10207                           
 10208                           ;inc\CANlib.h: 285: CANSetFilter(CAN_FILTER_B2_F4, 0, FilterConfig2);
 10209  004C0E  0E00               	movlw	0
 10210  004C10  0100               	movlb	0	; () banked
 10211  004C12  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10212  004C14  0E00               	movlw	0
 10213  004C16  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10214  004C18  0E00               	movlw	0
 10215  004C1A  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10216  004C1C  0E00               	movlw	0
 10217  004C1E  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10218  004C20  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10219  004C24  0E05               	movlw	5
 10220  004C26  EC50  F00C         	call	_CANSetFilter
 10221                           
 10222                           ;inc\CANlib.h: 287: CANOperationMode(CAN_OP_MODE_NORMAL);
 10223  004C2A  0E00               	movlw	0
 10224  004C2C  ECDC  F02F         	call	_CANOperationMode
 10225  004C30  0012               	return		;funcret
 10226  004C32                     __end_of_CANInitialize:
 10227                           	opt stack 0
 10228                           tblptru	equ	0xFF8
 10229                           tblptrh	equ	0xFF7
 10230                           tblptrl	equ	0xFF6
 10231                           tablat	equ	0xFF5
 10232                           prodh	equ	0xFF4
 10233                           prodl	equ	0xFF3
 10234                           intcon	equ	0xFF2
 10235                           intcon2	equ	0xFF1
 10236                           postinc0	equ	0xFEE
 10237                           wreg	equ	0xFE8
 10238                           indf2	equ	0xFDF
 10239                           postinc2	equ	0xFDE
 10240                           postdec2	equ	0xFDD
 10241                           fsr2h	equ	0xFDA
 10242                           fsr2l	equ	0xFD9
 10243                           status	equ	0xFD8
 10244                           
 10245 ;; *************** function _CANSetMask *****************
 10246 ;; Defined at:
 10247 ;;		line 640 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 10248 ;; Parameters:    Size  Location     Type
 10249 ;;  numBuffer       1    wreg     enum E16388
 10250 ;;  mask            4   23[BANK0 ] unsigned long 
 10251 ;;  type            1   27[BANK0 ] enum E16354
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;  numBuffer       1   32[BANK0 ] enum E16388
 10254 ;;  tamp            4   33[BANK0 ] unsigned long 
 10255 ;; Return value:  Size  Location     Type
 10256 ;;		None               void
 10257 ;; Registers used:
 10258 ;;		wreg, status,2, status,0
 10259 ;; Tracked objects:
 10260 ;;		On entry : 0/0
 10261 ;;		On exit  : 0/0
 10262 ;;		Unchanged: 0/0
 10263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10264 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10265 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;Total ram usage:       14 bytes
 10269 ;; Hardware stack levels used:    1
 10270 ;; Hardware stack levels required when called:    5
 10271 ;; This function calls:
 10272 ;;		Nothing
 10273 ;; This function is called by:
 10274 ;;		_CANInitialize
 10275 ;; This function uses a non-reentrant model
 10276 ;;
 10277                           
 10278                           	psect	text33
 10279  00373C                     __ptext33:
 10280                           	opt stack 0
 10281  00373C                     _CANSetMask:
 10282                           	opt stack 23
 10283                           
 10284                           ;incstack = 0
 10285                           ;CANSetMask@numBuffer stored from wreg
 10286  00373C  0100               	movlb	0	; () banked
 10287  00373E  6F80               	movwf	CANSetMask@numBuffer& (0+255),b
 10288                           
 10289                           ; BSR set to: 0
 10290                           ;inc\CANlib.h: 643: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_STD_MSG))
 10291  003740  0100               	movlb	0	; () banked
 10292  003742  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 10293  003744  A4D8               	btfss	status,2,c
 10294  003746  D057               	goto	l4528
 10295                           
 10296                           ; BSR set to: 0
 10297  003748  0100               	movlb	0	; () banked
 10298  00374A  297B               	incf	CANSetMask@type& (0+255),w,b
 10299  00374C  A4D8               	btfss	status,2,c
 10300  00374E  D053               	goto	l4528
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;inc\CANlib.h: 644: {
 10304                           ;inc\CANlib.h: 645: tamp = (mask >> 3);
 10305  003750  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10306  003754  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10307  003758  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10308  00375C  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10309  003760  0E04               	movlw	4
 10310  003762  D006               	goto	u4850
 10311  003764                     u4855:
 10312  003764  0100               	movlb	0	; () banked
 10313  003766  90D8               	bcf	status,0,c
 10314  003768  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10315  00376A  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10316  00376C  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10317  00376E  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10318  003770                     u4850:
 10319  003770  2EE8               	decfsz	wreg,f,c
 10320  003772  D7F8               	goto	u4855
 10321  003774  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10322  003778  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10323  00377C  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10324  003780  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10325                           
 10326                           ; BSR set to: 0
 10327                           ;inc\CANlib.h: 646: tamp = tamp & 0x000000FF;
 10328  003784  0100               	movlb	0	; () banked
 10329  003786  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10330  003788  0100               	movlb	0	; () banked
 10331  00378A  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10332  00378C  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10333  00378E  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10334  003790  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10335                           
 10336                           ; BSR set to: 0
 10337                           ;inc\CANlib.h: 647: RXM0SIDH = (unsigned char) tamp;
 10338  003792  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 10339                           
 10340                           ; BSR set to: 0
 10341                           ;inc\CANlib.h: 649: tamp = mask & 0x00000007;
 10342  003796  0E07               	movlw	7
 10343  003798  0100               	movlb	0	; () banked
 10344  00379A  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10345  00379C  0100               	movlb	0	; () banked
 10346  00379E  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10347  0037A0  0E00               	movlw	0
 10348  0037A2  0100               	movlb	0	; () banked
 10349  0037A4  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10350  0037A6  0100               	movlb	0	; () banked
 10351  0037A8  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10352  0037AA  0E00               	movlw	0
 10353  0037AC  0100               	movlb	0	; () banked
 10354  0037AE  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10355  0037B0  0100               	movlb	0	; () banked
 10356  0037B2  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10357  0037B4  0E00               	movlw	0
 10358  0037B6  0100               	movlb	0	; () banked
 10359  0037B8  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10360  0037BA  0100               	movlb	0	; () banked
 10361  0037BC  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10362                           
 10363                           ; BSR set to: 0
 10364                           ;inc\CANlib.h: 650: tamp = tamp << 5;
 10365  0037BE  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10366  0037C2  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10367  0037C6  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10368  0037CA  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10369  0037CE  0E05               	movlw	5
 10370  0037D0                     u4865:
 10371  0037D0  90D8               	bcf	status,0,c
 10372  0037D2  0100               	movlb	0	; () banked
 10373  0037D4  377C               	rlcf	??_CANSetMask& (0+255),f,b
 10374  0037D6  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 10375  0037D8  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 10376  0037DA  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 10377  0037DC  2EE8               	decfsz	wreg,f,c
 10378  0037DE  D7F8               	goto	u4865
 10379  0037E0  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10380  0037E4  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10381  0037E8  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10382  0037EC  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10383                           
 10384                           ; BSR set to: 0
 10385                           ;inc\CANlib.h: 651: RXM0SIDL = (unsigned char) tamp;
 10386  0037F0  C081  FF19         	movff	CANSetMask@tamp,3865	;volatile
 10387  0037F4  D000               	goto	l4528
 10388  0037F6                     l4528:
 10389                           
 10390                           ; BSR set to: 0
 10391                           ;inc\CANlib.h: 652: }
 10392                           ;inc\CANlib.h: 654: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_STD_MSG))
 10393  0037F6  0E02               	movlw	2
 10394  0037F8  0100               	movlb	0	; () banked
 10395  0037FA  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 10396  0037FC  A4D8               	btfss	status,2,c
 10397  0037FE  D057               	goto	l4544
 10398                           
 10399                           ; BSR set to: 0
 10400  003800  0100               	movlb	0	; () banked
 10401  003802  297B               	incf	CANSetMask@type& (0+255),w,b
 10402  003804  A4D8               	btfss	status,2,c
 10403  003806  D053               	goto	l4544
 10404                           
 10405                           ; BSR set to: 0
 10406                           ;inc\CANlib.h: 655: {
 10407                           ;inc\CANlib.h: 656: tamp = (mask >> 3);
 10408  003808  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10409  00380C  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10410  003810  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10411  003814  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10412  003818  0E04               	movlw	4
 10413  00381A  D006               	goto	u4890
 10414  00381C                     u4895:
 10415  00381C  0100               	movlb	0	; () banked
 10416  00381E  90D8               	bcf	status,0,c
 10417  003820  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10418  003822  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10419  003824  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10420  003826  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10421  003828                     u4890:
 10422  003828  2EE8               	decfsz	wreg,f,c
 10423  00382A  D7F8               	goto	u4895
 10424  00382C  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10425  003830  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10426  003834  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10427  003838  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10428                           
 10429                           ; BSR set to: 0
 10430                           ;inc\CANlib.h: 657: tamp = tamp & 0x000000FF;
 10431  00383C  0100               	movlb	0	; () banked
 10432  00383E  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10433  003840  0100               	movlb	0	; () banked
 10434  003842  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10435  003844  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10436  003846  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10437  003848  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10438                           
 10439                           ; BSR set to: 0
 10440                           ;inc\CANlib.h: 658: RXM1SIDH = (unsigned char) tamp;
 10441  00384A  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 10442                           
 10443                           ; BSR set to: 0
 10444                           ;inc\CANlib.h: 660: tamp = mask & 0x00000007;
 10445  00384E  0E07               	movlw	7
 10446  003850  0100               	movlb	0	; () banked
 10447  003852  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10448  003854  0100               	movlb	0	; () banked
 10449  003856  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10450  003858  0E00               	movlw	0
 10451  00385A  0100               	movlb	0	; () banked
 10452  00385C  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10453  00385E  0100               	movlb	0	; () banked
 10454  003860  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10455  003862  0E00               	movlw	0
 10456  003864  0100               	movlb	0	; () banked
 10457  003866  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10458  003868  0100               	movlb	0	; () banked
 10459  00386A  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10460  00386C  0E00               	movlw	0
 10461  00386E  0100               	movlb	0	; () banked
 10462  003870  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10463  003872  0100               	movlb	0	; () banked
 10464  003874  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10465                           
 10466                           ; BSR set to: 0
 10467                           ;inc\CANlib.h: 661: tamp = tamp << 5;
 10468  003876  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10469  00387A  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10470  00387E  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10471  003882  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10472  003886  0E05               	movlw	5
 10473  003888                     u4905:
 10474  003888  90D8               	bcf	status,0,c
 10475  00388A  0100               	movlb	0	; () banked
 10476  00388C  377C               	rlcf	??_CANSetMask& (0+255),f,b
 10477  00388E  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 10478  003890  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 10479  003892  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 10480  003894  2EE8               	decfsz	wreg,f,c
 10481  003896  D7F8               	goto	u4905
 10482  003898  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10483  00389C  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10484  0038A0  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10485  0038A4  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10486                           
 10487                           ; BSR set to: 0
 10488                           ;inc\CANlib.h: 662: RXM1SIDL = (unsigned char) tamp;
 10489  0038A8  C081  FF1D         	movff	CANSetMask@tamp,3869	;volatile
 10490  0038AC  D000               	goto	l4544
 10491  0038AE                     l4544:
 10492                           
 10493                           ; BSR set to: 0
 10494                           ;inc\CANlib.h: 663: }
 10495                           ;inc\CANlib.h: 665: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_XTD_MSG))
 10496  0038AE  0100               	movlb	0	; () banked
 10497  0038B0  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 10498  0038B2  A4D8               	btfss	status,2,c
 10499  0038B4  D089               	goto	l4576
 10500                           
 10501                           ; BSR set to: 0
 10502  0038B6  0EF7               	movlw	247
 10503  0038B8  0100               	movlb	0	; () banked
 10504  0038BA  197B               	xorwf	CANSetMask@type& (0+255),w,b
 10505  0038BC  A4D8               	btfss	status,2,c
 10506  0038BE  D084               	goto	l4576
 10507                           
 10508                           ; BSR set to: 0
 10509                           ;inc\CANlib.h: 666: {
 10510                           ;inc\CANlib.h: 667: tamp = mask & 0x000000FF;
 10511  0038C0  0100               	movlb	0	; () banked
 10512  0038C2  5177               	movf	CANSetMask@mask& (0+255),w,b
 10513  0038C4  0100               	movlb	0	; () banked
 10514  0038C6  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10515  0038C8  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10516  0038CA  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10517  0038CC  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10518                           
 10519                           ; BSR set to: 0
 10520                           ;inc\CANlib.h: 668: RXM0EIDL = (unsigned char) tamp;
 10521  0038CE  C081  FF1B         	movff	CANSetMask@tamp,3867	;volatile
 10522                           
 10523                           ; BSR set to: 0
 10524                           ;inc\CANlib.h: 670: tamp = mask & 0x0000FF00;
 10525  0038D2  0E00               	movlw	0
 10526  0038D4  0100               	movlb	0	; () banked
 10527  0038D6  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10528  0038D8  0100               	movlb	0	; () banked
 10529  0038DA  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10530  0038DC  0EFF               	movlw	255
 10531  0038DE  0100               	movlb	0	; () banked
 10532  0038E0  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10533  0038E2  0100               	movlb	0	; () banked
 10534  0038E4  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10535  0038E6  0E00               	movlw	0
 10536  0038E8  0100               	movlb	0	; () banked
 10537  0038EA  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10538  0038EC  0100               	movlb	0	; () banked
 10539  0038EE  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10540  0038F0  0E00               	movlw	0
 10541  0038F2  0100               	movlb	0	; () banked
 10542  0038F4  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10543  0038F6  0100               	movlb	0	; () banked
 10544  0038F8  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10545                           
 10546                           ; BSR set to: 0
 10547                           ;inc\CANlib.h: 671: tamp = tamp >> 8;
 10548  0038FA  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10549  0038FE  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10550  003902  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10551  003906  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10552  00390A  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 10553  00390E  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 10554  003912  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 10555  003916  0100               	movlb	0	; () banked
 10556  003918  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 10557  00391A  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10558  00391E  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10559  003922  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10560  003926  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10561                           
 10562                           ; BSR set to: 0
 10563                           ;inc\CANlib.h: 672: RXM0EIDH = (unsigned char) tamp;
 10564  00392A  C081  FF1A         	movff	CANSetMask@tamp,3866	;volatile
 10565                           
 10566                           ; BSR set to: 0
 10567                           ;inc\CANlib.h: 674: if (mask & 0x00010000)
 10568  00392E  0100               	movlb	0	; () banked
 10569  003930  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 10570  003932  D003               	goto	l428
 10571                           
 10572                           ; BSR set to: 0
 10573                           ;inc\CANlib.h: 675: RXM0SIDLbits.EID16 = 0x01;
 10574  003934  010F               	movlb	15	; () banked
 10575  003936  8119               	bsf	25,0,b	;volatile
 10576  003938  D002               	goto	l429
 10577  00393A                     l428:
 10578                           
 10579                           ; BSR set to: 0
 10580                           ;inc\CANlib.h: 676: else
 10581                           ;inc\CANlib.h: 677: RXM0SIDLbits.EID16 = 0x00;
 10582  00393A  010F               	movlb	15	; () banked
 10583  00393C  9119               	bcf	25,0,b	;volatile
 10584  00393E                     l429:
 10585                           
 10586                           ; BSR set to: 15
 10587                           ;inc\CANlib.h: 679: if (mask & 0x00020000)
 10588  00393E  0100               	movlb	0	; () banked
 10589  003940  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 10590  003942  D003               	goto	l430
 10591                           
 10592                           ; BSR set to: 0
 10593                           ;inc\CANlib.h: 680: RXM0SIDLbits.EID17 = 0x01;
 10594  003944  010F               	movlb	15	; () banked
 10595  003946  8319               	bsf	25,1,b	;volatile
 10596  003948  D002               	goto	l431
 10597  00394A                     l430:
 10598                           
 10599                           ; BSR set to: 0
 10600                           ;inc\CANlib.h: 681: else
 10601                           ;inc\CANlib.h: 682: RXM0SIDLbits.EID17 = 0x00;
 10602  00394A  010F               	movlb	15	; () banked
 10603  00394C  9319               	bcf	25,1,b	;volatile
 10604  00394E                     l431:
 10605                           
 10606                           ; BSR set to: 15
 10607                           ;inc\CANlib.h: 684: if (mask & 0x00040000)
 10608  00394E  0100               	movlb	0	; () banked
 10609  003950  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 10610  003952  D003               	goto	l432
 10611                           
 10612                           ; BSR set to: 0
 10613                           ;inc\CANlib.h: 685: RXM0SIDLbits.SID0 = 0x01;
 10614  003954  010F               	movlb	15	; () banked
 10615  003956  8B19               	bsf	25,5,b	;volatile
 10616  003958  D002               	goto	l433
 10617  00395A                     l432:
 10618                           
 10619                           ; BSR set to: 0
 10620                           ;inc\CANlib.h: 686: else
 10621                           ;inc\CANlib.h: 687: RXM0SIDLbits.SID0 = 0x00;
 10622  00395A  010F               	movlb	15	; () banked
 10623  00395C  9B19               	bcf	25,5,b	;volatile
 10624  00395E                     l433:
 10625                           
 10626                           ; BSR set to: 15
 10627                           ;inc\CANlib.h: 689: if (mask & 0x00080000)
 10628  00395E  0100               	movlb	0	; () banked
 10629  003960  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 10630  003962  D003               	goto	l434
 10631                           
 10632                           ; BSR set to: 0
 10633                           ;inc\CANlib.h: 690: RXM0SIDLbits.SID1 = 0x01;
 10634  003964  010F               	movlb	15	; () banked
 10635  003966  8D19               	bsf	25,6,b	;volatile
 10636  003968  D002               	goto	l435
 10637  00396A                     l434:
 10638                           
 10639                           ; BSR set to: 0
 10640                           ;inc\CANlib.h: 691: else
 10641                           ;inc\CANlib.h: 692: RXM0SIDLbits.SID1 = 0x00;
 10642  00396A  010F               	movlb	15	; () banked
 10643  00396C  9D19               	bcf	25,6,b	;volatile
 10644  00396E                     l435:
 10645                           
 10646                           ; BSR set to: 15
 10647                           ;inc\CANlib.h: 694: if (mask & 0x00100000)
 10648  00396E  0100               	movlb	0	; () banked
 10649  003970  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 10650  003972  D003               	goto	l436
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;inc\CANlib.h: 695: RXM0SIDLbits.SID2 = 0x01 ;
 10654  003974  010F               	movlb	15	; () banked
 10655  003976  8F19               	bsf	25,7,b	;volatile
 10656  003978  D003               	goto	l4570
 10657  00397A                     l436:
 10658                           
 10659                           ; BSR set to: 0
 10660                           ;inc\CANlib.h: 696: else
 10661                           ;inc\CANlib.h: 697: RXM0SIDLbits.SID2 = 0x00 ;
 10662  00397A  010F               	movlb	15	; () banked
 10663  00397C  9F19               	bcf	25,7,b	;volatile
 10664  00397E  D000               	goto	l4570
 10665  003980                     l4570:
 10666                           
 10667                           ; BSR set to: 15
 10668                           ;inc\CANlib.h: 699: tamp = (mask >> 21);
 10669  003980  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10670  003984  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10671  003988  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10672  00398C  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10673  003990  0E16               	movlw	22
 10674  003992  D006               	goto	u4980
 10675  003994                     u4985:
 10676  003994  0100               	movlb	0	; () banked
 10677  003996  90D8               	bcf	status,0,c
 10678  003998  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10679  00399A  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10680  00399C  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10681  00399E  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10682  0039A0                     u4980:
 10683  0039A0  2EE8               	decfsz	wreg,f,c
 10684  0039A2  D7F8               	goto	u4985
 10685  0039A4  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10686  0039A8  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10687  0039AC  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10688  0039B0  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10689                           
 10690                           ; BSR set to: 0
 10691                           ;inc\CANlib.h: 700: tamp = tamp & 0x000000FF;
 10692  0039B4  0100               	movlb	0	; () banked
 10693  0039B6  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10694  0039B8  0100               	movlb	0	; () banked
 10695  0039BA  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10696  0039BC  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10697  0039BE  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10698  0039C0  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10699                           
 10700                           ; BSR set to: 0
 10701                           ;inc\CANlib.h: 701: RXM0SIDH = (unsigned char) tamp;
 10702  0039C2  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 10703  0039C6  D000               	goto	l4576
 10704  0039C8                     l4576:
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;inc\CANlib.h: 702: }
 10708                           ;inc\CANlib.h: 704: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_XTD_MSG))
 10709  0039C8  0E02               	movlw	2
 10710  0039CA  0100               	movlb	0	; () banked
 10711  0039CC  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 10712  0039CE  A4D8               	btfss	status,2,c
 10713  0039D0  0012               	return	
 10714                           
 10715                           ; BSR set to: 0
 10716  0039D2  0EF7               	movlw	247
 10717  0039D4  0100               	movlb	0	; () banked
 10718  0039D6  197B               	xorwf	CANSetMask@type& (0+255),w,b
 10719  0039D8  A4D8               	btfss	status,2,c
 10720  0039DA  0012               	return	
 10721                           
 10722                           ; BSR set to: 0
 10723                           ;inc\CANlib.h: 705: {
 10724                           ;inc\CANlib.h: 706: tamp = mask & 0x000000FF;
 10725  0039DC  0100               	movlb	0	; () banked
 10726  0039DE  5177               	movf	CANSetMask@mask& (0+255),w,b
 10727  0039E0  0100               	movlb	0	; () banked
 10728  0039E2  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10729  0039E4  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10730  0039E6  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10731  0039E8  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10732                           
 10733                           ; BSR set to: 0
 10734                           ;inc\CANlib.h: 707: RXM1EIDL = (unsigned char) tamp;
 10735  0039EA  C081  FF1F         	movff	CANSetMask@tamp,3871	;volatile
 10736                           
 10737                           ; BSR set to: 0
 10738                           ;inc\CANlib.h: 709: tamp = mask & 0x0000FF00;
 10739  0039EE  0E00               	movlw	0
 10740  0039F0  0100               	movlb	0	; () banked
 10741  0039F2  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10742  0039F4  0100               	movlb	0	; () banked
 10743  0039F6  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10744  0039F8  0EFF               	movlw	255
 10745  0039FA  0100               	movlb	0	; () banked
 10746  0039FC  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10747  0039FE  0100               	movlb	0	; () banked
 10748  003A00  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10749  003A02  0E00               	movlw	0
 10750  003A04  0100               	movlb	0	; () banked
 10751  003A06  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10752  003A08  0100               	movlb	0	; () banked
 10753  003A0A  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10754  003A0C  0E00               	movlw	0
 10755  003A0E  0100               	movlb	0	; () banked
 10756  003A10  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10757  003A12  0100               	movlb	0	; () banked
 10758  003A14  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;inc\CANlib.h: 710: tamp = tamp >> 8;
 10762  003A16  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10763  003A1A  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10764  003A1E  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10765  003A22  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10766  003A26  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 10767  003A2A  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 10768  003A2E  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 10769  003A32  0100               	movlb	0	; () banked
 10770  003A34  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 10771  003A36  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10772  003A3A  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10773  003A3E  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10774  003A42  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10775                           
 10776                           ; BSR set to: 0
 10777                           ;inc\CANlib.h: 711: RXM1EIDH = (unsigned char) tamp;
 10778  003A46  C081  FF1E         	movff	CANSetMask@tamp,3870	;volatile
 10779                           
 10780                           ; BSR set to: 0
 10781                           ;inc\CANlib.h: 713: if (mask & 0x00010000)
 10782  003A4A  0100               	movlb	0	; () banked
 10783  003A4C  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 10784  003A4E  D003               	goto	l439
 10785                           
 10786                           ; BSR set to: 0
 10787                           ;inc\CANlib.h: 714: RXM1SIDLbits.EID16 = 0x01;
 10788  003A50  010F               	movlb	15	; () banked
 10789  003A52  811D               	bsf	29,0,b	;volatile
 10790  003A54  D002               	goto	l440
 10791  003A56                     l439:
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;inc\CANlib.h: 715: else
 10795                           ;inc\CANlib.h: 716: RXM1SIDLbits.EID16 = 0x00;
 10796  003A56  010F               	movlb	15	; () banked
 10797  003A58  911D               	bcf	29,0,b	;volatile
 10798  003A5A                     l440:
 10799                           
 10800                           ; BSR set to: 15
 10801                           ;inc\CANlib.h: 718: if (mask & 0x00020000)
 10802  003A5A  0100               	movlb	0	; () banked
 10803  003A5C  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 10804  003A5E  D003               	goto	l441
 10805                           
 10806                           ; BSR set to: 0
 10807                           ;inc\CANlib.h: 719: RXM1SIDLbits.EID17 = 0x01;
 10808  003A60  010F               	movlb	15	; () banked
 10809  003A62  831D               	bsf	29,1,b	;volatile
 10810  003A64  D002               	goto	l442
 10811  003A66                     l441:
 10812                           
 10813                           ; BSR set to: 0
 10814                           ;inc\CANlib.h: 720: else
 10815                           ;inc\CANlib.h: 721: RXM1SIDLbits.EID17 = 0x00;
 10816  003A66  010F               	movlb	15	; () banked
 10817  003A68  931D               	bcf	29,1,b	;volatile
 10818  003A6A                     l442:
 10819                           
 10820                           ; BSR set to: 15
 10821                           ;inc\CANlib.h: 723: if (mask & 0x00040000)
 10822  003A6A  0100               	movlb	0	; () banked
 10823  003A6C  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 10824  003A6E  D003               	goto	l443
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;inc\CANlib.h: 724: RXM1SIDLbits.SID0 = 0x01;
 10828  003A70  010F               	movlb	15	; () banked
 10829  003A72  8B1D               	bsf	29,5,b	;volatile
 10830  003A74  D002               	goto	l444
 10831  003A76                     l443:
 10832                           
 10833                           ; BSR set to: 0
 10834                           ;inc\CANlib.h: 725: else
 10835                           ;inc\CANlib.h: 726: RXM1SIDLbits.SID0 = 0x00;
 10836  003A76  010F               	movlb	15	; () banked
 10837  003A78  9B1D               	bcf	29,5,b	;volatile
 10838  003A7A                     l444:
 10839                           
 10840                           ; BSR set to: 15
 10841                           ;inc\CANlib.h: 728: if (mask & 0x00080000)
 10842  003A7A  0100               	movlb	0	; () banked
 10843  003A7C  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 10844  003A7E  D003               	goto	l445
 10845                           
 10846                           ; BSR set to: 0
 10847                           ;inc\CANlib.h: 729: RXM1SIDLbits.SID1 = 0x01;
 10848  003A80  010F               	movlb	15	; () banked
 10849  003A82  8D1D               	bsf	29,6,b	;volatile
 10850  003A84  D002               	goto	l446
 10851  003A86                     l445:
 10852                           
 10853                           ; BSR set to: 0
 10854                           ;inc\CANlib.h: 730: else
 10855                           ;inc\CANlib.h: 731: RXM1SIDLbits.SID1 = 0x00;
 10856  003A86  010F               	movlb	15	; () banked
 10857  003A88  9D1D               	bcf	29,6,b	;volatile
 10858  003A8A                     l446:
 10859                           
 10860                           ; BSR set to: 15
 10861                           ;inc\CANlib.h: 733: if (mask & 0x00100000)
 10862  003A8A  0100               	movlb	0	; () banked
 10863  003A8C  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 10864  003A8E  D003               	goto	l447
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;inc\CANlib.h: 734: RXM1SIDLbits.SID2 = 0x01 ;
 10868  003A90  010F               	movlb	15	; () banked
 10869  003A92  8F1D               	bsf	29,7,b	;volatile
 10870  003A94  D003               	goto	l4602
 10871  003A96                     l447:
 10872                           
 10873                           ; BSR set to: 0
 10874                           ;inc\CANlib.h: 735: else
 10875                           ;inc\CANlib.h: 736: RXM1SIDLbits.SID2 = 0x00 ;
 10876  003A96  010F               	movlb	15	; () banked
 10877  003A98  9F1D               	bcf	29,7,b	;volatile
 10878  003A9A  D000               	goto	l4602
 10879  003A9C                     l4602:
 10880                           
 10881                           ; BSR set to: 15
 10882                           ;inc\CANlib.h: 738: tamp = (mask >> 21);
 10883  003A9C  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10884  003AA0  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10885  003AA4  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10886  003AA8  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10887  003AAC  0E16               	movlw	22
 10888  003AAE  D006               	goto	u5060
 10889  003AB0                     u5065:
 10890  003AB0  0100               	movlb	0	; () banked
 10891  003AB2  90D8               	bcf	status,0,c
 10892  003AB4  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10893  003AB6  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10894  003AB8  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10895  003ABA  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10896  003ABC                     u5060:
 10897  003ABC  2EE8               	decfsz	wreg,f,c
 10898  003ABE  D7F8               	goto	u5065
 10899  003AC0  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10900  003AC4  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10901  003AC8  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10902  003ACC  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;inc\CANlib.h: 739: tamp = tamp & 0x000000FF;
 10906  003AD0  0100               	movlb	0	; () banked
 10907  003AD2  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10908  003AD4  0100               	movlb	0	; () banked
 10909  003AD6  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10910  003AD8  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10911  003ADA  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10912  003ADC  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10913                           
 10914                           ; BSR set to: 0
 10915                           ;inc\CANlib.h: 740: RXM1SIDH = (unsigned char) tamp;
 10916  003ADE  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 10917  003AE2  0012               	return	
 10918                           
 10919                           ; BSR set to: 0
 10920                           
 10921                           ; BSR set to: 0
 10922  003AE4  0012               	return		;funcret
 10923  003AE6                     __end_of_CANSetMask:
 10924                           	opt stack 0
 10925                           tblptru	equ	0xFF8
 10926                           tblptrh	equ	0xFF7
 10927                           tblptrl	equ	0xFF6
 10928                           tablat	equ	0xFF5
 10929                           prodh	equ	0xFF4
 10930                           prodl	equ	0xFF3
 10931                           intcon	equ	0xFF2
 10932                           intcon2	equ	0xFF1
 10933                           postinc0	equ	0xFEE
 10934                           wreg	equ	0xFE8
 10935                           indf2	equ	0xFDF
 10936                           postinc2	equ	0xFDE
 10937                           postdec2	equ	0xFDD
 10938                           fsr2h	equ	0xFDA
 10939                           fsr2l	equ	0xFD9
 10940                           status	equ	0xFD8
 10941                           
 10942 ;; *************** function _CANSetFilter *****************
 10943 ;; Defined at:
 10944 ;;		line 748 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 10945 ;; Parameters:    Size  Location     Type
 10946 ;;  numBuffer       1    wreg     enum E16391
 10947 ;;  filter          4   23[BANK0 ] unsigned long 
 10948 ;;  type            1   27[BANK0 ] enum E16354
 10949 ;; Auto vars:     Size  Location     Type
 10950 ;;  numBuffer       1   32[BANK0 ] enum E16391
 10951 ;;  tamp            4   33[BANK0 ] unsigned long 
 10952 ;; Return value:  Size  Location     Type
 10953 ;;		None               void
 10954 ;; Registers used:
 10955 ;;		wreg, status,2, status,0
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10961 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10965 ;;Total ram usage:       14 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    5
 10968 ;; This function calls:
 10969 ;;		Nothing
 10970 ;; This function is called by:
 10971 ;;		_CANInitialize
 10972 ;; This function uses a non-reentrant model
 10973 ;;
 10974                           
 10975                           	psect	text34
 10976  0018A0                     __ptext34:
 10977                           	opt stack 0
 10978  0018A0                     _CANSetFilter:
 10979                           	opt stack 23
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;incstack = 0
 10983                           ;CANSetFilter@numBuffer stored from wreg
 10984  0018A0  0100               	movlb	0	; () banked
 10985  0018A2  6F80               	movwf	CANSetFilter@numBuffer& (0+255),b
 10986                           
 10987                           ; BSR set to: 0
 10988                           ;inc\CANlib.h: 750: unsigned long tamp;
 10989                           ;inc\CANlib.h: 752: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_STD_MSG))
 10990  0018A4  0100               	movlb	0	; () banked
 10991  0018A6  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 10992  0018A8  0100               	movlb	0	; () banked
 10993  0018AA  A4D8               	btfss	status,2,c
 10994  0018AC  D059               	goto	l4626
 10995                           
 10996                           ; BSR set to: 0
 10997  0018AE  0100               	movlb	0	; () banked
 10998  0018B0  297B               	incf	CANSetFilter@type& (0+255),w,b
 10999  0018B2  A4D8               	btfss	status,2,c
 11000  0018B4  D055               	goto	l4626
 11001                           
 11002                           ; BSR set to: 0
 11003                           ;inc\CANlib.h: 753: {
 11004                           ;inc\CANlib.h: 754: RXF0SIDLbits.EXIDEN = 0x00;
 11005  0018B6  010F               	movlb	15	; () banked
 11006  0018B8  9701               	bcf	1,3,b	;volatile
 11007                           
 11008                           ; BSR set to: 15
 11009                           ;inc\CANlib.h: 756: tamp = (filter >> 3);
 11010  0018BA  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11011  0018BE  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11012  0018C2  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11013  0018C6  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11014  0018CA  0E04               	movlw	4
 11015  0018CC  D006               	goto	u5090
 11016  0018CE                     u5095:
 11017  0018CE  0100               	movlb	0	; () banked
 11018  0018D0  90D8               	bcf	status,0,c
 11019  0018D2  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11020  0018D4  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11021  0018D6  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11022  0018D8  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11023  0018DA                     u5090:
 11024  0018DA  2EE8               	decfsz	wreg,f,c
 11025  0018DC  D7F8               	goto	u5095
 11026  0018DE  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11027  0018E2  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11028  0018E6  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11029  0018EA  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11030                           
 11031                           ; BSR set to: 0
 11032                           ;inc\CANlib.h: 757: tamp = tamp & 0x000000FF;
 11033  0018EE  0100               	movlb	0	; () banked
 11034  0018F0  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11035  0018F2  0100               	movlb	0	; () banked
 11036  0018F4  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11037  0018F6  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11038  0018F8  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11039  0018FA  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;inc\CANlib.h: 758: RXF0SIDH = (unsigned char) tamp;
 11043  0018FC  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 11044                           
 11045                           ; BSR set to: 0
 11046                           ;inc\CANlib.h: 760: tamp = filter & 0x00000007;
 11047  001900  0E07               	movlw	7
 11048  001902  0100               	movlb	0	; () banked
 11049  001904  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11050  001906  0100               	movlb	0	; () banked
 11051  001908  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11052  00190A  0E00               	movlw	0
 11053  00190C  0100               	movlb	0	; () banked
 11054  00190E  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11055  001910  0100               	movlb	0	; () banked
 11056  001912  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11057  001914  0E00               	movlw	0
 11058  001916  0100               	movlb	0	; () banked
 11059  001918  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11060  00191A  0100               	movlb	0	; () banked
 11061  00191C  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11062  00191E  0E00               	movlw	0
 11063  001920  0100               	movlb	0	; () banked
 11064  001922  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11065  001924  0100               	movlb	0	; () banked
 11066  001926  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11067                           
 11068                           ; BSR set to: 0
 11069                           ;inc\CANlib.h: 761: tamp = tamp << 5;
 11070  001928  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11071  00192C  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11072  001930  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11073  001934  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11074  001938  0E05               	movlw	5
 11075  00193A                     u5105:
 11076  00193A  90D8               	bcf	status,0,c
 11077  00193C  0100               	movlb	0	; () banked
 11078  00193E  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11079  001940  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11080  001942  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11081  001944  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11082  001946  2EE8               	decfsz	wreg,f,c
 11083  001948  D7F8               	goto	u5105
 11084  00194A  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11085  00194E  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11086  001952  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11087  001956  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11088                           
 11089                           ; BSR set to: 0
 11090                           ;inc\CANlib.h: 762: RXF0SIDL = (unsigned char) tamp;
 11091  00195A  C081  FF01         	movff	CANSetFilter@tamp,3841	;volatile
 11092  00195E  D000               	goto	l4626
 11093  001960                     l4626:
 11094                           
 11095                           ; BSR set to: 0
 11096                           ;inc\CANlib.h: 763: }
 11097                           ;inc\CANlib.h: 765: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_STD_MSG))
 11098  001960  0100               	movlb	0	; () banked
 11099  001962  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 11100  001964  A4D8               	btfss	status,2,c
 11101  001966  D059               	goto	l4644
 11102                           
 11103                           ; BSR set to: 0
 11104  001968  0100               	movlb	0	; () banked
 11105  00196A  297B               	incf	CANSetFilter@type& (0+255),w,b
 11106  00196C  A4D8               	btfss	status,2,c
 11107  00196E  D055               	goto	l4644
 11108                           
 11109                           ; BSR set to: 0
 11110                           ;inc\CANlib.h: 766: {
 11111                           ;inc\CANlib.h: 767: RXF1SIDLbits.EXIDEN = 0x00;
 11112  001970  010F               	movlb	15	; () banked
 11113  001972  9705               	bcf	5,3,b	;volatile
 11114                           
 11115                           ; BSR set to: 15
 11116                           ;inc\CANlib.h: 769: tamp = (filter >> 3);
 11117  001974  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11118  001978  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11119  00197C  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11120  001980  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11121  001984  0E04               	movlw	4
 11122  001986  D006               	goto	u5130
 11123  001988                     u5135:
 11124  001988  0100               	movlb	0	; () banked
 11125  00198A  90D8               	bcf	status,0,c
 11126  00198C  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11127  00198E  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11128  001990  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11129  001992  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11130  001994                     u5130:
 11131  001994  2EE8               	decfsz	wreg,f,c
 11132  001996  D7F8               	goto	u5135
 11133  001998  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11134  00199C  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11135  0019A0  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11136  0019A4  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11137                           
 11138                           ; BSR set to: 0
 11139                           ;inc\CANlib.h: 770: tamp = tamp & 0x000000FF;
 11140  0019A8  0100               	movlb	0	; () banked
 11141  0019AA  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11142  0019AC  0100               	movlb	0	; () banked
 11143  0019AE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11144  0019B0  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11145  0019B2  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11146  0019B4  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11147                           
 11148                           ; BSR set to: 0
 11149                           ;inc\CANlib.h: 771: RXF1SIDH = (unsigned char) tamp;
 11150  0019B6  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 11151                           
 11152                           ; BSR set to: 0
 11153                           ;inc\CANlib.h: 773: tamp = filter & 0x00000007;
 11154  0019BA  0E07               	movlw	7
 11155  0019BC  0100               	movlb	0	; () banked
 11156  0019BE  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11157  0019C0  0100               	movlb	0	; () banked
 11158  0019C2  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11159  0019C4  0E00               	movlw	0
 11160  0019C6  0100               	movlb	0	; () banked
 11161  0019C8  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11162  0019CA  0100               	movlb	0	; () banked
 11163  0019CC  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11164  0019CE  0E00               	movlw	0
 11165  0019D0  0100               	movlb	0	; () banked
 11166  0019D2  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11167  0019D4  0100               	movlb	0	; () banked
 11168  0019D6  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11169  0019D8  0E00               	movlw	0
 11170  0019DA  0100               	movlb	0	; () banked
 11171  0019DC  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11172  0019DE  0100               	movlb	0	; () banked
 11173  0019E0  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11174                           
 11175                           ; BSR set to: 0
 11176                           ;inc\CANlib.h: 774: tamp = tamp << 5;
 11177  0019E2  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11178  0019E6  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11179  0019EA  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11180  0019EE  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11181  0019F2  0E05               	movlw	5
 11182  0019F4                     u5145:
 11183  0019F4  90D8               	bcf	status,0,c
 11184  0019F6  0100               	movlb	0	; () banked
 11185  0019F8  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11186  0019FA  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11187  0019FC  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11188  0019FE  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11189  001A00  2EE8               	decfsz	wreg,f,c
 11190  001A02  D7F8               	goto	u5145
 11191  001A04  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11192  001A08  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11193  001A0C  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11194  001A10  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11195                           
 11196                           ; BSR set to: 0
 11197                           ;inc\CANlib.h: 775: RXF1SIDL = (unsigned char) tamp;
 11198  001A14  C081  FF05         	movff	CANSetFilter@tamp,3845	;volatile
 11199  001A18  D000               	goto	l4644
 11200  001A1A                     l4644:
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;inc\CANlib.h: 776: }
 11204                           ;inc\CANlib.h: 778: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_STD_MSG))
 11205  001A1A  0E02               	movlw	2
 11206  001A1C  0100               	movlb	0	; () banked
 11207  001A1E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11208  001A20  A4D8               	btfss	status,2,c
 11209  001A22  D059               	goto	l4662
 11210                           
 11211                           ; BSR set to: 0
 11212  001A24  0100               	movlb	0	; () banked
 11213  001A26  297B               	incf	CANSetFilter@type& (0+255),w,b
 11214  001A28  A4D8               	btfss	status,2,c
 11215  001A2A  D055               	goto	l4662
 11216                           
 11217                           ; BSR set to: 0
 11218                           ;inc\CANlib.h: 779: {
 11219                           ;inc\CANlib.h: 780: RXF2SIDLbits.EXIDEN = 0x00;
 11220  001A2C  010F               	movlb	15	; () banked
 11221  001A2E  9709               	bcf	9,3,b	;volatile
 11222                           
 11223                           ; BSR set to: 15
 11224                           ;inc\CANlib.h: 782: tamp = (filter >> 3);
 11225  001A30  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11226  001A34  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11227  001A38  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11228  001A3C  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11229  001A40  0E04               	movlw	4
 11230  001A42  D006               	goto	u5170
 11231  001A44                     u5175:
 11232  001A44  0100               	movlb	0	; () banked
 11233  001A46  90D8               	bcf	status,0,c
 11234  001A48  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11235  001A4A  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11236  001A4C  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11237  001A4E  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11238  001A50                     u5170:
 11239  001A50  2EE8               	decfsz	wreg,f,c
 11240  001A52  D7F8               	goto	u5175
 11241  001A54  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11242  001A58  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11243  001A5C  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11244  001A60  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;inc\CANlib.h: 783: tamp = tamp & 0x000000FF;
 11248  001A64  0100               	movlb	0	; () banked
 11249  001A66  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11250  001A68  0100               	movlb	0	; () banked
 11251  001A6A  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11252  001A6C  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11253  001A6E  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11254  001A70  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11255                           
 11256                           ; BSR set to: 0
 11257                           ;inc\CANlib.h: 784: RXF2SIDH = (unsigned char) tamp;
 11258  001A72  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;inc\CANlib.h: 786: tamp = filter & 0x00000007;
 11262  001A76  0E07               	movlw	7
 11263  001A78  0100               	movlb	0	; () banked
 11264  001A7A  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11265  001A7C  0100               	movlb	0	; () banked
 11266  001A7E  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11267  001A80  0E00               	movlw	0
 11268  001A82  0100               	movlb	0	; () banked
 11269  001A84  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11270  001A86  0100               	movlb	0	; () banked
 11271  001A88  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11272  001A8A  0E00               	movlw	0
 11273  001A8C  0100               	movlb	0	; () banked
 11274  001A8E  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11275  001A90  0100               	movlb	0	; () banked
 11276  001A92  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11277  001A94  0E00               	movlw	0
 11278  001A96  0100               	movlb	0	; () banked
 11279  001A98  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11280  001A9A  0100               	movlb	0	; () banked
 11281  001A9C  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11282                           
 11283                           ; BSR set to: 0
 11284                           ;inc\CANlib.h: 787: tamp = tamp << 5;
 11285  001A9E  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11286  001AA2  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11287  001AA6  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11288  001AAA  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11289  001AAE  0E05               	movlw	5
 11290  001AB0                     u5185:
 11291  001AB0  90D8               	bcf	status,0,c
 11292  001AB2  0100               	movlb	0	; () banked
 11293  001AB4  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11294  001AB6  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11295  001AB8  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11296  001ABA  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11297  001ABC  2EE8               	decfsz	wreg,f,c
 11298  001ABE  D7F8               	goto	u5185
 11299  001AC0  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11300  001AC4  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11301  001AC8  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11302  001ACC  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11303                           
 11304                           ; BSR set to: 0
 11305                           ;inc\CANlib.h: 788: RXF2SIDL = (unsigned char) tamp;
 11306  001AD0  C081  FF09         	movff	CANSetFilter@tamp,3849	;volatile
 11307  001AD4  D000               	goto	l4662
 11308  001AD6                     l4662:
 11309                           
 11310                           ; BSR set to: 0
 11311                           ;inc\CANlib.h: 789: }
 11312                           ;inc\CANlib.h: 791: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_STD_MSG))
 11313  001AD6  0E03               	movlw	3
 11314  001AD8  0100               	movlb	0	; () banked
 11315  001ADA  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11316  001ADC  A4D8               	btfss	status,2,c
 11317  001ADE  D059               	goto	l4680
 11318                           
 11319                           ; BSR set to: 0
 11320  001AE0  0100               	movlb	0	; () banked
 11321  001AE2  297B               	incf	CANSetFilter@type& (0+255),w,b
 11322  001AE4  A4D8               	btfss	status,2,c
 11323  001AE6  D055               	goto	l4680
 11324                           
 11325                           ; BSR set to: 0
 11326                           ;inc\CANlib.h: 792: {
 11327                           ;inc\CANlib.h: 793: RXF3SIDLbits.EXIDEN = 0x00;
 11328  001AE8  010F               	movlb	15	; () banked
 11329  001AEA  970D               	bcf	13,3,b	;volatile
 11330                           
 11331                           ; BSR set to: 15
 11332                           ;inc\CANlib.h: 795: tamp = (filter >> 3);
 11333  001AEC  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11334  001AF0  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11335  001AF4  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11336  001AF8  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11337  001AFC  0E04               	movlw	4
 11338  001AFE  D006               	goto	u5210
 11339  001B00                     u5215:
 11340  001B00  0100               	movlb	0	; () banked
 11341  001B02  90D8               	bcf	status,0,c
 11342  001B04  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11343  001B06  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11344  001B08  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11345  001B0A  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11346  001B0C                     u5210:
 11347  001B0C  2EE8               	decfsz	wreg,f,c
 11348  001B0E  D7F8               	goto	u5215
 11349  001B10  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11350  001B14  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11351  001B18  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11352  001B1C  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11353                           
 11354                           ; BSR set to: 0
 11355                           ;inc\CANlib.h: 796: tamp = tamp & 0x000000FF;
 11356  001B20  0100               	movlb	0	; () banked
 11357  001B22  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11358  001B24  0100               	movlb	0	; () banked
 11359  001B26  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11360  001B28  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11361  001B2A  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11362  001B2C  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11363                           
 11364                           ; BSR set to: 0
 11365                           ;inc\CANlib.h: 797: RXF3SIDH = (unsigned char) tamp;
 11366  001B2E  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;inc\CANlib.h: 799: tamp = filter & 0x00000007;
 11370  001B32  0E07               	movlw	7
 11371  001B34  0100               	movlb	0	; () banked
 11372  001B36  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11373  001B38  0100               	movlb	0	; () banked
 11374  001B3A  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11375  001B3C  0E00               	movlw	0
 11376  001B3E  0100               	movlb	0	; () banked
 11377  001B40  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11378  001B42  0100               	movlb	0	; () banked
 11379  001B44  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11380  001B46  0E00               	movlw	0
 11381  001B48  0100               	movlb	0	; () banked
 11382  001B4A  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11383  001B4C  0100               	movlb	0	; () banked
 11384  001B4E  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11385  001B50  0E00               	movlw	0
 11386  001B52  0100               	movlb	0	; () banked
 11387  001B54  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11388  001B56  0100               	movlb	0	; () banked
 11389  001B58  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;inc\CANlib.h: 800: tamp = tamp << 5;
 11393  001B5A  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11394  001B5E  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11395  001B62  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11396  001B66  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11397  001B6A  0E05               	movlw	5
 11398  001B6C                     u5225:
 11399  001B6C  90D8               	bcf	status,0,c
 11400  001B6E  0100               	movlb	0	; () banked
 11401  001B70  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11402  001B72  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11403  001B74  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11404  001B76  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11405  001B78  2EE8               	decfsz	wreg,f,c
 11406  001B7A  D7F8               	goto	u5225
 11407  001B7C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11408  001B80  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11409  001B84  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11410  001B88  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11411                           
 11412                           ; BSR set to: 0
 11413                           ;inc\CANlib.h: 801: RXF3SIDL = (unsigned char) tamp;
 11414  001B8C  C081  FF0D         	movff	CANSetFilter@tamp,3853	;volatile
 11415  001B90  D000               	goto	l4680
 11416  001B92                     l4680:
 11417                           
 11418                           ; BSR set to: 0
 11419                           ;inc\CANlib.h: 802: }
 11420                           ;inc\CANlib.h: 804: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_STD_MSG))
 11421  001B92  0E04               	movlw	4
 11422  001B94  0100               	movlb	0	; () banked
 11423  001B96  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11424  001B98  A4D8               	btfss	status,2,c
 11425  001B9A  D059               	goto	l4698
 11426                           
 11427                           ; BSR set to: 0
 11428  001B9C  0100               	movlb	0	; () banked
 11429  001B9E  297B               	incf	CANSetFilter@type& (0+255),w,b
 11430  001BA0  A4D8               	btfss	status,2,c
 11431  001BA2  D055               	goto	l4698
 11432                           
 11433                           ; BSR set to: 0
 11434                           ;inc\CANlib.h: 805: {
 11435                           ;inc\CANlib.h: 806: RXF4SIDLbits.EXIDEN = 0x00;
 11436  001BA4  010F               	movlb	15	; () banked
 11437  001BA6  9711               	bcf	17,3,b	;volatile
 11438                           
 11439                           ; BSR set to: 15
 11440                           ;inc\CANlib.h: 808: tamp = (filter >> 3);
 11441  001BA8  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11442  001BAC  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11443  001BB0  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11444  001BB4  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11445  001BB8  0E04               	movlw	4
 11446  001BBA  D006               	goto	u5250
 11447  001BBC                     u5255:
 11448  001BBC  0100               	movlb	0	; () banked
 11449  001BBE  90D8               	bcf	status,0,c
 11450  001BC0  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11451  001BC2  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11452  001BC4  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11453  001BC6  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11454  001BC8                     u5250:
 11455  001BC8  2EE8               	decfsz	wreg,f,c
 11456  001BCA  D7F8               	goto	u5255
 11457  001BCC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11458  001BD0  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11459  001BD4  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11460  001BD8  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;inc\CANlib.h: 809: tamp = tamp & 0x000000FF;
 11464  001BDC  0100               	movlb	0	; () banked
 11465  001BDE  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11466  001BE0  0100               	movlb	0	; () banked
 11467  001BE2  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11468  001BE4  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11469  001BE6  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11470  001BE8  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11471                           
 11472                           ; BSR set to: 0
 11473                           ;inc\CANlib.h: 810: RXF4SIDH = (unsigned char) tamp;
 11474  001BEA  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 11475                           
 11476                           ; BSR set to: 0
 11477                           ;inc\CANlib.h: 812: tamp = filter & 0x00000007;
 11478  001BEE  0E07               	movlw	7
 11479  001BF0  0100               	movlb	0	; () banked
 11480  001BF2  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11481  001BF4  0100               	movlb	0	; () banked
 11482  001BF6  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11483  001BF8  0E00               	movlw	0
 11484  001BFA  0100               	movlb	0	; () banked
 11485  001BFC  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11486  001BFE  0100               	movlb	0	; () banked
 11487  001C00  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11488  001C02  0E00               	movlw	0
 11489  001C04  0100               	movlb	0	; () banked
 11490  001C06  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11491  001C08  0100               	movlb	0	; () banked
 11492  001C0A  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11493  001C0C  0E00               	movlw	0
 11494  001C0E  0100               	movlb	0	; () banked
 11495  001C10  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11496  001C12  0100               	movlb	0	; () banked
 11497  001C14  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11498                           
 11499                           ; BSR set to: 0
 11500                           ;inc\CANlib.h: 813: tamp = tamp << 5;
 11501  001C16  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11502  001C1A  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11503  001C1E  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11504  001C22  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11505  001C26  0E05               	movlw	5
 11506  001C28                     u5265:
 11507  001C28  90D8               	bcf	status,0,c
 11508  001C2A  0100               	movlb	0	; () banked
 11509  001C2C  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11510  001C2E  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11511  001C30  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11512  001C32  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11513  001C34  2EE8               	decfsz	wreg,f,c
 11514  001C36  D7F8               	goto	u5265
 11515  001C38  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11516  001C3C  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11517  001C40  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11518  001C44  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11519                           
 11520                           ; BSR set to: 0
 11521                           ;inc\CANlib.h: 814: RXF4SIDL = (unsigned char) tamp;
 11522  001C48  C081  FF11         	movff	CANSetFilter@tamp,3857	;volatile
 11523  001C4C  D000               	goto	l4698
 11524  001C4E                     l4698:
 11525                           
 11526                           ; BSR set to: 0
 11527                           ;inc\CANlib.h: 815: }
 11528                           ;inc\CANlib.h: 817: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_STD_MSG))
 11529  001C4E  0E05               	movlw	5
 11530  001C50  0100               	movlb	0	; () banked
 11531  001C52  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11532  001C54  A4D8               	btfss	status,2,c
 11533  001C56  D059               	goto	l4716
 11534                           
 11535                           ; BSR set to: 0
 11536  001C58  0100               	movlb	0	; () banked
 11537  001C5A  297B               	incf	CANSetFilter@type& (0+255),w,b
 11538  001C5C  A4D8               	btfss	status,2,c
 11539  001C5E  D055               	goto	l4716
 11540                           
 11541                           ; BSR set to: 0
 11542                           ;inc\CANlib.h: 818: {
 11543                           ;inc\CANlib.h: 819: RXF5SIDLbits.EXIDEN = 0x00;
 11544  001C60  010F               	movlb	15	; () banked
 11545  001C62  9715               	bcf	21,3,b	;volatile
 11546                           
 11547                           ; BSR set to: 15
 11548                           ;inc\CANlib.h: 821: tamp = (filter >> 3);
 11549  001C64  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11550  001C68  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11551  001C6C  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11552  001C70  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11553  001C74  0E04               	movlw	4
 11554  001C76  D006               	goto	u5290
 11555  001C78                     u5295:
 11556  001C78  0100               	movlb	0	; () banked
 11557  001C7A  90D8               	bcf	status,0,c
 11558  001C7C  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11559  001C7E  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11560  001C80  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11561  001C82  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11562  001C84                     u5290:
 11563  001C84  2EE8               	decfsz	wreg,f,c
 11564  001C86  D7F8               	goto	u5295
 11565  001C88  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11566  001C8C  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11567  001C90  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11568  001C94  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;inc\CANlib.h: 822: tamp = tamp & 0x000000FF;
 11572  001C98  0100               	movlb	0	; () banked
 11573  001C9A  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11574  001C9C  0100               	movlb	0	; () banked
 11575  001C9E  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11576  001CA0  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11577  001CA2  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11578  001CA4  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11579                           
 11580                           ; BSR set to: 0
 11581                           ;inc\CANlib.h: 823: RXF5SIDH = (unsigned char) tamp;
 11582  001CA6  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 11583                           
 11584                           ; BSR set to: 0
 11585                           ;inc\CANlib.h: 825: tamp = filter & 0x00000007;
 11586  001CAA  0E07               	movlw	7
 11587  001CAC  0100               	movlb	0	; () banked
 11588  001CAE  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11589  001CB0  0100               	movlb	0	; () banked
 11590  001CB2  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11591  001CB4  0E00               	movlw	0
 11592  001CB6  0100               	movlb	0	; () banked
 11593  001CB8  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11594  001CBA  0100               	movlb	0	; () banked
 11595  001CBC  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11596  001CBE  0E00               	movlw	0
 11597  001CC0  0100               	movlb	0	; () banked
 11598  001CC2  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11599  001CC4  0100               	movlb	0	; () banked
 11600  001CC6  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11601  001CC8  0E00               	movlw	0
 11602  001CCA  0100               	movlb	0	; () banked
 11603  001CCC  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11604  001CCE  0100               	movlb	0	; () banked
 11605  001CD0  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;inc\CANlib.h: 826: tamp = tamp << 5;
 11609  001CD2  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11610  001CD6  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11611  001CDA  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11612  001CDE  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11613  001CE2  0E05               	movlw	5
 11614  001CE4                     u5305:
 11615  001CE4  90D8               	bcf	status,0,c
 11616  001CE6  0100               	movlb	0	; () banked
 11617  001CE8  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11618  001CEA  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11619  001CEC  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11620  001CEE  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11621  001CF0  2EE8               	decfsz	wreg,f,c
 11622  001CF2  D7F8               	goto	u5305
 11623  001CF4  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11624  001CF8  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11625  001CFC  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11626  001D00  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11627                           
 11628                           ; BSR set to: 0
 11629                           ;inc\CANlib.h: 827: RXF5SIDL = (unsigned char) tamp;
 11630  001D04  C081  FF15         	movff	CANSetFilter@tamp,3861	;volatile
 11631  001D08  D000               	goto	l4716
 11632  001D0A                     l4716:
 11633                           
 11634                           ; BSR set to: 0
 11635                           ;inc\CANlib.h: 828: }
 11636                           ;inc\CANlib.h: 831: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_XTD_MSG))
 11637  001D0A  0100               	movlb	0	; () banked
 11638  001D0C  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 11639  001D0E  0100               	movlb	0	; () banked
 11640  001D10  A4D8               	btfss	status,2,c
 11641  001D12  D08B               	goto	l4750
 11642                           
 11643                           ; BSR set to: 0
 11644  001D14  0EF7               	movlw	247
 11645  001D16  0100               	movlb	0	; () banked
 11646  001D18  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 11647  001D1A  A4D8               	btfss	status,2,c
 11648  001D1C  D086               	goto	l4750
 11649                           
 11650                           ; BSR set to: 0
 11651                           ;inc\CANlib.h: 832: {
 11652                           ;inc\CANlib.h: 833: RXF0SIDLbits.EXIDEN = 0x01;
 11653  001D1E  010F               	movlb	15	; () banked
 11654  001D20  8701               	bsf	1,3,b	;volatile
 11655                           
 11656                           ; BSR set to: 15
 11657                           ;inc\CANlib.h: 835: tamp = filter & 0x000000FF;
 11658  001D22  0100               	movlb	0	; () banked
 11659  001D24  5177               	movf	CANSetFilter@filter& (0+255),w,b
 11660  001D26  0100               	movlb	0	; () banked
 11661  001D28  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11662  001D2A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11663  001D2C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11664  001D2E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11665                           
 11666                           ; BSR set to: 0
 11667                           ;inc\CANlib.h: 836: RXF0EIDL = (unsigned char) tamp;
 11668  001D30  C081  FF03         	movff	CANSetFilter@tamp,3843	;volatile
 11669                           
 11670                           ; BSR set to: 0
 11671                           ;inc\CANlib.h: 838: tamp = filter & 0x0000FF00;
 11672  001D34  0E00               	movlw	0
 11673  001D36  0100               	movlb	0	; () banked
 11674  001D38  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11675  001D3A  0100               	movlb	0	; () banked
 11676  001D3C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11677  001D3E  0EFF               	movlw	255
 11678  001D40  0100               	movlb	0	; () banked
 11679  001D42  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11680  001D44  0100               	movlb	0	; () banked
 11681  001D46  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11682  001D48  0E00               	movlw	0
 11683  001D4A  0100               	movlb	0	; () banked
 11684  001D4C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11685  001D4E  0100               	movlb	0	; () banked
 11686  001D50  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11687  001D52  0E00               	movlw	0
 11688  001D54  0100               	movlb	0	; () banked
 11689  001D56  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11690  001D58  0100               	movlb	0	; () banked
 11691  001D5A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11692                           
 11693                           ; BSR set to: 0
 11694                           ;inc\CANlib.h: 839: tamp = tamp >> 8;
 11695  001D5C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11696  001D60  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11697  001D64  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11698  001D68  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11699  001D6C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 11700  001D70  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 11701  001D74  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 11702  001D78  0100               	movlb	0	; () banked
 11703  001D7A  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 11704  001D7C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11705  001D80  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11706  001D84  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11707  001D88  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11708                           
 11709                           ; BSR set to: 0
 11710                           ;inc\CANlib.h: 840: RXF0EIDH = (unsigned char) tamp;
 11711  001D8C  C081  FF02         	movff	CANSetFilter@tamp,3842	;volatile
 11712                           
 11713                           ; BSR set to: 0
 11714                           ;inc\CANlib.h: 842: if (filter & 0x00010000)
 11715  001D90  0100               	movlb	0	; () banked
 11716  001D92  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 11717  001D94  D003               	goto	l459
 11718                           
 11719                           ; BSR set to: 0
 11720                           ;inc\CANlib.h: 843: RXF0SIDLbits.EID16 = 0x01;
 11721  001D96  010F               	movlb	15	; () banked
 11722  001D98  8101               	bsf	1,0,b	;volatile
 11723  001D9A  D002               	goto	l460
 11724  001D9C                     l459:
 11725                           
 11726                           ; BSR set to: 0
 11727                           ;inc\CANlib.h: 844: else
 11728                           ;inc\CANlib.h: 845: RXF0SIDLbits.EID16 = 0x00;
 11729  001D9C  010F               	movlb	15	; () banked
 11730  001D9E  9101               	bcf	1,0,b	;volatile
 11731  001DA0                     l460:
 11732                           
 11733                           ; BSR set to: 15
 11734                           ;inc\CANlib.h: 847: if (filter & 0x00020000)
 11735  001DA0  0100               	movlb	0	; () banked
 11736  001DA2  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 11737  001DA4  D003               	goto	l461
 11738                           
 11739                           ; BSR set to: 0
 11740                           ;inc\CANlib.h: 848: RXF0SIDLbits.EID17 = 0x01;
 11741  001DA6  010F               	movlb	15	; () banked
 11742  001DA8  8301               	bsf	1,1,b	;volatile
 11743  001DAA  D002               	goto	l462
 11744  001DAC                     l461:
 11745                           
 11746                           ; BSR set to: 0
 11747                           ;inc\CANlib.h: 849: else
 11748                           ;inc\CANlib.h: 850: RXF0SIDLbits.EID17 = 0x00;
 11749  001DAC  010F               	movlb	15	; () banked
 11750  001DAE  9301               	bcf	1,1,b	;volatile
 11751  001DB0                     l462:
 11752                           
 11753                           ; BSR set to: 15
 11754                           ;inc\CANlib.h: 852: if (filter & 0x00040000)
 11755  001DB0  0100               	movlb	0	; () banked
 11756  001DB2  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 11757  001DB4  D003               	goto	l463
 11758                           
 11759                           ; BSR set to: 0
 11760                           ;inc\CANlib.h: 853: RXF0SIDLbits.SID0 = 0x01;
 11761  001DB6  010F               	movlb	15	; () banked
 11762  001DB8  8B01               	bsf	1,5,b	;volatile
 11763  001DBA  D002               	goto	l464
 11764  001DBC                     l463:
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;inc\CANlib.h: 854: else
 11768                           ;inc\CANlib.h: 855: RXF0SIDLbits.SID0 = 0x00;
 11769  001DBC  010F               	movlb	15	; () banked
 11770  001DBE  9B01               	bcf	1,5,b	;volatile
 11771  001DC0                     l464:
 11772                           
 11773                           ; BSR set to: 15
 11774                           ;inc\CANlib.h: 857: if (filter & 0x00080000)
 11775  001DC0  0100               	movlb	0	; () banked
 11776  001DC2  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 11777  001DC4  D003               	goto	l465
 11778                           
 11779                           ; BSR set to: 0
 11780                           ;inc\CANlib.h: 858: RXF0SIDLbits.SID1 = 0x01;
 11781  001DC6  010F               	movlb	15	; () banked
 11782  001DC8  8D01               	bsf	1,6,b	;volatile
 11783  001DCA  D002               	goto	l466
 11784  001DCC                     l465:
 11785                           
 11786                           ; BSR set to: 0
 11787                           ;inc\CANlib.h: 859: else
 11788                           ;inc\CANlib.h: 860: RXF0SIDLbits.SID1 = 0x00;
 11789  001DCC  010F               	movlb	15	; () banked
 11790  001DCE  9D01               	bcf	1,6,b	;volatile
 11791  001DD0                     l466:
 11792                           
 11793                           ; BSR set to: 15
 11794                           ;inc\CANlib.h: 862: if (filter & 0x00100000)
 11795  001DD0  0100               	movlb	0	; () banked
 11796  001DD2  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 11797  001DD4  D003               	goto	l467
 11798                           
 11799                           ; BSR set to: 0
 11800                           ;inc\CANlib.h: 863: RXF0SIDLbits.SID2 = 0x01 ;
 11801  001DD6  010F               	movlb	15	; () banked
 11802  001DD8  8F01               	bsf	1,7,b	;volatile
 11803  001DDA  D003               	goto	l4744
 11804  001DDC                     l467:
 11805                           
 11806                           ; BSR set to: 0
 11807                           ;inc\CANlib.h: 864: else
 11808                           ;inc\CANlib.h: 865: RXF0SIDLbits.SID2 = 0x00 ;
 11809  001DDC  010F               	movlb	15	; () banked
 11810  001DDE  9F01               	bcf	1,7,b	;volatile
 11811  001DE0  D000               	goto	l4744
 11812  001DE2                     l4744:
 11813                           
 11814                           ; BSR set to: 15
 11815                           ;inc\CANlib.h: 867: tamp = (filter >> 21);
 11816  001DE2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11817  001DE6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11818  001DEA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11819  001DEE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11820  001DF2  0E16               	movlw	22
 11821  001DF4  D006               	goto	u5380
 11822  001DF6                     u5385:
 11823  001DF6  0100               	movlb	0	; () banked
 11824  001DF8  90D8               	bcf	status,0,c
 11825  001DFA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11826  001DFC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11827  001DFE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11828  001E00  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11829  001E02                     u5380:
 11830  001E02  2EE8               	decfsz	wreg,f,c
 11831  001E04  D7F8               	goto	u5385
 11832  001E06  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11833  001E0A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11834  001E0E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11835  001E12  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11836                           
 11837                           ; BSR set to: 0
 11838                           ;inc\CANlib.h: 868: tamp = tamp & 0x000000FF;
 11839  001E16  0100               	movlb	0	; () banked
 11840  001E18  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11841  001E1A  0100               	movlb	0	; () banked
 11842  001E1C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11843  001E1E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11844  001E20  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11845  001E22  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11846                           
 11847                           ; BSR set to: 0
 11848                           ;inc\CANlib.h: 869: RXF0SIDH = (unsigned char) tamp;
 11849  001E24  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 11850  001E28  D000               	goto	l4750
 11851  001E2A                     l4750:
 11852                           
 11853                           ; BSR set to: 0
 11854                           ;inc\CANlib.h: 870: }
 11855                           ;inc\CANlib.h: 872: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_XTD_MSG))
 11856  001E2A  0100               	movlb	0	; () banked
 11857  001E2C  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 11858  001E2E  A4D8               	btfss	status,2,c
 11859  001E30  D08B               	goto	l4784
 11860                           
 11861                           ; BSR set to: 0
 11862  001E32  0EF7               	movlw	247
 11863  001E34  0100               	movlb	0	; () banked
 11864  001E36  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 11865  001E38  A4D8               	btfss	status,2,c
 11866  001E3A  D086               	goto	l4784
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;inc\CANlib.h: 873: {
 11870                           ;inc\CANlib.h: 874: RXF1SIDLbits.EXIDEN = 0x01;
 11871  001E3C  010F               	movlb	15	; () banked
 11872  001E3E  8705               	bsf	5,3,b	;volatile
 11873                           
 11874                           ; BSR set to: 15
 11875                           ;inc\CANlib.h: 876: tamp = filter & 0x000000FF;
 11876  001E40  0100               	movlb	0	; () banked
 11877  001E42  5177               	movf	CANSetFilter@filter& (0+255),w,b
 11878  001E44  0100               	movlb	0	; () banked
 11879  001E46  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11880  001E48  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11881  001E4A  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11882  001E4C  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11883                           
 11884                           ; BSR set to: 0
 11885                           ;inc\CANlib.h: 877: RXF1EIDL = (unsigned char) tamp;
 11886  001E4E  C081  FF07         	movff	CANSetFilter@tamp,3847	;volatile
 11887                           
 11888                           ; BSR set to: 0
 11889                           ;inc\CANlib.h: 879: tamp = filter & 0x0000FF00;
 11890  001E52  0E00               	movlw	0
 11891  001E54  0100               	movlb	0	; () banked
 11892  001E56  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11893  001E58  0100               	movlb	0	; () banked
 11894  001E5A  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11895  001E5C  0EFF               	movlw	255
 11896  001E5E  0100               	movlb	0	; () banked
 11897  001E60  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11898  001E62  0100               	movlb	0	; () banked
 11899  001E64  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11900  001E66  0E00               	movlw	0
 11901  001E68  0100               	movlb	0	; () banked
 11902  001E6A  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11903  001E6C  0100               	movlb	0	; () banked
 11904  001E6E  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11905  001E70  0E00               	movlw	0
 11906  001E72  0100               	movlb	0	; () banked
 11907  001E74  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11908  001E76  0100               	movlb	0	; () banked
 11909  001E78  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;inc\CANlib.h: 880: tamp = tamp >> 8;
 11913  001E7A  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11914  001E7E  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11915  001E82  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11916  001E86  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11917  001E8A  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 11918  001E8E  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 11919  001E92  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 11920  001E96  0100               	movlb	0	; () banked
 11921  001E98  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 11922  001E9A  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11923  001E9E  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11924  001EA2  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11925  001EA6  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;inc\CANlib.h: 881: RXF1EIDH = (unsigned char) tamp;
 11929  001EAA  C081  FF06         	movff	CANSetFilter@tamp,3846	;volatile
 11930                           
 11931                           ; BSR set to: 0
 11932                           ;inc\CANlib.h: 883: if (filter & 0x00010000)
 11933  001EAE  0100               	movlb	0	; () banked
 11934  001EB0  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 11935  001EB2  D003               	goto	l470
 11936                           
 11937                           ; BSR set to: 0
 11938                           ;inc\CANlib.h: 884: RXF1SIDLbits.EID16 = 0x01;
 11939  001EB4  010F               	movlb	15	; () banked
 11940  001EB6  8105               	bsf	5,0,b	;volatile
 11941  001EB8  D002               	goto	l471
 11942  001EBA                     l470:
 11943                           
 11944                           ; BSR set to: 0
 11945                           ;inc\CANlib.h: 885: else
 11946                           ;inc\CANlib.h: 886: RXF1SIDLbits.EID16 = 0x00;
 11947  001EBA  010F               	movlb	15	; () banked
 11948  001EBC  9105               	bcf	5,0,b	;volatile
 11949  001EBE                     l471:
 11950                           
 11951                           ; BSR set to: 15
 11952                           ;inc\CANlib.h: 888: if (filter & 0x00020000)
 11953  001EBE  0100               	movlb	0	; () banked
 11954  001EC0  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 11955  001EC2  D003               	goto	l472
 11956                           
 11957                           ; BSR set to: 0
 11958                           ;inc\CANlib.h: 889: RXF1SIDLbits.EID17 = 0x01;
 11959  001EC4  010F               	movlb	15	; () banked
 11960  001EC6  8305               	bsf	5,1,b	;volatile
 11961  001EC8  D002               	goto	l473
 11962  001ECA                     l472:
 11963                           
 11964                           ; BSR set to: 0
 11965                           ;inc\CANlib.h: 890: else
 11966                           ;inc\CANlib.h: 891: RXF1SIDLbits.EID17 = 0x00;
 11967  001ECA  010F               	movlb	15	; () banked
 11968  001ECC  9305               	bcf	5,1,b	;volatile
 11969  001ECE                     l473:
 11970                           
 11971                           ; BSR set to: 15
 11972                           ;inc\CANlib.h: 893: if (filter & 0x00040000)
 11973  001ECE  0100               	movlb	0	; () banked
 11974  001ED0  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 11975  001ED2  D003               	goto	l474
 11976                           
 11977                           ; BSR set to: 0
 11978                           ;inc\CANlib.h: 894: RXF1SIDLbits.SID0 = 0x01;
 11979  001ED4  010F               	movlb	15	; () banked
 11980  001ED6  8B05               	bsf	5,5,b	;volatile
 11981  001ED8  D002               	goto	l475
 11982  001EDA                     l474:
 11983                           
 11984                           ; BSR set to: 0
 11985                           ;inc\CANlib.h: 895: else
 11986                           ;inc\CANlib.h: 896: RXF1SIDLbits.SID0 = 0x00;
 11987  001EDA  010F               	movlb	15	; () banked
 11988  001EDC  9B05               	bcf	5,5,b	;volatile
 11989  001EDE                     l475:
 11990                           
 11991                           ; BSR set to: 15
 11992                           ;inc\CANlib.h: 898: if (filter & 0x00080000)
 11993  001EDE  0100               	movlb	0	; () banked
 11994  001EE0  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 11995  001EE2  D003               	goto	l476
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;inc\CANlib.h: 899: RXF1SIDLbits.SID1 = 0x01;
 11999  001EE4  010F               	movlb	15	; () banked
 12000  001EE6  8D05               	bsf	5,6,b	;volatile
 12001  001EE8  D002               	goto	l477
 12002  001EEA                     l476:
 12003                           
 12004                           ; BSR set to: 0
 12005                           ;inc\CANlib.h: 900: else
 12006                           ;inc\CANlib.h: 901: RXF1SIDLbits.SID1 = 0x00;
 12007  001EEA  010F               	movlb	15	; () banked
 12008  001EEC  9D05               	bcf	5,6,b	;volatile
 12009  001EEE                     l477:
 12010                           
 12011                           ; BSR set to: 15
 12012                           ;inc\CANlib.h: 903: if (filter & 0x00100000)
 12013  001EEE  0100               	movlb	0	; () banked
 12014  001EF0  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12015  001EF2  D003               	goto	l478
 12016                           
 12017                           ; BSR set to: 0
 12018                           ;inc\CANlib.h: 904: RXF1SIDLbits.SID2 = 0x01 ;
 12019  001EF4  010F               	movlb	15	; () banked
 12020  001EF6  8F05               	bsf	5,7,b	;volatile
 12021  001EF8  D003               	goto	l4778
 12022  001EFA                     l478:
 12023                           
 12024                           ; BSR set to: 0
 12025                           ;inc\CANlib.h: 905: else
 12026                           ;inc\CANlib.h: 906: RXF1SIDLbits.SID2 = 0x00 ;
 12027  001EFA  010F               	movlb	15	; () banked
 12028  001EFC  9F05               	bcf	5,7,b	;volatile
 12029  001EFE  D000               	goto	l4778
 12030  001F00                     l4778:
 12031                           
 12032                           ; BSR set to: 15
 12033                           ;inc\CANlib.h: 908: tamp = (filter >> 21);
 12034  001F00  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12035  001F04  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12036  001F08  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12037  001F0C  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12038  001F10  0E16               	movlw	22
 12039  001F12  D006               	goto	u5460
 12040  001F14                     u5465:
 12041  001F14  0100               	movlb	0	; () banked
 12042  001F16  90D8               	bcf	status,0,c
 12043  001F18  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12044  001F1A  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12045  001F1C  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12046  001F1E  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12047  001F20                     u5460:
 12048  001F20  2EE8               	decfsz	wreg,f,c
 12049  001F22  D7F8               	goto	u5465
 12050  001F24  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12051  001F28  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12052  001F2C  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12053  001F30  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12054                           
 12055                           ; BSR set to: 0
 12056                           ;inc\CANlib.h: 909: tamp = tamp & 0x000000FF;
 12057  001F34  0100               	movlb	0	; () banked
 12058  001F36  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12059  001F38  0100               	movlb	0	; () banked
 12060  001F3A  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12061  001F3C  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12062  001F3E  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12063  001F40  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12064                           
 12065                           ; BSR set to: 0
 12066                           ;inc\CANlib.h: 910: RXF1SIDH = (unsigned char) tamp;
 12067  001F42  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 12068  001F46  D000               	goto	l4784
 12069  001F48                     l4784:
 12070                           
 12071                           ; BSR set to: 0
 12072                           ;inc\CANlib.h: 911: }
 12073                           ;inc\CANlib.h: 914: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_XTD_MSG))
 12074  001F48  0E02               	movlw	2
 12075  001F4A  0100               	movlb	0	; () banked
 12076  001F4C  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12077  001F4E  A4D8               	btfss	status,2,c
 12078  001F50  D08B               	goto	l4818
 12079                           
 12080                           ; BSR set to: 0
 12081  001F52  0EF7               	movlw	247
 12082  001F54  0100               	movlb	0	; () banked
 12083  001F56  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12084  001F58  A4D8               	btfss	status,2,c
 12085  001F5A  D086               	goto	l4818
 12086                           
 12087                           ; BSR set to: 0
 12088                           ;inc\CANlib.h: 915: {
 12089                           ;inc\CANlib.h: 916: RXF2SIDLbits.EXIDEN = 0x01;
 12090  001F5C  010F               	movlb	15	; () banked
 12091  001F5E  8709               	bsf	9,3,b	;volatile
 12092                           
 12093                           ; BSR set to: 15
 12094                           ;inc\CANlib.h: 918: tamp = filter & 0x000000FF;
 12095  001F60  0100               	movlb	0	; () banked
 12096  001F62  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12097  001F64  0100               	movlb	0	; () banked
 12098  001F66  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12099  001F68  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12100  001F6A  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12101  001F6C  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12102                           
 12103                           ; BSR set to: 0
 12104                           ;inc\CANlib.h: 919: RXF2EIDL = (unsigned char) tamp;
 12105  001F6E  C081  FF0B         	movff	CANSetFilter@tamp,3851	;volatile
 12106                           
 12107                           ; BSR set to: 0
 12108                           ;inc\CANlib.h: 921: tamp = filter & 0x0000FF00;
 12109  001F72  0E00               	movlw	0
 12110  001F74  0100               	movlb	0	; () banked
 12111  001F76  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12112  001F78  0100               	movlb	0	; () banked
 12113  001F7A  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12114  001F7C  0EFF               	movlw	255
 12115  001F7E  0100               	movlb	0	; () banked
 12116  001F80  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12117  001F82  0100               	movlb	0	; () banked
 12118  001F84  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12119  001F86  0E00               	movlw	0
 12120  001F88  0100               	movlb	0	; () banked
 12121  001F8A  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12122  001F8C  0100               	movlb	0	; () banked
 12123  001F8E  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12124  001F90  0E00               	movlw	0
 12125  001F92  0100               	movlb	0	; () banked
 12126  001F94  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12127  001F96  0100               	movlb	0	; () banked
 12128  001F98  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12129                           
 12130                           ; BSR set to: 0
 12131                           ;inc\CANlib.h: 922: tamp = tamp >> 8;
 12132  001F9A  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12133  001F9E  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12134  001FA2  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12135  001FA6  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12136  001FAA  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12137  001FAE  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12138  001FB2  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12139  001FB6  0100               	movlb	0	; () banked
 12140  001FB8  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12141  001FBA  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12142  001FBE  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12143  001FC2  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12144  001FC6  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12145                           
 12146                           ; BSR set to: 0
 12147                           ;inc\CANlib.h: 923: RXF2EIDH = (unsigned char) tamp;
 12148  001FCA  C081  FF0A         	movff	CANSetFilter@tamp,3850	;volatile
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;inc\CANlib.h: 925: if (filter & 0x00010000)
 12152  001FCE  0100               	movlb	0	; () banked
 12153  001FD0  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12154  001FD2  D003               	goto	l481
 12155                           
 12156                           ; BSR set to: 0
 12157                           ;inc\CANlib.h: 926: RXF2SIDLbits.EID16 = 0x01;
 12158  001FD4  010F               	movlb	15	; () banked
 12159  001FD6  8109               	bsf	9,0,b	;volatile
 12160  001FD8  D002               	goto	l482
 12161  001FDA                     l481:
 12162                           
 12163                           ; BSR set to: 0
 12164                           ;inc\CANlib.h: 927: else
 12165                           ;inc\CANlib.h: 928: RXF2SIDLbits.EID16 = 0x00;
 12166  001FDA  010F               	movlb	15	; () banked
 12167  001FDC  9109               	bcf	9,0,b	;volatile
 12168  001FDE                     l482:
 12169                           
 12170                           ; BSR set to: 15
 12171                           ;inc\CANlib.h: 930: if (filter & 0x00020000)
 12172  001FDE  0100               	movlb	0	; () banked
 12173  001FE0  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12174  001FE2  D003               	goto	l483
 12175                           
 12176                           ; BSR set to: 0
 12177                           ;inc\CANlib.h: 931: RXF2SIDLbits.EID17 = 0x01;
 12178  001FE4  010F               	movlb	15	; () banked
 12179  001FE6  8309               	bsf	9,1,b	;volatile
 12180  001FE8  D002               	goto	l484
 12181  001FEA                     l483:
 12182                           
 12183                           ; BSR set to: 0
 12184                           ;inc\CANlib.h: 932: else
 12185                           ;inc\CANlib.h: 933: RXF2SIDLbits.EID17 = 0x00;
 12186  001FEA  010F               	movlb	15	; () banked
 12187  001FEC  9309               	bcf	9,1,b	;volatile
 12188  001FEE                     l484:
 12189                           
 12190                           ; BSR set to: 15
 12191                           ;inc\CANlib.h: 935: if (filter & 0x00040000)
 12192  001FEE  0100               	movlb	0	; () banked
 12193  001FF0  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12194  001FF2  D003               	goto	l485
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;inc\CANlib.h: 936: RXF2SIDLbits.SID0 = 0x01;
 12198  001FF4  010F               	movlb	15	; () banked
 12199  001FF6  8B09               	bsf	9,5,b	;volatile
 12200  001FF8  D002               	goto	l486
 12201  001FFA                     l485:
 12202                           
 12203                           ; BSR set to: 0
 12204                           ;inc\CANlib.h: 937: else
 12205                           ;inc\CANlib.h: 938: RXF2SIDLbits.SID0 = 0x00;
 12206  001FFA  010F               	movlb	15	; () banked
 12207  001FFC  9B09               	bcf	9,5,b	;volatile
 12208  001FFE                     l486:
 12209                           
 12210                           ; BSR set to: 15
 12211                           ;inc\CANlib.h: 940: if (filter & 0x00080000)
 12212  001FFE  0100               	movlb	0	; () banked
 12213  002000  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12214  002002  D003               	goto	l487
 12215                           
 12216                           ; BSR set to: 0
 12217                           ;inc\CANlib.h: 941: RXF2SIDLbits.SID1 = 0x01;
 12218  002004  010F               	movlb	15	; () banked
 12219  002006  8D09               	bsf	9,6,b	;volatile
 12220  002008  D002               	goto	l488
 12221  00200A                     l487:
 12222                           
 12223                           ; BSR set to: 0
 12224                           ;inc\CANlib.h: 942: else
 12225                           ;inc\CANlib.h: 943: RXF2SIDLbits.SID1 = 0x00;
 12226  00200A  010F               	movlb	15	; () banked
 12227  00200C  9D09               	bcf	9,6,b	;volatile
 12228  00200E                     l488:
 12229                           
 12230                           ; BSR set to: 15
 12231                           ;inc\CANlib.h: 945: if (filter & 0x00100000)
 12232  00200E  0100               	movlb	0	; () banked
 12233  002010  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12234  002012  D003               	goto	l489
 12235                           
 12236                           ; BSR set to: 0
 12237                           ;inc\CANlib.h: 946: RXF2SIDLbits.SID2 = 0x01 ;
 12238  002014  010F               	movlb	15	; () banked
 12239  002016  8F09               	bsf	9,7,b	;volatile
 12240  002018  D003               	goto	l4812
 12241  00201A                     l489:
 12242                           
 12243                           ; BSR set to: 0
 12244                           ;inc\CANlib.h: 947: else
 12245                           ;inc\CANlib.h: 948: RXF2SIDLbits.SID2 = 0x00 ;
 12246  00201A  010F               	movlb	15	; () banked
 12247  00201C  9F09               	bcf	9,7,b	;volatile
 12248  00201E  D000               	goto	l4812
 12249  002020                     l4812:
 12250                           
 12251                           ; BSR set to: 15
 12252                           ;inc\CANlib.h: 950: tamp = (filter >> 21);
 12253  002020  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12254  002024  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12255  002028  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12256  00202C  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12257  002030  0E16               	movlw	22
 12258  002032  D006               	goto	u5540
 12259  002034                     u5545:
 12260  002034  0100               	movlb	0	; () banked
 12261  002036  90D8               	bcf	status,0,c
 12262  002038  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12263  00203A  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12264  00203C  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12265  00203E  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12266  002040                     u5540:
 12267  002040  2EE8               	decfsz	wreg,f,c
 12268  002042  D7F8               	goto	u5545
 12269  002044  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12270  002048  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12271  00204C  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12272  002050  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12273                           
 12274                           ; BSR set to: 0
 12275                           ;inc\CANlib.h: 951: tamp = tamp & 0x000000FF;
 12276  002054  0100               	movlb	0	; () banked
 12277  002056  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12278  002058  0100               	movlb	0	; () banked
 12279  00205A  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12280  00205C  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12281  00205E  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12282  002060  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12283                           
 12284                           ; BSR set to: 0
 12285                           ;inc\CANlib.h: 952: RXF2SIDH = (unsigned char) tamp;
 12286  002062  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 12287  002066  D000               	goto	l4818
 12288  002068                     l4818:
 12289                           
 12290                           ; BSR set to: 0
 12291                           ;inc\CANlib.h: 953: }
 12292                           ;inc\CANlib.h: 955: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_XTD_MSG))
 12293  002068  0E03               	movlw	3
 12294  00206A  0100               	movlb	0	; () banked
 12295  00206C  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12296  00206E  A4D8               	btfss	status,2,c
 12297  002070  D08B               	goto	l4852
 12298                           
 12299                           ; BSR set to: 0
 12300  002072  0EF7               	movlw	247
 12301  002074  0100               	movlb	0	; () banked
 12302  002076  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12303  002078  A4D8               	btfss	status,2,c
 12304  00207A  D086               	goto	l4852
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;inc\CANlib.h: 956: {
 12308                           ;inc\CANlib.h: 957: RXF3SIDLbits.EXIDEN = 0x01;
 12309  00207C  010F               	movlb	15	; () banked
 12310  00207E  870D               	bsf	13,3,b	;volatile
 12311                           
 12312                           ; BSR set to: 15
 12313                           ;inc\CANlib.h: 959: tamp = filter & 0x000000FF;
 12314  002080  0100               	movlb	0	; () banked
 12315  002082  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12316  002084  0100               	movlb	0	; () banked
 12317  002086  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12318  002088  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12319  00208A  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12320  00208C  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12321                           
 12322                           ; BSR set to: 0
 12323                           ;inc\CANlib.h: 960: RXF3EIDL = (unsigned char) tamp;
 12324  00208E  C081  FF0F         	movff	CANSetFilter@tamp,3855	;volatile
 12325                           
 12326                           ; BSR set to: 0
 12327                           ;inc\CANlib.h: 962: tamp = filter & 0x0000FF00;
 12328  002092  0E00               	movlw	0
 12329  002094  0100               	movlb	0	; () banked
 12330  002096  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12331  002098  0100               	movlb	0	; () banked
 12332  00209A  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12333  00209C  0EFF               	movlw	255
 12334  00209E  0100               	movlb	0	; () banked
 12335  0020A0  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12336  0020A2  0100               	movlb	0	; () banked
 12337  0020A4  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12338  0020A6  0E00               	movlw	0
 12339  0020A8  0100               	movlb	0	; () banked
 12340  0020AA  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12341  0020AC  0100               	movlb	0	; () banked
 12342  0020AE  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12343  0020B0  0E00               	movlw	0
 12344  0020B2  0100               	movlb	0	; () banked
 12345  0020B4  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12346  0020B6  0100               	movlb	0	; () banked
 12347  0020B8  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12348                           
 12349                           ; BSR set to: 0
 12350                           ;inc\CANlib.h: 963: tamp = tamp >> 8;
 12351  0020BA  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12352  0020BE  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12353  0020C2  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12354  0020C6  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12355  0020CA  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12356  0020CE  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12357  0020D2  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12358  0020D6  0100               	movlb	0	; () banked
 12359  0020D8  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12360  0020DA  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12361  0020DE  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12362  0020E2  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12363  0020E6  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12364                           
 12365                           ; BSR set to: 0
 12366                           ;inc\CANlib.h: 964: RXF3EIDH = (unsigned char) tamp;
 12367  0020EA  C081  FF0E         	movff	CANSetFilter@tamp,3854	;volatile
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;inc\CANlib.h: 966: if (filter & 0x00010000)
 12371  0020EE  0100               	movlb	0	; () banked
 12372  0020F0  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12373  0020F2  D003               	goto	l492
 12374                           
 12375                           ; BSR set to: 0
 12376                           ;inc\CANlib.h: 967: RXF3SIDLbits.EID16 = 0x01;
 12377  0020F4  010F               	movlb	15	; () banked
 12378  0020F6  810D               	bsf	13,0,b	;volatile
 12379  0020F8  D002               	goto	l493
 12380  0020FA                     l492:
 12381                           
 12382                           ; BSR set to: 0
 12383                           ;inc\CANlib.h: 968: else
 12384                           ;inc\CANlib.h: 969: RXF3SIDLbits.EID16 = 0x00;
 12385  0020FA  010F               	movlb	15	; () banked
 12386  0020FC  910D               	bcf	13,0,b	;volatile
 12387  0020FE                     l493:
 12388                           
 12389                           ; BSR set to: 15
 12390                           ;inc\CANlib.h: 971: if (filter & 0x00020000)
 12391  0020FE  0100               	movlb	0	; () banked
 12392  002100  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12393  002102  D003               	goto	l494
 12394                           
 12395                           ; BSR set to: 0
 12396                           ;inc\CANlib.h: 972: RXF3SIDLbits.EID17 = 0x01;
 12397  002104  010F               	movlb	15	; () banked
 12398  002106  830D               	bsf	13,1,b	;volatile
 12399  002108  D002               	goto	l495
 12400  00210A                     l494:
 12401                           
 12402                           ; BSR set to: 0
 12403                           ;inc\CANlib.h: 973: else
 12404                           ;inc\CANlib.h: 974: RXF3SIDLbits.EID17 = 0x00;
 12405  00210A  010F               	movlb	15	; () banked
 12406  00210C  930D               	bcf	13,1,b	;volatile
 12407  00210E                     l495:
 12408                           
 12409                           ; BSR set to: 15
 12410                           ;inc\CANlib.h: 976: if (filter & 0x00040000)
 12411  00210E  0100               	movlb	0	; () banked
 12412  002110  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12413  002112  D003               	goto	l496
 12414                           
 12415                           ; BSR set to: 0
 12416                           ;inc\CANlib.h: 977: RXF3SIDLbits.SID0 = 0x01;
 12417  002114  010F               	movlb	15	; () banked
 12418  002116  8B0D               	bsf	13,5,b	;volatile
 12419  002118  D002               	goto	l497
 12420  00211A                     l496:
 12421                           
 12422                           ; BSR set to: 0
 12423                           ;inc\CANlib.h: 978: else
 12424                           ;inc\CANlib.h: 979: RXF3SIDLbits.SID0 = 0x00;
 12425  00211A  010F               	movlb	15	; () banked
 12426  00211C  9B0D               	bcf	13,5,b	;volatile
 12427  00211E                     l497:
 12428                           
 12429                           ; BSR set to: 15
 12430                           ;inc\CANlib.h: 981: if (filter & 0x00080000)
 12431  00211E  0100               	movlb	0	; () banked
 12432  002120  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12433  002122  D003               	goto	l498
 12434                           
 12435                           ; BSR set to: 0
 12436                           ;inc\CANlib.h: 982: RXF3SIDLbits.SID1 = 0x01;
 12437  002124  010F               	movlb	15	; () banked
 12438  002126  8D0D               	bsf	13,6,b	;volatile
 12439  002128  D002               	goto	l499
 12440  00212A                     l498:
 12441                           
 12442                           ; BSR set to: 0
 12443                           ;inc\CANlib.h: 983: else
 12444                           ;inc\CANlib.h: 984: RXF3SIDLbits.SID1 = 0x00;
 12445  00212A  010F               	movlb	15	; () banked
 12446  00212C  9D0D               	bcf	13,6,b	;volatile
 12447  00212E                     l499:
 12448                           
 12449                           ; BSR set to: 15
 12450                           ;inc\CANlib.h: 986: if (filter & 0x00100000)
 12451  00212E  0100               	movlb	0	; () banked
 12452  002130  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12453  002132  D003               	goto	l500
 12454                           
 12455                           ; BSR set to: 0
 12456                           ;inc\CANlib.h: 987: RXF3SIDLbits.SID2 = 0x01 ;
 12457  002134  010F               	movlb	15	; () banked
 12458  002136  8F0D               	bsf	13,7,b	;volatile
 12459  002138  D003               	goto	l4846
 12460  00213A                     l500:
 12461                           
 12462                           ; BSR set to: 0
 12463                           ;inc\CANlib.h: 988: else
 12464                           ;inc\CANlib.h: 989: RXF3SIDLbits.SID2 = 0x00 ;
 12465  00213A  010F               	movlb	15	; () banked
 12466  00213C  9F0D               	bcf	13,7,b	;volatile
 12467  00213E  D000               	goto	l4846
 12468  002140                     l4846:
 12469                           
 12470                           ; BSR set to: 15
 12471                           ;inc\CANlib.h: 991: tamp = (filter >> 21);
 12472  002140  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12473  002144  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12474  002148  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12475  00214C  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12476  002150  0E16               	movlw	22
 12477  002152  D006               	goto	u5620
 12478  002154                     u5625:
 12479  002154  0100               	movlb	0	; () banked
 12480  002156  90D8               	bcf	status,0,c
 12481  002158  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12482  00215A  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12483  00215C  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12484  00215E  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12485  002160                     u5620:
 12486  002160  2EE8               	decfsz	wreg,f,c
 12487  002162  D7F8               	goto	u5625
 12488  002164  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12489  002168  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12490  00216C  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12491  002170  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12492                           
 12493                           ; BSR set to: 0
 12494                           ;inc\CANlib.h: 992: tamp = tamp & 0x000000FF;
 12495  002174  0100               	movlb	0	; () banked
 12496  002176  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12497  002178  0100               	movlb	0	; () banked
 12498  00217A  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12499  00217C  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12500  00217E  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12501  002180  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12502                           
 12503                           ; BSR set to: 0
 12504                           ;inc\CANlib.h: 993: RXF3SIDH = (unsigned char) tamp;
 12505  002182  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 12506  002186  D000               	goto	l4852
 12507  002188                     l4852:
 12508                           
 12509                           ; BSR set to: 0
 12510                           ;inc\CANlib.h: 994: }
 12511                           ;inc\CANlib.h: 996: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_XTD_MSG))
 12512  002188  0E04               	movlw	4
 12513  00218A  0100               	movlb	0	; () banked
 12514  00218C  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12515  00218E  A4D8               	btfss	status,2,c
 12516  002190  D08B               	goto	l4886
 12517                           
 12518                           ; BSR set to: 0
 12519  002192  0EF7               	movlw	247
 12520  002194  0100               	movlb	0	; () banked
 12521  002196  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12522  002198  A4D8               	btfss	status,2,c
 12523  00219A  D086               	goto	l4886
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;inc\CANlib.h: 997: {
 12527                           ;inc\CANlib.h: 998: RXF4SIDLbits.EXIDEN = 0x01;
 12528  00219C  010F               	movlb	15	; () banked
 12529  00219E  8711               	bsf	17,3,b	;volatile
 12530                           
 12531                           ; BSR set to: 15
 12532                           ;inc\CANlib.h: 1000: tamp = filter & 0x000000FF;
 12533  0021A0  0100               	movlb	0	; () banked
 12534  0021A2  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12535  0021A4  0100               	movlb	0	; () banked
 12536  0021A6  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12537  0021A8  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12538  0021AA  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12539  0021AC  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12540                           
 12541                           ; BSR set to: 0
 12542                           ;inc\CANlib.h: 1001: RXF4EIDL = (unsigned char) tamp;
 12543  0021AE  C081  FF13         	movff	CANSetFilter@tamp,3859	;volatile
 12544                           
 12545                           ; BSR set to: 0
 12546                           ;inc\CANlib.h: 1003: tamp = filter & 0x0000FF00;
 12547  0021B2  0E00               	movlw	0
 12548  0021B4  0100               	movlb	0	; () banked
 12549  0021B6  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12550  0021B8  0100               	movlb	0	; () banked
 12551  0021BA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12552  0021BC  0EFF               	movlw	255
 12553  0021BE  0100               	movlb	0	; () banked
 12554  0021C0  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12555  0021C2  0100               	movlb	0	; () banked
 12556  0021C4  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12557  0021C6  0E00               	movlw	0
 12558  0021C8  0100               	movlb	0	; () banked
 12559  0021CA  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12560  0021CC  0100               	movlb	0	; () banked
 12561  0021CE  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12562  0021D0  0E00               	movlw	0
 12563  0021D2  0100               	movlb	0	; () banked
 12564  0021D4  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12565  0021D6  0100               	movlb	0	; () banked
 12566  0021D8  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12567                           
 12568                           ; BSR set to: 0
 12569                           ;inc\CANlib.h: 1004: tamp = tamp >> 8;
 12570  0021DA  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12571  0021DE  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12572  0021E2  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12573  0021E6  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12574  0021EA  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12575  0021EE  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12576  0021F2  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12577  0021F6  0100               	movlb	0	; () banked
 12578  0021F8  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12579  0021FA  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12580  0021FE  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12581  002202  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12582  002206  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12583                           
 12584                           ; BSR set to: 0
 12585                           ;inc\CANlib.h: 1005: RXF4EIDH = (unsigned char) tamp;
 12586  00220A  C081  FF12         	movff	CANSetFilter@tamp,3858	;volatile
 12587                           
 12588                           ; BSR set to: 0
 12589                           ;inc\CANlib.h: 1007: if (filter & 0x00010000)
 12590  00220E  0100               	movlb	0	; () banked
 12591  002210  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12592  002212  D003               	goto	l503
 12593                           
 12594                           ; BSR set to: 0
 12595                           ;inc\CANlib.h: 1008: RXF4SIDLbits.EID16 = 0x01;
 12596  002214  010F               	movlb	15	; () banked
 12597  002216  8111               	bsf	17,0,b	;volatile
 12598  002218  D002               	goto	l504
 12599  00221A                     l503:
 12600                           
 12601                           ; BSR set to: 0
 12602                           ;inc\CANlib.h: 1009: else
 12603                           ;inc\CANlib.h: 1010: RXF4SIDLbits.EID16 = 0x00;
 12604  00221A  010F               	movlb	15	; () banked
 12605  00221C  9111               	bcf	17,0,b	;volatile
 12606  00221E                     l504:
 12607                           
 12608                           ; BSR set to: 15
 12609                           ;inc\CANlib.h: 1012: if (filter & 0x00020000)
 12610  00221E  0100               	movlb	0	; () banked
 12611  002220  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12612  002222  D003               	goto	l505
 12613                           
 12614                           ; BSR set to: 0
 12615                           ;inc\CANlib.h: 1013: RXF4SIDLbits.EID17 = 0x01;
 12616  002224  010F               	movlb	15	; () banked
 12617  002226  8311               	bsf	17,1,b	;volatile
 12618  002228  D002               	goto	l506
 12619  00222A                     l505:
 12620                           
 12621                           ; BSR set to: 0
 12622                           ;inc\CANlib.h: 1014: else
 12623                           ;inc\CANlib.h: 1015: RXF4SIDLbits.EID17 = 0x00;
 12624  00222A  010F               	movlb	15	; () banked
 12625  00222C  9311               	bcf	17,1,b	;volatile
 12626  00222E                     l506:
 12627                           
 12628                           ; BSR set to: 15
 12629                           ;inc\CANlib.h: 1017: if (filter & 0x00040000)
 12630  00222E  0100               	movlb	0	; () banked
 12631  002230  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12632  002232  D003               	goto	l507
 12633                           
 12634                           ; BSR set to: 0
 12635                           ;inc\CANlib.h: 1018: RXF4SIDLbits.SID0 = 0x01;
 12636  002234  010F               	movlb	15	; () banked
 12637  002236  8B11               	bsf	17,5,b	;volatile
 12638  002238  D002               	goto	l508
 12639  00223A                     l507:
 12640                           
 12641                           ; BSR set to: 0
 12642                           ;inc\CANlib.h: 1019: else
 12643                           ;inc\CANlib.h: 1020: RXF4SIDLbits.SID0 = 0x00;
 12644  00223A  010F               	movlb	15	; () banked
 12645  00223C  9B11               	bcf	17,5,b	;volatile
 12646  00223E                     l508:
 12647                           
 12648                           ; BSR set to: 15
 12649                           ;inc\CANlib.h: 1022: if (filter & 0x00080000)
 12650  00223E  0100               	movlb	0	; () banked
 12651  002240  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12652  002242  D003               	goto	l509
 12653                           
 12654                           ; BSR set to: 0
 12655                           ;inc\CANlib.h: 1023: RXF4SIDLbits.SID1 = 0x01;
 12656  002244  010F               	movlb	15	; () banked
 12657  002246  8D11               	bsf	17,6,b	;volatile
 12658  002248  D002               	goto	l510
 12659  00224A                     l509:
 12660                           
 12661                           ; BSR set to: 0
 12662                           ;inc\CANlib.h: 1024: else
 12663                           ;inc\CANlib.h: 1025: RXF4SIDLbits.SID1 = 0x00;
 12664  00224A  010F               	movlb	15	; () banked
 12665  00224C  9D11               	bcf	17,6,b	;volatile
 12666  00224E                     l510:
 12667                           
 12668                           ; BSR set to: 15
 12669                           ;inc\CANlib.h: 1027: if (filter & 0x00100000)
 12670  00224E  0100               	movlb	0	; () banked
 12671  002250  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12672  002252  D003               	goto	l511
 12673                           
 12674                           ; BSR set to: 0
 12675                           ;inc\CANlib.h: 1028: RXF4SIDLbits.SID2 = 0x01 ;
 12676  002254  010F               	movlb	15	; () banked
 12677  002256  8F11               	bsf	17,7,b	;volatile
 12678  002258  D003               	goto	l4880
 12679  00225A                     l511:
 12680                           
 12681                           ; BSR set to: 0
 12682                           ;inc\CANlib.h: 1029: else
 12683                           ;inc\CANlib.h: 1030: RXF4SIDLbits.SID2 = 0x00 ;
 12684  00225A  010F               	movlb	15	; () banked
 12685  00225C  9F11               	bcf	17,7,b	;volatile
 12686  00225E  D000               	goto	l4880
 12687  002260                     l4880:
 12688                           
 12689                           ; BSR set to: 15
 12690                           ;inc\CANlib.h: 1032: tamp = (filter >> 21);
 12691  002260  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12692  002264  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12693  002268  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12694  00226C  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12695  002270  0E16               	movlw	22
 12696  002272  D006               	goto	u5700
 12697  002274                     u5705:
 12698  002274  0100               	movlb	0	; () banked
 12699  002276  90D8               	bcf	status,0,c
 12700  002278  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12701  00227A  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12702  00227C  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12703  00227E  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12704  002280                     u5700:
 12705  002280  2EE8               	decfsz	wreg,f,c
 12706  002282  D7F8               	goto	u5705
 12707  002284  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12708  002288  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12709  00228C  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12710  002290  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;inc\CANlib.h: 1033: tamp = tamp & 0x000000FF;
 12714  002294  0100               	movlb	0	; () banked
 12715  002296  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12716  002298  0100               	movlb	0	; () banked
 12717  00229A  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12718  00229C  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12719  00229E  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12720  0022A0  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12721                           
 12722                           ; BSR set to: 0
 12723                           ;inc\CANlib.h: 1034: RXF4SIDH = (unsigned char) tamp;
 12724  0022A2  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 12725  0022A6  D000               	goto	l4886
 12726  0022A8                     l4886:
 12727                           
 12728                           ; BSR set to: 0
 12729                           ;inc\CANlib.h: 1035: }
 12730                           ;inc\CANlib.h: 1037: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_XTD_MSG))
 12731  0022A8  0E05               	movlw	5
 12732  0022AA  0100               	movlb	0	; () banked
 12733  0022AC  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12734  0022AE  A4D8               	btfss	status,2,c
 12735  0022B0  0012               	return	
 12736                           
 12737                           ; BSR set to: 0
 12738  0022B2  0EF7               	movlw	247
 12739  0022B4  0100               	movlb	0	; () banked
 12740  0022B6  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12741  0022B8  A4D8               	btfss	status,2,c
 12742  0022BA  0012               	return	
 12743                           
 12744                           ; BSR set to: 0
 12745                           ;inc\CANlib.h: 1038: {
 12746                           ;inc\CANlib.h: 1039: RXF5SIDLbits.EXIDEN = 0x01;
 12747  0022BC  010F               	movlb	15	; () banked
 12748  0022BE  8715               	bsf	21,3,b	;volatile
 12749                           
 12750                           ; BSR set to: 15
 12751                           ;inc\CANlib.h: 1041: tamp = filter & 0x000000FF;
 12752  0022C0  0100               	movlb	0	; () banked
 12753  0022C2  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12754  0022C4  0100               	movlb	0	; () banked
 12755  0022C6  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12756  0022C8  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12757  0022CA  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12758  0022CC  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12759                           
 12760                           ; BSR set to: 0
 12761                           ;inc\CANlib.h: 1042: RXF5EIDL = (unsigned char) tamp;
 12762  0022CE  C081  FF17         	movff	CANSetFilter@tamp,3863	;volatile
 12763                           
 12764                           ; BSR set to: 0
 12765                           ;inc\CANlib.h: 1044: tamp = filter & 0x0000FF00;
 12766  0022D2  0E00               	movlw	0
 12767  0022D4  0100               	movlb	0	; () banked
 12768  0022D6  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12769  0022D8  0100               	movlb	0	; () banked
 12770  0022DA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12771  0022DC  0EFF               	movlw	255
 12772  0022DE  0100               	movlb	0	; () banked
 12773  0022E0  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12774  0022E2  0100               	movlb	0	; () banked
 12775  0022E4  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12776  0022E6  0E00               	movlw	0
 12777  0022E8  0100               	movlb	0	; () banked
 12778  0022EA  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12779  0022EC  0100               	movlb	0	; () banked
 12780  0022EE  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12781  0022F0  0E00               	movlw	0
 12782  0022F2  0100               	movlb	0	; () banked
 12783  0022F4  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12784  0022F6  0100               	movlb	0	; () banked
 12785  0022F8  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12786                           
 12787                           ; BSR set to: 0
 12788                           ;inc\CANlib.h: 1045: tamp = tamp >> 8;
 12789  0022FA  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12790  0022FE  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12791  002302  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12792  002306  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12793  00230A  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12794  00230E  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12795  002312  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12796  002316  0100               	movlb	0	; () banked
 12797  002318  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12798  00231A  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12799  00231E  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12800  002322  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12801  002326  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12802                           
 12803                           ; BSR set to: 0
 12804                           ;inc\CANlib.h: 1046: RXF5EIDH = (unsigned char) tamp;
 12805  00232A  C081  FF16         	movff	CANSetFilter@tamp,3862	;volatile
 12806                           
 12807                           ; BSR set to: 0
 12808                           ;inc\CANlib.h: 1048: if (filter & 0x00010000)
 12809  00232E  0100               	movlb	0	; () banked
 12810  002330  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12811  002332  D003               	goto	l514
 12812                           
 12813                           ; BSR set to: 0
 12814                           ;inc\CANlib.h: 1049: RXF5SIDLbits.EID16 = 0x01;
 12815  002334  010F               	movlb	15	; () banked
 12816  002336  8115               	bsf	21,0,b	;volatile
 12817  002338  D002               	goto	l515
 12818  00233A                     l514:
 12819                           
 12820                           ; BSR set to: 0
 12821                           ;inc\CANlib.h: 1050: else
 12822                           ;inc\CANlib.h: 1051: RXF5SIDLbits.EID16 = 0x00;
 12823  00233A  010F               	movlb	15	; () banked
 12824  00233C  9115               	bcf	21,0,b	;volatile
 12825  00233E                     l515:
 12826                           
 12827                           ; BSR set to: 15
 12828                           ;inc\CANlib.h: 1053: if (filter & 0x00020000)
 12829  00233E  0100               	movlb	0	; () banked
 12830  002340  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12831  002342  D003               	goto	l516
 12832                           
 12833                           ; BSR set to: 0
 12834                           ;inc\CANlib.h: 1054: RXF5SIDLbits.EID17 = 0x01;
 12835  002344  010F               	movlb	15	; () banked
 12836  002346  8315               	bsf	21,1,b	;volatile
 12837  002348  D002               	goto	l517
 12838  00234A                     l516:
 12839                           
 12840                           ; BSR set to: 0
 12841                           ;inc\CANlib.h: 1055: else
 12842                           ;inc\CANlib.h: 1056: RXF5SIDLbits.EID17 = 0x00;
 12843  00234A  010F               	movlb	15	; () banked
 12844  00234C  9315               	bcf	21,1,b	;volatile
 12845  00234E                     l517:
 12846                           
 12847                           ; BSR set to: 15
 12848                           ;inc\CANlib.h: 1058: if (filter & 0x00040000)
 12849  00234E  0100               	movlb	0	; () banked
 12850  002350  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12851  002352  D003               	goto	l518
 12852                           
 12853                           ; BSR set to: 0
 12854                           ;inc\CANlib.h: 1059: RXF5SIDLbits.SID0 = 0x01;
 12855  002354  010F               	movlb	15	; () banked
 12856  002356  8B15               	bsf	21,5,b	;volatile
 12857  002358  D002               	goto	l519
 12858  00235A                     l518:
 12859                           
 12860                           ; BSR set to: 0
 12861                           ;inc\CANlib.h: 1060: else
 12862                           ;inc\CANlib.h: 1061: RXF5SIDLbits.SID0 = 0x00;
 12863  00235A  010F               	movlb	15	; () banked
 12864  00235C  9B15               	bcf	21,5,b	;volatile
 12865  00235E                     l519:
 12866                           
 12867                           ; BSR set to: 15
 12868                           ;inc\CANlib.h: 1063: if (filter & 0x00080000)
 12869  00235E  0100               	movlb	0	; () banked
 12870  002360  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12871  002362  D003               	goto	l520
 12872                           
 12873                           ; BSR set to: 0
 12874                           ;inc\CANlib.h: 1064: RXF5SIDLbits.SID1 = 0x01;
 12875  002364  010F               	movlb	15	; () banked
 12876  002366  8D15               	bsf	21,6,b	;volatile
 12877  002368  D002               	goto	l521
 12878  00236A                     l520:
 12879                           
 12880                           ; BSR set to: 0
 12881                           ;inc\CANlib.h: 1065: else
 12882                           ;inc\CANlib.h: 1066: RXF5SIDLbits.SID1 = 0x00;
 12883  00236A  010F               	movlb	15	; () banked
 12884  00236C  9D15               	bcf	21,6,b	;volatile
 12885  00236E                     l521:
 12886                           
 12887                           ; BSR set to: 15
 12888                           ;inc\CANlib.h: 1068: if (filter & 0x00100000)
 12889  00236E  0100               	movlb	0	; () banked
 12890  002370  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12891  002372  D003               	goto	l522
 12892                           
 12893                           ; BSR set to: 0
 12894                           ;inc\CANlib.h: 1069: RXF5SIDLbits.SID2 = 0x01 ;
 12895  002374  010F               	movlb	15	; () banked
 12896  002376  8F15               	bsf	21,7,b	;volatile
 12897  002378  D003               	goto	l4914
 12898  00237A                     l522:
 12899                           
 12900                           ; BSR set to: 0
 12901                           ;inc\CANlib.h: 1070: else
 12902                           ;inc\CANlib.h: 1071: RXF5SIDLbits.SID2 = 0x00 ;
 12903  00237A  010F               	movlb	15	; () banked
 12904  00237C  9F15               	bcf	21,7,b	;volatile
 12905  00237E  D000               	goto	l4914
 12906  002380                     l4914:
 12907                           
 12908                           ; BSR set to: 15
 12909                           ;inc\CANlib.h: 1073: tamp = (filter >> 21);
 12910  002380  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12911  002384  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12912  002388  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12913  00238C  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12914  002390  0E16               	movlw	22
 12915  002392  D006               	goto	u5780
 12916  002394                     u5785:
 12917  002394  0100               	movlb	0	; () banked
 12918  002396  90D8               	bcf	status,0,c
 12919  002398  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12920  00239A  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12921  00239C  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12922  00239E  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12923  0023A0                     u5780:
 12924  0023A0  2EE8               	decfsz	wreg,f,c
 12925  0023A2  D7F8               	goto	u5785
 12926  0023A4  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12927  0023A8  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12928  0023AC  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12929  0023B0  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12930                           
 12931                           ; BSR set to: 0
 12932                           ;inc\CANlib.h: 1074: tamp = tamp & 0x000000FF;
 12933  0023B4  0100               	movlb	0	; () banked
 12934  0023B6  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12935  0023B8  0100               	movlb	0	; () banked
 12936  0023BA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12937  0023BC  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12938  0023BE  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12939  0023C0  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;inc\CANlib.h: 1075: RXF5SIDH = (unsigned char) tamp;
 12943  0023C2  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 12944  0023C6  0012               	return	
 12945                           
 12946                           ; BSR set to: 0
 12947                           
 12948                           ; BSR set to: 0
 12949  0023C8  0012               	return		;funcret
 12950  0023CA                     __end_of_CANSetFilter:
 12951                           	opt stack 0
 12952                           tblptru	equ	0xFF8
 12953                           tblptrh	equ	0xFF7
 12954                           tblptrl	equ	0xFF6
 12955                           tablat	equ	0xFF5
 12956                           prodh	equ	0xFF4
 12957                           prodl	equ	0xFF3
 12958                           intcon	equ	0xFF2
 12959                           intcon2	equ	0xFF1
 12960                           postinc0	equ	0xFEE
 12961                           wreg	equ	0xFE8
 12962                           indf2	equ	0xFDF
 12963                           postinc2	equ	0xFDE
 12964                           postdec2	equ	0xFDD
 12965                           fsr2h	equ	0xFDA
 12966                           fsr2l	equ	0xFD9
 12967                           status	equ	0xFD8
 12968                           
 12969 ;; *************** function _CANOperationMode *****************
 12970 ;; Defined at:
 12971 ;;		line 206 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 12972 ;; Parameters:    Size  Location     Type
 12973 ;;  mode            1    wreg     enum E16348
 12974 ;; Auto vars:     Size  Location     Type
 12975 ;;  mode            1   23[BANK0 ] enum E16348
 12976 ;; Return value:  Size  Location     Type
 12977 ;;		None               void
 12978 ;; Registers used:
 12979 ;;		wreg, status,2, status,0
 12980 ;; Tracked objects:
 12981 ;;		On entry : 0/0
 12982 ;;		On exit  : 0/0
 12983 ;;		Unchanged: 0/0
 12984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12986 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12988 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12989 ;;Total ram usage:        1 bytes
 12990 ;; Hardware stack levels used:    1
 12991 ;; Hardware stack levels required when called:    5
 12992 ;; This function calls:
 12993 ;;		Nothing
 12994 ;; This function is called by:
 12995 ;;		_CANInitialize
 12996 ;; This function uses a non-reentrant model
 12997 ;;
 12998                           
 12999                           	psect	text35
 13000  005FB8                     __ptext35:
 13001                           	opt stack 0
 13002  005FB8                     _CANOperationMode:
 13003                           	opt stack 23
 13004                           
 13005                           ; BSR set to: 0
 13006                           ;incstack = 0
 13007                           ;CANOperationMode@mode stored from wreg
 13008  005FB8  0100               	movlb	0	; () banked
 13009  005FBA  6F77               	movwf	CANOperationMode@mode& (0+255),b
 13010                           
 13011                           ; BSR set to: 0
 13012                           ;inc\CANlib.h: 208: CANCON = mode;
 13013  005FBC  C077  FF6F         	movff	CANOperationMode@mode,3951	;volatile
 13014                           
 13015                           ; BSR set to: 0
 13016                           
 13017                           ;inc\CANlib.h: 210: while((CANSTAT & 0b11100000) != mode );
 13018  005FC0  D000               	goto	l6564
 13019  005FC2                     l6564:
 13020                           
 13021                           ; BSR set to: 0
 13022  005FC2  506E               	movf	3950,w,c	;volatile
 13023  005FC4  0BE0               	andlw	224
 13024  005FC6  0100               	movlb	0	; () banked
 13025  005FC8  1977               	xorwf	CANOperationMode@mode& (0+255),w,b
 13026  005FCA  A4D8               	btfss	status,2,c
 13027  005FCC  D7FA               	goto	l6564
 13028                           
 13029                           ; BSR set to: 0
 13030                           
 13031                           ; BSR set to: 0
 13032  005FCE  0012               	return		;funcret
 13033  005FD0                     __end_of_CANOperationMode:
 13034                           	opt stack 0
 13035                           tblptru	equ	0xFF8
 13036                           tblptrh	equ	0xFF7
 13037                           tblptrl	equ	0xFF6
 13038                           tablat	equ	0xFF5
 13039                           prodh	equ	0xFF4
 13040                           prodl	equ	0xFF3
 13041                           intcon	equ	0xFF2
 13042                           intcon2	equ	0xFF1
 13043                           postinc0	equ	0xFEE
 13044                           wreg	equ	0xFE8
 13045                           indf2	equ	0xFDF
 13046                           postinc2	equ	0xFDE
 13047                           postdec2	equ	0xFDD
 13048                           fsr2h	equ	0xFDA
 13049                           fsr2l	equ	0xFD9
 13050                           status	equ	0xFD8
 13051                           
 13052 ;; *************** function _ISR_Bassa *****************
 13053 ;; Defined at:
 13054 ;;		line 121 in file "parcheggio.c"
 13055 ;; Parameters:    Size  Location     Type
 13056 ;;		None
 13057 ;; Auto vars:     Size  Location     Type
 13058 ;;  MUX_index_co    2   37[COMRAM] unsigned char [2]
 13059 ;;  PORTA_temp      1   39[COMRAM] unsigned char 
 13060 ;; Return value:  Size  Location     Type
 13061 ;;		None               void
 13062 ;; Registers used:
 13063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13064 ;; Tracked objects:
 13065 ;;		On entry : 0/0
 13066 ;;		On exit  : 0/0
 13067 ;;		Unchanged: 0/0
 13068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13070 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13071 ;;      Temps:         21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13072 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13073 ;;Total ram usage:       24 bytes
 13074 ;; Hardware stack levels used:    1
 13075 ;; Hardware stack levels required when called:    4
 13076 ;; This function calls:
 13077 ;;		_CANisRxReady
 13078 ;;		_CANreceiveMessage
 13079 ;;		i1_CANsendMessage
 13080 ;;		i1_can_send
 13081 ;;		i1_delay_ms
 13082 ;; This function is called by:
 13083 ;;		Interrupt level 1
 13084 ;; This function uses a non-reentrant model
 13085 ;;
 13086                           
 13087                           	psect	intcodelo
 13088  000018                     __pintcodelo:
 13089                           	opt stack 0
 13090  000018                     _ISR_Bassa:
 13091                           	opt stack 19
 13092                           
 13093                           ; BSR set to: 0
 13094                           ;incstack = 0
 13095  000018  CFD8 F040          	movff	status,??_ISR_Bassa+4
 13096  00001C  CFE8 F041          	movff	wreg,??_ISR_Bassa+5
 13097  000020  CFE0 F042          	movff	bsr,??_ISR_Bassa+6
 13098  000024  CFFA F043          	movff	pclath,??_ISR_Bassa+7
 13099  000028  CFFB F044          	movff	pclatu,??_ISR_Bassa+8
 13100  00002C  CFE9 F045          	movff	fsr0l,??_ISR_Bassa+9
 13101  000030  CFEA F046          	movff	fsr0h,??_ISR_Bassa+10
 13102  000034  CFE1 F047          	movff	fsr1l,??_ISR_Bassa+11
 13103  000038  CFE2 F048          	movff	fsr1h,??_ISR_Bassa+12
 13104  00003C  CFD9 F049          	movff	fsr2l,??_ISR_Bassa+13
 13105  000040  CFDA F04A          	movff	fsr2h,??_ISR_Bassa+14
 13106  000044  CFF3 F04B          	movff	prodl,??_ISR_Bassa+15
 13107  000048  CFF4 F04C          	movff	prodh,??_ISR_Bassa+16
 13108  00004C  CFF6 F04D          	movff	tblptrl,??_ISR_Bassa+17
 13109  000050  CFF7 F04E          	movff	tblptrh,??_ISR_Bassa+18
 13110  000054  CFF8 F04F          	movff	tblptru,??_ISR_Bassa+19
 13111  000058  CFF5 F050          	movff	tablat,??_ISR_Bassa+20
 13112                           
 13113                           ;parcheggio.c: 124: if (INTCONbits.TMR0IF == 1) {
 13114  00005C  A4F2               	btfss	intcon,2,c	;volatile
 13115  00005E  D0C8               	goto	i1l6026
 13116                           
 13117                           ;parcheggio.c: 125: INTCONbits.INT0IE = 0;
 13118  000060  98F2               	bcf	intcon,4,c	;volatile
 13119                           
 13120                           ;parcheggio.c: 126: T0CONbits.TMR0ON = 0;
 13121  000062  9ED5               	bcf	4053,7,c	;volatile
 13122                           
 13123                           ;parcheggio.c: 127: TMR0H = 0x34;
 13124  000064  0E34               	movlw	52
 13125  000066  6ED7               	movwf	4055,c	;volatile
 13126                           
 13127                           ;parcheggio.c: 128: TMR0L = 0xE0;
 13128  000068  0EE0               	movlw	224
 13129  00006A  6ED6               	movwf	4054,c	;volatile
 13130                           
 13131                           ;parcheggio.c: 129: T0CONbits.TMR0ON = 1;
 13132  00006C  8ED5               	bsf	4053,7,c	;volatile
 13133                           
 13134                           ;parcheggio.c: 131: if (distance_error == 1) {
 13135  00006E  AA54               	btfss	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13136  000070  D00C               	goto	i1l694
 13137                           
 13138                           ;parcheggio.c: 132: sensor_distance[MUX_index] = 3000;
 13139  000072  501F               	movf	_MUX_index,w,c	;volatile
 13140  000074  0D02               	mullw	2
 13141  000076  0E01               	movlw	low _sensor_distance
 13142  000078  24F3               	addwf	prodl,w,c
 13143  00007A  6ED9               	movwf	fsr2l,c
 13144  00007C  0E00               	movlw	high _sensor_distance
 13145  00007E  20F4               	addwfc	prodh,w,c
 13146  000080  6EDA               	movwf	fsr2h,c
 13147  000082  0EB8               	movlw	184
 13148  000084  6EDE               	movwf	postinc2,c
 13149  000086  0E0B               	movlw	11
 13150  000088  6EDD               	movwf	postdec2,c
 13151  00008A                     i1l694:
 13152                           
 13153                           ;parcheggio.c: 133: }
 13154                           ;parcheggio.c: 135: if ((sensor_distance[MUX_index] < 250)&&(start_operation == 0)&&((MU
      +                          X_index == 3) || (MUX_index == 6))) {
 13155  00008A  501F               	movf	_MUX_index,w,c	;volatile
 13156  00008C  0D02               	mullw	2
 13157  00008E  0E01               	movlw	low _sensor_distance
 13158  000090  24F3               	addwf	prodl,w,c
 13159  000092  6ED9               	movwf	fsr2l,c
 13160  000094  0E00               	movlw	high _sensor_distance
 13161  000096  20F4               	addwfc	prodh,w,c
 13162  000098  6EDA               	movwf	fsr2h,c
 13163  00009A  0E01               	movlw	1
 13164  00009C  50DB               	movf	plusw2,w,c
 13165  00009E  E118               	bnz	i1l5966
 13166  0000A0  0EFA               	movlw	250
 13167  0000A2  5CDE               	subwf	postinc2,w,c
 13168  0000A4  B0D8               	btfsc	status,0,c
 13169  0000A6  D014               	goto	i1l5966
 13170  0000A8  BC55               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13171  0000AA  D012               	goto	i1l5966
 13172  0000AC  0E03               	movlw	3
 13173  0000AE  181F               	xorwf	_MUX_index,w,c	;volatile
 13174  0000B0  B4D8               	btfsc	status,2,c
 13175  0000B2  D004               	goto	i1l5962
 13176  0000B4  0E06               	movlw	6
 13177  0000B6  181F               	xorwf	_MUX_index,w,c	;volatile
 13178  0000B8  A4D8               	btfss	status,2,c
 13179  0000BA  D00A               	goto	i1l5966
 13180  0000BC                     i1l5962:
 13181                           
 13182                           ;parcheggio.c: 136: if (MUX_index == 3) {
 13183  0000BC  0E03               	movlw	3
 13184  0000BE  181F               	xorwf	_MUX_index,w,c	;volatile
 13185  0000C0  A4D8               	btfss	status,2,c
 13186  0000C2  D003               	goto	i1l698
 13187                           
 13188                           ;parcheggio.c: 137: sensor_distance_short[1] = sensor_distance[3];
 13189  0000C4  C007  F17C         	movff	_sensor_distance+6,_sensor_distance_short+1	;volatile
 13190                           
 13191                           ;parcheggio.c: 138: } else {
 13192  0000C8  D00D               	goto	i1l700
 13193  0000CA                     i1l698:
 13194                           
 13195                           ;parcheggio.c: 139: sensor_distance_short[0] = sensor_distance[6];
 13196  0000CA  C00D  F17B         	movff	_sensor_distance+12,_sensor_distance_short	;volatile
 13197                           
 13198                           ;parcheggio.c: 140: }
 13199                           ;parcheggio.c: 141: } else {
 13200  0000CE  D00A               	goto	i1l700
 13201  0000D0                     i1l5966:
 13202                           
 13203                           ;parcheggio.c: 142: sensor_distance_short[MUX_index] = 254;
 13204  0000D0  501F               	movf	_MUX_index,w,c	;volatile
 13205  0000D2  0D01               	mullw	1
 13206  0000D4  0E7B               	movlw	low _sensor_distance_short
 13207  0000D6  24F3               	addwf	prodl,w,c
 13208  0000D8  6ED9               	movwf	fsr2l,c
 13209  0000DA  0E01               	movlw	high _sensor_distance_short
 13210  0000DC  20F4               	addwfc	prodh,w,c
 13211  0000DE  6EDA               	movwf	fsr2h,c
 13212  0000E0  0EFE               	movlw	254
 13213  0000E2  6EDF               	movwf	indf2,c
 13214  0000E4                     i1l700:
 13215                           
 13216                           ;parcheggio.c: 143: }
 13217                           ;parcheggio.c: 144: if ((sensor_distance[MUX_index] < 5)&&(start_operation == 1)&&(avvic
      +                          inamento == 0)&&((MUX_index != 0) || (MUX_index != 1))) {
 13218  0000E4  501F               	movf	_MUX_index,w,c	;volatile
 13219  0000E6  0D02               	mullw	2
 13220  0000E8  0E01               	movlw	low _sensor_distance
 13221  0000EA  24F3               	addwf	prodl,w,c
 13222  0000EC  6ED9               	movwf	fsr2l,c
 13223  0000EE  0E00               	movlw	high _sensor_distance
 13224  0000F0  20F4               	addwfc	prodh,w,c
 13225  0000F2  6EDA               	movwf	fsr2h,c
 13226  0000F4  0E01               	movlw	1
 13227  0000F6  50DB               	movf	plusw2,w,c
 13228  0000F8  E142               	bnz	i1l5990
 13229  0000FA  0E05               	movlw	5
 13230  0000FC  5CDE               	subwf	postinc2,w,c
 13231  0000FE  B0D8               	btfsc	status,0,c
 13232  000100  D03E               	goto	i1l5990
 13233  000102  BC55               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13234  000104  B654               	btfsc	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
 13235  000106  D03B               	goto	i1l5990
 13236  000108  501F               	movf	_MUX_index,w,c	;volatile
 13237  00010A  A4D8               	btfss	status,2,c
 13238  00010C  D003               	goto	i1l5976
 13239  00010E  041F               	decf	_MUX_index,w,c	;volatile
 13240  000110  B4D8               	btfsc	status,2,c
 13241  000112  D035               	goto	i1l5990
 13242  000114                     i1l5976:
 13243                           
 13244                           ;parcheggio.c: 145: counter++;
 13245  000114  2A22               	incf	_counter,f,c	;volatile
 13246                           
 13247                           ;parcheggio.c: 146: if (counter > 0) {
 13248  000116  5022               	movf	_counter,w,c	;volatile
 13249  000118  B4D8               	btfsc	status,2,c
 13250  00011A  D031               	goto	i1l5990
 13251                           
 13252                           ;parcheggio.c: 147: set_speed = 0;
 13253  00011C  0E00               	movlw	0
 13254  00011E  0100               	movlb	0	; () banked
 13255  000120  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
 13256  000122  0E00               	movlw	0
 13257  000124  6FE5               	movwf	_set_speed& (0+255),b	;volatile
 13258                           
 13259                           ;parcheggio.c: 148: data_steering[0] = 90;
 13260  000126  0E5A               	movlw	90
 13261  000128  0101               	movlb	1	; () banked
 13262  00012A  6F6B               	movwf	_data_steering& (0+255),b	;volatile
 13263                           
 13264                           ;parcheggio.c: 149: data_brake [0] = 0;
 13265  00012C  0E00               	movlw	0
 13266  00012E  6E24               	movwf	_data_brake,c	;volatile
 13267                           
 13268                           ;parcheggio.c: 150: data_brake [1] = 1;
 13269  000130  0E01               	movlw	1
 13270  000132  6E25               	movwf	_data_brake+1,c	;volatile
 13271                           
 13272                           ; BSR set to: 1
 13273                           ;parcheggio.c: 151: can_send();
 13274  000134  EC27  F02C         	call	i1_can_send	;wreg free
 13275                           
 13276                           ;parcheggio.c: 152: delay_ms(100);
 13277  000138  0E00               	movlw	0
 13278  00013A  6E33               	movwf	i1delay_ms@value_ms+1,c
 13279  00013C  0E64               	movlw	100
 13280  00013E  6E32               	movwf	i1delay_ms@value_ms,c
 13281  000140  EC43  F02F         	call	i1_delay_ms	;wreg free
 13282                           
 13283                           ;parcheggio.c: 153: data[0] = 4;
 13284  000144  0E04               	movlw	4
 13285  000146  0101               	movlb	1	; () banked
 13286  000148  6F53               	movwf	_data& (0+255),b	;volatile
 13287                           
 13288                           ; BSR set to: 1
 13289                           ;parcheggio.c: 154: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
 13290  00014A  0E0D               	movlw	13
 13291  00014C  6E2C               	movwf	i1CANsendMessage@identifier,c
 13292  00014E  0E00               	movlw	0
 13293  000150  6E2D               	movwf	i1CANsendMessage@identifier+1,c
 13294  000152  0E00               	movlw	0
 13295  000154  6E2E               	movwf	i1CANsendMessage@identifier+2,c
 13296  000156  0E00               	movlw	0
 13297  000158  6E2F               	movwf	i1CANsendMessage@identifier+3,c
 13298  00015A  0E53               	movlw	low _data
 13299  00015C  6E30               	movwf	i1CANsendMessage@data,c
 13300  00015E  0E01               	movlw	high _data
 13301  000160  6E31               	movwf	i1CANsendMessage@data+1,c
 13302  000162  0E08               	movlw	8
 13303  000164  6E32               	movwf	i1CANsendMessage@dataLength,c
 13304  000166  0EBC               	movlw	188
 13305  000168  6E33               	movwf	i1CANsendMessage@flags,c
 13306  00016A  ECB5  F015         	call	i1_CANsendMessage	;wreg free
 13307                           
 13308                           ;parcheggio.c: 155: delay_ms(30);
 13309  00016E  0E00               	movlw	0
 13310  000170  6E33               	movwf	i1delay_ms@value_ms+1,c
 13311  000172  0E1E               	movlw	30
 13312  000174  6E32               	movwf	i1delay_ms@value_ms,c
 13313  000176  EC43  F02F         	call	i1_delay_ms	;wreg free
 13314  00017A  00FF               	reset		;# 
 13315  00017C  D000               	goto	i1l5990
 13316  00017E                     i1l5990:
 13317                           
 13318                           ;parcheggio.c: 157: }
 13319                           ;parcheggio.c: 158: }
 13320                           ;parcheggio.c: 160: MUX_index++;
 13321  00017E  2A1F               	incf	_MUX_index,f,c	;volatile
 13322                           
 13323                           ;parcheggio.c: 161: if (activation == 0) {
 13324  000180  B254               	btfsc	_activation/(0+8),_activation& (0+7),c	;volatile
 13325  000182  D015               	goto	i1l5998
 13326                           
 13327                           ;parcheggio.c: 162: unsigned char MUX_index_collision [] = {3, 6};
 13328  000184  C056  F051         	movff	ISR_Bassa@F16865,ISR_Bassa@MUX_index_collision
 13329  000188  C057  F052         	movff	ISR_Bassa@F16865+1,ISR_Bassa@MUX_index_collision+1
 13330                           
 13331                           ;parcheggio.c: 163: MUX_toggle = ~MUX_toggle;
 13332  00018C  7054               	btg	_MUX_toggle/(0+8),_MUX_toggle& (0+7),c	;volatile
 13333                           
 13334                           ;parcheggio.c: 164: MUX_index = MUX_index_collision[MUX_toggle];
 13335  00018E  A054               	btfss	_MUX_toggle/(0+8),_MUX_toggle& (0+7),c	;volatile
 13336  000190  D002               	goto	i1u739_20
 13337  000192  0E01               	movlw	1
 13338  000194  D001               	goto	i1u740_20
 13339  000196                     i1u739_20:
 13340  000196  0E00               	movlw	0
 13341  000198                     i1u740_20:
 13342  000198  6E3C               	movwf	??_ISR_Bassa& (0+255),c
 13343  00019A  6A3D               	clrf	(??_ISR_Bassa+1)& (0+255),c
 13344  00019C  0E51               	movlw	low ISR_Bassa@MUX_index_collision
 13345  00019E  243C               	addwf	??_ISR_Bassa,w,c
 13346  0001A0  6ED9               	movwf	fsr2l,c
 13347  0001A2  0E00               	movlw	high ISR_Bassa@MUX_index_collision
 13348  0001A4  203D               	addwfc	??_ISR_Bassa+1,w,c
 13349  0001A6  6EDA               	movwf	fsr2h,c
 13350  0001A8  50DF               	movf	indf2,w,c
 13351  0001AA  6E1F               	movwf	_MUX_index,c	;volatile
 13352  0001AC  D000               	goto	i1l5998
 13353  0001AE                     i1l5998:
 13354                           
 13355                           ;parcheggio.c: 165: }
 13356                           ;parcheggio.c: 167: if (MUX_index == 8) {
 13357  0001AE  0E08               	movlw	8
 13358  0001B0  181F               	xorwf	_MUX_index,w,c	;volatile
 13359  0001B2  A4D8               	btfss	status,2,c
 13360  0001B4  D002               	goto	i1l708
 13361                           
 13362                           ;parcheggio.c: 168: MUX_index = 0;
 13363  0001B6  0E00               	movlw	0
 13364  0001B8  6E1F               	movwf	_MUX_index,c	;volatile
 13365  0001BA                     i1l708:
 13366                           
 13367                           ;parcheggio.c: 169: }
 13368                           ;parcheggio.c: 171: unsigned char PORTA_temp = 0;
 13369  0001BA  0E00               	movlw	0
 13370  0001BC  6E53               	movwf	ISR_Bassa@PORTA_temp,c
 13371                           
 13372                           ;parcheggio.c: 172: PORTA_temp = MUX_select[MUX_index];
 13373  0001BE  501F               	movf	_MUX_index,w,c	;volatile
 13374  0001C0  0D01               	mullw	1
 13375  0001C2  0E00               	movlw	low _MUX_select
 13376  0001C4  24F3               	addwf	prodl,w,c
 13377  0001C6  6ED9               	movwf	fsr2l,c
 13378  0001C8  0E01               	movlw	high _MUX_select
 13379  0001CA  20F4               	addwfc	prodh,w,c
 13380  0001CC  6EDA               	movwf	fsr2h,c
 13381  0001CE  50DF               	movf	indf2,w,c
 13382  0001D0  6E53               	movwf	ISR_Bassa@PORTA_temp,c
 13383                           
 13384                           ;parcheggio.c: 173: PORTA = PORTA_temp;
 13385  0001D2  C053  FF80         	movff	ISR_Bassa@PORTA_temp,3968	;volatile
 13386                           
 13387                           ;parcheggio.c: 175: TRISBbits.RB0 = 0;
 13388  0001D6  9093               	bcf	3987,0,c	;volatile
 13389                           
 13390                           ;parcheggio.c: 176: LATBbits.LATB0 = 1;
 13391  0001D8  808A               	bsf	3978,0,c	;volatile
 13392                           
 13393                           ;parcheggio.c: 177: _delay((unsigned long)((15)*(16000000/4000000.0)));
 13394  0001DA  0E14               	movlw	20
 13395  0001DC                     i1u894_27:
 13396  0001DC  2EE8               	decfsz	wreg,f,c
 13397  0001DE  D7FE               	goto	i1u894_27
 13398                           
 13399                           ;parcheggio.c: 178: distance_error = 1;
 13400  0001E0  8A54               	bsf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13401                           
 13402                           ;parcheggio.c: 179: LATBbits.LATB0 = 0;
 13403  0001E2  908A               	bcf	3978,0,c	;volatile
 13404                           
 13405                           ;parcheggio.c: 180: TRISBbits.RB0 = 1;
 13406  0001E4  8093               	bsf	3987,0,c	;volatile
 13407                           
 13408                           ;parcheggio.c: 181: INTCONbits.INT0IF = 0;
 13409  0001E6  92F2               	bcf	intcon,1,c	;volatile
 13410                           
 13411                           ;parcheggio.c: 182: INTCON2bits.INTEDG0 = 1;
 13412  0001E8  8CF1               	bsf	intcon2,6,c	;volatile
 13413                           
 13414                           ;parcheggio.c: 183: INTCONbits.INT0IE = 1;
 13415  0001EA  88F2               	bsf	intcon,4,c	;volatile
 13416                           
 13417                           ;parcheggio.c: 184: INTCONbits.TMR0IF = 0;
 13418  0001EC  94F2               	bcf	intcon,2,c	;volatile
 13419  0001EE  D000               	goto	i1l6026
 13420  0001F0                     i1l6026:
 13421                           
 13422                           ;parcheggio.c: 186: }
 13423                           ;parcheggio.c: 189: if ((PIR3bits.RXB0IF == 1) || (PIR3bits.RXB1IF == 1)) {
 13424  0001F0  B0A4               	btfsc	4004,0,c	;volatile
 13425  0001F2  D002               	goto	i1l6030
 13426  0001F4  A2A4               	btfss	4004,1,c	;volatile
 13427  0001F6  D075               	goto	i1l719
 13428  0001F8                     i1l6030:
 13429                           
 13430                           ;parcheggio.c: 190: if (CANisRxReady() == 1) {
 13431  0001F8  ECE8  F02F         	call	_CANisRxReady	;wreg free
 13432  0001FC  06E8               	decf	wreg,f,c
 13433  0001FE  A4D8               	btfss	status,2,c
 13434  000200  D070               	goto	i1l719
 13435                           
 13436                           ;parcheggio.c: 191: CANreceiveMessage(&msg);
 13437  000202  0E44               	movlw	low _msg
 13438  000204  6E2C               	movwf	CANreceiveMessage@msg,c
 13439  000206  0E01               	movlw	high _msg
 13440  000208  6E2D               	movwf	CANreceiveMessage@msg+1,c
 13441  00020A  EC07  F019         	call	_CANreceiveMessage	;wreg free
 13442                           
 13443                           ;parcheggio.c: 193: if (msg.identifier == 0b00000001111) {
 13444  00020E  0E0F               	movlw	15
 13445  000210  0101               	movlb	1	; () banked
 13446  000212  1944               	xorwf	_msg& (0+255),w,b
 13447  000214  0101               	movlb	1	; () banked
 13448  000216  1145               	iorwf	(_msg+1)& (0+255),w,b
 13449  000218  0101               	movlb	1	; () banked
 13450  00021A  1146               	iorwf	(_msg+2)& (0+255),w,b
 13451  00021C  0101               	movlb	1	; () banked
 13452  00021E  1147               	iorwf	(_msg+3)& (0+255),w,b
 13453  000220  A4D8               	btfss	status,2,c
 13454  000222  D002               	goto	i1l6038
 13455                           
 13456                           ; BSR set to: 1
 13457                           ;parcheggio.c: 194: asd = 0;
 13458  000224  9454               	bcf	_asd/(0+8),_asd& (0+7),c	;volatile
 13459  000226  D000               	goto	i1l6038
 13460  000228                     i1l6038:
 13461                           
 13462                           ; BSR set to: 1
 13463                           ;parcheggio.c: 195: }
 13464                           ;parcheggio.c: 197: if ((msg.identifier == 0b00000001001) && (msg.RTR != 1)) {
 13465  000228  0E09               	movlw	9
 13466  00022A  0101               	movlb	1	; () banked
 13467  00022C  1944               	xorwf	_msg& (0+255),w,b
 13468  00022E  0101               	movlb	1	; () banked
 13469  000230  1145               	iorwf	(_msg+1)& (0+255),w,b
 13470  000232  0101               	movlb	1	; () banked
 13471  000234  1146               	iorwf	(_msg+2)& (0+255),w,b
 13472  000236  0101               	movlb	1	; () banked
 13473  000238  1147               	iorwf	(_msg+3)& (0+255),w,b
 13474  00023A  A4D8               	btfss	status,2,c
 13475  00023C  D02C               	goto	i1l6054
 13476                           
 13477                           ; BSR set to: 1
 13478  00023E  0101               	movlb	1	; () banked
 13479  000240  0552               	decf	(_msg+14)& (0+255),w,b
 13480  000242  B4D8               	btfsc	status,2,c
 13481  000244  D028               	goto	i1l6054
 13482                           
 13483                           ; BSR set to: 1
 13484                           ;parcheggio.c: 198: distance_average = 0;
 13485  000246  0E00               	movlw	0
 13486  000248  6E16               	movwf	_distance_average+1,c	;volatile
 13487  00024A  0E00               	movlw	0
 13488  00024C  6E15               	movwf	_distance_average,c	;volatile
 13489                           
 13490                           ; BSR set to: 1
 13491                           ;parcheggio.c: 199: distance_dx = msg.data[1];
 13492  00024E  C149  F017         	movff	_msg+5,_distance_dx	;volatile
 13493  000252  6A18               	clrf	_distance_dx+1,c	;volatile
 13494                           
 13495                           ;parcheggio.c: 200: distance_dx = ((distance_dx << 8) | msg.data[0]);
 13496  000254  5017               	movf	_distance_dx,w,c	;volatile
 13497  000256  6E3C               	movwf	??_ISR_Bassa& (0+255),c
 13498  000258  0101               	movlb	1	; () banked
 13499  00025A  5148               	movf	(_msg+4)& (0+255),w,b
 13500  00025C  6E17               	movwf	_distance_dx,c	;volatile
 13501  00025E  C03C  F018         	movff	??_ISR_Bassa,_distance_dx+1	;volatile
 13502                           
 13503                           ; BSR set to: 1
 13504                           ;parcheggio.c: 201: distance_sx = msg.data[3];
 13505  000262  C14B  F019         	movff	_msg+7,_distance_sx	;volatile
 13506  000266  6A1A               	clrf	_distance_sx+1,c	;volatile
 13507                           
 13508                           ;parcheggio.c: 202: distance_sx = ((distance_sx << 8) | msg.data[2]);
 13509  000268  5019               	movf	_distance_sx,w,c	;volatile
 13510  00026A  6E3C               	movwf	??_ISR_Bassa& (0+255),c
 13511  00026C  0101               	movlb	1	; () banked
 13512  00026E  514A               	movf	(_msg+6)& (0+255),w,b
 13513  000270  6E19               	movwf	_distance_sx,c	;volatile
 13514  000272  C03C  F01A         	movff	??_ISR_Bassa,_distance_sx+1	;volatile
 13515                           
 13516                           ; BSR set to: 1
 13517                           ;parcheggio.c: 203: distance_average = (distance_sx + distance_dx) / 2;
 13518  000276  5017               	movf	_distance_dx,w,c	;volatile
 13519  000278  2419               	addwf	_distance_sx,w,c	;volatile
 13520  00027A  6E3C               	movwf	??_ISR_Bassa& (0+255),c
 13521  00027C  5018               	movf	_distance_dx+1,w,c	;volatile
 13522  00027E  201A               	addwfc	_distance_sx+1,w,c	;volatile
 13523  000280  6E3D               	movwf	(??_ISR_Bassa+1)& (0+255),c
 13524  000282  90D8               	bcf	status,0,c
 13525  000284  303D               	rrcf	??_ISR_Bassa+1,w,c
 13526  000286  6E3E               	movwf	(??_ISR_Bassa+2)& (0+255),c
 13527  000288  303C               	rrcf	??_ISR_Bassa,w,c
 13528  00028A  6E15               	movwf	_distance_average,c	;volatile
 13529  00028C  C03E  F016         	movff	??_ISR_Bassa+2,_distance_average+1	;volatile
 13530                           
 13531                           ; BSR set to: 1
 13532                           ;parcheggio.c: 204: distance_received = 1;
 13533  000290  8C54               	bsf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
 13534                           
 13535                           ; BSR set to: 1
 13536                           ;parcheggio.c: 205: distance_received1 = 1;
 13537  000292  8E54               	bsf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
 13538  000294  D000               	goto	i1l6054
 13539  000296                     i1l6054:
 13540                           
 13541                           ; BSR set to: 1
 13542                           ;parcheggio.c: 206: }
 13543                           ;parcheggio.c: 208: if (msg.identifier == 0b00000001100) {
 13544  000296  0E0C               	movlw	12
 13545  000298  0101               	movlb	1	; () banked
 13546  00029A  1944               	xorwf	_msg& (0+255),w,b
 13547  00029C  0101               	movlb	1	; () banked
 13548  00029E  1145               	iorwf	(_msg+1)& (0+255),w,b
 13549  0002A0  0101               	movlb	1	; () banked
 13550  0002A2  1146               	iorwf	(_msg+2)& (0+255),w,b
 13551  0002A4  0101               	movlb	1	; () banked
 13552  0002A6  1147               	iorwf	(_msg+3)& (0+255),w,b
 13553  0002A8  A4D8               	btfss	status,2,c
 13554  0002AA  D00D               	goto	i1l6060
 13555                           
 13556                           ; BSR set to: 1
 13557                           ;parcheggio.c: 209: if (msg.data[0] == 1) {
 13558  0002AC  0101               	movlb	1	; () banked
 13559  0002AE  0548               	decf	(_msg+4)& (0+255),w,b
 13560  0002B0  A4D8               	btfss	status,2,c
 13561  0002B2  D003               	goto	i1l716
 13562                           
 13563                           ; BSR set to: 1
 13564                           ;parcheggio.c: 210: activation = 1;
 13565  0002B4  8254               	bsf	_activation/(0+8),_activation& (0+7),c	;volatile
 13566                           
 13567                           ;parcheggio.c: 211: PORTBbits.RB6 = 1;
 13568  0002B6  8C81               	bsf	3969,6,c	;volatile
 13569                           
 13570                           ;parcheggio.c: 212: } else {
 13571  0002B8  D006               	goto	i1l6060
 13572  0002BA                     i1l716:
 13573                           
 13574                           ; BSR set to: 1
 13575                           ;parcheggio.c: 213: activation = 0;
 13576  0002BA  9254               	bcf	_activation/(0+8),_activation& (0+7),c	;volatile
 13577                           
 13578                           ;parcheggio.c: 214: PORTBbits.RB4 = 0;
 13579  0002BC  9881               	bcf	3969,4,c	;volatile
 13580                           
 13581                           ;parcheggio.c: 215: PORTBbits.RB5 = 0;
 13582  0002BE  9A81               	bcf	3969,5,c	;volatile
 13583                           
 13584                           ;parcheggio.c: 216: PORTBbits.RB6 = 0;
 13585  0002C0  9C81               	bcf	3969,6,c	;volatile
 13586                           
 13587                           ;parcheggio.c: 217: request_sent = 0;
 13588  0002C2  9855               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
 13589                           
 13590                           ; BSR set to: 1
 13591  0002C4  D000               	goto	i1l6060
 13592  0002C6                     i1l6060:
 13593                           
 13594                           ; BSR set to: 1
 13595                           ;parcheggio.c: 218: }
 13596                           ;parcheggio.c: 219: }
 13597                           ;parcheggio.c: 221: if (msg.identifier == 0b00000001110) {
 13598  0002C6  0E0E               	movlw	14
 13599  0002C8  0101               	movlb	1	; () banked
 13600  0002CA  1944               	xorwf	_msg& (0+255),w,b
 13601  0002CC  0101               	movlb	1	; () banked
 13602  0002CE  1145               	iorwf	(_msg+1)& (0+255),w,b
 13603  0002D0  0101               	movlb	1	; () banked
 13604  0002D2  1146               	iorwf	(_msg+2)& (0+255),w,b
 13605  0002D4  0101               	movlb	1	; () banked
 13606  0002D6  1147               	iorwf	(_msg+3)& (0+255),w,b
 13607  0002D8  B4D8               	btfsc	status,2,c
 13608                           
 13609                           ; BSR set to: 1
 13610                           ;parcheggio.c: 222: start_operation = 1;
 13611  0002DA  8C55               	bsf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13612                           
 13613                           ; BSR set to: 1
 13614                           ;parcheggio.c: 223: }
 13615                           ;parcheggio.c: 229: PIR3bits.RXB0IF = 0;
 13616  0002DC  90A4               	bcf	4004,0,c	;volatile
 13617                           
 13618                           ;parcheggio.c: 230: PIR3bits.RXB1IF = 0;
 13619  0002DE  92A4               	bcf	4004,1,c	;volatile
 13620                           
 13621                           ; BSR set to: 1
 13622  0002E0  D000               	goto	i1l719
 13623  0002E2                     i1l719:
 13624  0002E2  C050  FFF5         	movff	??_ISR_Bassa+20,tablat
 13625  0002E6  C04F  FFF8         	movff	??_ISR_Bassa+19,tblptru
 13626  0002EA  C04E  FFF7         	movff	??_ISR_Bassa+18,tblptrh
 13627  0002EE  C04D  FFF6         	movff	??_ISR_Bassa+17,tblptrl
 13628  0002F2  C04C  FFF4         	movff	??_ISR_Bassa+16,prodh
 13629  0002F6  C04B  FFF3         	movff	??_ISR_Bassa+15,prodl
 13630  0002FA  C04A  FFDA         	movff	??_ISR_Bassa+14,fsr2h
 13631  0002FE  C049  FFD9         	movff	??_ISR_Bassa+13,fsr2l
 13632  000302  C048  FFE2         	movff	??_ISR_Bassa+12,fsr1h
 13633  000306  C047  FFE1         	movff	??_ISR_Bassa+11,fsr1l
 13634  00030A  C046  FFEA         	movff	??_ISR_Bassa+10,fsr0h
 13635  00030E  C045  FFE9         	movff	??_ISR_Bassa+9,fsr0l
 13636  000312  C044  FFFB         	movff	??_ISR_Bassa+8,pclatu
 13637  000316  C043  FFFA         	movff	??_ISR_Bassa+7,pclath
 13638  00031A  C042  FFE0         	movff	??_ISR_Bassa+6,bsr
 13639  00031E  C041  FFE8         	movff	??_ISR_Bassa+5,wreg
 13640  000322  C040  FFD8         	movff	??_ISR_Bassa+4,status
 13641  000326  0010               	retfie	
 13642  000328                     __end_of_ISR_Bassa:
 13643                           	opt stack 0
 13644                           pclatu	equ	0xFFB
 13645                           pclath	equ	0xFFA
 13646                           tblptru	equ	0xFF8
 13647                           tblptrh	equ	0xFF7
 13648                           tblptrl	equ	0xFF6
 13649                           tablat	equ	0xFF5
 13650                           prodh	equ	0xFF4
 13651                           prodl	equ	0xFF3
 13652                           intcon	equ	0xFF2
 13653                           intcon2	equ	0xFF1
 13654                           postinc0	equ	0xFEE
 13655                           fsr0h	equ	0xFEA
 13656                           fsr0l	equ	0xFE9
 13657                           wreg	equ	0xFE8
 13658                           fsr1h	equ	0xFE2
 13659                           fsr1l	equ	0xFE1
 13660                           bsr	equ	0xFE0
 13661                           indf2	equ	0xFDF
 13662                           postinc2	equ	0xFDE
 13663                           postdec2	equ	0xFDD
 13664                           plusw2	equ	0xFDB
 13665                           fsr2h	equ	0xFDA
 13666                           fsr2l	equ	0xFD9
 13667                           status	equ	0xFD8
 13668                           
 13669 ;; *************** function i1_delay_ms *****************
 13670 ;; Defined at:
 13671 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
 13672 ;; Parameters:    Size  Location     Type
 13673 ;;  value_ms        2    6[COMRAM] unsigned int 
 13674 ;; Auto vars:     Size  Location     Type
 13675 ;;		None
 13676 ;; Return value:  Size  Location     Type
 13677 ;;		None               void
 13678 ;; Registers used:
 13679 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13680 ;; Tracked objects:
 13681 ;;		On entry : 0/0
 13682 ;;		On exit  : 0/0
 13683 ;;		Unchanged: 0/0
 13684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13685 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13688 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13689 ;;Total ram usage:        2 bytes
 13690 ;; Hardware stack levels used:    1
 13691 ;; Hardware stack levels required when called:    3
 13692 ;; This function calls:
 13693 ;;		i1___wmul
 13694 ;; This function is called by:
 13695 ;;		_ISR_Bassa
 13696 ;; This function uses a non-reentrant model
 13697 ;;
 13698                           
 13699                           	psect	text37
 13700  005E86                     __ptext37:
 13701                           	opt stack 0
 13702  005E86                     i1_delay_ms:
 13703                           	opt stack 19
 13704                           
 13705                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
 13706                           
 13707                           ;incstack = 0
 13708  005E86  C0E8  F02C         	movff	_delay_quartz_frequency_value,i1___wmul@multiplier	;volatile
 13709  005E8A  6A2D               	clrf	i1___wmul@multiplier+1,c
 13710  005E8C  C032  F02E         	movff	i1delay_ms@value_ms,i1___wmul@multiplicand
 13711  005E90  C033  F02F         	movff	i1delay_ms@value_ms+1,i1___wmul@multiplicand+1
 13712  005E94  ECA5  F02F         	call	i1___wmul	;wreg free
 13713  005E98  C02C  F0E3         	movff	?i1___wmul,_clock_counter_reference	;volatile
 13714  005E9C  C02D  F0E4         	movff	?i1___wmul+1,_clock_counter_reference+1	;volatile
 13715                           
 13716                           ;src\delay.c: 75: while (clock_counter_reference) {
 13717  005EA0  D007               	goto	i1l565
 13718  005EA2                     i1l5892:
 13719                           
 13720                           ;src\delay.c: 85: _delay(240);
 13721  005EA2  0E50               	movlw	80
 13722  005EA4                     i1u895_27:
 13723  005EA4  2EE8               	decfsz	wreg,f,c
 13724  005EA6  D7FE               	goto	i1u895_27
 13725                           
 13726                           ;src\delay.c: 88: clock_counter_reference--;
 13727  005EA8  0100               	movlb	0	; () banked
 13728  005EAA  07E3               	decf	_clock_counter_reference& (0+255),f,b	;volatile
 13729  005EAC  A0D8               	btfss	status,0,c
 13730  005EAE  07E4               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
 13731  005EB0                     i1l565:
 13732  005EB0  0100               	movlb	0	; () banked
 13733  005EB2  51E3               	movf	_clock_counter_reference& (0+255),w,b	;volatile
 13734  005EB4  0100               	movlb	0	; () banked
 13735  005EB6  11E4               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
 13736  005EB8  A4D8               	btfss	status,2,c
 13737  005EBA  D7F3               	goto	i1l5892
 13738                           
 13739                           ; BSR set to: 0
 13740                           
 13741                           ; BSR set to: 0
 13742  005EBC  0012               	return		;funcret
 13743  005EBE                     __end_ofi1_delay_ms:
 13744                           	opt stack 0
 13745                           pclatu	equ	0xFFB
 13746                           pclath	equ	0xFFA
 13747                           tblptru	equ	0xFF8
 13748                           tblptrh	equ	0xFF7
 13749                           tblptrl	equ	0xFF6
 13750                           tablat	equ	0xFF5
 13751                           prodh	equ	0xFF4
 13752                           prodl	equ	0xFF3
 13753                           intcon	equ	0xFF2
 13754                           intcon2	equ	0xFF1
 13755                           postinc0	equ	0xFEE
 13756                           fsr0h	equ	0xFEA
 13757                           fsr0l	equ	0xFE9
 13758                           wreg	equ	0xFE8
 13759                           fsr1h	equ	0xFE2
 13760                           fsr1l	equ	0xFE1
 13761                           bsr	equ	0xFE0
 13762                           indf2	equ	0xFDF
 13763                           postinc2	equ	0xFDE
 13764                           postdec2	equ	0xFDD
 13765                           plusw2	equ	0xFDB
 13766                           fsr2h	equ	0xFDA
 13767                           fsr2l	equ	0xFD9
 13768                           status	equ	0xFD8
 13769                           
 13770 ;; *************** function i1___wmul *****************
 13771 ;; Defined at:
 13772 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 13773 ;; Parameters:    Size  Location     Type
 13774 ;;  multiplier      2    0[COMRAM] unsigned int 
 13775 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13776 ;; Auto vars:     Size  Location     Type
 13777 ;;  __wmul          2    4[COMRAM] unsigned int 
 13778 ;; Return value:  Size  Location     Type
 13779 ;;                  2    0[COMRAM] unsigned int 
 13780 ;; Registers used:
 13781 ;;		wreg, status,2, status,0, prodl, prodh
 13782 ;; Tracked objects:
 13783 ;;		On entry : 0/0
 13784 ;;		On exit  : 0/0
 13785 ;;		Unchanged: 0/0
 13786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13787 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13788 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;Total ram usage:        6 bytes
 13792 ;; Hardware stack levels used:    1
 13793 ;; Hardware stack levels required when called:    2
 13794 ;; This function calls:
 13795 ;;		Nothing
 13796 ;; This function is called by:
 13797 ;;		i1_delay_ms
 13798 ;; This function uses a non-reentrant model
 13799 ;;
 13800                           
 13801                           	psect	text38
 13802  005F4A                     __ptext38:
 13803                           	opt stack 0
 13804  005F4A                     i1___wmul:
 13805                           	opt stack 19
 13806                           
 13807                           ; BSR set to: 0
 13808                           ;incstack = 0
 13809  005F4A  502C               	movf	i1___wmul@multiplier,w,c
 13810  005F4C  022E               	mulwf	i1___wmul@multiplicand,c
 13811  005F4E  CFF3 F030          	movff	prodl,i1___wmul@product
 13812  005F52  CFF4 F031          	movff	prodh,i1___wmul@product+1
 13813  005F56  502C               	movf	i1___wmul@multiplier,w,c
 13814  005F58  022F               	mulwf	i1___wmul@multiplicand+1,c
 13815  005F5A  50F3               	movf	prodl,w,c
 13816  005F5C  2631               	addwf	i1___wmul@product+1,f,c
 13817  005F5E  502D               	movf	i1___wmul@multiplier+1,w,c
 13818  005F60  022E               	mulwf	i1___wmul@multiplicand,c
 13819  005F62  50F3               	movf	prodl,w,c
 13820  005F64  2631               	addwf	i1___wmul@product+1,f,c
 13821  005F66  C030  F02C         	movff	i1___wmul@product,?i1___wmul
 13822  005F6A  C031  F02D         	movff	i1___wmul@product+1,?i1___wmul+1
 13823  005F6E  0012               	return	
 13824  005F70  0012               	return		;funcret
 13825  005F72                     __end_ofi1___wmul:
 13826                           	opt stack 0
 13827                           pclatu	equ	0xFFB
 13828                           pclath	equ	0xFFA
 13829                           tblptru	equ	0xFF8
 13830                           tblptrh	equ	0xFF7
 13831                           tblptrl	equ	0xFF6
 13832                           tablat	equ	0xFF5
 13833                           prodh	equ	0xFF4
 13834                           prodl	equ	0xFF3
 13835                           intcon	equ	0xFF2
 13836                           intcon2	equ	0xFF1
 13837                           postinc0	equ	0xFEE
 13838                           fsr0h	equ	0xFEA
 13839                           fsr0l	equ	0xFE9
 13840                           wreg	equ	0xFE8
 13841                           fsr1h	equ	0xFE2
 13842                           fsr1l	equ	0xFE1
 13843                           bsr	equ	0xFE0
 13844                           indf2	equ	0xFDF
 13845                           postinc2	equ	0xFDE
 13846                           postdec2	equ	0xFDD
 13847                           plusw2	equ	0xFDB
 13848                           fsr2h	equ	0xFDA
 13849                           fsr2l	equ	0xFD9
 13850                           status	equ	0xFD8
 13851                           
 13852 ;; *************** function i1_can_send *****************
 13853 ;; Defined at:
 13854 ;;		line 463 in file "parcheggio.c"
 13855 ;; Parameters:    Size  Location     Type
 13856 ;;		None
 13857 ;; Auto vars:     Size  Location     Type
 13858 ;;		None
 13859 ;; Return value:  Size  Location     Type
 13860 ;;		None               void
 13861 ;; Registers used:
 13862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13863 ;; Tracked objects:
 13864 ;;		On entry : 0/0
 13865 ;;		On exit  : 0/0
 13866 ;;		Unchanged: 0/0
 13867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13872 ;;Total ram usage:        0 bytes
 13873 ;; Hardware stack levels used:    1
 13874 ;; Hardware stack levels required when called:    3
 13875 ;; This function calls:
 13876 ;;		i1_CANisTxReady
 13877 ;;		i1_CANsendMessage
 13878 ;; This function is called by:
 13879 ;;		_ISR_Bassa
 13880 ;; This function uses a non-reentrant model
 13881 ;;
 13882                           
 13883                           	psect	text39
 13884  00584E                     __ptext39:
 13885                           	opt stack 0
 13886  00584E                     i1_can_send:
 13887                           	opt stack 19
 13888                           
 13889                           ;parcheggio.c: 464: if (start_operation == 1) {
 13890                           
 13891                           ;incstack = 0
 13892  00584E  BC55               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13893  005850  D002               	goto	i1l5900
 13894  005852  D057               	goto	i1l5920
 13895                           
 13896                           ;parcheggio.c: 466: while (CANisTxReady() != 1);
 13897  005854  D000               	goto	i1l5900
 13898  005856                     i1l5900:
 13899  005856  ECCC  F02F         	call	i1_CANisTxReady	;wreg free
 13900  00585A  06E8               	decf	wreg,f,c
 13901  00585C  A4D8               	btfss	status,2,c
 13902  00585E  D7FB               	goto	i1l5900
 13903                           
 13904                           ;parcheggio.c: 467: CANsendMessage(0b00000000111, data_steering, 8, CAN_CONFIG_STD_MSG &
      +                           CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
 13905  005860  0E07               	movlw	7
 13906  005862  6E2C               	movwf	i1CANsendMessage@identifier,c
 13907  005864  0E00               	movlw	0
 13908  005866  6E2D               	movwf	i1CANsendMessage@identifier+1,c
 13909  005868  0E00               	movlw	0
 13910  00586A  6E2E               	movwf	i1CANsendMessage@identifier+2,c
 13911  00586C  0E00               	movlw	0
 13912  00586E  6E2F               	movwf	i1CANsendMessage@identifier+3,c
 13913  005870  0E6B               	movlw	low _data_steering
 13914  005872  6E30               	movwf	i1CANsendMessage@data,c
 13915  005874  0E01               	movlw	high _data_steering
 13916  005876  6E31               	movwf	i1CANsendMessage@data+1,c
 13917  005878  0E08               	movlw	8
 13918  00587A  6E32               	movwf	i1CANsendMessage@dataLength,c
 13919  00587C  0EBC               	movlw	188
 13920  00587E  6E33               	movwf	i1CANsendMessage@flags,c
 13921  005880  ECB5  F015         	call	i1_CANsendMessage	;wreg free
 13922                           
 13923                           ;parcheggio.c: 470: data_speed[0] = set_speed;
 13924  005884  C0E5  F163         	movff	_set_speed,_data_speed	;volatile
 13925                           
 13926                           ;parcheggio.c: 471: data_speed[1] = (set_speed >> 8);
 13927  005888  0100               	movlb	0	; () banked
 13928  00588A  51E6               	movf	(_set_speed+1)& (0+255),w,b	;volatile
 13929  00588C  0101               	movlb	1	; () banked
 13930  00588E  6F64               	movwf	(_data_speed+1)& (0+255),b	;volatile
 13931                           
 13932                           ; BSR set to: 1
 13933                           ;parcheggio.c: 472: data_speed[2] = dir;
 13934  005890  0E00               	movlw	0
 13935  005892  B854               	btfsc	_dir/(0+8),_dir& (0+7),c	;volatile
 13936  005894  0E01               	movlw	1
 13937  005896  0101               	movlb	1	; () banked
 13938  005898  6F65               	movwf	(_data_speed+2)& (0+255),b	;volatile
 13939                           
 13940                           ; BSR set to: 1
 13941                           
 13942                           ;parcheggio.c: 473: while (CANisTxReady() != 1);
 13943  00589A  D000               	goto	i1l5910
 13944  00589C                     i1l5910:
 13945  00589C  ECCC  F02F         	call	i1_CANisTxReady	;wreg free
 13946  0058A0  06E8               	decf	wreg,f,c
 13947  0058A2  A4D8               	btfss	status,2,c
 13948  0058A4  D7FB               	goto	i1l5910
 13949                           
 13950                           ;parcheggio.c: 474: CANsendMessage(0b00000000101, data_speed, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
 13951  0058A6  0E05               	movlw	5
 13952  0058A8  6E2C               	movwf	i1CANsendMessage@identifier,c
 13953  0058AA  0E00               	movlw	0
 13954  0058AC  6E2D               	movwf	i1CANsendMessage@identifier+1,c
 13955  0058AE  0E00               	movlw	0
 13956  0058B0  6E2E               	movwf	i1CANsendMessage@identifier+2,c
 13957  0058B2  0E00               	movlw	0
 13958  0058B4  6E2F               	movwf	i1CANsendMessage@identifier+3,c
 13959  0058B6  0E63               	movlw	low _data_speed
 13960  0058B8  6E30               	movwf	i1CANsendMessage@data,c
 13961  0058BA  0E01               	movlw	high _data_speed
 13962  0058BC  6E31               	movwf	i1CANsendMessage@data+1,c
 13963  0058BE  0E08               	movlw	8
 13964  0058C0  6E32               	movwf	i1CANsendMessage@dataLength,c
 13965  0058C2  0EBC               	movlw	188
 13966  0058C4  6E33               	movwf	i1CANsendMessage@flags,c
 13967  0058C6  ECB5  F015         	call	i1_CANsendMessage	;wreg free
 13968                           
 13969                           ;parcheggio.c: 477: data_brake[1] = 0;
 13970  0058CA  0E00               	movlw	0
 13971  0058CC  6E25               	movwf	_data_brake+1,c	;volatile
 13972                           
 13973                           ;parcheggio.c: 478: while (CANisTxReady() != 1);
 13974  0058CE  D000               	goto	i1l5916
 13975  0058D0                     i1l5916:
 13976  0058D0  ECCC  F02F         	call	i1_CANisTxReady	;wreg free
 13977  0058D4  06E8               	decf	wreg,f,c
 13978  0058D6  A4D8               	btfss	status,2,c
 13979  0058D8  D7FB               	goto	i1l5916
 13980                           
 13981                           ;parcheggio.c: 479: CANsendMessage(0b00000000110, data_brake, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
 13982  0058DA  0E06               	movlw	6
 13983  0058DC  6E2C               	movwf	i1CANsendMessage@identifier,c
 13984  0058DE  0E00               	movlw	0
 13985  0058E0  6E2D               	movwf	i1CANsendMessage@identifier+1,c
 13986  0058E2  0E00               	movlw	0
 13987  0058E4  6E2E               	movwf	i1CANsendMessage@identifier+2,c
 13988  0058E6  0E00               	movlw	0
 13989  0058E8  6E2F               	movwf	i1CANsendMessage@identifier+3,c
 13990  0058EA  0E24               	movlw	low _data_brake
 13991  0058EC  6E30               	movwf	i1CANsendMessage@data,c
 13992  0058EE  0E00               	movlw	high _data_brake
 13993  0058F0  6E31               	movwf	i1CANsendMessage@data+1,c
 13994  0058F2  0E08               	movlw	8
 13995  0058F4  6E32               	movwf	i1CANsendMessage@dataLength,c
 13996  0058F6  0EBC               	movlw	188
 13997  0058F8  6E33               	movwf	i1CANsendMessage@flags,c
 13998  0058FA  ECB5  F015         	call	i1_CANsendMessage	;wreg free
 13999                           
 14000                           ;parcheggio.c: 480: } else {
 14001  0058FE  0012               	return	
 14002                           
 14003                           ;parcheggio.c: 481: while (CANisTxReady() != 1);
 14004  005900  D000               	goto	i1l5920
 14005  005902                     i1l5920:
 14006  005902  ECCC  F02F         	call	i1_CANisTxReady	;wreg free
 14007  005906  06E8               	decf	wreg,f,c
 14008  005908  A4D8               	btfss	status,2,c
 14009  00590A  D7FB               	goto	i1l5920
 14010                           
 14011                           ;parcheggio.c: 482: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
 14012  00590C  0E10               	movlw	16
 14013  00590E  6E2C               	movwf	i1CANsendMessage@identifier,c
 14014  005910  0E00               	movlw	0
 14015  005912  6E2D               	movwf	i1CANsendMessage@identifier+1,c
 14016  005914  0E00               	movlw	0
 14017  005916  6E2E               	movwf	i1CANsendMessage@identifier+2,c
 14018  005918  0E00               	movlw	0
 14019  00591A  6E2F               	movwf	i1CANsendMessage@identifier+3,c
 14020  00591C  0E5B               	movlw	low _data_correction
 14021  00591E  6E30               	movwf	i1CANsendMessage@data,c
 14022  005920  0E01               	movlw	high _data_correction
 14023  005922  6E31               	movwf	i1CANsendMessage@data+1,c
 14024  005924  0E08               	movlw	8
 14025  005926  6E32               	movwf	i1CANsendMessage@dataLength,c
 14026  005928  0EBC               	movlw	188
 14027  00592A  6E33               	movwf	i1CANsendMessage@flags,c
 14028  00592C  ECB5  F015         	call	i1_CANsendMessage	;wreg free
 14029  005930  0012               	return	
 14030  005932  0012               	return		;funcret
 14031  005934                     __end_ofi1_can_send:
 14032                           	opt stack 0
 14033                           pclatu	equ	0xFFB
 14034                           pclath	equ	0xFFA
 14035                           tblptru	equ	0xFF8
 14036                           tblptrh	equ	0xFF7
 14037                           tblptrl	equ	0xFF6
 14038                           tablat	equ	0xFF5
 14039                           prodh	equ	0xFF4
 14040                           prodl	equ	0xFF3
 14041                           intcon	equ	0xFF2
 14042                           intcon2	equ	0xFF1
 14043                           postinc0	equ	0xFEE
 14044                           fsr0h	equ	0xFEA
 14045                           fsr0l	equ	0xFE9
 14046                           wreg	equ	0xFE8
 14047                           fsr1h	equ	0xFE2
 14048                           fsr1l	equ	0xFE1
 14049                           bsr	equ	0xFE0
 14050                           indf2	equ	0xFDF
 14051                           postinc2	equ	0xFDE
 14052                           postdec2	equ	0xFDD
 14053                           plusw2	equ	0xFDB
 14054                           fsr2h	equ	0xFDA
 14055                           fsr2l	equ	0xFD9
 14056                           status	equ	0xFD8
 14057                           
 14058 ;; *************** function i1_CANsendMessage *****************
 14059 ;; Defined at:
 14060 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 14061 ;; Parameters:    Size  Location     Type
 14062 ;;  identifier      4    0[COMRAM] unsigned long 
 14063 ;;  data            2    4[COMRAM] PTR unsigned char 
 14064 ;;		 -> data_speed(8), data_correction(8), data_test(8), data(8), 
 14065 ;;		 -> data_brake(8), data_steering(8), sensor_distance_short(8), 
 14066 ;;  dataLength      1    6[COMRAM] unsigned char 
 14067 ;;  flags           1    7[COMRAM] enum E16376
 14068 ;; Auto vars:     Size  Location     Type
 14069 ;;  CANsendMessa    4   12[COMRAM] unsigned long 
 14070 ;; Return value:  Size  Location     Type
 14071 ;;		None               void
 14072 ;; Registers used:
 14073 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14074 ;; Tracked objects:
 14075 ;;		On entry : 0/0
 14076 ;;		On exit  : 0/0
 14077 ;;		Unchanged: 0/0
 14078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14079 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14080 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14081 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14082 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14083 ;;Total ram usage:       16 bytes
 14084 ;; Hardware stack levels used:    1
 14085 ;; Hardware stack levels required when called:    2
 14086 ;; This function calls:
 14087 ;;		Nothing
 14088 ;; This function is called by:
 14089 ;;		_ISR_Bassa
 14090 ;;		i1_can_send
 14091 ;; This function uses a non-reentrant model
 14092 ;;
 14093                           
 14094                           	psect	text40
 14095  002B6A                     __ptext40:
 14096                           	opt stack 0
 14097  002B6A                     i1_CANsendMessage:
 14098                           	opt stack 19
 14099                           
 14100                           ;inc\CANlib.h: 296: unsigned long tamp;
 14101                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
 14102                           
 14103                           ;incstack = 0
 14104  002B6A  010F               	movlb	15	; () banked
 14105  002B6C  B740               	btfsc	64,3,b	;volatile
 14106  002B6E  D118               	goto	i1l359
 14107                           
 14108                           ; BSR set to: 15
 14109                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
 14110  002B70  C032  FF45         	movff	i1CANsendMessage@dataLength,3909	;volatile
 14111                           
 14112                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
 14113  002B74  AC33               	btfss	i1CANsendMessage@flags,6,c
 14114  002B76  D003               	goto	i1l360
 14115                           
 14116                           ; BSR set to: 15
 14117                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
 14118  002B78  010F               	movlb	15	; () banked
 14119  002B7A  8D45               	bsf	69,6,b	;volatile
 14120  002B7C  D002               	goto	i1l361
 14121  002B7E                     i1l360:
 14122                           
 14123                           ; BSR set to: 15
 14124                           ;inc\CANlib.h: 302: else
 14125                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
 14126  002B7E  010F               	movlb	15	; () banked
 14127  002B80  9D45               	bcf	69,6,b	;volatile
 14128  002B82                     i1l361:
 14129                           
 14130                           ; BSR set to: 15
 14131                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
 14132  002B82  A633               	btfss	i1CANsendMessage@flags,3,c
 14133  002B84  D067               	goto	i1l362
 14134                           
 14135                           ; BSR set to: 15
 14136                           ;inc\CANlib.h: 306: {
 14137                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
 14138  002B86  502C               	movf	i1CANsendMessage@identifier,w,c
 14139  002B88  6E38               	movwf	i1CANsendMessage@tamp,c
 14140  002B8A  6A39               	clrf	i1CANsendMessage@tamp+1,c
 14141  002B8C  6A3A               	clrf	i1CANsendMessage@tamp+2,c
 14142  002B8E  6A3B               	clrf	i1CANsendMessage@tamp+3,c
 14143                           
 14144                           ; BSR set to: 15
 14145                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
 14146  002B90  C038  FF44         	movff	i1CANsendMessage@tamp,3908	;volatile
 14147                           
 14148                           ; BSR set to: 15
 14149                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
 14150  002B94  0E00               	movlw	0
 14151  002B96  142C               	andwf	i1CANsendMessage@identifier,w,c
 14152  002B98  6E38               	movwf	i1CANsendMessage@tamp,c
 14153  002B9A  0EFF               	movlw	255
 14154  002B9C  142D               	andwf	i1CANsendMessage@identifier+1,w,c
 14155  002B9E  6E39               	movwf	i1CANsendMessage@tamp+1,c
 14156  002BA0  0E00               	movlw	0
 14157  002BA2  142E               	andwf	i1CANsendMessage@identifier+2,w,c
 14158  002BA4  6E3A               	movwf	i1CANsendMessage@tamp+2,c
 14159  002BA6  0E00               	movlw	0
 14160  002BA8  142F               	andwf	i1CANsendMessage@identifier+3,w,c
 14161  002BAA  6E3B               	movwf	i1CANsendMessage@tamp+3,c
 14162                           
 14163                           ; BSR set to: 15
 14164                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
 14165  002BAC  C038  F034         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14166  002BB0  C039  F035         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14167  002BB4  C03A  F036         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14168  002BB8  C03B  F037         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14169  002BBC  C035  F034         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14170  002BC0  C036  F035         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14171  002BC4  C037  F036         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14172  002BC8  6A37               	clrf	??i1_CANsendMessage+3,c
 14173  002BCA  C034  F038         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14174  002BCE  C035  F039         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14175  002BD2  C036  F03A         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14176  002BD6  C037  F03B         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14177                           
 14178                           ; BSR set to: 15
 14179                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
 14180  002BDA  C038  FF43         	movff	i1CANsendMessage@tamp,3907	;volatile
 14181                           
 14182                           ; BSR set to: 15
 14183                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
 14184  002BDE  0E00               	movlw	0
 14185  002BE0  010F               	movlb	15	; () banked
 14186  002BE2  6F42               	movwf	66,b	;volatile
 14187                           
 14188                           ; BSR set to: 15
 14189                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
 14190  002BE4  010F               	movlb	15	; () banked
 14191  002BE6  8742               	bsf	66,3,b	;volatile
 14192                           
 14193                           ; BSR set to: 15
 14194                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
 14195  002BE8  A02E               	btfss	i1CANsendMessage@identifier+2,0,c
 14196  002BEA  D002               	goto	i1l363
 14197                           
 14198                           ; BSR set to: 15
 14199                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
 14200  002BEC  010F               	movlb	15	; () banked
 14201  002BEE  8142               	bsf	66,0,b	;volatile
 14202  002BF0                     i1l363:
 14203                           
 14204                           ; BSR set to: 15
 14205                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
 14206  002BF0  A22E               	btfss	i1CANsendMessage@identifier+2,1,c
 14207  002BF2  D002               	goto	i1l364
 14208                           
 14209                           ; BSR set to: 15
 14210                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
 14211  002BF4  010F               	movlb	15	; () banked
 14212  002BF6  8342               	bsf	66,1,b	;volatile
 14213  002BF8                     i1l364:
 14214                           
 14215                           ; BSR set to: 15
 14216                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
 14217  002BF8  A42E               	btfss	i1CANsendMessage@identifier+2,2,c
 14218  002BFA  D002               	goto	i1l365
 14219                           
 14220                           ; BSR set to: 15
 14221                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
 14222  002BFC  010F               	movlb	15	; () banked
 14223  002BFE  8B42               	bsf	66,5,b	;volatile
 14224  002C00                     i1l365:
 14225                           
 14226                           ; BSR set to: 15
 14227                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
 14228  002C00  A62E               	btfss	i1CANsendMessage@identifier+2,3,c
 14229  002C02  D002               	goto	i1l366
 14230                           
 14231                           ; BSR set to: 15
 14232                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
 14233  002C04  010F               	movlb	15	; () banked
 14234  002C06  8D42               	bsf	66,6,b	;volatile
 14235  002C08                     i1l366:
 14236                           
 14237                           ; BSR set to: 15
 14238                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
 14239  002C08  A82E               	btfss	i1CANsendMessage@identifier+2,4,c
 14240  002C0A  D003               	goto	i1l5184
 14241                           
 14242                           ; BSR set to: 15
 14243                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
 14244  002C0C  010F               	movlb	15	; () banked
 14245  002C0E  8F42               	bsf	66,7,b	;volatile
 14246  002C10  D000               	goto	i1l5184
 14247  002C12                     i1l5184:
 14248                           
 14249                           ; BSR set to: 15
 14250                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
 14251  002C12  C02C  F034         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14252  002C16  C02D  F035         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14253  002C1A  C02E  F036         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14254  002C1E  C02F  F037         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14255  002C22  0E16               	movlw	22
 14256  002C24  D005               	goto	i1u617_20
 14257  002C26                     i1u617_25:
 14258  002C26  90D8               	bcf	status,0,c
 14259  002C28  3237               	rrcf	??i1_CANsendMessage+3,f,c
 14260  002C2A  3236               	rrcf	??i1_CANsendMessage+2,f,c
 14261  002C2C  3235               	rrcf	??i1_CANsendMessage+1,f,c
 14262  002C2E  3234               	rrcf	??i1_CANsendMessage,f,c
 14263  002C30                     i1u617_20:
 14264  002C30  2EE8               	decfsz	wreg,f,c
 14265  002C32  D7F9               	goto	i1u617_25
 14266  002C34  C034  F038         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14267  002C38  C035  F039         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14268  002C3C  C036  F03A         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14269  002C40  C037  F03B         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14270                           
 14271                           ; BSR set to: 15
 14272                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
 14273  002C44  5038               	movf	i1CANsendMessage@tamp,w,c
 14274  002C46  6E38               	movwf	i1CANsendMessage@tamp,c
 14275  002C48  6A39               	clrf	i1CANsendMessage@tamp+1,c
 14276  002C4A  6A3A               	clrf	i1CANsendMessage@tamp+2,c
 14277  002C4C  6A3B               	clrf	i1CANsendMessage@tamp+3,c
 14278                           
 14279                           ; BSR set to: 15
 14280                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
 14281  002C4E  C038  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14282                           
 14283                           ;inc\CANlib.h: 332: }
 14284  002C52  D04E               	goto	i1l5204
 14285  002C54                     i1l362:
 14286                           
 14287                           ; BSR set to: 15
 14288                           ;inc\CANlib.h: 334: else
 14289                           ;inc\CANlib.h: 336: {
 14290                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
 14291  002C54  010F               	movlb	15	; () banked
 14292  002C56  9742               	bcf	66,3,b	;volatile
 14293                           
 14294                           ; BSR set to: 15
 14295                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
 14296  002C58  C02C  F034         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14297  002C5C  C02D  F035         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14298  002C60  C02E  F036         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14299  002C64  C02F  F037         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14300  002C68  0E04               	movlw	4
 14301  002C6A  D005               	goto	i1u618_20
 14302  002C6C                     i1u618_25:
 14303  002C6C  90D8               	bcf	status,0,c
 14304  002C6E  3237               	rrcf	??i1_CANsendMessage+3,f,c
 14305  002C70  3236               	rrcf	??i1_CANsendMessage+2,f,c
 14306  002C72  3235               	rrcf	??i1_CANsendMessage+1,f,c
 14307  002C74  3234               	rrcf	??i1_CANsendMessage,f,c
 14308  002C76                     i1u618_20:
 14309  002C76  2EE8               	decfsz	wreg,f,c
 14310  002C78  D7F9               	goto	i1u618_25
 14311  002C7A  C034  F038         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14312  002C7E  C035  F039         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14313  002C82  C036  F03A         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14314  002C86  C037  F03B         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14315                           
 14316                           ; BSR set to: 15
 14317                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
 14318  002C8A  5038               	movf	i1CANsendMessage@tamp,w,c
 14319  002C8C  6E38               	movwf	i1CANsendMessage@tamp,c
 14320  002C8E  6A39               	clrf	i1CANsendMessage@tamp+1,c
 14321  002C90  6A3A               	clrf	i1CANsendMessage@tamp+2,c
 14322  002C92  6A3B               	clrf	i1CANsendMessage@tamp+3,c
 14323                           
 14324                           ; BSR set to: 15
 14325                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
 14326  002C94  C038  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14327                           
 14328                           ; BSR set to: 15
 14329                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
 14330  002C98  0E07               	movlw	7
 14331  002C9A  142C               	andwf	i1CANsendMessage@identifier,w,c
 14332  002C9C  6E38               	movwf	i1CANsendMessage@tamp,c
 14333  002C9E  0E00               	movlw	0
 14334  002CA0  142D               	andwf	i1CANsendMessage@identifier+1,w,c
 14335  002CA2  6E39               	movwf	i1CANsendMessage@tamp+1,c
 14336  002CA4  0E00               	movlw	0
 14337  002CA6  142E               	andwf	i1CANsendMessage@identifier+2,w,c
 14338  002CA8  6E3A               	movwf	i1CANsendMessage@tamp+2,c
 14339  002CAA  0E00               	movlw	0
 14340  002CAC  142F               	andwf	i1CANsendMessage@identifier+3,w,c
 14341  002CAE  6E3B               	movwf	i1CANsendMessage@tamp+3,c
 14342                           
 14343                           ; BSR set to: 15
 14344                           ;inc\CANlib.h: 344: tamp = tamp << 5;
 14345  002CB0  C038  F034         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14346  002CB4  C039  F035         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14347  002CB8  C03A  F036         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14348  002CBC  C03B  F037         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14349  002CC0  0E05               	movlw	5
 14350  002CC2                     i1u619_25:
 14351  002CC2  90D8               	bcf	status,0,c
 14352  002CC4  3634               	rlcf	??i1_CANsendMessage,f,c
 14353  002CC6  3635               	rlcf	??i1_CANsendMessage+1,f,c
 14354  002CC8  3636               	rlcf	??i1_CANsendMessage+2,f,c
 14355  002CCA  3637               	rlcf	??i1_CANsendMessage+3,f,c
 14356  002CCC  2EE8               	decfsz	wreg,f,c
 14357  002CCE  D7F9               	goto	i1u619_25
 14358  002CD0  C034  F038         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14359  002CD4  C035  F039         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14360  002CD8  C036  F03A         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14361  002CDC  C037  F03B         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14362                           
 14363                           ; BSR set to: 15
 14364                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
 14365  002CE0  010F               	movlb	15	; () banked
 14366  002CE2  5142               	movf	66,w,b	;volatile
 14367  002CE4  0B1F               	andlw	31
 14368  002CE6  010F               	movlb	15	; () banked
 14369  002CE8  6F42               	movwf	66,b	;volatile
 14370                           
 14371                           ; BSR set to: 15
 14372                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
 14373  002CEA  C038  FF42         	movff	i1CANsendMessage@tamp,3906	;volatile
 14374  002CEE  D000               	goto	i1l5204
 14375  002CF0                     i1l5204:
 14376                           
 14377                           ; BSR set to: 15
 14378                           ;inc\CANlib.h: 347: }
 14379                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
 14380  002CF0  A033               	btfss	i1CANsendMessage@flags,0,c
 14381  002CF2  D003               	goto	i1l369
 14382                           
 14383                           ; BSR set to: 15
 14384                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
 14385  002CF4  010F               	movlb	15	; () banked
 14386  002CF6  8140               	bsf	64,0,b	;volatile
 14387  002CF8  D002               	goto	i1l370
 14388  002CFA                     i1l369:
 14389                           
 14390                           ; BSR set to: 15
 14391                           ;inc\CANlib.h: 351: else
 14392                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
 14393  002CFA  010F               	movlb	15	; () banked
 14394  002CFC  9140               	bcf	64,0,b	;volatile
 14395  002CFE                     i1l370:
 14396                           
 14397                           ; BSR set to: 15
 14398                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
 14399  002CFE  A233               	btfss	i1CANsendMessage@flags,1,c
 14400  002D00  D003               	goto	i1l371
 14401                           
 14402                           ; BSR set to: 15
 14403                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
 14404  002D02  010F               	movlb	15	; () banked
 14405  002D04  8340               	bsf	64,1,b	;volatile
 14406  002D06  D003               	goto	i1l5210
 14407  002D08                     i1l371:
 14408                           
 14409                           ; BSR set to: 15
 14410                           ;inc\CANlib.h: 355: else
 14411                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
 14412  002D08  010F               	movlb	15	; () banked
 14413  002D0A  9340               	bcf	64,1,b	;volatile
 14414  002D0C  D000               	goto	i1l5210
 14415  002D0E                     i1l5210:
 14416                           
 14417                           ; BSR set to: 15
 14418                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
 14419  002D0E  C030  FFD9         	movff	i1CANsendMessage@data,fsr2l
 14420  002D12  C031  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 14421  002D16  50DF               	movf	indf2,w,c
 14422  002D18  010F               	movlb	15	; () banked
 14423  002D1A  6F46               	movwf	70,b	;volatile
 14424                           
 14425                           ; BSR set to: 15
 14426                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
 14427  002D1C  EE20 F001          	lfsr	2,1
 14428  002D20  5030               	movf	i1CANsendMessage@data,w,c
 14429  002D22  26D9               	addwf	fsr2l,f,c
 14430  002D24  5031               	movf	i1CANsendMessage@data+1,w,c
 14431  002D26  22DA               	addwfc	fsr2h,f,c
 14432  002D28  50DF               	movf	indf2,w,c
 14433  002D2A  010F               	movlb	15	; () banked
 14434  002D2C  6F47               	movwf	71,b	;volatile
 14435                           
 14436                           ; BSR set to: 15
 14437                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
 14438  002D2E  EE20 F002          	lfsr	2,2
 14439  002D32  5030               	movf	i1CANsendMessage@data,w,c
 14440  002D34  26D9               	addwf	fsr2l,f,c
 14441  002D36  5031               	movf	i1CANsendMessage@data+1,w,c
 14442  002D38  22DA               	addwfc	fsr2h,f,c
 14443  002D3A  50DF               	movf	indf2,w,c
 14444  002D3C  010F               	movlb	15	; () banked
 14445  002D3E  6F48               	movwf	72,b	;volatile
 14446                           
 14447                           ; BSR set to: 15
 14448                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
 14449  002D40  EE20 F003          	lfsr	2,3
 14450  002D44  5030               	movf	i1CANsendMessage@data,w,c
 14451  002D46  26D9               	addwf	fsr2l,f,c
 14452  002D48  5031               	movf	i1CANsendMessage@data+1,w,c
 14453  002D4A  22DA               	addwfc	fsr2h,f,c
 14454  002D4C  50DF               	movf	indf2,w,c
 14455  002D4E  010F               	movlb	15	; () banked
 14456  002D50  6F49               	movwf	73,b	;volatile
 14457                           
 14458                           ; BSR set to: 15
 14459                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
 14460  002D52  EE20 F004          	lfsr	2,4
 14461  002D56  5030               	movf	i1CANsendMessage@data,w,c
 14462  002D58  26D9               	addwf	fsr2l,f,c
 14463  002D5A  5031               	movf	i1CANsendMessage@data+1,w,c
 14464  002D5C  22DA               	addwfc	fsr2h,f,c
 14465  002D5E  50DF               	movf	indf2,w,c
 14466  002D60  010F               	movlb	15	; () banked
 14467  002D62  6F4A               	movwf	74,b	;volatile
 14468                           
 14469                           ; BSR set to: 15
 14470                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
 14471  002D64  EE20 F005          	lfsr	2,5
 14472  002D68  5030               	movf	i1CANsendMessage@data,w,c
 14473  002D6A  26D9               	addwf	fsr2l,f,c
 14474  002D6C  5031               	movf	i1CANsendMessage@data+1,w,c
 14475  002D6E  22DA               	addwfc	fsr2h,f,c
 14476  002D70  50DF               	movf	indf2,w,c
 14477  002D72  010F               	movlb	15	; () banked
 14478  002D74  6F4B               	movwf	75,b	;volatile
 14479                           
 14480                           ; BSR set to: 15
 14481                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
 14482  002D76  EE20 F006          	lfsr	2,6
 14483  002D7A  5030               	movf	i1CANsendMessage@data,w,c
 14484  002D7C  26D9               	addwf	fsr2l,f,c
 14485  002D7E  5031               	movf	i1CANsendMessage@data+1,w,c
 14486  002D80  22DA               	addwfc	fsr2h,f,c
 14487  002D82  50DF               	movf	indf2,w,c
 14488  002D84  010F               	movlb	15	; () banked
 14489  002D86  6F4C               	movwf	76,b	;volatile
 14490                           
 14491                           ; BSR set to: 15
 14492                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
 14493  002D88  EE20 F007          	lfsr	2,7
 14494  002D8C  5030               	movf	i1CANsendMessage@data,w,c
 14495  002D8E  26D9               	addwf	fsr2l,f,c
 14496  002D90  5031               	movf	i1CANsendMessage@data+1,w,c
 14497  002D92  22DA               	addwfc	fsr2h,f,c
 14498  002D94  50DF               	movf	indf2,w,c
 14499  002D96  010F               	movlb	15	; () banked
 14500  002D98  6F4D               	movwf	77,b	;volatile
 14501                           
 14502                           ; BSR set to: 15
 14503                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
 14504  002D9A  010F               	movlb	15	; () banked
 14505  002D9C  8740               	bsf	64,3,b	;volatile
 14506                           
 14507                           ; BSR set to: 15
 14508                           ;inc\CANlib.h: 368: return;
 14509  002D9E  0012               	return	
 14510  002DA0                     i1l359:
 14511                           
 14512                           ; BSR set to: 15
 14513                           ;inc\CANlib.h: 369: }
 14514                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
 14515  002DA0  010F               	movlb	15	; () banked
 14516  002DA2  B730               	btfsc	48,3,b	;volatile
 14517  002DA4  D118               	goto	i1l374
 14518                           
 14519                           ; BSR set to: 15
 14520                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
 14521  002DA6  C032  FF35         	movff	i1CANsendMessage@dataLength,3893	;volatile
 14522                           
 14523                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
 14524  002DAA  AC33               	btfss	i1CANsendMessage@flags,6,c
 14525  002DAC  D003               	goto	i1l375
 14526                           
 14527                           ; BSR set to: 15
 14528                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
 14529  002DAE  010F               	movlb	15	; () banked
 14530  002DB0  8D35               	bsf	53,6,b	;volatile
 14531  002DB2  D002               	goto	i1l376
 14532  002DB4                     i1l375:
 14533                           
 14534                           ; BSR set to: 15
 14535                           ;inc\CANlib.h: 378: else
 14536                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
 14537  002DB4  010F               	movlb	15	; () banked
 14538  002DB6  9D35               	bcf	53,6,b	;volatile
 14539  002DB8                     i1l376:
 14540                           
 14541                           ; BSR set to: 15
 14542                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
 14543  002DB8  A633               	btfss	i1CANsendMessage@flags,3,c
 14544  002DBA  D067               	goto	i1l377
 14545                           
 14546                           ; BSR set to: 15
 14547                           ;inc\CANlib.h: 382: {
 14548                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
 14549  002DBC  502C               	movf	i1CANsendMessage@identifier,w,c
 14550  002DBE  6E38               	movwf	i1CANsendMessage@tamp,c
 14551  002DC0  6A39               	clrf	i1CANsendMessage@tamp+1,c
 14552  002DC2  6A3A               	clrf	i1CANsendMessage@tamp+2,c
 14553  002DC4  6A3B               	clrf	i1CANsendMessage@tamp+3,c
 14554                           
 14555                           ; BSR set to: 15
 14556                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
 14557  002DC6  C038  FF34         	movff	i1CANsendMessage@tamp,3892	;volatile
 14558                           
 14559                           ; BSR set to: 15
 14560                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
 14561  002DCA  0E00               	movlw	0
 14562  002DCC  142C               	andwf	i1CANsendMessage@identifier,w,c
 14563  002DCE  6E38               	movwf	i1CANsendMessage@tamp,c
 14564  002DD0  0EFF               	movlw	255
 14565  002DD2  142D               	andwf	i1CANsendMessage@identifier+1,w,c
 14566  002DD4  6E39               	movwf	i1CANsendMessage@tamp+1,c
 14567  002DD6  0E00               	movlw	0
 14568  002DD8  142E               	andwf	i1CANsendMessage@identifier+2,w,c
 14569  002DDA  6E3A               	movwf	i1CANsendMessage@tamp+2,c
 14570  002DDC  0E00               	movlw	0
 14571  002DDE  142F               	andwf	i1CANsendMessage@identifier+3,w,c
 14572  002DE0  6E3B               	movwf	i1CANsendMessage@tamp+3,c
 14573                           
 14574                           ; BSR set to: 15
 14575                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
 14576  002DE2  C038  F034         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14577  002DE6  C039  F035         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14578  002DEA  C03A  F036         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14579  002DEE  C03B  F037         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14580  002DF2  C035  F034         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14581  002DF6  C036  F035         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14582  002DFA  C037  F036         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14583  002DFE  6A37               	clrf	??i1_CANsendMessage+3,c
 14584  002E00  C034  F038         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14585  002E04  C035  F039         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14586  002E08  C036  F03A         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14587  002E0C  C037  F03B         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14588                           
 14589                           ; BSR set to: 15
 14590                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
 14591  002E10  C038  FF33         	movff	i1CANsendMessage@tamp,3891	;volatile
 14592                           
 14593                           ; BSR set to: 15
 14594                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
 14595  002E14  0E00               	movlw	0
 14596  002E16  010F               	movlb	15	; () banked
 14597  002E18  6F32               	movwf	50,b	;volatile
 14598                           
 14599                           ; BSR set to: 15
 14600                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
 14601  002E1A  010F               	movlb	15	; () banked
 14602  002E1C  8732               	bsf	50,3,b	;volatile
 14603                           
 14604                           ; BSR set to: 15
 14605                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
 14606  002E1E  A02E               	btfss	i1CANsendMessage@identifier+2,0,c
 14607  002E20  D002               	goto	i1l378
 14608                           
 14609                           ; BSR set to: 15
 14610                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
 14611  002E22  010F               	movlb	15	; () banked
 14612  002E24  8132               	bsf	50,0,b	;volatile
 14613  002E26                     i1l378:
 14614                           
 14615                           ; BSR set to: 15
 14616                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
 14617  002E26  A22E               	btfss	i1CANsendMessage@identifier+2,1,c
 14618  002E28  D002               	goto	i1l379
 14619                           
 14620                           ; BSR set to: 15
 14621                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
 14622  002E2A  010F               	movlb	15	; () banked
 14623  002E2C  8332               	bsf	50,1,b	;volatile
 14624  002E2E                     i1l379:
 14625                           
 14626                           ; BSR set to: 15
 14627                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
 14628  002E2E  A42E               	btfss	i1CANsendMessage@identifier+2,2,c
 14629  002E30  D002               	goto	i1l380
 14630                           
 14631                           ; BSR set to: 15
 14632                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
 14633  002E32  010F               	movlb	15	; () banked
 14634  002E34  8B32               	bsf	50,5,b	;volatile
 14635  002E36                     i1l380:
 14636                           
 14637                           ; BSR set to: 15
 14638                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
 14639  002E36  A62E               	btfss	i1CANsendMessage@identifier+2,3,c
 14640  002E38  D002               	goto	i1l381
 14641                           
 14642                           ; BSR set to: 15
 14643                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
 14644  002E3A  010F               	movlb	15	; () banked
 14645  002E3C  8D32               	bsf	50,6,b	;volatile
 14646  002E3E                     i1l381:
 14647                           
 14648                           ; BSR set to: 15
 14649                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
 14650  002E3E  A82E               	btfss	i1CANsendMessage@identifier+2,4,c
 14651  002E40  D003               	goto	i1l5260
 14652                           
 14653                           ; BSR set to: 15
 14654                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
 14655  002E42  010F               	movlb	15	; () banked
 14656  002E44  8F32               	bsf	50,7,b	;volatile
 14657  002E46  D000               	goto	i1l5260
 14658  002E48                     i1l5260:
 14659                           
 14660                           ; BSR set to: 15
 14661                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
 14662  002E48  C02C  F034         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14663  002E4C  C02D  F035         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14664  002E50  C02E  F036         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14665  002E54  C02F  F037         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14666  002E58  0E16               	movlw	22
 14667  002E5A  D005               	goto	i1u630_20
 14668  002E5C                     i1u630_25:
 14669  002E5C  90D8               	bcf	status,0,c
 14670  002E5E  3237               	rrcf	??i1_CANsendMessage+3,f,c
 14671  002E60  3236               	rrcf	??i1_CANsendMessage+2,f,c
 14672  002E62  3235               	rrcf	??i1_CANsendMessage+1,f,c
 14673  002E64  3234               	rrcf	??i1_CANsendMessage,f,c
 14674  002E66                     i1u630_20:
 14675  002E66  2EE8               	decfsz	wreg,f,c
 14676  002E68  D7F9               	goto	i1u630_25
 14677  002E6A  C034  F038         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14678  002E6E  C035  F039         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14679  002E72  C036  F03A         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14680  002E76  C037  F03B         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14681                           
 14682                           ; BSR set to: 15
 14683                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
 14684  002E7A  5038               	movf	i1CANsendMessage@tamp,w,c
 14685  002E7C  6E38               	movwf	i1CANsendMessage@tamp,c
 14686  002E7E  6A39               	clrf	i1CANsendMessage@tamp+1,c
 14687  002E80  6A3A               	clrf	i1CANsendMessage@tamp+2,c
 14688  002E82  6A3B               	clrf	i1CANsendMessage@tamp+3,c
 14689                           
 14690                           ; BSR set to: 15
 14691                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
 14692  002E84  C038  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 14693                           
 14694                           ;inc\CANlib.h: 407: }
 14695  002E88  D04E               	goto	i1l5280
 14696  002E8A                     i1l377:
 14697                           
 14698                           ; BSR set to: 15
 14699                           ;inc\CANlib.h: 409: else
 14700                           ;inc\CANlib.h: 411: {
 14701                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
 14702  002E8A  010F               	movlb	15	; () banked
 14703  002E8C  9732               	bcf	50,3,b	;volatile
 14704                           
 14705                           ; BSR set to: 15
 14706                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
 14707  002E8E  C02C  F034         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14708  002E92  C02D  F035         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14709  002E96  C02E  F036         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14710  002E9A  C02F  F037         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14711  002E9E  0E04               	movlw	4
 14712  002EA0  D005               	goto	i1u631_20
 14713  002EA2                     i1u631_25:
 14714  002EA2  90D8               	bcf	status,0,c
 14715  002EA4  3237               	rrcf	??i1_CANsendMessage+3,f,c
 14716  002EA6  3236               	rrcf	??i1_CANsendMessage+2,f,c
 14717  002EA8  3235               	rrcf	??i1_CANsendMessage+1,f,c
 14718  002EAA  3234               	rrcf	??i1_CANsendMessage,f,c
 14719  002EAC                     i1u631_20:
 14720  002EAC  2EE8               	decfsz	wreg,f,c
 14721  002EAE  D7F9               	goto	i1u631_25
 14722  002EB0  C034  F038         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14723  002EB4  C035  F039         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14724  002EB8  C036  F03A         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14725  002EBC  C037  F03B         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14726                           
 14727                           ; BSR set to: 15
 14728                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
 14729  002EC0  5038               	movf	i1CANsendMessage@tamp,w,c
 14730  002EC2  6E38               	movwf	i1CANsendMessage@tamp,c
 14731  002EC4  6A39               	clrf	i1CANsendMessage@tamp+1,c
 14732  002EC6  6A3A               	clrf	i1CANsendMessage@tamp+2,c
 14733  002EC8  6A3B               	clrf	i1CANsendMessage@tamp+3,c
 14734                           
 14735                           ; BSR set to: 15
 14736                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
 14737  002ECA  C038  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 14738                           
 14739                           ; BSR set to: 15
 14740                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
 14741  002ECE  0E07               	movlw	7
 14742  002ED0  142C               	andwf	i1CANsendMessage@identifier,w,c
 14743  002ED2  6E38               	movwf	i1CANsendMessage@tamp,c
 14744  002ED4  0E00               	movlw	0
 14745  002ED6  142D               	andwf	i1CANsendMessage@identifier+1,w,c
 14746  002ED8  6E39               	movwf	i1CANsendMessage@tamp+1,c
 14747  002EDA  0E00               	movlw	0
 14748  002EDC  142E               	andwf	i1CANsendMessage@identifier+2,w,c
 14749  002EDE  6E3A               	movwf	i1CANsendMessage@tamp+2,c
 14750  002EE0  0E00               	movlw	0
 14751  002EE2  142F               	andwf	i1CANsendMessage@identifier+3,w,c
 14752  002EE4  6E3B               	movwf	i1CANsendMessage@tamp+3,c
 14753                           
 14754                           ; BSR set to: 15
 14755                           ;inc\CANlib.h: 419: tamp = tamp << 5;
 14756  002EE6  C038  F034         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14757  002EEA  C039  F035         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14758  002EEE  C03A  F036         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14759  002EF2  C03B  F037         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14760  002EF6  0E05               	movlw	5
 14761  002EF8                     i1u632_25:
 14762  002EF8  90D8               	bcf	status,0,c
 14763  002EFA  3634               	rlcf	??i1_CANsendMessage,f,c
 14764  002EFC  3635               	rlcf	??i1_CANsendMessage+1,f,c
 14765  002EFE  3636               	rlcf	??i1_CANsendMessage+2,f,c
 14766  002F00  3637               	rlcf	??i1_CANsendMessage+3,f,c
 14767  002F02  2EE8               	decfsz	wreg,f,c
 14768  002F04  D7F9               	goto	i1u632_25
 14769  002F06  C034  F038         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14770  002F0A  C035  F039         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14771  002F0E  C036  F03A         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14772  002F12  C037  F03B         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14773                           
 14774                           ; BSR set to: 15
 14775                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
 14776  002F16  010F               	movlb	15	; () banked
 14777  002F18  5132               	movf	50,w,b	;volatile
 14778  002F1A  0B1F               	andlw	31
 14779  002F1C  010F               	movlb	15	; () banked
 14780  002F1E  6F32               	movwf	50,b	;volatile
 14781                           
 14782                           ; BSR set to: 15
 14783                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
 14784  002F20  C038  FF32         	movff	i1CANsendMessage@tamp,3890	;volatile
 14785  002F24  D000               	goto	i1l5280
 14786  002F26                     i1l5280:
 14787                           
 14788                           ; BSR set to: 15
 14789                           ;inc\CANlib.h: 422: }
 14790                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
 14791  002F26  A033               	btfss	i1CANsendMessage@flags,0,c
 14792  002F28  D003               	goto	i1l384
 14793                           
 14794                           ; BSR set to: 15
 14795                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
 14796  002F2A  010F               	movlb	15	; () banked
 14797  002F2C  8130               	bsf	48,0,b	;volatile
 14798  002F2E  D002               	goto	i1l385
 14799  002F30                     i1l384:
 14800                           
 14801                           ; BSR set to: 15
 14802                           ;inc\CANlib.h: 426: else
 14803                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
 14804  002F30  010F               	movlb	15	; () banked
 14805  002F32  9130               	bcf	48,0,b	;volatile
 14806  002F34                     i1l385:
 14807                           
 14808                           ; BSR set to: 15
 14809                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
 14810  002F34  A233               	btfss	i1CANsendMessage@flags,1,c
 14811  002F36  D003               	goto	i1l386
 14812                           
 14813                           ; BSR set to: 15
 14814                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
 14815  002F38  010F               	movlb	15	; () banked
 14816  002F3A  8330               	bsf	48,1,b	;volatile
 14817  002F3C  D003               	goto	i1l5286
 14818  002F3E                     i1l386:
 14819                           
 14820                           ; BSR set to: 15
 14821                           ;inc\CANlib.h: 430: else
 14822                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
 14823  002F3E  010F               	movlb	15	; () banked
 14824  002F40  9330               	bcf	48,1,b	;volatile
 14825  002F42  D000               	goto	i1l5286
 14826  002F44                     i1l5286:
 14827                           
 14828                           ; BSR set to: 15
 14829                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
 14830  002F44  C030  FFD9         	movff	i1CANsendMessage@data,fsr2l
 14831  002F48  C031  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 14832  002F4C  50DF               	movf	indf2,w,c
 14833  002F4E  010F               	movlb	15	; () banked
 14834  002F50  6F36               	movwf	54,b	;volatile
 14835                           
 14836                           ; BSR set to: 15
 14837                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
 14838  002F52  EE20 F001          	lfsr	2,1
 14839  002F56  5030               	movf	i1CANsendMessage@data,w,c
 14840  002F58  26D9               	addwf	fsr2l,f,c
 14841  002F5A  5031               	movf	i1CANsendMessage@data+1,w,c
 14842  002F5C  22DA               	addwfc	fsr2h,f,c
 14843  002F5E  50DF               	movf	indf2,w,c
 14844  002F60  010F               	movlb	15	; () banked
 14845  002F62  6F37               	movwf	55,b	;volatile
 14846                           
 14847                           ; BSR set to: 15
 14848                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
 14849  002F64  EE20 F002          	lfsr	2,2
 14850  002F68  5030               	movf	i1CANsendMessage@data,w,c
 14851  002F6A  26D9               	addwf	fsr2l,f,c
 14852  002F6C  5031               	movf	i1CANsendMessage@data+1,w,c
 14853  002F6E  22DA               	addwfc	fsr2h,f,c
 14854  002F70  50DF               	movf	indf2,w,c
 14855  002F72  010F               	movlb	15	; () banked
 14856  002F74  6F38               	movwf	56,b	;volatile
 14857                           
 14858                           ; BSR set to: 15
 14859                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
 14860  002F76  EE20 F003          	lfsr	2,3
 14861  002F7A  5030               	movf	i1CANsendMessage@data,w,c
 14862  002F7C  26D9               	addwf	fsr2l,f,c
 14863  002F7E  5031               	movf	i1CANsendMessage@data+1,w,c
 14864  002F80  22DA               	addwfc	fsr2h,f,c
 14865  002F82  50DF               	movf	indf2,w,c
 14866  002F84  010F               	movlb	15	; () banked
 14867  002F86  6F39               	movwf	57,b	;volatile
 14868                           
 14869                           ; BSR set to: 15
 14870                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
 14871  002F88  EE20 F004          	lfsr	2,4
 14872  002F8C  5030               	movf	i1CANsendMessage@data,w,c
 14873  002F8E  26D9               	addwf	fsr2l,f,c
 14874  002F90  5031               	movf	i1CANsendMessage@data+1,w,c
 14875  002F92  22DA               	addwfc	fsr2h,f,c
 14876  002F94  50DF               	movf	indf2,w,c
 14877  002F96  010F               	movlb	15	; () banked
 14878  002F98  6F3A               	movwf	58,b	;volatile
 14879                           
 14880                           ; BSR set to: 15
 14881                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
 14882  002F9A  EE20 F005          	lfsr	2,5
 14883  002F9E  5030               	movf	i1CANsendMessage@data,w,c
 14884  002FA0  26D9               	addwf	fsr2l,f,c
 14885  002FA2  5031               	movf	i1CANsendMessage@data+1,w,c
 14886  002FA4  22DA               	addwfc	fsr2h,f,c
 14887  002FA6  50DF               	movf	indf2,w,c
 14888  002FA8  010F               	movlb	15	; () banked
 14889  002FAA  6F3B               	movwf	59,b	;volatile
 14890                           
 14891                           ; BSR set to: 15
 14892                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
 14893  002FAC  EE20 F006          	lfsr	2,6
 14894  002FB0  5030               	movf	i1CANsendMessage@data,w,c
 14895  002FB2  26D9               	addwf	fsr2l,f,c
 14896  002FB4  5031               	movf	i1CANsendMessage@data+1,w,c
 14897  002FB6  22DA               	addwfc	fsr2h,f,c
 14898  002FB8  50DF               	movf	indf2,w,c
 14899  002FBA  010F               	movlb	15	; () banked
 14900  002FBC  6F3C               	movwf	60,b	;volatile
 14901                           
 14902                           ; BSR set to: 15
 14903                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
 14904  002FBE  EE20 F007          	lfsr	2,7
 14905  002FC2  5030               	movf	i1CANsendMessage@data,w,c
 14906  002FC4  26D9               	addwf	fsr2l,f,c
 14907  002FC6  5031               	movf	i1CANsendMessage@data+1,w,c
 14908  002FC8  22DA               	addwfc	fsr2h,f,c
 14909  002FCA  50DF               	movf	indf2,w,c
 14910  002FCC  010F               	movlb	15	; () banked
 14911  002FCE  6F3D               	movwf	61,b	;volatile
 14912                           
 14913                           ; BSR set to: 15
 14914                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
 14915  002FD0  010F               	movlb	15	; () banked
 14916  002FD2  8730               	bsf	48,3,b	;volatile
 14917                           
 14918                           ; BSR set to: 15
 14919                           ;inc\CANlib.h: 444: return;
 14920  002FD4  0012               	return	
 14921  002FD6                     i1l374:
 14922                           
 14923                           ; BSR set to: 15
 14924                           ;inc\CANlib.h: 445: }
 14925                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
 14926  002FD6  010F               	movlb	15	; () banked
 14927  002FD8  B720               	btfsc	32,3,b	;volatile
 14928  002FDA  0012               	return	
 14929                           
 14930                           ; BSR set to: 15
 14931                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
 14932  002FDC  C032  FF25         	movff	i1CANsendMessage@dataLength,3877	;volatile
 14933                           
 14934                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
 14935  002FE0  AC33               	btfss	i1CANsendMessage@flags,6,c
 14936  002FE2  D003               	goto	i1l389
 14937                           
 14938                           ; BSR set to: 15
 14939                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
 14940  002FE4  010F               	movlb	15	; () banked
 14941  002FE6  8D25               	bsf	37,6,b	;volatile
 14942  002FE8  D002               	goto	i1l390
 14943  002FEA                     i1l389:
 14944                           
 14945                           ; BSR set to: 15
 14946                           ;inc\CANlib.h: 454: else
 14947                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
 14948  002FEA  010F               	movlb	15	; () banked
 14949  002FEC  9D25               	bcf	37,6,b	;volatile
 14950  002FEE                     i1l390:
 14951                           
 14952                           ; BSR set to: 15
 14953                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
 14954  002FEE  A633               	btfss	i1CANsendMessage@flags,3,c
 14955  002FF0  D067               	goto	i1l391
 14956                           
 14957                           ; BSR set to: 15
 14958                           ;inc\CANlib.h: 458: {
 14959                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
 14960  002FF2  502C               	movf	i1CANsendMessage@identifier,w,c
 14961  002FF4  6E38               	movwf	i1CANsendMessage@tamp,c
 14962  002FF6  6A39               	clrf	i1CANsendMessage@tamp+1,c
 14963  002FF8  6A3A               	clrf	i1CANsendMessage@tamp+2,c
 14964  002FFA  6A3B               	clrf	i1CANsendMessage@tamp+3,c
 14965                           
 14966                           ; BSR set to: 15
 14967                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
 14968  002FFC  C038  FF24         	movff	i1CANsendMessage@tamp,3876	;volatile
 14969                           
 14970                           ; BSR set to: 15
 14971                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
 14972  003000  0E00               	movlw	0
 14973  003002  142C               	andwf	i1CANsendMessage@identifier,w,c
 14974  003004  6E38               	movwf	i1CANsendMessage@tamp,c
 14975  003006  0EFF               	movlw	255
 14976  003008  142D               	andwf	i1CANsendMessage@identifier+1,w,c
 14977  00300A  6E39               	movwf	i1CANsendMessage@tamp+1,c
 14978  00300C  0E00               	movlw	0
 14979  00300E  142E               	andwf	i1CANsendMessage@identifier+2,w,c
 14980  003010  6E3A               	movwf	i1CANsendMessage@tamp+2,c
 14981  003012  0E00               	movlw	0
 14982  003014  142F               	andwf	i1CANsendMessage@identifier+3,w,c
 14983  003016  6E3B               	movwf	i1CANsendMessage@tamp+3,c
 14984                           
 14985                           ; BSR set to: 15
 14986                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
 14987  003018  C038  F034         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14988  00301C  C039  F035         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14989  003020  C03A  F036         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14990  003024  C03B  F037         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14991  003028  C035  F034         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14992  00302C  C036  F035         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14993  003030  C037  F036         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14994  003034  6A37               	clrf	??i1_CANsendMessage+3,c
 14995  003036  C034  F038         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14996  00303A  C035  F039         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14997  00303E  C036  F03A         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14998  003042  C037  F03B         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14999                           
 15000                           ; BSR set to: 15
 15001                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
 15002  003046  C038  FF23         	movff	i1CANsendMessage@tamp,3875	;volatile
 15003                           
 15004                           ; BSR set to: 15
 15005                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
 15006  00304A  0E00               	movlw	0
 15007  00304C  010F               	movlb	15	; () banked
 15008  00304E  6F22               	movwf	34,b	;volatile
 15009                           
 15010                           ; BSR set to: 15
 15011                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
 15012  003050  010F               	movlb	15	; () banked
 15013  003052  8722               	bsf	34,3,b	;volatile
 15014                           
 15015                           ; BSR set to: 15
 15016                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
 15017  003054  A02E               	btfss	i1CANsendMessage@identifier+2,0,c
 15018  003056  D002               	goto	i1l392
 15019                           
 15020                           ; BSR set to: 15
 15021                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
 15022  003058  010F               	movlb	15	; () banked
 15023  00305A  8122               	bsf	34,0,b	;volatile
 15024  00305C                     i1l392:
 15025                           
 15026                           ; BSR set to: 15
 15027                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
 15028  00305C  A22E               	btfss	i1CANsendMessage@identifier+2,1,c
 15029  00305E  D002               	goto	i1l393
 15030                           
 15031                           ; BSR set to: 15
 15032                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
 15033  003060  010F               	movlb	15	; () banked
 15034  003062  8322               	bsf	34,1,b	;volatile
 15035  003064                     i1l393:
 15036                           
 15037                           ; BSR set to: 15
 15038                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
 15039  003064  A42E               	btfss	i1CANsendMessage@identifier+2,2,c
 15040  003066  D002               	goto	i1l394
 15041                           
 15042                           ; BSR set to: 15
 15043                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
 15044  003068  010F               	movlb	15	; () banked
 15045  00306A  8B22               	bsf	34,5,b	;volatile
 15046  00306C                     i1l394:
 15047                           
 15048                           ; BSR set to: 15
 15049                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
 15050  00306C  A62E               	btfss	i1CANsendMessage@identifier+2,3,c
 15051  00306E  D002               	goto	i1l395
 15052                           
 15053                           ; BSR set to: 15
 15054                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
 15055  003070  010F               	movlb	15	; () banked
 15056  003072  8D22               	bsf	34,6,b	;volatile
 15057  003074                     i1l395:
 15058                           
 15059                           ; BSR set to: 15
 15060                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
 15061  003074  A82E               	btfss	i1CANsendMessage@identifier+2,4,c
 15062  003076  D003               	goto	i1l5336
 15063                           
 15064                           ; BSR set to: 15
 15065                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
 15066  003078  010F               	movlb	15	; () banked
 15067  00307A  8F22               	bsf	34,7,b	;volatile
 15068  00307C  D000               	goto	i1l5336
 15069  00307E                     i1l5336:
 15070                           
 15071                           ; BSR set to: 15
 15072                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
 15073  00307E  C02C  F034         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15074  003082  C02D  F035         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15075  003086  C02E  F036         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15076  00308A  C02F  F037         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15077  00308E  0E16               	movlw	22
 15078  003090  D005               	goto	i1u643_20
 15079  003092                     i1u643_25:
 15080  003092  90D8               	bcf	status,0,c
 15081  003094  3237               	rrcf	??i1_CANsendMessage+3,f,c
 15082  003096  3236               	rrcf	??i1_CANsendMessage+2,f,c
 15083  003098  3235               	rrcf	??i1_CANsendMessage+1,f,c
 15084  00309A  3234               	rrcf	??i1_CANsendMessage,f,c
 15085  00309C                     i1u643_20:
 15086  00309C  2EE8               	decfsz	wreg,f,c
 15087  00309E  D7F9               	goto	i1u643_25
 15088  0030A0  C034  F038         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15089  0030A4  C035  F039         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15090  0030A8  C036  F03A         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15091  0030AC  C037  F03B         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15092                           
 15093                           ; BSR set to: 15
 15094                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
 15095  0030B0  5038               	movf	i1CANsendMessage@tamp,w,c
 15096  0030B2  6E38               	movwf	i1CANsendMessage@tamp,c
 15097  0030B4  6A39               	clrf	i1CANsendMessage@tamp+1,c
 15098  0030B6  6A3A               	clrf	i1CANsendMessage@tamp+2,c
 15099  0030B8  6A3B               	clrf	i1CANsendMessage@tamp+3,c
 15100                           
 15101                           ; BSR set to: 15
 15102                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
 15103  0030BA  C038  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15104                           
 15105                           ;inc\CANlib.h: 483: }
 15106  0030BE  D04E               	goto	i1l5356
 15107  0030C0                     i1l391:
 15108                           
 15109                           ; BSR set to: 15
 15110                           ;inc\CANlib.h: 485: else
 15111                           ;inc\CANlib.h: 487: {
 15112                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
 15113  0030C0  010F               	movlb	15	; () banked
 15114  0030C2  9722               	bcf	34,3,b	;volatile
 15115                           
 15116                           ; BSR set to: 15
 15117                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
 15118  0030C4  C02C  F034         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15119  0030C8  C02D  F035         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15120  0030CC  C02E  F036         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15121  0030D0  C02F  F037         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15122  0030D4  0E04               	movlw	4
 15123  0030D6  D005               	goto	i1u644_20
 15124  0030D8                     i1u644_25:
 15125  0030D8  90D8               	bcf	status,0,c
 15126  0030DA  3237               	rrcf	??i1_CANsendMessage+3,f,c
 15127  0030DC  3236               	rrcf	??i1_CANsendMessage+2,f,c
 15128  0030DE  3235               	rrcf	??i1_CANsendMessage+1,f,c
 15129  0030E0  3234               	rrcf	??i1_CANsendMessage,f,c
 15130  0030E2                     i1u644_20:
 15131  0030E2  2EE8               	decfsz	wreg,f,c
 15132  0030E4  D7F9               	goto	i1u644_25
 15133  0030E6  C034  F038         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15134  0030EA  C035  F039         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15135  0030EE  C036  F03A         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15136  0030F2  C037  F03B         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15137                           
 15138                           ; BSR set to: 15
 15139                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
 15140  0030F6  5038               	movf	i1CANsendMessage@tamp,w,c
 15141  0030F8  6E38               	movwf	i1CANsendMessage@tamp,c
 15142  0030FA  6A39               	clrf	i1CANsendMessage@tamp+1,c
 15143  0030FC  6A3A               	clrf	i1CANsendMessage@tamp+2,c
 15144  0030FE  6A3B               	clrf	i1CANsendMessage@tamp+3,c
 15145                           
 15146                           ; BSR set to: 15
 15147                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
 15148  003100  C038  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15149                           
 15150                           ; BSR set to: 15
 15151                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
 15152  003104  0E07               	movlw	7
 15153  003106  142C               	andwf	i1CANsendMessage@identifier,w,c
 15154  003108  6E38               	movwf	i1CANsendMessage@tamp,c
 15155  00310A  0E00               	movlw	0
 15156  00310C  142D               	andwf	i1CANsendMessage@identifier+1,w,c
 15157  00310E  6E39               	movwf	i1CANsendMessage@tamp+1,c
 15158  003110  0E00               	movlw	0
 15159  003112  142E               	andwf	i1CANsendMessage@identifier+2,w,c
 15160  003114  6E3A               	movwf	i1CANsendMessage@tamp+2,c
 15161  003116  0E00               	movlw	0
 15162  003118  142F               	andwf	i1CANsendMessage@identifier+3,w,c
 15163  00311A  6E3B               	movwf	i1CANsendMessage@tamp+3,c
 15164                           
 15165                           ; BSR set to: 15
 15166                           ;inc\CANlib.h: 495: tamp = tamp << 5;
 15167  00311C  C038  F034         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 15168  003120  C039  F035         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 15169  003124  C03A  F036         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 15170  003128  C03B  F037         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 15171  00312C  0E05               	movlw	5
 15172  00312E                     i1u645_25:
 15173  00312E  90D8               	bcf	status,0,c
 15174  003130  3634               	rlcf	??i1_CANsendMessage,f,c
 15175  003132  3635               	rlcf	??i1_CANsendMessage+1,f,c
 15176  003134  3636               	rlcf	??i1_CANsendMessage+2,f,c
 15177  003136  3637               	rlcf	??i1_CANsendMessage+3,f,c
 15178  003138  2EE8               	decfsz	wreg,f,c
 15179  00313A  D7F9               	goto	i1u645_25
 15180  00313C  C034  F038         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15181  003140  C035  F039         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15182  003144  C036  F03A         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15183  003148  C037  F03B         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15184                           
 15185                           ; BSR set to: 15
 15186                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
 15187  00314C  010F               	movlb	15	; () banked
 15188  00314E  5122               	movf	34,w,b	;volatile
 15189  003150  0B1F               	andlw	31
 15190  003152  010F               	movlb	15	; () banked
 15191  003154  6F22               	movwf	34,b	;volatile
 15192                           
 15193                           ; BSR set to: 15
 15194                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
 15195  003156  C038  FF22         	movff	i1CANsendMessage@tamp,3874	;volatile
 15196  00315A  D000               	goto	i1l5356
 15197  00315C                     i1l5356:
 15198                           
 15199                           ; BSR set to: 15
 15200                           ;inc\CANlib.h: 498: }
 15201                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
 15202  00315C  A033               	btfss	i1CANsendMessage@flags,0,c
 15203  00315E  D003               	goto	i1l398
 15204                           
 15205                           ; BSR set to: 15
 15206                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
 15207  003160  010F               	movlb	15	; () banked
 15208  003162  8120               	bsf	32,0,b	;volatile
 15209  003164  D002               	goto	i1l399
 15210  003166                     i1l398:
 15211                           
 15212                           ; BSR set to: 15
 15213                           ;inc\CANlib.h: 502: else
 15214                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
 15215  003166  010F               	movlb	15	; () banked
 15216  003168  9120               	bcf	32,0,b	;volatile
 15217  00316A                     i1l399:
 15218                           
 15219                           ; BSR set to: 15
 15220                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
 15221  00316A  A233               	btfss	i1CANsendMessage@flags,1,c
 15222  00316C  D003               	goto	i1l400
 15223                           
 15224                           ; BSR set to: 15
 15225                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
 15226  00316E  010F               	movlb	15	; () banked
 15227  003170  8320               	bsf	32,1,b	;volatile
 15228  003172  D003               	goto	i1l5362
 15229  003174                     i1l400:
 15230                           
 15231                           ; BSR set to: 15
 15232                           ;inc\CANlib.h: 506: else
 15233                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
 15234  003174  010F               	movlb	15	; () banked
 15235  003176  9320               	bcf	32,1,b	;volatile
 15236  003178  D000               	goto	i1l5362
 15237  00317A                     i1l5362:
 15238                           
 15239                           ; BSR set to: 15
 15240                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
 15241  00317A  C030  FFD9         	movff	i1CANsendMessage@data,fsr2l
 15242  00317E  C031  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 15243  003182  50DF               	movf	indf2,w,c
 15244  003184  010F               	movlb	15	; () banked
 15245  003186  6F26               	movwf	38,b	;volatile
 15246                           
 15247                           ; BSR set to: 15
 15248                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
 15249  003188  EE20 F001          	lfsr	2,1
 15250  00318C  5030               	movf	i1CANsendMessage@data,w,c
 15251  00318E  26D9               	addwf	fsr2l,f,c
 15252  003190  5031               	movf	i1CANsendMessage@data+1,w,c
 15253  003192  22DA               	addwfc	fsr2h,f,c
 15254  003194  50DF               	movf	indf2,w,c
 15255  003196  010F               	movlb	15	; () banked
 15256  003198  6F27               	movwf	39,b	;volatile
 15257                           
 15258                           ; BSR set to: 15
 15259                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
 15260  00319A  EE20 F002          	lfsr	2,2
 15261  00319E  5030               	movf	i1CANsendMessage@data,w,c
 15262  0031A0  26D9               	addwf	fsr2l,f,c
 15263  0031A2  5031               	movf	i1CANsendMessage@data+1,w,c
 15264  0031A4  22DA               	addwfc	fsr2h,f,c
 15265  0031A6  50DF               	movf	indf2,w,c
 15266  0031A8  010F               	movlb	15	; () banked
 15267  0031AA  6F28               	movwf	40,b	;volatile
 15268                           
 15269                           ; BSR set to: 15
 15270                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
 15271  0031AC  EE20 F003          	lfsr	2,3
 15272  0031B0  5030               	movf	i1CANsendMessage@data,w,c
 15273  0031B2  26D9               	addwf	fsr2l,f,c
 15274  0031B4  5031               	movf	i1CANsendMessage@data+1,w,c
 15275  0031B6  22DA               	addwfc	fsr2h,f,c
 15276  0031B8  50DF               	movf	indf2,w,c
 15277  0031BA  010F               	movlb	15	; () banked
 15278  0031BC  6F29               	movwf	41,b	;volatile
 15279                           
 15280                           ; BSR set to: 15
 15281                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
 15282  0031BE  EE20 F004          	lfsr	2,4
 15283  0031C2  5030               	movf	i1CANsendMessage@data,w,c
 15284  0031C4  26D9               	addwf	fsr2l,f,c
 15285  0031C6  5031               	movf	i1CANsendMessage@data+1,w,c
 15286  0031C8  22DA               	addwfc	fsr2h,f,c
 15287  0031CA  50DF               	movf	indf2,w,c
 15288  0031CC  010F               	movlb	15	; () banked
 15289  0031CE  6F2A               	movwf	42,b	;volatile
 15290                           
 15291                           ; BSR set to: 15
 15292                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
 15293  0031D0  EE20 F005          	lfsr	2,5
 15294  0031D4  5030               	movf	i1CANsendMessage@data,w,c
 15295  0031D6  26D9               	addwf	fsr2l,f,c
 15296  0031D8  5031               	movf	i1CANsendMessage@data+1,w,c
 15297  0031DA  22DA               	addwfc	fsr2h,f,c
 15298  0031DC  50DF               	movf	indf2,w,c
 15299  0031DE  010F               	movlb	15	; () banked
 15300  0031E0  6F2B               	movwf	43,b	;volatile
 15301                           
 15302                           ; BSR set to: 15
 15303                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
 15304  0031E2  EE20 F006          	lfsr	2,6
 15305  0031E6  5030               	movf	i1CANsendMessage@data,w,c
 15306  0031E8  26D9               	addwf	fsr2l,f,c
 15307  0031EA  5031               	movf	i1CANsendMessage@data+1,w,c
 15308  0031EC  22DA               	addwfc	fsr2h,f,c
 15309  0031EE  50DF               	movf	indf2,w,c
 15310  0031F0  010F               	movlb	15	; () banked
 15311  0031F2  6F2C               	movwf	44,b	;volatile
 15312                           
 15313                           ; BSR set to: 15
 15314                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
 15315  0031F4  EE20 F007          	lfsr	2,7
 15316  0031F8  5030               	movf	i1CANsendMessage@data,w,c
 15317  0031FA  26D9               	addwf	fsr2l,f,c
 15318  0031FC  5031               	movf	i1CANsendMessage@data+1,w,c
 15319  0031FE  22DA               	addwfc	fsr2h,f,c
 15320  003200  50DF               	movf	indf2,w,c
 15321  003202  010F               	movlb	15	; () banked
 15322  003204  6F2D               	movwf	45,b	;volatile
 15323                           
 15324                           ; BSR set to: 15
 15325                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
 15326  003206  010F               	movlb	15	; () banked
 15327  003208  8720               	bsf	32,3,b	;volatile
 15328                           
 15329                           ; BSR set to: 15
 15330                           ;inc\CANlib.h: 520: return;
 15331  00320A  0012               	return	
 15332                           
 15333                           ; BSR set to: 15
 15334                           
 15335                           ; BSR set to: 15
 15336  00320C  0012               	return		;funcret
 15337  00320E                     __end_ofi1_CANsendMessage:
 15338                           	opt stack 0
 15339                           pclatu	equ	0xFFB
 15340                           pclath	equ	0xFFA
 15341                           tblptru	equ	0xFF8
 15342                           tblptrh	equ	0xFF7
 15343                           tblptrl	equ	0xFF6
 15344                           tablat	equ	0xFF5
 15345                           prodh	equ	0xFF4
 15346                           prodl	equ	0xFF3
 15347                           intcon	equ	0xFF2
 15348                           intcon2	equ	0xFF1
 15349                           postinc0	equ	0xFEE
 15350                           fsr0h	equ	0xFEA
 15351                           fsr0l	equ	0xFE9
 15352                           wreg	equ	0xFE8
 15353                           fsr1h	equ	0xFE2
 15354                           fsr1l	equ	0xFE1
 15355                           bsr	equ	0xFE0
 15356                           indf2	equ	0xFDF
 15357                           postinc2	equ	0xFDE
 15358                           postdec2	equ	0xFDD
 15359                           plusw2	equ	0xFDB
 15360                           fsr2h	equ	0xFDA
 15361                           fsr2l	equ	0xFD9
 15362                           status	equ	0xFD8
 15363                           
 15364 ;; *************** function i1_CANisTxReady *****************
 15365 ;; Defined at:
 15366 ;;		line 1154 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 15367 ;; Parameters:    Size  Location     Type
 15368 ;;		None
 15369 ;; Auto vars:     Size  Location     Type
 15370 ;;		None
 15371 ;; Return value:  Size  Location     Type
 15372 ;;                  1    wreg      unsigned char 
 15373 ;; Registers used:
 15374 ;;		wreg, status,2
 15375 ;; Tracked objects:
 15376 ;;		On entry : 0/0
 15377 ;;		On exit  : 0/0
 15378 ;;		Unchanged: 0/0
 15379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15381 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15383 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15384 ;;Total ram usage:        1 bytes
 15385 ;; Hardware stack levels used:    1
 15386 ;; Hardware stack levels required when called:    2
 15387 ;; This function calls:
 15388 ;;		Nothing
 15389 ;; This function is called by:
 15390 ;;		i1_can_send
 15391 ;; This function uses a non-reentrant model
 15392 ;;
 15393                           
 15394                           	psect	text41
 15395  005F98                     __ptext41:
 15396                           	opt stack 0
 15397  005F98                     i1_CANisTxReady:
 15398                           	opt stack 19
 15399                           
 15400                           ;inc\CANlib.h: 1156: return (!TXB0CONbits.TXREQ || !TXB1CONbits.TXREQ || !TXB2CONbits.TX
      +                          REQ);
 15401                           
 15402                           ; BSR set to: 15
 15403                           ;incstack = 0
 15404  005F98  0E01               	movlw	1
 15405  005F9A  6E2C               	movwf	i1_CANisTxReady$2837,c
 15406  005F9C  010F               	movlb	15	; () banked
 15407  005F9E  A740               	btfss	64,3,b	;volatile
 15408  005FA0  D008               	goto	i1l552
 15409                           
 15410                           ; BSR set to: 15
 15411  005FA2  010F               	movlb	15	; () banked
 15412  005FA4  A730               	btfss	48,3,b	;volatile
 15413  005FA6  D005               	goto	i1l552
 15414                           
 15415                           ; BSR set to: 15
 15416  005FA8  010F               	movlb	15	; () banked
 15417  005FAA  A720               	btfss	32,3,b	;volatile
 15418  005FAC  D002               	goto	i1l552
 15419                           
 15420                           ; BSR set to: 15
 15421  005FAE  0E00               	movlw	0
 15422  005FB0  6E2C               	movwf	i1_CANisTxReady$2837,c
 15423  005FB2                     i1l552:
 15424                           
 15425                           ; BSR set to: 15
 15426  005FB2  502C               	movf	i1_CANisTxReady$2837,w,c
 15427  005FB4  0012               	return	
 15428                           
 15429                           ; BSR set to: 15
 15430                           
 15431                           ; BSR set to: 15
 15432  005FB6  0012               	return		;funcret
 15433  005FB8                     __end_ofi1_CANisTxReady:
 15434                           	opt stack 0
 15435                           pclatu	equ	0xFFB
 15436                           pclath	equ	0xFFA
 15437                           tblptru	equ	0xFF8
 15438                           tblptrh	equ	0xFF7
 15439                           tblptrl	equ	0xFF6
 15440                           tablat	equ	0xFF5
 15441                           prodh	equ	0xFF4
 15442                           prodl	equ	0xFF3
 15443                           intcon	equ	0xFF2
 15444                           intcon2	equ	0xFF1
 15445                           postinc0	equ	0xFEE
 15446                           fsr0h	equ	0xFEA
 15447                           fsr0l	equ	0xFE9
 15448                           wreg	equ	0xFE8
 15449                           fsr1h	equ	0xFE2
 15450                           fsr1l	equ	0xFE1
 15451                           bsr	equ	0xFE0
 15452                           indf2	equ	0xFDF
 15453                           postinc2	equ	0xFDE
 15454                           postdec2	equ	0xFDD
 15455                           plusw2	equ	0xFDB
 15456                           fsr2h	equ	0xFDA
 15457                           fsr2l	equ	0xFD9
 15458                           status	equ	0xFD8
 15459                           
 15460 ;; *************** function _CANreceiveMessage *****************
 15461 ;; Defined at:
 15462 ;;		line 528 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 15463 ;; Parameters:    Size  Location     Type
 15464 ;;  msg             2    0[COMRAM] PTR struct .
 15465 ;;		 -> msg(15), 
 15466 ;; Auto vars:     Size  Location     Type
 15467 ;;  tamp            1   11[COMRAM] unsigned char 
 15468 ;;  error           1   10[COMRAM] unsigned char 
 15469 ;; Return value:  Size  Location     Type
 15470 ;;                  1    wreg      unsigned char 
 15471 ;; Registers used:
 15472 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15473 ;; Tracked objects:
 15474 ;;		On entry : 0/0
 15475 ;;		On exit  : 0/0
 15476 ;;		Unchanged: 0/0
 15477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15478 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15480 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15481 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15482 ;;Total ram usage:       12 bytes
 15483 ;; Hardware stack levels used:    1
 15484 ;; Hardware stack levels required when called:    2
 15485 ;; This function calls:
 15486 ;;		Nothing
 15487 ;; This function is called by:
 15488 ;;		_ISR_Bassa
 15489 ;; This function uses a non-reentrant model
 15490 ;;
 15491                           
 15492                           	psect	text42
 15493  00320E                     __ptext42:
 15494                           	opt stack 0
 15495  00320E                     _CANreceiveMessage:
 15496                           	opt stack 20
 15497                           
 15498                           ;inc\CANlib.h: 530: BYTE tamp;
 15499                           ;inc\CANlib.h: 531: BYTE error = 0;
 15500                           
 15501                           ; BSR set to: 15
 15502                           ;incstack = 0
 15503  00320E  0E00               	movlw	0
 15504  003210  6E36               	movwf	CANreceiveMessage@error,c
 15505                           
 15506                           ;inc\CANlib.h: 533: if (COMSTATbits.RXB0OVFL == 0x01)
 15507  003212  AE74               	btfss	3956,7,c	;volatile
 15508  003214  D002               	goto	i1l5406
 15509                           
 15510                           ;inc\CANlib.h: 534: error |= CAN_RX_BUFFER_1_OVFL;
 15511  003216  8036               	bsf	CANreceiveMessage@error,0,c
 15512  003218  D000               	goto	i1l5406
 15513  00321A                     i1l5406:
 15514                           
 15515                           ;inc\CANlib.h: 536: if (COMSTATbits.RXB1OVFL == 0x01)
 15516  00321A  AC74               	btfss	3956,6,c	;volatile
 15517  00321C  D002               	goto	i1l5410
 15518                           
 15519                           ;inc\CANlib.h: 537: error |= CAN_RX_BUFFER_2_OVFL;
 15520  00321E  8236               	bsf	CANreceiveMessage@error,1,c
 15521  003220  D000               	goto	i1l5410
 15522  003222                     i1l5410:
 15523                           
 15524                           ;inc\CANlib.h: 540: if (RXB1CONbits.RXFUL ==0x01)
 15525  003222  010F               	movlb	15	; () banked
 15526  003224  AF50               	btfss	80,7,b	;volatile
 15527  003226  D149               	goto	i1l406
 15528                           
 15529                           ; BSR set to: 15
 15530                           ;inc\CANlib.h: 541: {
 15531                           ;inc\CANlib.h: 542: msg->identifier = 0;
 15532  003228  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15533  00322C  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15534  003230  6ADE               	clrf	postinc2,c
 15535  003232  6ADE               	clrf	postinc2,c
 15536  003234  6ADE               	clrf	postinc2,c
 15537  003236  6ADD               	clrf	postdec2,c
 15538                           
 15539                           ; BSR set to: 15
 15540                           ;inc\CANlib.h: 543: msg->data[0] =RXB1D0;
 15541  003238  EE20 F004          	lfsr	2,4
 15542  00323C  502C               	movf	CANreceiveMessage@msg,w,c
 15543  00323E  26D9               	addwf	fsr2l,f,c
 15544  003240  502D               	movf	CANreceiveMessage@msg+1,w,c
 15545  003242  22DA               	addwfc	fsr2h,f,c
 15546  003244  CF56 FFDF          	movff	3926,indf2	;volatile
 15547                           
 15548                           ; BSR set to: 15
 15549                           ;inc\CANlib.h: 544: msg->data[1] =RXB1D1;
 15550  003248  EE20 F005          	lfsr	2,5
 15551  00324C  502C               	movf	CANreceiveMessage@msg,w,c
 15552  00324E  26D9               	addwf	fsr2l,f,c
 15553  003250  502D               	movf	CANreceiveMessage@msg+1,w,c
 15554  003252  22DA               	addwfc	fsr2h,f,c
 15555  003254  CF57 FFDF          	movff	3927,indf2	;volatile
 15556                           
 15557                           ; BSR set to: 15
 15558                           ;inc\CANlib.h: 545: msg->data[2] =RXB1D2;
 15559  003258  EE20 F006          	lfsr	2,6
 15560  00325C  502C               	movf	CANreceiveMessage@msg,w,c
 15561  00325E  26D9               	addwf	fsr2l,f,c
 15562  003260  502D               	movf	CANreceiveMessage@msg+1,w,c
 15563  003262  22DA               	addwfc	fsr2h,f,c
 15564  003264  CF58 FFDF          	movff	3928,indf2	;volatile
 15565                           
 15566                           ; BSR set to: 15
 15567                           ;inc\CANlib.h: 546: msg->data[3] =RXB1D3;
 15568  003268  EE20 F007          	lfsr	2,7
 15569  00326C  502C               	movf	CANreceiveMessage@msg,w,c
 15570  00326E  26D9               	addwf	fsr2l,f,c
 15571  003270  502D               	movf	CANreceiveMessage@msg+1,w,c
 15572  003272  22DA               	addwfc	fsr2h,f,c
 15573  003274  CF59 FFDF          	movff	3929,indf2	;volatile
 15574                           
 15575                           ; BSR set to: 15
 15576                           ;inc\CANlib.h: 547: msg->data[4] =RXB1D4;
 15577  003278  EE20 F008          	lfsr	2,8
 15578  00327C  502C               	movf	CANreceiveMessage@msg,w,c
 15579  00327E  26D9               	addwf	fsr2l,f,c
 15580  003280  502D               	movf	CANreceiveMessage@msg+1,w,c
 15581  003282  22DA               	addwfc	fsr2h,f,c
 15582  003284  CF5A FFDF          	movff	3930,indf2	;volatile
 15583                           
 15584                           ; BSR set to: 15
 15585                           ;inc\CANlib.h: 548: msg->data[5] =RXB1D5;
 15586  003288  EE20 F009          	lfsr	2,9
 15587  00328C  502C               	movf	CANreceiveMessage@msg,w,c
 15588  00328E  26D9               	addwf	fsr2l,f,c
 15589  003290  502D               	movf	CANreceiveMessage@msg+1,w,c
 15590  003292  22DA               	addwfc	fsr2h,f,c
 15591  003294  CF5B FFDF          	movff	3931,indf2	;volatile
 15592                           
 15593                           ; BSR set to: 15
 15594                           ;inc\CANlib.h: 549: msg->data[6] =RXB1D6;
 15595  003298  EE20 F00A          	lfsr	2,10
 15596  00329C  502C               	movf	CANreceiveMessage@msg,w,c
 15597  00329E  26D9               	addwf	fsr2l,f,c
 15598  0032A0  502D               	movf	CANreceiveMessage@msg+1,w,c
 15599  0032A2  22DA               	addwfc	fsr2h,f,c
 15600  0032A4  CF5C FFDF          	movff	3932,indf2	;volatile
 15601                           
 15602                           ; BSR set to: 15
 15603                           ;inc\CANlib.h: 550: msg->data[7] =RXB1D7;
 15604  0032A8  EE20 F00B          	lfsr	2,11
 15605  0032AC  502C               	movf	CANreceiveMessage@msg,w,c
 15606  0032AE  26D9               	addwf	fsr2l,f,c
 15607  0032B0  502D               	movf	CANreceiveMessage@msg+1,w,c
 15608  0032B2  22DA               	addwfc	fsr2h,f,c
 15609  0032B4  CF5D FFDF          	movff	3933,indf2	;volatile
 15610                           
 15611                           ; BSR set to: 15
 15612                           ;inc\CANlib.h: 552: msg->RTR = RXB1DLCbits.RXRTR;
 15613  0032B8  EE20 F00E          	lfsr	2,14
 15614  0032BC  502C               	movf	CANreceiveMessage@msg,w,c
 15615  0032BE  26D9               	addwf	fsr2l,f,c
 15616  0032C0  502D               	movf	CANreceiveMessage@msg+1,w,c
 15617  0032C2  22DA               	addwfc	fsr2h,f,c
 15618  0032C4  010F               	movlb	15	; () banked
 15619  0032C6  AD55               	btfss	85,6,b	;volatile
 15620  0032C8  D002               	goto	i1u654_20
 15621  0032CA  0E01               	movlw	1
 15622  0032CC  D001               	goto	i1u654_26
 15623  0032CE                     i1u654_20:
 15624  0032CE  0E00               	movlw	0
 15625  0032D0                     i1u654_26:
 15626  0032D0  6EDF               	movwf	indf2,c
 15627                           
 15628                           ; BSR set to: 15
 15629                           ;inc\CANlib.h: 554: msg->length = RXB1DLC & 0x0F;
 15630  0032D2  EE20 F00D          	lfsr	2,13
 15631  0032D6  502C               	movf	CANreceiveMessage@msg,w,c
 15632  0032D8  26D9               	addwf	fsr2l,f,c
 15633  0032DA  502D               	movf	CANreceiveMessage@msg+1,w,c
 15634  0032DC  22DA               	addwfc	fsr2h,f,c
 15635  0032DE  010F               	movlb	15	; () banked
 15636  0032E0  5155               	movf	85,w,b	;volatile
 15637  0032E2  0B0F               	andlw	15
 15638  0032E4  6EDF               	movwf	indf2,c
 15639                           
 15640                           ; BSR set to: 15
 15641                           ;inc\CANlib.h: 556: msg->type = RXB1SIDLbits.EXID;
 15642  0032E6  EE20 F00C          	lfsr	2,12
 15643  0032EA  502C               	movf	CANreceiveMessage@msg,w,c
 15644  0032EC  26D9               	addwf	fsr2l,f,c
 15645  0032EE  502D               	movf	CANreceiveMessage@msg+1,w,c
 15646  0032F0  22DA               	addwfc	fsr2h,f,c
 15647  0032F2  010F               	movlb	15	; () banked
 15648  0032F4  A752               	btfss	82,3,b	;volatile
 15649  0032F6  D002               	goto	i1u655_20
 15650  0032F8  0E01               	movlw	1
 15651  0032FA  D001               	goto	i1u655_26
 15652  0032FC                     i1u655_20:
 15653  0032FC  0E00               	movlw	0
 15654  0032FE                     i1u655_26:
 15655  0032FE  6EDF               	movwf	indf2,c
 15656                           
 15657                           ; BSR set to: 15
 15658                           ;inc\CANlib.h: 558: if (RXB1SIDLbits.EXID == 0)
 15659  003300  010F               	movlb	15	; () banked
 15660  003302  B752               	btfsc	82,3,b	;volatile
 15661  003304  D044               	goto	i1l5444
 15662                           
 15663                           ; BSR set to: 15
 15664                           ;inc\CANlib.h: 559: {
 15665                           ;inc\CANlib.h: 560: msg->identifier = ((unsigned long)RXB1SIDH)<< 3;
 15666  003306  CF51 F02E          	movff	3921,??_CANreceiveMessage	;volatile
 15667  00330A  6A2F               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15668  00330C  6A30               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15669  00330E  6A31               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15670  003310  0E03               	movlw	3
 15671  003312                     i1u657_25:
 15672  003312  90D8               	bcf	status,0,c
 15673  003314  362E               	rlcf	??_CANreceiveMessage,f,c
 15674  003316  362F               	rlcf	??_CANreceiveMessage+1,f,c
 15675  003318  3630               	rlcf	??_CANreceiveMessage+2,f,c
 15676  00331A  3631               	rlcf	??_CANreceiveMessage+3,f,c
 15677  00331C  2EE8               	decfsz	wreg,f,c
 15678  00331E  D7F9               	goto	i1u657_25
 15679  003320  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15680  003324  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15681  003328  C02E  FFDE         	movff	??_CANreceiveMessage,postinc2
 15682  00332C  C02F  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15683  003330  C030  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15684  003334  C031  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15685                           
 15686                           ; BSR set to: 15
 15687                           ;inc\CANlib.h: 561: tamp = (RXB1SIDL >> 5 ) & 0x07;
 15688  003338  010F               	movlb	15	; () banked
 15689  00333A  3952               	swapf	82,w,b	;volatile
 15690  00333C  42E8               	rrncf	wreg,f,c
 15691  00333E  0B07               	andlw	7
 15692  003340  0B07               	andlw	7
 15693  003342  6E37               	movwf	CANreceiveMessage@tamp,c
 15694                           
 15695                           ; BSR set to: 15
 15696                           ;inc\CANlib.h: 562: msg->identifier = msg->identifier + tamp;
 15697  003344  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15698  003348  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15699  00334C  CFDE F02E          	movff	postinc2,??_CANreceiveMessage
 15700  003350  CFDE F02F          	movff	postinc2,??_CANreceiveMessage+1
 15701  003354  CFDE F030          	movff	postinc2,??_CANreceiveMessage+2
 15702  003358  CFDE F031          	movff	postinc2,??_CANreceiveMessage+3
 15703  00335C  5037               	movf	CANreceiveMessage@tamp,w,c
 15704  00335E  242E               	addwf	??_CANreceiveMessage,w,c
 15705  003360  6E32               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 15706  003362  0E00               	movlw	0
 15707  003364  202F               	addwfc	??_CANreceiveMessage+1,w,c
 15708  003366  6E33               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 15709  003368  0E00               	movlw	0
 15710  00336A  2030               	addwfc	??_CANreceiveMessage+2,w,c
 15711  00336C  6E34               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 15712  00336E  0E00               	movlw	0
 15713  003370  2031               	addwfc	??_CANreceiveMessage+3,w,c
 15714  003372  6E35               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 15715  003374  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15716  003378  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15717  00337C  C032  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 15718  003380  C033  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 15719  003384  C034  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 15720  003388  C035  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 15721                           
 15722                           ;inc\CANlib.h: 563: }
 15723  00338C  D093               	goto	i1l5470
 15724  00338E                     i1l5444:
 15725                           
 15726                           ; BSR set to: 15
 15727                           ;inc\CANlib.h: 564: else
 15728                           ;inc\CANlib.h: 565: {
 15729                           ;inc\CANlib.h: 566: msg->identifier = (unsigned long) RXB1EIDL;
 15730  00338E  CF54 F02E          	movff	3924,??_CANreceiveMessage	;volatile
 15731  003392  6A2F               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15732  003394  6A30               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15733  003396  6A31               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15734  003398  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15735  00339C  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15736  0033A0  C02E  FFDE         	movff	??_CANreceiveMessage,postinc2
 15737  0033A4  C02F  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15738  0033A8  C030  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15739  0033AC  C031  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15740                           
 15741                           ; BSR set to: 15
 15742                           ;inc\CANlib.h: 567: msg->identifier += ((unsigned long) RXB1EIDH) << 8;
 15743  0033B0  CF53 F02E          	movff	3923,??_CANreceiveMessage	;volatile
 15744  0033B4  6A2F               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15745  0033B6  6A30               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15746  0033B8  6A31               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15747  0033BA  C030  F031         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 15748  0033BE  C02F  F030         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 15749  0033C2  C02E  F02F         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 15750  0033C6  6A2E               	clrf	??_CANreceiveMessage,c
 15751  0033C8  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15752  0033CC  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15753  0033D0  502E               	movf	??_CANreceiveMessage,w,c
 15754  0033D2  26DE               	addwf	postinc2,f,c
 15755  0033D4  502F               	movf	??_CANreceiveMessage+1,w,c
 15756  0033D6  22DE               	addwfc	postinc2,f,c
 15757  0033D8  5030               	movf	??_CANreceiveMessage+2,w,c
 15758  0033DA  22DE               	addwfc	postinc2,f,c
 15759  0033DC  5031               	movf	??_CANreceiveMessage+3,w,c
 15760  0033DE  22DE               	addwfc	postinc2,f,c
 15761                           
 15762                           ; BSR set to: 15
 15763                           ;inc\CANlib.h: 569: if (RXB1SIDLbits.EID16)
 15764  0033E0  010F               	movlb	15	; () banked
 15765  0033E2  A152               	btfss	82,0,b	;volatile
 15766  0033E4  D00D               	goto	i1l5452
 15767                           
 15768                           ; BSR set to: 15
 15769                           ;inc\CANlib.h: 570: msg->identifier |= 0x00010000;
 15770  0033E6  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15771  0033EA  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15772  0033EE  0E00               	movlw	0
 15773  0033F0  12DE               	iorwf	postinc2,f,c
 15774  0033F2  0E00               	movlw	0
 15775  0033F4  12DE               	iorwf	postinc2,f,c
 15776  0033F6  0E01               	movlw	1
 15777  0033F8  12DE               	iorwf	postinc2,f,c
 15778  0033FA  0E00               	movlw	0
 15779  0033FC  12DE               	iorwf	postinc2,f,c
 15780  0033FE  D000               	goto	i1l5452
 15781  003400                     i1l5452:
 15782                           
 15783                           ; BSR set to: 15
 15784                           ;inc\CANlib.h: 571: if (RXB1SIDLbits.EID17)
 15785  003400  010F               	movlb	15	; () banked
 15786  003402  A352               	btfss	82,1,b	;volatile
 15787  003404  D00D               	goto	i1l5456
 15788                           
 15789                           ; BSR set to: 15
 15790                           ;inc\CANlib.h: 572: msg->identifier |= 0x00020000;
 15791  003406  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15792  00340A  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15793  00340E  0E00               	movlw	0
 15794  003410  12DE               	iorwf	postinc2,f,c
 15795  003412  0E00               	movlw	0
 15796  003414  12DE               	iorwf	postinc2,f,c
 15797  003416  0E02               	movlw	2
 15798  003418  12DE               	iorwf	postinc2,f,c
 15799  00341A  0E00               	movlw	0
 15800  00341C  12DE               	iorwf	postinc2,f,c
 15801  00341E  D000               	goto	i1l5456
 15802  003420                     i1l5456:
 15803                           
 15804                           ; BSR set to: 15
 15805                           ;inc\CANlib.h: 573: if (RXB1SIDLbits.SID0)
 15806  003420  010F               	movlb	15	; () banked
 15807  003422  AB52               	btfss	82,5,b	;volatile
 15808  003424  D00D               	goto	i1l5460
 15809                           
 15810                           ; BSR set to: 15
 15811                           ;inc\CANlib.h: 574: msg->identifier |= 0x00040000;
 15812  003426  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15813  00342A  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15814  00342E  0E00               	movlw	0
 15815  003430  12DE               	iorwf	postinc2,f,c
 15816  003432  0E00               	movlw	0
 15817  003434  12DE               	iorwf	postinc2,f,c
 15818  003436  0E04               	movlw	4
 15819  003438  12DE               	iorwf	postinc2,f,c
 15820  00343A  0E00               	movlw	0
 15821  00343C  12DE               	iorwf	postinc2,f,c
 15822  00343E  D000               	goto	i1l5460
 15823  003440                     i1l5460:
 15824                           
 15825                           ; BSR set to: 15
 15826                           ;inc\CANlib.h: 575: if (RXB1SIDLbits.SID1)
 15827  003440  010F               	movlb	15	; () banked
 15828  003442  AD52               	btfss	82,6,b	;volatile
 15829  003444  D00D               	goto	i1l5464
 15830                           
 15831                           ; BSR set to: 15
 15832                           ;inc\CANlib.h: 576: msg->identifier |= 0x00080000;
 15833  003446  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15834  00344A  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15835  00344E  0E00               	movlw	0
 15836  003450  12DE               	iorwf	postinc2,f,c
 15837  003452  0E00               	movlw	0
 15838  003454  12DE               	iorwf	postinc2,f,c
 15839  003456  0E08               	movlw	8
 15840  003458  12DE               	iorwf	postinc2,f,c
 15841  00345A  0E00               	movlw	0
 15842  00345C  12DE               	iorwf	postinc2,f,c
 15843  00345E  D000               	goto	i1l5464
 15844  003460                     i1l5464:
 15845                           
 15846                           ; BSR set to: 15
 15847                           ;inc\CANlib.h: 577: if (RXB1SIDLbits.SID2)
 15848  003460  010F               	movlb	15	; () banked
 15849  003462  AF52               	btfss	82,7,b	;volatile
 15850  003464  D00D               	goto	i1l5468
 15851                           
 15852                           ; BSR set to: 15
 15853                           ;inc\CANlib.h: 578: msg->identifier |= 0x00100000;
 15854  003466  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15855  00346A  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15856  00346E  0E00               	movlw	0
 15857  003470  12DE               	iorwf	postinc2,f,c
 15858  003472  0E00               	movlw	0
 15859  003474  12DE               	iorwf	postinc2,f,c
 15860  003476  0E10               	movlw	16
 15861  003478  12DE               	iorwf	postinc2,f,c
 15862  00347A  0E00               	movlw	0
 15863  00347C  12DE               	iorwf	postinc2,f,c
 15864  00347E  D000               	goto	i1l5468
 15865  003480                     i1l5468:
 15866                           
 15867                           ; BSR set to: 15
 15868                           ;inc\CANlib.h: 580: msg->identifier |= ((unsigned long) RXB1SIDH) << 21;
 15869  003480  CF51 F02E          	movff	3921,??_CANreceiveMessage	;volatile
 15870  003484  6A2F               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15871  003486  6A30               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15872  003488  6A31               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15873  00348A  0E15               	movlw	21
 15874  00348C                     i1u663_25:
 15875  00348C  90D8               	bcf	status,0,c
 15876  00348E  362E               	rlcf	??_CANreceiveMessage,f,c
 15877  003490  362F               	rlcf	??_CANreceiveMessage+1,f,c
 15878  003492  3630               	rlcf	??_CANreceiveMessage+2,f,c
 15879  003494  3631               	rlcf	??_CANreceiveMessage+3,f,c
 15880  003496  2EE8               	decfsz	wreg,f,c
 15881  003498  D7F9               	goto	i1u663_25
 15882  00349A  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15883  00349E  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15884  0034A2  502E               	movf	??_CANreceiveMessage,w,c
 15885  0034A4  12DE               	iorwf	postinc2,f,c
 15886  0034A6  502F               	movf	??_CANreceiveMessage+1,w,c
 15887  0034A8  12DE               	iorwf	postinc2,f,c
 15888  0034AA  5030               	movf	??_CANreceiveMessage+2,w,c
 15889  0034AC  12DE               	iorwf	postinc2,f,c
 15890  0034AE  5031               	movf	??_CANreceiveMessage+3,w,c
 15891  0034B0  12DE               	iorwf	postinc2,f,c
 15892  0034B2  D000               	goto	i1l5470
 15893  0034B4                     i1l5470:
 15894                           
 15895                           ; BSR set to: 15
 15896                           ;inc\CANlib.h: 581: }
 15897                           ;inc\CANlib.h: 583: RXB1CONbits.RXFUL = 0x00;
 15898  0034B4  010F               	movlb	15	; () banked
 15899  0034B6  9F50               	bcf	80,7,b	;volatile
 15900                           
 15901                           ; BSR set to: 15
 15902                           ;inc\CANlib.h: 584: return (error);
 15903                           ;	Return value of _CANreceiveMessage is never used
 15904  0034B8  0012               	return	
 15905  0034BA                     i1l406:
 15906                           
 15907                           ; BSR set to: 15
 15908                           ;inc\CANlib.h: 585: }
 15909                           ;inc\CANlib.h: 587: if (RXB0CONbits.RXFUL ==0x01)
 15910  0034BA  AE60               	btfss	3936,7,c	;volatile
 15911  0034BC  0012               	return	
 15912                           
 15913                           ; BSR set to: 15
 15914                           ;inc\CANlib.h: 588: {
 15915                           ;inc\CANlib.h: 589: msg->identifier = 0;
 15916  0034BE  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15917  0034C2  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15918  0034C6  6ADE               	clrf	postinc2,c
 15919  0034C8  6ADE               	clrf	postinc2,c
 15920  0034CA  6ADE               	clrf	postinc2,c
 15921  0034CC  6ADD               	clrf	postdec2,c
 15922                           
 15923                           ; BSR set to: 15
 15924                           ;inc\CANlib.h: 590: msg->data[0] =RXB0D0;
 15925  0034CE  EE20 F004          	lfsr	2,4
 15926  0034D2  502C               	movf	CANreceiveMessage@msg,w,c
 15927  0034D4  26D9               	addwf	fsr2l,f,c
 15928  0034D6  502D               	movf	CANreceiveMessage@msg+1,w,c
 15929  0034D8  22DA               	addwfc	fsr2h,f,c
 15930  0034DA  CF66 FFDF          	movff	3942,indf2	;volatile
 15931                           
 15932                           ; BSR set to: 15
 15933                           ;inc\CANlib.h: 591: msg->data[1] =RXB0D1;
 15934  0034DE  EE20 F005          	lfsr	2,5
 15935  0034E2  502C               	movf	CANreceiveMessage@msg,w,c
 15936  0034E4  26D9               	addwf	fsr2l,f,c
 15937  0034E6  502D               	movf	CANreceiveMessage@msg+1,w,c
 15938  0034E8  22DA               	addwfc	fsr2h,f,c
 15939  0034EA  CF67 FFDF          	movff	3943,indf2	;volatile
 15940                           
 15941                           ; BSR set to: 15
 15942                           ;inc\CANlib.h: 592: msg->data[2] =RXB0D2;
 15943  0034EE  EE20 F006          	lfsr	2,6
 15944  0034F2  502C               	movf	CANreceiveMessage@msg,w,c
 15945  0034F4  26D9               	addwf	fsr2l,f,c
 15946  0034F6  502D               	movf	CANreceiveMessage@msg+1,w,c
 15947  0034F8  22DA               	addwfc	fsr2h,f,c
 15948  0034FA  CF68 FFDF          	movff	3944,indf2	;volatile
 15949                           
 15950                           ; BSR set to: 15
 15951                           ;inc\CANlib.h: 593: msg->data[3] =RXB0D3;
 15952  0034FE  EE20 F007          	lfsr	2,7
 15953  003502  502C               	movf	CANreceiveMessage@msg,w,c
 15954  003504  26D9               	addwf	fsr2l,f,c
 15955  003506  502D               	movf	CANreceiveMessage@msg+1,w,c
 15956  003508  22DA               	addwfc	fsr2h,f,c
 15957  00350A  CF69 FFDF          	movff	3945,indf2	;volatile
 15958                           
 15959                           ; BSR set to: 15
 15960                           ;inc\CANlib.h: 594: msg->data[4] =RXB0D4;
 15961  00350E  EE20 F008          	lfsr	2,8
 15962  003512  502C               	movf	CANreceiveMessage@msg,w,c
 15963  003514  26D9               	addwf	fsr2l,f,c
 15964  003516  502D               	movf	CANreceiveMessage@msg+1,w,c
 15965  003518  22DA               	addwfc	fsr2h,f,c
 15966  00351A  CF6A FFDF          	movff	3946,indf2	;volatile
 15967                           
 15968                           ; BSR set to: 15
 15969                           ;inc\CANlib.h: 595: msg->data[5] =RXB0D5;
 15970  00351E  EE20 F009          	lfsr	2,9
 15971  003522  502C               	movf	CANreceiveMessage@msg,w,c
 15972  003524  26D9               	addwf	fsr2l,f,c
 15973  003526  502D               	movf	CANreceiveMessage@msg+1,w,c
 15974  003528  22DA               	addwfc	fsr2h,f,c
 15975  00352A  CF6B FFDF          	movff	3947,indf2	;volatile
 15976                           
 15977                           ; BSR set to: 15
 15978                           ;inc\CANlib.h: 596: msg->data[6] =RXB0D6;
 15979  00352E  EE20 F00A          	lfsr	2,10
 15980  003532  502C               	movf	CANreceiveMessage@msg,w,c
 15981  003534  26D9               	addwf	fsr2l,f,c
 15982  003536  502D               	movf	CANreceiveMessage@msg+1,w,c
 15983  003538  22DA               	addwfc	fsr2h,f,c
 15984  00353A  CF6C FFDF          	movff	3948,indf2	;volatile
 15985                           
 15986                           ; BSR set to: 15
 15987                           ;inc\CANlib.h: 597: msg->data[7] =RXB0D7;
 15988  00353E  EE20 F00B          	lfsr	2,11
 15989  003542  502C               	movf	CANreceiveMessage@msg,w,c
 15990  003544  26D9               	addwf	fsr2l,f,c
 15991  003546  502D               	movf	CANreceiveMessage@msg+1,w,c
 15992  003548  22DA               	addwfc	fsr2h,f,c
 15993  00354A  CF6D FFDF          	movff	3949,indf2	;volatile
 15994                           
 15995                           ; BSR set to: 15
 15996                           ;inc\CANlib.h: 599: msg->RTR = RXB0DLCbits.RXRTR;
 15997  00354E  EE20 F00E          	lfsr	2,14
 15998  003552  502C               	movf	CANreceiveMessage@msg,w,c
 15999  003554  26D9               	addwf	fsr2l,f,c
 16000  003556  502D               	movf	CANreceiveMessage@msg+1,w,c
 16001  003558  22DA               	addwfc	fsr2h,f,c
 16002  00355A  AC65               	btfss	3941,6,c	;volatile
 16003  00355C  D002               	goto	i1u665_20
 16004  00355E  0E01               	movlw	1
 16005  003560  D001               	goto	i1u665_26
 16006  003562                     i1u665_20:
 16007  003562  0E00               	movlw	0
 16008  003564                     i1u665_26:
 16009  003564  6EDF               	movwf	indf2,c
 16010                           
 16011                           ; BSR set to: 15
 16012                           ;inc\CANlib.h: 601: msg->length = RXB0DLC & 0x0F;
 16013  003566  EE20 F00D          	lfsr	2,13
 16014  00356A  502C               	movf	CANreceiveMessage@msg,w,c
 16015  00356C  26D9               	addwf	fsr2l,f,c
 16016  00356E  502D               	movf	CANreceiveMessage@msg+1,w,c
 16017  003570  22DA               	addwfc	fsr2h,f,c
 16018  003572  5065               	movf	3941,w,c	;volatile
 16019  003574  0B0F               	andlw	15
 16020  003576  6EDF               	movwf	indf2,c
 16021                           
 16022                           ; BSR set to: 15
 16023                           ;inc\CANlib.h: 603: msg->type = RXB0SIDLbits.EXID;
 16024  003578  EE20 F00C          	lfsr	2,12
 16025  00357C  502C               	movf	CANreceiveMessage@msg,w,c
 16026  00357E  26D9               	addwf	fsr2l,f,c
 16027  003580  502D               	movf	CANreceiveMessage@msg+1,w,c
 16028  003582  22DA               	addwfc	fsr2h,f,c
 16029  003584  A662               	btfss	3938,3,c	;volatile
 16030  003586  D002               	goto	i1u666_20
 16031  003588  0E01               	movlw	1
 16032  00358A  D001               	goto	i1u666_26
 16033  00358C                     i1u666_20:
 16034  00358C  0E00               	movlw	0
 16035  00358E                     i1u666_26:
 16036  00358E  6EDF               	movwf	indf2,c
 16037                           
 16038                           ; BSR set to: 15
 16039                           ;inc\CANlib.h: 605: if (RXB0SIDLbits.EXID == 0)
 16040  003590  B662               	btfsc	3938,3,c	;volatile
 16041  003592  D043               	goto	i1l5506
 16042                           
 16043                           ; BSR set to: 15
 16044                           ;inc\CANlib.h: 606: {
 16045                           ;inc\CANlib.h: 607: msg->identifier = ((unsigned long)RXB0SIDH)<< 3;
 16046  003594  CF61 F02E          	movff	3937,??_CANreceiveMessage	;volatile
 16047  003598  6A2F               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16048  00359A  6A30               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16049  00359C  6A31               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16050  00359E  0E03               	movlw	3
 16051  0035A0                     i1u668_25:
 16052  0035A0  90D8               	bcf	status,0,c
 16053  0035A2  362E               	rlcf	??_CANreceiveMessage,f,c
 16054  0035A4  362F               	rlcf	??_CANreceiveMessage+1,f,c
 16055  0035A6  3630               	rlcf	??_CANreceiveMessage+2,f,c
 16056  0035A8  3631               	rlcf	??_CANreceiveMessage+3,f,c
 16057  0035AA  2EE8               	decfsz	wreg,f,c
 16058  0035AC  D7F9               	goto	i1u668_25
 16059  0035AE  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16060  0035B2  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16061  0035B6  C02E  FFDE         	movff	??_CANreceiveMessage,postinc2
 16062  0035BA  C02F  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 16063  0035BE  C030  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 16064  0035C2  C031  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 16065                           
 16066                           ; BSR set to: 15
 16067                           ;inc\CANlib.h: 608: tamp = (RXB0SIDL >> 5 ) & 0x07;
 16068  0035C6  3862               	swapf	3938,w,c	;volatile
 16069  0035C8  42E8               	rrncf	wreg,f,c
 16070  0035CA  0B07               	andlw	7
 16071  0035CC  0B07               	andlw	7
 16072  0035CE  6E37               	movwf	CANreceiveMessage@tamp,c
 16073                           
 16074                           ; BSR set to: 15
 16075                           ;inc\CANlib.h: 609: msg->identifier = msg->identifier + tamp;
 16076  0035D0  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16077  0035D4  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16078  0035D8  CFDE F02E          	movff	postinc2,??_CANreceiveMessage
 16079  0035DC  CFDE F02F          	movff	postinc2,??_CANreceiveMessage+1
 16080  0035E0  CFDE F030          	movff	postinc2,??_CANreceiveMessage+2
 16081  0035E4  CFDE F031          	movff	postinc2,??_CANreceiveMessage+3
 16082  0035E8  5037               	movf	CANreceiveMessage@tamp,w,c
 16083  0035EA  242E               	addwf	??_CANreceiveMessage,w,c
 16084  0035EC  6E32               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 16085  0035EE  0E00               	movlw	0
 16086  0035F0  202F               	addwfc	??_CANreceiveMessage+1,w,c
 16087  0035F2  6E33               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 16088  0035F4  0E00               	movlw	0
 16089  0035F6  2030               	addwfc	??_CANreceiveMessage+2,w,c
 16090  0035F8  6E34               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 16091  0035FA  0E00               	movlw	0
 16092  0035FC  2031               	addwfc	??_CANreceiveMessage+3,w,c
 16093  0035FE  6E35               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 16094  003600  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16095  003604  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16096  003608  C032  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 16097  00360C  C033  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 16098  003610  C034  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 16099  003614  C035  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 16100                           
 16101                           ;inc\CANlib.h: 610: }
 16102  003618  D08E               	goto	i1l5532
 16103  00361A                     i1l5506:
 16104                           
 16105                           ; BSR set to: 15
 16106                           ;inc\CANlib.h: 611: else
 16107                           ;inc\CANlib.h: 612: {
 16108                           ;inc\CANlib.h: 613: msg->identifier = (unsigned long) RXB0EIDL;
 16109  00361A  CF64 F02E          	movff	3940,??_CANreceiveMessage	;volatile
 16110  00361E  6A2F               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16111  003620  6A30               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16112  003622  6A31               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16113  003624  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16114  003628  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16115  00362C  C02E  FFDE         	movff	??_CANreceiveMessage,postinc2
 16116  003630  C02F  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 16117  003634  C030  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 16118  003638  C031  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 16119                           
 16120                           ; BSR set to: 15
 16121                           ;inc\CANlib.h: 614: msg->identifier += ((unsigned long) RXB0EIDH) << 8;
 16122  00363C  CF63 F02E          	movff	3939,??_CANreceiveMessage	;volatile
 16123  003640  6A2F               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16124  003642  6A30               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16125  003644  6A31               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16126  003646  C030  F031         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 16127  00364A  C02F  F030         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 16128  00364E  C02E  F02F         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 16129  003652  6A2E               	clrf	??_CANreceiveMessage,c
 16130  003654  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16131  003658  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16132  00365C  502E               	movf	??_CANreceiveMessage,w,c
 16133  00365E  26DE               	addwf	postinc2,f,c
 16134  003660  502F               	movf	??_CANreceiveMessage+1,w,c
 16135  003662  22DE               	addwfc	postinc2,f,c
 16136  003664  5030               	movf	??_CANreceiveMessage+2,w,c
 16137  003666  22DE               	addwfc	postinc2,f,c
 16138  003668  5031               	movf	??_CANreceiveMessage+3,w,c
 16139  00366A  22DE               	addwfc	postinc2,f,c
 16140                           
 16141                           ; BSR set to: 15
 16142                           ;inc\CANlib.h: 616: if (RXB0SIDLbits.EID16)
 16143  00366C  A062               	btfss	3938,0,c	;volatile
 16144  00366E  D00D               	goto	i1l5514
 16145                           
 16146                           ; BSR set to: 15
 16147                           ;inc\CANlib.h: 617: msg->identifier |= 0x00010000;
 16148  003670  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16149  003674  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16150  003678  0E00               	movlw	0
 16151  00367A  12DE               	iorwf	postinc2,f,c
 16152  00367C  0E00               	movlw	0
 16153  00367E  12DE               	iorwf	postinc2,f,c
 16154  003680  0E01               	movlw	1
 16155  003682  12DE               	iorwf	postinc2,f,c
 16156  003684  0E00               	movlw	0
 16157  003686  12DE               	iorwf	postinc2,f,c
 16158  003688  D000               	goto	i1l5514
 16159  00368A                     i1l5514:
 16160                           
 16161                           ; BSR set to: 15
 16162                           ;inc\CANlib.h: 618: if (RXB0SIDLbits.EID17)
 16163  00368A  A262               	btfss	3938,1,c	;volatile
 16164  00368C  D00D               	goto	i1l5518
 16165                           
 16166                           ; BSR set to: 15
 16167                           ;inc\CANlib.h: 619: msg->identifier |= 0x00020000;
 16168  00368E  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16169  003692  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16170  003696  0E00               	movlw	0
 16171  003698  12DE               	iorwf	postinc2,f,c
 16172  00369A  0E00               	movlw	0
 16173  00369C  12DE               	iorwf	postinc2,f,c
 16174  00369E  0E02               	movlw	2
 16175  0036A0  12DE               	iorwf	postinc2,f,c
 16176  0036A2  0E00               	movlw	0
 16177  0036A4  12DE               	iorwf	postinc2,f,c
 16178  0036A6  D000               	goto	i1l5518
 16179  0036A8                     i1l5518:
 16180                           
 16181                           ; BSR set to: 15
 16182                           ;inc\CANlib.h: 620: if (RXB0SIDLbits.SID0)
 16183  0036A8  AA62               	btfss	3938,5,c	;volatile
 16184  0036AA  D00D               	goto	i1l5522
 16185                           
 16186                           ; BSR set to: 15
 16187                           ;inc\CANlib.h: 621: msg->identifier |= 0x00040000;
 16188  0036AC  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16189  0036B0  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16190  0036B4  0E00               	movlw	0
 16191  0036B6  12DE               	iorwf	postinc2,f,c
 16192  0036B8  0E00               	movlw	0
 16193  0036BA  12DE               	iorwf	postinc2,f,c
 16194  0036BC  0E04               	movlw	4
 16195  0036BE  12DE               	iorwf	postinc2,f,c
 16196  0036C0  0E00               	movlw	0
 16197  0036C2  12DE               	iorwf	postinc2,f,c
 16198  0036C4  D000               	goto	i1l5522
 16199  0036C6                     i1l5522:
 16200                           
 16201                           ; BSR set to: 15
 16202                           ;inc\CANlib.h: 622: if (RXB0SIDLbits.SID1)
 16203  0036C6  AC62               	btfss	3938,6,c	;volatile
 16204  0036C8  D00D               	goto	i1l5526
 16205                           
 16206                           ; BSR set to: 15
 16207                           ;inc\CANlib.h: 623: msg->identifier |= 0x00080000;
 16208  0036CA  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16209  0036CE  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16210  0036D2  0E00               	movlw	0
 16211  0036D4  12DE               	iorwf	postinc2,f,c
 16212  0036D6  0E00               	movlw	0
 16213  0036D8  12DE               	iorwf	postinc2,f,c
 16214  0036DA  0E08               	movlw	8
 16215  0036DC  12DE               	iorwf	postinc2,f,c
 16216  0036DE  0E00               	movlw	0
 16217  0036E0  12DE               	iorwf	postinc2,f,c
 16218  0036E2  D000               	goto	i1l5526
 16219  0036E4                     i1l5526:
 16220                           
 16221                           ; BSR set to: 15
 16222                           ;inc\CANlib.h: 624: if (RXB0SIDLbits.SID2)
 16223  0036E4  AE62               	btfss	3938,7,c	;volatile
 16224  0036E6  D00D               	goto	i1l5530
 16225                           
 16226                           ; BSR set to: 15
 16227                           ;inc\CANlib.h: 625: msg->identifier |= 0x00100000;
 16228  0036E8  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16229  0036EC  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16230  0036F0  0E00               	movlw	0
 16231  0036F2  12DE               	iorwf	postinc2,f,c
 16232  0036F4  0E00               	movlw	0
 16233  0036F6  12DE               	iorwf	postinc2,f,c
 16234  0036F8  0E10               	movlw	16
 16235  0036FA  12DE               	iorwf	postinc2,f,c
 16236  0036FC  0E00               	movlw	0
 16237  0036FE  12DE               	iorwf	postinc2,f,c
 16238  003700  D000               	goto	i1l5530
 16239  003702                     i1l5530:
 16240                           
 16241                           ; BSR set to: 15
 16242                           ;inc\CANlib.h: 627: msg->identifier |= ((unsigned long) RXB0SIDH) << 21;
 16243  003702  CF61 F02E          	movff	3937,??_CANreceiveMessage	;volatile
 16244  003706  6A2F               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16245  003708  6A30               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16246  00370A  6A31               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16247  00370C  0E15               	movlw	21
 16248  00370E                     i1u674_25:
 16249  00370E  90D8               	bcf	status,0,c
 16250  003710  362E               	rlcf	??_CANreceiveMessage,f,c
 16251  003712  362F               	rlcf	??_CANreceiveMessage+1,f,c
 16252  003714  3630               	rlcf	??_CANreceiveMessage+2,f,c
 16253  003716  3631               	rlcf	??_CANreceiveMessage+3,f,c
 16254  003718  2EE8               	decfsz	wreg,f,c
 16255  00371A  D7F9               	goto	i1u674_25
 16256  00371C  C02C  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16257  003720  C02D  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16258  003724  502E               	movf	??_CANreceiveMessage,w,c
 16259  003726  12DE               	iorwf	postinc2,f,c
 16260  003728  502F               	movf	??_CANreceiveMessage+1,w,c
 16261  00372A  12DE               	iorwf	postinc2,f,c
 16262  00372C  5030               	movf	??_CANreceiveMessage+2,w,c
 16263  00372E  12DE               	iorwf	postinc2,f,c
 16264  003730  5031               	movf	??_CANreceiveMessage+3,w,c
 16265  003732  12DE               	iorwf	postinc2,f,c
 16266  003734  D000               	goto	i1l5532
 16267  003736                     i1l5532:
 16268                           
 16269                           ; BSR set to: 15
 16270                           ;inc\CANlib.h: 629: }
 16271                           ;inc\CANlib.h: 630: RXB0CONbits.RXFUL = 0x00;
 16272  003736  9E60               	bcf	3936,7,c	;volatile
 16273                           
 16274                           ; BSR set to: 15
 16275                           ;inc\CANlib.h: 632: return (error);
 16276                           ;	Return value of _CANreceiveMessage is never used
 16277  003738  0012               	return	
 16278                           
 16279                           ; BSR set to: 15
 16280                           
 16281                           ; BSR set to: 15
 16282  00373A  0012               	return		;funcret
 16283  00373C                     __end_of_CANreceiveMessage:
 16284                           	opt stack 0
 16285                           pclatu	equ	0xFFB
 16286                           pclath	equ	0xFFA
 16287                           tblptru	equ	0xFF8
 16288                           tblptrh	equ	0xFF7
 16289                           tblptrl	equ	0xFF6
 16290                           tablat	equ	0xFF5
 16291                           prodh	equ	0xFF4
 16292                           prodl	equ	0xFF3
 16293                           intcon	equ	0xFF2
 16294                           intcon2	equ	0xFF1
 16295                           postinc0	equ	0xFEE
 16296                           fsr0h	equ	0xFEA
 16297                           fsr0l	equ	0xFE9
 16298                           wreg	equ	0xFE8
 16299                           fsr1h	equ	0xFE2
 16300                           fsr1l	equ	0xFE1
 16301                           bsr	equ	0xFE0
 16302                           indf2	equ	0xFDF
 16303                           postinc2	equ	0xFDE
 16304                           postdec2	equ	0xFDD
 16305                           plusw2	equ	0xFDB
 16306                           fsr2h	equ	0xFDA
 16307                           fsr2l	equ	0xFD9
 16308                           status	equ	0xFD8
 16309                           
 16310 ;; *************** function _CANisRxReady *****************
 16311 ;; Defined at:
 16312 ;;		line 1163 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 16313 ;; Parameters:    Size  Location     Type
 16314 ;;		None
 16315 ;; Auto vars:     Size  Location     Type
 16316 ;;		None
 16317 ;; Return value:  Size  Location     Type
 16318 ;;                  1    wreg      unsigned char 
 16319 ;; Registers used:
 16320 ;;		wreg, status,2
 16321 ;; Tracked objects:
 16322 ;;		On entry : 0/0
 16323 ;;		On exit  : 0/0
 16324 ;;		Unchanged: 0/0
 16325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16329 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16330 ;;Total ram usage:        1 bytes
 16331 ;; Hardware stack levels used:    1
 16332 ;; Hardware stack levels required when called:    2
 16333 ;; This function calls:
 16334 ;;		Nothing
 16335 ;; This function is called by:
 16336 ;;		_ISR_Bassa
 16337 ;; This function uses a non-reentrant model
 16338 ;;
 16339                           
 16340                           	psect	text43
 16341  005FD0                     __ptext43:
 16342                           	opt stack 0
 16343  005FD0                     _CANisRxReady:
 16344                           	opt stack 20
 16345                           
 16346                           ;inc\CANlib.h: 1165: return (RXB0CONbits.RXFUL || RXB1CONbits.RXFUL);
 16347                           
 16348                           ; BSR set to: 15
 16349                           ;incstack = 0
 16350  005FD0  0E01               	movlw	1
 16351  005FD2  6E2C               	movwf	_CANisRxReady$2839,c
 16352  005FD4  BE60               	btfsc	3936,7,c	;volatile
 16353  005FD6  D005               	goto	i1l557
 16354  005FD8  010F               	movlb	15	; () banked
 16355  005FDA  BF50               	btfsc	80,7,b	;volatile
 16356  005FDC  D002               	goto	i1l557
 16357                           
 16358                           ; BSR set to: 15
 16359  005FDE  0E00               	movlw	0
 16360  005FE0  6E2C               	movwf	_CANisRxReady$2839,c
 16361  005FE2                     i1l557:
 16362  005FE2  502C               	movf	_CANisRxReady$2839,w,c
 16363  005FE4  0012               	return	
 16364  005FE6  0012               	return		;funcret
 16365  005FE8                     __end_of_CANisRxReady:
 16366                           	opt stack 0
 16367                           pclatu	equ	0xFFB
 16368                           pclath	equ	0xFFA
 16369                           tblptru	equ	0xFF8
 16370                           tblptrh	equ	0xFF7
 16371                           tblptrl	equ	0xFF6
 16372                           tablat	equ	0xFF5
 16373                           prodh	equ	0xFF4
 16374                           prodl	equ	0xFF3
 16375                           intcon	equ	0xFF2
 16376                           intcon2	equ	0xFF1
 16377                           postinc0	equ	0xFEE
 16378                           fsr0h	equ	0xFEA
 16379                           fsr0l	equ	0xFE9
 16380                           wreg	equ	0xFE8
 16381                           fsr1h	equ	0xFE2
 16382                           fsr1l	equ	0xFE1
 16383                           bsr	equ	0xFE0
 16384                           indf2	equ	0xFDF
 16385                           postinc2	equ	0xFDE
 16386                           postdec2	equ	0xFDD
 16387                           plusw2	equ	0xFDB
 16388                           fsr2h	equ	0xFDA
 16389                           fsr2l	equ	0xFD9
 16390                           status	equ	0xFD8
 16391                           
 16392 ;; *************** function _ISR_Alta *****************
 16393 ;; Defined at:
 16394 ;;		line 103 in file "parcheggio.c"
 16395 ;; Parameters:    Size  Location     Type
 16396 ;;		None
 16397 ;; Auto vars:     Size  Location     Type
 16398 ;;		None
 16399 ;; Return value:  Size  Location     Type
 16400 ;;		None               void
 16401 ;; Registers used:
 16402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16403 ;; Tracked objects:
 16404 ;;		On entry : 0/0
 16405 ;;		On exit  : 0/0
 16406 ;;		Unchanged: 0/0
 16407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16410 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16411 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16412 ;;Total ram usage:       16 bytes
 16413 ;; Hardware stack levels used:    1
 16414 ;; Hardware stack levels required when called:    1
 16415 ;; This function calls:
 16416 ;;		___lwdiv
 16417 ;; This function is called by:
 16418 ;;		Interrupt level 2
 16419 ;; This function uses a non-reentrant model
 16420 ;;
 16421                           
 16422                           	psect	intcode
 16423  000008                     __pintcode:
 16424                           	opt stack 0
 16425  000008                     _ISR_Alta:
 16426                           	opt stack 19
 16427                           
 16428                           ;incstack = 0
 16429  000008  CFFA F069          	movff	pclath,??_ISR_Alta+2
 16430  00000C  CFFB F06A          	movff	pclatu,??_ISR_Alta+3
 16431  000010  CFE9 F06B          	movff	fsr0l,??_ISR_Alta+4
 16432  000014  EF9A  F02C         	goto	int_func
 16433                           pclatu	equ	0xFFB
 16434                           pclath	equ	0xFFA
 16435                           tblptru	equ	0xFF8
 16436                           tblptrh	equ	0xFF7
 16437                           tblptrl	equ	0xFF6
 16438                           tablat	equ	0xFF5
 16439                           prodh	equ	0xFF4
 16440                           prodl	equ	0xFF3
 16441                           intcon	equ	0xFF2
 16442                           intcon2	equ	0xFF1
 16443                           postinc0	equ	0xFEE
 16444                           fsr0h	equ	0xFEA
 16445                           fsr0l	equ	0xFE9
 16446                           wreg	equ	0xFE8
 16447                           fsr1h	equ	0xFE2
 16448                           fsr1l	equ	0xFE1
 16449                           bsr	equ	0xFE0
 16450                           indf2	equ	0xFDF
 16451                           postinc2	equ	0xFDE
 16452                           postdec2	equ	0xFDD
 16453                           plusw2	equ	0xFDB
 16454                           fsr2h	equ	0xFDA
 16455                           fsr2l	equ	0xFD9
 16456                           status	equ	0xFD8
 16457                           
 16458                           	psect	intcode_body
 16459  005934                     __pintcode_body:
 16460                           	opt stack 19
 16461  005934                     int_func:
 16462                           	opt stack 19
 16463  005934  CFEA F06C          	movff	fsr0h,??_ISR_Alta+5
 16464  005938  CFE1 F06D          	movff	fsr1l,??_ISR_Alta+6
 16465  00593C  CFE2 F06E          	movff	fsr1h,??_ISR_Alta+7
 16466  005940  CFD9 F06F          	movff	fsr2l,??_ISR_Alta+8
 16467  005944  CFDA F070          	movff	fsr2h,??_ISR_Alta+9
 16468  005948  CFF3 F071          	movff	prodl,??_ISR_Alta+10
 16469  00594C  CFF4 F072          	movff	prodh,??_ISR_Alta+11
 16470  005950  CFF6 F073          	movff	tblptrl,??_ISR_Alta+12
 16471  005954  CFF7 F074          	movff	tblptrh,??_ISR_Alta+13
 16472  005958  CFF8 F075          	movff	tblptru,??_ISR_Alta+14
 16473  00595C  CFF5 F076          	movff	tablat,??_ISR_Alta+15
 16474                           
 16475                           ;parcheggio.c: 104: if (INTCON2bits.INTEDG0 == 1) {
 16476  005960  ACF1               	btfss	intcon2,6,c	;volatile
 16477  005962  D007               	goto	i2l688
 16478                           
 16479                           ;parcheggio.c: 105: INTCON2bits.INTEDG0 = 0;
 16480  005964  9CF1               	bcf	intcon2,6,c	;volatile
 16481                           
 16482                           ;parcheggio.c: 106: TMR3H = 0;
 16483  005966  0E00               	movlw	0
 16484  005968  6EB3               	movwf	4019,c	;volatile
 16485                           
 16486                           ;parcheggio.c: 107: TMR3L = 0;
 16487  00596A  0E00               	movlw	0
 16488  00596C  6EB2               	movwf	4018,c	;volatile
 16489                           
 16490                           ;parcheggio.c: 108: distance_error = 0;
 16491  00596E  9A54               	bcf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 16492                           
 16493                           ;parcheggio.c: 109: } else {
 16494  005970  D031               	goto	i2l7154
 16495  005972                     i2l688:
 16496                           
 16497                           ;parcheggio.c: 110: TMR3H_temp = TMR3H;
 16498  005972  CFB3 F020          	movff	4019,_TMR3H_temp	;volatile
 16499                           
 16500                           ;parcheggio.c: 111: TMR3L_temp = TMR3L;
 16501  005976  CFB2 F021          	movff	4018,_TMR3L_temp	;volatile
 16502                           
 16503                           ;parcheggio.c: 112: timerValue2 = TMR3H_temp;
 16504  00597A  C020  F01D         	movff	_TMR3H_temp,_timerValue2	;volatile
 16505  00597E  6A1E               	clrf	_timerValue2+1,c	;volatile
 16506                           
 16507                           ;parcheggio.c: 113: timerValue2 = ((timerValue2 << 8) | (TMR3L_temp));
 16508  005980  501D               	movf	_timerValue2,w,c	;volatile
 16509  005982  0100               	movlb	0	; () banked
 16510  005984  6F67               	movwf	??_ISR_Alta& (0+255),b
 16511  005986  5021               	movf	_TMR3L_temp,w,c	;volatile
 16512  005988  6E1D               	movwf	_timerValue2,c	;volatile
 16513  00598A  C067  F01E         	movff	??_ISR_Alta,_timerValue2+1	;volatile
 16514                           
 16515                           ; BSR set to: 0
 16516                           ;parcheggio.c: 114: pulse_time = timerValue2 / 2;
 16517  00598E  90D8               	bcf	status,0,c
 16518  005990  301E               	rrcf	_timerValue2+1,w,c	;volatile
 16519  005992  0100               	movlb	0	; () banked
 16520  005994  6F67               	movwf	??_ISR_Alta& (0+255),b
 16521  005996  301D               	rrcf	_timerValue2,w,c	;volatile
 16522  005998  6E1B               	movwf	_pulse_time,c	;volatile
 16523  00599A  C067  F01C         	movff	??_ISR_Alta,_pulse_time+1	;volatile
 16524                           
 16525                           ; BSR set to: 0
 16526                           ;parcheggio.c: 115: sensor_distance[MUX_index] = pulse_time / 58;
 16527  00599E  C01B  F060         	movff	_pulse_time,___lwdiv@dividend	;volatile
 16528  0059A2  C01C  F061         	movff	_pulse_time+1,___lwdiv@dividend+1	;volatile
 16529  0059A6  0E00               	movlw	0
 16530  0059A8  0100               	movlb	0	; () banked
 16531  0059AA  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 16532  0059AC  0E3A               	movlw	58
 16533  0059AE  6F62               	movwf	___lwdiv@divisor& (0+255),b
 16534  0059B0  ECA8  F02D         	call	___lwdiv	;wreg free
 16535  0059B4  501F               	movf	_MUX_index,w,c	;volatile
 16536  0059B6  0D02               	mullw	2
 16537  0059B8  0E01               	movlw	low _sensor_distance
 16538  0059BA  24F3               	addwf	prodl,w,c
 16539  0059BC  6ED9               	movwf	fsr2l,c
 16540  0059BE  0E00               	movlw	high _sensor_distance
 16541  0059C0  20F4               	addwfc	prodh,w,c
 16542  0059C2  6EDA               	movwf	fsr2h,c
 16543  0059C4  0100               	movlb	0	; () banked
 16544  0059C6  C060  FFDE         	movff	?___lwdiv,postinc2
 16545  0059CA  0100               	movlb	0	; () banked
 16546  0059CC  C061  FFDD         	movff	?___lwdiv+1,postdec2
 16547                           
 16548                           ; BSR set to: 0
 16549                           ;parcheggio.c: 116: INTCON2bits.INTEDG0 = 1;
 16550  0059D0  8CF1               	bsf	intcon2,6,c	;volatile
 16551  0059D2  D000               	goto	i2l7154
 16552  0059D4                     i2l7154:
 16553                           
 16554                           ;parcheggio.c: 117: }
 16555                           ;parcheggio.c: 118: INTCONbits.INT0IF = 0;
 16556  0059D4  92F2               	bcf	intcon,1,c	;volatile
 16557  0059D6  C076  FFF5         	movff	??_ISR_Alta+15,tablat
 16558  0059DA  C075  FFF8         	movff	??_ISR_Alta+14,tblptru
 16559  0059DE  C074  FFF7         	movff	??_ISR_Alta+13,tblptrh
 16560  0059E2  C073  FFF6         	movff	??_ISR_Alta+12,tblptrl
 16561  0059E6  C072  FFF4         	movff	??_ISR_Alta+11,prodh
 16562  0059EA  C071  FFF3         	movff	??_ISR_Alta+10,prodl
 16563  0059EE  C070  FFDA         	movff	??_ISR_Alta+9,fsr2h
 16564  0059F2  C06F  FFD9         	movff	??_ISR_Alta+8,fsr2l
 16565  0059F6  C06E  FFE2         	movff	??_ISR_Alta+7,fsr1h
 16566  0059FA  C06D  FFE1         	movff	??_ISR_Alta+6,fsr1l
 16567  0059FE  C06C  FFEA         	movff	??_ISR_Alta+5,fsr0h
 16568  005A02  C06B  FFE9         	movff	??_ISR_Alta+4,fsr0l
 16569  005A06  C06A  FFFB         	movff	??_ISR_Alta+3,pclatu
 16570  005A0A  C069  FFFA         	movff	??_ISR_Alta+2,pclath
 16571  005A0E  0011               	retfie		f
 16572  005A10                     __end_of_ISR_Alta:
 16573                           	opt stack 0
 16574                           pclatu	equ	0xFFB
 16575                           pclath	equ	0xFFA
 16576                           tblptru	equ	0xFF8
 16577                           tblptrh	equ	0xFF7
 16578                           tblptrl	equ	0xFF6
 16579                           tablat	equ	0xFF5
 16580                           prodh	equ	0xFF4
 16581                           prodl	equ	0xFF3
 16582                           intcon	equ	0xFF2
 16583                           intcon2	equ	0xFF1
 16584                           postinc0	equ	0xFEE
 16585                           fsr0h	equ	0xFEA
 16586                           fsr0l	equ	0xFE9
 16587                           wreg	equ	0xFE8
 16588                           fsr1h	equ	0xFE2
 16589                           fsr1l	equ	0xFE1
 16590                           bsr	equ	0xFE0
 16591                           indf2	equ	0xFDF
 16592                           postinc2	equ	0xFDE
 16593                           postdec2	equ	0xFDD
 16594                           plusw2	equ	0xFDB
 16595                           fsr2h	equ	0xFDA
 16596                           fsr2l	equ	0xFD9
 16597                           status	equ	0xFD8
 16598                           
 16599 ;; *************** function ___lwdiv *****************
 16600 ;; Defined at:
 16601 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 16602 ;; Parameters:    Size  Location     Type
 16603 ;;  dividend        2    0[BANK0 ] unsigned int 
 16604 ;;  divisor         2    2[BANK0 ] unsigned int 
 16605 ;; Auto vars:     Size  Location     Type
 16606 ;;  quotient        2    5[BANK0 ] unsigned int 
 16607 ;;  counter         1    4[BANK0 ] unsigned char 
 16608 ;; Return value:  Size  Location     Type
 16609 ;;                  2    0[BANK0 ] unsigned int 
 16610 ;; Registers used:
 16611 ;;		wreg, status,2, status,0
 16612 ;; Tracked objects:
 16613 ;;		On entry : 0/0
 16614 ;;		On exit  : 0/0
 16615 ;;		Unchanged: 0/0
 16616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16617 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16618 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16620 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16621 ;;Total ram usage:        7 bytes
 16622 ;; Hardware stack levels used:    1
 16623 ;; This function calls:
 16624 ;;		Nothing
 16625 ;; This function is called by:
 16626 ;;		_ISR_Alta
 16627 ;; This function uses a non-reentrant model
 16628 ;;
 16629                           
 16630                           	psect	text45
 16631  005B50                     __ptext45:
 16632                           	opt stack 0
 16633  005B50                     ___lwdiv:
 16634                           	opt stack 19
 16635                           
 16636                           ;incstack = 0
 16637  005B50  0E00               	movlw	0
 16638  005B52  0100               	movlb	0	; () banked
 16639  005B54  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16640  005B56  0E00               	movlw	0
 16641  005B58  6F65               	movwf	___lwdiv@quotient& (0+255),b
 16642                           
 16643                           ; BSR set to: 0
 16644  005B5A  0100               	movlb	0	; () banked
 16645  005B5C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16646  005B5E  0100               	movlb	0	; () banked
 16647  005B60  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16648  005B62  B4D8               	btfsc	status,2,c
 16649  005B64  D031               	goto	i2l1418
 16650                           
 16651                           ; BSR set to: 0
 16652  005B66  0E01               	movlw	1
 16653  005B68  0100               	movlb	0	; () banked
 16654  005B6A  6F64               	movwf	___lwdiv@counter& (0+255),b
 16655  005B6C  D007               	goto	i2l7124
 16656  005B6E                     i2l7122:
 16657                           
 16658                           ; BSR set to: 0
 16659  005B6E  0100               	movlb	0	; () banked
 16660  005B70  90D8               	bcf	status,0,c
 16661  005B72  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 16662  005B74  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16663  005B76  0100               	movlb	0	; () banked
 16664  005B78  2B64               	incf	___lwdiv@counter& (0+255),f,b
 16665  005B7A  D000               	goto	i2l7124
 16666  005B7C                     i2l7124:
 16667                           
 16668                           ; BSR set to: 0
 16669  005B7C  0100               	movlb	0	; () banked
 16670  005B7E  BF63               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
 16671  005B80  D002               	goto	i2l7126
 16672  005B82  D7F5               	goto	i2l7122
 16673                           
 16674                           ; BSR set to: 0
 16675  005B84  D000               	goto	i2l7126
 16676  005B86                     i2l7126:
 16677                           
 16678                           ; BSR set to: 0
 16679  005B86  0100               	movlb	0	; () banked
 16680  005B88  90D8               	bcf	status,0,c
 16681  005B8A  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 16682  005B8C  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16683                           
 16684                           ; BSR set to: 0
 16685  005B8E  0100               	movlb	0	; () banked
 16686  005B90  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16687  005B92  0100               	movlb	0	; () banked
 16688  005B94  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 16689  005B96  0100               	movlb	0	; () banked
 16690  005B98  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16691  005B9A  0100               	movlb	0	; () banked
 16692  005B9C  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16693  005B9E  A0D8               	btfss	status,0,c
 16694  005BA0  D00B               	goto	i2l7134
 16695                           
 16696                           ; BSR set to: 0
 16697  005BA2  0100               	movlb	0	; () banked
 16698  005BA4  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16699  005BA6  0100               	movlb	0	; () banked
 16700  005BA8  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 16701  005BAA  0100               	movlb	0	; () banked
 16702  005BAC  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16703  005BAE  0100               	movlb	0	; () banked
 16704  005BB0  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16705                           
 16706                           ; BSR set to: 0
 16707  005BB2  0100               	movlb	0	; () banked
 16708  005BB4  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 16709  005BB6  D000               	goto	i2l7134
 16710  005BB8                     i2l7134:
 16711                           
 16712                           ; BSR set to: 0
 16713  005BB8  0100               	movlb	0	; () banked
 16714  005BBA  90D8               	bcf	status,0,c
 16715  005BBC  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16716  005BBE  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 16717                           
 16718                           ; BSR set to: 0
 16719  005BC0  0100               	movlb	0	; () banked
 16720  005BC2  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 16721  005BC4  D7E0               	goto	i2l7126
 16722  005BC6  D000               	goto	i2l1418
 16723  005BC8                     i2l1418:
 16724                           
 16725                           ; BSR set to: 0
 16726  005BC8  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 16727  005BCC  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16728                           
 16729                           ; BSR set to: 0
 16730  005BD0  0012               	return		;funcret
 16731  005BD2                     __end_of___lwdiv:
 16732                           	opt stack 0
 16733                           pclatu	equ	0xFFB
 16734                           pclath	equ	0xFFA
 16735                           tblptru	equ	0xFF8
 16736                           tblptrh	equ	0xFF7
 16737                           tblptrl	equ	0xFF6
 16738                           tablat	equ	0xFF5
 16739                           prodh	equ	0xFF4
 16740                           prodl	equ	0xFF3
 16741                           intcon	equ	0xFF2
 16742                           intcon2	equ	0xFF1
 16743                           postinc0	equ	0xFEE
 16744                           fsr0h	equ	0xFEA
 16745                           fsr0l	equ	0xFE9
 16746                           wreg	equ	0xFE8
 16747                           fsr1h	equ	0xFE2
 16748                           fsr1l	equ	0xFE1
 16749                           bsr	equ	0xFE0
 16750                           indf2	equ	0xFDF
 16751                           postinc2	equ	0xFDE
 16752                           postdec2	equ	0xFDD
 16753                           plusw2	equ	0xFDB
 16754                           fsr2h	equ	0xFDA
 16755                           fsr2l	equ	0xFD9
 16756                           status	equ	0xFD8
 16757                           pclatu	equ	0xFFB
 16758                           pclath	equ	0xFFA
 16759                           tblptru	equ	0xFF8
 16760                           tblptrh	equ	0xFF7
 16761                           tblptrl	equ	0xFF6
 16762                           tablat	equ	0xFF5
 16763                           prodh	equ	0xFF4
 16764                           prodl	equ	0xFF3
 16765                           intcon	equ	0xFF2
 16766                           intcon2	equ	0xFF1
 16767                           postinc0	equ	0xFEE
 16768                           fsr0h	equ	0xFEA
 16769                           fsr0l	equ	0xFE9
 16770                           wreg	equ	0xFE8
 16771                           fsr1h	equ	0xFE2
 16772                           fsr1l	equ	0xFE1
 16773                           bsr	equ	0xFE0
 16774                           indf2	equ	0xFDF
 16775                           postinc2	equ	0xFDE
 16776                           postdec2	equ	0xFDD
 16777                           plusw2	equ	0xFDB
 16778                           fsr2h	equ	0xFDA
 16779                           fsr2l	equ	0xFD9
 16780                           status	equ	0xFD8
 16781                           
 16782                           	psect	param0
 16783  0000                     pclatu	equ	0xFFB
 16784                           pclath	equ	0xFFA
 16785                           tblptru	equ	0xFF8
 16786                           tblptrh	equ	0xFF7
 16787                           tblptrl	equ	0xFF6
 16788                           tablat	equ	0xFF5
 16789                           prodh	equ	0xFF4
 16790                           prodl	equ	0xFF3
 16791                           intcon	equ	0xFF2
 16792                           intcon2	equ	0xFF1
 16793                           postinc0	equ	0xFEE
 16794                           fsr0h	equ	0xFEA
 16795                           fsr0l	equ	0xFE9
 16796                           wreg	equ	0xFE8
 16797                           fsr1h	equ	0xFE2
 16798                           fsr1l	equ	0xFE1
 16799                           bsr	equ	0xFE0
 16800                           indf2	equ	0xFDF
 16801                           postinc2	equ	0xFDE
 16802                           postdec2	equ	0xFDD
 16803                           plusw2	equ	0xFDB
 16804                           fsr2h	equ	0xFDA
 16805                           fsr2l	equ	0xFD9
 16806                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    80
    Data        3
    BSS         191
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     40      87
    BANK0           160    119     137
    BANK1           256     97     228
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 24
		 -> sin@coeff_a(CODE[20]), sin@coeff_b(CODE[16]), atan@coeff_a(CODE[24]), atan@coeff_b(CODE[20]), 

    CANreceiveMessage@msg	PTR struct . size(2) Largest target is 15
		 -> msg(BANK1[15]), 

    CANsendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data_speed(BANK1[8]), data_correction(BANK1[8]), data_test(BANK1[8]), data(BANK1[8]), 
		 -> data_brake(COMRAM[8]), data_steering(BANK1[8]), sensor_distance_short(BANK1[8]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Alta in COMRAM

    None.

Critical Paths under _ISR_Bassa in COMRAM

    _ISR_Bassa->i1_CANsendMessage
    i1_delay_ms->i1___wmul
    i1_can_send->i1_CANsendMessage

Critical Paths under _main in BANK0

    _park_search->_parallelo
    _park_routine->_parallelo
    _parallelo->_sqrt
    _can_send->_CANsendMessage
    _asin->_sqrt
    _sqrt->___flsub
    _atan->___flge
    _fabs->___flneg
    ___awtofl->___flpack
    _delay_s->_delay_ms
    _delay_ms->___wmul
    _cos->_sin
    _sin->___flsub
    _floor->___flge
    ___fltol->___flneg
    ___flge->_fabs
    ___altofl->___fltol
    _eval_poly->___fladd
    ___flmul->___flpack
    ___flsub->_floor
    ___fladd->___fldiv
    ___flneg->___fladd
    ___fldiv->___flmul
    ___lwtofl->___flpack
    _configurations->_CANInitialize
    _CANInitialize->_CANSetFilter
    _CANInitialize->_CANSetMask

Critical Paths under _ISR_Alta in BANK0

    _ISR_Alta->___lwdiv

Critical Paths under _ISR_Bassa in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_park_routine
    _park_routine->_cos
    _parallelo->_asin
    _asin->_sqrt
    _cos->_asin

Critical Paths under _ISR_Alta in BANK1

    None.

Critical Paths under _ISR_Bassa in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Alta in BANK2

    None.

Critical Paths under _ISR_Bassa in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Alta in BANK3

    None.

Critical Paths under _ISR_Bassa in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Alta in BANK4

    None.

Critical Paths under _ISR_Bassa in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Alta in BANK5

    None.

Critical Paths under _ISR_Bassa in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Alta in BANK6

    None.

Critical Paths under _ISR_Bassa in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Alta in BANK7

    None.

Critical Paths under _ISR_Bassa in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Alta in BANK8

    None.

Critical Paths under _ISR_Bassa in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Alta in BANK9

    None.

Critical Paths under _ISR_Bassa in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Alta in BANK10

    None.

Critical Paths under _ISR_Bassa in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Alta in BANK11

    None.

Critical Paths under _ISR_Bassa in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Alta in BANK12

    None.

Critical Paths under _ISR_Bassa in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  562549
                       _CANisTxReady
                     _CANsendMessage
                     _configurations
                           _delay_ms
                       _park_routine
                        _park_search
 ---------------------------------------------------------------------------------
 (1) _park_search                                          2     2      0  166057
                                             49 BANK1      2     2      0
                       _CANisTxReady
                     _CANsendMessage
                           ___awtofl
                                _abs
                          _parallelo
 ---------------------------------------------------------------------------------
 (1) _park_routine                                        52    52      0  382895
                                             57 BANK1     40    40      0
                       _CANisTxReady
                     _CANsendMessage
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lwtofl
                               _asin
                           _can_send
                                _cos
                           _delay_ms
                            _delay_s
                          _parallelo
 ---------------------------------------------------------------------------------
 (2) _parallelo                                            2     2      0  156568
                                            117 BANK0      2     2      0
                           ___awtofl
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___fltol
                                _abs
                               _asin
                           _can_send
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _can_send                                             0     0      0    6424
                       _CANisTxReady
                     _CANsendMessage
 ---------------------------------------------------------------------------------
 (4) _CANsendMessage                                      16     8      8    6387
                                             23 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (4) _CANisTxReady                                         1     1      0      37
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _asin                                                40    36      4   99984
                                             21 BANK1     28    24      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                               _atan
                               _fabs
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _sqrt                                                25    21      4   20243
                                            113 BANK0      4     0      4
                                              0 BANK1     21    21      0
                             ___flge
                            ___flmul
                            ___flneg (ARG)
                            ___flsub
 ---------------------------------------------------------------------------------
 (4) _atan                                                21    17      4   48835
                                             95 BANK0     21    17      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (4) _fabs                                                 4     0      4    1929
                                             79 BANK0      4     0      4
                            ___flneg
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     194
                                             23 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    2871
                                             33 BANK0      5     1      4
                           ___flpack
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0    1037
                                             31 BANK0      2     2      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2     969
                                             29 BANK0      2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     392
                                             23 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _cos                                                 12     8      4   80987
                                             49 BANK1      8     4      4
                            ___fladd
                             ___flge
                               _asin (ARG)
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 17    13      4   70477
                                            113 BANK0      4     0      4
                                              0 BANK1     13    13      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                               10     6      4   14386
                                             95 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                8     2      6     452
                                             23 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     722
                                             79 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8    1584
                                             83 BANK0     12     4      8
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (5) ___altofl                                             5     1      4    2794
                                             89 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   18451
                                             75 BANK0     16     8      8
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             15     7      8    8884
                                             33 BANK0     15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    9061
                                            105 BANK0      8     0      8
                            ___fladd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             12     4      8    8389
                                             63 BANK0     12     4      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4    1605
                                             75 BANK0      4     0      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             15     7      8    7273
                                             48 BANK0     15     7      8
                            ___flmul (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2769
                                             33 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (6) ___flpack                                            10     4      6    2584
                                             23 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (1) _configurations                                       0     0      0    6204
                      _CANInitialize
 ---------------------------------------------------------------------------------
 (2) _CANInitialize                                       12     7      5    6204
                                             37 BANK0     12     7      5
                   _CANOperationMode
                       _CANSetFilter
                         _CANSetMask
 ---------------------------------------------------------------------------------
 (3) _CANSetMask                                          14     9      5    1286
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANSetFilter                                        14     9      5    3858
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANOperationMode                                     1     1      0      62
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR_Bassa                                           24    24      0    6834
                                             16 COMRAM    24    24      0
                       _CANisRxReady
                  _CANreceiveMessage
                   i1_CANsendMessage
                         i1_can_send
                         i1_delay_ms
 ---------------------------------------------------------------------------------
 (9) i1_delay_ms                                           2     0      2     283
                                              6 COMRAM     2     0      2
                           i1___wmul
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) i1_can_send                                           0     0      0    2683
                     i1_CANisTxReady
                   i1_CANsendMessage
 ---------------------------------------------------------------------------------
 (10) i1_CANsendMessage                                   16     8      8    2659
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (10) i1_CANisTxReady                                      1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _CANreceiveMessage                                   12    10      2    1137
                                              0 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (9) _CANisRxReady                                         1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Alta                                           16    16      0     395
                                              7 BANK0     16    16      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (12) ___lwdiv                                             7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CANisTxReady
   _CANsendMessage
   _configurations
     _CANInitialize
       _CANOperationMode
       _CANSetFilter
       _CANSetMask
   _delay_ms
     ___wmul
   _park_routine
     _CANisTxReady
     _CANsendMessage
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
       ___flpack (ARG)
       ___lwtofl (ARG)
         ___flpack
     ___fldiv
       ___flmul (ARG)
         ___flpack
       ___flpack (ARG)
     ___flmul
       ___flpack
     ___flneg
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___flneg (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
     ___lwtofl
       ___flpack
     _asin
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flge
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       ___flmul
         ___flpack
       ___flneg
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
       _atan
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _eval_poly
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       _fabs
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
       _sqrt
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp
     _can_send
       _CANisTxReady
       _CANsendMessage
     _cos
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___flge
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       _asin (ARG)
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
               _frexp
       _sin (ARG)
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         ___flsub
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp
         _eval_poly
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___fltol
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flneg (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
           _frexp
     _delay_ms
       ___wmul
     _delay_s
       _delay_ms
         ___wmul
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flge
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       ___flmul
         ___flpack
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp
   _park_search
     _CANisTxReady
     _CANsendMessage
     ___awtofl
       ___flpack
       _abs (ARG)
     _abs
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flge
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       ___flmul
         ___flpack
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp

 _ISR_Bassa (ROOT)
   _CANisRxReady
   _CANreceiveMessage
   i1_CANsendMessage
   i1_can_send
     i1_CANisTxReady
     i1_CANsendMessage
   i1_delay_ms
     i1___wmul

 _ISR_Alta (ROOT)
   ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     61      E4       7       89.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     77      89       5       85.6%
BITCOMRAM           5F      0       2       0        2.1%
COMRAM              5F     28      57       1       91.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C4      20        0.0%
DATA                 0      0     1C4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Jun 07 20:38:56 2016

               ___altofl@sign 00BD                             _n 0138                             _x 00DB  
                           _z 00DF                  ___fldiv@cntr 009C          __end_of_CANSetFilter 23CA  
                ___fldiv@sign 009E            delay_s@repeat_loop 0080                            bsr 000FE0  
         ___wmul@multiplicand 0079                   __CFG_BORV$3 000000              i1___wmul@product 0030  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                  i1_can_send 584E                  __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000  
                ___flpack@arg 0077                  ___flpack@exp 007B                    _MUX_select 0100  
                         l400 2AC2                           l500 213A                           l510 224E  
                         l430 394A                           l511 225A                           l503 221A  
                         l431 394E                           l520 236A                           l504 221E  
                         l440 3A5A                           l432 395A                           l360 23E0  
                         l521 236E                           l505 222A                           l441 3A66  
                         l433 395E                           l361 23E4                           l522 237A  
                         l514 233A                           l506 222E                           l442 3A6A  
                         l434 396A                           l354 4B28                           l370 25A2  
                         l362 24DE                           l515 233E                           l507 223A  
                         l443 3A76                           l435 396E                           l355 4B32  
                         l371 25AE                           l363 246C                           l516 234A  
                         l508 223E                           l460 1DA0                           l444 3A7A  
                         l436 397A                           l428 393A                           l380 270A  
                         l364 2476                           l517 234E                           l509 224A  
                         l461 1DAC                           l445 3A86                           l429 393E  
                         l381 2714                           l365 2480                           l518 235A  
                         l470 1EBA                           l462 1DB0                           l446 3A8A  
                         l390 28F8                           l374 28DE                           l366 248A  
                         l519 235E                           l471 1EBE                           l463 1DBC  
                         l447 3A96                           l439 3A56                           l391 29F2  
                         l375 266A                           l359 2654                           l472 1ECA  
                         l464 1DC0                           l552 5F90                           l392 2980  
                         l384 2828                           l376 266E                           l481 1FDA  
                         l473 1ECE                           l465 1DCC                           l393 298A  
                         l385 282C                           l377 2768                           l369 259E  
                         l482 1FDE                           l474 1EDA                           l466 1DD0  
                         l394 2994                           l386 2838                           l378 26F6  
                         l483 1FEA                           l475 1EDE                           l467 1DDC  
                         l459 1D9C                           l395 299E                           l379 2700  
                         l492 20FA                           l484 1FEE                           l476 1EEA  
                         l493 20FE                           l485 1FFA                           l477 1EEE  
                         l565 5E40                           l389 28F4                           l494 210A  
                         l486 1FFE                           l478 1EFA                           l398 2AB2  
                         l734 4DE4                           l495 210E                           l487 200A  
                         l399 2AB6                           l496 211A                           l488 200E  
                         l736 4C8C                           l497 211E                           l489 201A  
                         l498 212A                           l499 212E                           l835 480C  
                         l771 0E06                           l748 4DDE                           l781 1600  
                         l790 16FE                           l768 0DC8                           l777 0E38  
                         l796 17B2                           l893 5F40                  __CFG_CPB$OFF 000000  
                __CFG_CPD$OFF 000000                    _MUX_toggle 02A0                    i1_delay_ms 5E86  
                         _abs 5F1E                           _asd 02A2                           _dir 02A4  
                         _cos 5768                           _msg 0144                           _sin 3E0A  
                         prod 000FF3                           wreg 000FE8               ?_configurations 002C  
                ___flmul@cntr 008E                  ___flmul@sign 008F                  __CFG_LVP$OFF 000000  
               ___flpack@sign 007C                  ___fltol@exp1 00B8                  __CFG_WDT$OFF 000000  
                        l1123 4EF8                          l1019 4452                          ?_abs 0077  
                        l1124 4F10                          l1116 4E96                          l1150 41D2  
                        l1144 4166                          l1136 5DC6                          l1148 41A4  
                        l1159 42BE                          l1184 5716                          l1465 488C  
                        l1458 3FE4                          l1466 4878                          l1459 4114  
                        l1478 531C                          l4310 283E                          l4304 281C  
                        l4208 2496                          l4234 25B4                          l4228 2592  
                        ?_cos 01B4                          l6200 41B6                          l4360 29AA  
                        l4602 3A9C                          l6220 423C                          l4380 2AA6  
                        l4284 2720                          l6310 5E00                          l6222 424E  
                        l6214 420A                          l6206 41C8                          l6302 50A6  
                        l7110 188C                          l4544 38AE                          l4528 37F6  
                        l6232 429C                          l6224 425E                          l7104 1842  
                        l4626 1960                          l4570 3980                          l6162 4E26  
                        l6242 430E                          l6234 42AE                          l6226 426A  
                        l6322 5D1C                          l4386 2AC8                          l7050 1686  
                        l7026 15C2                          l4812 2020                          l4716 1D0A  
                        l4644 1A1A                          l6172 4ED6                          l6164 4E38  
                        l6332 50FC                          l6252 4362                          l4750 1E2A  
                        l4662 1AD6                          l6174 4EE8                          l6166 4E78  
                        l6158 4E10                          l6350 5172                          l6238 42E6  
                        l6262 4F98                          l6422 53C4                          l6406 5354  
                        l6502 4A2C                          l7054 16C0                          l4744 1DE2  
                        l4680 1B92                          l4576 39C8                          l6184 4F5E  
                        l6280 500E                          l6440 5434                          l6432 53F6  
                        l7064 175C                          l4914 2380                          l4818 2068  
                        l6362 51DC                          l6338 5122                          l6194 4178  
                        l6370 5C66                          l6290 5056                          l6434 5408  
                        l6426 53D8                          l6450 5AE2                          l6530 45A8  
                        l4852 2188                          l6292 505E                          l6284 5036  
                        l6268 4FBE                          l6436 5416                          l6620 3C82  
                        l7092 1806                          l7172 5A5E                          l4846 2140  
                        l6710 4ABA                          l6358 51C8                          l6382 549E  
                        l6390 56C4                          l6534 45C0                          l6518 43DE  
                        l6606 3B44                          l7094 1816                          l7174 5A6E  
                        l4880 2260                          l4784 1F48                          l6296 5086  
                        l6384 5544                          l6552 5260                          l6632 3D64  
                        l4778 1F00                          l4698 1C4E                          l6730 4B82  
                        l6722 4B20                          l7178 5AAA                          l6564 5FC2  
                        l6724 4B36                          l6716 4ACA                          l6396 5762  
                        l6556 5282                          l6548 524C                          l4886 22A8  
                        l6670 3F6E                          l6742 5F10                          l6646 5D6A  
                        l6910 0D60                          l6728 4B3E                          l6568 5E32  
                        l6488 490E                          l6592 55F8                          l6576 556A  
                        l6920 0D84                          l6658 3E42                          l6738 5EFC  
                        l6586 55BA                          l6850 4C4C                          l6842 4C34  
                        l6596 5634                          l6764 47D4                          l6772 482E  
                        l6924 0DBE                          l6860 4CDA                          l6766 47DC  
                        l6784 57F0                          l6944 0E2A                          l6872 4D06  
                        l6856 4C88                          l6876 4D40                          ?_sin 00D1  
                        l6894 4DA0                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          u5105 193A                          u5210 1B0C  
                        u5130 1994                          u5060 3ABC                          u4500 278C  
                        u5215 1B00                          u5135 1988                          u4360 24B6  
                        u5305 1CE4                          u5225 1B6C                          u5145 19F4  
                        u5065 3AB0                          u4505 2780                          u5250 1BC8  
                        u5170 1A50                          u5090 18DA                          u4370 2502  
                        u4515 27EC                          u4620 29CA                          u4365 24AA  
                        u4630 2A16                          u5255 1BBC                          u5175 1A44  
                        u5095 18CE                          u4375 24F6                          u5265 1C28  
                        u5185 1AB0                          u4625 29BE                          u4385 2562  
                        u5290 1C84                          u4490 2740                          u4635 2A0A  
                        u5700 2280                          u5620 2160                          u5540 2040  
                        u5460 1F20                          u5380 1E02                          u8100 440E  
                        u4645 2A76                          u8030 5B14                          u8110 4410  
                        u5295 1C78                          u4495 2734                          u5705 2274  
                        u5625 2154                          u5545 2034                          u5465 1F14  
                        u5385 1DF6                          u4905 3888                          u4850 3770  
                        u8038 5B18                          u4855 3764                          u8320 3F66  
                        u4865 37D0                          u4890 3828                          u8170 5270  
                        u8330 3F68                          u5780 23A0                          u4980 39A0  
                        u8421 4668                          u4895 381C                          u8431 4674  
                        u5785 2394                          u4985 3994                          u8810 17E6  
                        u8490 4C44                          u8475 4826                          u8476 4828  
                        u8580 4D50                          u7960 5374                          u7965 5368  
                        u8937 5E34      __end_ofi1_CANsendMessage 320E           __size_of_CANSetMask 03AA  
                        _Pmin 0128                          abs@a 0077                          _alfa 012C  
                        _fabs 5D9A                          _data 0153                          _beta 0130  
                        _atan 4392                          _asin 3AE6                          _main 5A10  
                        cos@f 01B4                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr0l 000FE9                          fsr2h 000FDA                          fsr1l 000FE1  
                        indf2 000FDF                          fsr2l 000FD9                          _sqrt 483C  
                        pclat 000FFA                          sin@f 00D1                          sin@y 0183  
                        prodh 000FF4                          prodl 000FF3                          start 0328  
               __CFG_IESO$OFF 000000                delay_s@value_s 007F           ISR_Bassa@PORTA_temp 0053  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000              _CANOperationMode 5FB8  
                       ??_abs 0079                         ??_cos 00D5                         ??_sin 00D5  
  __size_of_CANreceiveMessage 052E                         ?_fabs 00AF                 ___fltol@sign1 00B7  
                       ?_atan 00BF                         ?_asin 0198               __end_of___fladd 4392  
                       ?_main 002C               __end_of___fldiv 520C               __end_of___flneg 5E14  
             __end_of___flmul 50D6               __end_of___flsub 5C9E               __end_of___fltol 5448  
                       ?_sqrt 00D1                         _T0CON 000FD5                         _T3CON 000FB1  
          __size_of_ISR_Bassa 0310               __end_of___lwdiv 5BD2                         i1l400 3174  
                       i1l406 34BA                         i1l360 2B7E                         i1l361 2B82  
                       i1l370 2CFE                         i1l362 2C54                         i1l371 2D08  
                       i1l363 2BF0                         i1l380 2E36                         i1l364 2BF8  
                       i1l700 00E4                         i1l381 2E3E                         i1l365 2C00  
                       i1l390 2FEE                         i1l374 2FD6                         i1l366 2C08  
                       i1l391 30C0                         i1l375 2DB4                         i1l359 2DA0  
                       i1l552 5FB2                         i1l392 305C                         i1l384 2F30  
                       i1l376 2DB8                         i1l393 3064                         i1l385 2F34  
                       i1l377 2E8A                         i1l369 2CFA                         i1l394 306C  
                       i1l386 2F3E                         i1l378 2E26                         i1l395 3074  
                       i1l379 2E2E                         i1l716 02BA                         i1l708 01BA  
                       i1l557 5FE2                         i1l389 2FEA                         i1l565 5EB0  
                       i1l398 3166                         i1l399 316A                         i1l719 02E2  
                       i1l694 008A                         i1l698 00CA                         i2l688 5972  
                       _TMR0H 000FD7                         _TMR0L 000FD6                         _TMR3H 000FB3  
                       _TMR3L 000FB2                         _PORTA 000F80                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94             _CANisRxReady$2839 002C  
          __end_ofsin@coeff_a 0D41            __end_ofsin@coeff_b 0D51                 __CFG_PWRT$OFF 000000  
            __end_of_ISR_Alta 5A10               __end_of_delay_s 5F1E                 __CFG_WRT0$OFF 000000  
                       _J_var 0120                 __CFG_WRT1$OFF 000000                         _K_var 0124  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000            CANInitialize@flags 0089  
              __CFG_EBTR2$OFF 000000                 ___awtofl@sign 0085                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         _bordo 0134                         fabs@d 00AF  
                       _first 02A9                         _floor 520C                         _frexp 5ABC  
                       _errno 0142                         atan@f 00BF                         atan@x 00C7  
                       atan@y 00C3                         asin@x 0198                         asin@y 01AC  
              __pbitbssCOMRAM 02A0          __end_of_CANisRxReady 5FE8                         sin@x2 018B  
                       tablat 000FF5          __end_of_CANisTxReady 5F98              __end_ofi1___wmul 5F72  
                       plusw2 000FDB                         sqrt@i 018F                         sqrt@q 0190  
                       sqrt@x 0194                         sqrt@y 00D1                         sqrt@z 018B  
                       status 000FD8           i1___wmul@multiplier 002C                  ?_park_search 002C  
             __initialization 5C9E                  __end_of_fabs 5DD8                  __end_of_atan 45E8  
                __end_of_asin 3E0A                  __end_of_main 5ABC                  __end_of_sqrt 4A64  
                 ?i1_can_send 002C                        ??_fabs 00B3                        ??_atan 00C3  
                      ??_asin 00D5                        ??_main 00D7             _park_routine$3670 01CC  
           _park_routine$3664 01D0             _park_routine$3665 01D4             _park_routine$3666 01C0  
           _park_routine$3667 01C4             _park_routine$3668 01D8             _park_routine$3669 01C8  
                      ??_sqrt 0183                 __activetblptr 000003                   ?i1_delay_ms 0032  
           _CANisTxReady$2837 0077                        _ADCON1 000FC1                        ?_floor 00BF  
                      ?_frexp 0077              __end_of___altofl 5D4E                        _CANCON 000F6F  
            __end_of___flpack 4F72            _distance_received1 02A7              __end_of___awtofl 5D9A  
             __CFG_BBSIZ$1024 000000                 _avvicinamento 02A3                        i1l5210 2D0E  
                      i1l5204 2CF0                        i1l6030 01F8                        i1l5410 3222  
                      i1l6026 01F0                        i1l5260 2E48                        i1l6060 02C6  
                      i1l5406 321A                        i1l6054 0296                        i1l6038 0228  
                      i1l5336 307E                        i1l5280 2F26                        i1l5184 2C12  
                      i2l1418 5BC8                        i1l5530 3702                        i1l5522 36C6  
                      i1l5514 368A                        i1l5506 361A                        i1l5362 317A  
                      i1l5532 3736                        i1l5460 3440                        i1l5452 3400  
                      i1l5444 338E                        i1l5356 315C                        i1l5526 36E4  
                      i1l5518 36A8                        i1l5470 34B4                        i1l5286 2F44  
                      i1l5464 3460                        i1l5456 3420                        i1l5468 3480  
                      i1l5900 5856                        i1l5910 589C                        i1l5920 5902  
                      i1l5916 58D0                        i1l5962 00BC                        i1l5892 5EA2  
                      i1l5990 017E                        i1l5966 00D0                        i1l5976 0114  
                      i2l7122 5B6E                        i2l7124 5B7C                        i2l7134 5BB8  
                      i2l7126 5B86                        i1l5998 01AE                        i2l7154 59D4  
            __end_of___lwtofl 5EF0                        _RXB0D0 000F66                        _RXB0D1 000F67  
                      _RXB0D2 000F68                        _RXB0D3 000F69                        _RXB0D4 000F6A  
                      _RXB1D0 000F56                        _RXB0D5 000F6B                        _RXB1D1 000F57  
                      _RXB0D6 000F6C                        _RXB1D2 000F58                        _RXB0D7 000F6D  
                      _RXB1D3 000F59                        _RXB1D4 000F5A                        _RXB1D5 000F5B  
                      _RXB1D6 000F5C                        _RXB1D7 000F5D                        _TXB0D0 000F46  
                      _TXB0D1 000F47                        _TXB0D2 000F48                        _TXB0D3 000F49  
                      _TXB1D0 000F36                        _TXB0D4 000F4A                        _TXB1D1 000F37  
                      _TXB0D5 000F4B                        _TXB1D2 000F38                        _TXB0D6 000F4C  
                      _TXB1D3 000F39                        _TXB0D7 000F4D                        _TXB2D0 000F26  
                      _TXB1D4 000F3A                        _TXB2D1 000F27                        _TXB1D5 000F3B  
                      _TXB2D2 000F28                        _TXB1D6 000F3C                        _TXB2D3 000F29  
                      _TXB1D7 000F3D                        _TXB2D4 000F2A                        _TXB2D5 000F2B  
                      _TXB2D6 000F2C                        _TXB2D7 000F2D            CANsendMessage@data 007B  
            __end_of_can_send 5670            CANsendMessage@tamp 0083             __end_of_ISR_Bassa 0328  
            __end_of_delay_ms 5E4E         __size_of_CANSetFilter 0B2A                __CFG_XINST$OFF 000000  
                      ___flge 5670               _data_correction 015B                     ??___fladd 00A7  
                      ___wmul 5E4E                     ??___fldiv 0098                     ??___flneg 00AF  
              __CFG_STVREN$ON 000000                     ??___flmul 0089                     ??___flsub 00D1  
                   ??___fltol 00B3                     ??___lwdiv 0064                  ??_CANSetMask 007C  
                      clear_0 5CA4                        clear_1 5CB0                        clear_2 5CC0  
                   ??_delay_s 007F                        floor@i 00C3                        floor@x 00BF  
             __CFG_BOREN$BOHW 000000       __size_ofi1_CANisTxReady 0020                  __pdataCOMRAM 0056  
                      sin@sgn 018F                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8               ISR_Bassa@F16865 0056  
                      sqrt@og 0187                  _CANSetFilter 18A0                    ___fladd@f1 009F  
                  ___fladd@f2 00A3                    ___flge@ff1 00B3                    ___flge@ff2 00B7  
                  ___altofl@c 00B9                    ___fldiv@f1 0090                    ___fldiv@f2 0094  
                  ___fldiv@f3 0098                    __accesstop 0060       __end_of__initialization 5CF0  
          __end_of_CANSetMask 3AE6               __CFG_PBADEN$OFF 000000                    ___flneg@f1 00AB  
               ?_park_routine 002C           __size_ofi1_can_send 00E6                    ___flmul@f1 0081  
                  ___flmul@f2 0085                  eval_poly@res 00B7                 ___rparam_used 000000  
                  ___flsub@f1 00C9                    ___flsub@f2 00CD                    ___fltol@f1 00AF  
                  ___awtofl@c 0081           __size_ofi1_delay_ms 0038                __pcstackCOMRAM 002C  
                   ?_ISR_Alta 002C                  __pidataBANK0 5FEA                 __end_of_floor 532E  
               __end_of_frexp 5B50              ??_configurations 0091                    ___lwtofl@c 0081  
                   ?i1___wmul 002C         CANSetFilter@numBuffer 0080         __size_of_CANisRxReady 0018  
       __size_of_CANisTxReady 0026                       ??_floor 00C3                       ??_frexp 007D  
    __end_of_CANOperationMode 5FD0                    __pbssBANK0 00D7                    __pbssBANK1 0100  
             _sensor_distance 0001            __size_of_eval_poly 011A             ?i1_CANsendMessage 002C  
                  _data_brake 0024                ??_park_routine 01BC       __size_of_CANsendMessage 07A0  
                  _data_speed 0163                    _activation 02A1            ??i1_CANsendMessage 0034  
          __size_of_parallelo 0254          __size_of_park_search 01C0             _old_alignment_gap 0011  
                  ??_ISR_Alta 0067                       ?___flge 00B3                       ?___wmul 0077  
          park_routine@raggio 01E0                     ?___altofl 00B9              _counter_distance 00E7  
                   ?___flpack 0077                  _CANisRxReady 5FD0                       _CANSTAT 000F6E  
                   ?___awtofl 0081                  _CANisTxReady 5F72                       _BRGCON1 000F70  
                     _BRGCON2 000F71                       _BRGCON3 000F72                    ??i1___wmul 0030  
                   ?___lwtofl 0081                     ?_can_send 002C        __size_of_CANInitialize 01CE  
                   ?_delay_ms 007D                       _RXB0DLC 000F65                       _RXB1DLC 000F55  
                     _RXB0CON 000F60                       _RXB1CON 000F50                       _TXB0DLC 000F45  
                     _TXB1DLC 000F35                       _TXB2DLC 000F25           CANsendMessage@flags 007E  
                     __Hparam 0000                       __Lparam 0000              delay_ms@value_ms 007D  
             __size_of___flge 00F8                       ___fladd 4126                       ___fldiv 50D6  
                     ___flneg 5DD8                       ___flmul 4F72                       ___flsub 5C3E  
                     ___fltol 532E               __size_of___wmul 0038                       ___lwdiv 5B50  
                __psmallconst 0D00                    ??___altofl 00BD                    ??___flpack 007D  
        CANInitialize@propSeg 008E                       __pcinit 5C9E                    ??___awtofl 0085  
           __end_of_eval_poly 5562                       _delay_s 5EF0                       __ramtop 0D00  
                ??i1_can_send 003C                       __ptext0 5A10                       __ptext1 4C32  
                     __ptext2 0D52                       __ptext3 45E8                       __ptext4 5562  
                     __ptext5 23CA                       __ptext6 5F72                       __ptext7 3AE6  
                     __ptext8 483C                       __ptext9 4392                    ??___lwtofl 0085  
                   _T0CONbits 000FD5                  ??i1_delay_ms 0034                i1_CANisTxReady 5F98  
                     _counter 0022                    ??_can_send 0087                  __size_of_abs 002C  
                __size_of_cos 00E6               atan@val_squared 00CC                  __size_of_sin 031C  
                     atan@val 00D0             __end_of_parallelo 483C                    ??_delay_ms 007F  
                     asin@sgn 019C        CANreceiveMessage@error 0036               _start_operation 02AE  
              __pintcode_body 5934          end_of_initialization 5CF0                       int_func 5934  
          __end_ofi1_can_send 5934                 _CANInitialize 4A64            __end_ofi1_delay_ms 5EBE  
                   _ISR_Bassa 0018                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE         i1___wmul@multiplicand 002E        __end_ofi1_CANisTxReady 5FB8  
     _steering_correction_dir 02AF                     _PORTBbits 000F81                CANSetMask@mask 0077  
              CANSetMask@tamp 0081                  _distance_set 0110                CANSetMask@type 007B  
        __end_of_park_routine 18A0                     _TRISBbits 000F93                   ___fldiv@exp 009D  
                   _MUX_index 001F                    _pulse_time 001B       _clock_counter_reference 00E3  
                 ___flmul@exp 0089                _CANsendMessage 23CA              CANInitialize@BRP 0088  
            CANInitialize@SJW 0087                ?_CANInitialize 0085           i1_CANisTxReady$2837 002C  
                  ?_ISR_Bassa 002C                __end_of___flge 5768             __size_of_ISR_Alta 5A08  
              __end_of___wmul 5E86                 __pidataCOMRAM 5FE8               ?i1_CANisTxReady 002C  
                  floor@expon 00C7           start_initialization 5C9E             __size_ofi1___wmul 0028  
                  eval_poly@d 00AF                    eval_poly@n 00B1                    eval_poly@x 00AB  
                 __end_of_abs 5F4A                   __end_of_cos 584E                   __end_of_sin 4126  
         CANSetMask@numBuffer 0080                 _data_speed_rx 0108        __end_of_CANsendMessage 2B6A  
           ?_CANOperationMode 002C                 _data_steering 016B            i1delay_ms@value_ms 0032  
                  frexp@value 0077            ??_CANOperationMode 0077             _distance_received 02A6  
  CANInitialize@FilterConfig1 008F    CANInitialize@FilterConfig2 0090           _steering_correction 0023  
                    ??___flge 00BB  ISR_Bassa@MUX_index_collision 0051                      ??___wmul 007B  
                 __pdataBANK0 00E8              __CFG_LPT1OSC$OFF 000000     __size_ofi1_CANsendMessage 06A4  
           __size_of___altofl 0058             __size_of___flpack 0180        CANInitialize@phaseSeg1 0085  
      CANInitialize@phaseSeg2 0086             __size_of___awtofl 004C                   __pbssCOMRAM 0001  
           __size_of___lwtofl 0032                 __pcstackBANK0 0060                 __pcstackBANK1 0183  
                 _BRGCON2bits 000F71                   _BRGCON3bits 000F72             __size_of_can_send 010E  
           __size_of_delay_ms 003A               ?_CANsendMessage 0077               ??_CANInitialize 008A  
                   _asin$3680 01A8                     _asin$3681 01A4                     _asin$3678 01A0  
                   _asin$3679 01B0                    sin@coeff_a 0D2D                    sin@coeff_b 0D41  
               ??_park_search 01B4                 _alignment_gap 00D7            CANSetFilter@filter 0077  
                   _data_test 0173              ___lwdiv@dividend 0060                   ??_ISR_Bassa 003C  
                   __pintcode 0008                      ?___fladd 009F                      ?___fldiv 0090  
                    ?___flneg 00AB                      ?___flmul 0081                      ?___flsub 00C9  
                    ?___fltol 00AF         __size_of_park_routine 0B4E                      ?___lwdiv 0060  
                 __pintcodelo 0018                      ?_delay_s 002C                   __smallconst 0D00  
                 _COMSTATbits 000F74                     _eval_poly 5448              ___lwdiv@quotient 0065  
              __size_of_floor 0122                __size_of_frexp 0094       __size_of_configurations 006C  
                   _parallelo 45E8                  _new_distance 02AA         park_routine@larghezza 01DC  
       CANreceiveMessage@tamp 0037                _prima_sterzata 013C                ___wmul@product 007B  
                    _LATBbits 000F8A                     atan@recip 00CB                  _park_routine 0D52  
_delay_quartz_frequency_value 00E8                      _IPR3bits 000FA5                      _PIE3bits 000FA3  
                    i1u630_20 2E66                      i1u630_25 2E5C                      i1u631_20 2EAC  
                    i1u631_25 2EA2                      i1u632_25 2EF8                      i1u617_20 2C30  
                    i1u617_25 2C26                      i1u618_20 2C76                      i1u618_25 2C6C  
                    i1u643_20 309C                      i1u643_25 3092                      i1u619_25 2CC2  
                    i1u644_20 30E2                      i1u740_20 0198                      i1u644_25 30D8  
                    i1u645_25 312E                      i1u654_20 32CE                      i1u654_26 32D0  
                    i1u655_20 32FC                      i1u663_25 348C                      i1u655_26 32FE  
                    i1u665_20 3562                      i1u657_25 3312                      i1u665_26 3564  
                    i1u666_20 358C                      i1u674_25 370E                      i1u666_26 358E  
                    i1u739_20 0196                      i1u668_25 35A0                      _PIR3bits 000FA4  
                    i1u894_27 01DC                      i1u895_27 5EA4                      _RXB0EIDH 000F63  
                    _RXB0EIDL 000F64                      _RXB1EIDH 000F53                      _RXB1EIDL 000F54  
                    _ISR_Alta 0008                     _set_speed 00E5                      _RCONbits 000FD0  
            __CFG_WDTPS$32768 000000                      _RXB0SIDH 000F61                      _RXB0SIDL 000F62  
                    _RXF0EIDH 000F02                      _RXB1SIDH 000F51                      _RXF0EIDL 000F03  
                    _RXB1SIDL 000F52                      _RXF1EIDH 000F06                      _RXF1EIDL 000F07  
                    _RXF2EIDH 000F0A                      _RXF2EIDL 000F0B                      _RXF3EIDH 000F0E  
                    _RXF3EIDL 000F0F                      _RXF4EIDH 000F12                      _RXF4EIDL 000F13  
                    _RXF5EIDH 000F16                      _RXF5EIDL 000F17                      _RXF0SIDH 000F00  
                    _RXF0SIDL 000F01           __end_of_park_search 4DF2                      _TXB0EIDH 000F43  
                    _RXF1SIDH 000F04                      _TXB0EIDL 000F44                      _RXF1SIDL 000F05  
                    _TXB1EIDH 000F33                      _RXF2SIDH 000F08                      _TXB1EIDL 000F34  
                    _RXF2SIDL 000F09                      _TXB2EIDH 000F23                      _RXF3SIDH 000F0C  
                    _TXB2EIDL 000F24                      _RXF3SIDL 000F0D                      _RXF4SIDH 000F10  
                    _RXF4SIDL 000F11                      _RXF5SIDH 000F14                      _RXF5SIDL 000F15  
                    _RXM0EIDH 000F1A                      _RXM0EIDL 000F1B                      _TXB0SIDH 000F41  
                    _RXM1EIDH 000F1E                      _TXB0SIDL 000F42                      _RXM1EIDL 000F1F  
                    _TXB1SIDH 000F31                      _TXB1SIDL 000F32                      _TXB2SIDH 000F21  
                    _TXB2SIDL 000F22                      _RXM0SIDH 000F18                      _RXM0SIDL 000F19  
                    _RXM1SIDH 000F1C                      _RXM1SIDL 000F1D                   _distance_dx 0017  
                 _distance_sx 0019                      _RXERRCNT 000F75                      _TXERRCNT 000F76  
           ___wmul@multiplier 0077                      i1___wmul 5F4A                    ?_eval_poly 00AB  
         __end_ofatan@coeff_a 0D19           __end_ofatan@coeff_b 0D2D                 ?_CANSetFilter 0077  
                 _INTCON2bits 000FF1                    _CANCONbits 000F6F                    ?_parallelo 002C  
            _distance_average 0015                     frexp@eptr 007B                      __Hparam0 0000  
                    __Lparam0 0000                  _RXB0SIDLbits 000F62                  _RXB1SIDLbits 000F52  
            ??i1_CANisTxReady 002C                 _request_sent1 02AD              __size_of___fladd 026C  
                  _CANSetMask 373C              __size_of___fldiv 0136              __size_of___flneg 003C  
            __size_of___flmul 0164              __size_of___flsub 0060              __size_of___fltol 011A  
                    ___altofl 5CF6              i1_CANsendMessage 2B6A                      _cos$3682 01B8  
                    ___flpack 4DF2              __size_of___lwdiv 0082                      ___awtofl 5D4E  
            __size_of_delay_s 002E                      ___lwtofl 5EBE                      _can_send 5562  
                _RXF0SIDLbits 000F01                      _delay_ms 5E14               ___lwdiv@divisor 0062  
                _RXF1SIDLbits 000F05               ___lwdiv@counter 0064         i1CANsendMessage@flags 0033  
              ??_CANSetFilter 007C                      __ptext10 5D9A                      __ptext11 5F1E  
                    __ptext20 532E                      __ptext12 5D4E                      __ptext21 5670  
                    __ptext13 5EF0                      __ptext30 4DF2                      __ptext22 5CF6  
                    __ptext14 5E14                      __ptext31 5BD2                      __ptext23 5448  
                    __ptext15 5E4E                      __ptext40 2B6A                      __ptext32 4A64  
                    __ptext24 4F72                      __ptext16 5768                      __ptext41 5F98  
                    __ptext33 373C                      __ptext25 5C3E                      __ptext17 3E0A  
                    __ptext42 320E                      __ptext34 18A0                      __ptext26 4126  
                    __ptext18 520C                      __ptext43 5FD0                      __ptext35 5FB8  
                    __ptext27 5DD8                      __ptext19 5ABC                      __ptext28 50D6  
                    __ptext45 5B50                      __ptext37 5E86                      __ptext29 5EBE  
                    __ptext38 5F4A                      __ptext39 584E                  _RXF2SIDLbits 000F09  
                    _sin$3683 0187                  _RXF3SIDLbits 000F0D                      _distance 0140  
                _RXF4SIDLbits 000F11                  _RXF5SIDLbits 000F15      CANsendMessage@dataLength 007D  
               __size_of_fabs 003E                 __size_of_atan 0256                 __size_of_asin 0324  
               __size_of_main 00AC                 __size_of_sqrt 0228                   _park_search 4C32  
        CANreceiveMessage@msg 002C                  _TXB0SIDLbits 000F42                  _TXB1SIDLbits 000F32  
                _TXB2SIDLbits 000F22     __size_of_CANOperationMode 0018                 ?_CANisRxReady 002C  
               ?_CANisTxReady 002C                   atan@coeff_a 0D01                   atan@coeff_b 0D19  
                 _RXB0DLCbits 000F65         ___flmul@f3_as_product 008A                   _RXB1DLCbits 000F55  
                _RXM0SIDLbits 000F19                   _RXB0CONbits 000F60                   _RXB1CONbits 000F50  
           _CANreceiveMessage 320E                  _RXM1SIDLbits 000F1D                    _INTCONbits 000FF2  
                 ??_eval_poly 00B3              ??_CANsendMessage 007F    i1CANsendMessage@dataLength 0032  
          ?_CANreceiveMessage 002C                  _request_sent 02AC                _configurations 5BD2  
    CANsendMessage@identifier 0077                   ??_parallelo 00D5                      intlevel1 0000  
                    intlevel2 0000              CANSetFilter@tamp 0081              CANSetFilter@type 007B  
         ??_CANreceiveMessage 002E          i1CANsendMessage@data 0030          i1CANsendMessage@tamp 0038  
                 _TXB0DLCbits 000F45                   _TXB1DLCbits 000F35                   _TXB0CONbits 000F40  
                 _TXB2DLCbits 000F25                   _TXB1CONbits 000F30                   _TXB2CONbits 000F20  
        CANOperationMode@mode 0077                ??_CANisRxReady 002C                   ?_CANSetMask 0077  
              ??_CANisTxReady 0077                _distance_error 02A5     __end_of_CANreceiveMessage 373C  
  i1CANsendMessage@identifier 002C                   _timerValue2 001D                    _TMR3H_temp 0020  
      __end_of_configurations 5C3E                    _TMR3L_temp 0021                 _distance_wait 02A8  
          _old_dir_correction 02AB                  ___fladd@exp1 00AA                  ___fladd@exp2 00A9  
                ___fladd@sign 00A8         __end_of_CANInitialize 4C32         _sensor_distance_short 017B  
         _sensor_distance_old 0118  
