

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Jun 03 17:19:14 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2685
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	param0,global,class=BANK0,space=1,delta=1
    68  0000                     
    69                           	psect	idataCOMRAM
    70  005E10                     __pidataCOMRAM:
    71                           	opt stack 0
    72                           
    73                           ;initializer for ISR_Bassa@F16872
    74  005E10  03                 	db	3
    75  005E11  06                 	db	6
    76                           
    77                           ;initializer for _spazio_parcheggio
    78  005E12  0064               	dw	100
    79                           
    80                           	psect	idataBANK0
    81  005E14                     __pidataBANK0:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _delay_quartz_frequency_value
    85  005E14  10                 	db	16
    86                           
    87                           	psect	idataBANK1
    88  005E08                     __pidataBANK1:
    89                           	opt stack 0
    90                           
    91                           ;initializer for _larghezza
    92  005E08  0000               	dw	0
    93  005E0A  4200               	dw	16896
    94                           
    95                           ;initializer for _raggio
    96  005E0C  0000               	dw	0
    97  005E0E  425C               	dw	16988
    98                           
    99                           	psect	smallconst
   100  000D00                     __psmallconst:
   101                           	opt stack 0
   102  000D00  00                 	db	0
   103  000D01                     atan@coeff_a:
   104                           	opt stack 0
   105  000D01  3C06               	dw	15366
   106  000D03  4204               	dw	16900
   107  000D05  9F7D               	dw	40829
   108  000D07  426A               	dw	17002
   109  000D09  905C               	dw	36956
   110  000D0B  4201               	dw	16897
   111  000D0D  4D60               	dw	19808
   112  000D0F  40BB               	dw	16571
   113  000D11  EC51               	dw	60497
   114  000D13  3E47               	dw	15943
   115  000D15  8DDE               	dw	36318
   116  000D17  BB1F               	dw	47903
   117  000D19                     __end_ofatan@coeff_a:
   118                           	opt stack 0
   119  000D19                     atan@coeff_b:
   120                           	opt stack 0
   121  000D19  3C06               	dw	15366
   122  000D1B  4204               	dw	16900
   123  000D1D  59C0               	dw	22976
   124  000D1F  428B               	dw	17035
   125  000D21  0474               	dw	1140
   126  000D23  4244               	dw	16964
   127  000D25  9BF9               	dw	39929
   128  000D27  414F               	dw	16719
   129  000D29  0000               	dw	0
   130  000D2B  3F80               	dw	16256
   131  000D2D                     __end_ofatan@coeff_b:
   132                           	opt stack 0
   133  000D2D                     sin@coeff_a:
   134                           	opt stack 0
   135  000D2D  F3EC               	dw	62444
   136  000D2F  484A               	dw	18506
   137  000D31  9535               	dw	38197
   138  000D33  C795               	dw	51093
   139  000D35  C117               	dw	49431
   140  000D37  45DC               	dw	17884
   141  000D39  DBFD               	dw	56317
   142  000D3B  C36D               	dw	50029
   143  000D3D  B372               	dw	45938
   144  000D3F  4033               	dw	16435
   145  000D41                     __end_ofsin@coeff_a:
   146                           	opt stack 0
   147  000D41                     sin@coeff_b:
   148                           	opt stack 0
   149  000D41  342B               	dw	13355
   150  000D43  4801               	dw	18433
   151  000D45  9D7F               	dw	40319
   152  000D47  45B0               	dw	17840
   153  000D49  FFE7               	dw	65511
   154  000D4B  42D9               	dw	17113
   155  000D4D  0000               	dw	0
   156  000D4F  3F80               	dw	16256
   157  000D51                     __end_ofsin@coeff_b:
   158                           	opt stack 0
   159  0000                     _RXB1CON	set	3920
   160  0000                     _RXB1CONbits	set	3920
   161  0000                     _RXB1D0	set	3926
   162  0000                     _RXB1D1	set	3927
   163  0000                     _RXB1D2	set	3928
   164  0000                     _RXB1D3	set	3929
   165  0000                     _RXB1D4	set	3930
   166  0000                     _RXB1D5	set	3931
   167  0000                     _RXB1D6	set	3932
   168  0000                     _RXB1D7	set	3933
   169  0000                     _RXB1DLC	set	3925
   170  0000                     _RXB1DLCbits	set	3925
   171  0000                     _RXB1EIDH	set	3923
   172  0000                     _RXB1EIDL	set	3924
   173  0000                     _RXB1SIDH	set	3921
   174  0000                     _RXB1SIDL	set	3922
   175  0000                     _RXB1SIDLbits	set	3922
   176  0000                     _RXF0EIDH	set	3842
   177  0000                     _RXF0EIDL	set	3843
   178  0000                     _RXF0SIDH	set	3840
   179  0000                     _RXF0SIDL	set	3841
   180  0000                     _RXF0SIDLbits	set	3841
   181  0000                     _RXF1EIDH	set	3846
   182  0000                     _RXF1EIDL	set	3847
   183  0000                     _RXF1SIDH	set	3844
   184  0000                     _RXF1SIDL	set	3845
   185  0000                     _RXF1SIDLbits	set	3845
   186  0000                     _RXF2EIDH	set	3850
   187  0000                     _RXF2EIDL	set	3851
   188  0000                     _RXF2SIDH	set	3848
   189  0000                     _RXF2SIDL	set	3849
   190  0000                     _RXF2SIDLbits	set	3849
   191  0000                     _RXF3EIDH	set	3854
   192  0000                     _RXF3EIDL	set	3855
   193  0000                     _RXF3SIDH	set	3852
   194  0000                     _RXF3SIDL	set	3853
   195  0000                     _RXF3SIDLbits	set	3853
   196  0000                     _RXF4EIDH	set	3858
   197  0000                     _RXF4EIDL	set	3859
   198  0000                     _RXF4SIDH	set	3856
   199  0000                     _RXF4SIDL	set	3857
   200  0000                     _RXF4SIDLbits	set	3857
   201  0000                     _RXF5EIDH	set	3862
   202  0000                     _RXF5EIDL	set	3863
   203  0000                     _RXF5SIDH	set	3860
   204  0000                     _RXF5SIDL	set	3861
   205  0000                     _RXF5SIDLbits	set	3861
   206  0000                     _RXM0EIDH	set	3866
   207  0000                     _RXM0EIDL	set	3867
   208  0000                     _RXM0SIDH	set	3864
   209  0000                     _RXM0SIDL	set	3865
   210  0000                     _RXM0SIDLbits	set	3865
   211  0000                     _RXM1EIDH	set	3870
   212  0000                     _RXM1EIDL	set	3871
   213  0000                     _RXM1SIDH	set	3868
   214  0000                     _RXM1SIDL	set	3869
   215  0000                     _RXM1SIDLbits	set	3869
   216  0000                     _TXB0CONbits	set	3904
   217  0000                     _TXB0D0	set	3910
   218  0000                     _TXB0D1	set	3911
   219  0000                     _TXB0D2	set	3912
   220  0000                     _TXB0D3	set	3913
   221  0000                     _TXB0D4	set	3914
   222  0000                     _TXB0D5	set	3915
   223  0000                     _TXB0D6	set	3916
   224  0000                     _TXB0D7	set	3917
   225  0000                     _TXB0DLC	set	3909
   226  0000                     _TXB0DLCbits	set	3909
   227  0000                     _TXB0EIDH	set	3907
   228  0000                     _TXB0EIDL	set	3908
   229  0000                     _TXB0SIDH	set	3905
   230  0000                     _TXB0SIDL	set	3906
   231  0000                     _TXB0SIDLbits	set	3906
   232  0000                     _TXB1CONbits	set	3888
   233  0000                     _TXB1D0	set	3894
   234  0000                     _TXB1D1	set	3895
   235  0000                     _TXB1D2	set	3896
   236  0000                     _TXB1D3	set	3897
   237  0000                     _TXB1D4	set	3898
   238  0000                     _TXB1D5	set	3899
   239  0000                     _TXB1D6	set	3900
   240  0000                     _TXB1D7	set	3901
   241  0000                     _TXB1DLC	set	3893
   242  0000                     _TXB1DLCbits	set	3893
   243  0000                     _TXB1EIDH	set	3891
   244  0000                     _TXB1EIDL	set	3892
   245  0000                     _TXB1SIDH	set	3889
   246  0000                     _TXB1SIDL	set	3890
   247  0000                     _TXB1SIDLbits	set	3890
   248  0000                     _TXB2CONbits	set	3872
   249  0000                     _TXB2D0	set	3878
   250  0000                     _TXB2D1	set	3879
   251  0000                     _TXB2D2	set	3880
   252  0000                     _TXB2D3	set	3881
   253  0000                     _TXB2D4	set	3882
   254  0000                     _TXB2D5	set	3883
   255  0000                     _TXB2D6	set	3884
   256  0000                     _TXB2D7	set	3885
   257  0000                     _TXB2DLC	set	3877
   258  0000                     _TXB2DLCbits	set	3877
   259  0000                     _TXB2EIDH	set	3875
   260  0000                     _TXB2EIDL	set	3876
   261  0000                     _TXB2SIDH	set	3873
   262  0000                     _TXB2SIDL	set	3874
   263  0000                     _TXB2SIDLbits	set	3874
   264  0000                     _ADCON1	set	4033
   265  0000                     _BRGCON1	set	3952
   266  0000                     _BRGCON2	set	3953
   267  0000                     _BRGCON2bits	set	3953
   268  0000                     _BRGCON3	set	3954
   269  0000                     _BRGCON3bits	set	3954
   270  0000                     _CANCON	set	3951
   271  0000                     _CANCONbits	set	3951
   272  0000                     _CANSTAT	set	3950
   273  0000                     _COMSTATbits	set	3956
   274  0000                     _INTCON2bits	set	4081
   275  0000                     _INTCONbits	set	4082
   276  0000                     _IPR3bits	set	4005
   277  0000                     _LATA	set	3977
   278  0000                     _LATB	set	3978
   279  0000                     _LATBbits	set	3978
   280  0000                     _LATC	set	3979
   281  0000                     _PIE3bits	set	4003
   282  0000                     _PIR3bits	set	4004
   283  0000                     _PORTA	set	3968
   284  0000                     _PORTBbits	set	3969
   285  0000                     _RCONbits	set	4048
   286  0000                     _RXB0CON	set	3936
   287  0000                     _RXB0CONbits	set	3936
   288  0000                     _RXB0D0	set	3942
   289  0000                     _RXB0D1	set	3943
   290  0000                     _RXB0D2	set	3944
   291  0000                     _RXB0D3	set	3945
   292  0000                     _RXB0D4	set	3946
   293  0000                     _RXB0D5	set	3947
   294  0000                     _RXB0D6	set	3948
   295  0000                     _RXB0D7	set	3949
   296  0000                     _RXB0DLC	set	3941
   297  0000                     _RXB0DLCbits	set	3941
   298  0000                     _RXB0EIDH	set	3939
   299  0000                     _RXB0EIDL	set	3940
   300  0000                     _RXB0SIDH	set	3937
   301  0000                     _RXB0SIDL	set	3938
   302  0000                     _RXB0SIDLbits	set	3938
   303  0000                     _RXERRCNT	set	3957
   304  0000                     _T0CON	set	4053
   305  0000                     _T0CONbits	set	4053
   306  0000                     _T3CON	set	4017
   307  0000                     _TMR0H	set	4055
   308  0000                     _TMR0L	set	4054
   309  0000                     _TMR3H	set	4019
   310  0000                     _TMR3L	set	4018
   311  0000                     _TRISA	set	3986
   312  0000                     _TRISB	set	3987
   313  0000                     _TRISBbits	set	3987
   314  0000                     _TRISC	set	3988
   315  0000                     _TXERRCNT	set	3958
   316                           
   317                           ; #config settings
   318  000D51  00                 	db	0	; dummy byte at the end
   319  0000                     
   320                           	psect	cinit
   321  0059AE                     __pcinit:
   322                           	opt stack 0
   323  0059AE                     start_initialization:
   324                           	opt stack 0
   325  0059AE                     __initialization:
   326                           	opt stack 0
   327                           
   328                           ; Clear objects allocated to BANK1 (139 bytes)
   329  0059AE  EE01  F000         	lfsr	0,__pbssBANK1
   330  0059B2  0E8B               	movlw	139
   331  0059B4                     clear_0:
   332  0059B4  6AEE               	clrf	postinc0,c
   333  0059B6  06E8               	decf	wreg,f,c
   334  0059B8  E1FD               	bnz	clear_0
   335                           
   336                           ; Clear objects allocated to BANK0 (16 bytes)
   337  0059BA  EE00  F0D7         	lfsr	0,__pbssBANK0
   338  0059BE  0E10               	movlw	16
   339  0059C0                     clear_1:
   340  0059C0  6AEE               	clrf	postinc0,c
   341  0059C2  06E8               	decf	wreg,f,c
   342  0059C4  E1FD               	bnz	clear_1
   343                           
   344                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   345  0059C6  6A54               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   346  0059C8  6A53               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   347                           
   348                           ; Clear objects allocated to COMRAM (41 bytes)
   349  0059CA  EE00  F001         	lfsr	0,__pbssCOMRAM
   350  0059CE  0E29               	movlw	41
   351  0059D0                     clear_2:
   352  0059D0  6AEE               	clrf	postinc0,c
   353  0059D2  06E8               	decf	wreg,f,c
   354  0059D4  E1FD               	bnz	clear_2
   355                           
   356                           ; Initialize objects allocated to BANK1 (8 bytes)
   357                           ; load TBLPTR registers with __pidataBANK1
   358  0059D6  0E08               	movlw	low __pidataBANK1
   359  0059D8  6EF6               	movwf	tblptrl,c
   360  0059DA  0E5E               	movlw	high __pidataBANK1
   361  0059DC  6EF7               	movwf	tblptrh,c
   362  0059DE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   363  0059E0  6EF8               	movwf	tblptru,c
   364  0059E2  EE01  F0EC         	lfsr	0,__pdataBANK1
   365  0059E6  EE10 F008          	lfsr	1,8
   366  0059EA                     copy_data0:
   367  0059EA  0009               	tblrd		*+
   368  0059EC  CFF5 FFEE          	movff	tablat,postinc0
   369  0059F0  50E5               	movf	postdec1,w,c
   370  0059F2  50E1               	movf	fsr1l,w,c
   371  0059F4  E1FA               	bnz	copy_data0
   372                           
   373                           ; Initialize objects allocated to BANK0 (1 bytes)
   374                           ; load TBLPTR registers with __pidataBANK0
   375  0059F6  0E14               	movlw	low __pidataBANK0
   376  0059F8  6EF6               	movwf	tblptrl,c
   377  0059FA  0E5E               	movlw	high __pidataBANK0
   378  0059FC  6EF7               	movwf	tblptrh,c
   379  0059FE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   380  005A00  6EF8               	movwf	tblptru,c
   381  005A02  0009               	tblrd		*+	;fetch initializer
   382  005A04  CFF5 F0E7          	movff	tablat,__pdataBANK0
   383                           
   384                           ; Initialize objects allocated to COMRAM (4 bytes)
   385                           ; load TBLPTR registers with __pidataCOMRAM
   386  005A08  0E10               	movlw	low __pidataCOMRAM
   387  005A0A  6EF6               	movwf	tblptrl,c
   388  005A0C  0E5E               	movlw	high __pidataCOMRAM
   389  005A0E  6EF7               	movwf	tblptrh,c
   390  005A10  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   391  005A12  6EF8               	movwf	tblptru,c
   392  005A14  EE00  F055         	lfsr	0,__pdataCOMRAM
   393  005A18  EE10 F004          	lfsr	1,4
   394  005A1C                     copy_data1:
   395  005A1C  0009               	tblrd		*+
   396  005A1E  CFF5 FFEE          	movff	tablat,postinc0
   397  005A22  50E5               	movf	postdec1,w,c
   398  005A24  50E1               	movf	fsr1l,w,c
   399  005A26  E1FA               	bnz	copy_data1
   400  005A28                     end_of_initialization:
   401                           	opt stack 0
   402  005A28                     __end_of__initialization:
   403                           	opt stack 0
   404  005A28  0100               	movlb	0
   405  005A2A  EFFC  F02B         	goto	_main	;jump to C main() function
   406                           tblptru	equ	0xFF8
   407                           tblptrh	equ	0xFF7
   408                           tblptrl	equ	0xFF6
   409                           tablat	equ	0xFF5
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           postdec1	equ	0xFE5
   413                           fsr1l	equ	0xFE1
   414                           
   415                           	psect	bitbssCOMRAM
   416  000298                     __pbitbssCOMRAM:
   417                           	opt stack 0
   418  000298                     _MUX_toggle:
   419                           	opt stack 0
   420  000298                     	ds	1
   421  000299                     _activation:
   422                           	opt stack 0
   423  000299                     	ds	1
   424  00029A                     _asd:
   425                           	opt stack 0
   426  00029A                     	ds	1
   427  00029B                     _avvicinamento:
   428                           	opt stack 0
   429  00029B                     	ds	1
   430  00029C                     _dir:
   431                           	opt stack 0
   432  00029C                     	ds	1
   433  00029D                     _distance_error:
   434                           	opt stack 0
   435  00029D                     	ds	1
   436  00029E                     _distance_received:
   437                           	opt stack 0
   438  00029E                     	ds	1
   439  00029F                     _distance_received1:
   440                           	opt stack 0
   441  00029F                     	ds	1
   442  0002A0                     _distance_wait:
   443                           	opt stack 0
   444  0002A0                     	ds	1
   445  0002A1                     _first:
   446                           	opt stack 0
   447  0002A1                     	ds	1
   448  0002A2                     _new_distance:
   449                           	opt stack 0
   450  0002A2                     	ds	1
   451  0002A3                     _old_dir_correction:
   452                           	opt stack 0
   453  0002A3                     	ds	1
   454  0002A4                     _request_sent:
   455                           	opt stack 0
   456  0002A4                     	ds	1
   457  0002A5                     _request_sent1:
   458                           	opt stack 0
   459  0002A5                     	ds	1
   460  0002A6                     _start_operation:
   461                           	opt stack 0
   462  0002A6                     	ds	1
   463  0002A7                     _steering_correction_dir:
   464                           	opt stack 0
   465  0002A7                     	ds	1
   466                           tblptru	equ	0xFF8
   467                           tblptrh	equ	0xFF7
   468                           tblptrl	equ	0xFF6
   469                           tablat	equ	0xFF5
   470                           postinc0	equ	0xFEE
   471                           wreg	equ	0xFE8
   472                           postdec1	equ	0xFE5
   473                           fsr1l	equ	0xFE1
   474                           
   475                           	psect	bssCOMRAM
   476  000001                     __pbssCOMRAM:
   477                           	opt stack 0
   478  000001                     _sensor_distance:
   479                           	opt stack 0
   480  000001                     	ds	16
   481  000011                     _MUX_select:
   482                           	opt stack 0
   483  000011                     	ds	8
   484  000019                     _distance_dx:
   485                           	opt stack 0
   486  000019                     	ds	2
   487  00001B                     _distance_sx:
   488                           	opt stack 0
   489  00001B                     	ds	2
   490  00001D                     _left_speed:
   491                           	opt stack 0
   492  00001D                     	ds	2
   493  00001F                     _pulse_time:
   494                           	opt stack 0
   495  00001F                     	ds	2
   496  000021                     _right_speed:
   497                           	opt stack 0
   498  000021                     	ds	2
   499  000023                     _timerValue2:
   500                           	opt stack 0
   501  000023                     	ds	2
   502  000025                     _MUX_index:
   503                           	opt stack 0
   504  000025                     	ds	1
   505  000026                     _TMR3H_temp:
   506                           	opt stack 0
   507  000026                     	ds	1
   508  000027                     _TMR3L_temp:
   509                           	opt stack 0
   510  000027                     	ds	1
   511  000028                     _counter:
   512                           	opt stack 0
   513  000028                     	ds	1
   514  000029                     _steering_correction:
   515                           	opt stack 0
   516  000029                     	ds	1
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526                           	psect	dataCOMRAM
   527  000055                     __pdataCOMRAM:
   528                           	opt stack 0
   529  000055                     ISR_Bassa@F16872:
   530                           	opt stack 0
   531  000055                     	ds	2
   532  000057                     _spazio_parcheggio:
   533                           	opt stack 0
   534  000057                     	ds	2
   535                           tblptru	equ	0xFF8
   536                           tblptrh	equ	0xFF7
   537                           tblptrl	equ	0xFF6
   538                           tablat	equ	0xFF5
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           postdec1	equ	0xFE5
   542                           fsr1l	equ	0xFE1
   543                           
   544                           	psect	bssBANK0
   545  0000D7                     __pbssBANK0:
   546                           	opt stack 0
   547  0000D7                     _alignment_gap:
   548                           	opt stack 0
   549  0000D7                     	ds	4
   550  0000DB                     _z:
   551                           	opt stack 0
   552  0000DB                     	ds	4
   553  0000DF                     _actual_speed:
   554                           	opt stack 0
   555  0000DF                     	ds	2
   556  0000E1                     _clock_counter_reference:
   557                           	opt stack 0
   558  0000E1                     	ds	2
   559  0000E3                     _distance_average:
   560                           	opt stack 0
   561  0000E3                     	ds	2
   562  0000E5                     _set_speed:
   563                           	opt stack 0
   564  0000E5                     	ds	2
   565                           tblptru	equ	0xFF8
   566                           tblptrh	equ	0xFF7
   567                           tblptrl	equ	0xFF6
   568                           tablat	equ	0xFF5
   569                           postinc0	equ	0xFEE
   570                           wreg	equ	0xFE8
   571                           postdec1	equ	0xFE5
   572                           fsr1l	equ	0xFE1
   573                           
   574                           	psect	dataBANK0
   575  0000E7                     __pdataBANK0:
   576                           	opt stack 0
   577  0000E7                     _delay_quartz_frequency_value:
   578                           	opt stack 0
   579  0000E7                     	ds	1
   580                           tblptru	equ	0xFF8
   581                           tblptrh	equ	0xFF7
   582                           tblptrl	equ	0xFF6
   583                           tablat	equ	0xFF5
   584                           postinc0	equ	0xFEE
   585                           wreg	equ	0xFE8
   586                           postdec1	equ	0xFE5
   587                           fsr1l	equ	0xFE1
   588                           
   589                           	psect	bssBANK1
   590  000100                     __pbssBANK1:
   591                           	opt stack 0
   592  000100                     _data_speed_rx:
   593                           	opt stack 0
   594  000100                     	ds	8
   595  000108                     _distance_set:
   596                           	opt stack 0
   597  000108                     	ds	8
   598  000110                     _sensor_distance_old:
   599                           	opt stack 0
   600  000110                     	ds	8
   601  000118                     _J_var:
   602                           	opt stack 0
   603  000118                     	ds	4
   604  00011C                     _K_var:
   605                           	opt stack 0
   606  00011C                     	ds	4
   607  000120                     _Pmin:
   608                           	opt stack 0
   609  000120                     	ds	4
   610  000124                     _alfa:
   611                           	opt stack 0
   612  000124                     	ds	4
   613  000128                     _beta:
   614                           	opt stack 0
   615  000128                     	ds	4
   616  00012C                     _bordo:
   617                           	opt stack 0
   618  00012C                     	ds	4
   619  000130                     _n:
   620                           	opt stack 0
   621  000130                     	ds	4
   622  000134                     _old_alignment_gap:
   623                           	opt stack 0
   624  000134                     	ds	4
   625  000138                     _prima_sterzata:
   626                           	opt stack 0
   627  000138                     	ds	4
   628  00013C                     _x:
   629                           	opt stack 0
   630  00013C                     	ds	4
   631  000140                     _distance:
   632                           	opt stack 0
   633  000140                     	ds	2
   634  000142                     _errno:
   635                           	opt stack 0
   636  000142                     	ds	2
   637  000144                     _msg:
   638                           	opt stack 0
   639  000144                     	ds	15
   640  000153                     _data:
   641                           	opt stack 0
   642  000153                     	ds	8
   643  00015B                     _data_brake:
   644                           	opt stack 0
   645  00015B                     	ds	8
   646  000163                     _data_correction:
   647                           	opt stack 0
   648  000163                     	ds	8
   649  00016B                     _data_speed:
   650                           	opt stack 0
   651  00016B                     	ds	8
   652  000173                     _data_steering:
   653                           	opt stack 0
   654  000173                     	ds	8
   655  00017B                     _data_test:
   656                           	opt stack 0
   657  00017B                     	ds	8
   658  000183                     _sensor_distance_short:
   659                           	opt stack 0
   660  000183                     	ds	8
   661                           tblptru	equ	0xFF8
   662                           tblptrh	equ	0xFF7
   663                           tblptrl	equ	0xFF6
   664                           tablat	equ	0xFF5
   665                           postinc0	equ	0xFEE
   666                           wreg	equ	0xFE8
   667                           postdec1	equ	0xFE5
   668                           fsr1l	equ	0xFE1
   669                           
   670                           	psect	dataBANK1
   671  0001EC                     __pdataBANK1:
   672                           	opt stack 0
   673  0001EC                     _larghezza:
   674                           	opt stack 0
   675  0001EC                     	ds	4
   676  0001F0                     _raggio:
   677                           	opt stack 0
   678  0001F0                     	ds	4
   679                           tblptru	equ	0xFF8
   680                           tblptrh	equ	0xFF7
   681                           tblptrl	equ	0xFF6
   682                           tablat	equ	0xFF5
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           postdec1	equ	0xFE5
   686                           fsr1l	equ	0xFE1
   687                           
   688                           	psect	cstackBANK1
   689  00018B                     __pcstackBANK1:
   690                           	opt stack 0
   691  00018B                     ??_sqrt:
   692  00018B                     sin@y:
   693                           	opt stack 0
   694                           
   695                           ; 4 bytes @ 0x0
   696  00018B                     	ds	4
   697  00018F                     sqrt@og:
   698                           	opt stack 0
   699  00018F                     _sin$3686:
   700                           	opt stack 0
   701                           
   702                           ; 4 bytes @ 0x4
   703  00018F                     	ds	4
   704  000193                     sin@x2:
   705                           	opt stack 0
   706  000193                     sqrt@z:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x8
   710  000193                     	ds	4
   711  000197                     sin@sgn:
   712                           	opt stack 0
   713  000197                     sqrt@i:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0xC
   717  000197                     	ds	1
   718  000198                     sqrt@q:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0xD
   722  000198                     	ds	4
   723  00019C                     sqrt@x:
   724                           	opt stack 0
   725                           
   726                           ; 4 bytes @ 0x11
   727  00019C                     	ds	4
   728  0001A0                     ?_asin:
   729                           	opt stack 0
   730  0001A0                     asin@x:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x15
   734  0001A0                     	ds	4
   735  0001A4                     asin@sgn:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0x19
   739  0001A4                     	ds	4
   740  0001A8                     _asin$3681:
   741                           	opt stack 0
   742                           
   743                           ; 4 bytes @ 0x1D
   744  0001A8                     	ds	4
   745  0001AC                     _asin$3684:
   746                           	opt stack 0
   747                           
   748                           ; 4 bytes @ 0x21
   749  0001AC                     	ds	4
   750  0001B0                     _asin$3683:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0x25
   754  0001B0                     	ds	4
   755  0001B4                     asin@y:
   756                           	opt stack 0
   757                           
   758                           ; 4 bytes @ 0x29
   759  0001B4                     	ds	4
   760  0001B8                     _asin$3682:
   761                           	opt stack 0
   762                           
   763                           ; 4 bytes @ 0x2D
   764  0001B8                     	ds	4
   765  0001BC                     ??_park_search:
   766  0001BC                     ?_cos:
   767                           	opt stack 0
   768  0001BC                     cos@f:
   769                           	opt stack 0
   770                           
   771                           ; 4 bytes @ 0x31
   772  0001BC                     	ds	4
   773  0001C0                     _cos$3685:
   774                           	opt stack 0
   775                           
   776                           ; 4 bytes @ 0x35
   777  0001C0                     	ds	4
   778  0001C4                     _matematica$3674:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0x39
   782  0001C4                     	ds	4
   783  0001C8                     _matematica$3675:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0x3D
   787  0001C8                     	ds	4
   788  0001CC                     _matematica$3676:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x41
   792  0001CC                     	ds	4
   793  0001D0                     _matematica$3677:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x45
   797  0001D0                     	ds	4
   798  0001D4                     _matematica$3679:
   799                           	opt stack 0
   800                           
   801                           ; 4 bytes @ 0x49
   802  0001D4                     	ds	4
   803  0001D8                     _matematica$3680:
   804                           	opt stack 0
   805                           
   806                           ; 4 bytes @ 0x4D
   807  0001D8                     	ds	4
   808  0001DC                     _matematica$3678:
   809                           	opt stack 0
   810                           
   811                           ; 4 bytes @ 0x51
   812  0001DC                     	ds	4
   813  0001E0                     ??_park_routine:
   814                           
   815                           ; 0 bytes @ 0x55
   816  0001E0                     	ds	4
   817  0001E4                     _park_routine$3672:
   818                           	opt stack 0
   819                           
   820                           ; 4 bytes @ 0x59
   821  0001E4                     	ds	4
   822  0001E8                     _park_routine$3673:
   823                           	opt stack 0
   824                           
   825                           ; 4 bytes @ 0x5D
   826  0001E8                     	ds	4
   827                           tblptru	equ	0xFF8
   828                           tblptrh	equ	0xFF7
   829                           tblptrl	equ	0xFF6
   830                           tablat	equ	0xFF5
   831                           postinc0	equ	0xFEE
   832                           wreg	equ	0xFE8
   833                           postdec1	equ	0xFE5
   834                           fsr1l	equ	0xFE1
   835                           
   836                           	psect	cstackBANK0
   837  000060                     __pcstackBANK0:
   838                           	opt stack 0
   839  000060                     ?___lwdiv:
   840                           	opt stack 0
   841  000060                     ___lwdiv@dividend:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x0
   845  000060                     	ds	2
   846  000062                     ___lwdiv@divisor:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x2
   850  000062                     	ds	2
   851  000064                     ___lwdiv@counter:
   852                           	opt stack 0
   853                           
   854                           ; 1 bytes @ 0x4
   855  000064                     	ds	1
   856  000065                     ___lwdiv@quotient:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x5
   860  000065                     	ds	2
   861  000067                     ??_ISR_Alta:
   862                           
   863                           ; 0 bytes @ 0x7
   864  000067                     	ds	16
   865  000077                     ??_can_interpreter:
   866  000077                     ?_abs:
   867                           	opt stack 0
   868  000077                     ?___wmul:
   869                           	opt stack 0
   870  000077                     ?___flpack:
   871                           	opt stack 0
   872  000077                     CANOperationMode@mode:
   873                           	opt stack 0
   874  000077                     _CANisTxReady$2845:
   875                           	opt stack 0
   876  000077                     ___wmul@multiplier:
   877                           	opt stack 0
   878  000077                     abs@a:
   879                           	opt stack 0
   880  000077                     CANsendMessage@identifier:
   881                           	opt stack 0
   882  000077                     CANSetMask@mask:
   883                           	opt stack 0
   884  000077                     CANSetFilter@filter:
   885                           	opt stack 0
   886  000077                     ___flpack@arg:
   887                           	opt stack 0
   888  000077                     frexp@value:
   889                           	opt stack 0
   890                           
   891                           ; 4 bytes @ 0x17
   892  000077                     	ds	2
   893  000079                     ??_abs:
   894  000079                     ___wmul@multiplicand:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x19
   898  000079                     	ds	2
   899  00007B                     CANSetMask@type:
   900                           	opt stack 0
   901  00007B                     CANSetFilter@type:
   902                           	opt stack 0
   903  00007B                     ___flpack@exp:
   904                           	opt stack 0
   905  00007B                     CANsendMessage@data:
   906                           	opt stack 0
   907  00007B                     ___wmul@product:
   908                           	opt stack 0
   909  00007B                     frexp@eptr:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x1B
   913  00007B                     	ds	1
   914  00007C                     ??_CANSetMask:
   915  00007C                     ??_CANSetFilter:
   916  00007C                     ___flpack@sign:
   917                           	opt stack 0
   918                           
   919                           ; 1 bytes @ 0x1C
   920  00007C                     	ds	1
   921  00007D                     ??___flpack:
   922  00007D                     ??_frexp:
   923  00007D                     CANsendMessage@dataLength:
   924                           	opt stack 0
   925  00007D                     delay_ms@value_ms:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x1D
   929  00007D                     	ds	1
   930  00007E                     CANsendMessage@flags:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x1E
   934  00007E                     	ds	1
   935  00007F                     ??_CANsendMessage:
   936  00007F                     delay_s@value_s:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0x1F
   940  00007F                     	ds	1
   941  000080                     CANSetMask@numBuffer:
   942                           	opt stack 0
   943  000080                     CANSetFilter@numBuffer:
   944                           	opt stack 0
   945  000080                     delay_s@repeat_loop:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x20
   949  000080                     	ds	1
   950  000081                     ?___fldiv:
   951                           	opt stack 0
   952  000081                     ?___awtofl:
   953                           	opt stack 0
   954  000081                     ?___lwtofl:
   955                           	opt stack 0
   956  000081                     ___awtofl@c:
   957                           	opt stack 0
   958  000081                     ___lwtofl@c:
   959                           	opt stack 0
   960  000081                     CANSetMask@tamp:
   961                           	opt stack 0
   962  000081                     CANSetFilter@tamp:
   963                           	opt stack 0
   964  000081                     ___fldiv@f1:
   965                           	opt stack 0
   966                           
   967                           ; 4 bytes @ 0x21
   968  000081                     	ds	2
   969  000083                     CANsendMessage@tamp:
   970                           	opt stack 0
   971                           
   972                           ; 4 bytes @ 0x23
   973  000083                     	ds	2
   974  000085                     CANInitialize@phaseSeg1:
   975                           	opt stack 0
   976  000085                     ___awtofl@sign:
   977                           	opt stack 0
   978  000085                     ___fldiv@f2:
   979                           	opt stack 0
   980                           
   981                           ; 4 bytes @ 0x25
   982  000085                     	ds	1
   983  000086                     CANInitialize@phaseSeg2:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x26
   987  000086                     	ds	1
   988  000087                     CANInitialize@SJW:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x27
   992  000087                     	ds	1
   993  000088                     CANInitialize@BRP:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x28
   997  000088                     	ds	1
   998  000089                     CANInitialize@flags:
   999                           	opt stack 0
  1000  000089                     ___fldiv@f3:
  1001                           	opt stack 0
  1002                           
  1003                           ; 4 bytes @ 0x29
  1004  000089                     	ds	1
  1005  00008A                     ??_CANInitialize:
  1006                           
  1007                           ; 0 bytes @ 0x2A
  1008  00008A                     	ds	3
  1009  00008D                     ___fldiv@cntr:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x2D
  1013  00008D                     	ds	1
  1014  00008E                     CANInitialize@propSeg:
  1015                           	opt stack 0
  1016  00008E                     ___fldiv@exp:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x2E
  1020  00008E                     	ds	1
  1021  00008F                     CANInitialize@FilterConfig1:
  1022                           	opt stack 0
  1023  00008F                     ___fldiv@sign:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x2F
  1027  00008F                     	ds	1
  1028  000090                     ?___flmul:
  1029                           	opt stack 0
  1030  000090                     CANInitialize@FilterConfig2:
  1031                           	opt stack 0
  1032  000090                     ___flmul@f1:
  1033                           	opt stack 0
  1034                           
  1035                           ; 4 bytes @ 0x30
  1036  000090                     	ds	1
  1037  000091                     
  1038                           ; 0 bytes @ 0x31
  1039  000091                     	ds	3
  1040  000094                     ___flmul@f2:
  1041                           	opt stack 0
  1042                           
  1043                           ; 4 bytes @ 0x34
  1044  000094                     	ds	4
  1045  000098                     ___flmul@exp:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x38
  1049  000098                     	ds	1
  1050  000099                     ___flmul@f3_as_product:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0x39
  1054  000099                     	ds	4
  1055  00009D                     ___flmul@cntr:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x3D
  1059  00009D                     	ds	1
  1060  00009E                     ___flmul@sign:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x3E
  1064  00009E                     	ds	1
  1065  00009F                     ?___fladd:
  1066                           	opt stack 0
  1067  00009F                     ___fladd@f1:
  1068                           	opt stack 0
  1069                           
  1070                           ; 4 bytes @ 0x3F
  1071  00009F                     	ds	4
  1072  0000A3                     ___fladd@f2:
  1073                           	opt stack 0
  1074                           
  1075                           ; 4 bytes @ 0x43
  1076  0000A3                     	ds	4
  1077  0000A7                     ??___fladd:
  1078                           
  1079                           ; 0 bytes @ 0x47
  1080  0000A7                     	ds	1
  1081  0000A8                     ___fladd@sign:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x48
  1085  0000A8                     	ds	1
  1086  0000A9                     ___fladd@exp2:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x49
  1090  0000A9                     	ds	1
  1091  0000AA                     ___fladd@exp1:
  1092                           	opt stack 0
  1093                           
  1094                           ; 1 bytes @ 0x4A
  1095  0000AA                     	ds	1
  1096  0000AB                     ?_eval_poly:
  1097                           	opt stack 0
  1098  0000AB                     ?___flneg:
  1099                           	opt stack 0
  1100  0000AB                     eval_poly@x:
  1101                           	opt stack 0
  1102  0000AB                     ___flneg@f1:
  1103                           	opt stack 0
  1104                           
  1105                           ; 4 bytes @ 0x4B
  1106  0000AB                     	ds	4
  1107  0000AF                     ?_fabs:
  1108                           	opt stack 0
  1109  0000AF                     ?___fltol:
  1110                           	opt stack 0
  1111  0000AF                     eval_poly@d:
  1112                           	opt stack 0
  1113  0000AF                     fabs@d:
  1114                           	opt stack 0
  1115  0000AF                     ___fltol@f1:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0x4F
  1119  0000AF                     	ds	2
  1120  0000B1                     eval_poly@n:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x51
  1124  0000B1                     	ds	2
  1125  0000B3                     ??_eval_poly:
  1126  0000B3                     ??___fltol:
  1127  0000B3                     ___flge@ff1:
  1128                           	opt stack 0
  1129                           
  1130                           ; 4 bytes @ 0x53
  1131  0000B3                     	ds	4
  1132  0000B7                     ___fltol@sign1:
  1133                           	opt stack 0
  1134  0000B7                     eval_poly@res:
  1135                           	opt stack 0
  1136  0000B7                     ___flge@ff2:
  1137                           	opt stack 0
  1138                           
  1139                           ; 4 bytes @ 0x57
  1140  0000B7                     	ds	1
  1141  0000B8                     ___fltol@exp1:
  1142                           	opt stack 0
  1143                           
  1144                           ; 1 bytes @ 0x58
  1145  0000B8                     	ds	1
  1146  0000B9                     ?___altofl:
  1147                           	opt stack 0
  1148  0000B9                     ___altofl@c:
  1149                           	opt stack 0
  1150                           
  1151                           ; 4 bytes @ 0x59
  1152  0000B9                     	ds	2
  1153  0000BB                     ??___flge:
  1154                           
  1155                           ; 0 bytes @ 0x5B
  1156  0000BB                     	ds	2
  1157  0000BD                     ___altofl@sign:
  1158                           	opt stack 0
  1159                           
  1160                           ; 1 bytes @ 0x5D
  1161  0000BD                     	ds	2
  1162  0000BF                     ?_atan:
  1163                           	opt stack 0
  1164  0000BF                     ?_floor:
  1165                           	opt stack 0
  1166  0000BF                     atan@f:
  1167                           	opt stack 0
  1168  0000BF                     floor@x:
  1169                           	opt stack 0
  1170                           
  1171                           ; 4 bytes @ 0x5F
  1172  0000BF                     	ds	4
  1173  0000C3                     atan@y:
  1174                           	opt stack 0
  1175  0000C3                     floor@i:
  1176                           	opt stack 0
  1177                           
  1178                           ; 4 bytes @ 0x63
  1179  0000C3                     	ds	4
  1180  0000C7                     floor@expon:
  1181                           	opt stack 0
  1182  0000C7                     atan@x:
  1183                           	opt stack 0
  1184                           
  1185                           ; 4 bytes @ 0x67
  1186  0000C7                     	ds	2
  1187  0000C9                     ?___flsub:
  1188                           	opt stack 0
  1189  0000C9                     ___flsub@f1:
  1190                           	opt stack 0
  1191                           
  1192                           ; 4 bytes @ 0x69
  1193  0000C9                     	ds	2
  1194  0000CB                     atan@recip:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0x6B
  1198  0000CB                     	ds	1
  1199  0000CC                     atan@val_squared:
  1200                           	opt stack 0
  1201                           
  1202                           ; 4 bytes @ 0x6C
  1203  0000CC                     	ds	1
  1204  0000CD                     ___flsub@f2:
  1205                           	opt stack 0
  1206                           
  1207                           ; 4 bytes @ 0x6D
  1208  0000CD                     	ds	3
  1209  0000D0                     atan@val:
  1210                           	opt stack 0
  1211                           
  1212                           ; 4 bytes @ 0x70
  1213  0000D0                     	ds	1
  1214  0000D1                     ?_sqrt:
  1215                           	opt stack 0
  1216  0000D1                     ?_sin:
  1217                           	opt stack 0
  1218  0000D1                     sin@f:
  1219                           	opt stack 0
  1220  0000D1                     sqrt@y:
  1221                           	opt stack 0
  1222                           
  1223                           ; 4 bytes @ 0x71
  1224  0000D1                     	ds	4
  1225  0000D5                     ??_parallelo:
  1226  0000D5                     
  1227                           ; 0 bytes @ 0x75
  1228  0000D5                     	ds	2
  1229  0000D7                     tblptru	equ	0xFF8
  1230                           tblptrh	equ	0xFF7
  1231                           tblptrl	equ	0xFF6
  1232                           tablat	equ	0xFF5
  1233                           postinc0	equ	0xFEE
  1234                           wreg	equ	0xFE8
  1235                           postdec1	equ	0xFE5
  1236                           fsr1l	equ	0xFE1
  1237                           
  1238                           ; 0 bytes @ 0x77
  1239                           
  1240                           	psect	cstackCOMRAM
  1241  00002A                     __pcstackCOMRAM:
  1242                           	opt stack 0
  1243  00002A                     ?i1___wmul:
  1244                           	opt stack 0
  1245  00002A                     CANreceiveMessage@msg:
  1246                           	opt stack 0
  1247  00002A                     i1___wmul@multiplier:
  1248                           	opt stack 0
  1249  00002A                     i1CANsendMessage@identifier:
  1250                           	opt stack 0
  1251                           
  1252                           ; 4 bytes @ 0x0
  1253  00002A                     	ds	2
  1254  00002C                     ??_CANreceiveMessage:
  1255  00002C                     i1___wmul@multiplicand:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x2
  1259  00002C                     	ds	2
  1260  00002E                     i1CANsendMessage@data:
  1261                           	opt stack 0
  1262  00002E                     i1___wmul@product:
  1263                           	opt stack 0
  1264                           
  1265                           ; 2 bytes @ 0x4
  1266  00002E                     	ds	2
  1267  000030                     i1CANsendMessage@dataLength:
  1268                           	opt stack 0
  1269  000030                     i1delay_ms@value_ms:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0x6
  1273  000030                     	ds	1
  1274  000031                     i1CANsendMessage@flags:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x7
  1278  000031                     	ds	1
  1279  000032                     ??i1_CANsendMessage:
  1280  000032                     
  1281                           ; 0 bytes @ 0x8
  1282  000032                     	ds	2
  1283  000034                     CANreceiveMessage@error:
  1284                           	opt stack 0
  1285                           
  1286                           ; 1 bytes @ 0xA
  1287  000034                     	ds	1
  1288  000035                     CANreceiveMessage@tamp:
  1289                           	opt stack 0
  1290                           
  1291                           ; 1 bytes @ 0xB
  1292  000035                     	ds	1
  1293  000036                     i1CANsendMessage@tamp:
  1294                           	opt stack 0
  1295                           
  1296                           ; 4 bytes @ 0xC
  1297  000036                     	ds	4
  1298  00003A                     ??_ISR_Bassa:
  1299                           
  1300                           ; 0 bytes @ 0x10
  1301  00003A                     	ds	21
  1302  00004F                     ISR_Bassa@MUX_index_collision:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0x25
  1306  00004F                     	ds	2
  1307  000051                     ISR_Bassa@PORTA_temp:
  1308                           	opt stack 0
  1309                           
  1310                           ; 1 bytes @ 0x27
  1311  000051                     	ds	1
  1312  000052                     ISR_Bassa@i:
  1313                           	opt stack 0
  1314                           
  1315                           ; 1 bytes @ 0x28
  1316  000052                     	ds	1
  1317                           tblptru	equ	0xFF8
  1318                           tblptrh	equ	0xFF7
  1319                           tblptrl	equ	0xFF6
  1320                           tablat	equ	0xFF5
  1321                           postinc0	equ	0xFEE
  1322                           wreg	equ	0xFE8
  1323                           postdec1	equ	0xFE5
  1324                           fsr1l	equ	0xFE1
  1325                           
  1326 ;;
  1327 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1328 ;;
  1329 ;; *************** function _main *****************
  1330 ;; Defined at:
  1331 ;;		line 234 in file "parcheggio.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;		None
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;		None
  1336 ;; Return value:  Size  Location     Type
  1337 ;;		None               void
  1338 ;; Registers used:
  1339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1349 ;;Total ram usage:        0 bytes
  1350 ;; Hardware stack levels required when called:   12
  1351 ;; This function calls:
  1352 ;;		_CANisTxReady
  1353 ;;		_CANsendMessage
  1354 ;;		_can_interpreter
  1355 ;;		_configurations
  1356 ;;		_delay_ms
  1357 ;;		_park_routine
  1358 ;;		_park_search
  1359 ;; This function is called by:
  1360 ;;		Startup code after reset
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364                           	psect	text0
  1365  0057F8                     __ptext0:
  1366                           	opt stack 0
  1367  0057F8                     _main:
  1368                           	opt stack 19
  1369                           
  1370                           ;parcheggio.c: 235: MUX_select[0] = 0b00000000;
  1371                           
  1372                           ; BSR set to: 15
  1373                           ;incstack = 0
  1374  0057F8  0E00               	movlw	0
  1375  0057FA  6E11               	movwf	_MUX_select,c	;volatile
  1376                           
  1377                           ;parcheggio.c: 236: MUX_select[1] = 0b00000001;
  1378  0057FC  0E01               	movlw	1
  1379  0057FE  6E12               	movwf	_MUX_select+1,c	;volatile
  1380                           
  1381                           ;parcheggio.c: 237: MUX_select[2] = 0b00000010;
  1382  005800  0E02               	movlw	2
  1383  005802  6E13               	movwf	_MUX_select+2,c	;volatile
  1384                           
  1385                           ;parcheggio.c: 238: MUX_select[3] = 0b00000011;
  1386  005804  0E03               	movlw	3
  1387  005806  6E14               	movwf	_MUX_select+3,c	;volatile
  1388                           
  1389                           ;parcheggio.c: 239: MUX_select[4] = 0b00000100;
  1390  005808  0E04               	movlw	4
  1391  00580A  6E15               	movwf	_MUX_select+4,c	;volatile
  1392                           
  1393                           ;parcheggio.c: 240: MUX_select[5] = 0b00000101;
  1394  00580C  0E05               	movlw	5
  1395  00580E  6E16               	movwf	_MUX_select+5,c	;volatile
  1396                           
  1397                           ;parcheggio.c: 241: MUX_select[6] = 0b00000110;
  1398  005810  0E06               	movlw	6
  1399  005812  6E17               	movwf	_MUX_select+6,c	;volatile
  1400                           
  1401                           ;parcheggio.c: 242: MUX_select[7] = 0b00000111;
  1402  005814  0E07               	movlw	7
  1403  005816  6E18               	movwf	_MUX_select+7,c	;volatile
  1404                           
  1405                           ;parcheggio.c: 244: configurations();
  1406  005818  EC17  F02D         	call	_configurations	;wreg free
  1407                           
  1408                           ;parcheggio.c: 246: PORTBbits.RB4 = 0;
  1409  00581C  9881               	bcf	3969,4,c	;volatile
  1410                           
  1411                           ;parcheggio.c: 247: PORTBbits.RB5 = 0;
  1412  00581E  9A81               	bcf	3969,5,c	;volatile
  1413                           
  1414                           ;parcheggio.c: 248: PORTBbits.RB6 = 0;
  1415  005820  9C81               	bcf	3969,6,c	;volatile
  1416                           
  1417                           ;parcheggio.c: 250: request_sent = 0;
  1418  005822  9854               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1419                           
  1420                           ;parcheggio.c: 251: start_operation = 0;
  1421  005824  9C54               	bcf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  1422                           
  1423                           ;parcheggio.c: 252: delay_ms(500);
  1424  005826  0E01               	movlw	1
  1425  005828  0100               	movlb	0	; () banked
  1426  00582A  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1427  00582C  0EF4               	movlw	244
  1428  00582E  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1429  005830  EC36  F02E         	call	_delay_ms	;wreg free
  1430                           
  1431                           ;parcheggio.c: 255: while (activation != 1) {
  1432                           
  1433                           ;parcheggio.c: 254: while (1) {
  1434  005834  D026               	goto	l6794
  1435  005836                     l6788:
  1436                           
  1437                           ;parcheggio.c: 256: delay_ms(10);
  1438  005836  0E00               	movlw	0
  1439  005838  0100               	movlb	0	; () banked
  1440  00583A  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1441  00583C  0E0A               	movlw	10
  1442  00583E  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1443  005840  EC36  F02E         	call	_delay_ms	;wreg free
  1444                           
  1445                           ;parcheggio.c: 257: while (!CANisTxReady());
  1446  005844  D000               	goto	l6790
  1447  005846                     l6790:
  1448  005846  ECE5  F02E         	call	_CANisTxReady	;wreg free
  1449  00584A  0900               	iorlw	0
  1450  00584C  B4D8               	btfsc	status,2,c
  1451  00584E  D7FB               	goto	l6790
  1452                           
  1453                           ;parcheggio.c: 258: PORTBbits.RB4 = ~PORTBbits.RB4;
  1454  005850  7881               	btg	3969,4,c	;volatile
  1455                           
  1456                           ;parcheggio.c: 259: CANsendMessage(0b00000010001, sensor_distance_short, 2, CAN_CONFIG_S
      +                          TD_MSG & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1457  005852  0E11               	movlw	17
  1458  005854  0100               	movlb	0	; () banked
  1459  005856  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1460  005858  0E00               	movlw	0
  1461  00585A  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1462  00585C  0E00               	movlw	0
  1463  00585E  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1464  005860  0E00               	movlw	0
  1465  005862  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1466  005864  0E83               	movlw	low _sensor_distance_short
  1467  005866  0100               	movlb	0	; () banked
  1468  005868  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1469  00586A  0E01               	movlw	high _sensor_distance_short
  1470  00586C  0100               	movlb	0	; () banked
  1471  00586E  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1472  005870  0E02               	movlw	2
  1473  005872  0100               	movlb	0	; () banked
  1474  005874  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1475  005876  0EBC               	movlw	188
  1476  005878  0100               	movlb	0	; () banked
  1477  00587A  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1478  00587C  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1479  005880  D000               	goto	l6794
  1480  005882                     l6794:
  1481  005882  A253               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1482  005884  D7D8               	goto	l6788
  1483                           
  1484                           ;parcheggio.c: 260: }
  1485                           ;parcheggio.c: 261: park_search();
  1486  005886  EC7A  F025         	call	_park_search	;wreg free
  1487                           
  1488                           ;parcheggio.c: 262: can_interpreter();
  1489  00588A  ECA9  F02D         	call	_can_interpreter	;wreg free
  1490                           
  1491                           ;parcheggio.c: 263: park_routine();
  1492  00588E  ECBC  F018         	call	_park_routine	;wreg free
  1493  005892  D7F7               	goto	l6794
  1494  005894  EF9E  F001         	goto	start
  1495  005898                     __end_of_main:
  1496                           	opt stack 0
  1497                           tblptru	equ	0xFF8
  1498                           tblptrh	equ	0xFF7
  1499                           tblptrl	equ	0xFF6
  1500                           tablat	equ	0xFF5
  1501                           postinc0	equ	0xFEE
  1502                           wreg	equ	0xFE8
  1503                           postdec1	equ	0xFE5
  1504                           fsr1l	equ	0xFE1
  1505                           status	equ	0xFD8
  1506                           
  1507 ;; *************** function _park_search *****************
  1508 ;; Defined at:
  1509 ;;		line 267 in file "parcheggio.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;		None
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;		None
  1514 ;; Return value:  Size  Location     Type
  1515 ;;		None               void
  1516 ;; Registers used:
  1517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1525 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1526 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1527 ;;Total ram usage:        2 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:   11
  1530 ;; This function calls:
  1531 ;;		_CANisTxReady
  1532 ;;		_CANsendMessage
  1533 ;;		___awtofl
  1534 ;;		_abs
  1535 ;;		_parallelo
  1536 ;; This function is called by:
  1537 ;;		_main
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text1
  1542  004AF4                     __ptext1:
  1543                           	opt stack 0
  1544  004AF4                     _park_search:
  1545                           	opt stack 19
  1546                           
  1547                           ;parcheggio.c: 268: while ((activation == 1) && (PORTBbits.RB5 == 0)) {
  1548                           
  1549                           ;incstack = 0
  1550  004AF4  D0DD               	goto	l748
  1551  004AF6                     l6516:
  1552                           
  1553                           ;parcheggio.c: 269: parallelo();
  1554  004AF6  EC26  F021         	call	_parallelo	;wreg free
  1555                           
  1556                           ;parcheggio.c: 271: if (sensor_distance[0] > 50) {
  1557  004AFA  5002               	movf	_sensor_distance+1,w,c	;volatile
  1558  004AFC  E104               	bnz	u8060
  1559  004AFE  0E33               	movlw	51
  1560  004B00  5C01               	subwf	_sensor_distance,w,c	;volatile
  1561  004B02  A0D8               	btfss	status,0,c
  1562  004B04  D02D               	goto	l750
  1563  004B06                     u8060:
  1564                           
  1565                           ;parcheggio.c: 272: if (request_sent == 0) {
  1566  004B06  A854               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1567  004B08  D002               	goto	l6524
  1568  004B0A  D028               	goto	l6532
  1569                           
  1570                           ;parcheggio.c: 273: while (!CANisTxReady());
  1571  004B0C  D000               	goto	l6524
  1572  004B0E                     l6524:
  1573  004B0E  ECE5  F02E         	call	_CANisTxReady	;wreg free
  1574  004B12  0900               	iorlw	0
  1575  004B14  B4D8               	btfsc	status,2,c
  1576  004B16  D7FB               	goto	l6524
  1577                           
  1578                           ;parcheggio.c: 274: CANsendMessage(0b00000001010, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1579  004B18  0E0A               	movlw	10
  1580  004B1A  0100               	movlb	0	; () banked
  1581  004B1C  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1582  004B1E  0E00               	movlw	0
  1583  004B20  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1584  004B22  0E00               	movlw	0
  1585  004B24  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1586  004B26  0E00               	movlw	0
  1587  004B28  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1588  004B2A  0E53               	movlw	low _data
  1589  004B2C  0100               	movlb	0	; () banked
  1590  004B2E  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1591  004B30  0E01               	movlw	high _data
  1592  004B32  0100               	movlb	0	; () banked
  1593  004B34  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1594  004B36  0E08               	movlw	8
  1595  004B38  0100               	movlb	0	; () banked
  1596  004B3A  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1597  004B3C  0EFC               	movlw	252
  1598  004B3E  0100               	movlb	0	; () banked
  1599  004B40  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1600  004B42  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1601                           
  1602                           ;parcheggio.c: 275: request_sent = 1;
  1603  004B46  8854               	bsf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1604                           
  1605                           ;parcheggio.c: 276: alignment_gap = 0;
  1606  004B48  0E00               	movlw	0
  1607  004B4A  0100               	movlb	0	; () banked
  1608  004B4C  6FD7               	movwf	_alignment_gap& (0+255),b
  1609  004B4E  0E00               	movlw	0
  1610  004B50  6FD8               	movwf	(_alignment_gap+1)& (0+255),b
  1611  004B52  0E00               	movlw	0
  1612  004B54  6FD9               	movwf	(_alignment_gap+2)& (0+255),b
  1613  004B56  0E00               	movlw	0
  1614  004B58  6FDA               	movwf	(_alignment_gap+3)& (0+255),b
  1615  004B5A  D000               	goto	l6532
  1616  004B5C                     l6532:
  1617                           
  1618                           ;parcheggio.c: 277: }
  1619                           ;parcheggio.c: 278: LATBbits.LATB4 = 1;
  1620  004B5C  888A               	bsf	3978,4,c	;volatile
  1621                           
  1622                           ;parcheggio.c: 279: } else {
  1623  004B5E  D027               	goto	l6536
  1624  004B60                     l750:
  1625                           
  1626                           ;parcheggio.c: 280: LATBbits.LATB4 = 0;
  1627  004B60  988A               	bcf	3978,4,c	;volatile
  1628                           
  1629                           ;parcheggio.c: 281: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  1630  004B62  EE20  F003         	lfsr	2,_sensor_distance+2	;volatile
  1631  004B66  CFDE F1BC          	movff	postinc2,??_park_search
  1632  004B6A  CFDD F1BD          	movff	postdec2,??_park_search+1
  1633  004B6E  0101               	movlb	1	; () banked
  1634  004B70  1FBC               	comf	??_park_search& (0+255),f,b
  1635  004B72  1FBD               	comf	(??_park_search+1)& (0+255),f,b
  1636  004B74  4BBC               	infsnz	??_park_search& (0+255),f,b
  1637  004B76  2BBD               	incf	(??_park_search+1)& (0+255),f,b
  1638  004B78  5001               	movf	_sensor_distance,w,c	;volatile
  1639  004B7A  0101               	movlb	1	; () banked
  1640  004B7C  25BC               	addwf	??_park_search& (0+255),w,b
  1641  004B7E  0100               	movlb	0	; () banked
  1642  004B80  6F77               	movwf	abs@a& (0+255),b
  1643  004B82  5002               	movf	_sensor_distance+1,w,c	;volatile
  1644  004B84  0101               	movlb	1	; () banked
  1645  004B86  21BD               	addwfc	(??_park_search+1)& (0+255),w,b
  1646  004B88  0100               	movlb	0	; () banked
  1647  004B8A  6F78               	movwf	(abs@a+1)& (0+255),b
  1648  004B8C  ECBB  F02E         	call	_abs	;wreg free
  1649  004B90  C077  F081         	movff	?_abs,___awtofl@c
  1650  004B94  C078  F082         	movff	?_abs+1,___awtofl@c+1
  1651  004B98  ECD3  F02D         	call	___awtofl	;wreg free
  1652  004B9C  C081  F0D7         	movff	?___awtofl,_alignment_gap
  1653  004BA0  C082  F0D8         	movff	?___awtofl+1,_alignment_gap+1
  1654  004BA4  C083  F0D9         	movff	?___awtofl+2,_alignment_gap+2
  1655  004BA8  C084  F0DA         	movff	?___awtofl+3,_alignment_gap+3
  1656  004BAC  D000               	goto	l6536
  1657  004BAE                     l6536:
  1658                           
  1659                           ;parcheggio.c: 282: }
  1660                           ;parcheggio.c: 284: if ((sensor_distance[0] < 50) && (request_sent == 1)&&(sensor_distan
      +                          ce[1] < 50)) {
  1661  004BAE  5002               	movf	_sensor_distance+1,w,c	;volatile
  1662  004BB0  E12B               	bnz	l6548
  1663  004BB2  0E32               	movlw	50
  1664  004BB4  5C01               	subwf	_sensor_distance,w,c	;volatile
  1665  004BB6  B0D8               	btfsc	status,0,c
  1666  004BB8  D027               	goto	l6548
  1667  004BBA  A854               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1668  004BBC  D025               	goto	l6548
  1669  004BBE  5004               	movf	_sensor_distance+3,w,c	;volatile
  1670  004BC0  E123               	bnz	l6548
  1671  004BC2  0E32               	movlw	50
  1672  004BC4  5C03               	subwf	_sensor_distance+2,w,c	;volatile
  1673  004BC6  B0D8               	btfsc	status,0,c
  1674  004BC8  D01F               	goto	l6548
  1675                           
  1676                           ;parcheggio.c: 285: request_sent = 0;
  1677  004BCA  9854               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1678                           
  1679                           ;parcheggio.c: 286: while (!CANisTxReady());
  1680  004BCC  D000               	goto	l6544
  1681  004BCE                     l6544:
  1682  004BCE  ECE5  F02E         	call	_CANisTxReady	;wreg free
  1683  004BD2  0900               	iorlw	0
  1684  004BD4  B4D8               	btfsc	status,2,c
  1685  004BD6  D7FB               	goto	l6544
  1686                           
  1687                           ;parcheggio.c: 287: CANsendMessage(0b00000001001, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1688  004BD8  0E09               	movlw	9
  1689  004BDA  0100               	movlb	0	; () banked
  1690  004BDC  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1691  004BDE  0E00               	movlw	0
  1692  004BE0  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1693  004BE2  0E00               	movlw	0
  1694  004BE4  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1695  004BE6  0E00               	movlw	0
  1696  004BE8  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1697  004BEA  0E53               	movlw	low _data
  1698  004BEC  0100               	movlb	0	; () banked
  1699  004BEE  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1700  004BF0  0E01               	movlw	high _data
  1701  004BF2  0100               	movlb	0	; () banked
  1702  004BF4  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1703  004BF6  0E08               	movlw	8
  1704  004BF8  0100               	movlb	0	; () banked
  1705  004BFA  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1706  004BFC  0EFC               	movlw	252
  1707  004BFE  0100               	movlb	0	; () banked
  1708  004C00  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1709  004C02  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1710  004C06  D000               	goto	l6548
  1711  004C08                     l6548:
  1712                           
  1713                           ;parcheggio.c: 288: }
  1714                           ;parcheggio.c: 290: if (distance_received == 1) {
  1715  004C08  AC53               	btfss	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1716  004C0A  D052               	goto	l748
  1717                           
  1718                           ;parcheggio.c: 291: if (distance_average > 65) {
  1719  004C0C  0100               	movlb	0	; () banked
  1720  004C0E  51E4               	movf	(_distance_average+1)& (0+255),w,b	;volatile
  1721  004C10  E105               	bnz	u8140
  1722  004C12  0E42               	movlw	66
  1723  004C14  0100               	movlb	0	; () banked
  1724  004C16  5DE3               	subwf	_distance_average& (0+255),w,b	;volatile
  1725  004C18  A0D8               	btfss	status,0,c
  1726  004C1A  D047               	goto	l761
  1727  004C1C                     u8140:
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;parcheggio.c: 292: PORTBbits.RB5 = 1;
  1731  004C1C  8A81               	bsf	3969,5,c	;volatile
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;parcheggio.c: 293: data[0] = 1;
  1735  004C1E  0E01               	movlw	1
  1736  004C20  0101               	movlb	1	; () banked
  1737  004C22  6F53               	movwf	_data& (0+255),b	;volatile
  1738                           
  1739                           ; BSR set to: 1
  1740                           ;parcheggio.c: 294: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  1741  004C24  0E0D               	movlw	13
  1742  004C26  0100               	movlb	0	; () banked
  1743  004C28  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1744  004C2A  0E00               	movlw	0
  1745  004C2C  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1746  004C2E  0E00               	movlw	0
  1747  004C30  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1748  004C32  0E00               	movlw	0
  1749  004C34  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1750  004C36  0E53               	movlw	low _data
  1751  004C38  0100               	movlb	0	; () banked
  1752  004C3A  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1753  004C3C  0E01               	movlw	high _data
  1754  004C3E  0100               	movlb	0	; () banked
  1755  004C40  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1756  004C42  0E01               	movlw	1
  1757  004C44  0100               	movlb	0	; () banked
  1758  004C46  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1759  004C48  0EBC               	movlw	188
  1760  004C4A  0100               	movlb	0	; () banked
  1761  004C4C  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1762  004C4E  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1763                           
  1764                           ;parcheggio.c: 295: if ((request_sent1 == 0)&&(sensor_distance[0] < 40)) {
  1765  004C52  BA54               	btfsc	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1766  004C54  D02D               	goto	l748
  1767  004C56  5002               	movf	_sensor_distance+1,w,c	;volatile
  1768  004C58  E12B               	bnz	l748
  1769  004C5A  0E28               	movlw	40
  1770  004C5C  5C01               	subwf	_sensor_distance,w,c	;volatile
  1771  004C5E  B0D8               	btfsc	status,0,c
  1772  004C60  D027               	goto	l748
  1773                           
  1774                           ;parcheggio.c: 296: data_test[0] = 50;
  1775  004C62  0E32               	movlw	50
  1776  004C64  0101               	movlb	1	; () banked
  1777  004C66  6F7B               	movwf	_data_test& (0+255),b
  1778                           
  1779                           ; BSR set to: 1
  1780                           ;parcheggio.c: 297: asd = 1;
  1781  004C68  8453               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  1782                           
  1783                           ; BSR set to: 1
  1784                           
  1785                           ;parcheggio.c: 298: while (!CANisTxReady());
  1786  004C6A  D000               	goto	l6566
  1787  004C6C                     l6566:
  1788  004C6C  ECE5  F02E         	call	_CANisTxReady	;wreg free
  1789  004C70  0900               	iorlw	0
  1790  004C72  B4D8               	btfsc	status,2,c
  1791  004C74  D7FB               	goto	l6566
  1792                           
  1793                           ;parcheggio.c: 299: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1794  004C76  0E0F               	movlw	15
  1795  004C78  0100               	movlb	0	; () banked
  1796  004C7A  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1797  004C7C  0E00               	movlw	0
  1798  004C7E  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1799  004C80  0E00               	movlw	0
  1800  004C82  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1801  004C84  0E00               	movlw	0
  1802  004C86  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1803  004C88  0E7B               	movlw	low _data_test
  1804  004C8A  0100               	movlb	0	; () banked
  1805  004C8C  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1806  004C8E  0E01               	movlw	high _data_test
  1807  004C90  0100               	movlb	0	; () banked
  1808  004C92  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1809  004C94  0E08               	movlw	8
  1810  004C96  0100               	movlb	0	; () banked
  1811  004C98  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1812  004C9A  0EBC               	movlw	188
  1813  004C9C  0100               	movlb	0	; () banked
  1814  004C9E  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1815  004CA0  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1816                           
  1817                           ;parcheggio.c: 301: distance_received1 = 0;
  1818  004CA4  9E53               	bcf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
  1819                           
  1820                           ;parcheggio.c: 302: request_sent1 = 1;
  1821  004CA6  8A54               	bsf	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1822                           
  1823                           ;parcheggio.c: 303: }
  1824                           ;parcheggio.c: 304: } else {
  1825  004CA8  D003               	goto	l748
  1826  004CAA                     l761:
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;parcheggio.c: 305: distance_received = 0;
  1830  004CAA  9C53               	bcf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1831                           
  1832                           ;parcheggio.c: 306: PORTBbits.RB5 = 0;
  1833  004CAC  9A81               	bcf	3969,5,c	;volatile
  1834                           
  1835                           ; BSR set to: 0
  1836  004CAE  D000               	goto	l748
  1837  004CB0                     l748:
  1838  004CB0  A253               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1839  004CB2  0012               	return	
  1840  004CB4  BA81               	btfsc	3969,5,c	;volatile
  1841  004CB6  0012               	return	
  1842  004CB8  D71E               	goto	l6516
  1843  004CBA  0012               	return	
  1844  004CBC  0012               	return		;funcret
  1845  004CBE                     __end_of_park_search:
  1846                           	opt stack 0
  1847                           tblptru	equ	0xFF8
  1848                           tblptrh	equ	0xFF7
  1849                           tblptrl	equ	0xFF6
  1850                           tablat	equ	0xFF5
  1851                           postinc0	equ	0xFEE
  1852                           wreg	equ	0xFE8
  1853                           postdec1	equ	0xFE5
  1854                           fsr1l	equ	0xFE1
  1855                           postinc2	equ	0xFDE
  1856                           postdec2	equ	0xFDD
  1857                           status	equ	0xFD8
  1858                           
  1859 ;; *************** function _park_routine *****************
  1860 ;; Defined at:
  1861 ;;		line 312 in file "parcheggio.c"
  1862 ;; Parameters:    Size  Location     Type
  1863 ;;		None
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;		None
  1866 ;; Return value:  Size  Location     Type
  1867 ;;		None               void
  1868 ;; Registers used:
  1869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1876 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  1877 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  1878 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
  1879 ;;Total ram usage:       12 bytes
  1880 ;; Hardware stack levels used:    1
  1881 ;; Hardware stack levels required when called:   11
  1882 ;; This function calls:
  1883 ;;		_CANisTxReady
  1884 ;;		_CANsendMessage
  1885 ;;		___fladd
  1886 ;;		___flneg
  1887 ;;		___fltol
  1888 ;;		___lwtofl
  1889 ;;		_can_send
  1890 ;;		_delay_ms
  1891 ;;		_delay_s
  1892 ;;		_matematica
  1893 ;;		_parallelo
  1894 ;; This function is called by:
  1895 ;;		_main
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text2
  1900  003178                     __ptext2:
  1901                           	opt stack 0
  1902  003178                     _park_routine:
  1903                           	opt stack 19
  1904                           
  1905                           ;parcheggio.c: 313: avvicinamento = 0;
  1906                           
  1907                           ;incstack = 0
  1908  003178  9653               	bcf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  1909                           
  1910                           ;parcheggio.c: 314: data_correction[0] = 0;
  1911  00317A  0E00               	movlw	0
  1912  00317C  0101               	movlb	1	; () banked
  1913  00317E  6F63               	movwf	_data_correction& (0+255),b
  1914                           
  1915                           ; BSR set to: 1
  1916                           ;parcheggio.c: 315: parallelo();
  1917  003180  EC26  F021         	call	_parallelo	;wreg free
  1918                           
  1919                           ;parcheggio.c: 317: while ((asd == 1)&&(PORTBbits.RB5 == 1) && (activation == 1)) {
  1920  003184  D02F               	goto	l6596
  1921  003186                     l6582:
  1922                           
  1923                           ;parcheggio.c: 318: delay_ms(200);
  1924  003186  0E00               	movlw	0
  1925  003188  0100               	movlb	0	; () banked
  1926  00318A  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1927  00318C  0EC8               	movlw	200
  1928  00318E  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1929  003190  EC36  F02E         	call	_delay_ms	;wreg free
  1930                           
  1931                           ;parcheggio.c: 319: PORTBbits.RB6 = ~PORTBbits.RB6;
  1932  003194  7C81               	btg	3969,6,c	;volatile
  1933                           
  1934                           ;parcheggio.c: 320: parallelo();
  1935  003196  EC26  F021         	call	_parallelo	;wreg free
  1936                           
  1937                           ;parcheggio.c: 321: if (data_correction[0] > 30) {
  1938  00319A  0E1E               	movlw	30
  1939  00319C  0101               	movlb	1	; () banked
  1940  00319E  6563               	cpfsgt	_data_correction& (0+255),b
  1941  0031A0  D004               	goto	l6592
  1942                           
  1943                           ; BSR set to: 1
  1944                           ;parcheggio.c: 322: data_correction[0] = 0;
  1945  0031A2  0E00               	movlw	0
  1946  0031A4  0101               	movlb	1	; () banked
  1947  0031A6  6F63               	movwf	_data_correction& (0+255),b
  1948                           
  1949                           ; BSR set to: 1
  1950                           
  1951                           ; BSR set to: 1
  1952                           ;parcheggio.c: 323: }
  1953                           ;parcheggio.c: 324: while (!CANisTxReady());
  1954  0031A8  D000               	goto	l6592
  1955  0031AA                     l6592:
  1956  0031AA  ECE5  F02E         	call	_CANisTxReady	;wreg free
  1957  0031AE  0900               	iorlw	0
  1958  0031B0  B4D8               	btfsc	status,2,c
  1959  0031B2  D7FB               	goto	l6592
  1960                           
  1961                           ;parcheggio.c: 325: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1962  0031B4  0E10               	movlw	16
  1963  0031B6  0100               	movlb	0	; () banked
  1964  0031B8  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1965  0031BA  0E00               	movlw	0
  1966  0031BC  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1967  0031BE  0E00               	movlw	0
  1968  0031C0  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1969  0031C2  0E00               	movlw	0
  1970  0031C4  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1971  0031C6  0E63               	movlw	low _data_correction
  1972  0031C8  0100               	movlb	0	; () banked
  1973  0031CA  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1974  0031CC  0E01               	movlw	high _data_correction
  1975  0031CE  0100               	movlb	0	; () banked
  1976  0031D0  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1977  0031D2  0E08               	movlw	8
  1978  0031D4  0100               	movlb	0	; () banked
  1979  0031D6  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1980  0031D8  0EBC               	movlw	188
  1981  0031DA  0100               	movlb	0	; () banked
  1982  0031DC  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1983  0031DE  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1984  0031E2  D000               	goto	l6596
  1985  0031E4                     l6596:
  1986  0031E4  B453               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  1987  0031E6  AA81               	btfss	3969,5,c	;volatile
  1988  0031E8  D002               	goto	l781
  1989  0031EA  B253               	btfsc	_activation/(0+8),_activation& (0+7),c	;volatile
  1990  0031EC  D7CC               	goto	l6582
  1991  0031EE                     l781:
  1992                           
  1993                           ;parcheggio.c: 326: }
  1994                           ;parcheggio.c: 328: if ((PORTBbits.RB5 == 1) && (activation == 1)) {
  1995  0031EE  BA81               	btfsc	3969,5,c	;volatile
  1996  0031F0  A253               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1997  0031F2  D030               	goto	l6616
  1998                           
  1999                           ;parcheggio.c: 329: PORTBbits.RB6 = 0;
  2000  0031F4  9C81               	bcf	3969,6,c	;volatile
  2001                           
  2002                           ;parcheggio.c: 330: data[0] = 2;
  2003  0031F6  0E02               	movlw	2
  2004  0031F8  0101               	movlb	1	; () banked
  2005  0031FA  6F53               	movwf	_data& (0+255),b	;volatile
  2006                           
  2007                           ; BSR set to: 1
  2008                           ;parcheggio.c: 331: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  2009  0031FC  0E0D               	movlw	13
  2010  0031FE  0100               	movlb	0	; () banked
  2011  003200  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2012  003202  0E00               	movlw	0
  2013  003204  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2014  003206  0E00               	movlw	0
  2015  003208  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2016  00320A  0E00               	movlw	0
  2017  00320C  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2018  00320E  0E53               	movlw	low _data
  2019  003210  0100               	movlb	0	; () banked
  2020  003212  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2021  003214  0E01               	movlw	high _data
  2022  003216  0100               	movlb	0	; () banked
  2023  003218  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2024  00321A  0E01               	movlw	1
  2025  00321C  0100               	movlb	0	; () banked
  2026  00321E  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2027  003220  0EBC               	movlw	188
  2028  003222  0100               	movlb	0	; () banked
  2029  003224  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2030  003226  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2031                           
  2032                           ;parcheggio.c: 332: }
  2033                           ;parcheggio.c: 334: while ((start_operation != 1)&&(activation == 1)) {
  2034  00322A  D014               	goto	l6616
  2035  00322C                     l784:
  2036                           
  2037                           ;parcheggio.c: 335: if (first == 0) {
  2038  00322C  B254               	btfsc	_first/(0+8),_first& (0+7),c	;volatile
  2039  00322E  D012               	goto	l6616
  2040                           
  2041                           ;parcheggio.c: 336: set_speed = 0;
  2042  003230  0E00               	movlw	0
  2043  003232  0100               	movlb	0	; () banked
  2044  003234  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2045  003236  0E00               	movlw	0
  2046  003238  6FE5               	movwf	_set_speed& (0+255),b
  2047                           
  2048                           ;parcheggio.c: 337: data_steering[0] = 90;
  2049  00323A  0E5A               	movlw	90
  2050  00323C  0101               	movlb	1	; () banked
  2051  00323E  6F73               	movwf	_data_steering& (0+255),b
  2052                           
  2053                           ;parcheggio.c: 338: data_brake [0] = 0;
  2054  003240  0E00               	movlw	0
  2055  003242  0101               	movlb	1	; () banked
  2056  003244  6F5B               	movwf	_data_brake& (0+255),b
  2057                           
  2058                           ;parcheggio.c: 339: data_brake [1] = 1;
  2059  003246  0E01               	movlw	1
  2060  003248  0101               	movlb	1	; () banked
  2061  00324A  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2062                           
  2063                           ; BSR set to: 1
  2064                           ;parcheggio.c: 340: can_send();
  2065  00324C  EC17  F02A         	call	_can_send	;wreg free
  2066                           
  2067                           ;parcheggio.c: 341: first = 1;
  2068  003250  8254               	bsf	_first/(0+8),_first& (0+7),c	;volatile
  2069  003252  D000               	goto	l6616
  2070  003254                     l6616:
  2071  003254  AC54               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  2072  003256  A253               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2073  003258  D1C5               	goto	l6726
  2074  00325A  D7E8               	goto	l784
  2075                           
  2076                           ;parcheggio.c: 342: }
  2077                           ;parcheggio.c: 343: }
  2078                           ;parcheggio.c: 345: while ((PORTBbits.RB5 == 1) && (activation == 1)&&(start_operation =
      +                          = 1)) {
  2079  00325C  D1C3               	goto	l6726
  2080  00325E                     l790:
  2081                           
  2082                           ;parcheggio.c: 346: LATBbits.LATB4 = 1;
  2083  00325E  888A               	bsf	3978,4,c	;volatile
  2084                           
  2085                           ;parcheggio.c: 348: bordo = (sensor_distance[0] + sensor_distance[1]) / 2;
  2086  003260  5001               	movf	_sensor_distance,w,c	;volatile
  2087  003262  2403               	addwf	_sensor_distance+2,w,c	;volatile
  2088  003264  0101               	movlb	1	; () banked
  2089  003266  6FE0               	movwf	??_park_routine& (0+255),b
  2090  003268  5002               	movf	_sensor_distance+1,w,c	;volatile
  2091  00326A  2004               	addwfc	_sensor_distance+3,w,c	;volatile
  2092  00326C  0101               	movlb	1	; () banked
  2093  00326E  6FE1               	movwf	(??_park_routine+1)& (0+255),b
  2094  003270  90D8               	bcf	status,0,c
  2095  003272  0101               	movlb	1	; () banked
  2096  003274  31E1               	rrcf	(??_park_routine+1)& (0+255),w,b
  2097  003276  0101               	movlb	1	; () banked
  2098  003278  6FE2               	movwf	(??_park_routine+2)& (0+255),b
  2099  00327A  0101               	movlb	1	; () banked
  2100  00327C  31E0               	rrcf	??_park_routine& (0+255),w,b
  2101  00327E  0100               	movlb	0	; () banked
  2102  003280  6F81               	movwf	___lwtofl@c& (0+255),b
  2103  003282  C1E2  F082         	movff	??_park_routine+2,___lwtofl@c+1
  2104  003286  EC8B  F02E         	call	___lwtofl	;wreg free
  2105  00328A  C081  F12C         	movff	?___lwtofl,_bordo	;volatile
  2106  00328E  C082  F12D         	movff	?___lwtofl+1,_bordo+1	;volatile
  2107  003292  C083  F12E         	movff	?___lwtofl+2,_bordo+2	;volatile
  2108  003296  C084  F12F         	movff	?___lwtofl+3,_bordo+3	;volatile
  2109                           
  2110                           ;parcheggio.c: 349: matematica();
  2111  00329A  EC60  F013         	call	_matematica	;wreg free
  2112                           
  2113                           ;parcheggio.c: 350: set_speed = 0;
  2114  00329E  0E00               	movlw	0
  2115  0032A0  0100               	movlb	0	; () banked
  2116  0032A2  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2117  0032A4  0E00               	movlw	0
  2118  0032A6  6FE5               	movwf	_set_speed& (0+255),b
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;parcheggio.c: 351: data_steering[0] = 90;
  2122  0032A8  0E5A               	movlw	90
  2123  0032AA  0101               	movlb	1	; () banked
  2124  0032AC  6F73               	movwf	_data_steering& (0+255),b
  2125                           
  2126                           ; BSR set to: 1
  2127                           ;parcheggio.c: 352: data_brake [0] = 0;
  2128  0032AE  0E00               	movlw	0
  2129  0032B0  0101               	movlb	1	; () banked
  2130  0032B2  6F5B               	movwf	_data_brake& (0+255),b
  2131                           
  2132                           ; BSR set to: 1
  2133                           ;parcheggio.c: 353: data_brake [1] = 1;
  2134  0032B4  0E01               	movlw	1
  2135  0032B6  0101               	movlb	1	; () banked
  2136  0032B8  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2137                           
  2138                           ; BSR set to: 1
  2139                           ;parcheggio.c: 354: can_send();
  2140  0032BA  EC17  F02A         	call	_can_send	;wreg free
  2141                           
  2142                           ;parcheggio.c: 355: delay_s(1);
  2143  0032BE  0E01               	movlw	1
  2144  0032C0  ECA4  F02E         	call	_delay_s
  2145                           
  2146                           ;parcheggio.c: 357: data_brake [0] = 3;
  2147  0032C4  0E03               	movlw	3
  2148  0032C6  0101               	movlb	1	; () banked
  2149  0032C8  6F5B               	movwf	_data_brake& (0+255),b
  2150                           
  2151                           ; BSR set to: 1
  2152                           ;parcheggio.c: 358: data_brake [1] = 1;
  2153  0032CA  0E01               	movlw	1
  2154  0032CC  0101               	movlb	1	; () banked
  2155  0032CE  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2156                           
  2157                           ; BSR set to: 1
  2158                           ;parcheggio.c: 360: set_speed = 300;
  2159  0032D0  0E01               	movlw	1
  2160  0032D2  0100               	movlb	0	; () banked
  2161  0032D4  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2162  0032D6  0E2C               	movlw	44
  2163  0032D8  6FE5               	movwf	_set_speed& (0+255),b
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;parcheggio.c: 361: dir = 0;
  2167  0032DA  9853               	bcf	_dir/(0+8),_dir& (0+7),c
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;parcheggio.c: 362: data_steering[0] = 90;
  2171  0032DC  0E5A               	movlw	90
  2172  0032DE  0101               	movlb	1	; () banked
  2173  0032E0  6F73               	movwf	_data_steering& (0+255),b
  2174                           
  2175                           ; BSR set to: 1
  2176                           ;parcheggio.c: 363: data_test[0] = ((60 + Pmin + 5)-(n + 15));
  2177  0032E2  0E00               	movlw	0
  2178  0032E4  0100               	movlb	0	; () banked
  2179  0032E6  6FA3               	movwf	___fladd@f2& (0+255),b
  2180  0032E8  0E00               	movlw	0
  2181  0032EA  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2182  0032EC  0E70               	movlw	112
  2183  0032EE  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2184  0032F0  0E41               	movlw	65
  2185  0032F2  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2186  0032F4  C130  F09F         	movff	_n,___fladd@f1
  2187  0032F8  C131  F0A0         	movff	_n+1,___fladd@f1+1
  2188  0032FC  C132  F0A1         	movff	_n+2,___fladd@f1+2
  2189  003300  C133  F0A2         	movff	_n+3,___fladd@f1+3
  2190  003304  ECF0  F01F         	call	___fladd	;wreg free
  2191  003308  C09F  F0AB         	movff	?___fladd,___flneg@f1
  2192  00330C  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  2193  003310  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  2194  003314  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  2195  003318  EC18  F02E         	call	___flneg	;wreg free
  2196  00331C  C0AB  F1E4         	movff	?___flneg,_park_routine$3672
  2197  003320  C0AC  F1E5         	movff	?___flneg+1,_park_routine$3672+1
  2198  003324  C0AD  F1E6         	movff	?___flneg+2,_park_routine$3672+2
  2199  003328  C0AE  F1E7         	movff	?___flneg+3,_park_routine$3672+3
  2200                           
  2201                           ;parcheggio.c: 363: data_test[0] = ((60 + Pmin + 5)-(n + 15));
  2202  00332C  C120  F0A3         	movff	_Pmin,___fladd@f2
  2203  003330  C121  F0A4         	movff	_Pmin+1,___fladd@f2+1
  2204  003334  C122  F0A5         	movff	_Pmin+2,___fladd@f2+2
  2205  003338  C123  F0A6         	movff	_Pmin+3,___fladd@f2+3
  2206  00333C  C1E4  F09F         	movff	_park_routine$3672,___fladd@f1
  2207  003340  C1E5  F0A0         	movff	_park_routine$3672+1,___fladd@f1+1
  2208  003344  C1E6  F0A1         	movff	_park_routine$3672+2,___fladd@f1+2
  2209  003348  C1E7  F0A2         	movff	_park_routine$3672+3,___fladd@f1+3
  2210  00334C  ECF0  F01F         	call	___fladd	;wreg free
  2211  003350  C09F  F1E8         	movff	?___fladd,_park_routine$3673
  2212  003354  C0A0  F1E9         	movff	?___fladd+1,_park_routine$3673+1
  2213  003358  C0A1  F1EA         	movff	?___fladd+2,_park_routine$3673+2
  2214  00335C  C0A2  F1EB         	movff	?___fladd+3,_park_routine$3673+3
  2215                           
  2216                           ;parcheggio.c: 363: data_test[0] = ((60 + Pmin + 5)-(n + 15));
  2217  003360  0E00               	movlw	0
  2218  003362  0100               	movlb	0	; () banked
  2219  003364  6FA3               	movwf	___fladd@f2& (0+255),b
  2220  003366  0E00               	movlw	0
  2221  003368  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2222  00336A  0E82               	movlw	130
  2223  00336C  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2224  00336E  0E42               	movlw	66
  2225  003370  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2226  003372  C1E8  F09F         	movff	_park_routine$3673,___fladd@f1
  2227  003376  C1E9  F0A0         	movff	_park_routine$3673+1,___fladd@f1+1
  2228  00337A  C1EA  F0A1         	movff	_park_routine$3673+2,___fladd@f1+2
  2229  00337E  C1EB  F0A2         	movff	_park_routine$3673+3,___fladd@f1+3
  2230  003382  ECF0  F01F         	call	___fladd	;wreg free
  2231  003386  C09F  F0AF         	movff	?___fladd,___fltol@f1
  2232  00338A  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  2233  00338E  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  2234  003392  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  2235  003396  ECFD  F028         	call	___fltol	;wreg free
  2236  00339A  0100               	movlb	0	; () banked
  2237  00339C  51AF               	movf	?___fltol& (0+255),w,b
  2238  00339E  0101               	movlb	1	; () banked
  2239  0033A0  6F7B               	movwf	_data_test& (0+255),b
  2240                           
  2241                           ; BSR set to: 1
  2242                           ;parcheggio.c: 364: asd = 1;
  2243  0033A2  8453               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2244                           
  2245                           ; BSR set to: 1
  2246                           ;parcheggio.c: 365: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2247  0033A4  0E0F               	movlw	15
  2248  0033A6  0100               	movlb	0	; () banked
  2249  0033A8  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2250  0033AA  0E00               	movlw	0
  2251  0033AC  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2252  0033AE  0E00               	movlw	0
  2253  0033B0  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2254  0033B2  0E00               	movlw	0
  2255  0033B4  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2256  0033B6  0E7B               	movlw	low _data_test
  2257  0033B8  0100               	movlb	0	; () banked
  2258  0033BA  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2259  0033BC  0E01               	movlw	high _data_test
  2260  0033BE  0100               	movlb	0	; () banked
  2261  0033C0  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2262  0033C2  0E08               	movlw	8
  2263  0033C4  0100               	movlb	0	; () banked
  2264  0033C6  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2265  0033C8  0EBC               	movlw	188
  2266  0033CA  0100               	movlb	0	; () banked
  2267  0033CC  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2268  0033CE  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2269                           
  2270                           ;parcheggio.c: 366: can_send();
  2271  0033D2  EC17  F02A         	call	_can_send	;wreg free
  2272                           
  2273                           ;parcheggio.c: 367: while (asd == 1);
  2274  0033D6  D000               	goto	l791
  2275  0033D8                     l791:
  2276  0033D8  B453               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2277  0033DA  D7FE               	goto	l791
  2278                           
  2279                           ;parcheggio.c: 369: set_speed = 0;
  2280  0033DC  0E00               	movlw	0
  2281  0033DE  0100               	movlb	0	; () banked
  2282  0033E0  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2283  0033E2  0E00               	movlw	0
  2284  0033E4  6FE5               	movwf	_set_speed& (0+255),b
  2285                           
  2286                           ;parcheggio.c: 370: data_steering[0] = 90;
  2287  0033E6  0E5A               	movlw	90
  2288  0033E8  0101               	movlb	1	; () banked
  2289  0033EA  6F73               	movwf	_data_steering& (0+255),b
  2290                           
  2291                           ;parcheggio.c: 371: data_brake [0] = 0;
  2292  0033EC  0E00               	movlw	0
  2293  0033EE  0101               	movlb	1	; () banked
  2294  0033F0  6F5B               	movwf	_data_brake& (0+255),b
  2295                           
  2296                           ;parcheggio.c: 372: data_brake [1] = 1;
  2297  0033F2  0E01               	movlw	1
  2298  0033F4  0101               	movlb	1	; () banked
  2299  0033F6  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2300                           
  2301                           ; BSR set to: 1
  2302                           ;parcheggio.c: 373: can_send();
  2303  0033F8  EC17  F02A         	call	_can_send	;wreg free
  2304                           
  2305                           ;parcheggio.c: 374: delay_s(1);
  2306  0033FC  0E01               	movlw	1
  2307  0033FE  ECA4  F02E         	call	_delay_s
  2308                           
  2309                           ;parcheggio.c: 376: data_brake [0] = 3;
  2310  003402  0E03               	movlw	3
  2311  003404  0101               	movlb	1	; () banked
  2312  003406  6F5B               	movwf	_data_brake& (0+255),b
  2313                           
  2314                           ; BSR set to: 1
  2315                           ;parcheggio.c: 377: data_brake [1] = 1;
  2316  003408  0E01               	movlw	1
  2317  00340A  0101               	movlb	1	; () banked
  2318  00340C  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2319                           
  2320                           ; BSR set to: 1
  2321                           ;parcheggio.c: 378: set_speed = 300;
  2322  00340E  0E01               	movlw	1
  2323  003410  0100               	movlb	0	; () banked
  2324  003412  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2325  003414  0E2C               	movlw	44
  2326  003416  6FE5               	movwf	_set_speed& (0+255),b
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;parcheggio.c: 379: dir = 0;
  2330  003418  9853               	bcf	_dir/(0+8),_dir& (0+7),c
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;parcheggio.c: 380: data_steering[0] = 180;
  2334  00341A  0EB4               	movlw	180
  2335  00341C  0101               	movlb	1	; () banked
  2336  00341E  6F73               	movwf	_data_steering& (0+255),b
  2337                           
  2338                           ; BSR set to: 1
  2339                           ;parcheggio.c: 381: data_test[0] = prima_sterzata;
  2340  003420  C138  F0AF         	movff	_prima_sterzata,___fltol@f1
  2341  003424  C139  F0B0         	movff	_prima_sterzata+1,___fltol@f1+1
  2342  003428  C13A  F0B1         	movff	_prima_sterzata+2,___fltol@f1+2
  2343  00342C  C13B  F0B2         	movff	_prima_sterzata+3,___fltol@f1+3
  2344  003430  ECFD  F028         	call	___fltol	;wreg free
  2345  003434  0100               	movlb	0	; () banked
  2346  003436  51AF               	movf	?___fltol& (0+255),w,b
  2347  003438  0101               	movlb	1	; () banked
  2348  00343A  6F7B               	movwf	_data_test& (0+255),b
  2349                           
  2350                           ; BSR set to: 1
  2351                           ;parcheggio.c: 382: asd = 1;
  2352  00343C  8453               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2353                           
  2354                           ; BSR set to: 1
  2355                           ;parcheggio.c: 383: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2356  00343E  0E0F               	movlw	15
  2357  003440  0100               	movlb	0	; () banked
  2358  003442  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2359  003444  0E00               	movlw	0
  2360  003446  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2361  003448  0E00               	movlw	0
  2362  00344A  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2363  00344C  0E00               	movlw	0
  2364  00344E  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2365  003450  0E7B               	movlw	low _data_test
  2366  003452  0100               	movlb	0	; () banked
  2367  003454  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2368  003456  0E01               	movlw	high _data_test
  2369  003458  0100               	movlb	0	; () banked
  2370  00345A  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2371  00345C  0E08               	movlw	8
  2372  00345E  0100               	movlb	0	; () banked
  2373  003460  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2374  003462  0EBC               	movlw	188
  2375  003464  0100               	movlb	0	; () banked
  2376  003466  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2377  003468  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2378                           
  2379                           ;parcheggio.c: 384: can_send();
  2380  00346C  EC17  F02A         	call	_can_send	;wreg free
  2381                           
  2382                           ;parcheggio.c: 385: while (asd == 1);
  2383  003470  D000               	goto	l794
  2384  003472                     l794:
  2385  003472  B453               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2386  003474  D7FE               	goto	l794
  2387                           
  2388                           ;parcheggio.c: 386: set_speed = 300;
  2389  003476  0E01               	movlw	1
  2390  003478  0100               	movlb	0	; () banked
  2391  00347A  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2392  00347C  0E2C               	movlw	44
  2393  00347E  6FE5               	movwf	_set_speed& (0+255),b
  2394                           
  2395                           ;parcheggio.c: 387: data_steering[0] = 0;
  2396  003480  0E00               	movlw	0
  2397  003482  0101               	movlb	1	; () banked
  2398  003484  6F73               	movwf	_data_steering& (0+255),b
  2399                           
  2400                           ; BSR set to: 1
  2401                           ;parcheggio.c: 388: asd = 1;
  2402  003486  8453               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2403                           
  2404                           ; BSR set to: 1
  2405                           ;parcheggio.c: 389: data_test[0] = prima_sterzata + 9;
  2406  003488  0E00               	movlw	0
  2407  00348A  0100               	movlb	0	; () banked
  2408  00348C  6FA3               	movwf	___fladd@f2& (0+255),b
  2409  00348E  0E00               	movlw	0
  2410  003490  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2411  003492  0E10               	movlw	16
  2412  003494  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2413  003496  0E41               	movlw	65
  2414  003498  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2415  00349A  C138  F09F         	movff	_prima_sterzata,___fladd@f1
  2416  00349E  C139  F0A0         	movff	_prima_sterzata+1,___fladd@f1+1
  2417  0034A2  C13A  F0A1         	movff	_prima_sterzata+2,___fladd@f1+2
  2418  0034A6  C13B  F0A2         	movff	_prima_sterzata+3,___fladd@f1+3
  2419  0034AA  ECF0  F01F         	call	___fladd	;wreg free
  2420  0034AE  C09F  F0AF         	movff	?___fladd,___fltol@f1
  2421  0034B2  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  2422  0034B6  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  2423  0034BA  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  2424  0034BE  ECFD  F028         	call	___fltol	;wreg free
  2425  0034C2  0100               	movlb	0	; () banked
  2426  0034C4  51AF               	movf	?___fltol& (0+255),w,b
  2427  0034C6  0101               	movlb	1	; () banked
  2428  0034C8  6F7B               	movwf	_data_test& (0+255),b
  2429                           
  2430                           ; BSR set to: 1
  2431                           ;parcheggio.c: 390: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2432  0034CA  0E0F               	movlw	15
  2433  0034CC  0100               	movlb	0	; () banked
  2434  0034CE  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2435  0034D0  0E00               	movlw	0
  2436  0034D2  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2437  0034D4  0E00               	movlw	0
  2438  0034D6  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2439  0034D8  0E00               	movlw	0
  2440  0034DA  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2441  0034DC  0E7B               	movlw	low _data_test
  2442  0034DE  0100               	movlb	0	; () banked
  2443  0034E0  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2444  0034E2  0E01               	movlw	high _data_test
  2445  0034E4  0100               	movlb	0	; () banked
  2446  0034E6  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2447  0034E8  0E08               	movlw	8
  2448  0034EA  0100               	movlb	0	; () banked
  2449  0034EC  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2450  0034EE  0EBC               	movlw	188
  2451  0034F0  0100               	movlb	0	; () banked
  2452  0034F2  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2453  0034F4  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2454                           
  2455                           ;parcheggio.c: 391: can_send();
  2456  0034F8  EC17  F02A         	call	_can_send	;wreg free
  2457                           
  2458                           ;parcheggio.c: 392: while (asd == 1);
  2459  0034FC  D000               	goto	l797
  2460  0034FE                     l797:
  2461  0034FE  B453               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2462  003500  D7FE               	goto	l797
  2463                           
  2464                           ;parcheggio.c: 393: data_brake [0] = 0;
  2465  003502  0E00               	movlw	0
  2466  003504  0101               	movlb	1	; () banked
  2467  003506  6F5B               	movwf	_data_brake& (0+255),b
  2468                           
  2469                           ;parcheggio.c: 394: data_brake [1] = 1;
  2470  003508  0E01               	movlw	1
  2471  00350A  0101               	movlb	1	; () banked
  2472  00350C  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2473                           
  2474                           ;parcheggio.c: 395: set_speed = 0;
  2475  00350E  0E00               	movlw	0
  2476  003510  0100               	movlb	0	; () banked
  2477  003512  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2478  003514  0E00               	movlw	0
  2479  003516  6FE5               	movwf	_set_speed& (0+255),b
  2480                           
  2481                           ;parcheggio.c: 396: data_steering[0] = 90;
  2482  003518  0E5A               	movlw	90
  2483  00351A  0101               	movlb	1	; () banked
  2484  00351C  6F73               	movwf	_data_steering& (0+255),b
  2485                           
  2486                           ; BSR set to: 1
  2487                           ;parcheggio.c: 397: can_send();
  2488  00351E  EC17  F02A         	call	_can_send	;wreg free
  2489                           
  2490                           ;parcheggio.c: 398: delay_s(1);
  2491  003522  0E01               	movlw	1
  2492  003524  ECA4  F02E         	call	_delay_s
  2493                           
  2494                           ;parcheggio.c: 399: avvicinamento = 1;
  2495  003528  8653               	bsf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  2496                           
  2497                           ;parcheggio.c: 400: if (sensor_distance [6] > 20) {
  2498  00352A  500E               	movf	_sensor_distance+13,w,c	;volatile
  2499  00352C  E104               	bnz	u8330
  2500  00352E  0E15               	movlw	21
  2501  003530  5C0D               	subwf	_sensor_distance+12,w,c	;volatile
  2502  003532  A0D8               	btfss	status,0,c
  2503  003534  D01A               	goto	l6710
  2504  003536                     u8330:
  2505                           
  2506                           ;parcheggio.c: 401: data_brake [0] = 3;
  2507  003536  0E03               	movlw	3
  2508  003538  0101               	movlb	1	; () banked
  2509  00353A  6F5B               	movwf	_data_brake& (0+255),b
  2510                           
  2511                           ;parcheggio.c: 402: data_brake [1] = 1;
  2512  00353C  0E01               	movlw	1
  2513  00353E  0101               	movlb	1	; () banked
  2514  003540  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2515                           
  2516                           ;parcheggio.c: 403: set_speed = 300;
  2517  003542  0E01               	movlw	1
  2518  003544  0100               	movlb	0	; () banked
  2519  003546  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2520  003548  0E2C               	movlw	44
  2521  00354A  6FE5               	movwf	_set_speed& (0+255),b
  2522                           
  2523                           ;parcheggio.c: 404: data_steering[0] = 90;
  2524  00354C  0E5A               	movlw	90
  2525  00354E  0101               	movlb	1	; () banked
  2526  003550  6F73               	movwf	_data_steering& (0+255),b
  2527                           
  2528                           ; BSR set to: 1
  2529                           ;parcheggio.c: 405: dir = 1;
  2530  003552  8853               	bsf	_dir/(0+8),_dir& (0+7),c
  2531                           
  2532                           ; BSR set to: 1
  2533                           ;parcheggio.c: 406: can_send();
  2534  003554  EC17  F02A         	call	_can_send	;wreg free
  2535                           
  2536                           ;parcheggio.c: 407: while (sensor_distance [6] > 20);
  2537  003558  D000               	goto	l6708
  2538  00355A                     l6708:
  2539  00355A  500E               	movf	_sensor_distance+13,w,c	;volatile
  2540  00355C  E1FE               	bnz	l6708
  2541  00355E  0E15               	movlw	21
  2542  003560  5C0D               	subwf	_sensor_distance+12,w,c	;volatile
  2543  003562  A0D8               	btfss	status,0,c
  2544  003564  D002               	goto	l6710
  2545  003566  D7F9               	goto	l6708
  2546  003568  D000               	goto	l6710
  2547  00356A                     l6710:
  2548                           
  2549                           ;parcheggio.c: 408: }
  2550                           ;parcheggio.c: 409: data_brake [0] = 0;
  2551  00356A  0E00               	movlw	0
  2552  00356C  0101               	movlb	1	; () banked
  2553  00356E  6F5B               	movwf	_data_brake& (0+255),b
  2554                           
  2555                           ;parcheggio.c: 410: data_brake [1] = 1;
  2556  003570  0E01               	movlw	1
  2557  003572  0101               	movlb	1	; () banked
  2558  003574  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2559                           
  2560                           ;parcheggio.c: 411: set_speed = 0;
  2561  003576  0E00               	movlw	0
  2562  003578  0100               	movlb	0	; () banked
  2563  00357A  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2564  00357C  0E00               	movlw	0
  2565  00357E  6FE5               	movwf	_set_speed& (0+255),b
  2566                           
  2567                           ;parcheggio.c: 412: data_steering[0] = 90;
  2568  003580  0E5A               	movlw	90
  2569  003582  0101               	movlb	1	; () banked
  2570  003584  6F73               	movwf	_data_steering& (0+255),b
  2571                           
  2572                           ; BSR set to: 1
  2573                           ;parcheggio.c: 413: dir = 0;
  2574  003586  9853               	bcf	_dir/(0+8),_dir& (0+7),c
  2575                           
  2576                           ; BSR set to: 1
  2577                           ;parcheggio.c: 414: can_send();
  2578  003588  EC17  F02A         	call	_can_send	;wreg free
  2579                           
  2580                           ;parcheggio.c: 415: delay_s(1);
  2581  00358C  0E01               	movlw	1
  2582  00358E  ECA4  F02E         	call	_delay_s
  2583                           
  2584                           ;parcheggio.c: 416: data[0] = 3;
  2585  003592  0E03               	movlw	3
  2586  003594  0101               	movlb	1	; () banked
  2587  003596  6F53               	movwf	_data& (0+255),b	;volatile
  2588                           
  2589                           ; BSR set to: 1
  2590                           
  2591                           ;parcheggio.c: 417: while (!CANisTxReady());
  2592  003598  D000               	goto	l6720
  2593  00359A                     l6720:
  2594  00359A  ECE5  F02E         	call	_CANisTxReady	;wreg free
  2595  00359E  0900               	iorlw	0
  2596  0035A0  B4D8               	btfsc	status,2,c
  2597  0035A2  D7FB               	goto	l6720
  2598                           
  2599                           ;parcheggio.c: 418: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  2600  0035A4  0E0D               	movlw	13
  2601  0035A6  0100               	movlb	0	; () banked
  2602  0035A8  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2603  0035AA  0E00               	movlw	0
  2604  0035AC  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2605  0035AE  0E00               	movlw	0
  2606  0035B0  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2607  0035B2  0E00               	movlw	0
  2608  0035B4  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2609  0035B6  0E53               	movlw	low _data
  2610  0035B8  0100               	movlb	0	; () banked
  2611  0035BA  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2612  0035BC  0E01               	movlw	high _data
  2613  0035BE  0100               	movlb	0	; () banked
  2614  0035C0  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2615  0035C2  0E08               	movlw	8
  2616  0035C4  0100               	movlb	0	; () banked
  2617  0035C6  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2618  0035C8  0EBC               	movlw	188
  2619  0035CA  0100               	movlb	0	; () banked
  2620  0035CC  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2621  0035CE  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2622                           
  2623                           ;parcheggio.c: 419: delay_ms(100);
  2624  0035D2  0E00               	movlw	0
  2625  0035D4  0100               	movlb	0	; () banked
  2626  0035D6  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  2627  0035D8  0E64               	movlw	100
  2628  0035DA  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  2629  0035DC  EC36  F02E         	call	_delay_ms	;wreg free
  2630  0035E0  00FF               	reset		;# 
  2631  0035E2  D000               	goto	l6726
  2632  0035E4                     l6726:
  2633  0035E4  AA81               	btfss	3969,5,c	;volatile
  2634  0035E6  0012               	return	
  2635  0035E8  A253               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2636  0035EA  0012               	return	
  2637  0035EC  AC54               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  2638  0035EE  0012               	return	
  2639  0035F0  D636               	goto	l790
  2640  0035F2  0012               	return	
  2641  0035F4  0012               	return		;funcret
  2642  0035F6                     __end_of_park_routine:
  2643                           	opt stack 0
  2644                           tblptru	equ	0xFF8
  2645                           tblptrh	equ	0xFF7
  2646                           tblptrl	equ	0xFF6
  2647                           tablat	equ	0xFF5
  2648                           postinc0	equ	0xFEE
  2649                           wreg	equ	0xFE8
  2650                           postdec1	equ	0xFE5
  2651                           fsr1l	equ	0xFE1
  2652                           postinc2	equ	0xFDE
  2653                           postdec2	equ	0xFDD
  2654                           status	equ	0xFD8
  2655                           
  2656 ;; *************** function _parallelo *****************
  2657 ;; Defined at:
  2658 ;;		line 447 in file "parcheggio.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;		None
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;		None
  2663 ;; Return value:  Size  Location     Type
  2664 ;;		None               void
  2665 ;; Registers used:
  2666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2667 ;; Tracked objects:
  2668 ;;		On entry : 0/0
  2669 ;;		On exit  : 0/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2674 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2675 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2676 ;;Total ram usage:        2 bytes
  2677 ;; Hardware stack levels used:    1
  2678 ;; Hardware stack levels required when called:   10
  2679 ;; This function calls:
  2680 ;;		___awtofl
  2681 ;;		___fladd
  2682 ;;		___fldiv
  2683 ;;		___flge
  2684 ;;		___flmul
  2685 ;;		___fltol
  2686 ;;		_abs
  2687 ;;		_asin
  2688 ;;		_can_send
  2689 ;;		_sqrt
  2690 ;; This function is called by:
  2691 ;;		_park_search
  2692 ;;		_park_routine
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           	psect	text3
  2697  00424C                     __ptext3:
  2698                           	opt stack 0
  2699  00424C                     _parallelo:
  2700                           	opt stack 19
  2701                           
  2702                           ;parcheggio.c: 448: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  2703                           
  2704                           ;incstack = 0
  2705  00424C  EE20  F003         	lfsr	2,_sensor_distance+2	;volatile
  2706  004250  CFDE F0D5          	movff	postinc2,??_parallelo
  2707  004254  CFDD F0D6          	movff	postdec2,??_parallelo+1
  2708  004258  0100               	movlb	0	; () banked
  2709  00425A  1FD5               	comf	??_parallelo& (0+255),f,b
  2710  00425C  1FD6               	comf	(??_parallelo+1)& (0+255),f,b
  2711  00425E  4BD5               	infsnz	??_parallelo& (0+255),f,b
  2712  004260  2BD6               	incf	(??_parallelo+1)& (0+255),f,b
  2713  004262  5001               	movf	_sensor_distance,w,c	;volatile
  2714  004264  0100               	movlb	0	; () banked
  2715  004266  25D5               	addwf	??_parallelo& (0+255),w,b
  2716  004268  0100               	movlb	0	; () banked
  2717  00426A  6F77               	movwf	abs@a& (0+255),b
  2718  00426C  5002               	movf	_sensor_distance+1,w,c	;volatile
  2719  00426E  0100               	movlb	0	; () banked
  2720  004270  21D6               	addwfc	(??_parallelo+1)& (0+255),w,b
  2721  004272  0100               	movlb	0	; () banked
  2722  004274  6F78               	movwf	(abs@a+1)& (0+255),b
  2723  004276  ECBB  F02E         	call	_abs	;wreg free
  2724  00427A  C077  F081         	movff	?_abs,___awtofl@c
  2725  00427E  C078  F082         	movff	?_abs+1,___awtofl@c+1
  2726  004282  ECD3  F02D         	call	___awtofl	;wreg free
  2727  004286  C081  F0D7         	movff	?___awtofl,_alignment_gap
  2728  00428A  C082  F0D8         	movff	?___awtofl+1,_alignment_gap+1
  2729  00428E  C083  F0D9         	movff	?___awtofl+2,_alignment_gap+2
  2730  004292  C084  F0DA         	movff	?___awtofl+3,_alignment_gap+3
  2731                           
  2732                           ;parcheggio.c: 449: if (alignment_gap < 30) {
  2733  004296  C0D7  F0B3         	movff	_alignment_gap,___flge@ff1
  2734  00429A  C0D8  F0B4         	movff	_alignment_gap+1,___flge@ff1+1
  2735  00429E  C0D9  F0B5         	movff	_alignment_gap+2,___flge@ff1+2
  2736  0042A2  C0DA  F0B6         	movff	_alignment_gap+3,___flge@ff1+3
  2737  0042A6  0E00               	movlw	0
  2738  0042A8  0100               	movlb	0	; () banked
  2739  0042AA  6FB7               	movwf	___flge@ff2& (0+255),b
  2740  0042AC  0E00               	movlw	0
  2741  0042AE  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  2742  0042B0  0EF0               	movlw	240
  2743  0042B2  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  2744  0042B4  0E41               	movlw	65
  2745  0042B6  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  2746  0042B8  EC9F  F02A         	call	___flge	;wreg free
  2747  0042BC  0100               	movlb	0	; () banked
  2748  0042BE  B0D8               	btfsc	status,0,c
  2749  0042C0  D0EC               	goto	l6476
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;parcheggio.c: 450: if ((sensor_distance[0] < 30) && (sensor_distance[1] < 30)) {
  2753  0042C2  5002               	movf	_sensor_distance+1,w,c	;volatile
  2754  0042C4  E103               	bnz	u8001
  2755  0042C6  0E1E               	movlw	30
  2756  0042C8  5C01               	subwf	_sensor_distance,w,c	;volatile
  2757  0042CA  B0D8               	btfsc	status,0,c
  2758  0042CC                     u8001:
  2759  0042CC  0012               	return	
  2760                           
  2761                           ; BSR set to: 0
  2762  0042CE  5004               	movf	_sensor_distance+3,w,c	;volatile
  2763  0042D0  E103               	bnz	u8011
  2764  0042D2  0E1E               	movlw	30
  2765  0042D4  5C03               	subwf	_sensor_distance+2,w,c	;volatile
  2766  0042D6  B0D8               	btfsc	status,0,c
  2767  0042D8                     u8011:
  2768  0042D8  0012               	return	
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;parcheggio.c: 451: x = (((6)*(6)) + ((alignment_gap * alignment_gap)));
  2772  0042DA  C0D7  F094         	movff	_alignment_gap,___flmul@f2
  2773  0042DE  C0D8  F095         	movff	_alignment_gap+1,___flmul@f2+1
  2774  0042E2  C0D9  F096         	movff	_alignment_gap+2,___flmul@f2+2
  2775  0042E6  C0DA  F097         	movff	_alignment_gap+3,___flmul@f2+3
  2776  0042EA  C0D7  F090         	movff	_alignment_gap,___flmul@f1
  2777  0042EE  C0D8  F091         	movff	_alignment_gap+1,___flmul@f1+1
  2778  0042F2  C0D9  F092         	movff	_alignment_gap+2,___flmul@f1+2
  2779  0042F6  C0DA  F093         	movff	_alignment_gap+3,___flmul@f1+3
  2780  0042FA  EC1F  F027         	call	___flmul	;wreg free
  2781  0042FE  C090  F09F         	movff	?___flmul,___fladd@f1
  2782  004302  C091  F0A0         	movff	?___flmul+1,___fladd@f1+1
  2783  004306  C092  F0A1         	movff	?___flmul+2,___fladd@f1+2
  2784  00430A  C093  F0A2         	movff	?___flmul+3,___fladd@f1+3
  2785  00430E  0E00               	movlw	0
  2786  004310  0100               	movlb	0	; () banked
  2787  004312  6FA3               	movwf	___fladd@f2& (0+255),b
  2788  004314  0E00               	movlw	0
  2789  004316  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2790  004318  0E10               	movlw	16
  2791  00431A  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2792  00431C  0E42               	movlw	66
  2793  00431E  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2794  004320  ECF0  F01F         	call	___fladd	;wreg free
  2795  004324  C09F  F13C         	movff	?___fladd,_x
  2796  004328  C0A0  F13D         	movff	?___fladd+1,_x+1
  2797  00432C  C0A1  F13E         	movff	?___fladd+2,_x+2
  2798  004330  C0A2  F13F         	movff	?___fladd+3,_x+3
  2799                           
  2800                           ;parcheggio.c: 452: x = sqrt(x);
  2801  004334  C13C  F0D1         	movff	_x,sqrt@y
  2802  004338  C13D  F0D2         	movff	_x+1,sqrt@y+1
  2803  00433C  C13E  F0D3         	movff	_x+2,sqrt@y+2
  2804  004340  C13F  F0D4         	movff	_x+3,sqrt@y+3
  2805  004344  EC7F  F023         	call	_sqrt	;wreg free
  2806  004348  C0D1  F13C         	movff	?_sqrt,_x
  2807  00434C  C0D2  F13D         	movff	?_sqrt+1,_x+1
  2808  004350  C0D3  F13E         	movff	?_sqrt+2,_x+2
  2809  004354  C0D4  F13F         	movff	?_sqrt+3,_x+3
  2810                           
  2811                           ;parcheggio.c: 453: z = alignment_gap / x;
  2812  004358  C0D7  F081         	movff	_alignment_gap,___fldiv@f1
  2813  00435C  C0D8  F082         	movff	_alignment_gap+1,___fldiv@f1+1
  2814  004360  C0D9  F083         	movff	_alignment_gap+2,___fldiv@f1+2
  2815  004364  C0DA  F084         	movff	_alignment_gap+3,___fldiv@f1+3
  2816  004368  C13C  F085         	movff	_x,___fldiv@f2
  2817  00436C  C13D  F086         	movff	_x+1,___fldiv@f2+1
  2818  004370  C13E  F087         	movff	_x+2,___fldiv@f2+2
  2819  004374  C13F  F088         	movff	_x+3,___fldiv@f2+3
  2820  004378  ECD1  F027         	call	___fldiv	;wreg free
  2821  00437C  C081  F0DB         	movff	?___fldiv,_z
  2822  004380  C082  F0DC         	movff	?___fldiv+1,_z+1
  2823  004384  C083  F0DD         	movff	?___fldiv+2,_z+2
  2824  004388  C084  F0DE         	movff	?___fldiv+3,_z+3
  2825                           
  2826                           ;parcheggio.c: 454: z = asin(z);
  2827  00438C  C0DB  F1A0         	movff	_z,asin@x
  2828  004390  C0DC  F1A1         	movff	_z+1,asin@x+1
  2829  004394  C0DD  F1A2         	movff	_z+2,asin@x+2
  2830  004398  C0DE  F1A3         	movff	_z+3,asin@x+3
  2831  00439C  ECD0  F01C         	call	_asin	;wreg free
  2832  0043A0  C1A0  F0DB         	movff	?_asin,_z
  2833  0043A4  C1A1  F0DC         	movff	?_asin+1,_z+1
  2834  0043A8  C1A2  F0DD         	movff	?_asin+2,_z+2
  2835  0043AC  C1A3  F0DE         	movff	?_asin+3,_z+3
  2836                           
  2837                           ;parcheggio.c: 455: z = z / 3.14159265358979323846 * 180;
  2838  0043B0  0EDB               	movlw	219
  2839  0043B2  0100               	movlb	0	; () banked
  2840  0043B4  6F85               	movwf	___fldiv@f2& (0+255),b
  2841  0043B6  0E0F               	movlw	15
  2842  0043B8  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  2843  0043BA  0E49               	movlw	73
  2844  0043BC  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  2845  0043BE  0E40               	movlw	64
  2846  0043C0  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  2847  0043C2  C0DB  F081         	movff	_z,___fldiv@f1
  2848  0043C6  C0DC  F082         	movff	_z+1,___fldiv@f1+1
  2849  0043CA  C0DD  F083         	movff	_z+2,___fldiv@f1+2
  2850  0043CE  C0DE  F084         	movff	_z+3,___fldiv@f1+3
  2851  0043D2  ECD1  F027         	call	___fldiv	;wreg free
  2852  0043D6  C081  F090         	movff	?___fldiv,___flmul@f1
  2853  0043DA  C082  F091         	movff	?___fldiv+1,___flmul@f1+1
  2854  0043DE  C083  F092         	movff	?___fldiv+2,___flmul@f1+2
  2855  0043E2  C084  F093         	movff	?___fldiv+3,___flmul@f1+3
  2856  0043E6  0E00               	movlw	0
  2857  0043E8  0100               	movlb	0	; () banked
  2858  0043EA  6F94               	movwf	___flmul@f2& (0+255),b
  2859  0043EC  0E00               	movlw	0
  2860  0043EE  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  2861  0043F0  0E34               	movlw	52
  2862  0043F2  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  2863  0043F4  0E43               	movlw	67
  2864  0043F6  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  2865  0043F8  EC1F  F027         	call	___flmul	;wreg free
  2866  0043FC  C090  F0DB         	movff	?___flmul,_z
  2867  004400  C091  F0DC         	movff	?___flmul+1,_z+1
  2868  004404  C092  F0DD         	movff	?___flmul+2,_z+2
  2869  004408  C093  F0DE         	movff	?___flmul+3,_z+3
  2870                           
  2871                           ;parcheggio.c: 456: data_correction[0] = z;
  2872  00440C  C0DB  F0AF         	movff	_z,___fltol@f1
  2873  004410  C0DC  F0B0         	movff	_z+1,___fltol@f1+1
  2874  004414  C0DD  F0B1         	movff	_z+2,___fltol@f1+2
  2875  004418  C0DE  F0B2         	movff	_z+3,___fltol@f1+3
  2876  00441C  ECFD  F028         	call	___fltol	;wreg free
  2877  004420  0100               	movlb	0	; () banked
  2878  004422  51AF               	movf	?___fltol& (0+255),w,b
  2879  004424  0101               	movlb	1	; () banked
  2880  004426  6F63               	movwf	_data_correction& (0+255),b
  2881                           
  2882                           ; BSR set to: 1
  2883                           ;parcheggio.c: 458: if (sensor_distance[0] < sensor_distance[1]) {
  2884  004428  5003               	movf	_sensor_distance+2,w,c	;volatile
  2885  00442A  5C01               	subwf	_sensor_distance,w,c	;volatile
  2886  00442C  5004               	movf	_sensor_distance+3,w,c	;volatile
  2887  00442E  5802               	subwfb	_sensor_distance+1,w,c	;volatile
  2888  004430  B0D8               	btfsc	status,0,c
  2889  004432  D002               	goto	l6468
  2890                           
  2891                           ; BSR set to: 1
  2892                           ;parcheggio.c: 459: data_correction[1] = 0;
  2893  004434  0E00               	movlw	0
  2894  004436  D001               	goto	L1
  2895  004438                     l6468:
  2896                           
  2897                           ; BSR set to: 1
  2898                           ;parcheggio.c: 461: data_correction[1] = 1;
  2899  004438  0E01               	movlw	1
  2900  00443A                     L1:
  2901  00443A  0101               	movlb	1	; () banked
  2902  00443C  6F64               	movwf	(_data_correction+1)& (0+255),b
  2903  00443E  D000               	goto	l6470
  2904  004440                     l6470:
  2905                           
  2906                           ; BSR set to: 1
  2907                           ;parcheggio.c: 462: }
  2908                           ;parcheggio.c: 463: if ((old_alignment_gap != alignment_gap) || (old_dir_correction != d
      +                          ata_correction[1])) {
  2909  004440  0100               	movlb	0	; () banked
  2910  004442  51D7               	movf	_alignment_gap& (0+255),w,b
  2911  004444  0101               	movlb	1	; () banked
  2912  004446  1934               	xorwf	_old_alignment_gap& (0+255),w,b
  2913  004448  E117               	bnz	l836
  2914  00444A  0100               	movlb	0	; () banked
  2915  00444C  51D8               	movf	(_alignment_gap+1)& (0+255),w,b
  2916  00444E  0101               	movlb	1	; () banked
  2917  004450  1935               	xorwf	(_old_alignment_gap+1)& (0+255),w,b
  2918  004452  E112               	bnz	l836
  2919  004454  0100               	movlb	0	; () banked
  2920  004456  51D9               	movf	(_alignment_gap+2)& (0+255),w,b
  2921  004458  0101               	movlb	1	; () banked
  2922  00445A  1936               	xorwf	(_old_alignment_gap+2)& (0+255),w,b
  2923  00445C  E10D               	bnz	l836
  2924  00445E  0100               	movlb	0	; () banked
  2925  004460  51DA               	movf	(_alignment_gap+3)& (0+255),w,b
  2926  004462  0101               	movlb	1	; () banked
  2927  004464  1937               	xorwf	(_old_alignment_gap+3)& (0+255),w,b
  2928  004466  A4D8               	btfss	status,2,c
  2929  004468  D007               	goto	l836
  2930                           
  2931                           ; BSR set to: 1
  2932  00446A  0E00               	movlw	0
  2933  00446C  B654               	btfsc	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  2934  00446E  0E01               	movlw	1
  2935  004470  0101               	movlb	1	; () banked
  2936  004472  1964               	xorwf	(_data_correction+1)& (0+255),w,b
  2937  004474  B4D8               	btfsc	status,2,c
  2938  004476  0012               	return	
  2939  004478                     l836:
  2940                           
  2941                           ; BSR set to: 1
  2942                           ;parcheggio.c: 464: old_alignment_gap = alignment_gap;
  2943  004478  C0D7  F134         	movff	_alignment_gap,_old_alignment_gap
  2944  00447C  C0D8  F135         	movff	_alignment_gap+1,_old_alignment_gap+1
  2945  004480  C0D9  F136         	movff	_alignment_gap+2,_old_alignment_gap+2
  2946  004484  C0DA  F137         	movff	_alignment_gap+3,_old_alignment_gap+3
  2947                           
  2948                           ;parcheggio.c: 465: old_dir_correction = data_correction[1];
  2949  004488  0101               	movlb	1	; () banked
  2950  00448A  B164               	btfsc	(_data_correction+1)& (0+255),0,b
  2951  00448C  D002               	bra	u8055
  2952  00448E  9654               	bcf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  2953  004490  D001               	bra	u8056
  2954  004492                     u8055:
  2955  004492  8654               	bsf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  2956  004494                     u8056:
  2957                           
  2958                           ;parcheggio.c: 466: can_send();
  2959  004494  EC17  F02A         	call	_can_send	;wreg free
  2960                           
  2961                           ;parcheggio.c: 467: }
  2962                           ;parcheggio.c: 468: }
  2963                           ;parcheggio.c: 469: } else {
  2964  004498  0012               	return	
  2965  00449A                     l6476:
  2966                           
  2967                           ;parcheggio.c: 470: data_correction[0] = 0;
  2968  00449A  0E00               	movlw	0
  2969  00449C  0101               	movlb	1	; () banked
  2970  00449E  6F63               	movwf	_data_correction& (0+255),b
  2971                           
  2972                           ; BSR set to: 1
  2973                           ;parcheggio.c: 471: can_send();
  2974  0044A0  EC17  F02A         	call	_can_send	;wreg free
  2975  0044A4  0012               	return	
  2976  0044A6  0012               	return		;funcret
  2977  0044A8                     __end_of_parallelo:
  2978                           	opt stack 0
  2979                           tblptru	equ	0xFF8
  2980                           tblptrh	equ	0xFF7
  2981                           tblptrl	equ	0xFF6
  2982                           tablat	equ	0xFF5
  2983                           postinc0	equ	0xFEE
  2984                           wreg	equ	0xFE8
  2985                           postdec1	equ	0xFE5
  2986                           fsr1l	equ	0xFE1
  2987                           postinc2	equ	0xFDE
  2988                           postdec2	equ	0xFDD
  2989                           status	equ	0xFD8
  2990                           
  2991 ;; *************** function _can_send *****************
  2992 ;; Defined at:
  2993 ;;		line 424 in file "parcheggio.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;		None
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;		None               void
  3000 ;; Registers used:
  3001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3011 ;;Total ram usage:        0 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    6
  3014 ;; This function calls:
  3015 ;;		_CANisTxReady
  3016 ;;		_CANsendMessage
  3017 ;; This function is called by:
  3018 ;;		_park_routine
  3019 ;;		_parallelo
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text4
  3024  00542E                     __ptext4:
  3025                           	opt stack 0
  3026  00542E                     _can_send:
  3027                           	opt stack 22
  3028                           
  3029                           ;parcheggio.c: 425: if (start_operation == 1) {
  3030                           
  3031                           ;incstack = 0
  3032  00542E  BC54               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  3033  005430  D002               	goto	l4876
  3034  005432  D067               	goto	l4896
  3035                           
  3036                           ;parcheggio.c: 427: while (CANisTxReady() != 1);
  3037  005434  D000               	goto	l4876
  3038  005436                     l4876:
  3039  005436  ECE5  F02E         	call	_CANisTxReady	;wreg free
  3040  00543A  06E8               	decf	wreg,f,c
  3041  00543C  A4D8               	btfss	status,2,c
  3042  00543E  D7FB               	goto	l4876
  3043                           
  3044                           ;parcheggio.c: 428: CANsendMessage(0b00000000111, data_steering, 8, CAN_CONFIG_STD_MSG &
      +                           CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3045  005440  0E07               	movlw	7
  3046  005442  0100               	movlb	0	; () banked
  3047  005444  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3048  005446  0E00               	movlw	0
  3049  005448  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3050  00544A  0E00               	movlw	0
  3051  00544C  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3052  00544E  0E00               	movlw	0
  3053  005450  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3054  005452  0E73               	movlw	low _data_steering
  3055  005454  0100               	movlb	0	; () banked
  3056  005456  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3057  005458  0E01               	movlw	high _data_steering
  3058  00545A  0100               	movlb	0	; () banked
  3059  00545C  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3060  00545E  0E08               	movlw	8
  3061  005460  0100               	movlb	0	; () banked
  3062  005462  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3063  005464  0EBC               	movlw	188
  3064  005466  0100               	movlb	0	; () banked
  3065  005468  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3066  00546A  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3067                           
  3068                           ;parcheggio.c: 431: data_speed[0] = set_speed;
  3069  00546E  C0E5  F16B         	movff	_set_speed,_data_speed
  3070                           
  3071                           ;parcheggio.c: 432: data_speed[1] = (set_speed >> 8);
  3072  005472  0100               	movlb	0	; () banked
  3073  005474  51E6               	movf	(_set_speed+1)& (0+255),w,b
  3074  005476  0101               	movlb	1	; () banked
  3075  005478  6F6C               	movwf	(_data_speed+1)& (0+255),b
  3076                           
  3077                           ; BSR set to: 1
  3078                           ;parcheggio.c: 433: data_speed[2] = dir;
  3079  00547A  0E00               	movlw	0
  3080  00547C  B853               	btfsc	_dir/(0+8),_dir& (0+7),c
  3081  00547E  0E01               	movlw	1
  3082  005480  0101               	movlb	1	; () banked
  3083  005482  6F6D               	movwf	(_data_speed+2)& (0+255),b
  3084                           
  3085                           ; BSR set to: 1
  3086                           
  3087                           ;parcheggio.c: 434: while (CANisTxReady() != 1);
  3088  005484  D000               	goto	l4886
  3089  005486                     l4886:
  3090  005486  ECE5  F02E         	call	_CANisTxReady	;wreg free
  3091  00548A  06E8               	decf	wreg,f,c
  3092  00548C  A4D8               	btfss	status,2,c
  3093  00548E  D7FB               	goto	l4886
  3094                           
  3095                           ;parcheggio.c: 435: CANsendMessage(0b00000000101, data_speed, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3096  005490  0E05               	movlw	5
  3097  005492  0100               	movlb	0	; () banked
  3098  005494  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3099  005496  0E00               	movlw	0
  3100  005498  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3101  00549A  0E00               	movlw	0
  3102  00549C  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3103  00549E  0E00               	movlw	0
  3104  0054A0  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3105  0054A2  0E6B               	movlw	low _data_speed
  3106  0054A4  0100               	movlb	0	; () banked
  3107  0054A6  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3108  0054A8  0E01               	movlw	high _data_speed
  3109  0054AA  0100               	movlb	0	; () banked
  3110  0054AC  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3111  0054AE  0E08               	movlw	8
  3112  0054B0  0100               	movlb	0	; () banked
  3113  0054B2  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3114  0054B4  0EBC               	movlw	188
  3115  0054B6  0100               	movlb	0	; () banked
  3116  0054B8  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3117  0054BA  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3118                           
  3119                           ;parcheggio.c: 438: data_brake[1] = 0;
  3120  0054BE  0E00               	movlw	0
  3121  0054C0  0101               	movlb	1	; () banked
  3122  0054C2  6F5C               	movwf	(_data_brake+1)& (0+255),b
  3123                           
  3124                           ; BSR set to: 1
  3125                           
  3126                           ;parcheggio.c: 439: while (CANisTxReady() != 1);
  3127  0054C4  D000               	goto	l4892
  3128  0054C6                     l4892:
  3129  0054C6  ECE5  F02E         	call	_CANisTxReady	;wreg free
  3130  0054CA  06E8               	decf	wreg,f,c
  3131  0054CC  A4D8               	btfss	status,2,c
  3132  0054CE  D7FB               	goto	l4892
  3133                           
  3134                           ;parcheggio.c: 440: CANsendMessage(0b00000000110, data_brake, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3135  0054D0  0E06               	movlw	6
  3136  0054D2  0100               	movlb	0	; () banked
  3137  0054D4  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3138  0054D6  0E00               	movlw	0
  3139  0054D8  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3140  0054DA  0E00               	movlw	0
  3141  0054DC  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3142  0054DE  0E00               	movlw	0
  3143  0054E0  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3144  0054E2  0E5B               	movlw	low _data_brake
  3145  0054E4  0100               	movlb	0	; () banked
  3146  0054E6  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3147  0054E8  0E01               	movlw	high _data_brake
  3148  0054EA  0100               	movlb	0	; () banked
  3149  0054EC  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3150  0054EE  0E08               	movlw	8
  3151  0054F0  0100               	movlb	0	; () banked
  3152  0054F2  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3153  0054F4  0EBC               	movlw	188
  3154  0054F6  0100               	movlb	0	; () banked
  3155  0054F8  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3156  0054FA  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3157                           
  3158                           ;parcheggio.c: 441: } else {
  3159  0054FE  0012               	return	
  3160                           
  3161                           ;parcheggio.c: 442: while (CANisTxReady() != 1);
  3162  005500  D000               	goto	l4896
  3163  005502                     l4896:
  3164  005502  ECE5  F02E         	call	_CANisTxReady	;wreg free
  3165  005506  06E8               	decf	wreg,f,c
  3166  005508  A4D8               	btfss	status,2,c
  3167  00550A  D7FB               	goto	l4896
  3168                           
  3169                           ;parcheggio.c: 443: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3170  00550C  0E10               	movlw	16
  3171  00550E  0100               	movlb	0	; () banked
  3172  005510  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3173  005512  0E00               	movlw	0
  3174  005514  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3175  005516  0E00               	movlw	0
  3176  005518  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3177  00551A  0E00               	movlw	0
  3178  00551C  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3179  00551E  0E63               	movlw	low _data_correction
  3180  005520  0100               	movlb	0	; () banked
  3181  005522  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3182  005524  0E01               	movlw	high _data_correction
  3183  005526  0100               	movlb	0	; () banked
  3184  005528  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3185  00552A  0E08               	movlw	8
  3186  00552C  0100               	movlb	0	; () banked
  3187  00552E  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3188  005530  0EBC               	movlw	188
  3189  005532  0100               	movlb	0	; () banked
  3190  005534  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3191  005536  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3192  00553A  0012               	return	
  3193  00553C  0012               	return		;funcret
  3194  00553E                     __end_of_can_send:
  3195                           	opt stack 0
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           tblptrl	equ	0xFF6
  3199                           tablat	equ	0xFF5
  3200                           postinc0	equ	0xFEE
  3201                           wreg	equ	0xFE8
  3202                           postdec1	equ	0xFE5
  3203                           fsr1l	equ	0xFE1
  3204                           postinc2	equ	0xFDE
  3205                           postdec2	equ	0xFDD
  3206                           status	equ	0xFD8
  3207                           
  3208 ;; *************** function _CANsendMessage *****************
  3209 ;; Defined at:
  3210 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  3211 ;; Parameters:    Size  Location     Type
  3212 ;;  identifier      4   23[BANK0 ] unsigned long 
  3213 ;;  data            2   27[BANK0 ] PTR unsigned char 
  3214 ;;		 -> data_speed(8), data_brake(8), data_steering(8), data_correction(8), 
  3215 ;;		 -> data_test(8), data(8), sensor_distance_short(8), 
  3216 ;;  dataLength      1   29[BANK0 ] unsigned char 
  3217 ;;  flags           1   30[BANK0 ] enum E16376
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  tamp            4   35[BANK0 ] unsigned long 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;		None               void
  3222 ;; Registers used:
  3223 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3229 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3230 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3231 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3232 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3233 ;;Total ram usage:       16 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    5
  3236 ;; This function calls:
  3237 ;;		Nothing
  3238 ;; This function is called by:
  3239 ;;		_main
  3240 ;;		_park_search
  3241 ;;		_park_routine
  3242 ;;		_can_send
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text5
  3247  00187C                     __ptext5:
  3248                           	opt stack 0
  3249  00187C                     _CANsendMessage:
  3250                           	opt stack 22
  3251                           
  3252                           ;inc\CANlib.h: 296: unsigned long tamp;
  3253                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
  3254                           
  3255                           ;incstack = 0
  3256  00187C  010F               	movlb	15	; () banked
  3257  00187E  B740               	btfsc	64,3,b	;volatile
  3258  001880  D142               	goto	l363
  3259                           
  3260                           ; BSR set to: 15
  3261                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
  3262  001882  C07D  FF45         	movff	CANsendMessage@dataLength,3909	;volatile
  3263                           
  3264                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
  3265  001886  0100               	movlb	0	; () banked
  3266  001888  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  3267  00188A  D003               	goto	l364
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
  3271  00188C  010F               	movlb	15	; () banked
  3272  00188E  8D45               	bsf	69,6,b	;volatile
  3273  001890  D002               	goto	l365
  3274  001892                     l364:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;inc\CANlib.h: 302: else
  3278                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
  3279  001892  010F               	movlb	15	; () banked
  3280  001894  9D45               	bcf	69,6,b	;volatile
  3281  001896                     l365:
  3282                           
  3283                           ; BSR set to: 15
  3284                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
  3285  001896  0100               	movlb	0	; () banked
  3286  001898  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  3287  00189A  D07A               	goto	l366
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;inc\CANlib.h: 306: {
  3291                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
  3292  00189C  0100               	movlb	0	; () banked
  3293  00189E  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  3294  0018A0  0100               	movlb	0	; () banked
  3295  0018A2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3296  0018A4  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3297  0018A6  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3298  0018A8  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
  3302  0018AA  C083  FF44         	movff	CANsendMessage@tamp,3908	;volatile
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
  3306  0018AE  0E00               	movlw	0
  3307  0018B0  0100               	movlb	0	; () banked
  3308  0018B2  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3309  0018B4  0100               	movlb	0	; () banked
  3310  0018B6  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3311  0018B8  0EFF               	movlw	255
  3312  0018BA  0100               	movlb	0	; () banked
  3313  0018BC  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3314  0018BE  0100               	movlb	0	; () banked
  3315  0018C0  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3316  0018C2  0E00               	movlw	0
  3317  0018C4  0100               	movlb	0	; () banked
  3318  0018C6  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3319  0018C8  0100               	movlb	0	; () banked
  3320  0018CA  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3321  0018CC  0E00               	movlw	0
  3322  0018CE  0100               	movlb	0	; () banked
  3323  0018D0  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3324  0018D2  0100               	movlb	0	; () banked
  3325  0018D4  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
  3329  0018D6  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3330  0018DA  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3331  0018DE  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3332  0018E2  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3333  0018E6  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  3334  0018EA  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  3335  0018EE  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  3336  0018F2  0100               	movlb	0	; () banked
  3337  0018F4  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  3338  0018F6  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3339  0018FA  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3340  0018FE  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3341  001902  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
  3345  001906  C083  FF43         	movff	CANsendMessage@tamp,3907	;volatile
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
  3349  00190A  0E00               	movlw	0
  3350  00190C  010F               	movlb	15	; () banked
  3351  00190E  6F42               	movwf	66,b	;volatile
  3352                           
  3353                           ; BSR set to: 15
  3354                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
  3355  001910  010F               	movlb	15	; () banked
  3356  001912  8742               	bsf	66,3,b	;volatile
  3357                           
  3358                           ; BSR set to: 15
  3359                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
  3360  001914  0100               	movlb	0	; () banked
  3361  001916  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  3362  001918  D002               	goto	l367
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
  3366  00191A  010F               	movlb	15	; () banked
  3367  00191C  8142               	bsf	66,0,b	;volatile
  3368  00191E                     l367:
  3369                           
  3370                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
  3371  00191E  0100               	movlb	0	; () banked
  3372  001920  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  3373  001922  D002               	goto	l368
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
  3377  001924  010F               	movlb	15	; () banked
  3378  001926  8342               	bsf	66,1,b	;volatile
  3379  001928                     l368:
  3380                           
  3381                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
  3382  001928  0100               	movlb	0	; () banked
  3383  00192A  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  3384  00192C  D002               	goto	l369
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
  3388  00192E  010F               	movlb	15	; () banked
  3389  001930  8B42               	bsf	66,5,b	;volatile
  3390  001932                     l369:
  3391                           
  3392                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
  3393  001932  0100               	movlb	0	; () banked
  3394  001934  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  3395  001936  D002               	goto	l370
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
  3399  001938  010F               	movlb	15	; () banked
  3400  00193A  8D42               	bsf	66,6,b	;volatile
  3401  00193C                     l370:
  3402                           
  3403                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
  3404  00193C  0100               	movlb	0	; () banked
  3405  00193E  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  3406  001940  D003               	goto	l4140
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
  3410  001942  010F               	movlb	15	; () banked
  3411  001944  8F42               	bsf	66,7,b	;volatile
  3412  001946  D000               	goto	l4140
  3413  001948                     l4140:
  3414                           
  3415                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
  3416  001948  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3417  00194C  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3418  001950  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3419  001954  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3420  001958  0E16               	movlw	22
  3421  00195A  D006               	goto	u4270
  3422  00195C                     u4275:
  3423  00195C  0100               	movlb	0	; () banked
  3424  00195E  90D8               	bcf	status,0,c
  3425  001960  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3426  001962  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3427  001964  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3428  001966  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3429  001968                     u4270:
  3430  001968  2EE8               	decfsz	wreg,f,c
  3431  00196A  D7F8               	goto	u4275
  3432  00196C  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3433  001970  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3434  001974  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3435  001978  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
  3439  00197C  0100               	movlb	0	; () banked
  3440  00197E  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3441  001980  0100               	movlb	0	; () banked
  3442  001982  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3443  001984  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3444  001986  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3445  001988  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
  3449  00198A  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  3450                           
  3451                           ;inc\CANlib.h: 332: }
  3452  00198E  D05A               	goto	l4160
  3453  001990                     l366:
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;inc\CANlib.h: 334: else
  3457                           ;inc\CANlib.h: 336: {
  3458                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
  3459  001990  010F               	movlb	15	; () banked
  3460  001992  9742               	bcf	66,3,b	;volatile
  3461                           
  3462                           ; BSR set to: 15
  3463                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
  3464  001994  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3465  001998  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3466  00199C  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3467  0019A0  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3468  0019A4  0E04               	movlw	4
  3469  0019A6  D006               	goto	u4280
  3470  0019A8                     u4285:
  3471  0019A8  0100               	movlb	0	; () banked
  3472  0019AA  90D8               	bcf	status,0,c
  3473  0019AC  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3474  0019AE  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3475  0019B0  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3476  0019B2  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3477  0019B4                     u4280:
  3478  0019B4  2EE8               	decfsz	wreg,f,c
  3479  0019B6  D7F8               	goto	u4285
  3480  0019B8  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3481  0019BC  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3482  0019C0  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3483  0019C4  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
  3487  0019C8  0100               	movlb	0	; () banked
  3488  0019CA  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3489  0019CC  0100               	movlb	0	; () banked
  3490  0019CE  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3491  0019D0  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3492  0019D2  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3493  0019D4  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
  3497  0019D6  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
  3501  0019DA  0E07               	movlw	7
  3502  0019DC  0100               	movlb	0	; () banked
  3503  0019DE  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3504  0019E0  0100               	movlb	0	; () banked
  3505  0019E2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3506  0019E4  0E00               	movlw	0
  3507  0019E6  0100               	movlb	0	; () banked
  3508  0019E8  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3509  0019EA  0100               	movlb	0	; () banked
  3510  0019EC  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3511  0019EE  0E00               	movlw	0
  3512  0019F0  0100               	movlb	0	; () banked
  3513  0019F2  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3514  0019F4  0100               	movlb	0	; () banked
  3515  0019F6  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3516  0019F8  0E00               	movlw	0
  3517  0019FA  0100               	movlb	0	; () banked
  3518  0019FC  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3519  0019FE  0100               	movlb	0	; () banked
  3520  001A00  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;inc\CANlib.h: 344: tamp = tamp << 5;
  3524  001A02  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3525  001A06  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3526  001A0A  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3527  001A0E  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3528  001A12  0E05               	movlw	5
  3529  001A14                     u4295:
  3530  001A14  90D8               	bcf	status,0,c
  3531  001A16  0100               	movlb	0	; () banked
  3532  001A18  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  3533  001A1A  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  3534  001A1C  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  3535  001A1E  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  3536  001A20  2EE8               	decfsz	wreg,f,c
  3537  001A22  D7F8               	goto	u4295
  3538  001A24  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3539  001A28  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3540  001A2C  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3541  001A30  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
  3545  001A34  010F               	movlb	15	; () banked
  3546  001A36  5142               	movf	66,w,b	;volatile
  3547  001A38  0B1F               	andlw	31
  3548  001A3A  010F               	movlb	15	; () banked
  3549  001A3C  6F42               	movwf	66,b	;volatile
  3550                           
  3551                           ; BSR set to: 15
  3552                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
  3553  001A3E  C083  FF42         	movff	CANsendMessage@tamp,3906	;volatile
  3554  001A42  D000               	goto	l4160
  3555  001A44                     l4160:
  3556                           
  3557                           ;inc\CANlib.h: 347: }
  3558                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
  3559  001A44  0100               	movlb	0	; () banked
  3560  001A46  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  3561  001A48  D003               	goto	l373
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
  3565  001A4A  010F               	movlb	15	; () banked
  3566  001A4C  8140               	bsf	64,0,b	;volatile
  3567  001A4E  D002               	goto	l374
  3568  001A50                     l373:
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;inc\CANlib.h: 351: else
  3572                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
  3573  001A50  010F               	movlb	15	; () banked
  3574  001A52  9140               	bcf	64,0,b	;volatile
  3575  001A54                     l374:
  3576                           
  3577                           ; BSR set to: 15
  3578                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
  3579  001A54  0100               	movlb	0	; () banked
  3580  001A56  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  3581  001A58  D003               	goto	l375
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
  3585  001A5A  010F               	movlb	15	; () banked
  3586  001A5C  8340               	bsf	64,1,b	;volatile
  3587  001A5E  D003               	goto	l4166
  3588  001A60                     l375:
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;inc\CANlib.h: 355: else
  3592                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
  3593  001A60  010F               	movlb	15	; () banked
  3594  001A62  9340               	bcf	64,1,b	;volatile
  3595  001A64  D000               	goto	l4166
  3596  001A66                     l4166:
  3597                           
  3598                           ; BSR set to: 15
  3599                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
  3600  001A66  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  3601  001A6A  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  3602  001A6E  50DF               	movf	indf2,w,c
  3603  001A70  010F               	movlb	15	; () banked
  3604  001A72  6F46               	movwf	70,b	;volatile
  3605                           
  3606                           ; BSR set to: 15
  3607                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
  3608  001A74  0100               	movlb	0	; () banked
  3609  001A76  EE20 F001          	lfsr	2,1
  3610  001A7A  517B               	movf	CANsendMessage@data& (0+255),w,b
  3611  001A7C  26D9               	addwf	fsr2l,f,c
  3612  001A7E  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3613  001A80  22DA               	addwfc	fsr2h,f,c
  3614  001A82  50DF               	movf	indf2,w,c
  3615  001A84  010F               	movlb	15	; () banked
  3616  001A86  6F47               	movwf	71,b	;volatile
  3617                           
  3618                           ; BSR set to: 15
  3619                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
  3620  001A88  0100               	movlb	0	; () banked
  3621  001A8A  EE20 F002          	lfsr	2,2
  3622  001A8E  517B               	movf	CANsendMessage@data& (0+255),w,b
  3623  001A90  26D9               	addwf	fsr2l,f,c
  3624  001A92  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3625  001A94  22DA               	addwfc	fsr2h,f,c
  3626  001A96  50DF               	movf	indf2,w,c
  3627  001A98  010F               	movlb	15	; () banked
  3628  001A9A  6F48               	movwf	72,b	;volatile
  3629                           
  3630                           ; BSR set to: 15
  3631                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
  3632  001A9C  0100               	movlb	0	; () banked
  3633  001A9E  EE20 F003          	lfsr	2,3
  3634  001AA2  517B               	movf	CANsendMessage@data& (0+255),w,b
  3635  001AA4  26D9               	addwf	fsr2l,f,c
  3636  001AA6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3637  001AA8  22DA               	addwfc	fsr2h,f,c
  3638  001AAA  50DF               	movf	indf2,w,c
  3639  001AAC  010F               	movlb	15	; () banked
  3640  001AAE  6F49               	movwf	73,b	;volatile
  3641                           
  3642                           ; BSR set to: 15
  3643                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
  3644  001AB0  0100               	movlb	0	; () banked
  3645  001AB2  EE20 F004          	lfsr	2,4
  3646  001AB6  517B               	movf	CANsendMessage@data& (0+255),w,b
  3647  001AB8  26D9               	addwf	fsr2l,f,c
  3648  001ABA  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3649  001ABC  22DA               	addwfc	fsr2h,f,c
  3650  001ABE  50DF               	movf	indf2,w,c
  3651  001AC0  010F               	movlb	15	; () banked
  3652  001AC2  6F4A               	movwf	74,b	;volatile
  3653                           
  3654                           ; BSR set to: 15
  3655                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
  3656  001AC4  0100               	movlb	0	; () banked
  3657  001AC6  EE20 F005          	lfsr	2,5
  3658  001ACA  517B               	movf	CANsendMessage@data& (0+255),w,b
  3659  001ACC  26D9               	addwf	fsr2l,f,c
  3660  001ACE  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3661  001AD0  22DA               	addwfc	fsr2h,f,c
  3662  001AD2  50DF               	movf	indf2,w,c
  3663  001AD4  010F               	movlb	15	; () banked
  3664  001AD6  6F4B               	movwf	75,b	;volatile
  3665                           
  3666                           ; BSR set to: 15
  3667                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
  3668  001AD8  0100               	movlb	0	; () banked
  3669  001ADA  EE20 F006          	lfsr	2,6
  3670  001ADE  517B               	movf	CANsendMessage@data& (0+255),w,b
  3671  001AE0  26D9               	addwf	fsr2l,f,c
  3672  001AE2  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3673  001AE4  22DA               	addwfc	fsr2h,f,c
  3674  001AE6  50DF               	movf	indf2,w,c
  3675  001AE8  010F               	movlb	15	; () banked
  3676  001AEA  6F4C               	movwf	76,b	;volatile
  3677                           
  3678                           ; BSR set to: 15
  3679                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
  3680  001AEC  0100               	movlb	0	; () banked
  3681  001AEE  EE20 F007          	lfsr	2,7
  3682  001AF2  517B               	movf	CANsendMessage@data& (0+255),w,b
  3683  001AF4  26D9               	addwf	fsr2l,f,c
  3684  001AF6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3685  001AF8  22DA               	addwfc	fsr2h,f,c
  3686  001AFA  50DF               	movf	indf2,w,c
  3687  001AFC  010F               	movlb	15	; () banked
  3688  001AFE  6F4D               	movwf	77,b	;volatile
  3689                           
  3690                           ; BSR set to: 15
  3691                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
  3692  001B00  010F               	movlb	15	; () banked
  3693  001B02  8740               	bsf	64,3,b	;volatile
  3694                           
  3695                           ; BSR set to: 15
  3696                           ;inc\CANlib.h: 368: return;
  3697  001B04  0012               	return	
  3698  001B06                     l363:
  3699                           
  3700                           ; BSR set to: 15
  3701                           ;inc\CANlib.h: 369: }
  3702                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
  3703  001B06  010F               	movlb	15	; () banked
  3704  001B08  B730               	btfsc	48,3,b	;volatile
  3705  001B0A  D142               	goto	l378
  3706                           
  3707                           ; BSR set to: 15
  3708                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
  3709  001B0C  C07D  FF35         	movff	CANsendMessage@dataLength,3893	;volatile
  3710                           
  3711                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
  3712  001B10  0100               	movlb	0	; () banked
  3713  001B12  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  3714  001B14  D003               	goto	l379
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
  3718  001B16  010F               	movlb	15	; () banked
  3719  001B18  8D35               	bsf	53,6,b	;volatile
  3720  001B1A  D002               	goto	l380
  3721  001B1C                     l379:
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;inc\CANlib.h: 378: else
  3725                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
  3726  001B1C  010F               	movlb	15	; () banked
  3727  001B1E  9D35               	bcf	53,6,b	;volatile
  3728  001B20                     l380:
  3729                           
  3730                           ; BSR set to: 15
  3731                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
  3732  001B20  0100               	movlb	0	; () banked
  3733  001B22  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  3734  001B24  D07A               	goto	l381
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;inc\CANlib.h: 382: {
  3738                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
  3739  001B26  0100               	movlb	0	; () banked
  3740  001B28  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  3741  001B2A  0100               	movlb	0	; () banked
  3742  001B2C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3743  001B2E  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3744  001B30  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3745  001B32  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
  3749  001B34  C083  FF34         	movff	CANsendMessage@tamp,3892	;volatile
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
  3753  001B38  0E00               	movlw	0
  3754  001B3A  0100               	movlb	0	; () banked
  3755  001B3C  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3756  001B3E  0100               	movlb	0	; () banked
  3757  001B40  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3758  001B42  0EFF               	movlw	255
  3759  001B44  0100               	movlb	0	; () banked
  3760  001B46  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3761  001B48  0100               	movlb	0	; () banked
  3762  001B4A  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3763  001B4C  0E00               	movlw	0
  3764  001B4E  0100               	movlb	0	; () banked
  3765  001B50  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3766  001B52  0100               	movlb	0	; () banked
  3767  001B54  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3768  001B56  0E00               	movlw	0
  3769  001B58  0100               	movlb	0	; () banked
  3770  001B5A  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3771  001B5C  0100               	movlb	0	; () banked
  3772  001B5E  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
  3776  001B60  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3777  001B64  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3778  001B68  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3779  001B6C  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3780  001B70  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  3781  001B74  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  3782  001B78  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  3783  001B7C  0100               	movlb	0	; () banked
  3784  001B7E  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  3785  001B80  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3786  001B84  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3787  001B88  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3788  001B8C  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
  3792  001B90  C083  FF33         	movff	CANsendMessage@tamp,3891	;volatile
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
  3796  001B94  0E00               	movlw	0
  3797  001B96  010F               	movlb	15	; () banked
  3798  001B98  6F32               	movwf	50,b	;volatile
  3799                           
  3800                           ; BSR set to: 15
  3801                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
  3802  001B9A  010F               	movlb	15	; () banked
  3803  001B9C  8732               	bsf	50,3,b	;volatile
  3804                           
  3805                           ; BSR set to: 15
  3806                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
  3807  001B9E  0100               	movlb	0	; () banked
  3808  001BA0  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  3809  001BA2  D002               	goto	l382
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
  3813  001BA4  010F               	movlb	15	; () banked
  3814  001BA6  8132               	bsf	50,0,b	;volatile
  3815  001BA8                     l382:
  3816                           
  3817                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
  3818  001BA8  0100               	movlb	0	; () banked
  3819  001BAA  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  3820  001BAC  D002               	goto	l383
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
  3824  001BAE  010F               	movlb	15	; () banked
  3825  001BB0  8332               	bsf	50,1,b	;volatile
  3826  001BB2                     l383:
  3827                           
  3828                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
  3829  001BB2  0100               	movlb	0	; () banked
  3830  001BB4  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  3831  001BB6  D002               	goto	l384
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
  3835  001BB8  010F               	movlb	15	; () banked
  3836  001BBA  8B32               	bsf	50,5,b	;volatile
  3837  001BBC                     l384:
  3838                           
  3839                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
  3840  001BBC  0100               	movlb	0	; () banked
  3841  001BBE  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  3842  001BC0  D002               	goto	l385
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
  3846  001BC2  010F               	movlb	15	; () banked
  3847  001BC4  8D32               	bsf	50,6,b	;volatile
  3848  001BC6                     l385:
  3849                           
  3850                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
  3851  001BC6  0100               	movlb	0	; () banked
  3852  001BC8  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  3853  001BCA  D003               	goto	l4216
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
  3857  001BCC  010F               	movlb	15	; () banked
  3858  001BCE  8F32               	bsf	50,7,b	;volatile
  3859  001BD0  D000               	goto	l4216
  3860  001BD2                     l4216:
  3861                           
  3862                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
  3863  001BD2  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3864  001BD6  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3865  001BDA  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3866  001BDE  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3867  001BE2  0E16               	movlw	22
  3868  001BE4  D006               	goto	u4400
  3869  001BE6                     u4405:
  3870  001BE6  0100               	movlb	0	; () banked
  3871  001BE8  90D8               	bcf	status,0,c
  3872  001BEA  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3873  001BEC  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3874  001BEE  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3875  001BF0  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3876  001BF2                     u4400:
  3877  001BF2  2EE8               	decfsz	wreg,f,c
  3878  001BF4  D7F8               	goto	u4405
  3879  001BF6  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3880  001BFA  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3881  001BFE  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3882  001C02  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
  3886  001C06  0100               	movlb	0	; () banked
  3887  001C08  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3888  001C0A  0100               	movlb	0	; () banked
  3889  001C0C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3890  001C0E  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3891  001C10  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3892  001C12  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
  3896  001C14  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  3897                           
  3898                           ;inc\CANlib.h: 407: }
  3899  001C18  D05A               	goto	l4236
  3900  001C1A                     l381:
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;inc\CANlib.h: 409: else
  3904                           ;inc\CANlib.h: 411: {
  3905                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
  3906  001C1A  010F               	movlb	15	; () banked
  3907  001C1C  9732               	bcf	50,3,b	;volatile
  3908                           
  3909                           ; BSR set to: 15
  3910                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
  3911  001C1E  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3912  001C22  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3913  001C26  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3914  001C2A  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3915  001C2E  0E04               	movlw	4
  3916  001C30  D006               	goto	u4410
  3917  001C32                     u4415:
  3918  001C32  0100               	movlb	0	; () banked
  3919  001C34  90D8               	bcf	status,0,c
  3920  001C36  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3921  001C38  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3922  001C3A  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3923  001C3C  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3924  001C3E                     u4410:
  3925  001C3E  2EE8               	decfsz	wreg,f,c
  3926  001C40  D7F8               	goto	u4415
  3927  001C42  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3928  001C46  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3929  001C4A  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3930  001C4E  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
  3934  001C52  0100               	movlb	0	; () banked
  3935  001C54  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3936  001C56  0100               	movlb	0	; () banked
  3937  001C58  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3938  001C5A  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3939  001C5C  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3940  001C5E  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
  3944  001C60  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
  3948  001C64  0E07               	movlw	7
  3949  001C66  0100               	movlb	0	; () banked
  3950  001C68  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3951  001C6A  0100               	movlb	0	; () banked
  3952  001C6C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3953  001C6E  0E00               	movlw	0
  3954  001C70  0100               	movlb	0	; () banked
  3955  001C72  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3956  001C74  0100               	movlb	0	; () banked
  3957  001C76  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3958  001C78  0E00               	movlw	0
  3959  001C7A  0100               	movlb	0	; () banked
  3960  001C7C  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3961  001C7E  0100               	movlb	0	; () banked
  3962  001C80  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3963  001C82  0E00               	movlw	0
  3964  001C84  0100               	movlb	0	; () banked
  3965  001C86  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3966  001C88  0100               	movlb	0	; () banked
  3967  001C8A  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;inc\CANlib.h: 419: tamp = tamp << 5;
  3971  001C8C  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3972  001C90  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3973  001C94  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3974  001C98  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3975  001C9C  0E05               	movlw	5
  3976  001C9E                     u4425:
  3977  001C9E  90D8               	bcf	status,0,c
  3978  001CA0  0100               	movlb	0	; () banked
  3979  001CA2  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  3980  001CA4  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  3981  001CA6  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  3982  001CA8  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  3983  001CAA  2EE8               	decfsz	wreg,f,c
  3984  001CAC  D7F8               	goto	u4425
  3985  001CAE  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3986  001CB2  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3987  001CB6  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3988  001CBA  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
  3992  001CBE  010F               	movlb	15	; () banked
  3993  001CC0  5132               	movf	50,w,b	;volatile
  3994  001CC2  0B1F               	andlw	31
  3995  001CC4  010F               	movlb	15	; () banked
  3996  001CC6  6F32               	movwf	50,b	;volatile
  3997                           
  3998                           ; BSR set to: 15
  3999                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
  4000  001CC8  C083  FF32         	movff	CANsendMessage@tamp,3890	;volatile
  4001  001CCC  D000               	goto	l4236
  4002  001CCE                     l4236:
  4003                           
  4004                           ;inc\CANlib.h: 422: }
  4005                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
  4006  001CCE  0100               	movlb	0	; () banked
  4007  001CD0  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  4008  001CD2  D003               	goto	l388
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
  4012  001CD4  010F               	movlb	15	; () banked
  4013  001CD6  8130               	bsf	48,0,b	;volatile
  4014  001CD8  D002               	goto	l389
  4015  001CDA                     l388:
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;inc\CANlib.h: 426: else
  4019                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
  4020  001CDA  010F               	movlb	15	; () banked
  4021  001CDC  9130               	bcf	48,0,b	;volatile
  4022  001CDE                     l389:
  4023                           
  4024                           ; BSR set to: 15
  4025                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
  4026  001CDE  0100               	movlb	0	; () banked
  4027  001CE0  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  4028  001CE2  D003               	goto	l390
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
  4032  001CE4  010F               	movlb	15	; () banked
  4033  001CE6  8330               	bsf	48,1,b	;volatile
  4034  001CE8  D003               	goto	l4242
  4035  001CEA                     l390:
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;inc\CANlib.h: 430: else
  4039                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
  4040  001CEA  010F               	movlb	15	; () banked
  4041  001CEC  9330               	bcf	48,1,b	;volatile
  4042  001CEE  D000               	goto	l4242
  4043  001CF0                     l4242:
  4044                           
  4045                           ; BSR set to: 15
  4046                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
  4047  001CF0  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  4048  001CF4  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  4049  001CF8  50DF               	movf	indf2,w,c
  4050  001CFA  010F               	movlb	15	; () banked
  4051  001CFC  6F36               	movwf	54,b	;volatile
  4052                           
  4053                           ; BSR set to: 15
  4054                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
  4055  001CFE  0100               	movlb	0	; () banked
  4056  001D00  EE20 F001          	lfsr	2,1
  4057  001D04  517B               	movf	CANsendMessage@data& (0+255),w,b
  4058  001D06  26D9               	addwf	fsr2l,f,c
  4059  001D08  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4060  001D0A  22DA               	addwfc	fsr2h,f,c
  4061  001D0C  50DF               	movf	indf2,w,c
  4062  001D0E  010F               	movlb	15	; () banked
  4063  001D10  6F37               	movwf	55,b	;volatile
  4064                           
  4065                           ; BSR set to: 15
  4066                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
  4067  001D12  0100               	movlb	0	; () banked
  4068  001D14  EE20 F002          	lfsr	2,2
  4069  001D18  517B               	movf	CANsendMessage@data& (0+255),w,b
  4070  001D1A  26D9               	addwf	fsr2l,f,c
  4071  001D1C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4072  001D1E  22DA               	addwfc	fsr2h,f,c
  4073  001D20  50DF               	movf	indf2,w,c
  4074  001D22  010F               	movlb	15	; () banked
  4075  001D24  6F38               	movwf	56,b	;volatile
  4076                           
  4077                           ; BSR set to: 15
  4078                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
  4079  001D26  0100               	movlb	0	; () banked
  4080  001D28  EE20 F003          	lfsr	2,3
  4081  001D2C  517B               	movf	CANsendMessage@data& (0+255),w,b
  4082  001D2E  26D9               	addwf	fsr2l,f,c
  4083  001D30  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4084  001D32  22DA               	addwfc	fsr2h,f,c
  4085  001D34  50DF               	movf	indf2,w,c
  4086  001D36  010F               	movlb	15	; () banked
  4087  001D38  6F39               	movwf	57,b	;volatile
  4088                           
  4089                           ; BSR set to: 15
  4090                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
  4091  001D3A  0100               	movlb	0	; () banked
  4092  001D3C  EE20 F004          	lfsr	2,4
  4093  001D40  517B               	movf	CANsendMessage@data& (0+255),w,b
  4094  001D42  26D9               	addwf	fsr2l,f,c
  4095  001D44  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4096  001D46  22DA               	addwfc	fsr2h,f,c
  4097  001D48  50DF               	movf	indf2,w,c
  4098  001D4A  010F               	movlb	15	; () banked
  4099  001D4C  6F3A               	movwf	58,b	;volatile
  4100                           
  4101                           ; BSR set to: 15
  4102                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
  4103  001D4E  0100               	movlb	0	; () banked
  4104  001D50  EE20 F005          	lfsr	2,5
  4105  001D54  517B               	movf	CANsendMessage@data& (0+255),w,b
  4106  001D56  26D9               	addwf	fsr2l,f,c
  4107  001D58  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4108  001D5A  22DA               	addwfc	fsr2h,f,c
  4109  001D5C  50DF               	movf	indf2,w,c
  4110  001D5E  010F               	movlb	15	; () banked
  4111  001D60  6F3B               	movwf	59,b	;volatile
  4112                           
  4113                           ; BSR set to: 15
  4114                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
  4115  001D62  0100               	movlb	0	; () banked
  4116  001D64  EE20 F006          	lfsr	2,6
  4117  001D68  517B               	movf	CANsendMessage@data& (0+255),w,b
  4118  001D6A  26D9               	addwf	fsr2l,f,c
  4119  001D6C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4120  001D6E  22DA               	addwfc	fsr2h,f,c
  4121  001D70  50DF               	movf	indf2,w,c
  4122  001D72  010F               	movlb	15	; () banked
  4123  001D74  6F3C               	movwf	60,b	;volatile
  4124                           
  4125                           ; BSR set to: 15
  4126                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
  4127  001D76  0100               	movlb	0	; () banked
  4128  001D78  EE20 F007          	lfsr	2,7
  4129  001D7C  517B               	movf	CANsendMessage@data& (0+255),w,b
  4130  001D7E  26D9               	addwf	fsr2l,f,c
  4131  001D80  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4132  001D82  22DA               	addwfc	fsr2h,f,c
  4133  001D84  50DF               	movf	indf2,w,c
  4134  001D86  010F               	movlb	15	; () banked
  4135  001D88  6F3D               	movwf	61,b	;volatile
  4136                           
  4137                           ; BSR set to: 15
  4138                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
  4139  001D8A  010F               	movlb	15	; () banked
  4140  001D8C  8730               	bsf	48,3,b	;volatile
  4141                           
  4142                           ; BSR set to: 15
  4143                           ;inc\CANlib.h: 444: return;
  4144  001D8E  0012               	return	
  4145  001D90                     l378:
  4146                           
  4147                           ; BSR set to: 15
  4148                           ;inc\CANlib.h: 445: }
  4149                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
  4150  001D90  010F               	movlb	15	; () banked
  4151  001D92  B720               	btfsc	32,3,b	;volatile
  4152  001D94  0012               	return	
  4153                           
  4154                           ; BSR set to: 15
  4155                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
  4156  001D96  C07D  FF25         	movff	CANsendMessage@dataLength,3877	;volatile
  4157                           
  4158                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
  4159  001D9A  0100               	movlb	0	; () banked
  4160  001D9C  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  4161  001D9E  D003               	goto	l393
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
  4165  001DA0  010F               	movlb	15	; () banked
  4166  001DA2  8D25               	bsf	37,6,b	;volatile
  4167  001DA4  D002               	goto	l394
  4168  001DA6                     l393:
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;inc\CANlib.h: 454: else
  4172                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
  4173  001DA6  010F               	movlb	15	; () banked
  4174  001DA8  9D25               	bcf	37,6,b	;volatile
  4175  001DAA                     l394:
  4176                           
  4177                           ; BSR set to: 15
  4178                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
  4179  001DAA  0100               	movlb	0	; () banked
  4180  001DAC  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  4181  001DAE  D07A               	goto	l395
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;inc\CANlib.h: 458: {
  4185                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
  4186  001DB0  0100               	movlb	0	; () banked
  4187  001DB2  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  4188  001DB4  0100               	movlb	0	; () banked
  4189  001DB6  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4190  001DB8  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4191  001DBA  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4192  001DBC  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
  4196  001DBE  C083  FF24         	movff	CANsendMessage@tamp,3876	;volatile
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
  4200  001DC2  0E00               	movlw	0
  4201  001DC4  0100               	movlb	0	; () banked
  4202  001DC6  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4203  001DC8  0100               	movlb	0	; () banked
  4204  001DCA  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4205  001DCC  0EFF               	movlw	255
  4206  001DCE  0100               	movlb	0	; () banked
  4207  001DD0  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4208  001DD2  0100               	movlb	0	; () banked
  4209  001DD4  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4210  001DD6  0E00               	movlw	0
  4211  001DD8  0100               	movlb	0	; () banked
  4212  001DDA  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4213  001DDC  0100               	movlb	0	; () banked
  4214  001DDE  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4215  001DE0  0E00               	movlw	0
  4216  001DE2  0100               	movlb	0	; () banked
  4217  001DE4  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4218  001DE6  0100               	movlb	0	; () banked
  4219  001DE8  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
  4223  001DEA  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4224  001DEE  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4225  001DF2  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4226  001DF6  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4227  001DFA  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  4228  001DFE  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  4229  001E02  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  4230  001E06  0100               	movlb	0	; () banked
  4231  001E08  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  4232  001E0A  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4233  001E0E  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4234  001E12  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4235  001E16  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
  4239  001E1A  C083  FF23         	movff	CANsendMessage@tamp,3875	;volatile
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
  4243  001E1E  0E00               	movlw	0
  4244  001E20  010F               	movlb	15	; () banked
  4245  001E22  6F22               	movwf	34,b	;volatile
  4246                           
  4247                           ; BSR set to: 15
  4248                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
  4249  001E24  010F               	movlb	15	; () banked
  4250  001E26  8722               	bsf	34,3,b	;volatile
  4251                           
  4252                           ; BSR set to: 15
  4253                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
  4254  001E28  0100               	movlb	0	; () banked
  4255  001E2A  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  4256  001E2C  D002               	goto	l396
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
  4260  001E2E  010F               	movlb	15	; () banked
  4261  001E30  8122               	bsf	34,0,b	;volatile
  4262  001E32                     l396:
  4263                           
  4264                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
  4265  001E32  0100               	movlb	0	; () banked
  4266  001E34  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  4267  001E36  D002               	goto	l397
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
  4271  001E38  010F               	movlb	15	; () banked
  4272  001E3A  8322               	bsf	34,1,b	;volatile
  4273  001E3C                     l397:
  4274                           
  4275                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
  4276  001E3C  0100               	movlb	0	; () banked
  4277  001E3E  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  4278  001E40  D002               	goto	l398
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
  4282  001E42  010F               	movlb	15	; () banked
  4283  001E44  8B22               	bsf	34,5,b	;volatile
  4284  001E46                     l398:
  4285                           
  4286                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
  4287  001E46  0100               	movlb	0	; () banked
  4288  001E48  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  4289  001E4A  D002               	goto	l399
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
  4293  001E4C  010F               	movlb	15	; () banked
  4294  001E4E  8D22               	bsf	34,6,b	;volatile
  4295  001E50                     l399:
  4296                           
  4297                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
  4298  001E50  0100               	movlb	0	; () banked
  4299  001E52  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  4300  001E54  D003               	goto	l4292
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
  4304  001E56  010F               	movlb	15	; () banked
  4305  001E58  8F22               	bsf	34,7,b	;volatile
  4306  001E5A  D000               	goto	l4292
  4307  001E5C                     l4292:
  4308                           
  4309                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
  4310  001E5C  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4311  001E60  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4312  001E64  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4313  001E68  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4314  001E6C  0E16               	movlw	22
  4315  001E6E  D006               	goto	u4530
  4316  001E70                     u4535:
  4317  001E70  0100               	movlb	0	; () banked
  4318  001E72  90D8               	bcf	status,0,c
  4319  001E74  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4320  001E76  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4321  001E78  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4322  001E7A  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4323  001E7C                     u4530:
  4324  001E7C  2EE8               	decfsz	wreg,f,c
  4325  001E7E  D7F8               	goto	u4535
  4326  001E80  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4327  001E84  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4328  001E88  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4329  001E8C  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
  4333  001E90  0100               	movlb	0	; () banked
  4334  001E92  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4335  001E94  0100               	movlb	0	; () banked
  4336  001E96  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4337  001E98  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4338  001E9A  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4339  001E9C  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
  4343  001E9E  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  4344                           
  4345                           ;inc\CANlib.h: 483: }
  4346  001EA2  D05A               	goto	l4312
  4347  001EA4                     l395:
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;inc\CANlib.h: 485: else
  4351                           ;inc\CANlib.h: 487: {
  4352                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
  4353  001EA4  010F               	movlb	15	; () banked
  4354  001EA6  9722               	bcf	34,3,b	;volatile
  4355                           
  4356                           ; BSR set to: 15
  4357                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
  4358  001EA8  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4359  001EAC  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4360  001EB0  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4361  001EB4  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4362  001EB8  0E04               	movlw	4
  4363  001EBA  D006               	goto	u4540
  4364  001EBC                     u4545:
  4365  001EBC  0100               	movlb	0	; () banked
  4366  001EBE  90D8               	bcf	status,0,c
  4367  001EC0  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4368  001EC2  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4369  001EC4  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4370  001EC6  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4371  001EC8                     u4540:
  4372  001EC8  2EE8               	decfsz	wreg,f,c
  4373  001ECA  D7F8               	goto	u4545
  4374  001ECC  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4375  001ED0  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4376  001ED4  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4377  001ED8  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
  4381  001EDC  0100               	movlb	0	; () banked
  4382  001EDE  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4383  001EE0  0100               	movlb	0	; () banked
  4384  001EE2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4385  001EE4  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4386  001EE6  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4387  001EE8  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
  4391  001EEA  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
  4395  001EEE  0E07               	movlw	7
  4396  001EF0  0100               	movlb	0	; () banked
  4397  001EF2  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4398  001EF4  0100               	movlb	0	; () banked
  4399  001EF6  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4400  001EF8  0E00               	movlw	0
  4401  001EFA  0100               	movlb	0	; () banked
  4402  001EFC  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4403  001EFE  0100               	movlb	0	; () banked
  4404  001F00  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4405  001F02  0E00               	movlw	0
  4406  001F04  0100               	movlb	0	; () banked
  4407  001F06  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4408  001F08  0100               	movlb	0	; () banked
  4409  001F0A  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4410  001F0C  0E00               	movlw	0
  4411  001F0E  0100               	movlb	0	; () banked
  4412  001F10  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4413  001F12  0100               	movlb	0	; () banked
  4414  001F14  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;inc\CANlib.h: 495: tamp = tamp << 5;
  4418  001F16  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4419  001F1A  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4420  001F1E  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4421  001F22  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4422  001F26  0E05               	movlw	5
  4423  001F28                     u4555:
  4424  001F28  90D8               	bcf	status,0,c
  4425  001F2A  0100               	movlb	0	; () banked
  4426  001F2C  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  4427  001F2E  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  4428  001F30  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  4429  001F32  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  4430  001F34  2EE8               	decfsz	wreg,f,c
  4431  001F36  D7F8               	goto	u4555
  4432  001F38  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4433  001F3C  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4434  001F40  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4435  001F44  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
  4439  001F48  010F               	movlb	15	; () banked
  4440  001F4A  5122               	movf	34,w,b	;volatile
  4441  001F4C  0B1F               	andlw	31
  4442  001F4E  010F               	movlb	15	; () banked
  4443  001F50  6F22               	movwf	34,b	;volatile
  4444                           
  4445                           ; BSR set to: 15
  4446                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
  4447  001F52  C083  FF22         	movff	CANsendMessage@tamp,3874	;volatile
  4448  001F56  D000               	goto	l4312
  4449  001F58                     l4312:
  4450                           
  4451                           ;inc\CANlib.h: 498: }
  4452                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
  4453  001F58  0100               	movlb	0	; () banked
  4454  001F5A  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  4455  001F5C  D003               	goto	l402
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
  4459  001F5E  010F               	movlb	15	; () banked
  4460  001F60  8120               	bsf	32,0,b	;volatile
  4461  001F62  D002               	goto	l403
  4462  001F64                     l402:
  4463                           
  4464                           ; BSR set to: 0
  4465                           ;inc\CANlib.h: 502: else
  4466                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
  4467  001F64  010F               	movlb	15	; () banked
  4468  001F66  9120               	bcf	32,0,b	;volatile
  4469  001F68                     l403:
  4470                           
  4471                           ; BSR set to: 15
  4472                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
  4473  001F68  0100               	movlb	0	; () banked
  4474  001F6A  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  4475  001F6C  D003               	goto	l404
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
  4479  001F6E  010F               	movlb	15	; () banked
  4480  001F70  8320               	bsf	32,1,b	;volatile
  4481  001F72  D003               	goto	l4318
  4482  001F74                     l404:
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;inc\CANlib.h: 506: else
  4486                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
  4487  001F74  010F               	movlb	15	; () banked
  4488  001F76  9320               	bcf	32,1,b	;volatile
  4489  001F78  D000               	goto	l4318
  4490  001F7A                     l4318:
  4491                           
  4492                           ; BSR set to: 15
  4493                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
  4494  001F7A  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  4495  001F7E  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  4496  001F82  50DF               	movf	indf2,w,c
  4497  001F84  010F               	movlb	15	; () banked
  4498  001F86  6F26               	movwf	38,b	;volatile
  4499                           
  4500                           ; BSR set to: 15
  4501                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
  4502  001F88  0100               	movlb	0	; () banked
  4503  001F8A  EE20 F001          	lfsr	2,1
  4504  001F8E  517B               	movf	CANsendMessage@data& (0+255),w,b
  4505  001F90  26D9               	addwf	fsr2l,f,c
  4506  001F92  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4507  001F94  22DA               	addwfc	fsr2h,f,c
  4508  001F96  50DF               	movf	indf2,w,c
  4509  001F98  010F               	movlb	15	; () banked
  4510  001F9A  6F27               	movwf	39,b	;volatile
  4511                           
  4512                           ; BSR set to: 15
  4513                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
  4514  001F9C  0100               	movlb	0	; () banked
  4515  001F9E  EE20 F002          	lfsr	2,2
  4516  001FA2  517B               	movf	CANsendMessage@data& (0+255),w,b
  4517  001FA4  26D9               	addwf	fsr2l,f,c
  4518  001FA6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4519  001FA8  22DA               	addwfc	fsr2h,f,c
  4520  001FAA  50DF               	movf	indf2,w,c
  4521  001FAC  010F               	movlb	15	; () banked
  4522  001FAE  6F28               	movwf	40,b	;volatile
  4523                           
  4524                           ; BSR set to: 15
  4525                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
  4526  001FB0  0100               	movlb	0	; () banked
  4527  001FB2  EE20 F003          	lfsr	2,3
  4528  001FB6  517B               	movf	CANsendMessage@data& (0+255),w,b
  4529  001FB8  26D9               	addwf	fsr2l,f,c
  4530  001FBA  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4531  001FBC  22DA               	addwfc	fsr2h,f,c
  4532  001FBE  50DF               	movf	indf2,w,c
  4533  001FC0  010F               	movlb	15	; () banked
  4534  001FC2  6F29               	movwf	41,b	;volatile
  4535                           
  4536                           ; BSR set to: 15
  4537                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
  4538  001FC4  0100               	movlb	0	; () banked
  4539  001FC6  EE20 F004          	lfsr	2,4
  4540  001FCA  517B               	movf	CANsendMessage@data& (0+255),w,b
  4541  001FCC  26D9               	addwf	fsr2l,f,c
  4542  001FCE  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4543  001FD0  22DA               	addwfc	fsr2h,f,c
  4544  001FD2  50DF               	movf	indf2,w,c
  4545  001FD4  010F               	movlb	15	; () banked
  4546  001FD6  6F2A               	movwf	42,b	;volatile
  4547                           
  4548                           ; BSR set to: 15
  4549                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
  4550  001FD8  0100               	movlb	0	; () banked
  4551  001FDA  EE20 F005          	lfsr	2,5
  4552  001FDE  517B               	movf	CANsendMessage@data& (0+255),w,b
  4553  001FE0  26D9               	addwf	fsr2l,f,c
  4554  001FE2  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4555  001FE4  22DA               	addwfc	fsr2h,f,c
  4556  001FE6  50DF               	movf	indf2,w,c
  4557  001FE8  010F               	movlb	15	; () banked
  4558  001FEA  6F2B               	movwf	43,b	;volatile
  4559                           
  4560                           ; BSR set to: 15
  4561                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
  4562  001FEC  0100               	movlb	0	; () banked
  4563  001FEE  EE20 F006          	lfsr	2,6
  4564  001FF2  517B               	movf	CANsendMessage@data& (0+255),w,b
  4565  001FF4  26D9               	addwf	fsr2l,f,c
  4566  001FF6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4567  001FF8  22DA               	addwfc	fsr2h,f,c
  4568  001FFA  50DF               	movf	indf2,w,c
  4569  001FFC  010F               	movlb	15	; () banked
  4570  001FFE  6F2C               	movwf	44,b	;volatile
  4571                           
  4572                           ; BSR set to: 15
  4573                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
  4574  002000  0100               	movlb	0	; () banked
  4575  002002  EE20 F007          	lfsr	2,7
  4576  002006  517B               	movf	CANsendMessage@data& (0+255),w,b
  4577  002008  26D9               	addwf	fsr2l,f,c
  4578  00200A  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4579  00200C  22DA               	addwfc	fsr2h,f,c
  4580  00200E  50DF               	movf	indf2,w,c
  4581  002010  010F               	movlb	15	; () banked
  4582  002012  6F2D               	movwf	45,b	;volatile
  4583                           
  4584                           ; BSR set to: 15
  4585                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
  4586  002014  010F               	movlb	15	; () banked
  4587  002016  8720               	bsf	32,3,b	;volatile
  4588                           
  4589                           ; BSR set to: 15
  4590                           ;inc\CANlib.h: 520: return;
  4591  002018  0012               	return	
  4592                           
  4593                           ; BSR set to: 15
  4594                           
  4595                           ; BSR set to: 15
  4596  00201A  0012               	return		;funcret
  4597  00201C                     __end_of_CANsendMessage:
  4598                           	opt stack 0
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           postinc0	equ	0xFEE
  4604                           wreg	equ	0xFE8
  4605                           postdec1	equ	0xFE5
  4606                           fsr1l	equ	0xFE1
  4607                           indf2	equ	0xFDF
  4608                           postinc2	equ	0xFDE
  4609                           postdec2	equ	0xFDD
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function _CANisTxReady *****************
  4615 ;; Defined at:
  4616 ;;		line 1154 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;		None
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;		None
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      unsigned char 
  4623 ;; Registers used:
  4624 ;;		wreg, status,2
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4633 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4634 ;;Total ram usage:        1 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    5
  4637 ;; This function calls:
  4638 ;;		Nothing
  4639 ;; This function is called by:
  4640 ;;		_main
  4641 ;;		_park_search
  4642 ;;		_park_routine
  4643 ;;		_can_send
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           	psect	text6
  4648  005DCA                     __ptext6:
  4649                           	opt stack 0
  4650  005DCA                     _CANisTxReady:
  4651                           	opt stack 22
  4652                           
  4653                           ;inc\CANlib.h: 1156: return (!TXB0CONbits.TXREQ || !TXB1CONbits.TXREQ || !TXB2CONbits.TX
      +                          REQ);
  4654                           
  4655                           ; BSR set to: 15
  4656                           ;incstack = 0
  4657  005DCA  0E01               	movlw	1
  4658  005DCC  0100               	movlb	0	; () banked
  4659  005DCE  6F77               	movwf	_CANisTxReady$2845& (0+255),b
  4660                           
  4661                           ; BSR set to: 0
  4662  005DD0  010F               	movlb	15	; () banked
  4663  005DD2  A740               	btfss	64,3,b	;volatile
  4664  005DD4  D009               	goto	l556
  4665                           
  4666                           ; BSR set to: 15
  4667  005DD6  010F               	movlb	15	; () banked
  4668  005DD8  A730               	btfss	48,3,b	;volatile
  4669  005DDA  D006               	goto	l556
  4670                           
  4671                           ; BSR set to: 15
  4672  005DDC  010F               	movlb	15	; () banked
  4673  005DDE  A720               	btfss	32,3,b	;volatile
  4674  005DE0  D003               	goto	l556
  4675                           
  4676                           ; BSR set to: 15
  4677  005DE2  0E00               	movlw	0
  4678  005DE4  0100               	movlb	0	; () banked
  4679  005DE6  6F77               	movwf	_CANisTxReady$2845& (0+255),b
  4680  005DE8                     l556:
  4681  005DE8  0100               	movlb	0	; () banked
  4682  005DEA  5177               	movf	_CANisTxReady$2845& (0+255),w,b
  4683  005DEC  0012               	return	
  4684                           
  4685                           ; BSR set to: 0
  4686                           
  4687                           ; BSR set to: 0
  4688  005DEE  0012               	return		;funcret
  4689  005DF0                     __end_of_CANisTxReady:
  4690                           	opt stack 0
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           postinc0	equ	0xFEE
  4696                           wreg	equ	0xFE8
  4697                           postdec1	equ	0xFE5
  4698                           fsr1l	equ	0xFE1
  4699                           indf2	equ	0xFDF
  4700                           postinc2	equ	0xFDE
  4701                           postdec2	equ	0xFDD
  4702                           fsr2h	equ	0xFDA
  4703                           fsr2l	equ	0xFD9
  4704                           status	equ	0xFD8
  4705                           
  4706 ;; *************** function _abs *****************
  4707 ;; Defined at:
  4708 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\abs.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  a               2   23[BANK0 ] int 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;		None
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  2   23[BANK0 ] int 
  4715 ;; Registers used:
  4716 ;;		wreg, status,2, status,0
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4722 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4725 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;Total ram usage:        4 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    5
  4729 ;; This function calls:
  4730 ;;		Nothing
  4731 ;; This function is called by:
  4732 ;;		_park_search
  4733 ;;		_parallelo
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text7
  4738  005D76                     __ptext7:
  4739                           	opt stack 0
  4740  005D76                     _abs:
  4741                           	opt stack 23
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;incstack = 0
  4745  005D76  0100               	movlb	0	; () banked
  4746  005D78  AF78               	btfss	(abs@a+1)& (0+255),7,b
  4747  005D7A  D00E               	goto	l897
  4748                           
  4749                           ; BSR set to: 0
  4750  005D7C  C077  F079         	movff	abs@a,??_abs
  4751  005D80  C078  F07A         	movff	abs@a+1,??_abs+1
  4752  005D84  0100               	movlb	0	; () banked
  4753  005D86  1F79               	comf	??_abs& (0+255),f,b
  4754  005D88  1F7A               	comf	(??_abs+1)& (0+255),f,b
  4755  005D8A  4B79               	infsnz	??_abs& (0+255),f,b
  4756  005D8C  2B7A               	incf	(??_abs+1)& (0+255),f,b
  4757  005D8E  C079  F077         	movff	??_abs,?_abs
  4758  005D92  C07A  F078         	movff	??_abs+1,?_abs+1
  4759  005D96  0012               	return	
  4760  005D98                     l897:
  4761                           
  4762                           ; BSR set to: 0
  4763  005D98  C077  F077         	movff	abs@a,?_abs
  4764  005D9C  C078  F078         	movff	abs@a+1,?_abs+1
  4765                           
  4766                           ; BSR set to: 0
  4767  005DA0  0012               	return		;funcret
  4768  005DA2                     __end_of_abs:
  4769                           	opt stack 0
  4770                           tblptru	equ	0xFF8
  4771                           tblptrh	equ	0xFF7
  4772                           tblptrl	equ	0xFF6
  4773                           tablat	equ	0xFF5
  4774                           postinc0	equ	0xFEE
  4775                           wreg	equ	0xFE8
  4776                           postdec1	equ	0xFE5
  4777                           fsr1l	equ	0xFE1
  4778                           indf2	equ	0xFDF
  4779                           postinc2	equ	0xFDE
  4780                           postdec2	equ	0xFDD
  4781                           fsr2h	equ	0xFDA
  4782                           fsr2l	equ	0xFD9
  4783                           status	equ	0xFD8
  4784                           
  4785 ;; *************** function ___awtofl *****************
  4786 ;; Defined at:
  4787 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  4788 ;; Parameters:    Size  Location     Type
  4789 ;;  c               2   33[BANK0 ] int 
  4790 ;; Auto vars:     Size  Location     Type
  4791 ;;  f1              4    0        int 
  4792 ;;  sign            1   37[BANK0 ] unsigned char 
  4793 ;; Return value:  Size  Location     Type
  4794 ;;                  4   33[BANK0 ] unsigned char 
  4795 ;; Registers used:
  4796 ;;		wreg, status,2, status,0, cstack
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4802 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4805 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4806 ;;Total ram usage:        5 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    6
  4809 ;; This function calls:
  4810 ;;		___flpack
  4811 ;; This function is called by:
  4812 ;;		_park_search
  4813 ;;		_parallelo
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           	psect	text8
  4818  005BA6                     __ptext8:
  4819                           	opt stack 0
  4820  005BA6                     ___awtofl:
  4821                           	opt stack 22
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;incstack = 0
  4825  005BA6  0E00               	movlw	0
  4826  005BA8  0100               	movlb	0	; () banked
  4827  005BAA  6F85               	movwf	___awtofl@sign& (0+255),b
  4828                           
  4829                           ; BSR set to: 0
  4830  005BAC  0100               	movlb	0	; () banked
  4831  005BAE  AF82               	btfss	(___awtofl@c+1)& (0+255),7,b
  4832  005BB0  D008               	goto	l6444
  4833                           
  4834                           ; BSR set to: 0
  4835  005BB2  0100               	movlb	0	; () banked
  4836  005BB4  6D81               	negf	___awtofl@c& (0+255),b
  4837  005BB6  1F82               	comf	(___awtofl@c+1)& (0+255),f,b
  4838  005BB8  B0D8               	btfsc	status,0,c
  4839  005BBA  2B82               	incf	(___awtofl@c+1)& (0+255),f,b
  4840  005BBC  0100               	movlb	0	; () banked
  4841  005BBE  2B85               	incf	___awtofl@sign& (0+255),f,b
  4842  005BC0  D000               	goto	l6444
  4843  005BC2                     l6444:
  4844                           
  4845                           ; BSR set to: 0
  4846  005BC2  C081  F077         	movff	___awtofl@c,___flpack@arg
  4847  005BC6  C082  F078         	movff	___awtofl@c+1,___flpack@arg+1
  4848  005BCA  0100               	movlb	0	; () banked
  4849  005BCC  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  4850  005BCE  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  4851  005BD0  0E96               	movlw	150
  4852  005BD2  0100               	movlb	0	; () banked
  4853  005BD4  6F7B               	movwf	___flpack@exp& (0+255),b
  4854  005BD6  C085  F07C         	movff	___awtofl@sign,___flpack@sign
  4855  005BDA  EC5F  F026         	call	___flpack	;wreg free
  4856  005BDE  C077  F081         	movff	?___flpack,?___awtofl
  4857  005BE2  C078  F082         	movff	?___flpack+1,?___awtofl+1
  4858  005BE6  C079  F083         	movff	?___flpack+2,?___awtofl+2
  4859  005BEA  C07A  F084         	movff	?___flpack+3,?___awtofl+3
  4860  005BEE  0012               	return	
  4861  005BF0  0012               	return		;funcret
  4862  005BF2                     __end_of___awtofl:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           postinc0	equ	0xFEE
  4869                           wreg	equ	0xFE8
  4870                           postdec1	equ	0xFE5
  4871                           fsr1l	equ	0xFE1
  4872                           indf2	equ	0xFDF
  4873                           postinc2	equ	0xFDE
  4874                           postdec2	equ	0xFDD
  4875                           fsr2h	equ	0xFDA
  4876                           fsr2l	equ	0xFD9
  4877                           status	equ	0xFD8
  4878                           
  4879 ;; *************** function _matematica *****************
  4880 ;; Defined at:
  4881 ;;		line 475 in file "parcheggio.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;		None
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;		None
  4886 ;; Return value:  Size  Location     Type
  4887 ;;		None               void
  4888 ;; Registers used:
  4889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4896 ;;      Locals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  4897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4898 ;;      Totals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  4899 ;;Total ram usage:       28 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:   10
  4902 ;; This function calls:
  4903 ;;		___fladd
  4904 ;;		___fldiv
  4905 ;;		___flmul
  4906 ;;		___flneg
  4907 ;;		_asin
  4908 ;;		_cos
  4909 ;; This function is called by:
  4910 ;;		_park_routine
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           	psect	text9
  4915  0026C0                     __ptext9:
  4916                           	opt stack 0
  4917  0026C0                     _matematica:
  4918                           	opt stack 19
  4919                           
  4920                           ;parcheggio.c: 476: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  4921                           
  4922                           ;incstack = 0
  4923  0026C0  C12C  F0A3         	movff	_bordo,___fladd@f2	;volatile
  4924  0026C4  C12D  F0A4         	movff	_bordo+1,___fladd@f2+1	;volatile
  4925  0026C8  C12E  F0A5         	movff	_bordo+2,___fladd@f2+2	;volatile
  4926  0026CC  C12F  F0A6         	movff	_bordo+3,___fladd@f2+3	;volatile
  4927  0026D0  0E00               	movlw	0
  4928  0026D2  0100               	movlb	0	; () banked
  4929  0026D4  6F85               	movwf	___fldiv@f2& (0+255),b
  4930  0026D6  0E00               	movlw	0
  4931  0026D8  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  4932  0026DA  0E00               	movlw	0
  4933  0026DC  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  4934  0026DE  0E40               	movlw	64
  4935  0026E0  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  4936  0026E2  C1EC  F081         	movff	_larghezza,___fldiv@f1
  4937  0026E6  C1ED  F082         	movff	_larghezza+1,___fldiv@f1+1
  4938  0026EA  C1EE  F083         	movff	_larghezza+2,___fldiv@f1+2
  4939  0026EE  C1EF  F084         	movff	_larghezza+3,___fldiv@f1+3
  4940  0026F2  ECD1  F027         	call	___fldiv	;wreg free
  4941  0026F6  C081  F09F         	movff	?___fldiv,___fladd@f1
  4942  0026FA  C082  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  4943  0026FE  C083  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  4944  002702  C084  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  4945  002706  ECF0  F01F         	call	___fladd	;wreg free
  4946  00270A  C09F  F0AB         	movff	?___fladd,___flneg@f1
  4947  00270E  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  4948  002712  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  4949  002716  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  4950  00271A  EC18  F02E         	call	___flneg	;wreg free
  4951  00271E  C0AB  F1C4         	movff	?___flneg,_matematica$3674
  4952  002722  C0AC  F1C5         	movff	?___flneg+1,_matematica$3674+1
  4953  002726  C0AD  F1C6         	movff	?___flneg+2,_matematica$3674+2
  4954  00272A  C0AE  F1C7         	movff	?___flneg+3,_matematica$3674+3
  4955                           
  4956                           ;parcheggio.c: 476: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  4957  00272E  C1C4  F0A3         	movff	_matematica$3674,___fladd@f2
  4958  002732  C1C5  F0A4         	movff	_matematica$3674+1,___fladd@f2+1
  4959  002736  C1C6  F0A5         	movff	_matematica$3674+2,___fladd@f2+2
  4960  00273A  C1C7  F0A6         	movff	_matematica$3674+3,___fladd@f2+3
  4961  00273E  0E00               	movlw	0
  4962  002740  0100               	movlb	0	; () banked
  4963  002742  6F94               	movwf	___flmul@f2& (0+255),b
  4964  002744  0E00               	movlw	0
  4965  002746  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  4966  002748  0E00               	movlw	0
  4967  00274A  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  4968  00274C  0E40               	movlw	64
  4969  00274E  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  4970  002750  C1F0  F090         	movff	_raggio,___flmul@f1
  4971  002754  C1F1  F091         	movff	_raggio+1,___flmul@f1+1
  4972  002758  C1F2  F092         	movff	_raggio+2,___flmul@f1+2
  4973  00275C  C1F3  F093         	movff	_raggio+3,___flmul@f1+3
  4974  002760  EC1F  F027         	call	___flmul	;wreg free
  4975  002764  C090  F09F         	movff	?___flmul,___fladd@f1
  4976  002768  C091  F0A0         	movff	?___flmul+1,___fladd@f1+1
  4977  00276C  C092  F0A1         	movff	?___flmul+2,___fladd@f1+2
  4978  002770  C093  F0A2         	movff	?___flmul+3,___fladd@f1+3
  4979  002774  ECF0  F01F         	call	___fladd	;wreg free
  4980  002778  C09F  F1C8         	movff	?___fladd,_matematica$3675
  4981  00277C  C0A0  F1C9         	movff	?___fladd+1,_matematica$3675+1
  4982  002780  C0A1  F1CA         	movff	?___fladd+2,_matematica$3675+2
  4983  002784  C0A2  F1CB         	movff	?___fladd+3,_matematica$3675+3
  4984                           
  4985                           ;parcheggio.c: 476: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  4986  002788  0E00               	movlw	0
  4987  00278A  0100               	movlb	0	; () banked
  4988  00278C  6F85               	movwf	___fldiv@f2& (0+255),b
  4989  00278E  0E00               	movlw	0
  4990  002790  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  4991  002792  0E00               	movlw	0
  4992  002794  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  4993  002796  0E40               	movlw	64
  4994  002798  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  4995  00279A  C1EC  F081         	movff	_larghezza,___fldiv@f1
  4996  00279E  C1ED  F082         	movff	_larghezza+1,___fldiv@f1+1
  4997  0027A2  C1EE  F083         	movff	_larghezza+2,___fldiv@f1+2
  4998  0027A6  C1EF  F084         	movff	_larghezza+3,___fldiv@f1+3
  4999  0027AA  ECD1  F027         	call	___fldiv	;wreg free
  5000  0027AE  C081  F0AB         	movff	?___fldiv,___flneg@f1
  5001  0027B2  C082  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  5002  0027B6  C083  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  5003  0027BA  C084  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  5004  0027BE  EC18  F02E         	call	___flneg	;wreg free
  5005  0027C2  C0AB  F0A3         	movff	?___flneg,___fladd@f2
  5006  0027C6  C0AC  F0A4         	movff	?___flneg+1,___fladd@f2+1
  5007  0027CA  C0AD  F0A5         	movff	?___flneg+2,___fladd@f2+2
  5008  0027CE  C0AE  F0A6         	movff	?___flneg+3,___fladd@f2+3
  5009  0027D2  C1C8  F09F         	movff	_matematica$3675,___fladd@f1
  5010  0027D6  C1C9  F0A0         	movff	_matematica$3675+1,___fladd@f1+1
  5011  0027DA  C1CA  F0A1         	movff	_matematica$3675+2,___fladd@f1+2
  5012  0027DE  C1CB  F0A2         	movff	_matematica$3675+3,___fladd@f1+3
  5013  0027E2  ECF0  F01F         	call	___fladd	;wreg free
  5014  0027E6  C09F  F1CC         	movff	?___fladd,_matematica$3676
  5015  0027EA  C0A0  F1CD         	movff	?___fladd+1,_matematica$3676+1
  5016  0027EE  C0A1  F1CE         	movff	?___fladd+2,_matematica$3676+2
  5017  0027F2  C0A2  F1CF         	movff	?___fladd+3,_matematica$3676+3
  5018                           
  5019                           ;parcheggio.c: 476: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  5020  0027F6  C1CC  F081         	movff	_matematica$3676,___fldiv@f1
  5021  0027FA  C1CD  F082         	movff	_matematica$3676+1,___fldiv@f1+1
  5022  0027FE  C1CE  F083         	movff	_matematica$3676+2,___fldiv@f1+2
  5023  002802  C1CF  F084         	movff	_matematica$3676+3,___fldiv@f1+3
  5024  002806  0E00               	movlw	0
  5025  002808  0100               	movlb	0	; () banked
  5026  00280A  6F94               	movwf	___flmul@f2& (0+255),b
  5027  00280C  0E00               	movlw	0
  5028  00280E  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5029  002810  0E00               	movlw	0
  5030  002812  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5031  002814  0E40               	movlw	64
  5032  002816  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5033  002818  C1F0  F090         	movff	_raggio,___flmul@f1
  5034  00281C  C1F1  F091         	movff	_raggio+1,___flmul@f1+1
  5035  002820  C1F2  F092         	movff	_raggio+2,___flmul@f1+2
  5036  002824  C1F3  F093         	movff	_raggio+3,___flmul@f1+3
  5037  002828  EC1F  F027         	call	___flmul	;wreg free
  5038  00282C  C090  F085         	movff	?___flmul,___fldiv@f2
  5039  002830  C091  F086         	movff	?___flmul+1,___fldiv@f2+1
  5040  002834  C092  F087         	movff	?___flmul+2,___fldiv@f2+2
  5041  002838  C093  F088         	movff	?___flmul+3,___fldiv@f2+3
  5042  00283C  ECD1  F027         	call	___fldiv	;wreg free
  5043  002840  C081  F1D0         	movff	?___fldiv,_matematica$3677
  5044  002844  C082  F1D1         	movff	?___fldiv+1,_matematica$3677+1
  5045  002848  C083  F1D2         	movff	?___fldiv+2,_matematica$3677+2
  5046  00284C  C084  F1D3         	movff	?___fldiv+3,_matematica$3677+3
  5047                           
  5048                           ;parcheggio.c: 476: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  5049  002850  C1D0  F1A0         	movff	_matematica$3677,asin@x
  5050  002854  C1D1  F1A1         	movff	_matematica$3677+1,asin@x+1
  5051  002858  C1D2  F1A2         	movff	_matematica$3677+2,asin@x+2
  5052  00285C  C1D3  F1A3         	movff	_matematica$3677+3,asin@x+3
  5053  002860  ECD0  F01C         	call	_asin	;wreg free
  5054  002864  C1A0  F124         	movff	?_asin,_alfa
  5055  002868  C1A1  F125         	movff	?_asin+1,_alfa+1
  5056  00286C  C1A2  F126         	movff	?_asin+2,_alfa+2
  5057  002870  C1A3  F127         	movff	?_asin+3,_alfa+3
  5058                           
  5059                           ;parcheggio.c: 477: alfa = alfa / 3.14159265358979323846 * 180;
  5060  002874  0EDB               	movlw	219
  5061  002876  0100               	movlb	0	; () banked
  5062  002878  6F85               	movwf	___fldiv@f2& (0+255),b
  5063  00287A  0E0F               	movlw	15
  5064  00287C  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5065  00287E  0E49               	movlw	73
  5066  002880  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5067  002882  0E40               	movlw	64
  5068  002884  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5069  002886  C124  F081         	movff	_alfa,___fldiv@f1
  5070  00288A  C125  F082         	movff	_alfa+1,___fldiv@f1+1
  5071  00288E  C126  F083         	movff	_alfa+2,___fldiv@f1+2
  5072  002892  C127  F084         	movff	_alfa+3,___fldiv@f1+3
  5073  002896  ECD1  F027         	call	___fldiv	;wreg free
  5074  00289A  C081  F090         	movff	?___fldiv,___flmul@f1
  5075  00289E  C082  F091         	movff	?___fldiv+1,___flmul@f1+1
  5076  0028A2  C083  F092         	movff	?___fldiv+2,___flmul@f1+2
  5077  0028A6  C084  F093         	movff	?___fldiv+3,___flmul@f1+3
  5078  0028AA  0E00               	movlw	0
  5079  0028AC  0100               	movlb	0	; () banked
  5080  0028AE  6F94               	movwf	___flmul@f2& (0+255),b
  5081  0028B0  0E00               	movlw	0
  5082  0028B2  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5083  0028B4  0E34               	movlw	52
  5084  0028B6  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5085  0028B8  0E43               	movlw	67
  5086  0028BA  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5087  0028BC  EC1F  F027         	call	___flmul	;wreg free
  5088  0028C0  C090  F124         	movff	?___flmul,_alfa
  5089  0028C4  C091  F125         	movff	?___flmul+1,_alfa+1
  5090  0028C8  C092  F126         	movff	?___flmul+2,_alfa+2
  5091  0028CC  C093  F127         	movff	?___flmul+3,_alfa+3
  5092                           
  5093                           ;parcheggio.c: 478: beta = 90 - alfa;
  5094  0028D0  C124  F0AB         	movff	_alfa,___flneg@f1
  5095  0028D4  C125  F0AC         	movff	_alfa+1,___flneg@f1+1
  5096  0028D8  C126  F0AD         	movff	_alfa+2,___flneg@f1+2
  5097  0028DC  C127  F0AE         	movff	_alfa+3,___flneg@f1+3
  5098  0028E0  EC18  F02E         	call	___flneg	;wreg free
  5099  0028E4  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5100  0028E8  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5101  0028EC  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5102  0028F0  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5103  0028F4  0E00               	movlw	0
  5104  0028F6  0100               	movlb	0	; () banked
  5105  0028F8  6FA3               	movwf	___fladd@f2& (0+255),b
  5106  0028FA  0E00               	movlw	0
  5107  0028FC  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5108  0028FE  0EB4               	movlw	180
  5109  002900  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5110  002902  0E42               	movlw	66
  5111  002904  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5112  002906  ECF0  F01F         	call	___fladd	;wreg free
  5113  00290A  C09F  F128         	movff	?___fladd,_beta
  5114  00290E  C0A0  F129         	movff	?___fladd+1,_beta+1
  5115  002912  C0A1  F12A         	movff	?___fladd+2,_beta+2
  5116  002916  C0A2  F12B         	movff	?___fladd+3,_beta+3
  5117                           
  5118                           ;parcheggio.c: 479: alfa = (alfa * 3.14159265358979323846) / 180;
  5119  00291A  0EDB               	movlw	219
  5120  00291C  0100               	movlb	0	; () banked
  5121  00291E  6F94               	movwf	___flmul@f2& (0+255),b
  5122  002920  0E0F               	movlw	15
  5123  002922  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5124  002924  0E49               	movlw	73
  5125  002926  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5126  002928  0E40               	movlw	64
  5127  00292A  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5128  00292C  C124  F090         	movff	_alfa,___flmul@f1
  5129  002930  C125  F091         	movff	_alfa+1,___flmul@f1+1
  5130  002934  C126  F092         	movff	_alfa+2,___flmul@f1+2
  5131  002938  C127  F093         	movff	_alfa+3,___flmul@f1+3
  5132  00293C  EC1F  F027         	call	___flmul	;wreg free
  5133  002940  C090  F081         	movff	?___flmul,___fldiv@f1
  5134  002944  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5135  002948  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5136  00294C  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5137  002950  0E00               	movlw	0
  5138  002952  0100               	movlb	0	; () banked
  5139  002954  6F85               	movwf	___fldiv@f2& (0+255),b
  5140  002956  0E00               	movlw	0
  5141  002958  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5142  00295A  0E34               	movlw	52
  5143  00295C  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5144  00295E  0E43               	movlw	67
  5145  002960  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5146  002962  ECD1  F027         	call	___fldiv	;wreg free
  5147  002966  C081  F124         	movff	?___fldiv,_alfa
  5148  00296A  C082  F125         	movff	?___fldiv+1,_alfa+1
  5149  00296E  C083  F126         	movff	?___fldiv+2,_alfa+2
  5150  002972  C084  F127         	movff	?___fldiv+3,_alfa+3
  5151                           
  5152                           ;parcheggio.c: 480: n = cos(alfa);
  5153  002976  C124  F1BC         	movff	_alfa,cos@f
  5154  00297A  C125  F1BD         	movff	_alfa+1,cos@f+1
  5155  00297E  C126  F1BE         	movff	_alfa+2,cos@f+2
  5156  002982  C127  F1BF         	movff	_alfa+3,cos@f+3
  5157  002986  EC1B  F02B         	call	_cos	;wreg free
  5158  00298A  C1BC  F130         	movff	?_cos,_n
  5159  00298E  C1BD  F131         	movff	?_cos+1,_n+1
  5160  002992  C1BE  F132         	movff	?_cos+2,_n+2
  5161  002996  C1BF  F133         	movff	?_cos+3,_n+3
  5162                           
  5163                           ;parcheggio.c: 481: n = 2 * raggio *n;
  5164  00299A  C130  F094         	movff	_n,___flmul@f2
  5165  00299E  C131  F095         	movff	_n+1,___flmul@f2+1
  5166  0029A2  C132  F096         	movff	_n+2,___flmul@f2+2
  5167  0029A6  C133  F097         	movff	_n+3,___flmul@f2+3
  5168  0029AA  C1F0  F090         	movff	_raggio,___flmul@f1
  5169  0029AE  C1F1  F091         	movff	_raggio+1,___flmul@f1+1
  5170  0029B2  C1F2  F092         	movff	_raggio+2,___flmul@f1+2
  5171  0029B6  C1F3  F093         	movff	_raggio+3,___flmul@f1+3
  5172  0029BA  EC1F  F027         	call	___flmul	;wreg free
  5173  0029BE  C090  F1DC         	movff	?___flmul,_matematica$3678
  5174  0029C2  C091  F1DD         	movff	?___flmul+1,_matematica$3678+1
  5175  0029C6  C092  F1DE         	movff	?___flmul+2,_matematica$3678+2
  5176  0029CA  C093  F1DF         	movff	?___flmul+3,_matematica$3678+3
  5177                           
  5178                           ;parcheggio.c: 481: n = 2 * raggio *n;
  5179  0029CE  C1DC  F090         	movff	_matematica$3678,___flmul@f1
  5180  0029D2  C1DD  F091         	movff	_matematica$3678+1,___flmul@f1+1
  5181  0029D6  C1DE  F092         	movff	_matematica$3678+2,___flmul@f1+2
  5182  0029DA  C1DF  F093         	movff	_matematica$3678+3,___flmul@f1+3
  5183  0029DE  0E00               	movlw	0
  5184  0029E0  0100               	movlb	0	; () banked
  5185  0029E2  6F94               	movwf	___flmul@f2& (0+255),b
  5186  0029E4  0E00               	movlw	0
  5187  0029E6  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5188  0029E8  0E00               	movlw	0
  5189  0029EA  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5190  0029EC  0E40               	movlw	64
  5191  0029EE  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5192  0029F0  EC1F  F027         	call	___flmul	;wreg free
  5193  0029F4  C090  F130         	movff	?___flmul,_n
  5194  0029F8  C091  F131         	movff	?___flmul+1,_n+1
  5195  0029FC  C092  F132         	movff	?___flmul+2,_n+2
  5196  002A00  C093  F133         	movff	?___flmul+3,_n+3
  5197                           
  5198                           ;parcheggio.c: 482: prima_sterzata = 2 * 3.14159265358979323846 * raggio * beta / 360;
  5199  002A04  C128  F094         	movff	_beta,___flmul@f2
  5200  002A08  C129  F095         	movff	_beta+1,___flmul@f2+1
  5201  002A0C  C12A  F096         	movff	_beta+2,___flmul@f2+2
  5202  002A10  C12B  F097         	movff	_beta+3,___flmul@f2+3
  5203  002A14  C1F0  F090         	movff	_raggio,___flmul@f1
  5204  002A18  C1F1  F091         	movff	_raggio+1,___flmul@f1+1
  5205  002A1C  C1F2  F092         	movff	_raggio+2,___flmul@f1+2
  5206  002A20  C1F3  F093         	movff	_raggio+3,___flmul@f1+3
  5207  002A24  EC1F  F027         	call	___flmul	;wreg free
  5208  002A28  C090  F1DC         	movff	?___flmul,_matematica$3678
  5209  002A2C  C091  F1DD         	movff	?___flmul+1,_matematica$3678+1
  5210  002A30  C092  F1DE         	movff	?___flmul+2,_matematica$3678+2
  5211  002A34  C093  F1DF         	movff	?___flmul+3,_matematica$3678+3
  5212                           
  5213                           ;parcheggio.c: 482: prima_sterzata = 2 * 3.14159265358979323846 * raggio * beta / 360;
  5214  002A38  0EDB               	movlw	219
  5215  002A3A  0100               	movlb	0	; () banked
  5216  002A3C  6F94               	movwf	___flmul@f2& (0+255),b
  5217  002A3E  0E0F               	movlw	15
  5218  002A40  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5219  002A42  0EC9               	movlw	201
  5220  002A44  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5221  002A46  0E40               	movlw	64
  5222  002A48  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5223  002A4A  C1DC  F090         	movff	_matematica$3678,___flmul@f1
  5224  002A4E  C1DD  F091         	movff	_matematica$3678+1,___flmul@f1+1
  5225  002A52  C1DE  F092         	movff	_matematica$3678+2,___flmul@f1+2
  5226  002A56  C1DF  F093         	movff	_matematica$3678+3,___flmul@f1+3
  5227  002A5A  EC1F  F027         	call	___flmul	;wreg free
  5228  002A5E  C090  F081         	movff	?___flmul,___fldiv@f1
  5229  002A62  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5230  002A66  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5231  002A6A  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5232  002A6E  0E00               	movlw	0
  5233  002A70  0100               	movlb	0	; () banked
  5234  002A72  6F85               	movwf	___fldiv@f2& (0+255),b
  5235  002A74  0E00               	movlw	0
  5236  002A76  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5237  002A78  0EB4               	movlw	180
  5238  002A7A  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5239  002A7C  0E43               	movlw	67
  5240  002A7E  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5241  002A80  ECD1  F027         	call	___fldiv	;wreg free
  5242  002A84  C081  F138         	movff	?___fldiv,_prima_sterzata
  5243  002A88  C082  F139         	movff	?___fldiv+1,_prima_sterzata+1
  5244  002A8C  C083  F13A         	movff	?___fldiv+2,_prima_sterzata+2
  5245  002A90  C084  F13B         	movff	?___fldiv+3,_prima_sterzata+3
  5246                           
  5247                           ;parcheggio.c: 483: K_var = raggio + (2 * larghezza / 3);
  5248  002A94  0E00               	movlw	0
  5249  002A96  0100               	movlb	0	; () banked
  5250  002A98  6F85               	movwf	___fldiv@f2& (0+255),b
  5251  002A9A  0E00               	movlw	0
  5252  002A9C  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5253  002A9E  0E40               	movlw	64
  5254  002AA0  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5255  002AA2  0E40               	movlw	64
  5256  002AA4  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5257  002AA6  0E00               	movlw	0
  5258  002AA8  0100               	movlb	0	; () banked
  5259  002AAA  6F94               	movwf	___flmul@f2& (0+255),b
  5260  002AAC  0E00               	movlw	0
  5261  002AAE  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5262  002AB0  0E00               	movlw	0
  5263  002AB2  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5264  002AB4  0E40               	movlw	64
  5265  002AB6  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5266  002AB8  C1EC  F090         	movff	_larghezza,___flmul@f1
  5267  002ABC  C1ED  F091         	movff	_larghezza+1,___flmul@f1+1
  5268  002AC0  C1EE  F092         	movff	_larghezza+2,___flmul@f1+2
  5269  002AC4  C1EF  F093         	movff	_larghezza+3,___flmul@f1+3
  5270  002AC8  EC1F  F027         	call	___flmul	;wreg free
  5271  002ACC  C090  F081         	movff	?___flmul,___fldiv@f1
  5272  002AD0  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5273  002AD4  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5274  002AD8  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5275  002ADC  ECD1  F027         	call	___fldiv	;wreg free
  5276  002AE0  C081  F09F         	movff	?___fldiv,___fladd@f1
  5277  002AE4  C082  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  5278  002AE8  C083  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  5279  002AEC  C084  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  5280  002AF0  C1F0  F0A3         	movff	_raggio,___fladd@f2
  5281  002AF4  C1F1  F0A4         	movff	_raggio+1,___fladd@f2+1
  5282  002AF8  C1F2  F0A5         	movff	_raggio+2,___fladd@f2+2
  5283  002AFC  C1F3  F0A6         	movff	_raggio+3,___fladd@f2+3
  5284  002B00  ECF0  F01F         	call	___fladd	;wreg free
  5285  002B04  C09F  F11C         	movff	?___fladd,_K_var
  5286  002B08  C0A0  F11D         	movff	?___fladd+1,_K_var+1
  5287  002B0C  C0A1  F11E         	movff	?___fladd+2,_K_var+2
  5288  002B10  C0A2  F11F         	movff	?___fladd+3,_K_var+3
  5289                           
  5290                           ;parcheggio.c: 484: J_var = raggio - (2 * larghezza / 3);
  5291  002B14  0E00               	movlw	0
  5292  002B16  0100               	movlb	0	; () banked
  5293  002B18  6F85               	movwf	___fldiv@f2& (0+255),b
  5294  002B1A  0E00               	movlw	0
  5295  002B1C  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5296  002B1E  0E40               	movlw	64
  5297  002B20  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5298  002B22  0E40               	movlw	64
  5299  002B24  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5300  002B26  0E00               	movlw	0
  5301  002B28  0100               	movlb	0	; () banked
  5302  002B2A  6F94               	movwf	___flmul@f2& (0+255),b
  5303  002B2C  0E00               	movlw	0
  5304  002B2E  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5305  002B30  0E00               	movlw	0
  5306  002B32  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5307  002B34  0E40               	movlw	64
  5308  002B36  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5309  002B38  C1EC  F090         	movff	_larghezza,___flmul@f1
  5310  002B3C  C1ED  F091         	movff	_larghezza+1,___flmul@f1+1
  5311  002B40  C1EE  F092         	movff	_larghezza+2,___flmul@f1+2
  5312  002B44  C1EF  F093         	movff	_larghezza+3,___flmul@f1+3
  5313  002B48  EC1F  F027         	call	___flmul	;wreg free
  5314  002B4C  C090  F081         	movff	?___flmul,___fldiv@f1
  5315  002B50  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5316  002B54  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5317  002B58  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5318  002B5C  ECD1  F027         	call	___fldiv	;wreg free
  5319  002B60  C081  F0AB         	movff	?___fldiv,___flneg@f1
  5320  002B64  C082  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  5321  002B68  C083  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  5322  002B6C  C084  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  5323  002B70  EC18  F02E         	call	___flneg	;wreg free
  5324  002B74  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5325  002B78  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5326  002B7C  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5327  002B80  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5328  002B84  C1F0  F0A3         	movff	_raggio,___fladd@f2
  5329  002B88  C1F1  F0A4         	movff	_raggio+1,___fladd@f2+1
  5330  002B8C  C1F2  F0A5         	movff	_raggio+2,___fladd@f2+2
  5331  002B90  C1F3  F0A6         	movff	_raggio+3,___fladd@f2+3
  5332  002B94  ECF0  F01F         	call	___fladd	;wreg free
  5333  002B98  C09F  F118         	movff	?___fladd,_J_var
  5334  002B9C  C0A0  F119         	movff	?___fladd+1,_J_var+1
  5335  002BA0  C0A1  F11A         	movff	?___fladd+2,_J_var+2
  5336  002BA4  C0A2  F11B         	movff	?___fladd+3,_J_var+3
  5337                           
  5338                           ;parcheggio.c: 485: Pmin = K_var * cos(asin((J_var / K_var)));
  5339  002BA8  C11C  F085         	movff	_K_var,___fldiv@f2
  5340  002BAC  C11D  F086         	movff	_K_var+1,___fldiv@f2+1
  5341  002BB0  C11E  F087         	movff	_K_var+2,___fldiv@f2+2
  5342  002BB4  C11F  F088         	movff	_K_var+3,___fldiv@f2+3
  5343  002BB8  C118  F081         	movff	_J_var,___fldiv@f1
  5344  002BBC  C119  F082         	movff	_J_var+1,___fldiv@f1+1
  5345  002BC0  C11A  F083         	movff	_J_var+2,___fldiv@f1+2
  5346  002BC4  C11B  F084         	movff	_J_var+3,___fldiv@f1+3
  5347  002BC8  ECD1  F027         	call	___fldiv	;wreg free
  5348  002BCC  C081  F1D4         	movff	?___fldiv,_matematica$3679
  5349  002BD0  C082  F1D5         	movff	?___fldiv+1,_matematica$3679+1
  5350  002BD4  C083  F1D6         	movff	?___fldiv+2,_matematica$3679+2
  5351  002BD8  C084  F1D7         	movff	?___fldiv+3,_matematica$3679+3
  5352                           
  5353                           ;parcheggio.c: 485: Pmin = K_var * cos(asin((J_var / K_var)));
  5354  002BDC  C1D4  F1A0         	movff	_matematica$3679,asin@x
  5355  002BE0  C1D5  F1A1         	movff	_matematica$3679+1,asin@x+1
  5356  002BE4  C1D6  F1A2         	movff	_matematica$3679+2,asin@x+2
  5357  002BE8  C1D7  F1A3         	movff	_matematica$3679+3,asin@x+3
  5358  002BEC  ECD0  F01C         	call	_asin	;wreg free
  5359  002BF0  C1A0  F1BC         	movff	?_asin,cos@f
  5360  002BF4  C1A1  F1BD         	movff	?_asin+1,cos@f+1
  5361  002BF8  C1A2  F1BE         	movff	?_asin+2,cos@f+2
  5362  002BFC  C1A3  F1BF         	movff	?_asin+3,cos@f+3
  5363  002C00  EC1B  F02B         	call	_cos	;wreg free
  5364  002C04  C1BC  F1D8         	movff	?_cos,_matematica$3680
  5365  002C08  C1BD  F1D9         	movff	?_cos+1,_matematica$3680+1
  5366  002C0C  C1BE  F1DA         	movff	?_cos+2,_matematica$3680+2
  5367  002C10  C1BF  F1DB         	movff	?_cos+3,_matematica$3680+3
  5368                           
  5369                           ;parcheggio.c: 485: Pmin = K_var * cos(asin((J_var / K_var)));
  5370  002C14  C1D8  F090         	movff	_matematica$3680,___flmul@f1
  5371  002C18  C1D9  F091         	movff	_matematica$3680+1,___flmul@f1+1
  5372  002C1C  C1DA  F092         	movff	_matematica$3680+2,___flmul@f1+2
  5373  002C20  C1DB  F093         	movff	_matematica$3680+3,___flmul@f1+3
  5374  002C24  C11C  F094         	movff	_K_var,___flmul@f2
  5375  002C28  C11D  F095         	movff	_K_var+1,___flmul@f2+1
  5376  002C2C  C11E  F096         	movff	_K_var+2,___flmul@f2+2
  5377  002C30  C11F  F097         	movff	_K_var+3,___flmul@f2+3
  5378  002C34  EC1F  F027         	call	___flmul	;wreg free
  5379  002C38  C090  F120         	movff	?___flmul,_Pmin
  5380  002C3C  C091  F121         	movff	?___flmul+1,_Pmin+1
  5381  002C40  C092  F122         	movff	?___flmul+2,_Pmin+2
  5382  002C44  C093  F123         	movff	?___flmul+3,_Pmin+3
  5383  002C48  0012               	return		;funcret
  5384  002C4A                     __end_of_matematica:
  5385                           	opt stack 0
  5386                           tblptru	equ	0xFF8
  5387                           tblptrh	equ	0xFF7
  5388                           tblptrl	equ	0xFF6
  5389                           tablat	equ	0xFF5
  5390                           postinc0	equ	0xFEE
  5391                           wreg	equ	0xFE8
  5392                           postdec1	equ	0xFE5
  5393                           fsr1l	equ	0xFE1
  5394                           indf2	equ	0xFDF
  5395                           postinc2	equ	0xFDE
  5396                           postdec2	equ	0xFDD
  5397                           fsr2h	equ	0xFDA
  5398                           fsr2l	equ	0xFD9
  5399                           status	equ	0xFD8
  5400                           
  5401 ;; *************** function _cos *****************
  5402 ;; Defined at:
  5403 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\cos.c"
  5404 ;; Parameters:    Size  Location     Type
  5405 ;;  f               4   49[BANK1 ] unsigned char 
  5406 ;; Auto vars:     Size  Location     Type
  5407 ;;		None
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  4   49[BANK1 ] unsigned char 
  5410 ;; Registers used:
  5411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5417 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5421 ;;Total ram usage:        8 bytes
  5422 ;; Hardware stack levels used:    1
  5423 ;; Hardware stack levels required when called:    9
  5424 ;; This function calls:
  5425 ;;		___fladd
  5426 ;;		___flge
  5427 ;;		_sin
  5428 ;; This function is called by:
  5429 ;;		_matematica
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text10
  5434  005636                     __ptext10:
  5435                           	opt stack 0
  5436  005636                     _cos:
  5437                           	opt stack 19
  5438                           
  5439                           ;incstack = 0
  5440  005636  0EDB               	movlw	219
  5441  005638  0100               	movlb	0	; () banked
  5442  00563A  6FB3               	movwf	___flge@ff1& (0+255),b
  5443  00563C  0E0F               	movlw	15
  5444  00563E  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5445  005640  0E49               	movlw	73
  5446  005642  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5447  005644  0E40               	movlw	64
  5448  005646  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5449  005648  C1BC  F0B7         	movff	cos@f,___flge@ff2
  5450  00564C  C1BD  F0B8         	movff	cos@f+1,___flge@ff2+1
  5451  005650  C1BE  F0B9         	movff	cos@f+2,___flge@ff2+2
  5452  005654  C1BF  F0BA         	movff	cos@f+3,___flge@ff2+3
  5453  005658  EC9F  F02A         	call	___flge	;wreg free
  5454  00565C  0100               	movlb	0	; () banked
  5455  00565E  B0D8               	btfsc	status,0,c
  5456  005660  D02E               	goto	l6432
  5457                           
  5458                           ; BSR set to: 0
  5459  005662  C1BC  F09F         	movff	cos@f,___fladd@f1
  5460  005666  C1BD  F0A0         	movff	cos@f+1,___fladd@f1+1
  5461  00566A  C1BE  F0A1         	movff	cos@f+2,___fladd@f1+2
  5462  00566E  C1BF  F0A2         	movff	cos@f+3,___fladd@f1+3
  5463  005672  0EE4               	movlw	228
  5464  005674  0100               	movlb	0	; () banked
  5465  005676  6FA3               	movwf	___fladd@f2& (0+255),b
  5466  005678  0ECB               	movlw	203
  5467  00567A  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5468  00567C  0E96               	movlw	150
  5469  00567E  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5470  005680  0EC0               	movlw	192
  5471  005682  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5472  005684  ECF0  F01F         	call	___fladd	;wreg free
  5473  005688  C09F  F1C0         	movff	?___fladd,_cos$3685
  5474  00568C  C0A0  F1C1         	movff	?___fladd+1,_cos$3685+1
  5475  005690  C0A1  F1C2         	movff	?___fladd+2,_cos$3685+2
  5476  005694  C0A2  F1C3         	movff	?___fladd+3,_cos$3685+3
  5477  005698  C1C0  F0D1         	movff	_cos$3685,sin@f
  5478  00569C  C1C1  F0D2         	movff	_cos$3685+1,sin@f+1
  5479  0056A0  C1C2  F0D3         	movff	_cos$3685+2,sin@f+2
  5480  0056A4  C1C3  F0D4         	movff	_cos$3685+3,sin@f+3
  5481  0056A8  EC62  F01E         	call	_sin	;wreg free
  5482  0056AC  C0D1  F1BC         	movff	?_sin,?_cos
  5483  0056B0  C0D2  F1BD         	movff	?_sin+1,?_cos+1
  5484  0056B4  C0D3  F1BE         	movff	?_sin+2,?_cos+2
  5485  0056B8  C0D4  F1BF         	movff	?_sin+3,?_cos+3
  5486  0056BC  0012               	return	
  5487  0056BE                     l6432:
  5488  0056BE  C1BC  F09F         	movff	cos@f,___fladd@f1
  5489  0056C2  C1BD  F0A0         	movff	cos@f+1,___fladd@f1+1
  5490  0056C6  C1BE  F0A1         	movff	cos@f+2,___fladd@f1+2
  5491  0056CA  C1BF  F0A2         	movff	cos@f+3,___fladd@f1+3
  5492  0056CE  0EDB               	movlw	219
  5493  0056D0  0100               	movlb	0	; () banked
  5494  0056D2  6FA3               	movwf	___fladd@f2& (0+255),b
  5495  0056D4  0E0F               	movlw	15
  5496  0056D6  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5497  0056D8  0EC9               	movlw	201
  5498  0056DA  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5499  0056DC  0E3F               	movlw	63
  5500  0056DE  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5501  0056E0  ECF0  F01F         	call	___fladd	;wreg free
  5502  0056E4  C09F  F1C0         	movff	?___fladd,_cos$3685
  5503  0056E8  C0A0  F1C1         	movff	?___fladd+1,_cos$3685+1
  5504  0056EC  C0A1  F1C2         	movff	?___fladd+2,_cos$3685+2
  5505  0056F0  C0A2  F1C3         	movff	?___fladd+3,_cos$3685+3
  5506  0056F4  C1C0  F0D1         	movff	_cos$3685,sin@f
  5507  0056F8  C1C1  F0D2         	movff	_cos$3685+1,sin@f+1
  5508  0056FC  C1C2  F0D3         	movff	_cos$3685+2,sin@f+2
  5509  005700  C1C3  F0D4         	movff	_cos$3685+3,sin@f+3
  5510  005704  EC62  F01E         	call	_sin	;wreg free
  5511  005708  C0D1  F1BC         	movff	?_sin,?_cos
  5512  00570C  C0D2  F1BD         	movff	?_sin+1,?_cos+1
  5513  005710  C0D3  F1BE         	movff	?_sin+2,?_cos+2
  5514  005714  C0D4  F1BF         	movff	?_sin+3,?_cos+3
  5515  005718  0012               	return	
  5516  00571A  0012               	return		;funcret
  5517  00571C                     __end_of_cos:
  5518                           	opt stack 0
  5519                           tblptru	equ	0xFF8
  5520                           tblptrh	equ	0xFF7
  5521                           tblptrl	equ	0xFF6
  5522                           tablat	equ	0xFF5
  5523                           postinc0	equ	0xFEE
  5524                           wreg	equ	0xFE8
  5525                           postdec1	equ	0xFE5
  5526                           fsr1l	equ	0xFE1
  5527                           indf2	equ	0xFDF
  5528                           postinc2	equ	0xFDE
  5529                           postdec2	equ	0xFDD
  5530                           fsr2h	equ	0xFDA
  5531                           fsr2l	equ	0xFD9
  5532                           status	equ	0xFD8
  5533                           
  5534 ;; *************** function _sin *****************
  5535 ;; Defined at:
  5536 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sin.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;  f               4  113[BANK0 ] unsigned char 
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;  x2              4    8[BANK1 ] unsigned char 
  5541 ;;  y               4    0[BANK1 ] unsigned char 
  5542 ;;  sgn             1   12[BANK1 ] unsigned char 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  4  113[BANK0 ] unsigned char 
  5545 ;; Registers used:
  5546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5552 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5553 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5555 ;;      Totals:         0       4      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5556 ;;Total ram usage:       17 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    8
  5559 ;; This function calls:
  5560 ;;		___fladd
  5561 ;;		___fldiv
  5562 ;;		___flge
  5563 ;;		___flmul
  5564 ;;		___flneg
  5565 ;;		___flsub
  5566 ;;		_eval_poly
  5567 ;;		_floor
  5568 ;; This function is called by:
  5569 ;;		_cos
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text11
  5574  003CC4                     __ptext11:
  5575                           	opt stack 0
  5576  003CC4                     _sin:
  5577                           	opt stack 19
  5578                           
  5579                           ;incstack = 0
  5580  003CC4  0E00               	movlw	0
  5581  003CC6  0101               	movlb	1	; () banked
  5582  003CC8  6F97               	movwf	sin@sgn& (0+255),b
  5583                           
  5584                           ; BSR set to: 1
  5585  003CCA  0100               	movlb	0	; () banked
  5586  003CCC  AFD4               	btfss	(sin@f+3)& (0+255),7,b
  5587  003CCE  D016               	goto	l6358
  5588                           
  5589                           ; BSR set to: 0
  5590  003CD0  C0D1  F0AB         	movff	sin@f,___flneg@f1
  5591  003CD4  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  5592  003CD8  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  5593  003CDC  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  5594  003CE0  EC18  F02E         	call	___flneg	;wreg free
  5595  003CE4  C0AB  F0D1         	movff	?___flneg,sin@f
  5596  003CE8  C0AC  F0D2         	movff	?___flneg+1,sin@f+1
  5597  003CEC  C0AD  F0D3         	movff	?___flneg+2,sin@f+2
  5598  003CF0  C0AE  F0D4         	movff	?___flneg+3,sin@f+3
  5599  003CF4  0E01               	movlw	1
  5600  003CF6  0101               	movlb	1	; () banked
  5601  003CF8  6F97               	movwf	sin@sgn& (0+255),b
  5602  003CFA  D000               	goto	l6358
  5603  003CFC                     l6358:
  5604  003CFC  C0D1  F090         	movff	sin@f,___flmul@f1
  5605  003D00  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5606  003D04  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5607  003D08  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5608  003D0C  0E83               	movlw	131
  5609  003D0E  0100               	movlb	0	; () banked
  5610  003D10  6F94               	movwf	___flmul@f2& (0+255),b
  5611  003D12  0EF9               	movlw	249
  5612  003D14  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5613  003D16  0E22               	movlw	34
  5614  003D18  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5615  003D1A  0E3E               	movlw	62
  5616  003D1C  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5617  003D1E  EC1F  F027         	call	___flmul	;wreg free
  5618  003D22  C090  F0D1         	movff	?___flmul,sin@f
  5619  003D26  C091  F0D2         	movff	?___flmul+1,sin@f+1
  5620  003D2A  C092  F0D3         	movff	?___flmul+2,sin@f+2
  5621  003D2E  C093  F0D4         	movff	?___flmul+3,sin@f+3
  5622  003D32  C0D1  F0C9         	movff	sin@f,___flsub@f1
  5623  003D36  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  5624  003D3A  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  5625  003D3E  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  5626  003D42  C0D1  F0BF         	movff	sin@f,floor@x
  5627  003D46  C0D2  F0C0         	movff	sin@f+1,floor@x+1
  5628  003D4A  C0D3  F0C1         	movff	sin@f+2,floor@x+2
  5629  003D4E  C0D4  F0C2         	movff	sin@f+3,floor@x+3
  5630  003D52  EC6C  F028         	call	_floor	;wreg free
  5631  003D56  C0BF  F0CD         	movff	?_floor,___flsub@f2
  5632  003D5A  C0C0  F0CE         	movff	?_floor+1,___flsub@f2+1
  5633  003D5E  C0C1  F0CF         	movff	?_floor+2,___flsub@f2+2
  5634  003D62  C0C2  F0D0         	movff	?_floor+3,___flsub@f2+3
  5635  003D66  EC4D  F02D         	call	___flsub	;wreg free
  5636  003D6A  C0C9  F0D1         	movff	?___flsub,sin@f
  5637  003D6E  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  5638  003D72  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  5639  003D76  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  5640  003D7A  C0D1  F090         	movff	sin@f,___flmul@f1
  5641  003D7E  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5642  003D82  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5643  003D86  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5644  003D8A  0E00               	movlw	0
  5645  003D8C  0100               	movlb	0	; () banked
  5646  003D8E  6F94               	movwf	___flmul@f2& (0+255),b
  5647  003D90  0E00               	movlw	0
  5648  003D92  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5649  003D94  0E80               	movlw	128
  5650  003D96  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5651  003D98  0E40               	movlw	64
  5652  003D9A  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5653  003D9C  EC1F  F027         	call	___flmul	;wreg free
  5654  003DA0  C090  F0D1         	movff	?___flmul,sin@f
  5655  003DA4  C091  F0D2         	movff	?___flmul+1,sin@f+1
  5656  003DA8  C092  F0D3         	movff	?___flmul+2,sin@f+2
  5657  003DAC  C093  F0D4         	movff	?___flmul+3,sin@f+3
  5658  003DB0  0E00               	movlw	0
  5659  003DB2  0100               	movlb	0	; () banked
  5660  003DB4  6FB3               	movwf	___flge@ff1& (0+255),b
  5661  003DB6  0E00               	movlw	0
  5662  003DB8  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5663  003DBA  0E00               	movlw	0
  5664  003DBC  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5665  003DBE  0E40               	movlw	64
  5666  003DC0  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5667  003DC2  C0D1  F0B7         	movff	sin@f,___flge@ff2
  5668  003DC6  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  5669  003DCA  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  5670  003DCE  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  5671  003DD2  EC9F  F02A         	call	___flge	;wreg free
  5672  003DD6  0100               	movlb	0	; () banked
  5673  003DD8  B0D8               	btfsc	status,0,c
  5674  003DDA  D026               	goto	l6370
  5675                           
  5676                           ; BSR set to: 0
  5677  003DDC  C0D1  F0C9         	movff	sin@f,___flsub@f1
  5678  003DE0  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  5679  003DE4  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  5680  003DE8  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  5681  003DEC  0E00               	movlw	0
  5682  003DEE  0100               	movlb	0	; () banked
  5683  003DF0  6FCD               	movwf	___flsub@f2& (0+255),b
  5684  003DF2  0E00               	movlw	0
  5685  003DF4  6FCE               	movwf	(___flsub@f2+1)& (0+255),b
  5686  003DF6  0E00               	movlw	0
  5687  003DF8  6FCF               	movwf	(___flsub@f2+2)& (0+255),b
  5688  003DFA  0E40               	movlw	64
  5689  003DFC  6FD0               	movwf	(___flsub@f2+3)& (0+255),b
  5690  003DFE  EC4D  F02D         	call	___flsub	;wreg free
  5691  003E02  C0C9  F0D1         	movff	?___flsub,sin@f
  5692  003E06  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  5693  003E0A  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  5694  003E0E  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  5695  003E12  0101               	movlb	1	; () banked
  5696  003E14  5197               	movf	sin@sgn& (0+255),w,b
  5697  003E16  0101               	movlb	1	; () banked
  5698  003E18  A4D8               	btfss	status,2,c
  5699  003E1A  D002               	goto	u7900
  5700  003E1C  0E01               	movlw	1
  5701  003E1E  D001               	goto	u7910
  5702  003E20                     u7900:
  5703  003E20  0E00               	movlw	0
  5704  003E22                     u7910:
  5705  003E22  0101               	movlb	1	; () banked
  5706  003E24  6F97               	movwf	sin@sgn& (0+255),b
  5707  003E26  D000               	goto	l6370
  5708  003E28                     l6370:
  5709  003E28  0E00               	movlw	0
  5710  003E2A  0100               	movlb	0	; () banked
  5711  003E2C  6FB3               	movwf	___flge@ff1& (0+255),b
  5712  003E2E  0E00               	movlw	0
  5713  003E30  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5714  003E32  0E80               	movlw	128
  5715  003E34  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5716  003E36  0E3F               	movlw	63
  5717  003E38  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5718  003E3A  C0D1  F0B7         	movff	sin@f,___flge@ff2
  5719  003E3E  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  5720  003E42  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  5721  003E46  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  5722  003E4A  EC9F  F02A         	call	___flge	;wreg free
  5723  003E4E  0100               	movlb	0	; () banked
  5724  003E50  B0D8               	btfsc	status,0,c
  5725  003E52  D025               	goto	l1462
  5726                           
  5727                           ; BSR set to: 0
  5728  003E54  C0D1  F0AB         	movff	sin@f,___flneg@f1
  5729  003E58  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  5730  003E5C  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  5731  003E60  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  5732  003E64  EC18  F02E         	call	___flneg	;wreg free
  5733  003E68  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5734  003E6C  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5735  003E70  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5736  003E74  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5737  003E78  0E00               	movlw	0
  5738  003E7A  0100               	movlb	0	; () banked
  5739  003E7C  6FA3               	movwf	___fladd@f2& (0+255),b
  5740  003E7E  0E00               	movlw	0
  5741  003E80  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5742  003E82  0E00               	movlw	0
  5743  003E84  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5744  003E86  0E40               	movlw	64
  5745  003E88  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5746  003E8A  ECF0  F01F         	call	___fladd	;wreg free
  5747  003E8E  C09F  F0D1         	movff	?___fladd,sin@f
  5748  003E92  C0A0  F0D2         	movff	?___fladd+1,sin@f+1
  5749  003E96  C0A1  F0D3         	movff	?___fladd+2,sin@f+2
  5750  003E9A  C0A2  F0D4         	movff	?___fladd+3,sin@f+3
  5751  003E9E                     l1462:
  5752  003E9E  C0D1  F090         	movff	sin@f,___flmul@f1
  5753  003EA2  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5754  003EA6  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5755  003EAA  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5756  003EAE  C0D1  F094         	movff	sin@f,___flmul@f2
  5757  003EB2  C0D2  F095         	movff	sin@f+1,___flmul@f2+1
  5758  003EB6  C0D3  F096         	movff	sin@f+2,___flmul@f2+2
  5759  003EBA  C0D4  F097         	movff	sin@f+3,___flmul@f2+3
  5760  003EBE  EC1F  F027         	call	___flmul	;wreg free
  5761  003EC2  C090  F193         	movff	?___flmul,sin@x2
  5762  003EC6  C091  F194         	movff	?___flmul+1,sin@x2+1
  5763  003ECA  C092  F195         	movff	?___flmul+2,sin@x2+2
  5764  003ECE  C093  F196         	movff	?___flmul+3,sin@x2+3
  5765  003ED2  C193  F0AB         	movff	sin@x2,eval_poly@x
  5766  003ED6  C194  F0AC         	movff	sin@x2+1,eval_poly@x+1
  5767  003EDA  C195  F0AD         	movff	sin@x2+2,eval_poly@x+2
  5768  003EDE  C196  F0AE         	movff	sin@x2+3,eval_poly@x+3
  5769  003EE2  0E41               	movlw	low sin@coeff_b
  5770  003EE4  0100               	movlb	0	; () banked
  5771  003EE6  6FAF               	movwf	eval_poly@d& (0+255),b
  5772  003EE8  0E0D               	movlw	high sin@coeff_b
  5773  003EEA  0100               	movlb	0	; () banked
  5774  003EEC  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  5775  003EEE  0E00               	movlw	0
  5776  003EF0  0100               	movlb	0	; () banked
  5777  003EF2  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  5778  003EF4  0E03               	movlw	3
  5779  003EF6  6FB1               	movwf	eval_poly@n& (0+255),b
  5780  003EF8  EC8A  F029         	call	_eval_poly	;wreg free
  5781  003EFC  C0AB  F18B         	movff	?_eval_poly,sin@y
  5782  003F00  C0AC  F18C         	movff	?_eval_poly+1,sin@y+1
  5783  003F04  C0AD  F18D         	movff	?_eval_poly+2,sin@y+2
  5784  003F08  C0AE  F18E         	movff	?_eval_poly+3,sin@y+3
  5785  003F0C  C18B  F085         	movff	sin@y,___fldiv@f2
  5786  003F10  C18C  F086         	movff	sin@y+1,___fldiv@f2+1
  5787  003F14  C18D  F087         	movff	sin@y+2,___fldiv@f2+2
  5788  003F18  C18E  F088         	movff	sin@y+3,___fldiv@f2+3
  5789  003F1C  0E00               	movlw	0
  5790  003F1E  0100               	movlb	0	; () banked
  5791  003F20  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  5792  003F22  0E04               	movlw	4
  5793  003F24  6FB1               	movwf	eval_poly@n& (0+255),b
  5794  003F26  0E2D               	movlw	low sin@coeff_a
  5795  003F28  0100               	movlb	0	; () banked
  5796  003F2A  6FAF               	movwf	eval_poly@d& (0+255),b
  5797  003F2C  0E0D               	movlw	high sin@coeff_a
  5798  003F2E  0100               	movlb	0	; () banked
  5799  003F30  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  5800  003F32  C193  F0AB         	movff	sin@x2,eval_poly@x
  5801  003F36  C194  F0AC         	movff	sin@x2+1,eval_poly@x+1
  5802  003F3A  C195  F0AD         	movff	sin@x2+2,eval_poly@x+2
  5803  003F3E  C196  F0AE         	movff	sin@x2+3,eval_poly@x+3
  5804  003F42  EC8A  F029         	call	_eval_poly	;wreg free
  5805  003F46  C0AB  F081         	movff	?_eval_poly,___fldiv@f1
  5806  003F4A  C0AC  F082         	movff	?_eval_poly+1,___fldiv@f1+1
  5807  003F4E  C0AD  F083         	movff	?_eval_poly+2,___fldiv@f1+2
  5808  003F52  C0AE  F084         	movff	?_eval_poly+3,___fldiv@f1+3
  5809  003F56  ECD1  F027         	call	___fldiv	;wreg free
  5810  003F5A  C081  F18F         	movff	?___fldiv,_sin$3686
  5811  003F5E  C082  F190         	movff	?___fldiv+1,_sin$3686+1
  5812  003F62  C083  F191         	movff	?___fldiv+2,_sin$3686+2
  5813  003F66  C084  F192         	movff	?___fldiv+3,_sin$3686+3
  5814  003F6A  C0D1  F090         	movff	sin@f,___flmul@f1
  5815  003F6E  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5816  003F72  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5817  003F76  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5818  003F7A  C18F  F094         	movff	_sin$3686,___flmul@f2
  5819  003F7E  C190  F095         	movff	_sin$3686+1,___flmul@f2+1
  5820  003F82  C191  F096         	movff	_sin$3686+2,___flmul@f2+2
  5821  003F86  C192  F097         	movff	_sin$3686+3,___flmul@f2+3
  5822  003F8A  EC1F  F027         	call	___flmul	;wreg free
  5823  003F8E  C090  F0D1         	movff	?___flmul,sin@f
  5824  003F92  C091  F0D2         	movff	?___flmul+1,sin@f+1
  5825  003F96  C092  F0D3         	movff	?___flmul+2,sin@f+2
  5826  003F9A  C093  F0D4         	movff	?___flmul+3,sin@f+3
  5827  003F9E  0101               	movlb	1	; () banked
  5828  003FA0  5197               	movf	sin@sgn& (0+255),w,b
  5829  003FA2  0101               	movlb	1	; () banked
  5830  003FA4  B4D8               	btfsc	status,2,c
  5831  003FA6  D013               	goto	l1463
  5832                           
  5833                           ; BSR set to: 1
  5834  003FA8  C0D1  F0AB         	movff	sin@f,___flneg@f1
  5835  003FAC  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  5836  003FB0  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  5837  003FB4  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  5838  003FB8  EC18  F02E         	call	___flneg	;wreg free
  5839  003FBC  C0AB  F0D1         	movff	?___flneg,?_sin
  5840  003FC0  C0AC  F0D2         	movff	?___flneg+1,?_sin+1
  5841  003FC4  C0AD  F0D3         	movff	?___flneg+2,?_sin+2
  5842  003FC8  C0AE  F0D4         	movff	?___flneg+3,?_sin+3
  5843  003FCC  0012               	return	
  5844  003FCE                     l1463:
  5845                           
  5846                           ; BSR set to: 1
  5847  003FCE  C0D1  F0D1         	movff	sin@f,?_sin
  5848  003FD2  C0D2  F0D2         	movff	sin@f+1,?_sin+1
  5849  003FD6  C0D3  F0D3         	movff	sin@f+2,?_sin+2
  5850  003FDA  C0D4  F0D4         	movff	sin@f+3,?_sin+3
  5851  003FDE  0012               	return		;funcret
  5852  003FE0                     __end_of_sin:
  5853                           	opt stack 0
  5854                           tblptru	equ	0xFF8
  5855                           tblptrh	equ	0xFF7
  5856                           tblptrl	equ	0xFF6
  5857                           tablat	equ	0xFF5
  5858                           postinc0	equ	0xFEE
  5859                           wreg	equ	0xFE8
  5860                           postdec1	equ	0xFE5
  5861                           fsr1l	equ	0xFE1
  5862                           indf2	equ	0xFDF
  5863                           postinc2	equ	0xFDE
  5864                           postdec2	equ	0xFDD
  5865                           fsr2h	equ	0xFDA
  5866                           fsr2l	equ	0xFD9
  5867                           status	equ	0xFD8
  5868                           
  5869 ;; *************** function _floor *****************
  5870 ;; Defined at:
  5871 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;  x               4   95[BANK0 ] unsigned char 
  5874 ;; Auto vars:     Size  Location     Type
  5875 ;;  i               4   99[BANK0 ] unsigned char 
  5876 ;;  expon           2  103[BANK0 ] int 
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  4   95[BANK0 ] int 
  5879 ;; Registers used:
  5880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5886 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5887 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5889 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5890 ;;Total ram usage:       10 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; Hardware stack levels required when called:    7
  5893 ;; This function calls:
  5894 ;;		___altofl
  5895 ;;		___fladd
  5896 ;;		___flge
  5897 ;;		___fltol
  5898 ;;		_frexp
  5899 ;; This function is called by:
  5900 ;;		_sin
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           	psect	text12
  5905  0050D8                     __ptext12:
  5906                           	opt stack 0
  5907  0050D8                     _floor:
  5908                           	opt stack 19
  5909                           
  5910                           ;incstack = 0
  5911  0050D8  C0BF  F077         	movff	floor@x,frexp@value
  5912  0050DC  C0C0  F078         	movff	floor@x+1,frexp@value+1
  5913  0050E0  C0C1  F079         	movff	floor@x+2,frexp@value+2
  5914  0050E4  C0C2  F07A         	movff	floor@x+3,frexp@value+3
  5915  0050E8  0EC7               	movlw	low floor@expon
  5916  0050EA  0100               	movlb	0	; () banked
  5917  0050EC  6F7B               	movwf	frexp@eptr& (0+255),b
  5918  0050EE  0E00               	movlw	high floor@expon
  5919  0050F0  0100               	movlb	0	; () banked
  5920  0050F2  6F7C               	movwf	(frexp@eptr+1)& (0+255),b
  5921  0050F4  EC4C  F02C         	call	_frexp	;wreg free
  5922  0050F8  0100               	movlb	0	; () banked
  5923  0050FA  AFC8               	btfss	(floor@expon+1)& (0+255),7,b
  5924  0050FC  D017               	goto	l6280
  5925                           
  5926                           ; BSR set to: 0
  5927  0050FE  0100               	movlb	0	; () banked
  5928  005100  AFC2               	btfss	(floor@x+3)& (0+255),7,b
  5929  005102  D00A               	goto	l6276
  5930                           
  5931                           ; BSR set to: 0
  5932  005104  0E00               	movlw	0
  5933  005106  0100               	movlb	0	; () banked
  5934  005108  6FBF               	movwf	?_floor& (0+255),b
  5935  00510A  0E00               	movlw	0
  5936  00510C  6FC0               	movwf	(?_floor+1)& (0+255),b
  5937  00510E  0E80               	movlw	128
  5938  005110  6FC1               	movwf	(?_floor+2)& (0+255),b
  5939  005112  0EBF               	movlw	191
  5940  005114  6FC2               	movwf	(?_floor+3)& (0+255),b
  5941                           
  5942                           ; BSR set to: 0
  5943  005116  0012               	return	
  5944  005118                     l6276:
  5945                           
  5946                           ; BSR set to: 0
  5947  005118  0E00               	movlw	0
  5948  00511A  0100               	movlb	0	; () banked
  5949  00511C  6FBF               	movwf	?_floor& (0+255),b
  5950  00511E  0E00               	movlw	0
  5951  005120  6FC0               	movwf	(?_floor+1)& (0+255),b
  5952  005122  0E00               	movlw	0
  5953  005124  6FC1               	movwf	(?_floor+2)& (0+255),b
  5954  005126  0E00               	movlw	0
  5955  005128  6FC2               	movwf	(?_floor+3)& (0+255),b
  5956                           
  5957                           ; BSR set to: 0
  5958  00512A  0012               	return	
  5959  00512C                     l6280:
  5960                           
  5961                           ; BSR set to: 0
  5962  00512C  0100               	movlb	0	; () banked
  5963  00512E  51C8               	movf	(floor@expon+1)& (0+255),w,b
  5964  005130  E105               	bnz	u7780
  5965  005132  0E1D               	movlw	29
  5966  005134  0100               	movlb	0	; () banked
  5967  005136  5DC7               	subwf	floor@expon& (0+255),w,b
  5968  005138  A0D8               	btfss	status,0,c
  5969  00513A  D009               	goto	l6284
  5970  00513C                     u7780:
  5971                           
  5972                           ; BSR set to: 0
  5973  00513C  C0BF  F0BF         	movff	floor@x,?_floor
  5974  005140  C0C0  F0C0         	movff	floor@x+1,?_floor+1
  5975  005144  C0C1  F0C1         	movff	floor@x+2,?_floor+2
  5976  005148  C0C2  F0C2         	movff	floor@x+3,?_floor+3
  5977  00514C  0012               	return	
  5978  00514E                     l6284:
  5979                           
  5980                           ; BSR set to: 0
  5981  00514E  C0BF  F0AF         	movff	floor@x,___fltol@f1
  5982  005152  C0C0  F0B0         	movff	floor@x+1,___fltol@f1+1
  5983  005156  C0C1  F0B1         	movff	floor@x+2,___fltol@f1+2
  5984  00515A  C0C2  F0B2         	movff	floor@x+3,___fltol@f1+3
  5985  00515E  ECFD  F028         	call	___fltol	;wreg free
  5986  005162  C0AF  F0B9         	movff	?___fltol,___altofl@c
  5987  005166  C0B0  F0BA         	movff	?___fltol+1,___altofl@c+1
  5988  00516A  C0B1  F0BB         	movff	?___fltol+2,___altofl@c+2
  5989  00516E  C0B2  F0BC         	movff	?___fltol+3,___altofl@c+3
  5990  005172  EC7D  F02D         	call	___altofl	;wreg free
  5991  005176  C0B9  F0C3         	movff	?___altofl,floor@i
  5992  00517A  C0BA  F0C4         	movff	?___altofl+1,floor@i+1
  5993  00517E  C0BB  F0C5         	movff	?___altofl+2,floor@i+2
  5994  005182  C0BC  F0C6         	movff	?___altofl+3,floor@i+3
  5995  005186  C0BF  F0B3         	movff	floor@x,___flge@ff1
  5996  00518A  C0C0  F0B4         	movff	floor@x+1,___flge@ff1+1
  5997  00518E  C0C1  F0B5         	movff	floor@x+2,___flge@ff1+2
  5998  005192  C0C2  F0B6         	movff	floor@x+3,___flge@ff1+3
  5999  005196  C0C3  F0B7         	movff	floor@i,___flge@ff2
  6000  00519A  C0C4  F0B8         	movff	floor@i+1,___flge@ff2+1
  6001  00519E  C0C5  F0B9         	movff	floor@i+2,___flge@ff2+2
  6002  0051A2  C0C6  F0BA         	movff	floor@i+3,___flge@ff2+3
  6003  0051A6  EC9F  F02A         	call	___flge	;wreg free
  6004  0051AA  0100               	movlb	0	; () banked
  6005  0051AC  B0D8               	btfsc	status,0,c
  6006  0051AE  D01C               	goto	l1482
  6007                           
  6008                           ; BSR set to: 0
  6009  0051B0  C0C3  F09F         	movff	floor@i,___fladd@f1
  6010  0051B4  C0C4  F0A0         	movff	floor@i+1,___fladd@f1+1
  6011  0051B8  C0C5  F0A1         	movff	floor@i+2,___fladd@f1+2
  6012  0051BC  C0C6  F0A2         	movff	floor@i+3,___fladd@f1+3
  6013  0051C0  0E00               	movlw	0
  6014  0051C2  0100               	movlb	0	; () banked
  6015  0051C4  6FA3               	movwf	___fladd@f2& (0+255),b
  6016  0051C6  0E00               	movlw	0
  6017  0051C8  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6018  0051CA  0E80               	movlw	128
  6019  0051CC  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6020  0051CE  0EBF               	movlw	191
  6021  0051D0  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6022  0051D2  ECF0  F01F         	call	___fladd	;wreg free
  6023  0051D6  C09F  F0BF         	movff	?___fladd,?_floor
  6024  0051DA  C0A0  F0C0         	movff	?___fladd+1,?_floor+1
  6025  0051DE  C0A1  F0C1         	movff	?___fladd+2,?_floor+2
  6026  0051E2  C0A2  F0C2         	movff	?___fladd+3,?_floor+3
  6027  0051E6  0012               	return	
  6028  0051E8                     l1482:
  6029                           
  6030                           ; BSR set to: 0
  6031  0051E8  C0C3  F0BF         	movff	floor@i,?_floor
  6032  0051EC  C0C4  F0C0         	movff	floor@i+1,?_floor+1
  6033  0051F0  C0C5  F0C1         	movff	floor@i+2,?_floor+2
  6034  0051F4  C0C6  F0C2         	movff	floor@i+3,?_floor+3
  6035  0051F8  0012               	return		;funcret
  6036  0051FA                     __end_of_floor:
  6037                           	opt stack 0
  6038                           tblptru	equ	0xFF8
  6039                           tblptrh	equ	0xFF7
  6040                           tblptrl	equ	0xFF6
  6041                           tablat	equ	0xFF5
  6042                           postinc0	equ	0xFEE
  6043                           wreg	equ	0xFE8
  6044                           postdec1	equ	0xFE5
  6045                           fsr1l	equ	0xFE1
  6046                           indf2	equ	0xFDF
  6047                           postinc2	equ	0xFDE
  6048                           postdec2	equ	0xFDD
  6049                           fsr2h	equ	0xFDA
  6050                           fsr2l	equ	0xFD9
  6051                           status	equ	0xFD8
  6052                           
  6053 ;; *************** function _frexp *****************
  6054 ;; Defined at:
  6055 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;  value           4   23[BANK0 ] int 
  6058 ;;  eptr            2   27[BANK0 ] PTR int 
  6059 ;;		 -> floor@expon(2), 
  6060 ;; Auto vars:     Size  Location     Type
  6061 ;;		None
  6062 ;; Return value:  Size  Location     Type
  6063 ;;                  4   23[BANK0 ] PTR int 
  6064 ;; Registers used:
  6065 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6071 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;Total ram usage:        8 bytes
  6076 ;; Hardware stack levels used:    1
  6077 ;; Hardware stack levels required when called:    5
  6078 ;; This function calls:
  6079 ;;		Nothing
  6080 ;; This function is called by:
  6081 ;;		_floor
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           	psect	text13
  6086  005898                     __ptext13:
  6087                           	opt stack 0
  6088  005898                     _frexp:
  6089                           	opt stack 20
  6090                           
  6091                           ;incstack = 0
  6092  005898  0100               	movlb	0	; () banked
  6093  00589A  5177               	movf	frexp@value& (0+255),w,b
  6094  00589C  0100               	movlb	0	; () banked
  6095  00589E  1178               	iorwf	(frexp@value+1)& (0+255),w,b
  6096  0058A0  0100               	movlb	0	; () banked
  6097  0058A2  1179               	iorwf	(frexp@value+2)& (0+255),w,b
  6098  0058A4  0100               	movlb	0	; () banked
  6099  0058A6  117A               	iorwf	(frexp@value+3)& (0+255),w,b
  6100  0058A8  A4D8               	btfss	status,2,c
  6101  0058AA  D009               	goto	l6196
  6102                           
  6103                           ; BSR set to: 0
  6104  0058AC  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6105  0058B0  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6106  0058B4  0E00               	movlw	0
  6107  0058B6  6EDE               	movwf	postinc2,c
  6108  0058B8  0E00               	movlw	0
  6109  0058BA  6EDD               	movwf	postdec2,c
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;	Return value of _frexp is never used
  6113  0058BC  0012               	return	
  6114  0058BE                     l6196:
  6115                           
  6116                           ; BSR set to: 0
  6117  0058BE  0100               	movlb	0	; () banked
  6118  0058C0  517A               	movf	(frexp@value+3)& (0+255),w,b
  6119  0058C2  0B7F               	andlw	127
  6120  0058C4  0100               	movlb	0	; () banked
  6121  0058C6  6F7D               	movwf	??_frexp& (0+255),b
  6122  0058C8  6B7E               	clrf	(??_frexp+1)& (0+255),b
  6123  0058CA  90D8               	bcf	status,0,c
  6124  0058CC  0100               	movlb	0	; () banked
  6125  0058CE  377D               	rlcf	??_frexp& (0+255),f,b
  6126  0058D0  377E               	rlcf	(??_frexp+1)& (0+255),f,b
  6127  0058D2  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6128  0058D6  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6129  0058DA  C07D  FFDE         	movff	??_frexp,postinc2
  6130  0058DE  C07E  FFDD         	movff	??_frexp+1,postdec2
  6131  0058E2  0100               	movlb	0	; () banked
  6132  0058E4  AF79               	btfss	(frexp@value+2)& (0+255),7,b
  6133  0058E6  D004               	goto	u7690
  6134  0058E8  0100               	movlb	0	; () banked
  6135  0058EA  6B7D               	clrf	??_frexp& (0+255),b
  6136  0058EC  2B7D               	incf	??_frexp& (0+255),f,b
  6137  0058EE  D002               	goto	u7698
  6138  0058F0                     u7690:
  6139  0058F0  0100               	movlb	0	; () banked
  6140  0058F2  6B7D               	clrf	??_frexp& (0+255),b
  6141  0058F4                     u7698:
  6142  0058F4  0100               	movlb	0	; () banked
  6143  0058F6  517D               	movf	??_frexp& (0+255),w,b
  6144  0058F8  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6145  0058FC  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6146  005900  12DE               	iorwf	postinc2,f,c
  6147  005902  0E00               	movlw	0
  6148  005904  12DD               	iorwf	postdec2,f,c
  6149                           
  6150                           ; BSR set to: 0
  6151  005906  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6152  00590A  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6153  00590E  0E82               	movlw	130
  6154  005910  26DE               	addwf	postinc2,f,c
  6155  005912  0EFF               	movlw	255
  6156  005914  22DD               	addwfc	postdec2,f,c
  6157                           
  6158                           ; BSR set to: 0
  6159  005916  817A               	bsf	(frexp@value+3)& (0+255),0,b
  6160  005918  837A               	bsf	(frexp@value+3)& (0+255),1,b
  6161  00591A  857A               	bsf	(frexp@value+3)& (0+255),2,b
  6162  00591C  877A               	bsf	(frexp@value+3)& (0+255),3,b
  6163  00591E  897A               	bsf	(frexp@value+3)& (0+255),4,b
  6164  005920  8B7A               	bsf	(frexp@value+3)& (0+255),5,b
  6165  005922  9D7A               	bcf	(frexp@value+3)& (0+255),6,b
  6166                           
  6167                           ; BSR set to: 0
  6168  005924  0100               	movlb	0	; () banked
  6169  005926  9F79               	bcf	(frexp@value+2)& (0+255),7,b
  6170  005928  0012               	return	
  6171                           
  6172                           ; BSR set to: 0
  6173                           
  6174                           ; BSR set to: 0
  6175                           ;	Return value of _frexp is never used
  6176  00592A  0012               	return		;funcret
  6177  00592C                     __end_of_frexp:
  6178                           	opt stack 0
  6179                           tblptru	equ	0xFF8
  6180                           tblptrh	equ	0xFF7
  6181                           tblptrl	equ	0xFF6
  6182                           tablat	equ	0xFF5
  6183                           postinc0	equ	0xFEE
  6184                           wreg	equ	0xFE8
  6185                           postdec1	equ	0xFE5
  6186                           fsr1l	equ	0xFE1
  6187                           indf2	equ	0xFDF
  6188                           postinc2	equ	0xFDE
  6189                           postdec2	equ	0xFDD
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194 ;; *************** function ___fltol *****************
  6195 ;; Defined at:
  6196 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  f1              4   79[BANK0 ] PTR int 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;  exp1            1   88[BANK0 ] unsigned char 
  6201 ;;  sign1           1   87[BANK0 ] unsigned char 
  6202 ;; Return value:  Size  Location     Type
  6203 ;;                  4   79[BANK0 ] long 
  6204 ;; Registers used:
  6205 ;;		wreg, status,2, status,0
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6211 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;Total ram usage:       10 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    5
  6218 ;; This function calls:
  6219 ;;		Nothing
  6220 ;; This function is called by:
  6221 ;;		_park_routine
  6222 ;;		_parallelo
  6223 ;;		_floor
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           	psect	text14
  6228  0051FA                     __ptext14:
  6229                           	opt stack 0
  6230  0051FA                     ___fltol:
  6231                           	opt stack 23
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;incstack = 0
  6235  0051FA  0100               	movlb	0	; () banked
  6236  0051FC  35B1               	rlcf	(___fltol@f1+2)& (0+255),w,b
  6237  0051FE  35B2               	rlcf	(___fltol@f1+3)& (0+255),w,b
  6238  005200  0100               	movlb	0	; () banked
  6239  005202  6FB8               	movwf	___fltol@exp1& (0+255),b
  6240  005204  0100               	movlb	0	; () banked
  6241  005206  51B8               	movf	___fltol@exp1& (0+255),w,b
  6242  005208  A4D8               	btfss	status,2,c
  6243  00520A  D00A               	goto	l6152
  6244                           
  6245                           ; BSR set to: 0
  6246  00520C  0E00               	movlw	0
  6247  00520E  0100               	movlb	0	; () banked
  6248  005210  6FAF               	movwf	?___fltol& (0+255),b
  6249  005212  0E00               	movlw	0
  6250  005214  6FB0               	movwf	(?___fltol+1)& (0+255),b
  6251  005216  0E00               	movlw	0
  6252  005218  6FB1               	movwf	(?___fltol+2)& (0+255),b
  6253  00521A  0E00               	movlw	0
  6254  00521C  6FB2               	movwf	(?___fltol+3)& (0+255),b
  6255                           
  6256                           ; BSR set to: 0
  6257  00521E  0012               	return	
  6258  005220                     l6152:
  6259                           
  6260                           ; BSR set to: 0
  6261  005220  C0AF  F0B3         	movff	___fltol@f1,??___fltol
  6262  005224  C0B0  F0B4         	movff	___fltol@f1+1,??___fltol+1
  6263  005228  C0B1  F0B5         	movff	___fltol@f1+2,??___fltol+2
  6264  00522C  C0B2  F0B6         	movff	___fltol@f1+3,??___fltol+3
  6265  005230  0E20               	movlw	32
  6266  005232  D006               	goto	u7620
  6267  005234                     u7625:
  6268  005234  0100               	movlb	0	; () banked
  6269  005236  90D8               	bcf	status,0,c
  6270  005238  33B6               	rrcf	(??___fltol+3)& (0+255),f,b
  6271  00523A  33B5               	rrcf	(??___fltol+2)& (0+255),f,b
  6272  00523C  33B4               	rrcf	(??___fltol+1)& (0+255),f,b
  6273  00523E  33B3               	rrcf	??___fltol& (0+255),f,b
  6274  005240                     u7620:
  6275  005240  2EE8               	decfsz	wreg,f,c
  6276  005242  D7F8               	goto	u7625
  6277  005244  0100               	movlb	0	; () banked
  6278  005246  51B3               	movf	??___fltol& (0+255),w,b
  6279  005248  0100               	movlb	0	; () banked
  6280  00524A  6FB7               	movwf	___fltol@sign1& (0+255),b
  6281                           
  6282                           ; BSR set to: 0
  6283  00524C  0100               	movlb	0	; () banked
  6284  00524E  8FB1               	bsf	(___fltol@f1+2)& (0+255),7,b
  6285                           
  6286                           ; BSR set to: 0
  6287  005250  0EFF               	movlw	255
  6288  005252  0100               	movlb	0	; () banked
  6289  005254  17AF               	andwf	___fltol@f1& (0+255),f,b
  6290  005256  0EFF               	movlw	255
  6291  005258  17B0               	andwf	(___fltol@f1+1)& (0+255),f,b
  6292  00525A  0EFF               	movlw	255
  6293  00525C  17B1               	andwf	(___fltol@f1+2)& (0+255),f,b
  6294  00525E  0E00               	movlw	0
  6295  005260  17B2               	andwf	(___fltol@f1+3)& (0+255),f,b
  6296                           
  6297                           ; BSR set to: 0
  6298  005262  0E96               	movlw	150
  6299  005264  0100               	movlb	0	; () banked
  6300  005266  5FB8               	subwf	___fltol@exp1& (0+255),f,b
  6301                           
  6302                           ; BSR set to: 0
  6303  005268  0100               	movlb	0	; () banked
  6304  00526A  AFB8               	btfss	___fltol@exp1& (0+255),7,b
  6305  00526C  D01B               	goto	l6172
  6306                           
  6307                           ; BSR set to: 0
  6308  00526E  0100               	movlb	0	; () banked
  6309  005270  51B8               	movf	___fltol@exp1& (0+255),w,b
  6310  005272  0A80               	xorlw	128
  6311  005274  0F97               	addlw	151
  6312  005276  B0D8               	btfsc	status,0,c
  6313  005278  D00B               	goto	l6168
  6314                           
  6315                           ; BSR set to: 0
  6316  00527A  0E00               	movlw	0
  6317  00527C  0100               	movlb	0	; () banked
  6318  00527E  6FAF               	movwf	?___fltol& (0+255),b
  6319  005280  0E00               	movlw	0
  6320  005282  6FB0               	movwf	(?___fltol+1)& (0+255),b
  6321  005284  0E00               	movlw	0
  6322  005286  6FB1               	movwf	(?___fltol+2)& (0+255),b
  6323  005288  0E00               	movlw	0
  6324  00528A  6FB2               	movwf	(?___fltol+3)& (0+255),b
  6325                           
  6326                           ; BSR set to: 0
  6327  00528C  0012               	return	
  6328                           
  6329                           ; BSR set to: 0
  6330  00528E  D000               	goto	l6168
  6331  005290                     l6168:
  6332                           
  6333                           ; BSR set to: 0
  6334  005290  0100               	movlb	0	; () banked
  6335  005292  90D8               	bcf	status,0,c
  6336  005294  33B2               	rrcf	(___fltol@f1+3)& (0+255),f,b
  6337  005296  33B1               	rrcf	(___fltol@f1+2)& (0+255),f,b
  6338  005298  33B0               	rrcf	(___fltol@f1+1)& (0+255),f,b
  6339  00529A  33AF               	rrcf	___fltol@f1& (0+255),f,b
  6340                           
  6341                           ; BSR set to: 0
  6342  00529C  0100               	movlb	0	; () banked
  6343  00529E  3FB8               	incfsz	___fltol@exp1& (0+255),f,b
  6344  0052A0  D7F7               	goto	l6168
  6345                           
  6346                           ; BSR set to: 0
  6347  0052A2  D01F               	goto	l6182
  6348  0052A4                     l6172:
  6349                           
  6350                           ; BSR set to: 0
  6351  0052A4  0E1F               	movlw	31
  6352  0052A6  0100               	movlb	0	; () banked
  6353  0052A8  65B8               	cpfsgt	___fltol@exp1& (0+255),b
  6354  0052AA  D014               	goto	l6180
  6355                           
  6356                           ; BSR set to: 0
  6357  0052AC  0E00               	movlw	0
  6358  0052AE  0100               	movlb	0	; () banked
  6359  0052B0  6FAF               	movwf	?___fltol& (0+255),b
  6360  0052B2  0E00               	movlw	0
  6361  0052B4  6FB0               	movwf	(?___fltol+1)& (0+255),b
  6362  0052B6  0E00               	movlw	0
  6363  0052B8  6FB1               	movwf	(?___fltol+2)& (0+255),b
  6364  0052BA  0E00               	movlw	0
  6365  0052BC  6FB2               	movwf	(?___fltol+3)& (0+255),b
  6366                           
  6367                           ; BSR set to: 0
  6368  0052BE  0012               	return	
  6369                           
  6370                           ; BSR set to: 0
  6371  0052C0  D009               	goto	l6180
  6372  0052C2                     l6178:
  6373                           
  6374                           ; BSR set to: 0
  6375  0052C2  0100               	movlb	0	; () banked
  6376  0052C4  90D8               	bcf	status,0,c
  6377  0052C6  37AF               	rlcf	___fltol@f1& (0+255),f,b
  6378  0052C8  37B0               	rlcf	(___fltol@f1+1)& (0+255),f,b
  6379  0052CA  37B1               	rlcf	(___fltol@f1+2)& (0+255),f,b
  6380  0052CC  37B2               	rlcf	(___fltol@f1+3)& (0+255),f,b
  6381  0052CE  0100               	movlb	0	; () banked
  6382  0052D0  07B8               	decf	___fltol@exp1& (0+255),f,b
  6383  0052D2  D000               	goto	l6180
  6384  0052D4                     l6180:
  6385                           
  6386                           ; BSR set to: 0
  6387  0052D4  0100               	movlb	0	; () banked
  6388  0052D6  51B8               	movf	___fltol@exp1& (0+255),w,b
  6389  0052D8  0100               	movlb	0	; () banked
  6390  0052DA  B4D8               	btfsc	status,2,c
  6391  0052DC  D002               	goto	l6182
  6392  0052DE  D7F1               	goto	l6178
  6393                           
  6394                           ; BSR set to: 0
  6395  0052E0  D000               	goto	l6182
  6396  0052E2                     l6182:
  6397                           
  6398                           ; BSR set to: 0
  6399  0052E2  0100               	movlb	0	; () banked
  6400  0052E4  51B7               	movf	___fltol@sign1& (0+255),w,b
  6401  0052E6  0100               	movlb	0	; () banked
  6402  0052E8  B4D8               	btfsc	status,2,c
  6403  0052EA  D00A               	goto	l6186
  6404                           
  6405                           ; BSR set to: 0
  6406  0052EC  0100               	movlb	0	; () banked
  6407  0052EE  1FB2               	comf	(___fltol@f1+3)& (0+255),f,b
  6408  0052F0  1FB1               	comf	(___fltol@f1+2)& (0+255),f,b
  6409  0052F2  1FB0               	comf	(___fltol@f1+1)& (0+255),f,b
  6410  0052F4  6DAF               	negf	___fltol@f1& (0+255),b
  6411  0052F6  0E00               	movlw	0
  6412  0052F8  23B0               	addwfc	(___fltol@f1+1)& (0+255),f,b
  6413  0052FA  23B1               	addwfc	(___fltol@f1+2)& (0+255),f,b
  6414  0052FC  23B2               	addwfc	(___fltol@f1+3)& (0+255),f,b
  6415  0052FE  D000               	goto	l6186
  6416  005300                     l6186:
  6417                           
  6418                           ; BSR set to: 0
  6419  005300  C0AF  F0AF         	movff	___fltol@f1,?___fltol
  6420  005304  C0B0  F0B0         	movff	___fltol@f1+1,?___fltol+1
  6421  005308  C0B1  F0B1         	movff	___fltol@f1+2,?___fltol+2
  6422  00530C  C0B2  F0B2         	movff	___fltol@f1+3,?___fltol+3
  6423  005310  0012               	return	
  6424                           
  6425                           ; BSR set to: 0
  6426                           
  6427                           ; BSR set to: 0
  6428  005312  0012               	return		;funcret
  6429  005314                     __end_of___fltol:
  6430                           	opt stack 0
  6431                           tblptru	equ	0xFF8
  6432                           tblptrh	equ	0xFF7
  6433                           tblptrl	equ	0xFF6
  6434                           tablat	equ	0xFF5
  6435                           postinc0	equ	0xFEE
  6436                           wreg	equ	0xFE8
  6437                           postdec1	equ	0xFE5
  6438                           fsr1l	equ	0xFE1
  6439                           indf2	equ	0xFDF
  6440                           postinc2	equ	0xFDE
  6441                           postdec2	equ	0xFDD
  6442                           fsr2h	equ	0xFDA
  6443                           fsr2l	equ	0xFD9
  6444                           status	equ	0xFD8
  6445                           
  6446 ;; *************** function ___altofl *****************
  6447 ;; Defined at:
  6448 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;  c               4   89[BANK0 ] long 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  sign            1   93[BANK0 ] unsigned char 
  6453 ;; Return value:  Size  Location     Type
  6454 ;;                  4   89[BANK0 ] unsigned char 
  6455 ;; Registers used:
  6456 ;;		wreg, status,2, status,0, cstack
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6462 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6465 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6466 ;;Total ram usage:        5 bytes
  6467 ;; Hardware stack levels used:    1
  6468 ;; Hardware stack levels required when called:    6
  6469 ;; This function calls:
  6470 ;;		___flpack
  6471 ;; This function is called by:
  6472 ;;		_floor
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           	psect	text15
  6477  005AFA                     __ptext15:
  6478                           	opt stack 0
  6479  005AFA                     ___altofl:
  6480                           	opt stack 19
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;incstack = 0
  6484  005AFA  0E00               	movlw	0
  6485  005AFC  0100               	movlb	0	; () banked
  6486  005AFE  6FBD               	movwf	___altofl@sign& (0+255),b
  6487                           
  6488                           ; BSR set to: 0
  6489  005B00  0100               	movlb	0	; () banked
  6490  005B02  AFBC               	btfss	(___altofl@c+3)& (0+255),7,b
  6491  005B04  D00D               	goto	l6002
  6492                           
  6493                           ; BSR set to: 0
  6494  005B06  0100               	movlb	0	; () banked
  6495  005B08  1FBC               	comf	(___altofl@c+3)& (0+255),f,b
  6496  005B0A  1FBB               	comf	(___altofl@c+2)& (0+255),f,b
  6497  005B0C  1FBA               	comf	(___altofl@c+1)& (0+255),f,b
  6498  005B0E  6DB9               	negf	___altofl@c& (0+255),b
  6499  005B10  0E00               	movlw	0
  6500  005B12  23BA               	addwfc	(___altofl@c+1)& (0+255),f,b
  6501  005B14  23BB               	addwfc	(___altofl@c+2)& (0+255),f,b
  6502  005B16  23BC               	addwfc	(___altofl@c+3)& (0+255),f,b
  6503                           
  6504                           ; BSR set to: 0
  6505  005B18  0E01               	movlw	1
  6506  005B1A  0100               	movlb	0	; () banked
  6507  005B1C  6FBD               	movwf	___altofl@sign& (0+255),b
  6508  005B1E  D000               	goto	l6002
  6509  005B20                     l6002:
  6510                           
  6511                           ; BSR set to: 0
  6512  005B20  C0B9  F077         	movff	___altofl@c,___flpack@arg
  6513  005B24  C0BA  F078         	movff	___altofl@c+1,___flpack@arg+1
  6514  005B28  C0BB  F079         	movff	___altofl@c+2,___flpack@arg+2
  6515  005B2C  C0BC  F07A         	movff	___altofl@c+3,___flpack@arg+3
  6516  005B30  0E96               	movlw	150
  6517  005B32  0100               	movlb	0	; () banked
  6518  005B34  6F7B               	movwf	___flpack@exp& (0+255),b
  6519  005B36  C0BD  F07C         	movff	___altofl@sign,___flpack@sign
  6520  005B3A  EC5F  F026         	call	___flpack	;wreg free
  6521  005B3E  C077  F0B9         	movff	?___flpack,?___altofl
  6522  005B42  C078  F0BA         	movff	?___flpack+1,?___altofl+1
  6523  005B46  C079  F0BB         	movff	?___flpack+2,?___altofl+2
  6524  005B4A  C07A  F0BC         	movff	?___flpack+3,?___altofl+3
  6525  005B4E  0012               	return	
  6526  005B50  0012               	return		;funcret
  6527  005B52                     __end_of___altofl:
  6528                           	opt stack 0
  6529                           tblptru	equ	0xFF8
  6530                           tblptrh	equ	0xFF7
  6531                           tblptrl	equ	0xFF6
  6532                           tablat	equ	0xFF5
  6533                           postinc0	equ	0xFEE
  6534                           wreg	equ	0xFE8
  6535                           postdec1	equ	0xFE5
  6536                           fsr1l	equ	0xFE1
  6537                           indf2	equ	0xFDF
  6538                           postinc2	equ	0xFDE
  6539                           postdec2	equ	0xFDD
  6540                           fsr2h	equ	0xFDA
  6541                           fsr2l	equ	0xFD9
  6542                           status	equ	0xFD8
  6543                           
  6544 ;; *************** function _asin *****************
  6545 ;; Defined at:
  6546 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\asin.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;  x               4   21[BANK1 ] unsigned char 
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;  y               4   41[BANK1 ] unsigned char 
  6551 ;;  sgn             4   25[BANK1 ] unsigned char 
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  4   21[BANK1 ] unsigned char 
  6554 ;; Registers used:
  6555 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6561 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6562 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0
  6563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;      Totals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;Total ram usage:       28 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:    9
  6568 ;; This function calls:
  6569 ;;		___fladd
  6570 ;;		___fldiv
  6571 ;;		___flge
  6572 ;;		___flmul
  6573 ;;		___flneg
  6574 ;;		_atan
  6575 ;;		_fabs
  6576 ;;		_sqrt
  6577 ;; This function is called by:
  6578 ;;		_parallelo
  6579 ;;		_matematica
  6580 ;; This function uses a non-reentrant model
  6581 ;;
  6582                           
  6583                           	psect	text16
  6584  0039A0                     __ptext16:
  6585                           	opt stack 0
  6586  0039A0                     _asin:
  6587                           	opt stack 19
  6588                           
  6589                           ;incstack = 0
  6590  0039A0  0E00               	movlw	0
  6591  0039A2  0100               	movlb	0	; () banked
  6592  0039A4  6FB3               	movwf	___flge@ff1& (0+255),b
  6593  0039A6  0E00               	movlw	0
  6594  0039A8  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6595  0039AA  0E80               	movlw	128
  6596  0039AC  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6597  0039AE  0E3F               	movlw	63
  6598  0039B0  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6599  0039B2  C1A0  F0AF         	movff	asin@x,fabs@d
  6600  0039B6  C1A1  F0B0         	movff	asin@x+1,fabs@d+1
  6601  0039BA  C1A2  F0B1         	movff	asin@x+2,fabs@d+2
  6602  0039BE  C1A3  F0B2         	movff	asin@x+3,fabs@d+3
  6603  0039C2  ECF9  F02D         	call	_fabs	;wreg free
  6604  0039C6  C0AF  F0B7         	movff	?_fabs,___flge@ff2
  6605  0039CA  C0B0  F0B8         	movff	?_fabs+1,___flge@ff2+1
  6606  0039CE  C0B1  F0B9         	movff	?_fabs+2,___flge@ff2+2
  6607  0039D2  C0B2  F0BA         	movff	?_fabs+3,___flge@ff2+3
  6608  0039D6  EC9F  F02A         	call	___flge	;wreg free
  6609  0039DA  0100               	movlb	0	; () banked
  6610  0039DC  B0D8               	btfsc	status,0,c
  6611  0039DE  D00F               	goto	l6390
  6612                           
  6613                           ; BSR set to: 0
  6614  0039E0  0E00               	movlw	0
  6615  0039E2  0101               	movlb	1	; () banked
  6616  0039E4  6F43               	movwf	(_errno+1)& (0+255),b
  6617  0039E6  0E21               	movlw	33
  6618  0039E8  6F42               	movwf	_errno& (0+255),b
  6619  0039EA  0E00               	movlw	0
  6620  0039EC  0101               	movlb	1	; () banked
  6621  0039EE  6FA0               	movwf	?_asin& (0+255),b
  6622  0039F0  0E00               	movlw	0
  6623  0039F2  6FA1               	movwf	(?_asin+1)& (0+255),b
  6624  0039F4  0E00               	movlw	0
  6625  0039F6  6FA2               	movwf	(?_asin+2)& (0+255),b
  6626  0039F8  0E00               	movlw	0
  6627  0039FA  6FA3               	movwf	(?_asin+3)& (0+255),b
  6628                           
  6629                           ; BSR set to: 1
  6630  0039FC  0012               	return	
  6631  0039FE                     l6390:
  6632  0039FE  0E00               	movlw	0
  6633  003A00  0101               	movlb	1	; () banked
  6634  003A02  6FA4               	movwf	asin@sgn& (0+255),b
  6635  003A04  0E00               	movlw	0
  6636  003A06  6FA5               	movwf	(asin@sgn+1)& (0+255),b
  6637  003A08  0E80               	movlw	128
  6638  003A0A  6FA6               	movwf	(asin@sgn+2)& (0+255),b
  6639  003A0C  0E3F               	movlw	63
  6640  003A0E  6FA7               	movwf	(asin@sgn+3)& (0+255),b
  6641                           
  6642                           ; BSR set to: 1
  6643  003A10  C1A0  F094         	movff	asin@x,___flmul@f2
  6644  003A14  C1A1  F095         	movff	asin@x+1,___flmul@f2+1
  6645  003A18  C1A2  F096         	movff	asin@x+2,___flmul@f2+2
  6646  003A1C  C1A3  F097         	movff	asin@x+3,___flmul@f2+3
  6647  003A20  C1A0  F090         	movff	asin@x,___flmul@f1
  6648  003A24  C1A1  F091         	movff	asin@x+1,___flmul@f1+1
  6649  003A28  C1A2  F092         	movff	asin@x+2,___flmul@f1+2
  6650  003A2C  C1A3  F093         	movff	asin@x+3,___flmul@f1+3
  6651  003A30  EC1F  F027         	call	___flmul	;wreg free
  6652  003A34  C090  F0AB         	movff	?___flmul,___flneg@f1
  6653  003A38  C091  F0AC         	movff	?___flmul+1,___flneg@f1+1
  6654  003A3C  C092  F0AD         	movff	?___flmul+2,___flneg@f1+2
  6655  003A40  C093  F0AE         	movff	?___flmul+3,___flneg@f1+3
  6656  003A44  EC18  F02E         	call	___flneg	;wreg free
  6657  003A48  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6658  003A4C  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6659  003A50  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6660  003A54  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6661  003A58  0E00               	movlw	0
  6662  003A5A  0100               	movlb	0	; () banked
  6663  003A5C  6FA3               	movwf	___fladd@f2& (0+255),b
  6664  003A5E  0E00               	movlw	0
  6665  003A60  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6666  003A62  0E80               	movlw	128
  6667  003A64  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6668  003A66  0E3F               	movlw	63
  6669  003A68  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6670  003A6A  ECF0  F01F         	call	___fladd	;wreg free
  6671  003A6E  C09F  F1A8         	movff	?___fladd,_asin$3681
  6672  003A72  C0A0  F1A9         	movff	?___fladd+1,_asin$3681+1
  6673  003A76  C0A1  F1AA         	movff	?___fladd+2,_asin$3681+2
  6674  003A7A  C0A2  F1AB         	movff	?___fladd+3,_asin$3681+3
  6675  003A7E  C1A8  F0D1         	movff	_asin$3681,sqrt@y
  6676  003A82  C1A9  F0D2         	movff	_asin$3681+1,sqrt@y+1
  6677  003A86  C1AA  F0D3         	movff	_asin$3681+2,sqrt@y+2
  6678  003A8A  C1AB  F0D4         	movff	_asin$3681+3,sqrt@y+3
  6679  003A8E  EC7F  F023         	call	_sqrt	;wreg free
  6680  003A92  C0D1  F1B4         	movff	?_sqrt,asin@y
  6681  003A96  C0D2  F1B5         	movff	?_sqrt+1,asin@y+1
  6682  003A9A  C0D3  F1B6         	movff	?_sqrt+2,asin@y+2
  6683  003A9E  C0D4  F1B7         	movff	?_sqrt+3,asin@y+3
  6684  003AA2  C1A0  F0AF         	movff	asin@x,fabs@d
  6685  003AA6  C1A1  F0B0         	movff	asin@x+1,fabs@d+1
  6686  003AAA  C1A2  F0B1         	movff	asin@x+2,fabs@d+2
  6687  003AAE  C1A3  F0B2         	movff	asin@x+3,fabs@d+3
  6688  003AB2  ECF9  F02D         	call	_fabs	;wreg free
  6689  003AB6  C0AF  F0B3         	movff	?_fabs,___flge@ff1
  6690  003ABA  C0B0  F0B4         	movff	?_fabs+1,___flge@ff1+1
  6691  003ABE  C0B1  F0B5         	movff	?_fabs+2,___flge@ff1+2
  6692  003AC2  C0B2  F0B6         	movff	?_fabs+3,___flge@ff1+3
  6693  003AC6  0E8F               	movlw	143
  6694  003AC8  0100               	movlb	0	; () banked
  6695  003ACA  6FB7               	movwf	___flge@ff2& (0+255),b
  6696  003ACC  0EC2               	movlw	194
  6697  003ACE  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  6698  003AD0  0E35               	movlw	53
  6699  003AD2  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  6700  003AD4  0E3F               	movlw	63
  6701  003AD6  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  6702  003AD8  EC9F  F02A         	call	___flge	;wreg free
  6703  003ADC  0100               	movlb	0	; () banked
  6704  003ADE  B0D8               	btfsc	status,0,c
  6705  003AE0  D02D               	goto	l6404
  6706                           
  6707                           ; BSR set to: 0
  6708  003AE2  C1A0  F081         	movff	asin@x,___fldiv@f1
  6709  003AE6  C1A1  F082         	movff	asin@x+1,___fldiv@f1+1
  6710  003AEA  C1A2  F083         	movff	asin@x+2,___fldiv@f1+2
  6711  003AEE  C1A3  F084         	movff	asin@x+3,___fldiv@f1+3
  6712  003AF2  C1B4  F085         	movff	asin@y,___fldiv@f2
  6713  003AF6  C1B5  F086         	movff	asin@y+1,___fldiv@f2+1
  6714  003AFA  C1B6  F087         	movff	asin@y+2,___fldiv@f2+2
  6715  003AFE  C1B7  F088         	movff	asin@y+3,___fldiv@f2+3
  6716  003B02  ECD1  F027         	call	___fldiv	;wreg free
  6717  003B06  C081  F1B8         	movff	?___fldiv,_asin$3682
  6718  003B0A  C082  F1B9         	movff	?___fldiv+1,_asin$3682+1
  6719  003B0E  C083  F1BA         	movff	?___fldiv+2,_asin$3682+2
  6720  003B12  C084  F1BB         	movff	?___fldiv+3,_asin$3682+3
  6721  003B16  C1B8  F0BF         	movff	_asin$3682,atan@f
  6722  003B1A  C1B9  F0C0         	movff	_asin$3682+1,atan@f+1
  6723  003B1E  C1BA  F0C1         	movff	_asin$3682+2,atan@f+2
  6724  003B22  C1BB  F0C2         	movff	_asin$3682+3,atan@f+3
  6725  003B26  EC54  F022         	call	_atan	;wreg free
  6726  003B2A  C0BF  F1A0         	movff	?_atan,?_asin
  6727  003B2E  C0C0  F1A1         	movff	?_atan+1,?_asin+1
  6728  003B32  C0C1  F1A2         	movff	?_atan+2,?_asin+2
  6729  003B36  C0C2  F1A3         	movff	?_atan+3,?_asin+3
  6730  003B3A  0012               	return	
  6731  003B3C                     l6404:
  6732  003B3C  0101               	movlb	1	; () banked
  6733  003B3E  AFA3               	btfss	(asin@x+3)& (0+255),7,b
  6734  003B40  D06E               	goto	l6416
  6735                           
  6736                           ; BSR set to: 1
  6737  003B42  C1A0  F085         	movff	asin@x,___fldiv@f2
  6738  003B46  C1A1  F086         	movff	asin@x+1,___fldiv@f2+1
  6739  003B4A  C1A2  F087         	movff	asin@x+2,___fldiv@f2+2
  6740  003B4E  C1A3  F088         	movff	asin@x+3,___fldiv@f2+3
  6741  003B52  C1B4  F0AB         	movff	asin@y,___flneg@f1
  6742  003B56  C1B5  F0AC         	movff	asin@y+1,___flneg@f1+1
  6743  003B5A  C1B6  F0AD         	movff	asin@y+2,___flneg@f1+2
  6744  003B5E  C1B7  F0AE         	movff	asin@y+3,___flneg@f1+3
  6745  003B62  EC18  F02E         	call	___flneg	;wreg free
  6746  003B66  C0AB  F081         	movff	?___flneg,___fldiv@f1
  6747  003B6A  C0AC  F082         	movff	?___flneg+1,___fldiv@f1+1
  6748  003B6E  C0AD  F083         	movff	?___flneg+2,___fldiv@f1+2
  6749  003B72  C0AE  F084         	movff	?___flneg+3,___fldiv@f1+3
  6750  003B76  ECD1  F027         	call	___fldiv	;wreg free
  6751  003B7A  C081  F1B8         	movff	?___fldiv,_asin$3682
  6752  003B7E  C082  F1B9         	movff	?___fldiv+1,_asin$3682+1
  6753  003B82  C083  F1BA         	movff	?___fldiv+2,_asin$3682+2
  6754  003B86  C084  F1BB         	movff	?___fldiv+3,_asin$3682+3
  6755  003B8A  C1B8  F0BF         	movff	_asin$3682,atan@f
  6756  003B8E  C1B9  F0C0         	movff	_asin$3682+1,atan@f+1
  6757  003B92  C1BA  F0C1         	movff	_asin$3682+2,atan@f+2
  6758  003B96  C1BB  F0C2         	movff	_asin$3682+3,atan@f+3
  6759  003B9A  EC54  F022         	call	_atan	;wreg free
  6760  003B9E  C0BF  F1B0         	movff	?_atan,_asin$3683
  6761  003BA2  C0C0  F1B1         	movff	?_atan+1,_asin$3683+1
  6762  003BA6  C0C1  F1B2         	movff	?_atan+2,_asin$3683+2
  6763  003BAA  C0C2  F1B3         	movff	?_atan+3,_asin$3683+3
  6764  003BAE  0EDB               	movlw	219
  6765  003BB0  0100               	movlb	0	; () banked
  6766  003BB2  6FA3               	movwf	___fladd@f2& (0+255),b
  6767  003BB4  0E0F               	movlw	15
  6768  003BB6  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6769  003BB8  0EC9               	movlw	201
  6770  003BBA  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6771  003BBC  0E3F               	movlw	63
  6772  003BBE  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6773  003BC0  C1B0  F0AB         	movff	_asin$3683,___flneg@f1
  6774  003BC4  C1B1  F0AC         	movff	_asin$3683+1,___flneg@f1+1
  6775  003BC8  C1B2  F0AD         	movff	_asin$3683+2,___flneg@f1+2
  6776  003BCC  C1B3  F0AE         	movff	_asin$3683+3,___flneg@f1+3
  6777  003BD0  EC18  F02E         	call	___flneg	;wreg free
  6778  003BD4  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6779  003BD8  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6780  003BDC  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6781  003BE0  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6782  003BE4  ECF0  F01F         	call	___fladd	;wreg free
  6783  003BE8  C09F  F1AC         	movff	?___fladd,_asin$3684
  6784  003BEC  C0A0  F1AD         	movff	?___fladd+1,_asin$3684+1
  6785  003BF0  C0A1  F1AE         	movff	?___fladd+2,_asin$3684+2
  6786  003BF4  C0A2  F1AF         	movff	?___fladd+3,_asin$3684+3
  6787  003BF8  C1AC  F0AB         	movff	_asin$3684,___flneg@f1
  6788  003BFC  C1AD  F0AC         	movff	_asin$3684+1,___flneg@f1+1
  6789  003C00  C1AE  F0AD         	movff	_asin$3684+2,___flneg@f1+2
  6790  003C04  C1AF  F0AE         	movff	_asin$3684+3,___flneg@f1+3
  6791  003C08  EC18  F02E         	call	___flneg	;wreg free
  6792  003C0C  C0AB  F1A0         	movff	?___flneg,?_asin
  6793  003C10  C0AC  F1A1         	movff	?___flneg+1,?_asin+1
  6794  003C14  C0AD  F1A2         	movff	?___flneg+2,?_asin+2
  6795  003C18  C0AE  F1A3         	movff	?___flneg+3,?_asin+3
  6796  003C1C  0012               	return	
  6797  003C1E                     l6416:
  6798  003C1E  C1A0  F085         	movff	asin@x,___fldiv@f2
  6799  003C22  C1A1  F086         	movff	asin@x+1,___fldiv@f2+1
  6800  003C26  C1A2  F087         	movff	asin@x+2,___fldiv@f2+2
  6801  003C2A  C1A3  F088         	movff	asin@x+3,___fldiv@f2+3
  6802  003C2E  C1B4  F081         	movff	asin@y,___fldiv@f1
  6803  003C32  C1B5  F082         	movff	asin@y+1,___fldiv@f1+1
  6804  003C36  C1B6  F083         	movff	asin@y+2,___fldiv@f1+2
  6805  003C3A  C1B7  F084         	movff	asin@y+3,___fldiv@f1+3
  6806  003C3E  ECD1  F027         	call	___fldiv	;wreg free
  6807  003C42  C081  F1B8         	movff	?___fldiv,_asin$3682
  6808  003C46  C082  F1B9         	movff	?___fldiv+1,_asin$3682+1
  6809  003C4A  C083  F1BA         	movff	?___fldiv+2,_asin$3682+2
  6810  003C4E  C084  F1BB         	movff	?___fldiv+3,_asin$3682+3
  6811  003C52  C1B8  F0BF         	movff	_asin$3682,atan@f
  6812  003C56  C1B9  F0C0         	movff	_asin$3682+1,atan@f+1
  6813  003C5A  C1BA  F0C1         	movff	_asin$3682+2,atan@f+2
  6814  003C5E  C1BB  F0C2         	movff	_asin$3682+3,atan@f+3
  6815  003C62  EC54  F022         	call	_atan	;wreg free
  6816  003C66  C0BF  F1B0         	movff	?_atan,_asin$3683
  6817  003C6A  C0C0  F1B1         	movff	?_atan+1,_asin$3683+1
  6818  003C6E  C0C1  F1B2         	movff	?_atan+2,_asin$3683+2
  6819  003C72  C0C2  F1B3         	movff	?_atan+3,_asin$3683+3
  6820  003C76  C1B0  F0AB         	movff	_asin$3683,___flneg@f1
  6821  003C7A  C1B1  F0AC         	movff	_asin$3683+1,___flneg@f1+1
  6822  003C7E  C1B2  F0AD         	movff	_asin$3683+2,___flneg@f1+2
  6823  003C82  C1B3  F0AE         	movff	_asin$3683+3,___flneg@f1+3
  6824  003C86  EC18  F02E         	call	___flneg	;wreg free
  6825  003C8A  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6826  003C8E  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6827  003C92  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6828  003C96  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6829  003C9A  0EDB               	movlw	219
  6830  003C9C  0100               	movlb	0	; () banked
  6831  003C9E  6FA3               	movwf	___fladd@f2& (0+255),b
  6832  003CA0  0E0F               	movlw	15
  6833  003CA2  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6834  003CA4  0EC9               	movlw	201
  6835  003CA6  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6836  003CA8  0E3F               	movlw	63
  6837  003CAA  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6838  003CAC  ECF0  F01F         	call	___fladd	;wreg free
  6839  003CB0  C09F  F1A0         	movff	?___fladd,?_asin
  6840  003CB4  C0A0  F1A1         	movff	?___fladd+1,?_asin+1
  6841  003CB8  C0A1  F1A2         	movff	?___fladd+2,?_asin+2
  6842  003CBC  C0A2  F1A3         	movff	?___fladd+3,?_asin+3
  6843  003CC0  0012               	return	
  6844  003CC2  0012               	return		;funcret
  6845  003CC4                     __end_of_asin:
  6846                           	opt stack 0
  6847                           tblptru	equ	0xFF8
  6848                           tblptrh	equ	0xFF7
  6849                           tblptrl	equ	0xFF6
  6850                           tablat	equ	0xFF5
  6851                           postinc0	equ	0xFEE
  6852                           wreg	equ	0xFE8
  6853                           postdec1	equ	0xFE5
  6854                           fsr1l	equ	0xFE1
  6855                           indf2	equ	0xFDF
  6856                           postinc2	equ	0xFDE
  6857                           postdec2	equ	0xFDD
  6858                           fsr2h	equ	0xFDA
  6859                           fsr2l	equ	0xFD9
  6860                           status	equ	0xFD8
  6861                           
  6862 ;; *************** function _sqrt *****************
  6863 ;; Defined at:
  6864 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;  y               4  113[BANK0 ] unsigned char 
  6867 ;; Auto vars:     Size  Location     Type
  6868 ;;  x               4   17[BANK1 ] unsigned char 
  6869 ;;  q               4   13[BANK1 ] unsigned char 
  6870 ;;  z               4    8[BANK1 ] unsigned char 
  6871 ;;  og              4    4[BANK1 ] unsigned char 
  6872 ;;  i               1   12[BANK1 ] unsigned char 
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  4  113[BANK0 ] unsigned char 
  6875 ;; Registers used:
  6876 ;;		wreg, status,2, status,0, cstack
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6882 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6883 ;;      Locals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  6884 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6885 ;;      Totals:         0       4      21       0       0       0       0       0       0       0       0       0       
      +0       0
  6886 ;;Total ram usage:       25 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; Hardware stack levels required when called:    8
  6889 ;; This function calls:
  6890 ;;		___flge
  6891 ;;		___flmul
  6892 ;;		___flsub
  6893 ;; This function is called by:
  6894 ;;		_parallelo
  6895 ;;		_asin
  6896 ;; This function uses a non-reentrant model
  6897 ;;
  6898                           
  6899                           	psect	text17
  6900  0046FE                     __ptext17:
  6901                           	opt stack 0
  6902  0046FE                     _sqrt:
  6903                           	opt stack 20
  6904                           
  6905                           ;incstack = 0
  6906  0046FE  0E00               	movlw	0
  6907  004700  0100               	movlb	0	; () banked
  6908  004702  6FB3               	movwf	___flge@ff1& (0+255),b
  6909  004704  0E00               	movlw	0
  6910  004706  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6911  004708  0E00               	movlw	0
  6912  00470A  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6913  00470C  0E00               	movlw	0
  6914  00470E  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6915  004710  C0D1  F0B7         	movff	sqrt@y,___flge@ff2
  6916  004714  C0D2  F0B8         	movff	sqrt@y+1,___flge@ff2+1
  6917  004718  C0D3  F0B9         	movff	sqrt@y+2,___flge@ff2+2
  6918  00471C  C0D4  F0BA         	movff	sqrt@y+3,___flge@ff2+3
  6919  004720  EC9F  F02A         	call	___flge	;wreg free
  6920  004724  0100               	movlb	0	; () banked
  6921  004726  A0D8               	btfss	status,0,c
  6922  004728  D012               	goto	l1469
  6923                           
  6924                           ; BSR set to: 0
  6925  00472A  0100               	movlb	0	; () banked
  6926  00472C  AFD4               	btfss	(sqrt@y+3)& (0+255),7,b
  6927  00472E  D005               	goto	l1470
  6928                           
  6929                           ; BSR set to: 0
  6930  004730  0E00               	movlw	0
  6931  004732  0101               	movlb	1	; () banked
  6932  004734  6F43               	movwf	(_errno+1)& (0+255),b
  6933  004736  0E21               	movlw	33
  6934  004738  6F42               	movwf	_errno& (0+255),b
  6935  00473A                     l1470:
  6936  00473A  0E00               	movlw	0
  6937  00473C  0100               	movlb	0	; () banked
  6938  00473E  6FD1               	movwf	?_sqrt& (0+255),b
  6939  004740  0E00               	movlw	0
  6940  004742  6FD2               	movwf	(?_sqrt+1)& (0+255),b
  6941  004744  0E00               	movlw	0
  6942  004746  6FD3               	movwf	(?_sqrt+2)& (0+255),b
  6943  004748  0E00               	movlw	0
  6944  00474A  6FD4               	movwf	(?_sqrt+3)& (0+255),b
  6945                           
  6946                           ; BSR set to: 0
  6947  00474C  0012               	return	
  6948  00474E                     l1469:
  6949                           
  6950                           ; BSR set to: 0
  6951  00474E  C0D1  F193         	movff	sqrt@y,sqrt@z
  6952  004752  C0D2  F194         	movff	sqrt@y+1,sqrt@z+1
  6953  004756  C0D3  F195         	movff	sqrt@y+2,sqrt@z+2
  6954  00475A  C0D4  F196         	movff	sqrt@y+3,sqrt@z+3
  6955                           
  6956                           ; BSR set to: 0
  6957  00475E  C0D1  F18B         	movff	sqrt@y,??_sqrt
  6958  004762  C0D2  F18C         	movff	sqrt@y+1,??_sqrt+1
  6959  004766  C0D3  F18D         	movff	sqrt@y+2,??_sqrt+2
  6960  00476A  C0D4  F18E         	movff	sqrt@y+3,??_sqrt+3
  6961  00476E  0101               	movlb	1	; () banked
  6962  004770  1F8B               	comf	??_sqrt& (0+255),f,b
  6963  004772  1F8C               	comf	(??_sqrt+1)& (0+255),f,b
  6964  004774  1F8D               	comf	(??_sqrt+2)& (0+255),f,b
  6965  004776  1F8E               	comf	(??_sqrt+3)& (0+255),f,b
  6966  004778  2B8B               	incf	??_sqrt& (0+255),f,b
  6967  00477A  0E00               	movlw	0
  6968  00477C  238C               	addwfc	(??_sqrt+1)& (0+255),f,b
  6969  00477E  238D               	addwfc	(??_sqrt+2)& (0+255),f,b
  6970  004780  238E               	addwfc	(??_sqrt+3)& (0+255),f,b
  6971  004782  0E5E               	movlw	94
  6972  004784  0101               	movlb	1	; () banked
  6973  004786  258B               	addwf	??_sqrt& (0+255),w,b
  6974  004788  0101               	movlb	1	; () banked
  6975  00478A  6F9C               	movwf	sqrt@x& (0+255),b
  6976  00478C  0EC8               	movlw	200
  6977  00478E  0101               	movlb	1	; () banked
  6978  004790  218C               	addwfc	(??_sqrt+1)& (0+255),w,b
  6979  004792  0101               	movlb	1	; () banked
  6980  004794  6F9D               	movwf	(sqrt@x+1)& (0+255),b
  6981  004796  0E6E               	movlw	110
  6982  004798  0101               	movlb	1	; () banked
  6983  00479A  218D               	addwfc	(??_sqrt+2)& (0+255),w,b
  6984  00479C  0101               	movlb	1	; () banked
  6985  00479E  6F9E               	movwf	(sqrt@x+2)& (0+255),b
  6986  0047A0  0EBE               	movlw	190
  6987  0047A2  0101               	movlb	1	; () banked
  6988  0047A4  218E               	addwfc	(??_sqrt+3)& (0+255),w,b
  6989  0047A6  0101               	movlb	1	; () banked
  6990  0047A8  6F9F               	movwf	(sqrt@x+3)& (0+255),b
  6991                           
  6992                           ; BSR set to: 1
  6993  0047AA  0101               	movlb	1	; () banked
  6994  0047AC  90D8               	bcf	status,0,c
  6995  0047AE  339F               	rrcf	(sqrt@x+3)& (0+255),f,b
  6996  0047B0  339E               	rrcf	(sqrt@x+2)& (0+255),f,b
  6997  0047B2  339D               	rrcf	(sqrt@x+1)& (0+255),f,b
  6998  0047B4  339C               	rrcf	sqrt@x& (0+255),f,b
  6999                           
  7000                           ; BSR set to: 1
  7001  0047B6  0E00               	movlw	0
  7002  0047B8  0101               	movlb	1	; () banked
  7003  0047BA  5F93               	subwf	sqrt@z& (0+255),f,b
  7004  0047BC  0E00               	movlw	0
  7005  0047BE  5B94               	subwfb	(sqrt@z+1)& (0+255),f,b
  7006  0047C0  0E80               	movlw	128
  7007  0047C2  5B95               	subwfb	(sqrt@z+2)& (0+255),f,b
  7008  0047C4  0E00               	movlw	0
  7009  0047C6  5B96               	subwfb	(sqrt@z+3)& (0+255),f,b
  7010                           
  7011                           ; BSR set to: 1
  7012  0047C8  0E04               	movlw	4
  7013  0047CA  0101               	movlb	1	; () banked
  7014  0047CC  6F97               	movwf	sqrt@i& (0+255),b
  7015  0047CE  D000               	goto	l6306
  7016  0047D0                     l6306:
  7017                           
  7018                           ; BSR set to: 1
  7019  0047D0  C19C  F18F         	movff	sqrt@x,sqrt@og
  7020  0047D4  C19D  F190         	movff	sqrt@x+1,sqrt@og+1
  7021  0047D8  C19E  F191         	movff	sqrt@x+2,sqrt@og+2
  7022  0047DC  C19F  F192         	movff	sqrt@x+3,sqrt@og+3
  7023                           
  7024                           ; BSR set to: 1
  7025  0047E0  C19C  F090         	movff	sqrt@x,___flmul@f1
  7026  0047E4  C19D  F091         	movff	sqrt@x+1,___flmul@f1+1
  7027  0047E8  C19E  F092         	movff	sqrt@x+2,___flmul@f1+2
  7028  0047EC  C19F  F093         	movff	sqrt@x+3,___flmul@f1+3
  7029  0047F0  C193  F094         	movff	sqrt@z,___flmul@f2
  7030  0047F4  C194  F095         	movff	sqrt@z+1,___flmul@f2+1
  7031  0047F8  C195  F096         	movff	sqrt@z+2,___flmul@f2+2
  7032  0047FC  C196  F097         	movff	sqrt@z+3,___flmul@f2+3
  7033  004800  EC1F  F027         	call	___flmul	;wreg free
  7034  004804  C090  F198         	movff	?___flmul,sqrt@q
  7035  004808  C091  F199         	movff	?___flmul+1,sqrt@q+1
  7036  00480C  C092  F19A         	movff	?___flmul+2,sqrt@q+2
  7037  004810  C093  F19B         	movff	?___flmul+3,sqrt@q+3
  7038  004814  C198  F090         	movff	sqrt@q,___flmul@f1
  7039  004818  C199  F091         	movff	sqrt@q+1,___flmul@f1+1
  7040  00481C  C19A  F092         	movff	sqrt@q+2,___flmul@f1+2
  7041  004820  C19B  F093         	movff	sqrt@q+3,___flmul@f1+3
  7042  004824  C19C  F094         	movff	sqrt@x,___flmul@f2
  7043  004828  C19D  F095         	movff	sqrt@x+1,___flmul@f2+1
  7044  00482C  C19E  F096         	movff	sqrt@x+2,___flmul@f2+2
  7045  004830  C19F  F097         	movff	sqrt@x+3,___flmul@f2+3
  7046  004834  EC1F  F027         	call	___flmul	;wreg free
  7047  004838  C090  F198         	movff	?___flmul,sqrt@q
  7048  00483C  C091  F199         	movff	?___flmul+1,sqrt@q+1
  7049  004840  C092  F19A         	movff	?___flmul+2,sqrt@q+2
  7050  004844  C093  F19B         	movff	?___flmul+3,sqrt@q+3
  7051  004848  C198  F090         	movff	sqrt@q,___flmul@f1
  7052  00484C  C199  F091         	movff	sqrt@q+1,___flmul@f1+1
  7053  004850  C19A  F092         	movff	sqrt@q+2,___flmul@f1+2
  7054  004854  C19B  F093         	movff	sqrt@q+3,___flmul@f1+3
  7055  004858  C19C  F094         	movff	sqrt@x,___flmul@f2
  7056  00485C  C19D  F095         	movff	sqrt@x+1,___flmul@f2+1
  7057  004860  C19E  F096         	movff	sqrt@x+2,___flmul@f2+2
  7058  004864  C19F  F097         	movff	sqrt@x+3,___flmul@f2+3
  7059  004868  EC1F  F027         	call	___flmul	;wreg free
  7060  00486C  C090  F198         	movff	?___flmul,sqrt@q
  7061  004870  C091  F199         	movff	?___flmul+1,sqrt@q+1
  7062  004874  C092  F19A         	movff	?___flmul+2,sqrt@q+2
  7063  004878  C093  F19B         	movff	?___flmul+3,sqrt@q+3
  7064  00487C  C19C  F090         	movff	sqrt@x,___flmul@f1
  7065  004880  C19D  F091         	movff	sqrt@x+1,___flmul@f1+1
  7066  004884  C19E  F092         	movff	sqrt@x+2,___flmul@f1+2
  7067  004888  C19F  F093         	movff	sqrt@x+3,___flmul@f1+3
  7068  00488C  0E00               	movlw	0
  7069  00488E  0100               	movlb	0	; () banked
  7070  004890  6F94               	movwf	___flmul@f2& (0+255),b
  7071  004892  0E00               	movlw	0
  7072  004894  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  7073  004896  0EC0               	movlw	192
  7074  004898  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  7075  00489A  0E3F               	movlw	63
  7076  00489C  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  7077  00489E  EC1F  F027         	call	___flmul	;wreg free
  7078  0048A2  C090  F19C         	movff	?___flmul,sqrt@x
  7079  0048A6  C091  F19D         	movff	?___flmul+1,sqrt@x+1
  7080  0048AA  C092  F19E         	movff	?___flmul+2,sqrt@x+2
  7081  0048AE  C093  F19F         	movff	?___flmul+3,sqrt@x+3
  7082  0048B2  C19C  F0C9         	movff	sqrt@x,___flsub@f1
  7083  0048B6  C19D  F0CA         	movff	sqrt@x+1,___flsub@f1+1
  7084  0048BA  C19E  F0CB         	movff	sqrt@x+2,___flsub@f1+2
  7085  0048BE  C19F  F0CC         	movff	sqrt@x+3,___flsub@f1+3
  7086  0048C2  C198  F0CD         	movff	sqrt@q,___flsub@f2
  7087  0048C6  C199  F0CE         	movff	sqrt@q+1,___flsub@f2+1
  7088  0048CA  C19A  F0CF         	movff	sqrt@q+2,___flsub@f2+2
  7089  0048CE  C19B  F0D0         	movff	sqrt@q+3,___flsub@f2+3
  7090  0048D2  EC4D  F02D         	call	___flsub	;wreg free
  7091  0048D6  C0C9  F19C         	movff	?___flsub,sqrt@x
  7092  0048DA  C0CA  F19D         	movff	?___flsub+1,sqrt@x+1
  7093  0048DE  C0CB  F19E         	movff	?___flsub+2,sqrt@x+2
  7094  0048E2  C0CC  F19F         	movff	?___flsub+3,sqrt@x+3
  7095  0048E6  0101               	movlb	1	; () banked
  7096  0048E8  2F97               	decfsz	sqrt@i& (0+255),f,b
  7097  0048EA  D772               	goto	l6306
  7098  0048EC  D000               	goto	l6320
  7099  0048EE                     l6320:
  7100                           
  7101                           ; BSR set to: 1
  7102  0048EE  C19C  F090         	movff	sqrt@x,___flmul@f1
  7103  0048F2  C19D  F091         	movff	sqrt@x+1,___flmul@f1+1
  7104  0048F6  C19E  F092         	movff	sqrt@x+2,___flmul@f1+2
  7105  0048FA  C19F  F093         	movff	sqrt@x+3,___flmul@f1+3
  7106  0048FE  C0D1  F094         	movff	sqrt@y,___flmul@f2
  7107  004902  C0D2  F095         	movff	sqrt@y+1,___flmul@f2+1
  7108  004906  C0D3  F096         	movff	sqrt@y+2,___flmul@f2+2
  7109  00490A  C0D4  F097         	movff	sqrt@y+3,___flmul@f2+3
  7110  00490E  EC1F  F027         	call	___flmul	;wreg free
  7111  004912  C090  F0D1         	movff	?___flmul,?_sqrt
  7112  004916  C091  F0D2         	movff	?___flmul+1,?_sqrt+1
  7113  00491A  C092  F0D3         	movff	?___flmul+2,?_sqrt+2
  7114  00491E  C093  F0D4         	movff	?___flmul+3,?_sqrt+3
  7115  004922  0012               	return	
  7116  004924  0012               	return		;funcret
  7117  004926                     __end_of_sqrt:
  7118                           	opt stack 0
  7119                           tblptru	equ	0xFF8
  7120                           tblptrh	equ	0xFF7
  7121                           tblptrl	equ	0xFF6
  7122                           tablat	equ	0xFF5
  7123                           postinc0	equ	0xFEE
  7124                           wreg	equ	0xFE8
  7125                           postdec1	equ	0xFE5
  7126                           fsr1l	equ	0xFE1
  7127                           indf2	equ	0xFDF
  7128                           postinc2	equ	0xFDE
  7129                           postdec2	equ	0xFDD
  7130                           fsr2h	equ	0xFDA
  7131                           fsr2l	equ	0xFD9
  7132                           status	equ	0xFD8
  7133                           
  7134 ;; *************** function ___flsub *****************
  7135 ;; Defined at:
  7136 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;  f1              4  105[BANK0 ] unsigned char 
  7139 ;;  f2              4  109[BANK0 ] unsigned char 
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;		None
  7142 ;; Return value:  Size  Location     Type
  7143 ;;                  4  105[BANK0 ] unsigned char 
  7144 ;; Registers used:
  7145 ;;		wreg, status,2, status,0, cstack
  7146 ;; Tracked objects:
  7147 ;;		On entry : 0/0
  7148 ;;		On exit  : 0/0
  7149 ;;		Unchanged: 0/0
  7150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7151 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;Total ram usage:        8 bytes
  7156 ;; Hardware stack levels used:    1
  7157 ;; Hardware stack levels required when called:    7
  7158 ;; This function calls:
  7159 ;;		___fladd
  7160 ;; This function is called by:
  7161 ;;		_sin
  7162 ;;		_sqrt
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           	psect	text18
  7167  005A9A                     __ptext18:
  7168                           	opt stack 0
  7169  005A9A                     ___flsub:
  7170                           	opt stack 20
  7171                           
  7172                           ;incstack = 0
  7173  005A9A  0100               	movlb	0	; () banked
  7174  005A9C  51CD               	movf	___flsub@f2& (0+255),w,b
  7175  005A9E  0100               	movlb	0	; () banked
  7176  005AA0  11CE               	iorwf	(___flsub@f2+1)& (0+255),w,b
  7177  005AA2  0100               	movlb	0	; () banked
  7178  005AA4  11CF               	iorwf	(___flsub@f2+2)& (0+255),w,b
  7179  005AA6  0100               	movlb	0	; () banked
  7180  005AA8  11D0               	iorwf	(___flsub@f2+3)& (0+255),w,b
  7181  005AAA  B4D8               	btfsc	status,2,c
  7182  005AAC  D00A               	goto	l6250
  7183                           
  7184                           ; BSR set to: 0
  7185  005AAE  0E00               	movlw	0
  7186  005AB0  0100               	movlb	0	; () banked
  7187  005AB2  1BCD               	xorwf	___flsub@f2& (0+255),f,b
  7188  005AB4  0E00               	movlw	0
  7189  005AB6  1BCE               	xorwf	(___flsub@f2+1)& (0+255),f,b
  7190  005AB8  0E00               	movlw	0
  7191  005ABA  1BCF               	xorwf	(___flsub@f2+2)& (0+255),f,b
  7192  005ABC  0E80               	movlw	128
  7193  005ABE  1BD0               	xorwf	(___flsub@f2+3)& (0+255),f,b
  7194  005AC0  D000               	goto	l6250
  7195  005AC2                     l6250:
  7196                           
  7197                           ; BSR set to: 0
  7198  005AC2  C0C9  F09F         	movff	___flsub@f1,___fladd@f1
  7199  005AC6  C0CA  F0A0         	movff	___flsub@f1+1,___fladd@f1+1
  7200  005ACA  C0CB  F0A1         	movff	___flsub@f1+2,___fladd@f1+2
  7201  005ACE  C0CC  F0A2         	movff	___flsub@f1+3,___fladd@f1+3
  7202  005AD2  C0CD  F0A3         	movff	___flsub@f2,___fladd@f2
  7203  005AD6  C0CE  F0A4         	movff	___flsub@f2+1,___fladd@f2+1
  7204  005ADA  C0CF  F0A5         	movff	___flsub@f2+2,___fladd@f2+2
  7205  005ADE  C0D0  F0A6         	movff	___flsub@f2+3,___fladd@f2+3
  7206  005AE2  ECF0  F01F         	call	___fladd	;wreg free
  7207  005AE6  C09F  F0C9         	movff	?___fladd,?___flsub
  7208  005AEA  C0A0  F0CA         	movff	?___fladd+1,?___flsub+1
  7209  005AEE  C0A1  F0CB         	movff	?___fladd+2,?___flsub+2
  7210  005AF2  C0A2  F0CC         	movff	?___fladd+3,?___flsub+3
  7211  005AF6  0012               	return	
  7212  005AF8  0012               	return		;funcret
  7213  005AFA                     __end_of___flsub:
  7214                           	opt stack 0
  7215                           tblptru	equ	0xFF8
  7216                           tblptrh	equ	0xFF7
  7217                           tblptrl	equ	0xFF6
  7218                           tablat	equ	0xFF5
  7219                           postinc0	equ	0xFEE
  7220                           wreg	equ	0xFE8
  7221                           postdec1	equ	0xFE5
  7222                           fsr1l	equ	0xFE1
  7223                           indf2	equ	0xFDF
  7224                           postinc2	equ	0xFDE
  7225                           postdec2	equ	0xFDD
  7226                           fsr2h	equ	0xFDA
  7227                           fsr2l	equ	0xFD9
  7228                           status	equ	0xFD8
  7229                           
  7230 ;; *************** function _atan *****************
  7231 ;; Defined at:
  7232 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atan.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;  f               4   95[BANK0 ] unsigned char 
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;  val             4  112[BANK0 ] unsigned char 
  7237 ;;  val_squared     4  108[BANK0 ] unsigned char 
  7238 ;;  x               4  103[BANK0 ] unsigned char 
  7239 ;;  y               4   99[BANK0 ] unsigned char 
  7240 ;;  recip           1  107[BANK0 ] unsigned char 
  7241 ;; Return value:  Size  Location     Type
  7242 ;;                  4   95[BANK0 ] unsigned char 
  7243 ;; Registers used:
  7244 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7245 ;; Tracked objects:
  7246 ;;		On entry : 0/0
  7247 ;;		On exit  : 0/0
  7248 ;;		Unchanged: 0/0
  7249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7250 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;Total ram usage:       21 bytes
  7255 ;; Hardware stack levels used:    1
  7256 ;; Hardware stack levels required when called:    8
  7257 ;; This function calls:
  7258 ;;		___fladd
  7259 ;;		___fldiv
  7260 ;;		___flge
  7261 ;;		___flmul
  7262 ;;		___flneg
  7263 ;;		_eval_poly
  7264 ;;		_fabs
  7265 ;; This function is called by:
  7266 ;;		_asin
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           	psect	text19
  7271  0044A8                     __ptext19:
  7272                           	opt stack 0
  7273  0044A8                     _atan:
  7274                           	opt stack 19
  7275                           
  7276                           ;incstack = 0
  7277  0044A8  C0BF  F0AF         	movff	atan@f,fabs@d
  7278  0044AC  C0C0  F0B0         	movff	atan@f+1,fabs@d+1
  7279  0044B0  C0C1  F0B1         	movff	atan@f+2,fabs@d+2
  7280  0044B4  C0C2  F0B2         	movff	atan@f+3,fabs@d+3
  7281  0044B8  ECF9  F02D         	call	_fabs	;wreg free
  7282  0044BC  C0AF  F0D0         	movff	?_fabs,atan@val
  7283  0044C0  C0B0  F0D1         	movff	?_fabs+1,atan@val+1
  7284  0044C4  C0B1  F0D2         	movff	?_fabs+2,atan@val+2
  7285  0044C8  C0B2  F0D3         	movff	?_fabs+3,atan@val+3
  7286  0044CC  0100               	movlb	0	; () banked
  7287  0044CE  51D0               	movf	atan@val& (0+255),w,b
  7288  0044D0  0100               	movlb	0	; () banked
  7289  0044D2  11D1               	iorwf	(atan@val+1)& (0+255),w,b
  7290  0044D4  0100               	movlb	0	; () banked
  7291  0044D6  11D2               	iorwf	(atan@val+2)& (0+255),w,b
  7292  0044D8  0100               	movlb	0	; () banked
  7293  0044DA  11D3               	iorwf	(atan@val+3)& (0+255),w,b
  7294  0044DC  A4D8               	btfss	status,2,c
  7295  0044DE  D00A               	goto	l6330
  7296                           
  7297                           ; BSR set to: 0
  7298  0044E0  0E00               	movlw	0
  7299  0044E2  0100               	movlb	0	; () banked
  7300  0044E4  6FBF               	movwf	?_atan& (0+255),b
  7301  0044E6  0E00               	movlw	0
  7302  0044E8  6FC0               	movwf	(?_atan+1)& (0+255),b
  7303  0044EA  0E00               	movlw	0
  7304  0044EC  6FC1               	movwf	(?_atan+2)& (0+255),b
  7305  0044EE  0E00               	movlw	0
  7306  0044F0  6FC2               	movwf	(?_atan+3)& (0+255),b
  7307                           
  7308                           ; BSR set to: 0
  7309  0044F2  0012               	return	
  7310  0044F4                     l6330:
  7311                           
  7312                           ; BSR set to: 0
  7313  0044F4  0E00               	movlw	0
  7314  0044F6  0100               	movlb	0	; () banked
  7315  0044F8  6FB3               	movwf	___flge@ff1& (0+255),b
  7316  0044FA  0E00               	movlw	0
  7317  0044FC  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  7318  0044FE  0E80               	movlw	128
  7319  004500  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  7320  004502  0E3F               	movlw	63
  7321  004504  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  7322  004506  C0D0  F0B7         	movff	atan@val,___flge@ff2
  7323  00450A  C0D1  F0B8         	movff	atan@val+1,___flge@ff2+1
  7324  00450E  C0D2  F0B9         	movff	atan@val+2,___flge@ff2+2
  7325  004512  C0D3  F0BA         	movff	atan@val+3,___flge@ff2+3
  7326  004516  EC9F  F02A         	call	___flge	;wreg free
  7327  00451A  0100               	movlb	0	; () banked
  7328  00451C  B0D8               	btfsc	status,0,c
  7329  00451E  D002               	goto	u7830
  7330  004520  0E01               	movlw	1
  7331  004522  D001               	goto	u7840
  7332  004524                     u7830:
  7333  004524  0E00               	movlw	0
  7334  004526                     u7840:
  7335  004526  0100               	movlb	0	; () banked
  7336  004528  6FCB               	movwf	atan@recip& (0+255),b
  7337  00452A  0100               	movlb	0	; () banked
  7338  00452C  51CB               	movf	atan@recip& (0+255),w,b
  7339  00452E  B4D8               	btfsc	status,2,c
  7340  004530  D01B               	goto	l1023
  7341                           
  7342                           ; BSR set to: 0
  7343  004532  0E00               	movlw	0
  7344  004534  0100               	movlb	0	; () banked
  7345  004536  6F81               	movwf	___fldiv@f1& (0+255),b
  7346  004538  0E00               	movlw	0
  7347  00453A  6F82               	movwf	(___fldiv@f1+1)& (0+255),b
  7348  00453C  0E80               	movlw	128
  7349  00453E  6F83               	movwf	(___fldiv@f1+2)& (0+255),b
  7350  004540  0E3F               	movlw	63
  7351  004542  6F84               	movwf	(___fldiv@f1+3)& (0+255),b
  7352  004544  C0D0  F085         	movff	atan@val,___fldiv@f2
  7353  004548  C0D1  F086         	movff	atan@val+1,___fldiv@f2+1
  7354  00454C  C0D2  F087         	movff	atan@val+2,___fldiv@f2+2
  7355  004550  C0D3  F088         	movff	atan@val+3,___fldiv@f2+3
  7356  004554  ECD1  F027         	call	___fldiv	;wreg free
  7357  004558  C081  F0D0         	movff	?___fldiv,atan@val
  7358  00455C  C082  F0D1         	movff	?___fldiv+1,atan@val+1
  7359  004560  C083  F0D2         	movff	?___fldiv+2,atan@val+2
  7360  004564  C084  F0D3         	movff	?___fldiv+3,atan@val+3
  7361  004568                     l1023:
  7362  004568  C0D0  F090         	movff	atan@val,___flmul@f1
  7363  00456C  C0D1  F091         	movff	atan@val+1,___flmul@f1+1
  7364  004570  C0D2  F092         	movff	atan@val+2,___flmul@f1+2
  7365  004574  C0D3  F093         	movff	atan@val+3,___flmul@f1+3
  7366  004578  C0D0  F094         	movff	atan@val,___flmul@f2
  7367  00457C  C0D1  F095         	movff	atan@val+1,___flmul@f2+1
  7368  004580  C0D2  F096         	movff	atan@val+2,___flmul@f2+2
  7369  004584  C0D3  F097         	movff	atan@val+3,___flmul@f2+3
  7370  004588  EC1F  F027         	call	___flmul	;wreg free
  7371  00458C  C090  F0CC         	movff	?___flmul,atan@val_squared
  7372  004590  C091  F0CD         	movff	?___flmul+1,atan@val_squared+1
  7373  004594  C092  F0CE         	movff	?___flmul+2,atan@val_squared+2
  7374  004598  C093  F0CF         	movff	?___flmul+3,atan@val_squared+3
  7375  00459C  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  7376  0045A0  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  7377  0045A4  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  7378  0045A8  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  7379  0045AC  0E19               	movlw	low atan@coeff_b
  7380  0045AE  0100               	movlb	0	; () banked
  7381  0045B0  6FAF               	movwf	eval_poly@d& (0+255),b
  7382  0045B2  0E0D               	movlw	high atan@coeff_b
  7383  0045B4  0100               	movlb	0	; () banked
  7384  0045B6  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  7385  0045B8  0E00               	movlw	0
  7386  0045BA  0100               	movlb	0	; () banked
  7387  0045BC  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  7388  0045BE  0E04               	movlw	4
  7389  0045C0  6FB1               	movwf	eval_poly@n& (0+255),b
  7390  0045C2  EC8A  F029         	call	_eval_poly	;wreg free
  7391  0045C6  C0AB  F0C3         	movff	?_eval_poly,atan@y
  7392  0045CA  C0AC  F0C4         	movff	?_eval_poly+1,atan@y+1
  7393  0045CE  C0AD  F0C5         	movff	?_eval_poly+2,atan@y+2
  7394  0045D2  C0AE  F0C6         	movff	?_eval_poly+3,atan@y+3
  7395  0045D6  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  7396  0045DA  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  7397  0045DE  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  7398  0045E2  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  7399  0045E6  0E01               	movlw	low atan@coeff_a
  7400  0045E8  0100               	movlb	0	; () banked
  7401  0045EA  6FAF               	movwf	eval_poly@d& (0+255),b
  7402  0045EC  0E0D               	movlw	high atan@coeff_a
  7403  0045EE  0100               	movlb	0	; () banked
  7404  0045F0  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  7405  0045F2  0E00               	movlw	0
  7406  0045F4  0100               	movlb	0	; () banked
  7407  0045F6  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  7408  0045F8  0E05               	movlw	5
  7409  0045FA  6FB1               	movwf	eval_poly@n& (0+255),b
  7410  0045FC  EC8A  F029         	call	_eval_poly	;wreg free
  7411  004600  C0AB  F0C7         	movff	?_eval_poly,atan@x
  7412  004604  C0AC  F0C8         	movff	?_eval_poly+1,atan@x+1
  7413  004608  C0AD  F0C9         	movff	?_eval_poly+2,atan@x+2
  7414  00460C  C0AE  F0CA         	movff	?_eval_poly+3,atan@x+3
  7415  004610  C0D0  F090         	movff	atan@val,___flmul@f1
  7416  004614  C0D1  F091         	movff	atan@val+1,___flmul@f1+1
  7417  004618  C0D2  F092         	movff	atan@val+2,___flmul@f1+2
  7418  00461C  C0D3  F093         	movff	atan@val+3,___flmul@f1+3
  7419  004620  C0C3  F085         	movff	atan@y,___fldiv@f2
  7420  004624  C0C4  F086         	movff	atan@y+1,___fldiv@f2+1
  7421  004628  C0C5  F087         	movff	atan@y+2,___fldiv@f2+2
  7422  00462C  C0C6  F088         	movff	atan@y+3,___fldiv@f2+3
  7423  004630  C0C7  F081         	movff	atan@x,___fldiv@f1
  7424  004634  C0C8  F082         	movff	atan@x+1,___fldiv@f1+1
  7425  004638  C0C9  F083         	movff	atan@x+2,___fldiv@f1+2
  7426  00463C  C0CA  F084         	movff	atan@x+3,___fldiv@f1+3
  7427  004640  ECD1  F027         	call	___fldiv	;wreg free
  7428  004644  C081  F094         	movff	?___fldiv,___flmul@f2
  7429  004648  C082  F095         	movff	?___fldiv+1,___flmul@f2+1
  7430  00464C  C083  F096         	movff	?___fldiv+2,___flmul@f2+2
  7431  004650  C084  F097         	movff	?___fldiv+3,___flmul@f2+3
  7432  004654  EC1F  F027         	call	___flmul	;wreg free
  7433  004658  C090  F0D0         	movff	?___flmul,atan@val
  7434  00465C  C091  F0D1         	movff	?___flmul+1,atan@val+1
  7435  004660  C092  F0D2         	movff	?___flmul+2,atan@val+2
  7436  004664  C093  F0D3         	movff	?___flmul+3,atan@val+3
  7437  004668  0100               	movlb	0	; () banked
  7438  00466A  51CB               	movf	atan@recip& (0+255),w,b
  7439  00466C  0100               	movlb	0	; () banked
  7440  00466E  B4D8               	btfsc	status,2,c
  7441  004670  D026               	goto	l6342
  7442                           
  7443                           ; BSR set to: 0
  7444  004672  C0D0  F0AB         	movff	atan@val,___flneg@f1
  7445  004676  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  7446  00467A  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  7447  00467E  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  7448  004682  EC18  F02E         	call	___flneg	;wreg free
  7449  004686  C0AB  F09F         	movff	?___flneg,___fladd@f1
  7450  00468A  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  7451  00468E  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  7452  004692  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  7453  004696  0EDB               	movlw	219
  7454  004698  0100               	movlb	0	; () banked
  7455  00469A  6FA3               	movwf	___fladd@f2& (0+255),b
  7456  00469C  0E0F               	movlw	15
  7457  00469E  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  7458  0046A0  0EC9               	movlw	201
  7459  0046A2  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  7460  0046A4  0E3F               	movlw	63
  7461  0046A6  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  7462  0046A8  ECF0  F01F         	call	___fladd	;wreg free
  7463  0046AC  C09F  F0D0         	movff	?___fladd,atan@val
  7464  0046B0  C0A0  F0D1         	movff	?___fladd+1,atan@val+1
  7465  0046B4  C0A1  F0D2         	movff	?___fladd+2,atan@val+2
  7466  0046B8  C0A2  F0D3         	movff	?___fladd+3,atan@val+3
  7467  0046BC  D000               	goto	l6342
  7468  0046BE                     l6342:
  7469  0046BE  0100               	movlb	0	; () banked
  7470  0046C0  BFC2               	btfsc	(atan@f+3)& (0+255),7,b
  7471  0046C2  D009               	goto	l6346
  7472                           
  7473                           ; BSR set to: 0
  7474  0046C4  C0D0  F0BF         	movff	atan@val,?_atan
  7475  0046C8  C0D1  F0C0         	movff	atan@val+1,?_atan+1
  7476  0046CC  C0D2  F0C1         	movff	atan@val+2,?_atan+2
  7477  0046D0  C0D3  F0C2         	movff	atan@val+3,?_atan+3
  7478  0046D4  0012               	return	
  7479  0046D6                     l6346:
  7480                           
  7481                           ; BSR set to: 0
  7482  0046D6  C0D0  F0AB         	movff	atan@val,___flneg@f1
  7483  0046DA  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  7484  0046DE  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  7485  0046E2  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  7486  0046E6  EC18  F02E         	call	___flneg	;wreg free
  7487  0046EA  C0AB  F0BF         	movff	?___flneg,?_atan
  7488  0046EE  C0AC  F0C0         	movff	?___flneg+1,?_atan+1
  7489  0046F2  C0AD  F0C1         	movff	?___flneg+2,?_atan+2
  7490  0046F6  C0AE  F0C2         	movff	?___flneg+3,?_atan+3
  7491  0046FA  0012               	return	
  7492  0046FC  0012               	return		;funcret
  7493  0046FE                     __end_of_atan:
  7494                           	opt stack 0
  7495                           tblptru	equ	0xFF8
  7496                           tblptrh	equ	0xFF7
  7497                           tblptrl	equ	0xFF6
  7498                           tablat	equ	0xFF5
  7499                           postinc0	equ	0xFEE
  7500                           wreg	equ	0xFE8
  7501                           postdec1	equ	0xFE5
  7502                           fsr1l	equ	0xFE1
  7503                           indf2	equ	0xFDF
  7504                           postinc2	equ	0xFDE
  7505                           postdec2	equ	0xFDD
  7506                           fsr2h	equ	0xFDA
  7507                           fsr2l	equ	0xFD9
  7508                           status	equ	0xFD8
  7509                           
  7510 ;; *************** function _fabs *****************
  7511 ;; Defined at:
  7512 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fabs.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  d               4   79[BANK0 ] unsigned char 
  7515 ;; Auto vars:     Size  Location     Type
  7516 ;;		None
  7517 ;; Return value:  Size  Location     Type
  7518 ;;                  4   79[BANK0 ] unsigned char 
  7519 ;; Registers used:
  7520 ;;		wreg, status,2, status,0, cstack
  7521 ;; Tracked objects:
  7522 ;;		On entry : 0/0
  7523 ;;		On exit  : 0/0
  7524 ;;		Unchanged: 0/0
  7525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7526 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7529 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;Total ram usage:        4 bytes
  7531 ;; Hardware stack levels used:    1
  7532 ;; Hardware stack levels required when called:    6
  7533 ;; This function calls:
  7534 ;;		___flneg
  7535 ;; This function is called by:
  7536 ;;		_asin
  7537 ;;		_atan
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           	psect	text20
  7542  005BF2                     __ptext20:
  7543                           	opt stack 0
  7544  005BF2                     _fabs:
  7545                           	opt stack 21
  7546                           
  7547                           ;incstack = 0
  7548  005BF2  0100               	movlb	0	; () banked
  7549  005BF4  AFB2               	btfss	(fabs@d+3)& (0+255),7,b
  7550  005BF6  D013               	goto	l1140
  7551                           
  7552                           ; BSR set to: 0
  7553  005BF8  C0AF  F0AB         	movff	fabs@d,___flneg@f1
  7554  005BFC  C0B0  F0AC         	movff	fabs@d+1,___flneg@f1+1
  7555  005C00  C0B1  F0AD         	movff	fabs@d+2,___flneg@f1+2
  7556  005C04  C0B2  F0AE         	movff	fabs@d+3,___flneg@f1+3
  7557  005C08  EC18  F02E         	call	___flneg	;wreg free
  7558  005C0C  C0AB  F0AF         	movff	?___flneg,?_fabs
  7559  005C10  C0AC  F0B0         	movff	?___flneg+1,?_fabs+1
  7560  005C14  C0AD  F0B1         	movff	?___flneg+2,?_fabs+2
  7561  005C18  C0AE  F0B2         	movff	?___flneg+3,?_fabs+3
  7562  005C1C  0012               	return	
  7563  005C1E                     l1140:
  7564                           
  7565                           ; BSR set to: 0
  7566  005C1E  C0AF  F0AF         	movff	fabs@d,?_fabs
  7567  005C22  C0B0  F0B0         	movff	fabs@d+1,?_fabs+1
  7568  005C26  C0B1  F0B1         	movff	fabs@d+2,?_fabs+2
  7569  005C2A  C0B2  F0B2         	movff	fabs@d+3,?_fabs+3
  7570  005C2E  0012               	return		;funcret
  7571  005C30                     __end_of_fabs:
  7572                           	opt stack 0
  7573                           tblptru	equ	0xFF8
  7574                           tblptrh	equ	0xFF7
  7575                           tblptrl	equ	0xFF6
  7576                           tablat	equ	0xFF5
  7577                           postinc0	equ	0xFEE
  7578                           wreg	equ	0xFE8
  7579                           postdec1	equ	0xFE5
  7580                           fsr1l	equ	0xFE1
  7581                           indf2	equ	0xFDF
  7582                           postinc2	equ	0xFDE
  7583                           postdec2	equ	0xFDD
  7584                           fsr2h	equ	0xFDA
  7585                           fsr2l	equ	0xFD9
  7586                           status	equ	0xFD8
  7587                           
  7588 ;; *************** function ___flneg *****************
  7589 ;; Defined at:
  7590 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  7591 ;; Parameters:    Size  Location     Type
  7592 ;;  f1              4   75[BANK0 ] unsigned char 
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;		None
  7595 ;; Return value:  Size  Location     Type
  7596 ;;                  4   75[BANK0 ] unsigned char 
  7597 ;; Registers used:
  7598 ;;		wreg, status,2, status,0
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7604 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7607 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7608 ;;Total ram usage:        4 bytes
  7609 ;; Hardware stack levels used:    1
  7610 ;; Hardware stack levels required when called:    5
  7611 ;; This function calls:
  7612 ;;		Nothing
  7613 ;; This function is called by:
  7614 ;;		_park_routine
  7615 ;;		_matematica
  7616 ;;		_asin
  7617 ;;		_atan
  7618 ;;		_fabs
  7619 ;;		_sin
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623                           	psect	text21
  7624  005C30                     __ptext21:
  7625                           	opt stack 0
  7626  005C30                     ___flneg:
  7627                           	opt stack 21
  7628                           
  7629                           ;incstack = 0
  7630  005C30  0100               	movlb	0	; () banked
  7631  005C32  51AB               	movf	___flneg@f1& (0+255),w,b
  7632  005C34  0100               	movlb	0	; () banked
  7633  005C36  11AC               	iorwf	(___flneg@f1+1)& (0+255),w,b
  7634  005C38  0100               	movlb	0	; () banked
  7635  005C3A  11AD               	iorwf	(___flneg@f1+2)& (0+255),w,b
  7636  005C3C  0100               	movlb	0	; () banked
  7637  005C3E  11AE               	iorwf	(___flneg@f1+3)& (0+255),w,b
  7638  005C40  B4D8               	btfsc	status,2,c
  7639  005C42  D00A               	goto	l6142
  7640                           
  7641                           ; BSR set to: 0
  7642  005C44  0E00               	movlw	0
  7643  005C46  0100               	movlb	0	; () banked
  7644  005C48  1BAB               	xorwf	___flneg@f1& (0+255),f,b
  7645  005C4A  0E00               	movlw	0
  7646  005C4C  1BAC               	xorwf	(___flneg@f1+1)& (0+255),f,b
  7647  005C4E  0E00               	movlw	0
  7648  005C50  1BAD               	xorwf	(___flneg@f1+2)& (0+255),f,b
  7649  005C52  0E80               	movlw	128
  7650  005C54  1BAE               	xorwf	(___flneg@f1+3)& (0+255),f,b
  7651  005C56  D000               	goto	l6142
  7652  005C58                     l6142:
  7653                           
  7654                           ; BSR set to: 0
  7655  005C58  C0AB  F0AB         	movff	___flneg@f1,?___flneg
  7656  005C5C  C0AC  F0AC         	movff	___flneg@f1+1,?___flneg+1
  7657  005C60  C0AD  F0AD         	movff	___flneg@f1+2,?___flneg+2
  7658  005C64  C0AE  F0AE         	movff	___flneg@f1+3,?___flneg+3
  7659  005C68  0012               	return	
  7660                           
  7661                           ; BSR set to: 0
  7662                           
  7663                           ; BSR set to: 0
  7664  005C6A  0012               	return		;funcret
  7665  005C6C                     __end_of___flneg:
  7666                           	opt stack 0
  7667                           tblptru	equ	0xFF8
  7668                           tblptrh	equ	0xFF7
  7669                           tblptrl	equ	0xFF6
  7670                           tablat	equ	0xFF5
  7671                           postinc0	equ	0xFEE
  7672                           wreg	equ	0xFE8
  7673                           postdec1	equ	0xFE5
  7674                           fsr1l	equ	0xFE1
  7675                           indf2	equ	0xFDF
  7676                           postinc2	equ	0xFDE
  7677                           postdec2	equ	0xFDD
  7678                           fsr2h	equ	0xFDA
  7679                           fsr2l	equ	0xFD9
  7680                           status	equ	0xFD8
  7681                           
  7682 ;; *************** function _eval_poly *****************
  7683 ;; Defined at:
  7684 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;  x               4   75[BANK0 ] unsigned char 
  7687 ;;  d               2   79[BANK0 ] PTR const 
  7688 ;;		 -> sin@coeff_a(20), sin@coeff_b(16), atan@coeff_a(24), atan@coeff_b(20), 
  7689 ;;  n               2   81[BANK0 ] int 
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;  res             4   87[BANK0 ] int 
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  4   75[BANK0 ] int 
  7694 ;; Registers used:
  7695 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7701 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;Total ram usage:       16 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; Hardware stack levels required when called:    7
  7708 ;; This function calls:
  7709 ;;		___fladd
  7710 ;;		___flmul
  7711 ;; This function is called by:
  7712 ;;		_atan
  7713 ;;		_sin
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           	psect	text22
  7718  005314                     __ptext22:
  7719                           	opt stack 0
  7720  005314                     _eval_poly:
  7721                           	opt stack 19
  7722                           
  7723                           ; BSR set to: 0
  7724                           ;incstack = 0
  7725  005314  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  7726  005318  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  7727  00531C  0100               	movlb	0	; () banked
  7728  00531E  90D8               	bcf	status,0,c
  7729  005320  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7730  005322  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7731  005324  0100               	movlb	0	; () banked
  7732  005326  90D8               	bcf	status,0,c
  7733  005328  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7734  00532A  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7735  00532C  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  7736  005330  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  7737  005334  0100               	movlb	0	; () banked
  7738  005336  51B3               	movf	??_eval_poly& (0+255),w,b
  7739  005338  0100               	movlb	0	; () banked
  7740  00533A  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  7741  00533C  0100               	movlb	0	; () banked
  7742  00533E  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  7743  005340  0100               	movlb	0	; () banked
  7744  005342  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  7745  005344  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  7746  005348  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  7747  00534C                     	if	0	;tblptru may be non-zero
  7748  00534C                     	endif
  7749  00534C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7750  00534C  0E00               	movlw	low (__mediumconst shr (0+16))
  7751  00534E  6EF8               	movwf	tblptru,c
  7752  005350                     	endif
  7753  005350  0009               	tblrd		*+
  7754  005352  CFF5 F0B7          	movff	tablat,eval_poly@res
  7755  005356  0009               	tblrd		*+
  7756  005358  CFF5 F0B8          	movff	tablat,eval_poly@res+1
  7757  00535C  0009               	tblrd		*+
  7758  00535E  CFF5 F0B9          	movff	tablat,eval_poly@res+2
  7759  005362  000A               	tblrd		*-
  7760  005364  CFF5 F0BA          	movff	tablat,eval_poly@res+3
  7761  005368  D053               	goto	l6264
  7762  00536A                     l6262:
  7763                           
  7764                           ; BSR set to: 0
  7765  00536A  C0B7  F094         	movff	eval_poly@res,___flmul@f2
  7766  00536E  C0B8  F095         	movff	eval_poly@res+1,___flmul@f2+1
  7767  005372  C0B9  F096         	movff	eval_poly@res+2,___flmul@f2+2
  7768  005376  C0BA  F097         	movff	eval_poly@res+3,___flmul@f2+3
  7769  00537A  C0AB  F090         	movff	eval_poly@x,___flmul@f1
  7770  00537E  C0AC  F091         	movff	eval_poly@x+1,___flmul@f1+1
  7771  005382  C0AD  F092         	movff	eval_poly@x+2,___flmul@f1+2
  7772  005386  C0AE  F093         	movff	eval_poly@x+3,___flmul@f1+3
  7773  00538A  EC1F  F027         	call	___flmul	;wreg free
  7774  00538E  C090  F09F         	movff	?___flmul,___fladd@f1
  7775  005392  C091  F0A0         	movff	?___flmul+1,___fladd@f1+1
  7776  005396  C092  F0A1         	movff	?___flmul+2,___fladd@f1+2
  7777  00539A  C093  F0A2         	movff	?___flmul+3,___fladd@f1+3
  7778  00539E  0100               	movlb	0	; () banked
  7779  0053A0  07B1               	decf	eval_poly@n& (0+255),f,b
  7780  0053A2  A0D8               	btfss	status,0,c
  7781  0053A4  07B2               	decf	(eval_poly@n+1)& (0+255),f,b
  7782  0053A6  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  7783  0053AA  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  7784  0053AE  0100               	movlb	0	; () banked
  7785  0053B0  90D8               	bcf	status,0,c
  7786  0053B2  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7787  0053B4  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7788  0053B6  0100               	movlb	0	; () banked
  7789  0053B8  90D8               	bcf	status,0,c
  7790  0053BA  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7791  0053BC  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7792  0053BE  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  7793  0053C2  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  7794  0053C6  0100               	movlb	0	; () banked
  7795  0053C8  51B3               	movf	??_eval_poly& (0+255),w,b
  7796  0053CA  0100               	movlb	0	; () banked
  7797  0053CC  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  7798  0053CE  0100               	movlb	0	; () banked
  7799  0053D0  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  7800  0053D2  0100               	movlb	0	; () banked
  7801  0053D4  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  7802  0053D6  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  7803  0053DA  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  7804  0053DE                     	if	0	;tblptru may be non-zero
  7805  0053DE                     	endif
  7806  0053DE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7807  0053DE  0E00               	movlw	low (__mediumconst shr (0+16))
  7808  0053E0  6EF8               	movwf	tblptru,c
  7809  0053E2                     	endif
  7810  0053E2  0009               	tblrd		*+
  7811  0053E4  CFF5 F0A3          	movff	tablat,___fladd@f2
  7812  0053E8  0009               	tblrd		*+
  7813  0053EA  CFF5 F0A4          	movff	tablat,___fladd@f2+1
  7814  0053EE  0009               	tblrd		*+
  7815  0053F0  CFF5 F0A5          	movff	tablat,___fladd@f2+2
  7816  0053F4  000A               	tblrd		*-
  7817  0053F6  CFF5 F0A6          	movff	tablat,___fladd@f2+3
  7818  0053FA  ECF0  F01F         	call	___fladd	;wreg free
  7819  0053FE  C09F  F0B7         	movff	?___fladd,eval_poly@res
  7820  005402  C0A0  F0B8         	movff	?___fladd+1,eval_poly@res+1
  7821  005406  C0A1  F0B9         	movff	?___fladd+2,eval_poly@res+2
  7822  00540A  C0A2  F0BA         	movff	?___fladd+3,eval_poly@res+3
  7823  00540E  D000               	goto	l6264
  7824  005410                     l6264:
  7825  005410  0100               	movlb	0	; () banked
  7826  005412  51B1               	movf	eval_poly@n& (0+255),w,b
  7827  005414  0100               	movlb	0	; () banked
  7828  005416  11B2               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7829  005418  A4D8               	btfss	status,2,c
  7830  00541A  D7A7               	goto	l6262
  7831                           
  7832                           ; BSR set to: 0
  7833  00541C  C0B7  F0AB         	movff	eval_poly@res,?_eval_poly
  7834  005420  C0B8  F0AC         	movff	eval_poly@res+1,?_eval_poly+1
  7835  005424  C0B9  F0AD         	movff	eval_poly@res+2,?_eval_poly+2
  7836  005428  C0BA  F0AE         	movff	eval_poly@res+3,?_eval_poly+3
  7837                           
  7838                           ; BSR set to: 0
  7839  00542C  0012               	return		;funcret
  7840  00542E                     __end_of_eval_poly:
  7841                           	opt stack 0
  7842                           tblptru	equ	0xFF8
  7843                           tblptrh	equ	0xFF7
  7844                           tblptrl	equ	0xFF6
  7845                           tablat	equ	0xFF5
  7846                           postinc0	equ	0xFEE
  7847                           wreg	equ	0xFE8
  7848                           postdec1	equ	0xFE5
  7849                           fsr1l	equ	0xFE1
  7850                           indf2	equ	0xFDF
  7851                           postinc2	equ	0xFDE
  7852                           postdec2	equ	0xFDD
  7853                           fsr2h	equ	0xFDA
  7854                           fsr2l	equ	0xFD9
  7855                           status	equ	0xFD8
  7856                           
  7857 ;; *************** function ___flmul *****************
  7858 ;; Defined at:
  7859 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  7860 ;; Parameters:    Size  Location     Type
  7861 ;;  f1              4   48[BANK0 ] int 
  7862 ;;  f2              4   52[BANK0 ] int 
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;  f3_as_produc    4   57[BANK0 ] unsigned long 
  7865 ;;  sign            1   62[BANK0 ] unsigned char 
  7866 ;;  cntr            1   61[BANK0 ] unsigned char 
  7867 ;;  exp             1   56[BANK0 ] unsigned char 
  7868 ;; Return value:  Size  Location     Type
  7869 ;;                  4   48[BANK0 ] unsigned char 
  7870 ;; Registers used:
  7871 ;;		wreg, status,2, status,0, cstack
  7872 ;; Tracked objects:
  7873 ;;		On entry : 0/0
  7874 ;;		On exit  : 0/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7877 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7880 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7881 ;;Total ram usage:       15 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; Hardware stack levels required when called:    6
  7884 ;; This function calls:
  7885 ;;		___flpack
  7886 ;; This function is called by:
  7887 ;;		_parallelo
  7888 ;;		_matematica
  7889 ;;		_asin
  7890 ;;		_atan
  7891 ;;		_eval_poly
  7892 ;;		_sin
  7893 ;;		_sqrt
  7894 ;; This function uses a non-reentrant model
  7895 ;;
  7896                           
  7897                           	psect	text23
  7898  004E3E                     __ptext23:
  7899                           	opt stack 0
  7900  004E3E                     ___flmul:
  7901                           	opt stack 21
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;incstack = 0
  7905  004E3E  0100               	movlb	0	; () banked
  7906  004E40  3592               	rlcf	(___flmul@f1+2)& (0+255),w,b
  7907  004E42  3593               	rlcf	(___flmul@f1+3)& (0+255),w,b
  7908  004E44  0100               	movlb	0	; () banked
  7909  004E46  6F98               	movwf	___flmul@exp& (0+255),b
  7910  004E48  0100               	movlb	0	; () banked
  7911  004E4A  5198               	movf	___flmul@exp& (0+255),w,b
  7912  004E4C  A4D8               	btfss	status,2,c
  7913  004E4E  D00A               	goto	l6080
  7914                           
  7915                           ; BSR set to: 0
  7916  004E50  0E00               	movlw	0
  7917  004E52  0100               	movlb	0	; () banked
  7918  004E54  6F90               	movwf	?___flmul& (0+255),b
  7919  004E56  0E00               	movlw	0
  7920  004E58  6F91               	movwf	(?___flmul+1)& (0+255),b
  7921  004E5A  0E00               	movlw	0
  7922  004E5C  6F92               	movwf	(?___flmul+2)& (0+255),b
  7923  004E5E  0E00               	movlw	0
  7924  004E60  6F93               	movwf	(?___flmul+3)& (0+255),b
  7925                           
  7926                           ; BSR set to: 0
  7927  004E62  0012               	return	
  7928  004E64                     l6080:
  7929                           
  7930                           ; BSR set to: 0
  7931  004E64  0100               	movlb	0	; () banked
  7932  004E66  3596               	rlcf	(___flmul@f2+2)& (0+255),w,b
  7933  004E68  3597               	rlcf	(___flmul@f2+3)& (0+255),w,b
  7934  004E6A  0100               	movlb	0	; () banked
  7935  004E6C  6F9E               	movwf	___flmul@sign& (0+255),b
  7936  004E6E  0100               	movlb	0	; () banked
  7937  004E70  519E               	movf	___flmul@sign& (0+255),w,b
  7938  004E72  A4D8               	btfss	status,2,c
  7939  004E74  D00A               	goto	l6086
  7940                           
  7941                           ; BSR set to: 0
  7942  004E76  0E00               	movlw	0
  7943  004E78  0100               	movlb	0	; () banked
  7944  004E7A  6F90               	movwf	?___flmul& (0+255),b
  7945  004E7C  0E00               	movlw	0
  7946  004E7E  6F91               	movwf	(?___flmul+1)& (0+255),b
  7947  004E80  0E00               	movlw	0
  7948  004E82  6F92               	movwf	(?___flmul+2)& (0+255),b
  7949  004E84  0E00               	movlw	0
  7950  004E86  6F93               	movwf	(?___flmul+3)& (0+255),b
  7951                           
  7952                           ; BSR set to: 0
  7953  004E88  0012               	return	
  7954  004E8A                     l6086:
  7955                           
  7956                           ; BSR set to: 0
  7957  004E8A  0100               	movlb	0	; () banked
  7958  004E8C  519E               	movf	___flmul@sign& (0+255),w,b
  7959  004E8E  0F7B               	addlw	123
  7960  004E90  0100               	movlb	0	; () banked
  7961  004E92  2798               	addwf	___flmul@exp& (0+255),f,b
  7962                           
  7963                           ; BSR set to: 0
  7964  004E94  C093  F09E         	movff	___flmul@f1+3,___flmul@sign
  7965  004E98  0100               	movlb	0	; () banked
  7966  004E9A  5197               	movf	(___flmul@f2+3)& (0+255),w,b
  7967  004E9C  0100               	movlb	0	; () banked
  7968  004E9E  1B9E               	xorwf	___flmul@sign& (0+255),f,b
  7969  004EA0  0E80               	movlw	128
  7970  004EA2  0100               	movlb	0	; () banked
  7971  004EA4  179E               	andwf	___flmul@sign& (0+255),f,b
  7972                           
  7973                           ; BSR set to: 0
  7974  004EA6  0100               	movlb	0	; () banked
  7975  004EA8  8F92               	bsf	(___flmul@f1+2)& (0+255),7,b
  7976                           
  7977                           ; BSR set to: 0
  7978  004EAA  0100               	movlb	0	; () banked
  7979  004EAC  8F96               	bsf	(___flmul@f2+2)& (0+255),7,b
  7980  004EAE  0EFF               	movlw	255
  7981  004EB0  0100               	movlb	0	; () banked
  7982  004EB2  1794               	andwf	___flmul@f2& (0+255),f,b
  7983  004EB4  0EFF               	movlw	255
  7984  004EB6  1795               	andwf	(___flmul@f2+1)& (0+255),f,b
  7985  004EB8  0EFF               	movlw	255
  7986  004EBA  1796               	andwf	(___flmul@f2+2)& (0+255),f,b
  7987  004EBC  0E00               	movlw	0
  7988  004EBE  1797               	andwf	(___flmul@f2+3)& (0+255),f,b
  7989                           
  7990                           ; BSR set to: 0
  7991  004EC0  0E00               	movlw	0
  7992  004EC2  0100               	movlb	0	; () banked
  7993  004EC4  6F99               	movwf	___flmul@f3_as_product& (0+255),b
  7994  004EC6  0E00               	movlw	0
  7995  004EC8  6F9A               	movwf	(___flmul@f3_as_product+1)& (0+255),b
  7996  004ECA  0E00               	movlw	0
  7997  004ECC  6F9B               	movwf	(___flmul@f3_as_product+2)& (0+255),b
  7998  004ECE  0E00               	movlw	0
  7999  004ED0  6F9C               	movwf	(___flmul@f3_as_product+3)& (0+255),b
  8000                           
  8001                           ; BSR set to: 0
  8002  004ED2  0E07               	movlw	7
  8003  004ED4  0100               	movlb	0	; () banked
  8004  004ED6  6F9D               	movwf	___flmul@cntr& (0+255),b
  8005  004ED8  D000               	goto	l6098
  8006  004EDA                     l6098:
  8007                           
  8008                           ; BSR set to: 0
  8009  004EDA  0100               	movlb	0	; () banked
  8010  004EDC  A190               	btfss	___flmul@f1& (0+255),0,b
  8011  004EDE  D011               	goto	l6102
  8012                           
  8013                           ; BSR set to: 0
  8014  004EE0  0100               	movlb	0	; () banked
  8015  004EE2  5194               	movf	___flmul@f2& (0+255),w,b
  8016  004EE4  0100               	movlb	0	; () banked
  8017  004EE6  2799               	addwf	___flmul@f3_as_product& (0+255),f,b
  8018  004EE8  0100               	movlb	0	; () banked
  8019  004EEA  5195               	movf	(___flmul@f2+1)& (0+255),w,b
  8020  004EEC  0100               	movlb	0	; () banked
  8021  004EEE  239A               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8022  004EF0  0100               	movlb	0	; () banked
  8023  004EF2  5196               	movf	(___flmul@f2+2)& (0+255),w,b
  8024  004EF4  0100               	movlb	0	; () banked
  8025  004EF6  239B               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8026  004EF8  0100               	movlb	0	; () banked
  8027  004EFA  5197               	movf	(___flmul@f2+3)& (0+255),w,b
  8028  004EFC  0100               	movlb	0	; () banked
  8029  004EFE  239C               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8030  004F00  D000               	goto	l6102
  8031  004F02                     l6102:
  8032                           
  8033                           ; BSR set to: 0
  8034  004F02  0100               	movlb	0	; () banked
  8035  004F04  90D8               	bcf	status,0,c
  8036  004F06  3393               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8037  004F08  3392               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8038  004F0A  3391               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8039  004F0C  3390               	rrcf	___flmul@f1& (0+255),f,b
  8040                           
  8041                           ; BSR set to: 0
  8042  004F0E  0100               	movlb	0	; () banked
  8043  004F10  90D8               	bcf	status,0,c
  8044  004F12  3794               	rlcf	___flmul@f2& (0+255),f,b
  8045  004F14  3795               	rlcf	(___flmul@f2+1)& (0+255),f,b
  8046  004F16  3796               	rlcf	(___flmul@f2+2)& (0+255),f,b
  8047  004F18  3797               	rlcf	(___flmul@f2+3)& (0+255),f,b
  8048                           
  8049                           ; BSR set to: 0
  8050  004F1A  0100               	movlb	0	; () banked
  8051  004F1C  2F9D               	decfsz	___flmul@cntr& (0+255),f,b
  8052  004F1E  D7DD               	goto	l6098
  8053  004F20  D000               	goto	l6108
  8054  004F22                     l6108:
  8055                           
  8056                           ; BSR set to: 0
  8057  004F22  0E11               	movlw	17
  8058  004F24  0100               	movlb	0	; () banked
  8059  004F26  6F9D               	movwf	___flmul@cntr& (0+255),b
  8060  004F28  D000               	goto	l6110
  8061  004F2A                     l6110:
  8062                           
  8063                           ; BSR set to: 0
  8064  004F2A  0100               	movlb	0	; () banked
  8065  004F2C  A190               	btfss	___flmul@f1& (0+255),0,b
  8066  004F2E  D011               	goto	l6114
  8067                           
  8068                           ; BSR set to: 0
  8069  004F30  0100               	movlb	0	; () banked
  8070  004F32  5194               	movf	___flmul@f2& (0+255),w,b
  8071  004F34  0100               	movlb	0	; () banked
  8072  004F36  2799               	addwf	___flmul@f3_as_product& (0+255),f,b
  8073  004F38  0100               	movlb	0	; () banked
  8074  004F3A  5195               	movf	(___flmul@f2+1)& (0+255),w,b
  8075  004F3C  0100               	movlb	0	; () banked
  8076  004F3E  239A               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8077  004F40  0100               	movlb	0	; () banked
  8078  004F42  5196               	movf	(___flmul@f2+2)& (0+255),w,b
  8079  004F44  0100               	movlb	0	; () banked
  8080  004F46  239B               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8081  004F48  0100               	movlb	0	; () banked
  8082  004F4A  5197               	movf	(___flmul@f2+3)& (0+255),w,b
  8083  004F4C  0100               	movlb	0	; () banked
  8084  004F4E  239C               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8085  004F50  D000               	goto	l6114
  8086  004F52                     l6114:
  8087                           
  8088                           ; BSR set to: 0
  8089  004F52  0100               	movlb	0	; () banked
  8090  004F54  90D8               	bcf	status,0,c
  8091  004F56  3393               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8092  004F58  3392               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8093  004F5A  3391               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8094  004F5C  3390               	rrcf	___flmul@f1& (0+255),f,b
  8095                           
  8096                           ; BSR set to: 0
  8097  004F5E  0100               	movlb	0	; () banked
  8098  004F60  90D8               	bcf	status,0,c
  8099  004F62  339C               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
  8100  004F64  339B               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
  8101  004F66  339A               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
  8102  004F68  3399               	rrcf	___flmul@f3_as_product& (0+255),f,b
  8103                           
  8104                           ; BSR set to: 0
  8105  004F6A  0100               	movlb	0	; () banked
  8106  004F6C  2F9D               	decfsz	___flmul@cntr& (0+255),f,b
  8107  004F6E  D7DD               	goto	l6110
  8108  004F70  D000               	goto	l6120
  8109  004F72                     l6120:
  8110                           
  8111                           ; BSR set to: 0
  8112  004F72  C099  F077         	movff	___flmul@f3_as_product,___flpack@arg
  8113  004F76  C09A  F078         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  8114  004F7A  C09B  F079         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  8115  004F7E  C09C  F07A         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  8116  004F82  C098  F07B         	movff	___flmul@exp,___flpack@exp
  8117  004F86  C09E  F07C         	movff	___flmul@sign,___flpack@sign
  8118  004F8A  EC5F  F026         	call	___flpack	;wreg free
  8119  004F8E  C077  F090         	movff	?___flpack,?___flmul
  8120  004F92  C078  F091         	movff	?___flpack+1,?___flmul+1
  8121  004F96  C079  F092         	movff	?___flpack+2,?___flmul+2
  8122  004F9A  C07A  F093         	movff	?___flpack+3,?___flmul+3
  8123  004F9E  0012               	return	
  8124  004FA0  0012               	return		;funcret
  8125  004FA2                     __end_of___flmul:
  8126                           	opt stack 0
  8127                           tblptru	equ	0xFF8
  8128                           tblptrh	equ	0xFF7
  8129                           tblptrl	equ	0xFF6
  8130                           tablat	equ	0xFF5
  8131                           postinc0	equ	0xFEE
  8132                           wreg	equ	0xFE8
  8133                           postdec1	equ	0xFE5
  8134                           fsr1l	equ	0xFE1
  8135                           indf2	equ	0xFDF
  8136                           postinc2	equ	0xFDE
  8137                           postdec2	equ	0xFDD
  8138                           fsr2h	equ	0xFDA
  8139                           fsr2l	equ	0xFD9
  8140                           status	equ	0xFD8
  8141                           
  8142 ;; *************** function ___fladd *****************
  8143 ;; Defined at:
  8144 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  8145 ;; Parameters:    Size  Location     Type
  8146 ;;  f1              4   63[BANK0 ] unsigned char 
  8147 ;;  f2              4   67[BANK0 ] unsigned char 
  8148 ;; Auto vars:     Size  Location     Type
  8149 ;;  exp1            1   74[BANK0 ] unsigned char 
  8150 ;;  exp2            1   73[BANK0 ] unsigned char 
  8151 ;;  sign            1   72[BANK0 ] unsigned char 
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  4   63[BANK0 ] unsigned char 
  8154 ;; Registers used:
  8155 ;;		wreg, status,2, status,0, cstack
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8161 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;Total ram usage:       12 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    6
  8168 ;; This function calls:
  8169 ;;		___flpack
  8170 ;; This function is called by:
  8171 ;;		_park_routine
  8172 ;;		_parallelo
  8173 ;;		_matematica
  8174 ;;		_asin
  8175 ;;		_atan
  8176 ;;		_cos
  8177 ;;		_eval_poly
  8178 ;;		___flsub
  8179 ;;		_sin
  8180 ;;		_floor
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           	psect	text24
  8185  003FE0                     __ptext24:
  8186                           	opt stack 0
  8187  003FE0                     ___fladd:
  8188                           	opt stack 20
  8189                           
  8190                           ;incstack = 0
  8191  003FE0  0100               	movlb	0	; () banked
  8192  003FE2  35A1               	rlcf	(___fladd@f1+2)& (0+255),w,b
  8193  003FE4  35A2               	rlcf	(___fladd@f1+3)& (0+255),w,b
  8194  003FE6  0100               	movlb	0	; () banked
  8195  003FE8  6FAA               	movwf	___fladd@exp1& (0+255),b
  8196  003FEA  0100               	movlb	0	; () banked
  8197  003FEC  35A5               	rlcf	(___fladd@f2+2)& (0+255),w,b
  8198  003FEE  35A6               	rlcf	(___fladd@f2+3)& (0+255),w,b
  8199  003FF0  0100               	movlb	0	; () banked
  8200  003FF2  6FA9               	movwf	___fladd@exp2& (0+255),b
  8201  003FF4  0100               	movlb	0	; () banked
  8202  003FF6  51AA               	movf	___fladd@exp1& (0+255),w,b
  8203  003FF8  0100               	movlb	0	; () banked
  8204  003FFA  B4D8               	btfsc	status,2,c
  8205  003FFC  D011               	goto	l1148
  8206                           
  8207                           ; BSR set to: 0
  8208  003FFE  0100               	movlb	0	; () banked
  8209  004000  51A9               	movf	___fladd@exp2& (0+255),w,b
  8210  004002  0100               	movlb	0	; () banked
  8211  004004  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  8212  004006  B0D8               	btfsc	status,0,c
  8213  004008  D014               	goto	l6012
  8214                           
  8215                           ; BSR set to: 0
  8216  00400A  0100               	movlb	0	; () banked
  8217  00400C  51AA               	movf	___fladd@exp1& (0+255),w,b
  8218  00400E  0800               	sublw	0
  8219  004010  0100               	movlb	0	; () banked
  8220  004012  25A9               	addwf	___fladd@exp2& (0+255),w,b
  8221  004014  0100               	movlb	0	; () banked
  8222  004016  6FA7               	movwf	??___fladd& (0+255),b
  8223  004018  0E20               	movlw	32
  8224  00401A  0100               	movlb	0	; () banked
  8225  00401C  65A7               	cpfsgt	??___fladd& (0+255),b
  8226  00401E  D009               	goto	l6012
  8227  004020                     l1148:
  8228                           
  8229                           ; BSR set to: 0
  8230  004020  C0A3  F09F         	movff	___fladd@f2,?___fladd
  8231  004024  C0A4  F0A0         	movff	___fladd@f2+1,?___fladd+1
  8232  004028  C0A5  F0A1         	movff	___fladd@f2+2,?___fladd+2
  8233  00402C  C0A6  F0A2         	movff	___fladd@f2+3,?___fladd+3
  8234  004030  0012               	return	
  8235  004032                     l6012:
  8236                           
  8237                           ; BSR set to: 0
  8238  004032  0100               	movlb	0	; () banked
  8239  004034  51A9               	movf	___fladd@exp2& (0+255),w,b
  8240  004036  0100               	movlb	0	; () banked
  8241  004038  B4D8               	btfsc	status,2,c
  8242  00403A  D011               	goto	l1152
  8243                           
  8244                           ; BSR set to: 0
  8245  00403C  0100               	movlb	0	; () banked
  8246  00403E  51AA               	movf	___fladd@exp1& (0+255),w,b
  8247  004040  0100               	movlb	0	; () banked
  8248  004042  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  8249  004044  B0D8               	btfsc	status,0,c
  8250  004046  D014               	goto	l6018
  8251                           
  8252                           ; BSR set to: 0
  8253  004048  0100               	movlb	0	; () banked
  8254  00404A  51A9               	movf	___fladd@exp2& (0+255),w,b
  8255  00404C  0800               	sublw	0
  8256  00404E  0100               	movlb	0	; () banked
  8257  004050  25AA               	addwf	___fladd@exp1& (0+255),w,b
  8258  004052  0100               	movlb	0	; () banked
  8259  004054  6FA7               	movwf	??___fladd& (0+255),b
  8260  004056  0E20               	movlw	32
  8261  004058  0100               	movlb	0	; () banked
  8262  00405A  65A7               	cpfsgt	??___fladd& (0+255),b
  8263  00405C  D009               	goto	l6018
  8264  00405E                     l1152:
  8265                           
  8266                           ; BSR set to: 0
  8267  00405E  C09F  F09F         	movff	___fladd@f1,?___fladd
  8268  004062  C0A0  F0A0         	movff	___fladd@f1+1,?___fladd+1
  8269  004066  C0A1  F0A1         	movff	___fladd@f1+2,?___fladd+2
  8270  00406A  C0A2  F0A2         	movff	___fladd@f1+3,?___fladd+3
  8271  00406E  0012               	return	
  8272  004070                     l6018:
  8273                           
  8274                           ; BSR set to: 0
  8275  004070  0E06               	movlw	6
  8276  004072  0100               	movlb	0	; () banked
  8277  004074  6FA8               	movwf	___fladd@sign& (0+255),b
  8278                           
  8279                           ; BSR set to: 0
  8280  004076  0100               	movlb	0	; () banked
  8281  004078  AFA2               	btfss	(___fladd@f1+3)& (0+255),7,b
  8282  00407A  D003               	goto	l6024
  8283                           
  8284                           ; BSR set to: 0
  8285  00407C  0100               	movlb	0	; () banked
  8286  00407E  8FA8               	bsf	___fladd@sign& (0+255),7,b
  8287  004080  D000               	goto	l6024
  8288  004082                     l6024:
  8289                           
  8290                           ; BSR set to: 0
  8291  004082  0100               	movlb	0	; () banked
  8292  004084  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  8293  004086  D002               	goto	l1154
  8294                           
  8295                           ; BSR set to: 0
  8296  004088  0100               	movlb	0	; () banked
  8297  00408A  8DA8               	bsf	___fladd@sign& (0+255),6,b
  8298  00408C                     l1154:
  8299                           
  8300                           ; BSR set to: 0
  8301  00408C  0100               	movlb	0	; () banked
  8302  00408E  8FA1               	bsf	(___fladd@f1+2)& (0+255),7,b
  8303                           
  8304                           ; BSR set to: 0
  8305  004090  0EFF               	movlw	255
  8306  004092  0100               	movlb	0	; () banked
  8307  004094  179F               	andwf	___fladd@f1& (0+255),f,b
  8308  004096  0EFF               	movlw	255
  8309  004098  17A0               	andwf	(___fladd@f1+1)& (0+255),f,b
  8310  00409A  0EFF               	movlw	255
  8311  00409C  17A1               	andwf	(___fladd@f1+2)& (0+255),f,b
  8312  00409E  0E00               	movlw	0
  8313  0040A0  17A2               	andwf	(___fladd@f1+3)& (0+255),f,b
  8314                           
  8315                           ; BSR set to: 0
  8316  0040A2  0100               	movlb	0	; () banked
  8317  0040A4  8FA5               	bsf	(___fladd@f2+2)& (0+255),7,b
  8318  0040A6  0EFF               	movlw	255
  8319  0040A8  0100               	movlb	0	; () banked
  8320  0040AA  17A3               	andwf	___fladd@f2& (0+255),f,b
  8321  0040AC  0EFF               	movlw	255
  8322  0040AE  17A4               	andwf	(___fladd@f2+1)& (0+255),f,b
  8323  0040B0  0EFF               	movlw	255
  8324  0040B2  17A5               	andwf	(___fladd@f2+2)& (0+255),f,b
  8325  0040B4  0E00               	movlw	0
  8326  0040B6  17A6               	andwf	(___fladd@f2+3)& (0+255),f,b
  8327  0040B8  0100               	movlb	0	; () banked
  8328  0040BA  51A9               	movf	___fladd@exp2& (0+255),w,b
  8329  0040BC  0100               	movlb	0	; () banked
  8330  0040BE  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  8331  0040C0  B0D8               	btfsc	status,0,c
  8332  0040C2  D02A               	goto	l6042
  8333  0040C4                     l6032:
  8334                           
  8335                           ; BSR set to: 0
  8336  0040C4  0100               	movlb	0	; () banked
  8337  0040C6  90D8               	bcf	status,0,c
  8338  0040C8  37A3               	rlcf	___fladd@f2& (0+255),f,b
  8339  0040CA  37A4               	rlcf	(___fladd@f2+1)& (0+255),f,b
  8340  0040CC  37A5               	rlcf	(___fladd@f2+2)& (0+255),f,b
  8341  0040CE  37A6               	rlcf	(___fladd@f2+3)& (0+255),f,b
  8342  0040D0  0100               	movlb	0	; () banked
  8343  0040D2  07A9               	decf	___fladd@exp2& (0+255),f,b
  8344                           
  8345                           ; BSR set to: 0
  8346  0040D4  0100               	movlb	0	; () banked
  8347  0040D6  51AA               	movf	___fladd@exp1& (0+255),w,b
  8348  0040D8  0100               	movlb	0	; () banked
  8349  0040DA  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  8350  0040DC  B4D8               	btfsc	status,2,c
  8351  0040DE  D014               	goto	l6040
  8352                           
  8353                           ; BSR set to: 0
  8354  0040E0  0100               	movlb	0	; () banked
  8355  0040E2  07A8               	decf	___fladd@sign& (0+255),f,b
  8356  0040E4  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  8357  0040E8  0E07               	movlw	7
  8358  0040EA  0100               	movlb	0	; () banked
  8359  0040EC  17A7               	andwf	??___fladd& (0+255),f,b
  8360  0040EE  B4D8               	btfsc	status,2,c
  8361  0040F0  D00B               	goto	l6040
  8362  0040F2  D7E8               	goto	l6032
  8363                           
  8364                           ; BSR set to: 0
  8365                           
  8366                           ; BSR set to: 0
  8367  0040F4  D009               	goto	l6040
  8368  0040F6                     l6038:
  8369                           
  8370                           ; BSR set to: 0
  8371  0040F6  0100               	movlb	0	; () banked
  8372  0040F8  90D8               	bcf	status,0,c
  8373  0040FA  33A2               	rrcf	(___fladd@f1+3)& (0+255),f,b
  8374  0040FC  33A1               	rrcf	(___fladd@f1+2)& (0+255),f,b
  8375  0040FE  33A0               	rrcf	(___fladd@f1+1)& (0+255),f,b
  8376  004100  339F               	rrcf	___fladd@f1& (0+255),f,b
  8377  004102  0100               	movlb	0	; () banked
  8378  004104  2BAA               	incf	___fladd@exp1& (0+255),f,b
  8379  004106  D000               	goto	l6040
  8380  004108                     l6040:
  8381                           
  8382                           ; BSR set to: 0
  8383  004108  0100               	movlb	0	; () banked
  8384  00410A  51A9               	movf	___fladd@exp2& (0+255),w,b
  8385  00410C  0100               	movlb	0	; () banked
  8386  00410E  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  8387  004110  B4D8               	btfsc	status,2,c
  8388  004112  D032               	goto	l1163
  8389  004114  D7F0               	goto	l6038
  8390                           
  8391                           ; BSR set to: 0
  8392  004116  D030               	goto	l1163
  8393  004118                     l6042:
  8394                           
  8395                           ; BSR set to: 0
  8396  004118  0100               	movlb	0	; () banked
  8397  00411A  51AA               	movf	___fladd@exp1& (0+255),w,b
  8398  00411C  0100               	movlb	0	; () banked
  8399  00411E  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  8400  004120  B0D8               	btfsc	status,0,c
  8401  004122  D02A               	goto	l1163
  8402  004124                     l6044:
  8403                           
  8404                           ; BSR set to: 0
  8405  004124  0100               	movlb	0	; () banked
  8406  004126  90D8               	bcf	status,0,c
  8407  004128  379F               	rlcf	___fladd@f1& (0+255),f,b
  8408  00412A  37A0               	rlcf	(___fladd@f1+1)& (0+255),f,b
  8409  00412C  37A1               	rlcf	(___fladd@f1+2)& (0+255),f,b
  8410  00412E  37A2               	rlcf	(___fladd@f1+3)& (0+255),f,b
  8411  004130  0100               	movlb	0	; () banked
  8412  004132  07AA               	decf	___fladd@exp1& (0+255),f,b
  8413                           
  8414                           ; BSR set to: 0
  8415  004134  0100               	movlb	0	; () banked
  8416  004136  51AA               	movf	___fladd@exp1& (0+255),w,b
  8417  004138  0100               	movlb	0	; () banked
  8418  00413A  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  8419  00413C  B4D8               	btfsc	status,2,c
  8420  00413E  D014               	goto	l6052
  8421                           
  8422                           ; BSR set to: 0
  8423  004140  0100               	movlb	0	; () banked
  8424  004142  07A8               	decf	___fladd@sign& (0+255),f,b
  8425  004144  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  8426  004148  0E07               	movlw	7
  8427  00414A  0100               	movlb	0	; () banked
  8428  00414C  17A7               	andwf	??___fladd& (0+255),f,b
  8429  00414E  B4D8               	btfsc	status,2,c
  8430  004150  D00B               	goto	l6052
  8431  004152  D7E8               	goto	l6044
  8432                           
  8433                           ; BSR set to: 0
  8434                           
  8435                           ; BSR set to: 0
  8436  004154  D009               	goto	l6052
  8437  004156                     l6050:
  8438                           
  8439                           ; BSR set to: 0
  8440  004156  0100               	movlb	0	; () banked
  8441  004158  90D8               	bcf	status,0,c
  8442  00415A  33A6               	rrcf	(___fladd@f2+3)& (0+255),f,b
  8443  00415C  33A5               	rrcf	(___fladd@f2+2)& (0+255),f,b
  8444  00415E  33A4               	rrcf	(___fladd@f2+1)& (0+255),f,b
  8445  004160  33A3               	rrcf	___fladd@f2& (0+255),f,b
  8446  004162  0100               	movlb	0	; () banked
  8447  004164  2BA9               	incf	___fladd@exp2& (0+255),f,b
  8448  004166  D000               	goto	l6052
  8449  004168                     l6052:
  8450                           
  8451                           ; BSR set to: 0
  8452  004168  0100               	movlb	0	; () banked
  8453  00416A  51A9               	movf	___fladd@exp2& (0+255),w,b
  8454  00416C  0100               	movlb	0	; () banked
  8455  00416E  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  8456  004170  B4D8               	btfsc	status,2,c
  8457  004172  D002               	goto	l1163
  8458  004174  D7F0               	goto	l6050
  8459                           
  8460                           ; BSR set to: 0
  8461  004176  D000               	goto	l1163
  8462  004178                     l1163:
  8463                           
  8464                           ; BSR set to: 0
  8465  004178  0100               	movlb	0	; () banked
  8466  00417A  AFA8               	btfss	___fladd@sign& (0+255),7,b
  8467  00417C  D011               	goto	l6056
  8468                           
  8469                           ; BSR set to: 0
  8470  00417E  0EFF               	movlw	255
  8471  004180  0100               	movlb	0	; () banked
  8472  004182  1B9F               	xorwf	___fladd@f1& (0+255),f,b
  8473  004184  0EFF               	movlw	255
  8474  004186  1BA0               	xorwf	(___fladd@f1+1)& (0+255),f,b
  8475  004188  0EFF               	movlw	255
  8476  00418A  1BA1               	xorwf	(___fladd@f1+2)& (0+255),f,b
  8477  00418C  0EFF               	movlw	255
  8478  00418E  1BA2               	xorwf	(___fladd@f1+3)& (0+255),f,b
  8479  004190  0E01               	movlw	1
  8480  004192  0100               	movlb	0	; () banked
  8481  004194  279F               	addwf	___fladd@f1& (0+255),f,b
  8482  004196  0E00               	movlw	0
  8483  004198  23A0               	addwfc	(___fladd@f1+1)& (0+255),f,b
  8484  00419A  23A1               	addwfc	(___fladd@f1+2)& (0+255),f,b
  8485  00419C  23A2               	addwfc	(___fladd@f1+3)& (0+255),f,b
  8486  00419E  D000               	goto	l6056
  8487  0041A0                     l6056:
  8488                           
  8489                           ; BSR set to: 0
  8490  0041A0  0100               	movlb	0	; () banked
  8491  0041A2  ADA8               	btfss	___fladd@sign& (0+255),6,b
  8492  0041A4  D011               	goto	l6060
  8493                           
  8494                           ; BSR set to: 0
  8495  0041A6  0EFF               	movlw	255
  8496  0041A8  0100               	movlb	0	; () banked
  8497  0041AA  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  8498  0041AC  0EFF               	movlw	255
  8499  0041AE  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  8500  0041B0  0EFF               	movlw	255
  8501  0041B2  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  8502  0041B4  0EFF               	movlw	255
  8503  0041B6  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  8504  0041B8  0E01               	movlw	1
  8505  0041BA  0100               	movlb	0	; () banked
  8506  0041BC  27A3               	addwf	___fladd@f2& (0+255),f,b
  8507  0041BE  0E00               	movlw	0
  8508  0041C0  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8509  0041C2  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8510  0041C4  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8511  0041C6  D000               	goto	l6060
  8512  0041C8                     l6060:
  8513                           
  8514                           ; BSR set to: 0
  8515  0041C8  0E00               	movlw	0
  8516  0041CA  0100               	movlb	0	; () banked
  8517  0041CC  6FA8               	movwf	___fladd@sign& (0+255),b
  8518                           
  8519                           ; BSR set to: 0
  8520  0041CE  0100               	movlb	0	; () banked
  8521  0041D0  519F               	movf	___fladd@f1& (0+255),w,b
  8522  0041D2  0100               	movlb	0	; () banked
  8523  0041D4  27A3               	addwf	___fladd@f2& (0+255),f,b
  8524  0041D6  0100               	movlb	0	; () banked
  8525  0041D8  51A0               	movf	(___fladd@f1+1)& (0+255),w,b
  8526  0041DA  0100               	movlb	0	; () banked
  8527  0041DC  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8528  0041DE  0100               	movlb	0	; () banked
  8529  0041E0  51A1               	movf	(___fladd@f1+2)& (0+255),w,b
  8530  0041E2  0100               	movlb	0	; () banked
  8531  0041E4  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8532  0041E6  0100               	movlb	0	; () banked
  8533  0041E8  51A2               	movf	(___fladd@f1+3)& (0+255),w,b
  8534  0041EA  0100               	movlb	0	; () banked
  8535  0041EC  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8536                           
  8537                           ; BSR set to: 0
  8538  0041EE  0100               	movlb	0	; () banked
  8539  0041F0  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  8540  0041F2  D014               	goto	l6070
  8541                           
  8542                           ; BSR set to: 0
  8543  0041F4  0EFF               	movlw	255
  8544  0041F6  0100               	movlb	0	; () banked
  8545  0041F8  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  8546  0041FA  0EFF               	movlw	255
  8547  0041FC  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  8548  0041FE  0EFF               	movlw	255
  8549  004200  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  8550  004202  0EFF               	movlw	255
  8551  004204  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  8552  004206  0E01               	movlw	1
  8553  004208  0100               	movlb	0	; () banked
  8554  00420A  27A3               	addwf	___fladd@f2& (0+255),f,b
  8555  00420C  0E00               	movlw	0
  8556  00420E  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8557  004210  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8558  004212  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8559                           
  8560                           ; BSR set to: 0
  8561  004214  0E01               	movlw	1
  8562  004216  0100               	movlb	0	; () banked
  8563  004218  6FA8               	movwf	___fladd@sign& (0+255),b
  8564  00421A  D000               	goto	l6070
  8565  00421C                     l6070:
  8566                           
  8567                           ; BSR set to: 0
  8568  00421C  C0A3  F077         	movff	___fladd@f2,___flpack@arg
  8569  004220  C0A4  F078         	movff	___fladd@f2+1,___flpack@arg+1
  8570  004224  C0A5  F079         	movff	___fladd@f2+2,___flpack@arg+2
  8571  004228  C0A6  F07A         	movff	___fladd@f2+3,___flpack@arg+3
  8572  00422C  C0AA  F07B         	movff	___fladd@exp1,___flpack@exp
  8573  004230  C0A8  F07C         	movff	___fladd@sign,___flpack@sign
  8574  004234  EC5F  F026         	call	___flpack	;wreg free
  8575  004238  C077  F09F         	movff	?___flpack,?___fladd
  8576  00423C  C078  F0A0         	movff	?___flpack+1,?___fladd+1
  8577  004240  C079  F0A1         	movff	?___flpack+2,?___fladd+2
  8578  004244  C07A  F0A2         	movff	?___flpack+3,?___fladd+3
  8579  004248  0012               	return	
  8580  00424A  0012               	return		;funcret
  8581  00424C                     __end_of___fladd:
  8582                           	opt stack 0
  8583                           tblptru	equ	0xFF8
  8584                           tblptrh	equ	0xFF7
  8585                           tblptrl	equ	0xFF6
  8586                           tablat	equ	0xFF5
  8587                           postinc0	equ	0xFEE
  8588                           wreg	equ	0xFE8
  8589                           postdec1	equ	0xFE5
  8590                           fsr1l	equ	0xFE1
  8591                           indf2	equ	0xFDF
  8592                           postinc2	equ	0xFDE
  8593                           postdec2	equ	0xFDD
  8594                           fsr2h	equ	0xFDA
  8595                           fsr2l	equ	0xFD9
  8596                           status	equ	0xFD8
  8597                           
  8598 ;; *************** function ___flge *****************
  8599 ;; Defined at:
  8600 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;  ff1             4   83[BANK0 ] unsigned char 
  8603 ;;  ff2             4   87[BANK0 ] unsigned char 
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;		None
  8606 ;; Return value:  Size  Location     Type
  8607 ;;		None               void
  8608 ;; Registers used:
  8609 ;;		wreg, status,2, status,0
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8615 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;Total ram usage:       12 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    5
  8622 ;; This function calls:
  8623 ;;		Nothing
  8624 ;; This function is called by:
  8625 ;;		_parallelo
  8626 ;;		_asin
  8627 ;;		_atan
  8628 ;;		_cos
  8629 ;;		_sin
  8630 ;;		_sqrt
  8631 ;;		_floor
  8632 ;; This function uses a non-reentrant model
  8633 ;;
  8634                           
  8635                           	psect	text25
  8636  00553E                     __ptext25:
  8637                           	opt stack 0
  8638  00553E                     ___flge:
  8639                           	opt stack 22
  8640                           
  8641                           ;incstack = 0
  8642  00553E  0100               	movlb	0	; () banked
  8643  005540  AFB6               	btfss	(___flge@ff1+3)& (0+255),7,b
  8644  005542  D027               	goto	l6128
  8645                           
  8646                           ; BSR set to: 0
  8647  005544  C0B3  F0BB         	movff	___flge@ff1,??___flge
  8648  005548  C0B4  F0BC         	movff	___flge@ff1+1,??___flge+1
  8649  00554C  C0B5  F0BD         	movff	___flge@ff1+2,??___flge+2
  8650  005550  C0B6  F0BE         	movff	___flge@ff1+3,??___flge+3
  8651  005554  0100               	movlb	0	; () banked
  8652  005556  1FBB               	comf	??___flge& (0+255),f,b
  8653  005558  1FBC               	comf	(??___flge+1)& (0+255),f,b
  8654  00555A  1FBD               	comf	(??___flge+2)& (0+255),f,b
  8655  00555C  1FBE               	comf	(??___flge+3)& (0+255),f,b
  8656  00555E  2BBB               	incf	??___flge& (0+255),f,b
  8657  005560  0E00               	movlw	0
  8658  005562  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  8659  005564  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  8660  005566  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  8661  005568  0E00               	movlw	0
  8662  00556A  0100               	movlb	0	; () banked
  8663  00556C  25BB               	addwf	??___flge& (0+255),w,b
  8664  00556E  0100               	movlb	0	; () banked
  8665  005570  6FB3               	movwf	___flge@ff1& (0+255),b
  8666  005572  0E00               	movlw	0
  8667  005574  0100               	movlb	0	; () banked
  8668  005576  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  8669  005578  0100               	movlb	0	; () banked
  8670  00557A  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  8671  00557C  0E00               	movlw	0
  8672  00557E  0100               	movlb	0	; () banked
  8673  005580  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  8674  005582  0100               	movlb	0	; () banked
  8675  005584  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  8676  005586  0E80               	movlw	128
  8677  005588  0100               	movlb	0	; () banked
  8678  00558A  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  8679  00558C  0100               	movlb	0	; () banked
  8680  00558E  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  8681  005590  D000               	goto	l6128
  8682  005592                     l6128:
  8683                           
  8684                           ; BSR set to: 0
  8685  005592  0100               	movlb	0	; () banked
  8686  005594  AFBA               	btfss	(___flge@ff2+3)& (0+255),7,b
  8687  005596  D026               	goto	l1188
  8688                           
  8689                           ; BSR set to: 0
  8690  005598  C0B7  F0BB         	movff	___flge@ff2,??___flge
  8691  00559C  C0B8  F0BC         	movff	___flge@ff2+1,??___flge+1
  8692  0055A0  C0B9  F0BD         	movff	___flge@ff2+2,??___flge+2
  8693  0055A4  C0BA  F0BE         	movff	___flge@ff2+3,??___flge+3
  8694  0055A8  0100               	movlb	0	; () banked
  8695  0055AA  1FBB               	comf	??___flge& (0+255),f,b
  8696  0055AC  1FBC               	comf	(??___flge+1)& (0+255),f,b
  8697  0055AE  1FBD               	comf	(??___flge+2)& (0+255),f,b
  8698  0055B0  1FBE               	comf	(??___flge+3)& (0+255),f,b
  8699  0055B2  2BBB               	incf	??___flge& (0+255),f,b
  8700  0055B4  0E00               	movlw	0
  8701  0055B6  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  8702  0055B8  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  8703  0055BA  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  8704  0055BC  0E00               	movlw	0
  8705  0055BE  0100               	movlb	0	; () banked
  8706  0055C0  25BB               	addwf	??___flge& (0+255),w,b
  8707  0055C2  0100               	movlb	0	; () banked
  8708  0055C4  6FB7               	movwf	___flge@ff2& (0+255),b
  8709  0055C6  0E00               	movlw	0
  8710  0055C8  0100               	movlb	0	; () banked
  8711  0055CA  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  8712  0055CC  0100               	movlb	0	; () banked
  8713  0055CE  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  8714  0055D0  0E00               	movlw	0
  8715  0055D2  0100               	movlb	0	; () banked
  8716  0055D4  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  8717  0055D6  0100               	movlb	0	; () banked
  8718  0055D8  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  8719  0055DA  0E80               	movlw	128
  8720  0055DC  0100               	movlb	0	; () banked
  8721  0055DE  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  8722  0055E0  0100               	movlb	0	; () banked
  8723  0055E2  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  8724  0055E4                     l1188:
  8725                           
  8726                           ; BSR set to: 0
  8727  0055E4  0E00               	movlw	0
  8728  0055E6  0100               	movlb	0	; () banked
  8729  0055E8  1BB3               	xorwf	___flge@ff1& (0+255),f,b
  8730  0055EA  0E00               	movlw	0
  8731  0055EC  1BB4               	xorwf	(___flge@ff1+1)& (0+255),f,b
  8732  0055EE  0E00               	movlw	0
  8733  0055F0  1BB5               	xorwf	(___flge@ff1+2)& (0+255),f,b
  8734  0055F2  0E80               	movlw	128
  8735  0055F4  1BB6               	xorwf	(___flge@ff1+3)& (0+255),f,b
  8736  0055F6  0E00               	movlw	0
  8737  0055F8  0100               	movlb	0	; () banked
  8738  0055FA  1BB7               	xorwf	___flge@ff2& (0+255),f,b
  8739  0055FC  0E00               	movlw	0
  8740  0055FE  1BB8               	xorwf	(___flge@ff2+1)& (0+255),f,b
  8741  005600  0E00               	movlw	0
  8742  005602  1BB9               	xorwf	(___flge@ff2+2)& (0+255),f,b
  8743  005604  0E80               	movlw	128
  8744  005606  1BBA               	xorwf	(___flge@ff2+3)& (0+255),f,b
  8745  005608  0100               	movlb	0	; () banked
  8746  00560A  51B7               	movf	___flge@ff2& (0+255),w,b
  8747  00560C  0100               	movlb	0	; () banked
  8748  00560E  5DB3               	subwf	___flge@ff1& (0+255),w,b
  8749  005610  0100               	movlb	0	; () banked
  8750  005612  51B8               	movf	(___flge@ff2+1)& (0+255),w,b
  8751  005614  0100               	movlb	0	; () banked
  8752  005616  59B4               	subwfb	(___flge@ff1+1)& (0+255),w,b
  8753  005618  0100               	movlb	0	; () banked
  8754  00561A  51B9               	movf	(___flge@ff2+2)& (0+255),w,b
  8755  00561C  0100               	movlb	0	; () banked
  8756  00561E  59B5               	subwfb	(___flge@ff1+2)& (0+255),w,b
  8757  005620  0100               	movlb	0	; () banked
  8758  005622  51BA               	movf	(___flge@ff2+3)& (0+255),w,b
  8759  005624  0100               	movlb	0	; () banked
  8760  005626  59B6               	subwfb	(___flge@ff1+3)& (0+255),w,b
  8761  005628  B0D8               	btfsc	status,0,c
  8762  00562A  D002               	goto	l6134
  8763                           
  8764                           ; BSR set to: 0
  8765  00562C  90D8               	bcf	status,0,c
  8766  00562E  0012               	return	
  8767  005630                     l6134:
  8768                           
  8769                           ; BSR set to: 0
  8770  005630  80D8               	bsf	status,0,c
  8771                           
  8772                           ; BSR set to: 0
  8773  005632  0012               	return	
  8774                           
  8775                           ; BSR set to: 0
  8776                           
  8777                           ; BSR set to: 0
  8778  005634  0012               	return		;funcret
  8779  005636                     __end_of___flge:
  8780                           	opt stack 0
  8781                           tblptru	equ	0xFF8
  8782                           tblptrh	equ	0xFF7
  8783                           tblptrl	equ	0xFF6
  8784                           tablat	equ	0xFF5
  8785                           postinc0	equ	0xFEE
  8786                           wreg	equ	0xFE8
  8787                           postdec1	equ	0xFE5
  8788                           fsr1l	equ	0xFE1
  8789                           indf2	equ	0xFDF
  8790                           postinc2	equ	0xFDE
  8791                           postdec2	equ	0xFDD
  8792                           fsr2h	equ	0xFDA
  8793                           fsr2l	equ	0xFD9
  8794                           status	equ	0xFD8
  8795                           
  8796 ;; *************** function ___fldiv *****************
  8797 ;; Defined at:
  8798 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;  f1              4   33[BANK0 ] unsigned char 
  8801 ;;  f2              4   37[BANK0 ] unsigned char 
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;  f3              4   41[BANK0 ] unsigned char 
  8804 ;;  sign            1   47[BANK0 ] unsigned char 
  8805 ;;  exp             1   46[BANK0 ] unsigned char 
  8806 ;;  cntr            1   45[BANK0 ] unsigned char 
  8807 ;; Return value:  Size  Location     Type
  8808 ;;                  4   33[BANK0 ] unsigned char 
  8809 ;; Registers used:
  8810 ;;		wreg, status,2, status,0, cstack
  8811 ;; Tracked objects:
  8812 ;;		On entry : 0/0
  8813 ;;		On exit  : 0/0
  8814 ;;		Unchanged: 0/0
  8815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8816 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;Total ram usage:       15 bytes
  8821 ;; Hardware stack levels used:    1
  8822 ;; Hardware stack levels required when called:    6
  8823 ;; This function calls:
  8824 ;;		___flpack
  8825 ;; This function is called by:
  8826 ;;		_parallelo
  8827 ;;		_matematica
  8828 ;;		_asin
  8829 ;;		_atan
  8830 ;;		_sin
  8831 ;; This function uses a non-reentrant model
  8832 ;;
  8833                           
  8834                           	psect	text26
  8835  004FA2                     __ptext26:
  8836                           	opt stack 0
  8837  004FA2                     ___fldiv:
  8838                           	opt stack 20
  8839                           
  8840                           ; BSR set to: 0
  8841                           ;incstack = 0
  8842  004FA2  0100               	movlb	0	; () banked
  8843  004FA4  3583               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  8844  004FA6  3584               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  8845  004FA8  0100               	movlb	0	; () banked
  8846  004FAA  6F8E               	movwf	___fldiv@exp& (0+255),b
  8847  004FAC  0100               	movlb	0	; () banked
  8848  004FAE  518E               	movf	___fldiv@exp& (0+255),w,b
  8849  004FB0  A4D8               	btfss	status,2,c
  8850  004FB2  D00A               	goto	l6212
  8851                           
  8852                           ; BSR set to: 0
  8853  004FB4  0E00               	movlw	0
  8854  004FB6  0100               	movlb	0	; () banked
  8855  004FB8  6F81               	movwf	?___fldiv& (0+255),b
  8856  004FBA  0E00               	movlw	0
  8857  004FBC  6F82               	movwf	(?___fldiv+1)& (0+255),b
  8858  004FBE  0E00               	movlw	0
  8859  004FC0  6F83               	movwf	(?___fldiv+2)& (0+255),b
  8860  004FC2  0E00               	movlw	0
  8861  004FC4  6F84               	movwf	(?___fldiv+3)& (0+255),b
  8862                           
  8863                           ; BSR set to: 0
  8864  004FC6  0012               	return	
  8865  004FC8                     l6212:
  8866                           
  8867                           ; BSR set to: 0
  8868  004FC8  0100               	movlb	0	; () banked
  8869  004FCA  3587               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  8870  004FCC  3588               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  8871  004FCE  0100               	movlb	0	; () banked
  8872  004FD0  6F8F               	movwf	___fldiv@sign& (0+255),b
  8873  004FD2  0100               	movlb	0	; () banked
  8874  004FD4  518F               	movf	___fldiv@sign& (0+255),w,b
  8875  004FD6  A4D8               	btfss	status,2,c
  8876  004FD8  D00A               	goto	l6218
  8877                           
  8878                           ; BSR set to: 0
  8879  004FDA  0E00               	movlw	0
  8880  004FDC  0100               	movlb	0	; () banked
  8881  004FDE  6F81               	movwf	?___fldiv& (0+255),b
  8882  004FE0  0E00               	movlw	0
  8883  004FE2  6F82               	movwf	(?___fldiv+1)& (0+255),b
  8884  004FE4  0E00               	movlw	0
  8885  004FE6  6F83               	movwf	(?___fldiv+2)& (0+255),b
  8886  004FE8  0E00               	movlw	0
  8887  004FEA  6F84               	movwf	(?___fldiv+3)& (0+255),b
  8888                           
  8889                           ; BSR set to: 0
  8890  004FEC  0012               	return	
  8891  004FEE                     l6218:
  8892                           
  8893                           ; BSR set to: 0
  8894  004FEE  0100               	movlb	0	; () banked
  8895  004FF0  518F               	movf	___fldiv@sign& (0+255),w,b
  8896  004FF2  0F89               	addlw	137
  8897  004FF4  0100               	movlb	0	; () banked
  8898  004FF6  5F8E               	subwf	___fldiv@exp& (0+255),f,b
  8899                           
  8900                           ; BSR set to: 0
  8901  004FF8  C084  F08F         	movff	___fldiv@f1+3,___fldiv@sign
  8902  004FFC  0100               	movlb	0	; () banked
  8903  004FFE  5188               	movf	(___fldiv@f2+3)& (0+255),w,b
  8904  005000  0100               	movlb	0	; () banked
  8905  005002  1B8F               	xorwf	___fldiv@sign& (0+255),f,b
  8906  005004  0E80               	movlw	128
  8907  005006  0100               	movlb	0	; () banked
  8908  005008  178F               	andwf	___fldiv@sign& (0+255),f,b
  8909                           
  8910                           ; BSR set to: 0
  8911  00500A  0100               	movlb	0	; () banked
  8912  00500C  8F83               	bsf	(___fldiv@f1+2)& (0+255),7,b
  8913                           
  8914                           ; BSR set to: 0
  8915  00500E  0EFF               	movlw	255
  8916  005010  0100               	movlb	0	; () banked
  8917  005012  1781               	andwf	___fldiv@f1& (0+255),f,b
  8918  005014  0EFF               	movlw	255
  8919  005016  1782               	andwf	(___fldiv@f1+1)& (0+255),f,b
  8920  005018  0EFF               	movlw	255
  8921  00501A  1783               	andwf	(___fldiv@f1+2)& (0+255),f,b
  8922  00501C  0E00               	movlw	0
  8923  00501E  1784               	andwf	(___fldiv@f1+3)& (0+255),f,b
  8924  005020  0100               	movlb	0	; () banked
  8925  005022  8F87               	bsf	(___fldiv@f2+2)& (0+255),7,b
  8926                           
  8927                           ; BSR set to: 0
  8928  005024  0EFF               	movlw	255
  8929  005026  0100               	movlb	0	; () banked
  8930  005028  1785               	andwf	___fldiv@f2& (0+255),f,b
  8931  00502A  0EFF               	movlw	255
  8932  00502C  1786               	andwf	(___fldiv@f2+1)& (0+255),f,b
  8933  00502E  0EFF               	movlw	255
  8934  005030  1787               	andwf	(___fldiv@f2+2)& (0+255),f,b
  8935  005032  0E00               	movlw	0
  8936  005034  1788               	andwf	(___fldiv@f2+3)& (0+255),f,b
  8937                           
  8938                           ; BSR set to: 0
  8939  005036  0E20               	movlw	32
  8940  005038  0100               	movlb	0	; () banked
  8941  00503A  6F8D               	movwf	___fldiv@cntr& (0+255),b
  8942  00503C  D000               	goto	l6230
  8943  00503E                     l6230:
  8944                           
  8945                           ; BSR set to: 0
  8946  00503E  0100               	movlb	0	; () banked
  8947  005040  90D8               	bcf	status,0,c
  8948  005042  3789               	rlcf	___fldiv@f3& (0+255),f,b
  8949  005044  378A               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  8950  005046  378B               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  8951  005048  378C               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  8952                           
  8953                           ; BSR set to: 0
  8954  00504A  0100               	movlb	0	; () banked
  8955  00504C  5185               	movf	___fldiv@f2& (0+255),w,b
  8956  00504E  0100               	movlb	0	; () banked
  8957  005050  5D81               	subwf	___fldiv@f1& (0+255),w,b
  8958  005052  0100               	movlb	0	; () banked
  8959  005054  5186               	movf	(___fldiv@f2+1)& (0+255),w,b
  8960  005056  0100               	movlb	0	; () banked
  8961  005058  5982               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  8962  00505A  0100               	movlb	0	; () banked
  8963  00505C  5187               	movf	(___fldiv@f2+2)& (0+255),w,b
  8964  00505E  0100               	movlb	0	; () banked
  8965  005060  5983               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  8966  005062  0100               	movlb	0	; () banked
  8967  005064  5188               	movf	(___fldiv@f2+3)& (0+255),w,b
  8968  005066  0100               	movlb	0	; () banked
  8969  005068  5984               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  8970  00506A  A0D8               	btfss	status,0,c
  8971  00506C  D013               	goto	l6238
  8972                           
  8973                           ; BSR set to: 0
  8974  00506E  0100               	movlb	0	; () banked
  8975  005070  5185               	movf	___fldiv@f2& (0+255),w,b
  8976  005072  0100               	movlb	0	; () banked
  8977  005074  5F81               	subwf	___fldiv@f1& (0+255),f,b
  8978  005076  0100               	movlb	0	; () banked
  8979  005078  5186               	movf	(___fldiv@f2+1)& (0+255),w,b
  8980  00507A  0100               	movlb	0	; () banked
  8981  00507C  5B82               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  8982  00507E  0100               	movlb	0	; () banked
  8983  005080  5187               	movf	(___fldiv@f2+2)& (0+255),w,b
  8984  005082  0100               	movlb	0	; () banked
  8985  005084  5B83               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  8986  005086  0100               	movlb	0	; () banked
  8987  005088  5188               	movf	(___fldiv@f2+3)& (0+255),w,b
  8988  00508A  0100               	movlb	0	; () banked
  8989  00508C  5B84               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  8990                           
  8991                           ; BSR set to: 0
  8992  00508E  0100               	movlb	0	; () banked
  8993  005090  8189               	bsf	___fldiv@f3& (0+255),0,b
  8994  005092  D000               	goto	l6238
  8995  005094                     l6238:
  8996                           
  8997                           ; BSR set to: 0
  8998  005094  0100               	movlb	0	; () banked
  8999  005096  90D8               	bcf	status,0,c
  9000  005098  3781               	rlcf	___fldiv@f1& (0+255),f,b
  9001  00509A  3782               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  9002  00509C  3783               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  9003  00509E  3784               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  9004                           
  9005                           ; BSR set to: 0
  9006  0050A0  0100               	movlb	0	; () banked
  9007  0050A2  2F8D               	decfsz	___fldiv@cntr& (0+255),f,b
  9008  0050A4  D7CC               	goto	l6230
  9009  0050A6  D000               	goto	l6242
  9010  0050A8                     l6242:
  9011                           
  9012                           ; BSR set to: 0
  9013  0050A8  C089  F077         	movff	___fldiv@f3,___flpack@arg
  9014  0050AC  C08A  F078         	movff	___fldiv@f3+1,___flpack@arg+1
  9015  0050B0  C08B  F079         	movff	___fldiv@f3+2,___flpack@arg+2
  9016  0050B4  C08C  F07A         	movff	___fldiv@f3+3,___flpack@arg+3
  9017  0050B8  C08E  F07B         	movff	___fldiv@exp,___flpack@exp
  9018  0050BC  C08F  F07C         	movff	___fldiv@sign,___flpack@sign
  9019  0050C0  EC5F  F026         	call	___flpack	;wreg free
  9020  0050C4  C077  F081         	movff	?___flpack,?___fldiv
  9021  0050C8  C078  F082         	movff	?___flpack+1,?___fldiv+1
  9022  0050CC  C079  F083         	movff	?___flpack+2,?___fldiv+2
  9023  0050D0  C07A  F084         	movff	?___flpack+3,?___fldiv+3
  9024  0050D4  0012               	return	
  9025  0050D6  0012               	return		;funcret
  9026  0050D8                     __end_of___fldiv:
  9027                           	opt stack 0
  9028                           tblptru	equ	0xFF8
  9029                           tblptrh	equ	0xFF7
  9030                           tblptrl	equ	0xFF6
  9031                           tablat	equ	0xFF5
  9032                           postinc0	equ	0xFEE
  9033                           wreg	equ	0xFE8
  9034                           postdec1	equ	0xFE5
  9035                           fsr1l	equ	0xFE1
  9036                           indf2	equ	0xFDF
  9037                           postinc2	equ	0xFDE
  9038                           postdec2	equ	0xFDD
  9039                           fsr2h	equ	0xFDA
  9040                           fsr2l	equ	0xFD9
  9041                           status	equ	0xFD8
  9042                           
  9043 ;; *************** function _delay_s *****************
  9044 ;; Defined at:
  9045 ;;		line 102 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  9046 ;; Parameters:    Size  Location     Type
  9047 ;;  value_s         1    wreg     unsigned char 
  9048 ;; Auto vars:     Size  Location     Type
  9049 ;;  value_s         1   31[BANK0 ] unsigned char 
  9050 ;;  repeat_loop     1   32[BANK0 ] unsigned char 
  9051 ;; Return value:  Size  Location     Type
  9052 ;;		None               void
  9053 ;; Registers used:
  9054 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9055 ;; Tracked objects:
  9056 ;;		On entry : 0/0
  9057 ;;		On exit  : 0/0
  9058 ;;		Unchanged: 0/0
  9059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;Total ram usage:        2 bytes
  9065 ;; Hardware stack levels used:    1
  9066 ;; Hardware stack levels required when called:    7
  9067 ;; This function calls:
  9068 ;;		_delay_ms
  9069 ;; This function is called by:
  9070 ;;		_park_routine
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           	psect	text27
  9075  005D48                     __ptext27:
  9076                           	opt stack 0
  9077  005D48                     _delay_s:
  9078                           	opt stack 22
  9079                           
  9080                           ;incstack = 0
  9081                           ;delay_s@value_s stored from wreg
  9082  005D48  0100               	movlb	0	; () banked
  9083  005D4A  6F7F               	movwf	delay_s@value_s& (0+255),b
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;src\delay.c: 104: unsigned char repeat_loop;
  9087                           ;src\delay.c: 106: for (repeat_loop = 0; repeat_loop < value_s; repeat_loop++)
  9088  005D4C  0E00               	movlw	0
  9089  005D4E  0100               	movlb	0	; () banked
  9090  005D50  6F80               	movwf	delay_s@repeat_loop& (0+255),b
  9091  005D52  D00A               	goto	l5022
  9092  005D54                     l5018:
  9093                           
  9094                           ; BSR set to: 0
  9095                           ;src\delay.c: 107: delay_ms (1000);
  9096  005D54  0E03               	movlw	3
  9097  005D56  0100               	movlb	0	; () banked
  9098  005D58  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  9099  005D5A  0EE8               	movlw	232
  9100  005D5C  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  9101  005D5E  EC36  F02E         	call	_delay_ms	;wreg free
  9102  005D62  0100               	movlb	0	; () banked
  9103  005D64  2B80               	incf	delay_s@repeat_loop& (0+255),f,b
  9104  005D66  D000               	goto	l5022
  9105  005D68                     l5022:
  9106                           
  9107                           ; BSR set to: 0
  9108  005D68  0100               	movlb	0	; () banked
  9109  005D6A  517F               	movf	delay_s@value_s& (0+255),w,b
  9110  005D6C  0100               	movlb	0	; () banked
  9111  005D6E  5D80               	subwf	delay_s@repeat_loop& (0+255),w,b
  9112  005D70  A0D8               	btfss	status,0,c
  9113  005D72  D7F0               	goto	l5018
  9114                           
  9115                           ; BSR set to: 0
  9116                           
  9117                           ; BSR set to: 0
  9118  005D74  0012               	return		;funcret
  9119  005D76                     __end_of_delay_s:
  9120                           	opt stack 0
  9121                           tblptru	equ	0xFF8
  9122                           tblptrh	equ	0xFF7
  9123                           tblptrl	equ	0xFF6
  9124                           tablat	equ	0xFF5
  9125                           postinc0	equ	0xFEE
  9126                           wreg	equ	0xFE8
  9127                           postdec1	equ	0xFE5
  9128                           fsr1l	equ	0xFE1
  9129                           indf2	equ	0xFDF
  9130                           postinc2	equ	0xFDE
  9131                           postdec2	equ	0xFDD
  9132                           fsr2h	equ	0xFDA
  9133                           fsr2l	equ	0xFD9
  9134                           status	equ	0xFD8
  9135                           
  9136 ;; *************** function _delay_ms *****************
  9137 ;; Defined at:
  9138 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;  value_ms        2   29[BANK0 ] unsigned int 
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;		None
  9143 ;; Return value:  Size  Location     Type
  9144 ;;		None               void
  9145 ;; Registers used:
  9146 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9152 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9156 ;;Total ram usage:        2 bytes
  9157 ;; Hardware stack levels used:    1
  9158 ;; Hardware stack levels required when called:    6
  9159 ;; This function calls:
  9160 ;;		___wmul
  9161 ;; This function is called by:
  9162 ;;		_delay_s
  9163 ;;		_main
  9164 ;;		_park_routine
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           	psect	text28
  9169  005C6C                     __ptext28:
  9170                           	opt stack 0
  9171  005C6C                     _delay_ms:
  9172                           	opt stack 22
  9173                           
  9174                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
  9175                           
  9176                           ; BSR set to: 0
  9177                           ;incstack = 0
  9178  005C6C  C0E7  F077         	movff	_delay_quartz_frequency_value,___wmul@multiplier	;volatile
  9179  005C70  0100               	movlb	0	; () banked
  9180  005C72  6B78               	clrf	(___wmul@multiplier+1)& (0+255),b
  9181  005C74  C07D  F079         	movff	delay_ms@value_ms,___wmul@multiplicand
  9182  005C78  C07E  F07A         	movff	delay_ms@value_ms+1,___wmul@multiplicand+1
  9183  005C7C  EC53  F02E         	call	___wmul	;wreg free
  9184  005C80  C077  F0E1         	movff	?___wmul,_clock_counter_reference	;volatile
  9185  005C84  C078  F0E2         	movff	?___wmul+1,_clock_counter_reference+1	;volatile
  9186                           
  9187                           ;src\delay.c: 75: while (clock_counter_reference) {
  9188  005C88  D007               	goto	l569
  9189  005C8A                     l4864:
  9190                           
  9191                           ;src\delay.c: 85: _delay(240);
  9192  005C8A  0E50               	movlw	80
  9193  005C8C                     u8457:
  9194  005C8C  2EE8               	decfsz	wreg,f,c
  9195  005C8E  D7FE               	goto	u8457
  9196                           
  9197                           ;src\delay.c: 88: clock_counter_reference--;
  9198  005C90  0100               	movlb	0	; () banked
  9199  005C92  07E1               	decf	_clock_counter_reference& (0+255),f,b	;volatile
  9200  005C94  A0D8               	btfss	status,0,c
  9201  005C96  07E2               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
  9202  005C98                     l569:
  9203  005C98  0100               	movlb	0	; () banked
  9204  005C9A  51E1               	movf	_clock_counter_reference& (0+255),w,b	;volatile
  9205  005C9C  0100               	movlb	0	; () banked
  9206  005C9E  11E2               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
  9207  005CA0  A4D8               	btfss	status,2,c
  9208  005CA2  D7F3               	goto	l4864
  9209                           
  9210                           ; BSR set to: 0
  9211                           
  9212                           ; BSR set to: 0
  9213  005CA4  0012               	return		;funcret
  9214  005CA6                     __end_of_delay_ms:
  9215                           	opt stack 0
  9216                           tblptru	equ	0xFF8
  9217                           tblptrh	equ	0xFF7
  9218                           tblptrl	equ	0xFF6
  9219                           tablat	equ	0xFF5
  9220                           postinc0	equ	0xFEE
  9221                           wreg	equ	0xFE8
  9222                           postdec1	equ	0xFE5
  9223                           fsr1l	equ	0xFE1
  9224                           indf2	equ	0xFDF
  9225                           postinc2	equ	0xFDE
  9226                           postdec2	equ	0xFDD
  9227                           fsr2h	equ	0xFDA
  9228                           fsr2l	equ	0xFD9
  9229                           status	equ	0xFD8
  9230                           
  9231 ;; *************** function ___wmul *****************
  9232 ;; Defined at:
  9233 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;  multiplier      2   23[BANK0 ] unsigned int 
  9236 ;;  multiplicand    2   25[BANK0 ] unsigned int 
  9237 ;; Auto vars:     Size  Location     Type
  9238 ;;  product         2   27[BANK0 ] unsigned int 
  9239 ;; Return value:  Size  Location     Type
  9240 ;;                  2   23[BANK0 ] unsigned int 
  9241 ;; Registers used:
  9242 ;;		wreg, status,2, status,0, prodl, prodh
  9243 ;; Tracked objects:
  9244 ;;		On entry : 0/0
  9245 ;;		On exit  : 0/0
  9246 ;;		Unchanged: 0/0
  9247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9248 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9251 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9252 ;;Total ram usage:        6 bytes
  9253 ;; Hardware stack levels used:    1
  9254 ;; Hardware stack levels required when called:    5
  9255 ;; This function calls:
  9256 ;;		Nothing
  9257 ;; This function is called by:
  9258 ;;		_delay_ms
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           	psect	text29
  9263  005CA6                     __ptext29:
  9264                           	opt stack 0
  9265  005CA6                     ___wmul:
  9266                           	opt stack 22
  9267                           
  9268                           ; BSR set to: 0
  9269                           ;incstack = 0
  9270  005CA6  0100               	movlb	0	; () banked
  9271  005CA8  5177               	movf	___wmul@multiplier& (0+255),w,b
  9272  005CAA  0100               	movlb	0	; () banked
  9273  005CAC  0379               	mulwf	___wmul@multiplicand& (0+255),b
  9274  005CAE  CFF3 F07B          	movff	prodl,___wmul@product
  9275  005CB2  CFF4 F07C          	movff	prodh,___wmul@product+1
  9276  005CB6  0100               	movlb	0	; () banked
  9277  005CB8  5177               	movf	___wmul@multiplier& (0+255),w,b
  9278  005CBA  0100               	movlb	0	; () banked
  9279  005CBC  037A               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9280  005CBE  50F3               	movf	prodl,w,c
  9281  005CC0  0100               	movlb	0	; () banked
  9282  005CC2  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  9283  005CC4  0100               	movlb	0	; () banked
  9284  005CC6  5178               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9285  005CC8  0100               	movlb	0	; () banked
  9286  005CCA  0379               	mulwf	___wmul@multiplicand& (0+255),b
  9287  005CCC  50F3               	movf	prodl,w,c
  9288  005CCE  0100               	movlb	0	; () banked
  9289  005CD0  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  9290                           
  9291                           ; BSR set to: 0
  9292  005CD2  C07B  F077         	movff	___wmul@product,?___wmul
  9293  005CD6  C07C  F078         	movff	___wmul@product+1,?___wmul+1
  9294  005CDA  0012               	return	
  9295                           
  9296                           ; BSR set to: 0
  9297                           
  9298                           ; BSR set to: 0
  9299  005CDC  0012               	return		;funcret
  9300  005CDE                     __end_of___wmul:
  9301                           	opt stack 0
  9302                           tblptru	equ	0xFF8
  9303                           tblptrh	equ	0xFF7
  9304                           tblptrl	equ	0xFF6
  9305                           tablat	equ	0xFF5
  9306                           prodh	equ	0xFF4
  9307                           prodl	equ	0xFF3
  9308                           postinc0	equ	0xFEE
  9309                           wreg	equ	0xFE8
  9310                           postdec1	equ	0xFE5
  9311                           fsr1l	equ	0xFE1
  9312                           indf2	equ	0xFDF
  9313                           postinc2	equ	0xFDE
  9314                           postdec2	equ	0xFDD
  9315                           fsr2h	equ	0xFDA
  9316                           fsr2l	equ	0xFD9
  9317                           status	equ	0xFD8
  9318                           
  9319 ;; *************** function ___lwtofl *****************
  9320 ;; Defined at:
  9321 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  9322 ;; Parameters:    Size  Location     Type
  9323 ;;  c               2   33[BANK0 ] unsigned int 
  9324 ;; Auto vars:     Size  Location     Type
  9325 ;;		None
  9326 ;; Return value:  Size  Location     Type
  9327 ;;                  4   33[BANK0 ] unsigned int 
  9328 ;; Registers used:
  9329 ;;		wreg, status,2, status,0, cstack
  9330 ;; Tracked objects:
  9331 ;;		On entry : 0/0
  9332 ;;		On exit  : 0/0
  9333 ;;		Unchanged: 0/0
  9334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9335 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9338 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;Total ram usage:        4 bytes
  9340 ;; Hardware stack levels used:    1
  9341 ;; Hardware stack levels required when called:    6
  9342 ;; This function calls:
  9343 ;;		___flpack
  9344 ;; This function is called by:
  9345 ;;		_park_routine
  9346 ;; This function uses a non-reentrant model
  9347 ;;
  9348                           
  9349                           	psect	text30
  9350  005D16                     __ptext30:
  9351                           	opt stack 0
  9352  005D16                     ___lwtofl:
  9353                           	opt stack 23
  9354                           
  9355                           ; BSR set to: 0
  9356                           ;incstack = 0
  9357  005D16  C081  F077         	movff	___lwtofl@c,___flpack@arg
  9358  005D1A  C082  F078         	movff	___lwtofl@c+1,___flpack@arg+1
  9359  005D1E  0100               	movlb	0	; () banked
  9360  005D20  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  9361  005D22  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  9362  005D24  0E96               	movlw	150
  9363  005D26  0100               	movlb	0	; () banked
  9364  005D28  6F7B               	movwf	___flpack@exp& (0+255),b
  9365  005D2A  0E00               	movlw	0
  9366  005D2C  0100               	movlb	0	; () banked
  9367  005D2E  6F7C               	movwf	___flpack@sign& (0+255),b
  9368  005D30  EC5F  F026         	call	___flpack	;wreg free
  9369  005D34  C077  F081         	movff	?___flpack,?___lwtofl
  9370  005D38  C078  F082         	movff	?___flpack+1,?___lwtofl+1
  9371  005D3C  C079  F083         	movff	?___flpack+2,?___lwtofl+2
  9372  005D40  C07A  F084         	movff	?___flpack+3,?___lwtofl+3
  9373  005D44  0012               	return	
  9374  005D46  0012               	return		;funcret
  9375  005D48                     __end_of___lwtofl:
  9376                           	opt stack 0
  9377                           tblptru	equ	0xFF8
  9378                           tblptrh	equ	0xFF7
  9379                           tblptrl	equ	0xFF6
  9380                           tablat	equ	0xFF5
  9381                           prodh	equ	0xFF4
  9382                           prodl	equ	0xFF3
  9383                           postinc0	equ	0xFEE
  9384                           wreg	equ	0xFE8
  9385                           postdec1	equ	0xFE5
  9386                           fsr1l	equ	0xFE1
  9387                           indf2	equ	0xFDF
  9388                           postinc2	equ	0xFDE
  9389                           postdec2	equ	0xFDD
  9390                           fsr2h	equ	0xFDA
  9391                           fsr2l	equ	0xFD9
  9392                           status	equ	0xFD8
  9393                           
  9394 ;; *************** function ___flpack *****************
  9395 ;; Defined at:
  9396 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  9397 ;; Parameters:    Size  Location     Type
  9398 ;;  arg             4   23[BANK0 ] unsigned long 
  9399 ;;  exp             1   27[BANK0 ] unsigned char 
  9400 ;;  sign            1   28[BANK0 ] unsigned char 
  9401 ;; Auto vars:     Size  Location     Type
  9402 ;;		None
  9403 ;; Return value:  Size  Location     Type
  9404 ;;                  4   23[BANK0 ] unsigned char 
  9405 ;; Registers used:
  9406 ;;		wreg, status,2, status,0
  9407 ;; Tracked objects:
  9408 ;;		On entry : 0/0
  9409 ;;		On exit  : 0/0
  9410 ;;		Unchanged: 0/0
  9411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9412 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;Total ram usage:       10 bytes
  9417 ;; Hardware stack levels used:    1
  9418 ;; Hardware stack levels required when called:    5
  9419 ;; This function calls:
  9420 ;;		Nothing
  9421 ;; This function is called by:
  9422 ;;		___altofl
  9423 ;;		___awtofl
  9424 ;;		___fladd
  9425 ;;		___fldiv
  9426 ;;		___flmul
  9427 ;;		___lwtofl
  9428 ;; This function uses a non-reentrant model
  9429 ;;
  9430                           
  9431                           	psect	text31
  9432  004CBE                     __ptext31:
  9433                           	opt stack 0
  9434  004CBE                     ___flpack:
  9435                           	opt stack 20
  9436                           
  9437                           ;incstack = 0
  9438  004CBE  0100               	movlb	0	; () banked
  9439  004CC0  517B               	movf	___flpack@exp& (0+255),w,b
  9440  004CC2  0100               	movlb	0	; () banked
  9441  004CC4  B4D8               	btfsc	status,2,c
  9442  004CC6  D00A               	goto	l5964
  9443                           
  9444                           ; BSR set to: 0
  9445  004CC8  0100               	movlb	0	; () banked
  9446  004CCA  5177               	movf	___flpack@arg& (0+255),w,b
  9447  004CCC  0100               	movlb	0	; () banked
  9448  004CCE  1178               	iorwf	(___flpack@arg+1)& (0+255),w,b
  9449  004CD0  0100               	movlb	0	; () banked
  9450  004CD2  1179               	iorwf	(___flpack@arg+2)& (0+255),w,b
  9451  004CD4  0100               	movlb	0	; () banked
  9452  004CD6  117A               	iorwf	(___flpack@arg+3)& (0+255),w,b
  9453  004CD8  A4D8               	btfss	status,2,c
  9454  004CDA  D014               	goto	l5970
  9455  004CDC                     l5964:
  9456                           
  9457                           ; BSR set to: 0
  9458  004CDC  0E00               	movlw	0
  9459  004CDE  0100               	movlb	0	; () banked
  9460  004CE0  6F77               	movwf	?___flpack& (0+255),b
  9461  004CE2  0E00               	movlw	0
  9462  004CE4  6F78               	movwf	(?___flpack+1)& (0+255),b
  9463  004CE6  0E00               	movlw	0
  9464  004CE8  6F79               	movwf	(?___flpack+2)& (0+255),b
  9465  004CEA  0E00               	movlw	0
  9466  004CEC  6F7A               	movwf	(?___flpack+3)& (0+255),b
  9467                           
  9468                           ; BSR set to: 0
  9469  004CEE  0012               	return	
  9470                           
  9471                           ; BSR set to: 0
  9472  004CF0  D009               	goto	l5970
  9473  004CF2                     l5968:
  9474                           
  9475                           ; BSR set to: 0
  9476  004CF2  0100               	movlb	0	; () banked
  9477  004CF4  2B7B               	incf	___flpack@exp& (0+255),f,b
  9478  004CF6  0100               	movlb	0	; () banked
  9479  004CF8  90D8               	bcf	status,0,c
  9480  004CFA  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
  9481  004CFC  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
  9482  004CFE  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
  9483  004D00  3377               	rrcf	___flpack@arg& (0+255),f,b
  9484  004D02  D000               	goto	l5970
  9485  004D04                     l5970:
  9486                           
  9487                           ; BSR set to: 0
  9488  004D04  0E00               	movlw	0
  9489  004D06  0100               	movlb	0	; () banked
  9490  004D08  1577               	andwf	___flpack@arg& (0+255),w,b
  9491  004D0A  0100               	movlb	0	; () banked
  9492  004D0C  6F7D               	movwf	??___flpack& (0+255),b
  9493  004D0E  0E00               	movlw	0
  9494  004D10  0100               	movlb	0	; () banked
  9495  004D12  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
  9496  004D14  0100               	movlb	0	; () banked
  9497  004D16  6F7E               	movwf	(??___flpack+1)& (0+255),b
  9498  004D18  0E00               	movlw	0
  9499  004D1A  0100               	movlb	0	; () banked
  9500  004D1C  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
  9501  004D1E  0100               	movlb	0	; () banked
  9502  004D20  6F7F               	movwf	(??___flpack+2)& (0+255),b
  9503  004D22  0EFE               	movlw	254
  9504  004D24  0100               	movlb	0	; () banked
  9505  004D26  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
  9506  004D28  0100               	movlb	0	; () banked
  9507  004D2A  6F80               	movwf	(??___flpack+3)& (0+255),b
  9508  004D2C  0100               	movlb	0	; () banked
  9509  004D2E  517D               	movf	??___flpack& (0+255),w,b
  9510  004D30  0100               	movlb	0	; () banked
  9511  004D32  117E               	iorwf	(??___flpack+1)& (0+255),w,b
  9512  004D34  0100               	movlb	0	; () banked
  9513  004D36  117F               	iorwf	(??___flpack+2)& (0+255),w,b
  9514  004D38  0100               	movlb	0	; () banked
  9515  004D3A  1180               	iorwf	(??___flpack+3)& (0+255),w,b
  9516  004D3C  B4D8               	btfsc	status,2,c
  9517  004D3E  D011               	goto	l1120
  9518  004D40  D7D8               	goto	l5968
  9519                           
  9520                           ; BSR set to: 0
  9521  004D42  D00F               	goto	l1120
  9522  004D44                     l5972:
  9523                           
  9524                           ; BSR set to: 0
  9525  004D44  0100               	movlb	0	; () banked
  9526  004D46  2B7B               	incf	___flpack@exp& (0+255),f,b
  9527                           
  9528                           ; BSR set to: 0
  9529  004D48  0E01               	movlw	1
  9530  004D4A  0100               	movlb	0	; () banked
  9531  004D4C  2777               	addwf	___flpack@arg& (0+255),f,b
  9532  004D4E  0E00               	movlw	0
  9533  004D50  2378               	addwfc	(___flpack@arg+1)& (0+255),f,b
  9534  004D52  2379               	addwfc	(___flpack@arg+2)& (0+255),f,b
  9535  004D54  237A               	addwfc	(___flpack@arg+3)& (0+255),f,b
  9536                           
  9537                           ; BSR set to: 0
  9538  004D56  0100               	movlb	0	; () banked
  9539  004D58  90D8               	bcf	status,0,c
  9540  004D5A  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
  9541  004D5C  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
  9542  004D5E  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
  9543  004D60  3377               	rrcf	___flpack@arg& (0+255),f,b
  9544  004D62                     l1120:
  9545                           
  9546                           ; BSR set to: 0
  9547  004D62  0E00               	movlw	0
  9548  004D64  0100               	movlb	0	; () banked
  9549  004D66  1577               	andwf	___flpack@arg& (0+255),w,b
  9550  004D68  0100               	movlb	0	; () banked
  9551  004D6A  6F7D               	movwf	??___flpack& (0+255),b
  9552  004D6C  0E00               	movlw	0
  9553  004D6E  0100               	movlb	0	; () banked
  9554  004D70  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
  9555  004D72  0100               	movlb	0	; () banked
  9556  004D74  6F7E               	movwf	(??___flpack+1)& (0+255),b
  9557  004D76  0E00               	movlw	0
  9558  004D78  0100               	movlb	0	; () banked
  9559  004D7A  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
  9560  004D7C  0100               	movlb	0	; () banked
  9561  004D7E  6F7F               	movwf	(??___flpack+2)& (0+255),b
  9562  004D80  0EFF               	movlw	255
  9563  004D82  0100               	movlb	0	; () banked
  9564  004D84  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
  9565  004D86  0100               	movlb	0	; () banked
  9566  004D88  6F80               	movwf	(??___flpack+3)& (0+255),b
  9567  004D8A  0100               	movlb	0	; () banked
  9568  004D8C  517D               	movf	??___flpack& (0+255),w,b
  9569  004D8E  0100               	movlb	0	; () banked
  9570  004D90  117E               	iorwf	(??___flpack+1)& (0+255),w,b
  9571  004D92  0100               	movlb	0	; () banked
  9572  004D94  117F               	iorwf	(??___flpack+2)& (0+255),w,b
  9573  004D96  0100               	movlb	0	; () banked
  9574  004D98  1180               	iorwf	(??___flpack+3)& (0+255),w,b
  9575  004D9A  B4D8               	btfsc	status,2,c
  9576  004D9C  D00B               	goto	l5980
  9577  004D9E  D7D2               	goto	l5972
  9578                           
  9579                           ; BSR set to: 0
  9580  004DA0  D009               	goto	l5980
  9581  004DA2                     l5978:
  9582                           
  9583                           ; BSR set to: 0
  9584  004DA2  0100               	movlb	0	; () banked
  9585  004DA4  077B               	decf	___flpack@exp& (0+255),f,b
  9586  004DA6  0100               	movlb	0	; () banked
  9587  004DA8  90D8               	bcf	status,0,c
  9588  004DAA  3777               	rlcf	___flpack@arg& (0+255),f,b
  9589  004DAC  3778               	rlcf	(___flpack@arg+1)& (0+255),f,b
  9590  004DAE  3779               	rlcf	(___flpack@arg+2)& (0+255),f,b
  9591  004DB0  377A               	rlcf	(___flpack@arg+3)& (0+255),f,b
  9592  004DB2  D000               	goto	l5980
  9593  004DB4                     l5980:
  9594                           
  9595                           ; BSR set to: 0
  9596  004DB4  0100               	movlb	0	; () banked
  9597  004DB6  BF79               	btfsc	(___flpack@arg+2)& (0+255),7,b
  9598  004DB8  D005               	goto	l1127
  9599                           
  9600                           ; BSR set to: 0
  9601  004DBA  0E02               	movlw	2
  9602  004DBC  0100               	movlb	0	; () banked
  9603  004DBE  617B               	cpfslt	___flpack@exp& (0+255),b
  9604  004DC0  D7F0               	goto	l5978
  9605  004DC2  D000               	goto	l1127
  9606  004DC4                     l1127:
  9607                           
  9608                           ; BSR set to: 0
  9609  004DC4  0100               	movlb	0	; () banked
  9610  004DC6  B17B               	btfsc	___flpack@exp& (0+255),0,b
  9611  004DC8  D009               	goto	l1128
  9612                           
  9613                           ; BSR set to: 0
  9614  004DCA  0EFF               	movlw	255
  9615  004DCC  0100               	movlb	0	; () banked
  9616  004DCE  1777               	andwf	___flpack@arg& (0+255),f,b
  9617  004DD0  0EFF               	movlw	255
  9618  004DD2  1778               	andwf	(___flpack@arg+1)& (0+255),f,b
  9619  004DD4  0E7F               	movlw	127
  9620  004DD6  1779               	andwf	(___flpack@arg+2)& (0+255),f,b
  9621  004DD8  0EFF               	movlw	255
  9622  004DDA  177A               	andwf	(___flpack@arg+3)& (0+255),f,b
  9623  004DDC                     l1128:
  9624                           
  9625                           ; BSR set to: 0
  9626  004DDC  0100               	movlb	0	; () banked
  9627  004DDE  90D8               	bcf	status,0,c
  9628  004DE0  337B               	rrcf	___flpack@exp& (0+255),f,b
  9629  004DE2  C07B  F07D         	movff	___flpack@exp,??___flpack
  9630  004DE6  0100               	movlb	0	; () banked
  9631  004DE8  6B7E               	clrf	(??___flpack+1)& (0+255),b
  9632  004DEA  6B7F               	clrf	(??___flpack+2)& (0+255),b
  9633  004DEC  6B80               	clrf	(??___flpack+3)& (0+255),b
  9634  004DEE  C07D  F080         	movff	??___flpack,??___flpack+3
  9635  004DF2  0100               	movlb	0	; () banked
  9636  004DF4  6B7F               	clrf	(??___flpack+2)& (0+255),b
  9637  004DF6  6B7E               	clrf	(??___flpack+1)& (0+255),b
  9638  004DF8  6B7D               	clrf	??___flpack& (0+255),b
  9639  004DFA  0100               	movlb	0	; () banked
  9640  004DFC  517D               	movf	??___flpack& (0+255),w,b
  9641  004DFE  0100               	movlb	0	; () banked
  9642  004E00  1377               	iorwf	___flpack@arg& (0+255),f,b
  9643  004E02  0100               	movlb	0	; () banked
  9644  004E04  517E               	movf	(??___flpack+1)& (0+255),w,b
  9645  004E06  0100               	movlb	0	; () banked
  9646  004E08  1378               	iorwf	(___flpack@arg+1)& (0+255),f,b
  9647  004E0A  0100               	movlb	0	; () banked
  9648  004E0C  517F               	movf	(??___flpack+2)& (0+255),w,b
  9649  004E0E  0100               	movlb	0	; () banked
  9650  004E10  1379               	iorwf	(___flpack@arg+2)& (0+255),f,b
  9651  004E12  0100               	movlb	0	; () banked
  9652  004E14  5180               	movf	(??___flpack+3)& (0+255),w,b
  9653  004E16  0100               	movlb	0	; () banked
  9654  004E18  137A               	iorwf	(___flpack@arg+3)& (0+255),f,b
  9655                           
  9656                           ; BSR set to: 0
  9657  004E1A  0100               	movlb	0	; () banked
  9658  004E1C  517C               	movf	___flpack@sign& (0+255),w,b
  9659  004E1E  0100               	movlb	0	; () banked
  9660  004E20  B4D8               	btfsc	status,2,c
  9661  004E22  D003               	goto	l5990
  9662                           
  9663                           ; BSR set to: 0
  9664  004E24  0100               	movlb	0	; () banked
  9665  004E26  8F7A               	bsf	(___flpack@arg+3)& (0+255),7,b
  9666  004E28  D000               	goto	l5990
  9667  004E2A                     l5990:
  9668                           
  9669                           ; BSR set to: 0
  9670  004E2A  C077  F077         	movff	___flpack@arg,?___flpack
  9671  004E2E  C078  F078         	movff	___flpack@arg+1,?___flpack+1
  9672  004E32  C079  F079         	movff	___flpack@arg+2,?___flpack+2
  9673  004E36  C07A  F07A         	movff	___flpack@arg+3,?___flpack+3
  9674  004E3A  0012               	return	
  9675                           
  9676                           ; BSR set to: 0
  9677                           
  9678                           ; BSR set to: 0
  9679  004E3C  0012               	return		;funcret
  9680  004E3E                     __end_of___flpack:
  9681                           	opt stack 0
  9682                           tblptru	equ	0xFF8
  9683                           tblptrh	equ	0xFF7
  9684                           tblptrl	equ	0xFF6
  9685                           tablat	equ	0xFF5
  9686                           prodh	equ	0xFF4
  9687                           prodl	equ	0xFF3
  9688                           postinc0	equ	0xFEE
  9689                           wreg	equ	0xFE8
  9690                           postdec1	equ	0xFE5
  9691                           fsr1l	equ	0xFE1
  9692                           indf2	equ	0xFDF
  9693                           postinc2	equ	0xFDE
  9694                           postdec2	equ	0xFDD
  9695                           fsr2h	equ	0xFDA
  9696                           fsr2l	equ	0xFD9
  9697                           status	equ	0xFD8
  9698                           
  9699 ;; *************** function _configurations *****************
  9700 ;; Defined at:
  9701 ;;		line 496 in file "parcheggio.c"
  9702 ;; Parameters:    Size  Location     Type
  9703 ;;		None
  9704 ;; Auto vars:     Size  Location     Type
  9705 ;;		None
  9706 ;; Return value:  Size  Location     Type
  9707 ;;		None               void
  9708 ;; Registers used:
  9709 ;;		wreg, status,2, status,0, cstack
  9710 ;; Tracked objects:
  9711 ;;		On entry : 0/0
  9712 ;;		On exit  : 0/0
  9713 ;;		Unchanged: 0/0
  9714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;Total ram usage:        0 bytes
  9720 ;; Hardware stack levels used:    1
  9721 ;; Hardware stack levels required when called:    7
  9722 ;; This function calls:
  9723 ;;		_CANInitialize
  9724 ;; This function is called by:
  9725 ;;		_main
  9726 ;; This function uses a non-reentrant model
  9727 ;;
  9728                           
  9729                           	psect	text32
  9730  005A2E                     __ptext32:
  9731                           	opt stack 0
  9732  005A2E                     _configurations:
  9733                           	opt stack 23
  9734                           
  9735                           ;parcheggio.c: 497: LATA = 0x00;
  9736                           
  9737                           ; BSR set to: 0
  9738                           ;incstack = 0
  9739  005A2E  0E00               	movlw	0
  9740  005A30  6E89               	movwf	3977,c	;volatile
  9741                           
  9742                           ;parcheggio.c: 498: TRISA = 0b11110000;
  9743  005A32  0EF0               	movlw	240
  9744  005A34  6E92               	movwf	3986,c	;volatile
  9745                           
  9746                           ;parcheggio.c: 499: LATB = 0x00;
  9747  005A36  0E00               	movlw	0
  9748  005A38  6E8A               	movwf	3978,c	;volatile
  9749                           
  9750                           ;parcheggio.c: 500: TRISB = 0b10001010;
  9751  005A3A  0E8A               	movlw	138
  9752  005A3C  6E93               	movwf	3987,c	;volatile
  9753                           
  9754                           ;parcheggio.c: 501: LATC = 0x00;
  9755  005A3E  0E00               	movlw	0
  9756  005A40  6E8B               	movwf	3979,c	;volatile
  9757                           
  9758                           ;parcheggio.c: 502: TRISC = 0b11111111;
  9759  005A42  6894               	setf	3988,c	;volatile
  9760                           
  9761                           ;parcheggio.c: 504: ADCON1 = 0xFF;
  9762  005A44  68C1               	setf	4033,c	;volatile
  9763                           
  9764                           ;parcheggio.c: 505: CANInitialize(4, 6, 5, 1, 3, CAN_CONFIG_LINE_FILTER_OFF & CAN_CONFIG
      +                          _SAMPLE_ONCE & CAN_CONFIG_ALL_VALID_MSG & CAN_CONFIG_DBL_BUFFER_ON);
  9765  005A46  0E06               	movlw	6
  9766  005A48  0100               	movlb	0	; () banked
  9767  005A4A  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
  9768  005A4C  0E05               	movlw	5
  9769  005A4E  0100               	movlb	0	; () banked
  9770  005A50  6F86               	movwf	CANInitialize@phaseSeg2& (0+255),b
  9771  005A52  0E01               	movlw	1
  9772  005A54  0100               	movlb	0	; () banked
  9773  005A56  6F87               	movwf	CANInitialize@SJW& (0+255),b
  9774  005A58  0E03               	movlw	3
  9775  005A5A  0100               	movlb	0	; () banked
  9776  005A5C  6F88               	movwf	CANInitialize@BRP& (0+255),b
  9777  005A5E  0E9D               	movlw	157
  9778  005A60  0100               	movlb	0	; () banked
  9779  005A62  6F89               	movwf	CANInitialize@flags& (0+255),b
  9780  005A64  0E04               	movlw	4
  9781  005A66  EC93  F024         	call	_CANInitialize
  9782                           
  9783                           ;parcheggio.c: 508: RCONbits.IPEN = 1;
  9784  005A6A  8ED0               	bsf	4048,7,c	;volatile
  9785                           
  9786                           ;parcheggio.c: 509: IPR3bits.RXB1IP = 0;
  9787  005A6C  92A5               	bcf	4005,1,c	;volatile
  9788                           
  9789                           ;parcheggio.c: 510: IPR3bits.RXB0IP = 0;
  9790  005A6E  90A5               	bcf	4005,0,c	;volatile
  9791                           
  9792                           ;parcheggio.c: 511: INTCON2bits.TMR0IP = 0;
  9793  005A70  94F1               	bcf	intcon2,2,c	;volatile
  9794                           
  9795                           ;parcheggio.c: 514: PIR3bits.RXB1IF = 0;
  9796  005A72  92A4               	bcf	4004,1,c	;volatile
  9797                           
  9798                           ;parcheggio.c: 515: PIR3bits.RXB0IF = 0;
  9799  005A74  90A4               	bcf	4004,0,c	;volatile
  9800                           
  9801                           ;parcheggio.c: 516: INTCONbits.INT0IF = 0;
  9802  005A76  92F2               	bcf	intcon,1,c	;volatile
  9803                           
  9804                           ;parcheggio.c: 517: INTCONbits.TMR0IF = 0;
  9805  005A78  94F2               	bcf	intcon,2,c	;volatile
  9806                           
  9807                           ;parcheggio.c: 521: PIE3bits.RXB1IE = 1;
  9808  005A7A  82A3               	bsf	4003,1,c	;volatile
  9809                           
  9810                           ;parcheggio.c: 522: PIE3bits.RXB0IE = 1;
  9811  005A7C  80A3               	bsf	4003,0,c	;volatile
  9812                           
  9813                           ;parcheggio.c: 523: INTCONbits.TMR0IE = 1;
  9814  005A7E  8AF2               	bsf	intcon,5,c	;volatile
  9815                           
  9816                           ;parcheggio.c: 524: INTCONbits.INT0IE = 0;
  9817  005A80  98F2               	bcf	intcon,4,c	;volatile
  9818                           
  9819                           ;parcheggio.c: 527: T0CON = 0x80;
  9820  005A82  0E80               	movlw	128
  9821  005A84  6ED5               	movwf	4053,c	;volatile
  9822                           
  9823                           ;parcheggio.c: 528: TMR0H = 0x34;
  9824  005A86  0E34               	movlw	52
  9825  005A88  6ED7               	movwf	4055,c	;volatile
  9826                           
  9827                           ;parcheggio.c: 529: TMR0L = 0xE0;
  9828  005A8A  0EE0               	movlw	224
  9829  005A8C  6ED6               	movwf	4054,c	;volatile
  9830                           
  9831                           ;parcheggio.c: 530: T3CON = 0x11;
  9832  005A8E  0E11               	movlw	17
  9833  005A90  6EB1               	movwf	4017,c	;volatile
  9834                           
  9835                           ;parcheggio.c: 532: INTCON2bits.INTEDG0 = 1;
  9836  005A92  8CF1               	bsf	intcon2,6,c	;volatile
  9837                           
  9838                           ;parcheggio.c: 533: INTCONbits.GIEL = 1;
  9839  005A94  8CF2               	bsf	intcon,6,c	;volatile
  9840                           
  9841                           ;parcheggio.c: 534: INTCONbits.GIEH = 1;
  9842  005A96  8EF2               	bsf	intcon,7,c	;volatile
  9843  005A98  0012               	return		;funcret
  9844  005A9A                     __end_of_configurations:
  9845                           	opt stack 0
  9846                           tblptru	equ	0xFF8
  9847                           tblptrh	equ	0xFF7
  9848                           tblptrl	equ	0xFF6
  9849                           tablat	equ	0xFF5
  9850                           prodh	equ	0xFF4
  9851                           prodl	equ	0xFF3
  9852                           intcon	equ	0xFF2
  9853                           intcon2	equ	0xFF1
  9854                           postinc0	equ	0xFEE
  9855                           wreg	equ	0xFE8
  9856                           postdec1	equ	0xFE5
  9857                           fsr1l	equ	0xFE1
  9858                           indf2	equ	0xFDF
  9859                           postinc2	equ	0xFDE
  9860                           postdec2	equ	0xFDD
  9861                           fsr2h	equ	0xFDA
  9862                           fsr2l	equ	0xFD9
  9863                           status	equ	0xFD8
  9864                           
  9865 ;; *************** function _CANInitialize *****************
  9866 ;; Defined at:
  9867 ;;		line 218 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;  propSeg         1    wreg     unsigned char 
  9870 ;;  phaseSeg1       1   37[BANK0 ] unsigned char 
  9871 ;;  phaseSeg2       1   38[BANK0 ] unsigned char 
  9872 ;;  SJW             1   39[BANK0 ] unsigned char 
  9873 ;;  BRP             1   40[BANK0 ] unsigned char 
  9874 ;;  flags           1   41[BANK0 ] enum E16354
  9875 ;; Auto vars:     Size  Location     Type
  9876 ;;  propSeg         1   46[BANK0 ] unsigned char 
  9877 ;;  FilterConfig    1   48[BANK0 ] unsigned char 
  9878 ;;  FilterConfig    1   47[BANK0 ] unsigned char 
  9879 ;; Return value:  Size  Location     Type
  9880 ;;		None               void
  9881 ;; Registers used:
  9882 ;;		wreg, status,2, status,0, cstack
  9883 ;; Tracked objects:
  9884 ;;		On entry : 0/0
  9885 ;;		On exit  : 0/0
  9886 ;;		Unchanged: 0/0
  9887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9888 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;Total ram usage:       12 bytes
  9893 ;; Hardware stack levels used:    1
  9894 ;; Hardware stack levels required when called:    6
  9895 ;; This function calls:
  9896 ;;		_CANOperationMode
  9897 ;;		_CANSetFilter
  9898 ;;		_CANSetMask
  9899 ;; This function is called by:
  9900 ;;		_configurations
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           	psect	text33
  9905  004926                     __ptext33:
  9906                           	opt stack 0
  9907  004926                     _CANInitialize:
  9908                           	opt stack 23
  9909                           
  9910                           ;incstack = 0
  9911                           ;CANInitialize@propSeg stored from wreg
  9912  004926  0100               	movlb	0	; () banked
  9913  004928  6F8E               	movwf	CANInitialize@propSeg& (0+255),b
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;inc\CANlib.h: 220: BYTE FilterConfig1;
  9917                           ;inc\CANlib.h: 221: BYTE FilterConfig2;
  9918                           ;inc\CANlib.h: 223: CANOperationMode(CAN_OP_MODE_CONFIG);
  9919  00492A  0E80               	movlw	128
  9920  00492C  ECF8  F02E         	call	_CANOperationMode
  9921                           
  9922                           ;inc\CANlib.h: 225: BRGCON1 = 0x00;
  9923  004930  0E00               	movlw	0
  9924  004932  6E70               	movwf	3952,c	;volatile
  9925                           
  9926                           ;inc\CANlib.h: 226: BRGCON2 = 0x00;
  9927  004934  0E00               	movlw	0
  9928  004936  6E71               	movwf	3953,c	;volatile
  9929                           
  9930                           ;inc\CANlib.h: 227: BRGCON3 = 0x00;
  9931  004938  0E00               	movlw	0
  9932  00493A  6E72               	movwf	3954,c	;volatile
  9933                           
  9934                           ;inc\CANlib.h: 229: SJW= SJW << 6;
  9935  00493C  0100               	movlb	0	; () banked
  9936  00493E  4187               	rrncf	CANInitialize@SJW& (0+255),w,b
  9937  004940  42E8               	rrncf	wreg,f,c
  9938  004942  0BC0               	andlw	192
  9939  004944  0100               	movlb	0	; () banked
  9940  004946  6F87               	movwf	CANInitialize@SJW& (0+255),b
  9941                           
  9942                           ; BSR set to: 0
  9943                           ;inc\CANlib.h: 230: BRGCON1 |= SJW;
  9944  004948  0100               	movlb	0	; () banked
  9945  00494A  5187               	movf	CANInitialize@SJW& (0+255),w,b
  9946  00494C  1270               	iorwf	3952,f,c	;volatile
  9947                           
  9948                           ; BSR set to: 0
  9949                           ;inc\CANlib.h: 231: BRGCON1 |= BRP;
  9950  00494E  0100               	movlb	0	; () banked
  9951  004950  5188               	movf	CANInitialize@BRP& (0+255),w,b
  9952  004952  1270               	iorwf	3952,f,c	;volatile
  9953                           
  9954                           ; BSR set to: 0
  9955                           ;inc\CANlib.h: 233: BRGCON2 |= propSeg;
  9956  004954  0100               	movlb	0	; () banked
  9957  004956  518E               	movf	CANInitialize@propSeg& (0+255),w,b
  9958  004958  1271               	iorwf	3953,f,c	;volatile
  9959                           
  9960                           ; BSR set to: 0
  9961                           ;inc\CANlib.h: 234: phaseSeg1 = phaseSeg1 <<3;
  9962  00495A  0100               	movlb	0	; () banked
  9963  00495C  3985               	swapf	CANInitialize@phaseSeg1& (0+255),w,b
  9964  00495E  42E8               	rrncf	wreg,f,c
  9965  004960  0BF8               	andlw	248
  9966  004962  0100               	movlb	0	; () banked
  9967  004964  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
  9968                           
  9969                           ; BSR set to: 0
  9970                           ;inc\CANlib.h: 235: BRGCON2 |= phaseSeg1;
  9971  004966  0100               	movlb	0	; () banked
  9972  004968  5185               	movf	CANInitialize@phaseSeg1& (0+255),w,b
  9973  00496A  1271               	iorwf	3953,f,c	;volatile
  9974                           
  9975                           ; BSR set to: 0
  9976                           ;inc\CANlib.h: 237: if ( !(flags & CAN_CONFIG_SAMPLE_BIT) )
  9977  00496C  0100               	movlb	0	; () banked
  9978  00496E  A589               	btfss	CANInitialize@flags& (0+255),2,b
  9979                           
  9980                           ; BSR set to: 0
  9981                           ;inc\CANlib.h: 238: BRGCON2bits.SAM= 1;
  9982  004970  8C71               	bsf	3953,6,c	;volatile
  9983                           
  9984                           ; BSR set to: 0
  9985                           ;inc\CANlib.h: 240: if ( flags & CAN_CONFIG_PHSEG2_PRG_BIT )
  9986  004972  0100               	movlb	0	; () banked
  9987  004974  A189               	btfss	CANInitialize@flags& (0+255),0,b
  9988  004976  D002               	goto	l4990
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;inc\CANlib.h: 241: BRGCON2bits.SEG2PHTS = 1;
  9992  004978  8E71               	bsf	3953,7,c	;volatile
  9993  00497A  D000               	goto	l4990
  9994  00497C                     l4990:
  9995                           
  9996                           ; BSR set to: 0
  9997                           ;inc\CANlib.h: 243: BRGCON3 |= phaseSeg2;
  9998  00497C  0100               	movlb	0	; () banked
  9999  00497E  5186               	movf	CANInitialize@phaseSeg2& (0+255),w,b
 10000  004980  1272               	iorwf	3954,f,c	;volatile
 10001                           
 10002                           ; BSR set to: 0
 10003                           ;inc\CANlib.h: 245: if ( flags & CAN_CONFIG_LINE_FILTER_BIT )
 10004  004982  0100               	movlb	0	; () banked
 10005  004984  A389               	btfss	CANInitialize@flags& (0+255),1,b
 10006  004986  D002               	goto	l4996
 10007                           
 10008                           ; BSR set to: 0
 10009                           ;inc\CANlib.h: 246: BRGCON3bits.WAKFIL = 1;
 10010  004988  8C72               	bsf	3954,6,c	;volatile
 10011  00498A  D000               	goto	l4996
 10012  00498C                     l4996:
 10013                           
 10014                           ; BSR set to: 0
 10015                           ;inc\CANlib.h: 251: RXB0CON = flags & CAN_CONFIG_MSG_BITS;
 10016  00498C  0100               	movlb	0	; () banked
 10017  00498E  5189               	movf	CANInitialize@flags& (0+255),w,b
 10018  004990  0B60               	andlw	96
 10019  004992  6E60               	movwf	3936,c	;volatile
 10020                           
 10021                           ;inc\CANlib.h: 252: if ( (flags & CAN_CONFIG_DBL_BUFFER_BIT)== CAN_CONFIG_DBL_BUFFER_ON 
      +                          )
 10022  004994  0100               	movlb	0	; () banked
 10023  004996  5189               	movf	CANInitialize@flags& (0+255),w,b
 10024  004998  0B10               	andlw	16
 10025  00499A  0AFF               	xorlw	255
 10026  00499C  B4D8               	btfsc	status,2,c
 10027                           
 10028                           ; BSR set to: 0
 10029                           ;inc\CANlib.h: 253: RXB0CONbits.RXB0DBEN = 1;
 10030  00499E  8460               	bsf	3936,2,c	;volatile
 10031                           
 10032                           ; BSR set to: 0
 10033                           ;inc\CANlib.h: 255: RXB1CON = RXB0CON;
 10034  0049A0  CF60 FF50          	movff	3936,3920	;volatile
 10035                           
 10036                           ; BSR set to: 0
 10037                           ;inc\CANlib.h: 259: CANSetMask (CAN_MASK_B1, 0x00000000, CAN_CONFIG_XTD_MSG);
 10038  0049A4  0E00               	movlw	0
 10039  0049A6  0100               	movlb	0	; () banked
 10040  0049A8  6F77               	movwf	CANSetMask@mask& (0+255),b
 10041  0049AA  0E00               	movlw	0
 10042  0049AC  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10043  0049AE  0E00               	movlw	0
 10044  0049B0  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10045  0049B2  0E00               	movlw	0
 10046  0049B4  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10047  0049B6  0EF7               	movlw	247
 10048  0049B8  0100               	movlb	0	; () banked
 10049  0049BA  6F7B               	movwf	CANSetMask@type& (0+255),b
 10050  0049BC  0E01               	movlw	1
 10051  0049BE  ECFB  F01A         	call	_CANSetMask
 10052                           
 10053                           ;inc\CANlib.h: 260: CANSetMask (CAN_MASK_B2, 0x00000000, CAN_CONFIG_XTD_MSG);
 10054  0049C2  0E00               	movlw	0
 10055  0049C4  0100               	movlb	0	; () banked
 10056  0049C6  6F77               	movwf	CANSetMask@mask& (0+255),b
 10057  0049C8  0E00               	movlw	0
 10058  0049CA  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10059  0049CC  0E00               	movlw	0
 10060  0049CE  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10061  0049D0  0E00               	movlw	0
 10062  0049D2  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10063  0049D4  0EF7               	movlw	247
 10064  0049D6  0100               	movlb	0	; () banked
 10065  0049D8  6F7B               	movwf	CANSetMask@type& (0+255),b
 10066  0049DA  0E02               	movlw	2
 10067  0049DC  ECFB  F01A         	call	_CANSetMask
 10068                           
 10069                           ;inc\CANlib.h: 263: switch( (flags & CAN_CONFIG_MSG_BITS) | ~CAN_CONFIG_MSG_BITS )
 10070  0049E0  D00F               	goto	l5008
 10071  0049E2                     l5002:
 10072                           
 10073                           ;inc\CANlib.h: 266: FilterConfig1 = CAN_CONFIG_XTD_MSG;
 10074  0049E2  0EF7               	movlw	247
 10075  0049E4  0100               	movlb	0	; () banked
 10076  0049E6  6F8F               	movwf	CANInitialize@FilterConfig1& (0+255),b
 10077  0049E8  D007               	goto	l5004
 10078  0049EA                     l358:
 10079                           
 10080                           ; BSR set to: 0
 10081                           ;inc\CANlib.h: 271: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10082  0049EA  0100               	movlb	0	; () banked
 10083  0049EC  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10084                           
 10085                           ;inc\CANlib.h: 272: FilterConfig2 = CAN_CONFIG_STD_MSG;
 10086  0049EE  0100               	movlb	0	; () banked
 10087  0049F0  6990               	setf	CANInitialize@FilterConfig2& (0+255),b
 10088                           
 10089                           ;inc\CANlib.h: 273: break;
 10090  0049F2  D028               	goto	l5010
 10091  0049F4                     l359:
 10092                           
 10093                           ; BSR set to: 0
 10094                           ;inc\CANlib.h: 275: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10095  0049F4  0100               	movlb	0	; () banked
 10096  0049F6  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10097  0049F8                     l5004:
 10098                           
 10099                           ; BSR set to: 0
 10100                           ;inc\CANlib.h: 276: FilterConfig2 = CAN_CONFIG_XTD_MSG;
 10101  0049F8  0EF7               	movlw	247
 10102  0049FA  0100               	movlb	0	; () banked
 10103  0049FC  6F90               	movwf	CANInitialize@FilterConfig2& (0+255),b
 10104                           
 10105                           ; BSR set to: 0
 10106                           ;inc\CANlib.h: 278: }
 10107                           
 10108                           ;inc\CANlib.h: 277: break;
 10109  0049FE  D022               	goto	l5010
 10110  004A00                     l5008:
 10111  004A00  0E9F               	movlw	159
 10112  004A02  0100               	movlb	0	; () banked
 10113  004A04  6F8A               	movwf	??_CANInitialize& (0+255),b
 10114  004A06  0EFF               	movlw	255
 10115  004A08  0100               	movlb	0	; () banked
 10116  004A0A  6F8B               	movwf	(??_CANInitialize+1)& (0+255),b
 10117  004A0C  0100               	movlb	0	; () banked
 10118  004A0E  5189               	movf	CANInitialize@flags& (0+255),w,b
 10119  004A10  0B60               	andlw	96
 10120  004A12  0100               	movlb	0	; () banked
 10121  004A14  6F8C               	movwf	(??_CANInitialize+2)& (0+255),b
 10122  004A16  6B8D               	clrf	(??_CANInitialize+3)& (0+255),b
 10123  004A18  0100               	movlb	0	; () banked
 10124  004A1A  518A               	movf	??_CANInitialize& (0+255),w,b
 10125  004A1C  0100               	movlb	0	; () banked
 10126  004A1E  138C               	iorwf	(??_CANInitialize+2)& (0+255),f,b
 10127  004A20  0100               	movlb	0	; () banked
 10128  004A22  518B               	movf	(??_CANInitialize+1)& (0+255),w,b
 10129  004A24  0100               	movlb	0	; () banked
 10130  004A26  138D               	iorwf	(??_CANInitialize+3)& (0+255),f,b
 10131                           
 10132                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10133                           ; Switch size 1, requested type "space"
 10134                           ; Number of cases is 1, Range of values is 0 to 0
 10135                           ; switch strategies available:
 10136                           ; Name         Instructions Cycles
 10137                           ; simple_byte            4     3 (average)
 10138                           ;	Chosen strategy is simple_byte
 10139  004A28  0100               	movlb	0	; () banked
 10140  004A2A  518D               	movf	(??_CANInitialize+3)& (0+255),w,b
 10141  004A2C  0A00               	xorlw	0	; case 0
 10142  004A2E  A4D8               	btfss	status,2,c
 10143  004A30  D7E1               	goto	l359
 10144                           
 10145                           ; BSR set to: 0
 10146                           ; Switch size 1, requested type "space"
 10147                           ; Number of cases is 2, Range of values is 191 to 223
 10148                           ; switch strategies available:
 10149                           ; Name         Instructions Cycles
 10150                           ; simple_byte            7     4 (average)
 10151                           ;	Chosen strategy is simple_byte
 10152  004A32  0100               	movlb	0	; () banked
 10153  004A34  518C               	movf	(??_CANInitialize+2)& (0+255),w,b
 10154  004A36  0ABF               	xorlw	191	; case 191
 10155  004A38  B4D8               	btfsc	status,2,c
 10156  004A3A  D7D7               	goto	l358
 10157  004A3C  0A60               	xorlw	96	; case 223
 10158  004A3E  B4D8               	btfsc	status,2,c
 10159  004A40  D7D0               	goto	l5002
 10160  004A42  D7D8               	goto	l359
 10161  004A44                     l5010:
 10162                           
 10163                           ; BSR set to: 0
 10164                           ;inc\CANlib.h: 280: CANSetFilter(CAN_FILTER_B1_F1, 0, FilterConfig1);
 10165  004A44  0E00               	movlw	0
 10166  004A46  0100               	movlb	0	; () banked
 10167  004A48  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10168  004A4A  0E00               	movlw	0
 10169  004A4C  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10170  004A4E  0E00               	movlw	0
 10171  004A50  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10172  004A52  0E00               	movlw	0
 10173  004A54  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10174  004A56  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10175  004A5A  0E00               	movlw	0
 10176  004A5C  ECA9  F006         	call	_CANSetFilter
 10177                           
 10178                           ;inc\CANlib.h: 281: CANSetFilter(CAN_FILTER_B1_F2, 0, FilterConfig1);
 10179  004A60  0E00               	movlw	0
 10180  004A62  0100               	movlb	0	; () banked
 10181  004A64  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10182  004A66  0E00               	movlw	0
 10183  004A68  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10184  004A6A  0E00               	movlw	0
 10185  004A6C  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10186  004A6E  0E00               	movlw	0
 10187  004A70  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10188  004A72  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10189  004A76  0E01               	movlw	1
 10190  004A78  ECA9  F006         	call	_CANSetFilter
 10191                           
 10192                           ;inc\CANlib.h: 282: CANSetFilter(CAN_FILTER_B2_F1, 0, FilterConfig2);
 10193  004A7C  0E00               	movlw	0
 10194  004A7E  0100               	movlb	0	; () banked
 10195  004A80  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10196  004A82  0E00               	movlw	0
 10197  004A84  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10198  004A86  0E00               	movlw	0
 10199  004A88  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10200  004A8A  0E00               	movlw	0
 10201  004A8C  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10202  004A8E  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10203  004A92  0E02               	movlw	2
 10204  004A94  ECA9  F006         	call	_CANSetFilter
 10205                           
 10206                           ;inc\CANlib.h: 283: CANSetFilter(CAN_FILTER_B2_F2, 0, FilterConfig2);
 10207  004A98  0E00               	movlw	0
 10208  004A9A  0100               	movlb	0	; () banked
 10209  004A9C  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10210  004A9E  0E00               	movlw	0
 10211  004AA0  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10212  004AA2  0E00               	movlw	0
 10213  004AA4  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10214  004AA6  0E00               	movlw	0
 10215  004AA8  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10216  004AAA  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10217  004AAE  0E03               	movlw	3
 10218  004AB0  ECA9  F006         	call	_CANSetFilter
 10219                           
 10220                           ;inc\CANlib.h: 284: CANSetFilter(CAN_FILTER_B2_F3, 0, FilterConfig2);
 10221  004AB4  0E00               	movlw	0
 10222  004AB6  0100               	movlb	0	; () banked
 10223  004AB8  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10224  004ABA  0E00               	movlw	0
 10225  004ABC  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10226  004ABE  0E00               	movlw	0
 10227  004AC0  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10228  004AC2  0E00               	movlw	0
 10229  004AC4  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10230  004AC6  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10231  004ACA  0E04               	movlw	4
 10232  004ACC  ECA9  F006         	call	_CANSetFilter
 10233                           
 10234                           ;inc\CANlib.h: 285: CANSetFilter(CAN_FILTER_B2_F4, 0, FilterConfig2);
 10235  004AD0  0E00               	movlw	0
 10236  004AD2  0100               	movlb	0	; () banked
 10237  004AD4  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10238  004AD6  0E00               	movlw	0
 10239  004AD8  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10240  004ADA  0E00               	movlw	0
 10241  004ADC  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10242  004ADE  0E00               	movlw	0
 10243  004AE0  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10244  004AE2  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10245  004AE6  0E05               	movlw	5
 10246  004AE8  ECA9  F006         	call	_CANSetFilter
 10247                           
 10248                           ;inc\CANlib.h: 287: CANOperationMode(CAN_OP_MODE_NORMAL);
 10249  004AEC  0E00               	movlw	0
 10250  004AEE  ECF8  F02E         	call	_CANOperationMode
 10251  004AF2  0012               	return		;funcret
 10252  004AF4                     __end_of_CANInitialize:
 10253                           	opt stack 0
 10254                           tblptru	equ	0xFF8
 10255                           tblptrh	equ	0xFF7
 10256                           tblptrl	equ	0xFF6
 10257                           tablat	equ	0xFF5
 10258                           prodh	equ	0xFF4
 10259                           prodl	equ	0xFF3
 10260                           intcon	equ	0xFF2
 10261                           intcon2	equ	0xFF1
 10262                           postinc0	equ	0xFEE
 10263                           wreg	equ	0xFE8
 10264                           postdec1	equ	0xFE5
 10265                           fsr1l	equ	0xFE1
 10266                           indf2	equ	0xFDF
 10267                           postinc2	equ	0xFDE
 10268                           postdec2	equ	0xFDD
 10269                           fsr2h	equ	0xFDA
 10270                           fsr2l	equ	0xFD9
 10271                           status	equ	0xFD8
 10272                           
 10273 ;; *************** function _CANSetMask *****************
 10274 ;; Defined at:
 10275 ;;		line 640 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;  numBuffer       1    wreg     enum E16388
 10278 ;;  mask            4   23[BANK0 ] unsigned long 
 10279 ;;  type            1   27[BANK0 ] enum E16354
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;  numBuffer       1   32[BANK0 ] enum E16388
 10282 ;;  tamp            4   33[BANK0 ] unsigned long 
 10283 ;; Return value:  Size  Location     Type
 10284 ;;		None               void
 10285 ;; Registers used:
 10286 ;;		wreg, status,2, status,0
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10292 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10294 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;Total ram usage:       14 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    5
 10299 ;; This function calls:
 10300 ;;		Nothing
 10301 ;; This function is called by:
 10302 ;;		_CANInitialize
 10303 ;; This function uses a non-reentrant model
 10304 ;;
 10305                           
 10306                           	psect	text34
 10307  0035F6                     __ptext34:
 10308                           	opt stack 0
 10309  0035F6                     _CANSetMask:
 10310                           	opt stack 23
 10311                           
 10312                           ;incstack = 0
 10313                           ;CANSetMask@numBuffer stored from wreg
 10314  0035F6  0100               	movlb	0	; () banked
 10315  0035F8  6F80               	movwf	CANSetMask@numBuffer& (0+255),b
 10316                           
 10317                           ; BSR set to: 0
 10318                           ;inc\CANlib.h: 643: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_STD_MSG))
 10319  0035FA  0100               	movlb	0	; () banked
 10320  0035FC  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 10321  0035FE  A4D8               	btfss	status,2,c
 10322  003600  D057               	goto	l4470
 10323                           
 10324                           ; BSR set to: 0
 10325  003602  0100               	movlb	0	; () banked
 10326  003604  297B               	incf	CANSetMask@type& (0+255),w,b
 10327  003606  A4D8               	btfss	status,2,c
 10328  003608  D053               	goto	l4470
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;inc\CANlib.h: 644: {
 10332                           ;inc\CANlib.h: 645: tamp = (mask >> 3);
 10333  00360A  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10334  00360E  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10335  003612  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10336  003616  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10337  00361A  0E04               	movlw	4
 10338  00361C  D006               	goto	u4780
 10339  00361E                     u4785:
 10340  00361E  0100               	movlb	0	; () banked
 10341  003620  90D8               	bcf	status,0,c
 10342  003622  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10343  003624  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10344  003626  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10345  003628  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10346  00362A                     u4780:
 10347  00362A  2EE8               	decfsz	wreg,f,c
 10348  00362C  D7F8               	goto	u4785
 10349  00362E  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10350  003632  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10351  003636  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10352  00363A  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10353                           
 10354                           ; BSR set to: 0
 10355                           ;inc\CANlib.h: 646: tamp = tamp & 0x000000FF;
 10356  00363E  0100               	movlb	0	; () banked
 10357  003640  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10358  003642  0100               	movlb	0	; () banked
 10359  003644  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10360  003646  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10361  003648  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10362  00364A  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10363                           
 10364                           ; BSR set to: 0
 10365                           ;inc\CANlib.h: 647: RXM0SIDH = (unsigned char) tamp;
 10366  00364C  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 10367                           
 10368                           ; BSR set to: 0
 10369                           ;inc\CANlib.h: 649: tamp = mask & 0x00000007;
 10370  003650  0E07               	movlw	7
 10371  003652  0100               	movlb	0	; () banked
 10372  003654  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10373  003656  0100               	movlb	0	; () banked
 10374  003658  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10375  00365A  0E00               	movlw	0
 10376  00365C  0100               	movlb	0	; () banked
 10377  00365E  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10378  003660  0100               	movlb	0	; () banked
 10379  003662  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10380  003664  0E00               	movlw	0
 10381  003666  0100               	movlb	0	; () banked
 10382  003668  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10383  00366A  0100               	movlb	0	; () banked
 10384  00366C  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10385  00366E  0E00               	movlw	0
 10386  003670  0100               	movlb	0	; () banked
 10387  003672  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10388  003674  0100               	movlb	0	; () banked
 10389  003676  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10390                           
 10391                           ; BSR set to: 0
 10392                           ;inc\CANlib.h: 650: tamp = tamp << 5;
 10393  003678  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10394  00367C  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10395  003680  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10396  003684  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10397  003688  0E05               	movlw	5
 10398  00368A                     u4795:
 10399  00368A  90D8               	bcf	status,0,c
 10400  00368C  0100               	movlb	0	; () banked
 10401  00368E  377C               	rlcf	??_CANSetMask& (0+255),f,b
 10402  003690  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 10403  003692  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 10404  003694  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 10405  003696  2EE8               	decfsz	wreg,f,c
 10406  003698  D7F8               	goto	u4795
 10407  00369A  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10408  00369E  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10409  0036A2  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10410  0036A6  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;inc\CANlib.h: 651: RXM0SIDL = (unsigned char) tamp;
 10414  0036AA  C081  FF19         	movff	CANSetMask@tamp,3865	;volatile
 10415  0036AE  D000               	goto	l4470
 10416  0036B0                     l4470:
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;inc\CANlib.h: 652: }
 10420                           ;inc\CANlib.h: 654: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_STD_MSG))
 10421  0036B0  0E02               	movlw	2
 10422  0036B2  0100               	movlb	0	; () banked
 10423  0036B4  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 10424  0036B6  A4D8               	btfss	status,2,c
 10425  0036B8  D057               	goto	l4486
 10426                           
 10427                           ; BSR set to: 0
 10428  0036BA  0100               	movlb	0	; () banked
 10429  0036BC  297B               	incf	CANSetMask@type& (0+255),w,b
 10430  0036BE  A4D8               	btfss	status,2,c
 10431  0036C0  D053               	goto	l4486
 10432                           
 10433                           ; BSR set to: 0
 10434                           ;inc\CANlib.h: 655: {
 10435                           ;inc\CANlib.h: 656: tamp = (mask >> 3);
 10436  0036C2  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10437  0036C6  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10438  0036CA  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10439  0036CE  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10440  0036D2  0E04               	movlw	4
 10441  0036D4  D006               	goto	u4820
 10442  0036D6                     u4825:
 10443  0036D6  0100               	movlb	0	; () banked
 10444  0036D8  90D8               	bcf	status,0,c
 10445  0036DA  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10446  0036DC  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10447  0036DE  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10448  0036E0  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10449  0036E2                     u4820:
 10450  0036E2  2EE8               	decfsz	wreg,f,c
 10451  0036E4  D7F8               	goto	u4825
 10452  0036E6  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10453  0036EA  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10454  0036EE  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10455  0036F2  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;inc\CANlib.h: 657: tamp = tamp & 0x000000FF;
 10459  0036F6  0100               	movlb	0	; () banked
 10460  0036F8  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10461  0036FA  0100               	movlb	0	; () banked
 10462  0036FC  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10463  0036FE  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10464  003700  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10465  003702  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;inc\CANlib.h: 658: RXM1SIDH = (unsigned char) tamp;
 10469  003704  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 10470                           
 10471                           ; BSR set to: 0
 10472                           ;inc\CANlib.h: 660: tamp = mask & 0x00000007;
 10473  003708  0E07               	movlw	7
 10474  00370A  0100               	movlb	0	; () banked
 10475  00370C  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10476  00370E  0100               	movlb	0	; () banked
 10477  003710  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10478  003712  0E00               	movlw	0
 10479  003714  0100               	movlb	0	; () banked
 10480  003716  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10481  003718  0100               	movlb	0	; () banked
 10482  00371A  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10483  00371C  0E00               	movlw	0
 10484  00371E  0100               	movlb	0	; () banked
 10485  003720  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10486  003722  0100               	movlb	0	; () banked
 10487  003724  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10488  003726  0E00               	movlw	0
 10489  003728  0100               	movlb	0	; () banked
 10490  00372A  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10491  00372C  0100               	movlb	0	; () banked
 10492  00372E  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10493                           
 10494                           ; BSR set to: 0
 10495                           ;inc\CANlib.h: 661: tamp = tamp << 5;
 10496  003730  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10497  003734  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10498  003738  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10499  00373C  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10500  003740  0E05               	movlw	5
 10501  003742                     u4835:
 10502  003742  90D8               	bcf	status,0,c
 10503  003744  0100               	movlb	0	; () banked
 10504  003746  377C               	rlcf	??_CANSetMask& (0+255),f,b
 10505  003748  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 10506  00374A  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 10507  00374C  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 10508  00374E  2EE8               	decfsz	wreg,f,c
 10509  003750  D7F8               	goto	u4835
 10510  003752  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10511  003756  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10512  00375A  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10513  00375E  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;inc\CANlib.h: 662: RXM1SIDL = (unsigned char) tamp;
 10517  003762  C081  FF1D         	movff	CANSetMask@tamp,3869	;volatile
 10518  003766  D000               	goto	l4486
 10519  003768                     l4486:
 10520                           
 10521                           ; BSR set to: 0
 10522                           ;inc\CANlib.h: 663: }
 10523                           ;inc\CANlib.h: 665: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_XTD_MSG))
 10524  003768  0100               	movlb	0	; () banked
 10525  00376A  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 10526  00376C  A4D8               	btfss	status,2,c
 10527  00376E  D089               	goto	l4518
 10528                           
 10529                           ; BSR set to: 0
 10530  003770  0EF7               	movlw	247
 10531  003772  0100               	movlb	0	; () banked
 10532  003774  197B               	xorwf	CANSetMask@type& (0+255),w,b
 10533  003776  A4D8               	btfss	status,2,c
 10534  003778  D084               	goto	l4518
 10535                           
 10536                           ; BSR set to: 0
 10537                           ;inc\CANlib.h: 666: {
 10538                           ;inc\CANlib.h: 667: tamp = mask & 0x000000FF;
 10539  00377A  0100               	movlb	0	; () banked
 10540  00377C  5177               	movf	CANSetMask@mask& (0+255),w,b
 10541  00377E  0100               	movlb	0	; () banked
 10542  003780  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10543  003782  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10544  003784  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10545  003786  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10546                           
 10547                           ; BSR set to: 0
 10548                           ;inc\CANlib.h: 668: RXM0EIDL = (unsigned char) tamp;
 10549  003788  C081  FF1B         	movff	CANSetMask@tamp,3867	;volatile
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;inc\CANlib.h: 670: tamp = mask & 0x0000FF00;
 10553  00378C  0E00               	movlw	0
 10554  00378E  0100               	movlb	0	; () banked
 10555  003790  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10556  003792  0100               	movlb	0	; () banked
 10557  003794  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10558  003796  0EFF               	movlw	255
 10559  003798  0100               	movlb	0	; () banked
 10560  00379A  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10561  00379C  0100               	movlb	0	; () banked
 10562  00379E  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10563  0037A0  0E00               	movlw	0
 10564  0037A2  0100               	movlb	0	; () banked
 10565  0037A4  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10566  0037A6  0100               	movlb	0	; () banked
 10567  0037A8  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10568  0037AA  0E00               	movlw	0
 10569  0037AC  0100               	movlb	0	; () banked
 10570  0037AE  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10571  0037B0  0100               	movlb	0	; () banked
 10572  0037B2  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10573                           
 10574                           ; BSR set to: 0
 10575                           ;inc\CANlib.h: 671: tamp = tamp >> 8;
 10576  0037B4  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10577  0037B8  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10578  0037BC  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10579  0037C0  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10580  0037C4  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 10581  0037C8  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 10582  0037CC  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 10583  0037D0  0100               	movlb	0	; () banked
 10584  0037D2  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 10585  0037D4  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10586  0037D8  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10587  0037DC  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10588  0037E0  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10589                           
 10590                           ; BSR set to: 0
 10591                           ;inc\CANlib.h: 672: RXM0EIDH = (unsigned char) tamp;
 10592  0037E4  C081  FF1A         	movff	CANSetMask@tamp,3866	;volatile
 10593                           
 10594                           ; BSR set to: 0
 10595                           ;inc\CANlib.h: 674: if (mask & 0x00010000)
 10596  0037E8  0100               	movlb	0	; () banked
 10597  0037EA  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 10598  0037EC  D003               	goto	l432
 10599                           
 10600                           ; BSR set to: 0
 10601                           ;inc\CANlib.h: 675: RXM0SIDLbits.EID16 = 0x01;
 10602  0037EE  010F               	movlb	15	; () banked
 10603  0037F0  8119               	bsf	25,0,b	;volatile
 10604  0037F2  D002               	goto	l433
 10605  0037F4                     l432:
 10606                           
 10607                           ; BSR set to: 0
 10608                           ;inc\CANlib.h: 676: else
 10609                           ;inc\CANlib.h: 677: RXM0SIDLbits.EID16 = 0x00;
 10610  0037F4  010F               	movlb	15	; () banked
 10611  0037F6  9119               	bcf	25,0,b	;volatile
 10612  0037F8                     l433:
 10613                           
 10614                           ; BSR set to: 15
 10615                           ;inc\CANlib.h: 679: if (mask & 0x00020000)
 10616  0037F8  0100               	movlb	0	; () banked
 10617  0037FA  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 10618  0037FC  D003               	goto	l434
 10619                           
 10620                           ; BSR set to: 0
 10621                           ;inc\CANlib.h: 680: RXM0SIDLbits.EID17 = 0x01;
 10622  0037FE  010F               	movlb	15	; () banked
 10623  003800  8319               	bsf	25,1,b	;volatile
 10624  003802  D002               	goto	l435
 10625  003804                     l434:
 10626                           
 10627                           ; BSR set to: 0
 10628                           ;inc\CANlib.h: 681: else
 10629                           ;inc\CANlib.h: 682: RXM0SIDLbits.EID17 = 0x00;
 10630  003804  010F               	movlb	15	; () banked
 10631  003806  9319               	bcf	25,1,b	;volatile
 10632  003808                     l435:
 10633                           
 10634                           ; BSR set to: 15
 10635                           ;inc\CANlib.h: 684: if (mask & 0x00040000)
 10636  003808  0100               	movlb	0	; () banked
 10637  00380A  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 10638  00380C  D003               	goto	l436
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;inc\CANlib.h: 685: RXM0SIDLbits.SID0 = 0x01;
 10642  00380E  010F               	movlb	15	; () banked
 10643  003810  8B19               	bsf	25,5,b	;volatile
 10644  003812  D002               	goto	l437
 10645  003814                     l436:
 10646                           
 10647                           ; BSR set to: 0
 10648                           ;inc\CANlib.h: 686: else
 10649                           ;inc\CANlib.h: 687: RXM0SIDLbits.SID0 = 0x00;
 10650  003814  010F               	movlb	15	; () banked
 10651  003816  9B19               	bcf	25,5,b	;volatile
 10652  003818                     l437:
 10653                           
 10654                           ; BSR set to: 15
 10655                           ;inc\CANlib.h: 689: if (mask & 0x00080000)
 10656  003818  0100               	movlb	0	; () banked
 10657  00381A  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 10658  00381C  D003               	goto	l438
 10659                           
 10660                           ; BSR set to: 0
 10661                           ;inc\CANlib.h: 690: RXM0SIDLbits.SID1 = 0x01;
 10662  00381E  010F               	movlb	15	; () banked
 10663  003820  8D19               	bsf	25,6,b	;volatile
 10664  003822  D002               	goto	l439
 10665  003824                     l438:
 10666                           
 10667                           ; BSR set to: 0
 10668                           ;inc\CANlib.h: 691: else
 10669                           ;inc\CANlib.h: 692: RXM0SIDLbits.SID1 = 0x00;
 10670  003824  010F               	movlb	15	; () banked
 10671  003826  9D19               	bcf	25,6,b	;volatile
 10672  003828                     l439:
 10673                           
 10674                           ; BSR set to: 15
 10675                           ;inc\CANlib.h: 694: if (mask & 0x00100000)
 10676  003828  0100               	movlb	0	; () banked
 10677  00382A  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 10678  00382C  D003               	goto	l440
 10679                           
 10680                           ; BSR set to: 0
 10681                           ;inc\CANlib.h: 695: RXM0SIDLbits.SID2 = 0x01 ;
 10682  00382E  010F               	movlb	15	; () banked
 10683  003830  8F19               	bsf	25,7,b	;volatile
 10684  003832  D003               	goto	l4512
 10685  003834                     l440:
 10686                           
 10687                           ; BSR set to: 0
 10688                           ;inc\CANlib.h: 696: else
 10689                           ;inc\CANlib.h: 697: RXM0SIDLbits.SID2 = 0x00 ;
 10690  003834  010F               	movlb	15	; () banked
 10691  003836  9F19               	bcf	25,7,b	;volatile
 10692  003838  D000               	goto	l4512
 10693  00383A                     l4512:
 10694                           
 10695                           ; BSR set to: 15
 10696                           ;inc\CANlib.h: 699: tamp = (mask >> 21);
 10697  00383A  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10698  00383E  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10699  003842  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10700  003846  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10701  00384A  0E16               	movlw	22
 10702  00384C  D006               	goto	u4910
 10703  00384E                     u4915:
 10704  00384E  0100               	movlb	0	; () banked
 10705  003850  90D8               	bcf	status,0,c
 10706  003852  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10707  003854  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10708  003856  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10709  003858  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10710  00385A                     u4910:
 10711  00385A  2EE8               	decfsz	wreg,f,c
 10712  00385C  D7F8               	goto	u4915
 10713  00385E  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10714  003862  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10715  003866  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10716  00386A  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;inc\CANlib.h: 700: tamp = tamp & 0x000000FF;
 10720  00386E  0100               	movlb	0	; () banked
 10721  003870  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10722  003872  0100               	movlb	0	; () banked
 10723  003874  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10724  003876  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10725  003878  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10726  00387A  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10727                           
 10728                           ; BSR set to: 0
 10729                           ;inc\CANlib.h: 701: RXM0SIDH = (unsigned char) tamp;
 10730  00387C  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 10731  003880  D000               	goto	l4518
 10732  003882                     l4518:
 10733                           
 10734                           ; BSR set to: 0
 10735                           ;inc\CANlib.h: 702: }
 10736                           ;inc\CANlib.h: 704: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_XTD_MSG))
 10737  003882  0E02               	movlw	2
 10738  003884  0100               	movlb	0	; () banked
 10739  003886  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 10740  003888  A4D8               	btfss	status,2,c
 10741  00388A  0012               	return	
 10742                           
 10743                           ; BSR set to: 0
 10744  00388C  0EF7               	movlw	247
 10745  00388E  0100               	movlb	0	; () banked
 10746  003890  197B               	xorwf	CANSetMask@type& (0+255),w,b
 10747  003892  A4D8               	btfss	status,2,c
 10748  003894  0012               	return	
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;inc\CANlib.h: 705: {
 10752                           ;inc\CANlib.h: 706: tamp = mask & 0x000000FF;
 10753  003896  0100               	movlb	0	; () banked
 10754  003898  5177               	movf	CANSetMask@mask& (0+255),w,b
 10755  00389A  0100               	movlb	0	; () banked
 10756  00389C  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10757  00389E  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10758  0038A0  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10759  0038A2  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10760                           
 10761                           ; BSR set to: 0
 10762                           ;inc\CANlib.h: 707: RXM1EIDL = (unsigned char) tamp;
 10763  0038A4  C081  FF1F         	movff	CANSetMask@tamp,3871	;volatile
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;inc\CANlib.h: 709: tamp = mask & 0x0000FF00;
 10767  0038A8  0E00               	movlw	0
 10768  0038AA  0100               	movlb	0	; () banked
 10769  0038AC  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10770  0038AE  0100               	movlb	0	; () banked
 10771  0038B0  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10772  0038B2  0EFF               	movlw	255
 10773  0038B4  0100               	movlb	0	; () banked
 10774  0038B6  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10775  0038B8  0100               	movlb	0	; () banked
 10776  0038BA  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10777  0038BC  0E00               	movlw	0
 10778  0038BE  0100               	movlb	0	; () banked
 10779  0038C0  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10780  0038C2  0100               	movlb	0	; () banked
 10781  0038C4  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10782  0038C6  0E00               	movlw	0
 10783  0038C8  0100               	movlb	0	; () banked
 10784  0038CA  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10785  0038CC  0100               	movlb	0	; () banked
 10786  0038CE  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10787                           
 10788                           ; BSR set to: 0
 10789                           ;inc\CANlib.h: 710: tamp = tamp >> 8;
 10790  0038D0  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10791  0038D4  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10792  0038D8  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10793  0038DC  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10794  0038E0  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 10795  0038E4  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 10796  0038E8  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 10797  0038EC  0100               	movlb	0	; () banked
 10798  0038EE  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 10799  0038F0  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10800  0038F4  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10801  0038F8  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10802  0038FC  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;inc\CANlib.h: 711: RXM1EIDH = (unsigned char) tamp;
 10806  003900  C081  FF1E         	movff	CANSetMask@tamp,3870	;volatile
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;inc\CANlib.h: 713: if (mask & 0x00010000)
 10810  003904  0100               	movlb	0	; () banked
 10811  003906  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 10812  003908  D003               	goto	l443
 10813                           
 10814                           ; BSR set to: 0
 10815                           ;inc\CANlib.h: 714: RXM1SIDLbits.EID16 = 0x01;
 10816  00390A  010F               	movlb	15	; () banked
 10817  00390C  811D               	bsf	29,0,b	;volatile
 10818  00390E  D002               	goto	l444
 10819  003910                     l443:
 10820                           
 10821                           ; BSR set to: 0
 10822                           ;inc\CANlib.h: 715: else
 10823                           ;inc\CANlib.h: 716: RXM1SIDLbits.EID16 = 0x00;
 10824  003910  010F               	movlb	15	; () banked
 10825  003912  911D               	bcf	29,0,b	;volatile
 10826  003914                     l444:
 10827                           
 10828                           ; BSR set to: 15
 10829                           ;inc\CANlib.h: 718: if (mask & 0x00020000)
 10830  003914  0100               	movlb	0	; () banked
 10831  003916  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 10832  003918  D003               	goto	l445
 10833                           
 10834                           ; BSR set to: 0
 10835                           ;inc\CANlib.h: 719: RXM1SIDLbits.EID17 = 0x01;
 10836  00391A  010F               	movlb	15	; () banked
 10837  00391C  831D               	bsf	29,1,b	;volatile
 10838  00391E  D002               	goto	l446
 10839  003920                     l445:
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;inc\CANlib.h: 720: else
 10843                           ;inc\CANlib.h: 721: RXM1SIDLbits.EID17 = 0x00;
 10844  003920  010F               	movlb	15	; () banked
 10845  003922  931D               	bcf	29,1,b	;volatile
 10846  003924                     l446:
 10847                           
 10848                           ; BSR set to: 15
 10849                           ;inc\CANlib.h: 723: if (mask & 0x00040000)
 10850  003924  0100               	movlb	0	; () banked
 10851  003926  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 10852  003928  D003               	goto	l447
 10853                           
 10854                           ; BSR set to: 0
 10855                           ;inc\CANlib.h: 724: RXM1SIDLbits.SID0 = 0x01;
 10856  00392A  010F               	movlb	15	; () banked
 10857  00392C  8B1D               	bsf	29,5,b	;volatile
 10858  00392E  D002               	goto	l448
 10859  003930                     l447:
 10860                           
 10861                           ; BSR set to: 0
 10862                           ;inc\CANlib.h: 725: else
 10863                           ;inc\CANlib.h: 726: RXM1SIDLbits.SID0 = 0x00;
 10864  003930  010F               	movlb	15	; () banked
 10865  003932  9B1D               	bcf	29,5,b	;volatile
 10866  003934                     l448:
 10867                           
 10868                           ; BSR set to: 15
 10869                           ;inc\CANlib.h: 728: if (mask & 0x00080000)
 10870  003934  0100               	movlb	0	; () banked
 10871  003936  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 10872  003938  D003               	goto	l449
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;inc\CANlib.h: 729: RXM1SIDLbits.SID1 = 0x01;
 10876  00393A  010F               	movlb	15	; () banked
 10877  00393C  8D1D               	bsf	29,6,b	;volatile
 10878  00393E  D002               	goto	l450
 10879  003940                     l449:
 10880                           
 10881                           ; BSR set to: 0
 10882                           ;inc\CANlib.h: 730: else
 10883                           ;inc\CANlib.h: 731: RXM1SIDLbits.SID1 = 0x00;
 10884  003940  010F               	movlb	15	; () banked
 10885  003942  9D1D               	bcf	29,6,b	;volatile
 10886  003944                     l450:
 10887                           
 10888                           ; BSR set to: 15
 10889                           ;inc\CANlib.h: 733: if (mask & 0x00100000)
 10890  003944  0100               	movlb	0	; () banked
 10891  003946  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 10892  003948  D003               	goto	l451
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;inc\CANlib.h: 734: RXM1SIDLbits.SID2 = 0x01 ;
 10896  00394A  010F               	movlb	15	; () banked
 10897  00394C  8F1D               	bsf	29,7,b	;volatile
 10898  00394E  D003               	goto	l4544
 10899  003950                     l451:
 10900                           
 10901                           ; BSR set to: 0
 10902                           ;inc\CANlib.h: 735: else
 10903                           ;inc\CANlib.h: 736: RXM1SIDLbits.SID2 = 0x00 ;
 10904  003950  010F               	movlb	15	; () banked
 10905  003952  9F1D               	bcf	29,7,b	;volatile
 10906  003954  D000               	goto	l4544
 10907  003956                     l4544:
 10908                           
 10909                           ; BSR set to: 15
 10910                           ;inc\CANlib.h: 738: tamp = (mask >> 21);
 10911  003956  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10912  00395A  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10913  00395E  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10914  003962  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10915  003966  0E16               	movlw	22
 10916  003968  D006               	goto	u4990
 10917  00396A                     u4995:
 10918  00396A  0100               	movlb	0	; () banked
 10919  00396C  90D8               	bcf	status,0,c
 10920  00396E  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10921  003970  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10922  003972  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10923  003974  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10924  003976                     u4990:
 10925  003976  2EE8               	decfsz	wreg,f,c
 10926  003978  D7F8               	goto	u4995
 10927  00397A  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10928  00397E  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10929  003982  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10930  003986  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;inc\CANlib.h: 739: tamp = tamp & 0x000000FF;
 10934  00398A  0100               	movlb	0	; () banked
 10935  00398C  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10936  00398E  0100               	movlb	0	; () banked
 10937  003990  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10938  003992  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10939  003994  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10940  003996  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;inc\CANlib.h: 740: RXM1SIDH = (unsigned char) tamp;
 10944  003998  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 10945  00399C  0012               	return	
 10946                           
 10947                           ; BSR set to: 0
 10948                           
 10949                           ; BSR set to: 0
 10950  00399E  0012               	return		;funcret
 10951  0039A0                     __end_of_CANSetMask:
 10952                           	opt stack 0
 10953                           tblptru	equ	0xFF8
 10954                           tblptrh	equ	0xFF7
 10955                           tblptrl	equ	0xFF6
 10956                           tablat	equ	0xFF5
 10957                           prodh	equ	0xFF4
 10958                           prodl	equ	0xFF3
 10959                           intcon	equ	0xFF2
 10960                           intcon2	equ	0xFF1
 10961                           postinc0	equ	0xFEE
 10962                           wreg	equ	0xFE8
 10963                           postdec1	equ	0xFE5
 10964                           fsr1l	equ	0xFE1
 10965                           indf2	equ	0xFDF
 10966                           postinc2	equ	0xFDE
 10967                           postdec2	equ	0xFDD
 10968                           fsr2h	equ	0xFDA
 10969                           fsr2l	equ	0xFD9
 10970                           status	equ	0xFD8
 10971                           
 10972 ;; *************** function _CANSetFilter *****************
 10973 ;; Defined at:
 10974 ;;		line 748 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 10975 ;; Parameters:    Size  Location     Type
 10976 ;;  numBuffer       1    wreg     enum E16391
 10977 ;;  filter          4   23[BANK0 ] unsigned long 
 10978 ;;  type            1   27[BANK0 ] enum E16354
 10979 ;; Auto vars:     Size  Location     Type
 10980 ;;  numBuffer       1   32[BANK0 ] enum E16391
 10981 ;;  tamp            4   33[BANK0 ] unsigned long 
 10982 ;; Return value:  Size  Location     Type
 10983 ;;		None               void
 10984 ;; Registers used:
 10985 ;;		wreg, status,2, status,0
 10986 ;; Tracked objects:
 10987 ;;		On entry : 0/0
 10988 ;;		On exit  : 0/0
 10989 ;;		Unchanged: 0/0
 10990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10991 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10992 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10993 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10994 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10995 ;;Total ram usage:       14 bytes
 10996 ;; Hardware stack levels used:    1
 10997 ;; Hardware stack levels required when called:    5
 10998 ;; This function calls:
 10999 ;;		Nothing
 11000 ;; This function is called by:
 11001 ;;		_CANInitialize
 11002 ;; This function uses a non-reentrant model
 11003 ;;
 11004                           
 11005                           	psect	text35
 11006  000D52                     __ptext35:
 11007                           	opt stack 0
 11008  000D52                     _CANSetFilter:
 11009                           	opt stack 23
 11010                           
 11011                           ; BSR set to: 0
 11012                           ;incstack = 0
 11013                           ;CANSetFilter@numBuffer stored from wreg
 11014  000D52  0100               	movlb	0	; () banked
 11015  000D54  6F80               	movwf	CANSetFilter@numBuffer& (0+255),b
 11016                           
 11017                           ; BSR set to: 0
 11018                           ;inc\CANlib.h: 750: unsigned long tamp;
 11019                           ;inc\CANlib.h: 752: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_STD_MSG))
 11020  000D56  0100               	movlb	0	; () banked
 11021  000D58  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 11022  000D5A  0100               	movlb	0	; () banked
 11023  000D5C  A4D8               	btfss	status,2,c
 11024  000D5E  D059               	goto	l4568
 11025                           
 11026                           ; BSR set to: 0
 11027  000D60  0100               	movlb	0	; () banked
 11028  000D62  297B               	incf	CANSetFilter@type& (0+255),w,b
 11029  000D64  A4D8               	btfss	status,2,c
 11030  000D66  D055               	goto	l4568
 11031                           
 11032                           ; BSR set to: 0
 11033                           ;inc\CANlib.h: 753: {
 11034                           ;inc\CANlib.h: 754: RXF0SIDLbits.EXIDEN = 0x00;
 11035  000D68  010F               	movlb	15	; () banked
 11036  000D6A  9701               	bcf	1,3,b	;volatile
 11037                           
 11038                           ; BSR set to: 15
 11039                           ;inc\CANlib.h: 756: tamp = (filter >> 3);
 11040  000D6C  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11041  000D70  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11042  000D74  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11043  000D78  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11044  000D7C  0E04               	movlw	4
 11045  000D7E  D006               	goto	u5020
 11046  000D80                     u5025:
 11047  000D80  0100               	movlb	0	; () banked
 11048  000D82  90D8               	bcf	status,0,c
 11049  000D84  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11050  000D86  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11051  000D88  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11052  000D8A  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11053  000D8C                     u5020:
 11054  000D8C  2EE8               	decfsz	wreg,f,c
 11055  000D8E  D7F8               	goto	u5025
 11056  000D90  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11057  000D94  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11058  000D98  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11059  000D9C  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11060                           
 11061                           ; BSR set to: 0
 11062                           ;inc\CANlib.h: 757: tamp = tamp & 0x000000FF;
 11063  000DA0  0100               	movlb	0	; () banked
 11064  000DA2  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11065  000DA4  0100               	movlb	0	; () banked
 11066  000DA6  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11067  000DA8  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11068  000DAA  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11069  000DAC  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11070                           
 11071                           ; BSR set to: 0
 11072                           ;inc\CANlib.h: 758: RXF0SIDH = (unsigned char) tamp;
 11073  000DAE  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 11074                           
 11075                           ; BSR set to: 0
 11076                           ;inc\CANlib.h: 760: tamp = filter & 0x00000007;
 11077  000DB2  0E07               	movlw	7
 11078  000DB4  0100               	movlb	0	; () banked
 11079  000DB6  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11080  000DB8  0100               	movlb	0	; () banked
 11081  000DBA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11082  000DBC  0E00               	movlw	0
 11083  000DBE  0100               	movlb	0	; () banked
 11084  000DC0  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11085  000DC2  0100               	movlb	0	; () banked
 11086  000DC4  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11087  000DC6  0E00               	movlw	0
 11088  000DC8  0100               	movlb	0	; () banked
 11089  000DCA  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11090  000DCC  0100               	movlb	0	; () banked
 11091  000DCE  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11092  000DD0  0E00               	movlw	0
 11093  000DD2  0100               	movlb	0	; () banked
 11094  000DD4  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11095  000DD6  0100               	movlb	0	; () banked
 11096  000DD8  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11097                           
 11098                           ; BSR set to: 0
 11099                           ;inc\CANlib.h: 761: tamp = tamp << 5;
 11100  000DDA  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11101  000DDE  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11102  000DE2  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11103  000DE6  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11104  000DEA  0E05               	movlw	5
 11105  000DEC                     u5035:
 11106  000DEC  90D8               	bcf	status,0,c
 11107  000DEE  0100               	movlb	0	; () banked
 11108  000DF0  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11109  000DF2  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11110  000DF4  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11111  000DF6  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11112  000DF8  2EE8               	decfsz	wreg,f,c
 11113  000DFA  D7F8               	goto	u5035
 11114  000DFC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11115  000E00  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11116  000E04  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11117  000E08  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11118                           
 11119                           ; BSR set to: 0
 11120                           ;inc\CANlib.h: 762: RXF0SIDL = (unsigned char) tamp;
 11121  000E0C  C081  FF01         	movff	CANSetFilter@tamp,3841	;volatile
 11122  000E10  D000               	goto	l4568
 11123  000E12                     l4568:
 11124                           
 11125                           ; BSR set to: 0
 11126                           ;inc\CANlib.h: 763: }
 11127                           ;inc\CANlib.h: 765: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_STD_MSG))
 11128  000E12  0100               	movlb	0	; () banked
 11129  000E14  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 11130  000E16  A4D8               	btfss	status,2,c
 11131  000E18  D059               	goto	l4586
 11132                           
 11133                           ; BSR set to: 0
 11134  000E1A  0100               	movlb	0	; () banked
 11135  000E1C  297B               	incf	CANSetFilter@type& (0+255),w,b
 11136  000E1E  A4D8               	btfss	status,2,c
 11137  000E20  D055               	goto	l4586
 11138                           
 11139                           ; BSR set to: 0
 11140                           ;inc\CANlib.h: 766: {
 11141                           ;inc\CANlib.h: 767: RXF1SIDLbits.EXIDEN = 0x00;
 11142  000E22  010F               	movlb	15	; () banked
 11143  000E24  9705               	bcf	5,3,b	;volatile
 11144                           
 11145                           ; BSR set to: 15
 11146                           ;inc\CANlib.h: 769: tamp = (filter >> 3);
 11147  000E26  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11148  000E2A  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11149  000E2E  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11150  000E32  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11151  000E36  0E04               	movlw	4
 11152  000E38  D006               	goto	u5060
 11153  000E3A                     u5065:
 11154  000E3A  0100               	movlb	0	; () banked
 11155  000E3C  90D8               	bcf	status,0,c
 11156  000E3E  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11157  000E40  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11158  000E42  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11159  000E44  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11160  000E46                     u5060:
 11161  000E46  2EE8               	decfsz	wreg,f,c
 11162  000E48  D7F8               	goto	u5065
 11163  000E4A  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11164  000E4E  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11165  000E52  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11166  000E56  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;inc\CANlib.h: 770: tamp = tamp & 0x000000FF;
 11170  000E5A  0100               	movlb	0	; () banked
 11171  000E5C  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11172  000E5E  0100               	movlb	0	; () banked
 11173  000E60  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11174  000E62  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11175  000E64  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11176  000E66  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11177                           
 11178                           ; BSR set to: 0
 11179                           ;inc\CANlib.h: 771: RXF1SIDH = (unsigned char) tamp;
 11180  000E68  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 11181                           
 11182                           ; BSR set to: 0
 11183                           ;inc\CANlib.h: 773: tamp = filter & 0x00000007;
 11184  000E6C  0E07               	movlw	7
 11185  000E6E  0100               	movlb	0	; () banked
 11186  000E70  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11187  000E72  0100               	movlb	0	; () banked
 11188  000E74  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11189  000E76  0E00               	movlw	0
 11190  000E78  0100               	movlb	0	; () banked
 11191  000E7A  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11192  000E7C  0100               	movlb	0	; () banked
 11193  000E7E  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11194  000E80  0E00               	movlw	0
 11195  000E82  0100               	movlb	0	; () banked
 11196  000E84  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11197  000E86  0100               	movlb	0	; () banked
 11198  000E88  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11199  000E8A  0E00               	movlw	0
 11200  000E8C  0100               	movlb	0	; () banked
 11201  000E8E  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11202  000E90  0100               	movlb	0	; () banked
 11203  000E92  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11204                           
 11205                           ; BSR set to: 0
 11206                           ;inc\CANlib.h: 774: tamp = tamp << 5;
 11207  000E94  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11208  000E98  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11209  000E9C  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11210  000EA0  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11211  000EA4  0E05               	movlw	5
 11212  000EA6                     u5075:
 11213  000EA6  90D8               	bcf	status,0,c
 11214  000EA8  0100               	movlb	0	; () banked
 11215  000EAA  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11216  000EAC  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11217  000EAE  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11218  000EB0  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11219  000EB2  2EE8               	decfsz	wreg,f,c
 11220  000EB4  D7F8               	goto	u5075
 11221  000EB6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11222  000EBA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11223  000EBE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11224  000EC2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11225                           
 11226                           ; BSR set to: 0
 11227                           ;inc\CANlib.h: 775: RXF1SIDL = (unsigned char) tamp;
 11228  000EC6  C081  FF05         	movff	CANSetFilter@tamp,3845	;volatile
 11229  000ECA  D000               	goto	l4586
 11230  000ECC                     l4586:
 11231                           
 11232                           ; BSR set to: 0
 11233                           ;inc\CANlib.h: 776: }
 11234                           ;inc\CANlib.h: 778: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_STD_MSG))
 11235  000ECC  0E02               	movlw	2
 11236  000ECE  0100               	movlb	0	; () banked
 11237  000ED0  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11238  000ED2  A4D8               	btfss	status,2,c
 11239  000ED4  D059               	goto	l4604
 11240                           
 11241                           ; BSR set to: 0
 11242  000ED6  0100               	movlb	0	; () banked
 11243  000ED8  297B               	incf	CANSetFilter@type& (0+255),w,b
 11244  000EDA  A4D8               	btfss	status,2,c
 11245  000EDC  D055               	goto	l4604
 11246                           
 11247                           ; BSR set to: 0
 11248                           ;inc\CANlib.h: 779: {
 11249                           ;inc\CANlib.h: 780: RXF2SIDLbits.EXIDEN = 0x00;
 11250  000EDE  010F               	movlb	15	; () banked
 11251  000EE0  9709               	bcf	9,3,b	;volatile
 11252                           
 11253                           ; BSR set to: 15
 11254                           ;inc\CANlib.h: 782: tamp = (filter >> 3);
 11255  000EE2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11256  000EE6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11257  000EEA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11258  000EEE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11259  000EF2  0E04               	movlw	4
 11260  000EF4  D006               	goto	u5100
 11261  000EF6                     u5105:
 11262  000EF6  0100               	movlb	0	; () banked
 11263  000EF8  90D8               	bcf	status,0,c
 11264  000EFA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11265  000EFC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11266  000EFE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11267  000F00  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11268  000F02                     u5100:
 11269  000F02  2EE8               	decfsz	wreg,f,c
 11270  000F04  D7F8               	goto	u5105
 11271  000F06  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11272  000F0A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11273  000F0E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11274  000F12  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;inc\CANlib.h: 783: tamp = tamp & 0x000000FF;
 11278  000F16  0100               	movlb	0	; () banked
 11279  000F18  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11280  000F1A  0100               	movlb	0	; () banked
 11281  000F1C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11282  000F1E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11283  000F20  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11284  000F22  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11285                           
 11286                           ; BSR set to: 0
 11287                           ;inc\CANlib.h: 784: RXF2SIDH = (unsigned char) tamp;
 11288  000F24  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 11289                           
 11290                           ; BSR set to: 0
 11291                           ;inc\CANlib.h: 786: tamp = filter & 0x00000007;
 11292  000F28  0E07               	movlw	7
 11293  000F2A  0100               	movlb	0	; () banked
 11294  000F2C  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11295  000F2E  0100               	movlb	0	; () banked
 11296  000F30  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11297  000F32  0E00               	movlw	0
 11298  000F34  0100               	movlb	0	; () banked
 11299  000F36  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11300  000F38  0100               	movlb	0	; () banked
 11301  000F3A  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11302  000F3C  0E00               	movlw	0
 11303  000F3E  0100               	movlb	0	; () banked
 11304  000F40  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11305  000F42  0100               	movlb	0	; () banked
 11306  000F44  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11307  000F46  0E00               	movlw	0
 11308  000F48  0100               	movlb	0	; () banked
 11309  000F4A  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11310  000F4C  0100               	movlb	0	; () banked
 11311  000F4E  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11312                           
 11313                           ; BSR set to: 0
 11314                           ;inc\CANlib.h: 787: tamp = tamp << 5;
 11315  000F50  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11316  000F54  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11317  000F58  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11318  000F5C  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11319  000F60  0E05               	movlw	5
 11320  000F62                     u5115:
 11321  000F62  90D8               	bcf	status,0,c
 11322  000F64  0100               	movlb	0	; () banked
 11323  000F66  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11324  000F68  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11325  000F6A  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11326  000F6C  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11327  000F6E  2EE8               	decfsz	wreg,f,c
 11328  000F70  D7F8               	goto	u5115
 11329  000F72  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11330  000F76  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11331  000F7A  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11332  000F7E  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11333                           
 11334                           ; BSR set to: 0
 11335                           ;inc\CANlib.h: 788: RXF2SIDL = (unsigned char) tamp;
 11336  000F82  C081  FF09         	movff	CANSetFilter@tamp,3849	;volatile
 11337  000F86  D000               	goto	l4604
 11338  000F88                     l4604:
 11339                           
 11340                           ; BSR set to: 0
 11341                           ;inc\CANlib.h: 789: }
 11342                           ;inc\CANlib.h: 791: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_STD_MSG))
 11343  000F88  0E03               	movlw	3
 11344  000F8A  0100               	movlb	0	; () banked
 11345  000F8C  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11346  000F8E  A4D8               	btfss	status,2,c
 11347  000F90  D059               	goto	l4622
 11348                           
 11349                           ; BSR set to: 0
 11350  000F92  0100               	movlb	0	; () banked
 11351  000F94  297B               	incf	CANSetFilter@type& (0+255),w,b
 11352  000F96  A4D8               	btfss	status,2,c
 11353  000F98  D055               	goto	l4622
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;inc\CANlib.h: 792: {
 11357                           ;inc\CANlib.h: 793: RXF3SIDLbits.EXIDEN = 0x00;
 11358  000F9A  010F               	movlb	15	; () banked
 11359  000F9C  970D               	bcf	13,3,b	;volatile
 11360                           
 11361                           ; BSR set to: 15
 11362                           ;inc\CANlib.h: 795: tamp = (filter >> 3);
 11363  000F9E  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11364  000FA2  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11365  000FA6  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11366  000FAA  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11367  000FAE  0E04               	movlw	4
 11368  000FB0  D006               	goto	u5140
 11369  000FB2                     u5145:
 11370  000FB2  0100               	movlb	0	; () banked
 11371  000FB4  90D8               	bcf	status,0,c
 11372  000FB6  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11373  000FB8  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11374  000FBA  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11375  000FBC  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11376  000FBE                     u5140:
 11377  000FBE  2EE8               	decfsz	wreg,f,c
 11378  000FC0  D7F8               	goto	u5145
 11379  000FC2  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11380  000FC6  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11381  000FCA  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11382  000FCE  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11383                           
 11384                           ; BSR set to: 0
 11385                           ;inc\CANlib.h: 796: tamp = tamp & 0x000000FF;
 11386  000FD2  0100               	movlb	0	; () banked
 11387  000FD4  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11388  000FD6  0100               	movlb	0	; () banked
 11389  000FD8  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11390  000FDA  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11391  000FDC  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11392  000FDE  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11393                           
 11394                           ; BSR set to: 0
 11395                           ;inc\CANlib.h: 797: RXF3SIDH = (unsigned char) tamp;
 11396  000FE0  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;inc\CANlib.h: 799: tamp = filter & 0x00000007;
 11400  000FE4  0E07               	movlw	7
 11401  000FE6  0100               	movlb	0	; () banked
 11402  000FE8  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11403  000FEA  0100               	movlb	0	; () banked
 11404  000FEC  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11405  000FEE  0E00               	movlw	0
 11406  000FF0  0100               	movlb	0	; () banked
 11407  000FF2  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11408  000FF4  0100               	movlb	0	; () banked
 11409  000FF6  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11410  000FF8  0E00               	movlw	0
 11411  000FFA  0100               	movlb	0	; () banked
 11412  000FFC  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11413  000FFE  0100               	movlb	0	; () banked
 11414  001000  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11415  001002  0E00               	movlw	0
 11416  001004  0100               	movlb	0	; () banked
 11417  001006  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11418  001008  0100               	movlb	0	; () banked
 11419  00100A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11420                           
 11421                           ; BSR set to: 0
 11422                           ;inc\CANlib.h: 800: tamp = tamp << 5;
 11423  00100C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11424  001010  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11425  001014  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11426  001018  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11427  00101C  0E05               	movlw	5
 11428  00101E                     u5155:
 11429  00101E  90D8               	bcf	status,0,c
 11430  001020  0100               	movlb	0	; () banked
 11431  001022  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11432  001024  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11433  001026  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11434  001028  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11435  00102A  2EE8               	decfsz	wreg,f,c
 11436  00102C  D7F8               	goto	u5155
 11437  00102E  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11438  001032  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11439  001036  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11440  00103A  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11441                           
 11442                           ; BSR set to: 0
 11443                           ;inc\CANlib.h: 801: RXF3SIDL = (unsigned char) tamp;
 11444  00103E  C081  FF0D         	movff	CANSetFilter@tamp,3853	;volatile
 11445  001042  D000               	goto	l4622
 11446  001044                     l4622:
 11447                           
 11448                           ; BSR set to: 0
 11449                           ;inc\CANlib.h: 802: }
 11450                           ;inc\CANlib.h: 804: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_STD_MSG))
 11451  001044  0E04               	movlw	4
 11452  001046  0100               	movlb	0	; () banked
 11453  001048  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11454  00104A  A4D8               	btfss	status,2,c
 11455  00104C  D059               	goto	l4640
 11456                           
 11457                           ; BSR set to: 0
 11458  00104E  0100               	movlb	0	; () banked
 11459  001050  297B               	incf	CANSetFilter@type& (0+255),w,b
 11460  001052  A4D8               	btfss	status,2,c
 11461  001054  D055               	goto	l4640
 11462                           
 11463                           ; BSR set to: 0
 11464                           ;inc\CANlib.h: 805: {
 11465                           ;inc\CANlib.h: 806: RXF4SIDLbits.EXIDEN = 0x00;
 11466  001056  010F               	movlb	15	; () banked
 11467  001058  9711               	bcf	17,3,b	;volatile
 11468                           
 11469                           ; BSR set to: 15
 11470                           ;inc\CANlib.h: 808: tamp = (filter >> 3);
 11471  00105A  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11472  00105E  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11473  001062  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11474  001066  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11475  00106A  0E04               	movlw	4
 11476  00106C  D006               	goto	u5180
 11477  00106E                     u5185:
 11478  00106E  0100               	movlb	0	; () banked
 11479  001070  90D8               	bcf	status,0,c
 11480  001072  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11481  001074  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11482  001076  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11483  001078  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11484  00107A                     u5180:
 11485  00107A  2EE8               	decfsz	wreg,f,c
 11486  00107C  D7F8               	goto	u5185
 11487  00107E  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11488  001082  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11489  001086  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11490  00108A  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11491                           
 11492                           ; BSR set to: 0
 11493                           ;inc\CANlib.h: 809: tamp = tamp & 0x000000FF;
 11494  00108E  0100               	movlb	0	; () banked
 11495  001090  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11496  001092  0100               	movlb	0	; () banked
 11497  001094  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11498  001096  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11499  001098  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11500  00109A  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11501                           
 11502                           ; BSR set to: 0
 11503                           ;inc\CANlib.h: 810: RXF4SIDH = (unsigned char) tamp;
 11504  00109C  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 11505                           
 11506                           ; BSR set to: 0
 11507                           ;inc\CANlib.h: 812: tamp = filter & 0x00000007;
 11508  0010A0  0E07               	movlw	7
 11509  0010A2  0100               	movlb	0	; () banked
 11510  0010A4  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11511  0010A6  0100               	movlb	0	; () banked
 11512  0010A8  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11513  0010AA  0E00               	movlw	0
 11514  0010AC  0100               	movlb	0	; () banked
 11515  0010AE  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11516  0010B0  0100               	movlb	0	; () banked
 11517  0010B2  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11518  0010B4  0E00               	movlw	0
 11519  0010B6  0100               	movlb	0	; () banked
 11520  0010B8  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11521  0010BA  0100               	movlb	0	; () banked
 11522  0010BC  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11523  0010BE  0E00               	movlw	0
 11524  0010C0  0100               	movlb	0	; () banked
 11525  0010C2  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11526  0010C4  0100               	movlb	0	; () banked
 11527  0010C6  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11528                           
 11529                           ; BSR set to: 0
 11530                           ;inc\CANlib.h: 813: tamp = tamp << 5;
 11531  0010C8  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11532  0010CC  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11533  0010D0  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11534  0010D4  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11535  0010D8  0E05               	movlw	5
 11536  0010DA                     u5195:
 11537  0010DA  90D8               	bcf	status,0,c
 11538  0010DC  0100               	movlb	0	; () banked
 11539  0010DE  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11540  0010E0  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11541  0010E2  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11542  0010E4  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11543  0010E6  2EE8               	decfsz	wreg,f,c
 11544  0010E8  D7F8               	goto	u5195
 11545  0010EA  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11546  0010EE  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11547  0010F2  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11548  0010F6  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11549                           
 11550                           ; BSR set to: 0
 11551                           ;inc\CANlib.h: 814: RXF4SIDL = (unsigned char) tamp;
 11552  0010FA  C081  FF11         	movff	CANSetFilter@tamp,3857	;volatile
 11553  0010FE  D000               	goto	l4640
 11554  001100                     l4640:
 11555                           
 11556                           ; BSR set to: 0
 11557                           ;inc\CANlib.h: 815: }
 11558                           ;inc\CANlib.h: 817: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_STD_MSG))
 11559  001100  0E05               	movlw	5
 11560  001102  0100               	movlb	0	; () banked
 11561  001104  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11562  001106  A4D8               	btfss	status,2,c
 11563  001108  D059               	goto	l4658
 11564                           
 11565                           ; BSR set to: 0
 11566  00110A  0100               	movlb	0	; () banked
 11567  00110C  297B               	incf	CANSetFilter@type& (0+255),w,b
 11568  00110E  A4D8               	btfss	status,2,c
 11569  001110  D055               	goto	l4658
 11570                           
 11571                           ; BSR set to: 0
 11572                           ;inc\CANlib.h: 818: {
 11573                           ;inc\CANlib.h: 819: RXF5SIDLbits.EXIDEN = 0x00;
 11574  001112  010F               	movlb	15	; () banked
 11575  001114  9715               	bcf	21,3,b	;volatile
 11576                           
 11577                           ; BSR set to: 15
 11578                           ;inc\CANlib.h: 821: tamp = (filter >> 3);
 11579  001116  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11580  00111A  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11581  00111E  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11582  001122  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11583  001126  0E04               	movlw	4
 11584  001128  D006               	goto	u5220
 11585  00112A                     u5225:
 11586  00112A  0100               	movlb	0	; () banked
 11587  00112C  90D8               	bcf	status,0,c
 11588  00112E  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11589  001130  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11590  001132  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11591  001134  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11592  001136                     u5220:
 11593  001136  2EE8               	decfsz	wreg,f,c
 11594  001138  D7F8               	goto	u5225
 11595  00113A  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11596  00113E  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11597  001142  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11598  001146  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11599                           
 11600                           ; BSR set to: 0
 11601                           ;inc\CANlib.h: 822: tamp = tamp & 0x000000FF;
 11602  00114A  0100               	movlb	0	; () banked
 11603  00114C  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11604  00114E  0100               	movlb	0	; () banked
 11605  001150  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11606  001152  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11607  001154  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11608  001156  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11609                           
 11610                           ; BSR set to: 0
 11611                           ;inc\CANlib.h: 823: RXF5SIDH = (unsigned char) tamp;
 11612  001158  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 11613                           
 11614                           ; BSR set to: 0
 11615                           ;inc\CANlib.h: 825: tamp = filter & 0x00000007;
 11616  00115C  0E07               	movlw	7
 11617  00115E  0100               	movlb	0	; () banked
 11618  001160  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11619  001162  0100               	movlb	0	; () banked
 11620  001164  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11621  001166  0E00               	movlw	0
 11622  001168  0100               	movlb	0	; () banked
 11623  00116A  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11624  00116C  0100               	movlb	0	; () banked
 11625  00116E  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11626  001170  0E00               	movlw	0
 11627  001172  0100               	movlb	0	; () banked
 11628  001174  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11629  001176  0100               	movlb	0	; () banked
 11630  001178  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11631  00117A  0E00               	movlw	0
 11632  00117C  0100               	movlb	0	; () banked
 11633  00117E  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11634  001180  0100               	movlb	0	; () banked
 11635  001182  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11636                           
 11637                           ; BSR set to: 0
 11638                           ;inc\CANlib.h: 826: tamp = tamp << 5;
 11639  001184  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11640  001188  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11641  00118C  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11642  001190  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11643  001194  0E05               	movlw	5
 11644  001196                     u5235:
 11645  001196  90D8               	bcf	status,0,c
 11646  001198  0100               	movlb	0	; () banked
 11647  00119A  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11648  00119C  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11649  00119E  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11650  0011A0  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11651  0011A2  2EE8               	decfsz	wreg,f,c
 11652  0011A4  D7F8               	goto	u5235
 11653  0011A6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11654  0011AA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11655  0011AE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11656  0011B2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11657                           
 11658                           ; BSR set to: 0
 11659                           ;inc\CANlib.h: 827: RXF5SIDL = (unsigned char) tamp;
 11660  0011B6  C081  FF15         	movff	CANSetFilter@tamp,3861	;volatile
 11661  0011BA  D000               	goto	l4658
 11662  0011BC                     l4658:
 11663                           
 11664                           ; BSR set to: 0
 11665                           ;inc\CANlib.h: 828: }
 11666                           ;inc\CANlib.h: 831: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_XTD_MSG))
 11667  0011BC  0100               	movlb	0	; () banked
 11668  0011BE  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 11669  0011C0  0100               	movlb	0	; () banked
 11670  0011C2  A4D8               	btfss	status,2,c
 11671  0011C4  D08B               	goto	l4692
 11672                           
 11673                           ; BSR set to: 0
 11674  0011C6  0EF7               	movlw	247
 11675  0011C8  0100               	movlb	0	; () banked
 11676  0011CA  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 11677  0011CC  A4D8               	btfss	status,2,c
 11678  0011CE  D086               	goto	l4692
 11679                           
 11680                           ; BSR set to: 0
 11681                           ;inc\CANlib.h: 832: {
 11682                           ;inc\CANlib.h: 833: RXF0SIDLbits.EXIDEN = 0x01;
 11683  0011D0  010F               	movlb	15	; () banked
 11684  0011D2  8701               	bsf	1,3,b	;volatile
 11685                           
 11686                           ; BSR set to: 15
 11687                           ;inc\CANlib.h: 835: tamp = filter & 0x000000FF;
 11688  0011D4  0100               	movlb	0	; () banked
 11689  0011D6  5177               	movf	CANSetFilter@filter& (0+255),w,b
 11690  0011D8  0100               	movlb	0	; () banked
 11691  0011DA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11692  0011DC  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11693  0011DE  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11694  0011E0  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11695                           
 11696                           ; BSR set to: 0
 11697                           ;inc\CANlib.h: 836: RXF0EIDL = (unsigned char) tamp;
 11698  0011E2  C081  FF03         	movff	CANSetFilter@tamp,3843	;volatile
 11699                           
 11700                           ; BSR set to: 0
 11701                           ;inc\CANlib.h: 838: tamp = filter & 0x0000FF00;
 11702  0011E6  0E00               	movlw	0
 11703  0011E8  0100               	movlb	0	; () banked
 11704  0011EA  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11705  0011EC  0100               	movlb	0	; () banked
 11706  0011EE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11707  0011F0  0EFF               	movlw	255
 11708  0011F2  0100               	movlb	0	; () banked
 11709  0011F4  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11710  0011F6  0100               	movlb	0	; () banked
 11711  0011F8  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11712  0011FA  0E00               	movlw	0
 11713  0011FC  0100               	movlb	0	; () banked
 11714  0011FE  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11715  001200  0100               	movlb	0	; () banked
 11716  001202  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11717  001204  0E00               	movlw	0
 11718  001206  0100               	movlb	0	; () banked
 11719  001208  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11720  00120A  0100               	movlb	0	; () banked
 11721  00120C  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;inc\CANlib.h: 839: tamp = tamp >> 8;
 11725  00120E  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11726  001212  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11727  001216  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11728  00121A  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11729  00121E  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 11730  001222  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 11731  001226  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 11732  00122A  0100               	movlb	0	; () banked
 11733  00122C  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 11734  00122E  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11735  001232  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11736  001236  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11737  00123A  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11738                           
 11739                           ; BSR set to: 0
 11740                           ;inc\CANlib.h: 840: RXF0EIDH = (unsigned char) tamp;
 11741  00123E  C081  FF02         	movff	CANSetFilter@tamp,3842	;volatile
 11742                           
 11743                           ; BSR set to: 0
 11744                           ;inc\CANlib.h: 842: if (filter & 0x00010000)
 11745  001242  0100               	movlb	0	; () banked
 11746  001244  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 11747  001246  D003               	goto	l463
 11748                           
 11749                           ; BSR set to: 0
 11750                           ;inc\CANlib.h: 843: RXF0SIDLbits.EID16 = 0x01;
 11751  001248  010F               	movlb	15	; () banked
 11752  00124A  8101               	bsf	1,0,b	;volatile
 11753  00124C  D002               	goto	l464
 11754  00124E                     l463:
 11755                           
 11756                           ; BSR set to: 0
 11757                           ;inc\CANlib.h: 844: else
 11758                           ;inc\CANlib.h: 845: RXF0SIDLbits.EID16 = 0x00;
 11759  00124E  010F               	movlb	15	; () banked
 11760  001250  9101               	bcf	1,0,b	;volatile
 11761  001252                     l464:
 11762                           
 11763                           ; BSR set to: 15
 11764                           ;inc\CANlib.h: 847: if (filter & 0x00020000)
 11765  001252  0100               	movlb	0	; () banked
 11766  001254  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 11767  001256  D003               	goto	l465
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;inc\CANlib.h: 848: RXF0SIDLbits.EID17 = 0x01;
 11771  001258  010F               	movlb	15	; () banked
 11772  00125A  8301               	bsf	1,1,b	;volatile
 11773  00125C  D002               	goto	l466
 11774  00125E                     l465:
 11775                           
 11776                           ; BSR set to: 0
 11777                           ;inc\CANlib.h: 849: else
 11778                           ;inc\CANlib.h: 850: RXF0SIDLbits.EID17 = 0x00;
 11779  00125E  010F               	movlb	15	; () banked
 11780  001260  9301               	bcf	1,1,b	;volatile
 11781  001262                     l466:
 11782                           
 11783                           ; BSR set to: 15
 11784                           ;inc\CANlib.h: 852: if (filter & 0x00040000)
 11785  001262  0100               	movlb	0	; () banked
 11786  001264  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 11787  001266  D003               	goto	l467
 11788                           
 11789                           ; BSR set to: 0
 11790                           ;inc\CANlib.h: 853: RXF0SIDLbits.SID0 = 0x01;
 11791  001268  010F               	movlb	15	; () banked
 11792  00126A  8B01               	bsf	1,5,b	;volatile
 11793  00126C  D002               	goto	l468
 11794  00126E                     l467:
 11795                           
 11796                           ; BSR set to: 0
 11797                           ;inc\CANlib.h: 854: else
 11798                           ;inc\CANlib.h: 855: RXF0SIDLbits.SID0 = 0x00;
 11799  00126E  010F               	movlb	15	; () banked
 11800  001270  9B01               	bcf	1,5,b	;volatile
 11801  001272                     l468:
 11802                           
 11803                           ; BSR set to: 15
 11804                           ;inc\CANlib.h: 857: if (filter & 0x00080000)
 11805  001272  0100               	movlb	0	; () banked
 11806  001274  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 11807  001276  D003               	goto	l469
 11808                           
 11809                           ; BSR set to: 0
 11810                           ;inc\CANlib.h: 858: RXF0SIDLbits.SID1 = 0x01;
 11811  001278  010F               	movlb	15	; () banked
 11812  00127A  8D01               	bsf	1,6,b	;volatile
 11813  00127C  D002               	goto	l470
 11814  00127E                     l469:
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;inc\CANlib.h: 859: else
 11818                           ;inc\CANlib.h: 860: RXF0SIDLbits.SID1 = 0x00;
 11819  00127E  010F               	movlb	15	; () banked
 11820  001280  9D01               	bcf	1,6,b	;volatile
 11821  001282                     l470:
 11822                           
 11823                           ; BSR set to: 15
 11824                           ;inc\CANlib.h: 862: if (filter & 0x00100000)
 11825  001282  0100               	movlb	0	; () banked
 11826  001284  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 11827  001286  D003               	goto	l471
 11828                           
 11829                           ; BSR set to: 0
 11830                           ;inc\CANlib.h: 863: RXF0SIDLbits.SID2 = 0x01 ;
 11831  001288  010F               	movlb	15	; () banked
 11832  00128A  8F01               	bsf	1,7,b	;volatile
 11833  00128C  D003               	goto	l4686
 11834  00128E                     l471:
 11835                           
 11836                           ; BSR set to: 0
 11837                           ;inc\CANlib.h: 864: else
 11838                           ;inc\CANlib.h: 865: RXF0SIDLbits.SID2 = 0x00 ;
 11839  00128E  010F               	movlb	15	; () banked
 11840  001290  9F01               	bcf	1,7,b	;volatile
 11841  001292  D000               	goto	l4686
 11842  001294                     l4686:
 11843                           
 11844                           ; BSR set to: 15
 11845                           ;inc\CANlib.h: 867: tamp = (filter >> 21);
 11846  001294  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11847  001298  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11848  00129C  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11849  0012A0  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11850  0012A4  0E16               	movlw	22
 11851  0012A6  D006               	goto	u5310
 11852  0012A8                     u5315:
 11853  0012A8  0100               	movlb	0	; () banked
 11854  0012AA  90D8               	bcf	status,0,c
 11855  0012AC  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11856  0012AE  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11857  0012B0  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11858  0012B2  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11859  0012B4                     u5310:
 11860  0012B4  2EE8               	decfsz	wreg,f,c
 11861  0012B6  D7F8               	goto	u5315
 11862  0012B8  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11863  0012BC  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11864  0012C0  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11865  0012C4  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11866                           
 11867                           ; BSR set to: 0
 11868                           ;inc\CANlib.h: 868: tamp = tamp & 0x000000FF;
 11869  0012C8  0100               	movlb	0	; () banked
 11870  0012CA  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11871  0012CC  0100               	movlb	0	; () banked
 11872  0012CE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11873  0012D0  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11874  0012D2  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11875  0012D4  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11876                           
 11877                           ; BSR set to: 0
 11878                           ;inc\CANlib.h: 869: RXF0SIDH = (unsigned char) tamp;
 11879  0012D6  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 11880  0012DA  D000               	goto	l4692
 11881  0012DC                     l4692:
 11882                           
 11883                           ; BSR set to: 0
 11884                           ;inc\CANlib.h: 870: }
 11885                           ;inc\CANlib.h: 872: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_XTD_MSG))
 11886  0012DC  0100               	movlb	0	; () banked
 11887  0012DE  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 11888  0012E0  A4D8               	btfss	status,2,c
 11889  0012E2  D08B               	goto	l4726
 11890                           
 11891                           ; BSR set to: 0
 11892  0012E4  0EF7               	movlw	247
 11893  0012E6  0100               	movlb	0	; () banked
 11894  0012E8  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 11895  0012EA  A4D8               	btfss	status,2,c
 11896  0012EC  D086               	goto	l4726
 11897                           
 11898                           ; BSR set to: 0
 11899                           ;inc\CANlib.h: 873: {
 11900                           ;inc\CANlib.h: 874: RXF1SIDLbits.EXIDEN = 0x01;
 11901  0012EE  010F               	movlb	15	; () banked
 11902  0012F0  8705               	bsf	5,3,b	;volatile
 11903                           
 11904                           ; BSR set to: 15
 11905                           ;inc\CANlib.h: 876: tamp = filter & 0x000000FF;
 11906  0012F2  0100               	movlb	0	; () banked
 11907  0012F4  5177               	movf	CANSetFilter@filter& (0+255),w,b
 11908  0012F6  0100               	movlb	0	; () banked
 11909  0012F8  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11910  0012FA  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11911  0012FC  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11912  0012FE  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11913                           
 11914                           ; BSR set to: 0
 11915                           ;inc\CANlib.h: 877: RXF1EIDL = (unsigned char) tamp;
 11916  001300  C081  FF07         	movff	CANSetFilter@tamp,3847	;volatile
 11917                           
 11918                           ; BSR set to: 0
 11919                           ;inc\CANlib.h: 879: tamp = filter & 0x0000FF00;
 11920  001304  0E00               	movlw	0
 11921  001306  0100               	movlb	0	; () banked
 11922  001308  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11923  00130A  0100               	movlb	0	; () banked
 11924  00130C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11925  00130E  0EFF               	movlw	255
 11926  001310  0100               	movlb	0	; () banked
 11927  001312  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11928  001314  0100               	movlb	0	; () banked
 11929  001316  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11930  001318  0E00               	movlw	0
 11931  00131A  0100               	movlb	0	; () banked
 11932  00131C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11933  00131E  0100               	movlb	0	; () banked
 11934  001320  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11935  001322  0E00               	movlw	0
 11936  001324  0100               	movlb	0	; () banked
 11937  001326  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11938  001328  0100               	movlb	0	; () banked
 11939  00132A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;inc\CANlib.h: 880: tamp = tamp >> 8;
 11943  00132C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11944  001330  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11945  001334  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11946  001338  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11947  00133C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 11948  001340  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 11949  001344  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 11950  001348  0100               	movlb	0	; () banked
 11951  00134A  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 11952  00134C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11953  001350  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11954  001354  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11955  001358  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11956                           
 11957                           ; BSR set to: 0
 11958                           ;inc\CANlib.h: 881: RXF1EIDH = (unsigned char) tamp;
 11959  00135C  C081  FF06         	movff	CANSetFilter@tamp,3846	;volatile
 11960                           
 11961                           ; BSR set to: 0
 11962                           ;inc\CANlib.h: 883: if (filter & 0x00010000)
 11963  001360  0100               	movlb	0	; () banked
 11964  001362  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 11965  001364  D003               	goto	l474
 11966                           
 11967                           ; BSR set to: 0
 11968                           ;inc\CANlib.h: 884: RXF1SIDLbits.EID16 = 0x01;
 11969  001366  010F               	movlb	15	; () banked
 11970  001368  8105               	bsf	5,0,b	;volatile
 11971  00136A  D002               	goto	l475
 11972  00136C                     l474:
 11973                           
 11974                           ; BSR set to: 0
 11975                           ;inc\CANlib.h: 885: else
 11976                           ;inc\CANlib.h: 886: RXF1SIDLbits.EID16 = 0x00;
 11977  00136C  010F               	movlb	15	; () banked
 11978  00136E  9105               	bcf	5,0,b	;volatile
 11979  001370                     l475:
 11980                           
 11981                           ; BSR set to: 15
 11982                           ;inc\CANlib.h: 888: if (filter & 0x00020000)
 11983  001370  0100               	movlb	0	; () banked
 11984  001372  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 11985  001374  D003               	goto	l476
 11986                           
 11987                           ; BSR set to: 0
 11988                           ;inc\CANlib.h: 889: RXF1SIDLbits.EID17 = 0x01;
 11989  001376  010F               	movlb	15	; () banked
 11990  001378  8305               	bsf	5,1,b	;volatile
 11991  00137A  D002               	goto	l477
 11992  00137C                     l476:
 11993                           
 11994                           ; BSR set to: 0
 11995                           ;inc\CANlib.h: 890: else
 11996                           ;inc\CANlib.h: 891: RXF1SIDLbits.EID17 = 0x00;
 11997  00137C  010F               	movlb	15	; () banked
 11998  00137E  9305               	bcf	5,1,b	;volatile
 11999  001380                     l477:
 12000                           
 12001                           ; BSR set to: 15
 12002                           ;inc\CANlib.h: 893: if (filter & 0x00040000)
 12003  001380  0100               	movlb	0	; () banked
 12004  001382  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12005  001384  D003               	goto	l478
 12006                           
 12007                           ; BSR set to: 0
 12008                           ;inc\CANlib.h: 894: RXF1SIDLbits.SID0 = 0x01;
 12009  001386  010F               	movlb	15	; () banked
 12010  001388  8B05               	bsf	5,5,b	;volatile
 12011  00138A  D002               	goto	l479
 12012  00138C                     l478:
 12013                           
 12014                           ; BSR set to: 0
 12015                           ;inc\CANlib.h: 895: else
 12016                           ;inc\CANlib.h: 896: RXF1SIDLbits.SID0 = 0x00;
 12017  00138C  010F               	movlb	15	; () banked
 12018  00138E  9B05               	bcf	5,5,b	;volatile
 12019  001390                     l479:
 12020                           
 12021                           ; BSR set to: 15
 12022                           ;inc\CANlib.h: 898: if (filter & 0x00080000)
 12023  001390  0100               	movlb	0	; () banked
 12024  001392  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12025  001394  D003               	goto	l480
 12026                           
 12027                           ; BSR set to: 0
 12028                           ;inc\CANlib.h: 899: RXF1SIDLbits.SID1 = 0x01;
 12029  001396  010F               	movlb	15	; () banked
 12030  001398  8D05               	bsf	5,6,b	;volatile
 12031  00139A  D002               	goto	l481
 12032  00139C                     l480:
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;inc\CANlib.h: 900: else
 12036                           ;inc\CANlib.h: 901: RXF1SIDLbits.SID1 = 0x00;
 12037  00139C  010F               	movlb	15	; () banked
 12038  00139E  9D05               	bcf	5,6,b	;volatile
 12039  0013A0                     l481:
 12040                           
 12041                           ; BSR set to: 15
 12042                           ;inc\CANlib.h: 903: if (filter & 0x00100000)
 12043  0013A0  0100               	movlb	0	; () banked
 12044  0013A2  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12045  0013A4  D003               	goto	l482
 12046                           
 12047                           ; BSR set to: 0
 12048                           ;inc\CANlib.h: 904: RXF1SIDLbits.SID2 = 0x01 ;
 12049  0013A6  010F               	movlb	15	; () banked
 12050  0013A8  8F05               	bsf	5,7,b	;volatile
 12051  0013AA  D003               	goto	l4720
 12052  0013AC                     l482:
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;inc\CANlib.h: 905: else
 12056                           ;inc\CANlib.h: 906: RXF1SIDLbits.SID2 = 0x00 ;
 12057  0013AC  010F               	movlb	15	; () banked
 12058  0013AE  9F05               	bcf	5,7,b	;volatile
 12059  0013B0  D000               	goto	l4720
 12060  0013B2                     l4720:
 12061                           
 12062                           ; BSR set to: 15
 12063                           ;inc\CANlib.h: 908: tamp = (filter >> 21);
 12064  0013B2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12065  0013B6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12066  0013BA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12067  0013BE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12068  0013C2  0E16               	movlw	22
 12069  0013C4  D006               	goto	u5390
 12070  0013C6                     u5395:
 12071  0013C6  0100               	movlb	0	; () banked
 12072  0013C8  90D8               	bcf	status,0,c
 12073  0013CA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12074  0013CC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12075  0013CE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12076  0013D0  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12077  0013D2                     u5390:
 12078  0013D2  2EE8               	decfsz	wreg,f,c
 12079  0013D4  D7F8               	goto	u5395
 12080  0013D6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12081  0013DA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12082  0013DE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12083  0013E2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12084                           
 12085                           ; BSR set to: 0
 12086                           ;inc\CANlib.h: 909: tamp = tamp & 0x000000FF;
 12087  0013E6  0100               	movlb	0	; () banked
 12088  0013E8  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12089  0013EA  0100               	movlb	0	; () banked
 12090  0013EC  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12091  0013EE  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12092  0013F0  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12093  0013F2  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12094                           
 12095                           ; BSR set to: 0
 12096                           ;inc\CANlib.h: 910: RXF1SIDH = (unsigned char) tamp;
 12097  0013F4  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 12098  0013F8  D000               	goto	l4726
 12099  0013FA                     l4726:
 12100                           
 12101                           ; BSR set to: 0
 12102                           ;inc\CANlib.h: 911: }
 12103                           ;inc\CANlib.h: 914: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_XTD_MSG))
 12104  0013FA  0E02               	movlw	2
 12105  0013FC  0100               	movlb	0	; () banked
 12106  0013FE  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12107  001400  A4D8               	btfss	status,2,c
 12108  001402  D08B               	goto	l4760
 12109                           
 12110                           ; BSR set to: 0
 12111  001404  0EF7               	movlw	247
 12112  001406  0100               	movlb	0	; () banked
 12113  001408  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12114  00140A  A4D8               	btfss	status,2,c
 12115  00140C  D086               	goto	l4760
 12116                           
 12117                           ; BSR set to: 0
 12118                           ;inc\CANlib.h: 915: {
 12119                           ;inc\CANlib.h: 916: RXF2SIDLbits.EXIDEN = 0x01;
 12120  00140E  010F               	movlb	15	; () banked
 12121  001410  8709               	bsf	9,3,b	;volatile
 12122                           
 12123                           ; BSR set to: 15
 12124                           ;inc\CANlib.h: 918: tamp = filter & 0x000000FF;
 12125  001412  0100               	movlb	0	; () banked
 12126  001414  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12127  001416  0100               	movlb	0	; () banked
 12128  001418  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12129  00141A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12130  00141C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12131  00141E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;inc\CANlib.h: 919: RXF2EIDL = (unsigned char) tamp;
 12135  001420  C081  FF0B         	movff	CANSetFilter@tamp,3851	;volatile
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;inc\CANlib.h: 921: tamp = filter & 0x0000FF00;
 12139  001424  0E00               	movlw	0
 12140  001426  0100               	movlb	0	; () banked
 12141  001428  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12142  00142A  0100               	movlb	0	; () banked
 12143  00142C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12144  00142E  0EFF               	movlw	255
 12145  001430  0100               	movlb	0	; () banked
 12146  001432  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12147  001434  0100               	movlb	0	; () banked
 12148  001436  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12149  001438  0E00               	movlw	0
 12150  00143A  0100               	movlb	0	; () banked
 12151  00143C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12152  00143E  0100               	movlb	0	; () banked
 12153  001440  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12154  001442  0E00               	movlw	0
 12155  001444  0100               	movlb	0	; () banked
 12156  001446  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12157  001448  0100               	movlb	0	; () banked
 12158  00144A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12159                           
 12160                           ; BSR set to: 0
 12161                           ;inc\CANlib.h: 922: tamp = tamp >> 8;
 12162  00144C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12163  001450  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12164  001454  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12165  001458  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12166  00145C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12167  001460  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12168  001464  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12169  001468  0100               	movlb	0	; () banked
 12170  00146A  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12171  00146C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12172  001470  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12173  001474  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12174  001478  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12175                           
 12176                           ; BSR set to: 0
 12177                           ;inc\CANlib.h: 923: RXF2EIDH = (unsigned char) tamp;
 12178  00147C  C081  FF0A         	movff	CANSetFilter@tamp,3850	;volatile
 12179                           
 12180                           ; BSR set to: 0
 12181                           ;inc\CANlib.h: 925: if (filter & 0x00010000)
 12182  001480  0100               	movlb	0	; () banked
 12183  001482  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12184  001484  D003               	goto	l485
 12185                           
 12186                           ; BSR set to: 0
 12187                           ;inc\CANlib.h: 926: RXF2SIDLbits.EID16 = 0x01;
 12188  001486  010F               	movlb	15	; () banked
 12189  001488  8109               	bsf	9,0,b	;volatile
 12190  00148A  D002               	goto	l486
 12191  00148C                     l485:
 12192                           
 12193                           ; BSR set to: 0
 12194                           ;inc\CANlib.h: 927: else
 12195                           ;inc\CANlib.h: 928: RXF2SIDLbits.EID16 = 0x00;
 12196  00148C  010F               	movlb	15	; () banked
 12197  00148E  9109               	bcf	9,0,b	;volatile
 12198  001490                     l486:
 12199                           
 12200                           ; BSR set to: 15
 12201                           ;inc\CANlib.h: 930: if (filter & 0x00020000)
 12202  001490  0100               	movlb	0	; () banked
 12203  001492  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12204  001494  D003               	goto	l487
 12205                           
 12206                           ; BSR set to: 0
 12207                           ;inc\CANlib.h: 931: RXF2SIDLbits.EID17 = 0x01;
 12208  001496  010F               	movlb	15	; () banked
 12209  001498  8309               	bsf	9,1,b	;volatile
 12210  00149A  D002               	goto	l488
 12211  00149C                     l487:
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;inc\CANlib.h: 932: else
 12215                           ;inc\CANlib.h: 933: RXF2SIDLbits.EID17 = 0x00;
 12216  00149C  010F               	movlb	15	; () banked
 12217  00149E  9309               	bcf	9,1,b	;volatile
 12218  0014A0                     l488:
 12219                           
 12220                           ; BSR set to: 15
 12221                           ;inc\CANlib.h: 935: if (filter & 0x00040000)
 12222  0014A0  0100               	movlb	0	; () banked
 12223  0014A2  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12224  0014A4  D003               	goto	l489
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;inc\CANlib.h: 936: RXF2SIDLbits.SID0 = 0x01;
 12228  0014A6  010F               	movlb	15	; () banked
 12229  0014A8  8B09               	bsf	9,5,b	;volatile
 12230  0014AA  D002               	goto	l490
 12231  0014AC                     l489:
 12232                           
 12233                           ; BSR set to: 0
 12234                           ;inc\CANlib.h: 937: else
 12235                           ;inc\CANlib.h: 938: RXF2SIDLbits.SID0 = 0x00;
 12236  0014AC  010F               	movlb	15	; () banked
 12237  0014AE  9B09               	bcf	9,5,b	;volatile
 12238  0014B0                     l490:
 12239                           
 12240                           ; BSR set to: 15
 12241                           ;inc\CANlib.h: 940: if (filter & 0x00080000)
 12242  0014B0  0100               	movlb	0	; () banked
 12243  0014B2  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12244  0014B4  D003               	goto	l491
 12245                           
 12246                           ; BSR set to: 0
 12247                           ;inc\CANlib.h: 941: RXF2SIDLbits.SID1 = 0x01;
 12248  0014B6  010F               	movlb	15	; () banked
 12249  0014B8  8D09               	bsf	9,6,b	;volatile
 12250  0014BA  D002               	goto	l492
 12251  0014BC                     l491:
 12252                           
 12253                           ; BSR set to: 0
 12254                           ;inc\CANlib.h: 942: else
 12255                           ;inc\CANlib.h: 943: RXF2SIDLbits.SID1 = 0x00;
 12256  0014BC  010F               	movlb	15	; () banked
 12257  0014BE  9D09               	bcf	9,6,b	;volatile
 12258  0014C0                     l492:
 12259                           
 12260                           ; BSR set to: 15
 12261                           ;inc\CANlib.h: 945: if (filter & 0x00100000)
 12262  0014C0  0100               	movlb	0	; () banked
 12263  0014C2  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12264  0014C4  D003               	goto	l493
 12265                           
 12266                           ; BSR set to: 0
 12267                           ;inc\CANlib.h: 946: RXF2SIDLbits.SID2 = 0x01 ;
 12268  0014C6  010F               	movlb	15	; () banked
 12269  0014C8  8F09               	bsf	9,7,b	;volatile
 12270  0014CA  D003               	goto	l4754
 12271  0014CC                     l493:
 12272                           
 12273                           ; BSR set to: 0
 12274                           ;inc\CANlib.h: 947: else
 12275                           ;inc\CANlib.h: 948: RXF2SIDLbits.SID2 = 0x00 ;
 12276  0014CC  010F               	movlb	15	; () banked
 12277  0014CE  9F09               	bcf	9,7,b	;volatile
 12278  0014D0  D000               	goto	l4754
 12279  0014D2                     l4754:
 12280                           
 12281                           ; BSR set to: 15
 12282                           ;inc\CANlib.h: 950: tamp = (filter >> 21);
 12283  0014D2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12284  0014D6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12285  0014DA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12286  0014DE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12287  0014E2  0E16               	movlw	22
 12288  0014E4  D006               	goto	u5470
 12289  0014E6                     u5475:
 12290  0014E6  0100               	movlb	0	; () banked
 12291  0014E8  90D8               	bcf	status,0,c
 12292  0014EA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12293  0014EC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12294  0014EE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12295  0014F0  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12296  0014F2                     u5470:
 12297  0014F2  2EE8               	decfsz	wreg,f,c
 12298  0014F4  D7F8               	goto	u5475
 12299  0014F6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12300  0014FA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12301  0014FE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12302  001502  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12303                           
 12304                           ; BSR set to: 0
 12305                           ;inc\CANlib.h: 951: tamp = tamp & 0x000000FF;
 12306  001506  0100               	movlb	0	; () banked
 12307  001508  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12308  00150A  0100               	movlb	0	; () banked
 12309  00150C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12310  00150E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12311  001510  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12312  001512  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12313                           
 12314                           ; BSR set to: 0
 12315                           ;inc\CANlib.h: 952: RXF2SIDH = (unsigned char) tamp;
 12316  001514  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 12317  001518  D000               	goto	l4760
 12318  00151A                     l4760:
 12319                           
 12320                           ; BSR set to: 0
 12321                           ;inc\CANlib.h: 953: }
 12322                           ;inc\CANlib.h: 955: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_XTD_MSG))
 12323  00151A  0E03               	movlw	3
 12324  00151C  0100               	movlb	0	; () banked
 12325  00151E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12326  001520  A4D8               	btfss	status,2,c
 12327  001522  D08B               	goto	l4794
 12328                           
 12329                           ; BSR set to: 0
 12330  001524  0EF7               	movlw	247
 12331  001526  0100               	movlb	0	; () banked
 12332  001528  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12333  00152A  A4D8               	btfss	status,2,c
 12334  00152C  D086               	goto	l4794
 12335                           
 12336                           ; BSR set to: 0
 12337                           ;inc\CANlib.h: 956: {
 12338                           ;inc\CANlib.h: 957: RXF3SIDLbits.EXIDEN = 0x01;
 12339  00152E  010F               	movlb	15	; () banked
 12340  001530  870D               	bsf	13,3,b	;volatile
 12341                           
 12342                           ; BSR set to: 15
 12343                           ;inc\CANlib.h: 959: tamp = filter & 0x000000FF;
 12344  001532  0100               	movlb	0	; () banked
 12345  001534  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12346  001536  0100               	movlb	0	; () banked
 12347  001538  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12348  00153A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12349  00153C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12350  00153E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12351                           
 12352                           ; BSR set to: 0
 12353                           ;inc\CANlib.h: 960: RXF3EIDL = (unsigned char) tamp;
 12354  001540  C081  FF0F         	movff	CANSetFilter@tamp,3855	;volatile
 12355                           
 12356                           ; BSR set to: 0
 12357                           ;inc\CANlib.h: 962: tamp = filter & 0x0000FF00;
 12358  001544  0E00               	movlw	0
 12359  001546  0100               	movlb	0	; () banked
 12360  001548  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12361  00154A  0100               	movlb	0	; () banked
 12362  00154C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12363  00154E  0EFF               	movlw	255
 12364  001550  0100               	movlb	0	; () banked
 12365  001552  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12366  001554  0100               	movlb	0	; () banked
 12367  001556  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12368  001558  0E00               	movlw	0
 12369  00155A  0100               	movlb	0	; () banked
 12370  00155C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12371  00155E  0100               	movlb	0	; () banked
 12372  001560  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12373  001562  0E00               	movlw	0
 12374  001564  0100               	movlb	0	; () banked
 12375  001566  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12376  001568  0100               	movlb	0	; () banked
 12377  00156A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12378                           
 12379                           ; BSR set to: 0
 12380                           ;inc\CANlib.h: 963: tamp = tamp >> 8;
 12381  00156C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12382  001570  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12383  001574  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12384  001578  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12385  00157C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12386  001580  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12387  001584  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12388  001588  0100               	movlb	0	; () banked
 12389  00158A  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12390  00158C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12391  001590  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12392  001594  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12393  001598  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12394                           
 12395                           ; BSR set to: 0
 12396                           ;inc\CANlib.h: 964: RXF3EIDH = (unsigned char) tamp;
 12397  00159C  C081  FF0E         	movff	CANSetFilter@tamp,3854	;volatile
 12398                           
 12399                           ; BSR set to: 0
 12400                           ;inc\CANlib.h: 966: if (filter & 0x00010000)
 12401  0015A0  0100               	movlb	0	; () banked
 12402  0015A2  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12403  0015A4  D003               	goto	l496
 12404                           
 12405                           ; BSR set to: 0
 12406                           ;inc\CANlib.h: 967: RXF3SIDLbits.EID16 = 0x01;
 12407  0015A6  010F               	movlb	15	; () banked
 12408  0015A8  810D               	bsf	13,0,b	;volatile
 12409  0015AA  D002               	goto	l497
 12410  0015AC                     l496:
 12411                           
 12412                           ; BSR set to: 0
 12413                           ;inc\CANlib.h: 968: else
 12414                           ;inc\CANlib.h: 969: RXF3SIDLbits.EID16 = 0x00;
 12415  0015AC  010F               	movlb	15	; () banked
 12416  0015AE  910D               	bcf	13,0,b	;volatile
 12417  0015B0                     l497:
 12418                           
 12419                           ; BSR set to: 15
 12420                           ;inc\CANlib.h: 971: if (filter & 0x00020000)
 12421  0015B0  0100               	movlb	0	; () banked
 12422  0015B2  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12423  0015B4  D003               	goto	l498
 12424                           
 12425                           ; BSR set to: 0
 12426                           ;inc\CANlib.h: 972: RXF3SIDLbits.EID17 = 0x01;
 12427  0015B6  010F               	movlb	15	; () banked
 12428  0015B8  830D               	bsf	13,1,b	;volatile
 12429  0015BA  D002               	goto	l499
 12430  0015BC                     l498:
 12431                           
 12432                           ; BSR set to: 0
 12433                           ;inc\CANlib.h: 973: else
 12434                           ;inc\CANlib.h: 974: RXF3SIDLbits.EID17 = 0x00;
 12435  0015BC  010F               	movlb	15	; () banked
 12436  0015BE  930D               	bcf	13,1,b	;volatile
 12437  0015C0                     l499:
 12438                           
 12439                           ; BSR set to: 15
 12440                           ;inc\CANlib.h: 976: if (filter & 0x00040000)
 12441  0015C0  0100               	movlb	0	; () banked
 12442  0015C2  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12443  0015C4  D003               	goto	l500
 12444                           
 12445                           ; BSR set to: 0
 12446                           ;inc\CANlib.h: 977: RXF3SIDLbits.SID0 = 0x01;
 12447  0015C6  010F               	movlb	15	; () banked
 12448  0015C8  8B0D               	bsf	13,5,b	;volatile
 12449  0015CA  D002               	goto	l501
 12450  0015CC                     l500:
 12451                           
 12452                           ; BSR set to: 0
 12453                           ;inc\CANlib.h: 978: else
 12454                           ;inc\CANlib.h: 979: RXF3SIDLbits.SID0 = 0x00;
 12455  0015CC  010F               	movlb	15	; () banked
 12456  0015CE  9B0D               	bcf	13,5,b	;volatile
 12457  0015D0                     l501:
 12458                           
 12459                           ; BSR set to: 15
 12460                           ;inc\CANlib.h: 981: if (filter & 0x00080000)
 12461  0015D0  0100               	movlb	0	; () banked
 12462  0015D2  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12463  0015D4  D003               	goto	l502
 12464                           
 12465                           ; BSR set to: 0
 12466                           ;inc\CANlib.h: 982: RXF3SIDLbits.SID1 = 0x01;
 12467  0015D6  010F               	movlb	15	; () banked
 12468  0015D8  8D0D               	bsf	13,6,b	;volatile
 12469  0015DA  D002               	goto	l503
 12470  0015DC                     l502:
 12471                           
 12472                           ; BSR set to: 0
 12473                           ;inc\CANlib.h: 983: else
 12474                           ;inc\CANlib.h: 984: RXF3SIDLbits.SID1 = 0x00;
 12475  0015DC  010F               	movlb	15	; () banked
 12476  0015DE  9D0D               	bcf	13,6,b	;volatile
 12477  0015E0                     l503:
 12478                           
 12479                           ; BSR set to: 15
 12480                           ;inc\CANlib.h: 986: if (filter & 0x00100000)
 12481  0015E0  0100               	movlb	0	; () banked
 12482  0015E2  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12483  0015E4  D003               	goto	l504
 12484                           
 12485                           ; BSR set to: 0
 12486                           ;inc\CANlib.h: 987: RXF3SIDLbits.SID2 = 0x01 ;
 12487  0015E6  010F               	movlb	15	; () banked
 12488  0015E8  8F0D               	bsf	13,7,b	;volatile
 12489  0015EA  D003               	goto	l4788
 12490  0015EC                     l504:
 12491                           
 12492                           ; BSR set to: 0
 12493                           ;inc\CANlib.h: 988: else
 12494                           ;inc\CANlib.h: 989: RXF3SIDLbits.SID2 = 0x00 ;
 12495  0015EC  010F               	movlb	15	; () banked
 12496  0015EE  9F0D               	bcf	13,7,b	;volatile
 12497  0015F0  D000               	goto	l4788
 12498  0015F2                     l4788:
 12499                           
 12500                           ; BSR set to: 15
 12501                           ;inc\CANlib.h: 991: tamp = (filter >> 21);
 12502  0015F2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12503  0015F6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12504  0015FA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12505  0015FE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12506  001602  0E16               	movlw	22
 12507  001604  D006               	goto	u5550
 12508  001606                     u5555:
 12509  001606  0100               	movlb	0	; () banked
 12510  001608  90D8               	bcf	status,0,c
 12511  00160A  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12512  00160C  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12513  00160E  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12514  001610  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12515  001612                     u5550:
 12516  001612  2EE8               	decfsz	wreg,f,c
 12517  001614  D7F8               	goto	u5555
 12518  001616  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12519  00161A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12520  00161E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12521  001622  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12522                           
 12523                           ; BSR set to: 0
 12524                           ;inc\CANlib.h: 992: tamp = tamp & 0x000000FF;
 12525  001626  0100               	movlb	0	; () banked
 12526  001628  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12527  00162A  0100               	movlb	0	; () banked
 12528  00162C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12529  00162E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12530  001630  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12531  001632  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12532                           
 12533                           ; BSR set to: 0
 12534                           ;inc\CANlib.h: 993: RXF3SIDH = (unsigned char) tamp;
 12535  001634  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 12536  001638  D000               	goto	l4794
 12537  00163A                     l4794:
 12538                           
 12539                           ; BSR set to: 0
 12540                           ;inc\CANlib.h: 994: }
 12541                           ;inc\CANlib.h: 996: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_XTD_MSG))
 12542  00163A  0E04               	movlw	4
 12543  00163C  0100               	movlb	0	; () banked
 12544  00163E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12545  001640  A4D8               	btfss	status,2,c
 12546  001642  D08B               	goto	l4828
 12547                           
 12548                           ; BSR set to: 0
 12549  001644  0EF7               	movlw	247
 12550  001646  0100               	movlb	0	; () banked
 12551  001648  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12552  00164A  A4D8               	btfss	status,2,c
 12553  00164C  D086               	goto	l4828
 12554                           
 12555                           ; BSR set to: 0
 12556                           ;inc\CANlib.h: 997: {
 12557                           ;inc\CANlib.h: 998: RXF4SIDLbits.EXIDEN = 0x01;
 12558  00164E  010F               	movlb	15	; () banked
 12559  001650  8711               	bsf	17,3,b	;volatile
 12560                           
 12561                           ; BSR set to: 15
 12562                           ;inc\CANlib.h: 1000: tamp = filter & 0x000000FF;
 12563  001652  0100               	movlb	0	; () banked
 12564  001654  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12565  001656  0100               	movlb	0	; () banked
 12566  001658  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12567  00165A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12568  00165C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12569  00165E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12570                           
 12571                           ; BSR set to: 0
 12572                           ;inc\CANlib.h: 1001: RXF4EIDL = (unsigned char) tamp;
 12573  001660  C081  FF13         	movff	CANSetFilter@tamp,3859	;volatile
 12574                           
 12575                           ; BSR set to: 0
 12576                           ;inc\CANlib.h: 1003: tamp = filter & 0x0000FF00;
 12577  001664  0E00               	movlw	0
 12578  001666  0100               	movlb	0	; () banked
 12579  001668  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12580  00166A  0100               	movlb	0	; () banked
 12581  00166C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12582  00166E  0EFF               	movlw	255
 12583  001670  0100               	movlb	0	; () banked
 12584  001672  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12585  001674  0100               	movlb	0	; () banked
 12586  001676  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12587  001678  0E00               	movlw	0
 12588  00167A  0100               	movlb	0	; () banked
 12589  00167C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12590  00167E  0100               	movlb	0	; () banked
 12591  001680  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12592  001682  0E00               	movlw	0
 12593  001684  0100               	movlb	0	; () banked
 12594  001686  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12595  001688  0100               	movlb	0	; () banked
 12596  00168A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12597                           
 12598                           ; BSR set to: 0
 12599                           ;inc\CANlib.h: 1004: tamp = tamp >> 8;
 12600  00168C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12601  001690  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12602  001694  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12603  001698  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12604  00169C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12605  0016A0  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12606  0016A4  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12607  0016A8  0100               	movlb	0	; () banked
 12608  0016AA  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12609  0016AC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12610  0016B0  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12611  0016B4  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12612  0016B8  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12613                           
 12614                           ; BSR set to: 0
 12615                           ;inc\CANlib.h: 1005: RXF4EIDH = (unsigned char) tamp;
 12616  0016BC  C081  FF12         	movff	CANSetFilter@tamp,3858	;volatile
 12617                           
 12618                           ; BSR set to: 0
 12619                           ;inc\CANlib.h: 1007: if (filter & 0x00010000)
 12620  0016C0  0100               	movlb	0	; () banked
 12621  0016C2  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12622  0016C4  D003               	goto	l507
 12623                           
 12624                           ; BSR set to: 0
 12625                           ;inc\CANlib.h: 1008: RXF4SIDLbits.EID16 = 0x01;
 12626  0016C6  010F               	movlb	15	; () banked
 12627  0016C8  8111               	bsf	17,0,b	;volatile
 12628  0016CA  D002               	goto	l508
 12629  0016CC                     l507:
 12630                           
 12631                           ; BSR set to: 0
 12632                           ;inc\CANlib.h: 1009: else
 12633                           ;inc\CANlib.h: 1010: RXF4SIDLbits.EID16 = 0x00;
 12634  0016CC  010F               	movlb	15	; () banked
 12635  0016CE  9111               	bcf	17,0,b	;volatile
 12636  0016D0                     l508:
 12637                           
 12638                           ; BSR set to: 15
 12639                           ;inc\CANlib.h: 1012: if (filter & 0x00020000)
 12640  0016D0  0100               	movlb	0	; () banked
 12641  0016D2  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12642  0016D4  D003               	goto	l509
 12643                           
 12644                           ; BSR set to: 0
 12645                           ;inc\CANlib.h: 1013: RXF4SIDLbits.EID17 = 0x01;
 12646  0016D6  010F               	movlb	15	; () banked
 12647  0016D8  8311               	bsf	17,1,b	;volatile
 12648  0016DA  D002               	goto	l510
 12649  0016DC                     l509:
 12650                           
 12651                           ; BSR set to: 0
 12652                           ;inc\CANlib.h: 1014: else
 12653                           ;inc\CANlib.h: 1015: RXF4SIDLbits.EID17 = 0x00;
 12654  0016DC  010F               	movlb	15	; () banked
 12655  0016DE  9311               	bcf	17,1,b	;volatile
 12656  0016E0                     l510:
 12657                           
 12658                           ; BSR set to: 15
 12659                           ;inc\CANlib.h: 1017: if (filter & 0x00040000)
 12660  0016E0  0100               	movlb	0	; () banked
 12661  0016E2  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12662  0016E4  D003               	goto	l511
 12663                           
 12664                           ; BSR set to: 0
 12665                           ;inc\CANlib.h: 1018: RXF4SIDLbits.SID0 = 0x01;
 12666  0016E6  010F               	movlb	15	; () banked
 12667  0016E8  8B11               	bsf	17,5,b	;volatile
 12668  0016EA  D002               	goto	l512
 12669  0016EC                     l511:
 12670                           
 12671                           ; BSR set to: 0
 12672                           ;inc\CANlib.h: 1019: else
 12673                           ;inc\CANlib.h: 1020: RXF4SIDLbits.SID0 = 0x00;
 12674  0016EC  010F               	movlb	15	; () banked
 12675  0016EE  9B11               	bcf	17,5,b	;volatile
 12676  0016F0                     l512:
 12677                           
 12678                           ; BSR set to: 15
 12679                           ;inc\CANlib.h: 1022: if (filter & 0x00080000)
 12680  0016F0  0100               	movlb	0	; () banked
 12681  0016F2  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12682  0016F4  D003               	goto	l513
 12683                           
 12684                           ; BSR set to: 0
 12685                           ;inc\CANlib.h: 1023: RXF4SIDLbits.SID1 = 0x01;
 12686  0016F6  010F               	movlb	15	; () banked
 12687  0016F8  8D11               	bsf	17,6,b	;volatile
 12688  0016FA  D002               	goto	l514
 12689  0016FC                     l513:
 12690                           
 12691                           ; BSR set to: 0
 12692                           ;inc\CANlib.h: 1024: else
 12693                           ;inc\CANlib.h: 1025: RXF4SIDLbits.SID1 = 0x00;
 12694  0016FC  010F               	movlb	15	; () banked
 12695  0016FE  9D11               	bcf	17,6,b	;volatile
 12696  001700                     l514:
 12697                           
 12698                           ; BSR set to: 15
 12699                           ;inc\CANlib.h: 1027: if (filter & 0x00100000)
 12700  001700  0100               	movlb	0	; () banked
 12701  001702  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12702  001704  D003               	goto	l515
 12703                           
 12704                           ; BSR set to: 0
 12705                           ;inc\CANlib.h: 1028: RXF4SIDLbits.SID2 = 0x01 ;
 12706  001706  010F               	movlb	15	; () banked
 12707  001708  8F11               	bsf	17,7,b	;volatile
 12708  00170A  D003               	goto	l4822
 12709  00170C                     l515:
 12710                           
 12711                           ; BSR set to: 0
 12712                           ;inc\CANlib.h: 1029: else
 12713                           ;inc\CANlib.h: 1030: RXF4SIDLbits.SID2 = 0x00 ;
 12714  00170C  010F               	movlb	15	; () banked
 12715  00170E  9F11               	bcf	17,7,b	;volatile
 12716  001710  D000               	goto	l4822
 12717  001712                     l4822:
 12718                           
 12719                           ; BSR set to: 15
 12720                           ;inc\CANlib.h: 1032: tamp = (filter >> 21);
 12721  001712  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12722  001716  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12723  00171A  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12724  00171E  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12725  001722  0E16               	movlw	22
 12726  001724  D006               	goto	u5630
 12727  001726                     u5635:
 12728  001726  0100               	movlb	0	; () banked
 12729  001728  90D8               	bcf	status,0,c
 12730  00172A  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12731  00172C  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12732  00172E  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12733  001730  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12734  001732                     u5630:
 12735  001732  2EE8               	decfsz	wreg,f,c
 12736  001734  D7F8               	goto	u5635
 12737  001736  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12738  00173A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12739  00173E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12740  001742  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12741                           
 12742                           ; BSR set to: 0
 12743                           ;inc\CANlib.h: 1033: tamp = tamp & 0x000000FF;
 12744  001746  0100               	movlb	0	; () banked
 12745  001748  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12746  00174A  0100               	movlb	0	; () banked
 12747  00174C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12748  00174E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12749  001750  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12750  001752  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12751                           
 12752                           ; BSR set to: 0
 12753                           ;inc\CANlib.h: 1034: RXF4SIDH = (unsigned char) tamp;
 12754  001754  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 12755  001758  D000               	goto	l4828
 12756  00175A                     l4828:
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;inc\CANlib.h: 1035: }
 12760                           ;inc\CANlib.h: 1037: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_XTD_MSG))
 12761  00175A  0E05               	movlw	5
 12762  00175C  0100               	movlb	0	; () banked
 12763  00175E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12764  001760  A4D8               	btfss	status,2,c
 12765  001762  0012               	return	
 12766                           
 12767                           ; BSR set to: 0
 12768  001764  0EF7               	movlw	247
 12769  001766  0100               	movlb	0	; () banked
 12770  001768  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12771  00176A  A4D8               	btfss	status,2,c
 12772  00176C  0012               	return	
 12773                           
 12774                           ; BSR set to: 0
 12775                           ;inc\CANlib.h: 1038: {
 12776                           ;inc\CANlib.h: 1039: RXF5SIDLbits.EXIDEN = 0x01;
 12777  00176E  010F               	movlb	15	; () banked
 12778  001770  8715               	bsf	21,3,b	;volatile
 12779                           
 12780                           ; BSR set to: 15
 12781                           ;inc\CANlib.h: 1041: tamp = filter & 0x000000FF;
 12782  001772  0100               	movlb	0	; () banked
 12783  001774  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12784  001776  0100               	movlb	0	; () banked
 12785  001778  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12786  00177A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12787  00177C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12788  00177E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12789                           
 12790                           ; BSR set to: 0
 12791                           ;inc\CANlib.h: 1042: RXF5EIDL = (unsigned char) tamp;
 12792  001780  C081  FF17         	movff	CANSetFilter@tamp,3863	;volatile
 12793                           
 12794                           ; BSR set to: 0
 12795                           ;inc\CANlib.h: 1044: tamp = filter & 0x0000FF00;
 12796  001784  0E00               	movlw	0
 12797  001786  0100               	movlb	0	; () banked
 12798  001788  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12799  00178A  0100               	movlb	0	; () banked
 12800  00178C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12801  00178E  0EFF               	movlw	255
 12802  001790  0100               	movlb	0	; () banked
 12803  001792  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12804  001794  0100               	movlb	0	; () banked
 12805  001796  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12806  001798  0E00               	movlw	0
 12807  00179A  0100               	movlb	0	; () banked
 12808  00179C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12809  00179E  0100               	movlb	0	; () banked
 12810  0017A0  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12811  0017A2  0E00               	movlw	0
 12812  0017A4  0100               	movlb	0	; () banked
 12813  0017A6  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12814  0017A8  0100               	movlb	0	; () banked
 12815  0017AA  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12816                           
 12817                           ; BSR set to: 0
 12818                           ;inc\CANlib.h: 1045: tamp = tamp >> 8;
 12819  0017AC  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12820  0017B0  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12821  0017B4  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12822  0017B8  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12823  0017BC  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12824  0017C0  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12825  0017C4  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12826  0017C8  0100               	movlb	0	; () banked
 12827  0017CA  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12828  0017CC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12829  0017D0  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12830  0017D4  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12831  0017D8  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12832                           
 12833                           ; BSR set to: 0
 12834                           ;inc\CANlib.h: 1046: RXF5EIDH = (unsigned char) tamp;
 12835  0017DC  C081  FF16         	movff	CANSetFilter@tamp,3862	;volatile
 12836                           
 12837                           ; BSR set to: 0
 12838                           ;inc\CANlib.h: 1048: if (filter & 0x00010000)
 12839  0017E0  0100               	movlb	0	; () banked
 12840  0017E2  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12841  0017E4  D003               	goto	l518
 12842                           
 12843                           ; BSR set to: 0
 12844                           ;inc\CANlib.h: 1049: RXF5SIDLbits.EID16 = 0x01;
 12845  0017E6  010F               	movlb	15	; () banked
 12846  0017E8  8115               	bsf	21,0,b	;volatile
 12847  0017EA  D002               	goto	l519
 12848  0017EC                     l518:
 12849                           
 12850                           ; BSR set to: 0
 12851                           ;inc\CANlib.h: 1050: else
 12852                           ;inc\CANlib.h: 1051: RXF5SIDLbits.EID16 = 0x00;
 12853  0017EC  010F               	movlb	15	; () banked
 12854  0017EE  9115               	bcf	21,0,b	;volatile
 12855  0017F0                     l519:
 12856                           
 12857                           ; BSR set to: 15
 12858                           ;inc\CANlib.h: 1053: if (filter & 0x00020000)
 12859  0017F0  0100               	movlb	0	; () banked
 12860  0017F2  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12861  0017F4  D003               	goto	l520
 12862                           
 12863                           ; BSR set to: 0
 12864                           ;inc\CANlib.h: 1054: RXF5SIDLbits.EID17 = 0x01;
 12865  0017F6  010F               	movlb	15	; () banked
 12866  0017F8  8315               	bsf	21,1,b	;volatile
 12867  0017FA  D002               	goto	l521
 12868  0017FC                     l520:
 12869                           
 12870                           ; BSR set to: 0
 12871                           ;inc\CANlib.h: 1055: else
 12872                           ;inc\CANlib.h: 1056: RXF5SIDLbits.EID17 = 0x00;
 12873  0017FC  010F               	movlb	15	; () banked
 12874  0017FE  9315               	bcf	21,1,b	;volatile
 12875  001800                     l521:
 12876                           
 12877                           ; BSR set to: 15
 12878                           ;inc\CANlib.h: 1058: if (filter & 0x00040000)
 12879  001800  0100               	movlb	0	; () banked
 12880  001802  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12881  001804  D003               	goto	l522
 12882                           
 12883                           ; BSR set to: 0
 12884                           ;inc\CANlib.h: 1059: RXF5SIDLbits.SID0 = 0x01;
 12885  001806  010F               	movlb	15	; () banked
 12886  001808  8B15               	bsf	21,5,b	;volatile
 12887  00180A  D002               	goto	l523
 12888  00180C                     l522:
 12889                           
 12890                           ; BSR set to: 0
 12891                           ;inc\CANlib.h: 1060: else
 12892                           ;inc\CANlib.h: 1061: RXF5SIDLbits.SID0 = 0x00;
 12893  00180C  010F               	movlb	15	; () banked
 12894  00180E  9B15               	bcf	21,5,b	;volatile
 12895  001810                     l523:
 12896                           
 12897                           ; BSR set to: 15
 12898                           ;inc\CANlib.h: 1063: if (filter & 0x00080000)
 12899  001810  0100               	movlb	0	; () banked
 12900  001812  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12901  001814  D003               	goto	l524
 12902                           
 12903                           ; BSR set to: 0
 12904                           ;inc\CANlib.h: 1064: RXF5SIDLbits.SID1 = 0x01;
 12905  001816  010F               	movlb	15	; () banked
 12906  001818  8D15               	bsf	21,6,b	;volatile
 12907  00181A  D002               	goto	l525
 12908  00181C                     l524:
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;inc\CANlib.h: 1065: else
 12912                           ;inc\CANlib.h: 1066: RXF5SIDLbits.SID1 = 0x00;
 12913  00181C  010F               	movlb	15	; () banked
 12914  00181E  9D15               	bcf	21,6,b	;volatile
 12915  001820                     l525:
 12916                           
 12917                           ; BSR set to: 15
 12918                           ;inc\CANlib.h: 1068: if (filter & 0x00100000)
 12919  001820  0100               	movlb	0	; () banked
 12920  001822  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12921  001824  D003               	goto	l526
 12922                           
 12923                           ; BSR set to: 0
 12924                           ;inc\CANlib.h: 1069: RXF5SIDLbits.SID2 = 0x01 ;
 12925  001826  010F               	movlb	15	; () banked
 12926  001828  8F15               	bsf	21,7,b	;volatile
 12927  00182A  D003               	goto	l4856
 12928  00182C                     l526:
 12929                           
 12930                           ; BSR set to: 0
 12931                           ;inc\CANlib.h: 1070: else
 12932                           ;inc\CANlib.h: 1071: RXF5SIDLbits.SID2 = 0x00 ;
 12933  00182C  010F               	movlb	15	; () banked
 12934  00182E  9F15               	bcf	21,7,b	;volatile
 12935  001830  D000               	goto	l4856
 12936  001832                     l4856:
 12937                           
 12938                           ; BSR set to: 15
 12939                           ;inc\CANlib.h: 1073: tamp = (filter >> 21);
 12940  001832  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12941  001836  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12942  00183A  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12943  00183E  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12944  001842  0E16               	movlw	22
 12945  001844  D006               	goto	u5710
 12946  001846                     u5715:
 12947  001846  0100               	movlb	0	; () banked
 12948  001848  90D8               	bcf	status,0,c
 12949  00184A  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12950  00184C  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12951  00184E  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12952  001850  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12953  001852                     u5710:
 12954  001852  2EE8               	decfsz	wreg,f,c
 12955  001854  D7F8               	goto	u5715
 12956  001856  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12957  00185A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12958  00185E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12959  001862  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12960                           
 12961                           ; BSR set to: 0
 12962                           ;inc\CANlib.h: 1074: tamp = tamp & 0x000000FF;
 12963  001866  0100               	movlb	0	; () banked
 12964  001868  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12965  00186A  0100               	movlb	0	; () banked
 12966  00186C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12967  00186E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12968  001870  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12969  001872  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12970                           
 12971                           ; BSR set to: 0
 12972                           ;inc\CANlib.h: 1075: RXF5SIDH = (unsigned char) tamp;
 12973  001874  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 12974  001878  0012               	return	
 12975                           
 12976                           ; BSR set to: 0
 12977                           
 12978                           ; BSR set to: 0
 12979  00187A  0012               	return		;funcret
 12980  00187C                     __end_of_CANSetFilter:
 12981                           	opt stack 0
 12982                           tblptru	equ	0xFF8
 12983                           tblptrh	equ	0xFF7
 12984                           tblptrl	equ	0xFF6
 12985                           tablat	equ	0xFF5
 12986                           prodh	equ	0xFF4
 12987                           prodl	equ	0xFF3
 12988                           intcon	equ	0xFF2
 12989                           intcon2	equ	0xFF1
 12990                           postinc0	equ	0xFEE
 12991                           wreg	equ	0xFE8
 12992                           postdec1	equ	0xFE5
 12993                           fsr1l	equ	0xFE1
 12994                           indf2	equ	0xFDF
 12995                           postinc2	equ	0xFDE
 12996                           postdec2	equ	0xFDD
 12997                           fsr2h	equ	0xFDA
 12998                           fsr2l	equ	0xFD9
 12999                           status	equ	0xFD8
 13000                           
 13001 ;; *************** function _CANOperationMode *****************
 13002 ;; Defined at:
 13003 ;;		line 206 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 13004 ;; Parameters:    Size  Location     Type
 13005 ;;  mode            1    wreg     enum E16348
 13006 ;; Auto vars:     Size  Location     Type
 13007 ;;  mode            1   23[BANK0 ] enum E16348
 13008 ;; Return value:  Size  Location     Type
 13009 ;;		None               void
 13010 ;; Registers used:
 13011 ;;		wreg, status,2, status,0
 13012 ;; Tracked objects:
 13013 ;;		On entry : 0/0
 13014 ;;		On exit  : 0/0
 13015 ;;		Unchanged: 0/0
 13016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13020 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;Total ram usage:        1 bytes
 13022 ;; Hardware stack levels used:    1
 13023 ;; Hardware stack levels required when called:    5
 13024 ;; This function calls:
 13025 ;;		Nothing
 13026 ;; This function is called by:
 13027 ;;		_CANInitialize
 13028 ;; This function uses a non-reentrant model
 13029 ;;
 13030                           
 13031                           	psect	text36
 13032  005DF0                     __ptext36:
 13033                           	opt stack 0
 13034  005DF0                     _CANOperationMode:
 13035                           	opt stack 23
 13036                           
 13037                           ; BSR set to: 0
 13038                           ;incstack = 0
 13039                           ;CANOperationMode@mode stored from wreg
 13040  005DF0  0100               	movlb	0	; () banked
 13041  005DF2  6F77               	movwf	CANOperationMode@mode& (0+255),b
 13042                           
 13043                           ; BSR set to: 0
 13044                           ;inc\CANlib.h: 208: CANCON = mode;
 13045  005DF4  C077  FF6F         	movff	CANOperationMode@mode,3951	;volatile
 13046                           
 13047                           ; BSR set to: 0
 13048                           
 13049                           ;inc\CANlib.h: 210: while((CANSTAT & 0b11100000) != mode );
 13050  005DF8  D000               	goto	l4452
 13051  005DFA                     l4452:
 13052                           
 13053                           ; BSR set to: 0
 13054  005DFA  506E               	movf	3950,w,c	;volatile
 13055  005DFC  0BE0               	andlw	224
 13056  005DFE  0100               	movlb	0	; () banked
 13057  005E00  1977               	xorwf	CANOperationMode@mode& (0+255),w,b
 13058  005E02  A4D8               	btfss	status,2,c
 13059  005E04  D7FA               	goto	l4452
 13060                           
 13061                           ; BSR set to: 0
 13062                           
 13063                           ; BSR set to: 0
 13064  005E06  0012               	return		;funcret
 13065  005E08                     __end_of_CANOperationMode:
 13066                           	opt stack 0
 13067                           tblptru	equ	0xFF8
 13068                           tblptrh	equ	0xFF7
 13069                           tblptrl	equ	0xFF6
 13070                           tablat	equ	0xFF5
 13071                           prodh	equ	0xFF4
 13072                           prodl	equ	0xFF3
 13073                           intcon	equ	0xFF2
 13074                           intcon2	equ	0xFF1
 13075                           postinc0	equ	0xFEE
 13076                           wreg	equ	0xFE8
 13077                           postdec1	equ	0xFE5
 13078                           fsr1l	equ	0xFE1
 13079                           indf2	equ	0xFDF
 13080                           postinc2	equ	0xFDE
 13081                           postdec2	equ	0xFDD
 13082                           fsr2h	equ	0xFDA
 13083                           fsr2l	equ	0xFD9
 13084                           status	equ	0xFD8
 13085                           
 13086 ;; *************** function _can_interpreter *****************
 13087 ;; Defined at:
 13088 ;;		line 488 in file "parcheggio.c"
 13089 ;; Parameters:    Size  Location     Type
 13090 ;;		None
 13091 ;; Auto vars:     Size  Location     Type
 13092 ;;		None
 13093 ;; Return value:  Size  Location     Type
 13094 ;;		None               void
 13095 ;; Registers used:
 13096 ;;		wreg, status,2, status,0
 13097 ;; Tracked objects:
 13098 ;;		On entry : 0/0
 13099 ;;		On exit  : 0/0
 13100 ;;		Unchanged: 0/0
 13101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13104 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13105 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13106 ;;Total ram usage:        4 bytes
 13107 ;; Hardware stack levels used:    1
 13108 ;; Hardware stack levels required when called:    5
 13109 ;; This function calls:
 13110 ;;		Nothing
 13111 ;; This function is called by:
 13112 ;;		_main
 13113 ;; This function uses a non-reentrant model
 13114 ;;
 13115                           
 13116                           	psect	text37
 13117  005B52                     __ptext37:
 13118                           	opt stack 0
 13119  005B52                     _can_interpreter:
 13120                           	opt stack 25
 13121                           
 13122                           ;parcheggio.c: 489: left_speed = data_speed_rx[1];
 13123                           
 13124                           ; BSR set to: 0
 13125                           ;incstack = 0
 13126  005B52  C101  F01D         	movff	_data_speed_rx+1,_left_speed
 13127  005B56  6A1E               	clrf	_left_speed+1,c
 13128                           
 13129                           ;parcheggio.c: 490: left_speed = ((left_speed << 8) | (data_speed_rx[0]));
 13130  005B58  501D               	movf	_left_speed,w,c
 13131  005B5A  0100               	movlb	0	; () banked
 13132  005B5C  6F77               	movwf	??_can_interpreter& (0+255),b
 13133  005B5E  0101               	movlb	1	; () banked
 13134  005B60  5100               	movf	_data_speed_rx& (0+255),w,b
 13135  005B62  6E1D               	movwf	_left_speed,c
 13136  005B64  C077  F01E         	movff	??_can_interpreter,_left_speed+1
 13137                           
 13138                           ; BSR set to: 1
 13139                           ;parcheggio.c: 491: right_speed = data_speed_rx[3];
 13140  005B68  C103  F021         	movff	_data_speed_rx+3,_right_speed
 13141  005B6C  6A22               	clrf	_right_speed+1,c
 13142                           
 13143                           ;parcheggio.c: 492: right_speed = ((right_speed << 8) | (data_speed_rx[2]));
 13144  005B6E  5021               	movf	_right_speed,w,c
 13145  005B70  0100               	movlb	0	; () banked
 13146  005B72  6F77               	movwf	??_can_interpreter& (0+255),b
 13147  005B74  0101               	movlb	1	; () banked
 13148  005B76  5102               	movf	(_data_speed_rx+2)& (0+255),w,b
 13149  005B78  6E21               	movwf	_right_speed,c
 13150  005B7A  C077  F022         	movff	??_can_interpreter,_right_speed+1
 13151                           
 13152                           ; BSR set to: 1
 13153                           ;parcheggio.c: 493: actual_speed = (right_speed + left_speed) / 2;
 13154  005B7E  501D               	movf	_left_speed,w,c
 13155  005B80  2421               	addwf	_right_speed,w,c
 13156  005B82  0100               	movlb	0	; () banked
 13157  005B84  6F77               	movwf	??_can_interpreter& (0+255),b
 13158  005B86  501E               	movf	_left_speed+1,w,c
 13159  005B88  2022               	addwfc	_right_speed+1,w,c
 13160  005B8A  0100               	movlb	0	; () banked
 13161  005B8C  6F78               	movwf	(??_can_interpreter+1)& (0+255),b
 13162  005B8E  90D8               	bcf	status,0,c
 13163  005B90  0100               	movlb	0	; () banked
 13164  005B92  3178               	rrcf	(??_can_interpreter+1)& (0+255),w,b
 13165  005B94  0100               	movlb	0	; () banked
 13166  005B96  6F79               	movwf	(??_can_interpreter+2)& (0+255),b
 13167  005B98  0100               	movlb	0	; () banked
 13168  005B9A  3177               	rrcf	??_can_interpreter& (0+255),w,b
 13169  005B9C  0100               	movlb	0	; () banked
 13170  005B9E  6FDF               	movwf	_actual_speed& (0+255),b
 13171  005BA0  C079  F0E0         	movff	??_can_interpreter+2,_actual_speed+1
 13172                           
 13173                           ; BSR set to: 0
 13174  005BA4  0012               	return		;funcret
 13175  005BA6                     __end_of_can_interpreter:
 13176                           	opt stack 0
 13177                           tblptru	equ	0xFF8
 13178                           tblptrh	equ	0xFF7
 13179                           tblptrl	equ	0xFF6
 13180                           tablat	equ	0xFF5
 13181                           prodh	equ	0xFF4
 13182                           prodl	equ	0xFF3
 13183                           intcon	equ	0xFF2
 13184                           intcon2	equ	0xFF1
 13185                           postinc0	equ	0xFEE
 13186                           wreg	equ	0xFE8
 13187                           postdec1	equ	0xFE5
 13188                           fsr1l	equ	0xFE1
 13189                           indf2	equ	0xFDF
 13190                           postinc2	equ	0xFDE
 13191                           postdec2	equ	0xFDD
 13192                           fsr2h	equ	0xFDA
 13193                           fsr2l	equ	0xFD9
 13194                           status	equ	0xFD8
 13195                           
 13196 ;; *************** function _ISR_Bassa *****************
 13197 ;; Defined at:
 13198 ;;		line 124 in file "parcheggio.c"
 13199 ;; Parameters:    Size  Location     Type
 13200 ;;		None
 13201 ;; Auto vars:     Size  Location     Type
 13202 ;;  i               1   40[COMRAM] unsigned char 
 13203 ;;  MUX_index_co    2   37[COMRAM] unsigned char [2]
 13204 ;;  PORTA_temp      1   39[COMRAM] unsigned char 
 13205 ;; Return value:  Size  Location     Type
 13206 ;;		None               void
 13207 ;; Registers used:
 13208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13209 ;; Tracked objects:
 13210 ;;		On entry : 0/0
 13211 ;;		On exit  : 0/0
 13212 ;;		Unchanged: 0/0
 13213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13215 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13216 ;;      Temps:         21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13217 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13218 ;;Total ram usage:       25 bytes
 13219 ;; Hardware stack levels used:    1
 13220 ;; Hardware stack levels required when called:    4
 13221 ;; This function calls:
 13222 ;;		_CANreceiveMessage
 13223 ;;		i1_CANsendMessage
 13224 ;;		i1_delay_ms
 13225 ;; This function is called by:
 13226 ;;		Interrupt level 1
 13227 ;; This function uses a non-reentrant model
 13228 ;;
 13229                           
 13230                           	psect	intcodelo
 13231  000018                     __pintcodelo:
 13232                           	opt stack 0
 13233  000018                     _ISR_Bassa:
 13234                           	opt stack 19
 13235                           
 13236                           ; BSR set to: 0
 13237                           ;incstack = 0
 13238  000018  CFD8 F03E          	movff	status,??_ISR_Bassa+4
 13239  00001C  CFE8 F03F          	movff	wreg,??_ISR_Bassa+5
 13240  000020  CFE0 F040          	movff	bsr,??_ISR_Bassa+6
 13241  000024  CFFA F041          	movff	pclath,??_ISR_Bassa+7
 13242  000028  CFFB F042          	movff	pclatu,??_ISR_Bassa+8
 13243  00002C  CFE9 F043          	movff	fsr0l,??_ISR_Bassa+9
 13244  000030  CFEA F044          	movff	fsr0h,??_ISR_Bassa+10
 13245  000034  CFE1 F045          	movff	fsr1l,??_ISR_Bassa+11
 13246  000038  CFE2 F046          	movff	fsr1h,??_ISR_Bassa+12
 13247  00003C  CFD9 F047          	movff	fsr2l,??_ISR_Bassa+13
 13248  000040  CFDA F048          	movff	fsr2h,??_ISR_Bassa+14
 13249  000044  CFF3 F049          	movff	prodl,??_ISR_Bassa+15
 13250  000048  CFF4 F04A          	movff	prodh,??_ISR_Bassa+16
 13251  00004C  CFF6 F04B          	movff	tblptrl,??_ISR_Bassa+17
 13252  000050  CFF7 F04C          	movff	tblptrh,??_ISR_Bassa+18
 13253  000054  CFF8 F04D          	movff	tblptru,??_ISR_Bassa+19
 13254  000058  CFF5 F04E          	movff	tablat,??_ISR_Bassa+20
 13255                           
 13256                           ;parcheggio.c: 127: if (INTCONbits.TMR0IF == 1) {
 13257  00005C  A4F2               	btfss	intcon,2,c	;volatile
 13258  00005E  D0AE               	goto	i1l5856
 13259                           
 13260                           ;parcheggio.c: 128: INTCONbits.INT0IE = 0;
 13261  000060  98F2               	bcf	intcon,4,c	;volatile
 13262                           
 13263                           ;parcheggio.c: 129: T0CONbits.TMR0ON = 0;
 13264  000062  9ED5               	bcf	4053,7,c	;volatile
 13265                           
 13266                           ;parcheggio.c: 130: TMR0H = 0x34;
 13267  000064  0E34               	movlw	52
 13268  000066  6ED7               	movwf	4055,c	;volatile
 13269                           
 13270                           ;parcheggio.c: 131: TMR0L = 0xE0;
 13271  000068  0EE0               	movlw	224
 13272  00006A  6ED6               	movwf	4054,c	;volatile
 13273                           
 13274                           ;parcheggio.c: 132: T0CONbits.TMR0ON = 1;
 13275  00006C  8ED5               	bsf	4053,7,c	;volatile
 13276                           
 13277                           ;parcheggio.c: 134: if (distance_error == 1) {
 13278  00006E  AA53               	btfss	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13279  000070  D00C               	goto	i1l708
 13280                           
 13281                           ;parcheggio.c: 135: sensor_distance[MUX_index] = 5000;
 13282  000072  5025               	movf	_MUX_index,w,c	;volatile
 13283  000074  0D02               	mullw	2
 13284  000076  0E01               	movlw	low _sensor_distance
 13285  000078  24F3               	addwf	prodl,w,c
 13286  00007A  6ED9               	movwf	fsr2l,c
 13287  00007C  0E00               	movlw	high _sensor_distance
 13288  00007E  20F4               	addwfc	prodh,w,c
 13289  000080  6EDA               	movwf	fsr2h,c
 13290  000082  0E88               	movlw	136
 13291  000084  6EDE               	movwf	postinc2,c
 13292  000086  0E13               	movlw	19
 13293  000088  6EDD               	movwf	postdec2,c
 13294  00008A                     i1l708:
 13295                           
 13296                           ;parcheggio.c: 136: }
 13297                           ;parcheggio.c: 138: if ((sensor_distance[MUX_index] < 250)&&(start_operation == 0)&&((MU
      +                          X_index == 3) || (MUX_index == 6))) {
 13298  00008A  5025               	movf	_MUX_index,w,c	;volatile
 13299  00008C  0D02               	mullw	2
 13300  00008E  0E01               	movlw	low _sensor_distance
 13301  000090  24F3               	addwf	prodl,w,c
 13302  000092  6ED9               	movwf	fsr2l,c
 13303  000094  0E00               	movlw	high _sensor_distance
 13304  000096  20F4               	addwfc	prodh,w,c
 13305  000098  6EDA               	movwf	fsr2h,c
 13306  00009A  0E01               	movlw	1
 13307  00009C  50DB               	movf	plusw2,w,c
 13308  00009E  E118               	bnz	i1l5804
 13309  0000A0  0EFA               	movlw	250
 13310  0000A2  5CDE               	subwf	postinc2,w,c
 13311  0000A4  B0D8               	btfsc	status,0,c
 13312  0000A6  D014               	goto	i1l5804
 13313  0000A8  BC54               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13314  0000AA  D012               	goto	i1l5804
 13315  0000AC  0E03               	movlw	3
 13316  0000AE  1825               	xorwf	_MUX_index,w,c	;volatile
 13317  0000B0  B4D8               	btfsc	status,2,c
 13318  0000B2  D004               	goto	i1l5800
 13319  0000B4  0E06               	movlw	6
 13320  0000B6  1825               	xorwf	_MUX_index,w,c	;volatile
 13321  0000B8  A4D8               	btfss	status,2,c
 13322  0000BA  D00A               	goto	i1l5804
 13323  0000BC                     i1l5800:
 13324                           
 13325                           ;parcheggio.c: 139: if (MUX_index == 3) {
 13326  0000BC  0E03               	movlw	3
 13327  0000BE  1825               	xorwf	_MUX_index,w,c	;volatile
 13328  0000C0  A4D8               	btfss	status,2,c
 13329  0000C2  D003               	goto	i1l712
 13330                           
 13331                           ;parcheggio.c: 140: sensor_distance_short[1] = sensor_distance[3];
 13332  0000C4  C007  F184         	movff	_sensor_distance+6,_sensor_distance_short+1	;volatile
 13333                           
 13334                           ;parcheggio.c: 141: } else {
 13335  0000C8  D00D               	goto	i1l714
 13336  0000CA                     i1l712:
 13337                           
 13338                           ;parcheggio.c: 142: sensor_distance_short[0] = sensor_distance[6];
 13339  0000CA  C00D  F183         	movff	_sensor_distance+12,_sensor_distance_short	;volatile
 13340                           
 13341                           ;parcheggio.c: 143: }
 13342                           ;parcheggio.c: 144: } else {
 13343  0000CE  D00A               	goto	i1l714
 13344  0000D0                     i1l5804:
 13345                           
 13346                           ;parcheggio.c: 145: sensor_distance_short[MUX_index] = 255;
 13347  0000D0  5025               	movf	_MUX_index,w,c	;volatile
 13348  0000D2  0D01               	mullw	1
 13349  0000D4  0E83               	movlw	low _sensor_distance_short
 13350  0000D6  24F3               	addwf	prodl,w,c
 13351  0000D8  6ED9               	movwf	fsr2l,c
 13352  0000DA  0E01               	movlw	high _sensor_distance_short
 13353  0000DC  20F4               	addwfc	prodh,w,c
 13354  0000DE  6EDA               	movwf	fsr2h,c
 13355  0000E0  0EFF               	movlw	255
 13356  0000E2  6EDF               	movwf	indf2,c
 13357  0000E4                     i1l714:
 13358                           
 13359                           ;parcheggio.c: 146: }
 13360                           ;parcheggio.c: 147: if ((sensor_distance[MUX_index] < 10)&&(start_operation == 1)&&(avvi
      +                          cinamento == 0)) {
 13361  0000E4  5025               	movf	_MUX_index,w,c	;volatile
 13362  0000E6  0D02               	mullw	2
 13363  0000E8  0E01               	movlw	low _sensor_distance
 13364  0000EA  24F3               	addwf	prodl,w,c
 13365  0000EC  6ED9               	movwf	fsr2l,c
 13366  0000EE  0E00               	movlw	high _sensor_distance
 13367  0000F0  20F4               	addwfc	prodh,w,c
 13368  0000F2  6EDA               	movwf	fsr2h,c
 13369  0000F4  0E01               	movlw	1
 13370  0000F6  50DB               	movf	plusw2,w,c
 13371  0000F8  E128               	bnz	i1l5820
 13372  0000FA  0E0A               	movlw	10
 13373  0000FC  5CDE               	subwf	postinc2,w,c
 13374  0000FE  B0D8               	btfsc	status,0,c
 13375  000100  D024               	goto	i1l5820
 13376  000102  BC54               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13377  000104  B653               	btfsc	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
 13378  000106  D021               	goto	i1l5820
 13379                           
 13380                           ;parcheggio.c: 148: counter++;
 13381  000108  2A28               	incf	_counter,f,c	;volatile
 13382                           
 13383                           ;parcheggio.c: 149: if (counter > 1) {
 13384  00010A  0E01               	movlw	1
 13385  00010C  6428               	cpfsgt	_counter,c	;volatile
 13386  00010E  D01D               	goto	i1l5820
 13387                           
 13388                           ;parcheggio.c: 150: data[0] = 4;
 13389  000110  0E04               	movlw	4
 13390  000112  0101               	movlb	1	; () banked
 13391  000114  6F53               	movwf	_data& (0+255),b	;volatile
 13392                           
 13393                           ; BSR set to: 1
 13394                           ;parcheggio.c: 151: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
 13395  000116  0E0D               	movlw	13
 13396  000118  6E2A               	movwf	i1CANsendMessage@identifier,c
 13397  00011A  0E00               	movlw	0
 13398  00011C  6E2B               	movwf	i1CANsendMessage@identifier+1,c
 13399  00011E  0E00               	movlw	0
 13400  000120  6E2C               	movwf	i1CANsendMessage@identifier+2,c
 13401  000122  0E00               	movlw	0
 13402  000124  6E2D               	movwf	i1CANsendMessage@identifier+3,c
 13403  000126  0E53               	movlw	low _data
 13404  000128  6E2E               	movwf	i1CANsendMessage@data,c
 13405  00012A  0E01               	movlw	high _data
 13406  00012C  6E2F               	movwf	i1CANsendMessage@data+1,c
 13407  00012E  0E08               	movlw	8
 13408  000130  6E30               	movwf	i1CANsendMessage@dataLength,c
 13409  000132  0EBC               	movlw	188
 13410  000134  6E31               	movwf	i1CANsendMessage@flags,c
 13411  000136  EC0E  F010         	call	i1_CANsendMessage	;wreg free
 13412                           
 13413                           ;parcheggio.c: 152: delay_ms(100);
 13414  00013A  0E00               	movlw	0
 13415  00013C  6E31               	movwf	i1delay_ms@value_ms+1,c
 13416  00013E  0E64               	movlw	100
 13417  000140  6E30               	movwf	i1delay_ms@value_ms,c
 13418  000142  EC6F  F02E         	call	i1_delay_ms	;wreg free
 13419  000146  00FF               	reset		;# 
 13420  000148  D000               	goto	i1l5820
 13421  00014A                     i1l5820:
 13422                           
 13423                           ;parcheggio.c: 154: }
 13424                           ;parcheggio.c: 155: }
 13425                           ;parcheggio.c: 157: MUX_index++;
 13426  00014A  2A25               	incf	_MUX_index,f,c	;volatile
 13427                           
 13428                           ;parcheggio.c: 158: if (activation == 0) {
 13429  00014C  B253               	btfsc	_activation/(0+8),_activation& (0+7),c	;volatile
 13430  00014E  D015               	goto	i1l5828
 13431                           
 13432                           ;parcheggio.c: 159: unsigned char MUX_index_collision [] = {3, 6};
 13433  000150  C055  F04F         	movff	ISR_Bassa@F16872,ISR_Bassa@MUX_index_collision
 13434  000154  C056  F050         	movff	ISR_Bassa@F16872+1,ISR_Bassa@MUX_index_collision+1
 13435                           
 13436                           ;parcheggio.c: 160: MUX_toggle = ~MUX_toggle;
 13437  000158  7053               	btg	_MUX_toggle/(0+8),_MUX_toggle& (0+7),c	;volatile
 13438                           
 13439                           ;parcheggio.c: 161: MUX_index = MUX_index_collision[MUX_toggle];
 13440  00015A  A053               	btfss	_MUX_toggle/(0+8),_MUX_toggle& (0+7),c	;volatile
 13441  00015C  D002               	goto	i1u709_20
 13442  00015E  0E01               	movlw	1
 13443  000160  D001               	goto	i1u710_20
 13444  000162                     i1u709_20:
 13445  000162  0E00               	movlw	0
 13446  000164                     i1u710_20:
 13447  000164  6E3A               	movwf	??_ISR_Bassa& (0+255),c
 13448  000166  6A3B               	clrf	(??_ISR_Bassa+1)& (0+255),c
 13449  000168  0E4F               	movlw	low ISR_Bassa@MUX_index_collision
 13450  00016A  243A               	addwf	??_ISR_Bassa,w,c
 13451  00016C  6ED9               	movwf	fsr2l,c
 13452  00016E  0E00               	movlw	high ISR_Bassa@MUX_index_collision
 13453  000170  203B               	addwfc	??_ISR_Bassa+1,w,c
 13454  000172  6EDA               	movwf	fsr2h,c
 13455  000174  50DF               	movf	indf2,w,c
 13456  000176  6E25               	movwf	_MUX_index,c	;volatile
 13457  000178  D000               	goto	i1l5828
 13458  00017A                     i1l5828:
 13459                           
 13460                           ;parcheggio.c: 162: }
 13461                           ;parcheggio.c: 164: if (MUX_index == 8) {
 13462  00017A  0E08               	movlw	8
 13463  00017C  1825               	xorwf	_MUX_index,w,c	;volatile
 13464  00017E  A4D8               	btfss	status,2,c
 13465  000180  D002               	goto	i1l720
 13466                           
 13467                           ;parcheggio.c: 165: MUX_index = 0;
 13468  000182  0E00               	movlw	0
 13469  000184  6E25               	movwf	_MUX_index,c	;volatile
 13470  000186                     i1l720:
 13471                           
 13472                           ;parcheggio.c: 166: }
 13473                           ;parcheggio.c: 168: unsigned char PORTA_temp = 0;
 13474  000186  0E00               	movlw	0
 13475  000188  6E51               	movwf	ISR_Bassa@PORTA_temp,c
 13476                           
 13477                           ;parcheggio.c: 169: PORTA_temp = MUX_select[MUX_index];
 13478  00018A  5025               	movf	_MUX_index,w,c	;volatile
 13479  00018C  0D01               	mullw	1
 13480  00018E  0E11               	movlw	low _MUX_select
 13481  000190  24F3               	addwf	prodl,w,c
 13482  000192  6ED9               	movwf	fsr2l,c
 13483  000194  0E00               	movlw	high _MUX_select
 13484  000196  20F4               	addwfc	prodh,w,c
 13485  000198  6EDA               	movwf	fsr2h,c
 13486  00019A  50DF               	movf	indf2,w,c
 13487  00019C  6E51               	movwf	ISR_Bassa@PORTA_temp,c
 13488                           
 13489                           ;parcheggio.c: 170: PORTA = PORTA_temp;
 13490  00019E  C051  FF80         	movff	ISR_Bassa@PORTA_temp,3968	;volatile
 13491                           
 13492                           ;parcheggio.c: 172: TRISBbits.RB0 = 0;
 13493  0001A2  9093               	bcf	3987,0,c	;volatile
 13494                           
 13495                           ;parcheggio.c: 173: LATBbits.LATB0 = 1;
 13496  0001A4  808A               	bsf	3978,0,c	;volatile
 13497                           
 13498                           ;parcheggio.c: 174: _delay((unsigned long)((15)*(16000000/4000000.0)));
 13499  0001A6  0E14               	movlw	20
 13500  0001A8                     i1u846_27:
 13501  0001A8  2EE8               	decfsz	wreg,f,c
 13502  0001AA  D7FE               	goto	i1u846_27
 13503                           
 13504                           ;parcheggio.c: 175: distance_error = 1;
 13505  0001AC  8A53               	bsf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13506                           
 13507                           ;parcheggio.c: 176: LATBbits.LATB0 = 0;
 13508  0001AE  908A               	bcf	3978,0,c	;volatile
 13509                           
 13510                           ;parcheggio.c: 177: TRISBbits.RB0 = 1;
 13511  0001B0  8093               	bsf	3987,0,c	;volatile
 13512                           
 13513                           ;parcheggio.c: 178: INTCONbits.INT0IF = 0;
 13514  0001B2  92F2               	bcf	intcon,1,c	;volatile
 13515                           
 13516                           ;parcheggio.c: 179: INTCON2bits.INTEDG0 = 1;
 13517  0001B4  8CF1               	bsf	intcon2,6,c	;volatile
 13518                           
 13519                           ;parcheggio.c: 180: INTCONbits.INT0IE = 1;
 13520  0001B6  88F2               	bsf	intcon,4,c	;volatile
 13521                           
 13522                           ;parcheggio.c: 181: INTCONbits.TMR0IF = 0;
 13523  0001B8  94F2               	bcf	intcon,2,c	;volatile
 13524  0001BA  D000               	goto	i1l5856
 13525  0001BC                     i1l5856:
 13526                           
 13527                           ;parcheggio.c: 183: }
 13528                           ;parcheggio.c: 186: if ((PIR3bits.RXB0IF == 1) || (PIR3bits.RXB1IF == 1)) {
 13529  0001BC  B0A4               	btfsc	4004,0,c	;volatile
 13530  0001BE  D002               	goto	i1l5860
 13531  0001C0  A2A4               	btfss	4004,1,c	;volatile
 13532  0001C2  D099               	goto	i1l733
 13533  0001C4                     i1l5860:
 13534                           
 13535                           ;parcheggio.c: 187: CANreceiveMessage(&msg);
 13536  0001C4  0E44               	movlw	low _msg
 13537  0001C6  6E2A               	movwf	CANreceiveMessage@msg,c
 13538  0001C8  0E01               	movlw	high _msg
 13539  0001CA  6E2B               	movwf	CANreceiveMessage@msg+1,c
 13540  0001CC  EC25  F016         	call	_CANreceiveMessage	;wreg free
 13541                           
 13542                           ;parcheggio.c: 189: if (msg.identifier == 0b00000001111) {
 13543  0001D0  0E0F               	movlw	15
 13544  0001D2  0101               	movlb	1	; () banked
 13545  0001D4  1944               	xorwf	_msg& (0+255),w,b
 13546  0001D6  0101               	movlb	1	; () banked
 13547  0001D8  1145               	iorwf	(_msg+1)& (0+255),w,b
 13548  0001DA  0101               	movlb	1	; () banked
 13549  0001DC  1146               	iorwf	(_msg+2)& (0+255),w,b
 13550  0001DE  0101               	movlb	1	; () banked
 13551  0001E0  1147               	iorwf	(_msg+3)& (0+255),w,b
 13552  0001E2  A4D8               	btfss	status,2,c
 13553  0001E4  D002               	goto	i1l5866
 13554                           
 13555                           ; BSR set to: 1
 13556                           ;parcheggio.c: 190: asd = 0;
 13557  0001E6  9453               	bcf	_asd/(0+8),_asd& (0+7),c	;volatile
 13558  0001E8  D000               	goto	i1l5866
 13559  0001EA                     i1l5866:
 13560                           
 13561                           ; BSR set to: 1
 13562                           ;parcheggio.c: 191: }
 13563                           ;parcheggio.c: 193: if ((msg.identifier == 0b00000001001) && (msg.RTR != 1)) {
 13564  0001EA  0E09               	movlw	9
 13565  0001EC  0101               	movlb	1	; () banked
 13566  0001EE  1944               	xorwf	_msg& (0+255),w,b
 13567  0001F0  0101               	movlb	1	; () banked
 13568  0001F2  1145               	iorwf	(_msg+1)& (0+255),w,b
 13569  0001F4  0101               	movlb	1	; () banked
 13570  0001F6  1146               	iorwf	(_msg+2)& (0+255),w,b
 13571  0001F8  0101               	movlb	1	; () banked
 13572  0001FA  1147               	iorwf	(_msg+3)& (0+255),w,b
 13573  0001FC  A4D8               	btfss	status,2,c
 13574  0001FE  D02E               	goto	i1l5882
 13575                           
 13576                           ; BSR set to: 1
 13577  000200  0101               	movlb	1	; () banked
 13578  000202  0552               	decf	(_msg+14)& (0+255),w,b
 13579  000204  B4D8               	btfsc	status,2,c
 13580  000206  D02A               	goto	i1l5882
 13581                           
 13582                           ; BSR set to: 1
 13583                           ;parcheggio.c: 194: distance_average = 0;
 13584  000208  0E00               	movlw	0
 13585  00020A  0100               	movlb	0	; () banked
 13586  00020C  6FE4               	movwf	(_distance_average+1)& (0+255),b	;volatile
 13587  00020E  0E00               	movlw	0
 13588  000210  6FE3               	movwf	_distance_average& (0+255),b	;volatile
 13589                           
 13590                           ; BSR set to: 0
 13591                           ;parcheggio.c: 195: distance_dx = msg.data[1];
 13592  000212  C149  F019         	movff	_msg+5,_distance_dx	;volatile
 13593  000216  6A1A               	clrf	_distance_dx+1,c	;volatile
 13594                           
 13595                           ;parcheggio.c: 196: distance_dx = ((distance_dx << 8) | msg.data[0]);
 13596  000218  5019               	movf	_distance_dx,w,c	;volatile
 13597  00021A  6E3A               	movwf	??_ISR_Bassa& (0+255),c
 13598  00021C  0101               	movlb	1	; () banked
 13599  00021E  5148               	movf	(_msg+4)& (0+255),w,b
 13600  000220  6E19               	movwf	_distance_dx,c	;volatile
 13601  000222  C03A  F01A         	movff	??_ISR_Bassa,_distance_dx+1	;volatile
 13602                           
 13603                           ; BSR set to: 1
 13604                           ;parcheggio.c: 197: distance_sx = msg.data[3];
 13605  000226  C14B  F01B         	movff	_msg+7,_distance_sx	;volatile
 13606  00022A  6A1C               	clrf	_distance_sx+1,c	;volatile
 13607                           
 13608                           ;parcheggio.c: 198: distance_sx = ((distance_sx << 8) | msg.data[2]);
 13609  00022C  501B               	movf	_distance_sx,w,c	;volatile
 13610  00022E  6E3A               	movwf	??_ISR_Bassa& (0+255),c
 13611  000230  0101               	movlb	1	; () banked
 13612  000232  514A               	movf	(_msg+6)& (0+255),w,b
 13613  000234  6E1B               	movwf	_distance_sx,c	;volatile
 13614  000236  C03A  F01C         	movff	??_ISR_Bassa,_distance_sx+1	;volatile
 13615                           
 13616                           ; BSR set to: 1
 13617                           ;parcheggio.c: 199: distance_average = (distance_sx + distance_dx) / 2;
 13618  00023A  5019               	movf	_distance_dx,w,c	;volatile
 13619  00023C  241B               	addwf	_distance_sx,w,c	;volatile
 13620  00023E  6E3A               	movwf	??_ISR_Bassa& (0+255),c
 13621  000240  501A               	movf	_distance_dx+1,w,c	;volatile
 13622  000242  201C               	addwfc	_distance_sx+1,w,c	;volatile
 13623  000244  6E3B               	movwf	(??_ISR_Bassa+1)& (0+255),c
 13624  000246  90D8               	bcf	status,0,c
 13625  000248  303B               	rrcf	??_ISR_Bassa+1,w,c
 13626  00024A  6E3C               	movwf	(??_ISR_Bassa+2)& (0+255),c
 13627  00024C  303A               	rrcf	??_ISR_Bassa,w,c
 13628  00024E  0100               	movlb	0	; () banked
 13629  000250  6FE3               	movwf	_distance_average& (0+255),b	;volatile
 13630  000252  C03C  F0E4         	movff	??_ISR_Bassa+2,_distance_average+1	;volatile
 13631                           
 13632                           ; BSR set to: 0
 13633                           ;parcheggio.c: 200: distance_received = 1;
 13634  000256  8C53               	bsf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
 13635                           
 13636                           ; BSR set to: 0
 13637                           ;parcheggio.c: 201: distance_received1 = 1;
 13638  000258  8E53               	bsf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
 13639  00025A  D000               	goto	i1l5882
 13640  00025C                     i1l5882:
 13641                           
 13642                           ;parcheggio.c: 202: }
 13643                           ;parcheggio.c: 204: if (msg.identifier == 0b00000001100) {
 13644  00025C  0E0C               	movlw	12
 13645  00025E  0101               	movlb	1	; () banked
 13646  000260  1944               	xorwf	_msg& (0+255),w,b
 13647  000262  0101               	movlb	1	; () banked
 13648  000264  1145               	iorwf	(_msg+1)& (0+255),w,b
 13649  000266  0101               	movlb	1	; () banked
 13650  000268  1146               	iorwf	(_msg+2)& (0+255),w,b
 13651  00026A  0101               	movlb	1	; () banked
 13652  00026C  1147               	iorwf	(_msg+3)& (0+255),w,b
 13653  00026E  A4D8               	btfss	status,2,c
 13654  000270  D00D               	goto	i1l5888
 13655                           
 13656                           ; BSR set to: 1
 13657                           ;parcheggio.c: 205: if (msg.data[0] == 1) {
 13658  000272  0101               	movlb	1	; () banked
 13659  000274  0548               	decf	(_msg+4)& (0+255),w,b
 13660  000276  A4D8               	btfss	status,2,c
 13661  000278  D003               	goto	i1l727
 13662                           
 13663                           ; BSR set to: 1
 13664                           ;parcheggio.c: 206: activation = 1;
 13665  00027A  8253               	bsf	_activation/(0+8),_activation& (0+7),c	;volatile
 13666                           
 13667                           ;parcheggio.c: 207: PORTBbits.RB6 = 1;
 13668  00027C  8C81               	bsf	3969,6,c	;volatile
 13669                           
 13670                           ;parcheggio.c: 208: } else {
 13671  00027E  D006               	goto	i1l5888
 13672  000280                     i1l727:
 13673                           
 13674                           ; BSR set to: 1
 13675                           ;parcheggio.c: 209: activation = 0;
 13676  000280  9253               	bcf	_activation/(0+8),_activation& (0+7),c	;volatile
 13677                           
 13678                           ;parcheggio.c: 210: PORTBbits.RB4 = 0;
 13679  000282  9881               	bcf	3969,4,c	;volatile
 13680                           
 13681                           ;parcheggio.c: 211: PORTBbits.RB5 = 0;
 13682  000284  9A81               	bcf	3969,5,c	;volatile
 13683                           
 13684                           ;parcheggio.c: 212: PORTBbits.RB6 = 0;
 13685  000286  9C81               	bcf	3969,6,c	;volatile
 13686                           
 13687                           ;parcheggio.c: 213: request_sent = 0;
 13688  000288  9854               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
 13689                           
 13690                           ; BSR set to: 1
 13691  00028A  D000               	goto	i1l5888
 13692  00028C                     i1l5888:
 13693                           
 13694                           ; BSR set to: 1
 13695                           ;parcheggio.c: 214: }
 13696                           ;parcheggio.c: 215: }
 13697                           ;parcheggio.c: 217: if (msg.identifier == 0b00000001110) {
 13698  00028C  0E0E               	movlw	14
 13699  00028E  0101               	movlb	1	; () banked
 13700  000290  1944               	xorwf	_msg& (0+255),w,b
 13701  000292  0101               	movlb	1	; () banked
 13702  000294  1145               	iorwf	(_msg+1)& (0+255),w,b
 13703  000296  0101               	movlb	1	; () banked
 13704  000298  1146               	iorwf	(_msg+2)& (0+255),w,b
 13705  00029A  0101               	movlb	1	; () banked
 13706  00029C  1147               	iorwf	(_msg+3)& (0+255),w,b
 13707  00029E  A4D8               	btfss	status,2,c
 13708  0002A0  D002               	goto	i1l5892
 13709                           
 13710                           ; BSR set to: 1
 13711                           ;parcheggio.c: 218: start_operation = 1;
 13712  0002A2  8C54               	bsf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13713  0002A4  D000               	goto	i1l5892
 13714  0002A6                     i1l5892:
 13715                           
 13716                           ; BSR set to: 1
 13717                           ;parcheggio.c: 219: }
 13718                           ;parcheggio.c: 222: if (msg.identifier == 0b00000001000) {
 13719  0002A6  0E08               	movlw	8
 13720  0002A8  0101               	movlb	1	; () banked
 13721  0002AA  1944               	xorwf	_msg& (0+255),w,b
 13722  0002AC  0101               	movlb	1	; () banked
 13723  0002AE  1145               	iorwf	(_msg+1)& (0+255),w,b
 13724  0002B0  0101               	movlb	1	; () banked
 13725  0002B2  1146               	iorwf	(_msg+2)& (0+255),w,b
 13726  0002B4  0101               	movlb	1	; () banked
 13727  0002B6  1147               	iorwf	(_msg+3)& (0+255),w,b
 13728  0002B8  A4D8               	btfss	status,2,c
 13729  0002BA  D01A               	goto	i1l730
 13730                           
 13731                           ; BSR set to: 1
 13732                           ;parcheggio.c: 223: for (unsigned char i = 0; i < 8; i++) {
 13733  0002BC  0E00               	movlw	0
 13734  0002BE  6E52               	movwf	ISR_Bassa@i,c
 13735  0002C0                     i1l5896:
 13736                           
 13737                           ; BSR set to: 1
 13738  0002C0  0E07               	movlw	7
 13739  0002C2  6452               	cpfsgt	ISR_Bassa@i,c
 13740  0002C4  D001               	goto	i1l5900
 13741                           
 13742                           ; BSR set to: 1
 13743  0002C6  D014               	goto	i1l730
 13744  0002C8                     i1l5900:
 13745                           
 13746                           ;parcheggio.c: 224: data_speed_rx[i] = msg.data[i];
 13747  0002C8  5052               	movf	ISR_Bassa@i,w,c
 13748  0002CA  0D01               	mullw	1
 13749  0002CC  0E48               	movlw	low (_msg+4)
 13750  0002CE  24F3               	addwf	prodl,w,c
 13751  0002D0  6ED9               	movwf	fsr2l,c
 13752  0002D2  0E01               	movlw	high (_msg+4)
 13753  0002D4  20F4               	addwfc	prodh,w,c
 13754  0002D6  6EDA               	movwf	fsr2h,c
 13755  0002D8  5052               	movf	ISR_Bassa@i,w,c
 13756  0002DA  0D01               	mullw	1
 13757  0002DC  0E00               	movlw	low _data_speed_rx
 13758  0002DE  24F3               	addwf	prodl,w,c
 13759  0002E0  6EE1               	movwf	fsr1l,c
 13760  0002E2  0E01               	movlw	high _data_speed_rx
 13761  0002E4  20F4               	addwfc	prodh,w,c
 13762  0002E6  6EE2               	movwf	fsr1h,c
 13763  0002E8  CFDF FFE7          	movff	indf2,indf1
 13764  0002EC  2A52               	incf	ISR_Bassa@i,f,c
 13765  0002EE  D7E8               	goto	i1l5896
 13766  0002F0                     i1l730:
 13767                           
 13768                           ;parcheggio.c: 225: }
 13769                           ;parcheggio.c: 226: }
 13770                           ;parcheggio.c: 229: PIR3bits.RXB0IF = 0;
 13771  0002F0  90A4               	bcf	4004,0,c	;volatile
 13772                           
 13773                           ;parcheggio.c: 230: PIR3bits.RXB1IF = 0;
 13774  0002F2  92A4               	bcf	4004,1,c	;volatile
 13775  0002F4  D000               	goto	i1l733
 13776  0002F6                     i1l733:
 13777  0002F6  C04E  FFF5         	movff	??_ISR_Bassa+20,tablat
 13778  0002FA  C04D  FFF8         	movff	??_ISR_Bassa+19,tblptru
 13779  0002FE  C04C  FFF7         	movff	??_ISR_Bassa+18,tblptrh
 13780  000302  C04B  FFF6         	movff	??_ISR_Bassa+17,tblptrl
 13781  000306  C04A  FFF4         	movff	??_ISR_Bassa+16,prodh
 13782  00030A  C049  FFF3         	movff	??_ISR_Bassa+15,prodl
 13783  00030E  C048  FFDA         	movff	??_ISR_Bassa+14,fsr2h
 13784  000312  C047  FFD9         	movff	??_ISR_Bassa+13,fsr2l
 13785  000316  C046  FFE2         	movff	??_ISR_Bassa+12,fsr1h
 13786  00031A  C045  FFE1         	movff	??_ISR_Bassa+11,fsr1l
 13787  00031E  C044  FFEA         	movff	??_ISR_Bassa+10,fsr0h
 13788  000322  C043  FFE9         	movff	??_ISR_Bassa+9,fsr0l
 13789  000326  C042  FFFB         	movff	??_ISR_Bassa+8,pclatu
 13790  00032A  C041  FFFA         	movff	??_ISR_Bassa+7,pclath
 13791  00032E  C040  FFE0         	movff	??_ISR_Bassa+6,bsr
 13792  000332  C03F  FFE8         	movff	??_ISR_Bassa+5,wreg
 13793  000336  C03E  FFD8         	movff	??_ISR_Bassa+4,status
 13794  00033A  0010               	retfie	
 13795  00033C                     __end_of_ISR_Bassa:
 13796                           	opt stack 0
 13797                           pclatu	equ	0xFFB
 13798                           pclath	equ	0xFFA
 13799                           tblptru	equ	0xFF8
 13800                           tblptrh	equ	0xFF7
 13801                           tblptrl	equ	0xFF6
 13802                           tablat	equ	0xFF5
 13803                           prodh	equ	0xFF4
 13804                           prodl	equ	0xFF3
 13805                           intcon	equ	0xFF2
 13806                           intcon2	equ	0xFF1
 13807                           postinc0	equ	0xFEE
 13808                           fsr0h	equ	0xFEA
 13809                           fsr0l	equ	0xFE9
 13810                           wreg	equ	0xFE8
 13811                           indf1	equ	0xFE7
 13812                           postdec1	equ	0xFE5
 13813                           fsr1h	equ	0xFE2
 13814                           fsr1l	equ	0xFE1
 13815                           bsr	equ	0xFE0
 13816                           indf2	equ	0xFDF
 13817                           postinc2	equ	0xFDE
 13818                           postdec2	equ	0xFDD
 13819                           plusw2	equ	0xFDB
 13820                           fsr2h	equ	0xFDA
 13821                           fsr2l	equ	0xFD9
 13822                           status	equ	0xFD8
 13823                           
 13824 ;; *************** function i1_delay_ms *****************
 13825 ;; Defined at:
 13826 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
 13827 ;; Parameters:    Size  Location     Type
 13828 ;;  value_ms        2    6[COMRAM] unsigned int 
 13829 ;; Auto vars:     Size  Location     Type
 13830 ;;		None
 13831 ;; Return value:  Size  Location     Type
 13832 ;;		None               void
 13833 ;; Registers used:
 13834 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13835 ;; Tracked objects:
 13836 ;;		On entry : 0/0
 13837 ;;		On exit  : 0/0
 13838 ;;		Unchanged: 0/0
 13839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13840 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13843 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13844 ;;Total ram usage:        2 bytes
 13845 ;; Hardware stack levels used:    1
 13846 ;; Hardware stack levels required when called:    3
 13847 ;; This function calls:
 13848 ;;		i1___wmul
 13849 ;; This function is called by:
 13850 ;;		_ISR_Bassa
 13851 ;; This function uses a non-reentrant model
 13852 ;;
 13853                           
 13854                           	psect	text39
 13855  005CDE                     __ptext39:
 13856                           	opt stack 0
 13857  005CDE                     i1_delay_ms:
 13858                           	opt stack 19
 13859                           
 13860                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
 13861                           
 13862                           ;incstack = 0
 13863  005CDE  C0E7  F02A         	movff	_delay_quartz_frequency_value,i1___wmul@multiplier	;volatile
 13864  005CE2  6A2B               	clrf	i1___wmul@multiplier+1,c
 13865  005CE4  C030  F02C         	movff	i1delay_ms@value_ms,i1___wmul@multiplicand
 13866  005CE8  C031  F02D         	movff	i1delay_ms@value_ms+1,i1___wmul@multiplicand+1
 13867  005CEC  ECD1  F02E         	call	i1___wmul	;wreg free
 13868  005CF0  C02A  F0E1         	movff	?i1___wmul,_clock_counter_reference	;volatile
 13869  005CF4  C02B  F0E2         	movff	?i1___wmul+1,_clock_counter_reference+1	;volatile
 13870                           
 13871                           ;src\delay.c: 75: while (clock_counter_reference) {
 13872  005CF8  D007               	goto	i1l569
 13873  005CFA                     i1l5758:
 13874                           
 13875                           ;src\delay.c: 85: _delay(240);
 13876  005CFA  0E50               	movlw	80
 13877  005CFC                     i1u847_27:
 13878  005CFC  2EE8               	decfsz	wreg,f,c
 13879  005CFE  D7FE               	goto	i1u847_27
 13880                           
 13881                           ;src\delay.c: 88: clock_counter_reference--;
 13882  005D00  0100               	movlb	0	; () banked
 13883  005D02  07E1               	decf	_clock_counter_reference& (0+255),f,b	;volatile
 13884  005D04  A0D8               	btfss	status,0,c
 13885  005D06  07E2               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
 13886  005D08                     i1l569:
 13887  005D08  0100               	movlb	0	; () banked
 13888  005D0A  51E1               	movf	_clock_counter_reference& (0+255),w,b	;volatile
 13889  005D0C  0100               	movlb	0	; () banked
 13890  005D0E  11E2               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
 13891  005D10  A4D8               	btfss	status,2,c
 13892  005D12  D7F3               	goto	i1l5758
 13893                           
 13894                           ; BSR set to: 0
 13895                           
 13896                           ; BSR set to: 0
 13897  005D14  0012               	return		;funcret
 13898  005D16                     __end_ofi1_delay_ms:
 13899                           	opt stack 0
 13900                           pclatu	equ	0xFFB
 13901                           pclath	equ	0xFFA
 13902                           tblptru	equ	0xFF8
 13903                           tblptrh	equ	0xFF7
 13904                           tblptrl	equ	0xFF6
 13905                           tablat	equ	0xFF5
 13906                           prodh	equ	0xFF4
 13907                           prodl	equ	0xFF3
 13908                           intcon	equ	0xFF2
 13909                           intcon2	equ	0xFF1
 13910                           postinc0	equ	0xFEE
 13911                           fsr0h	equ	0xFEA
 13912                           fsr0l	equ	0xFE9
 13913                           wreg	equ	0xFE8
 13914                           indf1	equ	0xFE7
 13915                           postdec1	equ	0xFE5
 13916                           fsr1h	equ	0xFE2
 13917                           fsr1l	equ	0xFE1
 13918                           bsr	equ	0xFE0
 13919                           indf2	equ	0xFDF
 13920                           postinc2	equ	0xFDE
 13921                           postdec2	equ	0xFDD
 13922                           plusw2	equ	0xFDB
 13923                           fsr2h	equ	0xFDA
 13924                           fsr2l	equ	0xFD9
 13925                           status	equ	0xFD8
 13926                           
 13927 ;; *************** function i1___wmul *****************
 13928 ;; Defined at:
 13929 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 13930 ;; Parameters:    Size  Location     Type
 13931 ;;  multiplier      2    0[COMRAM] unsigned int 
 13932 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13933 ;; Auto vars:     Size  Location     Type
 13934 ;;  __wmul          2    4[COMRAM] unsigned int 
 13935 ;; Return value:  Size  Location     Type
 13936 ;;                  2    0[COMRAM] unsigned int 
 13937 ;; Registers used:
 13938 ;;		wreg, status,2, status,0, prodl, prodh
 13939 ;; Tracked objects:
 13940 ;;		On entry : 0/0
 13941 ;;		On exit  : 0/0
 13942 ;;		Unchanged: 0/0
 13943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13944 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13945 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13947 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13948 ;;Total ram usage:        6 bytes
 13949 ;; Hardware stack levels used:    1
 13950 ;; Hardware stack levels required when called:    2
 13951 ;; This function calls:
 13952 ;;		Nothing
 13953 ;; This function is called by:
 13954 ;;		i1_delay_ms
 13955 ;; This function uses a non-reentrant model
 13956 ;;
 13957                           
 13958                           	psect	text40
 13959  005DA2                     __ptext40:
 13960                           	opt stack 0
 13961  005DA2                     i1___wmul:
 13962                           	opt stack 19
 13963                           
 13964                           ; BSR set to: 0
 13965                           ;incstack = 0
 13966  005DA2  502A               	movf	i1___wmul@multiplier,w,c
 13967  005DA4  022C               	mulwf	i1___wmul@multiplicand,c
 13968  005DA6  CFF3 F02E          	movff	prodl,i1___wmul@product
 13969  005DAA  CFF4 F02F          	movff	prodh,i1___wmul@product+1
 13970  005DAE  502A               	movf	i1___wmul@multiplier,w,c
 13971  005DB0  022D               	mulwf	i1___wmul@multiplicand+1,c
 13972  005DB2  50F3               	movf	prodl,w,c
 13973  005DB4  262F               	addwf	i1___wmul@product+1,f,c
 13974  005DB6  502B               	movf	i1___wmul@multiplier+1,w,c
 13975  005DB8  022C               	mulwf	i1___wmul@multiplicand,c
 13976  005DBA  50F3               	movf	prodl,w,c
 13977  005DBC  262F               	addwf	i1___wmul@product+1,f,c
 13978  005DBE  C02E  F02A         	movff	i1___wmul@product,?i1___wmul
 13979  005DC2  C02F  F02B         	movff	i1___wmul@product+1,?i1___wmul+1
 13980  005DC6  0012               	return	
 13981  005DC8  0012               	return		;funcret
 13982  005DCA                     __end_ofi1___wmul:
 13983                           	opt stack 0
 13984                           pclatu	equ	0xFFB
 13985                           pclath	equ	0xFFA
 13986                           tblptru	equ	0xFF8
 13987                           tblptrh	equ	0xFF7
 13988                           tblptrl	equ	0xFF6
 13989                           tablat	equ	0xFF5
 13990                           prodh	equ	0xFF4
 13991                           prodl	equ	0xFF3
 13992                           intcon	equ	0xFF2
 13993                           intcon2	equ	0xFF1
 13994                           postinc0	equ	0xFEE
 13995                           fsr0h	equ	0xFEA
 13996                           fsr0l	equ	0xFE9
 13997                           wreg	equ	0xFE8
 13998                           indf1	equ	0xFE7
 13999                           postdec1	equ	0xFE5
 14000                           fsr1h	equ	0xFE2
 14001                           fsr1l	equ	0xFE1
 14002                           bsr	equ	0xFE0
 14003                           indf2	equ	0xFDF
 14004                           postinc2	equ	0xFDE
 14005                           postdec2	equ	0xFDD
 14006                           plusw2	equ	0xFDB
 14007                           fsr2h	equ	0xFDA
 14008                           fsr2l	equ	0xFD9
 14009                           status	equ	0xFD8
 14010                           
 14011 ;; *************** function i1_CANsendMessage *****************
 14012 ;; Defined at:
 14013 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 14014 ;; Parameters:    Size  Location     Type
 14015 ;;  identifier      4    0[COMRAM] unsigned long 
 14016 ;;  data            2    4[COMRAM] PTR unsigned char 
 14017 ;;		 -> data_speed(8), data_brake(8), data_steering(8), data_correction(8), 
 14018 ;;		 -> data_test(8), data(8), sensor_distance_short(8), 
 14019 ;;  dataLength      1    6[COMRAM] unsigned char 
 14020 ;;  flags           1    7[COMRAM] enum E16376
 14021 ;; Auto vars:     Size  Location     Type
 14022 ;;  CANsendMessa    4   12[COMRAM] unsigned long 
 14023 ;; Return value:  Size  Location     Type
 14024 ;;		None               void
 14025 ;; Registers used:
 14026 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14027 ;; Tracked objects:
 14028 ;;		On entry : 0/0
 14029 ;;		On exit  : 0/0
 14030 ;;		Unchanged: 0/0
 14031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14032 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14033 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14034 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14035 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14036 ;;Total ram usage:       16 bytes
 14037 ;; Hardware stack levels used:    1
 14038 ;; Hardware stack levels required when called:    2
 14039 ;; This function calls:
 14040 ;;		Nothing
 14041 ;; This function is called by:
 14042 ;;		_ISR_Bassa
 14043 ;; This function uses a non-reentrant model
 14044 ;;
 14045                           
 14046                           	psect	text41
 14047  00201C                     __ptext41:
 14048                           	opt stack 0
 14049  00201C                     i1_CANsendMessage:
 14050                           	opt stack 20
 14051                           
 14052                           ;inc\CANlib.h: 296: unsigned long tamp;
 14053                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
 14054                           
 14055                           ;incstack = 0
 14056  00201C  010F               	movlb	15	; () banked
 14057  00201E  B740               	btfsc	64,3,b	;volatile
 14058  002020  D118               	goto	i1l363
 14059                           
 14060                           ; BSR set to: 15
 14061                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
 14062  002022  C030  FF45         	movff	i1CANsendMessage@dataLength,3909	;volatile
 14063                           
 14064                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
 14065  002026  AC31               	btfss	i1CANsendMessage@flags,6,c
 14066  002028  D003               	goto	i1l364
 14067                           
 14068                           ; BSR set to: 15
 14069                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
 14070  00202A  010F               	movlb	15	; () banked
 14071  00202C  8D45               	bsf	69,6,b	;volatile
 14072  00202E  D002               	goto	i1l365
 14073  002030                     i1l364:
 14074                           
 14075                           ; BSR set to: 15
 14076                           ;inc\CANlib.h: 302: else
 14077                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
 14078  002030  010F               	movlb	15	; () banked
 14079  002032  9D45               	bcf	69,6,b	;volatile
 14080  002034                     i1l365:
 14081                           
 14082                           ; BSR set to: 15
 14083                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
 14084  002034  A631               	btfss	i1CANsendMessage@flags,3,c
 14085  002036  D067               	goto	i1l366
 14086                           
 14087                           ; BSR set to: 15
 14088                           ;inc\CANlib.h: 306: {
 14089                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
 14090  002038  502A               	movf	i1CANsendMessage@identifier,w,c
 14091  00203A  6E36               	movwf	i1CANsendMessage@tamp,c
 14092  00203C  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14093  00203E  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14094  002040  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14095                           
 14096                           ; BSR set to: 15
 14097                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
 14098  002042  C036  FF44         	movff	i1CANsendMessage@tamp,3908	;volatile
 14099                           
 14100                           ; BSR set to: 15
 14101                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
 14102  002046  0E00               	movlw	0
 14103  002048  142A               	andwf	i1CANsendMessage@identifier,w,c
 14104  00204A  6E36               	movwf	i1CANsendMessage@tamp,c
 14105  00204C  0EFF               	movlw	255
 14106  00204E  142B               	andwf	i1CANsendMessage@identifier+1,w,c
 14107  002050  6E37               	movwf	i1CANsendMessage@tamp+1,c
 14108  002052  0E00               	movlw	0
 14109  002054  142C               	andwf	i1CANsendMessage@identifier+2,w,c
 14110  002056  6E38               	movwf	i1CANsendMessage@tamp+2,c
 14111  002058  0E00               	movlw	0
 14112  00205A  142D               	andwf	i1CANsendMessage@identifier+3,w,c
 14113  00205C  6E39               	movwf	i1CANsendMessage@tamp+3,c
 14114                           
 14115                           ; BSR set to: 15
 14116                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
 14117  00205E  C036  F032         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14118  002062  C037  F033         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14119  002066  C038  F034         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14120  00206A  C039  F035         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14121  00206E  C033  F032         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14122  002072  C034  F033         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14123  002076  C035  F034         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14124  00207A  6A35               	clrf	??i1_CANsendMessage+3,c
 14125  00207C  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14126  002080  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14127  002084  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14128  002088  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14129                           
 14130                           ; BSR set to: 15
 14131                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
 14132  00208C  C036  FF43         	movff	i1CANsendMessage@tamp,3907	;volatile
 14133                           
 14134                           ; BSR set to: 15
 14135                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
 14136  002090  0E00               	movlw	0
 14137  002092  010F               	movlb	15	; () banked
 14138  002094  6F42               	movwf	66,b	;volatile
 14139                           
 14140                           ; BSR set to: 15
 14141                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
 14142  002096  010F               	movlb	15	; () banked
 14143  002098  8742               	bsf	66,3,b	;volatile
 14144                           
 14145                           ; BSR set to: 15
 14146                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
 14147  00209A  A02C               	btfss	i1CANsendMessage@identifier+2,0,c
 14148  00209C  D002               	goto	i1l367
 14149                           
 14150                           ; BSR set to: 15
 14151                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
 14152  00209E  010F               	movlb	15	; () banked
 14153  0020A0  8142               	bsf	66,0,b	;volatile
 14154  0020A2                     i1l367:
 14155                           
 14156                           ; BSR set to: 15
 14157                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
 14158  0020A2  A22C               	btfss	i1CANsendMessage@identifier+2,1,c
 14159  0020A4  D002               	goto	i1l368
 14160                           
 14161                           ; BSR set to: 15
 14162                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
 14163  0020A6  010F               	movlb	15	; () banked
 14164  0020A8  8342               	bsf	66,1,b	;volatile
 14165  0020AA                     i1l368:
 14166                           
 14167                           ; BSR set to: 15
 14168                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
 14169  0020AA  A42C               	btfss	i1CANsendMessage@identifier+2,2,c
 14170  0020AC  D002               	goto	i1l369
 14171                           
 14172                           ; BSR set to: 15
 14173                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
 14174  0020AE  010F               	movlb	15	; () banked
 14175  0020B0  8B42               	bsf	66,5,b	;volatile
 14176  0020B2                     i1l369:
 14177                           
 14178                           ; BSR set to: 15
 14179                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
 14180  0020B2  A62C               	btfss	i1CANsendMessage@identifier+2,3,c
 14181  0020B4  D002               	goto	i1l370
 14182                           
 14183                           ; BSR set to: 15
 14184                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
 14185  0020B6  010F               	movlb	15	; () banked
 14186  0020B8  8D42               	bsf	66,6,b	;volatile
 14187  0020BA                     i1l370:
 14188                           
 14189                           ; BSR set to: 15
 14190                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
 14191  0020BA  A82C               	btfss	i1CANsendMessage@identifier+2,4,c
 14192  0020BC  D003               	goto	i1l5558
 14193                           
 14194                           ; BSR set to: 15
 14195                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
 14196  0020BE  010F               	movlb	15	; () banked
 14197  0020C0  8F42               	bsf	66,7,b	;volatile
 14198  0020C2  D000               	goto	i1l5558
 14199  0020C4                     i1l5558:
 14200                           
 14201                           ; BSR set to: 15
 14202                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
 14203  0020C4  C02A  F032         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14204  0020C8  C02B  F033         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14205  0020CC  C02C  F034         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14206  0020D0  C02D  F035         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14207  0020D4  0E16               	movlw	22
 14208  0020D6  D005               	goto	i1u664_20
 14209  0020D8                     i1u664_25:
 14210  0020D8  90D8               	bcf	status,0,c
 14211  0020DA  3235               	rrcf	??i1_CANsendMessage+3,f,c
 14212  0020DC  3234               	rrcf	??i1_CANsendMessage+2,f,c
 14213  0020DE  3233               	rrcf	??i1_CANsendMessage+1,f,c
 14214  0020E0  3232               	rrcf	??i1_CANsendMessage,f,c
 14215  0020E2                     i1u664_20:
 14216  0020E2  2EE8               	decfsz	wreg,f,c
 14217  0020E4  D7F9               	goto	i1u664_25
 14218  0020E6  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14219  0020EA  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14220  0020EE  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14221  0020F2  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14222                           
 14223                           ; BSR set to: 15
 14224                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
 14225  0020F6  5036               	movf	i1CANsendMessage@tamp,w,c
 14226  0020F8  6E36               	movwf	i1CANsendMessage@tamp,c
 14227  0020FA  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14228  0020FC  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14229  0020FE  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14230                           
 14231                           ; BSR set to: 15
 14232                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
 14233  002100  C036  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14234                           
 14235                           ;inc\CANlib.h: 332: }
 14236  002104  D04E               	goto	i1l5578
 14237  002106                     i1l366:
 14238                           
 14239                           ; BSR set to: 15
 14240                           ;inc\CANlib.h: 334: else
 14241                           ;inc\CANlib.h: 336: {
 14242                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
 14243  002106  010F               	movlb	15	; () banked
 14244  002108  9742               	bcf	66,3,b	;volatile
 14245                           
 14246                           ; BSR set to: 15
 14247                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
 14248  00210A  C02A  F032         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14249  00210E  C02B  F033         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14250  002112  C02C  F034         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14251  002116  C02D  F035         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14252  00211A  0E04               	movlw	4
 14253  00211C  D005               	goto	i1u665_20
 14254  00211E                     i1u665_25:
 14255  00211E  90D8               	bcf	status,0,c
 14256  002120  3235               	rrcf	??i1_CANsendMessage+3,f,c
 14257  002122  3234               	rrcf	??i1_CANsendMessage+2,f,c
 14258  002124  3233               	rrcf	??i1_CANsendMessage+1,f,c
 14259  002126  3232               	rrcf	??i1_CANsendMessage,f,c
 14260  002128                     i1u665_20:
 14261  002128  2EE8               	decfsz	wreg,f,c
 14262  00212A  D7F9               	goto	i1u665_25
 14263  00212C  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14264  002130  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14265  002134  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14266  002138  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14267                           
 14268                           ; BSR set to: 15
 14269                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
 14270  00213C  5036               	movf	i1CANsendMessage@tamp,w,c
 14271  00213E  6E36               	movwf	i1CANsendMessage@tamp,c
 14272  002140  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14273  002142  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14274  002144  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14275                           
 14276                           ; BSR set to: 15
 14277                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
 14278  002146  C036  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14279                           
 14280                           ; BSR set to: 15
 14281                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
 14282  00214A  0E07               	movlw	7
 14283  00214C  142A               	andwf	i1CANsendMessage@identifier,w,c
 14284  00214E  6E36               	movwf	i1CANsendMessage@tamp,c
 14285  002150  0E00               	movlw	0
 14286  002152  142B               	andwf	i1CANsendMessage@identifier+1,w,c
 14287  002154  6E37               	movwf	i1CANsendMessage@tamp+1,c
 14288  002156  0E00               	movlw	0
 14289  002158  142C               	andwf	i1CANsendMessage@identifier+2,w,c
 14290  00215A  6E38               	movwf	i1CANsendMessage@tamp+2,c
 14291  00215C  0E00               	movlw	0
 14292  00215E  142D               	andwf	i1CANsendMessage@identifier+3,w,c
 14293  002160  6E39               	movwf	i1CANsendMessage@tamp+3,c
 14294                           
 14295                           ; BSR set to: 15
 14296                           ;inc\CANlib.h: 344: tamp = tamp << 5;
 14297  002162  C036  F032         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14298  002166  C037  F033         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14299  00216A  C038  F034         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14300  00216E  C039  F035         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14301  002172  0E05               	movlw	5
 14302  002174                     i1u666_25:
 14303  002174  90D8               	bcf	status,0,c
 14304  002176  3632               	rlcf	??i1_CANsendMessage,f,c
 14305  002178  3633               	rlcf	??i1_CANsendMessage+1,f,c
 14306  00217A  3634               	rlcf	??i1_CANsendMessage+2,f,c
 14307  00217C  3635               	rlcf	??i1_CANsendMessage+3,f,c
 14308  00217E  2EE8               	decfsz	wreg,f,c
 14309  002180  D7F9               	goto	i1u666_25
 14310  002182  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14311  002186  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14312  00218A  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14313  00218E  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14314                           
 14315                           ; BSR set to: 15
 14316                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
 14317  002192  010F               	movlb	15	; () banked
 14318  002194  5142               	movf	66,w,b	;volatile
 14319  002196  0B1F               	andlw	31
 14320  002198  010F               	movlb	15	; () banked
 14321  00219A  6F42               	movwf	66,b	;volatile
 14322                           
 14323                           ; BSR set to: 15
 14324                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
 14325  00219C  C036  FF42         	movff	i1CANsendMessage@tamp,3906	;volatile
 14326  0021A0  D000               	goto	i1l5578
 14327  0021A2                     i1l5578:
 14328                           
 14329                           ; BSR set to: 15
 14330                           ;inc\CANlib.h: 347: }
 14331                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
 14332  0021A2  A031               	btfss	i1CANsendMessage@flags,0,c
 14333  0021A4  D003               	goto	i1l373
 14334                           
 14335                           ; BSR set to: 15
 14336                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
 14337  0021A6  010F               	movlb	15	; () banked
 14338  0021A8  8140               	bsf	64,0,b	;volatile
 14339  0021AA  D002               	goto	i1l374
 14340  0021AC                     i1l373:
 14341                           
 14342                           ; BSR set to: 15
 14343                           ;inc\CANlib.h: 351: else
 14344                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
 14345  0021AC  010F               	movlb	15	; () banked
 14346  0021AE  9140               	bcf	64,0,b	;volatile
 14347  0021B0                     i1l374:
 14348                           
 14349                           ; BSR set to: 15
 14350                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
 14351  0021B0  A231               	btfss	i1CANsendMessage@flags,1,c
 14352  0021B2  D003               	goto	i1l375
 14353                           
 14354                           ; BSR set to: 15
 14355                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
 14356  0021B4  010F               	movlb	15	; () banked
 14357  0021B6  8340               	bsf	64,1,b	;volatile
 14358  0021B8  D003               	goto	i1l5584
 14359  0021BA                     i1l375:
 14360                           
 14361                           ; BSR set to: 15
 14362                           ;inc\CANlib.h: 355: else
 14363                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
 14364  0021BA  010F               	movlb	15	; () banked
 14365  0021BC  9340               	bcf	64,1,b	;volatile
 14366  0021BE  D000               	goto	i1l5584
 14367  0021C0                     i1l5584:
 14368                           
 14369                           ; BSR set to: 15
 14370                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
 14371  0021C0  C02E  FFD9         	movff	i1CANsendMessage@data,fsr2l
 14372  0021C4  C02F  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 14373  0021C8  50DF               	movf	indf2,w,c
 14374  0021CA  010F               	movlb	15	; () banked
 14375  0021CC  6F46               	movwf	70,b	;volatile
 14376                           
 14377                           ; BSR set to: 15
 14378                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
 14379  0021CE  EE20 F001          	lfsr	2,1
 14380  0021D2  502E               	movf	i1CANsendMessage@data,w,c
 14381  0021D4  26D9               	addwf	fsr2l,f,c
 14382  0021D6  502F               	movf	i1CANsendMessage@data+1,w,c
 14383  0021D8  22DA               	addwfc	fsr2h,f,c
 14384  0021DA  50DF               	movf	indf2,w,c
 14385  0021DC  010F               	movlb	15	; () banked
 14386  0021DE  6F47               	movwf	71,b	;volatile
 14387                           
 14388                           ; BSR set to: 15
 14389                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
 14390  0021E0  EE20 F002          	lfsr	2,2
 14391  0021E4  502E               	movf	i1CANsendMessage@data,w,c
 14392  0021E6  26D9               	addwf	fsr2l,f,c
 14393  0021E8  502F               	movf	i1CANsendMessage@data+1,w,c
 14394  0021EA  22DA               	addwfc	fsr2h,f,c
 14395  0021EC  50DF               	movf	indf2,w,c
 14396  0021EE  010F               	movlb	15	; () banked
 14397  0021F0  6F48               	movwf	72,b	;volatile
 14398                           
 14399                           ; BSR set to: 15
 14400                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
 14401  0021F2  EE20 F003          	lfsr	2,3
 14402  0021F6  502E               	movf	i1CANsendMessage@data,w,c
 14403  0021F8  26D9               	addwf	fsr2l,f,c
 14404  0021FA  502F               	movf	i1CANsendMessage@data+1,w,c
 14405  0021FC  22DA               	addwfc	fsr2h,f,c
 14406  0021FE  50DF               	movf	indf2,w,c
 14407  002200  010F               	movlb	15	; () banked
 14408  002202  6F49               	movwf	73,b	;volatile
 14409                           
 14410                           ; BSR set to: 15
 14411                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
 14412  002204  EE20 F004          	lfsr	2,4
 14413  002208  502E               	movf	i1CANsendMessage@data,w,c
 14414  00220A  26D9               	addwf	fsr2l,f,c
 14415  00220C  502F               	movf	i1CANsendMessage@data+1,w,c
 14416  00220E  22DA               	addwfc	fsr2h,f,c
 14417  002210  50DF               	movf	indf2,w,c
 14418  002212  010F               	movlb	15	; () banked
 14419  002214  6F4A               	movwf	74,b	;volatile
 14420                           
 14421                           ; BSR set to: 15
 14422                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
 14423  002216  EE20 F005          	lfsr	2,5
 14424  00221A  502E               	movf	i1CANsendMessage@data,w,c
 14425  00221C  26D9               	addwf	fsr2l,f,c
 14426  00221E  502F               	movf	i1CANsendMessage@data+1,w,c
 14427  002220  22DA               	addwfc	fsr2h,f,c
 14428  002222  50DF               	movf	indf2,w,c
 14429  002224  010F               	movlb	15	; () banked
 14430  002226  6F4B               	movwf	75,b	;volatile
 14431                           
 14432                           ; BSR set to: 15
 14433                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
 14434  002228  EE20 F006          	lfsr	2,6
 14435  00222C  502E               	movf	i1CANsendMessage@data,w,c
 14436  00222E  26D9               	addwf	fsr2l,f,c
 14437  002230  502F               	movf	i1CANsendMessage@data+1,w,c
 14438  002232  22DA               	addwfc	fsr2h,f,c
 14439  002234  50DF               	movf	indf2,w,c
 14440  002236  010F               	movlb	15	; () banked
 14441  002238  6F4C               	movwf	76,b	;volatile
 14442                           
 14443                           ; BSR set to: 15
 14444                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
 14445  00223A  EE20 F007          	lfsr	2,7
 14446  00223E  502E               	movf	i1CANsendMessage@data,w,c
 14447  002240  26D9               	addwf	fsr2l,f,c
 14448  002242  502F               	movf	i1CANsendMessage@data+1,w,c
 14449  002244  22DA               	addwfc	fsr2h,f,c
 14450  002246  50DF               	movf	indf2,w,c
 14451  002248  010F               	movlb	15	; () banked
 14452  00224A  6F4D               	movwf	77,b	;volatile
 14453                           
 14454                           ; BSR set to: 15
 14455                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
 14456  00224C  010F               	movlb	15	; () banked
 14457  00224E  8740               	bsf	64,3,b	;volatile
 14458                           
 14459                           ; BSR set to: 15
 14460                           ;inc\CANlib.h: 368: return;
 14461  002250  0012               	return	
 14462  002252                     i1l363:
 14463                           
 14464                           ; BSR set to: 15
 14465                           ;inc\CANlib.h: 369: }
 14466                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
 14467  002252  010F               	movlb	15	; () banked
 14468  002254  B730               	btfsc	48,3,b	;volatile
 14469  002256  D118               	goto	i1l378
 14470                           
 14471                           ; BSR set to: 15
 14472                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
 14473  002258  C030  FF35         	movff	i1CANsendMessage@dataLength,3893	;volatile
 14474                           
 14475                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
 14476  00225C  AC31               	btfss	i1CANsendMessage@flags,6,c
 14477  00225E  D003               	goto	i1l379
 14478                           
 14479                           ; BSR set to: 15
 14480                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
 14481  002260  010F               	movlb	15	; () banked
 14482  002262  8D35               	bsf	53,6,b	;volatile
 14483  002264  D002               	goto	i1l380
 14484  002266                     i1l379:
 14485                           
 14486                           ; BSR set to: 15
 14487                           ;inc\CANlib.h: 378: else
 14488                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
 14489  002266  010F               	movlb	15	; () banked
 14490  002268  9D35               	bcf	53,6,b	;volatile
 14491  00226A                     i1l380:
 14492                           
 14493                           ; BSR set to: 15
 14494                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
 14495  00226A  A631               	btfss	i1CANsendMessage@flags,3,c
 14496  00226C  D067               	goto	i1l381
 14497                           
 14498                           ; BSR set to: 15
 14499                           ;inc\CANlib.h: 382: {
 14500                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
 14501  00226E  502A               	movf	i1CANsendMessage@identifier,w,c
 14502  002270  6E36               	movwf	i1CANsendMessage@tamp,c
 14503  002272  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14504  002274  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14505  002276  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14506                           
 14507                           ; BSR set to: 15
 14508                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
 14509  002278  C036  FF34         	movff	i1CANsendMessage@tamp,3892	;volatile
 14510                           
 14511                           ; BSR set to: 15
 14512                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
 14513  00227C  0E00               	movlw	0
 14514  00227E  142A               	andwf	i1CANsendMessage@identifier,w,c
 14515  002280  6E36               	movwf	i1CANsendMessage@tamp,c
 14516  002282  0EFF               	movlw	255
 14517  002284  142B               	andwf	i1CANsendMessage@identifier+1,w,c
 14518  002286  6E37               	movwf	i1CANsendMessage@tamp+1,c
 14519  002288  0E00               	movlw	0
 14520  00228A  142C               	andwf	i1CANsendMessage@identifier+2,w,c
 14521  00228C  6E38               	movwf	i1CANsendMessage@tamp+2,c
 14522  00228E  0E00               	movlw	0
 14523  002290  142D               	andwf	i1CANsendMessage@identifier+3,w,c
 14524  002292  6E39               	movwf	i1CANsendMessage@tamp+3,c
 14525                           
 14526                           ; BSR set to: 15
 14527                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
 14528  002294  C036  F032         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14529  002298  C037  F033         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14530  00229C  C038  F034         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14531  0022A0  C039  F035         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14532  0022A4  C033  F032         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14533  0022A8  C034  F033         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14534  0022AC  C035  F034         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14535  0022B0  6A35               	clrf	??i1_CANsendMessage+3,c
 14536  0022B2  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14537  0022B6  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14538  0022BA  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14539  0022BE  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14540                           
 14541                           ; BSR set to: 15
 14542                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
 14543  0022C2  C036  FF33         	movff	i1CANsendMessage@tamp,3891	;volatile
 14544                           
 14545                           ; BSR set to: 15
 14546                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
 14547  0022C6  0E00               	movlw	0
 14548  0022C8  010F               	movlb	15	; () banked
 14549  0022CA  6F32               	movwf	50,b	;volatile
 14550                           
 14551                           ; BSR set to: 15
 14552                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
 14553  0022CC  010F               	movlb	15	; () banked
 14554  0022CE  8732               	bsf	50,3,b	;volatile
 14555                           
 14556                           ; BSR set to: 15
 14557                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
 14558  0022D0  A02C               	btfss	i1CANsendMessage@identifier+2,0,c
 14559  0022D2  D002               	goto	i1l382
 14560                           
 14561                           ; BSR set to: 15
 14562                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
 14563  0022D4  010F               	movlb	15	; () banked
 14564  0022D6  8132               	bsf	50,0,b	;volatile
 14565  0022D8                     i1l382:
 14566                           
 14567                           ; BSR set to: 15
 14568                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
 14569  0022D8  A22C               	btfss	i1CANsendMessage@identifier+2,1,c
 14570  0022DA  D002               	goto	i1l383
 14571                           
 14572                           ; BSR set to: 15
 14573                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
 14574  0022DC  010F               	movlb	15	; () banked
 14575  0022DE  8332               	bsf	50,1,b	;volatile
 14576  0022E0                     i1l383:
 14577                           
 14578                           ; BSR set to: 15
 14579                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
 14580  0022E0  A42C               	btfss	i1CANsendMessage@identifier+2,2,c
 14581  0022E2  D002               	goto	i1l384
 14582                           
 14583                           ; BSR set to: 15
 14584                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
 14585  0022E4  010F               	movlb	15	; () banked
 14586  0022E6  8B32               	bsf	50,5,b	;volatile
 14587  0022E8                     i1l384:
 14588                           
 14589                           ; BSR set to: 15
 14590                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
 14591  0022E8  A62C               	btfss	i1CANsendMessage@identifier+2,3,c
 14592  0022EA  D002               	goto	i1l385
 14593                           
 14594                           ; BSR set to: 15
 14595                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
 14596  0022EC  010F               	movlb	15	; () banked
 14597  0022EE  8D32               	bsf	50,6,b	;volatile
 14598  0022F0                     i1l385:
 14599                           
 14600                           ; BSR set to: 15
 14601                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
 14602  0022F0  A82C               	btfss	i1CANsendMessage@identifier+2,4,c
 14603  0022F2  D003               	goto	i1l5634
 14604                           
 14605                           ; BSR set to: 15
 14606                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
 14607  0022F4  010F               	movlb	15	; () banked
 14608  0022F6  8F32               	bsf	50,7,b	;volatile
 14609  0022F8  D000               	goto	i1l5634
 14610  0022FA                     i1l5634:
 14611                           
 14612                           ; BSR set to: 15
 14613                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
 14614  0022FA  C02A  F032         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14615  0022FE  C02B  F033         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14616  002302  C02C  F034         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14617  002306  C02D  F035         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14618  00230A  0E16               	movlw	22
 14619  00230C  D005               	goto	i1u677_20
 14620  00230E                     i1u677_25:
 14621  00230E  90D8               	bcf	status,0,c
 14622  002310  3235               	rrcf	??i1_CANsendMessage+3,f,c
 14623  002312  3234               	rrcf	??i1_CANsendMessage+2,f,c
 14624  002314  3233               	rrcf	??i1_CANsendMessage+1,f,c
 14625  002316  3232               	rrcf	??i1_CANsendMessage,f,c
 14626  002318                     i1u677_20:
 14627  002318  2EE8               	decfsz	wreg,f,c
 14628  00231A  D7F9               	goto	i1u677_25
 14629  00231C  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14630  002320  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14631  002324  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14632  002328  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14633                           
 14634                           ; BSR set to: 15
 14635                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
 14636  00232C  5036               	movf	i1CANsendMessage@tamp,w,c
 14637  00232E  6E36               	movwf	i1CANsendMessage@tamp,c
 14638  002330  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14639  002332  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14640  002334  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14641                           
 14642                           ; BSR set to: 15
 14643                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
 14644  002336  C036  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 14645                           
 14646                           ;inc\CANlib.h: 407: }
 14647  00233A  D04E               	goto	i1l5654
 14648  00233C                     i1l381:
 14649                           
 14650                           ; BSR set to: 15
 14651                           ;inc\CANlib.h: 409: else
 14652                           ;inc\CANlib.h: 411: {
 14653                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
 14654  00233C  010F               	movlb	15	; () banked
 14655  00233E  9732               	bcf	50,3,b	;volatile
 14656                           
 14657                           ; BSR set to: 15
 14658                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
 14659  002340  C02A  F032         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14660  002344  C02B  F033         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14661  002348  C02C  F034         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14662  00234C  C02D  F035         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14663  002350  0E04               	movlw	4
 14664  002352  D005               	goto	i1u678_20
 14665  002354                     i1u678_25:
 14666  002354  90D8               	bcf	status,0,c
 14667  002356  3235               	rrcf	??i1_CANsendMessage+3,f,c
 14668  002358  3234               	rrcf	??i1_CANsendMessage+2,f,c
 14669  00235A  3233               	rrcf	??i1_CANsendMessage+1,f,c
 14670  00235C  3232               	rrcf	??i1_CANsendMessage,f,c
 14671  00235E                     i1u678_20:
 14672  00235E  2EE8               	decfsz	wreg,f,c
 14673  002360  D7F9               	goto	i1u678_25
 14674  002362  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14675  002366  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14676  00236A  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14677  00236E  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14678                           
 14679                           ; BSR set to: 15
 14680                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
 14681  002372  5036               	movf	i1CANsendMessage@tamp,w,c
 14682  002374  6E36               	movwf	i1CANsendMessage@tamp,c
 14683  002376  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14684  002378  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14685  00237A  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14686                           
 14687                           ; BSR set to: 15
 14688                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
 14689  00237C  C036  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 14690                           
 14691                           ; BSR set to: 15
 14692                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
 14693  002380  0E07               	movlw	7
 14694  002382  142A               	andwf	i1CANsendMessage@identifier,w,c
 14695  002384  6E36               	movwf	i1CANsendMessage@tamp,c
 14696  002386  0E00               	movlw	0
 14697  002388  142B               	andwf	i1CANsendMessage@identifier+1,w,c
 14698  00238A  6E37               	movwf	i1CANsendMessage@tamp+1,c
 14699  00238C  0E00               	movlw	0
 14700  00238E  142C               	andwf	i1CANsendMessage@identifier+2,w,c
 14701  002390  6E38               	movwf	i1CANsendMessage@tamp+2,c
 14702  002392  0E00               	movlw	0
 14703  002394  142D               	andwf	i1CANsendMessage@identifier+3,w,c
 14704  002396  6E39               	movwf	i1CANsendMessage@tamp+3,c
 14705                           
 14706                           ; BSR set to: 15
 14707                           ;inc\CANlib.h: 419: tamp = tamp << 5;
 14708  002398  C036  F032         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14709  00239C  C037  F033         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14710  0023A0  C038  F034         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14711  0023A4  C039  F035         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14712  0023A8  0E05               	movlw	5
 14713  0023AA                     i1u679_25:
 14714  0023AA  90D8               	bcf	status,0,c
 14715  0023AC  3632               	rlcf	??i1_CANsendMessage,f,c
 14716  0023AE  3633               	rlcf	??i1_CANsendMessage+1,f,c
 14717  0023B0  3634               	rlcf	??i1_CANsendMessage+2,f,c
 14718  0023B2  3635               	rlcf	??i1_CANsendMessage+3,f,c
 14719  0023B4  2EE8               	decfsz	wreg,f,c
 14720  0023B6  D7F9               	goto	i1u679_25
 14721  0023B8  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14722  0023BC  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14723  0023C0  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14724  0023C4  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14725                           
 14726                           ; BSR set to: 15
 14727                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
 14728  0023C8  010F               	movlb	15	; () banked
 14729  0023CA  5132               	movf	50,w,b	;volatile
 14730  0023CC  0B1F               	andlw	31
 14731  0023CE  010F               	movlb	15	; () banked
 14732  0023D0  6F32               	movwf	50,b	;volatile
 14733                           
 14734                           ; BSR set to: 15
 14735                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
 14736  0023D2  C036  FF32         	movff	i1CANsendMessage@tamp,3890	;volatile
 14737  0023D6  D000               	goto	i1l5654
 14738  0023D8                     i1l5654:
 14739                           
 14740                           ; BSR set to: 15
 14741                           ;inc\CANlib.h: 422: }
 14742                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
 14743  0023D8  A031               	btfss	i1CANsendMessage@flags,0,c
 14744  0023DA  D003               	goto	i1l388
 14745                           
 14746                           ; BSR set to: 15
 14747                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
 14748  0023DC  010F               	movlb	15	; () banked
 14749  0023DE  8130               	bsf	48,0,b	;volatile
 14750  0023E0  D002               	goto	i1l389
 14751  0023E2                     i1l388:
 14752                           
 14753                           ; BSR set to: 15
 14754                           ;inc\CANlib.h: 426: else
 14755                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
 14756  0023E2  010F               	movlb	15	; () banked
 14757  0023E4  9130               	bcf	48,0,b	;volatile
 14758  0023E6                     i1l389:
 14759                           
 14760                           ; BSR set to: 15
 14761                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
 14762  0023E6  A231               	btfss	i1CANsendMessage@flags,1,c
 14763  0023E8  D003               	goto	i1l390
 14764                           
 14765                           ; BSR set to: 15
 14766                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
 14767  0023EA  010F               	movlb	15	; () banked
 14768  0023EC  8330               	bsf	48,1,b	;volatile
 14769  0023EE  D003               	goto	i1l5660
 14770  0023F0                     i1l390:
 14771                           
 14772                           ; BSR set to: 15
 14773                           ;inc\CANlib.h: 430: else
 14774                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
 14775  0023F0  010F               	movlb	15	; () banked
 14776  0023F2  9330               	bcf	48,1,b	;volatile
 14777  0023F4  D000               	goto	i1l5660
 14778  0023F6                     i1l5660:
 14779                           
 14780                           ; BSR set to: 15
 14781                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
 14782  0023F6  C02E  FFD9         	movff	i1CANsendMessage@data,fsr2l
 14783  0023FA  C02F  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 14784  0023FE  50DF               	movf	indf2,w,c
 14785  002400  010F               	movlb	15	; () banked
 14786  002402  6F36               	movwf	54,b	;volatile
 14787                           
 14788                           ; BSR set to: 15
 14789                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
 14790  002404  EE20 F001          	lfsr	2,1
 14791  002408  502E               	movf	i1CANsendMessage@data,w,c
 14792  00240A  26D9               	addwf	fsr2l,f,c
 14793  00240C  502F               	movf	i1CANsendMessage@data+1,w,c
 14794  00240E  22DA               	addwfc	fsr2h,f,c
 14795  002410  50DF               	movf	indf2,w,c
 14796  002412  010F               	movlb	15	; () banked
 14797  002414  6F37               	movwf	55,b	;volatile
 14798                           
 14799                           ; BSR set to: 15
 14800                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
 14801  002416  EE20 F002          	lfsr	2,2
 14802  00241A  502E               	movf	i1CANsendMessage@data,w,c
 14803  00241C  26D9               	addwf	fsr2l,f,c
 14804  00241E  502F               	movf	i1CANsendMessage@data+1,w,c
 14805  002420  22DA               	addwfc	fsr2h,f,c
 14806  002422  50DF               	movf	indf2,w,c
 14807  002424  010F               	movlb	15	; () banked
 14808  002426  6F38               	movwf	56,b	;volatile
 14809                           
 14810                           ; BSR set to: 15
 14811                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
 14812  002428  EE20 F003          	lfsr	2,3
 14813  00242C  502E               	movf	i1CANsendMessage@data,w,c
 14814  00242E  26D9               	addwf	fsr2l,f,c
 14815  002430  502F               	movf	i1CANsendMessage@data+1,w,c
 14816  002432  22DA               	addwfc	fsr2h,f,c
 14817  002434  50DF               	movf	indf2,w,c
 14818  002436  010F               	movlb	15	; () banked
 14819  002438  6F39               	movwf	57,b	;volatile
 14820                           
 14821                           ; BSR set to: 15
 14822                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
 14823  00243A  EE20 F004          	lfsr	2,4
 14824  00243E  502E               	movf	i1CANsendMessage@data,w,c
 14825  002440  26D9               	addwf	fsr2l,f,c
 14826  002442  502F               	movf	i1CANsendMessage@data+1,w,c
 14827  002444  22DA               	addwfc	fsr2h,f,c
 14828  002446  50DF               	movf	indf2,w,c
 14829  002448  010F               	movlb	15	; () banked
 14830  00244A  6F3A               	movwf	58,b	;volatile
 14831                           
 14832                           ; BSR set to: 15
 14833                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
 14834  00244C  EE20 F005          	lfsr	2,5
 14835  002450  502E               	movf	i1CANsendMessage@data,w,c
 14836  002452  26D9               	addwf	fsr2l,f,c
 14837  002454  502F               	movf	i1CANsendMessage@data+1,w,c
 14838  002456  22DA               	addwfc	fsr2h,f,c
 14839  002458  50DF               	movf	indf2,w,c
 14840  00245A  010F               	movlb	15	; () banked
 14841  00245C  6F3B               	movwf	59,b	;volatile
 14842                           
 14843                           ; BSR set to: 15
 14844                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
 14845  00245E  EE20 F006          	lfsr	2,6
 14846  002462  502E               	movf	i1CANsendMessage@data,w,c
 14847  002464  26D9               	addwf	fsr2l,f,c
 14848  002466  502F               	movf	i1CANsendMessage@data+1,w,c
 14849  002468  22DA               	addwfc	fsr2h,f,c
 14850  00246A  50DF               	movf	indf2,w,c
 14851  00246C  010F               	movlb	15	; () banked
 14852  00246E  6F3C               	movwf	60,b	;volatile
 14853                           
 14854                           ; BSR set to: 15
 14855                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
 14856  002470  EE20 F007          	lfsr	2,7
 14857  002474  502E               	movf	i1CANsendMessage@data,w,c
 14858  002476  26D9               	addwf	fsr2l,f,c
 14859  002478  502F               	movf	i1CANsendMessage@data+1,w,c
 14860  00247A  22DA               	addwfc	fsr2h,f,c
 14861  00247C  50DF               	movf	indf2,w,c
 14862  00247E  010F               	movlb	15	; () banked
 14863  002480  6F3D               	movwf	61,b	;volatile
 14864                           
 14865                           ; BSR set to: 15
 14866                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
 14867  002482  010F               	movlb	15	; () banked
 14868  002484  8730               	bsf	48,3,b	;volatile
 14869                           
 14870                           ; BSR set to: 15
 14871                           ;inc\CANlib.h: 444: return;
 14872  002486  0012               	return	
 14873  002488                     i1l378:
 14874                           
 14875                           ; BSR set to: 15
 14876                           ;inc\CANlib.h: 445: }
 14877                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
 14878  002488  010F               	movlb	15	; () banked
 14879  00248A  B720               	btfsc	32,3,b	;volatile
 14880  00248C  0012               	return	
 14881                           
 14882                           ; BSR set to: 15
 14883                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
 14884  00248E  C030  FF25         	movff	i1CANsendMessage@dataLength,3877	;volatile
 14885                           
 14886                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
 14887  002492  AC31               	btfss	i1CANsendMessage@flags,6,c
 14888  002494  D003               	goto	i1l393
 14889                           
 14890                           ; BSR set to: 15
 14891                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
 14892  002496  010F               	movlb	15	; () banked
 14893  002498  8D25               	bsf	37,6,b	;volatile
 14894  00249A  D002               	goto	i1l394
 14895  00249C                     i1l393:
 14896                           
 14897                           ; BSR set to: 15
 14898                           ;inc\CANlib.h: 454: else
 14899                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
 14900  00249C  010F               	movlb	15	; () banked
 14901  00249E  9D25               	bcf	37,6,b	;volatile
 14902  0024A0                     i1l394:
 14903                           
 14904                           ; BSR set to: 15
 14905                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
 14906  0024A0  A631               	btfss	i1CANsendMessage@flags,3,c
 14907  0024A2  D067               	goto	i1l395
 14908                           
 14909                           ; BSR set to: 15
 14910                           ;inc\CANlib.h: 458: {
 14911                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
 14912  0024A4  502A               	movf	i1CANsendMessage@identifier,w,c
 14913  0024A6  6E36               	movwf	i1CANsendMessage@tamp,c
 14914  0024A8  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14915  0024AA  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14916  0024AC  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14917                           
 14918                           ; BSR set to: 15
 14919                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
 14920  0024AE  C036  FF24         	movff	i1CANsendMessage@tamp,3876	;volatile
 14921                           
 14922                           ; BSR set to: 15
 14923                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
 14924  0024B2  0E00               	movlw	0
 14925  0024B4  142A               	andwf	i1CANsendMessage@identifier,w,c
 14926  0024B6  6E36               	movwf	i1CANsendMessage@tamp,c
 14927  0024B8  0EFF               	movlw	255
 14928  0024BA  142B               	andwf	i1CANsendMessage@identifier+1,w,c
 14929  0024BC  6E37               	movwf	i1CANsendMessage@tamp+1,c
 14930  0024BE  0E00               	movlw	0
 14931  0024C0  142C               	andwf	i1CANsendMessage@identifier+2,w,c
 14932  0024C2  6E38               	movwf	i1CANsendMessage@tamp+2,c
 14933  0024C4  0E00               	movlw	0
 14934  0024C6  142D               	andwf	i1CANsendMessage@identifier+3,w,c
 14935  0024C8  6E39               	movwf	i1CANsendMessage@tamp+3,c
 14936                           
 14937                           ; BSR set to: 15
 14938                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
 14939  0024CA  C036  F032         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14940  0024CE  C037  F033         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14941  0024D2  C038  F034         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14942  0024D6  C039  F035         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14943  0024DA  C033  F032         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14944  0024DE  C034  F033         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14945  0024E2  C035  F034         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14946  0024E6  6A35               	clrf	??i1_CANsendMessage+3,c
 14947  0024E8  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14948  0024EC  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14949  0024F0  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14950  0024F4  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14951                           
 14952                           ; BSR set to: 15
 14953                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
 14954  0024F8  C036  FF23         	movff	i1CANsendMessage@tamp,3875	;volatile
 14955                           
 14956                           ; BSR set to: 15
 14957                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
 14958  0024FC  0E00               	movlw	0
 14959  0024FE  010F               	movlb	15	; () banked
 14960  002500  6F22               	movwf	34,b	;volatile
 14961                           
 14962                           ; BSR set to: 15
 14963                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
 14964  002502  010F               	movlb	15	; () banked
 14965  002504  8722               	bsf	34,3,b	;volatile
 14966                           
 14967                           ; BSR set to: 15
 14968                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
 14969  002506  A02C               	btfss	i1CANsendMessage@identifier+2,0,c
 14970  002508  D002               	goto	i1l396
 14971                           
 14972                           ; BSR set to: 15
 14973                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
 14974  00250A  010F               	movlb	15	; () banked
 14975  00250C  8122               	bsf	34,0,b	;volatile
 14976  00250E                     i1l396:
 14977                           
 14978                           ; BSR set to: 15
 14979                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
 14980  00250E  A22C               	btfss	i1CANsendMessage@identifier+2,1,c
 14981  002510  D002               	goto	i1l397
 14982                           
 14983                           ; BSR set to: 15
 14984                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
 14985  002512  010F               	movlb	15	; () banked
 14986  002514  8322               	bsf	34,1,b	;volatile
 14987  002516                     i1l397:
 14988                           
 14989                           ; BSR set to: 15
 14990                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
 14991  002516  A42C               	btfss	i1CANsendMessage@identifier+2,2,c
 14992  002518  D002               	goto	i1l398
 14993                           
 14994                           ; BSR set to: 15
 14995                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
 14996  00251A  010F               	movlb	15	; () banked
 14997  00251C  8B22               	bsf	34,5,b	;volatile
 14998  00251E                     i1l398:
 14999                           
 15000                           ; BSR set to: 15
 15001                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
 15002  00251E  A62C               	btfss	i1CANsendMessage@identifier+2,3,c
 15003  002520  D002               	goto	i1l399
 15004                           
 15005                           ; BSR set to: 15
 15006                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
 15007  002522  010F               	movlb	15	; () banked
 15008  002524  8D22               	bsf	34,6,b	;volatile
 15009  002526                     i1l399:
 15010                           
 15011                           ; BSR set to: 15
 15012                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
 15013  002526  A82C               	btfss	i1CANsendMessage@identifier+2,4,c
 15014  002528  D003               	goto	i1l5710
 15015                           
 15016                           ; BSR set to: 15
 15017                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
 15018  00252A  010F               	movlb	15	; () banked
 15019  00252C  8F22               	bsf	34,7,b	;volatile
 15020  00252E  D000               	goto	i1l5710
 15021  002530                     i1l5710:
 15022                           
 15023                           ; BSR set to: 15
 15024                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
 15025  002530  C02A  F032         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15026  002534  C02B  F033         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15027  002538  C02C  F034         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15028  00253C  C02D  F035         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15029  002540  0E16               	movlw	22
 15030  002542  D005               	goto	i1u690_20
 15031  002544                     i1u690_25:
 15032  002544  90D8               	bcf	status,0,c
 15033  002546  3235               	rrcf	??i1_CANsendMessage+3,f,c
 15034  002548  3234               	rrcf	??i1_CANsendMessage+2,f,c
 15035  00254A  3233               	rrcf	??i1_CANsendMessage+1,f,c
 15036  00254C  3232               	rrcf	??i1_CANsendMessage,f,c
 15037  00254E                     i1u690_20:
 15038  00254E  2EE8               	decfsz	wreg,f,c
 15039  002550  D7F9               	goto	i1u690_25
 15040  002552  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15041  002556  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15042  00255A  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15043  00255E  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15044                           
 15045                           ; BSR set to: 15
 15046                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
 15047  002562  5036               	movf	i1CANsendMessage@tamp,w,c
 15048  002564  6E36               	movwf	i1CANsendMessage@tamp,c
 15049  002566  6A37               	clrf	i1CANsendMessage@tamp+1,c
 15050  002568  6A38               	clrf	i1CANsendMessage@tamp+2,c
 15051  00256A  6A39               	clrf	i1CANsendMessage@tamp+3,c
 15052                           
 15053                           ; BSR set to: 15
 15054                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
 15055  00256C  C036  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15056                           
 15057                           ;inc\CANlib.h: 483: }
 15058  002570  D04E               	goto	i1l5730
 15059  002572                     i1l395:
 15060                           
 15061                           ; BSR set to: 15
 15062                           ;inc\CANlib.h: 485: else
 15063                           ;inc\CANlib.h: 487: {
 15064                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
 15065  002572  010F               	movlb	15	; () banked
 15066  002574  9722               	bcf	34,3,b	;volatile
 15067                           
 15068                           ; BSR set to: 15
 15069                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
 15070  002576  C02A  F032         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15071  00257A  C02B  F033         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15072  00257E  C02C  F034         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15073  002582  C02D  F035         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15074  002586  0E04               	movlw	4
 15075  002588  D005               	goto	i1u691_20
 15076  00258A                     i1u691_25:
 15077  00258A  90D8               	bcf	status,0,c
 15078  00258C  3235               	rrcf	??i1_CANsendMessage+3,f,c
 15079  00258E  3234               	rrcf	??i1_CANsendMessage+2,f,c
 15080  002590  3233               	rrcf	??i1_CANsendMessage+1,f,c
 15081  002592  3232               	rrcf	??i1_CANsendMessage,f,c
 15082  002594                     i1u691_20:
 15083  002594  2EE8               	decfsz	wreg,f,c
 15084  002596  D7F9               	goto	i1u691_25
 15085  002598  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15086  00259C  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15087  0025A0  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15088  0025A4  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15089                           
 15090                           ; BSR set to: 15
 15091                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
 15092  0025A8  5036               	movf	i1CANsendMessage@tamp,w,c
 15093  0025AA  6E36               	movwf	i1CANsendMessage@tamp,c
 15094  0025AC  6A37               	clrf	i1CANsendMessage@tamp+1,c
 15095  0025AE  6A38               	clrf	i1CANsendMessage@tamp+2,c
 15096  0025B0  6A39               	clrf	i1CANsendMessage@tamp+3,c
 15097                           
 15098                           ; BSR set to: 15
 15099                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
 15100  0025B2  C036  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15101                           
 15102                           ; BSR set to: 15
 15103                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
 15104  0025B6  0E07               	movlw	7
 15105  0025B8  142A               	andwf	i1CANsendMessage@identifier,w,c
 15106  0025BA  6E36               	movwf	i1CANsendMessage@tamp,c
 15107  0025BC  0E00               	movlw	0
 15108  0025BE  142B               	andwf	i1CANsendMessage@identifier+1,w,c
 15109  0025C0  6E37               	movwf	i1CANsendMessage@tamp+1,c
 15110  0025C2  0E00               	movlw	0
 15111  0025C4  142C               	andwf	i1CANsendMessage@identifier+2,w,c
 15112  0025C6  6E38               	movwf	i1CANsendMessage@tamp+2,c
 15113  0025C8  0E00               	movlw	0
 15114  0025CA  142D               	andwf	i1CANsendMessage@identifier+3,w,c
 15115  0025CC  6E39               	movwf	i1CANsendMessage@tamp+3,c
 15116                           
 15117                           ; BSR set to: 15
 15118                           ;inc\CANlib.h: 495: tamp = tamp << 5;
 15119  0025CE  C036  F032         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 15120  0025D2  C037  F033         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 15121  0025D6  C038  F034         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 15122  0025DA  C039  F035         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 15123  0025DE  0E05               	movlw	5
 15124  0025E0                     i1u692_25:
 15125  0025E0  90D8               	bcf	status,0,c
 15126  0025E2  3632               	rlcf	??i1_CANsendMessage,f,c
 15127  0025E4  3633               	rlcf	??i1_CANsendMessage+1,f,c
 15128  0025E6  3634               	rlcf	??i1_CANsendMessage+2,f,c
 15129  0025E8  3635               	rlcf	??i1_CANsendMessage+3,f,c
 15130  0025EA  2EE8               	decfsz	wreg,f,c
 15131  0025EC  D7F9               	goto	i1u692_25
 15132  0025EE  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15133  0025F2  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15134  0025F6  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15135  0025FA  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15136                           
 15137                           ; BSR set to: 15
 15138                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
 15139  0025FE  010F               	movlb	15	; () banked
 15140  002600  5122               	movf	34,w,b	;volatile
 15141  002602  0B1F               	andlw	31
 15142  002604  010F               	movlb	15	; () banked
 15143  002606  6F22               	movwf	34,b	;volatile
 15144                           
 15145                           ; BSR set to: 15
 15146                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
 15147  002608  C036  FF22         	movff	i1CANsendMessage@tamp,3874	;volatile
 15148  00260C  D000               	goto	i1l5730
 15149  00260E                     i1l5730:
 15150                           
 15151                           ; BSR set to: 15
 15152                           ;inc\CANlib.h: 498: }
 15153                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
 15154  00260E  A031               	btfss	i1CANsendMessage@flags,0,c
 15155  002610  D003               	goto	i1l402
 15156                           
 15157                           ; BSR set to: 15
 15158                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
 15159  002612  010F               	movlb	15	; () banked
 15160  002614  8120               	bsf	32,0,b	;volatile
 15161  002616  D002               	goto	i1l403
 15162  002618                     i1l402:
 15163                           
 15164                           ; BSR set to: 15
 15165                           ;inc\CANlib.h: 502: else
 15166                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
 15167  002618  010F               	movlb	15	; () banked
 15168  00261A  9120               	bcf	32,0,b	;volatile
 15169  00261C                     i1l403:
 15170                           
 15171                           ; BSR set to: 15
 15172                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
 15173  00261C  A231               	btfss	i1CANsendMessage@flags,1,c
 15174  00261E  D003               	goto	i1l404
 15175                           
 15176                           ; BSR set to: 15
 15177                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
 15178  002620  010F               	movlb	15	; () banked
 15179  002622  8320               	bsf	32,1,b	;volatile
 15180  002624  D003               	goto	i1l5736
 15181  002626                     i1l404:
 15182                           
 15183                           ; BSR set to: 15
 15184                           ;inc\CANlib.h: 506: else
 15185                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
 15186  002626  010F               	movlb	15	; () banked
 15187  002628  9320               	bcf	32,1,b	;volatile
 15188  00262A  D000               	goto	i1l5736
 15189  00262C                     i1l5736:
 15190                           
 15191                           ; BSR set to: 15
 15192                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
 15193  00262C  C02E  FFD9         	movff	i1CANsendMessage@data,fsr2l
 15194  002630  C02F  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 15195  002634  50DF               	movf	indf2,w,c
 15196  002636  010F               	movlb	15	; () banked
 15197  002638  6F26               	movwf	38,b	;volatile
 15198                           
 15199                           ; BSR set to: 15
 15200                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
 15201  00263A  EE20 F001          	lfsr	2,1
 15202  00263E  502E               	movf	i1CANsendMessage@data,w,c
 15203  002640  26D9               	addwf	fsr2l,f,c
 15204  002642  502F               	movf	i1CANsendMessage@data+1,w,c
 15205  002644  22DA               	addwfc	fsr2h,f,c
 15206  002646  50DF               	movf	indf2,w,c
 15207  002648  010F               	movlb	15	; () banked
 15208  00264A  6F27               	movwf	39,b	;volatile
 15209                           
 15210                           ; BSR set to: 15
 15211                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
 15212  00264C  EE20 F002          	lfsr	2,2
 15213  002650  502E               	movf	i1CANsendMessage@data,w,c
 15214  002652  26D9               	addwf	fsr2l,f,c
 15215  002654  502F               	movf	i1CANsendMessage@data+1,w,c
 15216  002656  22DA               	addwfc	fsr2h,f,c
 15217  002658  50DF               	movf	indf2,w,c
 15218  00265A  010F               	movlb	15	; () banked
 15219  00265C  6F28               	movwf	40,b	;volatile
 15220                           
 15221                           ; BSR set to: 15
 15222                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
 15223  00265E  EE20 F003          	lfsr	2,3
 15224  002662  502E               	movf	i1CANsendMessage@data,w,c
 15225  002664  26D9               	addwf	fsr2l,f,c
 15226  002666  502F               	movf	i1CANsendMessage@data+1,w,c
 15227  002668  22DA               	addwfc	fsr2h,f,c
 15228  00266A  50DF               	movf	indf2,w,c
 15229  00266C  010F               	movlb	15	; () banked
 15230  00266E  6F29               	movwf	41,b	;volatile
 15231                           
 15232                           ; BSR set to: 15
 15233                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
 15234  002670  EE20 F004          	lfsr	2,4
 15235  002674  502E               	movf	i1CANsendMessage@data,w,c
 15236  002676  26D9               	addwf	fsr2l,f,c
 15237  002678  502F               	movf	i1CANsendMessage@data+1,w,c
 15238  00267A  22DA               	addwfc	fsr2h,f,c
 15239  00267C  50DF               	movf	indf2,w,c
 15240  00267E  010F               	movlb	15	; () banked
 15241  002680  6F2A               	movwf	42,b	;volatile
 15242                           
 15243                           ; BSR set to: 15
 15244                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
 15245  002682  EE20 F005          	lfsr	2,5
 15246  002686  502E               	movf	i1CANsendMessage@data,w,c
 15247  002688  26D9               	addwf	fsr2l,f,c
 15248  00268A  502F               	movf	i1CANsendMessage@data+1,w,c
 15249  00268C  22DA               	addwfc	fsr2h,f,c
 15250  00268E  50DF               	movf	indf2,w,c
 15251  002690  010F               	movlb	15	; () banked
 15252  002692  6F2B               	movwf	43,b	;volatile
 15253                           
 15254                           ; BSR set to: 15
 15255                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
 15256  002694  EE20 F006          	lfsr	2,6
 15257  002698  502E               	movf	i1CANsendMessage@data,w,c
 15258  00269A  26D9               	addwf	fsr2l,f,c
 15259  00269C  502F               	movf	i1CANsendMessage@data+1,w,c
 15260  00269E  22DA               	addwfc	fsr2h,f,c
 15261  0026A0  50DF               	movf	indf2,w,c
 15262  0026A2  010F               	movlb	15	; () banked
 15263  0026A4  6F2C               	movwf	44,b	;volatile
 15264                           
 15265                           ; BSR set to: 15
 15266                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
 15267  0026A6  EE20 F007          	lfsr	2,7
 15268  0026AA  502E               	movf	i1CANsendMessage@data,w,c
 15269  0026AC  26D9               	addwf	fsr2l,f,c
 15270  0026AE  502F               	movf	i1CANsendMessage@data+1,w,c
 15271  0026B0  22DA               	addwfc	fsr2h,f,c
 15272  0026B2  50DF               	movf	indf2,w,c
 15273  0026B4  010F               	movlb	15	; () banked
 15274  0026B6  6F2D               	movwf	45,b	;volatile
 15275                           
 15276                           ; BSR set to: 15
 15277                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
 15278  0026B8  010F               	movlb	15	; () banked
 15279  0026BA  8720               	bsf	32,3,b	;volatile
 15280                           
 15281                           ; BSR set to: 15
 15282                           ;inc\CANlib.h: 520: return;
 15283  0026BC  0012               	return	
 15284                           
 15285                           ; BSR set to: 15
 15286                           
 15287                           ; BSR set to: 15
 15288  0026BE  0012               	return		;funcret
 15289  0026C0                     __end_ofi1_CANsendMessage:
 15290                           	opt stack 0
 15291                           pclatu	equ	0xFFB
 15292                           pclath	equ	0xFFA
 15293                           tblptru	equ	0xFF8
 15294                           tblptrh	equ	0xFF7
 15295                           tblptrl	equ	0xFF6
 15296                           tablat	equ	0xFF5
 15297                           prodh	equ	0xFF4
 15298                           prodl	equ	0xFF3
 15299                           intcon	equ	0xFF2
 15300                           intcon2	equ	0xFF1
 15301                           postinc0	equ	0xFEE
 15302                           fsr0h	equ	0xFEA
 15303                           fsr0l	equ	0xFE9
 15304                           wreg	equ	0xFE8
 15305                           indf1	equ	0xFE7
 15306                           postdec1	equ	0xFE5
 15307                           fsr1h	equ	0xFE2
 15308                           fsr1l	equ	0xFE1
 15309                           bsr	equ	0xFE0
 15310                           indf2	equ	0xFDF
 15311                           postinc2	equ	0xFDE
 15312                           postdec2	equ	0xFDD
 15313                           plusw2	equ	0xFDB
 15314                           fsr2h	equ	0xFDA
 15315                           fsr2l	equ	0xFD9
 15316                           status	equ	0xFD8
 15317                           
 15318 ;; *************** function _CANreceiveMessage *****************
 15319 ;; Defined at:
 15320 ;;		line 528 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 15321 ;; Parameters:    Size  Location     Type
 15322 ;;  msg             2    0[COMRAM] PTR struct .
 15323 ;;		 -> msg(15), 
 15324 ;; Auto vars:     Size  Location     Type
 15325 ;;  tamp            1   11[COMRAM] unsigned char 
 15326 ;;  error           1   10[COMRAM] unsigned char 
 15327 ;; Return value:  Size  Location     Type
 15328 ;;                  1    wreg      unsigned char 
 15329 ;; Registers used:
 15330 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15331 ;; Tracked objects:
 15332 ;;		On entry : 0/0
 15333 ;;		On exit  : 0/0
 15334 ;;		Unchanged: 0/0
 15335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15336 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15337 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15338 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15339 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;Total ram usage:       12 bytes
 15341 ;; Hardware stack levels used:    1
 15342 ;; Hardware stack levels required when called:    2
 15343 ;; This function calls:
 15344 ;;		Nothing
 15345 ;; This function is called by:
 15346 ;;		_ISR_Bassa
 15347 ;; This function uses a non-reentrant model
 15348 ;;
 15349                           
 15350                           	psect	text42
 15351  002C4A                     __ptext42:
 15352                           	opt stack 0
 15353  002C4A                     _CANreceiveMessage:
 15354                           	opt stack 20
 15355                           
 15356                           ;inc\CANlib.h: 530: BYTE tamp;
 15357                           ;inc\CANlib.h: 531: BYTE error = 0;
 15358                           
 15359                           ; BSR set to: 15
 15360                           ;incstack = 0
 15361  002C4A  0E00               	movlw	0
 15362  002C4C  6E34               	movwf	CANreceiveMessage@error,c
 15363                           
 15364                           ;inc\CANlib.h: 533: if (COMSTATbits.RXB0OVFL == 0x01)
 15365  002C4E  AE74               	btfss	3956,7,c	;volatile
 15366  002C50  D002               	goto	i1l5102
 15367                           
 15368                           ;inc\CANlib.h: 534: error |= CAN_RX_BUFFER_1_OVFL;
 15369  002C52  8034               	bsf	CANreceiveMessage@error,0,c
 15370  002C54  D000               	goto	i1l5102
 15371  002C56                     i1l5102:
 15372                           
 15373                           ;inc\CANlib.h: 536: if (COMSTATbits.RXB1OVFL == 0x01)
 15374  002C56  AC74               	btfss	3956,6,c	;volatile
 15375  002C58  D002               	goto	i1l5106
 15376                           
 15377                           ;inc\CANlib.h: 537: error |= CAN_RX_BUFFER_2_OVFL;
 15378  002C5A  8234               	bsf	CANreceiveMessage@error,1,c
 15379  002C5C  D000               	goto	i1l5106
 15380  002C5E                     i1l5106:
 15381                           
 15382                           ;inc\CANlib.h: 540: if (RXB1CONbits.RXFUL ==0x01)
 15383  002C5E  010F               	movlb	15	; () banked
 15384  002C60  AF50               	btfss	80,7,b	;volatile
 15385  002C62  D149               	goto	i1l410
 15386                           
 15387                           ; BSR set to: 15
 15388                           ;inc\CANlib.h: 541: {
 15389                           ;inc\CANlib.h: 542: msg->identifier = 0;
 15390  002C64  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15391  002C68  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15392  002C6C  6ADE               	clrf	postinc2,c
 15393  002C6E  6ADE               	clrf	postinc2,c
 15394  002C70  6ADE               	clrf	postinc2,c
 15395  002C72  6ADD               	clrf	postdec2,c
 15396                           
 15397                           ; BSR set to: 15
 15398                           ;inc\CANlib.h: 543: msg->data[0] =RXB1D0;
 15399  002C74  EE20 F004          	lfsr	2,4
 15400  002C78  502A               	movf	CANreceiveMessage@msg,w,c
 15401  002C7A  26D9               	addwf	fsr2l,f,c
 15402  002C7C  502B               	movf	CANreceiveMessage@msg+1,w,c
 15403  002C7E  22DA               	addwfc	fsr2h,f,c
 15404  002C80  CF56 FFDF          	movff	3926,indf2	;volatile
 15405                           
 15406                           ; BSR set to: 15
 15407                           ;inc\CANlib.h: 544: msg->data[1] =RXB1D1;
 15408  002C84  EE20 F005          	lfsr	2,5
 15409  002C88  502A               	movf	CANreceiveMessage@msg,w,c
 15410  002C8A  26D9               	addwf	fsr2l,f,c
 15411  002C8C  502B               	movf	CANreceiveMessage@msg+1,w,c
 15412  002C8E  22DA               	addwfc	fsr2h,f,c
 15413  002C90  CF57 FFDF          	movff	3927,indf2	;volatile
 15414                           
 15415                           ; BSR set to: 15
 15416                           ;inc\CANlib.h: 545: msg->data[2] =RXB1D2;
 15417  002C94  EE20 F006          	lfsr	2,6
 15418  002C98  502A               	movf	CANreceiveMessage@msg,w,c
 15419  002C9A  26D9               	addwf	fsr2l,f,c
 15420  002C9C  502B               	movf	CANreceiveMessage@msg+1,w,c
 15421  002C9E  22DA               	addwfc	fsr2h,f,c
 15422  002CA0  CF58 FFDF          	movff	3928,indf2	;volatile
 15423                           
 15424                           ; BSR set to: 15
 15425                           ;inc\CANlib.h: 546: msg->data[3] =RXB1D3;
 15426  002CA4  EE20 F007          	lfsr	2,7
 15427  002CA8  502A               	movf	CANreceiveMessage@msg,w,c
 15428  002CAA  26D9               	addwf	fsr2l,f,c
 15429  002CAC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15430  002CAE  22DA               	addwfc	fsr2h,f,c
 15431  002CB0  CF59 FFDF          	movff	3929,indf2	;volatile
 15432                           
 15433                           ; BSR set to: 15
 15434                           ;inc\CANlib.h: 547: msg->data[4] =RXB1D4;
 15435  002CB4  EE20 F008          	lfsr	2,8
 15436  002CB8  502A               	movf	CANreceiveMessage@msg,w,c
 15437  002CBA  26D9               	addwf	fsr2l,f,c
 15438  002CBC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15439  002CBE  22DA               	addwfc	fsr2h,f,c
 15440  002CC0  CF5A FFDF          	movff	3930,indf2	;volatile
 15441                           
 15442                           ; BSR set to: 15
 15443                           ;inc\CANlib.h: 548: msg->data[5] =RXB1D5;
 15444  002CC4  EE20 F009          	lfsr	2,9
 15445  002CC8  502A               	movf	CANreceiveMessage@msg,w,c
 15446  002CCA  26D9               	addwf	fsr2l,f,c
 15447  002CCC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15448  002CCE  22DA               	addwfc	fsr2h,f,c
 15449  002CD0  CF5B FFDF          	movff	3931,indf2	;volatile
 15450                           
 15451                           ; BSR set to: 15
 15452                           ;inc\CANlib.h: 549: msg->data[6] =RXB1D6;
 15453  002CD4  EE20 F00A          	lfsr	2,10
 15454  002CD8  502A               	movf	CANreceiveMessage@msg,w,c
 15455  002CDA  26D9               	addwf	fsr2l,f,c
 15456  002CDC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15457  002CDE  22DA               	addwfc	fsr2h,f,c
 15458  002CE0  CF5C FFDF          	movff	3932,indf2	;volatile
 15459                           
 15460                           ; BSR set to: 15
 15461                           ;inc\CANlib.h: 550: msg->data[7] =RXB1D7;
 15462  002CE4  EE20 F00B          	lfsr	2,11
 15463  002CE8  502A               	movf	CANreceiveMessage@msg,w,c
 15464  002CEA  26D9               	addwf	fsr2l,f,c
 15465  002CEC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15466  002CEE  22DA               	addwfc	fsr2h,f,c
 15467  002CF0  CF5D FFDF          	movff	3933,indf2	;volatile
 15468                           
 15469                           ; BSR set to: 15
 15470                           ;inc\CANlib.h: 552: msg->RTR = RXB1DLCbits.RXRTR;
 15471  002CF4  EE20 F00E          	lfsr	2,14
 15472  002CF8  502A               	movf	CANreceiveMessage@msg,w,c
 15473  002CFA  26D9               	addwf	fsr2l,f,c
 15474  002CFC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15475  002CFE  22DA               	addwfc	fsr2h,f,c
 15476  002D00  010F               	movlb	15	; () banked
 15477  002D02  AD55               	btfss	85,6,b	;volatile
 15478  002D04  D002               	goto	i1u599_20
 15479  002D06  0E01               	movlw	1
 15480  002D08  D001               	goto	i1u599_26
 15481  002D0A                     i1u599_20:
 15482  002D0A  0E00               	movlw	0
 15483  002D0C                     i1u599_26:
 15484  002D0C  6EDF               	movwf	indf2,c
 15485                           
 15486                           ; BSR set to: 15
 15487                           ;inc\CANlib.h: 554: msg->length = RXB1DLC & 0x0F;
 15488  002D0E  EE20 F00D          	lfsr	2,13
 15489  002D12  502A               	movf	CANreceiveMessage@msg,w,c
 15490  002D14  26D9               	addwf	fsr2l,f,c
 15491  002D16  502B               	movf	CANreceiveMessage@msg+1,w,c
 15492  002D18  22DA               	addwfc	fsr2h,f,c
 15493  002D1A  010F               	movlb	15	; () banked
 15494  002D1C  5155               	movf	85,w,b	;volatile
 15495  002D1E  0B0F               	andlw	15
 15496  002D20  6EDF               	movwf	indf2,c
 15497                           
 15498                           ; BSR set to: 15
 15499                           ;inc\CANlib.h: 556: msg->type = RXB1SIDLbits.EXID;
 15500  002D22  EE20 F00C          	lfsr	2,12
 15501  002D26  502A               	movf	CANreceiveMessage@msg,w,c
 15502  002D28  26D9               	addwf	fsr2l,f,c
 15503  002D2A  502B               	movf	CANreceiveMessage@msg+1,w,c
 15504  002D2C  22DA               	addwfc	fsr2h,f,c
 15505  002D2E  010F               	movlb	15	; () banked
 15506  002D30  A752               	btfss	82,3,b	;volatile
 15507  002D32  D002               	goto	i1u600_20
 15508  002D34  0E01               	movlw	1
 15509  002D36  D001               	goto	i1u600_26
 15510  002D38                     i1u600_20:
 15511  002D38  0E00               	movlw	0
 15512  002D3A                     i1u600_26:
 15513  002D3A  6EDF               	movwf	indf2,c
 15514                           
 15515                           ; BSR set to: 15
 15516                           ;inc\CANlib.h: 558: if (RXB1SIDLbits.EXID == 0)
 15517  002D3C  010F               	movlb	15	; () banked
 15518  002D3E  B752               	btfsc	82,3,b	;volatile
 15519  002D40  D044               	goto	i1l5140
 15520                           
 15521                           ; BSR set to: 15
 15522                           ;inc\CANlib.h: 559: {
 15523                           ;inc\CANlib.h: 560: msg->identifier = ((unsigned long)RXB1SIDH)<< 3;
 15524  002D42  CF51 F02C          	movff	3921,??_CANreceiveMessage	;volatile
 15525  002D46  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15526  002D48  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15527  002D4A  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15528  002D4C  0E03               	movlw	3
 15529  002D4E                     i1u602_25:
 15530  002D4E  90D8               	bcf	status,0,c
 15531  002D50  362C               	rlcf	??_CANreceiveMessage,f,c
 15532  002D52  362D               	rlcf	??_CANreceiveMessage+1,f,c
 15533  002D54  362E               	rlcf	??_CANreceiveMessage+2,f,c
 15534  002D56  362F               	rlcf	??_CANreceiveMessage+3,f,c
 15535  002D58  2EE8               	decfsz	wreg,f,c
 15536  002D5A  D7F9               	goto	i1u602_25
 15537  002D5C  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15538  002D60  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15539  002D64  C02C  FFDE         	movff	??_CANreceiveMessage,postinc2
 15540  002D68  C02D  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15541  002D6C  C02E  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15542  002D70  C02F  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15543                           
 15544                           ; BSR set to: 15
 15545                           ;inc\CANlib.h: 561: tamp = (RXB1SIDL >> 5 ) & 0x07;
 15546  002D74  010F               	movlb	15	; () banked
 15547  002D76  3952               	swapf	82,w,b	;volatile
 15548  002D78  42E8               	rrncf	wreg,f,c
 15549  002D7A  0B07               	andlw	7
 15550  002D7C  0B07               	andlw	7
 15551  002D7E  6E35               	movwf	CANreceiveMessage@tamp,c
 15552                           
 15553                           ; BSR set to: 15
 15554                           ;inc\CANlib.h: 562: msg->identifier = msg->identifier + tamp;
 15555  002D80  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15556  002D84  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15557  002D88  CFDE F02C          	movff	postinc2,??_CANreceiveMessage
 15558  002D8C  CFDE F02D          	movff	postinc2,??_CANreceiveMessage+1
 15559  002D90  CFDE F02E          	movff	postinc2,??_CANreceiveMessage+2
 15560  002D94  CFDE F02F          	movff	postinc2,??_CANreceiveMessage+3
 15561  002D98  5035               	movf	CANreceiveMessage@tamp,w,c
 15562  002D9A  242C               	addwf	??_CANreceiveMessage,w,c
 15563  002D9C  6E30               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 15564  002D9E  0E00               	movlw	0
 15565  002DA0  202D               	addwfc	??_CANreceiveMessage+1,w,c
 15566  002DA2  6E31               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 15567  002DA4  0E00               	movlw	0
 15568  002DA6  202E               	addwfc	??_CANreceiveMessage+2,w,c
 15569  002DA8  6E32               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 15570  002DAA  0E00               	movlw	0
 15571  002DAC  202F               	addwfc	??_CANreceiveMessage+3,w,c
 15572  002DAE  6E33               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 15573  002DB0  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15574  002DB4  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15575  002DB8  C030  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 15576  002DBC  C031  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 15577  002DC0  C032  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 15578  002DC4  C033  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 15579                           
 15580                           ;inc\CANlib.h: 563: }
 15581  002DC8  D093               	goto	i1l5166
 15582  002DCA                     i1l5140:
 15583                           
 15584                           ; BSR set to: 15
 15585                           ;inc\CANlib.h: 564: else
 15586                           ;inc\CANlib.h: 565: {
 15587                           ;inc\CANlib.h: 566: msg->identifier = (unsigned long) RXB1EIDL;
 15588  002DCA  CF54 F02C          	movff	3924,??_CANreceiveMessage	;volatile
 15589  002DCE  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15590  002DD0  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15591  002DD2  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15592  002DD4  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15593  002DD8  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15594  002DDC  C02C  FFDE         	movff	??_CANreceiveMessage,postinc2
 15595  002DE0  C02D  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15596  002DE4  C02E  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15597  002DE8  C02F  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15598                           
 15599                           ; BSR set to: 15
 15600                           ;inc\CANlib.h: 567: msg->identifier += ((unsigned long) RXB1EIDH) << 8;
 15601  002DEC  CF53 F02C          	movff	3923,??_CANreceiveMessage	;volatile
 15602  002DF0  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15603  002DF2  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15604  002DF4  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15605  002DF6  C02E  F02F         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 15606  002DFA  C02D  F02E         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 15607  002DFE  C02C  F02D         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 15608  002E02  6A2C               	clrf	??_CANreceiveMessage,c
 15609  002E04  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15610  002E08  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15611  002E0C  502C               	movf	??_CANreceiveMessage,w,c
 15612  002E0E  26DE               	addwf	postinc2,f,c
 15613  002E10  502D               	movf	??_CANreceiveMessage+1,w,c
 15614  002E12  22DE               	addwfc	postinc2,f,c
 15615  002E14  502E               	movf	??_CANreceiveMessage+2,w,c
 15616  002E16  22DE               	addwfc	postinc2,f,c
 15617  002E18  502F               	movf	??_CANreceiveMessage+3,w,c
 15618  002E1A  22DE               	addwfc	postinc2,f,c
 15619                           
 15620                           ; BSR set to: 15
 15621                           ;inc\CANlib.h: 569: if (RXB1SIDLbits.EID16)
 15622  002E1C  010F               	movlb	15	; () banked
 15623  002E1E  A152               	btfss	82,0,b	;volatile
 15624  002E20  D00D               	goto	i1l5148
 15625                           
 15626                           ; BSR set to: 15
 15627                           ;inc\CANlib.h: 570: msg->identifier |= 0x00010000;
 15628  002E22  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15629  002E26  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15630  002E2A  0E00               	movlw	0
 15631  002E2C  12DE               	iorwf	postinc2,f,c
 15632  002E2E  0E00               	movlw	0
 15633  002E30  12DE               	iorwf	postinc2,f,c
 15634  002E32  0E01               	movlw	1
 15635  002E34  12DE               	iorwf	postinc2,f,c
 15636  002E36  0E00               	movlw	0
 15637  002E38  12DE               	iorwf	postinc2,f,c
 15638  002E3A  D000               	goto	i1l5148
 15639  002E3C                     i1l5148:
 15640                           
 15641                           ; BSR set to: 15
 15642                           ;inc\CANlib.h: 571: if (RXB1SIDLbits.EID17)
 15643  002E3C  010F               	movlb	15	; () banked
 15644  002E3E  A352               	btfss	82,1,b	;volatile
 15645  002E40  D00D               	goto	i1l5152
 15646                           
 15647                           ; BSR set to: 15
 15648                           ;inc\CANlib.h: 572: msg->identifier |= 0x00020000;
 15649  002E42  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15650  002E46  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15651  002E4A  0E00               	movlw	0
 15652  002E4C  12DE               	iorwf	postinc2,f,c
 15653  002E4E  0E00               	movlw	0
 15654  002E50  12DE               	iorwf	postinc2,f,c
 15655  002E52  0E02               	movlw	2
 15656  002E54  12DE               	iorwf	postinc2,f,c
 15657  002E56  0E00               	movlw	0
 15658  002E58  12DE               	iorwf	postinc2,f,c
 15659  002E5A  D000               	goto	i1l5152
 15660  002E5C                     i1l5152:
 15661                           
 15662                           ; BSR set to: 15
 15663                           ;inc\CANlib.h: 573: if (RXB1SIDLbits.SID0)
 15664  002E5C  010F               	movlb	15	; () banked
 15665  002E5E  AB52               	btfss	82,5,b	;volatile
 15666  002E60  D00D               	goto	i1l5156
 15667                           
 15668                           ; BSR set to: 15
 15669                           ;inc\CANlib.h: 574: msg->identifier |= 0x00040000;
 15670  002E62  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15671  002E66  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15672  002E6A  0E00               	movlw	0
 15673  002E6C  12DE               	iorwf	postinc2,f,c
 15674  002E6E  0E00               	movlw	0
 15675  002E70  12DE               	iorwf	postinc2,f,c
 15676  002E72  0E04               	movlw	4
 15677  002E74  12DE               	iorwf	postinc2,f,c
 15678  002E76  0E00               	movlw	0
 15679  002E78  12DE               	iorwf	postinc2,f,c
 15680  002E7A  D000               	goto	i1l5156
 15681  002E7C                     i1l5156:
 15682                           
 15683                           ; BSR set to: 15
 15684                           ;inc\CANlib.h: 575: if (RXB1SIDLbits.SID1)
 15685  002E7C  010F               	movlb	15	; () banked
 15686  002E7E  AD52               	btfss	82,6,b	;volatile
 15687  002E80  D00D               	goto	i1l5160
 15688                           
 15689                           ; BSR set to: 15
 15690                           ;inc\CANlib.h: 576: msg->identifier |= 0x00080000;
 15691  002E82  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15692  002E86  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15693  002E8A  0E00               	movlw	0
 15694  002E8C  12DE               	iorwf	postinc2,f,c
 15695  002E8E  0E00               	movlw	0
 15696  002E90  12DE               	iorwf	postinc2,f,c
 15697  002E92  0E08               	movlw	8
 15698  002E94  12DE               	iorwf	postinc2,f,c
 15699  002E96  0E00               	movlw	0
 15700  002E98  12DE               	iorwf	postinc2,f,c
 15701  002E9A  D000               	goto	i1l5160
 15702  002E9C                     i1l5160:
 15703                           
 15704                           ; BSR set to: 15
 15705                           ;inc\CANlib.h: 577: if (RXB1SIDLbits.SID2)
 15706  002E9C  010F               	movlb	15	; () banked
 15707  002E9E  AF52               	btfss	82,7,b	;volatile
 15708  002EA0  D00D               	goto	i1l5164
 15709                           
 15710                           ; BSR set to: 15
 15711                           ;inc\CANlib.h: 578: msg->identifier |= 0x00100000;
 15712  002EA2  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15713  002EA6  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15714  002EAA  0E00               	movlw	0
 15715  002EAC  12DE               	iorwf	postinc2,f,c
 15716  002EAE  0E00               	movlw	0
 15717  002EB0  12DE               	iorwf	postinc2,f,c
 15718  002EB2  0E10               	movlw	16
 15719  002EB4  12DE               	iorwf	postinc2,f,c
 15720  002EB6  0E00               	movlw	0
 15721  002EB8  12DE               	iorwf	postinc2,f,c
 15722  002EBA  D000               	goto	i1l5164
 15723  002EBC                     i1l5164:
 15724                           
 15725                           ; BSR set to: 15
 15726                           ;inc\CANlib.h: 580: msg->identifier |= ((unsigned long) RXB1SIDH) << 21;
 15727  002EBC  CF51 F02C          	movff	3921,??_CANreceiveMessage	;volatile
 15728  002EC0  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15729  002EC2  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15730  002EC4  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15731  002EC6  0E15               	movlw	21
 15732  002EC8                     i1u608_25:
 15733  002EC8  90D8               	bcf	status,0,c
 15734  002ECA  362C               	rlcf	??_CANreceiveMessage,f,c
 15735  002ECC  362D               	rlcf	??_CANreceiveMessage+1,f,c
 15736  002ECE  362E               	rlcf	??_CANreceiveMessage+2,f,c
 15737  002ED0  362F               	rlcf	??_CANreceiveMessage+3,f,c
 15738  002ED2  2EE8               	decfsz	wreg,f,c
 15739  002ED4  D7F9               	goto	i1u608_25
 15740  002ED6  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15741  002EDA  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15742  002EDE  502C               	movf	??_CANreceiveMessage,w,c
 15743  002EE0  12DE               	iorwf	postinc2,f,c
 15744  002EE2  502D               	movf	??_CANreceiveMessage+1,w,c
 15745  002EE4  12DE               	iorwf	postinc2,f,c
 15746  002EE6  502E               	movf	??_CANreceiveMessage+2,w,c
 15747  002EE8  12DE               	iorwf	postinc2,f,c
 15748  002EEA  502F               	movf	??_CANreceiveMessage+3,w,c
 15749  002EEC  12DE               	iorwf	postinc2,f,c
 15750  002EEE  D000               	goto	i1l5166
 15751  002EF0                     i1l5166:
 15752                           
 15753                           ; BSR set to: 15
 15754                           ;inc\CANlib.h: 581: }
 15755                           ;inc\CANlib.h: 583: RXB1CONbits.RXFUL = 0x00;
 15756  002EF0  010F               	movlb	15	; () banked
 15757  002EF2  9F50               	bcf	80,7,b	;volatile
 15758                           
 15759                           ; BSR set to: 15
 15760                           ;inc\CANlib.h: 584: return (error);
 15761                           ;	Return value of _CANreceiveMessage is never used
 15762  002EF4  0012               	return	
 15763  002EF6                     i1l410:
 15764                           
 15765                           ; BSR set to: 15
 15766                           ;inc\CANlib.h: 585: }
 15767                           ;inc\CANlib.h: 587: if (RXB0CONbits.RXFUL ==0x01)
 15768  002EF6  AE60               	btfss	3936,7,c	;volatile
 15769  002EF8  0012               	return	
 15770                           
 15771                           ; BSR set to: 15
 15772                           ;inc\CANlib.h: 588: {
 15773                           ;inc\CANlib.h: 589: msg->identifier = 0;
 15774  002EFA  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15775  002EFE  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15776  002F02  6ADE               	clrf	postinc2,c
 15777  002F04  6ADE               	clrf	postinc2,c
 15778  002F06  6ADE               	clrf	postinc2,c
 15779  002F08  6ADD               	clrf	postdec2,c
 15780                           
 15781                           ; BSR set to: 15
 15782                           ;inc\CANlib.h: 590: msg->data[0] =RXB0D0;
 15783  002F0A  EE20 F004          	lfsr	2,4
 15784  002F0E  502A               	movf	CANreceiveMessage@msg,w,c
 15785  002F10  26D9               	addwf	fsr2l,f,c
 15786  002F12  502B               	movf	CANreceiveMessage@msg+1,w,c
 15787  002F14  22DA               	addwfc	fsr2h,f,c
 15788  002F16  CF66 FFDF          	movff	3942,indf2	;volatile
 15789                           
 15790                           ; BSR set to: 15
 15791                           ;inc\CANlib.h: 591: msg->data[1] =RXB0D1;
 15792  002F1A  EE20 F005          	lfsr	2,5
 15793  002F1E  502A               	movf	CANreceiveMessage@msg,w,c
 15794  002F20  26D9               	addwf	fsr2l,f,c
 15795  002F22  502B               	movf	CANreceiveMessage@msg+1,w,c
 15796  002F24  22DA               	addwfc	fsr2h,f,c
 15797  002F26  CF67 FFDF          	movff	3943,indf2	;volatile
 15798                           
 15799                           ; BSR set to: 15
 15800                           ;inc\CANlib.h: 592: msg->data[2] =RXB0D2;
 15801  002F2A  EE20 F006          	lfsr	2,6
 15802  002F2E  502A               	movf	CANreceiveMessage@msg,w,c
 15803  002F30  26D9               	addwf	fsr2l,f,c
 15804  002F32  502B               	movf	CANreceiveMessage@msg+1,w,c
 15805  002F34  22DA               	addwfc	fsr2h,f,c
 15806  002F36  CF68 FFDF          	movff	3944,indf2	;volatile
 15807                           
 15808                           ; BSR set to: 15
 15809                           ;inc\CANlib.h: 593: msg->data[3] =RXB0D3;
 15810  002F3A  EE20 F007          	lfsr	2,7
 15811  002F3E  502A               	movf	CANreceiveMessage@msg,w,c
 15812  002F40  26D9               	addwf	fsr2l,f,c
 15813  002F42  502B               	movf	CANreceiveMessage@msg+1,w,c
 15814  002F44  22DA               	addwfc	fsr2h,f,c
 15815  002F46  CF69 FFDF          	movff	3945,indf2	;volatile
 15816                           
 15817                           ; BSR set to: 15
 15818                           ;inc\CANlib.h: 594: msg->data[4] =RXB0D4;
 15819  002F4A  EE20 F008          	lfsr	2,8
 15820  002F4E  502A               	movf	CANreceiveMessage@msg,w,c
 15821  002F50  26D9               	addwf	fsr2l,f,c
 15822  002F52  502B               	movf	CANreceiveMessage@msg+1,w,c
 15823  002F54  22DA               	addwfc	fsr2h,f,c
 15824  002F56  CF6A FFDF          	movff	3946,indf2	;volatile
 15825                           
 15826                           ; BSR set to: 15
 15827                           ;inc\CANlib.h: 595: msg->data[5] =RXB0D5;
 15828  002F5A  EE20 F009          	lfsr	2,9
 15829  002F5E  502A               	movf	CANreceiveMessage@msg,w,c
 15830  002F60  26D9               	addwf	fsr2l,f,c
 15831  002F62  502B               	movf	CANreceiveMessage@msg+1,w,c
 15832  002F64  22DA               	addwfc	fsr2h,f,c
 15833  002F66  CF6B FFDF          	movff	3947,indf2	;volatile
 15834                           
 15835                           ; BSR set to: 15
 15836                           ;inc\CANlib.h: 596: msg->data[6] =RXB0D6;
 15837  002F6A  EE20 F00A          	lfsr	2,10
 15838  002F6E  502A               	movf	CANreceiveMessage@msg,w,c
 15839  002F70  26D9               	addwf	fsr2l,f,c
 15840  002F72  502B               	movf	CANreceiveMessage@msg+1,w,c
 15841  002F74  22DA               	addwfc	fsr2h,f,c
 15842  002F76  CF6C FFDF          	movff	3948,indf2	;volatile
 15843                           
 15844                           ; BSR set to: 15
 15845                           ;inc\CANlib.h: 597: msg->data[7] =RXB0D7;
 15846  002F7A  EE20 F00B          	lfsr	2,11
 15847  002F7E  502A               	movf	CANreceiveMessage@msg,w,c
 15848  002F80  26D9               	addwf	fsr2l,f,c
 15849  002F82  502B               	movf	CANreceiveMessage@msg+1,w,c
 15850  002F84  22DA               	addwfc	fsr2h,f,c
 15851  002F86  CF6D FFDF          	movff	3949,indf2	;volatile
 15852                           
 15853                           ; BSR set to: 15
 15854                           ;inc\CANlib.h: 599: msg->RTR = RXB0DLCbits.RXRTR;
 15855  002F8A  EE20 F00E          	lfsr	2,14
 15856  002F8E  502A               	movf	CANreceiveMessage@msg,w,c
 15857  002F90  26D9               	addwf	fsr2l,f,c
 15858  002F92  502B               	movf	CANreceiveMessage@msg+1,w,c
 15859  002F94  22DA               	addwfc	fsr2h,f,c
 15860  002F96  AC65               	btfss	3941,6,c	;volatile
 15861  002F98  D002               	goto	i1u610_20
 15862  002F9A  0E01               	movlw	1
 15863  002F9C  D001               	goto	i1u610_26
 15864  002F9E                     i1u610_20:
 15865  002F9E  0E00               	movlw	0
 15866  002FA0                     i1u610_26:
 15867  002FA0  6EDF               	movwf	indf2,c
 15868                           
 15869                           ; BSR set to: 15
 15870                           ;inc\CANlib.h: 601: msg->length = RXB0DLC & 0x0F;
 15871  002FA2  EE20 F00D          	lfsr	2,13
 15872  002FA6  502A               	movf	CANreceiveMessage@msg,w,c
 15873  002FA8  26D9               	addwf	fsr2l,f,c
 15874  002FAA  502B               	movf	CANreceiveMessage@msg+1,w,c
 15875  002FAC  22DA               	addwfc	fsr2h,f,c
 15876  002FAE  5065               	movf	3941,w,c	;volatile
 15877  002FB0  0B0F               	andlw	15
 15878  002FB2  6EDF               	movwf	indf2,c
 15879                           
 15880                           ; BSR set to: 15
 15881                           ;inc\CANlib.h: 603: msg->type = RXB0SIDLbits.EXID;
 15882  002FB4  EE20 F00C          	lfsr	2,12
 15883  002FB8  502A               	movf	CANreceiveMessage@msg,w,c
 15884  002FBA  26D9               	addwf	fsr2l,f,c
 15885  002FBC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15886  002FBE  22DA               	addwfc	fsr2h,f,c
 15887  002FC0  A662               	btfss	3938,3,c	;volatile
 15888  002FC2  D002               	goto	i1u611_20
 15889  002FC4  0E01               	movlw	1
 15890  002FC6  D001               	goto	i1u611_26
 15891  002FC8                     i1u611_20:
 15892  002FC8  0E00               	movlw	0
 15893  002FCA                     i1u611_26:
 15894  002FCA  6EDF               	movwf	indf2,c
 15895                           
 15896                           ; BSR set to: 15
 15897                           ;inc\CANlib.h: 605: if (RXB0SIDLbits.EXID == 0)
 15898  002FCC  B662               	btfsc	3938,3,c	;volatile
 15899  002FCE  D043               	goto	i1l5202
 15900                           
 15901                           ; BSR set to: 15
 15902                           ;inc\CANlib.h: 606: {
 15903                           ;inc\CANlib.h: 607: msg->identifier = ((unsigned long)RXB0SIDH)<< 3;
 15904  002FD0  CF61 F02C          	movff	3937,??_CANreceiveMessage	;volatile
 15905  002FD4  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15906  002FD6  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15907  002FD8  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15908  002FDA  0E03               	movlw	3
 15909  002FDC                     i1u613_25:
 15910  002FDC  90D8               	bcf	status,0,c
 15911  002FDE  362C               	rlcf	??_CANreceiveMessage,f,c
 15912  002FE0  362D               	rlcf	??_CANreceiveMessage+1,f,c
 15913  002FE2  362E               	rlcf	??_CANreceiveMessage+2,f,c
 15914  002FE4  362F               	rlcf	??_CANreceiveMessage+3,f,c
 15915  002FE6  2EE8               	decfsz	wreg,f,c
 15916  002FE8  D7F9               	goto	i1u613_25
 15917  002FEA  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15918  002FEE  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15919  002FF2  C02C  FFDE         	movff	??_CANreceiveMessage,postinc2
 15920  002FF6  C02D  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15921  002FFA  C02E  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15922  002FFE  C02F  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15923                           
 15924                           ; BSR set to: 15
 15925                           ;inc\CANlib.h: 608: tamp = (RXB0SIDL >> 5 ) & 0x07;
 15926  003002  3862               	swapf	3938,w,c	;volatile
 15927  003004  42E8               	rrncf	wreg,f,c
 15928  003006  0B07               	andlw	7
 15929  003008  0B07               	andlw	7
 15930  00300A  6E35               	movwf	CANreceiveMessage@tamp,c
 15931                           
 15932                           ; BSR set to: 15
 15933                           ;inc\CANlib.h: 609: msg->identifier = msg->identifier + tamp;
 15934  00300C  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15935  003010  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15936  003014  CFDE F02C          	movff	postinc2,??_CANreceiveMessage
 15937  003018  CFDE F02D          	movff	postinc2,??_CANreceiveMessage+1
 15938  00301C  CFDE F02E          	movff	postinc2,??_CANreceiveMessage+2
 15939  003020  CFDE F02F          	movff	postinc2,??_CANreceiveMessage+3
 15940  003024  5035               	movf	CANreceiveMessage@tamp,w,c
 15941  003026  242C               	addwf	??_CANreceiveMessage,w,c
 15942  003028  6E30               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 15943  00302A  0E00               	movlw	0
 15944  00302C  202D               	addwfc	??_CANreceiveMessage+1,w,c
 15945  00302E  6E31               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 15946  003030  0E00               	movlw	0
 15947  003032  202E               	addwfc	??_CANreceiveMessage+2,w,c
 15948  003034  6E32               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 15949  003036  0E00               	movlw	0
 15950  003038  202F               	addwfc	??_CANreceiveMessage+3,w,c
 15951  00303A  6E33               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 15952  00303C  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15953  003040  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15954  003044  C030  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 15955  003048  C031  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 15956  00304C  C032  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 15957  003050  C033  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 15958                           
 15959                           ;inc\CANlib.h: 610: }
 15960  003054  D08E               	goto	i1l5228
 15961  003056                     i1l5202:
 15962                           
 15963                           ; BSR set to: 15
 15964                           ;inc\CANlib.h: 611: else
 15965                           ;inc\CANlib.h: 612: {
 15966                           ;inc\CANlib.h: 613: msg->identifier = (unsigned long) RXB0EIDL;
 15967  003056  CF64 F02C          	movff	3940,??_CANreceiveMessage	;volatile
 15968  00305A  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15969  00305C  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15970  00305E  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15971  003060  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15972  003064  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15973  003068  C02C  FFDE         	movff	??_CANreceiveMessage,postinc2
 15974  00306C  C02D  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15975  003070  C02E  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15976  003074  C02F  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15977                           
 15978                           ; BSR set to: 15
 15979                           ;inc\CANlib.h: 614: msg->identifier += ((unsigned long) RXB0EIDH) << 8;
 15980  003078  CF63 F02C          	movff	3939,??_CANreceiveMessage	;volatile
 15981  00307C  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15982  00307E  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15983  003080  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15984  003082  C02E  F02F         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 15985  003086  C02D  F02E         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 15986  00308A  C02C  F02D         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 15987  00308E  6A2C               	clrf	??_CANreceiveMessage,c
 15988  003090  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15989  003094  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15990  003098  502C               	movf	??_CANreceiveMessage,w,c
 15991  00309A  26DE               	addwf	postinc2,f,c
 15992  00309C  502D               	movf	??_CANreceiveMessage+1,w,c
 15993  00309E  22DE               	addwfc	postinc2,f,c
 15994  0030A0  502E               	movf	??_CANreceiveMessage+2,w,c
 15995  0030A2  22DE               	addwfc	postinc2,f,c
 15996  0030A4  502F               	movf	??_CANreceiveMessage+3,w,c
 15997  0030A6  22DE               	addwfc	postinc2,f,c
 15998                           
 15999                           ; BSR set to: 15
 16000                           ;inc\CANlib.h: 616: if (RXB0SIDLbits.EID16)
 16001  0030A8  A062               	btfss	3938,0,c	;volatile
 16002  0030AA  D00D               	goto	i1l5210
 16003                           
 16004                           ; BSR set to: 15
 16005                           ;inc\CANlib.h: 617: msg->identifier |= 0x00010000;
 16006  0030AC  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16007  0030B0  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16008  0030B4  0E00               	movlw	0
 16009  0030B6  12DE               	iorwf	postinc2,f,c
 16010  0030B8  0E00               	movlw	0
 16011  0030BA  12DE               	iorwf	postinc2,f,c
 16012  0030BC  0E01               	movlw	1
 16013  0030BE  12DE               	iorwf	postinc2,f,c
 16014  0030C0  0E00               	movlw	0
 16015  0030C2  12DE               	iorwf	postinc2,f,c
 16016  0030C4  D000               	goto	i1l5210
 16017  0030C6                     i1l5210:
 16018                           
 16019                           ; BSR set to: 15
 16020                           ;inc\CANlib.h: 618: if (RXB0SIDLbits.EID17)
 16021  0030C6  A262               	btfss	3938,1,c	;volatile
 16022  0030C8  D00D               	goto	i1l5214
 16023                           
 16024                           ; BSR set to: 15
 16025                           ;inc\CANlib.h: 619: msg->identifier |= 0x00020000;
 16026  0030CA  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16027  0030CE  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16028  0030D2  0E00               	movlw	0
 16029  0030D4  12DE               	iorwf	postinc2,f,c
 16030  0030D6  0E00               	movlw	0
 16031  0030D8  12DE               	iorwf	postinc2,f,c
 16032  0030DA  0E02               	movlw	2
 16033  0030DC  12DE               	iorwf	postinc2,f,c
 16034  0030DE  0E00               	movlw	0
 16035  0030E0  12DE               	iorwf	postinc2,f,c
 16036  0030E2  D000               	goto	i1l5214
 16037  0030E4                     i1l5214:
 16038                           
 16039                           ; BSR set to: 15
 16040                           ;inc\CANlib.h: 620: if (RXB0SIDLbits.SID0)
 16041  0030E4  AA62               	btfss	3938,5,c	;volatile
 16042  0030E6  D00D               	goto	i1l5218
 16043                           
 16044                           ; BSR set to: 15
 16045                           ;inc\CANlib.h: 621: msg->identifier |= 0x00040000;
 16046  0030E8  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16047  0030EC  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16048  0030F0  0E00               	movlw	0
 16049  0030F2  12DE               	iorwf	postinc2,f,c
 16050  0030F4  0E00               	movlw	0
 16051  0030F6  12DE               	iorwf	postinc2,f,c
 16052  0030F8  0E04               	movlw	4
 16053  0030FA  12DE               	iorwf	postinc2,f,c
 16054  0030FC  0E00               	movlw	0
 16055  0030FE  12DE               	iorwf	postinc2,f,c
 16056  003100  D000               	goto	i1l5218
 16057  003102                     i1l5218:
 16058                           
 16059                           ; BSR set to: 15
 16060                           ;inc\CANlib.h: 622: if (RXB0SIDLbits.SID1)
 16061  003102  AC62               	btfss	3938,6,c	;volatile
 16062  003104  D00D               	goto	i1l5222
 16063                           
 16064                           ; BSR set to: 15
 16065                           ;inc\CANlib.h: 623: msg->identifier |= 0x00080000;
 16066  003106  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16067  00310A  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16068  00310E  0E00               	movlw	0
 16069  003110  12DE               	iorwf	postinc2,f,c
 16070  003112  0E00               	movlw	0
 16071  003114  12DE               	iorwf	postinc2,f,c
 16072  003116  0E08               	movlw	8
 16073  003118  12DE               	iorwf	postinc2,f,c
 16074  00311A  0E00               	movlw	0
 16075  00311C  12DE               	iorwf	postinc2,f,c
 16076  00311E  D000               	goto	i1l5222
 16077  003120                     i1l5222:
 16078                           
 16079                           ; BSR set to: 15
 16080                           ;inc\CANlib.h: 624: if (RXB0SIDLbits.SID2)
 16081  003120  AE62               	btfss	3938,7,c	;volatile
 16082  003122  D00D               	goto	i1l5226
 16083                           
 16084                           ; BSR set to: 15
 16085                           ;inc\CANlib.h: 625: msg->identifier |= 0x00100000;
 16086  003124  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16087  003128  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16088  00312C  0E00               	movlw	0
 16089  00312E  12DE               	iorwf	postinc2,f,c
 16090  003130  0E00               	movlw	0
 16091  003132  12DE               	iorwf	postinc2,f,c
 16092  003134  0E10               	movlw	16
 16093  003136  12DE               	iorwf	postinc2,f,c
 16094  003138  0E00               	movlw	0
 16095  00313A  12DE               	iorwf	postinc2,f,c
 16096  00313C  D000               	goto	i1l5226
 16097  00313E                     i1l5226:
 16098                           
 16099                           ; BSR set to: 15
 16100                           ;inc\CANlib.h: 627: msg->identifier |= ((unsigned long) RXB0SIDH) << 21;
 16101  00313E  CF61 F02C          	movff	3937,??_CANreceiveMessage	;volatile
 16102  003142  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16103  003144  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16104  003146  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16105  003148  0E15               	movlw	21
 16106  00314A                     i1u619_25:
 16107  00314A  90D8               	bcf	status,0,c
 16108  00314C  362C               	rlcf	??_CANreceiveMessage,f,c
 16109  00314E  362D               	rlcf	??_CANreceiveMessage+1,f,c
 16110  003150  362E               	rlcf	??_CANreceiveMessage+2,f,c
 16111  003152  362F               	rlcf	??_CANreceiveMessage+3,f,c
 16112  003154  2EE8               	decfsz	wreg,f,c
 16113  003156  D7F9               	goto	i1u619_25
 16114  003158  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16115  00315C  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16116  003160  502C               	movf	??_CANreceiveMessage,w,c
 16117  003162  12DE               	iorwf	postinc2,f,c
 16118  003164  502D               	movf	??_CANreceiveMessage+1,w,c
 16119  003166  12DE               	iorwf	postinc2,f,c
 16120  003168  502E               	movf	??_CANreceiveMessage+2,w,c
 16121  00316A  12DE               	iorwf	postinc2,f,c
 16122  00316C  502F               	movf	??_CANreceiveMessage+3,w,c
 16123  00316E  12DE               	iorwf	postinc2,f,c
 16124  003170  D000               	goto	i1l5228
 16125  003172                     i1l5228:
 16126                           
 16127                           ; BSR set to: 15
 16128                           ;inc\CANlib.h: 629: }
 16129                           ;inc\CANlib.h: 630: RXB0CONbits.RXFUL = 0x00;
 16130  003172  9E60               	bcf	3936,7,c	;volatile
 16131                           
 16132                           ; BSR set to: 15
 16133                           ;inc\CANlib.h: 632: return (error);
 16134                           ;	Return value of _CANreceiveMessage is never used
 16135  003174  0012               	return	
 16136                           
 16137                           ; BSR set to: 15
 16138                           
 16139                           ; BSR set to: 15
 16140  003176  0012               	return		;funcret
 16141  003178                     __end_of_CANreceiveMessage:
 16142                           	opt stack 0
 16143                           pclatu	equ	0xFFB
 16144                           pclath	equ	0xFFA
 16145                           tblptru	equ	0xFF8
 16146                           tblptrh	equ	0xFF7
 16147                           tblptrl	equ	0xFF6
 16148                           tablat	equ	0xFF5
 16149                           prodh	equ	0xFF4
 16150                           prodl	equ	0xFF3
 16151                           intcon	equ	0xFF2
 16152                           intcon2	equ	0xFF1
 16153                           postinc0	equ	0xFEE
 16154                           fsr0h	equ	0xFEA
 16155                           fsr0l	equ	0xFE9
 16156                           wreg	equ	0xFE8
 16157                           indf1	equ	0xFE7
 16158                           postdec1	equ	0xFE5
 16159                           fsr1h	equ	0xFE2
 16160                           fsr1l	equ	0xFE1
 16161                           bsr	equ	0xFE0
 16162                           indf2	equ	0xFDF
 16163                           postinc2	equ	0xFDE
 16164                           postdec2	equ	0xFDD
 16165                           plusw2	equ	0xFDB
 16166                           fsr2h	equ	0xFDA
 16167                           fsr2l	equ	0xFD9
 16168                           status	equ	0xFD8
 16169                           
 16170 ;; *************** function _ISR_Alta *****************
 16171 ;; Defined at:
 16172 ;;		line 106 in file "parcheggio.c"
 16173 ;; Parameters:    Size  Location     Type
 16174 ;;		None
 16175 ;; Auto vars:     Size  Location     Type
 16176 ;;		None
 16177 ;; Return value:  Size  Location     Type
 16178 ;;		None               void
 16179 ;; Registers used:
 16180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16181 ;; Tracked objects:
 16182 ;;		On entry : 0/0
 16183 ;;		On exit  : 0/0
 16184 ;;		Unchanged: 0/0
 16185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16188 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16189 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16190 ;;Total ram usage:       16 bytes
 16191 ;; Hardware stack levels used:    1
 16192 ;; Hardware stack levels required when called:    1
 16193 ;; This function calls:
 16194 ;;		___lwdiv
 16195 ;; This function is called by:
 16196 ;;		Interrupt level 2
 16197 ;; This function uses a non-reentrant model
 16198 ;;
 16199                           
 16200                           	psect	intcode
 16201  000008                     __pintcode:
 16202                           	opt stack 0
 16203  000008                     _ISR_Alta:
 16204                           	opt stack 19
 16205                           
 16206                           ; BSR set to: 15
 16207                           ;incstack = 0
 16208  000008  CFFA F069          	movff	pclath,??_ISR_Alta+2
 16209  00000C  CFFB F06A          	movff	pclatu,??_ISR_Alta+3
 16210  000010  CFE9 F06B          	movff	fsr0l,??_ISR_Alta+4
 16211  000014  EF8E  F02B         	goto	int_func
 16212                           pclatu	equ	0xFFB
 16213                           pclath	equ	0xFFA
 16214                           tblptru	equ	0xFF8
 16215                           tblptrh	equ	0xFF7
 16216                           tblptrl	equ	0xFF6
 16217                           tablat	equ	0xFF5
 16218                           prodh	equ	0xFF4
 16219                           prodl	equ	0xFF3
 16220                           intcon	equ	0xFF2
 16221                           intcon2	equ	0xFF1
 16222                           postinc0	equ	0xFEE
 16223                           fsr0h	equ	0xFEA
 16224                           fsr0l	equ	0xFE9
 16225                           wreg	equ	0xFE8
 16226                           indf1	equ	0xFE7
 16227                           postdec1	equ	0xFE5
 16228                           fsr1h	equ	0xFE2
 16229                           fsr1l	equ	0xFE1
 16230                           bsr	equ	0xFE0
 16231                           indf2	equ	0xFDF
 16232                           postinc2	equ	0xFDE
 16233                           postdec2	equ	0xFDD
 16234                           plusw2	equ	0xFDB
 16235                           fsr2h	equ	0xFDA
 16236                           fsr2l	equ	0xFD9
 16237                           status	equ	0xFD8
 16238                           
 16239                           	psect	intcode_body
 16240  00571C                     __pintcode_body:
 16241                           	opt stack 19
 16242  00571C                     int_func:
 16243                           	opt stack 19
 16244  00571C  CFEA F06C          	movff	fsr0h,??_ISR_Alta+5
 16245  005720  CFE1 F06D          	movff	fsr1l,??_ISR_Alta+6
 16246  005724  CFE2 F06E          	movff	fsr1h,??_ISR_Alta+7
 16247  005728  CFD9 F06F          	movff	fsr2l,??_ISR_Alta+8
 16248  00572C  CFDA F070          	movff	fsr2h,??_ISR_Alta+9
 16249  005730  CFF3 F071          	movff	prodl,??_ISR_Alta+10
 16250  005734  CFF4 F072          	movff	prodh,??_ISR_Alta+11
 16251  005738  CFF6 F073          	movff	tblptrl,??_ISR_Alta+12
 16252  00573C  CFF7 F074          	movff	tblptrh,??_ISR_Alta+13
 16253  005740  CFF8 F075          	movff	tblptru,??_ISR_Alta+14
 16254  005744  CFF5 F076          	movff	tablat,??_ISR_Alta+15
 16255                           
 16256                           ;parcheggio.c: 107: if (INTCON2bits.INTEDG0 == 1) {
 16257  005748  ACF1               	btfss	intcon2,6,c	;volatile
 16258  00574A  D007               	goto	i2l702
 16259                           
 16260                           ;parcheggio.c: 108: INTCON2bits.INTEDG0 = 0;
 16261  00574C  9CF1               	bcf	intcon2,6,c	;volatile
 16262                           
 16263                           ;parcheggio.c: 109: TMR3H = 0;
 16264  00574E  0E00               	movlw	0
 16265  005750  6EB3               	movwf	4019,c	;volatile
 16266                           
 16267                           ;parcheggio.c: 110: TMR3L = 0;
 16268  005752  0E00               	movlw	0
 16269  005754  6EB2               	movwf	4018,c	;volatile
 16270                           
 16271                           ;parcheggio.c: 111: distance_error = 0;
 16272  005756  9A53               	bcf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 16273                           
 16274                           ;parcheggio.c: 112: } else {
 16275  005758  D031               	goto	i2l6770
 16276  00575A                     i2l702:
 16277                           
 16278                           ;parcheggio.c: 113: TMR3H_temp = TMR3H;
 16279  00575A  CFB3 F026          	movff	4019,_TMR3H_temp	;volatile
 16280                           
 16281                           ;parcheggio.c: 114: TMR3L_temp = TMR3L;
 16282  00575E  CFB2 F027          	movff	4018,_TMR3L_temp	;volatile
 16283                           
 16284                           ;parcheggio.c: 115: timerValue2 = TMR3H_temp;
 16285  005762  C026  F023         	movff	_TMR3H_temp,_timerValue2	;volatile
 16286  005766  6A24               	clrf	_timerValue2+1,c	;volatile
 16287                           
 16288                           ;parcheggio.c: 116: timerValue2 = ((timerValue2 << 8) | (TMR3L_temp));
 16289  005768  5023               	movf	_timerValue2,w,c	;volatile
 16290  00576A  0100               	movlb	0	; () banked
 16291  00576C  6F67               	movwf	??_ISR_Alta& (0+255),b
 16292  00576E  5027               	movf	_TMR3L_temp,w,c	;volatile
 16293  005770  6E23               	movwf	_timerValue2,c	;volatile
 16294  005772  C067  F024         	movff	??_ISR_Alta,_timerValue2+1	;volatile
 16295                           
 16296                           ; BSR set to: 0
 16297                           ;parcheggio.c: 117: pulse_time = timerValue2 / 2;
 16298  005776  90D8               	bcf	status,0,c
 16299  005778  3024               	rrcf	_timerValue2+1,w,c	;volatile
 16300  00577A  0100               	movlb	0	; () banked
 16301  00577C  6F67               	movwf	??_ISR_Alta& (0+255),b
 16302  00577E  3023               	rrcf	_timerValue2,w,c	;volatile
 16303  005780  6E1F               	movwf	_pulse_time,c	;volatile
 16304  005782  C067  F020         	movff	??_ISR_Alta,_pulse_time+1	;volatile
 16305                           
 16306                           ; BSR set to: 0
 16307                           ;parcheggio.c: 118: sensor_distance[MUX_index] = pulse_time / 58;
 16308  005786  C01F  F060         	movff	_pulse_time,___lwdiv@dividend	;volatile
 16309  00578A  C020  F061         	movff	_pulse_time+1,___lwdiv@dividend+1	;volatile
 16310  00578E  0E00               	movlw	0
 16311  005790  0100               	movlb	0	; () banked
 16312  005792  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 16313  005794  0E3A               	movlw	58
 16314  005796  6F62               	movwf	___lwdiv@divisor& (0+255),b
 16315  005798  EC96  F02C         	call	___lwdiv	;wreg free
 16316  00579C  5025               	movf	_MUX_index,w,c	;volatile
 16317  00579E  0D02               	mullw	2
 16318  0057A0  0E01               	movlw	low _sensor_distance
 16319  0057A2  24F3               	addwf	prodl,w,c
 16320  0057A4  6ED9               	movwf	fsr2l,c
 16321  0057A6  0E00               	movlw	high _sensor_distance
 16322  0057A8  20F4               	addwfc	prodh,w,c
 16323  0057AA  6EDA               	movwf	fsr2h,c
 16324  0057AC  0100               	movlb	0	; () banked
 16325  0057AE  C060  FFDE         	movff	?___lwdiv,postinc2
 16326  0057B2  0100               	movlb	0	; () banked
 16327  0057B4  C061  FFDD         	movff	?___lwdiv+1,postdec2
 16328                           
 16329                           ; BSR set to: 0
 16330                           ;parcheggio.c: 119: INTCON2bits.INTEDG0 = 1;
 16331  0057B8  8CF1               	bsf	intcon2,6,c	;volatile
 16332  0057BA  D000               	goto	i2l6770
 16333  0057BC                     i2l6770:
 16334                           
 16335                           ;parcheggio.c: 120: }
 16336                           ;parcheggio.c: 121: INTCONbits.INT0IF = 0;
 16337  0057BC  92F2               	bcf	intcon,1,c	;volatile
 16338  0057BE  C076  FFF5         	movff	??_ISR_Alta+15,tablat
 16339  0057C2  C075  FFF8         	movff	??_ISR_Alta+14,tblptru
 16340  0057C6  C074  FFF7         	movff	??_ISR_Alta+13,tblptrh
 16341  0057CA  C073  FFF6         	movff	??_ISR_Alta+12,tblptrl
 16342  0057CE  C072  FFF4         	movff	??_ISR_Alta+11,prodh
 16343  0057D2  C071  FFF3         	movff	??_ISR_Alta+10,prodl
 16344  0057D6  C070  FFDA         	movff	??_ISR_Alta+9,fsr2h
 16345  0057DA  C06F  FFD9         	movff	??_ISR_Alta+8,fsr2l
 16346  0057DE  C06E  FFE2         	movff	??_ISR_Alta+7,fsr1h
 16347  0057E2  C06D  FFE1         	movff	??_ISR_Alta+6,fsr1l
 16348  0057E6  C06C  FFEA         	movff	??_ISR_Alta+5,fsr0h
 16349  0057EA  C06B  FFE9         	movff	??_ISR_Alta+4,fsr0l
 16350  0057EE  C06A  FFFB         	movff	??_ISR_Alta+3,pclatu
 16351  0057F2  C069  FFFA         	movff	??_ISR_Alta+2,pclath
 16352  0057F6  0011               	retfie		f
 16353  0057F8                     __end_of_ISR_Alta:
 16354                           	opt stack 0
 16355                           pclatu	equ	0xFFB
 16356                           pclath	equ	0xFFA
 16357                           tblptru	equ	0xFF8
 16358                           tblptrh	equ	0xFF7
 16359                           tblptrl	equ	0xFF6
 16360                           tablat	equ	0xFF5
 16361                           prodh	equ	0xFF4
 16362                           prodl	equ	0xFF3
 16363                           intcon	equ	0xFF2
 16364                           intcon2	equ	0xFF1
 16365                           postinc0	equ	0xFEE
 16366                           fsr0h	equ	0xFEA
 16367                           fsr0l	equ	0xFE9
 16368                           wreg	equ	0xFE8
 16369                           indf1	equ	0xFE7
 16370                           postdec1	equ	0xFE5
 16371                           fsr1h	equ	0xFE2
 16372                           fsr1l	equ	0xFE1
 16373                           bsr	equ	0xFE0
 16374                           indf2	equ	0xFDF
 16375                           postinc2	equ	0xFDE
 16376                           postdec2	equ	0xFDD
 16377                           plusw2	equ	0xFDB
 16378                           fsr2h	equ	0xFDA
 16379                           fsr2l	equ	0xFD9
 16380                           status	equ	0xFD8
 16381                           
 16382 ;; *************** function ___lwdiv *****************
 16383 ;; Defined at:
 16384 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 16385 ;; Parameters:    Size  Location     Type
 16386 ;;  dividend        2    0[BANK0 ] unsigned int 
 16387 ;;  divisor         2    2[BANK0 ] unsigned int 
 16388 ;; Auto vars:     Size  Location     Type
 16389 ;;  quotient        2    5[BANK0 ] unsigned int 
 16390 ;;  counter         1    4[BANK0 ] unsigned char 
 16391 ;; Return value:  Size  Location     Type
 16392 ;;                  2    0[BANK0 ] unsigned int 
 16393 ;; Registers used:
 16394 ;;		wreg, status,2, status,0
 16395 ;; Tracked objects:
 16396 ;;		On entry : 0/0
 16397 ;;		On exit  : 0/0
 16398 ;;		Unchanged: 0/0
 16399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16400 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16401 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16403 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16404 ;;Total ram usage:        7 bytes
 16405 ;; Hardware stack levels used:    1
 16406 ;; This function calls:
 16407 ;;		Nothing
 16408 ;; This function is called by:
 16409 ;;		_ISR_Alta
 16410 ;; This function uses a non-reentrant model
 16411 ;;
 16412                           
 16413                           	psect	text44
 16414  00592C                     __ptext44:
 16415                           	opt stack 0
 16416  00592C                     ___lwdiv:
 16417                           	opt stack 19
 16418                           
 16419                           ;incstack = 0
 16420  00592C  0E00               	movlw	0
 16421  00592E  0100               	movlb	0	; () banked
 16422  005930  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16423  005932  0E00               	movlw	0
 16424  005934  6F65               	movwf	___lwdiv@quotient& (0+255),b
 16425                           
 16426                           ; BSR set to: 0
 16427  005936  0100               	movlb	0	; () banked
 16428  005938  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16429  00593A  0100               	movlb	0	; () banked
 16430  00593C  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16431  00593E  B4D8               	btfsc	status,2,c
 16432  005940  D031               	goto	i2l1422
 16433                           
 16434                           ; BSR set to: 0
 16435  005942  0E01               	movlw	1
 16436  005944  0100               	movlb	0	; () banked
 16437  005946  6F64               	movwf	___lwdiv@counter& (0+255),b
 16438  005948  D007               	goto	i2l6740
 16439  00594A                     i2l6738:
 16440                           
 16441                           ; BSR set to: 0
 16442  00594A  0100               	movlb	0	; () banked
 16443  00594C  90D8               	bcf	status,0,c
 16444  00594E  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 16445  005950  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16446  005952  0100               	movlb	0	; () banked
 16447  005954  2B64               	incf	___lwdiv@counter& (0+255),f,b
 16448  005956  D000               	goto	i2l6740
 16449  005958                     i2l6740:
 16450                           
 16451                           ; BSR set to: 0
 16452  005958  0100               	movlb	0	; () banked
 16453  00595A  BF63               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
 16454  00595C  D002               	goto	i2l6742
 16455  00595E  D7F5               	goto	i2l6738
 16456                           
 16457                           ; BSR set to: 0
 16458  005960  D000               	goto	i2l6742
 16459  005962                     i2l6742:
 16460                           
 16461                           ; BSR set to: 0
 16462  005962  0100               	movlb	0	; () banked
 16463  005964  90D8               	bcf	status,0,c
 16464  005966  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 16465  005968  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16466                           
 16467                           ; BSR set to: 0
 16468  00596A  0100               	movlb	0	; () banked
 16469  00596C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16470  00596E  0100               	movlb	0	; () banked
 16471  005970  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 16472  005972  0100               	movlb	0	; () banked
 16473  005974  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16474  005976  0100               	movlb	0	; () banked
 16475  005978  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16476  00597A  A0D8               	btfss	status,0,c
 16477  00597C  D00B               	goto	i2l6750
 16478                           
 16479                           ; BSR set to: 0
 16480  00597E  0100               	movlb	0	; () banked
 16481  005980  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16482  005982  0100               	movlb	0	; () banked
 16483  005984  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 16484  005986  0100               	movlb	0	; () banked
 16485  005988  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16486  00598A  0100               	movlb	0	; () banked
 16487  00598C  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16488                           
 16489                           ; BSR set to: 0
 16490  00598E  0100               	movlb	0	; () banked
 16491  005990  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 16492  005992  D000               	goto	i2l6750
 16493  005994                     i2l6750:
 16494                           
 16495                           ; BSR set to: 0
 16496  005994  0100               	movlb	0	; () banked
 16497  005996  90D8               	bcf	status,0,c
 16498  005998  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16499  00599A  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 16500                           
 16501                           ; BSR set to: 0
 16502  00599C  0100               	movlb	0	; () banked
 16503  00599E  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 16504  0059A0  D7E0               	goto	i2l6742
 16505  0059A2  D000               	goto	i2l1422
 16506  0059A4                     i2l1422:
 16507                           
 16508                           ; BSR set to: 0
 16509  0059A4  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 16510  0059A8  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16511                           
 16512                           ; BSR set to: 0
 16513  0059AC  0012               	return		;funcret
 16514  0059AE                     __end_of___lwdiv:
 16515                           	opt stack 0
 16516                           pclatu	equ	0xFFB
 16517                           pclath	equ	0xFFA
 16518                           tblptru	equ	0xFF8
 16519                           tblptrh	equ	0xFF7
 16520                           tblptrl	equ	0xFF6
 16521                           tablat	equ	0xFF5
 16522                           prodh	equ	0xFF4
 16523                           prodl	equ	0xFF3
 16524                           intcon	equ	0xFF2
 16525                           intcon2	equ	0xFF1
 16526                           postinc0	equ	0xFEE
 16527                           fsr0h	equ	0xFEA
 16528                           fsr0l	equ	0xFE9
 16529                           wreg	equ	0xFE8
 16530                           indf1	equ	0xFE7
 16531                           postdec1	equ	0xFE5
 16532                           fsr1h	equ	0xFE2
 16533                           fsr1l	equ	0xFE1
 16534                           bsr	equ	0xFE0
 16535                           indf2	equ	0xFDF
 16536                           postinc2	equ	0xFDE
 16537                           postdec2	equ	0xFDD
 16538                           plusw2	equ	0xFDB
 16539                           fsr2h	equ	0xFDA
 16540                           fsr2l	equ	0xFD9
 16541                           status	equ	0xFD8
 16542                           pclatu	equ	0xFFB
 16543                           pclath	equ	0xFFA
 16544                           tblptru	equ	0xFF8
 16545                           tblptrh	equ	0xFF7
 16546                           tblptrl	equ	0xFF6
 16547                           tablat	equ	0xFF5
 16548                           prodh	equ	0xFF4
 16549                           prodl	equ	0xFF3
 16550                           intcon	equ	0xFF2
 16551                           intcon2	equ	0xFF1
 16552                           postinc0	equ	0xFEE
 16553                           fsr0h	equ	0xFEA
 16554                           fsr0l	equ	0xFE9
 16555                           wreg	equ	0xFE8
 16556                           indf1	equ	0xFE7
 16557                           postdec1	equ	0xFE5
 16558                           fsr1h	equ	0xFE2
 16559                           fsr1l	equ	0xFE1
 16560                           bsr	equ	0xFE0
 16561                           indf2	equ	0xFDF
 16562                           postinc2	equ	0xFDE
 16563                           postdec2	equ	0xFDD
 16564                           plusw2	equ	0xFDB
 16565                           fsr2h	equ	0xFDA
 16566                           fsr2l	equ	0xFD9
 16567                           status	equ	0xFD8
 16568                           
 16569                           	psect	param0
 16570  0000                     pclatu	equ	0xFFB
 16571                           pclath	equ	0xFFA
 16572                           tblptru	equ	0xFF8
 16573                           tblptrh	equ	0xFF7
 16574                           tblptrl	equ	0xFF6
 16575                           tablat	equ	0xFF5
 16576                           prodh	equ	0xFF4
 16577                           prodl	equ	0xFF3
 16578                           intcon	equ	0xFF2
 16579                           intcon2	equ	0xFF1
 16580                           postinc0	equ	0xFEE
 16581                           fsr0h	equ	0xFEA
 16582                           fsr0l	equ	0xFE9
 16583                           wreg	equ	0xFE8
 16584                           indf1	equ	0xFE7
 16585                           postdec1	equ	0xFE5
 16586                           fsr1h	equ	0xFE2
 16587                           fsr1l	equ	0xFE1
 16588                           bsr	equ	0xFE0
 16589                           indf2	equ	0xFDF
 16590                           postinc2	equ	0xFDE
 16591                           postdec2	equ	0xFDD
 16592                           plusw2	equ	0xFDB
 16593                           fsr2h	equ	0xFDA
 16594                           fsr2l	equ	0xFD9
 16595                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    80
    Data        13
    BSS         196
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     41      88
    BANK0           160    119     136
    BANK1           256     97     244
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 24
		 -> sin@coeff_a(CODE[20]), sin@coeff_b(CODE[16]), atan@coeff_a(CODE[24]), atan@coeff_b(CODE[20]), 

    CANreceiveMessage@msg	PTR struct . size(2) Largest target is 15
		 -> msg(BANK1[15]), 

    CANsendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data_speed(BANK1[8]), data_brake(BANK1[8]), data_steering(BANK1[8]), data_correction(BANK1[8]), 
		 -> data_test(BANK1[8]), data(BANK1[8]), sensor_distance_short(BANK1[8]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Alta in COMRAM

    None.

Critical Paths under _ISR_Bassa in COMRAM

    _ISR_Bassa->i1_CANsendMessage
    i1_delay_ms->i1___wmul

Critical Paths under _main in BANK0

    _park_search->_parallelo
    _park_routine->_parallelo
    _parallelo->_sqrt
    _can_send->_CANsendMessage
    ___awtofl->___flpack
    _cos->_sin
    _sin->___flsub
    _floor->___flge
    ___fltol->___flneg
    ___altofl->___fltol
    _asin->_sqrt
    _sqrt->___flsub
    ___flsub->_floor
    _atan->___flge
    _fabs->___flneg
    ___flneg->___fladd
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___flge->_fabs
    ___fldiv->___flpack
    _delay_s->_delay_ms
    _delay_ms->___wmul
    ___lwtofl->___flpack
    _configurations->_CANInitialize
    _CANInitialize->_CANSetFilter
    _CANInitialize->_CANSetMask

Critical Paths under _ISR_Alta in BANK0

    _ISR_Alta->___lwdiv

Critical Paths under _ISR_Bassa in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_park_routine
    _park_routine->_matematica
    _parallelo->_asin
    _matematica->_cos
    _cos->_asin
    _asin->_sqrt

Critical Paths under _ISR_Alta in BANK1

    None.

Critical Paths under _ISR_Bassa in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Alta in BANK2

    None.

Critical Paths under _ISR_Bassa in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Alta in BANK3

    None.

Critical Paths under _ISR_Bassa in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Alta in BANK4

    None.

Critical Paths under _ISR_Bassa in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Alta in BANK5

    None.

Critical Paths under _ISR_Bassa in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Alta in BANK6

    None.

Critical Paths under _ISR_Bassa in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Alta in BANK7

    None.

Critical Paths under _ISR_Bassa in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Alta in BANK8

    None.

Critical Paths under _ISR_Bassa in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Alta in BANK9

    None.

Critical Paths under _ISR_Bassa in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Alta in BANK10

    None.

Critical Paths under _ISR_Bassa in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Alta in BANK11

    None.

Critical Paths under _ISR_Bassa in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Alta in BANK12

    None.

Critical Paths under _ISR_Bassa in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  488050
                       _CANisTxReady
                     _CANsendMessage
                    _can_interpreter
                     _configurations
                           _delay_ms
                       _park_routine
                        _park_search
 ---------------------------------------------------------------------------------
 (1) _park_search                                          2     2      0  141957
                                             49 BANK1      2     2      0
                       _CANisTxReady
                     _CANsendMessage
                           ___awtofl
                                _abs
                          _parallelo
 ---------------------------------------------------------------------------------
 (1) _park_routine                                        12    12      0  333335
                                             85 BANK1     12    12      0
                       _CANisTxReady
                     _CANsendMessage
                            ___fladd
                            ___flneg
                            ___fltol
                           ___lwtofl
                           _can_send
                           _delay_ms
                            _delay_s
                         _matematica
                          _parallelo
 ---------------------------------------------------------------------------------
 (2) _parallelo                                            2     2      0  132737
                                            117 BANK0      2     2      0
                           ___awtofl
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___fltol
                                _abs
                               _asin
                           _can_send
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _can_send                                             0     0      0    6155
                       _CANisTxReady
                     _CANsendMessage
 ---------------------------------------------------------------------------------
 (4) _CANsendMessage                                      16     8      8    6131
                                             23 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (4) _CANisTxReady                                         1     1      0      24
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     194
                                             23 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    2871
                                             33 BANK0      5     1      4
                           ___flpack
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (2) _matematica                                          32    32      0  174968
                                             57 BANK1     28    28      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                               _asin
                                _cos
 ---------------------------------------------------------------------------------
 (3) _cos                                                 12     8      4   69437
                                             49 BANK1      8     4      4
                            ___fladd
                             ___flge
                               _asin (ARG)
                                _sin
 ---------------------------------------------------------------------------------
 (4) _sin                                                 17    13      4   60313
                                            113 BANK0      4     0      4
                                              0 BANK1     13    13      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   13154
                                             95 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                8     2      6     452
                                             23 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     722
                                             79 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2794
                                             89 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (3) _asin                                                40    36      4   83814
                                             21 BANK1     28    24      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                               _atan
                               _fabs
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _sqrt                                                25    21      4   17317
                                            113 BANK0      4     0      4
                                              0 BANK1     21    21      0
                             ___flge
                            ___flmul
                            ___flneg (ARG)
                            ___flsub
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    7829
                                            105 BANK0      8     0      8
                            ___fladd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (4) _atan                                                21    17      4   40827
                                             95 BANK0     21    17      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (4) _fabs                                                 4     0      4    1621
                                             79 BANK0      4     0      4
                            ___flneg
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4    1297
                                             75 BANK0      4     0      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   15525
                                             75 BANK0     16     8      8
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             15     7      8    7190
                                             48 BANK0     15     7      8
                            ___fldiv (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             12     4      8    7157
                                             63 BANK0     12     4      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8    1584
                                             83 BANK0     12     4      8
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             15     7      8    5733
                                             33 BANK0     15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0     715
                                             31 BANK0      2     2      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2     669
                                             29 BANK0      2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     289
                                             23 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2692
                                             33 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (6) ___flpack                                            10     4      6    2584
                                             23 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (1) _configurations                                       0     0      0    5934
                      _CANInitialize
 ---------------------------------------------------------------------------------
 (2) _CANInitialize                                       12     7      5    5934
                                             37 BANK0     12     7      5
                   _CANOperationMode
                       _CANSetFilter
                         _CANSetMask
 ---------------------------------------------------------------------------------
 (3) _CANSetMask                                          14     9      5    1286
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANSetFilter                                        14     9      5    3858
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANOperationMode                                     1     1      0      44
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _can_interpreter                                      4     4      0       0
                                             23 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR_Bassa                                           25    25      0    3775
                                             16 COMRAM    25    25      0
                  _CANreceiveMessage
                   i1_CANsendMessage
                         i1_delay_ms
 ---------------------------------------------------------------------------------
 (9) i1_delay_ms                                           2     0      2     257
                                              6 COMRAM     2     0      2
                           i1___wmul
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) i1_CANsendMessage                                    16     8      8    2243
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (9) _CANreceiveMessage                                   12    10      2    1137
                                              0 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Alta                                           16    16      0     395
                                              7 BANK0     16    16      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (12) ___lwdiv                                             7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CANisTxReady
   _CANsendMessage
   _can_interpreter
   _configurations
     _CANInitialize
       _CANOperationMode
       _CANSetFilter
       _CANSetMask
   _delay_ms
     ___wmul
   _park_routine
     _CANisTxReady
     _CANsendMessage
     ___fladd
       ___fldiv (ARG)
         ___flpack
       ___flmul (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___flpack (ARG)
     ___flneg
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flmul (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___flneg (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
     ___lwtofl
       ___flpack
     _can_send
       _CANisTxReady
       _CANsendMessage
     _delay_ms
       ___wmul
     _delay_s
       _delay_ms
         ___wmul
     _matematica
       ___fladd
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv
         ___flpack
       ___flmul
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___flneg
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv
           ___flpack
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
       _cos
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _asin (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _atan
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv
               ___flpack
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___flmul
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
             _eval_poly
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
             _fabs
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
           _sqrt
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___flmul
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flneg (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
             ___flsub (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               _floor (ARG)
                 ___altofl
                   ___flpack
                   ___fltol (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___flneg (ARG)
                       ___fladd (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                         ___flpack (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                 ___fladd
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flge
                   _fabs (ARG)
                     ___flneg
                       ___fladd (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                         ___flpack (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                 _frexp
         _sin (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
             _frexp
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv
         ___flpack
       ___flge
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
       ___flmul
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv
           ___flpack
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
             _frexp
   _park_search
     _CANisTxReady
     _CANsendMessage
     ___awtofl
       ___flpack
       _abs (ARG)
     _abs
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv
         ___flpack
       ___flge
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
       ___flmul
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv
           ___flpack
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
             _frexp

 _ISR_Bassa (ROOT)
   _CANreceiveMessage
   i1_CANsendMessage
   i1_delay_ms
     i1___wmul

 _ISR_Alta (ROOT)
   ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     61      F4       7       95.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     77      88       5       85.0%
BITCOMRAM           5F      0       2       0        2.1%
COMRAM              5F     29      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D4      20        0.0%
DATA                 0      0     1D4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Jun 03 17:19:14 2016

               ___altofl@sign 00BD                             _n 0130                             _x 013C  
                           _z 00DB                  ___fldiv@cntr 008D          __end_of_CANSetFilter 187C  
                ___fldiv@sign 008F            delay_s@repeat_loop 0080                            bsr 000FE0  
         ___wmul@multiplicand 0079                   __CFG_BORV$3 000000              i1___wmul@product 002E  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000                  ___flpack@arg 0077  
                ___flpack@exp 007B                    _MUX_select 0011                           l402 1F64  
                         l403 1F68                           l500 15CC                           l404 1F74  
                         l501 15D0                           l510 16E0                           l502 15DC  
                         l511 16EC                           l503 15E0                           l520 17FC  
                         l512 16F0                           l504 15EC                           l440 3834  
                         l432 37F4                           l521 1800                           l513 16FC  
                         l433 37F8                           l522 180C                           l514 1700  
                         l450 3944                           l434 3804                           l370 193C  
                         l523 1810                           l515 170C                           l507 16CC  
                         l451 3950                           l443 3910                           l435 3808  
                         l363 1B06                           l524 181C                           l508 16D0  
                         l444 3914                           l436 3814                           l380 1B20  
                         l364 1892                           l525 1820                           l509 16DC  
                         l445 3920                           l437 3818                           l381 1C1A  
                         l373 1A50                           l365 1896                           l526 182C  
                         l518 17EC                           l470 1282                           l446 3924  
                         l438 3824                           l358 49EA                           l390 1CEA  
                         l382 1BA8                           l374 1A54                           l366 1990  
                         l519 17F0                           l471 128E                           l463 124E  
                         l447 3930                           l439 3828                           l359 49F4  
                         l383 1BB2                           l375 1A60                           l367 191E  
                         l480 139C                           l464 1252                           l448 3934  
                         l384 1BBC                           l368 1928                           l481 13A0  
                         l465 125E                           l449 3940                           l393 1DA6  
                         l385 1BC6                           l369 1932                           l490 14B0  
                         l482 13AC                           l474 136C                           l466 1262  
                         l394 1DAA                           l378 1D90                           l491 14BC  
                         l475 1370                           l467 126E                           l395 1EA4  
                         l379 1B1C                           l492 14C0                           l476 137C  
                         l468 1272                           l556 5DE8                           l396 1E32  
                         l388 1CDA                           l493 14CC                           l485 148C  
                         l477 1380                           l469 127E                           l397 1E3C  
                         l389 1CDE                           l486 1490                           l478 138C  
                         l398 1E46                           l750 4B60                           l487 149C  
                         l479 1390                           l399 1E50                           l496 15AC  
                         l488 14A0                           l497 15B0                           l489 14AC  
                         l569 5C98                           l761 4CAA                           l498 15BC  
                         l499 15C0                           l836 4478                           l748 4CB0  
                         l781 31EE                           l790 325E                           l791 33D8  
                         l784 322C                           l794 3472                           l797 34FE  
                         l897 5D98                  __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000  
                  _MUX_toggle 0298                    i1_delay_ms 5CDE                           _abs 5D76  
                         _asd 029A                           _dir 029C                           _cos 5636  
                         _msg 0144                           _sin 3CC4                           prod 000FF3  
                         wreg 000FE8               ?_configurations 002A                  ___flmul@cntr 009D  
                ___flmul@sign 009E                  __CFG_LVP$OFF 000000                 ___flpack@sign 007C  
                ___fltol@exp1 00B8                  __CFG_WDT$OFF 000000                          l1023 4568  
                        l1120 4D62                          ?_abs 0077                          l1140 5C1E  
                        l1127 4DC4                          l1128 4DDC                          l1152 405E  
                        l1154 408C                          l1163 4178                          l1148 4020  
                        l1188 55E4                          l1470 473A                          l1462 3E9E  
                        l1463 3FCE                          l5010 4A44                          l5002 49E2  
                        l1482 51E8                          l5004 49F8                          l4140 1948  
                        l1469 474E                          l5022 5D68                          l5008 4A00  
                        l4312 1F58                          l4216 1BD2                          l4160 1A44  
                        l5018 5D54                          l6002 5B20                          l4242 1CF0  
                        l6012 4032                          l4236 1CCE                          ?_cos 01BC  
                        l6110 4F2A                          l6102 4F02                          l4318 1F7A  
                        l4166 1A66                          l4512 383A                          l6040 4108  
                        l6032 40C4                          l6024 4082                          l6120 4F72  
                        l6050 4156                          l6042 4118                          l6018 4070  
                        l6114 4F52                          l4452 5DFA                          l4604 0F88  
                        l6212 4FC8                          l6060 41C8                          l6052 4168  
                        l6044 4124                          l6108 4F22                          l4292 1E5C  
                        l4622 1044                          l4518 3882                          l4470 36B0  
                        l6230 503E                          l6134 5630                          l6070 421C  
                        l6038 40F6                          l6142 5C58                          l4720 13B2  
                        l4640 1100                          l4544 3956                          l6128 5592  
                        l6056 41A0                          l6080 4E64                          l6320 48EE  
                        l6152 5220                          l6242 50A8                          l6218 4FEE  
                        l6330 44F4                          l6250 5AC2                          l6306 47D0  
                        l6404 3B3C                          l6180 52D4                          l6172 52A4  
                        l4822 1712                          l4726 13FA                          l4486 3768  
                        l6238 5094                          l6086 4E8A                          l6262 536A  
                        l6342 46BE                          l6182 52E2                          l4760 151A  
                        l4568 0E12                          l6264 5410                          l6416 3C1E  
                        l6168 5290                          l6280 512C                          l6432 56BE  
                        l4754 14D2                          l4658 11BC                          l4586 0ECC  
                        l6098 4EDA                          l6346 46D6                          l6186 5300  
                        l6178 52C2                          l6370 3E28                          l4828 175A  
                        l4692 12DC                          l6196 58BE                          l6284 514E  
                        l6276 5118                          l6444 5BC2                          l6524 4B0E  
                        l6532 4B5C                          l6516 4AF6                          l4686 1294  
                        l6390 39FE                          l6358 3CFC                          l6470 4440  
                        l6710 356A                          l4856 1832                          l4864 5C8A  
                        l6720 359A                          l6616 3254                          l6544 4BCE  
                        l6536 4BAE                          l4794 163A                          l4788 15F2  
                        l4892 54C6                          l4876 5436                          l6468 4438  
                        l6476 449A                          l6708 355A                          l6548 4C08  
                        l4990 497C                          l4886 5486                          l6726 35E4  
                        l6582 3186                          l6566 4C6C                          l4896 5502  
                        l6592 31AA                          l5970 4D04                          l4996 498C  
                        l5980 4DB4                          l5972 4D44                          l5964 4CDC  
                        l6596 31E4                          l5990 4E2A                          l6790 5846  
                        l5968 4CF2                          l5978 4DA2                          l6794 5882  
                        l6788 5836                          ?_sin 00D1                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          u5100 0F02  
                        u5020 0D8C                          u4400 1BF2                          u5105 0EF6  
                        u5025 0D80                          u4410 1C3E                          u5115 0F62  
                        u5035 0DEC                          u5220 1136                          u5140 0FBE  
                        u5060 0E46                          u4405 1BE6                          u5310 12B4  
                        u4270 1968                          u4415 1C32                          u4280 19B4  
                        u5225 112A                          u5145 0FB2                          u5065 0E3A  
                        u4425 1C9E                          u4530 1E7C                          u5315 12A8  
                        u5235 1196                          u5155 101E                          u5075 0EA6  
                        u4275 195C                          u5180 107A                          u4540 1EC8  
                        u4285 19A8                          u4535 1E70                          u4295 1A14  
                        u5185 106E                          u4545 1EBC                          u8001 42CC  
                        u5195 10DA                          u4555 1F28                          u8011 42D8  
                        u4820 36E2                          u5710 1852                          u5630 1732  
                        u5550 1612                          u5470 14F2                          u5390 13D2  
                        u4910 385A                          u4825 36D6                          u5715 1846  
                        u5635 1726                          u5555 1606                          u5475 14E6  
                        u5395 13C6                          u4915 384E                          u4835 3742  
                        u4780 362A                          u8140 4C1C                          u8060 4B06  
                        u8055 4492                          u8056 4494                          u4785 361E  
                        u8330 3536                          u4795 368A                          u7620 5240  
                        u4990 3976                          u7625 5234                          u4995 396A  
                        u7900 3E20                          u7830 4524                          u7910 3E22  
                        u7840 4526                          u8457 5C8C                          u7690 58F0  
                        u7780 513C                          u7698 58F4      __end_ofi1_CANsendMessage 26C0  
         __size_of_CANSetMask 03AA                          _Pmin 0120                          abs@a 0077  
                        _alfa 0124                          _fabs 5BF2                          _data 0153  
                        _beta 0128                          _atan 44A8                          _asin 39A0  
                        _main 57F8                          cos@f 01BC                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr0l 000FE9                          fsr2h 000FDA  
                        indf1 000FE7                          fsr1l 000FE1                          indf2 000FDF  
                        fsr2l 000FD9                          _sqrt 46FE                          pclat 000FFA  
                        sin@f 00D1                          sin@y 018B                          prodh 000FF4  
                        prodl 000FF3                          start 033C                 __CFG_IESO$OFF 000000  
              delay_s@value_s 007F           ISR_Bassa@PORTA_temp 0051                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000              _CANOperationMode 5DF0                         ??_abs 0079  
                       ??_cos 00D5                         ??_sin 00D5    __size_of_CANreceiveMessage 052E  
                       ?_fabs 00AF                 ___fltol@sign1 00B7                         ?_atan 00BF  
                       ?_asin 01A0               __end_of___fladd 424C                         ?_main 002A  
             __end_of___fldiv 50D8               __end_of___flneg 5C6C               __end_of___flmul 4FA2  
             __end_of___flsub 5AFA               __end_of___fltol 5314                         ?_sqrt 00D1  
                       _T0CON 000FD5                         _T3CON 000FB1            __size_of_ISR_Bassa 0324  
             __end_of___lwdiv 59AE                         i1l410 2EF6                         i1l402 2618  
                       i1l403 261C                         i1l404 2626                         i1l370 20BA  
                       i1l363 2252                         i1l380 226A                         i1l364 2030  
                       i1l381 233C                         i1l373 21AC                         i1l365 2034  
                       i1l390 23F0                         i1l382 22D8                         i1l374 21B0  
                       i1l366 2106                         i1l383 22E0                         i1l375 21BA  
                       i1l367 20A2                         i1l384 22E8                         i1l368 20AA  
                       i1l720 0186                         i1l712 00CA                         i1l393 249C  
                       i1l385 22F0                         i1l369 20B2                         i1l394 24A0  
                       i1l378 2488                         i1l730 02F0                         i1l714 00E4  
                       i1l395 2572                         i1l379 2266                         i1l396 250E  
                       i1l388 23E2                         i1l708 008A                         i1l397 2516  
                       i1l389 23E6                         i1l733 02F6                         i1l398 251E  
                       i1l399 2526                         i1l727 0280                         i1l569 5D08  
                       i2l702 575A                         _TMR0H 000FD7                         _TMR0L 000FD6  
                       _TMR3H 000FB3                         _TMR3L 000FB2                         _PORTA 000F80  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
          __end_ofsin@coeff_a 0D41            __end_ofsin@coeff_b 0D51                 __CFG_PWRT$OFF 000000  
            __end_of_ISR_Alta 57F8               __end_of_delay_s 5D76                 __CFG_WRT0$OFF 000000  
                       _J_var 0118                 __CFG_WRT1$OFF 000000                         _K_var 011C  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000            CANInitialize@flags 0089  
              __CFG_EBTR2$OFF 000000                 ___awtofl@sign 0085                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         _bordo 012C                         fabs@d 00AF  
                       _first 02A1                         _floor 50D8                         _frexp 5898  
                       _errno 0142                         atan@f 00BF                         atan@x 00C7  
                       atan@y 00C3                         asin@x 01A0                         asin@y 01B4  
              __pbitbssCOMRAM 0298                         sin@x2 0193                         tablat 000FF5  
        __end_of_CANisTxReady 5DF0              __end_ofi1___wmul 5DCA                         plusw2 000FDB  
                       sqrt@i 0197                         sqrt@q 0198                         sqrt@x 019C  
                       sqrt@y 00D1                         sqrt@z 0193                         status 000FD8  
         i1___wmul@multiplier 002A                  ?_park_search 002A               __initialization 59AE  
                __end_of_fabs 5C30                  __end_of_atan 46FE                  __end_of_asin 3CC4  
                __end_of_main 5898                  __end_of_sqrt 4926                        ??_fabs 00B3  
                      ??_atan 00C3                        ??_asin 00D5                        ??_main 00D7  
           _park_routine$3672 01E4             _park_routine$3673 01E8                        ??_sqrt 018B  
               __activetblptr 000003                   ?i1_delay_ms 0030             _CANisTxReady$2845 0077  
                      _ADCON1 000FC1                        ?_floor 00BF                        ?_frexp 0077  
            __end_of___altofl 5B52                        _CANCON 000F6F              __end_of___flpack 4E3E  
          _distance_received1 029F              __end_of___awtofl 5BF2               __CFG_BBSIZ$1024 000000  
           _spazio_parcheggio 0057                 _avvicinamento 029B                        i1l5102 2C56  
                      i1l5210 30C6                        i1l5202 3056                        i1l5106 2C5E  
                      i1l5140 2DCA                        i1l5222 3120                        i1l5214 30E4  
                      i1l5160 2E9C                        i1l5152 2E5C                        i1l5226 313E  
                      i1l5218 3102                        i1l5228 3172                        i1l5164 2EBC  
                      i1l5156 2E7C                        i1l5148 2E3C                        i2l1422 59A4  
                      i1l5166 2EF0                        i1l5710 2530                        i1l5800 00BC  
                      i1l5730 260E                        i1l5634 22FA                        i1l5660 23F6  
                      i1l5900 02C8                        i1l5820 014A                        i1l5804 00D0  
                      i1l5654 23D8                        i1l5558 20C4                        i1l5736 262C  
                      i1l5584 21C0                        i1l5578 21A2                        i1l5860 01C4  
                      i1l5828 017A                        i1l5758 5CFA                        i1l5856 01BC  
                      i1l5882 025C                        i1l5866 01EA                        i1l5892 02A6  
                      i1l5896 02C0                        i1l5888 028C                        i2l6740 5958  
                      i2l6750 5994                        i2l6742 5962                        i2l6738 594A  
                      i2l6770 57BC              __end_of___lwtofl 5D48                        _RXB0D0 000F66  
                      _RXB0D1 000F67                        _RXB0D2 000F68                        _RXB0D3 000F69  
                      _RXB0D4 000F6A                        _RXB1D0 000F56                        _RXB0D5 000F6B  
                      _RXB1D1 000F57                        _RXB0D6 000F6C                        _RXB1D2 000F58  
                      _RXB0D7 000F6D                        _RXB1D3 000F59                        _RXB1D4 000F5A  
                      _RXB1D5 000F5B                        _RXB1D6 000F5C                        _RXB1D7 000F5D  
                      _TXB0D0 000F46                        _TXB0D1 000F47                        _TXB0D2 000F48  
                      _TXB0D3 000F49                        _TXB1D0 000F36                        _TXB0D4 000F4A  
                      _TXB1D1 000F37                        _TXB0D5 000F4B                        _TXB1D2 000F38  
                      _TXB0D6 000F4C                        _TXB1D3 000F39                        _TXB0D7 000F4D  
                      _TXB2D0 000F26                        _TXB1D4 000F3A                        _TXB2D1 000F27  
                      _TXB1D5 000F3B                        _TXB2D2 000F28                        _TXB1D6 000F3C  
                      _TXB2D3 000F29                        _TXB1D7 000F3D                        _TXB2D4 000F2A  
                      _TXB2D5 000F2B                        _TXB2D6 000F2C                        _TXB2D7 000F2D  
          CANsendMessage@data 007B              __end_of_can_send 553E            CANsendMessage@tamp 0083  
           __end_of_ISR_Bassa 033C              __end_of_delay_ms 5CA6         __size_of_CANSetFilter 0B2A  
              __CFG_XINST$OFF 000000                        ___flge 553E               _data_correction 0163  
                   ??___fladd 00A7                        ___wmul 5CA6                     ??___fldiv 0089  
                   ??___flneg 00AF                __CFG_STVREN$ON 000000                     ??___flmul 0098  
                   ??___flsub 00D1                     ??___fltol 00B3                     ??___lwdiv 0064  
                ??_CANSetMask 007C                        _raggio 01F0                        clear_0 59B4  
                      clear_1 59C0                        clear_2 59D0                     ??_delay_s 007F  
                      floor@i 00C3                        floor@x 00BF               __CFG_BOREN$BOHW 000000  
                __pdataCOMRAM 0055                        sin@sgn 0197                  __mediumconst 0000  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
             ISR_Bassa@F16872 0055                        sqrt@og 018F                  _CANSetFilter 0D52  
                  ___fladd@f1 009F                    ___fladd@f2 00A3                    ___flge@ff1 00B3  
                  ___flge@ff2 00B7                    ___altofl@c 00B9                    ___fldiv@f1 0081  
                  ___fldiv@f2 0085                    ___fldiv@f3 0089                    __accesstop 0060  
     __end_of__initialization 5A28            __end_of_CANSetMask 39A0               __CFG_PBADEN$OFF 000000  
                  ___flneg@f1 00AB                 ?_park_routine 002A                    ___flmul@f1 0090  
                  ___flmul@f2 0094                  eval_poly@res 00B7                 ___rparam_used 000000  
                  ___flsub@f1 00C9                    ___flsub@f2 00CD                    ___fltol@f1 00AF  
                  ___awtofl@c 0081           __size_ofi1_delay_ms 0038                __pcstackCOMRAM 002A  
                   ?_ISR_Alta 002A                  __pidataBANK0 5E14                  __pidataBANK1 5E08  
               __end_of_floor 51FA                 __end_of_frexp 592C              ??_configurations 0091  
                  ___lwtofl@c 0081                     ?i1___wmul 002A         CANSetFilter@numBuffer 0080  
                _actual_speed 00DF         __size_of_CANisTxReady 0026                       ??_floor 00C3  
                     ??_frexp 007D      __end_of_CANOperationMode 5E08                    __pbssBANK0 00D7  
                  __pbssBANK1 0100               _sensor_distance 0001            __size_of_eval_poly 011A  
           ?i1_CANsendMessage 002A                    _data_brake 015B                ??_park_routine 01E0  
     __size_of_CANsendMessage 07A0                    _data_speed 016B                    _activation 0299  
          ??i1_CANsendMessage 0032      __size_of_can_interpreter 0054            __size_of_parallelo 025C  
        __size_of_park_search 01CA             _old_alignment_gap 0134                    ??_ISR_Alta 0067  
                     ?___flge 00B3                       ?___wmul 0077                     ?___altofl 00B9  
                   ?___flpack 0077                       _CANSTAT 000F6E                     ?___awtofl 0081  
                _CANisTxReady 5DCA                       _BRGCON1 000F70                       _BRGCON2 000F71  
                     _BRGCON3 000F72                    ??i1___wmul 002E                     ?___lwtofl 0081  
                   ?_can_send 002A        __size_of_CANInitialize 01CE                     ?_delay_ms 007D  
                     _RXB0DLC 000F65                       _RXB1DLC 000F55                       _RXB0CON 000F60  
                     _RXB1CON 000F50                       _TXB0DLC 000F45                       _TXB1DLC 000F35  
                     _TXB2DLC 000F25           CANsendMessage@flags 007E                       __Hparam 0000  
                  _left_speed 001D                       __Lparam 0000              delay_ms@value_ms 007D  
             __size_of___flge 00F8                    _matematica 26C0                       ___fladd 3FE0  
                     ___fldiv 4FA2                       ___flneg 5C30                       ___flmul 4E3E  
                     ___flsub 5A9A                       ___fltol 51FA               __size_of___wmul 0038  
                     ___lwdiv 592C                  __psmallconst 0D00                    ??___altofl 00BD  
                  ??___flpack 007D          CANInitialize@propSeg 008E                       __pcinit 59AE  
                  ??___awtofl 0085             __end_of_eval_poly 542E                       _delay_s 5D48  
                     __ramtop 0D00                       __ptext0 57F8                       __ptext1 4AF4  
                     __ptext2 3178                       __ptext3 424C                       __ptext4 542E  
                     __ptext5 187C                       __ptext6 5DCA                       __ptext7 5D76  
                     __ptext8 5BA6                       __ptext9 26C0                    ??___lwtofl 0085  
                   _T0CONbits 000FD5                  ??i1_delay_ms 0032                       _counter 0028  
                  ??_can_send 0087                  __size_of_abs 002C                  __size_of_cos 00E6  
             atan@val_squared 00CC                  __size_of_sin 031C                       atan@val 00D0  
           __end_of_parallelo 44A8                    ??_delay_ms 007F                       asin@sgn 01A4  
      CANreceiveMessage@error 0034               _start_operation 02A6                __pintcode_body 571C  
        end_of_initialization 5A28                       int_func 571C                 _CANInitialize 4926  
          __end_ofi1_delay_ms 5D16                     _ISR_Bassa 0018                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
       i1___wmul@multiplicand 002C             ??_can_interpreter 0077       _steering_correction_dir 02A7  
                   _PORTBbits 000F81                CANSetMask@mask 0077                CANSetMask@tamp 0081  
                _distance_set 0108                CANSetMask@type 007B          __end_of_park_routine 35F6  
                   _TRISBbits 000F93                   ___fldiv@exp 008E                     _MUX_index 0025  
                  _pulse_time 001F       _clock_counter_reference 00E1                   ___flmul@exp 0098  
              _CANsendMessage 187C              CANInitialize@BRP 0088              CANInitialize@SJW 0087  
              ?_CANInitialize 0085                    ?_ISR_Bassa 002A                   ?_matematica 002A  
              __end_of___flge 5636             __size_of_ISR_Alta 57F0                __end_of___wmul 5CDE  
               __pidataCOMRAM 5E10                    floor@expon 00C7           start_initialization 59AE  
           __size_ofi1___wmul 0028                    eval_poly@d 00AF                    eval_poly@n 00B1  
                  eval_poly@x 00AB                   __end_of_abs 5DA2                   __end_of_cos 571C  
                 __end_of_sin 3FE0           CANSetMask@numBuffer 0080                 _data_speed_rx 0100  
      __end_of_CANsendMessage 201C             ?_CANOperationMode 002A                 _data_steering 0173  
          i1delay_ms@value_ms 0030                    frexp@value 0077            ??_CANOperationMode 0077  
           _distance_received 029E    CANInitialize@FilterConfig1 008F    CANInitialize@FilterConfig2 0090  
         _steering_correction 0029                      ??___flge 00BB  ISR_Bassa@MUX_index_collision 004F  
                    ??___wmul 007B                   __pdataBANK0 00E7                   __pdataBANK1 01EC  
            __CFG_LPT1OSC$OFF 000000     __size_ofi1_CANsendMessage 06A4             __size_of___altofl 0058  
           __size_of___flpack 0180        CANInitialize@phaseSeg1 0085        CANInitialize@phaseSeg2 0086  
           __size_of___awtofl 004C                   __pbssCOMRAM 0001             __size_of___lwtofl 0032  
               __pcstackBANK0 0060                 __pcstackBANK1 018B                   _BRGCON2bits 000F71  
                 _BRGCON3bits 000F72             __size_of_can_send 0110             __size_of_delay_ms 003A  
             ?_CANsendMessage 0077           __size_of_matematica 058A               ??_CANInitialize 008A  
                   _asin$3681 01A8                     _asin$3682 01B8                     _asin$3683 01B0  
                   _asin$3684 01AC                    sin@coeff_a 0D2D                    sin@coeff_b 0D41  
               ??_park_search 01BC                 _alignment_gap 00D7            CANSetFilter@filter 0077  
                   _data_test 017B              ___lwdiv@dividend 0060                    ISR_Bassa@i 0052  
                 ??_ISR_Bassa 003A                     __pintcode 0008                      ?___fladd 009F  
                    ?___fldiv 0081                      ?___flneg 00AB                      ?___flmul 0090  
                    ?___flsub 00C9                      ?___fltol 00AF         __size_of_park_routine 047E  
                    ?___lwdiv 0060                   __pintcodelo 0018                      ?_delay_s 002A  
                 __smallconst 0D00                   _COMSTATbits 000F74                     _eval_poly 5314  
                   _larghezza 01EC              ___lwdiv@quotient 0065                __size_of_floor 0122  
              __size_of_frexp 0094       __size_of_configurations 006C                     _parallelo 424C  
                _new_distance 02A2         CANreceiveMessage@tamp 0035                _prima_sterzata 0138  
              ___wmul@product 007B                      _LATBbits 000F8A               _can_interpreter 5B52  
                   atan@recip 00CB                  _park_routine 3178  _delay_quartz_frequency_value 00E7  
                    _IPR3bits 000FA5                      _PIE3bits 000FA3                      i1u600_20 2D38  
                    i1u600_26 2D3A                      i1u610_20 2F9E                      i1u602_25 2D4E  
                    i1u610_26 2FA0                      i1u611_20 2FC8                      i1u611_26 2FCA  
                    i1u613_25 2FDC                      i1u710_20 0164                      i1u608_25 2EC8  
                    i1u619_25 314A                      i1u709_20 0162                      i1u664_20 20E2  
                    i1u664_25 20D8                      i1u665_20 2128                      i1u665_25 211E  
                    i1u690_20 254E                      i1u690_25 2544                      i1u666_25 2174  
                    i1u691_20 2594                      i1u691_25 258A                      i1u692_25 25E0  
                    i1u677_20 2318                      i1u677_25 230E                      _PIR3bits 000FA4  
                    i1u678_20 235E                      i1u678_25 2354                      i1u846_27 01A8  
                    i1u599_20 2D0A                      i1u679_25 23AA                      i1u599_26 2D0C  
                    i1u847_27 5CFC                      _RXB0EIDH 000F63                      _RXB0EIDL 000F64  
                    _RXB1EIDH 000F53                      _RXB1EIDL 000F54                      _ISR_Alta 0008  
                   _set_speed 00E5                      _RCONbits 000FD0              __CFG_WDTPS$32768 000000  
                    _RXB0SIDH 000F61                      _RXB0SIDL 000F62                      _RXF0EIDH 000F02  
                    _RXB1SIDH 000F51                      _RXF0EIDL 000F03                      _RXB1SIDL 000F52  
                    _RXF1EIDH 000F06                      _RXF1EIDL 000F07                      _RXF2EIDH 000F0A  
                    _RXF2EIDL 000F0B                      _RXF3EIDH 000F0E                      _RXF3EIDL 000F0F  
                    _RXF4EIDH 000F12                      _RXF4EIDL 000F13                      _RXF5EIDH 000F16  
                    _RXF5EIDL 000F17                      _RXF0SIDH 000F00                      _RXF0SIDL 000F01  
         __end_of_park_search 4CBE                      _TXB0EIDH 000F43                      _RXF1SIDH 000F04  
                    _TXB0EIDL 000F44                      _RXF1SIDL 000F05                      _TXB1EIDH 000F33  
                    _RXF2SIDH 000F08                      _TXB1EIDL 000F34                      _RXF2SIDL 000F09  
                    _TXB2EIDH 000F23                      _RXF3SIDH 000F0C                      _TXB2EIDL 000F24  
                    _RXF3SIDL 000F0D                      _RXF4SIDH 000F10                      _RXF4SIDL 000F11  
                    _RXF5SIDH 000F14                      _RXF5SIDL 000F15                      _RXM0EIDH 000F1A  
                    _RXM0EIDL 000F1B                      _TXB0SIDH 000F41                      _RXM1EIDH 000F1E  
                    _TXB0SIDL 000F42                      _RXM1EIDL 000F1F                      _TXB1SIDH 000F31  
                    _TXB1SIDL 000F32                      _TXB2SIDH 000F21                      _TXB2SIDL 000F22  
                    _RXM0SIDH 000F18                      _RXM0SIDL 000F19                      _RXM1SIDH 000F1C  
                    _RXM1SIDL 000F1D                   _distance_dx 0019                   _distance_sx 001B  
                    _RXERRCNT 000F75                      _TXERRCNT 000F76             ___wmul@multiplier 0077  
                    i1___wmul 5DA2                    ?_eval_poly 00AB           __end_ofatan@coeff_a 0D19  
         __end_ofatan@coeff_b 0D2D                 ?_CANSetFilter 0077                   _INTCON2bits 000FF1  
                   copy_data0 59EA                     copy_data1 5A1C                    _CANCONbits 000F6F  
                  ?_parallelo 002A              _distance_average 00E3                     frexp@eptr 007B  
                    __Hparam0 0000                      __Lparam0 0000                  _RXB0SIDLbits 000F62  
                _RXB1SIDLbits 000F52                  ??_matematica 00D5                 _request_sent1 02A5  
            __size_of___fladd 026C                    _CANSetMask 35F6              __size_of___fldiv 0136  
            __size_of___flneg 003C              __size_of___flmul 0164              __size_of___flsub 0060  
            __size_of___fltol 011A                      ___altofl 5AFA              i1_CANsendMessage 201C  
                    _cos$3685 01C0                      ___flpack 4CBE              __size_of___lwdiv 0082  
                    ___awtofl 5BA6              __size_of_delay_s 002E                      ___lwtofl 5D16  
                    _can_send 542E                  _RXF0SIDLbits 000F01                      _delay_ms 5C6C  
             ___lwdiv@divisor 0062                  _RXF1SIDLbits 000F05               ___lwdiv@counter 0064  
       i1CANsendMessage@flags 0031                ??_CANSetFilter 007C                      __ptext10 5636  
                    __ptext11 3CC4                      __ptext20 5BF2                      __ptext12 50D8  
                    __ptext21 5C30                      __ptext13 5898                      __ptext30 5D16  
                    __ptext22 5314                      __ptext14 51FA                      __ptext31 4CBE  
                    __ptext23 4E3E                      __ptext15 5AFA                      __ptext40 5DA2  
                    __ptext32 5A2E                      __ptext24 3FE0                      __ptext16 39A0  
                    __ptext41 201C                      __ptext33 4926                      __ptext25 553E  
                    __ptext17 46FE                      __ptext42 2C4A                      __ptext34 35F6  
                    __ptext26 4FA2                      __ptext18 5A9A                      __ptext35 0D52  
                    __ptext27 5D48                      __ptext19 44A8                      __ptext44 592C  
                    __ptext36 5DF0                      __ptext28 5C6C                      __ptext37 5B52  
                    __ptext29 5CA6                      __ptext39 5CDE                  _RXF2SIDLbits 000F09  
                    _sin$3686 018F       __end_of_can_interpreter 5BA6                  _RXF3SIDLbits 000F0D  
                    _distance 0140            __end_of_matematica 2C4A                  _RXF4SIDLbits 000F11  
                _RXF5SIDLbits 000F15      CANsendMessage@dataLength 007D                 __size_of_fabs 003E  
               __size_of_atan 0256                 __size_of_asin 0324                 __size_of_main 00A0  
               __size_of_sqrt 0228                   _park_search 4AF4          CANreceiveMessage@msg 002A  
                _TXB0SIDLbits 000F42                  _TXB1SIDLbits 000F32                  _TXB2SIDLbits 000F22  
   __size_of_CANOperationMode 0018                 ?_CANisTxReady 002A                   atan@coeff_a 0D01  
                 atan@coeff_b 0D19                   _RXB0DLCbits 000F65         ___flmul@f3_as_product 0099  
                 _RXB1DLCbits 000F55                  _RXM0SIDLbits 000F19                   _RXB0CONbits 000F60  
                 _RXB1CONbits 000F50             _CANreceiveMessage 2C4A                  _RXM1SIDLbits 000F1D  
                  _INTCONbits 000FF2                   ??_eval_poly 00B3              ??_CANsendMessage 007F  
  i1CANsendMessage@dataLength 0030            ?_CANreceiveMessage 002A                  _request_sent 02A4  
              _configurations 5A2E      CANsendMessage@identifier 0077                   ??_parallelo 00D5  
                    intlevel1 0000                      intlevel2 0000              CANSetFilter@tamp 0081  
            CANSetFilter@type 007B           ??_CANreceiveMessage 002C          i1CANsendMessage@data 002E  
        i1CANsendMessage@tamp 0036                   _TXB0DLCbits 000F45                   _right_speed 0021  
                 _TXB1DLCbits 000F35                   _TXB0CONbits 000F40                   _TXB2DLCbits 000F25  
                 _TXB1CONbits 000F30                   _TXB2CONbits 000F20          CANOperationMode@mode 0077  
                 ?_CANSetMask 0077                ??_CANisTxReady 0077                _distance_error 029D  
             _matematica$3680 01D8               _matematica$3674 01C4               _matematica$3675 01C8  
             _matematica$3676 01CC               _matematica$3677 01D0               _matematica$3678 01DC  
             _matematica$3679 01D4     __end_of_CANreceiveMessage 3178    i1CANsendMessage@identifier 002A  
                 _timerValue2 0023                    _TMR3H_temp 0026        __end_of_configurations 5A9A  
                  _TMR3L_temp 0027                 _distance_wait 02A0              ?_can_interpreter 002A  
          _old_dir_correction 02A3                  ___fladd@exp1 00AA                  ___fladd@exp2 00A9  
                ___fladd@sign 00A8         __end_of_CANInitialize 4AF4         _sensor_distance_short 0183  
         _sensor_distance_old 0110  
