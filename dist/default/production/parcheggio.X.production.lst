

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Jun 11 19:04:48 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2685
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	param0,global,class=BANK0,space=1,delta=1
    68  0000                     
    69                           	psect	idataBANK0
    70  0065AE                     __pidataBANK0:
    71                           	opt stack 0
    72                           
    73                           ;initializer for _delay_quartz_frequency_value
    74  0065AE  10                 	db	16
    75                           
    76                           	psect	idataBANK1
    77  0065AC                     __pidataBANK1:
    78                           	opt stack 0
    79                           
    80                           ;initializer for ISR_Bassa@F16865
    81  0065AC  03                 	db	3
    82  0065AD  06                 	db	6
    83                           
    84                           	psect	smallconst
    85  000D00                     __psmallconst:
    86                           	opt stack 0
    87  000D00  00                 	db	0
    88  000D01                     atan@coeff_a:
    89                           	opt stack 0
    90  000D01  3C06               	dw	15366
    91  000D03  4204               	dw	16900
    92  000D05  9F7D               	dw	40829
    93  000D07  426A               	dw	17002
    94  000D09  905C               	dw	36956
    95  000D0B  4201               	dw	16897
    96  000D0D  4D60               	dw	19808
    97  000D0F  40BB               	dw	16571
    98  000D11  EC51               	dw	60497
    99  000D13  3E47               	dw	15943
   100  000D15  8DDE               	dw	36318
   101  000D17  BB1F               	dw	47903
   102  000D19                     __end_ofatan@coeff_a:
   103                           	opt stack 0
   104  000D19                     atan@coeff_b:
   105                           	opt stack 0
   106  000D19  3C06               	dw	15366
   107  000D1B  4204               	dw	16900
   108  000D1D  59C0               	dw	22976
   109  000D1F  428B               	dw	17035
   110  000D21  0474               	dw	1140
   111  000D23  4244               	dw	16964
   112  000D25  9BF9               	dw	39929
   113  000D27  414F               	dw	16719
   114  000D29  0000               	dw	0
   115  000D2B  3F80               	dw	16256
   116  000D2D                     __end_ofatan@coeff_b:
   117                           	opt stack 0
   118  000D2D                     sin@coeff_a:
   119                           	opt stack 0
   120  000D2D  F3EC               	dw	62444
   121  000D2F  484A               	dw	18506
   122  000D31  9535               	dw	38197
   123  000D33  C795               	dw	51093
   124  000D35  C117               	dw	49431
   125  000D37  45DC               	dw	17884
   126  000D39  DBFD               	dw	56317
   127  000D3B  C36D               	dw	50029
   128  000D3D  B372               	dw	45938
   129  000D3F  4033               	dw	16435
   130  000D41                     __end_ofsin@coeff_a:
   131                           	opt stack 0
   132  000D41                     sin@coeff_b:
   133                           	opt stack 0
   134  000D41  342B               	dw	13355
   135  000D43  4801               	dw	18433
   136  000D45  9D7F               	dw	40319
   137  000D47  45B0               	dw	17840
   138  000D49  FFE7               	dw	65511
   139  000D4B  42D9               	dw	17113
   140  000D4D  0000               	dw	0
   141  000D4F  3F80               	dw	16256
   142  000D51                     __end_ofsin@coeff_b:
   143                           	opt stack 0
   144  0000                     _RXB1CON	set	3920
   145  0000                     _RXB1CONbits	set	3920
   146  0000                     _RXB1D0	set	3926
   147  0000                     _RXB1D1	set	3927
   148  0000                     _RXB1D2	set	3928
   149  0000                     _RXB1D3	set	3929
   150  0000                     _RXB1D4	set	3930
   151  0000                     _RXB1D5	set	3931
   152  0000                     _RXB1D6	set	3932
   153  0000                     _RXB1D7	set	3933
   154  0000                     _RXB1DLC	set	3925
   155  0000                     _RXB1DLCbits	set	3925
   156  0000                     _RXB1EIDH	set	3923
   157  0000                     _RXB1EIDL	set	3924
   158  0000                     _RXB1SIDH	set	3921
   159  0000                     _RXB1SIDL	set	3922
   160  0000                     _RXB1SIDLbits	set	3922
   161  0000                     _RXF0EIDH	set	3842
   162  0000                     _RXF0EIDL	set	3843
   163  0000                     _RXF0SIDH	set	3840
   164  0000                     _RXF0SIDL	set	3841
   165  0000                     _RXF0SIDLbits	set	3841
   166  0000                     _RXF1EIDH	set	3846
   167  0000                     _RXF1EIDL	set	3847
   168  0000                     _RXF1SIDH	set	3844
   169  0000                     _RXF1SIDL	set	3845
   170  0000                     _RXF1SIDLbits	set	3845
   171  0000                     _RXF2EIDH	set	3850
   172  0000                     _RXF2EIDL	set	3851
   173  0000                     _RXF2SIDH	set	3848
   174  0000                     _RXF2SIDL	set	3849
   175  0000                     _RXF2SIDLbits	set	3849
   176  0000                     _RXF3EIDH	set	3854
   177  0000                     _RXF3EIDL	set	3855
   178  0000                     _RXF3SIDH	set	3852
   179  0000                     _RXF3SIDL	set	3853
   180  0000                     _RXF3SIDLbits	set	3853
   181  0000                     _RXF4EIDH	set	3858
   182  0000                     _RXF4EIDL	set	3859
   183  0000                     _RXF4SIDH	set	3856
   184  0000                     _RXF4SIDL	set	3857
   185  0000                     _RXF4SIDLbits	set	3857
   186  0000                     _RXF5EIDH	set	3862
   187  0000                     _RXF5EIDL	set	3863
   188  0000                     _RXF5SIDH	set	3860
   189  0000                     _RXF5SIDL	set	3861
   190  0000                     _RXF5SIDLbits	set	3861
   191  0000                     _RXM0EIDH	set	3866
   192  0000                     _RXM0EIDL	set	3867
   193  0000                     _RXM0SIDH	set	3864
   194  0000                     _RXM0SIDL	set	3865
   195  0000                     _RXM0SIDLbits	set	3865
   196  0000                     _RXM1EIDH	set	3870
   197  0000                     _RXM1EIDL	set	3871
   198  0000                     _RXM1SIDH	set	3868
   199  0000                     _RXM1SIDL	set	3869
   200  0000                     _RXM1SIDLbits	set	3869
   201  0000                     _TXB0CONbits	set	3904
   202  0000                     _TXB0D0	set	3910
   203  0000                     _TXB0D1	set	3911
   204  0000                     _TXB0D2	set	3912
   205  0000                     _TXB0D3	set	3913
   206  0000                     _TXB0D4	set	3914
   207  0000                     _TXB0D5	set	3915
   208  0000                     _TXB0D6	set	3916
   209  0000                     _TXB0D7	set	3917
   210  0000                     _TXB0DLC	set	3909
   211  0000                     _TXB0DLCbits	set	3909
   212  0000                     _TXB0EIDH	set	3907
   213  0000                     _TXB0EIDL	set	3908
   214  0000                     _TXB0SIDH	set	3905
   215  0000                     _TXB0SIDL	set	3906
   216  0000                     _TXB0SIDLbits	set	3906
   217  0000                     _TXB1CONbits	set	3888
   218  0000                     _TXB1D0	set	3894
   219  0000                     _TXB1D1	set	3895
   220  0000                     _TXB1D2	set	3896
   221  0000                     _TXB1D3	set	3897
   222  0000                     _TXB1D4	set	3898
   223  0000                     _TXB1D5	set	3899
   224  0000                     _TXB1D6	set	3900
   225  0000                     _TXB1D7	set	3901
   226  0000                     _TXB1DLC	set	3893
   227  0000                     _TXB1DLCbits	set	3893
   228  0000                     _TXB1EIDH	set	3891
   229  0000                     _TXB1EIDL	set	3892
   230  0000                     _TXB1SIDH	set	3889
   231  0000                     _TXB1SIDL	set	3890
   232  0000                     _TXB1SIDLbits	set	3890
   233  0000                     _TXB2CONbits	set	3872
   234  0000                     _TXB2D0	set	3878
   235  0000                     _TXB2D1	set	3879
   236  0000                     _TXB2D2	set	3880
   237  0000                     _TXB2D3	set	3881
   238  0000                     _TXB2D4	set	3882
   239  0000                     _TXB2D5	set	3883
   240  0000                     _TXB2D6	set	3884
   241  0000                     _TXB2D7	set	3885
   242  0000                     _TXB2DLC	set	3877
   243  0000                     _TXB2DLCbits	set	3877
   244  0000                     _TXB2EIDH	set	3875
   245  0000                     _TXB2EIDL	set	3876
   246  0000                     _TXB2SIDH	set	3873
   247  0000                     _TXB2SIDL	set	3874
   248  0000                     _TXB2SIDLbits	set	3874
   249  0000                     _ADCON1	set	4033
   250  0000                     _BRGCON1	set	3952
   251  0000                     _BRGCON2	set	3953
   252  0000                     _BRGCON2bits	set	3953
   253  0000                     _BRGCON3	set	3954
   254  0000                     _BRGCON3bits	set	3954
   255  0000                     _CANCON	set	3951
   256  0000                     _CANCONbits	set	3951
   257  0000                     _CANSTAT	set	3950
   258  0000                     _COMSTATbits	set	3956
   259  0000                     _INTCON2bits	set	4081
   260  0000                     _INTCONbits	set	4082
   261  0000                     _IPR3bits	set	4005
   262  0000                     _LATA	set	3977
   263  0000                     _LATB	set	3978
   264  0000                     _LATBbits	set	3978
   265  0000                     _LATC	set	3979
   266  0000                     _PIE3bits	set	4003
   267  0000                     _PIR3bits	set	4004
   268  0000                     _PORTA	set	3968
   269  0000                     _PORTBbits	set	3969
   270  0000                     _RCONbits	set	4048
   271  0000                     _RXB0CON	set	3936
   272  0000                     _RXB0CONbits	set	3936
   273  0000                     _RXB0D0	set	3942
   274  0000                     _RXB0D1	set	3943
   275  0000                     _RXB0D2	set	3944
   276  0000                     _RXB0D3	set	3945
   277  0000                     _RXB0D4	set	3946
   278  0000                     _RXB0D5	set	3947
   279  0000                     _RXB0D6	set	3948
   280  0000                     _RXB0D7	set	3949
   281  0000                     _RXB0DLC	set	3941
   282  0000                     _RXB0DLCbits	set	3941
   283  0000                     _RXB0EIDH	set	3939
   284  0000                     _RXB0EIDL	set	3940
   285  0000                     _RXB0SIDH	set	3937
   286  0000                     _RXB0SIDL	set	3938
   287  0000                     _RXB0SIDLbits	set	3938
   288  0000                     _RXERRCNT	set	3957
   289  0000                     _T0CON	set	4053
   290  0000                     _T0CONbits	set	4053
   291  0000                     _T3CON	set	4017
   292  0000                     _TMR0H	set	4055
   293  0000                     _TMR0L	set	4054
   294  0000                     _TMR3H	set	4019
   295  0000                     _TMR3L	set	4018
   296  0000                     _TRISA	set	3986
   297  0000                     _TRISB	set	3987
   298  0000                     _TRISBbits	set	3987
   299  0000                     _TRISC	set	3988
   300  0000                     _TXERRCNT	set	3958
   301                           
   302                           ; #config settings
   303  000D51  00                 	db	0	; dummy byte at the end
   304  0000                     
   305                           	psect	cinit
   306  006262                     __pcinit:
   307                           	opt stack 0
   308  006262                     start_initialization:
   309                           	opt stack 0
   310  006262                     __initialization:
   311                           	opt stack 0
   312                           
   313                           ; Clear objects allocated to BANK1 (131 bytes)
   314  006262  EE01  F000         	lfsr	0,__pbssBANK1
   315  006266  0E83               	movlw	131
   316  006268                     clear_0:
   317  006268  6AEE               	clrf	postinc0,c
   318  00626A  06E8               	decf	wreg,f,c
   319  00626C  E1FD               	bnz	clear_0
   320                           
   321                           ; Clear objects allocated to BANK0 (15 bytes)
   322  00626E  EE00  F0D9         	lfsr	0,__pbssBANK0
   323  006272  0E0F               	movlw	15
   324  006274                     clear_1:
   325  006274  6AEE               	clrf	postinc0,c
   326  006276  06E8               	decf	wreg,f,c
   327  006278  E1FD               	bnz	clear_1
   328                           
   329                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   330  00627A  6A57               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   331  00627C  6A56               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   332                           
   333                           ; Clear objects allocated to COMRAM (45 bytes)
   334  00627E  EE00  F001         	lfsr	0,__pbssCOMRAM
   335  006282  0E2D               	movlw	45
   336  006284                     clear_2:
   337  006284  6AEE               	clrf	postinc0,c
   338  006286  06E8               	decf	wreg,f,c
   339  006288  E1FD               	bnz	clear_2
   340                           
   341                           ; Initialize objects allocated to BANK1 (2 bytes)
   342                           ; load TBLPTR registers with __pidataBANK1
   343  00628A  0EAC               	movlw	low __pidataBANK1
   344  00628C  6EF6               	movwf	tblptrl,c
   345  00628E  0E65               	movlw	high __pidataBANK1
   346  006290  6EF7               	movwf	tblptrh,c
   347  006292  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   348  006294  6EF8               	movwf	tblptru,c
   349  006296  0009               	tblrd		*+	;fetch initializer
   350  006298  CFF5 F1E0          	movff	tablat,__pdataBANK1
   351  00629C  0009               	tblrd		*+	;fetch initializer
   352  00629E  CFF5 F1E1          	movff	tablat,__pdataBANK1+1
   353                           
   354                           ; Initialize objects allocated to BANK0 (1 bytes)
   355                           ; load TBLPTR registers with __pidataBANK0
   356  0062A2  0EAE               	movlw	low __pidataBANK0
   357  0062A4  6EF6               	movwf	tblptrl,c
   358  0062A6  0E65               	movlw	high __pidataBANK0
   359  0062A8  6EF7               	movwf	tblptrh,c
   360  0062AA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   361  0062AC  6EF8               	movwf	tblptru,c
   362  0062AE  0009               	tblrd		*+	;fetch initializer
   363  0062B0  CFF5 F0E8          	movff	tablat,__pdataBANK0
   364  0062B4                     end_of_initialization:
   365                           	opt stack 0
   366  0062B4                     __end_of__initialization:
   367                           	opt stack 0
   368  0062B4  0100               	movlb	0
   369  0062B6  EFEA  F02F         	goto	_main	;jump to C main() function
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           postinc0	equ	0xFEE
   375                           wreg	equ	0xFE8
   376                           
   377                           	psect	bitbssCOMRAM
   378  0002B0                     __pbitbssCOMRAM:
   379                           	opt stack 0
   380  0002B0                     _MUX_toggle:
   381                           	opt stack 0
   382  0002B0                     	ds	1
   383  0002B1                     _activation:
   384                           	opt stack 0
   385  0002B1                     	ds	1
   386  0002B2                     _asd:
   387                           	opt stack 0
   388  0002B2                     	ds	1
   389  0002B3                     _avvicinamento:
   390                           	opt stack 0
   391  0002B3                     	ds	1
   392  0002B4                     _dir:
   393                           	opt stack 0
   394  0002B4                     	ds	1
   395  0002B5                     _distance_error:
   396                           	opt stack 0
   397  0002B5                     	ds	1
   398  0002B6                     _distance_received:
   399                           	opt stack 0
   400  0002B6                     	ds	1
   401  0002B7                     _distance_received1:
   402                           	opt stack 0
   403  0002B7                     	ds	1
   404  0002B8                     _distance_wait:
   405                           	opt stack 0
   406  0002B8                     	ds	1
   407  0002B9                     _first:
   408                           	opt stack 0
   409  0002B9                     	ds	1
   410  0002BA                     _new_distance:
   411                           	opt stack 0
   412  0002BA                     	ds	1
   413  0002BB                     _old_dir_correction:
   414                           	opt stack 0
   415  0002BB                     	ds	1
   416  0002BC                     _request_sent:
   417                           	opt stack 0
   418  0002BC                     	ds	1
   419  0002BD                     _request_sent1:
   420                           	opt stack 0
   421  0002BD                     	ds	1
   422  0002BE                     _start_operation:
   423                           	opt stack 0
   424  0002BE                     	ds	1
   425  0002BF                     _steering_correction_dir:
   426                           	opt stack 0
   427  0002BF                     	ds	1
   428                           tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           tblptrl	equ	0xFF6
   431                           tablat	equ	0xFF5
   432                           postinc0	equ	0xFEE
   433                           wreg	equ	0xFE8
   434                           
   435                           	psect	bssCOMRAM
   436  000001                     __pbssCOMRAM:
   437                           	opt stack 0
   438  000001                     _sensor_distance:
   439                           	opt stack 0
   440  000001                     	ds	16
   441  000011                     _old_alignment_gap:
   442                           	opt stack 0
   443  000011                     	ds	4
   444  000015                     _x:
   445                           	opt stack 0
   446  000015                     	ds	4
   447  000019                     _distance_dx:
   448                           	opt stack 0
   449  000019                     	ds	2
   450  00001B                     _distance_sx:
   451                           	opt stack 0
   452  00001B                     	ds	2
   453  00001D                     _pulse_time:
   454                           	opt stack 0
   455  00001D                     	ds	2
   456  00001F                     _timerValue2:
   457                           	opt stack 0
   458  00001F                     	ds	2
   459  000021                     _MUX_index:
   460                           	opt stack 0
   461  000021                     	ds	1
   462  000022                     _TMR3H_temp:
   463                           	opt stack 0
   464  000022                     	ds	1
   465  000023                     _TMR3L_temp:
   466                           	opt stack 0
   467  000023                     	ds	1
   468  000024                     _counter:
   469                           	opt stack 0
   470  000024                     	ds	1
   471  000025                     _steering_correction:
   472                           	opt stack 0
   473  000025                     	ds	1
   474  000026                     _data_brake:
   475                           	opt stack 0
   476  000026                     	ds	8
   477                           tblptru	equ	0xFF8
   478                           tblptrh	equ	0xFF7
   479                           tblptrl	equ	0xFF6
   480                           tablat	equ	0xFF5
   481                           postinc0	equ	0xFEE
   482                           wreg	equ	0xFE8
   483                           
   484                           	psect	bssBANK0
   485  0000D9                     __pbssBANK0:
   486                           	opt stack 0
   487  0000D9                     _alignment_gap:
   488                           	opt stack 0
   489  0000D9                     	ds	4
   490  0000DD                     _z:
   491                           	opt stack 0
   492  0000DD                     	ds	4
   493  0000E1                     _clock_counter_reference:
   494                           	opt stack 0
   495  0000E1                     	ds	2
   496  0000E3                     _distance_average:
   497                           	opt stack 0
   498  0000E3                     	ds	2
   499  0000E5                     _set_speed:
   500                           	opt stack 0
   501  0000E5                     	ds	2
   502  0000E7                     _counter_distance:
   503                           	opt stack 0
   504  0000E7                     	ds	1
   505                           tblptru	equ	0xFF8
   506                           tblptrh	equ	0xFF7
   507                           tblptrl	equ	0xFF6
   508                           tablat	equ	0xFF5
   509                           postinc0	equ	0xFEE
   510                           wreg	equ	0xFE8
   511                           
   512                           	psect	dataBANK0
   513  0000E8                     __pdataBANK0:
   514                           	opt stack 0
   515  0000E8                     _delay_quartz_frequency_value:
   516                           	opt stack 0
   517  0000E8                     	ds	1
   518                           tblptru	equ	0xFF8
   519                           tblptrh	equ	0xFF7
   520                           tblptrl	equ	0xFF6
   521                           tablat	equ	0xFF5
   522                           postinc0	equ	0xFEE
   523                           wreg	equ	0xFE8
   524                           
   525                           	psect	bssBANK1
   526  000100                     __pbssBANK1:
   527                           	opt stack 0
   528  000100                     _MUX_select:
   529                           	opt stack 0
   530  000100                     	ds	8
   531  000108                     _data_speed_rx:
   532                           	opt stack 0
   533  000108                     	ds	8
   534  000110                     _distance_set:
   535                           	opt stack 0
   536  000110                     	ds	8
   537  000118                     _sensor_distance_old:
   538                           	opt stack 0
   539  000118                     	ds	8
   540  000120                     _J_var:
   541                           	opt stack 0
   542  000120                     	ds	4
   543  000124                     _K_var:
   544                           	opt stack 0
   545  000124                     	ds	4
   546  000128                     _Pmin:
   547                           	opt stack 0
   548  000128                     	ds	4
   549  00012C                     _alfa:
   550                           	opt stack 0
   551  00012C                     	ds	4
   552  000130                     _beta:
   553                           	opt stack 0
   554  000130                     	ds	4
   555  000134                     _bordo:
   556                           	opt stack 0
   557  000134                     	ds	4
   558  000138                     _n:
   559                           	opt stack 0
   560  000138                     	ds	4
   561  00013C                     _prima_sterzata:
   562                           	opt stack 0
   563  00013C                     	ds	4
   564  000140                     _distance:
   565                           	opt stack 0
   566  000140                     	ds	2
   567  000142                     _errno:
   568                           	opt stack 0
   569  000142                     	ds	2
   570  000144                     _msg:
   571                           	opt stack 0
   572  000144                     	ds	15
   573  000153                     _data:
   574                           	opt stack 0
   575  000153                     	ds	8
   576  00015B                     _data_correction:
   577                           	opt stack 0
   578  00015B                     	ds	8
   579  000163                     _data_speed:
   580                           	opt stack 0
   581  000163                     	ds	8
   582  00016B                     _data_steering:
   583                           	opt stack 0
   584  00016B                     	ds	8
   585  000173                     _data_test:
   586                           	opt stack 0
   587  000173                     	ds	8
   588  00017B                     _sensor_distance_short:
   589                           	opt stack 0
   590  00017B                     	ds	8
   591                           tblptru	equ	0xFF8
   592                           tblptrh	equ	0xFF7
   593                           tblptrl	equ	0xFF6
   594                           tablat	equ	0xFF5
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           
   598                           	psect	dataBANK1
   599  0001E0                     __pdataBANK1:
   600                           	opt stack 0
   601  0001E0                     ISR_Bassa@F16865:
   602                           	opt stack 0
   603  0001E0                     	ds	2
   604                           tblptru	equ	0xFF8
   605                           tblptrh	equ	0xFF7
   606                           tblptrl	equ	0xFF6
   607                           tablat	equ	0xFF5
   608                           postinc0	equ	0xFEE
   609                           wreg	equ	0xFE8
   610                           
   611                           	psect	cstackBANK1
   612  000183                     __pcstackBANK1:
   613                           	opt stack 0
   614  000183                     sin@y:
   615                           	opt stack 0
   616  000183                     sqrt@og:
   617                           	opt stack 0
   618                           
   619                           ; 4 bytes @ 0x0
   620  000183                     	ds	4
   621  000187                     sqrt@z:
   622                           	opt stack 0
   623  000187                     _sin$3684:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x4
   627  000187                     	ds	4
   628  00018B                     sqrt@i:
   629                           	opt stack 0
   630  00018B                     sin@x2:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x8
   634  00018B                     	ds	1
   635  00018C                     sqrt@q:
   636                           	opt stack 0
   637                           
   638                           ; 4 bytes @ 0x9
   639  00018C                     	ds	3
   640  00018F                     sin@sgn:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0xC
   644  00018F                     	ds	1
   645  000190                     sqrt@x:
   646                           	opt stack 0
   647                           
   648                           ; 4 bytes @ 0xD
   649  000190                     	ds	4
   650  000194                     ?_asin:
   651                           	opt stack 0
   652  000194                     asin@x:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0x11
   656  000194                     	ds	4
   657  000198                     asin@sgn:
   658                           	opt stack 0
   659                           
   660                           ; 4 bytes @ 0x15
   661  000198                     	ds	4
   662  00019C                     _asin$3679:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x19
   666  00019C                     	ds	4
   667  0001A0                     _asin$3682:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x1D
   671  0001A0                     	ds	4
   672  0001A4                     _asin$3681:
   673                           	opt stack 0
   674                           
   675                           ; 4 bytes @ 0x21
   676  0001A4                     	ds	4
   677  0001A8                     asin@y:
   678                           	opt stack 0
   679                           
   680                           ; 4 bytes @ 0x25
   681  0001A8                     	ds	4
   682  0001AC                     _asin$3680:
   683                           	opt stack 0
   684                           
   685                           ; 4 bytes @ 0x29
   686  0001AC                     	ds	4
   687  0001B0                     ??_parallelo:
   688  0001B0                     ?_cos:
   689                           	opt stack 0
   690  0001B0                     cos@f:
   691                           	opt stack 0
   692                           
   693                           ; 4 bytes @ 0x2D
   694  0001B0                     	ds	4
   695  0001B4                     _cos$3683:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x31
   699  0001B4                     	ds	4
   700  0001B8                     ??_park_routine:
   701  0001B8                     _matematica$3672:
   702                           	opt stack 0
   703                           
   704                           ; 4 bytes @ 0x35
   705  0001B8                     	ds	4
   706  0001BC                     _park_routine$3667:
   707                           	opt stack 0
   708  0001BC                     _matematica$3673:
   709                           	opt stack 0
   710                           
   711                           ; 4 bytes @ 0x39
   712  0001BC                     	ds	4
   713  0001C0                     _park_routine$3668:
   714                           	opt stack 0
   715  0001C0                     _matematica$3674:
   716                           	opt stack 0
   717                           
   718                           ; 4 bytes @ 0x3D
   719  0001C0                     	ds	4
   720  0001C4                     _park_routine$3670:
   721                           	opt stack 0
   722  0001C4                     _matematica$3675:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x41
   726  0001C4                     	ds	4
   727  0001C8                     _park_routine$3671:
   728                           	opt stack 0
   729  0001C8                     _matematica$3677:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x45
   733  0001C8                     	ds	4
   734  0001CC                     _park_routine$3665:
   735                           	opt stack 0
   736  0001CC                     _matematica$3678:
   737                           	opt stack 0
   738                           
   739                           ; 4 bytes @ 0x49
   740  0001CC                     	ds	4
   741  0001D0                     _park_routine$3666:
   742                           	opt stack 0
   743  0001D0                     _matematica$3676:
   744                           	opt stack 0
   745                           
   746                           ; 4 bytes @ 0x4D
   747  0001D0                     	ds	4
   748  0001D4                     matematica@larghezza:
   749                           	opt stack 0
   750  0001D4                     _park_routine$3669:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0x51
   754  0001D4                     	ds	4
   755  0001D8                     park_routine@larghezza:
   756                           	opt stack 0
   757  0001D8                     matematica@raggio:
   758                           	opt stack 0
   759                           
   760                           ; 4 bytes @ 0x55
   761  0001D8                     	ds	4
   762  0001DC                     ??_park_search:
   763  0001DC                     park_routine@raggio:
   764                           	opt stack 0
   765                           
   766                           ; 4 bytes @ 0x59
   767  0001DC                     	ds	4
   768                           tblptru	equ	0xFF8
   769                           tblptrh	equ	0xFF7
   770                           tblptrl	equ	0xFF6
   771                           tablat	equ	0xFF5
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           
   775                           	psect	cstackBANK0
   776  000060                     __pcstackBANK0:
   777                           	opt stack 0
   778  000060                     ?___lwdiv:
   779                           	opt stack 0
   780  000060                     ___lwdiv@dividend:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x0
   784  000060                     	ds	2
   785  000062                     ___lwdiv@divisor:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x2
   789  000062                     	ds	2
   790  000064                     ___lwdiv@counter:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x4
   794  000064                     	ds	1
   795  000065                     ___lwdiv@quotient:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x5
   799  000065                     	ds	2
   800  000067                     ??_ISR_Alta:
   801                           
   802                           ; 0 bytes @ 0x7
   803  000067                     	ds	16
   804  000077                     ?_abs:
   805                           	opt stack 0
   806  000077                     ?___wmul:
   807                           	opt stack 0
   808  000077                     ?___flpack:
   809                           	opt stack 0
   810  000077                     CANOperationMode@mode:
   811                           	opt stack 0
   812  000077                     _CANisTxReady$2841:
   813                           	opt stack 0
   814  000077                     ___wmul@multiplier:
   815                           	opt stack 0
   816  000077                     abs@a:
   817                           	opt stack 0
   818  000077                     CANsendMessage@identifier:
   819                           	opt stack 0
   820  000077                     CANSetMask@mask:
   821                           	opt stack 0
   822  000077                     CANSetFilter@filter:
   823                           	opt stack 0
   824  000077                     ___flpack@arg:
   825                           	opt stack 0
   826  000077                     frexp@value:
   827                           	opt stack 0
   828                           
   829                           ; 4 bytes @ 0x17
   830  000077                     	ds	2
   831  000079                     ??_abs:
   832  000079                     ___wmul@multiplicand:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x19
   836  000079                     	ds	2
   837  00007B                     CANSetMask@type:
   838                           	opt stack 0
   839  00007B                     CANSetFilter@type:
   840                           	opt stack 0
   841  00007B                     ___flpack@exp:
   842                           	opt stack 0
   843  00007B                     CANsendMessage@data:
   844                           	opt stack 0
   845  00007B                     ___wmul@product:
   846                           	opt stack 0
   847  00007B                     frexp@eptr:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x1B
   851  00007B                     	ds	1
   852  00007C                     ??_CANSetMask:
   853  00007C                     ??_CANSetFilter:
   854  00007C                     ___flpack@sign:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x1C
   858  00007C                     	ds	1
   859  00007D                     ??___flpack:
   860  00007D                     ??_frexp:
   861  00007D                     CANsendMessage@dataLength:
   862                           	opt stack 0
   863  00007D                     delay_ms@value_ms:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x1D
   867  00007D                     	ds	1
   868  00007E                     CANsendMessage@flags:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x1E
   872  00007E                     	ds	1
   873  00007F                     ??_CANsendMessage:
   874  00007F                     delay_s@value_s:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x1F
   878  00007F                     	ds	1
   879  000080                     CANSetMask@numBuffer:
   880                           	opt stack 0
   881  000080                     CANSetFilter@numBuffer:
   882                           	opt stack 0
   883  000080                     delay_s@repeat_loop:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x20
   887  000080                     	ds	1
   888  000081                     ?___flmul:
   889                           	opt stack 0
   890  000081                     ?___awtofl:
   891                           	opt stack 0
   892  000081                     ?___lwtofl:
   893                           	opt stack 0
   894  000081                     ___awtofl@c:
   895                           	opt stack 0
   896  000081                     ___lwtofl@c:
   897                           	opt stack 0
   898  000081                     CANSetMask@tamp:
   899                           	opt stack 0
   900  000081                     CANSetFilter@tamp:
   901                           	opt stack 0
   902  000081                     ___flmul@f1:
   903                           	opt stack 0
   904                           
   905                           ; 4 bytes @ 0x21
   906  000081                     	ds	2
   907  000083                     CANsendMessage@tamp:
   908                           	opt stack 0
   909                           
   910                           ; 4 bytes @ 0x23
   911  000083                     	ds	2
   912  000085                     CANInitialize@phaseSeg1:
   913                           	opt stack 0
   914  000085                     ___awtofl@sign:
   915                           	opt stack 0
   916  000085                     ___flmul@f2:
   917                           	opt stack 0
   918                           
   919                           ; 4 bytes @ 0x25
   920  000085                     	ds	1
   921  000086                     CANInitialize@phaseSeg2:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x26
   925  000086                     	ds	1
   926  000087                     CANInitialize@SJW:
   927                           	opt stack 0
   928                           
   929                           ; 1 bytes @ 0x27
   930  000087                     	ds	1
   931  000088                     CANInitialize@BRP:
   932                           	opt stack 0
   933                           
   934                           ; 1 bytes @ 0x28
   935  000088                     	ds	1
   936  000089                     CANInitialize@flags:
   937                           	opt stack 0
   938  000089                     ___flmul@exp:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x29
   942  000089                     	ds	1
   943  00008A                     ??_CANInitialize:
   944  00008A                     ___flmul@f3_as_product:
   945                           	opt stack 0
   946                           
   947                           ; 4 bytes @ 0x2A
   948  00008A                     	ds	4
   949  00008E                     CANInitialize@propSeg:
   950                           	opt stack 0
   951  00008E                     ___flmul@cntr:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x2E
   955  00008E                     	ds	1
   956  00008F                     CANInitialize@FilterConfig1:
   957                           	opt stack 0
   958  00008F                     ___flmul@sign:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x2F
   962  00008F                     	ds	1
   963  000090                     ?___fldiv:
   964                           	opt stack 0
   965  000090                     CANInitialize@FilterConfig2:
   966                           	opt stack 0
   967  000090                     ___fldiv@f1:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0x30
   971  000090                     	ds	1
   972  000091                     
   973                           ; 0 bytes @ 0x31
   974  000091                     	ds	3
   975  000094                     ___fldiv@f2:
   976                           	opt stack 0
   977                           
   978                           ; 4 bytes @ 0x34
   979  000094                     	ds	4
   980  000098                     ___fldiv@f3:
   981                           	opt stack 0
   982                           
   983                           ; 4 bytes @ 0x38
   984  000098                     	ds	4
   985  00009C                     ___fldiv@cntr:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x3C
   989  00009C                     	ds	1
   990  00009D                     ___fldiv@exp:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x3D
   994  00009D                     	ds	1
   995  00009E                     ___fldiv@sign:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x3E
   999  00009E                     	ds	1
  1000  00009F                     ?___fladd:
  1001                           	opt stack 0
  1002  00009F                     ___fladd@f1:
  1003                           	opt stack 0
  1004                           
  1005                           ; 4 bytes @ 0x3F
  1006  00009F                     	ds	4
  1007  0000A3                     ___fladd@f2:
  1008                           	opt stack 0
  1009                           
  1010                           ; 4 bytes @ 0x43
  1011  0000A3                     	ds	4
  1012  0000A7                     ??___fladd:
  1013                           
  1014                           ; 0 bytes @ 0x47
  1015  0000A7                     	ds	1
  1016  0000A8                     ___fladd@sign:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x48
  1020  0000A8                     	ds	1
  1021  0000A9                     ___fladd@exp2:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x49
  1025  0000A9                     	ds	1
  1026  0000AA                     ___fladd@exp1:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x4A
  1030  0000AA                     	ds	1
  1031  0000AB                     ?_eval_poly:
  1032                           	opt stack 0
  1033  0000AB                     ?___flneg:
  1034                           	opt stack 0
  1035  0000AB                     eval_poly@x:
  1036                           	opt stack 0
  1037  0000AB                     ___flneg@f1:
  1038                           	opt stack 0
  1039                           
  1040                           ; 4 bytes @ 0x4B
  1041  0000AB                     	ds	4
  1042  0000AF                     ?_fabs:
  1043                           	opt stack 0
  1044  0000AF                     ?___fltol:
  1045                           	opt stack 0
  1046  0000AF                     eval_poly@d:
  1047                           	opt stack 0
  1048  0000AF                     fabs@d:
  1049                           	opt stack 0
  1050  0000AF                     ___fltol@f1:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0x4F
  1054  0000AF                     	ds	2
  1055  0000B1                     eval_poly@n:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x51
  1059  0000B1                     	ds	2
  1060  0000B3                     ??_eval_poly:
  1061  0000B3                     ??___fltol:
  1062  0000B3                     ___flge@ff1:
  1063                           	opt stack 0
  1064                           
  1065                           ; 4 bytes @ 0x53
  1066  0000B3                     	ds	4
  1067  0000B7                     ___fltol@sign1:
  1068                           	opt stack 0
  1069  0000B7                     eval_poly@res:
  1070                           	opt stack 0
  1071  0000B7                     ___flge@ff2:
  1072                           	opt stack 0
  1073                           
  1074                           ; 4 bytes @ 0x57
  1075  0000B7                     	ds	1
  1076  0000B8                     ___fltol@exp1:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x58
  1080  0000B8                     	ds	1
  1081  0000B9                     ?___altofl:
  1082                           	opt stack 0
  1083  0000B9                     ___altofl@c:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x59
  1087  0000B9                     	ds	2
  1088  0000BB                     ??___flge:
  1089                           
  1090                           ; 0 bytes @ 0x5B
  1091  0000BB                     	ds	2
  1092  0000BD                     ___altofl@sign:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x5D
  1096  0000BD                     	ds	2
  1097  0000BF                     ?_atan:
  1098                           	opt stack 0
  1099  0000BF                     ?_floor:
  1100                           	opt stack 0
  1101  0000BF                     atan@f:
  1102                           	opt stack 0
  1103  0000BF                     floor@x:
  1104                           	opt stack 0
  1105                           
  1106                           ; 4 bytes @ 0x5F
  1107  0000BF                     	ds	4
  1108  0000C3                     atan@y:
  1109                           	opt stack 0
  1110  0000C3                     floor@i:
  1111                           	opt stack 0
  1112                           
  1113                           ; 4 bytes @ 0x63
  1114  0000C3                     	ds	4
  1115  0000C7                     floor@expon:
  1116                           	opt stack 0
  1117  0000C7                     atan@x:
  1118                           	opt stack 0
  1119                           
  1120                           ; 4 bytes @ 0x67
  1121  0000C7                     	ds	2
  1122  0000C9                     ?___flsub:
  1123                           	opt stack 0
  1124  0000C9                     ___flsub@f1:
  1125                           	opt stack 0
  1126                           
  1127                           ; 4 bytes @ 0x69
  1128  0000C9                     	ds	2
  1129  0000CB                     atan@recip:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x6B
  1133  0000CB                     	ds	1
  1134  0000CC                     atan@val_squared:
  1135                           	opt stack 0
  1136                           
  1137                           ; 4 bytes @ 0x6C
  1138  0000CC                     	ds	1
  1139  0000CD                     ___flsub@f2:
  1140                           	opt stack 0
  1141                           
  1142                           ; 4 bytes @ 0x6D
  1143  0000CD                     	ds	3
  1144  0000D0                     atan@val:
  1145                           	opt stack 0
  1146                           
  1147                           ; 4 bytes @ 0x70
  1148  0000D0                     	ds	1
  1149  0000D1                     ?_sqrt:
  1150                           	opt stack 0
  1151  0000D1                     ?_sin:
  1152                           	opt stack 0
  1153  0000D1                     sin@f:
  1154                           	opt stack 0
  1155  0000D1                     sqrt@y:
  1156                           	opt stack 0
  1157                           
  1158                           ; 4 bytes @ 0x71
  1159  0000D1                     	ds	4
  1160  0000D5                     ??_sqrt:
  1161  0000D5                     
  1162                           ; 0 bytes @ 0x75
  1163  0000D5                     	ds	4
  1164  0000D9                     tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           postinc0	equ	0xFEE
  1169                           wreg	equ	0xFE8
  1170                           
  1171                           ; 0 bytes @ 0x79
  1172                           
  1173                           	psect	cstackCOMRAM
  1174  00002E                     __pcstackCOMRAM:
  1175                           	opt stack 0
  1176  00002E                     ?i1___wmul:
  1177                           	opt stack 0
  1178  00002E                     _CANisRxReady$2843:
  1179                           	opt stack 0
  1180  00002E                     i1_CANisTxReady$2841:
  1181                           	opt stack 0
  1182  00002E                     CANreceiveMessage@msg:
  1183                           	opt stack 0
  1184  00002E                     i1___wmul@multiplier:
  1185                           	opt stack 0
  1186  00002E                     i1CANsendMessage@identifier:
  1187                           	opt stack 0
  1188                           
  1189                           ; 4 bytes @ 0x0
  1190  00002E                     	ds	2
  1191  000030                     ??_CANreceiveMessage:
  1192  000030                     i1___wmul@multiplicand:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x2
  1196  000030                     	ds	2
  1197  000032                     i1CANsendMessage@data:
  1198                           	opt stack 0
  1199  000032                     i1___wmul@product:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x4
  1203  000032                     	ds	2
  1204  000034                     i1CANsendMessage@dataLength:
  1205                           	opt stack 0
  1206  000034                     i1delay_ms@value_ms:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0x6
  1210  000034                     	ds	1
  1211  000035                     i1CANsendMessage@flags:
  1212                           	opt stack 0
  1213                           
  1214                           ; 1 bytes @ 0x7
  1215  000035                     	ds	1
  1216  000036                     ??i1_CANsendMessage:
  1217  000036                     
  1218                           ; 0 bytes @ 0x8
  1219  000036                     	ds	2
  1220  000038                     CANreceiveMessage@error:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0xA
  1224  000038                     	ds	1
  1225  000039                     CANreceiveMessage@tamp:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0xB
  1229  000039                     	ds	1
  1230  00003A                     i1CANsendMessage@tamp:
  1231                           	opt stack 0
  1232                           
  1233                           ; 4 bytes @ 0xC
  1234  00003A                     	ds	4
  1235  00003E                     ??_ISR_Bassa:
  1236  00003E                     
  1237                           ; 0 bytes @ 0x10
  1238  00003E                     	ds	21
  1239  000053                     ISR_Bassa@MUX_index_collision:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x25
  1243  000053                     	ds	2
  1244  000055                     ISR_Bassa@PORTA_temp:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x27
  1248  000055                     	ds	1
  1249                           tblptru	equ	0xFF8
  1250                           tblptrh	equ	0xFF7
  1251                           tblptrl	equ	0xFF6
  1252                           tablat	equ	0xFF5
  1253                           postinc0	equ	0xFEE
  1254                           wreg	equ	0xFE8
  1255                           
  1256 ;;
  1257 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1258 ;;
  1259 ;; *************** function _main *****************
  1260 ;; Defined at:
  1261 ;;		line 234 in file "parcheggio.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;		None
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;		None
  1266 ;; Return value:  Size  Location     Type
  1267 ;;		None               void
  1268 ;; Registers used:
  1269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1279 ;;Total ram usage:        0 bytes
  1280 ;; Hardware stack levels required when called:   12
  1281 ;; This function calls:
  1282 ;;		_CANisTxReady
  1283 ;;		_CANsendMessage
  1284 ;;		_configurations
  1285 ;;		_delay_ms
  1286 ;;		_park_routine
  1287 ;;		_park_search
  1288 ;; This function is called by:
  1289 ;;		Startup code after reset
  1290 ;; This function uses a non-reentrant model
  1291 ;;
  1292                           
  1293                           	psect	text0
  1294  005FD4                     __ptext0:
  1295                           	opt stack 0
  1296  005FD4                     _main:
  1297                           	opt stack 19
  1298                           
  1299                           ;parcheggio.c: 235: MUX_select[0] = 0b00000000;
  1300                           
  1301                           ;incstack = 0
  1302  005FD4  0E00               	movlw	0
  1303  005FD6  0101               	movlb	1	; () banked
  1304  005FD8  6F00               	movwf	_MUX_select& (0+255),b	;volatile
  1305                           
  1306                           ;parcheggio.c: 236: MUX_select[1] = 0b00000001;
  1307  005FDA  0E01               	movlw	1
  1308  005FDC  0101               	movlb	1	; () banked
  1309  005FDE  6F01               	movwf	(_MUX_select+1)& (0+255),b	;volatile
  1310                           
  1311                           ;parcheggio.c: 237: MUX_select[2] = 0b00000010;
  1312  005FE0  0E02               	movlw	2
  1313  005FE2  0101               	movlb	1	; () banked
  1314  005FE4  6F02               	movwf	(_MUX_select+2)& (0+255),b	;volatile
  1315                           
  1316                           ;parcheggio.c: 238: MUX_select[3] = 0b00000011;
  1317  005FE6  0E03               	movlw	3
  1318  005FE8  0101               	movlb	1	; () banked
  1319  005FEA  6F03               	movwf	(_MUX_select+3)& (0+255),b	;volatile
  1320                           
  1321                           ;parcheggio.c: 239: MUX_select[4] = 0b00000100;
  1322  005FEC  0E04               	movlw	4
  1323  005FEE  0101               	movlb	1	; () banked
  1324  005FF0  6F04               	movwf	(_MUX_select+4)& (0+255),b	;volatile
  1325                           
  1326                           ;parcheggio.c: 240: MUX_select[5] = 0b00000101;
  1327  005FF2  0E05               	movlw	5
  1328  005FF4  0101               	movlb	1	; () banked
  1329  005FF6  6F05               	movwf	(_MUX_select+5)& (0+255),b	;volatile
  1330                           
  1331                           ;parcheggio.c: 241: MUX_select[6] = 0b00000110;
  1332  005FF8  0E06               	movlw	6
  1333  005FFA  0101               	movlb	1	; () banked
  1334  005FFC  6F06               	movwf	(_MUX_select+6)& (0+255),b	;volatile
  1335                           
  1336                           ;parcheggio.c: 242: MUX_select[7] = 0b00000111;
  1337  005FFE  0E07               	movlw	7
  1338  006000  0101               	movlb	1	; () banked
  1339  006002  6F07               	movwf	(_MUX_select+7)& (0+255),b	;volatile
  1340                           
  1341                           ; BSR set to: 1
  1342                           ;parcheggio.c: 244: configurations();
  1343  006004  ECCB  F030         	call	_configurations	;wreg free
  1344                           
  1345                           ;parcheggio.c: 246: PORTBbits.RB4 = 0;
  1346  006008  9881               	bcf	3969,4,c	;volatile
  1347                           
  1348                           ;parcheggio.c: 247: PORTBbits.RB5 = 0;
  1349  00600A  9A81               	bcf	3969,5,c	;volatile
  1350                           
  1351                           ;parcheggio.c: 248: PORTBbits.RB6 = 0;
  1352  00600C  9C81               	bcf	3969,6,c	;volatile
  1353                           
  1354                           ;parcheggio.c: 250: request_sent = 0;
  1355  00600E  9857               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1356                           
  1357                           ;parcheggio.c: 251: start_operation = 0;
  1358  006010  9C57               	bcf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  1359                           
  1360                           ;parcheggio.c: 252: delay_ms(500);
  1361  006012  0E01               	movlw	1
  1362  006014  0100               	movlb	0	; () banked
  1363  006016  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1364  006018  0EF4               	movlw	244
  1365  00601A  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1366  00601C  ECEC  F031         	call	_delay_ms	;wreg free
  1367                           
  1368                           ;parcheggio.c: 255: while (activation != 1) {
  1369                           
  1370                           ;parcheggio.c: 254: while (1) {
  1371  006020  D026               	goto	l7231
  1372  006022                     l7225:
  1373                           
  1374                           ;parcheggio.c: 256: delay_ms(10);
  1375  006022  0E00               	movlw	0
  1376  006024  0100               	movlb	0	; () banked
  1377  006026  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1378  006028  0E0A               	movlw	10
  1379  00602A  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1380  00602C  ECEC  F031         	call	_delay_ms	;wreg free
  1381                           
  1382                           ;parcheggio.c: 257: while (!CANisTxReady());
  1383  006030  D000               	goto	l7227
  1384  006032                     l7227:
  1385  006032  EC9B  F032         	call	_CANisTxReady	;wreg free
  1386  006036  0900               	iorlw	0
  1387  006038  B4D8               	btfsc	status,2,c
  1388  00603A  D7FB               	goto	l7227
  1389                           
  1390                           ;parcheggio.c: 258: PORTBbits.RB4 = ~PORTBbits.RB4;
  1391  00603C  7881               	btg	3969,4,c	;volatile
  1392                           
  1393                           ;parcheggio.c: 259: CANsendMessage(0b00000010001, sensor_distance_short, 2, CAN_CONFIG_S
      +                          TD_MSG & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1394  00603E  0E11               	movlw	17
  1395  006040  0100               	movlb	0	; () banked
  1396  006042  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1397  006044  0E00               	movlw	0
  1398  006046  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1399  006048  0E00               	movlw	0
  1400  00604A  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1401  00604C  0E00               	movlw	0
  1402  00604E  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1403  006050  0E7B               	movlw	low _sensor_distance_short
  1404  006052  0100               	movlb	0	; () banked
  1405  006054  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1406  006056  0E01               	movlw	high _sensor_distance_short
  1407  006058  0100               	movlb	0	; () banked
  1408  00605A  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1409  00605C  0E02               	movlw	2
  1410  00605E  0100               	movlb	0	; () banked
  1411  006060  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1412  006062  0EBC               	movlw	188
  1413  006064  0100               	movlb	0	; () banked
  1414  006066  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1415  006068  ECD9  F011         	call	_CANsendMessage	;wreg free
  1416  00606C  D000               	goto	l7231
  1417  00606E                     l7231:
  1418  00606E  A256               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1419  006070  D7D8               	goto	l7225
  1420                           
  1421                           ;parcheggio.c: 260: }
  1422                           ;parcheggio.c: 262: park_search();
  1423  006072  ECFD  F027         	call	_park_search	;wreg free
  1424                           
  1425                           ;parcheggio.c: 263: park_routine();
  1426  006076  ECA9  F006         	call	_park_routine	;wreg free
  1427  00607A  D7F9               	goto	l7231
  1428  00607C  EF96  F001         	goto	start
  1429  006080                     __end_of_main:
  1430                           	opt stack 0
  1431                           tblptru	equ	0xFF8
  1432                           tblptrh	equ	0xFF7
  1433                           tblptrl	equ	0xFF6
  1434                           tablat	equ	0xFF5
  1435                           postinc0	equ	0xFEE
  1436                           wreg	equ	0xFE8
  1437                           status	equ	0xFD8
  1438                           
  1439 ;; *************** function _park_search *****************
  1440 ;; Defined at:
  1441 ;;		line 267 in file "parcheggio.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;		None
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;		None
  1446 ;; Return value:  Size  Location     Type
  1447 ;;		None               void
  1448 ;; Registers used:
  1449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1457 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1458 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1459 ;;Total ram usage:        2 bytes
  1460 ;; Hardware stack levels used:    1
  1461 ;; Hardware stack levels required when called:   11
  1462 ;; This function calls:
  1463 ;;		_CANisTxReady
  1464 ;;		_CANsendMessage
  1465 ;;		___awtofl
  1466 ;;		___flge
  1467 ;;		___lwtofl
  1468 ;;		_abs
  1469 ;;		_matematica
  1470 ;;		_parallelo
  1471 ;; This function is called by:
  1472 ;;		_main
  1473 ;; This function uses a non-reentrant model
  1474 ;;
  1475                           
  1476                           	psect	text1
  1477  004FFA                     __ptext1:
  1478                           	opt stack 0
  1479  004FFA                     _park_search:
  1480                           	opt stack 19
  1481                           
  1482                           ;parcheggio.c: 268: while ((activation == 1) && (PORTBbits.RB5 == 0)) {
  1483                           
  1484                           ;incstack = 0
  1485  004FFA  D0EF               	goto	l739
  1486  004FFC                     l6897:
  1487                           
  1488                           ;parcheggio.c: 269: parallelo();
  1489  004FFC  ECBF  F025         	call	_parallelo	;wreg free
  1490                           
  1491                           ;parcheggio.c: 270: if (sensor_distance[0] > 50) {
  1492  005000  5002               	movf	_sensor_distance+1,w,c	;volatile
  1493  005002  E104               	bnz	u8530
  1494  005004  0E33               	movlw	51
  1495  005006  5C01               	subwf	_sensor_distance,w,c	;volatile
  1496  005008  A0D8               	btfss	status,0,c
  1497  00500A  D024               	goto	l741
  1498  00500C                     u8530:
  1499                           
  1500                           ;parcheggio.c: 271: if (request_sent == 0) {
  1501  00500C  A857               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1502  00500E  D002               	goto	l6905
  1503  005010  D01F               	goto	l6911
  1504                           
  1505                           ;parcheggio.c: 272: while (!CANisTxReady());
  1506  005012  D000               	goto	l6905
  1507  005014                     l6905:
  1508  005014  EC9B  F032         	call	_CANisTxReady	;wreg free
  1509  005018  0900               	iorlw	0
  1510  00501A  B4D8               	btfsc	status,2,c
  1511  00501C  D7FB               	goto	l6905
  1512                           
  1513                           ;parcheggio.c: 273: CANsendMessage(0b00000001010, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1514  00501E  0E0A               	movlw	10
  1515  005020  0100               	movlb	0	; () banked
  1516  005022  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1517  005024  0E00               	movlw	0
  1518  005026  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1519  005028  0E00               	movlw	0
  1520  00502A  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1521  00502C  0E00               	movlw	0
  1522  00502E  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1523  005030  0E53               	movlw	low _data
  1524  005032  0100               	movlb	0	; () banked
  1525  005034  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1526  005036  0E01               	movlw	high _data
  1527  005038  0100               	movlb	0	; () banked
  1528  00503A  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1529  00503C  0E08               	movlw	8
  1530  00503E  0100               	movlb	0	; () banked
  1531  005040  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1532  005042  0EFC               	movlw	252
  1533  005044  0100               	movlb	0	; () banked
  1534  005046  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1535  005048  ECD9  F011         	call	_CANsendMessage	;wreg free
  1536                           
  1537                           ;parcheggio.c: 274: request_sent = 1;
  1538  00504C  8857               	bsf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1539  00504E  D000               	goto	l6911
  1540  005050                     l6911:
  1541                           
  1542                           ;parcheggio.c: 276: }
  1543                           ;parcheggio.c: 277: LATBbits.LATB4 = 1;
  1544  005050  888A               	bsf	3978,4,c	;volatile
  1545                           
  1546                           ;parcheggio.c: 278: } else {
  1547  005052  D027               	goto	l6915
  1548  005054                     l741:
  1549                           
  1550                           ;parcheggio.c: 279: LATBbits.LATB4 = 0;
  1551  005054  988A               	bcf	3978,4,c	;volatile
  1552                           
  1553                           ;parcheggio.c: 280: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  1554  005056  EE20  F003         	lfsr	2,_sensor_distance+2	;volatile
  1555  00505A  CFDE F1DC          	movff	postinc2,??_park_search
  1556  00505E  CFDD F1DD          	movff	postdec2,??_park_search+1
  1557  005062  0101               	movlb	1	; () banked
  1558  005064  1FDC               	comf	??_park_search& (0+255),f,b
  1559  005066  1FDD               	comf	(??_park_search+1)& (0+255),f,b
  1560  005068  4BDC               	infsnz	??_park_search& (0+255),f,b
  1561  00506A  2BDD               	incf	(??_park_search+1)& (0+255),f,b
  1562  00506C  5001               	movf	_sensor_distance,w,c	;volatile
  1563  00506E  0101               	movlb	1	; () banked
  1564  005070  25DC               	addwf	??_park_search& (0+255),w,b
  1565  005072  0100               	movlb	0	; () banked
  1566  005074  6F77               	movwf	abs@a& (0+255),b
  1567  005076  5002               	movf	_sensor_distance+1,w,c	;volatile
  1568  005078  0101               	movlb	1	; () banked
  1569  00507A  21DD               	addwfc	(??_park_search+1)& (0+255),w,b
  1570  00507C  0100               	movlb	0	; () banked
  1571  00507E  6F78               	movwf	(abs@a+1)& (0+255),b
  1572  005080  EC71  F032         	call	_abs	;wreg free
  1573  005084  C077  F081         	movff	?_abs,___awtofl@c
  1574  005088  C078  F082         	movff	?_abs+1,___awtofl@c+1
  1575  00508C  EC89  F031         	call	___awtofl	;wreg free
  1576  005090  C081  F0D9         	movff	?___awtofl,_alignment_gap	;volatile
  1577  005094  C082  F0DA         	movff	?___awtofl+1,_alignment_gap+1	;volatile
  1578  005098  C083  F0DB         	movff	?___awtofl+2,_alignment_gap+2	;volatile
  1579  00509C  C084  F0DC         	movff	?___awtofl+3,_alignment_gap+3	;volatile
  1580  0050A0  D000               	goto	l6915
  1581  0050A2                     l6915:
  1582                           
  1583                           ;parcheggio.c: 281: }
  1584                           ;parcheggio.c: 283: if ((sensor_distance[0] < 50) && (request_sent == 1)&&(sensor_distan
      +                          ce[1] < 50)) {
  1585  0050A2  5002               	movf	_sensor_distance+1,w,c	;volatile
  1586  0050A4  E131               	bnz	l6931
  1587  0050A6  0E32               	movlw	50
  1588  0050A8  5C01               	subwf	_sensor_distance,w,c	;volatile
  1589  0050AA  B0D8               	btfsc	status,0,c
  1590  0050AC  D02D               	goto	l6931
  1591  0050AE  A857               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1592  0050B0  D02B               	goto	l6931
  1593  0050B2  5004               	movf	_sensor_distance+3,w,c	;volatile
  1594  0050B4  E129               	bnz	l6931
  1595  0050B6  0E32               	movlw	50
  1596  0050B8  5C03               	subwf	_sensor_distance+2,w,c	;volatile
  1597  0050BA  B0D8               	btfsc	status,0,c
  1598  0050BC  D025               	goto	l6931
  1599                           
  1600                           ;parcheggio.c: 284: counter_distance++;
  1601  0050BE  0100               	movlb	0	; () banked
  1602  0050C0  2BE7               	incf	_counter_distance& (0+255),f,b	;volatile
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;parcheggio.c: 285: if (counter_distance > 1) {
  1606  0050C2  0E01               	movlw	1
  1607  0050C4  0100               	movlb	0	; () banked
  1608  0050C6  65E7               	cpfsgt	_counter_distance& (0+255),b	;volatile
  1609  0050C8  D01F               	goto	l6931
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;parcheggio.c: 286: request_sent = 0;
  1613  0050CA  9857               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1614                           
  1615                           ; BSR set to: 0
  1616                           
  1617                           ;parcheggio.c: 287: while (!CANisTxReady());
  1618  0050CC  D000               	goto	l6927
  1619  0050CE                     l6927:
  1620  0050CE  EC9B  F032         	call	_CANisTxReady	;wreg free
  1621  0050D2  0900               	iorlw	0
  1622  0050D4  B4D8               	btfsc	status,2,c
  1623  0050D6  D7FB               	goto	l6927
  1624                           
  1625                           ;parcheggio.c: 288: CANsendMessage(0b00000001001, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1626  0050D8  0E09               	movlw	9
  1627  0050DA  0100               	movlb	0	; () banked
  1628  0050DC  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1629  0050DE  0E00               	movlw	0
  1630  0050E0  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1631  0050E2  0E00               	movlw	0
  1632  0050E4  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1633  0050E6  0E00               	movlw	0
  1634  0050E8  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1635  0050EA  0E53               	movlw	low _data
  1636  0050EC  0100               	movlb	0	; () banked
  1637  0050EE  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1638  0050F0  0E01               	movlw	high _data
  1639  0050F2  0100               	movlb	0	; () banked
  1640  0050F4  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1641  0050F6  0E08               	movlw	8
  1642  0050F8  0100               	movlb	0	; () banked
  1643  0050FA  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1644  0050FC  0EFC               	movlw	252
  1645  0050FE  0100               	movlb	0	; () banked
  1646  005100  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1647  005102  ECD9  F011         	call	_CANsendMessage	;wreg free
  1648  005106  D000               	goto	l6931
  1649  005108                     l6931:
  1650                           
  1651                           ;parcheggio.c: 289: }
  1652                           ;parcheggio.c: 290: }
  1653                           ;parcheggio.c: 292: if (distance_received == 1) {
  1654  005108  AC56               	btfss	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1655  00510A  D067               	goto	l739
  1656                           
  1657                           ;parcheggio.c: 293: matematica();
  1658  00510C  ECFB  F018         	call	_matematica	;wreg free
  1659                           
  1660                           ;parcheggio.c: 294: if (distance_average > Pmin) {
  1661  005110  C128  F0B3         	movff	_Pmin,___flge@ff1
  1662  005114  C129  F0B4         	movff	_Pmin+1,___flge@ff1+1
  1663  005118  C12A  F0B5         	movff	_Pmin+2,___flge@ff1+2
  1664  00511C  C12B  F0B6         	movff	_Pmin+3,___flge@ff1+3
  1665  005120  C0E3  F081         	movff	_distance_average,___lwtofl@c	;volatile
  1666  005124  C0E4  F082         	movff	_distance_average+1,___lwtofl@c+1	;volatile
  1667  005128  EC41  F032         	call	___lwtofl	;wreg free
  1668  00512C  C081  F0B7         	movff	?___lwtofl,___flge@ff2
  1669  005130  C082  F0B8         	movff	?___lwtofl+1,___flge@ff2+1
  1670  005134  C083  F0B9         	movff	?___lwtofl+2,___flge@ff2+2
  1671  005138  C084  F0BA         	movff	?___lwtofl+3,___flge@ff2+3
  1672  00513C  EC1A  F02E         	call	___flge	;wreg free
  1673  005140  0100               	movlb	0	; () banked
  1674  005142  B0D8               	btfsc	status,0,c
  1675  005144  D047               	goto	l753
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;parcheggio.c: 295: PORTBbits.RB5 = 1;
  1679  005146  8A81               	bsf	3969,5,c	;volatile
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;parcheggio.c: 296: data[0] = 1;
  1683  005148  0E01               	movlw	1
  1684  00514A  0101               	movlb	1	; () banked
  1685  00514C  6F53               	movwf	_data& (0+255),b	;volatile
  1686                           
  1687                           ; BSR set to: 1
  1688                           ;parcheggio.c: 297: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  1689  00514E  0E0D               	movlw	13
  1690  005150  0100               	movlb	0	; () banked
  1691  005152  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1692  005154  0E00               	movlw	0
  1693  005156  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1694  005158  0E00               	movlw	0
  1695  00515A  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1696  00515C  0E00               	movlw	0
  1697  00515E  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1698  005160  0E53               	movlw	low _data
  1699  005162  0100               	movlb	0	; () banked
  1700  005164  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1701  005166  0E01               	movlw	high _data
  1702  005168  0100               	movlb	0	; () banked
  1703  00516A  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1704  00516C  0E01               	movlw	1
  1705  00516E  0100               	movlb	0	; () banked
  1706  005170  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1707  005172  0EBC               	movlw	188
  1708  005174  0100               	movlb	0	; () banked
  1709  005176  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1710  005178  ECD9  F011         	call	_CANsendMessage	;wreg free
  1711                           
  1712                           ;parcheggio.c: 298: if ((request_sent1 == 0)&&(sensor_distance[0] < 40)) {
  1713  00517C  BA57               	btfsc	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1714  00517E  D02D               	goto	l739
  1715  005180  5002               	movf	_sensor_distance+1,w,c	;volatile
  1716  005182  E12B               	bnz	l739
  1717  005184  0E28               	movlw	40
  1718  005186  5C01               	subwf	_sensor_distance,w,c	;volatile
  1719  005188  B0D8               	btfsc	status,0,c
  1720  00518A  D027               	goto	l739
  1721                           
  1722                           ;parcheggio.c: 299: data_test[0] = 50;
  1723  00518C  0E32               	movlw	50
  1724  00518E  0101               	movlb	1	; () banked
  1725  005190  6F73               	movwf	_data_test& (0+255),b	;volatile
  1726                           
  1727                           ; BSR set to: 1
  1728                           ;parcheggio.c: 300: asd = 1;
  1729  005192  8456               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  1730                           
  1731                           ; BSR set to: 1
  1732                           
  1733                           ;parcheggio.c: 301: while (!CANisTxReady());
  1734  005194  D000               	goto	l6951
  1735  005196                     l6951:
  1736  005196  EC9B  F032         	call	_CANisTxReady	;wreg free
  1737  00519A  0900               	iorlw	0
  1738  00519C  B4D8               	btfsc	status,2,c
  1739  00519E  D7FB               	goto	l6951
  1740                           
  1741                           ;parcheggio.c: 302: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1742  0051A0  0E0F               	movlw	15
  1743  0051A2  0100               	movlb	0	; () banked
  1744  0051A4  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1745  0051A6  0E00               	movlw	0
  1746  0051A8  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1747  0051AA  0E00               	movlw	0
  1748  0051AC  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1749  0051AE  0E00               	movlw	0
  1750  0051B0  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1751  0051B2  0E73               	movlw	low _data_test
  1752  0051B4  0100               	movlb	0	; () banked
  1753  0051B6  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1754  0051B8  0E01               	movlw	high _data_test
  1755  0051BA  0100               	movlb	0	; () banked
  1756  0051BC  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1757  0051BE  0E08               	movlw	8
  1758  0051C0  0100               	movlb	0	; () banked
  1759  0051C2  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1760  0051C4  0EBC               	movlw	188
  1761  0051C6  0100               	movlb	0	; () banked
  1762  0051C8  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1763  0051CA  ECD9  F011         	call	_CANsendMessage	;wreg free
  1764                           
  1765                           ;parcheggio.c: 304: distance_received1 = 0;
  1766  0051CE  9E56               	bcf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
  1767                           
  1768                           ;parcheggio.c: 305: request_sent1 = 1;
  1769  0051D0  8A57               	bsf	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1770                           
  1771                           ;parcheggio.c: 306: }
  1772                           ;parcheggio.c: 307: } else {
  1773  0051D2  D003               	goto	l739
  1774  0051D4                     l753:
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;parcheggio.c: 308: distance_received = 0;
  1778  0051D4  9C56               	bcf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1779                           
  1780                           ;parcheggio.c: 309: PORTBbits.RB5 = 0;
  1781  0051D6  9A81               	bcf	3969,5,c	;volatile
  1782                           
  1783                           ; BSR set to: 0
  1784  0051D8  D000               	goto	l739
  1785  0051DA                     l739:
  1786  0051DA  A256               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1787  0051DC  0012               	return	
  1788  0051DE  BA81               	btfsc	3969,5,c	;volatile
  1789  0051E0  0012               	return	
  1790  0051E2  D70C               	goto	l6897
  1791  0051E4  0012               	return	
  1792  0051E6  0012               	return		;funcret
  1793  0051E8                     __end_of_park_search:
  1794                           	opt stack 0
  1795                           tblptru	equ	0xFF8
  1796                           tblptrh	equ	0xFF7
  1797                           tblptrl	equ	0xFF6
  1798                           tablat	equ	0xFF5
  1799                           postinc0	equ	0xFEE
  1800                           wreg	equ	0xFE8
  1801                           postinc2	equ	0xFDE
  1802                           postdec2	equ	0xFDD
  1803                           status	equ	0xFD8
  1804                           
  1805 ;; *************** function _matematica *****************
  1806 ;; Defined at:
  1807 ;;		line 514 in file "parcheggio.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;		None
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;  raggio          4   85[BANK1 ] const float 
  1812 ;;  larghezza       4   81[BANK1 ] const float 
  1813 ;; Return value:  Size  Location     Type
  1814 ;;		None               void
  1815 ;; Registers used:
  1816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1823 ;;      Locals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  1824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1825 ;;      Totals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  1826 ;;Total ram usage:       36 bytes
  1827 ;; Hardware stack levels used:    1
  1828 ;; Hardware stack levels required when called:   10
  1829 ;; This function calls:
  1830 ;;		___fladd
  1831 ;;		___fldiv
  1832 ;;		___flmul
  1833 ;;		___flneg
  1834 ;;		_asin
  1835 ;;		_cos
  1836 ;; This function is called by:
  1837 ;;		_park_search
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text2
  1842  0031F6                     __ptext2:
  1843                           	opt stack 0
  1844  0031F6                     _matematica:
  1845                           	opt stack 19
  1846                           
  1847                           ;parcheggio.c: 515: const float raggio = 56;
  1848                           
  1849                           ;incstack = 0
  1850  0031F6  0E00               	movlw	0
  1851  0031F8  0101               	movlb	1	; () banked
  1852  0031FA  6FD8               	movwf	matematica@raggio& (0+255),b
  1853  0031FC  0E00               	movlw	0
  1854  0031FE  6FD9               	movwf	(matematica@raggio+1)& (0+255),b
  1855  003200  0E60               	movlw	96
  1856  003202  6FDA               	movwf	(matematica@raggio+2)& (0+255),b
  1857  003204  0E42               	movlw	66
  1858  003206  6FDB               	movwf	(matematica@raggio+3)& (0+255),b
  1859                           
  1860                           ;parcheggio.c: 516: const float larghezza = 33;
  1861  003208  0E00               	movlw	0
  1862  00320A  0101               	movlb	1	; () banked
  1863  00320C  6FD4               	movwf	matematica@larghezza& (0+255),b
  1864  00320E  0E00               	movlw	0
  1865  003210  6FD5               	movwf	(matematica@larghezza+1)& (0+255),b
  1866  003212  0E04               	movlw	4
  1867  003214  6FD6               	movwf	(matematica@larghezza+2)& (0+255),b
  1868  003216  0E42               	movlw	66
  1869  003218  6FD7               	movwf	(matematica@larghezza+3)& (0+255),b
  1870                           
  1871                           ; BSR set to: 1
  1872                           ;parcheggio.c: 517: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  1873  00321A  C134  F0A3         	movff	_bordo,___fladd@f2
  1874  00321E  C135  F0A4         	movff	_bordo+1,___fladd@f2+1
  1875  003222  C136  F0A5         	movff	_bordo+2,___fladd@f2+2
  1876  003226  C137  F0A6         	movff	_bordo+3,___fladd@f2+3
  1877  00322A  0E00               	movlw	0
  1878  00322C  0100               	movlb	0	; () banked
  1879  00322E  6F94               	movwf	___fldiv@f2& (0+255),b
  1880  003230  0E00               	movlw	0
  1881  003232  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  1882  003234  0E00               	movlw	0
  1883  003236  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  1884  003238  0E40               	movlw	64
  1885  00323A  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  1886  00323C  C1D4  F090         	movff	matematica@larghezza,___fldiv@f1
  1887  003240  C1D5  F091         	movff	matematica@larghezza+1,___fldiv@f1+1
  1888  003244  C1D6  F092         	movff	matematica@larghezza+2,___fldiv@f1+2
  1889  003248  C1D7  F093         	movff	matematica@larghezza+3,___fldiv@f1+3
  1890  00324C  EC4D  F02B         	call	___fldiv	;wreg free
  1891  003250  C090  F09F         	movff	?___fldiv,___fladd@f1
  1892  003254  C091  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  1893  003258  C092  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  1894  00325C  C093  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  1895  003260  EC5E  F023         	call	___fladd	;wreg free
  1896  003264  C09F  F0AB         	movff	?___fladd,___flneg@f1
  1897  003268  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  1898  00326C  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  1899  003270  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  1900  003274  ECCE  F031         	call	___flneg	;wreg free
  1901  003278  C0AB  F1B8         	movff	?___flneg,_matematica$3672
  1902  00327C  C0AC  F1B9         	movff	?___flneg+1,_matematica$3672+1
  1903  003280  C0AD  F1BA         	movff	?___flneg+2,_matematica$3672+2
  1904  003284  C0AE  F1BB         	movff	?___flneg+3,_matematica$3672+3
  1905                           
  1906                           ;parcheggio.c: 517: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  1907  003288  C1B8  F0A3         	movff	_matematica$3672,___fladd@f2
  1908  00328C  C1B9  F0A4         	movff	_matematica$3672+1,___fladd@f2+1
  1909  003290  C1BA  F0A5         	movff	_matematica$3672+2,___fladd@f2+2
  1910  003294  C1BB  F0A6         	movff	_matematica$3672+3,___fladd@f2+3
  1911  003298  0E00               	movlw	0
  1912  00329A  0100               	movlb	0	; () banked
  1913  00329C  6F85               	movwf	___flmul@f2& (0+255),b
  1914  00329E  0E00               	movlw	0
  1915  0032A0  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  1916  0032A2  0E00               	movlw	0
  1917  0032A4  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  1918  0032A6  0E40               	movlw	64
  1919  0032A8  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  1920  0032AA  C1D8  F081         	movff	matematica@raggio,___flmul@f1
  1921  0032AE  C1D9  F082         	movff	matematica@raggio+1,___flmul@f1+1
  1922  0032B2  C1DA  F083         	movff	matematica@raggio+2,___flmul@f1+2
  1923  0032B6  C1DB  F084         	movff	matematica@raggio+3,___flmul@f1+3
  1924  0032BA  EC9B  F02A         	call	___flmul	;wreg free
  1925  0032BE  C081  F09F         	movff	?___flmul,___fladd@f1
  1926  0032C2  C082  F0A0         	movff	?___flmul+1,___fladd@f1+1
  1927  0032C6  C083  F0A1         	movff	?___flmul+2,___fladd@f1+2
  1928  0032CA  C084  F0A2         	movff	?___flmul+3,___fladd@f1+3
  1929  0032CE  EC5E  F023         	call	___fladd	;wreg free
  1930  0032D2  C09F  F1BC         	movff	?___fladd,_matematica$3673
  1931  0032D6  C0A0  F1BD         	movff	?___fladd+1,_matematica$3673+1
  1932  0032DA  C0A1  F1BE         	movff	?___fladd+2,_matematica$3673+2
  1933  0032DE  C0A2  F1BF         	movff	?___fladd+3,_matematica$3673+3
  1934                           
  1935                           ;parcheggio.c: 517: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  1936  0032E2  0E00               	movlw	0
  1937  0032E4  0100               	movlb	0	; () banked
  1938  0032E6  6F94               	movwf	___fldiv@f2& (0+255),b
  1939  0032E8  0E00               	movlw	0
  1940  0032EA  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  1941  0032EC  0E00               	movlw	0
  1942  0032EE  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  1943  0032F0  0E40               	movlw	64
  1944  0032F2  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  1945  0032F4  C1D4  F090         	movff	matematica@larghezza,___fldiv@f1
  1946  0032F8  C1D5  F091         	movff	matematica@larghezza+1,___fldiv@f1+1
  1947  0032FC  C1D6  F092         	movff	matematica@larghezza+2,___fldiv@f1+2
  1948  003300  C1D7  F093         	movff	matematica@larghezza+3,___fldiv@f1+3
  1949  003304  EC4D  F02B         	call	___fldiv	;wreg free
  1950  003308  C090  F0AB         	movff	?___fldiv,___flneg@f1
  1951  00330C  C091  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  1952  003310  C092  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  1953  003314  C093  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  1954  003318  ECCE  F031         	call	___flneg	;wreg free
  1955  00331C  C0AB  F0A3         	movff	?___flneg,___fladd@f2
  1956  003320  C0AC  F0A4         	movff	?___flneg+1,___fladd@f2+1
  1957  003324  C0AD  F0A5         	movff	?___flneg+2,___fladd@f2+2
  1958  003328  C0AE  F0A6         	movff	?___flneg+3,___fladd@f2+3
  1959  00332C  C1BC  F09F         	movff	_matematica$3673,___fladd@f1
  1960  003330  C1BD  F0A0         	movff	_matematica$3673+1,___fladd@f1+1
  1961  003334  C1BE  F0A1         	movff	_matematica$3673+2,___fladd@f1+2
  1962  003338  C1BF  F0A2         	movff	_matematica$3673+3,___fladd@f1+3
  1963  00333C  EC5E  F023         	call	___fladd	;wreg free
  1964  003340  C09F  F1C0         	movff	?___fladd,_matematica$3674
  1965  003344  C0A0  F1C1         	movff	?___fladd+1,_matematica$3674+1
  1966  003348  C0A1  F1C2         	movff	?___fladd+2,_matematica$3674+2
  1967  00334C  C0A2  F1C3         	movff	?___fladd+3,_matematica$3674+3
  1968                           
  1969                           ;parcheggio.c: 517: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  1970  003350  C1C0  F090         	movff	_matematica$3674,___fldiv@f1
  1971  003354  C1C1  F091         	movff	_matematica$3674+1,___fldiv@f1+1
  1972  003358  C1C2  F092         	movff	_matematica$3674+2,___fldiv@f1+2
  1973  00335C  C1C3  F093         	movff	_matematica$3674+3,___fldiv@f1+3
  1974  003360  0E00               	movlw	0
  1975  003362  0100               	movlb	0	; () banked
  1976  003364  6F85               	movwf	___flmul@f2& (0+255),b
  1977  003366  0E00               	movlw	0
  1978  003368  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  1979  00336A  0E00               	movlw	0
  1980  00336C  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  1981  00336E  0E40               	movlw	64
  1982  003370  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  1983  003372  C1D8  F081         	movff	matematica@raggio,___flmul@f1
  1984  003376  C1D9  F082         	movff	matematica@raggio+1,___flmul@f1+1
  1985  00337A  C1DA  F083         	movff	matematica@raggio+2,___flmul@f1+2
  1986  00337E  C1DB  F084         	movff	matematica@raggio+3,___flmul@f1+3
  1987  003382  EC9B  F02A         	call	___flmul	;wreg free
  1988  003386  C081  F094         	movff	?___flmul,___fldiv@f2
  1989  00338A  C082  F095         	movff	?___flmul+1,___fldiv@f2+1
  1990  00338E  C083  F096         	movff	?___flmul+2,___fldiv@f2+2
  1991  003392  C084  F097         	movff	?___flmul+3,___fldiv@f2+3
  1992  003396  EC4D  F02B         	call	___fldiv	;wreg free
  1993  00339A  C090  F1C4         	movff	?___fldiv,_matematica$3675
  1994  00339E  C091  F1C5         	movff	?___fldiv+1,_matematica$3675+1
  1995  0033A2  C092  F1C6         	movff	?___fldiv+2,_matematica$3675+2
  1996  0033A6  C093  F1C7         	movff	?___fldiv+3,_matematica$3675+3
  1997                           
  1998                           ;parcheggio.c: 517: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  1999  0033AA  C1C4  F194         	movff	_matematica$3675,asin@x
  2000  0033AE  C1C5  F195         	movff	_matematica$3675+1,asin@x+1
  2001  0033B2  C1C6  F196         	movff	_matematica$3675+2,asin@x+2
  2002  0033B6  C1C7  F197         	movff	_matematica$3675+3,asin@x+3
  2003  0033BA  EC3E  F020         	call	_asin	;wreg free
  2004  0033BE  C194  F12C         	movff	?_asin,_alfa
  2005  0033C2  C195  F12D         	movff	?_asin+1,_alfa+1
  2006  0033C6  C196  F12E         	movff	?_asin+2,_alfa+2
  2007  0033CA  C197  F12F         	movff	?_asin+3,_alfa+3
  2008                           
  2009                           ;parcheggio.c: 518: alfa = alfa / 3.14159265358979323846 * 180;
  2010  0033CE  0EDB               	movlw	219
  2011  0033D0  0100               	movlb	0	; () banked
  2012  0033D2  6F94               	movwf	___fldiv@f2& (0+255),b
  2013  0033D4  0E0F               	movlw	15
  2014  0033D6  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2015  0033D8  0E49               	movlw	73
  2016  0033DA  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2017  0033DC  0E40               	movlw	64
  2018  0033DE  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2019  0033E0  C12C  F090         	movff	_alfa,___fldiv@f1
  2020  0033E4  C12D  F091         	movff	_alfa+1,___fldiv@f1+1
  2021  0033E8  C12E  F092         	movff	_alfa+2,___fldiv@f1+2
  2022  0033EC  C12F  F093         	movff	_alfa+3,___fldiv@f1+3
  2023  0033F0  EC4D  F02B         	call	___fldiv	;wreg free
  2024  0033F4  C090  F081         	movff	?___fldiv,___flmul@f1
  2025  0033F8  C091  F082         	movff	?___fldiv+1,___flmul@f1+1
  2026  0033FC  C092  F083         	movff	?___fldiv+2,___flmul@f1+2
  2027  003400  C093  F084         	movff	?___fldiv+3,___flmul@f1+3
  2028  003404  0E00               	movlw	0
  2029  003406  0100               	movlb	0	; () banked
  2030  003408  6F85               	movwf	___flmul@f2& (0+255),b
  2031  00340A  0E00               	movlw	0
  2032  00340C  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2033  00340E  0E34               	movlw	52
  2034  003410  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2035  003412  0E43               	movlw	67
  2036  003414  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2037  003416  EC9B  F02A         	call	___flmul	;wreg free
  2038  00341A  C081  F12C         	movff	?___flmul,_alfa
  2039  00341E  C082  F12D         	movff	?___flmul+1,_alfa+1
  2040  003422  C083  F12E         	movff	?___flmul+2,_alfa+2
  2041  003426  C084  F12F         	movff	?___flmul+3,_alfa+3
  2042                           
  2043                           ;parcheggio.c: 519: beta = 90 - alfa;
  2044  00342A  C12C  F0AB         	movff	_alfa,___flneg@f1
  2045  00342E  C12D  F0AC         	movff	_alfa+1,___flneg@f1+1
  2046  003432  C12E  F0AD         	movff	_alfa+2,___flneg@f1+2
  2047  003436  C12F  F0AE         	movff	_alfa+3,___flneg@f1+3
  2048  00343A  ECCE  F031         	call	___flneg	;wreg free
  2049  00343E  C0AB  F09F         	movff	?___flneg,___fladd@f1
  2050  003442  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  2051  003446  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  2052  00344A  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  2053  00344E  0E00               	movlw	0
  2054  003450  0100               	movlb	0	; () banked
  2055  003452  6FA3               	movwf	___fladd@f2& (0+255),b
  2056  003454  0E00               	movlw	0
  2057  003456  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2058  003458  0EB4               	movlw	180
  2059  00345A  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2060  00345C  0E42               	movlw	66
  2061  00345E  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2062  003460  EC5E  F023         	call	___fladd	;wreg free
  2063  003464  C09F  F130         	movff	?___fladd,_beta
  2064  003468  C0A0  F131         	movff	?___fladd+1,_beta+1
  2065  00346C  C0A1  F132         	movff	?___fladd+2,_beta+2
  2066  003470  C0A2  F133         	movff	?___fladd+3,_beta+3
  2067                           
  2068                           ;parcheggio.c: 520: alfa = (alfa * 3.14159265358979323846) / 180;
  2069  003474  0EDB               	movlw	219
  2070  003476  0100               	movlb	0	; () banked
  2071  003478  6F85               	movwf	___flmul@f2& (0+255),b
  2072  00347A  0E0F               	movlw	15
  2073  00347C  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2074  00347E  0E49               	movlw	73
  2075  003480  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2076  003482  0E40               	movlw	64
  2077  003484  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2078  003486  C12C  F081         	movff	_alfa,___flmul@f1
  2079  00348A  C12D  F082         	movff	_alfa+1,___flmul@f1+1
  2080  00348E  C12E  F083         	movff	_alfa+2,___flmul@f1+2
  2081  003492  C12F  F084         	movff	_alfa+3,___flmul@f1+3
  2082  003496  EC9B  F02A         	call	___flmul	;wreg free
  2083  00349A  C081  F090         	movff	?___flmul,___fldiv@f1
  2084  00349E  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  2085  0034A2  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  2086  0034A6  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  2087  0034AA  0E00               	movlw	0
  2088  0034AC  0100               	movlb	0	; () banked
  2089  0034AE  6F94               	movwf	___fldiv@f2& (0+255),b
  2090  0034B0  0E00               	movlw	0
  2091  0034B2  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2092  0034B4  0E34               	movlw	52
  2093  0034B6  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2094  0034B8  0E43               	movlw	67
  2095  0034BA  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2096  0034BC  EC4D  F02B         	call	___fldiv	;wreg free
  2097  0034C0  C090  F12C         	movff	?___fldiv,_alfa
  2098  0034C4  C091  F12D         	movff	?___fldiv+1,_alfa+1
  2099  0034C8  C092  F12E         	movff	?___fldiv+2,_alfa+2
  2100  0034CC  C093  F12F         	movff	?___fldiv+3,_alfa+3
  2101                           
  2102                           ;parcheggio.c: 521: n = cos(alfa);
  2103  0034D0  C12C  F1B0         	movff	_alfa,cos@f
  2104  0034D4  C12D  F1B1         	movff	_alfa+1,cos@f+1
  2105  0034D8  C12E  F1B2         	movff	_alfa+2,cos@f+2
  2106  0034DC  C12F  F1B3         	movff	_alfa+3,cos@f+3
  2107  0034E0  EC96  F02E         	call	_cos	;wreg free
  2108  0034E4  C1B0  F138         	movff	?_cos,_n
  2109  0034E8  C1B1  F139         	movff	?_cos+1,_n+1
  2110  0034EC  C1B2  F13A         	movff	?_cos+2,_n+2
  2111  0034F0  C1B3  F13B         	movff	?_cos+3,_n+3
  2112                           
  2113                           ;parcheggio.c: 522: n = 2 * raggio *n;
  2114  0034F4  C138  F085         	movff	_n,___flmul@f2
  2115  0034F8  C139  F086         	movff	_n+1,___flmul@f2+1
  2116  0034FC  C13A  F087         	movff	_n+2,___flmul@f2+2
  2117  003500  C13B  F088         	movff	_n+3,___flmul@f2+3
  2118  003504  C1D8  F081         	movff	matematica@raggio,___flmul@f1
  2119  003508  C1D9  F082         	movff	matematica@raggio+1,___flmul@f1+1
  2120  00350C  C1DA  F083         	movff	matematica@raggio+2,___flmul@f1+2
  2121  003510  C1DB  F084         	movff	matematica@raggio+3,___flmul@f1+3
  2122  003514  EC9B  F02A         	call	___flmul	;wreg free
  2123  003518  C081  F1D0         	movff	?___flmul,_matematica$3676
  2124  00351C  C082  F1D1         	movff	?___flmul+1,_matematica$3676+1
  2125  003520  C083  F1D2         	movff	?___flmul+2,_matematica$3676+2
  2126  003524  C084  F1D3         	movff	?___flmul+3,_matematica$3676+3
  2127                           
  2128                           ;parcheggio.c: 522: n = 2 * raggio *n;
  2129  003528  C1D0  F081         	movff	_matematica$3676,___flmul@f1
  2130  00352C  C1D1  F082         	movff	_matematica$3676+1,___flmul@f1+1
  2131  003530  C1D2  F083         	movff	_matematica$3676+2,___flmul@f1+2
  2132  003534  C1D3  F084         	movff	_matematica$3676+3,___flmul@f1+3
  2133  003538  0E00               	movlw	0
  2134  00353A  0100               	movlb	0	; () banked
  2135  00353C  6F85               	movwf	___flmul@f2& (0+255),b
  2136  00353E  0E00               	movlw	0
  2137  003540  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2138  003542  0E00               	movlw	0
  2139  003544  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2140  003546  0E40               	movlw	64
  2141  003548  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2142  00354A  EC9B  F02A         	call	___flmul	;wreg free
  2143  00354E  C081  F138         	movff	?___flmul,_n
  2144  003552  C082  F139         	movff	?___flmul+1,_n+1
  2145  003556  C083  F13A         	movff	?___flmul+2,_n+2
  2146  00355A  C084  F13B         	movff	?___flmul+3,_n+3
  2147                           
  2148                           ;parcheggio.c: 523: prima_sterzata = 2 * 3.14159265358979323846 * raggio * (beta / 360);
  2149  00355E  C1D8  F085         	movff	matematica@raggio,___flmul@f2
  2150  003562  C1D9  F086         	movff	matematica@raggio+1,___flmul@f2+1
  2151  003566  C1DA  F087         	movff	matematica@raggio+2,___flmul@f2+2
  2152  00356A  C1DB  F088         	movff	matematica@raggio+3,___flmul@f2+3
  2153  00356E  0E00               	movlw	0
  2154  003570  0100               	movlb	0	; () banked
  2155  003572  6F94               	movwf	___fldiv@f2& (0+255),b
  2156  003574  0E00               	movlw	0
  2157  003576  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2158  003578  0EB4               	movlw	180
  2159  00357A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2160  00357C  0E43               	movlw	67
  2161  00357E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2162  003580  C130  F090         	movff	_beta,___fldiv@f1
  2163  003584  C131  F091         	movff	_beta+1,___fldiv@f1+1
  2164  003588  C132  F092         	movff	_beta+2,___fldiv@f1+2
  2165  00358C  C133  F093         	movff	_beta+3,___fldiv@f1+3
  2166  003590  EC4D  F02B         	call	___fldiv	;wreg free
  2167  003594  C090  F081         	movff	?___fldiv,___flmul@f1
  2168  003598  C091  F082         	movff	?___fldiv+1,___flmul@f1+1
  2169  00359C  C092  F083         	movff	?___fldiv+2,___flmul@f1+2
  2170  0035A0  C093  F084         	movff	?___fldiv+3,___flmul@f1+3
  2171  0035A4  EC9B  F02A         	call	___flmul	;wreg free
  2172  0035A8  C081  F1D0         	movff	?___flmul,_matematica$3676
  2173  0035AC  C082  F1D1         	movff	?___flmul+1,_matematica$3676+1
  2174  0035B0  C083  F1D2         	movff	?___flmul+2,_matematica$3676+2
  2175  0035B4  C084  F1D3         	movff	?___flmul+3,_matematica$3676+3
  2176                           
  2177                           ;parcheggio.c: 523: prima_sterzata = 2 * 3.14159265358979323846 * raggio * (beta / 360);
  2178  0035B8  C1D0  F081         	movff	_matematica$3676,___flmul@f1
  2179  0035BC  C1D1  F082         	movff	_matematica$3676+1,___flmul@f1+1
  2180  0035C0  C1D2  F083         	movff	_matematica$3676+2,___flmul@f1+2
  2181  0035C4  C1D3  F084         	movff	_matematica$3676+3,___flmul@f1+3
  2182  0035C8  0EDB               	movlw	219
  2183  0035CA  0100               	movlb	0	; () banked
  2184  0035CC  6F85               	movwf	___flmul@f2& (0+255),b
  2185  0035CE  0E0F               	movlw	15
  2186  0035D0  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2187  0035D2  0EC9               	movlw	201
  2188  0035D4  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2189  0035D6  0E40               	movlw	64
  2190  0035D8  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2191  0035DA  EC9B  F02A         	call	___flmul	;wreg free
  2192  0035DE  C081  F13C         	movff	?___flmul,_prima_sterzata
  2193  0035E2  C082  F13D         	movff	?___flmul+1,_prima_sterzata+1
  2194  0035E6  C083  F13E         	movff	?___flmul+2,_prima_sterzata+2
  2195  0035EA  C084  F13F         	movff	?___flmul+3,_prima_sterzata+3
  2196                           
  2197                           ;parcheggio.c: 524: K_var = raggio + (2 * larghezza / 3);
  2198  0035EE  0E00               	movlw	0
  2199  0035F0  0100               	movlb	0	; () banked
  2200  0035F2  6F94               	movwf	___fldiv@f2& (0+255),b
  2201  0035F4  0E00               	movlw	0
  2202  0035F6  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2203  0035F8  0E40               	movlw	64
  2204  0035FA  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2205  0035FC  0E40               	movlw	64
  2206  0035FE  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2207  003600  0E00               	movlw	0
  2208  003602  0100               	movlb	0	; () banked
  2209  003604  6F85               	movwf	___flmul@f2& (0+255),b
  2210  003606  0E00               	movlw	0
  2211  003608  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2212  00360A  0E00               	movlw	0
  2213  00360C  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2214  00360E  0E40               	movlw	64
  2215  003610  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2216  003612  C1D4  F081         	movff	matematica@larghezza,___flmul@f1
  2217  003616  C1D5  F082         	movff	matematica@larghezza+1,___flmul@f1+1
  2218  00361A  C1D6  F083         	movff	matematica@larghezza+2,___flmul@f1+2
  2219  00361E  C1D7  F084         	movff	matematica@larghezza+3,___flmul@f1+3
  2220  003622  EC9B  F02A         	call	___flmul	;wreg free
  2221  003626  C081  F090         	movff	?___flmul,___fldiv@f1
  2222  00362A  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  2223  00362E  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  2224  003632  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  2225  003636  EC4D  F02B         	call	___fldiv	;wreg free
  2226  00363A  C090  F09F         	movff	?___fldiv,___fladd@f1
  2227  00363E  C091  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  2228  003642  C092  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  2229  003646  C093  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  2230  00364A  C1D8  F0A3         	movff	matematica@raggio,___fladd@f2
  2231  00364E  C1D9  F0A4         	movff	matematica@raggio+1,___fladd@f2+1
  2232  003652  C1DA  F0A5         	movff	matematica@raggio+2,___fladd@f2+2
  2233  003656  C1DB  F0A6         	movff	matematica@raggio+3,___fladd@f2+3
  2234  00365A  EC5E  F023         	call	___fladd	;wreg free
  2235  00365E  C09F  F124         	movff	?___fladd,_K_var
  2236  003662  C0A0  F125         	movff	?___fladd+1,_K_var+1
  2237  003666  C0A1  F126         	movff	?___fladd+2,_K_var+2
  2238  00366A  C0A2  F127         	movff	?___fladd+3,_K_var+3
  2239                           
  2240                           ;parcheggio.c: 525: J_var = raggio - (2 * larghezza / 3);
  2241  00366E  0E00               	movlw	0
  2242  003670  0100               	movlb	0	; () banked
  2243  003672  6F94               	movwf	___fldiv@f2& (0+255),b
  2244  003674  0E00               	movlw	0
  2245  003676  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2246  003678  0E40               	movlw	64
  2247  00367A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2248  00367C  0E40               	movlw	64
  2249  00367E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2250  003680  0E00               	movlw	0
  2251  003682  0100               	movlb	0	; () banked
  2252  003684  6F85               	movwf	___flmul@f2& (0+255),b
  2253  003686  0E00               	movlw	0
  2254  003688  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2255  00368A  0E00               	movlw	0
  2256  00368C  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2257  00368E  0E40               	movlw	64
  2258  003690  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2259  003692  C1D4  F081         	movff	matematica@larghezza,___flmul@f1
  2260  003696  C1D5  F082         	movff	matematica@larghezza+1,___flmul@f1+1
  2261  00369A  C1D6  F083         	movff	matematica@larghezza+2,___flmul@f1+2
  2262  00369E  C1D7  F084         	movff	matematica@larghezza+3,___flmul@f1+3
  2263  0036A2  EC9B  F02A         	call	___flmul	;wreg free
  2264  0036A6  C081  F090         	movff	?___flmul,___fldiv@f1
  2265  0036AA  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  2266  0036AE  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  2267  0036B2  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  2268  0036B6  EC4D  F02B         	call	___fldiv	;wreg free
  2269  0036BA  C090  F0AB         	movff	?___fldiv,___flneg@f1
  2270  0036BE  C091  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  2271  0036C2  C092  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  2272  0036C6  C093  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  2273  0036CA  ECCE  F031         	call	___flneg	;wreg free
  2274  0036CE  C0AB  F09F         	movff	?___flneg,___fladd@f1
  2275  0036D2  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  2276  0036D6  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  2277  0036DA  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  2278  0036DE  C1D8  F0A3         	movff	matematica@raggio,___fladd@f2
  2279  0036E2  C1D9  F0A4         	movff	matematica@raggio+1,___fladd@f2+1
  2280  0036E6  C1DA  F0A5         	movff	matematica@raggio+2,___fladd@f2+2
  2281  0036EA  C1DB  F0A6         	movff	matematica@raggio+3,___fladd@f2+3
  2282  0036EE  EC5E  F023         	call	___fladd	;wreg free
  2283  0036F2  C09F  F120         	movff	?___fladd,_J_var
  2284  0036F6  C0A0  F121         	movff	?___fladd+1,_J_var+1
  2285  0036FA  C0A1  F122         	movff	?___fladd+2,_J_var+2
  2286  0036FE  C0A2  F123         	movff	?___fladd+3,_J_var+3
  2287                           
  2288                           ;parcheggio.c: 526: Pmin = K_var * cos(asin((J_var / K_var)));
  2289  003702  C124  F094         	movff	_K_var,___fldiv@f2
  2290  003706  C125  F095         	movff	_K_var+1,___fldiv@f2+1
  2291  00370A  C126  F096         	movff	_K_var+2,___fldiv@f2+2
  2292  00370E  C127  F097         	movff	_K_var+3,___fldiv@f2+3
  2293  003712  C120  F090         	movff	_J_var,___fldiv@f1
  2294  003716  C121  F091         	movff	_J_var+1,___fldiv@f1+1
  2295  00371A  C122  F092         	movff	_J_var+2,___fldiv@f1+2
  2296  00371E  C123  F093         	movff	_J_var+3,___fldiv@f1+3
  2297  003722  EC4D  F02B         	call	___fldiv	;wreg free
  2298  003726  C090  F1C8         	movff	?___fldiv,_matematica$3677
  2299  00372A  C091  F1C9         	movff	?___fldiv+1,_matematica$3677+1
  2300  00372E  C092  F1CA         	movff	?___fldiv+2,_matematica$3677+2
  2301  003732  C093  F1CB         	movff	?___fldiv+3,_matematica$3677+3
  2302                           
  2303                           ;parcheggio.c: 526: Pmin = K_var * cos(asin((J_var / K_var)));
  2304  003736  C1C8  F194         	movff	_matematica$3677,asin@x
  2305  00373A  C1C9  F195         	movff	_matematica$3677+1,asin@x+1
  2306  00373E  C1CA  F196         	movff	_matematica$3677+2,asin@x+2
  2307  003742  C1CB  F197         	movff	_matematica$3677+3,asin@x+3
  2308  003746  EC3E  F020         	call	_asin	;wreg free
  2309  00374A  C194  F1B0         	movff	?_asin,cos@f
  2310  00374E  C195  F1B1         	movff	?_asin+1,cos@f+1
  2311  003752  C196  F1B2         	movff	?_asin+2,cos@f+2
  2312  003756  C197  F1B3         	movff	?_asin+3,cos@f+3
  2313  00375A  EC96  F02E         	call	_cos	;wreg free
  2314  00375E  C1B0  F1CC         	movff	?_cos,_matematica$3678
  2315  003762  C1B1  F1CD         	movff	?_cos+1,_matematica$3678+1
  2316  003766  C1B2  F1CE         	movff	?_cos+2,_matematica$3678+2
  2317  00376A  C1B3  F1CF         	movff	?_cos+3,_matematica$3678+3
  2318                           
  2319                           ;parcheggio.c: 526: Pmin = K_var * cos(asin((J_var / K_var)));
  2320  00376E  C1CC  F081         	movff	_matematica$3678,___flmul@f1
  2321  003772  C1CD  F082         	movff	_matematica$3678+1,___flmul@f1+1
  2322  003776  C1CE  F083         	movff	_matematica$3678+2,___flmul@f1+2
  2323  00377A  C1CF  F084         	movff	_matematica$3678+3,___flmul@f1+3
  2324  00377E  C124  F085         	movff	_K_var,___flmul@f2
  2325  003782  C125  F086         	movff	_K_var+1,___flmul@f2+1
  2326  003786  C126  F087         	movff	_K_var+2,___flmul@f2+2
  2327  00378A  C127  F088         	movff	_K_var+3,___flmul@f2+3
  2328  00378E  EC9B  F02A         	call	___flmul	;wreg free
  2329  003792  C081  F128         	movff	?___flmul,_Pmin
  2330  003796  C082  F129         	movff	?___flmul+1,_Pmin+1
  2331  00379A  C083  F12A         	movff	?___flmul+2,_Pmin+2
  2332  00379E  C084  F12B         	movff	?___flmul+3,_Pmin+3
  2333  0037A2  0012               	return		;funcret
  2334  0037A4                     __end_of_matematica:
  2335                           	opt stack 0
  2336                           tblptru	equ	0xFF8
  2337                           tblptrh	equ	0xFF7
  2338                           tblptrl	equ	0xFF6
  2339                           tablat	equ	0xFF5
  2340                           postinc0	equ	0xFEE
  2341                           wreg	equ	0xFE8
  2342                           postinc2	equ	0xFDE
  2343                           postdec2	equ	0xFDD
  2344                           status	equ	0xFD8
  2345                           
  2346 ;; *************** function _park_routine *****************
  2347 ;; Defined at:
  2348 ;;		line 315 in file "parcheggio.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  raggio          4   89[BANK1 ] const float 
  2353 ;;  larghezza       4   85[BANK1 ] const float 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;		None               void
  2356 ;; Registers used:
  2357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2364 ;;      Locals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  2365 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2366 ;;      Totals:         0       0      40       0       0       0       0       0       0       0       0       0       
      +0       0
  2367 ;;Total ram usage:       40 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:   11
  2370 ;; This function calls:
  2371 ;;		_CANisTxReady
  2372 ;;		_CANsendMessage
  2373 ;;		___fladd
  2374 ;;		___fldiv
  2375 ;;		___flmul
  2376 ;;		___flneg
  2377 ;;		___fltol
  2378 ;;		___lwtofl
  2379 ;;		_asin
  2380 ;;		_can_send
  2381 ;;		_cos
  2382 ;;		_delay_ms
  2383 ;;		_delay_s
  2384 ;;		_parallelo
  2385 ;; This function is called by:
  2386 ;;		_main
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text3
  2391  000D52                     __ptext3:
  2392                           	opt stack 0
  2393  000D52                     _park_routine:
  2394                           	opt stack 19
  2395                           
  2396                           ;parcheggio.c: 316: avvicinamento = 0;
  2397                           
  2398                           ;incstack = 0
  2399  000D52  9656               	bcf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  2400                           
  2401                           ;parcheggio.c: 317: data_correction[0] = 0;
  2402  000D54  0E00               	movlw	0
  2403  000D56  0101               	movlb	1	; () banked
  2404  000D58  6F5B               	movwf	_data_correction& (0+255),b	;volatile
  2405                           
  2406                           ; BSR set to: 1
  2407                           ;parcheggio.c: 319: parallelo();
  2408  000D5A  ECBF  F025         	call	_parallelo	;wreg free
  2409                           
  2410                           ;parcheggio.c: 321: while ((asd == 1)&&(PORTBbits.RB5 == 1) && (activation == 1)) {
  2411  000D5E  D02F               	goto	l6981
  2412  000D60                     l6967:
  2413                           
  2414                           ;parcheggio.c: 322: delay_ms(50);
  2415  000D60  0E00               	movlw	0
  2416  000D62  0100               	movlb	0	; () banked
  2417  000D64  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  2418  000D66  0E32               	movlw	50
  2419  000D68  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  2420  000D6A  ECEC  F031         	call	_delay_ms	;wreg free
  2421                           
  2422                           ;parcheggio.c: 323: PORTBbits.RB6 = ~PORTBbits.RB6;
  2423  000D6E  7C81               	btg	3969,6,c	;volatile
  2424                           
  2425                           ;parcheggio.c: 324: parallelo();
  2426  000D70  ECBF  F025         	call	_parallelo	;wreg free
  2427                           
  2428                           ;parcheggio.c: 325: if (data_correction[0] > 30) {
  2429  000D74  0E1E               	movlw	30
  2430  000D76  0101               	movlb	1	; () banked
  2431  000D78  655B               	cpfsgt	_data_correction& (0+255),b	;volatile
  2432  000D7A  D004               	goto	l6977
  2433                           
  2434                           ; BSR set to: 1
  2435                           ;parcheggio.c: 326: data_correction[0] = 0;
  2436  000D7C  0E00               	movlw	0
  2437  000D7E  0101               	movlb	1	; () banked
  2438  000D80  6F5B               	movwf	_data_correction& (0+255),b	;volatile
  2439                           
  2440                           ; BSR set to: 1
  2441                           
  2442                           ; BSR set to: 1
  2443                           ;parcheggio.c: 327: }
  2444                           ;parcheggio.c: 328: while (!CANisTxReady());
  2445  000D82  D000               	goto	l6977
  2446  000D84                     l6977:
  2447  000D84  EC9B  F032         	call	_CANisTxReady	;wreg free
  2448  000D88  0900               	iorlw	0
  2449  000D8A  B4D8               	btfsc	status,2,c
  2450  000D8C  D7FB               	goto	l6977
  2451                           
  2452                           ;parcheggio.c: 329: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2453  000D8E  0E10               	movlw	16
  2454  000D90  0100               	movlb	0	; () banked
  2455  000D92  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2456  000D94  0E00               	movlw	0
  2457  000D96  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2458  000D98  0E00               	movlw	0
  2459  000D9A  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2460  000D9C  0E00               	movlw	0
  2461  000D9E  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2462  000DA0  0E5B               	movlw	low _data_correction
  2463  000DA2  0100               	movlb	0	; () banked
  2464  000DA4  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2465  000DA6  0E01               	movlw	high _data_correction
  2466  000DA8  0100               	movlb	0	; () banked
  2467  000DAA  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2468  000DAC  0E08               	movlw	8
  2469  000DAE  0100               	movlb	0	; () banked
  2470  000DB0  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2471  000DB2  0EBC               	movlw	188
  2472  000DB4  0100               	movlb	0	; () banked
  2473  000DB6  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2474  000DB8  ECD9  F011         	call	_CANsendMessage	;wreg free
  2475  000DBC  D000               	goto	l6981
  2476  000DBE                     l6981:
  2477  000DBE  B456               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2478  000DC0  AA81               	btfss	3969,5,c	;volatile
  2479  000DC2  D002               	goto	l773
  2480  000DC4  B256               	btfsc	_activation/(0+8),_activation& (0+7),c	;volatile
  2481  000DC6  D7CC               	goto	l6967
  2482  000DC8                     l773:
  2483                           
  2484                           ;parcheggio.c: 330: }
  2485                           ;parcheggio.c: 332: if ((PORTBbits.RB5 == 1) && (activation == 1)) {
  2486  000DC8  BA81               	btfsc	3969,5,c	;volatile
  2487  000DCA  A256               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2488  000DCC  D02E               	goto	l7001
  2489                           
  2490                           ;parcheggio.c: 333: PORTBbits.RB6 = 0;
  2491  000DCE  9C81               	bcf	3969,6,c	;volatile
  2492                           
  2493                           ;parcheggio.c: 334: data[0] = 2;
  2494  000DD0  0E02               	movlw	2
  2495  000DD2  0101               	movlb	1	; () banked
  2496  000DD4  6F53               	movwf	_data& (0+255),b	;volatile
  2497                           
  2498                           ; BSR set to: 1
  2499                           ;parcheggio.c: 335: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  2500  000DD6  0E0D               	movlw	13
  2501  000DD8  0100               	movlb	0	; () banked
  2502  000DDA  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2503  000DDC  0E00               	movlw	0
  2504  000DDE  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2505  000DE0  0E00               	movlw	0
  2506  000DE2  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2507  000DE4  0E00               	movlw	0
  2508  000DE6  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2509  000DE8  0E53               	movlw	low _data
  2510  000DEA  0100               	movlb	0	; () banked
  2511  000DEC  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2512  000DEE  0E01               	movlw	high _data
  2513  000DF0  0100               	movlb	0	; () banked
  2514  000DF2  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2515  000DF4  0E01               	movlw	1
  2516  000DF6  0100               	movlb	0	; () banked
  2517  000DF8  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2518  000DFA  0EBC               	movlw	188
  2519  000DFC  0100               	movlb	0	; () banked
  2520  000DFE  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2521  000E00  ECD9  F011         	call	_CANsendMessage	;wreg free
  2522                           
  2523                           ;parcheggio.c: 336: }
  2524                           ;parcheggio.c: 338: while ((start_operation != 1)&&(activation == 1)) {
  2525  000E04  D012               	goto	l7001
  2526  000E06                     l776:
  2527                           
  2528                           ;parcheggio.c: 339: if (first == 0) {
  2529  000E06  B257               	btfsc	_first/(0+8),_first& (0+7),c	;volatile
  2530  000E08  D010               	goto	l7001
  2531                           
  2532                           ;parcheggio.c: 340: set_speed = 0;
  2533  000E0A  0E00               	movlw	0
  2534  000E0C  0100               	movlb	0	; () banked
  2535  000E0E  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2536  000E10  0E00               	movlw	0
  2537  000E12  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2538                           
  2539                           ;parcheggio.c: 341: data_steering[0] = 90;
  2540  000E14  0E5A               	movlw	90
  2541  000E16  0101               	movlb	1	; () banked
  2542  000E18  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  2543                           
  2544                           ;parcheggio.c: 342: data_brake [0] = 0;
  2545  000E1A  0E00               	movlw	0
  2546  000E1C  6E26               	movwf	_data_brake,c	;volatile
  2547                           
  2548                           ;parcheggio.c: 343: data_brake [1] = 1;
  2549  000E1E  0E01               	movlw	1
  2550  000E20  6E27               	movwf	_data_brake+1,c	;volatile
  2551                           
  2552                           ; BSR set to: 1
  2553                           ;parcheggio.c: 344: can_send();
  2554  000E22  EC93  F02D         	call	_can_send	;wreg free
  2555                           
  2556                           ;parcheggio.c: 345: first = 1;
  2557  000E26  8257               	bsf	_first/(0+8),_first& (0+7),c	;volatile
  2558  000E28  D000               	goto	l7001
  2559  000E2A                     l7001:
  2560  000E2A  AC57               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  2561  000E2C  A256               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2562  000E2E  EF3A  F00C         	goto	l7163
  2563  000E32  D7E9               	goto	l776
  2564                           
  2565                           ;parcheggio.c: 346: }
  2566                           ;parcheggio.c: 347: }
  2567                           ;parcheggio.c: 349: while ((PORTBbits.RB5 == 1) && (activation == 1)&&(start_operation =
      +                          = 1)) {
  2568  000E34  EF3A  F00C         	goto	l7163
  2569  000E38                     l782:
  2570                           
  2571                           ;parcheggio.c: 350: LATBbits.LATB4 = 1;
  2572  000E38  888A               	bsf	3978,4,c	;volatile
  2573                           
  2574                           ;parcheggio.c: 352: bordo = ((sensor_distance[1] + sensor_distance[0]) / 2);
  2575  000E3A  5001               	movf	_sensor_distance,w,c	;volatile
  2576  000E3C  2403               	addwf	_sensor_distance+2,w,c	;volatile
  2577  000E3E  0101               	movlb	1	; () banked
  2578  000E40  6FB8               	movwf	??_park_routine& (0+255),b
  2579  000E42  5002               	movf	_sensor_distance+1,w,c	;volatile
  2580  000E44  2004               	addwfc	_sensor_distance+3,w,c	;volatile
  2581  000E46  0101               	movlb	1	; () banked
  2582  000E48  6FB9               	movwf	(??_park_routine+1)& (0+255),b
  2583  000E4A  90D8               	bcf	status,0,c
  2584  000E4C  0101               	movlb	1	; () banked
  2585  000E4E  31B9               	rrcf	(??_park_routine+1)& (0+255),w,b
  2586  000E50  0101               	movlb	1	; () banked
  2587  000E52  6FBA               	movwf	(??_park_routine+2)& (0+255),b
  2588  000E54  0101               	movlb	1	; () banked
  2589  000E56  31B8               	rrcf	??_park_routine& (0+255),w,b
  2590  000E58  0100               	movlb	0	; () banked
  2591  000E5A  6F81               	movwf	___lwtofl@c& (0+255),b
  2592  000E5C  C1BA  F082         	movff	??_park_routine+2,___lwtofl@c+1
  2593  000E60  EC41  F032         	call	___lwtofl	;wreg free
  2594  000E64  C081  F134         	movff	?___lwtofl,_bordo
  2595  000E68  C082  F135         	movff	?___lwtofl+1,_bordo+1
  2596  000E6C  C083  F136         	movff	?___lwtofl+2,_bordo+2
  2597  000E70  C084  F137         	movff	?___lwtofl+3,_bordo+3
  2598                           
  2599                           ;parcheggio.c: 353: delay_ms(100);
  2600  000E74  0E00               	movlw	0
  2601  000E76  0100               	movlb	0	; () banked
  2602  000E78  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  2603  000E7A  0E64               	movlw	100
  2604  000E7C  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  2605  000E7E  ECEC  F031         	call	_delay_ms	;wreg free
  2606                           
  2607                           ;parcheggio.c: 354: bordo = bordo + ((sensor_distance[1] + sensor_distance[0]) / 2);
  2608  000E82  5001               	movf	_sensor_distance,w,c	;volatile
  2609  000E84  2403               	addwf	_sensor_distance+2,w,c	;volatile
  2610  000E86  0101               	movlb	1	; () banked
  2611  000E88  6FB8               	movwf	??_park_routine& (0+255),b
  2612  000E8A  5002               	movf	_sensor_distance+1,w,c	;volatile
  2613  000E8C  2004               	addwfc	_sensor_distance+3,w,c	;volatile
  2614  000E8E  0101               	movlb	1	; () banked
  2615  000E90  6FB9               	movwf	(??_park_routine+1)& (0+255),b
  2616  000E92  90D8               	bcf	status,0,c
  2617  000E94  0101               	movlb	1	; () banked
  2618  000E96  31B9               	rrcf	(??_park_routine+1)& (0+255),w,b
  2619  000E98  0101               	movlb	1	; () banked
  2620  000E9A  6FBA               	movwf	(??_park_routine+2)& (0+255),b
  2621  000E9C  0101               	movlb	1	; () banked
  2622  000E9E  31B8               	rrcf	??_park_routine& (0+255),w,b
  2623  000EA0  0100               	movlb	0	; () banked
  2624  000EA2  6F81               	movwf	___lwtofl@c& (0+255),b
  2625  000EA4  C1BA  F082         	movff	??_park_routine+2,___lwtofl@c+1
  2626  000EA8  EC41  F032         	call	___lwtofl	;wreg free
  2627  000EAC  C081  F09F         	movff	?___lwtofl,___fladd@f1
  2628  000EB0  C082  F0A0         	movff	?___lwtofl+1,___fladd@f1+1
  2629  000EB4  C083  F0A1         	movff	?___lwtofl+2,___fladd@f1+2
  2630  000EB8  C084  F0A2         	movff	?___lwtofl+3,___fladd@f1+3
  2631  000EBC  C134  F0A3         	movff	_bordo,___fladd@f2
  2632  000EC0  C135  F0A4         	movff	_bordo+1,___fladd@f2+1
  2633  000EC4  C136  F0A5         	movff	_bordo+2,___fladd@f2+2
  2634  000EC8  C137  F0A6         	movff	_bordo+3,___fladd@f2+3
  2635  000ECC  EC5E  F023         	call	___fladd	;wreg free
  2636  000ED0  C09F  F134         	movff	?___fladd,_bordo
  2637  000ED4  C0A0  F135         	movff	?___fladd+1,_bordo+1
  2638  000ED8  C0A1  F136         	movff	?___fladd+2,_bordo+2
  2639  000EDC  C0A2  F137         	movff	?___fladd+3,_bordo+3
  2640                           
  2641                           ;parcheggio.c: 355: bordo = bordo / 2;
  2642  000EE0  C134  F090         	movff	_bordo,___fldiv@f1
  2643  000EE4  C135  F091         	movff	_bordo+1,___fldiv@f1+1
  2644  000EE8  C136  F092         	movff	_bordo+2,___fldiv@f1+2
  2645  000EEC  C137  F093         	movff	_bordo+3,___fldiv@f1+3
  2646  000EF0  0E00               	movlw	0
  2647  000EF2  0100               	movlb	0	; () banked
  2648  000EF4  6F94               	movwf	___fldiv@f2& (0+255),b
  2649  000EF6  0E00               	movlw	0
  2650  000EF8  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2651  000EFA  0E00               	movlw	0
  2652  000EFC  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2653  000EFE  0E40               	movlw	64
  2654  000F00  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2655  000F02  EC4D  F02B         	call	___fldiv	;wreg free
  2656  000F06  C090  F134         	movff	?___fldiv,_bordo
  2657  000F0A  C091  F135         	movff	?___fldiv+1,_bordo+1
  2658  000F0E  C092  F136         	movff	?___fldiv+2,_bordo+2
  2659  000F12  C093  F137         	movff	?___fldiv+3,_bordo+3
  2660                           
  2661                           ;parcheggio.c: 356: const float raggio = 56;
  2662  000F16  0E00               	movlw	0
  2663  000F18  0101               	movlb	1	; () banked
  2664  000F1A  6FDC               	movwf	park_routine@raggio& (0+255),b
  2665  000F1C  0E00               	movlw	0
  2666  000F1E  6FDD               	movwf	(park_routine@raggio+1)& (0+255),b
  2667  000F20  0E60               	movlw	96
  2668  000F22  6FDE               	movwf	(park_routine@raggio+2)& (0+255),b
  2669  000F24  0E42               	movlw	66
  2670  000F26  6FDF               	movwf	(park_routine@raggio+3)& (0+255),b
  2671                           
  2672                           ; BSR set to: 1
  2673                           ;parcheggio.c: 357: const float larghezza = 33;
  2674  000F28  0E00               	movlw	0
  2675  000F2A  0101               	movlb	1	; () banked
  2676  000F2C  6FD8               	movwf	park_routine@larghezza& (0+255),b
  2677  000F2E  0E00               	movlw	0
  2678  000F30  6FD9               	movwf	(park_routine@larghezza+1)& (0+255),b
  2679  000F32  0E04               	movlw	4
  2680  000F34  6FDA               	movwf	(park_routine@larghezza+2)& (0+255),b
  2681  000F36  0E42               	movlw	66
  2682  000F38  6FDB               	movwf	(park_routine@larghezza+3)& (0+255),b
  2683                           
  2684                           ; BSR set to: 1
  2685                           ;parcheggio.c: 358: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2686  000F3A  C134  F0A3         	movff	_bordo,___fladd@f2
  2687  000F3E  C135  F0A4         	movff	_bordo+1,___fladd@f2+1
  2688  000F42  C136  F0A5         	movff	_bordo+2,___fladd@f2+2
  2689  000F46  C137  F0A6         	movff	_bordo+3,___fladd@f2+3
  2690  000F4A  0E00               	movlw	0
  2691  000F4C  0100               	movlb	0	; () banked
  2692  000F4E  6F94               	movwf	___fldiv@f2& (0+255),b
  2693  000F50  0E00               	movlw	0
  2694  000F52  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2695  000F54  0E00               	movlw	0
  2696  000F56  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2697  000F58  0E40               	movlw	64
  2698  000F5A  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2699  000F5C  C1D8  F090         	movff	park_routine@larghezza,___fldiv@f1
  2700  000F60  C1D9  F091         	movff	park_routine@larghezza+1,___fldiv@f1+1
  2701  000F64  C1DA  F092         	movff	park_routine@larghezza+2,___fldiv@f1+2
  2702  000F68  C1DB  F093         	movff	park_routine@larghezza+3,___fldiv@f1+3
  2703  000F6C  EC4D  F02B         	call	___fldiv	;wreg free
  2704  000F70  C090  F09F         	movff	?___fldiv,___fladd@f1
  2705  000F74  C091  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  2706  000F78  C092  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  2707  000F7C  C093  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  2708  000F80  EC5E  F023         	call	___fladd	;wreg free
  2709  000F84  C09F  F0AB         	movff	?___fladd,___flneg@f1
  2710  000F88  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  2711  000F8C  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  2712  000F90  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  2713  000F94  ECCE  F031         	call	___flneg	;wreg free
  2714  000F98  C0AB  F1CC         	movff	?___flneg,_park_routine$3665
  2715  000F9C  C0AC  F1CD         	movff	?___flneg+1,_park_routine$3665+1
  2716  000FA0  C0AD  F1CE         	movff	?___flneg+2,_park_routine$3665+2
  2717  000FA4  C0AE  F1CF         	movff	?___flneg+3,_park_routine$3665+3
  2718                           
  2719                           ;parcheggio.c: 358: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2720  000FA8  C1CC  F0A3         	movff	_park_routine$3665,___fladd@f2
  2721  000FAC  C1CD  F0A4         	movff	_park_routine$3665+1,___fladd@f2+1
  2722  000FB0  C1CE  F0A5         	movff	_park_routine$3665+2,___fladd@f2+2
  2723  000FB4  C1CF  F0A6         	movff	_park_routine$3665+3,___fladd@f2+3
  2724  000FB8  0E00               	movlw	0
  2725  000FBA  0100               	movlb	0	; () banked
  2726  000FBC  6F85               	movwf	___flmul@f2& (0+255),b
  2727  000FBE  0E00               	movlw	0
  2728  000FC0  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2729  000FC2  0E00               	movlw	0
  2730  000FC4  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2731  000FC6  0E40               	movlw	64
  2732  000FC8  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2733  000FCA  C1DC  F081         	movff	park_routine@raggio,___flmul@f1
  2734  000FCE  C1DD  F082         	movff	park_routine@raggio+1,___flmul@f1+1
  2735  000FD2  C1DE  F083         	movff	park_routine@raggio+2,___flmul@f1+2
  2736  000FD6  C1DF  F084         	movff	park_routine@raggio+3,___flmul@f1+3
  2737  000FDA  EC9B  F02A         	call	___flmul	;wreg free
  2738  000FDE  C081  F09F         	movff	?___flmul,___fladd@f1
  2739  000FE2  C082  F0A0         	movff	?___flmul+1,___fladd@f1+1
  2740  000FE6  C083  F0A1         	movff	?___flmul+2,___fladd@f1+2
  2741  000FEA  C084  F0A2         	movff	?___flmul+3,___fladd@f1+3
  2742  000FEE  EC5E  F023         	call	___fladd	;wreg free
  2743  000FF2  C09F  F1D0         	movff	?___fladd,_park_routine$3666
  2744  000FF6  C0A0  F1D1         	movff	?___fladd+1,_park_routine$3666+1
  2745  000FFA  C0A1  F1D2         	movff	?___fladd+2,_park_routine$3666+2
  2746  000FFE  C0A2  F1D3         	movff	?___fladd+3,_park_routine$3666+3
  2747                           
  2748                           ;parcheggio.c: 358: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2749  001002  0E00               	movlw	0
  2750  001004  0100               	movlb	0	; () banked
  2751  001006  6F94               	movwf	___fldiv@f2& (0+255),b
  2752  001008  0E00               	movlw	0
  2753  00100A  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2754  00100C  0E00               	movlw	0
  2755  00100E  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2756  001010  0E40               	movlw	64
  2757  001012  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2758  001014  C1D8  F090         	movff	park_routine@larghezza,___fldiv@f1
  2759  001018  C1D9  F091         	movff	park_routine@larghezza+1,___fldiv@f1+1
  2760  00101C  C1DA  F092         	movff	park_routine@larghezza+2,___fldiv@f1+2
  2761  001020  C1DB  F093         	movff	park_routine@larghezza+3,___fldiv@f1+3
  2762  001024  EC4D  F02B         	call	___fldiv	;wreg free
  2763  001028  C090  F0AB         	movff	?___fldiv,___flneg@f1
  2764  00102C  C091  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  2765  001030  C092  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  2766  001034  C093  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  2767  001038  ECCE  F031         	call	___flneg	;wreg free
  2768  00103C  C0AB  F0A3         	movff	?___flneg,___fladd@f2
  2769  001040  C0AC  F0A4         	movff	?___flneg+1,___fladd@f2+1
  2770  001044  C0AD  F0A5         	movff	?___flneg+2,___fladd@f2+2
  2771  001048  C0AE  F0A6         	movff	?___flneg+3,___fladd@f2+3
  2772  00104C  C1D0  F09F         	movff	_park_routine$3666,___fladd@f1
  2773  001050  C1D1  F0A0         	movff	_park_routine$3666+1,___fladd@f1+1
  2774  001054  C1D2  F0A1         	movff	_park_routine$3666+2,___fladd@f1+2
  2775  001058  C1D3  F0A2         	movff	_park_routine$3666+3,___fladd@f1+3
  2776  00105C  EC5E  F023         	call	___fladd	;wreg free
  2777  001060  C09F  F1BC         	movff	?___fladd,_park_routine$3667
  2778  001064  C0A0  F1BD         	movff	?___fladd+1,_park_routine$3667+1
  2779  001068  C0A1  F1BE         	movff	?___fladd+2,_park_routine$3667+2
  2780  00106C  C0A2  F1BF         	movff	?___fladd+3,_park_routine$3667+3
  2781                           
  2782                           ;parcheggio.c: 358: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2783  001070  C1BC  F090         	movff	_park_routine$3667,___fldiv@f1
  2784  001074  C1BD  F091         	movff	_park_routine$3667+1,___fldiv@f1+1
  2785  001078  C1BE  F092         	movff	_park_routine$3667+2,___fldiv@f1+2
  2786  00107C  C1BF  F093         	movff	_park_routine$3667+3,___fldiv@f1+3
  2787  001080  0E00               	movlw	0
  2788  001082  0100               	movlb	0	; () banked
  2789  001084  6F85               	movwf	___flmul@f2& (0+255),b
  2790  001086  0E00               	movlw	0
  2791  001088  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2792  00108A  0E00               	movlw	0
  2793  00108C  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2794  00108E  0E40               	movlw	64
  2795  001090  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2796  001092  C1DC  F081         	movff	park_routine@raggio,___flmul@f1
  2797  001096  C1DD  F082         	movff	park_routine@raggio+1,___flmul@f1+1
  2798  00109A  C1DE  F083         	movff	park_routine@raggio+2,___flmul@f1+2
  2799  00109E  C1DF  F084         	movff	park_routine@raggio+3,___flmul@f1+3
  2800  0010A2  EC9B  F02A         	call	___flmul	;wreg free
  2801  0010A6  C081  F094         	movff	?___flmul,___fldiv@f2
  2802  0010AA  C082  F095         	movff	?___flmul+1,___fldiv@f2+1
  2803  0010AE  C083  F096         	movff	?___flmul+2,___fldiv@f2+2
  2804  0010B2  C084  F097         	movff	?___flmul+3,___fldiv@f2+3
  2805  0010B6  EC4D  F02B         	call	___fldiv	;wreg free
  2806  0010BA  C090  F1C0         	movff	?___fldiv,_park_routine$3668
  2807  0010BE  C091  F1C1         	movff	?___fldiv+1,_park_routine$3668+1
  2808  0010C2  C092  F1C2         	movff	?___fldiv+2,_park_routine$3668+2
  2809  0010C6  C093  F1C3         	movff	?___fldiv+3,_park_routine$3668+3
  2810                           
  2811                           ;parcheggio.c: 358: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2812  0010CA  C1C0  F194         	movff	_park_routine$3668,asin@x
  2813  0010CE  C1C1  F195         	movff	_park_routine$3668+1,asin@x+1
  2814  0010D2  C1C2  F196         	movff	_park_routine$3668+2,asin@x+2
  2815  0010D6  C1C3  F197         	movff	_park_routine$3668+3,asin@x+3
  2816  0010DA  EC3E  F020         	call	_asin	;wreg free
  2817  0010DE  C194  F12C         	movff	?_asin,_alfa
  2818  0010E2  C195  F12D         	movff	?_asin+1,_alfa+1
  2819  0010E6  C196  F12E         	movff	?_asin+2,_alfa+2
  2820  0010EA  C197  F12F         	movff	?_asin+3,_alfa+3
  2821                           
  2822                           ;parcheggio.c: 359: alfa = alfa / 3.14159265358979323846 * 180;
  2823  0010EE  0EDB               	movlw	219
  2824  0010F0  0100               	movlb	0	; () banked
  2825  0010F2  6F94               	movwf	___fldiv@f2& (0+255),b
  2826  0010F4  0E0F               	movlw	15
  2827  0010F6  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2828  0010F8  0E49               	movlw	73
  2829  0010FA  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2830  0010FC  0E40               	movlw	64
  2831  0010FE  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2832  001100  C12C  F090         	movff	_alfa,___fldiv@f1
  2833  001104  C12D  F091         	movff	_alfa+1,___fldiv@f1+1
  2834  001108  C12E  F092         	movff	_alfa+2,___fldiv@f1+2
  2835  00110C  C12F  F093         	movff	_alfa+3,___fldiv@f1+3
  2836  001110  EC4D  F02B         	call	___fldiv	;wreg free
  2837  001114  C090  F081         	movff	?___fldiv,___flmul@f1
  2838  001118  C091  F082         	movff	?___fldiv+1,___flmul@f1+1
  2839  00111C  C092  F083         	movff	?___fldiv+2,___flmul@f1+2
  2840  001120  C093  F084         	movff	?___fldiv+3,___flmul@f1+3
  2841  001124  0E00               	movlw	0
  2842  001126  0100               	movlb	0	; () banked
  2843  001128  6F85               	movwf	___flmul@f2& (0+255),b
  2844  00112A  0E00               	movlw	0
  2845  00112C  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2846  00112E  0E34               	movlw	52
  2847  001130  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2848  001132  0E43               	movlw	67
  2849  001134  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2850  001136  EC9B  F02A         	call	___flmul	;wreg free
  2851  00113A  C081  F12C         	movff	?___flmul,_alfa
  2852  00113E  C082  F12D         	movff	?___flmul+1,_alfa+1
  2853  001142  C083  F12E         	movff	?___flmul+2,_alfa+2
  2854  001146  C084  F12F         	movff	?___flmul+3,_alfa+3
  2855                           
  2856                           ;parcheggio.c: 360: beta = 90 - alfa;
  2857  00114A  C12C  F0AB         	movff	_alfa,___flneg@f1
  2858  00114E  C12D  F0AC         	movff	_alfa+1,___flneg@f1+1
  2859  001152  C12E  F0AD         	movff	_alfa+2,___flneg@f1+2
  2860  001156  C12F  F0AE         	movff	_alfa+3,___flneg@f1+3
  2861  00115A  ECCE  F031         	call	___flneg	;wreg free
  2862  00115E  C0AB  F09F         	movff	?___flneg,___fladd@f1
  2863  001162  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  2864  001166  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  2865  00116A  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  2866  00116E  0E00               	movlw	0
  2867  001170  0100               	movlb	0	; () banked
  2868  001172  6FA3               	movwf	___fladd@f2& (0+255),b
  2869  001174  0E00               	movlw	0
  2870  001176  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2871  001178  0EB4               	movlw	180
  2872  00117A  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2873  00117C  0E42               	movlw	66
  2874  00117E  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2875  001180  EC5E  F023         	call	___fladd	;wreg free
  2876  001184  C09F  F130         	movff	?___fladd,_beta
  2877  001188  C0A0  F131         	movff	?___fladd+1,_beta+1
  2878  00118C  C0A1  F132         	movff	?___fladd+2,_beta+2
  2879  001190  C0A2  F133         	movff	?___fladd+3,_beta+3
  2880                           
  2881                           ;parcheggio.c: 361: alfa = (alfa * 3.14159265358979323846) / 180;
  2882  001194  0EDB               	movlw	219
  2883  001196  0100               	movlb	0	; () banked
  2884  001198  6F85               	movwf	___flmul@f2& (0+255),b
  2885  00119A  0E0F               	movlw	15
  2886  00119C  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2887  00119E  0E49               	movlw	73
  2888  0011A0  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2889  0011A2  0E40               	movlw	64
  2890  0011A4  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2891  0011A6  C12C  F081         	movff	_alfa,___flmul@f1
  2892  0011AA  C12D  F082         	movff	_alfa+1,___flmul@f1+1
  2893  0011AE  C12E  F083         	movff	_alfa+2,___flmul@f1+2
  2894  0011B2  C12F  F084         	movff	_alfa+3,___flmul@f1+3
  2895  0011B6  EC9B  F02A         	call	___flmul	;wreg free
  2896  0011BA  C081  F090         	movff	?___flmul,___fldiv@f1
  2897  0011BE  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  2898  0011C2  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  2899  0011C6  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  2900  0011CA  0E00               	movlw	0
  2901  0011CC  0100               	movlb	0	; () banked
  2902  0011CE  6F94               	movwf	___fldiv@f2& (0+255),b
  2903  0011D0  0E00               	movlw	0
  2904  0011D2  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2905  0011D4  0E34               	movlw	52
  2906  0011D6  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2907  0011D8  0E43               	movlw	67
  2908  0011DA  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2909  0011DC  EC4D  F02B         	call	___fldiv	;wreg free
  2910  0011E0  C090  F12C         	movff	?___fldiv,_alfa
  2911  0011E4  C091  F12D         	movff	?___fldiv+1,_alfa+1
  2912  0011E8  C092  F12E         	movff	?___fldiv+2,_alfa+2
  2913  0011EC  C093  F12F         	movff	?___fldiv+3,_alfa+3
  2914                           
  2915                           ;parcheggio.c: 362: n = cos(alfa);
  2916  0011F0  C12C  F1B0         	movff	_alfa,cos@f
  2917  0011F4  C12D  F1B1         	movff	_alfa+1,cos@f+1
  2918  0011F8  C12E  F1B2         	movff	_alfa+2,cos@f+2
  2919  0011FC  C12F  F1B3         	movff	_alfa+3,cos@f+3
  2920  001200  EC96  F02E         	call	_cos	;wreg free
  2921  001204  C1B0  F138         	movff	?_cos,_n
  2922  001208  C1B1  F139         	movff	?_cos+1,_n+1
  2923  00120C  C1B2  F13A         	movff	?_cos+2,_n+2
  2924  001210  C1B3  F13B         	movff	?_cos+3,_n+3
  2925                           
  2926                           ;parcheggio.c: 363: n = 2 * raggio *n;
  2927  001214  C138  F085         	movff	_n,___flmul@f2
  2928  001218  C139  F086         	movff	_n+1,___flmul@f2+1
  2929  00121C  C13A  F087         	movff	_n+2,___flmul@f2+2
  2930  001220  C13B  F088         	movff	_n+3,___flmul@f2+3
  2931  001224  C1DC  F081         	movff	park_routine@raggio,___flmul@f1
  2932  001228  C1DD  F082         	movff	park_routine@raggio+1,___flmul@f1+1
  2933  00122C  C1DE  F083         	movff	park_routine@raggio+2,___flmul@f1+2
  2934  001230  C1DF  F084         	movff	park_routine@raggio+3,___flmul@f1+3
  2935  001234  EC9B  F02A         	call	___flmul	;wreg free
  2936  001238  C081  F1D4         	movff	?___flmul,_park_routine$3669
  2937  00123C  C082  F1D5         	movff	?___flmul+1,_park_routine$3669+1
  2938  001240  C083  F1D6         	movff	?___flmul+2,_park_routine$3669+2
  2939  001244  C084  F1D7         	movff	?___flmul+3,_park_routine$3669+3
  2940                           
  2941                           ;parcheggio.c: 363: n = 2 * raggio *n;
  2942  001248  C1D4  F081         	movff	_park_routine$3669,___flmul@f1
  2943  00124C  C1D5  F082         	movff	_park_routine$3669+1,___flmul@f1+1
  2944  001250  C1D6  F083         	movff	_park_routine$3669+2,___flmul@f1+2
  2945  001254  C1D7  F084         	movff	_park_routine$3669+3,___flmul@f1+3
  2946  001258  0E00               	movlw	0
  2947  00125A  0100               	movlb	0	; () banked
  2948  00125C  6F85               	movwf	___flmul@f2& (0+255),b
  2949  00125E  0E00               	movlw	0
  2950  001260  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2951  001262  0E00               	movlw	0
  2952  001264  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2953  001266  0E40               	movlw	64
  2954  001268  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2955  00126A  EC9B  F02A         	call	___flmul	;wreg free
  2956  00126E  C081  F138         	movff	?___flmul,_n
  2957  001272  C082  F139         	movff	?___flmul+1,_n+1
  2958  001276  C083  F13A         	movff	?___flmul+2,_n+2
  2959  00127A  C084  F13B         	movff	?___flmul+3,_n+3
  2960                           
  2961                           ;parcheggio.c: 364: prima_sterzata = 2 * 3.14159265358979323846 * raggio * (beta / 360);
  2962  00127E  C1DC  F085         	movff	park_routine@raggio,___flmul@f2
  2963  001282  C1DD  F086         	movff	park_routine@raggio+1,___flmul@f2+1
  2964  001286  C1DE  F087         	movff	park_routine@raggio+2,___flmul@f2+2
  2965  00128A  C1DF  F088         	movff	park_routine@raggio+3,___flmul@f2+3
  2966  00128E  0E00               	movlw	0
  2967  001290  0100               	movlb	0	; () banked
  2968  001292  6F94               	movwf	___fldiv@f2& (0+255),b
  2969  001294  0E00               	movlw	0
  2970  001296  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2971  001298  0EB4               	movlw	180
  2972  00129A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2973  00129C  0E43               	movlw	67
  2974  00129E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2975  0012A0  C130  F090         	movff	_beta,___fldiv@f1
  2976  0012A4  C131  F091         	movff	_beta+1,___fldiv@f1+1
  2977  0012A8  C132  F092         	movff	_beta+2,___fldiv@f1+2
  2978  0012AC  C133  F093         	movff	_beta+3,___fldiv@f1+3
  2979  0012B0  EC4D  F02B         	call	___fldiv	;wreg free
  2980  0012B4  C090  F081         	movff	?___fldiv,___flmul@f1
  2981  0012B8  C091  F082         	movff	?___fldiv+1,___flmul@f1+1
  2982  0012BC  C092  F083         	movff	?___fldiv+2,___flmul@f1+2
  2983  0012C0  C093  F084         	movff	?___fldiv+3,___flmul@f1+3
  2984  0012C4  EC9B  F02A         	call	___flmul	;wreg free
  2985  0012C8  C081  F1D4         	movff	?___flmul,_park_routine$3669
  2986  0012CC  C082  F1D5         	movff	?___flmul+1,_park_routine$3669+1
  2987  0012D0  C083  F1D6         	movff	?___flmul+2,_park_routine$3669+2
  2988  0012D4  C084  F1D7         	movff	?___flmul+3,_park_routine$3669+3
  2989                           
  2990                           ;parcheggio.c: 364: prima_sterzata = 2 * 3.14159265358979323846 * raggio * (beta / 360);
  2991  0012D8  C1D4  F081         	movff	_park_routine$3669,___flmul@f1
  2992  0012DC  C1D5  F082         	movff	_park_routine$3669+1,___flmul@f1+1
  2993  0012E0  C1D6  F083         	movff	_park_routine$3669+2,___flmul@f1+2
  2994  0012E4  C1D7  F084         	movff	_park_routine$3669+3,___flmul@f1+3
  2995  0012E8  0EDB               	movlw	219
  2996  0012EA  0100               	movlb	0	; () banked
  2997  0012EC  6F85               	movwf	___flmul@f2& (0+255),b
  2998  0012EE  0E0F               	movlw	15
  2999  0012F0  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  3000  0012F2  0EC9               	movlw	201
  3001  0012F4  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  3002  0012F6  0E40               	movlw	64
  3003  0012F8  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  3004  0012FA  EC9B  F02A         	call	___flmul	;wreg free
  3005  0012FE  C081  F13C         	movff	?___flmul,_prima_sterzata
  3006  001302  C082  F13D         	movff	?___flmul+1,_prima_sterzata+1
  3007  001306  C083  F13E         	movff	?___flmul+2,_prima_sterzata+2
  3008  00130A  C084  F13F         	movff	?___flmul+3,_prima_sterzata+3
  3009                           
  3010                           ;parcheggio.c: 365: K_var = raggio + (2 * larghezza / 3);
  3011  00130E  0E00               	movlw	0
  3012  001310  0100               	movlb	0	; () banked
  3013  001312  6F94               	movwf	___fldiv@f2& (0+255),b
  3014  001314  0E00               	movlw	0
  3015  001316  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  3016  001318  0E40               	movlw	64
  3017  00131A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  3018  00131C  0E40               	movlw	64
  3019  00131E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  3020  001320  0E00               	movlw	0
  3021  001322  0100               	movlb	0	; () banked
  3022  001324  6F85               	movwf	___flmul@f2& (0+255),b
  3023  001326  0E00               	movlw	0
  3024  001328  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  3025  00132A  0E00               	movlw	0
  3026  00132C  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  3027  00132E  0E40               	movlw	64
  3028  001330  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  3029  001332  C1D8  F081         	movff	park_routine@larghezza,___flmul@f1
  3030  001336  C1D9  F082         	movff	park_routine@larghezza+1,___flmul@f1+1
  3031  00133A  C1DA  F083         	movff	park_routine@larghezza+2,___flmul@f1+2
  3032  00133E  C1DB  F084         	movff	park_routine@larghezza+3,___flmul@f1+3
  3033  001342  EC9B  F02A         	call	___flmul	;wreg free
  3034  001346  C081  F090         	movff	?___flmul,___fldiv@f1
  3035  00134A  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  3036  00134E  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  3037  001352  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  3038  001356  EC4D  F02B         	call	___fldiv	;wreg free
  3039  00135A  C090  F09F         	movff	?___fldiv,___fladd@f1
  3040  00135E  C091  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  3041  001362  C092  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  3042  001366  C093  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  3043  00136A  C1DC  F0A3         	movff	park_routine@raggio,___fladd@f2
  3044  00136E  C1DD  F0A4         	movff	park_routine@raggio+1,___fladd@f2+1
  3045  001372  C1DE  F0A5         	movff	park_routine@raggio+2,___fladd@f2+2
  3046  001376  C1DF  F0A6         	movff	park_routine@raggio+3,___fladd@f2+3
  3047  00137A  EC5E  F023         	call	___fladd	;wreg free
  3048  00137E  C09F  F124         	movff	?___fladd,_K_var
  3049  001382  C0A0  F125         	movff	?___fladd+1,_K_var+1
  3050  001386  C0A1  F126         	movff	?___fladd+2,_K_var+2
  3051  00138A  C0A2  F127         	movff	?___fladd+3,_K_var+3
  3052                           
  3053                           ;parcheggio.c: 366: J_var = raggio - (2 * larghezza / 3);
  3054  00138E  0E00               	movlw	0
  3055  001390  0100               	movlb	0	; () banked
  3056  001392  6F94               	movwf	___fldiv@f2& (0+255),b
  3057  001394  0E00               	movlw	0
  3058  001396  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  3059  001398  0E40               	movlw	64
  3060  00139A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  3061  00139C  0E40               	movlw	64
  3062  00139E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  3063  0013A0  0E00               	movlw	0
  3064  0013A2  0100               	movlb	0	; () banked
  3065  0013A4  6F85               	movwf	___flmul@f2& (0+255),b
  3066  0013A6  0E00               	movlw	0
  3067  0013A8  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  3068  0013AA  0E00               	movlw	0
  3069  0013AC  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  3070  0013AE  0E40               	movlw	64
  3071  0013B0  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  3072  0013B2  C1D8  F081         	movff	park_routine@larghezza,___flmul@f1
  3073  0013B6  C1D9  F082         	movff	park_routine@larghezza+1,___flmul@f1+1
  3074  0013BA  C1DA  F083         	movff	park_routine@larghezza+2,___flmul@f1+2
  3075  0013BE  C1DB  F084         	movff	park_routine@larghezza+3,___flmul@f1+3
  3076  0013C2  EC9B  F02A         	call	___flmul	;wreg free
  3077  0013C6  C081  F090         	movff	?___flmul,___fldiv@f1
  3078  0013CA  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  3079  0013CE  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  3080  0013D2  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  3081  0013D6  EC4D  F02B         	call	___fldiv	;wreg free
  3082  0013DA  C090  F0AB         	movff	?___fldiv,___flneg@f1
  3083  0013DE  C091  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  3084  0013E2  C092  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  3085  0013E6  C093  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  3086  0013EA  ECCE  F031         	call	___flneg	;wreg free
  3087  0013EE  C0AB  F09F         	movff	?___flneg,___fladd@f1
  3088  0013F2  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  3089  0013F6  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  3090  0013FA  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  3091  0013FE  C1DC  F0A3         	movff	park_routine@raggio,___fladd@f2
  3092  001402  C1DD  F0A4         	movff	park_routine@raggio+1,___fladd@f2+1
  3093  001406  C1DE  F0A5         	movff	park_routine@raggio+2,___fladd@f2+2
  3094  00140A  C1DF  F0A6         	movff	park_routine@raggio+3,___fladd@f2+3
  3095  00140E  EC5E  F023         	call	___fladd	;wreg free
  3096  001412  C09F  F120         	movff	?___fladd,_J_var
  3097  001416  C0A0  F121         	movff	?___fladd+1,_J_var+1
  3098  00141A  C0A1  F122         	movff	?___fladd+2,_J_var+2
  3099  00141E  C0A2  F123         	movff	?___fladd+3,_J_var+3
  3100                           
  3101                           ;parcheggio.c: 367: Pmin = K_var * cos(asin((J_var / K_var)));
  3102  001422  C124  F094         	movff	_K_var,___fldiv@f2
  3103  001426  C125  F095         	movff	_K_var+1,___fldiv@f2+1
  3104  00142A  C126  F096         	movff	_K_var+2,___fldiv@f2+2
  3105  00142E  C127  F097         	movff	_K_var+3,___fldiv@f2+3
  3106  001432  C120  F090         	movff	_J_var,___fldiv@f1
  3107  001436  C121  F091         	movff	_J_var+1,___fldiv@f1+1
  3108  00143A  C122  F092         	movff	_J_var+2,___fldiv@f1+2
  3109  00143E  C123  F093         	movff	_J_var+3,___fldiv@f1+3
  3110  001442  EC4D  F02B         	call	___fldiv	;wreg free
  3111  001446  C090  F1C4         	movff	?___fldiv,_park_routine$3670
  3112  00144A  C091  F1C5         	movff	?___fldiv+1,_park_routine$3670+1
  3113  00144E  C092  F1C6         	movff	?___fldiv+2,_park_routine$3670+2
  3114  001452  C093  F1C7         	movff	?___fldiv+3,_park_routine$3670+3
  3115                           
  3116                           ;parcheggio.c: 367: Pmin = K_var * cos(asin((J_var / K_var)));
  3117  001456  C1C4  F194         	movff	_park_routine$3670,asin@x
  3118  00145A  C1C5  F195         	movff	_park_routine$3670+1,asin@x+1
  3119  00145E  C1C6  F196         	movff	_park_routine$3670+2,asin@x+2
  3120  001462  C1C7  F197         	movff	_park_routine$3670+3,asin@x+3
  3121  001466  EC3E  F020         	call	_asin	;wreg free
  3122  00146A  C194  F1B0         	movff	?_asin,cos@f
  3123  00146E  C195  F1B1         	movff	?_asin+1,cos@f+1
  3124  001472  C196  F1B2         	movff	?_asin+2,cos@f+2
  3125  001476  C197  F1B3         	movff	?_asin+3,cos@f+3
  3126  00147A  EC96  F02E         	call	_cos	;wreg free
  3127  00147E  C1B0  F1C8         	movff	?_cos,_park_routine$3671
  3128  001482  C1B1  F1C9         	movff	?_cos+1,_park_routine$3671+1
  3129  001486  C1B2  F1CA         	movff	?_cos+2,_park_routine$3671+2
  3130  00148A  C1B3  F1CB         	movff	?_cos+3,_park_routine$3671+3
  3131                           
  3132                           ;parcheggio.c: 367: Pmin = K_var * cos(asin((J_var / K_var)));
  3133  00148E  C1C8  F081         	movff	_park_routine$3671,___flmul@f1
  3134  001492  C1C9  F082         	movff	_park_routine$3671+1,___flmul@f1+1
  3135  001496  C1CA  F083         	movff	_park_routine$3671+2,___flmul@f1+2
  3136  00149A  C1CB  F084         	movff	_park_routine$3671+3,___flmul@f1+3
  3137  00149E  C124  F085         	movff	_K_var,___flmul@f2
  3138  0014A2  C125  F086         	movff	_K_var+1,___flmul@f2+1
  3139  0014A6  C126  F087         	movff	_K_var+2,___flmul@f2+2
  3140  0014AA  C127  F088         	movff	_K_var+3,___flmul@f2+3
  3141  0014AE  EC9B  F02A         	call	___flmul	;wreg free
  3142  0014B2  C081  F128         	movff	?___flmul,_Pmin
  3143  0014B6  C082  F129         	movff	?___flmul+1,_Pmin+1
  3144  0014BA  C083  F12A         	movff	?___flmul+2,_Pmin+2
  3145  0014BE  C084  F12B         	movff	?___flmul+3,_Pmin+3
  3146                           
  3147                           ;parcheggio.c: 369: set_speed = 0;
  3148  0014C2  0E00               	movlw	0
  3149  0014C4  0100               	movlb	0	; () banked
  3150  0014C6  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3151  0014C8  0E00               	movlw	0
  3152  0014CA  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;parcheggio.c: 370: data_steering[0] = 90;
  3156  0014CC  0E5A               	movlw	90
  3157  0014CE  0101               	movlb	1	; () banked
  3158  0014D0  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3159                           
  3160                           ; BSR set to: 1
  3161                           ;parcheggio.c: 371: data_brake [0] = 0;
  3162  0014D2  0E00               	movlw	0
  3163  0014D4  6E26               	movwf	_data_brake,c	;volatile
  3164                           
  3165                           ; BSR set to: 1
  3166                           ;parcheggio.c: 372: data_brake [1] = 1;
  3167  0014D6  0E01               	movlw	1
  3168  0014D8  6E27               	movwf	_data_brake+1,c	;volatile
  3169                           
  3170                           ; BSR set to: 1
  3171                           ;parcheggio.c: 373: can_send();
  3172  0014DA  EC93  F02D         	call	_can_send	;wreg free
  3173                           
  3174                           ;parcheggio.c: 375: delay_s(1);
  3175  0014DE  0E01               	movlw	1
  3176  0014E0  EC5A  F032         	call	_delay_s
  3177                           
  3178                           ;parcheggio.c: 377: data_brake [0] = 3;
  3179  0014E4  0E03               	movlw	3
  3180  0014E6  6E26               	movwf	_data_brake,c	;volatile
  3181                           
  3182                           ;parcheggio.c: 378: data_brake [1] = 1;
  3183  0014E8  0E01               	movlw	1
  3184  0014EA  6E27               	movwf	_data_brake+1,c	;volatile
  3185                           
  3186                           ;parcheggio.c: 380: set_speed = 300;
  3187  0014EC  0E01               	movlw	1
  3188  0014EE  0100               	movlb	0	; () banked
  3189  0014F0  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3190  0014F2  0E2C               	movlw	44
  3191  0014F4  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;parcheggio.c: 381: dir = 0;
  3195  0014F6  9856               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;parcheggio.c: 382: data_steering[0] = 90;
  3199  0014F8  0E5A               	movlw	90
  3200  0014FA  0101               	movlb	1	; () banked
  3201  0014FC  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3202                           
  3203                           ; BSR set to: 1
  3204                           ;parcheggio.c: 383: data_test[0] = ((60 + Pmin + 6)-(n + 15));
  3205  0014FE  0E00               	movlw	0
  3206  001500  0100               	movlb	0	; () banked
  3207  001502  6FA3               	movwf	___fladd@f2& (0+255),b
  3208  001504  0E00               	movlw	0
  3209  001506  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  3210  001508  0E70               	movlw	112
  3211  00150A  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  3212  00150C  0E41               	movlw	65
  3213  00150E  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  3214  001510  C138  F09F         	movff	_n,___fladd@f1
  3215  001514  C139  F0A0         	movff	_n+1,___fladd@f1+1
  3216  001518  C13A  F0A1         	movff	_n+2,___fladd@f1+2
  3217  00151C  C13B  F0A2         	movff	_n+3,___fladd@f1+3
  3218  001520  EC5E  F023         	call	___fladd	;wreg free
  3219  001524  C09F  F0AB         	movff	?___fladd,___flneg@f1
  3220  001528  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  3221  00152C  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  3222  001530  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  3223  001534  ECCE  F031         	call	___flneg	;wreg free
  3224  001538  C0AB  F1CC         	movff	?___flneg,_park_routine$3665
  3225  00153C  C0AC  F1CD         	movff	?___flneg+1,_park_routine$3665+1
  3226  001540  C0AD  F1CE         	movff	?___flneg+2,_park_routine$3665+2
  3227  001544  C0AE  F1CF         	movff	?___flneg+3,_park_routine$3665+3
  3228                           
  3229                           ;parcheggio.c: 383: data_test[0] = ((60 + Pmin + 6)-(n + 15));
  3230  001548  C128  F0A3         	movff	_Pmin,___fladd@f2
  3231  00154C  C129  F0A4         	movff	_Pmin+1,___fladd@f2+1
  3232  001550  C12A  F0A5         	movff	_Pmin+2,___fladd@f2+2
  3233  001554  C12B  F0A6         	movff	_Pmin+3,___fladd@f2+3
  3234  001558  C1CC  F09F         	movff	_park_routine$3665,___fladd@f1
  3235  00155C  C1CD  F0A0         	movff	_park_routine$3665+1,___fladd@f1+1
  3236  001560  C1CE  F0A1         	movff	_park_routine$3665+2,___fladd@f1+2
  3237  001564  C1CF  F0A2         	movff	_park_routine$3665+3,___fladd@f1+3
  3238  001568  EC5E  F023         	call	___fladd	;wreg free
  3239  00156C  C09F  F1D0         	movff	?___fladd,_park_routine$3666
  3240  001570  C0A0  F1D1         	movff	?___fladd+1,_park_routine$3666+1
  3241  001574  C0A1  F1D2         	movff	?___fladd+2,_park_routine$3666+2
  3242  001578  C0A2  F1D3         	movff	?___fladd+3,_park_routine$3666+3
  3243                           
  3244                           ;parcheggio.c: 383: data_test[0] = ((60 + Pmin + 6)-(n + 15));
  3245  00157C  0E00               	movlw	0
  3246  00157E  0100               	movlb	0	; () banked
  3247  001580  6FA3               	movwf	___fladd@f2& (0+255),b
  3248  001582  0E00               	movlw	0
  3249  001584  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  3250  001586  0E84               	movlw	132
  3251  001588  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  3252  00158A  0E42               	movlw	66
  3253  00158C  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  3254  00158E  C1D0  F09F         	movff	_park_routine$3666,___fladd@f1
  3255  001592  C1D1  F0A0         	movff	_park_routine$3666+1,___fladd@f1+1
  3256  001596  C1D2  F0A1         	movff	_park_routine$3666+2,___fladd@f1+2
  3257  00159A  C1D3  F0A2         	movff	_park_routine$3666+3,___fladd@f1+3
  3258  00159E  EC5E  F023         	call	___fladd	;wreg free
  3259  0015A2  C09F  F0AF         	movff	?___fladd,___fltol@f1
  3260  0015A6  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  3261  0015AA  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  3262  0015AE  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  3263  0015B2  EC79  F02C         	call	___fltol	;wreg free
  3264  0015B6  0100               	movlb	0	; () banked
  3265  0015B8  51AF               	movf	?___fltol& (0+255),w,b
  3266  0015BA  0101               	movlb	1	; () banked
  3267  0015BC  6F73               	movwf	_data_test& (0+255),b	;volatile
  3268                           
  3269                           ; BSR set to: 1
  3270                           ;parcheggio.c: 384: asd = 1;
  3271  0015BE  8456               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  3272                           
  3273                           ; BSR set to: 1
  3274                           
  3275                           ;parcheggio.c: 385: while (!CANisTxReady());
  3276  0015C0  D000               	goto	l7083
  3277  0015C2                     l7083:
  3278  0015C2  EC9B  F032         	call	_CANisTxReady	;wreg free
  3279  0015C6  0900               	iorlw	0
  3280  0015C8  B4D8               	btfsc	status,2,c
  3281  0015CA  D7FB               	goto	l7083
  3282                           
  3283                           ;parcheggio.c: 386: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3284  0015CC  0E0F               	movlw	15
  3285  0015CE  0100               	movlb	0	; () banked
  3286  0015D0  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3287  0015D2  0E00               	movlw	0
  3288  0015D4  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3289  0015D6  0E00               	movlw	0
  3290  0015D8  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3291  0015DA  0E00               	movlw	0
  3292  0015DC  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3293  0015DE  0E73               	movlw	low _data_test
  3294  0015E0  0100               	movlb	0	; () banked
  3295  0015E2  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3296  0015E4  0E01               	movlw	high _data_test
  3297  0015E6  0100               	movlb	0	; () banked
  3298  0015E8  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3299  0015EA  0E08               	movlw	8
  3300  0015EC  0100               	movlb	0	; () banked
  3301  0015EE  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3302  0015F0  0EBC               	movlw	188
  3303  0015F2  0100               	movlb	0	; () banked
  3304  0015F4  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3305  0015F6  ECD9  F011         	call	_CANsendMessage	;wreg free
  3306                           
  3307                           ;parcheggio.c: 387: can_send();
  3308  0015FA  EC93  F02D         	call	_can_send	;wreg free
  3309                           
  3310                           ;parcheggio.c: 389: while (asd == 1);
  3311  0015FE  D000               	goto	l786
  3312  001600                     l786:
  3313  001600  B456               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  3314  001602  D7FE               	goto	l786
  3315                           
  3316                           ;parcheggio.c: 391: set_speed = 0;
  3317  001604  0E00               	movlw	0
  3318  001606  0100               	movlb	0	; () banked
  3319  001608  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3320  00160A  0E00               	movlw	0
  3321  00160C  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3322                           
  3323                           ;parcheggio.c: 392: data_steering[0] = 90;
  3324  00160E  0E5A               	movlw	90
  3325  001610  0101               	movlb	1	; () banked
  3326  001612  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3327                           
  3328                           ;parcheggio.c: 393: data_brake [0] = 0;
  3329  001614  0E00               	movlw	0
  3330  001616  6E26               	movwf	_data_brake,c	;volatile
  3331                           
  3332                           ;parcheggio.c: 394: data_brake [1] = 1;
  3333  001618  0E01               	movlw	1
  3334  00161A  6E27               	movwf	_data_brake+1,c	;volatile
  3335                           
  3336                           ; BSR set to: 1
  3337                           ;parcheggio.c: 395: can_send();
  3338  00161C  EC93  F02D         	call	_can_send	;wreg free
  3339                           
  3340                           ;parcheggio.c: 397: delay_s(1);
  3341  001620  0E01               	movlw	1
  3342  001622  EC5A  F032         	call	_delay_s
  3343                           
  3344                           ;parcheggio.c: 399: data_brake [0] = 3;
  3345  001626  0E03               	movlw	3
  3346  001628  6E26               	movwf	_data_brake,c	;volatile
  3347                           
  3348                           ;parcheggio.c: 400: data_brake [1] = 1;
  3349  00162A  0E01               	movlw	1
  3350  00162C  6E27               	movwf	_data_brake+1,c	;volatile
  3351                           
  3352                           ;parcheggio.c: 401: set_speed = 300;
  3353  00162E  0E01               	movlw	1
  3354  001630  0100               	movlb	0	; () banked
  3355  001632  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3356  001634  0E2C               	movlw	44
  3357  001636  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;parcheggio.c: 402: dir = 0;
  3361  001638  9856               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;parcheggio.c: 403: data_steering[0] = 180;
  3365  00163A  0EB4               	movlw	180
  3366  00163C  0101               	movlb	1	; () banked
  3367  00163E  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3368                           
  3369                           ; BSR set to: 1
  3370                           ;parcheggio.c: 404: data_test[0] = prima_sterzata - 10;
  3371  001640  0E00               	movlw	0
  3372  001642  0100               	movlb	0	; () banked
  3373  001644  6FA3               	movwf	___fladd@f2& (0+255),b
  3374  001646  0E00               	movlw	0
  3375  001648  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  3376  00164A  0E20               	movlw	32
  3377  00164C  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  3378  00164E  0EC1               	movlw	193
  3379  001650  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  3380  001652  C13C  F09F         	movff	_prima_sterzata,___fladd@f1
  3381  001656  C13D  F0A0         	movff	_prima_sterzata+1,___fladd@f1+1
  3382  00165A  C13E  F0A1         	movff	_prima_sterzata+2,___fladd@f1+2
  3383  00165E  C13F  F0A2         	movff	_prima_sterzata+3,___fladd@f1+3
  3384  001662  EC5E  F023         	call	___fladd	;wreg free
  3385  001666  C09F  F0AF         	movff	?___fladd,___fltol@f1
  3386  00166A  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  3387  00166E  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  3388  001672  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  3389  001676  EC79  F02C         	call	___fltol	;wreg free
  3390  00167A  0100               	movlb	0	; () banked
  3391  00167C  51AF               	movf	?___fltol& (0+255),w,b
  3392  00167E  0101               	movlb	1	; () banked
  3393  001680  6F73               	movwf	_data_test& (0+255),b	;volatile
  3394                           
  3395                           ; BSR set to: 1
  3396                           ;parcheggio.c: 405: asd = 1;
  3397  001682  8456               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  3398                           
  3399                           ; BSR set to: 1
  3400                           
  3401                           ;parcheggio.c: 406: while (!CANisTxReady());
  3402  001684  D000               	goto	l7107
  3403  001686                     l7107:
  3404  001686  EC9B  F032         	call	_CANisTxReady	;wreg free
  3405  00168A  0900               	iorlw	0
  3406  00168C  B4D8               	btfsc	status,2,c
  3407  00168E  D7FB               	goto	l7107
  3408                           
  3409                           ;parcheggio.c: 407: CANsendMessage(0b00000001111, data_test, 1, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3410  001690  0E0F               	movlw	15
  3411  001692  0100               	movlb	0	; () banked
  3412  001694  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3413  001696  0E00               	movlw	0
  3414  001698  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3415  00169A  0E00               	movlw	0
  3416  00169C  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3417  00169E  0E00               	movlw	0
  3418  0016A0  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3419  0016A2  0E73               	movlw	low _data_test
  3420  0016A4  0100               	movlb	0	; () banked
  3421  0016A6  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3422  0016A8  0E01               	movlw	high _data_test
  3423  0016AA  0100               	movlb	0	; () banked
  3424  0016AC  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3425  0016AE  0E01               	movlw	1
  3426  0016B0  0100               	movlb	0	; () banked
  3427  0016B2  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3428  0016B4  0EBC               	movlw	188
  3429  0016B6  0100               	movlb	0	; () banked
  3430  0016B8  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3431  0016BA  ECD9  F011         	call	_CANsendMessage	;wreg free
  3432                           
  3433                           ;parcheggio.c: 408: while (!CANisTxReady());
  3434  0016BE  D000               	goto	l7111
  3435  0016C0                     l7111:
  3436  0016C0  EC9B  F032         	call	_CANisTxReady	;wreg free
  3437  0016C4  0900               	iorlw	0
  3438  0016C6  B4D8               	btfsc	status,2,c
  3439  0016C8  D7FB               	goto	l7111
  3440                           
  3441                           ;parcheggio.c: 409: CANsendMessage(0xAA, data_test, 2, CAN_CONFIG_STD_MSG & CAN_NORMAL_T
      +                          X_FRAME & CAN_TX_PRIORITY_0);
  3442  0016CA  0EAA               	movlw	170
  3443  0016CC  0100               	movlb	0	; () banked
  3444  0016CE  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3445  0016D0  0E00               	movlw	0
  3446  0016D2  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3447  0016D4  0E00               	movlw	0
  3448  0016D6  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3449  0016D8  0E00               	movlw	0
  3450  0016DA  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3451  0016DC  0E73               	movlw	low _data_test
  3452  0016DE  0100               	movlb	0	; () banked
  3453  0016E0  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3454  0016E2  0E01               	movlw	high _data_test
  3455  0016E4  0100               	movlb	0	; () banked
  3456  0016E6  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3457  0016E8  0E02               	movlw	2
  3458  0016EA  0100               	movlb	0	; () banked
  3459  0016EC  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3460  0016EE  0EBC               	movlw	188
  3461  0016F0  0100               	movlb	0	; () banked
  3462  0016F2  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3463  0016F4  ECD9  F011         	call	_CANsendMessage	;wreg free
  3464                           
  3465                           ;parcheggio.c: 410: can_send();
  3466  0016F8  EC93  F02D         	call	_can_send	;wreg free
  3467                           
  3468                           ;parcheggio.c: 412: while (asd == 1);
  3469  0016FC  D000               	goto	l795
  3470  0016FE                     l795:
  3471  0016FE  B456               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  3472  001700  D7FE               	goto	l795
  3473                           
  3474                           ;parcheggio.c: 415: data_steering[0] = 0;
  3475  001702  0E00               	movlw	0
  3476  001704  0101               	movlb	1	; () banked
  3477  001706  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3478                           
  3479                           ; BSR set to: 1
  3480                           ;parcheggio.c: 417: asd = 1;
  3481  001708  8456               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  3482                           
  3483                           ; BSR set to: 1
  3484                           ;parcheggio.c: 418: data_test[0] = prima_sterzata - 1;
  3485  00170A  0E00               	movlw	0
  3486  00170C  0100               	movlb	0	; () banked
  3487  00170E  6FA3               	movwf	___fladd@f2& (0+255),b
  3488  001710  0E00               	movlw	0
  3489  001712  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  3490  001714  0E80               	movlw	128
  3491  001716  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  3492  001718  0EBF               	movlw	191
  3493  00171A  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  3494  00171C  C13C  F09F         	movff	_prima_sterzata,___fladd@f1
  3495  001720  C13D  F0A0         	movff	_prima_sterzata+1,___fladd@f1+1
  3496  001724  C13E  F0A1         	movff	_prima_sterzata+2,___fladd@f1+2
  3497  001728  C13F  F0A2         	movff	_prima_sterzata+3,___fladd@f1+3
  3498  00172C  EC5E  F023         	call	___fladd	;wreg free
  3499  001730  C09F  F0AF         	movff	?___fladd,___fltol@f1
  3500  001734  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  3501  001738  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  3502  00173C  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  3503  001740  EC79  F02C         	call	___fltol	;wreg free
  3504  001744  0100               	movlb	0	; () banked
  3505  001746  51AF               	movf	?___fltol& (0+255),w,b
  3506  001748  0101               	movlb	1	; () banked
  3507  00174A  6F73               	movwf	_data_test& (0+255),b	;volatile
  3508                           
  3509                           ; BSR set to: 1
  3510                           
  3511                           ;parcheggio.c: 419: while (!CANisTxReady());
  3512  00174C  D000               	goto	l7121
  3513  00174E                     l7121:
  3514  00174E  EC9B  F032         	call	_CANisTxReady	;wreg free
  3515  001752  0900               	iorlw	0
  3516  001754  B4D8               	btfsc	status,2,c
  3517  001756  D7FB               	goto	l7121
  3518                           
  3519                           ;parcheggio.c: 420: CANsendMessage(0b00000001111, data_test, 1, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3520  001758  0E0F               	movlw	15
  3521  00175A  0100               	movlb	0	; () banked
  3522  00175C  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3523  00175E  0E00               	movlw	0
  3524  001760  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3525  001762  0E00               	movlw	0
  3526  001764  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3527  001766  0E00               	movlw	0
  3528  001768  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3529  00176A  0E73               	movlw	low _data_test
  3530  00176C  0100               	movlb	0	; () banked
  3531  00176E  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3532  001770  0E01               	movlw	high _data_test
  3533  001772  0100               	movlb	0	; () banked
  3534  001774  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3535  001776  0E01               	movlw	1
  3536  001778  0100               	movlb	0	; () banked
  3537  00177A  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3538  00177C  0EBC               	movlw	188
  3539  00177E  0100               	movlb	0	; () banked
  3540  001780  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3541  001782  ECD9  F011         	call	_CANsendMessage	;wreg free
  3542                           
  3543                           ;parcheggio.c: 423: set_speed = 200;
  3544  001786  0E00               	movlw	0
  3545  001788  0100               	movlb	0	; () banked
  3546  00178A  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3547  00178C  0EC8               	movlw	200
  3548  00178E  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;parcheggio.c: 424: data_brake[0] = 3;
  3552  001790  0E03               	movlw	3
  3553  001792  6E26               	movwf	_data_brake,c	;volatile
  3554                           
  3555                           ;parcheggio.c: 425: can_send();
  3556  001794  EC93  F02D         	call	_can_send	;wreg free
  3557                           
  3558                           ;parcheggio.c: 426: while (asd == 1);
  3559  001798  D000               	goto	l801
  3560  00179A                     l801:
  3561  00179A  B456               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  3562  00179C  D7FE               	goto	l801
  3563                           
  3564                           ;parcheggio.c: 428: data_brake [0] = 0;
  3565  00179E  0E00               	movlw	0
  3566  0017A0  6E26               	movwf	_data_brake,c	;volatile
  3567                           
  3568                           ;parcheggio.c: 429: data_brake [1] = 1;
  3569  0017A2  0E01               	movlw	1
  3570  0017A4  6E27               	movwf	_data_brake+1,c	;volatile
  3571                           
  3572                           ;parcheggio.c: 430: set_speed = 0;
  3573  0017A6  0E00               	movlw	0
  3574  0017A8  0100               	movlb	0	; () banked
  3575  0017AA  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3576  0017AC  0E00               	movlw	0
  3577  0017AE  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3578                           
  3579                           ;parcheggio.c: 431: data_steering[0] = 90;
  3580  0017B0  0E5A               	movlw	90
  3581  0017B2  0101               	movlb	1	; () banked
  3582  0017B4  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3583                           
  3584                           ; BSR set to: 1
  3585                           ;parcheggio.c: 432: can_send();
  3586  0017B6  EC93  F02D         	call	_can_send	;wreg free
  3587                           
  3588                           ;parcheggio.c: 434: delay_s(1);
  3589  0017BA  0E01               	movlw	1
  3590  0017BC  EC5A  F032         	call	_delay_s
  3591                           
  3592                           ;parcheggio.c: 436: avvicinamento = 1;
  3593  0017C0  8656               	bsf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  3594                           
  3595                           ;parcheggio.c: 437: if (sensor_distance [6] > 20) {
  3596  0017C2  500E               	movf	_sensor_distance+13,w,c	;volatile
  3597  0017C4  E104               	bnz	u8850
  3598  0017C6  0E15               	movlw	21
  3599  0017C8  5C0D               	subwf	_sensor_distance+12,w,c	;volatile
  3600  0017CA  A0D8               	btfss	status,0,c
  3601  0017CC  D018               	goto	l7147
  3602  0017CE                     u8850:
  3603                           
  3604                           ;parcheggio.c: 438: data_brake [0] = 3;
  3605  0017CE  0E03               	movlw	3
  3606  0017D0  6E26               	movwf	_data_brake,c	;volatile
  3607                           
  3608                           ;parcheggio.c: 439: data_brake [1] = 1;
  3609  0017D2  0E01               	movlw	1
  3610  0017D4  6E27               	movwf	_data_brake+1,c	;volatile
  3611                           
  3612                           ;parcheggio.c: 440: set_speed = 300;
  3613  0017D6  0E01               	movlw	1
  3614  0017D8  0100               	movlb	0	; () banked
  3615  0017DA  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3616  0017DC  0E2C               	movlw	44
  3617  0017DE  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3618                           
  3619                           ;parcheggio.c: 441: data_steering[0] = 90;
  3620  0017E0  0E5A               	movlw	90
  3621  0017E2  0101               	movlb	1	; () banked
  3622  0017E4  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3623                           
  3624                           ; BSR set to: 1
  3625                           ;parcheggio.c: 442: dir = 1;
  3626  0017E6  8856               	bsf	_dir/(0+8),_dir& (0+7),c	;volatile
  3627                           
  3628                           ; BSR set to: 1
  3629                           ;parcheggio.c: 443: can_send();
  3630  0017E8  EC93  F02D         	call	_can_send	;wreg free
  3631                           
  3632                           ;parcheggio.c: 444: while (sensor_distance [6] > 20);
  3633  0017EC  D000               	goto	l7145
  3634  0017EE                     l7145:
  3635  0017EE  500E               	movf	_sensor_distance+13,w,c	;volatile
  3636  0017F0  E1FE               	bnz	l7145
  3637  0017F2  0E15               	movlw	21
  3638  0017F4  5C0D               	subwf	_sensor_distance+12,w,c	;volatile
  3639  0017F6  A0D8               	btfss	status,0,c
  3640  0017F8  D002               	goto	l7147
  3641  0017FA  D7F9               	goto	l7145
  3642  0017FC  D000               	goto	l7147
  3643  0017FE                     l7147:
  3644                           
  3645                           ;parcheggio.c: 445: }
  3646                           ;parcheggio.c: 446: data_brake [0] = 0;
  3647  0017FE  0E00               	movlw	0
  3648  001800  6E26               	movwf	_data_brake,c	;volatile
  3649                           
  3650                           ;parcheggio.c: 447: data_brake [1] = 1;
  3651  001802  0E01               	movlw	1
  3652  001804  6E27               	movwf	_data_brake+1,c	;volatile
  3653                           
  3654                           ;parcheggio.c: 448: set_speed = 0;
  3655  001806  0E00               	movlw	0
  3656  001808  0100               	movlb	0	; () banked
  3657  00180A  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3658  00180C  0E00               	movlw	0
  3659  00180E  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3660                           
  3661                           ;parcheggio.c: 449: data_steering[0] = 90;
  3662  001810  0E5A               	movlw	90
  3663  001812  0101               	movlb	1	; () banked
  3664  001814  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3665                           
  3666                           ; BSR set to: 1
  3667                           ;parcheggio.c: 450: dir = 0;
  3668  001816  9856               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  3669                           
  3670                           ; BSR set to: 1
  3671                           ;parcheggio.c: 451: can_send();
  3672  001818  EC93  F02D         	call	_can_send	;wreg free
  3673                           
  3674                           ;parcheggio.c: 453: delay_s(1);
  3675  00181C  0E01               	movlw	1
  3676  00181E  EC5A  F032         	call	_delay_s
  3677                           
  3678                           ;parcheggio.c: 455: data[0] = 3;
  3679  001822  0E03               	movlw	3
  3680  001824  0101               	movlb	1	; () banked
  3681  001826  6F53               	movwf	_data& (0+255),b	;volatile
  3682                           
  3683                           ; BSR set to: 1
  3684                           
  3685                           ;parcheggio.c: 456: while (!CANisTxReady());
  3686  001828  D000               	goto	l7157
  3687  00182A                     l7157:
  3688  00182A  EC9B  F032         	call	_CANisTxReady	;wreg free
  3689  00182E  0900               	iorlw	0
  3690  001830  B4D8               	btfsc	status,2,c
  3691  001832  D7FB               	goto	l7157
  3692                           
  3693                           ;parcheggio.c: 457: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  3694  001834  0E0D               	movlw	13
  3695  001836  0100               	movlb	0	; () banked
  3696  001838  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3697  00183A  0E00               	movlw	0
  3698  00183C  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3699  00183E  0E00               	movlw	0
  3700  001840  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3701  001842  0E00               	movlw	0
  3702  001844  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3703  001846  0E53               	movlw	low _data
  3704  001848  0100               	movlb	0	; () banked
  3705  00184A  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3706  00184C  0E01               	movlw	high _data
  3707  00184E  0100               	movlb	0	; () banked
  3708  001850  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3709  001852  0E08               	movlw	8
  3710  001854  0100               	movlb	0	; () banked
  3711  001856  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3712  001858  0EBC               	movlw	188
  3713  00185A  0100               	movlb	0	; () banked
  3714  00185C  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3715  00185E  ECD9  F011         	call	_CANsendMessage	;wreg free
  3716                           
  3717                           ;parcheggio.c: 458: delay_ms(100);
  3718  001862  0E00               	movlw	0
  3719  001864  0100               	movlb	0	; () banked
  3720  001866  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  3721  001868  0E64               	movlw	100
  3722  00186A  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  3723  00186C  ECEC  F031         	call	_delay_ms	;wreg free
  3724  001870  00FF               	reset		;# 
  3725  001872  D000               	goto	l7163
  3726  001874                     l7163:
  3727  001874  AA81               	btfss	3969,5,c	;volatile
  3728  001876  0012               	return	
  3729  001878  A256               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  3730  00187A  0012               	return	
  3731  00187C  AC57               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  3732  00187E  0012               	return	
  3733  001880  EF1C  F007         	goto	l782
  3734  001884  0012               	return	
  3735  001886  0012               	return		;funcret
  3736  001888                     __end_of_park_routine:
  3737                           	opt stack 0
  3738                           tblptru	equ	0xFF8
  3739                           tblptrh	equ	0xFF7
  3740                           tblptrl	equ	0xFF6
  3741                           tablat	equ	0xFF5
  3742                           postinc0	equ	0xFEE
  3743                           wreg	equ	0xFE8
  3744                           postinc2	equ	0xFDE
  3745                           postdec2	equ	0xFDD
  3746                           status	equ	0xFD8
  3747                           
  3748 ;; *************** function _parallelo *****************
  3749 ;; Defined at:
  3750 ;;		line 486 in file "parcheggio.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;		None
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;		None
  3755 ;; Return value:  Size  Location     Type
  3756 ;;		None               void
  3757 ;; Registers used:
  3758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3766 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3767 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3768 ;;Total ram usage:        2 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:   10
  3771 ;; This function calls:
  3772 ;;		___awtofl
  3773 ;;		___fladd
  3774 ;;		___fldiv
  3775 ;;		___flge
  3776 ;;		___flmul
  3777 ;;		___fltol
  3778 ;;		_abs
  3779 ;;		_asin
  3780 ;;		_can_send
  3781 ;;		_sqrt
  3782 ;; This function is called by:
  3783 ;;		_park_search
  3784 ;;		_park_routine
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           	psect	text4
  3789  004B7E                     __ptext4:
  3790                           	opt stack 0
  3791  004B7E                     _parallelo:
  3792                           	opt stack 19
  3793                           
  3794                           ;parcheggio.c: 487: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  3795                           
  3796                           ;incstack = 0
  3797  004B7E  EE20  F003         	lfsr	2,_sensor_distance+2	;volatile
  3798  004B82  CFDE F1B0          	movff	postinc2,??_parallelo
  3799  004B86  CFDD F1B1          	movff	postdec2,??_parallelo+1
  3800  004B8A  0101               	movlb	1	; () banked
  3801  004B8C  1FB0               	comf	??_parallelo& (0+255),f,b
  3802  004B8E  1FB1               	comf	(??_parallelo+1)& (0+255),f,b
  3803  004B90  4BB0               	infsnz	??_parallelo& (0+255),f,b
  3804  004B92  2BB1               	incf	(??_parallelo+1)& (0+255),f,b
  3805  004B94  5001               	movf	_sensor_distance,w,c	;volatile
  3806  004B96  0101               	movlb	1	; () banked
  3807  004B98  25B0               	addwf	??_parallelo& (0+255),w,b
  3808  004B9A  0100               	movlb	0	; () banked
  3809  004B9C  6F77               	movwf	abs@a& (0+255),b
  3810  004B9E  5002               	movf	_sensor_distance+1,w,c	;volatile
  3811  004BA0  0101               	movlb	1	; () banked
  3812  004BA2  21B1               	addwfc	(??_parallelo+1)& (0+255),w,b
  3813  004BA4  0100               	movlb	0	; () banked
  3814  004BA6  6F78               	movwf	(abs@a+1)& (0+255),b
  3815  004BA8  EC71  F032         	call	_abs	;wreg free
  3816  004BAC  C077  F081         	movff	?_abs,___awtofl@c
  3817  004BB0  C078  F082         	movff	?_abs+1,___awtofl@c+1
  3818  004BB4  EC89  F031         	call	___awtofl	;wreg free
  3819  004BB8  C081  F0D9         	movff	?___awtofl,_alignment_gap	;volatile
  3820  004BBC  C082  F0DA         	movff	?___awtofl+1,_alignment_gap+1	;volatile
  3821  004BC0  C083  F0DB         	movff	?___awtofl+2,_alignment_gap+2	;volatile
  3822  004BC4  C084  F0DC         	movff	?___awtofl+3,_alignment_gap+3	;volatile
  3823                           
  3824                           ;parcheggio.c: 488: if (alignment_gap < 30) {
  3825  004BC8  C0D9  F0B3         	movff	_alignment_gap,___flge@ff1	;volatile
  3826  004BCC  C0DA  F0B4         	movff	_alignment_gap+1,___flge@ff1+1	;volatile
  3827  004BD0  C0DB  F0B5         	movff	_alignment_gap+2,___flge@ff1+2	;volatile
  3828  004BD4  C0DC  F0B6         	movff	_alignment_gap+3,___flge@ff1+3	;volatile
  3829  004BD8  0E00               	movlw	0
  3830  004BDA  0100               	movlb	0	; () banked
  3831  004BDC  6FB7               	movwf	___flge@ff2& (0+255),b
  3832  004BDE  0E00               	movlw	0
  3833  004BE0  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  3834  004BE2  0EF0               	movlw	240
  3835  004BE4  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  3836  004BE6  0E41               	movlw	65
  3837  004BE8  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  3838  004BEA  EC1A  F02E         	call	___flge	;wreg free
  3839  004BEE  0100               	movlb	0	; () banked
  3840  004BF0  B0D8               	btfsc	status,0,c
  3841  004BF2  D0E8               	goto	l6803
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;parcheggio.c: 489: if ((sensor_distance[0] < 30) && (sensor_distance[1] < 30)) {
  3845  004BF4  5002               	movf	_sensor_distance+1,w,c	;volatile
  3846  004BF6  E103               	bnz	u8471
  3847  004BF8  0E1E               	movlw	30
  3848  004BFA  5C01               	subwf	_sensor_distance,w,c	;volatile
  3849  004BFC  B0D8               	btfsc	status,0,c
  3850  004BFE                     u8471:
  3851  004BFE  0012               	return	
  3852                           
  3853                           ; BSR set to: 0
  3854  004C00  5004               	movf	_sensor_distance+3,w,c	;volatile
  3855  004C02  E103               	bnz	u8481
  3856  004C04  0E1E               	movlw	30
  3857  004C06  5C03               	subwf	_sensor_distance+2,w,c	;volatile
  3858  004C08  B0D8               	btfsc	status,0,c
  3859  004C0A                     u8481:
  3860  004C0A  0012               	return	
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;parcheggio.c: 490: x = (((6)*(6)) + ((alignment_gap * alignment_gap)));
  3864  004C0C  C0D9  F085         	movff	_alignment_gap,___flmul@f2	;volatile
  3865  004C10  C0DA  F086         	movff	_alignment_gap+1,___flmul@f2+1	;volatile
  3866  004C14  C0DB  F087         	movff	_alignment_gap+2,___flmul@f2+2	;volatile
  3867  004C18  C0DC  F088         	movff	_alignment_gap+3,___flmul@f2+3	;volatile
  3868  004C1C  C0D9  F081         	movff	_alignment_gap,___flmul@f1	;volatile
  3869  004C20  C0DA  F082         	movff	_alignment_gap+1,___flmul@f1+1	;volatile
  3870  004C24  C0DB  F083         	movff	_alignment_gap+2,___flmul@f1+2	;volatile
  3871  004C28  C0DC  F084         	movff	_alignment_gap+3,___flmul@f1+3	;volatile
  3872  004C2C  EC9B  F02A         	call	___flmul	;wreg free
  3873  004C30  C081  F09F         	movff	?___flmul,___fladd@f1
  3874  004C34  C082  F0A0         	movff	?___flmul+1,___fladd@f1+1
  3875  004C38  C083  F0A1         	movff	?___flmul+2,___fladd@f1+2
  3876  004C3C  C084  F0A2         	movff	?___flmul+3,___fladd@f1+3
  3877  004C40  0E00               	movlw	0
  3878  004C42  0100               	movlb	0	; () banked
  3879  004C44  6FA3               	movwf	___fladd@f2& (0+255),b
  3880  004C46  0E00               	movlw	0
  3881  004C48  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  3882  004C4A  0E10               	movlw	16
  3883  004C4C  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  3884  004C4E  0E42               	movlw	66
  3885  004C50  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  3886  004C52  EC5E  F023         	call	___fladd	;wreg free
  3887  004C56  C09F  F015         	movff	?___fladd,_x	;volatile
  3888  004C5A  C0A0  F016         	movff	?___fladd+1,_x+1	;volatile
  3889  004C5E  C0A1  F017         	movff	?___fladd+2,_x+2	;volatile
  3890  004C62  C0A2  F018         	movff	?___fladd+3,_x+3	;volatile
  3891                           
  3892                           ;parcheggio.c: 491: x = sqrt(x);
  3893  004C66  C015  F0D1         	movff	_x,sqrt@y	;volatile
  3894  004C6A  C016  F0D2         	movff	_x+1,sqrt@y+1	;volatile
  3895  004C6E  C017  F0D3         	movff	_x+2,sqrt@y+2	;volatile
  3896  004C72  C018  F0D4         	movff	_x+3,sqrt@y+3	;volatile
  3897  004C76  ECE9  F026         	call	_sqrt	;wreg free
  3898  004C7A  C0D1  F015         	movff	?_sqrt,_x	;volatile
  3899  004C7E  C0D2  F016         	movff	?_sqrt+1,_x+1	;volatile
  3900  004C82  C0D3  F017         	movff	?_sqrt+2,_x+2	;volatile
  3901  004C86  C0D4  F018         	movff	?_sqrt+3,_x+3	;volatile
  3902                           
  3903                           ;parcheggio.c: 492: z = alignment_gap / x;
  3904  004C8A  C0D9  F090         	movff	_alignment_gap,___fldiv@f1	;volatile
  3905  004C8E  C0DA  F091         	movff	_alignment_gap+1,___fldiv@f1+1	;volatile
  3906  004C92  C0DB  F092         	movff	_alignment_gap+2,___fldiv@f1+2	;volatile
  3907  004C96  C0DC  F093         	movff	_alignment_gap+3,___fldiv@f1+3	;volatile
  3908  004C9A  C015  F094         	movff	_x,___fldiv@f2	;volatile
  3909  004C9E  C016  F095         	movff	_x+1,___fldiv@f2+1	;volatile
  3910  004CA2  C017  F096         	movff	_x+2,___fldiv@f2+2	;volatile
  3911  004CA6  C018  F097         	movff	_x+3,___fldiv@f2+3	;volatile
  3912  004CAA  EC4D  F02B         	call	___fldiv	;wreg free
  3913  004CAE  C090  F0DD         	movff	?___fldiv,_z	;volatile
  3914  004CB2  C091  F0DE         	movff	?___fldiv+1,_z+1	;volatile
  3915  004CB6  C092  F0DF         	movff	?___fldiv+2,_z+2	;volatile
  3916  004CBA  C093  F0E0         	movff	?___fldiv+3,_z+3	;volatile
  3917                           
  3918                           ;parcheggio.c: 493: z = asin(z);
  3919  004CBE  C0DD  F194         	movff	_z,asin@x	;volatile
  3920  004CC2  C0DE  F195         	movff	_z+1,asin@x+1	;volatile
  3921  004CC6  C0DF  F196         	movff	_z+2,asin@x+2	;volatile
  3922  004CCA  C0E0  F197         	movff	_z+3,asin@x+3	;volatile
  3923  004CCE  EC3E  F020         	call	_asin	;wreg free
  3924  004CD2  C194  F0DD         	movff	?_asin,_z	;volatile
  3925  004CD6  C195  F0DE         	movff	?_asin+1,_z+1	;volatile
  3926  004CDA  C196  F0DF         	movff	?_asin+2,_z+2	;volatile
  3927  004CDE  C197  F0E0         	movff	?_asin+3,_z+3	;volatile
  3928                           
  3929                           ;parcheggio.c: 494: z = z / 3.14159265358979323846 * 180;
  3930  004CE2  0EDB               	movlw	219
  3931  004CE4  0100               	movlb	0	; () banked
  3932  004CE6  6F94               	movwf	___fldiv@f2& (0+255),b
  3933  004CE8  0E0F               	movlw	15
  3934  004CEA  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  3935  004CEC  0E49               	movlw	73
  3936  004CEE  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  3937  004CF0  0E40               	movlw	64
  3938  004CF2  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  3939  004CF4  C0DD  F090         	movff	_z,___fldiv@f1	;volatile
  3940  004CF8  C0DE  F091         	movff	_z+1,___fldiv@f1+1	;volatile
  3941  004CFC  C0DF  F092         	movff	_z+2,___fldiv@f1+2	;volatile
  3942  004D00  C0E0  F093         	movff	_z+3,___fldiv@f1+3	;volatile
  3943  004D04  EC4D  F02B         	call	___fldiv	;wreg free
  3944  004D08  C090  F081         	movff	?___fldiv,___flmul@f1
  3945  004D0C  C091  F082         	movff	?___fldiv+1,___flmul@f1+1
  3946  004D10  C092  F083         	movff	?___fldiv+2,___flmul@f1+2
  3947  004D14  C093  F084         	movff	?___fldiv+3,___flmul@f1+3
  3948  004D18  0E00               	movlw	0
  3949  004D1A  0100               	movlb	0	; () banked
  3950  004D1C  6F85               	movwf	___flmul@f2& (0+255),b
  3951  004D1E  0E00               	movlw	0
  3952  004D20  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  3953  004D22  0E34               	movlw	52
  3954  004D24  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  3955  004D26  0E43               	movlw	67
  3956  004D28  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  3957  004D2A  EC9B  F02A         	call	___flmul	;wreg free
  3958  004D2E  C081  F0DD         	movff	?___flmul,_z	;volatile
  3959  004D32  C082  F0DE         	movff	?___flmul+1,_z+1	;volatile
  3960  004D36  C083  F0DF         	movff	?___flmul+2,_z+2	;volatile
  3961  004D3A  C084  F0E0         	movff	?___flmul+3,_z+3	;volatile
  3962                           
  3963                           ;parcheggio.c: 495: data_correction[0] = z;
  3964  004D3E  C0DD  F0AF         	movff	_z,___fltol@f1	;volatile
  3965  004D42  C0DE  F0B0         	movff	_z+1,___fltol@f1+1	;volatile
  3966  004D46  C0DF  F0B1         	movff	_z+2,___fltol@f1+2	;volatile
  3967  004D4A  C0E0  F0B2         	movff	_z+3,___fltol@f1+3	;volatile
  3968  004D4E  EC79  F02C         	call	___fltol	;wreg free
  3969  004D52  0100               	movlb	0	; () banked
  3970  004D54  51AF               	movf	?___fltol& (0+255),w,b
  3971  004D56  0101               	movlb	1	; () banked
  3972  004D58  6F5B               	movwf	_data_correction& (0+255),b	;volatile
  3973                           
  3974                           ; BSR set to: 1
  3975                           ;parcheggio.c: 497: if (sensor_distance[0] < sensor_distance[1]) {
  3976  004D5A  5003               	movf	_sensor_distance+2,w,c	;volatile
  3977  004D5C  5C01               	subwf	_sensor_distance,w,c	;volatile
  3978  004D5E  5004               	movf	_sensor_distance+3,w,c	;volatile
  3979  004D60  5802               	subwfb	_sensor_distance+1,w,c	;volatile
  3980  004D62  B0D8               	btfsc	status,0,c
  3981  004D64  D002               	goto	l6795
  3982                           
  3983                           ; BSR set to: 1
  3984                           ;parcheggio.c: 498: data_correction[1] = 0;
  3985  004D66  0E00               	movlw	0
  3986  004D68  D001               	goto	L1
  3987  004D6A                     l6795:
  3988                           
  3989                           ; BSR set to: 1
  3990                           ;parcheggio.c: 500: data_correction[1] = 1;
  3991  004D6A  0E01               	movlw	1
  3992  004D6C                     L1:
  3993  004D6C  0101               	movlb	1	; () banked
  3994  004D6E  6F5C               	movwf	(_data_correction+1)& (0+255),b	;volatile
  3995  004D70  D000               	goto	l6797
  3996  004D72                     l6797:
  3997                           
  3998                           ; BSR set to: 1
  3999                           ;parcheggio.c: 501: }
  4000                           ;parcheggio.c: 502: if ((old_alignment_gap != alignment_gap) || (old_dir_correction != d
      +                          ata_correction[1])) {
  4001  004D72  0100               	movlb	0	; () banked
  4002  004D74  51D9               	movf	_alignment_gap& (0+255),w,b	;volatile
  4003  004D76  1811               	xorwf	_old_alignment_gap,w,c	;volatile
  4004  004D78  E114               	bnz	l840
  4005  004D7A  0100               	movlb	0	; () banked
  4006  004D7C  51DA               	movf	(_alignment_gap+1)& (0+255),w,b	;volatile
  4007  004D7E  1812               	xorwf	_old_alignment_gap+1,w,c	;volatile
  4008  004D80  E110               	bnz	l840
  4009  004D82  0100               	movlb	0	; () banked
  4010  004D84  51DB               	movf	(_alignment_gap+2)& (0+255),w,b	;volatile
  4011  004D86  1813               	xorwf	_old_alignment_gap+2,w,c	;volatile
  4012  004D88  E10C               	bnz	l840
  4013  004D8A  0100               	movlb	0	; () banked
  4014  004D8C  51DC               	movf	(_alignment_gap+3)& (0+255),w,b	;volatile
  4015  004D8E  1814               	xorwf	_old_alignment_gap+3,w,c	;volatile
  4016  004D90  A4D8               	btfss	status,2,c
  4017  004D92  D007               	goto	l840
  4018                           
  4019                           ; BSR set to: 0
  4020  004D94  0E00               	movlw	0
  4021  004D96  B657               	btfsc	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  4022  004D98  0E01               	movlw	1
  4023  004D9A  0101               	movlb	1	; () banked
  4024  004D9C  195C               	xorwf	(_data_correction+1)& (0+255),w,b	;volatile
  4025  004D9E  B4D8               	btfsc	status,2,c
  4026  004DA0  0012               	return	
  4027  004DA2                     l840:
  4028                           
  4029                           ;parcheggio.c: 503: old_alignment_gap = alignment_gap;
  4030  004DA2  C0D9  F011         	movff	_alignment_gap,_old_alignment_gap	;volatile
  4031  004DA6  C0DA  F012         	movff	_alignment_gap+1,_old_alignment_gap+1	;volatile
  4032  004DAA  C0DB  F013         	movff	_alignment_gap+2,_old_alignment_gap+2	;volatile
  4033  004DAE  C0DC  F014         	movff	_alignment_gap+3,_old_alignment_gap+3	;volatile
  4034                           
  4035                           ;parcheggio.c: 504: old_dir_correction = data_correction[1];
  4036  004DB2  0101               	movlb	1	; () banked
  4037  004DB4  B15C               	btfsc	(_data_correction+1)& (0+255),0,b	;volatile
  4038  004DB6  D002               	bra	u8525
  4039  004DB8  9657               	bcf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  4040  004DBA  D001               	bra	u8526
  4041  004DBC                     u8525:
  4042  004DBC  8657               	bsf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  4043  004DBE                     u8526:
  4044                           
  4045                           ;parcheggio.c: 505: can_send();
  4046  004DBE  EC93  F02D         	call	_can_send	;wreg free
  4047                           
  4048                           ;parcheggio.c: 506: }
  4049                           ;parcheggio.c: 507: }
  4050                           ;parcheggio.c: 508: } else {
  4051  004DC2  0012               	return	
  4052  004DC4                     l6803:
  4053                           
  4054                           ;parcheggio.c: 509: data_correction[0] = 0;
  4055  004DC4  0E00               	movlw	0
  4056  004DC6  0101               	movlb	1	; () banked
  4057  004DC8  6F5B               	movwf	_data_correction& (0+255),b	;volatile
  4058                           
  4059                           ; BSR set to: 1
  4060                           ;parcheggio.c: 510: can_send();
  4061  004DCA  EC93  F02D         	call	_can_send	;wreg free
  4062  004DCE  0012               	return	
  4063  004DD0  0012               	return		;funcret
  4064  004DD2                     __end_of_parallelo:
  4065                           	opt stack 0
  4066                           tblptru	equ	0xFF8
  4067                           tblptrh	equ	0xFF7
  4068                           tblptrl	equ	0xFF6
  4069                           tablat	equ	0xFF5
  4070                           postinc0	equ	0xFEE
  4071                           wreg	equ	0xFE8
  4072                           postinc2	equ	0xFDE
  4073                           postdec2	equ	0xFDD
  4074                           status	equ	0xFD8
  4075                           
  4076 ;; *************** function _can_send *****************
  4077 ;; Defined at:
  4078 ;;		line 463 in file "parcheggio.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;		None
  4083 ;; Return value:  Size  Location     Type
  4084 ;;		None               void
  4085 ;; Registers used:
  4086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4096 ;;Total ram usage:        0 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; Hardware stack levels required when called:    6
  4099 ;; This function calls:
  4100 ;;		_CANisTxReady
  4101 ;;		_CANsendMessage
  4102 ;; This function is called by:
  4103 ;;		_park_routine
  4104 ;;		_parallelo
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           	psect	text5
  4109  005B26                     __ptext5:
  4110                           	opt stack 0
  4111  005B26                     _can_send:
  4112                           	opt stack 22
  4113                           
  4114                           ;parcheggio.c: 464: if (start_operation == 1) {
  4115                           
  4116                           ;incstack = 0
  4117  005B26  BC57               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  4118  005B28  D002               	goto	l6627
  4119  005B2A  D066               	goto	l6647
  4120                           
  4121                           ;parcheggio.c: 466: while (CANisTxReady() != 1);
  4122  005B2C  D000               	goto	l6627
  4123  005B2E                     l6627:
  4124  005B2E  EC9B  F032         	call	_CANisTxReady	;wreg free
  4125  005B32  06E8               	decf	wreg,f,c
  4126  005B34  A4D8               	btfss	status,2,c
  4127  005B36  D7FB               	goto	l6627
  4128                           
  4129                           ;parcheggio.c: 467: CANsendMessage(0b00000000111, data_steering, 8, CAN_CONFIG_STD_MSG &
      +                           CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  4130  005B38  0E07               	movlw	7
  4131  005B3A  0100               	movlb	0	; () banked
  4132  005B3C  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  4133  005B3E  0E00               	movlw	0
  4134  005B40  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  4135  005B42  0E00               	movlw	0
  4136  005B44  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  4137  005B46  0E00               	movlw	0
  4138  005B48  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  4139  005B4A  0E6B               	movlw	low _data_steering
  4140  005B4C  0100               	movlb	0	; () banked
  4141  005B4E  6F7B               	movwf	CANsendMessage@data& (0+255),b
  4142  005B50  0E01               	movlw	high _data_steering
  4143  005B52  0100               	movlb	0	; () banked
  4144  005B54  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  4145  005B56  0E08               	movlw	8
  4146  005B58  0100               	movlb	0	; () banked
  4147  005B5A  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  4148  005B5C  0EBC               	movlw	188
  4149  005B5E  0100               	movlb	0	; () banked
  4150  005B60  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  4151  005B62  ECD9  F011         	call	_CANsendMessage	;wreg free
  4152                           
  4153                           ;parcheggio.c: 470: data_speed[0] = set_speed;
  4154  005B66  C0E5  F163         	movff	_set_speed,_data_speed	;volatile
  4155                           
  4156                           ;parcheggio.c: 471: data_speed[1] = (set_speed >> 8);
  4157  005B6A  0100               	movlb	0	; () banked
  4158  005B6C  51E6               	movf	(_set_speed+1)& (0+255),w,b	;volatile
  4159  005B6E  0101               	movlb	1	; () banked
  4160  005B70  6F64               	movwf	(_data_speed+1)& (0+255),b	;volatile
  4161                           
  4162                           ; BSR set to: 1
  4163                           ;parcheggio.c: 472: data_speed[2] = dir;
  4164  005B72  0E00               	movlw	0
  4165  005B74  B856               	btfsc	_dir/(0+8),_dir& (0+7),c	;volatile
  4166  005B76  0E01               	movlw	1
  4167  005B78  0101               	movlb	1	; () banked
  4168  005B7A  6F65               	movwf	(_data_speed+2)& (0+255),b	;volatile
  4169                           
  4170                           ; BSR set to: 1
  4171                           
  4172                           ;parcheggio.c: 473: while (CANisTxReady() != 1);
  4173  005B7C  D000               	goto	l6637
  4174  005B7E                     l6637:
  4175  005B7E  EC9B  F032         	call	_CANisTxReady	;wreg free
  4176  005B82  06E8               	decf	wreg,f,c
  4177  005B84  A4D8               	btfss	status,2,c
  4178  005B86  D7FB               	goto	l6637
  4179                           
  4180                           ;parcheggio.c: 474: CANsendMessage(0b00000000101, data_speed, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  4181  005B88  0E05               	movlw	5
  4182  005B8A  0100               	movlb	0	; () banked
  4183  005B8C  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  4184  005B8E  0E00               	movlw	0
  4185  005B90  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  4186  005B92  0E00               	movlw	0
  4187  005B94  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  4188  005B96  0E00               	movlw	0
  4189  005B98  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  4190  005B9A  0E63               	movlw	low _data_speed
  4191  005B9C  0100               	movlb	0	; () banked
  4192  005B9E  6F7B               	movwf	CANsendMessage@data& (0+255),b
  4193  005BA0  0E01               	movlw	high _data_speed
  4194  005BA2  0100               	movlb	0	; () banked
  4195  005BA4  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  4196  005BA6  0E08               	movlw	8
  4197  005BA8  0100               	movlb	0	; () banked
  4198  005BAA  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  4199  005BAC  0EBC               	movlw	188
  4200  005BAE  0100               	movlb	0	; () banked
  4201  005BB0  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  4202  005BB2  ECD9  F011         	call	_CANsendMessage	;wreg free
  4203                           
  4204                           ;parcheggio.c: 477: data_brake[1] = 0;
  4205  005BB6  0E00               	movlw	0
  4206  005BB8  6E27               	movwf	_data_brake+1,c	;volatile
  4207                           
  4208                           ;parcheggio.c: 478: while (CANisTxReady() != 1);
  4209  005BBA  D000               	goto	l6643
  4210  005BBC                     l6643:
  4211  005BBC  EC9B  F032         	call	_CANisTxReady	;wreg free
  4212  005BC0  06E8               	decf	wreg,f,c
  4213  005BC2  A4D8               	btfss	status,2,c
  4214  005BC4  D7FB               	goto	l6643
  4215                           
  4216                           ;parcheggio.c: 479: CANsendMessage(0b00000000110, data_brake, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  4217  005BC6  0E06               	movlw	6
  4218  005BC8  0100               	movlb	0	; () banked
  4219  005BCA  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  4220  005BCC  0E00               	movlw	0
  4221  005BCE  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  4222  005BD0  0E00               	movlw	0
  4223  005BD2  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  4224  005BD4  0E00               	movlw	0
  4225  005BD6  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  4226  005BD8  0E26               	movlw	low _data_brake
  4227  005BDA  0100               	movlb	0	; () banked
  4228  005BDC  6F7B               	movwf	CANsendMessage@data& (0+255),b
  4229  005BDE  0E00               	movlw	high _data_brake
  4230  005BE0  0100               	movlb	0	; () banked
  4231  005BE2  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  4232  005BE4  0E08               	movlw	8
  4233  005BE6  0100               	movlb	0	; () banked
  4234  005BE8  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  4235  005BEA  0EBC               	movlw	188
  4236  005BEC  0100               	movlb	0	; () banked
  4237  005BEE  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  4238  005BF0  ECD9  F011         	call	_CANsendMessage	;wreg free
  4239                           
  4240                           ;parcheggio.c: 480: } else {
  4241  005BF4  0012               	return	
  4242                           
  4243                           ;parcheggio.c: 481: while (CANisTxReady() != 1);
  4244  005BF6  D000               	goto	l6647
  4245  005BF8                     l6647:
  4246  005BF8  EC9B  F032         	call	_CANisTxReady	;wreg free
  4247  005BFC  06E8               	decf	wreg,f,c
  4248  005BFE  A4D8               	btfss	status,2,c
  4249  005C00  D7FB               	goto	l6647
  4250                           
  4251                           ;parcheggio.c: 482: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  4252  005C02  0E10               	movlw	16
  4253  005C04  0100               	movlb	0	; () banked
  4254  005C06  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  4255  005C08  0E00               	movlw	0
  4256  005C0A  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  4257  005C0C  0E00               	movlw	0
  4258  005C0E  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  4259  005C10  0E00               	movlw	0
  4260  005C12  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  4261  005C14  0E5B               	movlw	low _data_correction
  4262  005C16  0100               	movlb	0	; () banked
  4263  005C18  6F7B               	movwf	CANsendMessage@data& (0+255),b
  4264  005C1A  0E01               	movlw	high _data_correction
  4265  005C1C  0100               	movlb	0	; () banked
  4266  005C1E  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  4267  005C20  0E08               	movlw	8
  4268  005C22  0100               	movlb	0	; () banked
  4269  005C24  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  4270  005C26  0EBC               	movlw	188
  4271  005C28  0100               	movlb	0	; () banked
  4272  005C2A  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  4273  005C2C  ECD9  F011         	call	_CANsendMessage	;wreg free
  4274  005C30  0012               	return	
  4275  005C32  0012               	return		;funcret
  4276  005C34                     __end_of_can_send:
  4277                           	opt stack 0
  4278                           tblptru	equ	0xFF8
  4279                           tblptrh	equ	0xFF7
  4280                           tblptrl	equ	0xFF6
  4281                           tablat	equ	0xFF5
  4282                           postinc0	equ	0xFEE
  4283                           wreg	equ	0xFE8
  4284                           postinc2	equ	0xFDE
  4285                           postdec2	equ	0xFDD
  4286                           status	equ	0xFD8
  4287                           
  4288 ;; *************** function _CANsendMessage *****************
  4289 ;; Defined at:
  4290 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;  identifier      4   23[BANK0 ] unsigned long 
  4293 ;;  data            2   27[BANK0 ] PTR unsigned char 
  4294 ;;		 -> data_speed(8), data_correction(8), data_test(8), data(8), 
  4295 ;;		 -> data_brake(8), data_steering(8), sensor_distance_short(8), 
  4296 ;;  dataLength      1   29[BANK0 ] unsigned char 
  4297 ;;  flags           1   30[BANK0 ] enum E16376
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;  tamp            4   35[BANK0 ] unsigned long 
  4300 ;; Return value:  Size  Location     Type
  4301 ;;		None               void
  4302 ;; Registers used:
  4303 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4309 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;Total ram usage:       16 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    5
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_main
  4320 ;;		_park_search
  4321 ;;		_park_routine
  4322 ;;		_can_send
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           	psect	text6
  4327  0023B2                     __ptext6:
  4328                           	opt stack 0
  4329  0023B2                     _CANsendMessage:
  4330                           	opt stack 22
  4331                           
  4332                           ;inc\CANlib.h: 296: unsigned long tamp;
  4333                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
  4334                           
  4335                           ;incstack = 0
  4336  0023B2  010F               	movlb	15	; () banked
  4337  0023B4  B740               	btfsc	64,3,b	;volatile
  4338  0023B6  D142               	goto	l361
  4339                           
  4340                           ; BSR set to: 15
  4341                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
  4342  0023B8  C07D  FF45         	movff	CANsendMessage@dataLength,3909	;volatile
  4343                           
  4344                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
  4345  0023BC  0100               	movlb	0	; () banked
  4346  0023BE  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  4347  0023C0  D003               	goto	l362
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
  4351  0023C2  010F               	movlb	15	; () banked
  4352  0023C4  8D45               	bsf	69,6,b	;volatile
  4353  0023C6  D002               	goto	l363
  4354  0023C8                     l362:
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;inc\CANlib.h: 302: else
  4358                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
  4359  0023C8  010F               	movlb	15	; () banked
  4360  0023CA  9D45               	bcf	69,6,b	;volatile
  4361  0023CC                     l363:
  4362                           
  4363                           ; BSR set to: 15
  4364                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
  4365  0023CC  0100               	movlb	0	; () banked
  4366  0023CE  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  4367  0023D0  D07A               	goto	l364
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;inc\CANlib.h: 306: {
  4371                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
  4372  0023D2  0100               	movlb	0	; () banked
  4373  0023D4  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  4374  0023D6  0100               	movlb	0	; () banked
  4375  0023D8  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4376  0023DA  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4377  0023DC  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4378  0023DE  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
  4382  0023E0  C083  FF44         	movff	CANsendMessage@tamp,3908	;volatile
  4383                           
  4384                           ; BSR set to: 0
  4385                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
  4386  0023E4  0E00               	movlw	0
  4387  0023E6  0100               	movlb	0	; () banked
  4388  0023E8  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4389  0023EA  0100               	movlb	0	; () banked
  4390  0023EC  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4391  0023EE  0EFF               	movlw	255
  4392  0023F0  0100               	movlb	0	; () banked
  4393  0023F2  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4394  0023F4  0100               	movlb	0	; () banked
  4395  0023F6  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4396  0023F8  0E00               	movlw	0
  4397  0023FA  0100               	movlb	0	; () banked
  4398  0023FC  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4399  0023FE  0100               	movlb	0	; () banked
  4400  002400  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4401  002402  0E00               	movlw	0
  4402  002404  0100               	movlb	0	; () banked
  4403  002406  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4404  002408  0100               	movlb	0	; () banked
  4405  00240A  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
  4409  00240C  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4410  002410  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4411  002414  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4412  002418  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4413  00241C  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  4414  002420  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  4415  002424  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  4416  002428  0100               	movlb	0	; () banked
  4417  00242A  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  4418  00242C  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4419  002430  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4420  002434  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4421  002438  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
  4425  00243C  C083  FF43         	movff	CANsendMessage@tamp,3907	;volatile
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
  4429  002440  0E00               	movlw	0
  4430  002442  010F               	movlb	15	; () banked
  4431  002444  6F42               	movwf	66,b	;volatile
  4432                           
  4433                           ; BSR set to: 15
  4434                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
  4435  002446  010F               	movlb	15	; () banked
  4436  002448  8742               	bsf	66,3,b	;volatile
  4437                           
  4438                           ; BSR set to: 15
  4439                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
  4440  00244A  0100               	movlb	0	; () banked
  4441  00244C  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  4442  00244E  D002               	goto	l365
  4443                           
  4444                           ; BSR set to: 0
  4445                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
  4446  002450  010F               	movlb	15	; () banked
  4447  002452  8142               	bsf	66,0,b	;volatile
  4448  002454                     l365:
  4449                           
  4450                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
  4451  002454  0100               	movlb	0	; () banked
  4452  002456  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  4453  002458  D002               	goto	l366
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
  4457  00245A  010F               	movlb	15	; () banked
  4458  00245C  8342               	bsf	66,1,b	;volatile
  4459  00245E                     l366:
  4460                           
  4461                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
  4462  00245E  0100               	movlb	0	; () banked
  4463  002460  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  4464  002462  D002               	goto	l367
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
  4468  002464  010F               	movlb	15	; () banked
  4469  002466  8B42               	bsf	66,5,b	;volatile
  4470  002468                     l367:
  4471                           
  4472                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
  4473  002468  0100               	movlb	0	; () banked
  4474  00246A  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  4475  00246C  D002               	goto	l368
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
  4479  00246E  010F               	movlb	15	; () banked
  4480  002470  8D42               	bsf	66,6,b	;volatile
  4481  002472                     l368:
  4482                           
  4483                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
  4484  002472  0100               	movlb	0	; () banked
  4485  002474  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  4486  002476  D003               	goto	l4243
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
  4490  002478  010F               	movlb	15	; () banked
  4491  00247A  8F42               	bsf	66,7,b	;volatile
  4492  00247C  D000               	goto	l4243
  4493  00247E                     l4243:
  4494                           
  4495                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
  4496  00247E  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4497  002482  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4498  002486  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4499  00248A  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4500  00248E  0E16               	movlw	22
  4501  002490  D006               	goto	u4420
  4502  002492                     u4425:
  4503  002492  0100               	movlb	0	; () banked
  4504  002494  90D8               	bcf	status,0,c
  4505  002496  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4506  002498  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4507  00249A  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4508  00249C  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4509  00249E                     u4420:
  4510  00249E  2EE8               	decfsz	wreg,f,c
  4511  0024A0  D7F8               	goto	u4425
  4512  0024A2  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4513  0024A6  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4514  0024AA  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4515  0024AE  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
  4519  0024B2  0100               	movlb	0	; () banked
  4520  0024B4  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4521  0024B6  0100               	movlb	0	; () banked
  4522  0024B8  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4523  0024BA  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4524  0024BC  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4525  0024BE  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
  4529  0024C0  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  4530                           
  4531                           ;inc\CANlib.h: 332: }
  4532  0024C4  D05A               	goto	l4263
  4533  0024C6                     l364:
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;inc\CANlib.h: 334: else
  4537                           ;inc\CANlib.h: 336: {
  4538                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
  4539  0024C6  010F               	movlb	15	; () banked
  4540  0024C8  9742               	bcf	66,3,b	;volatile
  4541                           
  4542                           ; BSR set to: 15
  4543                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
  4544  0024CA  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4545  0024CE  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4546  0024D2  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4547  0024D6  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4548  0024DA  0E04               	movlw	4
  4549  0024DC  D006               	goto	u4430
  4550  0024DE                     u4435:
  4551  0024DE  0100               	movlb	0	; () banked
  4552  0024E0  90D8               	bcf	status,0,c
  4553  0024E2  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4554  0024E4  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4555  0024E6  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4556  0024E8  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4557  0024EA                     u4430:
  4558  0024EA  2EE8               	decfsz	wreg,f,c
  4559  0024EC  D7F8               	goto	u4435
  4560  0024EE  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4561  0024F2  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4562  0024F6  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4563  0024FA  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
  4567  0024FE  0100               	movlb	0	; () banked
  4568  002500  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4569  002502  0100               	movlb	0	; () banked
  4570  002504  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4571  002506  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4572  002508  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4573  00250A  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
  4577  00250C  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
  4581  002510  0E07               	movlw	7
  4582  002512  0100               	movlb	0	; () banked
  4583  002514  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4584  002516  0100               	movlb	0	; () banked
  4585  002518  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4586  00251A  0E00               	movlw	0
  4587  00251C  0100               	movlb	0	; () banked
  4588  00251E  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4589  002520  0100               	movlb	0	; () banked
  4590  002522  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4591  002524  0E00               	movlw	0
  4592  002526  0100               	movlb	0	; () banked
  4593  002528  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4594  00252A  0100               	movlb	0	; () banked
  4595  00252C  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4596  00252E  0E00               	movlw	0
  4597  002530  0100               	movlb	0	; () banked
  4598  002532  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4599  002534  0100               	movlb	0	; () banked
  4600  002536  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;inc\CANlib.h: 344: tamp = tamp << 5;
  4604  002538  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4605  00253C  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4606  002540  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4607  002544  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4608  002548  0E05               	movlw	5
  4609  00254A                     u4445:
  4610  00254A  90D8               	bcf	status,0,c
  4611  00254C  0100               	movlb	0	; () banked
  4612  00254E  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  4613  002550  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  4614  002552  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  4615  002554  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  4616  002556  2EE8               	decfsz	wreg,f,c
  4617  002558  D7F8               	goto	u4445
  4618  00255A  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4619  00255E  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4620  002562  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4621  002566  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
  4625  00256A  010F               	movlb	15	; () banked
  4626  00256C  5142               	movf	66,w,b	;volatile
  4627  00256E  0B1F               	andlw	31
  4628  002570  010F               	movlb	15	; () banked
  4629  002572  6F42               	movwf	66,b	;volatile
  4630                           
  4631                           ; BSR set to: 15
  4632                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
  4633  002574  C083  FF42         	movff	CANsendMessage@tamp,3906	;volatile
  4634  002578  D000               	goto	l4263
  4635  00257A                     l4263:
  4636                           
  4637                           ;inc\CANlib.h: 347: }
  4638                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
  4639  00257A  0100               	movlb	0	; () banked
  4640  00257C  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  4641  00257E  D003               	goto	l371
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
  4645  002580  010F               	movlb	15	; () banked
  4646  002582  8140               	bsf	64,0,b	;volatile
  4647  002584  D002               	goto	l372
  4648  002586                     l371:
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;inc\CANlib.h: 351: else
  4652                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
  4653  002586  010F               	movlb	15	; () banked
  4654  002588  9140               	bcf	64,0,b	;volatile
  4655  00258A                     l372:
  4656                           
  4657                           ; BSR set to: 15
  4658                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
  4659  00258A  0100               	movlb	0	; () banked
  4660  00258C  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  4661  00258E  D003               	goto	l373
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
  4665  002590  010F               	movlb	15	; () banked
  4666  002592  8340               	bsf	64,1,b	;volatile
  4667  002594  D003               	goto	l4269
  4668  002596                     l373:
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;inc\CANlib.h: 355: else
  4672                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
  4673  002596  010F               	movlb	15	; () banked
  4674  002598  9340               	bcf	64,1,b	;volatile
  4675  00259A  D000               	goto	l4269
  4676  00259C                     l4269:
  4677                           
  4678                           ; BSR set to: 15
  4679                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
  4680  00259C  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  4681  0025A0  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  4682  0025A4  50DF               	movf	indf2,w,c
  4683  0025A6  010F               	movlb	15	; () banked
  4684  0025A8  6F46               	movwf	70,b	;volatile
  4685                           
  4686                           ; BSR set to: 15
  4687                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
  4688  0025AA  0100               	movlb	0	; () banked
  4689  0025AC  EE20 F001          	lfsr	2,1
  4690  0025B0  517B               	movf	CANsendMessage@data& (0+255),w,b
  4691  0025B2  26D9               	addwf	fsr2l,f,c
  4692  0025B4  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4693  0025B6  22DA               	addwfc	fsr2h,f,c
  4694  0025B8  50DF               	movf	indf2,w,c
  4695  0025BA  010F               	movlb	15	; () banked
  4696  0025BC  6F47               	movwf	71,b	;volatile
  4697                           
  4698                           ; BSR set to: 15
  4699                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
  4700  0025BE  0100               	movlb	0	; () banked
  4701  0025C0  EE20 F002          	lfsr	2,2
  4702  0025C4  517B               	movf	CANsendMessage@data& (0+255),w,b
  4703  0025C6  26D9               	addwf	fsr2l,f,c
  4704  0025C8  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4705  0025CA  22DA               	addwfc	fsr2h,f,c
  4706  0025CC  50DF               	movf	indf2,w,c
  4707  0025CE  010F               	movlb	15	; () banked
  4708  0025D0  6F48               	movwf	72,b	;volatile
  4709                           
  4710                           ; BSR set to: 15
  4711                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
  4712  0025D2  0100               	movlb	0	; () banked
  4713  0025D4  EE20 F003          	lfsr	2,3
  4714  0025D8  517B               	movf	CANsendMessage@data& (0+255),w,b
  4715  0025DA  26D9               	addwf	fsr2l,f,c
  4716  0025DC  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4717  0025DE  22DA               	addwfc	fsr2h,f,c
  4718  0025E0  50DF               	movf	indf2,w,c
  4719  0025E2  010F               	movlb	15	; () banked
  4720  0025E4  6F49               	movwf	73,b	;volatile
  4721                           
  4722                           ; BSR set to: 15
  4723                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
  4724  0025E6  0100               	movlb	0	; () banked
  4725  0025E8  EE20 F004          	lfsr	2,4
  4726  0025EC  517B               	movf	CANsendMessage@data& (0+255),w,b
  4727  0025EE  26D9               	addwf	fsr2l,f,c
  4728  0025F0  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4729  0025F2  22DA               	addwfc	fsr2h,f,c
  4730  0025F4  50DF               	movf	indf2,w,c
  4731  0025F6  010F               	movlb	15	; () banked
  4732  0025F8  6F4A               	movwf	74,b	;volatile
  4733                           
  4734                           ; BSR set to: 15
  4735                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
  4736  0025FA  0100               	movlb	0	; () banked
  4737  0025FC  EE20 F005          	lfsr	2,5
  4738  002600  517B               	movf	CANsendMessage@data& (0+255),w,b
  4739  002602  26D9               	addwf	fsr2l,f,c
  4740  002604  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4741  002606  22DA               	addwfc	fsr2h,f,c
  4742  002608  50DF               	movf	indf2,w,c
  4743  00260A  010F               	movlb	15	; () banked
  4744  00260C  6F4B               	movwf	75,b	;volatile
  4745                           
  4746                           ; BSR set to: 15
  4747                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
  4748  00260E  0100               	movlb	0	; () banked
  4749  002610  EE20 F006          	lfsr	2,6
  4750  002614  517B               	movf	CANsendMessage@data& (0+255),w,b
  4751  002616  26D9               	addwf	fsr2l,f,c
  4752  002618  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4753  00261A  22DA               	addwfc	fsr2h,f,c
  4754  00261C  50DF               	movf	indf2,w,c
  4755  00261E  010F               	movlb	15	; () banked
  4756  002620  6F4C               	movwf	76,b	;volatile
  4757                           
  4758                           ; BSR set to: 15
  4759                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
  4760  002622  0100               	movlb	0	; () banked
  4761  002624  EE20 F007          	lfsr	2,7
  4762  002628  517B               	movf	CANsendMessage@data& (0+255),w,b
  4763  00262A  26D9               	addwf	fsr2l,f,c
  4764  00262C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4765  00262E  22DA               	addwfc	fsr2h,f,c
  4766  002630  50DF               	movf	indf2,w,c
  4767  002632  010F               	movlb	15	; () banked
  4768  002634  6F4D               	movwf	77,b	;volatile
  4769                           
  4770                           ; BSR set to: 15
  4771                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
  4772  002636  010F               	movlb	15	; () banked
  4773  002638  8740               	bsf	64,3,b	;volatile
  4774                           
  4775                           ; BSR set to: 15
  4776                           ;inc\CANlib.h: 368: return;
  4777  00263A  0012               	return	
  4778  00263C                     l361:
  4779                           
  4780                           ; BSR set to: 15
  4781                           ;inc\CANlib.h: 369: }
  4782                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
  4783  00263C  010F               	movlb	15	; () banked
  4784  00263E  B730               	btfsc	48,3,b	;volatile
  4785  002640  D142               	goto	l376
  4786                           
  4787                           ; BSR set to: 15
  4788                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
  4789  002642  C07D  FF35         	movff	CANsendMessage@dataLength,3893	;volatile
  4790                           
  4791                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
  4792  002646  0100               	movlb	0	; () banked
  4793  002648  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  4794  00264A  D003               	goto	l377
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
  4798  00264C  010F               	movlb	15	; () banked
  4799  00264E  8D35               	bsf	53,6,b	;volatile
  4800  002650  D002               	goto	l378
  4801  002652                     l377:
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;inc\CANlib.h: 378: else
  4805                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
  4806  002652  010F               	movlb	15	; () banked
  4807  002654  9D35               	bcf	53,6,b	;volatile
  4808  002656                     l378:
  4809                           
  4810                           ; BSR set to: 15
  4811                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
  4812  002656  0100               	movlb	0	; () banked
  4813  002658  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  4814  00265A  D07A               	goto	l379
  4815                           
  4816                           ; BSR set to: 0
  4817                           ;inc\CANlib.h: 382: {
  4818                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
  4819  00265C  0100               	movlb	0	; () banked
  4820  00265E  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  4821  002660  0100               	movlb	0	; () banked
  4822  002662  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4823  002664  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4824  002666  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4825  002668  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
  4829  00266A  C083  FF34         	movff	CANsendMessage@tamp,3892	;volatile
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
  4833  00266E  0E00               	movlw	0
  4834  002670  0100               	movlb	0	; () banked
  4835  002672  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4836  002674  0100               	movlb	0	; () banked
  4837  002676  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4838  002678  0EFF               	movlw	255
  4839  00267A  0100               	movlb	0	; () banked
  4840  00267C  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4841  00267E  0100               	movlb	0	; () banked
  4842  002680  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4843  002682  0E00               	movlw	0
  4844  002684  0100               	movlb	0	; () banked
  4845  002686  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4846  002688  0100               	movlb	0	; () banked
  4847  00268A  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4848  00268C  0E00               	movlw	0
  4849  00268E  0100               	movlb	0	; () banked
  4850  002690  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4851  002692  0100               	movlb	0	; () banked
  4852  002694  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
  4856  002696  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4857  00269A  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4858  00269E  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4859  0026A2  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4860  0026A6  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  4861  0026AA  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  4862  0026AE  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  4863  0026B2  0100               	movlb	0	; () banked
  4864  0026B4  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  4865  0026B6  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4866  0026BA  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4867  0026BE  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4868  0026C2  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
  4872  0026C6  C083  FF33         	movff	CANsendMessage@tamp,3891	;volatile
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
  4876  0026CA  0E00               	movlw	0
  4877  0026CC  010F               	movlb	15	; () banked
  4878  0026CE  6F32               	movwf	50,b	;volatile
  4879                           
  4880                           ; BSR set to: 15
  4881                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
  4882  0026D0  010F               	movlb	15	; () banked
  4883  0026D2  8732               	bsf	50,3,b	;volatile
  4884                           
  4885                           ; BSR set to: 15
  4886                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
  4887  0026D4  0100               	movlb	0	; () banked
  4888  0026D6  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  4889  0026D8  D002               	goto	l380
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
  4893  0026DA  010F               	movlb	15	; () banked
  4894  0026DC  8132               	bsf	50,0,b	;volatile
  4895  0026DE                     l380:
  4896                           
  4897                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
  4898  0026DE  0100               	movlb	0	; () banked
  4899  0026E0  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  4900  0026E2  D002               	goto	l381
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
  4904  0026E4  010F               	movlb	15	; () banked
  4905  0026E6  8332               	bsf	50,1,b	;volatile
  4906  0026E8                     l381:
  4907                           
  4908                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
  4909  0026E8  0100               	movlb	0	; () banked
  4910  0026EA  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  4911  0026EC  D002               	goto	l382
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
  4915  0026EE  010F               	movlb	15	; () banked
  4916  0026F0  8B32               	bsf	50,5,b	;volatile
  4917  0026F2                     l382:
  4918                           
  4919                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
  4920  0026F2  0100               	movlb	0	; () banked
  4921  0026F4  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  4922  0026F6  D002               	goto	l383
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
  4926  0026F8  010F               	movlb	15	; () banked
  4927  0026FA  8D32               	bsf	50,6,b	;volatile
  4928  0026FC                     l383:
  4929                           
  4930                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
  4931  0026FC  0100               	movlb	0	; () banked
  4932  0026FE  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  4933  002700  D003               	goto	l4319
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
  4937  002702  010F               	movlb	15	; () banked
  4938  002704  8F32               	bsf	50,7,b	;volatile
  4939  002706  D000               	goto	l4319
  4940  002708                     l4319:
  4941                           
  4942                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
  4943  002708  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4944  00270C  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4945  002710  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4946  002714  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4947  002718  0E16               	movlw	22
  4948  00271A  D006               	goto	u4550
  4949  00271C                     u4555:
  4950  00271C  0100               	movlb	0	; () banked
  4951  00271E  90D8               	bcf	status,0,c
  4952  002720  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4953  002722  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4954  002724  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4955  002726  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4956  002728                     u4550:
  4957  002728  2EE8               	decfsz	wreg,f,c
  4958  00272A  D7F8               	goto	u4555
  4959  00272C  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4960  002730  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4961  002734  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4962  002738  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
  4966  00273C  0100               	movlb	0	; () banked
  4967  00273E  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4968  002740  0100               	movlb	0	; () banked
  4969  002742  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4970  002744  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4971  002746  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4972  002748  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
  4976  00274A  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  4977                           
  4978                           ;inc\CANlib.h: 407: }
  4979  00274E  D05A               	goto	l4339
  4980  002750                     l379:
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;inc\CANlib.h: 409: else
  4984                           ;inc\CANlib.h: 411: {
  4985                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
  4986  002750  010F               	movlb	15	; () banked
  4987  002752  9732               	bcf	50,3,b	;volatile
  4988                           
  4989                           ; BSR set to: 15
  4990                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
  4991  002754  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4992  002758  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4993  00275C  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4994  002760  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4995  002764  0E04               	movlw	4
  4996  002766  D006               	goto	u4560
  4997  002768                     u4565:
  4998  002768  0100               	movlb	0	; () banked
  4999  00276A  90D8               	bcf	status,0,c
  5000  00276C  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  5001  00276E  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  5002  002770  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  5003  002772  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  5004  002774                     u4560:
  5005  002774  2EE8               	decfsz	wreg,f,c
  5006  002776  D7F8               	goto	u4565
  5007  002778  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  5008  00277C  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  5009  002780  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  5010  002784  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  5011                           
  5012                           ; BSR set to: 0
  5013                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
  5014  002788  0100               	movlb	0	; () banked
  5015  00278A  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  5016  00278C  0100               	movlb	0	; () banked
  5017  00278E  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5018  002790  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  5019  002792  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  5020  002794  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
  5024  002796  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
  5028  00279A  0E07               	movlw	7
  5029  00279C  0100               	movlb	0	; () banked
  5030  00279E  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  5031  0027A0  0100               	movlb	0	; () banked
  5032  0027A2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5033  0027A4  0E00               	movlw	0
  5034  0027A6  0100               	movlb	0	; () banked
  5035  0027A8  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  5036  0027AA  0100               	movlb	0	; () banked
  5037  0027AC  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  5038  0027AE  0E00               	movlw	0
  5039  0027B0  0100               	movlb	0	; () banked
  5040  0027B2  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  5041  0027B4  0100               	movlb	0	; () banked
  5042  0027B6  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  5043  0027B8  0E00               	movlw	0
  5044  0027BA  0100               	movlb	0	; () banked
  5045  0027BC  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  5046  0027BE  0100               	movlb	0	; () banked
  5047  0027C0  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;inc\CANlib.h: 419: tamp = tamp << 5;
  5051  0027C2  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  5052  0027C6  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  5053  0027CA  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  5054  0027CE  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  5055  0027D2  0E05               	movlw	5
  5056  0027D4                     u4575:
  5057  0027D4  90D8               	bcf	status,0,c
  5058  0027D6  0100               	movlb	0	; () banked
  5059  0027D8  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  5060  0027DA  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  5061  0027DC  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  5062  0027DE  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  5063  0027E0  2EE8               	decfsz	wreg,f,c
  5064  0027E2  D7F8               	goto	u4575
  5065  0027E4  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  5066  0027E8  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  5067  0027EC  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  5068  0027F0  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
  5072  0027F4  010F               	movlb	15	; () banked
  5073  0027F6  5132               	movf	50,w,b	;volatile
  5074  0027F8  0B1F               	andlw	31
  5075  0027FA  010F               	movlb	15	; () banked
  5076  0027FC  6F32               	movwf	50,b	;volatile
  5077                           
  5078                           ; BSR set to: 15
  5079                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
  5080  0027FE  C083  FF32         	movff	CANsendMessage@tamp,3890	;volatile
  5081  002802  D000               	goto	l4339
  5082  002804                     l4339:
  5083                           
  5084                           ;inc\CANlib.h: 422: }
  5085                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
  5086  002804  0100               	movlb	0	; () banked
  5087  002806  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  5088  002808  D003               	goto	l386
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
  5092  00280A  010F               	movlb	15	; () banked
  5093  00280C  8130               	bsf	48,0,b	;volatile
  5094  00280E  D002               	goto	l387
  5095  002810                     l386:
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;inc\CANlib.h: 426: else
  5099                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
  5100  002810  010F               	movlb	15	; () banked
  5101  002812  9130               	bcf	48,0,b	;volatile
  5102  002814                     l387:
  5103                           
  5104                           ; BSR set to: 15
  5105                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
  5106  002814  0100               	movlb	0	; () banked
  5107  002816  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  5108  002818  D003               	goto	l388
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
  5112  00281A  010F               	movlb	15	; () banked
  5113  00281C  8330               	bsf	48,1,b	;volatile
  5114  00281E  D003               	goto	l4345
  5115  002820                     l388:
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;inc\CANlib.h: 430: else
  5119                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
  5120  002820  010F               	movlb	15	; () banked
  5121  002822  9330               	bcf	48,1,b	;volatile
  5122  002824  D000               	goto	l4345
  5123  002826                     l4345:
  5124                           
  5125                           ; BSR set to: 15
  5126                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
  5127  002826  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  5128  00282A  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  5129  00282E  50DF               	movf	indf2,w,c
  5130  002830  010F               	movlb	15	; () banked
  5131  002832  6F36               	movwf	54,b	;volatile
  5132                           
  5133                           ; BSR set to: 15
  5134                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
  5135  002834  0100               	movlb	0	; () banked
  5136  002836  EE20 F001          	lfsr	2,1
  5137  00283A  517B               	movf	CANsendMessage@data& (0+255),w,b
  5138  00283C  26D9               	addwf	fsr2l,f,c
  5139  00283E  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5140  002840  22DA               	addwfc	fsr2h,f,c
  5141  002842  50DF               	movf	indf2,w,c
  5142  002844  010F               	movlb	15	; () banked
  5143  002846  6F37               	movwf	55,b	;volatile
  5144                           
  5145                           ; BSR set to: 15
  5146                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
  5147  002848  0100               	movlb	0	; () banked
  5148  00284A  EE20 F002          	lfsr	2,2
  5149  00284E  517B               	movf	CANsendMessage@data& (0+255),w,b
  5150  002850  26D9               	addwf	fsr2l,f,c
  5151  002852  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5152  002854  22DA               	addwfc	fsr2h,f,c
  5153  002856  50DF               	movf	indf2,w,c
  5154  002858  010F               	movlb	15	; () banked
  5155  00285A  6F38               	movwf	56,b	;volatile
  5156                           
  5157                           ; BSR set to: 15
  5158                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
  5159  00285C  0100               	movlb	0	; () banked
  5160  00285E  EE20 F003          	lfsr	2,3
  5161  002862  517B               	movf	CANsendMessage@data& (0+255),w,b
  5162  002864  26D9               	addwf	fsr2l,f,c
  5163  002866  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5164  002868  22DA               	addwfc	fsr2h,f,c
  5165  00286A  50DF               	movf	indf2,w,c
  5166  00286C  010F               	movlb	15	; () banked
  5167  00286E  6F39               	movwf	57,b	;volatile
  5168                           
  5169                           ; BSR set to: 15
  5170                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
  5171  002870  0100               	movlb	0	; () banked
  5172  002872  EE20 F004          	lfsr	2,4
  5173  002876  517B               	movf	CANsendMessage@data& (0+255),w,b
  5174  002878  26D9               	addwf	fsr2l,f,c
  5175  00287A  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5176  00287C  22DA               	addwfc	fsr2h,f,c
  5177  00287E  50DF               	movf	indf2,w,c
  5178  002880  010F               	movlb	15	; () banked
  5179  002882  6F3A               	movwf	58,b	;volatile
  5180                           
  5181                           ; BSR set to: 15
  5182                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
  5183  002884  0100               	movlb	0	; () banked
  5184  002886  EE20 F005          	lfsr	2,5
  5185  00288A  517B               	movf	CANsendMessage@data& (0+255),w,b
  5186  00288C  26D9               	addwf	fsr2l,f,c
  5187  00288E  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5188  002890  22DA               	addwfc	fsr2h,f,c
  5189  002892  50DF               	movf	indf2,w,c
  5190  002894  010F               	movlb	15	; () banked
  5191  002896  6F3B               	movwf	59,b	;volatile
  5192                           
  5193                           ; BSR set to: 15
  5194                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
  5195  002898  0100               	movlb	0	; () banked
  5196  00289A  EE20 F006          	lfsr	2,6
  5197  00289E  517B               	movf	CANsendMessage@data& (0+255),w,b
  5198  0028A0  26D9               	addwf	fsr2l,f,c
  5199  0028A2  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5200  0028A4  22DA               	addwfc	fsr2h,f,c
  5201  0028A6  50DF               	movf	indf2,w,c
  5202  0028A8  010F               	movlb	15	; () banked
  5203  0028AA  6F3C               	movwf	60,b	;volatile
  5204                           
  5205                           ; BSR set to: 15
  5206                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
  5207  0028AC  0100               	movlb	0	; () banked
  5208  0028AE  EE20 F007          	lfsr	2,7
  5209  0028B2  517B               	movf	CANsendMessage@data& (0+255),w,b
  5210  0028B4  26D9               	addwf	fsr2l,f,c
  5211  0028B6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5212  0028B8  22DA               	addwfc	fsr2h,f,c
  5213  0028BA  50DF               	movf	indf2,w,c
  5214  0028BC  010F               	movlb	15	; () banked
  5215  0028BE  6F3D               	movwf	61,b	;volatile
  5216                           
  5217                           ; BSR set to: 15
  5218                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
  5219  0028C0  010F               	movlb	15	; () banked
  5220  0028C2  8730               	bsf	48,3,b	;volatile
  5221                           
  5222                           ; BSR set to: 15
  5223                           ;inc\CANlib.h: 444: return;
  5224  0028C4  0012               	return	
  5225  0028C6                     l376:
  5226                           
  5227                           ; BSR set to: 15
  5228                           ;inc\CANlib.h: 445: }
  5229                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
  5230  0028C6  010F               	movlb	15	; () banked
  5231  0028C8  B720               	btfsc	32,3,b	;volatile
  5232  0028CA  0012               	return	
  5233                           
  5234                           ; BSR set to: 15
  5235                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
  5236  0028CC  C07D  FF25         	movff	CANsendMessage@dataLength,3877	;volatile
  5237                           
  5238                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
  5239  0028D0  0100               	movlb	0	; () banked
  5240  0028D2  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  5241  0028D4  D003               	goto	l391
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
  5245  0028D6  010F               	movlb	15	; () banked
  5246  0028D8  8D25               	bsf	37,6,b	;volatile
  5247  0028DA  D002               	goto	l392
  5248  0028DC                     l391:
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;inc\CANlib.h: 454: else
  5252                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
  5253  0028DC  010F               	movlb	15	; () banked
  5254  0028DE  9D25               	bcf	37,6,b	;volatile
  5255  0028E0                     l392:
  5256                           
  5257                           ; BSR set to: 15
  5258                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
  5259  0028E0  0100               	movlb	0	; () banked
  5260  0028E2  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  5261  0028E4  D07A               	goto	l393
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;inc\CANlib.h: 458: {
  5265                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
  5266  0028E6  0100               	movlb	0	; () banked
  5267  0028E8  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  5268  0028EA  0100               	movlb	0	; () banked
  5269  0028EC  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5270  0028EE  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  5271  0028F0  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  5272  0028F2  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  5273                           
  5274                           ; BSR set to: 0
  5275                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
  5276  0028F4  C083  FF24         	movff	CANsendMessage@tamp,3876	;volatile
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
  5280  0028F8  0E00               	movlw	0
  5281  0028FA  0100               	movlb	0	; () banked
  5282  0028FC  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  5283  0028FE  0100               	movlb	0	; () banked
  5284  002900  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5285  002902  0EFF               	movlw	255
  5286  002904  0100               	movlb	0	; () banked
  5287  002906  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  5288  002908  0100               	movlb	0	; () banked
  5289  00290A  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  5290  00290C  0E00               	movlw	0
  5291  00290E  0100               	movlb	0	; () banked
  5292  002910  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  5293  002912  0100               	movlb	0	; () banked
  5294  002914  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  5295  002916  0E00               	movlw	0
  5296  002918  0100               	movlb	0	; () banked
  5297  00291A  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  5298  00291C  0100               	movlb	0	; () banked
  5299  00291E  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
  5303  002920  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  5304  002924  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  5305  002928  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  5306  00292C  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  5307  002930  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  5308  002934  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  5309  002938  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  5310  00293C  0100               	movlb	0	; () banked
  5311  00293E  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  5312  002940  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  5313  002944  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  5314  002948  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  5315  00294C  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  5316                           
  5317                           ; BSR set to: 0
  5318                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
  5319  002950  C083  FF23         	movff	CANsendMessage@tamp,3875	;volatile
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
  5323  002954  0E00               	movlw	0
  5324  002956  010F               	movlb	15	; () banked
  5325  002958  6F22               	movwf	34,b	;volatile
  5326                           
  5327                           ; BSR set to: 15
  5328                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
  5329  00295A  010F               	movlb	15	; () banked
  5330  00295C  8722               	bsf	34,3,b	;volatile
  5331                           
  5332                           ; BSR set to: 15
  5333                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
  5334  00295E  0100               	movlb	0	; () banked
  5335  002960  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  5336  002962  D002               	goto	l394
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
  5340  002964  010F               	movlb	15	; () banked
  5341  002966  8122               	bsf	34,0,b	;volatile
  5342  002968                     l394:
  5343                           
  5344                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
  5345  002968  0100               	movlb	0	; () banked
  5346  00296A  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  5347  00296C  D002               	goto	l395
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
  5351  00296E  010F               	movlb	15	; () banked
  5352  002970  8322               	bsf	34,1,b	;volatile
  5353  002972                     l395:
  5354                           
  5355                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
  5356  002972  0100               	movlb	0	; () banked
  5357  002974  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  5358  002976  D002               	goto	l396
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
  5362  002978  010F               	movlb	15	; () banked
  5363  00297A  8B22               	bsf	34,5,b	;volatile
  5364  00297C                     l396:
  5365                           
  5366                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
  5367  00297C  0100               	movlb	0	; () banked
  5368  00297E  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  5369  002980  D002               	goto	l397
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
  5373  002982  010F               	movlb	15	; () banked
  5374  002984  8D22               	bsf	34,6,b	;volatile
  5375  002986                     l397:
  5376                           
  5377                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
  5378  002986  0100               	movlb	0	; () banked
  5379  002988  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  5380  00298A  D003               	goto	l4395
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
  5384  00298C  010F               	movlb	15	; () banked
  5385  00298E  8F22               	bsf	34,7,b	;volatile
  5386  002990  D000               	goto	l4395
  5387  002992                     l4395:
  5388                           
  5389                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
  5390  002992  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  5391  002996  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  5392  00299A  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  5393  00299E  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  5394  0029A2  0E16               	movlw	22
  5395  0029A4  D006               	goto	u4680
  5396  0029A6                     u4685:
  5397  0029A6  0100               	movlb	0	; () banked
  5398  0029A8  90D8               	bcf	status,0,c
  5399  0029AA  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  5400  0029AC  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  5401  0029AE  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  5402  0029B0  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  5403  0029B2                     u4680:
  5404  0029B2  2EE8               	decfsz	wreg,f,c
  5405  0029B4  D7F8               	goto	u4685
  5406  0029B6  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  5407  0029BA  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  5408  0029BE  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  5409  0029C2  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
  5413  0029C6  0100               	movlb	0	; () banked
  5414  0029C8  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  5415  0029CA  0100               	movlb	0	; () banked
  5416  0029CC  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5417  0029CE  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  5418  0029D0  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  5419  0029D2  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
  5423  0029D4  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  5424                           
  5425                           ;inc\CANlib.h: 483: }
  5426  0029D8  D05A               	goto	l4415
  5427  0029DA                     l393:
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;inc\CANlib.h: 485: else
  5431                           ;inc\CANlib.h: 487: {
  5432                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
  5433  0029DA  010F               	movlb	15	; () banked
  5434  0029DC  9722               	bcf	34,3,b	;volatile
  5435                           
  5436                           ; BSR set to: 15
  5437                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
  5438  0029DE  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  5439  0029E2  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  5440  0029E6  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  5441  0029EA  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  5442  0029EE  0E04               	movlw	4
  5443  0029F0  D006               	goto	u4690
  5444  0029F2                     u4695:
  5445  0029F2  0100               	movlb	0	; () banked
  5446  0029F4  90D8               	bcf	status,0,c
  5447  0029F6  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  5448  0029F8  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  5449  0029FA  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  5450  0029FC  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  5451  0029FE                     u4690:
  5452  0029FE  2EE8               	decfsz	wreg,f,c
  5453  002A00  D7F8               	goto	u4695
  5454  002A02  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  5455  002A06  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  5456  002A0A  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  5457  002A0E  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
  5461  002A12  0100               	movlb	0	; () banked
  5462  002A14  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  5463  002A16  0100               	movlb	0	; () banked
  5464  002A18  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5465  002A1A  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  5466  002A1C  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  5467  002A1E  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  5468                           
  5469                           ; BSR set to: 0
  5470                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
  5471  002A20  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  5472                           
  5473                           ; BSR set to: 0
  5474                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
  5475  002A24  0E07               	movlw	7
  5476  002A26  0100               	movlb	0	; () banked
  5477  002A28  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  5478  002A2A  0100               	movlb	0	; () banked
  5479  002A2C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5480  002A2E  0E00               	movlw	0
  5481  002A30  0100               	movlb	0	; () banked
  5482  002A32  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  5483  002A34  0100               	movlb	0	; () banked
  5484  002A36  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  5485  002A38  0E00               	movlw	0
  5486  002A3A  0100               	movlb	0	; () banked
  5487  002A3C  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  5488  002A3E  0100               	movlb	0	; () banked
  5489  002A40  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  5490  002A42  0E00               	movlw	0
  5491  002A44  0100               	movlb	0	; () banked
  5492  002A46  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  5493  002A48  0100               	movlb	0	; () banked
  5494  002A4A  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;inc\CANlib.h: 495: tamp = tamp << 5;
  5498  002A4C  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  5499  002A50  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  5500  002A54  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  5501  002A58  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  5502  002A5C  0E05               	movlw	5
  5503  002A5E                     u4705:
  5504  002A5E  90D8               	bcf	status,0,c
  5505  002A60  0100               	movlb	0	; () banked
  5506  002A62  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  5507  002A64  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  5508  002A66  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  5509  002A68  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  5510  002A6A  2EE8               	decfsz	wreg,f,c
  5511  002A6C  D7F8               	goto	u4705
  5512  002A6E  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  5513  002A72  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  5514  002A76  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  5515  002A7A  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
  5519  002A7E  010F               	movlb	15	; () banked
  5520  002A80  5122               	movf	34,w,b	;volatile
  5521  002A82  0B1F               	andlw	31
  5522  002A84  010F               	movlb	15	; () banked
  5523  002A86  6F22               	movwf	34,b	;volatile
  5524                           
  5525                           ; BSR set to: 15
  5526                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
  5527  002A88  C083  FF22         	movff	CANsendMessage@tamp,3874	;volatile
  5528  002A8C  D000               	goto	l4415
  5529  002A8E                     l4415:
  5530                           
  5531                           ;inc\CANlib.h: 498: }
  5532                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
  5533  002A8E  0100               	movlb	0	; () banked
  5534  002A90  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  5535  002A92  D003               	goto	l400
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
  5539  002A94  010F               	movlb	15	; () banked
  5540  002A96  8120               	bsf	32,0,b	;volatile
  5541  002A98  D002               	goto	l401
  5542  002A9A                     l400:
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;inc\CANlib.h: 502: else
  5546                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
  5547  002A9A  010F               	movlb	15	; () banked
  5548  002A9C  9120               	bcf	32,0,b	;volatile
  5549  002A9E                     l401:
  5550                           
  5551                           ; BSR set to: 15
  5552                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
  5553  002A9E  0100               	movlb	0	; () banked
  5554  002AA0  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  5555  002AA2  D003               	goto	l402
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
  5559  002AA4  010F               	movlb	15	; () banked
  5560  002AA6  8320               	bsf	32,1,b	;volatile
  5561  002AA8  D003               	goto	l4421
  5562  002AAA                     l402:
  5563                           
  5564                           ; BSR set to: 0
  5565                           ;inc\CANlib.h: 506: else
  5566                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
  5567  002AAA  010F               	movlb	15	; () banked
  5568  002AAC  9320               	bcf	32,1,b	;volatile
  5569  002AAE  D000               	goto	l4421
  5570  002AB0                     l4421:
  5571                           
  5572                           ; BSR set to: 15
  5573                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
  5574  002AB0  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  5575  002AB4  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  5576  002AB8  50DF               	movf	indf2,w,c
  5577  002ABA  010F               	movlb	15	; () banked
  5578  002ABC  6F26               	movwf	38,b	;volatile
  5579                           
  5580                           ; BSR set to: 15
  5581                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
  5582  002ABE  0100               	movlb	0	; () banked
  5583  002AC0  EE20 F001          	lfsr	2,1
  5584  002AC4  517B               	movf	CANsendMessage@data& (0+255),w,b
  5585  002AC6  26D9               	addwf	fsr2l,f,c
  5586  002AC8  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5587  002ACA  22DA               	addwfc	fsr2h,f,c
  5588  002ACC  50DF               	movf	indf2,w,c
  5589  002ACE  010F               	movlb	15	; () banked
  5590  002AD0  6F27               	movwf	39,b	;volatile
  5591                           
  5592                           ; BSR set to: 15
  5593                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
  5594  002AD2  0100               	movlb	0	; () banked
  5595  002AD4  EE20 F002          	lfsr	2,2
  5596  002AD8  517B               	movf	CANsendMessage@data& (0+255),w,b
  5597  002ADA  26D9               	addwf	fsr2l,f,c
  5598  002ADC  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5599  002ADE  22DA               	addwfc	fsr2h,f,c
  5600  002AE0  50DF               	movf	indf2,w,c
  5601  002AE2  010F               	movlb	15	; () banked
  5602  002AE4  6F28               	movwf	40,b	;volatile
  5603                           
  5604                           ; BSR set to: 15
  5605                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
  5606  002AE6  0100               	movlb	0	; () banked
  5607  002AE8  EE20 F003          	lfsr	2,3
  5608  002AEC  517B               	movf	CANsendMessage@data& (0+255),w,b
  5609  002AEE  26D9               	addwf	fsr2l,f,c
  5610  002AF0  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5611  002AF2  22DA               	addwfc	fsr2h,f,c
  5612  002AF4  50DF               	movf	indf2,w,c
  5613  002AF6  010F               	movlb	15	; () banked
  5614  002AF8  6F29               	movwf	41,b	;volatile
  5615                           
  5616                           ; BSR set to: 15
  5617                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
  5618  002AFA  0100               	movlb	0	; () banked
  5619  002AFC  EE20 F004          	lfsr	2,4
  5620  002B00  517B               	movf	CANsendMessage@data& (0+255),w,b
  5621  002B02  26D9               	addwf	fsr2l,f,c
  5622  002B04  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5623  002B06  22DA               	addwfc	fsr2h,f,c
  5624  002B08  50DF               	movf	indf2,w,c
  5625  002B0A  010F               	movlb	15	; () banked
  5626  002B0C  6F2A               	movwf	42,b	;volatile
  5627                           
  5628                           ; BSR set to: 15
  5629                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
  5630  002B0E  0100               	movlb	0	; () banked
  5631  002B10  EE20 F005          	lfsr	2,5
  5632  002B14  517B               	movf	CANsendMessage@data& (0+255),w,b
  5633  002B16  26D9               	addwf	fsr2l,f,c
  5634  002B18  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5635  002B1A  22DA               	addwfc	fsr2h,f,c
  5636  002B1C  50DF               	movf	indf2,w,c
  5637  002B1E  010F               	movlb	15	; () banked
  5638  002B20  6F2B               	movwf	43,b	;volatile
  5639                           
  5640                           ; BSR set to: 15
  5641                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
  5642  002B22  0100               	movlb	0	; () banked
  5643  002B24  EE20 F006          	lfsr	2,6
  5644  002B28  517B               	movf	CANsendMessage@data& (0+255),w,b
  5645  002B2A  26D9               	addwf	fsr2l,f,c
  5646  002B2C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5647  002B2E  22DA               	addwfc	fsr2h,f,c
  5648  002B30  50DF               	movf	indf2,w,c
  5649  002B32  010F               	movlb	15	; () banked
  5650  002B34  6F2C               	movwf	44,b	;volatile
  5651                           
  5652                           ; BSR set to: 15
  5653                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
  5654  002B36  0100               	movlb	0	; () banked
  5655  002B38  EE20 F007          	lfsr	2,7
  5656  002B3C  517B               	movf	CANsendMessage@data& (0+255),w,b
  5657  002B3E  26D9               	addwf	fsr2l,f,c
  5658  002B40  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5659  002B42  22DA               	addwfc	fsr2h,f,c
  5660  002B44  50DF               	movf	indf2,w,c
  5661  002B46  010F               	movlb	15	; () banked
  5662  002B48  6F2D               	movwf	45,b	;volatile
  5663                           
  5664                           ; BSR set to: 15
  5665                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
  5666  002B4A  010F               	movlb	15	; () banked
  5667  002B4C  8720               	bsf	32,3,b	;volatile
  5668                           
  5669                           ; BSR set to: 15
  5670                           ;inc\CANlib.h: 520: return;
  5671  002B4E  0012               	return	
  5672                           
  5673                           ; BSR set to: 15
  5674                           
  5675                           ; BSR set to: 15
  5676  002B50  0012               	return		;funcret
  5677  002B52                     __end_of_CANsendMessage:
  5678                           	opt stack 0
  5679                           tblptru	equ	0xFF8
  5680                           tblptrh	equ	0xFF7
  5681                           tblptrl	equ	0xFF6
  5682                           tablat	equ	0xFF5
  5683                           postinc0	equ	0xFEE
  5684                           wreg	equ	0xFE8
  5685                           indf2	equ	0xFDF
  5686                           postinc2	equ	0xFDE
  5687                           postdec2	equ	0xFDD
  5688                           fsr2h	equ	0xFDA
  5689                           fsr2l	equ	0xFD9
  5690                           status	equ	0xFD8
  5691                           
  5692 ;; *************** function _CANisTxReady *****************
  5693 ;; Defined at:
  5694 ;;		line 1154 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;		None
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;		None
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  1    wreg      unsigned char 
  5701 ;; Registers used:
  5702 ;;		wreg, status,2
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5709 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5712 ;;Total ram usage:        1 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    5
  5715 ;; This function calls:
  5716 ;;		Nothing
  5717 ;; This function is called by:
  5718 ;;		_main
  5719 ;;		_park_search
  5720 ;;		_park_routine
  5721 ;;		_can_send
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           	psect	text7
  5726  006536                     __ptext7:
  5727                           	opt stack 0
  5728  006536                     _CANisTxReady:
  5729                           	opt stack 22
  5730                           
  5731                           ;inc\CANlib.h: 1156: return (!TXB0CONbits.TXREQ || !TXB1CONbits.TXREQ || !TXB2CONbits.TX
      +                          REQ);
  5732                           
  5733                           ; BSR set to: 15
  5734                           ;incstack = 0
  5735  006536  0E01               	movlw	1
  5736  006538  0100               	movlb	0	; () banked
  5737  00653A  6F77               	movwf	_CANisTxReady$2841& (0+255),b
  5738                           
  5739                           ; BSR set to: 0
  5740  00653C  010F               	movlb	15	; () banked
  5741  00653E  A740               	btfss	64,3,b	;volatile
  5742  006540  D009               	goto	l554
  5743                           
  5744                           ; BSR set to: 15
  5745  006542  010F               	movlb	15	; () banked
  5746  006544  A730               	btfss	48,3,b	;volatile
  5747  006546  D006               	goto	l554
  5748                           
  5749                           ; BSR set to: 15
  5750  006548  010F               	movlb	15	; () banked
  5751  00654A  A720               	btfss	32,3,b	;volatile
  5752  00654C  D003               	goto	l554
  5753                           
  5754                           ; BSR set to: 15
  5755  00654E  0E00               	movlw	0
  5756  006550  0100               	movlb	0	; () banked
  5757  006552  6F77               	movwf	_CANisTxReady$2841& (0+255),b
  5758  006554                     l554:
  5759  006554  0100               	movlb	0	; () banked
  5760  006556  5177               	movf	_CANisTxReady$2841& (0+255),w,b
  5761  006558  0012               	return	
  5762                           
  5763                           ; BSR set to: 0
  5764                           
  5765                           ; BSR set to: 0
  5766  00655A  0012               	return		;funcret
  5767  00655C                     __end_of_CANisTxReady:
  5768                           	opt stack 0
  5769                           tblptru	equ	0xFF8
  5770                           tblptrh	equ	0xFF7
  5771                           tblptrl	equ	0xFF6
  5772                           tablat	equ	0xFF5
  5773                           postinc0	equ	0xFEE
  5774                           wreg	equ	0xFE8
  5775                           indf2	equ	0xFDF
  5776                           postinc2	equ	0xFDE
  5777                           postdec2	equ	0xFDD
  5778                           fsr2h	equ	0xFDA
  5779                           fsr2l	equ	0xFD9
  5780                           status	equ	0xFD8
  5781                           
  5782 ;; *************** function _asin *****************
  5783 ;; Defined at:
  5784 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\asin.c"
  5785 ;; Parameters:    Size  Location     Type
  5786 ;;  x               4   17[BANK1 ] unsigned char 
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;  y               4   37[BANK1 ] unsigned char 
  5789 ;;  sgn             4   21[BANK1 ] unsigned char 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  4   17[BANK1 ] unsigned char 
  5792 ;; Registers used:
  5793 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5799 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5800 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5802 ;;      Totals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;Total ram usage:       28 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:    9
  5806 ;; This function calls:
  5807 ;;		___fladd
  5808 ;;		___fldiv
  5809 ;;		___flge
  5810 ;;		___flmul
  5811 ;;		___flneg
  5812 ;;		_atan
  5813 ;;		_fabs
  5814 ;;		_sqrt
  5815 ;; This function is called by:
  5816 ;;		_park_routine
  5817 ;;		_parallelo
  5818 ;;		_matematica
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           	psect	text8
  5823  00407C                     __ptext8:
  5824                           	opt stack 0
  5825  00407C                     _asin:
  5826                           	opt stack 19
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;incstack = 0
  5830  00407C  0E00               	movlw	0
  5831  00407E  0100               	movlb	0	; () banked
  5832  004080  6FB3               	movwf	___flge@ff1& (0+255),b
  5833  004082  0E00               	movlw	0
  5834  004084  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5835  004086  0E80               	movlw	128
  5836  004088  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5837  00408A  0E3F               	movlw	63
  5838  00408C  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5839  00408E  C194  F0AF         	movff	asin@x,fabs@d
  5840  004092  C195  F0B0         	movff	asin@x+1,fabs@d+1
  5841  004096  C196  F0B1         	movff	asin@x+2,fabs@d+2
  5842  00409A  C197  F0B2         	movff	asin@x+3,fabs@d+3
  5843  00409E  ECAF  F031         	call	_fabs	;wreg free
  5844  0040A2  C0AF  F0B7         	movff	?_fabs,___flge@ff2
  5845  0040A6  C0B0  F0B8         	movff	?_fabs+1,___flge@ff2+1
  5846  0040AA  C0B1  F0B9         	movff	?_fabs+2,___flge@ff2+2
  5847  0040AE  C0B2  F0BA         	movff	?_fabs+3,___flge@ff2+3
  5848  0040B2  EC1A  F02E         	call	___flge	;wreg free
  5849  0040B6  0100               	movlb	0	; () banked
  5850  0040B8  B0D8               	btfsc	status,0,c
  5851  0040BA  D00F               	goto	l6657
  5852                           
  5853                           ; BSR set to: 0
  5854  0040BC  0E00               	movlw	0
  5855  0040BE  0101               	movlb	1	; () banked
  5856  0040C0  6F43               	movwf	(_errno+1)& (0+255),b
  5857  0040C2  0E21               	movlw	33
  5858  0040C4  6F42               	movwf	_errno& (0+255),b
  5859  0040C6  0E00               	movlw	0
  5860  0040C8  0101               	movlb	1	; () banked
  5861  0040CA  6F94               	movwf	?_asin& (0+255),b
  5862  0040CC  0E00               	movlw	0
  5863  0040CE  6F95               	movwf	(?_asin+1)& (0+255),b
  5864  0040D0  0E00               	movlw	0
  5865  0040D2  6F96               	movwf	(?_asin+2)& (0+255),b
  5866  0040D4  0E00               	movlw	0
  5867  0040D6  6F97               	movwf	(?_asin+3)& (0+255),b
  5868                           
  5869                           ; BSR set to: 1
  5870  0040D8  0012               	return	
  5871  0040DA                     l6657:
  5872  0040DA  0E00               	movlw	0
  5873  0040DC  0101               	movlb	1	; () banked
  5874  0040DE  6F98               	movwf	asin@sgn& (0+255),b
  5875  0040E0  0E00               	movlw	0
  5876  0040E2  6F99               	movwf	(asin@sgn+1)& (0+255),b
  5877  0040E4  0E80               	movlw	128
  5878  0040E6  6F9A               	movwf	(asin@sgn+2)& (0+255),b
  5879  0040E8  0E3F               	movlw	63
  5880  0040EA  6F9B               	movwf	(asin@sgn+3)& (0+255),b
  5881                           
  5882                           ; BSR set to: 1
  5883  0040EC  C194  F085         	movff	asin@x,___flmul@f2
  5884  0040F0  C195  F086         	movff	asin@x+1,___flmul@f2+1
  5885  0040F4  C196  F087         	movff	asin@x+2,___flmul@f2+2
  5886  0040F8  C197  F088         	movff	asin@x+3,___flmul@f2+3
  5887  0040FC  C194  F081         	movff	asin@x,___flmul@f1
  5888  004100  C195  F082         	movff	asin@x+1,___flmul@f1+1
  5889  004104  C196  F083         	movff	asin@x+2,___flmul@f1+2
  5890  004108  C197  F084         	movff	asin@x+3,___flmul@f1+3
  5891  00410C  EC9B  F02A         	call	___flmul	;wreg free
  5892  004110  C081  F0AB         	movff	?___flmul,___flneg@f1
  5893  004114  C082  F0AC         	movff	?___flmul+1,___flneg@f1+1
  5894  004118  C083  F0AD         	movff	?___flmul+2,___flneg@f1+2
  5895  00411C  C084  F0AE         	movff	?___flmul+3,___flneg@f1+3
  5896  004120  ECCE  F031         	call	___flneg	;wreg free
  5897  004124  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5898  004128  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5899  00412C  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5900  004130  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5901  004134  0E00               	movlw	0
  5902  004136  0100               	movlb	0	; () banked
  5903  004138  6FA3               	movwf	___fladd@f2& (0+255),b
  5904  00413A  0E00               	movlw	0
  5905  00413C  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5906  00413E  0E80               	movlw	128
  5907  004140  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5908  004142  0E3F               	movlw	63
  5909  004144  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5910  004146  EC5E  F023         	call	___fladd	;wreg free
  5911  00414A  C09F  F19C         	movff	?___fladd,_asin$3679
  5912  00414E  C0A0  F19D         	movff	?___fladd+1,_asin$3679+1
  5913  004152  C0A1  F19E         	movff	?___fladd+2,_asin$3679+2
  5914  004156  C0A2  F19F         	movff	?___fladd+3,_asin$3679+3
  5915  00415A  C19C  F0D1         	movff	_asin$3679,sqrt@y
  5916  00415E  C19D  F0D2         	movff	_asin$3679+1,sqrt@y+1
  5917  004162  C19E  F0D3         	movff	_asin$3679+2,sqrt@y+2
  5918  004166  C19F  F0D4         	movff	_asin$3679+3,sqrt@y+3
  5919  00416A  ECE9  F026         	call	_sqrt	;wreg free
  5920  00416E  C0D1  F1A8         	movff	?_sqrt,asin@y
  5921  004172  C0D2  F1A9         	movff	?_sqrt+1,asin@y+1
  5922  004176  C0D3  F1AA         	movff	?_sqrt+2,asin@y+2
  5923  00417A  C0D4  F1AB         	movff	?_sqrt+3,asin@y+3
  5924  00417E  C194  F0AF         	movff	asin@x,fabs@d
  5925  004182  C195  F0B0         	movff	asin@x+1,fabs@d+1
  5926  004186  C196  F0B1         	movff	asin@x+2,fabs@d+2
  5927  00418A  C197  F0B2         	movff	asin@x+3,fabs@d+3
  5928  00418E  ECAF  F031         	call	_fabs	;wreg free
  5929  004192  C0AF  F0B3         	movff	?_fabs,___flge@ff1
  5930  004196  C0B0  F0B4         	movff	?_fabs+1,___flge@ff1+1
  5931  00419A  C0B1  F0B5         	movff	?_fabs+2,___flge@ff1+2
  5932  00419E  C0B2  F0B6         	movff	?_fabs+3,___flge@ff1+3
  5933  0041A2  0E8F               	movlw	143
  5934  0041A4  0100               	movlb	0	; () banked
  5935  0041A6  6FB7               	movwf	___flge@ff2& (0+255),b
  5936  0041A8  0EC2               	movlw	194
  5937  0041AA  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  5938  0041AC  0E35               	movlw	53
  5939  0041AE  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  5940  0041B0  0E3F               	movlw	63
  5941  0041B2  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  5942  0041B4  EC1A  F02E         	call	___flge	;wreg free
  5943  0041B8  0100               	movlb	0	; () banked
  5944  0041BA  B0D8               	btfsc	status,0,c
  5945  0041BC  D02D               	goto	l6671
  5946                           
  5947                           ; BSR set to: 0
  5948  0041BE  C194  F090         	movff	asin@x,___fldiv@f1
  5949  0041C2  C195  F091         	movff	asin@x+1,___fldiv@f1+1
  5950  0041C6  C196  F092         	movff	asin@x+2,___fldiv@f1+2
  5951  0041CA  C197  F093         	movff	asin@x+3,___fldiv@f1+3
  5952  0041CE  C1A8  F094         	movff	asin@y,___fldiv@f2
  5953  0041D2  C1A9  F095         	movff	asin@y+1,___fldiv@f2+1
  5954  0041D6  C1AA  F096         	movff	asin@y+2,___fldiv@f2+2
  5955  0041DA  C1AB  F097         	movff	asin@y+3,___fldiv@f2+3
  5956  0041DE  EC4D  F02B         	call	___fldiv	;wreg free
  5957  0041E2  C090  F1AC         	movff	?___fldiv,_asin$3680
  5958  0041E6  C091  F1AD         	movff	?___fldiv+1,_asin$3680+1
  5959  0041EA  C092  F1AE         	movff	?___fldiv+2,_asin$3680+2
  5960  0041EE  C093  F1AF         	movff	?___fldiv+3,_asin$3680+3
  5961  0041F2  C1AC  F0BF         	movff	_asin$3680,atan@f
  5962  0041F6  C1AD  F0C0         	movff	_asin$3680+1,atan@f+1
  5963  0041FA  C1AE  F0C1         	movff	_asin$3680+2,atan@f+2
  5964  0041FE  C1AF  F0C2         	movff	_asin$3680+3,atan@f+3
  5965  004202  EC94  F024         	call	_atan	;wreg free
  5966  004206  C0BF  F194         	movff	?_atan,?_asin
  5967  00420A  C0C0  F195         	movff	?_atan+1,?_asin+1
  5968  00420E  C0C1  F196         	movff	?_atan+2,?_asin+2
  5969  004212  C0C2  F197         	movff	?_atan+3,?_asin+3
  5970  004216  0012               	return	
  5971  004218                     l6671:
  5972  004218  0101               	movlb	1	; () banked
  5973  00421A  AF97               	btfss	(asin@x+3)& (0+255),7,b
  5974  00421C  D06E               	goto	l6683
  5975                           
  5976                           ; BSR set to: 1
  5977  00421E  C194  F094         	movff	asin@x,___fldiv@f2
  5978  004222  C195  F095         	movff	asin@x+1,___fldiv@f2+1
  5979  004226  C196  F096         	movff	asin@x+2,___fldiv@f2+2
  5980  00422A  C197  F097         	movff	asin@x+3,___fldiv@f2+3
  5981  00422E  C1A8  F0AB         	movff	asin@y,___flneg@f1
  5982  004232  C1A9  F0AC         	movff	asin@y+1,___flneg@f1+1
  5983  004236  C1AA  F0AD         	movff	asin@y+2,___flneg@f1+2
  5984  00423A  C1AB  F0AE         	movff	asin@y+3,___flneg@f1+3
  5985  00423E  ECCE  F031         	call	___flneg	;wreg free
  5986  004242  C0AB  F090         	movff	?___flneg,___fldiv@f1
  5987  004246  C0AC  F091         	movff	?___flneg+1,___fldiv@f1+1
  5988  00424A  C0AD  F092         	movff	?___flneg+2,___fldiv@f1+2
  5989  00424E  C0AE  F093         	movff	?___flneg+3,___fldiv@f1+3
  5990  004252  EC4D  F02B         	call	___fldiv	;wreg free
  5991  004256  C090  F1AC         	movff	?___fldiv,_asin$3680
  5992  00425A  C091  F1AD         	movff	?___fldiv+1,_asin$3680+1
  5993  00425E  C092  F1AE         	movff	?___fldiv+2,_asin$3680+2
  5994  004262  C093  F1AF         	movff	?___fldiv+3,_asin$3680+3
  5995  004266  C1AC  F0BF         	movff	_asin$3680,atan@f
  5996  00426A  C1AD  F0C0         	movff	_asin$3680+1,atan@f+1
  5997  00426E  C1AE  F0C1         	movff	_asin$3680+2,atan@f+2
  5998  004272  C1AF  F0C2         	movff	_asin$3680+3,atan@f+3
  5999  004276  EC94  F024         	call	_atan	;wreg free
  6000  00427A  C0BF  F1A4         	movff	?_atan,_asin$3681
  6001  00427E  C0C0  F1A5         	movff	?_atan+1,_asin$3681+1
  6002  004282  C0C1  F1A6         	movff	?_atan+2,_asin$3681+2
  6003  004286  C0C2  F1A7         	movff	?_atan+3,_asin$3681+3
  6004  00428A  0EDB               	movlw	219
  6005  00428C  0100               	movlb	0	; () banked
  6006  00428E  6FA3               	movwf	___fladd@f2& (0+255),b
  6007  004290  0E0F               	movlw	15
  6008  004292  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6009  004294  0EC9               	movlw	201
  6010  004296  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6011  004298  0E3F               	movlw	63
  6012  00429A  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6013  00429C  C1A4  F0AB         	movff	_asin$3681,___flneg@f1
  6014  0042A0  C1A5  F0AC         	movff	_asin$3681+1,___flneg@f1+1
  6015  0042A4  C1A6  F0AD         	movff	_asin$3681+2,___flneg@f1+2
  6016  0042A8  C1A7  F0AE         	movff	_asin$3681+3,___flneg@f1+3
  6017  0042AC  ECCE  F031         	call	___flneg	;wreg free
  6018  0042B0  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6019  0042B4  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6020  0042B8  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6021  0042BC  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6022  0042C0  EC5E  F023         	call	___fladd	;wreg free
  6023  0042C4  C09F  F1A0         	movff	?___fladd,_asin$3682
  6024  0042C8  C0A0  F1A1         	movff	?___fladd+1,_asin$3682+1
  6025  0042CC  C0A1  F1A2         	movff	?___fladd+2,_asin$3682+2
  6026  0042D0  C0A2  F1A3         	movff	?___fladd+3,_asin$3682+3
  6027  0042D4  C1A0  F0AB         	movff	_asin$3682,___flneg@f1
  6028  0042D8  C1A1  F0AC         	movff	_asin$3682+1,___flneg@f1+1
  6029  0042DC  C1A2  F0AD         	movff	_asin$3682+2,___flneg@f1+2
  6030  0042E0  C1A3  F0AE         	movff	_asin$3682+3,___flneg@f1+3
  6031  0042E4  ECCE  F031         	call	___flneg	;wreg free
  6032  0042E8  C0AB  F194         	movff	?___flneg,?_asin
  6033  0042EC  C0AC  F195         	movff	?___flneg+1,?_asin+1
  6034  0042F0  C0AD  F196         	movff	?___flneg+2,?_asin+2
  6035  0042F4  C0AE  F197         	movff	?___flneg+3,?_asin+3
  6036  0042F8  0012               	return	
  6037  0042FA                     l6683:
  6038  0042FA  C194  F094         	movff	asin@x,___fldiv@f2
  6039  0042FE  C195  F095         	movff	asin@x+1,___fldiv@f2+1
  6040  004302  C196  F096         	movff	asin@x+2,___fldiv@f2+2
  6041  004306  C197  F097         	movff	asin@x+3,___fldiv@f2+3
  6042  00430A  C1A8  F090         	movff	asin@y,___fldiv@f1
  6043  00430E  C1A9  F091         	movff	asin@y+1,___fldiv@f1+1
  6044  004312  C1AA  F092         	movff	asin@y+2,___fldiv@f1+2
  6045  004316  C1AB  F093         	movff	asin@y+3,___fldiv@f1+3
  6046  00431A  EC4D  F02B         	call	___fldiv	;wreg free
  6047  00431E  C090  F1AC         	movff	?___fldiv,_asin$3680
  6048  004322  C091  F1AD         	movff	?___fldiv+1,_asin$3680+1
  6049  004326  C092  F1AE         	movff	?___fldiv+2,_asin$3680+2
  6050  00432A  C093  F1AF         	movff	?___fldiv+3,_asin$3680+3
  6051  00432E  C1AC  F0BF         	movff	_asin$3680,atan@f
  6052  004332  C1AD  F0C0         	movff	_asin$3680+1,atan@f+1
  6053  004336  C1AE  F0C1         	movff	_asin$3680+2,atan@f+2
  6054  00433A  C1AF  F0C2         	movff	_asin$3680+3,atan@f+3
  6055  00433E  EC94  F024         	call	_atan	;wreg free
  6056  004342  C0BF  F1A4         	movff	?_atan,_asin$3681
  6057  004346  C0C0  F1A5         	movff	?_atan+1,_asin$3681+1
  6058  00434A  C0C1  F1A6         	movff	?_atan+2,_asin$3681+2
  6059  00434E  C0C2  F1A7         	movff	?_atan+3,_asin$3681+3
  6060  004352  C1A4  F0AB         	movff	_asin$3681,___flneg@f1
  6061  004356  C1A5  F0AC         	movff	_asin$3681+1,___flneg@f1+1
  6062  00435A  C1A6  F0AD         	movff	_asin$3681+2,___flneg@f1+2
  6063  00435E  C1A7  F0AE         	movff	_asin$3681+3,___flneg@f1+3
  6064  004362  ECCE  F031         	call	___flneg	;wreg free
  6065  004366  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6066  00436A  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6067  00436E  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6068  004372  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6069  004376  0EDB               	movlw	219
  6070  004378  0100               	movlb	0	; () banked
  6071  00437A  6FA3               	movwf	___fladd@f2& (0+255),b
  6072  00437C  0E0F               	movlw	15
  6073  00437E  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6074  004380  0EC9               	movlw	201
  6075  004382  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6076  004384  0E3F               	movlw	63
  6077  004386  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6078  004388  EC5E  F023         	call	___fladd	;wreg free
  6079  00438C  C09F  F194         	movff	?___fladd,?_asin
  6080  004390  C0A0  F195         	movff	?___fladd+1,?_asin+1
  6081  004394  C0A1  F196         	movff	?___fladd+2,?_asin+2
  6082  004398  C0A2  F197         	movff	?___fladd+3,?_asin+3
  6083  00439C  0012               	return	
  6084  00439E  0012               	return		;funcret
  6085  0043A0                     __end_of_asin:
  6086                           	opt stack 0
  6087                           tblptru	equ	0xFF8
  6088                           tblptrh	equ	0xFF7
  6089                           tblptrl	equ	0xFF6
  6090                           tablat	equ	0xFF5
  6091                           postinc0	equ	0xFEE
  6092                           wreg	equ	0xFE8
  6093                           indf2	equ	0xFDF
  6094                           postinc2	equ	0xFDE
  6095                           postdec2	equ	0xFDD
  6096                           fsr2h	equ	0xFDA
  6097                           fsr2l	equ	0xFD9
  6098                           status	equ	0xFD8
  6099                           
  6100 ;; *************** function _sqrt *****************
  6101 ;; Defined at:
  6102 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;  y               4  113[BANK0 ] unsigned char 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;  x               4   13[BANK1 ] unsigned char 
  6107 ;;  q               4    9[BANK1 ] unsigned char 
  6108 ;;  z               4    4[BANK1 ] unsigned char 
  6109 ;;  og              4    0[BANK1 ] unsigned char 
  6110 ;;  i               1    8[BANK1 ] unsigned char 
  6111 ;; Return value:  Size  Location     Type
  6112 ;;                  4  113[BANK0 ] unsigned char 
  6113 ;; Registers used:
  6114 ;;		wreg, status,2, status,0, cstack
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6120 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6121 ;;      Locals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  6122 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;      Totals:         0       8      17       0       0       0       0       0       0       0       0       0       
      +0       0
  6124 ;;Total ram usage:       25 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; Hardware stack levels required when called:    8
  6127 ;; This function calls:
  6128 ;;		___flge
  6129 ;;		___flmul
  6130 ;;		___flsub
  6131 ;; This function is called by:
  6132 ;;		_parallelo
  6133 ;;		_asin
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           	psect	text9
  6138  004DD2                     __ptext9:
  6139                           	opt stack 0
  6140  004DD2                     _sqrt:
  6141                           	opt stack 20
  6142                           
  6143                           ;incstack = 0
  6144  004DD2  0E00               	movlw	0
  6145  004DD4  0100               	movlb	0	; () banked
  6146  004DD6  6FB3               	movwf	___flge@ff1& (0+255),b
  6147  004DD8  0E00               	movlw	0
  6148  004DDA  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6149  004DDC  0E00               	movlw	0
  6150  004DDE  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6151  004DE0  0E00               	movlw	0
  6152  004DE2  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6153  004DE4  C0D1  F0B7         	movff	sqrt@y,___flge@ff2
  6154  004DE8  C0D2  F0B8         	movff	sqrt@y+1,___flge@ff2+1
  6155  004DEC  C0D3  F0B9         	movff	sqrt@y+2,___flge@ff2+2
  6156  004DF0  C0D4  F0BA         	movff	sqrt@y+3,___flge@ff2+3
  6157  004DF4  EC1A  F02E         	call	___flge	;wreg free
  6158  004DF8  0100               	movlb	0	; () banked
  6159  004DFA  A0D8               	btfss	status,0,c
  6160  004DFC  D012               	goto	l1470
  6161                           
  6162                           ; BSR set to: 0
  6163  004DFE  0100               	movlb	0	; () banked
  6164  004E00  AFD4               	btfss	(sqrt@y+3)& (0+255),7,b
  6165  004E02  D005               	goto	l1471
  6166                           
  6167                           ; BSR set to: 0
  6168  004E04  0E00               	movlw	0
  6169  004E06  0101               	movlb	1	; () banked
  6170  004E08  6F43               	movwf	(_errno+1)& (0+255),b
  6171  004E0A  0E21               	movlw	33
  6172  004E0C  6F42               	movwf	_errno& (0+255),b
  6173  004E0E                     l1471:
  6174  004E0E  0E00               	movlw	0
  6175  004E10  0100               	movlb	0	; () banked
  6176  004E12  6FD1               	movwf	?_sqrt& (0+255),b
  6177  004E14  0E00               	movlw	0
  6178  004E16  6FD2               	movwf	(?_sqrt+1)& (0+255),b
  6179  004E18  0E00               	movlw	0
  6180  004E1A  6FD3               	movwf	(?_sqrt+2)& (0+255),b
  6181  004E1C  0E00               	movlw	0
  6182  004E1E  6FD4               	movwf	(?_sqrt+3)& (0+255),b
  6183                           
  6184                           ; BSR set to: 0
  6185  004E20  0012               	return	
  6186  004E22                     l1470:
  6187                           
  6188                           ; BSR set to: 0
  6189  004E22  C0D1  F187         	movff	sqrt@y,sqrt@z
  6190  004E26  C0D2  F188         	movff	sqrt@y+1,sqrt@z+1
  6191  004E2A  C0D3  F189         	movff	sqrt@y+2,sqrt@z+2
  6192  004E2E  C0D4  F18A         	movff	sqrt@y+3,sqrt@z+3
  6193                           
  6194                           ; BSR set to: 0
  6195  004E32  C0D1  F0D5         	movff	sqrt@y,??_sqrt
  6196  004E36  C0D2  F0D6         	movff	sqrt@y+1,??_sqrt+1
  6197  004E3A  C0D3  F0D7         	movff	sqrt@y+2,??_sqrt+2
  6198  004E3E  C0D4  F0D8         	movff	sqrt@y+3,??_sqrt+3
  6199  004E42  0100               	movlb	0	; () banked
  6200  004E44  1FD5               	comf	??_sqrt& (0+255),f,b
  6201  004E46  1FD6               	comf	(??_sqrt+1)& (0+255),f,b
  6202  004E48  1FD7               	comf	(??_sqrt+2)& (0+255),f,b
  6203  004E4A  1FD8               	comf	(??_sqrt+3)& (0+255),f,b
  6204  004E4C  2BD5               	incf	??_sqrt& (0+255),f,b
  6205  004E4E  0E00               	movlw	0
  6206  004E50  23D6               	addwfc	(??_sqrt+1)& (0+255),f,b
  6207  004E52  23D7               	addwfc	(??_sqrt+2)& (0+255),f,b
  6208  004E54  23D8               	addwfc	(??_sqrt+3)& (0+255),f,b
  6209  004E56  0E5E               	movlw	94
  6210  004E58  0100               	movlb	0	; () banked
  6211  004E5A  25D5               	addwf	??_sqrt& (0+255),w,b
  6212  004E5C  0101               	movlb	1	; () banked
  6213  004E5E  6F90               	movwf	sqrt@x& (0+255),b
  6214  004E60  0EC8               	movlw	200
  6215  004E62  0100               	movlb	0	; () banked
  6216  004E64  21D6               	addwfc	(??_sqrt+1)& (0+255),w,b
  6217  004E66  0101               	movlb	1	; () banked
  6218  004E68  6F91               	movwf	(sqrt@x+1)& (0+255),b
  6219  004E6A  0E6E               	movlw	110
  6220  004E6C  0100               	movlb	0	; () banked
  6221  004E6E  21D7               	addwfc	(??_sqrt+2)& (0+255),w,b
  6222  004E70  0101               	movlb	1	; () banked
  6223  004E72  6F92               	movwf	(sqrt@x+2)& (0+255),b
  6224  004E74  0EBE               	movlw	190
  6225  004E76  0100               	movlb	0	; () banked
  6226  004E78  21D8               	addwfc	(??_sqrt+3)& (0+255),w,b
  6227  004E7A  0101               	movlb	1	; () banked
  6228  004E7C  6F93               	movwf	(sqrt@x+3)& (0+255),b
  6229                           
  6230                           ; BSR set to: 1
  6231  004E7E  0101               	movlb	1	; () banked
  6232  004E80  90D8               	bcf	status,0,c
  6233  004E82  3393               	rrcf	(sqrt@x+3)& (0+255),f,b
  6234  004E84  3392               	rrcf	(sqrt@x+2)& (0+255),f,b
  6235  004E86  3391               	rrcf	(sqrt@x+1)& (0+255),f,b
  6236  004E88  3390               	rrcf	sqrt@x& (0+255),f,b
  6237                           
  6238                           ; BSR set to: 1
  6239  004E8A  0E00               	movlw	0
  6240  004E8C  0101               	movlb	1	; () banked
  6241  004E8E  5F87               	subwf	sqrt@z& (0+255),f,b
  6242  004E90  0E00               	movlw	0
  6243  004E92  5B88               	subwfb	(sqrt@z+1)& (0+255),f,b
  6244  004E94  0E80               	movlw	128
  6245  004E96  5B89               	subwfb	(sqrt@z+2)& (0+255),f,b
  6246  004E98  0E00               	movlw	0
  6247  004E9A  5B8A               	subwfb	(sqrt@z+3)& (0+255),f,b
  6248                           
  6249                           ; BSR set to: 1
  6250  004E9C  0E04               	movlw	4
  6251  004E9E  0101               	movlb	1	; () banked
  6252  004EA0  6F8B               	movwf	sqrt@i& (0+255),b
  6253  004EA2  D000               	goto	l6529
  6254  004EA4                     l6529:
  6255                           
  6256                           ; BSR set to: 1
  6257  004EA4  C190  F183         	movff	sqrt@x,sqrt@og
  6258  004EA8  C191  F184         	movff	sqrt@x+1,sqrt@og+1
  6259  004EAC  C192  F185         	movff	sqrt@x+2,sqrt@og+2
  6260  004EB0  C193  F186         	movff	sqrt@x+3,sqrt@og+3
  6261                           
  6262                           ; BSR set to: 1
  6263  004EB4  C190  F081         	movff	sqrt@x,___flmul@f1
  6264  004EB8  C191  F082         	movff	sqrt@x+1,___flmul@f1+1
  6265  004EBC  C192  F083         	movff	sqrt@x+2,___flmul@f1+2
  6266  004EC0  C193  F084         	movff	sqrt@x+3,___flmul@f1+3
  6267  004EC4  C187  F085         	movff	sqrt@z,___flmul@f2
  6268  004EC8  C188  F086         	movff	sqrt@z+1,___flmul@f2+1
  6269  004ECC  C189  F087         	movff	sqrt@z+2,___flmul@f2+2
  6270  004ED0  C18A  F088         	movff	sqrt@z+3,___flmul@f2+3
  6271  004ED4  EC9B  F02A         	call	___flmul	;wreg free
  6272  004ED8  C081  F18C         	movff	?___flmul,sqrt@q
  6273  004EDC  C082  F18D         	movff	?___flmul+1,sqrt@q+1
  6274  004EE0  C083  F18E         	movff	?___flmul+2,sqrt@q+2
  6275  004EE4  C084  F18F         	movff	?___flmul+3,sqrt@q+3
  6276  004EE8  C18C  F081         	movff	sqrt@q,___flmul@f1
  6277  004EEC  C18D  F082         	movff	sqrt@q+1,___flmul@f1+1
  6278  004EF0  C18E  F083         	movff	sqrt@q+2,___flmul@f1+2
  6279  004EF4  C18F  F084         	movff	sqrt@q+3,___flmul@f1+3
  6280  004EF8  C190  F085         	movff	sqrt@x,___flmul@f2
  6281  004EFC  C191  F086         	movff	sqrt@x+1,___flmul@f2+1
  6282  004F00  C192  F087         	movff	sqrt@x+2,___flmul@f2+2
  6283  004F04  C193  F088         	movff	sqrt@x+3,___flmul@f2+3
  6284  004F08  EC9B  F02A         	call	___flmul	;wreg free
  6285  004F0C  C081  F18C         	movff	?___flmul,sqrt@q
  6286  004F10  C082  F18D         	movff	?___flmul+1,sqrt@q+1
  6287  004F14  C083  F18E         	movff	?___flmul+2,sqrt@q+2
  6288  004F18  C084  F18F         	movff	?___flmul+3,sqrt@q+3
  6289  004F1C  C18C  F081         	movff	sqrt@q,___flmul@f1
  6290  004F20  C18D  F082         	movff	sqrt@q+1,___flmul@f1+1
  6291  004F24  C18E  F083         	movff	sqrt@q+2,___flmul@f1+2
  6292  004F28  C18F  F084         	movff	sqrt@q+3,___flmul@f1+3
  6293  004F2C  C190  F085         	movff	sqrt@x,___flmul@f2
  6294  004F30  C191  F086         	movff	sqrt@x+1,___flmul@f2+1
  6295  004F34  C192  F087         	movff	sqrt@x+2,___flmul@f2+2
  6296  004F38  C193  F088         	movff	sqrt@x+3,___flmul@f2+3
  6297  004F3C  EC9B  F02A         	call	___flmul	;wreg free
  6298  004F40  C081  F18C         	movff	?___flmul,sqrt@q
  6299  004F44  C082  F18D         	movff	?___flmul+1,sqrt@q+1
  6300  004F48  C083  F18E         	movff	?___flmul+2,sqrt@q+2
  6301  004F4C  C084  F18F         	movff	?___flmul+3,sqrt@q+3
  6302  004F50  C190  F081         	movff	sqrt@x,___flmul@f1
  6303  004F54  C191  F082         	movff	sqrt@x+1,___flmul@f1+1
  6304  004F58  C192  F083         	movff	sqrt@x+2,___flmul@f1+2
  6305  004F5C  C193  F084         	movff	sqrt@x+3,___flmul@f1+3
  6306  004F60  0E00               	movlw	0
  6307  004F62  0100               	movlb	0	; () banked
  6308  004F64  6F85               	movwf	___flmul@f2& (0+255),b
  6309  004F66  0E00               	movlw	0
  6310  004F68  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  6311  004F6A  0EC0               	movlw	192
  6312  004F6C  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  6313  004F6E  0E3F               	movlw	63
  6314  004F70  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  6315  004F72  EC9B  F02A         	call	___flmul	;wreg free
  6316  004F76  C081  F190         	movff	?___flmul,sqrt@x
  6317  004F7A  C082  F191         	movff	?___flmul+1,sqrt@x+1
  6318  004F7E  C083  F192         	movff	?___flmul+2,sqrt@x+2
  6319  004F82  C084  F193         	movff	?___flmul+3,sqrt@x+3
  6320  004F86  C190  F0C9         	movff	sqrt@x,___flsub@f1
  6321  004F8A  C191  F0CA         	movff	sqrt@x+1,___flsub@f1+1
  6322  004F8E  C192  F0CB         	movff	sqrt@x+2,___flsub@f1+2
  6323  004F92  C193  F0CC         	movff	sqrt@x+3,___flsub@f1+3
  6324  004F96  C18C  F0CD         	movff	sqrt@q,___flsub@f2
  6325  004F9A  C18D  F0CE         	movff	sqrt@q+1,___flsub@f2+1
  6326  004F9E  C18E  F0CF         	movff	sqrt@q+2,___flsub@f2+2
  6327  004FA2  C18F  F0D0         	movff	sqrt@q+3,___flsub@f2+3
  6328  004FA6  EC01  F031         	call	___flsub	;wreg free
  6329  004FAA  C0C9  F190         	movff	?___flsub,sqrt@x
  6330  004FAE  C0CA  F191         	movff	?___flsub+1,sqrt@x+1
  6331  004FB2  C0CB  F192         	movff	?___flsub+2,sqrt@x+2
  6332  004FB6  C0CC  F193         	movff	?___flsub+3,sqrt@x+3
  6333  004FBA  0101               	movlb	1	; () banked
  6334  004FBC  2F8B               	decfsz	sqrt@i& (0+255),f,b
  6335  004FBE  D772               	goto	l6529
  6336  004FC0  D000               	goto	l6543
  6337  004FC2                     l6543:
  6338                           
  6339                           ; BSR set to: 1
  6340  004FC2  C190  F081         	movff	sqrt@x,___flmul@f1
  6341  004FC6  C191  F082         	movff	sqrt@x+1,___flmul@f1+1
  6342  004FCA  C192  F083         	movff	sqrt@x+2,___flmul@f1+2
  6343  004FCE  C193  F084         	movff	sqrt@x+3,___flmul@f1+3
  6344  004FD2  C0D1  F085         	movff	sqrt@y,___flmul@f2
  6345  004FD6  C0D2  F086         	movff	sqrt@y+1,___flmul@f2+1
  6346  004FDA  C0D3  F087         	movff	sqrt@y+2,___flmul@f2+2
  6347  004FDE  C0D4  F088         	movff	sqrt@y+3,___flmul@f2+3
  6348  004FE2  EC9B  F02A         	call	___flmul	;wreg free
  6349  004FE6  C081  F0D1         	movff	?___flmul,?_sqrt
  6350  004FEA  C082  F0D2         	movff	?___flmul+1,?_sqrt+1
  6351  004FEE  C083  F0D3         	movff	?___flmul+2,?_sqrt+2
  6352  004FF2  C084  F0D4         	movff	?___flmul+3,?_sqrt+3
  6353  004FF6  0012               	return	
  6354  004FF8  0012               	return		;funcret
  6355  004FFA                     __end_of_sqrt:
  6356                           	opt stack 0
  6357                           tblptru	equ	0xFF8
  6358                           tblptrh	equ	0xFF7
  6359                           tblptrl	equ	0xFF6
  6360                           tablat	equ	0xFF5
  6361                           postinc0	equ	0xFEE
  6362                           wreg	equ	0xFE8
  6363                           indf2	equ	0xFDF
  6364                           postinc2	equ	0xFDE
  6365                           postdec2	equ	0xFDD
  6366                           fsr2h	equ	0xFDA
  6367                           fsr2l	equ	0xFD9
  6368                           status	equ	0xFD8
  6369                           
  6370 ;; *************** function _atan *****************
  6371 ;; Defined at:
  6372 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atan.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;  f               4   95[BANK0 ] unsigned char 
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;  val             4  112[BANK0 ] unsigned char 
  6377 ;;  val_squared     4  108[BANK0 ] unsigned char 
  6378 ;;  x               4  103[BANK0 ] unsigned char 
  6379 ;;  y               4   99[BANK0 ] unsigned char 
  6380 ;;  recip           1  107[BANK0 ] unsigned char 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;                  4   95[BANK0 ] unsigned char 
  6383 ;; Registers used:
  6384 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6390 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;Total ram usage:       21 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    8
  6397 ;; This function calls:
  6398 ;;		___fladd
  6399 ;;		___fldiv
  6400 ;;		___flge
  6401 ;;		___flmul
  6402 ;;		___flneg
  6403 ;;		_eval_poly
  6404 ;;		_fabs
  6405 ;; This function is called by:
  6406 ;;		_asin
  6407 ;; This function uses a non-reentrant model
  6408 ;;
  6409                           
  6410                           	psect	text10
  6411  004928                     __ptext10:
  6412                           	opt stack 0
  6413  004928                     _atan:
  6414                           	opt stack 19
  6415                           
  6416                           ;incstack = 0
  6417  004928  C0BF  F0AF         	movff	atan@f,fabs@d
  6418  00492C  C0C0  F0B0         	movff	atan@f+1,fabs@d+1
  6419  004930  C0C1  F0B1         	movff	atan@f+2,fabs@d+2
  6420  004934  C0C2  F0B2         	movff	atan@f+3,fabs@d+3
  6421  004938  ECAF  F031         	call	_fabs	;wreg free
  6422  00493C  C0AF  F0D0         	movff	?_fabs,atan@val
  6423  004940  C0B0  F0D1         	movff	?_fabs+1,atan@val+1
  6424  004944  C0B1  F0D2         	movff	?_fabs+2,atan@val+2
  6425  004948  C0B2  F0D3         	movff	?_fabs+3,atan@val+3
  6426  00494C  0100               	movlb	0	; () banked
  6427  00494E  51D0               	movf	atan@val& (0+255),w,b
  6428  004950  0100               	movlb	0	; () banked
  6429  004952  11D1               	iorwf	(atan@val+1)& (0+255),w,b
  6430  004954  0100               	movlb	0	; () banked
  6431  004956  11D2               	iorwf	(atan@val+2)& (0+255),w,b
  6432  004958  0100               	movlb	0	; () banked
  6433  00495A  11D3               	iorwf	(atan@val+3)& (0+255),w,b
  6434  00495C  A4D8               	btfss	status,2,c
  6435  00495E  D00A               	goto	l6559
  6436                           
  6437                           ; BSR set to: 0
  6438  004960  0E00               	movlw	0
  6439  004962  0100               	movlb	0	; () banked
  6440  004964  6FBF               	movwf	?_atan& (0+255),b
  6441  004966  0E00               	movlw	0
  6442  004968  6FC0               	movwf	(?_atan+1)& (0+255),b
  6443  00496A  0E00               	movlw	0
  6444  00496C  6FC1               	movwf	(?_atan+2)& (0+255),b
  6445  00496E  0E00               	movlw	0
  6446  004970  6FC2               	movwf	(?_atan+3)& (0+255),b
  6447                           
  6448                           ; BSR set to: 0
  6449  004972  0012               	return	
  6450  004974                     l6559:
  6451                           
  6452                           ; BSR set to: 0
  6453  004974  0E00               	movlw	0
  6454  004976  0100               	movlb	0	; () banked
  6455  004978  6FB3               	movwf	___flge@ff1& (0+255),b
  6456  00497A  0E00               	movlw	0
  6457  00497C  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6458  00497E  0E80               	movlw	128
  6459  004980  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6460  004982  0E3F               	movlw	63
  6461  004984  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6462  004986  C0D0  F0B7         	movff	atan@val,___flge@ff2
  6463  00498A  C0D1  F0B8         	movff	atan@val+1,___flge@ff2+1
  6464  00498E  C0D2  F0B9         	movff	atan@val+2,___flge@ff2+2
  6465  004992  C0D3  F0BA         	movff	atan@val+3,___flge@ff2+3
  6466  004996  EC1A  F02E         	call	___flge	;wreg free
  6467  00499A  0100               	movlb	0	; () banked
  6468  00499C  B0D8               	btfsc	status,0,c
  6469  00499E  D002               	goto	u8180
  6470  0049A0  0E01               	movlw	1
  6471  0049A2  D001               	goto	u8190
  6472  0049A4                     u8180:
  6473  0049A4  0E00               	movlw	0
  6474  0049A6                     u8190:
  6475  0049A6  0100               	movlb	0	; () banked
  6476  0049A8  6FCB               	movwf	atan@recip& (0+255),b
  6477  0049AA  0100               	movlb	0	; () banked
  6478  0049AC  51CB               	movf	atan@recip& (0+255),w,b
  6479  0049AE  B4D8               	btfsc	status,2,c
  6480  0049B0  D01B               	goto	l1024
  6481                           
  6482                           ; BSR set to: 0
  6483  0049B2  0E00               	movlw	0
  6484  0049B4  0100               	movlb	0	; () banked
  6485  0049B6  6F90               	movwf	___fldiv@f1& (0+255),b
  6486  0049B8  0E00               	movlw	0
  6487  0049BA  6F91               	movwf	(___fldiv@f1+1)& (0+255),b
  6488  0049BC  0E80               	movlw	128
  6489  0049BE  6F92               	movwf	(___fldiv@f1+2)& (0+255),b
  6490  0049C0  0E3F               	movlw	63
  6491  0049C2  6F93               	movwf	(___fldiv@f1+3)& (0+255),b
  6492  0049C4  C0D0  F094         	movff	atan@val,___fldiv@f2
  6493  0049C8  C0D1  F095         	movff	atan@val+1,___fldiv@f2+1
  6494  0049CC  C0D2  F096         	movff	atan@val+2,___fldiv@f2+2
  6495  0049D0  C0D3  F097         	movff	atan@val+3,___fldiv@f2+3
  6496  0049D4  EC4D  F02B         	call	___fldiv	;wreg free
  6497  0049D8  C090  F0D0         	movff	?___fldiv,atan@val
  6498  0049DC  C091  F0D1         	movff	?___fldiv+1,atan@val+1
  6499  0049E0  C092  F0D2         	movff	?___fldiv+2,atan@val+2
  6500  0049E4  C093  F0D3         	movff	?___fldiv+3,atan@val+3
  6501  0049E8                     l1024:
  6502  0049E8  C0D0  F081         	movff	atan@val,___flmul@f1
  6503  0049EC  C0D1  F082         	movff	atan@val+1,___flmul@f1+1
  6504  0049F0  C0D2  F083         	movff	atan@val+2,___flmul@f1+2
  6505  0049F4  C0D3  F084         	movff	atan@val+3,___flmul@f1+3
  6506  0049F8  C0D0  F085         	movff	atan@val,___flmul@f2
  6507  0049FC  C0D1  F086         	movff	atan@val+1,___flmul@f2+1
  6508  004A00  C0D2  F087         	movff	atan@val+2,___flmul@f2+2
  6509  004A04  C0D3  F088         	movff	atan@val+3,___flmul@f2+3
  6510  004A08  EC9B  F02A         	call	___flmul	;wreg free
  6511  004A0C  C081  F0CC         	movff	?___flmul,atan@val_squared
  6512  004A10  C082  F0CD         	movff	?___flmul+1,atan@val_squared+1
  6513  004A14  C083  F0CE         	movff	?___flmul+2,atan@val_squared+2
  6514  004A18  C084  F0CF         	movff	?___flmul+3,atan@val_squared+3
  6515  004A1C  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  6516  004A20  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  6517  004A24  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  6518  004A28  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  6519  004A2C  0E19               	movlw	low atan@coeff_b
  6520  004A2E  0100               	movlb	0	; () banked
  6521  004A30  6FAF               	movwf	eval_poly@d& (0+255),b
  6522  004A32  0E0D               	movlw	high atan@coeff_b
  6523  004A34  0100               	movlb	0	; () banked
  6524  004A36  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  6525  004A38  0E00               	movlw	0
  6526  004A3A  0100               	movlb	0	; () banked
  6527  004A3C  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  6528  004A3E  0E04               	movlw	4
  6529  004A40  6FB1               	movwf	eval_poly@n& (0+255),b
  6530  004A42  EC06  F02D         	call	_eval_poly	;wreg free
  6531  004A46  C0AB  F0C3         	movff	?_eval_poly,atan@y
  6532  004A4A  C0AC  F0C4         	movff	?_eval_poly+1,atan@y+1
  6533  004A4E  C0AD  F0C5         	movff	?_eval_poly+2,atan@y+2
  6534  004A52  C0AE  F0C6         	movff	?_eval_poly+3,atan@y+3
  6535  004A56  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  6536  004A5A  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  6537  004A5E  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  6538  004A62  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  6539  004A66  0E01               	movlw	low atan@coeff_a
  6540  004A68  0100               	movlb	0	; () banked
  6541  004A6A  6FAF               	movwf	eval_poly@d& (0+255),b
  6542  004A6C  0E0D               	movlw	high atan@coeff_a
  6543  004A6E  0100               	movlb	0	; () banked
  6544  004A70  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  6545  004A72  0E00               	movlw	0
  6546  004A74  0100               	movlb	0	; () banked
  6547  004A76  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  6548  004A78  0E05               	movlw	5
  6549  004A7A  6FB1               	movwf	eval_poly@n& (0+255),b
  6550  004A7C  EC06  F02D         	call	_eval_poly	;wreg free
  6551  004A80  C0AB  F0C7         	movff	?_eval_poly,atan@x
  6552  004A84  C0AC  F0C8         	movff	?_eval_poly+1,atan@x+1
  6553  004A88  C0AD  F0C9         	movff	?_eval_poly+2,atan@x+2
  6554  004A8C  C0AE  F0CA         	movff	?_eval_poly+3,atan@x+3
  6555  004A90  C0D0  F081         	movff	atan@val,___flmul@f1
  6556  004A94  C0D1  F082         	movff	atan@val+1,___flmul@f1+1
  6557  004A98  C0D2  F083         	movff	atan@val+2,___flmul@f1+2
  6558  004A9C  C0D3  F084         	movff	atan@val+3,___flmul@f1+3
  6559  004AA0  C0C3  F094         	movff	atan@y,___fldiv@f2
  6560  004AA4  C0C4  F095         	movff	atan@y+1,___fldiv@f2+1
  6561  004AA8  C0C5  F096         	movff	atan@y+2,___fldiv@f2+2
  6562  004AAC  C0C6  F097         	movff	atan@y+3,___fldiv@f2+3
  6563  004AB0  C0C7  F090         	movff	atan@x,___fldiv@f1
  6564  004AB4  C0C8  F091         	movff	atan@x+1,___fldiv@f1+1
  6565  004AB8  C0C9  F092         	movff	atan@x+2,___fldiv@f1+2
  6566  004ABC  C0CA  F093         	movff	atan@x+3,___fldiv@f1+3
  6567  004AC0  EC4D  F02B         	call	___fldiv	;wreg free
  6568  004AC4  C090  F085         	movff	?___fldiv,___flmul@f2
  6569  004AC8  C091  F086         	movff	?___fldiv+1,___flmul@f2+1
  6570  004ACC  C092  F087         	movff	?___fldiv+2,___flmul@f2+2
  6571  004AD0  C093  F088         	movff	?___fldiv+3,___flmul@f2+3
  6572  004AD4  EC9B  F02A         	call	___flmul	;wreg free
  6573  004AD8  C081  F0D0         	movff	?___flmul,atan@val
  6574  004ADC  C082  F0D1         	movff	?___flmul+1,atan@val+1
  6575  004AE0  C083  F0D2         	movff	?___flmul+2,atan@val+2
  6576  004AE4  C084  F0D3         	movff	?___flmul+3,atan@val+3
  6577  004AE8  0100               	movlb	0	; () banked
  6578  004AEA  51CB               	movf	atan@recip& (0+255),w,b
  6579  004AEC  0100               	movlb	0	; () banked
  6580  004AEE  B4D8               	btfsc	status,2,c
  6581  004AF0  D026               	goto	l6571
  6582                           
  6583                           ; BSR set to: 0
  6584  004AF2  C0D0  F0AB         	movff	atan@val,___flneg@f1
  6585  004AF6  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  6586  004AFA  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  6587  004AFE  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  6588  004B02  ECCE  F031         	call	___flneg	;wreg free
  6589  004B06  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6590  004B0A  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6591  004B0E  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6592  004B12  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6593  004B16  0EDB               	movlw	219
  6594  004B18  0100               	movlb	0	; () banked
  6595  004B1A  6FA3               	movwf	___fladd@f2& (0+255),b
  6596  004B1C  0E0F               	movlw	15
  6597  004B1E  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6598  004B20  0EC9               	movlw	201
  6599  004B22  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6600  004B24  0E3F               	movlw	63
  6601  004B26  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6602  004B28  EC5E  F023         	call	___fladd	;wreg free
  6603  004B2C  C09F  F0D0         	movff	?___fladd,atan@val
  6604  004B30  C0A0  F0D1         	movff	?___fladd+1,atan@val+1
  6605  004B34  C0A1  F0D2         	movff	?___fladd+2,atan@val+2
  6606  004B38  C0A2  F0D3         	movff	?___fladd+3,atan@val+3
  6607  004B3C  D000               	goto	l6571
  6608  004B3E                     l6571:
  6609  004B3E  0100               	movlb	0	; () banked
  6610  004B40  BFC2               	btfsc	(atan@f+3)& (0+255),7,b
  6611  004B42  D009               	goto	l6575
  6612                           
  6613                           ; BSR set to: 0
  6614  004B44  C0D0  F0BF         	movff	atan@val,?_atan
  6615  004B48  C0D1  F0C0         	movff	atan@val+1,?_atan+1
  6616  004B4C  C0D2  F0C1         	movff	atan@val+2,?_atan+2
  6617  004B50  C0D3  F0C2         	movff	atan@val+3,?_atan+3
  6618  004B54  0012               	return	
  6619  004B56                     l6575:
  6620                           
  6621                           ; BSR set to: 0
  6622  004B56  C0D0  F0AB         	movff	atan@val,___flneg@f1
  6623  004B5A  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  6624  004B5E  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  6625  004B62  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  6626  004B66  ECCE  F031         	call	___flneg	;wreg free
  6627  004B6A  C0AB  F0BF         	movff	?___flneg,?_atan
  6628  004B6E  C0AC  F0C0         	movff	?___flneg+1,?_atan+1
  6629  004B72  C0AD  F0C1         	movff	?___flneg+2,?_atan+2
  6630  004B76  C0AE  F0C2         	movff	?___flneg+3,?_atan+3
  6631  004B7A  0012               	return	
  6632  004B7C  0012               	return		;funcret
  6633  004B7E                     __end_of_atan:
  6634                           	opt stack 0
  6635                           tblptru	equ	0xFF8
  6636                           tblptrh	equ	0xFF7
  6637                           tblptrl	equ	0xFF6
  6638                           tablat	equ	0xFF5
  6639                           postinc0	equ	0xFEE
  6640                           wreg	equ	0xFE8
  6641                           indf2	equ	0xFDF
  6642                           postinc2	equ	0xFDE
  6643                           postdec2	equ	0xFDD
  6644                           fsr2h	equ	0xFDA
  6645                           fsr2l	equ	0xFD9
  6646                           status	equ	0xFD8
  6647                           
  6648 ;; *************** function _fabs *****************
  6649 ;; Defined at:
  6650 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fabs.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;  d               4   79[BANK0 ] unsigned char 
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;		None
  6655 ;; Return value:  Size  Location     Type
  6656 ;;                  4   79[BANK0 ] unsigned char 
  6657 ;; Registers used:
  6658 ;;		wreg, status,2, status,0, cstack
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6664 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;Total ram usage:        4 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    6
  6671 ;; This function calls:
  6672 ;;		___flneg
  6673 ;; This function is called by:
  6674 ;;		_asin
  6675 ;;		_atan
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           	psect	text11
  6680  00635E                     __ptext11:
  6681                           	opt stack 0
  6682  00635E                     _fabs:
  6683                           	opt stack 21
  6684                           
  6685                           ;incstack = 0
  6686  00635E  0100               	movlb	0	; () banked
  6687  006360  AFB2               	btfss	(fabs@d+3)& (0+255),7,b
  6688  006362  D013               	goto	l1141
  6689                           
  6690                           ; BSR set to: 0
  6691  006364  C0AF  F0AB         	movff	fabs@d,___flneg@f1
  6692  006368  C0B0  F0AC         	movff	fabs@d+1,___flneg@f1+1
  6693  00636C  C0B1  F0AD         	movff	fabs@d+2,___flneg@f1+2
  6694  006370  C0B2  F0AE         	movff	fabs@d+3,___flneg@f1+3
  6695  006374  ECCE  F031         	call	___flneg	;wreg free
  6696  006378  C0AB  F0AF         	movff	?___flneg,?_fabs
  6697  00637C  C0AC  F0B0         	movff	?___flneg+1,?_fabs+1
  6698  006380  C0AD  F0B1         	movff	?___flneg+2,?_fabs+2
  6699  006384  C0AE  F0B2         	movff	?___flneg+3,?_fabs+3
  6700  006388  0012               	return	
  6701  00638A                     l1141:
  6702                           
  6703                           ; BSR set to: 0
  6704  00638A  C0AF  F0AF         	movff	fabs@d,?_fabs
  6705  00638E  C0B0  F0B0         	movff	fabs@d+1,?_fabs+1
  6706  006392  C0B1  F0B1         	movff	fabs@d+2,?_fabs+2
  6707  006396  C0B2  F0B2         	movff	fabs@d+3,?_fabs+3
  6708  00639A  0012               	return		;funcret
  6709  00639C                     __end_of_fabs:
  6710                           	opt stack 0
  6711                           tblptru	equ	0xFF8
  6712                           tblptrh	equ	0xFF7
  6713                           tblptrl	equ	0xFF6
  6714                           tablat	equ	0xFF5
  6715                           postinc0	equ	0xFEE
  6716                           wreg	equ	0xFE8
  6717                           indf2	equ	0xFDF
  6718                           postinc2	equ	0xFDE
  6719                           postdec2	equ	0xFDD
  6720                           fsr2h	equ	0xFDA
  6721                           fsr2l	equ	0xFD9
  6722                           status	equ	0xFD8
  6723                           
  6724 ;; *************** function _abs *****************
  6725 ;; Defined at:
  6726 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\abs.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;  a               2   23[BANK0 ] int 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;		None
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  2   23[BANK0 ] int 
  6733 ;; Registers used:
  6734 ;;		wreg, status,2, status,0
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6740 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;Total ram usage:        4 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    5
  6747 ;; This function calls:
  6748 ;;		Nothing
  6749 ;; This function is called by:
  6750 ;;		_park_search
  6751 ;;		_parallelo
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           	psect	text12
  6756  0064E2                     __ptext12:
  6757                           	opt stack 0
  6758  0064E2                     _abs:
  6759                           	opt stack 23
  6760                           
  6761                           ;incstack = 0
  6762  0064E2  0100               	movlb	0	; () banked
  6763  0064E4  AF78               	btfss	(abs@a+1)& (0+255),7,b
  6764  0064E6  D00E               	goto	l898
  6765                           
  6766                           ; BSR set to: 0
  6767  0064E8  C077  F079         	movff	abs@a,??_abs
  6768  0064EC  C078  F07A         	movff	abs@a+1,??_abs+1
  6769  0064F0  0100               	movlb	0	; () banked
  6770  0064F2  1F79               	comf	??_abs& (0+255),f,b
  6771  0064F4  1F7A               	comf	(??_abs+1)& (0+255),f,b
  6772  0064F6  4B79               	infsnz	??_abs& (0+255),f,b
  6773  0064F8  2B7A               	incf	(??_abs+1)& (0+255),f,b
  6774  0064FA  C079  F077         	movff	??_abs,?_abs
  6775  0064FE  C07A  F078         	movff	??_abs+1,?_abs+1
  6776  006502  0012               	return	
  6777  006504                     l898:
  6778                           
  6779                           ; BSR set to: 0
  6780  006504  C077  F077         	movff	abs@a,?_abs
  6781  006508  C078  F078         	movff	abs@a+1,?_abs+1
  6782                           
  6783                           ; BSR set to: 0
  6784  00650C  0012               	return		;funcret
  6785  00650E                     __end_of_abs:
  6786                           	opt stack 0
  6787                           tblptru	equ	0xFF8
  6788                           tblptrh	equ	0xFF7
  6789                           tblptrl	equ	0xFF6
  6790                           tablat	equ	0xFF5
  6791                           postinc0	equ	0xFEE
  6792                           wreg	equ	0xFE8
  6793                           indf2	equ	0xFDF
  6794                           postinc2	equ	0xFDE
  6795                           postdec2	equ	0xFDD
  6796                           fsr2h	equ	0xFDA
  6797                           fsr2l	equ	0xFD9
  6798                           status	equ	0xFD8
  6799                           
  6800 ;; *************** function ___awtofl *****************
  6801 ;; Defined at:
  6802 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  6803 ;; Parameters:    Size  Location     Type
  6804 ;;  c               2   33[BANK0 ] int 
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;  f1              4    0        int 
  6807 ;;  sign            1   37[BANK0 ] unsigned char 
  6808 ;; Return value:  Size  Location     Type
  6809 ;;                  4   33[BANK0 ] unsigned char 
  6810 ;; Registers used:
  6811 ;;		wreg, status,2, status,0, cstack
  6812 ;; Tracked objects:
  6813 ;;		On entry : 0/0
  6814 ;;		On exit  : 0/0
  6815 ;;		Unchanged: 0/0
  6816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6817 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6820 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6821 ;;Total ram usage:        5 bytes
  6822 ;; Hardware stack levels used:    1
  6823 ;; Hardware stack levels required when called:    6
  6824 ;; This function calls:
  6825 ;;		___flpack
  6826 ;; This function is called by:
  6827 ;;		_park_search
  6828 ;;		_parallelo
  6829 ;; This function uses a non-reentrant model
  6830 ;;
  6831                           
  6832                           	psect	text13
  6833  006312                     __ptext13:
  6834                           	opt stack 0
  6835  006312                     ___awtofl:
  6836                           	opt stack 22
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;incstack = 0
  6840  006312  0E00               	movlw	0
  6841  006314  0100               	movlb	0	; () banked
  6842  006316  6F85               	movwf	___awtofl@sign& (0+255),b
  6843                           
  6844                           ; BSR set to: 0
  6845  006318  0100               	movlb	0	; () banked
  6846  00631A  AF82               	btfss	(___awtofl@c+1)& (0+255),7,b
  6847  00631C  D008               	goto	l6711
  6848                           
  6849                           ; BSR set to: 0
  6850  00631E  0100               	movlb	0	; () banked
  6851  006320  6D81               	negf	___awtofl@c& (0+255),b
  6852  006322  1F82               	comf	(___awtofl@c+1)& (0+255),f,b
  6853  006324  B0D8               	btfsc	status,0,c
  6854  006326  2B82               	incf	(___awtofl@c+1)& (0+255),f,b
  6855  006328  0100               	movlb	0	; () banked
  6856  00632A  2B85               	incf	___awtofl@sign& (0+255),f,b
  6857  00632C  D000               	goto	l6711
  6858  00632E                     l6711:
  6859                           
  6860                           ; BSR set to: 0
  6861  00632E  C081  F077         	movff	___awtofl@c,___flpack@arg
  6862  006332  C082  F078         	movff	___awtofl@c+1,___flpack@arg+1
  6863  006336  0100               	movlb	0	; () banked
  6864  006338  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  6865  00633A  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  6866  00633C  0E96               	movlw	150
  6867  00633E  0100               	movlb	0	; () banked
  6868  006340  6F7B               	movwf	___flpack@exp& (0+255),b
  6869  006342  C085  F07C         	movff	___awtofl@sign,___flpack@sign
  6870  006346  ECDB  F029         	call	___flpack	;wreg free
  6871  00634A  C077  F081         	movff	?___flpack,?___awtofl
  6872  00634E  C078  F082         	movff	?___flpack+1,?___awtofl+1
  6873  006352  C079  F083         	movff	?___flpack+2,?___awtofl+2
  6874  006356  C07A  F084         	movff	?___flpack+3,?___awtofl+3
  6875  00635A  0012               	return	
  6876  00635C  0012               	return		;funcret
  6877  00635E                     __end_of___awtofl:
  6878                           	opt stack 0
  6879                           tblptru	equ	0xFF8
  6880                           tblptrh	equ	0xFF7
  6881                           tblptrl	equ	0xFF6
  6882                           tablat	equ	0xFF5
  6883                           postinc0	equ	0xFEE
  6884                           wreg	equ	0xFE8
  6885                           indf2	equ	0xFDF
  6886                           postinc2	equ	0xFDE
  6887                           postdec2	equ	0xFDD
  6888                           fsr2h	equ	0xFDA
  6889                           fsr2l	equ	0xFD9
  6890                           status	equ	0xFD8
  6891                           
  6892 ;; *************** function _delay_s *****************
  6893 ;; Defined at:
  6894 ;;		line 102 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;  value_s         1    wreg     unsigned char 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;  value_s         1   31[BANK0 ] unsigned char 
  6899 ;;  repeat_loop     1   32[BANK0 ] unsigned char 
  6900 ;; Return value:  Size  Location     Type
  6901 ;;		None               void
  6902 ;; Registers used:
  6903 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6904 ;; Tracked objects:
  6905 ;;		On entry : 0/0
  6906 ;;		On exit  : 0/0
  6907 ;;		Unchanged: 0/0
  6908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6913 ;;Total ram usage:        2 bytes
  6914 ;; Hardware stack levels used:    1
  6915 ;; Hardware stack levels required when called:    7
  6916 ;; This function calls:
  6917 ;;		_delay_ms
  6918 ;; This function is called by:
  6919 ;;		_park_routine
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           	psect	text14
  6924  0064B4                     __ptext14:
  6925                           	opt stack 0
  6926  0064B4                     _delay_s:
  6927                           	opt stack 22
  6928                           
  6929                           ;incstack = 0
  6930                           ;delay_s@value_s stored from wreg
  6931  0064B4  0100               	movlb	0	; () banked
  6932  0064B6  6F7F               	movwf	delay_s@value_s& (0+255),b
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;src\delay.c: 104: unsigned char repeat_loop;
  6936                           ;src\delay.c: 106: for (repeat_loop = 0; repeat_loop < value_s; repeat_loop++)
  6937  0064B8  0E00               	movlw	0
  6938  0064BA  0100               	movlb	0	; () banked
  6939  0064BC  6F80               	movwf	delay_s@repeat_loop& (0+255),b
  6940  0064BE  D00A               	goto	l6773
  6941  0064C0                     l6769:
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;src\delay.c: 107: delay_ms (1000);
  6945  0064C0  0E03               	movlw	3
  6946  0064C2  0100               	movlb	0	; () banked
  6947  0064C4  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  6948  0064C6  0EE8               	movlw	232
  6949  0064C8  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  6950  0064CA  ECEC  F031         	call	_delay_ms	;wreg free
  6951  0064CE  0100               	movlb	0	; () banked
  6952  0064D0  2B80               	incf	delay_s@repeat_loop& (0+255),f,b
  6953  0064D2  D000               	goto	l6773
  6954  0064D4                     l6773:
  6955                           
  6956                           ; BSR set to: 0
  6957  0064D4  0100               	movlb	0	; () banked
  6958  0064D6  517F               	movf	delay_s@value_s& (0+255),w,b
  6959  0064D8  0100               	movlb	0	; () banked
  6960  0064DA  5D80               	subwf	delay_s@repeat_loop& (0+255),w,b
  6961  0064DC  A0D8               	btfss	status,0,c
  6962  0064DE  D7F0               	goto	l6769
  6963                           
  6964                           ; BSR set to: 0
  6965                           
  6966                           ; BSR set to: 0
  6967  0064E0  0012               	return		;funcret
  6968  0064E2                     __end_of_delay_s:
  6969                           	opt stack 0
  6970                           tblptru	equ	0xFF8
  6971                           tblptrh	equ	0xFF7
  6972                           tblptrl	equ	0xFF6
  6973                           tablat	equ	0xFF5
  6974                           postinc0	equ	0xFEE
  6975                           wreg	equ	0xFE8
  6976                           indf2	equ	0xFDF
  6977                           postinc2	equ	0xFDE
  6978                           postdec2	equ	0xFDD
  6979                           fsr2h	equ	0xFDA
  6980                           fsr2l	equ	0xFD9
  6981                           status	equ	0xFD8
  6982                           
  6983 ;; *************** function _delay_ms *****************
  6984 ;; Defined at:
  6985 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;  value_ms        2   29[BANK0 ] unsigned int 
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;		None
  6990 ;; Return value:  Size  Location     Type
  6991 ;;		None               void
  6992 ;; Registers used:
  6993 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6994 ;; Tracked objects:
  6995 ;;		On entry : 0/0
  6996 ;;		On exit  : 0/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6999 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7002 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7003 ;;Total ram usage:        2 bytes
  7004 ;; Hardware stack levels used:    1
  7005 ;; Hardware stack levels required when called:    6
  7006 ;; This function calls:
  7007 ;;		___wmul
  7008 ;; This function is called by:
  7009 ;;		_delay_s
  7010 ;;		_main
  7011 ;;		_park_routine
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           	psect	text15
  7016  0063D8                     __ptext15:
  7017                           	opt stack 0
  7018  0063D8                     _delay_ms:
  7019                           	opt stack 22
  7020                           
  7021                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;incstack = 0
  7025  0063D8  C0E8  F077         	movff	_delay_quartz_frequency_value,___wmul@multiplier	;volatile
  7026  0063DC  0100               	movlb	0	; () banked
  7027  0063DE  6B78               	clrf	(___wmul@multiplier+1)& (0+255),b
  7028  0063E0  C07D  F079         	movff	delay_ms@value_ms,___wmul@multiplicand
  7029  0063E4  C07E  F07A         	movff	delay_ms@value_ms+1,___wmul@multiplicand+1
  7030  0063E8  EC09  F032         	call	___wmul	;wreg free
  7031  0063EC  C077  F0E1         	movff	?___wmul,_clock_counter_reference	;volatile
  7032  0063F0  C078  F0E2         	movff	?___wmul+1,_clock_counter_reference+1	;volatile
  7033                           
  7034                           ;src\delay.c: 75: while (clock_counter_reference) {
  7035  0063F4  D007               	goto	l567
  7036  0063F6                     l6619:
  7037                           
  7038                           ;src\delay.c: 85: _delay(240);
  7039  0063F6  0E50               	movlw	80
  7040  0063F8                     u8977:
  7041  0063F8  2EE8               	decfsz	wreg,f,c
  7042  0063FA  D7FE               	goto	u8977
  7043                           
  7044                           ;src\delay.c: 88: clock_counter_reference--;
  7045  0063FC  0100               	movlb	0	; () banked
  7046  0063FE  07E1               	decf	_clock_counter_reference& (0+255),f,b	;volatile
  7047  006400  A0D8               	btfss	status,0,c
  7048  006402  07E2               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
  7049  006404                     l567:
  7050  006404  0100               	movlb	0	; () banked
  7051  006406  51E1               	movf	_clock_counter_reference& (0+255),w,b	;volatile
  7052  006408  0100               	movlb	0	; () banked
  7053  00640A  11E2               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
  7054  00640C  A4D8               	btfss	status,2,c
  7055  00640E  D7F3               	goto	l6619
  7056                           
  7057                           ; BSR set to: 0
  7058                           
  7059                           ; BSR set to: 0
  7060  006410  0012               	return		;funcret
  7061  006412                     __end_of_delay_ms:
  7062                           	opt stack 0
  7063                           tblptru	equ	0xFF8
  7064                           tblptrh	equ	0xFF7
  7065                           tblptrl	equ	0xFF6
  7066                           tablat	equ	0xFF5
  7067                           postinc0	equ	0xFEE
  7068                           wreg	equ	0xFE8
  7069                           indf2	equ	0xFDF
  7070                           postinc2	equ	0xFDE
  7071                           postdec2	equ	0xFDD
  7072                           fsr2h	equ	0xFDA
  7073                           fsr2l	equ	0xFD9
  7074                           status	equ	0xFD8
  7075                           
  7076 ;; *************** function ___wmul *****************
  7077 ;; Defined at:
  7078 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7079 ;; Parameters:    Size  Location     Type
  7080 ;;  multiplier      2   23[BANK0 ] unsigned int 
  7081 ;;  multiplicand    2   25[BANK0 ] unsigned int 
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;  product         2   27[BANK0 ] unsigned int 
  7084 ;; Return value:  Size  Location     Type
  7085 ;;                  2   23[BANK0 ] unsigned int 
  7086 ;; Registers used:
  7087 ;;		wreg, status,2, status,0, prodl, prodh
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/0
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7093 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7097 ;;Total ram usage:        6 bytes
  7098 ;; Hardware stack levels used:    1
  7099 ;; Hardware stack levels required when called:    5
  7100 ;; This function calls:
  7101 ;;		Nothing
  7102 ;; This function is called by:
  7103 ;;		_delay_ms
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107                           	psect	text16
  7108  006412                     __ptext16:
  7109                           	opt stack 0
  7110  006412                     ___wmul:
  7111                           	opt stack 22
  7112                           
  7113                           ; BSR set to: 0
  7114                           ;incstack = 0
  7115  006412  0100               	movlb	0	; () banked
  7116  006414  5177               	movf	___wmul@multiplier& (0+255),w,b
  7117  006416  0100               	movlb	0	; () banked
  7118  006418  0379               	mulwf	___wmul@multiplicand& (0+255),b
  7119  00641A  CFF3 F07B          	movff	prodl,___wmul@product
  7120  00641E  CFF4 F07C          	movff	prodh,___wmul@product+1
  7121  006422  0100               	movlb	0	; () banked
  7122  006424  5177               	movf	___wmul@multiplier& (0+255),w,b
  7123  006426  0100               	movlb	0	; () banked
  7124  006428  037A               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7125  00642A  50F3               	movf	prodl,w,c
  7126  00642C  0100               	movlb	0	; () banked
  7127  00642E  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  7128  006430  0100               	movlb	0	; () banked
  7129  006432  5178               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7130  006434  0100               	movlb	0	; () banked
  7131  006436  0379               	mulwf	___wmul@multiplicand& (0+255),b
  7132  006438  50F3               	movf	prodl,w,c
  7133  00643A  0100               	movlb	0	; () banked
  7134  00643C  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  7135                           
  7136                           ; BSR set to: 0
  7137  00643E  C07B  F077         	movff	___wmul@product,?___wmul
  7138  006442  C07C  F078         	movff	___wmul@product+1,?___wmul+1
  7139  006446  0012               	return	
  7140                           
  7141                           ; BSR set to: 0
  7142                           
  7143                           ; BSR set to: 0
  7144  006448  0012               	return		;funcret
  7145  00644A                     __end_of___wmul:
  7146                           	opt stack 0
  7147                           tblptru	equ	0xFF8
  7148                           tblptrh	equ	0xFF7
  7149                           tblptrl	equ	0xFF6
  7150                           tablat	equ	0xFF5
  7151                           prodh	equ	0xFF4
  7152                           prodl	equ	0xFF3
  7153                           postinc0	equ	0xFEE
  7154                           wreg	equ	0xFE8
  7155                           indf2	equ	0xFDF
  7156                           postinc2	equ	0xFDE
  7157                           postdec2	equ	0xFDD
  7158                           fsr2h	equ	0xFDA
  7159                           fsr2l	equ	0xFD9
  7160                           status	equ	0xFD8
  7161                           
  7162 ;; *************** function _cos *****************
  7163 ;; Defined at:
  7164 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\cos.c"
  7165 ;; Parameters:    Size  Location     Type
  7166 ;;  f               4   45[BANK1 ] unsigned int 
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;		None
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  4   45[BANK1 ] unsigned int 
  7171 ;; Registers used:
  7172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7178 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7181 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;Total ram usage:        8 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; Hardware stack levels required when called:    9
  7185 ;; This function calls:
  7186 ;;		___fladd
  7187 ;;		___flge
  7188 ;;		_sin
  7189 ;; This function is called by:
  7190 ;;		_park_routine
  7191 ;;		_matematica
  7192 ;; This function uses a non-reentrant model
  7193 ;;
  7194                           
  7195                           	psect	text17
  7196  005D2C                     __ptext17:
  7197                           	opt stack 0
  7198  005D2C                     _cos:
  7199                           	opt stack 19
  7200                           
  7201                           ; BSR set to: 0
  7202                           ;incstack = 0
  7203  005D2C  0EDB               	movlw	219
  7204  005D2E  0100               	movlb	0	; () banked
  7205  005D30  6FB3               	movwf	___flge@ff1& (0+255),b
  7206  005D32  0E0F               	movlw	15
  7207  005D34  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  7208  005D36  0E49               	movlw	73
  7209  005D38  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  7210  005D3A  0E40               	movlw	64
  7211  005D3C  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  7212  005D3E  C1B0  F0B7         	movff	cos@f,___flge@ff2
  7213  005D42  C1B1  F0B8         	movff	cos@f+1,___flge@ff2+1
  7214  005D46  C1B2  F0B9         	movff	cos@f+2,___flge@ff2+2
  7215  005D4A  C1B3  F0BA         	movff	cos@f+3,___flge@ff2+3
  7216  005D4E  EC1A  F02E         	call	___flge	;wreg free
  7217  005D52  0100               	movlb	0	; () banked
  7218  005D54  B0D8               	btfsc	status,0,c
  7219  005D56  D02E               	goto	l6699
  7220                           
  7221                           ; BSR set to: 0
  7222  005D58  C1B0  F09F         	movff	cos@f,___fladd@f1
  7223  005D5C  C1B1  F0A0         	movff	cos@f+1,___fladd@f1+1
  7224  005D60  C1B2  F0A1         	movff	cos@f+2,___fladd@f1+2
  7225  005D64  C1B3  F0A2         	movff	cos@f+3,___fladd@f1+3
  7226  005D68  0EE4               	movlw	228
  7227  005D6A  0100               	movlb	0	; () banked
  7228  005D6C  6FA3               	movwf	___fladd@f2& (0+255),b
  7229  005D6E  0ECB               	movlw	203
  7230  005D70  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  7231  005D72  0E96               	movlw	150
  7232  005D74  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  7233  005D76  0EC0               	movlw	192
  7234  005D78  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  7235  005D7A  EC5E  F023         	call	___fladd	;wreg free
  7236  005D7E  C09F  F1B4         	movff	?___fladd,_cos$3683
  7237  005D82  C0A0  F1B5         	movff	?___fladd+1,_cos$3683+1
  7238  005D86  C0A1  F1B6         	movff	?___fladd+2,_cos$3683+2
  7239  005D8A  C0A2  F1B7         	movff	?___fladd+3,_cos$3683+3
  7240  005D8E  C1B4  F0D1         	movff	_cos$3683,sin@f
  7241  005D92  C1B5  F0D2         	movff	_cos$3683+1,sin@f+1
  7242  005D96  C1B6  F0D3         	movff	_cos$3683+2,sin@f+2
  7243  005D9A  C1B7  F0D4         	movff	_cos$3683+3,sin@f+3
  7244  005D9E  ECD0  F021         	call	_sin	;wreg free
  7245  005DA2  C0D1  F1B0         	movff	?_sin,?_cos
  7246  005DA6  C0D2  F1B1         	movff	?_sin+1,?_cos+1
  7247  005DAA  C0D3  F1B2         	movff	?_sin+2,?_cos+2
  7248  005DAE  C0D4  F1B3         	movff	?_sin+3,?_cos+3
  7249  005DB2  0012               	return	
  7250  005DB4                     l6699:
  7251  005DB4  C1B0  F09F         	movff	cos@f,___fladd@f1
  7252  005DB8  C1B1  F0A0         	movff	cos@f+1,___fladd@f1+1
  7253  005DBC  C1B2  F0A1         	movff	cos@f+2,___fladd@f1+2
  7254  005DC0  C1B3  F0A2         	movff	cos@f+3,___fladd@f1+3
  7255  005DC4  0EDB               	movlw	219
  7256  005DC6  0100               	movlb	0	; () banked
  7257  005DC8  6FA3               	movwf	___fladd@f2& (0+255),b
  7258  005DCA  0E0F               	movlw	15
  7259  005DCC  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  7260  005DCE  0EC9               	movlw	201
  7261  005DD0  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  7262  005DD2  0E3F               	movlw	63
  7263  005DD4  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  7264  005DD6  EC5E  F023         	call	___fladd	;wreg free
  7265  005DDA  C09F  F1B4         	movff	?___fladd,_cos$3683
  7266  005DDE  C0A0  F1B5         	movff	?___fladd+1,_cos$3683+1
  7267  005DE2  C0A1  F1B6         	movff	?___fladd+2,_cos$3683+2
  7268  005DE6  C0A2  F1B7         	movff	?___fladd+3,_cos$3683+3
  7269  005DEA  C1B4  F0D1         	movff	_cos$3683,sin@f
  7270  005DEE  C1B5  F0D2         	movff	_cos$3683+1,sin@f+1
  7271  005DF2  C1B6  F0D3         	movff	_cos$3683+2,sin@f+2
  7272  005DF6  C1B7  F0D4         	movff	_cos$3683+3,sin@f+3
  7273  005DFA  ECD0  F021         	call	_sin	;wreg free
  7274  005DFE  C0D1  F1B0         	movff	?_sin,?_cos
  7275  005E02  C0D2  F1B1         	movff	?_sin+1,?_cos+1
  7276  005E06  C0D3  F1B2         	movff	?_sin+2,?_cos+2
  7277  005E0A  C0D4  F1B3         	movff	?_sin+3,?_cos+3
  7278  005E0E  0012               	return	
  7279  005E10  0012               	return		;funcret
  7280  005E12                     __end_of_cos:
  7281                           	opt stack 0
  7282                           tblptru	equ	0xFF8
  7283                           tblptrh	equ	0xFF7
  7284                           tblptrl	equ	0xFF6
  7285                           tablat	equ	0xFF5
  7286                           prodh	equ	0xFF4
  7287                           prodl	equ	0xFF3
  7288                           postinc0	equ	0xFEE
  7289                           wreg	equ	0xFE8
  7290                           indf2	equ	0xFDF
  7291                           postinc2	equ	0xFDE
  7292                           postdec2	equ	0xFDD
  7293                           fsr2h	equ	0xFDA
  7294                           fsr2l	equ	0xFD9
  7295                           status	equ	0xFD8
  7296                           
  7297 ;; *************** function _sin *****************
  7298 ;; Defined at:
  7299 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sin.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;  f               4  113[BANK0 ] unsigned int 
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;  x2              4    8[BANK1 ] unsigned int 
  7304 ;;  y               4    0[BANK1 ] unsigned int 
  7305 ;;  sgn             1   12[BANK1 ] unsigned char 
  7306 ;; Return value:  Size  Location     Type
  7307 ;;                  4  113[BANK0 ] unsigned char 
  7308 ;; Registers used:
  7309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7310 ;; Tracked objects:
  7311 ;;		On entry : 0/0
  7312 ;;		On exit  : 0/0
  7313 ;;		Unchanged: 0/0
  7314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7315 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7316 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  7317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7318 ;;      Totals:         0       4      13       0       0       0       0       0       0       0       0       0       
      +0       0
  7319 ;;Total ram usage:       17 bytes
  7320 ;; Hardware stack levels used:    1
  7321 ;; Hardware stack levels required when called:    8
  7322 ;; This function calls:
  7323 ;;		___fladd
  7324 ;;		___fldiv
  7325 ;;		___flge
  7326 ;;		___flmul
  7327 ;;		___flneg
  7328 ;;		___flsub
  7329 ;;		_eval_poly
  7330 ;;		_floor
  7331 ;; This function is called by:
  7332 ;;		_cos
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text18
  7337  0043A0                     __ptext18:
  7338                           	opt stack 0
  7339  0043A0                     _sin:
  7340                           	opt stack 19
  7341                           
  7342                           ;incstack = 0
  7343  0043A0  0E00               	movlw	0
  7344  0043A2  0101               	movlb	1	; () banked
  7345  0043A4  6F8F               	movwf	sin@sgn& (0+255),b
  7346                           
  7347                           ; BSR set to: 1
  7348  0043A6  0100               	movlb	0	; () banked
  7349  0043A8  AFD4               	btfss	(sin@f+3)& (0+255),7,b
  7350  0043AA  D016               	goto	l6587
  7351                           
  7352                           ; BSR set to: 0
  7353  0043AC  C0D1  F0AB         	movff	sin@f,___flneg@f1
  7354  0043B0  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  7355  0043B4  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  7356  0043B8  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  7357  0043BC  ECCE  F031         	call	___flneg	;wreg free
  7358  0043C0  C0AB  F0D1         	movff	?___flneg,sin@f
  7359  0043C4  C0AC  F0D2         	movff	?___flneg+1,sin@f+1
  7360  0043C8  C0AD  F0D3         	movff	?___flneg+2,sin@f+2
  7361  0043CC  C0AE  F0D4         	movff	?___flneg+3,sin@f+3
  7362  0043D0  0E01               	movlw	1
  7363  0043D2  0101               	movlb	1	; () banked
  7364  0043D4  6F8F               	movwf	sin@sgn& (0+255),b
  7365  0043D6  D000               	goto	l6587
  7366  0043D8                     l6587:
  7367  0043D8  C0D1  F081         	movff	sin@f,___flmul@f1
  7368  0043DC  C0D2  F082         	movff	sin@f+1,___flmul@f1+1
  7369  0043E0  C0D3  F083         	movff	sin@f+2,___flmul@f1+2
  7370  0043E4  C0D4  F084         	movff	sin@f+3,___flmul@f1+3
  7371  0043E8  0E83               	movlw	131
  7372  0043EA  0100               	movlb	0	; () banked
  7373  0043EC  6F85               	movwf	___flmul@f2& (0+255),b
  7374  0043EE  0EF9               	movlw	249
  7375  0043F0  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  7376  0043F2  0E22               	movlw	34
  7377  0043F4  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  7378  0043F6  0E3E               	movlw	62
  7379  0043F8  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  7380  0043FA  EC9B  F02A         	call	___flmul	;wreg free
  7381  0043FE  C081  F0D1         	movff	?___flmul,sin@f
  7382  004402  C082  F0D2         	movff	?___flmul+1,sin@f+1
  7383  004406  C083  F0D3         	movff	?___flmul+2,sin@f+2
  7384  00440A  C084  F0D4         	movff	?___flmul+3,sin@f+3
  7385  00440E  C0D1  F0C9         	movff	sin@f,___flsub@f1
  7386  004412  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  7387  004416  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  7388  00441A  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  7389  00441E  C0D1  F0BF         	movff	sin@f,floor@x
  7390  004422  C0D2  F0C0         	movff	sin@f+1,floor@x+1
  7391  004426  C0D3  F0C1         	movff	sin@f+2,floor@x+2
  7392  00442A  C0D4  F0C2         	movff	sin@f+3,floor@x+3
  7393  00442E  ECE8  F02B         	call	_floor	;wreg free
  7394  004432  C0BF  F0CD         	movff	?_floor,___flsub@f2
  7395  004436  C0C0  F0CE         	movff	?_floor+1,___flsub@f2+1
  7396  00443A  C0C1  F0CF         	movff	?_floor+2,___flsub@f2+2
  7397  00443E  C0C2  F0D0         	movff	?_floor+3,___flsub@f2+3
  7398  004442  EC01  F031         	call	___flsub	;wreg free
  7399  004446  C0C9  F0D1         	movff	?___flsub,sin@f
  7400  00444A  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  7401  00444E  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  7402  004452  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  7403  004456  C0D1  F081         	movff	sin@f,___flmul@f1
  7404  00445A  C0D2  F082         	movff	sin@f+1,___flmul@f1+1
  7405  00445E  C0D3  F083         	movff	sin@f+2,___flmul@f1+2
  7406  004462  C0D4  F084         	movff	sin@f+3,___flmul@f1+3
  7407  004466  0E00               	movlw	0
  7408  004468  0100               	movlb	0	; () banked
  7409  00446A  6F85               	movwf	___flmul@f2& (0+255),b
  7410  00446C  0E00               	movlw	0
  7411  00446E  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  7412  004470  0E80               	movlw	128
  7413  004472  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  7414  004474  0E40               	movlw	64
  7415  004476  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  7416  004478  EC9B  F02A         	call	___flmul	;wreg free
  7417  00447C  C081  F0D1         	movff	?___flmul,sin@f
  7418  004480  C082  F0D2         	movff	?___flmul+1,sin@f+1
  7419  004484  C083  F0D3         	movff	?___flmul+2,sin@f+2
  7420  004488  C084  F0D4         	movff	?___flmul+3,sin@f+3
  7421  00448C  0E00               	movlw	0
  7422  00448E  0100               	movlb	0	; () banked
  7423  004490  6FB3               	movwf	___flge@ff1& (0+255),b
  7424  004492  0E00               	movlw	0
  7425  004494  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  7426  004496  0E00               	movlw	0
  7427  004498  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  7428  00449A  0E40               	movlw	64
  7429  00449C  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  7430  00449E  C0D1  F0B7         	movff	sin@f,___flge@ff2
  7431  0044A2  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  7432  0044A6  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  7433  0044AA  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  7434  0044AE  EC1A  F02E         	call	___flge	;wreg free
  7435  0044B2  0100               	movlb	0	; () banked
  7436  0044B4  B0D8               	btfsc	status,0,c
  7437  0044B6  D026               	goto	l6599
  7438                           
  7439                           ; BSR set to: 0
  7440  0044B8  C0D1  F0C9         	movff	sin@f,___flsub@f1
  7441  0044BC  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  7442  0044C0  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  7443  0044C4  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  7444  0044C8  0E00               	movlw	0
  7445  0044CA  0100               	movlb	0	; () banked
  7446  0044CC  6FCD               	movwf	___flsub@f2& (0+255),b
  7447  0044CE  0E00               	movlw	0
  7448  0044D0  6FCE               	movwf	(___flsub@f2+1)& (0+255),b
  7449  0044D2  0E00               	movlw	0
  7450  0044D4  6FCF               	movwf	(___flsub@f2+2)& (0+255),b
  7451  0044D6  0E40               	movlw	64
  7452  0044D8  6FD0               	movwf	(___flsub@f2+3)& (0+255),b
  7453  0044DA  EC01  F031         	call	___flsub	;wreg free
  7454  0044DE  C0C9  F0D1         	movff	?___flsub,sin@f
  7455  0044E2  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  7456  0044E6  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  7457  0044EA  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  7458  0044EE  0101               	movlb	1	; () banked
  7459  0044F0  518F               	movf	sin@sgn& (0+255),w,b
  7460  0044F2  0101               	movlb	1	; () banked
  7461  0044F4  A4D8               	btfss	status,2,c
  7462  0044F6  D002               	goto	u8250
  7463  0044F8  0E01               	movlw	1
  7464  0044FA  D001               	goto	u8260
  7465  0044FC                     u8250:
  7466  0044FC  0E00               	movlw	0
  7467  0044FE                     u8260:
  7468  0044FE  0101               	movlb	1	; () banked
  7469  004500  6F8F               	movwf	sin@sgn& (0+255),b
  7470  004502  D000               	goto	l6599
  7471  004504                     l6599:
  7472  004504  0E00               	movlw	0
  7473  004506  0100               	movlb	0	; () banked
  7474  004508  6FB3               	movwf	___flge@ff1& (0+255),b
  7475  00450A  0E00               	movlw	0
  7476  00450C  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  7477  00450E  0E80               	movlw	128
  7478  004510  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  7479  004512  0E3F               	movlw	63
  7480  004514  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  7481  004516  C0D1  F0B7         	movff	sin@f,___flge@ff2
  7482  00451A  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  7483  00451E  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  7484  004522  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  7485  004526  EC1A  F02E         	call	___flge	;wreg free
  7486  00452A  0100               	movlb	0	; () banked
  7487  00452C  B0D8               	btfsc	status,0,c
  7488  00452E  D025               	goto	l1463
  7489                           
  7490                           ; BSR set to: 0
  7491  004530  C0D1  F0AB         	movff	sin@f,___flneg@f1
  7492  004534  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  7493  004538  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  7494  00453C  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  7495  004540  ECCE  F031         	call	___flneg	;wreg free
  7496  004544  C0AB  F09F         	movff	?___flneg,___fladd@f1
  7497  004548  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  7498  00454C  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  7499  004550  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  7500  004554  0E00               	movlw	0
  7501  004556  0100               	movlb	0	; () banked
  7502  004558  6FA3               	movwf	___fladd@f2& (0+255),b
  7503  00455A  0E00               	movlw	0
  7504  00455C  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  7505  00455E  0E00               	movlw	0
  7506  004560  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  7507  004562  0E40               	movlw	64
  7508  004564  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  7509  004566  EC5E  F023         	call	___fladd	;wreg free
  7510  00456A  C09F  F0D1         	movff	?___fladd,sin@f
  7511  00456E  C0A0  F0D2         	movff	?___fladd+1,sin@f+1
  7512  004572  C0A1  F0D3         	movff	?___fladd+2,sin@f+2
  7513  004576  C0A2  F0D4         	movff	?___fladd+3,sin@f+3
  7514  00457A                     l1463:
  7515  00457A  C0D1  F081         	movff	sin@f,___flmul@f1
  7516  00457E  C0D2  F082         	movff	sin@f+1,___flmul@f1+1
  7517  004582  C0D3  F083         	movff	sin@f+2,___flmul@f1+2
  7518  004586  C0D4  F084         	movff	sin@f+3,___flmul@f1+3
  7519  00458A  C0D1  F085         	movff	sin@f,___flmul@f2
  7520  00458E  C0D2  F086         	movff	sin@f+1,___flmul@f2+1
  7521  004592  C0D3  F087         	movff	sin@f+2,___flmul@f2+2
  7522  004596  C0D4  F088         	movff	sin@f+3,___flmul@f2+3
  7523  00459A  EC9B  F02A         	call	___flmul	;wreg free
  7524  00459E  C081  F18B         	movff	?___flmul,sin@x2
  7525  0045A2  C082  F18C         	movff	?___flmul+1,sin@x2+1
  7526  0045A6  C083  F18D         	movff	?___flmul+2,sin@x2+2
  7527  0045AA  C084  F18E         	movff	?___flmul+3,sin@x2+3
  7528  0045AE  C18B  F0AB         	movff	sin@x2,eval_poly@x
  7529  0045B2  C18C  F0AC         	movff	sin@x2+1,eval_poly@x+1
  7530  0045B6  C18D  F0AD         	movff	sin@x2+2,eval_poly@x+2
  7531  0045BA  C18E  F0AE         	movff	sin@x2+3,eval_poly@x+3
  7532  0045BE  0E41               	movlw	low sin@coeff_b
  7533  0045C0  0100               	movlb	0	; () banked
  7534  0045C2  6FAF               	movwf	eval_poly@d& (0+255),b
  7535  0045C4  0E0D               	movlw	high sin@coeff_b
  7536  0045C6  0100               	movlb	0	; () banked
  7537  0045C8  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  7538  0045CA  0E00               	movlw	0
  7539  0045CC  0100               	movlb	0	; () banked
  7540  0045CE  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  7541  0045D0  0E03               	movlw	3
  7542  0045D2  6FB1               	movwf	eval_poly@n& (0+255),b
  7543  0045D4  EC06  F02D         	call	_eval_poly	;wreg free
  7544  0045D8  C0AB  F183         	movff	?_eval_poly,sin@y
  7545  0045DC  C0AC  F184         	movff	?_eval_poly+1,sin@y+1
  7546  0045E0  C0AD  F185         	movff	?_eval_poly+2,sin@y+2
  7547  0045E4  C0AE  F186         	movff	?_eval_poly+3,sin@y+3
  7548  0045E8  C183  F094         	movff	sin@y,___fldiv@f2
  7549  0045EC  C184  F095         	movff	sin@y+1,___fldiv@f2+1
  7550  0045F0  C185  F096         	movff	sin@y+2,___fldiv@f2+2
  7551  0045F4  C186  F097         	movff	sin@y+3,___fldiv@f2+3
  7552  0045F8  0E00               	movlw	0
  7553  0045FA  0100               	movlb	0	; () banked
  7554  0045FC  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  7555  0045FE  0E04               	movlw	4
  7556  004600  6FB1               	movwf	eval_poly@n& (0+255),b
  7557  004602  0E2D               	movlw	low sin@coeff_a
  7558  004604  0100               	movlb	0	; () banked
  7559  004606  6FAF               	movwf	eval_poly@d& (0+255),b
  7560  004608  0E0D               	movlw	high sin@coeff_a
  7561  00460A  0100               	movlb	0	; () banked
  7562  00460C  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  7563  00460E  C18B  F0AB         	movff	sin@x2,eval_poly@x
  7564  004612  C18C  F0AC         	movff	sin@x2+1,eval_poly@x+1
  7565  004616  C18D  F0AD         	movff	sin@x2+2,eval_poly@x+2
  7566  00461A  C18E  F0AE         	movff	sin@x2+3,eval_poly@x+3
  7567  00461E  EC06  F02D         	call	_eval_poly	;wreg free
  7568  004622  C0AB  F090         	movff	?_eval_poly,___fldiv@f1
  7569  004626  C0AC  F091         	movff	?_eval_poly+1,___fldiv@f1+1
  7570  00462A  C0AD  F092         	movff	?_eval_poly+2,___fldiv@f1+2
  7571  00462E  C0AE  F093         	movff	?_eval_poly+3,___fldiv@f1+3
  7572  004632  EC4D  F02B         	call	___fldiv	;wreg free
  7573  004636  C090  F187         	movff	?___fldiv,_sin$3684
  7574  00463A  C091  F188         	movff	?___fldiv+1,_sin$3684+1
  7575  00463E  C092  F189         	movff	?___fldiv+2,_sin$3684+2
  7576  004642  C093  F18A         	movff	?___fldiv+3,_sin$3684+3
  7577  004646  C0D1  F081         	movff	sin@f,___flmul@f1
  7578  00464A  C0D2  F082         	movff	sin@f+1,___flmul@f1+1
  7579  00464E  C0D3  F083         	movff	sin@f+2,___flmul@f1+2
  7580  004652  C0D4  F084         	movff	sin@f+3,___flmul@f1+3
  7581  004656  C187  F085         	movff	_sin$3684,___flmul@f2
  7582  00465A  C188  F086         	movff	_sin$3684+1,___flmul@f2+1
  7583  00465E  C189  F087         	movff	_sin$3684+2,___flmul@f2+2
  7584  004662  C18A  F088         	movff	_sin$3684+3,___flmul@f2+3
  7585  004666  EC9B  F02A         	call	___flmul	;wreg free
  7586  00466A  C081  F0D1         	movff	?___flmul,sin@f
  7587  00466E  C082  F0D2         	movff	?___flmul+1,sin@f+1
  7588  004672  C083  F0D3         	movff	?___flmul+2,sin@f+2
  7589  004676  C084  F0D4         	movff	?___flmul+3,sin@f+3
  7590  00467A  0101               	movlb	1	; () banked
  7591  00467C  518F               	movf	sin@sgn& (0+255),w,b
  7592  00467E  0101               	movlb	1	; () banked
  7593  004680  B4D8               	btfsc	status,2,c
  7594  004682  D013               	goto	l1464
  7595                           
  7596                           ; BSR set to: 1
  7597  004684  C0D1  F0AB         	movff	sin@f,___flneg@f1
  7598  004688  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  7599  00468C  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  7600  004690  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  7601  004694  ECCE  F031         	call	___flneg	;wreg free
  7602  004698  C0AB  F0D1         	movff	?___flneg,?_sin
  7603  00469C  C0AC  F0D2         	movff	?___flneg+1,?_sin+1
  7604  0046A0  C0AD  F0D3         	movff	?___flneg+2,?_sin+2
  7605  0046A4  C0AE  F0D4         	movff	?___flneg+3,?_sin+3
  7606  0046A8  0012               	return	
  7607  0046AA                     l1464:
  7608                           
  7609                           ; BSR set to: 1
  7610  0046AA  C0D1  F0D1         	movff	sin@f,?_sin
  7611  0046AE  C0D2  F0D2         	movff	sin@f+1,?_sin+1
  7612  0046B2  C0D3  F0D3         	movff	sin@f+2,?_sin+2
  7613  0046B6  C0D4  F0D4         	movff	sin@f+3,?_sin+3
  7614  0046BA  0012               	return		;funcret
  7615  0046BC                     __end_of_sin:
  7616                           	opt stack 0
  7617                           tblptru	equ	0xFF8
  7618                           tblptrh	equ	0xFF7
  7619                           tblptrl	equ	0xFF6
  7620                           tablat	equ	0xFF5
  7621                           prodh	equ	0xFF4
  7622                           prodl	equ	0xFF3
  7623                           postinc0	equ	0xFEE
  7624                           wreg	equ	0xFE8
  7625                           indf2	equ	0xFDF
  7626                           postinc2	equ	0xFDE
  7627                           postdec2	equ	0xFDD
  7628                           fsr2h	equ	0xFDA
  7629                           fsr2l	equ	0xFD9
  7630                           status	equ	0xFD8
  7631                           
  7632 ;; *************** function _floor *****************
  7633 ;; Defined at:
  7634 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;  x               4   95[BANK0 ] unsigned char 
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;  i               4   99[BANK0 ] unsigned char 
  7639 ;;  expon           2  103[BANK0 ] int 
  7640 ;; Return value:  Size  Location     Type
  7641 ;;                  4   95[BANK0 ] int 
  7642 ;; Registers used:
  7643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7644 ;; Tracked objects:
  7645 ;;		On entry : 0/0
  7646 ;;		On exit  : 0/0
  7647 ;;		Unchanged: 0/0
  7648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7649 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7650 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7652 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7653 ;;Total ram usage:       10 bytes
  7654 ;; Hardware stack levels used:    1
  7655 ;; Hardware stack levels required when called:    7
  7656 ;; This function calls:
  7657 ;;		___altofl
  7658 ;;		___fladd
  7659 ;;		___flge
  7660 ;;		___fltol
  7661 ;;		_frexp
  7662 ;; This function is called by:
  7663 ;;		_sin
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           	psect	text19
  7668  0057D0                     __ptext19:
  7669                           	opt stack 0
  7670  0057D0                     _floor:
  7671                           	opt stack 19
  7672                           
  7673                           ;incstack = 0
  7674  0057D0  C0BF  F077         	movff	floor@x,frexp@value
  7675  0057D4  C0C0  F078         	movff	floor@x+1,frexp@value+1
  7676  0057D8  C0C1  F079         	movff	floor@x+2,frexp@value+2
  7677  0057DC  C0C2  F07A         	movff	floor@x+3,frexp@value+3
  7678  0057E0  0EC7               	movlw	low floor@expon
  7679  0057E2  0100               	movlb	0	; () banked
  7680  0057E4  6F7B               	movwf	frexp@eptr& (0+255),b
  7681  0057E6  0E00               	movlw	high floor@expon
  7682  0057E8  0100               	movlb	0	; () banked
  7683  0057EA  6F7C               	movwf	(frexp@eptr+1)& (0+255),b
  7684  0057EC  EC40  F030         	call	_frexp	;wreg free
  7685  0057F0  0100               	movlb	0	; () banked
  7686  0057F2  AFC8               	btfss	(floor@expon+1)& (0+255),7,b
  7687  0057F4  D017               	goto	l6491
  7688                           
  7689                           ; BSR set to: 0
  7690  0057F6  0100               	movlb	0	; () banked
  7691  0057F8  AFC2               	btfss	(floor@x+3)& (0+255),7,b
  7692  0057FA  D00A               	goto	l6487
  7693                           
  7694                           ; BSR set to: 0
  7695  0057FC  0E00               	movlw	0
  7696  0057FE  0100               	movlb	0	; () banked
  7697  005800  6FBF               	movwf	?_floor& (0+255),b
  7698  005802  0E00               	movlw	0
  7699  005804  6FC0               	movwf	(?_floor+1)& (0+255),b
  7700  005806  0E80               	movlw	128
  7701  005808  6FC1               	movwf	(?_floor+2)& (0+255),b
  7702  00580A  0EBF               	movlw	191
  7703  00580C  6FC2               	movwf	(?_floor+3)& (0+255),b
  7704                           
  7705                           ; BSR set to: 0
  7706  00580E  0012               	return	
  7707  005810                     l6487:
  7708                           
  7709                           ; BSR set to: 0
  7710  005810  0E00               	movlw	0
  7711  005812  0100               	movlb	0	; () banked
  7712  005814  6FBF               	movwf	?_floor& (0+255),b
  7713  005816  0E00               	movlw	0
  7714  005818  6FC0               	movwf	(?_floor+1)& (0+255),b
  7715  00581A  0E00               	movlw	0
  7716  00581C  6FC1               	movwf	(?_floor+2)& (0+255),b
  7717  00581E  0E00               	movlw	0
  7718  005820  6FC2               	movwf	(?_floor+3)& (0+255),b
  7719                           
  7720                           ; BSR set to: 0
  7721  005822  0012               	return	
  7722  005824                     l6491:
  7723                           
  7724                           ; BSR set to: 0
  7725  005824  0100               	movlb	0	; () banked
  7726  005826  51C8               	movf	(floor@expon+1)& (0+255),w,b
  7727  005828  E105               	bnz	u8100
  7728  00582A  0E1D               	movlw	29
  7729  00582C  0100               	movlb	0	; () banked
  7730  00582E  5DC7               	subwf	floor@expon& (0+255),w,b
  7731  005830  A0D8               	btfss	status,0,c
  7732  005832  D009               	goto	l6495
  7733  005834                     u8100:
  7734                           
  7735                           ; BSR set to: 0
  7736  005834  C0BF  F0BF         	movff	floor@x,?_floor
  7737  005838  C0C0  F0C0         	movff	floor@x+1,?_floor+1
  7738  00583C  C0C1  F0C1         	movff	floor@x+2,?_floor+2
  7739  005840  C0C2  F0C2         	movff	floor@x+3,?_floor+3
  7740  005844  0012               	return	
  7741  005846                     l6495:
  7742                           
  7743                           ; BSR set to: 0
  7744  005846  C0BF  F0AF         	movff	floor@x,___fltol@f1
  7745  00584A  C0C0  F0B0         	movff	floor@x+1,___fltol@f1+1
  7746  00584E  C0C1  F0B1         	movff	floor@x+2,___fltol@f1+2
  7747  005852  C0C2  F0B2         	movff	floor@x+3,___fltol@f1+3
  7748  005856  EC79  F02C         	call	___fltol	;wreg free
  7749  00585A  C0AF  F0B9         	movff	?___fltol,___altofl@c
  7750  00585E  C0B0  F0BA         	movff	?___fltol+1,___altofl@c+1
  7751  005862  C0B1  F0BB         	movff	?___fltol+2,___altofl@c+2
  7752  005866  C0B2  F0BC         	movff	?___fltol+3,___altofl@c+3
  7753  00586A  EC5D  F031         	call	___altofl	;wreg free
  7754  00586E  C0B9  F0C3         	movff	?___altofl,floor@i
  7755  005872  C0BA  F0C4         	movff	?___altofl+1,floor@i+1
  7756  005876  C0BB  F0C5         	movff	?___altofl+2,floor@i+2
  7757  00587A  C0BC  F0C6         	movff	?___altofl+3,floor@i+3
  7758  00587E  C0BF  F0B3         	movff	floor@x,___flge@ff1
  7759  005882  C0C0  F0B4         	movff	floor@x+1,___flge@ff1+1
  7760  005886  C0C1  F0B5         	movff	floor@x+2,___flge@ff1+2
  7761  00588A  C0C2  F0B6         	movff	floor@x+3,___flge@ff1+3
  7762  00588E  C0C3  F0B7         	movff	floor@i,___flge@ff2
  7763  005892  C0C4  F0B8         	movff	floor@i+1,___flge@ff2+1
  7764  005896  C0C5  F0B9         	movff	floor@i+2,___flge@ff2+2
  7765  00589A  C0C6  F0BA         	movff	floor@i+3,___flge@ff2+3
  7766  00589E  EC1A  F02E         	call	___flge	;wreg free
  7767  0058A2  0100               	movlb	0	; () banked
  7768  0058A4  B0D8               	btfsc	status,0,c
  7769  0058A6  D01C               	goto	l1483
  7770                           
  7771                           ; BSR set to: 0
  7772  0058A8  C0C3  F09F         	movff	floor@i,___fladd@f1
  7773  0058AC  C0C4  F0A0         	movff	floor@i+1,___fladd@f1+1
  7774  0058B0  C0C5  F0A1         	movff	floor@i+2,___fladd@f1+2
  7775  0058B4  C0C6  F0A2         	movff	floor@i+3,___fladd@f1+3
  7776  0058B8  0E00               	movlw	0
  7777  0058BA  0100               	movlb	0	; () banked
  7778  0058BC  6FA3               	movwf	___fladd@f2& (0+255),b
  7779  0058BE  0E00               	movlw	0
  7780  0058C0  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  7781  0058C2  0E80               	movlw	128
  7782  0058C4  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  7783  0058C6  0EBF               	movlw	191
  7784  0058C8  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  7785  0058CA  EC5E  F023         	call	___fladd	;wreg free
  7786  0058CE  C09F  F0BF         	movff	?___fladd,?_floor
  7787  0058D2  C0A0  F0C0         	movff	?___fladd+1,?_floor+1
  7788  0058D6  C0A1  F0C1         	movff	?___fladd+2,?_floor+2
  7789  0058DA  C0A2  F0C2         	movff	?___fladd+3,?_floor+3
  7790  0058DE  0012               	return	
  7791  0058E0                     l1483:
  7792                           
  7793                           ; BSR set to: 0
  7794  0058E0  C0C3  F0BF         	movff	floor@i,?_floor
  7795  0058E4  C0C4  F0C0         	movff	floor@i+1,?_floor+1
  7796  0058E8  C0C5  F0C1         	movff	floor@i+2,?_floor+2
  7797  0058EC  C0C6  F0C2         	movff	floor@i+3,?_floor+3
  7798  0058F0  0012               	return		;funcret
  7799  0058F2                     __end_of_floor:
  7800                           	opt stack 0
  7801                           tblptru	equ	0xFF8
  7802                           tblptrh	equ	0xFF7
  7803                           tblptrl	equ	0xFF6
  7804                           tablat	equ	0xFF5
  7805                           prodh	equ	0xFF4
  7806                           prodl	equ	0xFF3
  7807                           postinc0	equ	0xFEE
  7808                           wreg	equ	0xFE8
  7809                           indf2	equ	0xFDF
  7810                           postinc2	equ	0xFDE
  7811                           postdec2	equ	0xFDD
  7812                           fsr2h	equ	0xFDA
  7813                           fsr2l	equ	0xFD9
  7814                           status	equ	0xFD8
  7815                           
  7816 ;; *************** function _frexp *****************
  7817 ;; Defined at:
  7818 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;  value           4   23[BANK0 ] int 
  7821 ;;  eptr            2   27[BANK0 ] PTR int 
  7822 ;;		 -> floor@expon(2), 
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;		None
  7825 ;; Return value:  Size  Location     Type
  7826 ;;                  4   23[BANK0 ] PTR int 
  7827 ;; Registers used:
  7828 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7829 ;; Tracked objects:
  7830 ;;		On entry : 0/0
  7831 ;;		On exit  : 0/0
  7832 ;;		Unchanged: 0/0
  7833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7834 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7837 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7838 ;;Total ram usage:        8 bytes
  7839 ;; Hardware stack levels used:    1
  7840 ;; Hardware stack levels required when called:    5
  7841 ;; This function calls:
  7842 ;;		Nothing
  7843 ;; This function is called by:
  7844 ;;		_floor
  7845 ;; This function uses a non-reentrant model
  7846 ;;
  7847                           
  7848                           	psect	text20
  7849  006080                     __ptext20:
  7850                           	opt stack 0
  7851  006080                     _frexp:
  7852                           	opt stack 20
  7853                           
  7854                           ;incstack = 0
  7855  006080  0100               	movlb	0	; () banked
  7856  006082  5177               	movf	frexp@value& (0+255),w,b
  7857  006084  0100               	movlb	0	; () banked
  7858  006086  1178               	iorwf	(frexp@value+1)& (0+255),w,b
  7859  006088  0100               	movlb	0	; () banked
  7860  00608A  1179               	iorwf	(frexp@value+2)& (0+255),w,b
  7861  00608C  0100               	movlb	0	; () banked
  7862  00608E  117A               	iorwf	(frexp@value+3)& (0+255),w,b
  7863  006090  A4D8               	btfss	status,2,c
  7864  006092  D009               	goto	l6407
  7865                           
  7866                           ; BSR set to: 0
  7867  006094  C07B  FFD9         	movff	frexp@eptr,fsr2l
  7868  006098  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  7869  00609C  0E00               	movlw	0
  7870  00609E  6EDE               	movwf	postinc2,c
  7871  0060A0  0E00               	movlw	0
  7872  0060A2  6EDD               	movwf	postdec2,c
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;	Return value of _frexp is never used
  7876  0060A4  0012               	return	
  7877  0060A6                     l6407:
  7878                           
  7879                           ; BSR set to: 0
  7880  0060A6  0100               	movlb	0	; () banked
  7881  0060A8  517A               	movf	(frexp@value+3)& (0+255),w,b
  7882  0060AA  0B7F               	andlw	127
  7883  0060AC  0100               	movlb	0	; () banked
  7884  0060AE  6F7D               	movwf	??_frexp& (0+255),b
  7885  0060B0  6B7E               	clrf	(??_frexp+1)& (0+255),b
  7886  0060B2  90D8               	bcf	status,0,c
  7887  0060B4  0100               	movlb	0	; () banked
  7888  0060B6  377D               	rlcf	??_frexp& (0+255),f,b
  7889  0060B8  377E               	rlcf	(??_frexp+1)& (0+255),f,b
  7890  0060BA  C07B  FFD9         	movff	frexp@eptr,fsr2l
  7891  0060BE  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  7892  0060C2  C07D  FFDE         	movff	??_frexp,postinc2
  7893  0060C6  C07E  FFDD         	movff	??_frexp+1,postdec2
  7894  0060CA  0100               	movlb	0	; () banked
  7895  0060CC  AF79               	btfss	(frexp@value+2)& (0+255),7,b
  7896  0060CE  D004               	goto	u8010
  7897  0060D0  0100               	movlb	0	; () banked
  7898  0060D2  6B7D               	clrf	??_frexp& (0+255),b
  7899  0060D4  2B7D               	incf	??_frexp& (0+255),f,b
  7900  0060D6  D002               	goto	u8018
  7901  0060D8                     u8010:
  7902  0060D8  0100               	movlb	0	; () banked
  7903  0060DA  6B7D               	clrf	??_frexp& (0+255),b
  7904  0060DC                     u8018:
  7905  0060DC  0100               	movlb	0	; () banked
  7906  0060DE  517D               	movf	??_frexp& (0+255),w,b
  7907  0060E0  C07B  FFD9         	movff	frexp@eptr,fsr2l
  7908  0060E4  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  7909  0060E8  12DE               	iorwf	postinc2,f,c
  7910  0060EA  0E00               	movlw	0
  7911  0060EC  12DD               	iorwf	postdec2,f,c
  7912                           
  7913                           ; BSR set to: 0
  7914  0060EE  C07B  FFD9         	movff	frexp@eptr,fsr2l
  7915  0060F2  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  7916  0060F6  0E82               	movlw	130
  7917  0060F8  26DE               	addwf	postinc2,f,c
  7918  0060FA  0EFF               	movlw	255
  7919  0060FC  22DD               	addwfc	postdec2,f,c
  7920                           
  7921                           ; BSR set to: 0
  7922  0060FE  817A               	bsf	(frexp@value+3)& (0+255),0,b
  7923  006100  837A               	bsf	(frexp@value+3)& (0+255),1,b
  7924  006102  857A               	bsf	(frexp@value+3)& (0+255),2,b
  7925  006104  877A               	bsf	(frexp@value+3)& (0+255),3,b
  7926  006106  897A               	bsf	(frexp@value+3)& (0+255),4,b
  7927  006108  8B7A               	bsf	(frexp@value+3)& (0+255),5,b
  7928  00610A  9D7A               	bcf	(frexp@value+3)& (0+255),6,b
  7929                           
  7930                           ; BSR set to: 0
  7931  00610C  0100               	movlb	0	; () banked
  7932  00610E  9F79               	bcf	(frexp@value+2)& (0+255),7,b
  7933  006110  0012               	return	
  7934                           
  7935                           ; BSR set to: 0
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;	Return value of _frexp is never used
  7939  006112  0012               	return		;funcret
  7940  006114                     __end_of_frexp:
  7941                           	opt stack 0
  7942                           tblptru	equ	0xFF8
  7943                           tblptrh	equ	0xFF7
  7944                           tblptrl	equ	0xFF6
  7945                           tablat	equ	0xFF5
  7946                           prodh	equ	0xFF4
  7947                           prodl	equ	0xFF3
  7948                           postinc0	equ	0xFEE
  7949                           wreg	equ	0xFE8
  7950                           indf2	equ	0xFDF
  7951                           postinc2	equ	0xFDE
  7952                           postdec2	equ	0xFDD
  7953                           fsr2h	equ	0xFDA
  7954                           fsr2l	equ	0xFD9
  7955                           status	equ	0xFD8
  7956                           
  7957 ;; *************** function ___fltol *****************
  7958 ;; Defined at:
  7959 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;  f1              4   79[BANK0 ] PTR int 
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  exp1            1   88[BANK0 ] unsigned char 
  7964 ;;  sign1           1   87[BANK0 ] unsigned char 
  7965 ;; Return value:  Size  Location     Type
  7966 ;;                  4   79[BANK0 ] long 
  7967 ;; Registers used:
  7968 ;;		wreg, status,2, status,0
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7974 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7976 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7977 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7978 ;;Total ram usage:       10 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:    5
  7981 ;; This function calls:
  7982 ;;		Nothing
  7983 ;; This function is called by:
  7984 ;;		_park_routine
  7985 ;;		_parallelo
  7986 ;;		_floor
  7987 ;; This function uses a non-reentrant model
  7988 ;;
  7989                           
  7990                           	psect	text21
  7991  0058F2                     __ptext21:
  7992                           	opt stack 0
  7993  0058F2                     ___fltol:
  7994                           	opt stack 23
  7995                           
  7996                           ; BSR set to: 0
  7997                           ;incstack = 0
  7998  0058F2  0100               	movlb	0	; () banked
  7999  0058F4  35B1               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8000  0058F6  35B2               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8001  0058F8  0100               	movlb	0	; () banked
  8002  0058FA  6FB8               	movwf	___fltol@exp1& (0+255),b
  8003  0058FC  0100               	movlb	0	; () banked
  8004  0058FE  51B8               	movf	___fltol@exp1& (0+255),w,b
  8005  005900  A4D8               	btfss	status,2,c
  8006  005902  D00A               	goto	l6363
  8007                           
  8008                           ; BSR set to: 0
  8009  005904  0E00               	movlw	0
  8010  005906  0100               	movlb	0	; () banked
  8011  005908  6FAF               	movwf	?___fltol& (0+255),b
  8012  00590A  0E00               	movlw	0
  8013  00590C  6FB0               	movwf	(?___fltol+1)& (0+255),b
  8014  00590E  0E00               	movlw	0
  8015  005910  6FB1               	movwf	(?___fltol+2)& (0+255),b
  8016  005912  0E00               	movlw	0
  8017  005914  6FB2               	movwf	(?___fltol+3)& (0+255),b
  8018                           
  8019                           ; BSR set to: 0
  8020  005916  0012               	return	
  8021  005918                     l6363:
  8022                           
  8023                           ; BSR set to: 0
  8024  005918  C0AF  F0B3         	movff	___fltol@f1,??___fltol
  8025  00591C  C0B0  F0B4         	movff	___fltol@f1+1,??___fltol+1
  8026  005920  C0B1  F0B5         	movff	___fltol@f1+2,??___fltol+2
  8027  005924  C0B2  F0B6         	movff	___fltol@f1+3,??___fltol+3
  8028  005928  0E20               	movlw	32
  8029  00592A  D006               	goto	u7940
  8030  00592C                     u7945:
  8031  00592C  0100               	movlb	0	; () banked
  8032  00592E  90D8               	bcf	status,0,c
  8033  005930  33B6               	rrcf	(??___fltol+3)& (0+255),f,b
  8034  005932  33B5               	rrcf	(??___fltol+2)& (0+255),f,b
  8035  005934  33B4               	rrcf	(??___fltol+1)& (0+255),f,b
  8036  005936  33B3               	rrcf	??___fltol& (0+255),f,b
  8037  005938                     u7940:
  8038  005938  2EE8               	decfsz	wreg,f,c
  8039  00593A  D7F8               	goto	u7945
  8040  00593C  0100               	movlb	0	; () banked
  8041  00593E  51B3               	movf	??___fltol& (0+255),w,b
  8042  005940  0100               	movlb	0	; () banked
  8043  005942  6FB7               	movwf	___fltol@sign1& (0+255),b
  8044                           
  8045                           ; BSR set to: 0
  8046  005944  0100               	movlb	0	; () banked
  8047  005946  8FB1               	bsf	(___fltol@f1+2)& (0+255),7,b
  8048                           
  8049                           ; BSR set to: 0
  8050  005948  0EFF               	movlw	255
  8051  00594A  0100               	movlb	0	; () banked
  8052  00594C  17AF               	andwf	___fltol@f1& (0+255),f,b
  8053  00594E  0EFF               	movlw	255
  8054  005950  17B0               	andwf	(___fltol@f1+1)& (0+255),f,b
  8055  005952  0EFF               	movlw	255
  8056  005954  17B1               	andwf	(___fltol@f1+2)& (0+255),f,b
  8057  005956  0E00               	movlw	0
  8058  005958  17B2               	andwf	(___fltol@f1+3)& (0+255),f,b
  8059                           
  8060                           ; BSR set to: 0
  8061  00595A  0E96               	movlw	150
  8062  00595C  0100               	movlb	0	; () banked
  8063  00595E  5FB8               	subwf	___fltol@exp1& (0+255),f,b
  8064                           
  8065                           ; BSR set to: 0
  8066  005960  0100               	movlb	0	; () banked
  8067  005962  AFB8               	btfss	___fltol@exp1& (0+255),7,b
  8068  005964  D01B               	goto	l6383
  8069                           
  8070                           ; BSR set to: 0
  8071  005966  0100               	movlb	0	; () banked
  8072  005968  51B8               	movf	___fltol@exp1& (0+255),w,b
  8073  00596A  0A80               	xorlw	128
  8074  00596C  0F97               	addlw	151
  8075  00596E  B0D8               	btfsc	status,0,c
  8076  005970  D00B               	goto	l6379
  8077                           
  8078                           ; BSR set to: 0
  8079  005972  0E00               	movlw	0
  8080  005974  0100               	movlb	0	; () banked
  8081  005976  6FAF               	movwf	?___fltol& (0+255),b
  8082  005978  0E00               	movlw	0
  8083  00597A  6FB0               	movwf	(?___fltol+1)& (0+255),b
  8084  00597C  0E00               	movlw	0
  8085  00597E  6FB1               	movwf	(?___fltol+2)& (0+255),b
  8086  005980  0E00               	movlw	0
  8087  005982  6FB2               	movwf	(?___fltol+3)& (0+255),b
  8088                           
  8089                           ; BSR set to: 0
  8090  005984  0012               	return	
  8091                           
  8092                           ; BSR set to: 0
  8093  005986  D000               	goto	l6379
  8094  005988                     l6379:
  8095                           
  8096                           ; BSR set to: 0
  8097  005988  0100               	movlb	0	; () banked
  8098  00598A  90D8               	bcf	status,0,c
  8099  00598C  33B2               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8100  00598E  33B1               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8101  005990  33B0               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8102  005992  33AF               	rrcf	___fltol@f1& (0+255),f,b
  8103                           
  8104                           ; BSR set to: 0
  8105  005994  0100               	movlb	0	; () banked
  8106  005996  3FB8               	incfsz	___fltol@exp1& (0+255),f,b
  8107  005998  D7F7               	goto	l6379
  8108                           
  8109                           ; BSR set to: 0
  8110  00599A  D01F               	goto	l6393
  8111  00599C                     l6383:
  8112                           
  8113                           ; BSR set to: 0
  8114  00599C  0E1F               	movlw	31
  8115  00599E  0100               	movlb	0	; () banked
  8116  0059A0  65B8               	cpfsgt	___fltol@exp1& (0+255),b
  8117  0059A2  D014               	goto	l6391
  8118                           
  8119                           ; BSR set to: 0
  8120  0059A4  0E00               	movlw	0
  8121  0059A6  0100               	movlb	0	; () banked
  8122  0059A8  6FAF               	movwf	?___fltol& (0+255),b
  8123  0059AA  0E00               	movlw	0
  8124  0059AC  6FB0               	movwf	(?___fltol+1)& (0+255),b
  8125  0059AE  0E00               	movlw	0
  8126  0059B0  6FB1               	movwf	(?___fltol+2)& (0+255),b
  8127  0059B2  0E00               	movlw	0
  8128  0059B4  6FB2               	movwf	(?___fltol+3)& (0+255),b
  8129                           
  8130                           ; BSR set to: 0
  8131  0059B6  0012               	return	
  8132                           
  8133                           ; BSR set to: 0
  8134  0059B8  D009               	goto	l6391
  8135  0059BA                     l6389:
  8136                           
  8137                           ; BSR set to: 0
  8138  0059BA  0100               	movlb	0	; () banked
  8139  0059BC  90D8               	bcf	status,0,c
  8140  0059BE  37AF               	rlcf	___fltol@f1& (0+255),f,b
  8141  0059C0  37B0               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8142  0059C2  37B1               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8143  0059C4  37B2               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8144  0059C6  0100               	movlb	0	; () banked
  8145  0059C8  07B8               	decf	___fltol@exp1& (0+255),f,b
  8146  0059CA  D000               	goto	l6391
  8147  0059CC                     l6391:
  8148                           
  8149                           ; BSR set to: 0
  8150  0059CC  0100               	movlb	0	; () banked
  8151  0059CE  51B8               	movf	___fltol@exp1& (0+255),w,b
  8152  0059D0  0100               	movlb	0	; () banked
  8153  0059D2  B4D8               	btfsc	status,2,c
  8154  0059D4  D002               	goto	l6393
  8155  0059D6  D7F1               	goto	l6389
  8156                           
  8157                           ; BSR set to: 0
  8158  0059D8  D000               	goto	l6393
  8159  0059DA                     l6393:
  8160                           
  8161                           ; BSR set to: 0
  8162  0059DA  0100               	movlb	0	; () banked
  8163  0059DC  51B7               	movf	___fltol@sign1& (0+255),w,b
  8164  0059DE  0100               	movlb	0	; () banked
  8165  0059E0  B4D8               	btfsc	status,2,c
  8166  0059E2  D00A               	goto	l6397
  8167                           
  8168                           ; BSR set to: 0
  8169  0059E4  0100               	movlb	0	; () banked
  8170  0059E6  1FB2               	comf	(___fltol@f1+3)& (0+255),f,b
  8171  0059E8  1FB1               	comf	(___fltol@f1+2)& (0+255),f,b
  8172  0059EA  1FB0               	comf	(___fltol@f1+1)& (0+255),f,b
  8173  0059EC  6DAF               	negf	___fltol@f1& (0+255),b
  8174  0059EE  0E00               	movlw	0
  8175  0059F0  23B0               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8176  0059F2  23B1               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8177  0059F4  23B2               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8178  0059F6  D000               	goto	l6397
  8179  0059F8                     l6397:
  8180                           
  8181                           ; BSR set to: 0
  8182  0059F8  C0AF  F0AF         	movff	___fltol@f1,?___fltol
  8183  0059FC  C0B0  F0B0         	movff	___fltol@f1+1,?___fltol+1
  8184  005A00  C0B1  F0B1         	movff	___fltol@f1+2,?___fltol+2
  8185  005A04  C0B2  F0B2         	movff	___fltol@f1+3,?___fltol+3
  8186  005A08  0012               	return	
  8187                           
  8188                           ; BSR set to: 0
  8189                           
  8190                           ; BSR set to: 0
  8191  005A0A  0012               	return		;funcret
  8192  005A0C                     __end_of___fltol:
  8193                           	opt stack 0
  8194                           tblptru	equ	0xFF8
  8195                           tblptrh	equ	0xFF7
  8196                           tblptrl	equ	0xFF6
  8197                           tablat	equ	0xFF5
  8198                           prodh	equ	0xFF4
  8199                           prodl	equ	0xFF3
  8200                           postinc0	equ	0xFEE
  8201                           wreg	equ	0xFE8
  8202                           indf2	equ	0xFDF
  8203                           postinc2	equ	0xFDE
  8204                           postdec2	equ	0xFDD
  8205                           fsr2h	equ	0xFDA
  8206                           fsr2l	equ	0xFD9
  8207                           status	equ	0xFD8
  8208                           
  8209 ;; *************** function ___flge *****************
  8210 ;; Defined at:
  8211 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;  ff1             4   83[BANK0 ] long 
  8214 ;;  ff2             4   87[BANK0 ] long 
  8215 ;; Auto vars:     Size  Location     Type
  8216 ;;		None
  8217 ;; Return value:  Size  Location     Type
  8218 ;;		None               void
  8219 ;; Registers used:
  8220 ;;		wreg, status,2, status,0
  8221 ;; Tracked objects:
  8222 ;;		On entry : 0/0
  8223 ;;		On exit  : 0/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8226 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;Total ram usage:       12 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:    5
  8233 ;; This function calls:
  8234 ;;		Nothing
  8235 ;; This function is called by:
  8236 ;;		_park_search
  8237 ;;		_parallelo
  8238 ;;		_asin
  8239 ;;		_atan
  8240 ;;		_cos
  8241 ;;		_sin
  8242 ;;		_sqrt
  8243 ;;		_floor
  8244 ;; This function uses a non-reentrant model
  8245 ;;
  8246                           
  8247                           	psect	text22
  8248  005C34                     __ptext22:
  8249                           	opt stack 0
  8250  005C34                     ___flge:
  8251                           	opt stack 22
  8252                           
  8253                           ; BSR set to: 0
  8254                           ;incstack = 0
  8255  005C34  0100               	movlb	0	; () banked
  8256  005C36  AFB6               	btfss	(___flge@ff1+3)& (0+255),7,b
  8257  005C38  D027               	goto	l6339
  8258                           
  8259                           ; BSR set to: 0
  8260  005C3A  C0B3  F0BB         	movff	___flge@ff1,??___flge
  8261  005C3E  C0B4  F0BC         	movff	___flge@ff1+1,??___flge+1
  8262  005C42  C0B5  F0BD         	movff	___flge@ff1+2,??___flge+2
  8263  005C46  C0B6  F0BE         	movff	___flge@ff1+3,??___flge+3
  8264  005C4A  0100               	movlb	0	; () banked
  8265  005C4C  1FBB               	comf	??___flge& (0+255),f,b
  8266  005C4E  1FBC               	comf	(??___flge+1)& (0+255),f,b
  8267  005C50  1FBD               	comf	(??___flge+2)& (0+255),f,b
  8268  005C52  1FBE               	comf	(??___flge+3)& (0+255),f,b
  8269  005C54  2BBB               	incf	??___flge& (0+255),f,b
  8270  005C56  0E00               	movlw	0
  8271  005C58  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  8272  005C5A  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  8273  005C5C  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  8274  005C5E  0E00               	movlw	0
  8275  005C60  0100               	movlb	0	; () banked
  8276  005C62  25BB               	addwf	??___flge& (0+255),w,b
  8277  005C64  0100               	movlb	0	; () banked
  8278  005C66  6FB3               	movwf	___flge@ff1& (0+255),b
  8279  005C68  0E00               	movlw	0
  8280  005C6A  0100               	movlb	0	; () banked
  8281  005C6C  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  8282  005C6E  0100               	movlb	0	; () banked
  8283  005C70  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  8284  005C72  0E00               	movlw	0
  8285  005C74  0100               	movlb	0	; () banked
  8286  005C76  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  8287  005C78  0100               	movlb	0	; () banked
  8288  005C7A  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  8289  005C7C  0E80               	movlw	128
  8290  005C7E  0100               	movlb	0	; () banked
  8291  005C80  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  8292  005C82  0100               	movlb	0	; () banked
  8293  005C84  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  8294  005C86  D000               	goto	l6339
  8295  005C88                     l6339:
  8296                           
  8297                           ; BSR set to: 0
  8298  005C88  0100               	movlb	0	; () banked
  8299  005C8A  AFBA               	btfss	(___flge@ff2+3)& (0+255),7,b
  8300  005C8C  D026               	goto	l1189
  8301                           
  8302                           ; BSR set to: 0
  8303  005C8E  C0B7  F0BB         	movff	___flge@ff2,??___flge
  8304  005C92  C0B8  F0BC         	movff	___flge@ff2+1,??___flge+1
  8305  005C96  C0B9  F0BD         	movff	___flge@ff2+2,??___flge+2
  8306  005C9A  C0BA  F0BE         	movff	___flge@ff2+3,??___flge+3
  8307  005C9E  0100               	movlb	0	; () banked
  8308  005CA0  1FBB               	comf	??___flge& (0+255),f,b
  8309  005CA2  1FBC               	comf	(??___flge+1)& (0+255),f,b
  8310  005CA4  1FBD               	comf	(??___flge+2)& (0+255),f,b
  8311  005CA6  1FBE               	comf	(??___flge+3)& (0+255),f,b
  8312  005CA8  2BBB               	incf	??___flge& (0+255),f,b
  8313  005CAA  0E00               	movlw	0
  8314  005CAC  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  8315  005CAE  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  8316  005CB0  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  8317  005CB2  0E00               	movlw	0
  8318  005CB4  0100               	movlb	0	; () banked
  8319  005CB6  25BB               	addwf	??___flge& (0+255),w,b
  8320  005CB8  0100               	movlb	0	; () banked
  8321  005CBA  6FB7               	movwf	___flge@ff2& (0+255),b
  8322  005CBC  0E00               	movlw	0
  8323  005CBE  0100               	movlb	0	; () banked
  8324  005CC0  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  8325  005CC2  0100               	movlb	0	; () banked
  8326  005CC4  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  8327  005CC6  0E00               	movlw	0
  8328  005CC8  0100               	movlb	0	; () banked
  8329  005CCA  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  8330  005CCC  0100               	movlb	0	; () banked
  8331  005CCE  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  8332  005CD0  0E80               	movlw	128
  8333  005CD2  0100               	movlb	0	; () banked
  8334  005CD4  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  8335  005CD6  0100               	movlb	0	; () banked
  8336  005CD8  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  8337  005CDA                     l1189:
  8338                           
  8339                           ; BSR set to: 0
  8340  005CDA  0E00               	movlw	0
  8341  005CDC  0100               	movlb	0	; () banked
  8342  005CDE  1BB3               	xorwf	___flge@ff1& (0+255),f,b
  8343  005CE0  0E00               	movlw	0
  8344  005CE2  1BB4               	xorwf	(___flge@ff1+1)& (0+255),f,b
  8345  005CE4  0E00               	movlw	0
  8346  005CE6  1BB5               	xorwf	(___flge@ff1+2)& (0+255),f,b
  8347  005CE8  0E80               	movlw	128
  8348  005CEA  1BB6               	xorwf	(___flge@ff1+3)& (0+255),f,b
  8349  005CEC  0E00               	movlw	0
  8350  005CEE  0100               	movlb	0	; () banked
  8351  005CF0  1BB7               	xorwf	___flge@ff2& (0+255),f,b
  8352  005CF2  0E00               	movlw	0
  8353  005CF4  1BB8               	xorwf	(___flge@ff2+1)& (0+255),f,b
  8354  005CF6  0E00               	movlw	0
  8355  005CF8  1BB9               	xorwf	(___flge@ff2+2)& (0+255),f,b
  8356  005CFA  0E80               	movlw	128
  8357  005CFC  1BBA               	xorwf	(___flge@ff2+3)& (0+255),f,b
  8358  005CFE  0100               	movlb	0	; () banked
  8359  005D00  51B7               	movf	___flge@ff2& (0+255),w,b
  8360  005D02  0100               	movlb	0	; () banked
  8361  005D04  5DB3               	subwf	___flge@ff1& (0+255),w,b
  8362  005D06  0100               	movlb	0	; () banked
  8363  005D08  51B8               	movf	(___flge@ff2+1)& (0+255),w,b
  8364  005D0A  0100               	movlb	0	; () banked
  8365  005D0C  59B4               	subwfb	(___flge@ff1+1)& (0+255),w,b
  8366  005D0E  0100               	movlb	0	; () banked
  8367  005D10  51B9               	movf	(___flge@ff2+2)& (0+255),w,b
  8368  005D12  0100               	movlb	0	; () banked
  8369  005D14  59B5               	subwfb	(___flge@ff1+2)& (0+255),w,b
  8370  005D16  0100               	movlb	0	; () banked
  8371  005D18  51BA               	movf	(___flge@ff2+3)& (0+255),w,b
  8372  005D1A  0100               	movlb	0	; () banked
  8373  005D1C  59B6               	subwfb	(___flge@ff1+3)& (0+255),w,b
  8374  005D1E  B0D8               	btfsc	status,0,c
  8375  005D20  D002               	goto	l6345
  8376                           
  8377                           ; BSR set to: 0
  8378  005D22  90D8               	bcf	status,0,c
  8379  005D24  0012               	return	
  8380  005D26                     l6345:
  8381                           
  8382                           ; BSR set to: 0
  8383  005D26  80D8               	bsf	status,0,c
  8384                           
  8385                           ; BSR set to: 0
  8386  005D28  0012               	return	
  8387                           
  8388                           ; BSR set to: 0
  8389                           
  8390                           ; BSR set to: 0
  8391  005D2A  0012               	return		;funcret
  8392  005D2C                     __end_of___flge:
  8393                           	opt stack 0
  8394                           tblptru	equ	0xFF8
  8395                           tblptrh	equ	0xFF7
  8396                           tblptrl	equ	0xFF6
  8397                           tablat	equ	0xFF5
  8398                           prodh	equ	0xFF4
  8399                           prodl	equ	0xFF3
  8400                           postinc0	equ	0xFEE
  8401                           wreg	equ	0xFE8
  8402                           indf2	equ	0xFDF
  8403                           postinc2	equ	0xFDE
  8404                           postdec2	equ	0xFDD
  8405                           fsr2h	equ	0xFDA
  8406                           fsr2l	equ	0xFD9
  8407                           status	equ	0xFD8
  8408                           
  8409 ;; *************** function ___altofl *****************
  8410 ;; Defined at:
  8411 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;  c               4   89[BANK0 ] long 
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;  sign            1   93[BANK0 ] unsigned char 
  8416 ;; Return value:  Size  Location     Type
  8417 ;;                  4   89[BANK0 ] unsigned char 
  8418 ;; Registers used:
  8419 ;;		wreg, status,2, status,0, cstack
  8420 ;; Tracked objects:
  8421 ;;		On entry : 0/0
  8422 ;;		On exit  : 0/0
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8425 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8426 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;Total ram usage:        5 bytes
  8430 ;; Hardware stack levels used:    1
  8431 ;; Hardware stack levels required when called:    6
  8432 ;; This function calls:
  8433 ;;		___flpack
  8434 ;; This function is called by:
  8435 ;;		_floor
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           	psect	text23
  8440  0062BA                     __ptext23:
  8441                           	opt stack 0
  8442  0062BA                     ___altofl:
  8443                           	opt stack 19
  8444                           
  8445                           ; BSR set to: 0
  8446                           ;incstack = 0
  8447  0062BA  0E00               	movlw	0
  8448  0062BC  0100               	movlb	0	; () banked
  8449  0062BE  6FBD               	movwf	___altofl@sign& (0+255),b
  8450                           
  8451                           ; BSR set to: 0
  8452  0062C0  0100               	movlb	0	; () banked
  8453  0062C2  AFBC               	btfss	(___altofl@c+3)& (0+255),7,b
  8454  0062C4  D00D               	goto	l6213
  8455                           
  8456                           ; BSR set to: 0
  8457  0062C6  0100               	movlb	0	; () banked
  8458  0062C8  1FBC               	comf	(___altofl@c+3)& (0+255),f,b
  8459  0062CA  1FBB               	comf	(___altofl@c+2)& (0+255),f,b
  8460  0062CC  1FBA               	comf	(___altofl@c+1)& (0+255),f,b
  8461  0062CE  6DB9               	negf	___altofl@c& (0+255),b
  8462  0062D0  0E00               	movlw	0
  8463  0062D2  23BA               	addwfc	(___altofl@c+1)& (0+255),f,b
  8464  0062D4  23BB               	addwfc	(___altofl@c+2)& (0+255),f,b
  8465  0062D6  23BC               	addwfc	(___altofl@c+3)& (0+255),f,b
  8466                           
  8467                           ; BSR set to: 0
  8468  0062D8  0E01               	movlw	1
  8469  0062DA  0100               	movlb	0	; () banked
  8470  0062DC  6FBD               	movwf	___altofl@sign& (0+255),b
  8471  0062DE  D000               	goto	l6213
  8472  0062E0                     l6213:
  8473                           
  8474                           ; BSR set to: 0
  8475  0062E0  C0B9  F077         	movff	___altofl@c,___flpack@arg
  8476  0062E4  C0BA  F078         	movff	___altofl@c+1,___flpack@arg+1
  8477  0062E8  C0BB  F079         	movff	___altofl@c+2,___flpack@arg+2
  8478  0062EC  C0BC  F07A         	movff	___altofl@c+3,___flpack@arg+3
  8479  0062F0  0E96               	movlw	150
  8480  0062F2  0100               	movlb	0	; () banked
  8481  0062F4  6F7B               	movwf	___flpack@exp& (0+255),b
  8482  0062F6  C0BD  F07C         	movff	___altofl@sign,___flpack@sign
  8483  0062FA  ECDB  F029         	call	___flpack	;wreg free
  8484  0062FE  C077  F0B9         	movff	?___flpack,?___altofl
  8485  006302  C078  F0BA         	movff	?___flpack+1,?___altofl+1
  8486  006306  C079  F0BB         	movff	?___flpack+2,?___altofl+2
  8487  00630A  C07A  F0BC         	movff	?___flpack+3,?___altofl+3
  8488  00630E  0012               	return	
  8489  006310  0012               	return		;funcret
  8490  006312                     __end_of___altofl:
  8491                           	opt stack 0
  8492                           tblptru	equ	0xFF8
  8493                           tblptrh	equ	0xFF7
  8494                           tblptrl	equ	0xFF6
  8495                           tablat	equ	0xFF5
  8496                           prodh	equ	0xFF4
  8497                           prodl	equ	0xFF3
  8498                           postinc0	equ	0xFEE
  8499                           wreg	equ	0xFE8
  8500                           indf2	equ	0xFDF
  8501                           postinc2	equ	0xFDE
  8502                           postdec2	equ	0xFDD
  8503                           fsr2h	equ	0xFDA
  8504                           fsr2l	equ	0xFD9
  8505                           status	equ	0xFD8
  8506                           
  8507 ;; *************** function _eval_poly *****************
  8508 ;; Defined at:
  8509 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  x               4   75[BANK0 ] unsigned char 
  8512 ;;  d               2   79[BANK0 ] PTR const 
  8513 ;;		 -> sin@coeff_a(20), sin@coeff_b(16), atan@coeff_a(24), atan@coeff_b(20), 
  8514 ;;  n               2   81[BANK0 ] int 
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;  res             4   87[BANK0 ] int 
  8517 ;; Return value:  Size  Location     Type
  8518 ;;                  4   75[BANK0 ] int 
  8519 ;; Registers used:
  8520 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8521 ;; Tracked objects:
  8522 ;;		On entry : 0/0
  8523 ;;		On exit  : 0/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8526 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8529 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;Total ram usage:       16 bytes
  8531 ;; Hardware stack levels used:    1
  8532 ;; Hardware stack levels required when called:    7
  8533 ;; This function calls:
  8534 ;;		___fladd
  8535 ;;		___flmul
  8536 ;; This function is called by:
  8537 ;;		_atan
  8538 ;;		_sin
  8539 ;; This function uses a non-reentrant model
  8540 ;;
  8541                           
  8542                           	psect	text24
  8543  005A0C                     __ptext24:
  8544                           	opt stack 0
  8545  005A0C                     _eval_poly:
  8546                           	opt stack 19
  8547                           
  8548                           ;incstack = 0
  8549  005A0C  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  8550  005A10  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  8551  005A14  0100               	movlb	0	; () banked
  8552  005A16  90D8               	bcf	status,0,c
  8553  005A18  37B3               	rlcf	??_eval_poly& (0+255),f,b
  8554  005A1A  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  8555  005A1C  0100               	movlb	0	; () banked
  8556  005A1E  90D8               	bcf	status,0,c
  8557  005A20  37B3               	rlcf	??_eval_poly& (0+255),f,b
  8558  005A22  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  8559  005A24  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  8560  005A28  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  8561  005A2C  0100               	movlb	0	; () banked
  8562  005A2E  51B3               	movf	??_eval_poly& (0+255),w,b
  8563  005A30  0100               	movlb	0	; () banked
  8564  005A32  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  8565  005A34  0100               	movlb	0	; () banked
  8566  005A36  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  8567  005A38  0100               	movlb	0	; () banked
  8568  005A3A  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  8569  005A3C  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  8570  005A40  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  8571  005A44                     	if	0	;tblptru may be non-zero
  8572  005A44                     	endif
  8573  005A44                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8574  005A44  0E00               	movlw	low (__mediumconst shr (0+16))
  8575  005A46  6EF8               	movwf	tblptru,c
  8576  005A48                     	endif
  8577  005A48  0009               	tblrd		*+
  8578  005A4A  CFF5 F0B7          	movff	tablat,eval_poly@res
  8579  005A4E  0009               	tblrd		*+
  8580  005A50  CFF5 F0B8          	movff	tablat,eval_poly@res+1
  8581  005A54  0009               	tblrd		*+
  8582  005A56  CFF5 F0B9          	movff	tablat,eval_poly@res+2
  8583  005A5A  000A               	tblrd		*-
  8584  005A5C  CFF5 F0BA          	movff	tablat,eval_poly@res+3
  8585  005A60  D053               	goto	l6475
  8586  005A62                     l6473:
  8587                           
  8588                           ; BSR set to: 0
  8589  005A62  C0B7  F085         	movff	eval_poly@res,___flmul@f2
  8590  005A66  C0B8  F086         	movff	eval_poly@res+1,___flmul@f2+1
  8591  005A6A  C0B9  F087         	movff	eval_poly@res+2,___flmul@f2+2
  8592  005A6E  C0BA  F088         	movff	eval_poly@res+3,___flmul@f2+3
  8593  005A72  C0AB  F081         	movff	eval_poly@x,___flmul@f1
  8594  005A76  C0AC  F082         	movff	eval_poly@x+1,___flmul@f1+1
  8595  005A7A  C0AD  F083         	movff	eval_poly@x+2,___flmul@f1+2
  8596  005A7E  C0AE  F084         	movff	eval_poly@x+3,___flmul@f1+3
  8597  005A82  EC9B  F02A         	call	___flmul	;wreg free
  8598  005A86  C081  F09F         	movff	?___flmul,___fladd@f1
  8599  005A8A  C082  F0A0         	movff	?___flmul+1,___fladd@f1+1
  8600  005A8E  C083  F0A1         	movff	?___flmul+2,___fladd@f1+2
  8601  005A92  C084  F0A2         	movff	?___flmul+3,___fladd@f1+3
  8602  005A96  0100               	movlb	0	; () banked
  8603  005A98  07B1               	decf	eval_poly@n& (0+255),f,b
  8604  005A9A  A0D8               	btfss	status,0,c
  8605  005A9C  07B2               	decf	(eval_poly@n+1)& (0+255),f,b
  8606  005A9E  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  8607  005AA2  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  8608  005AA6  0100               	movlb	0	; () banked
  8609  005AA8  90D8               	bcf	status,0,c
  8610  005AAA  37B3               	rlcf	??_eval_poly& (0+255),f,b
  8611  005AAC  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  8612  005AAE  0100               	movlb	0	; () banked
  8613  005AB0  90D8               	bcf	status,0,c
  8614  005AB2  37B3               	rlcf	??_eval_poly& (0+255),f,b
  8615  005AB4  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  8616  005AB6  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  8617  005ABA  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  8618  005ABE  0100               	movlb	0	; () banked
  8619  005AC0  51B3               	movf	??_eval_poly& (0+255),w,b
  8620  005AC2  0100               	movlb	0	; () banked
  8621  005AC4  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  8622  005AC6  0100               	movlb	0	; () banked
  8623  005AC8  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  8624  005ACA  0100               	movlb	0	; () banked
  8625  005ACC  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  8626  005ACE  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  8627  005AD2  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  8628  005AD6                     	if	0	;tblptru may be non-zero
  8629  005AD6                     	endif
  8630  005AD6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8631  005AD6  0E00               	movlw	low (__mediumconst shr (0+16))
  8632  005AD8  6EF8               	movwf	tblptru,c
  8633  005ADA                     	endif
  8634  005ADA  0009               	tblrd		*+
  8635  005ADC  CFF5 F0A3          	movff	tablat,___fladd@f2
  8636  005AE0  0009               	tblrd		*+
  8637  005AE2  CFF5 F0A4          	movff	tablat,___fladd@f2+1
  8638  005AE6  0009               	tblrd		*+
  8639  005AE8  CFF5 F0A5          	movff	tablat,___fladd@f2+2
  8640  005AEC  000A               	tblrd		*-
  8641  005AEE  CFF5 F0A6          	movff	tablat,___fladd@f2+3
  8642  005AF2  EC5E  F023         	call	___fladd	;wreg free
  8643  005AF6  C09F  F0B7         	movff	?___fladd,eval_poly@res
  8644  005AFA  C0A0  F0B8         	movff	?___fladd+1,eval_poly@res+1
  8645  005AFE  C0A1  F0B9         	movff	?___fladd+2,eval_poly@res+2
  8646  005B02  C0A2  F0BA         	movff	?___fladd+3,eval_poly@res+3
  8647  005B06  D000               	goto	l6475
  8648  005B08                     l6475:
  8649  005B08  0100               	movlb	0	; () banked
  8650  005B0A  51B1               	movf	eval_poly@n& (0+255),w,b
  8651  005B0C  0100               	movlb	0	; () banked
  8652  005B0E  11B2               	iorwf	(eval_poly@n+1)& (0+255),w,b
  8653  005B10  A4D8               	btfss	status,2,c
  8654  005B12  D7A7               	goto	l6473
  8655                           
  8656                           ; BSR set to: 0
  8657  005B14  C0B7  F0AB         	movff	eval_poly@res,?_eval_poly
  8658  005B18  C0B8  F0AC         	movff	eval_poly@res+1,?_eval_poly+1
  8659  005B1C  C0B9  F0AD         	movff	eval_poly@res+2,?_eval_poly+2
  8660  005B20  C0BA  F0AE         	movff	eval_poly@res+3,?_eval_poly+3
  8661                           
  8662                           ; BSR set to: 0
  8663  005B24  0012               	return		;funcret
  8664  005B26                     __end_of_eval_poly:
  8665                           	opt stack 0
  8666                           tblptru	equ	0xFF8
  8667                           tblptrh	equ	0xFF7
  8668                           tblptrl	equ	0xFF6
  8669                           tablat	equ	0xFF5
  8670                           prodh	equ	0xFF4
  8671                           prodl	equ	0xFF3
  8672                           postinc0	equ	0xFEE
  8673                           wreg	equ	0xFE8
  8674                           indf2	equ	0xFDF
  8675                           postinc2	equ	0xFDE
  8676                           postdec2	equ	0xFDD
  8677                           fsr2h	equ	0xFDA
  8678                           fsr2l	equ	0xFD9
  8679                           status	equ	0xFD8
  8680                           
  8681 ;; *************** function ___flmul *****************
  8682 ;; Defined at:
  8683 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  8684 ;; Parameters:    Size  Location     Type
  8685 ;;  f1              4   33[BANK0 ] int 
  8686 ;;  f2              4   37[BANK0 ] int 
  8687 ;; Auto vars:     Size  Location     Type
  8688 ;;  f3_as_produc    4   42[BANK0 ] unsigned long 
  8689 ;;  sign            1   47[BANK0 ] unsigned char 
  8690 ;;  cntr            1   46[BANK0 ] unsigned char 
  8691 ;;  exp             1   41[BANK0 ] unsigned char 
  8692 ;; Return value:  Size  Location     Type
  8693 ;;                  4   33[BANK0 ] unsigned char 
  8694 ;; Registers used:
  8695 ;;		wreg, status,2, status,0, cstack
  8696 ;; Tracked objects:
  8697 ;;		On entry : 0/0
  8698 ;;		On exit  : 0/0
  8699 ;;		Unchanged: 0/0
  8700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8701 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8702 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;Total ram usage:       15 bytes
  8706 ;; Hardware stack levels used:    1
  8707 ;; Hardware stack levels required when called:    6
  8708 ;; This function calls:
  8709 ;;		___flpack
  8710 ;; This function is called by:
  8711 ;;		_park_routine
  8712 ;;		_parallelo
  8713 ;;		_matematica
  8714 ;;		_asin
  8715 ;;		_atan
  8716 ;;		_eval_poly
  8717 ;;		_sin
  8718 ;;		_sqrt
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           	psect	text25
  8723  005536                     __ptext25:
  8724                           	opt stack 0
  8725  005536                     ___flmul:
  8726                           	opt stack 21
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;incstack = 0
  8730  005536  0100               	movlb	0	; () banked
  8731  005538  3583               	rlcf	(___flmul@f1+2)& (0+255),w,b
  8732  00553A  3584               	rlcf	(___flmul@f1+3)& (0+255),w,b
  8733  00553C  0100               	movlb	0	; () banked
  8734  00553E  6F89               	movwf	___flmul@exp& (0+255),b
  8735  005540  0100               	movlb	0	; () banked
  8736  005542  5189               	movf	___flmul@exp& (0+255),w,b
  8737  005544  A4D8               	btfss	status,2,c
  8738  005546  D00A               	goto	l6291
  8739                           
  8740                           ; BSR set to: 0
  8741  005548  0E00               	movlw	0
  8742  00554A  0100               	movlb	0	; () banked
  8743  00554C  6F81               	movwf	?___flmul& (0+255),b
  8744  00554E  0E00               	movlw	0
  8745  005550  6F82               	movwf	(?___flmul+1)& (0+255),b
  8746  005552  0E00               	movlw	0
  8747  005554  6F83               	movwf	(?___flmul+2)& (0+255),b
  8748  005556  0E00               	movlw	0
  8749  005558  6F84               	movwf	(?___flmul+3)& (0+255),b
  8750                           
  8751                           ; BSR set to: 0
  8752  00555A  0012               	return	
  8753  00555C                     l6291:
  8754                           
  8755                           ; BSR set to: 0
  8756  00555C  0100               	movlb	0	; () banked
  8757  00555E  3587               	rlcf	(___flmul@f2+2)& (0+255),w,b
  8758  005560  3588               	rlcf	(___flmul@f2+3)& (0+255),w,b
  8759  005562  0100               	movlb	0	; () banked
  8760  005564  6F8F               	movwf	___flmul@sign& (0+255),b
  8761  005566  0100               	movlb	0	; () banked
  8762  005568  518F               	movf	___flmul@sign& (0+255),w,b
  8763  00556A  A4D8               	btfss	status,2,c
  8764  00556C  D00A               	goto	l6297
  8765                           
  8766                           ; BSR set to: 0
  8767  00556E  0E00               	movlw	0
  8768  005570  0100               	movlb	0	; () banked
  8769  005572  6F81               	movwf	?___flmul& (0+255),b
  8770  005574  0E00               	movlw	0
  8771  005576  6F82               	movwf	(?___flmul+1)& (0+255),b
  8772  005578  0E00               	movlw	0
  8773  00557A  6F83               	movwf	(?___flmul+2)& (0+255),b
  8774  00557C  0E00               	movlw	0
  8775  00557E  6F84               	movwf	(?___flmul+3)& (0+255),b
  8776                           
  8777                           ; BSR set to: 0
  8778  005580  0012               	return	
  8779  005582                     l6297:
  8780                           
  8781                           ; BSR set to: 0
  8782  005582  0100               	movlb	0	; () banked
  8783  005584  518F               	movf	___flmul@sign& (0+255),w,b
  8784  005586  0F7B               	addlw	123
  8785  005588  0100               	movlb	0	; () banked
  8786  00558A  2789               	addwf	___flmul@exp& (0+255),f,b
  8787                           
  8788                           ; BSR set to: 0
  8789  00558C  C084  F08F         	movff	___flmul@f1+3,___flmul@sign
  8790  005590  0100               	movlb	0	; () banked
  8791  005592  5188               	movf	(___flmul@f2+3)& (0+255),w,b
  8792  005594  0100               	movlb	0	; () banked
  8793  005596  1B8F               	xorwf	___flmul@sign& (0+255),f,b
  8794  005598  0E80               	movlw	128
  8795  00559A  0100               	movlb	0	; () banked
  8796  00559C  178F               	andwf	___flmul@sign& (0+255),f,b
  8797                           
  8798                           ; BSR set to: 0
  8799  00559E  0100               	movlb	0	; () banked
  8800  0055A0  8F83               	bsf	(___flmul@f1+2)& (0+255),7,b
  8801                           
  8802                           ; BSR set to: 0
  8803  0055A2  0100               	movlb	0	; () banked
  8804  0055A4  8F87               	bsf	(___flmul@f2+2)& (0+255),7,b
  8805  0055A6  0EFF               	movlw	255
  8806  0055A8  0100               	movlb	0	; () banked
  8807  0055AA  1785               	andwf	___flmul@f2& (0+255),f,b
  8808  0055AC  0EFF               	movlw	255
  8809  0055AE  1786               	andwf	(___flmul@f2+1)& (0+255),f,b
  8810  0055B0  0EFF               	movlw	255
  8811  0055B2  1787               	andwf	(___flmul@f2+2)& (0+255),f,b
  8812  0055B4  0E00               	movlw	0
  8813  0055B6  1788               	andwf	(___flmul@f2+3)& (0+255),f,b
  8814                           
  8815                           ; BSR set to: 0
  8816  0055B8  0E00               	movlw	0
  8817  0055BA  0100               	movlb	0	; () banked
  8818  0055BC  6F8A               	movwf	___flmul@f3_as_product& (0+255),b
  8819  0055BE  0E00               	movlw	0
  8820  0055C0  6F8B               	movwf	(___flmul@f3_as_product+1)& (0+255),b
  8821  0055C2  0E00               	movlw	0
  8822  0055C4  6F8C               	movwf	(___flmul@f3_as_product+2)& (0+255),b
  8823  0055C6  0E00               	movlw	0
  8824  0055C8  6F8D               	movwf	(___flmul@f3_as_product+3)& (0+255),b
  8825                           
  8826                           ; BSR set to: 0
  8827  0055CA  0E07               	movlw	7
  8828  0055CC  0100               	movlb	0	; () banked
  8829  0055CE  6F8E               	movwf	___flmul@cntr& (0+255),b
  8830  0055D0  D000               	goto	l6309
  8831  0055D2                     l6309:
  8832                           
  8833                           ; BSR set to: 0
  8834  0055D2  0100               	movlb	0	; () banked
  8835  0055D4  A181               	btfss	___flmul@f1& (0+255),0,b
  8836  0055D6  D011               	goto	l6313
  8837                           
  8838                           ; BSR set to: 0
  8839  0055D8  0100               	movlb	0	; () banked
  8840  0055DA  5185               	movf	___flmul@f2& (0+255),w,b
  8841  0055DC  0100               	movlb	0	; () banked
  8842  0055DE  278A               	addwf	___flmul@f3_as_product& (0+255),f,b
  8843  0055E0  0100               	movlb	0	; () banked
  8844  0055E2  5186               	movf	(___flmul@f2+1)& (0+255),w,b
  8845  0055E4  0100               	movlb	0	; () banked
  8846  0055E6  238B               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8847  0055E8  0100               	movlb	0	; () banked
  8848  0055EA  5187               	movf	(___flmul@f2+2)& (0+255),w,b
  8849  0055EC  0100               	movlb	0	; () banked
  8850  0055EE  238C               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8851  0055F0  0100               	movlb	0	; () banked
  8852  0055F2  5188               	movf	(___flmul@f2+3)& (0+255),w,b
  8853  0055F4  0100               	movlb	0	; () banked
  8854  0055F6  238D               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8855  0055F8  D000               	goto	l6313
  8856  0055FA                     l6313:
  8857                           
  8858                           ; BSR set to: 0
  8859  0055FA  0100               	movlb	0	; () banked
  8860  0055FC  90D8               	bcf	status,0,c
  8861  0055FE  3384               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8862  005600  3383               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8863  005602  3382               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8864  005604  3381               	rrcf	___flmul@f1& (0+255),f,b
  8865                           
  8866                           ; BSR set to: 0
  8867  005606  0100               	movlb	0	; () banked
  8868  005608  90D8               	bcf	status,0,c
  8869  00560A  3785               	rlcf	___flmul@f2& (0+255),f,b
  8870  00560C  3786               	rlcf	(___flmul@f2+1)& (0+255),f,b
  8871  00560E  3787               	rlcf	(___flmul@f2+2)& (0+255),f,b
  8872  005610  3788               	rlcf	(___flmul@f2+3)& (0+255),f,b
  8873                           
  8874                           ; BSR set to: 0
  8875  005612  0100               	movlb	0	; () banked
  8876  005614  2F8E               	decfsz	___flmul@cntr& (0+255),f,b
  8877  005616  D7DD               	goto	l6309
  8878  005618  D000               	goto	l6319
  8879  00561A                     l6319:
  8880                           
  8881                           ; BSR set to: 0
  8882  00561A  0E11               	movlw	17
  8883  00561C  0100               	movlb	0	; () banked
  8884  00561E  6F8E               	movwf	___flmul@cntr& (0+255),b
  8885  005620  D000               	goto	l6321
  8886  005622                     l6321:
  8887                           
  8888                           ; BSR set to: 0
  8889  005622  0100               	movlb	0	; () banked
  8890  005624  A181               	btfss	___flmul@f1& (0+255),0,b
  8891  005626  D011               	goto	l6325
  8892                           
  8893                           ; BSR set to: 0
  8894  005628  0100               	movlb	0	; () banked
  8895  00562A  5185               	movf	___flmul@f2& (0+255),w,b
  8896  00562C  0100               	movlb	0	; () banked
  8897  00562E  278A               	addwf	___flmul@f3_as_product& (0+255),f,b
  8898  005630  0100               	movlb	0	; () banked
  8899  005632  5186               	movf	(___flmul@f2+1)& (0+255),w,b
  8900  005634  0100               	movlb	0	; () banked
  8901  005636  238B               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8902  005638  0100               	movlb	0	; () banked
  8903  00563A  5187               	movf	(___flmul@f2+2)& (0+255),w,b
  8904  00563C  0100               	movlb	0	; () banked
  8905  00563E  238C               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8906  005640  0100               	movlb	0	; () banked
  8907  005642  5188               	movf	(___flmul@f2+3)& (0+255),w,b
  8908  005644  0100               	movlb	0	; () banked
  8909  005646  238D               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8910  005648  D000               	goto	l6325
  8911  00564A                     l6325:
  8912                           
  8913                           ; BSR set to: 0
  8914  00564A  0100               	movlb	0	; () banked
  8915  00564C  90D8               	bcf	status,0,c
  8916  00564E  3384               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8917  005650  3383               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8918  005652  3382               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8919  005654  3381               	rrcf	___flmul@f1& (0+255),f,b
  8920                           
  8921                           ; BSR set to: 0
  8922  005656  0100               	movlb	0	; () banked
  8923  005658  90D8               	bcf	status,0,c
  8924  00565A  338D               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
  8925  00565C  338C               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
  8926  00565E  338B               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
  8927  005660  338A               	rrcf	___flmul@f3_as_product& (0+255),f,b
  8928                           
  8929                           ; BSR set to: 0
  8930  005662  0100               	movlb	0	; () banked
  8931  005664  2F8E               	decfsz	___flmul@cntr& (0+255),f,b
  8932  005666  D7DD               	goto	l6321
  8933  005668  D000               	goto	l6331
  8934  00566A                     l6331:
  8935                           
  8936                           ; BSR set to: 0
  8937  00566A  C08A  F077         	movff	___flmul@f3_as_product,___flpack@arg
  8938  00566E  C08B  F078         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  8939  005672  C08C  F079         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  8940  005676  C08D  F07A         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  8941  00567A  C089  F07B         	movff	___flmul@exp,___flpack@exp
  8942  00567E  C08F  F07C         	movff	___flmul@sign,___flpack@sign
  8943  005682  ECDB  F029         	call	___flpack	;wreg free
  8944  005686  C077  F081         	movff	?___flpack,?___flmul
  8945  00568A  C078  F082         	movff	?___flpack+1,?___flmul+1
  8946  00568E  C079  F083         	movff	?___flpack+2,?___flmul+2
  8947  005692  C07A  F084         	movff	?___flpack+3,?___flmul+3
  8948  005696  0012               	return	
  8949  005698  0012               	return		;funcret
  8950  00569A                     __end_of___flmul:
  8951                           	opt stack 0
  8952                           tblptru	equ	0xFF8
  8953                           tblptrh	equ	0xFF7
  8954                           tblptrl	equ	0xFF6
  8955                           tablat	equ	0xFF5
  8956                           prodh	equ	0xFF4
  8957                           prodl	equ	0xFF3
  8958                           postinc0	equ	0xFEE
  8959                           wreg	equ	0xFE8
  8960                           indf2	equ	0xFDF
  8961                           postinc2	equ	0xFDE
  8962                           postdec2	equ	0xFDD
  8963                           fsr2h	equ	0xFDA
  8964                           fsr2l	equ	0xFD9
  8965                           status	equ	0xFD8
  8966                           
  8967 ;; *************** function ___flsub *****************
  8968 ;; Defined at:
  8969 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  8970 ;; Parameters:    Size  Location     Type
  8971 ;;  f1              4  105[BANK0 ] unsigned char 
  8972 ;;  f2              4  109[BANK0 ] unsigned char 
  8973 ;; Auto vars:     Size  Location     Type
  8974 ;;		None
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  4  105[BANK0 ] unsigned char 
  8977 ;; Registers used:
  8978 ;;		wreg, status,2, status,0, cstack
  8979 ;; Tracked objects:
  8980 ;;		On entry : 0/0
  8981 ;;		On exit  : 0/0
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8984 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;Total ram usage:        8 bytes
  8989 ;; Hardware stack levels used:    1
  8990 ;; Hardware stack levels required when called:    7
  8991 ;; This function calls:
  8992 ;;		___fladd
  8993 ;; This function is called by:
  8994 ;;		_sin
  8995 ;;		_sqrt
  8996 ;; This function uses a non-reentrant model
  8997 ;;
  8998                           
  8999                           	psect	text26
  9000  006202                     __ptext26:
  9001                           	opt stack 0
  9002  006202                     ___flsub:
  9003                           	opt stack 20
  9004                           
  9005                           ;incstack = 0
  9006  006202  0100               	movlb	0	; () banked
  9007  006204  51CD               	movf	___flsub@f2& (0+255),w,b
  9008  006206  0100               	movlb	0	; () banked
  9009  006208  11CE               	iorwf	(___flsub@f2+1)& (0+255),w,b
  9010  00620A  0100               	movlb	0	; () banked
  9011  00620C  11CF               	iorwf	(___flsub@f2+2)& (0+255),w,b
  9012  00620E  0100               	movlb	0	; () banked
  9013  006210  11D0               	iorwf	(___flsub@f2+3)& (0+255),w,b
  9014  006212  B4D8               	btfsc	status,2,c
  9015  006214  D00A               	goto	l6461
  9016                           
  9017                           ; BSR set to: 0
  9018  006216  0E00               	movlw	0
  9019  006218  0100               	movlb	0	; () banked
  9020  00621A  1BCD               	xorwf	___flsub@f2& (0+255),f,b
  9021  00621C  0E00               	movlw	0
  9022  00621E  1BCE               	xorwf	(___flsub@f2+1)& (0+255),f,b
  9023  006220  0E00               	movlw	0
  9024  006222  1BCF               	xorwf	(___flsub@f2+2)& (0+255),f,b
  9025  006224  0E80               	movlw	128
  9026  006226  1BD0               	xorwf	(___flsub@f2+3)& (0+255),f,b
  9027  006228  D000               	goto	l6461
  9028  00622A                     l6461:
  9029                           
  9030                           ; BSR set to: 0
  9031  00622A  C0C9  F09F         	movff	___flsub@f1,___fladd@f1
  9032  00622E  C0CA  F0A0         	movff	___flsub@f1+1,___fladd@f1+1
  9033  006232  C0CB  F0A1         	movff	___flsub@f1+2,___fladd@f1+2
  9034  006236  C0CC  F0A2         	movff	___flsub@f1+3,___fladd@f1+3
  9035  00623A  C0CD  F0A3         	movff	___flsub@f2,___fladd@f2
  9036  00623E  C0CE  F0A4         	movff	___flsub@f2+1,___fladd@f2+1
  9037  006242  C0CF  F0A5         	movff	___flsub@f2+2,___fladd@f2+2
  9038  006246  C0D0  F0A6         	movff	___flsub@f2+3,___fladd@f2+3
  9039  00624A  EC5E  F023         	call	___fladd	;wreg free
  9040  00624E  C09F  F0C9         	movff	?___fladd,?___flsub
  9041  006252  C0A0  F0CA         	movff	?___fladd+1,?___flsub+1
  9042  006256  C0A1  F0CB         	movff	?___fladd+2,?___flsub+2
  9043  00625A  C0A2  F0CC         	movff	?___fladd+3,?___flsub+3
  9044  00625E  0012               	return	
  9045  006260  0012               	return		;funcret
  9046  006262                     __end_of___flsub:
  9047                           	opt stack 0
  9048                           tblptru	equ	0xFF8
  9049                           tblptrh	equ	0xFF7
  9050                           tblptrl	equ	0xFF6
  9051                           tablat	equ	0xFF5
  9052                           prodh	equ	0xFF4
  9053                           prodl	equ	0xFF3
  9054                           postinc0	equ	0xFEE
  9055                           wreg	equ	0xFE8
  9056                           indf2	equ	0xFDF
  9057                           postinc2	equ	0xFDE
  9058                           postdec2	equ	0xFDD
  9059                           fsr2h	equ	0xFDA
  9060                           fsr2l	equ	0xFD9
  9061                           status	equ	0xFD8
  9062                           
  9063 ;; *************** function ___fladd *****************
  9064 ;; Defined at:
  9065 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  9066 ;; Parameters:    Size  Location     Type
  9067 ;;  f1              4   63[BANK0 ] unsigned char 
  9068 ;;  f2              4   67[BANK0 ] unsigned char 
  9069 ;; Auto vars:     Size  Location     Type
  9070 ;;  exp1            1   74[BANK0 ] unsigned char 
  9071 ;;  exp2            1   73[BANK0 ] unsigned char 
  9072 ;;  sign            1   72[BANK0 ] unsigned char 
  9073 ;; Return value:  Size  Location     Type
  9074 ;;                  4   63[BANK0 ] unsigned char 
  9075 ;; Registers used:
  9076 ;;		wreg, status,2, status,0, cstack
  9077 ;; Tracked objects:
  9078 ;;		On entry : 0/0
  9079 ;;		On exit  : 0/0
  9080 ;;		Unchanged: 0/0
  9081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9082 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9085 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9086 ;;Total ram usage:       12 bytes
  9087 ;; Hardware stack levels used:    1
  9088 ;; Hardware stack levels required when called:    6
  9089 ;; This function calls:
  9090 ;;		___flpack
  9091 ;; This function is called by:
  9092 ;;		_park_routine
  9093 ;;		_parallelo
  9094 ;;		_matematica
  9095 ;;		_asin
  9096 ;;		_atan
  9097 ;;		_cos
  9098 ;;		_eval_poly
  9099 ;;		___flsub
  9100 ;;		_sin
  9101 ;;		_floor
  9102 ;; This function uses a non-reentrant model
  9103 ;;
  9104                           
  9105                           	psect	text27
  9106  0046BC                     __ptext27:
  9107                           	opt stack 0
  9108  0046BC                     ___fladd:
  9109                           	opt stack 20
  9110                           
  9111                           ;incstack = 0
  9112  0046BC  0100               	movlb	0	; () banked
  9113  0046BE  35A1               	rlcf	(___fladd@f1+2)& (0+255),w,b
  9114  0046C0  35A2               	rlcf	(___fladd@f1+3)& (0+255),w,b
  9115  0046C2  0100               	movlb	0	; () banked
  9116  0046C4  6FAA               	movwf	___fladd@exp1& (0+255),b
  9117  0046C6  0100               	movlb	0	; () banked
  9118  0046C8  35A5               	rlcf	(___fladd@f2+2)& (0+255),w,b
  9119  0046CA  35A6               	rlcf	(___fladd@f2+3)& (0+255),w,b
  9120  0046CC  0100               	movlb	0	; () banked
  9121  0046CE  6FA9               	movwf	___fladd@exp2& (0+255),b
  9122  0046D0  0100               	movlb	0	; () banked
  9123  0046D2  51AA               	movf	___fladd@exp1& (0+255),w,b
  9124  0046D4  0100               	movlb	0	; () banked
  9125  0046D6  B4D8               	btfsc	status,2,c
  9126  0046D8  D011               	goto	l1149
  9127                           
  9128                           ; BSR set to: 0
  9129  0046DA  0100               	movlb	0	; () banked
  9130  0046DC  51A9               	movf	___fladd@exp2& (0+255),w,b
  9131  0046DE  0100               	movlb	0	; () banked
  9132  0046E0  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  9133  0046E2  B0D8               	btfsc	status,0,c
  9134  0046E4  D014               	goto	l6223
  9135                           
  9136                           ; BSR set to: 0
  9137  0046E6  0100               	movlb	0	; () banked
  9138  0046E8  51AA               	movf	___fladd@exp1& (0+255),w,b
  9139  0046EA  0800               	sublw	0
  9140  0046EC  0100               	movlb	0	; () banked
  9141  0046EE  25A9               	addwf	___fladd@exp2& (0+255),w,b
  9142  0046F0  0100               	movlb	0	; () banked
  9143  0046F2  6FA7               	movwf	??___fladd& (0+255),b
  9144  0046F4  0E20               	movlw	32
  9145  0046F6  0100               	movlb	0	; () banked
  9146  0046F8  65A7               	cpfsgt	??___fladd& (0+255),b
  9147  0046FA  D009               	goto	l6223
  9148  0046FC                     l1149:
  9149                           
  9150                           ; BSR set to: 0
  9151  0046FC  C0A3  F09F         	movff	___fladd@f2,?___fladd
  9152  004700  C0A4  F0A0         	movff	___fladd@f2+1,?___fladd+1
  9153  004704  C0A5  F0A1         	movff	___fladd@f2+2,?___fladd+2
  9154  004708  C0A6  F0A2         	movff	___fladd@f2+3,?___fladd+3
  9155  00470C  0012               	return	
  9156  00470E                     l6223:
  9157                           
  9158                           ; BSR set to: 0
  9159  00470E  0100               	movlb	0	; () banked
  9160  004710  51A9               	movf	___fladd@exp2& (0+255),w,b
  9161  004712  0100               	movlb	0	; () banked
  9162  004714  B4D8               	btfsc	status,2,c
  9163  004716  D011               	goto	l1153
  9164                           
  9165                           ; BSR set to: 0
  9166  004718  0100               	movlb	0	; () banked
  9167  00471A  51AA               	movf	___fladd@exp1& (0+255),w,b
  9168  00471C  0100               	movlb	0	; () banked
  9169  00471E  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  9170  004720  B0D8               	btfsc	status,0,c
  9171  004722  D014               	goto	l6229
  9172                           
  9173                           ; BSR set to: 0
  9174  004724  0100               	movlb	0	; () banked
  9175  004726  51A9               	movf	___fladd@exp2& (0+255),w,b
  9176  004728  0800               	sublw	0
  9177  00472A  0100               	movlb	0	; () banked
  9178  00472C  25AA               	addwf	___fladd@exp1& (0+255),w,b
  9179  00472E  0100               	movlb	0	; () banked
  9180  004730  6FA7               	movwf	??___fladd& (0+255),b
  9181  004732  0E20               	movlw	32
  9182  004734  0100               	movlb	0	; () banked
  9183  004736  65A7               	cpfsgt	??___fladd& (0+255),b
  9184  004738  D009               	goto	l6229
  9185  00473A                     l1153:
  9186                           
  9187                           ; BSR set to: 0
  9188  00473A  C09F  F09F         	movff	___fladd@f1,?___fladd
  9189  00473E  C0A0  F0A0         	movff	___fladd@f1+1,?___fladd+1
  9190  004742  C0A1  F0A1         	movff	___fladd@f1+2,?___fladd+2
  9191  004746  C0A2  F0A2         	movff	___fladd@f1+3,?___fladd+3
  9192  00474A  0012               	return	
  9193  00474C                     l6229:
  9194                           
  9195                           ; BSR set to: 0
  9196  00474C  0E06               	movlw	6
  9197  00474E  0100               	movlb	0	; () banked
  9198  004750  6FA8               	movwf	___fladd@sign& (0+255),b
  9199                           
  9200                           ; BSR set to: 0
  9201  004752  0100               	movlb	0	; () banked
  9202  004754  AFA2               	btfss	(___fladd@f1+3)& (0+255),7,b
  9203  004756  D003               	goto	l6235
  9204                           
  9205                           ; BSR set to: 0
  9206  004758  0100               	movlb	0	; () banked
  9207  00475A  8FA8               	bsf	___fladd@sign& (0+255),7,b
  9208  00475C  D000               	goto	l6235
  9209  00475E                     l6235:
  9210                           
  9211                           ; BSR set to: 0
  9212  00475E  0100               	movlb	0	; () banked
  9213  004760  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  9214  004762  D002               	goto	l1155
  9215                           
  9216                           ; BSR set to: 0
  9217  004764  0100               	movlb	0	; () banked
  9218  004766  8DA8               	bsf	___fladd@sign& (0+255),6,b
  9219  004768                     l1155:
  9220                           
  9221                           ; BSR set to: 0
  9222  004768  0100               	movlb	0	; () banked
  9223  00476A  8FA1               	bsf	(___fladd@f1+2)& (0+255),7,b
  9224                           
  9225                           ; BSR set to: 0
  9226  00476C  0EFF               	movlw	255
  9227  00476E  0100               	movlb	0	; () banked
  9228  004770  179F               	andwf	___fladd@f1& (0+255),f,b
  9229  004772  0EFF               	movlw	255
  9230  004774  17A0               	andwf	(___fladd@f1+1)& (0+255),f,b
  9231  004776  0EFF               	movlw	255
  9232  004778  17A1               	andwf	(___fladd@f1+2)& (0+255),f,b
  9233  00477A  0E00               	movlw	0
  9234  00477C  17A2               	andwf	(___fladd@f1+3)& (0+255),f,b
  9235                           
  9236                           ; BSR set to: 0
  9237  00477E  0100               	movlb	0	; () banked
  9238  004780  8FA5               	bsf	(___fladd@f2+2)& (0+255),7,b
  9239  004782  0EFF               	movlw	255
  9240  004784  0100               	movlb	0	; () banked
  9241  004786  17A3               	andwf	___fladd@f2& (0+255),f,b
  9242  004788  0EFF               	movlw	255
  9243  00478A  17A4               	andwf	(___fladd@f2+1)& (0+255),f,b
  9244  00478C  0EFF               	movlw	255
  9245  00478E  17A5               	andwf	(___fladd@f2+2)& (0+255),f,b
  9246  004790  0E00               	movlw	0
  9247  004792  17A6               	andwf	(___fladd@f2+3)& (0+255),f,b
  9248  004794  0100               	movlb	0	; () banked
  9249  004796  51A9               	movf	___fladd@exp2& (0+255),w,b
  9250  004798  0100               	movlb	0	; () banked
  9251  00479A  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  9252  00479C  B0D8               	btfsc	status,0,c
  9253  00479E  D02A               	goto	l6253
  9254  0047A0                     l6243:
  9255                           
  9256                           ; BSR set to: 0
  9257  0047A0  0100               	movlb	0	; () banked
  9258  0047A2  90D8               	bcf	status,0,c
  9259  0047A4  37A3               	rlcf	___fladd@f2& (0+255),f,b
  9260  0047A6  37A4               	rlcf	(___fladd@f2+1)& (0+255),f,b
  9261  0047A8  37A5               	rlcf	(___fladd@f2+2)& (0+255),f,b
  9262  0047AA  37A6               	rlcf	(___fladd@f2+3)& (0+255),f,b
  9263  0047AC  0100               	movlb	0	; () banked
  9264  0047AE  07A9               	decf	___fladd@exp2& (0+255),f,b
  9265                           
  9266                           ; BSR set to: 0
  9267  0047B0  0100               	movlb	0	; () banked
  9268  0047B2  51AA               	movf	___fladd@exp1& (0+255),w,b
  9269  0047B4  0100               	movlb	0	; () banked
  9270  0047B6  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  9271  0047B8  B4D8               	btfsc	status,2,c
  9272  0047BA  D014               	goto	l6251
  9273                           
  9274                           ; BSR set to: 0
  9275  0047BC  0100               	movlb	0	; () banked
  9276  0047BE  07A8               	decf	___fladd@sign& (0+255),f,b
  9277  0047C0  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  9278  0047C4  0E07               	movlw	7
  9279  0047C6  0100               	movlb	0	; () banked
  9280  0047C8  17A7               	andwf	??___fladd& (0+255),f,b
  9281  0047CA  B4D8               	btfsc	status,2,c
  9282  0047CC  D00B               	goto	l6251
  9283  0047CE  D7E8               	goto	l6243
  9284                           
  9285                           ; BSR set to: 0
  9286                           
  9287                           ; BSR set to: 0
  9288  0047D0  D009               	goto	l6251
  9289  0047D2                     l6249:
  9290                           
  9291                           ; BSR set to: 0
  9292  0047D2  0100               	movlb	0	; () banked
  9293  0047D4  90D8               	bcf	status,0,c
  9294  0047D6  33A2               	rrcf	(___fladd@f1+3)& (0+255),f,b
  9295  0047D8  33A1               	rrcf	(___fladd@f1+2)& (0+255),f,b
  9296  0047DA  33A0               	rrcf	(___fladd@f1+1)& (0+255),f,b
  9297  0047DC  339F               	rrcf	___fladd@f1& (0+255),f,b
  9298  0047DE  0100               	movlb	0	; () banked
  9299  0047E0  2BAA               	incf	___fladd@exp1& (0+255),f,b
  9300  0047E2  D000               	goto	l6251
  9301  0047E4                     l6251:
  9302                           
  9303                           ; BSR set to: 0
  9304  0047E4  0100               	movlb	0	; () banked
  9305  0047E6  51A9               	movf	___fladd@exp2& (0+255),w,b
  9306  0047E8  0100               	movlb	0	; () banked
  9307  0047EA  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  9308  0047EC  B4D8               	btfsc	status,2,c
  9309  0047EE  D032               	goto	l1164
  9310  0047F0  D7F0               	goto	l6249
  9311                           
  9312                           ; BSR set to: 0
  9313  0047F2  D030               	goto	l1164
  9314  0047F4                     l6253:
  9315                           
  9316                           ; BSR set to: 0
  9317  0047F4  0100               	movlb	0	; () banked
  9318  0047F6  51AA               	movf	___fladd@exp1& (0+255),w,b
  9319  0047F8  0100               	movlb	0	; () banked
  9320  0047FA  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  9321  0047FC  B0D8               	btfsc	status,0,c
  9322  0047FE  D02A               	goto	l1164
  9323  004800                     l6255:
  9324                           
  9325                           ; BSR set to: 0
  9326  004800  0100               	movlb	0	; () banked
  9327  004802  90D8               	bcf	status,0,c
  9328  004804  379F               	rlcf	___fladd@f1& (0+255),f,b
  9329  004806  37A0               	rlcf	(___fladd@f1+1)& (0+255),f,b
  9330  004808  37A1               	rlcf	(___fladd@f1+2)& (0+255),f,b
  9331  00480A  37A2               	rlcf	(___fladd@f1+3)& (0+255),f,b
  9332  00480C  0100               	movlb	0	; () banked
  9333  00480E  07AA               	decf	___fladd@exp1& (0+255),f,b
  9334                           
  9335                           ; BSR set to: 0
  9336  004810  0100               	movlb	0	; () banked
  9337  004812  51AA               	movf	___fladd@exp1& (0+255),w,b
  9338  004814  0100               	movlb	0	; () banked
  9339  004816  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  9340  004818  B4D8               	btfsc	status,2,c
  9341  00481A  D014               	goto	l6263
  9342                           
  9343                           ; BSR set to: 0
  9344  00481C  0100               	movlb	0	; () banked
  9345  00481E  07A8               	decf	___fladd@sign& (0+255),f,b
  9346  004820  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  9347  004824  0E07               	movlw	7
  9348  004826  0100               	movlb	0	; () banked
  9349  004828  17A7               	andwf	??___fladd& (0+255),f,b
  9350  00482A  B4D8               	btfsc	status,2,c
  9351  00482C  D00B               	goto	l6263
  9352  00482E  D7E8               	goto	l6255
  9353                           
  9354                           ; BSR set to: 0
  9355                           
  9356                           ; BSR set to: 0
  9357  004830  D009               	goto	l6263
  9358  004832                     l6261:
  9359                           
  9360                           ; BSR set to: 0
  9361  004832  0100               	movlb	0	; () banked
  9362  004834  90D8               	bcf	status,0,c
  9363  004836  33A6               	rrcf	(___fladd@f2+3)& (0+255),f,b
  9364  004838  33A5               	rrcf	(___fladd@f2+2)& (0+255),f,b
  9365  00483A  33A4               	rrcf	(___fladd@f2+1)& (0+255),f,b
  9366  00483C  33A3               	rrcf	___fladd@f2& (0+255),f,b
  9367  00483E  0100               	movlb	0	; () banked
  9368  004840  2BA9               	incf	___fladd@exp2& (0+255),f,b
  9369  004842  D000               	goto	l6263
  9370  004844                     l6263:
  9371                           
  9372                           ; BSR set to: 0
  9373  004844  0100               	movlb	0	; () banked
  9374  004846  51A9               	movf	___fladd@exp2& (0+255),w,b
  9375  004848  0100               	movlb	0	; () banked
  9376  00484A  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  9377  00484C  B4D8               	btfsc	status,2,c
  9378  00484E  D002               	goto	l1164
  9379  004850  D7F0               	goto	l6261
  9380                           
  9381                           ; BSR set to: 0
  9382  004852  D000               	goto	l1164
  9383  004854                     l1164:
  9384                           
  9385                           ; BSR set to: 0
  9386  004854  0100               	movlb	0	; () banked
  9387  004856  AFA8               	btfss	___fladd@sign& (0+255),7,b
  9388  004858  D011               	goto	l6267
  9389                           
  9390                           ; BSR set to: 0
  9391  00485A  0EFF               	movlw	255
  9392  00485C  0100               	movlb	0	; () banked
  9393  00485E  1B9F               	xorwf	___fladd@f1& (0+255),f,b
  9394  004860  0EFF               	movlw	255
  9395  004862  1BA0               	xorwf	(___fladd@f1+1)& (0+255),f,b
  9396  004864  0EFF               	movlw	255
  9397  004866  1BA1               	xorwf	(___fladd@f1+2)& (0+255),f,b
  9398  004868  0EFF               	movlw	255
  9399  00486A  1BA2               	xorwf	(___fladd@f1+3)& (0+255),f,b
  9400  00486C  0E01               	movlw	1
  9401  00486E  0100               	movlb	0	; () banked
  9402  004870  279F               	addwf	___fladd@f1& (0+255),f,b
  9403  004872  0E00               	movlw	0
  9404  004874  23A0               	addwfc	(___fladd@f1+1)& (0+255),f,b
  9405  004876  23A1               	addwfc	(___fladd@f1+2)& (0+255),f,b
  9406  004878  23A2               	addwfc	(___fladd@f1+3)& (0+255),f,b
  9407  00487A  D000               	goto	l6267
  9408  00487C                     l6267:
  9409                           
  9410                           ; BSR set to: 0
  9411  00487C  0100               	movlb	0	; () banked
  9412  00487E  ADA8               	btfss	___fladd@sign& (0+255),6,b
  9413  004880  D011               	goto	l6271
  9414                           
  9415                           ; BSR set to: 0
  9416  004882  0EFF               	movlw	255
  9417  004884  0100               	movlb	0	; () banked
  9418  004886  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  9419  004888  0EFF               	movlw	255
  9420  00488A  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  9421  00488C  0EFF               	movlw	255
  9422  00488E  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  9423  004890  0EFF               	movlw	255
  9424  004892  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  9425  004894  0E01               	movlw	1
  9426  004896  0100               	movlb	0	; () banked
  9427  004898  27A3               	addwf	___fladd@f2& (0+255),f,b
  9428  00489A  0E00               	movlw	0
  9429  00489C  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  9430  00489E  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  9431  0048A0  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  9432  0048A2  D000               	goto	l6271
  9433  0048A4                     l6271:
  9434                           
  9435                           ; BSR set to: 0
  9436  0048A4  0E00               	movlw	0
  9437  0048A6  0100               	movlb	0	; () banked
  9438  0048A8  6FA8               	movwf	___fladd@sign& (0+255),b
  9439                           
  9440                           ; BSR set to: 0
  9441  0048AA  0100               	movlb	0	; () banked
  9442  0048AC  519F               	movf	___fladd@f1& (0+255),w,b
  9443  0048AE  0100               	movlb	0	; () banked
  9444  0048B0  27A3               	addwf	___fladd@f2& (0+255),f,b
  9445  0048B2  0100               	movlb	0	; () banked
  9446  0048B4  51A0               	movf	(___fladd@f1+1)& (0+255),w,b
  9447  0048B6  0100               	movlb	0	; () banked
  9448  0048B8  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  9449  0048BA  0100               	movlb	0	; () banked
  9450  0048BC  51A1               	movf	(___fladd@f1+2)& (0+255),w,b
  9451  0048BE  0100               	movlb	0	; () banked
  9452  0048C0  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  9453  0048C2  0100               	movlb	0	; () banked
  9454  0048C4  51A2               	movf	(___fladd@f1+3)& (0+255),w,b
  9455  0048C6  0100               	movlb	0	; () banked
  9456  0048C8  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  9457                           
  9458                           ; BSR set to: 0
  9459  0048CA  0100               	movlb	0	; () banked
  9460  0048CC  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  9461  0048CE  D014               	goto	l6281
  9462                           
  9463                           ; BSR set to: 0
  9464  0048D0  0EFF               	movlw	255
  9465  0048D2  0100               	movlb	0	; () banked
  9466  0048D4  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  9467  0048D6  0EFF               	movlw	255
  9468  0048D8  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  9469  0048DA  0EFF               	movlw	255
  9470  0048DC  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  9471  0048DE  0EFF               	movlw	255
  9472  0048E0  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  9473  0048E2  0E01               	movlw	1
  9474  0048E4  0100               	movlb	0	; () banked
  9475  0048E6  27A3               	addwf	___fladd@f2& (0+255),f,b
  9476  0048E8  0E00               	movlw	0
  9477  0048EA  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  9478  0048EC  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  9479  0048EE  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  9480                           
  9481                           ; BSR set to: 0
  9482  0048F0  0E01               	movlw	1
  9483  0048F2  0100               	movlb	0	; () banked
  9484  0048F4  6FA8               	movwf	___fladd@sign& (0+255),b
  9485  0048F6  D000               	goto	l6281
  9486  0048F8                     l6281:
  9487                           
  9488                           ; BSR set to: 0
  9489  0048F8  C0A3  F077         	movff	___fladd@f2,___flpack@arg
  9490  0048FC  C0A4  F078         	movff	___fladd@f2+1,___flpack@arg+1
  9491  004900  C0A5  F079         	movff	___fladd@f2+2,___flpack@arg+2
  9492  004904  C0A6  F07A         	movff	___fladd@f2+3,___flpack@arg+3
  9493  004908  C0AA  F07B         	movff	___fladd@exp1,___flpack@exp
  9494  00490C  C0A8  F07C         	movff	___fladd@sign,___flpack@sign
  9495  004910  ECDB  F029         	call	___flpack	;wreg free
  9496  004914  C077  F09F         	movff	?___flpack,?___fladd
  9497  004918  C078  F0A0         	movff	?___flpack+1,?___fladd+1
  9498  00491C  C079  F0A1         	movff	?___flpack+2,?___fladd+2
  9499  004920  C07A  F0A2         	movff	?___flpack+3,?___fladd+3
  9500  004924  0012               	return	
  9501  004926  0012               	return		;funcret
  9502  004928                     __end_of___fladd:
  9503                           	opt stack 0
  9504                           tblptru	equ	0xFF8
  9505                           tblptrh	equ	0xFF7
  9506                           tblptrl	equ	0xFF6
  9507                           tablat	equ	0xFF5
  9508                           prodh	equ	0xFF4
  9509                           prodl	equ	0xFF3
  9510                           postinc0	equ	0xFEE
  9511                           wreg	equ	0xFE8
  9512                           indf2	equ	0xFDF
  9513                           postinc2	equ	0xFDE
  9514                           postdec2	equ	0xFDD
  9515                           fsr2h	equ	0xFDA
  9516                           fsr2l	equ	0xFD9
  9517                           status	equ	0xFD8
  9518                           
  9519 ;; *************** function ___flneg *****************
  9520 ;; Defined at:
  9521 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  9522 ;; Parameters:    Size  Location     Type
  9523 ;;  f1              4   75[BANK0 ] unsigned char 
  9524 ;; Auto vars:     Size  Location     Type
  9525 ;;		None
  9526 ;; Return value:  Size  Location     Type
  9527 ;;                  4   75[BANK0 ] unsigned char 
  9528 ;; Registers used:
  9529 ;;		wreg, status,2, status,0
  9530 ;; Tracked objects:
  9531 ;;		On entry : 0/0
  9532 ;;		On exit  : 0/0
  9533 ;;		Unchanged: 0/0
  9534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9535 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9538 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9539 ;;Total ram usage:        4 bytes
  9540 ;; Hardware stack levels used:    1
  9541 ;; Hardware stack levels required when called:    5
  9542 ;; This function calls:
  9543 ;;		Nothing
  9544 ;; This function is called by:
  9545 ;;		_park_routine
  9546 ;;		_matematica
  9547 ;;		_asin
  9548 ;;		_atan
  9549 ;;		_fabs
  9550 ;;		_sin
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           	psect	text28
  9555  00639C                     __ptext28:
  9556                           	opt stack 0
  9557  00639C                     ___flneg:
  9558                           	opt stack 21
  9559                           
  9560                           ;incstack = 0
  9561  00639C  0100               	movlb	0	; () banked
  9562  00639E  51AB               	movf	___flneg@f1& (0+255),w,b
  9563  0063A0  0100               	movlb	0	; () banked
  9564  0063A2  11AC               	iorwf	(___flneg@f1+1)& (0+255),w,b
  9565  0063A4  0100               	movlb	0	; () banked
  9566  0063A6  11AD               	iorwf	(___flneg@f1+2)& (0+255),w,b
  9567  0063A8  0100               	movlb	0	; () banked
  9568  0063AA  11AE               	iorwf	(___flneg@f1+3)& (0+255),w,b
  9569  0063AC  B4D8               	btfsc	status,2,c
  9570  0063AE  D00A               	goto	l6353
  9571                           
  9572                           ; BSR set to: 0
  9573  0063B0  0E00               	movlw	0
  9574  0063B2  0100               	movlb	0	; () banked
  9575  0063B4  1BAB               	xorwf	___flneg@f1& (0+255),f,b
  9576  0063B6  0E00               	movlw	0
  9577  0063B8  1BAC               	xorwf	(___flneg@f1+1)& (0+255),f,b
  9578  0063BA  0E00               	movlw	0
  9579  0063BC  1BAD               	xorwf	(___flneg@f1+2)& (0+255),f,b
  9580  0063BE  0E80               	movlw	128
  9581  0063C0  1BAE               	xorwf	(___flneg@f1+3)& (0+255),f,b
  9582  0063C2  D000               	goto	l6353
  9583  0063C4                     l6353:
  9584                           
  9585                           ; BSR set to: 0
  9586  0063C4  C0AB  F0AB         	movff	___flneg@f1,?___flneg
  9587  0063C8  C0AC  F0AC         	movff	___flneg@f1+1,?___flneg+1
  9588  0063CC  C0AD  F0AD         	movff	___flneg@f1+2,?___flneg+2
  9589  0063D0  C0AE  F0AE         	movff	___flneg@f1+3,?___flneg+3
  9590  0063D4  0012               	return	
  9591                           
  9592                           ; BSR set to: 0
  9593                           
  9594                           ; BSR set to: 0
  9595  0063D6  0012               	return		;funcret
  9596  0063D8                     __end_of___flneg:
  9597                           	opt stack 0
  9598                           tblptru	equ	0xFF8
  9599                           tblptrh	equ	0xFF7
  9600                           tblptrl	equ	0xFF6
  9601                           tablat	equ	0xFF5
  9602                           prodh	equ	0xFF4
  9603                           prodl	equ	0xFF3
  9604                           postinc0	equ	0xFEE
  9605                           wreg	equ	0xFE8
  9606                           indf2	equ	0xFDF
  9607                           postinc2	equ	0xFDE
  9608                           postdec2	equ	0xFDD
  9609                           fsr2h	equ	0xFDA
  9610                           fsr2l	equ	0xFD9
  9611                           status	equ	0xFD8
  9612                           
  9613 ;; *************** function ___fldiv *****************
  9614 ;; Defined at:
  9615 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;  f1              4   48[BANK0 ] unsigned char 
  9618 ;;  f2              4   52[BANK0 ] unsigned char 
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;  f3              4   56[BANK0 ] unsigned char 
  9621 ;;  sign            1   62[BANK0 ] unsigned char 
  9622 ;;  exp             1   61[BANK0 ] unsigned char 
  9623 ;;  cntr            1   60[BANK0 ] unsigned char 
  9624 ;; Return value:  Size  Location     Type
  9625 ;;                  4   48[BANK0 ] unsigned char 
  9626 ;; Registers used:
  9627 ;;		wreg, status,2, status,0, cstack
  9628 ;; Tracked objects:
  9629 ;;		On entry : 0/0
  9630 ;;		On exit  : 0/0
  9631 ;;		Unchanged: 0/0
  9632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9633 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;Total ram usage:       15 bytes
  9638 ;; Hardware stack levels used:    1
  9639 ;; Hardware stack levels required when called:    6
  9640 ;; This function calls:
  9641 ;;		___flpack
  9642 ;; This function is called by:
  9643 ;;		_park_routine
  9644 ;;		_parallelo
  9645 ;;		_matematica
  9646 ;;		_asin
  9647 ;;		_atan
  9648 ;;		_sin
  9649 ;; This function uses a non-reentrant model
  9650 ;;
  9651                           
  9652                           	psect	text29
  9653  00569A                     __ptext29:
  9654                           	opt stack 0
  9655  00569A                     ___fldiv:
  9656                           	opt stack 20
  9657                           
  9658                           ; BSR set to: 0
  9659                           ;incstack = 0
  9660  00569A  0100               	movlb	0	; () banked
  9661  00569C  3592               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  9662  00569E  3593               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  9663  0056A0  0100               	movlb	0	; () banked
  9664  0056A2  6F9D               	movwf	___fldiv@exp& (0+255),b
  9665  0056A4  0100               	movlb	0	; () banked
  9666  0056A6  519D               	movf	___fldiv@exp& (0+255),w,b
  9667  0056A8  A4D8               	btfss	status,2,c
  9668  0056AA  D00A               	goto	l6423
  9669                           
  9670                           ; BSR set to: 0
  9671  0056AC  0E00               	movlw	0
  9672  0056AE  0100               	movlb	0	; () banked
  9673  0056B0  6F90               	movwf	?___fldiv& (0+255),b
  9674  0056B2  0E00               	movlw	0
  9675  0056B4  6F91               	movwf	(?___fldiv+1)& (0+255),b
  9676  0056B6  0E00               	movlw	0
  9677  0056B8  6F92               	movwf	(?___fldiv+2)& (0+255),b
  9678  0056BA  0E00               	movlw	0
  9679  0056BC  6F93               	movwf	(?___fldiv+3)& (0+255),b
  9680                           
  9681                           ; BSR set to: 0
  9682  0056BE  0012               	return	
  9683  0056C0                     l6423:
  9684                           
  9685                           ; BSR set to: 0
  9686  0056C0  0100               	movlb	0	; () banked
  9687  0056C2  3596               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  9688  0056C4  3597               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  9689  0056C6  0100               	movlb	0	; () banked
  9690  0056C8  6F9E               	movwf	___fldiv@sign& (0+255),b
  9691  0056CA  0100               	movlb	0	; () banked
  9692  0056CC  519E               	movf	___fldiv@sign& (0+255),w,b
  9693  0056CE  A4D8               	btfss	status,2,c
  9694  0056D0  D00A               	goto	l6429
  9695                           
  9696                           ; BSR set to: 0
  9697  0056D2  0E00               	movlw	0
  9698  0056D4  0100               	movlb	0	; () banked
  9699  0056D6  6F90               	movwf	?___fldiv& (0+255),b
  9700  0056D8  0E00               	movlw	0
  9701  0056DA  6F91               	movwf	(?___fldiv+1)& (0+255),b
  9702  0056DC  0E00               	movlw	0
  9703  0056DE  6F92               	movwf	(?___fldiv+2)& (0+255),b
  9704  0056E0  0E00               	movlw	0
  9705  0056E2  6F93               	movwf	(?___fldiv+3)& (0+255),b
  9706                           
  9707                           ; BSR set to: 0
  9708  0056E4  0012               	return	
  9709  0056E6                     l6429:
  9710                           
  9711                           ; BSR set to: 0
  9712  0056E6  0100               	movlb	0	; () banked
  9713  0056E8  519E               	movf	___fldiv@sign& (0+255),w,b
  9714  0056EA  0F89               	addlw	137
  9715  0056EC  0100               	movlb	0	; () banked
  9716  0056EE  5F9D               	subwf	___fldiv@exp& (0+255),f,b
  9717                           
  9718                           ; BSR set to: 0
  9719  0056F0  C093  F09E         	movff	___fldiv@f1+3,___fldiv@sign
  9720  0056F4  0100               	movlb	0	; () banked
  9721  0056F6  5197               	movf	(___fldiv@f2+3)& (0+255),w,b
  9722  0056F8  0100               	movlb	0	; () banked
  9723  0056FA  1B9E               	xorwf	___fldiv@sign& (0+255),f,b
  9724  0056FC  0E80               	movlw	128
  9725  0056FE  0100               	movlb	0	; () banked
  9726  005700  179E               	andwf	___fldiv@sign& (0+255),f,b
  9727                           
  9728                           ; BSR set to: 0
  9729  005702  0100               	movlb	0	; () banked
  9730  005704  8F92               	bsf	(___fldiv@f1+2)& (0+255),7,b
  9731                           
  9732                           ; BSR set to: 0
  9733  005706  0EFF               	movlw	255
  9734  005708  0100               	movlb	0	; () banked
  9735  00570A  1790               	andwf	___fldiv@f1& (0+255),f,b
  9736  00570C  0EFF               	movlw	255
  9737  00570E  1791               	andwf	(___fldiv@f1+1)& (0+255),f,b
  9738  005710  0EFF               	movlw	255
  9739  005712  1792               	andwf	(___fldiv@f1+2)& (0+255),f,b
  9740  005714  0E00               	movlw	0
  9741  005716  1793               	andwf	(___fldiv@f1+3)& (0+255),f,b
  9742  005718  0100               	movlb	0	; () banked
  9743  00571A  8F96               	bsf	(___fldiv@f2+2)& (0+255),7,b
  9744                           
  9745                           ; BSR set to: 0
  9746  00571C  0EFF               	movlw	255
  9747  00571E  0100               	movlb	0	; () banked
  9748  005720  1794               	andwf	___fldiv@f2& (0+255),f,b
  9749  005722  0EFF               	movlw	255
  9750  005724  1795               	andwf	(___fldiv@f2+1)& (0+255),f,b
  9751  005726  0EFF               	movlw	255
  9752  005728  1796               	andwf	(___fldiv@f2+2)& (0+255),f,b
  9753  00572A  0E00               	movlw	0
  9754  00572C  1797               	andwf	(___fldiv@f2+3)& (0+255),f,b
  9755                           
  9756                           ; BSR set to: 0
  9757  00572E  0E20               	movlw	32
  9758  005730  0100               	movlb	0	; () banked
  9759  005732  6F9C               	movwf	___fldiv@cntr& (0+255),b
  9760  005734  D000               	goto	l6441
  9761  005736                     l6441:
  9762                           
  9763                           ; BSR set to: 0
  9764  005736  0100               	movlb	0	; () banked
  9765  005738  90D8               	bcf	status,0,c
  9766  00573A  3798               	rlcf	___fldiv@f3& (0+255),f,b
  9767  00573C  3799               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  9768  00573E  379A               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  9769  005740  379B               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  9770                           
  9771                           ; BSR set to: 0
  9772  005742  0100               	movlb	0	; () banked
  9773  005744  5194               	movf	___fldiv@f2& (0+255),w,b
  9774  005746  0100               	movlb	0	; () banked
  9775  005748  5D90               	subwf	___fldiv@f1& (0+255),w,b
  9776  00574A  0100               	movlb	0	; () banked
  9777  00574C  5195               	movf	(___fldiv@f2+1)& (0+255),w,b
  9778  00574E  0100               	movlb	0	; () banked
  9779  005750  5991               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  9780  005752  0100               	movlb	0	; () banked
  9781  005754  5196               	movf	(___fldiv@f2+2)& (0+255),w,b
  9782  005756  0100               	movlb	0	; () banked
  9783  005758  5992               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  9784  00575A  0100               	movlb	0	; () banked
  9785  00575C  5197               	movf	(___fldiv@f2+3)& (0+255),w,b
  9786  00575E  0100               	movlb	0	; () banked
  9787  005760  5993               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  9788  005762  A0D8               	btfss	status,0,c
  9789  005764  D013               	goto	l6449
  9790                           
  9791                           ; BSR set to: 0
  9792  005766  0100               	movlb	0	; () banked
  9793  005768  5194               	movf	___fldiv@f2& (0+255),w,b
  9794  00576A  0100               	movlb	0	; () banked
  9795  00576C  5F90               	subwf	___fldiv@f1& (0+255),f,b
  9796  00576E  0100               	movlb	0	; () banked
  9797  005770  5195               	movf	(___fldiv@f2+1)& (0+255),w,b
  9798  005772  0100               	movlb	0	; () banked
  9799  005774  5B91               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  9800  005776  0100               	movlb	0	; () banked
  9801  005778  5196               	movf	(___fldiv@f2+2)& (0+255),w,b
  9802  00577A  0100               	movlb	0	; () banked
  9803  00577C  5B92               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  9804  00577E  0100               	movlb	0	; () banked
  9805  005780  5197               	movf	(___fldiv@f2+3)& (0+255),w,b
  9806  005782  0100               	movlb	0	; () banked
  9807  005784  5B93               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  9808                           
  9809                           ; BSR set to: 0
  9810  005786  0100               	movlb	0	; () banked
  9811  005788  8198               	bsf	___fldiv@f3& (0+255),0,b
  9812  00578A  D000               	goto	l6449
  9813  00578C                     l6449:
  9814                           
  9815                           ; BSR set to: 0
  9816  00578C  0100               	movlb	0	; () banked
  9817  00578E  90D8               	bcf	status,0,c
  9818  005790  3790               	rlcf	___fldiv@f1& (0+255),f,b
  9819  005792  3791               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  9820  005794  3792               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  9821  005796  3793               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  9822                           
  9823                           ; BSR set to: 0
  9824  005798  0100               	movlb	0	; () banked
  9825  00579A  2F9C               	decfsz	___fldiv@cntr& (0+255),f,b
  9826  00579C  D7CC               	goto	l6441
  9827  00579E  D000               	goto	l6453
  9828  0057A0                     l6453:
  9829                           
  9830                           ; BSR set to: 0
  9831  0057A0  C098  F077         	movff	___fldiv@f3,___flpack@arg
  9832  0057A4  C099  F078         	movff	___fldiv@f3+1,___flpack@arg+1
  9833  0057A8  C09A  F079         	movff	___fldiv@f3+2,___flpack@arg+2
  9834  0057AC  C09B  F07A         	movff	___fldiv@f3+3,___flpack@arg+3
  9835  0057B0  C09D  F07B         	movff	___fldiv@exp,___flpack@exp
  9836  0057B4  C09E  F07C         	movff	___fldiv@sign,___flpack@sign
  9837  0057B8  ECDB  F029         	call	___flpack	;wreg free
  9838  0057BC  C077  F090         	movff	?___flpack,?___fldiv
  9839  0057C0  C078  F091         	movff	?___flpack+1,?___fldiv+1
  9840  0057C4  C079  F092         	movff	?___flpack+2,?___fldiv+2
  9841  0057C8  C07A  F093         	movff	?___flpack+3,?___fldiv+3
  9842  0057CC  0012               	return	
  9843  0057CE  0012               	return		;funcret
  9844  0057D0                     __end_of___fldiv:
  9845                           	opt stack 0
  9846                           tblptru	equ	0xFF8
  9847                           tblptrh	equ	0xFF7
  9848                           tblptrl	equ	0xFF6
  9849                           tablat	equ	0xFF5
  9850                           prodh	equ	0xFF4
  9851                           prodl	equ	0xFF3
  9852                           postinc0	equ	0xFEE
  9853                           wreg	equ	0xFE8
  9854                           indf2	equ	0xFDF
  9855                           postinc2	equ	0xFDE
  9856                           postdec2	equ	0xFDD
  9857                           fsr2h	equ	0xFDA
  9858                           fsr2l	equ	0xFD9
  9859                           status	equ	0xFD8
  9860                           
  9861 ;; *************** function ___lwtofl *****************
  9862 ;; Defined at:
  9863 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;  c               2   33[BANK0 ] unsigned int 
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;		None
  9868 ;; Return value:  Size  Location     Type
  9869 ;;                  4   33[BANK0 ] unsigned int 
  9870 ;; Registers used:
  9871 ;;		wreg, status,2, status,0, cstack
  9872 ;; Tracked objects:
  9873 ;;		On entry : 0/0
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9877 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;Total ram usage:        4 bytes
  9882 ;; Hardware stack levels used:    1
  9883 ;; Hardware stack levels required when called:    6
  9884 ;; This function calls:
  9885 ;;		___flpack
  9886 ;; This function is called by:
  9887 ;;		_park_search
  9888 ;;		_park_routine
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           
  9892                           	psect	text30
  9893  006482                     __ptext30:
  9894                           	opt stack 0
  9895  006482                     ___lwtofl:
  9896                           	opt stack 23
  9897                           
  9898                           ;incstack = 0
  9899  006482  C081  F077         	movff	___lwtofl@c,___flpack@arg
  9900  006486  C082  F078         	movff	___lwtofl@c+1,___flpack@arg+1
  9901  00648A  0100               	movlb	0	; () banked
  9902  00648C  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  9903  00648E  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  9904  006490  0E96               	movlw	150
  9905  006492  0100               	movlb	0	; () banked
  9906  006494  6F7B               	movwf	___flpack@exp& (0+255),b
  9907  006496  0E00               	movlw	0
  9908  006498  0100               	movlb	0	; () banked
  9909  00649A  6F7C               	movwf	___flpack@sign& (0+255),b
  9910  00649C  ECDB  F029         	call	___flpack	;wreg free
  9911  0064A0  C077  F081         	movff	?___flpack,?___lwtofl
  9912  0064A4  C078  F082         	movff	?___flpack+1,?___lwtofl+1
  9913  0064A8  C079  F083         	movff	?___flpack+2,?___lwtofl+2
  9914  0064AC  C07A  F084         	movff	?___flpack+3,?___lwtofl+3
  9915  0064B0  0012               	return	
  9916  0064B2  0012               	return		;funcret
  9917  0064B4                     __end_of___lwtofl:
  9918                           	opt stack 0
  9919                           tblptru	equ	0xFF8
  9920                           tblptrh	equ	0xFF7
  9921                           tblptrl	equ	0xFF6
  9922                           tablat	equ	0xFF5
  9923                           prodh	equ	0xFF4
  9924                           prodl	equ	0xFF3
  9925                           postinc0	equ	0xFEE
  9926                           wreg	equ	0xFE8
  9927                           indf2	equ	0xFDF
  9928                           postinc2	equ	0xFDE
  9929                           postdec2	equ	0xFDD
  9930                           fsr2h	equ	0xFDA
  9931                           fsr2l	equ	0xFD9
  9932                           status	equ	0xFD8
  9933                           
  9934 ;; *************** function ___flpack *****************
  9935 ;; Defined at:
  9936 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  9937 ;; Parameters:    Size  Location     Type
  9938 ;;  arg             4   23[BANK0 ] unsigned long 
  9939 ;;  exp             1   27[BANK0 ] unsigned char 
  9940 ;;  sign            1   28[BANK0 ] unsigned char 
  9941 ;; Auto vars:     Size  Location     Type
  9942 ;;		None
  9943 ;; Return value:  Size  Location     Type
  9944 ;;                  4   23[BANK0 ] unsigned char 
  9945 ;; Registers used:
  9946 ;;		wreg, status,2, status,0
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9952 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;Total ram usage:       10 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    5
  9959 ;; This function calls:
  9960 ;;		Nothing
  9961 ;; This function is called by:
  9962 ;;		___altofl
  9963 ;;		___awtofl
  9964 ;;		___fladd
  9965 ;;		___fldiv
  9966 ;;		___flmul
  9967 ;;		___lwtofl
  9968 ;; This function uses a non-reentrant model
  9969 ;;
  9970                           
  9971                           	psect	text31
  9972  0053B6                     __ptext31:
  9973                           	opt stack 0
  9974  0053B6                     ___flpack:
  9975                           	opt stack 20
  9976                           
  9977                           ;incstack = 0
  9978  0053B6  0100               	movlb	0	; () banked
  9979  0053B8  517B               	movf	___flpack@exp& (0+255),w,b
  9980  0053BA  0100               	movlb	0	; () banked
  9981  0053BC  B4D8               	btfsc	status,2,c
  9982  0053BE  D00A               	goto	l6175
  9983                           
  9984                           ; BSR set to: 0
  9985  0053C0  0100               	movlb	0	; () banked
  9986  0053C2  5177               	movf	___flpack@arg& (0+255),w,b
  9987  0053C4  0100               	movlb	0	; () banked
  9988  0053C6  1178               	iorwf	(___flpack@arg+1)& (0+255),w,b
  9989  0053C8  0100               	movlb	0	; () banked
  9990  0053CA  1179               	iorwf	(___flpack@arg+2)& (0+255),w,b
  9991  0053CC  0100               	movlb	0	; () banked
  9992  0053CE  117A               	iorwf	(___flpack@arg+3)& (0+255),w,b
  9993  0053D0  A4D8               	btfss	status,2,c
  9994  0053D2  D014               	goto	l6181
  9995  0053D4                     l6175:
  9996                           
  9997                           ; BSR set to: 0
  9998  0053D4  0E00               	movlw	0
  9999  0053D6  0100               	movlb	0	; () banked
 10000  0053D8  6F77               	movwf	?___flpack& (0+255),b
 10001  0053DA  0E00               	movlw	0
 10002  0053DC  6F78               	movwf	(?___flpack+1)& (0+255),b
 10003  0053DE  0E00               	movlw	0
 10004  0053E0  6F79               	movwf	(?___flpack+2)& (0+255),b
 10005  0053E2  0E00               	movlw	0
 10006  0053E4  6F7A               	movwf	(?___flpack+3)& (0+255),b
 10007                           
 10008                           ; BSR set to: 0
 10009  0053E6  0012               	return	
 10010                           
 10011                           ; BSR set to: 0
 10012  0053E8  D009               	goto	l6181
 10013  0053EA                     l6179:
 10014                           
 10015                           ; BSR set to: 0
 10016  0053EA  0100               	movlb	0	; () banked
 10017  0053EC  2B7B               	incf	___flpack@exp& (0+255),f,b
 10018  0053EE  0100               	movlb	0	; () banked
 10019  0053F0  90D8               	bcf	status,0,c
 10020  0053F2  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
 10021  0053F4  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
 10022  0053F6  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
 10023  0053F8  3377               	rrcf	___flpack@arg& (0+255),f,b
 10024  0053FA  D000               	goto	l6181
 10025  0053FC                     l6181:
 10026                           
 10027                           ; BSR set to: 0
 10028  0053FC  0E00               	movlw	0
 10029  0053FE  0100               	movlb	0	; () banked
 10030  005400  1577               	andwf	___flpack@arg& (0+255),w,b
 10031  005402  0100               	movlb	0	; () banked
 10032  005404  6F7D               	movwf	??___flpack& (0+255),b
 10033  005406  0E00               	movlw	0
 10034  005408  0100               	movlb	0	; () banked
 10035  00540A  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
 10036  00540C  0100               	movlb	0	; () banked
 10037  00540E  6F7E               	movwf	(??___flpack+1)& (0+255),b
 10038  005410  0E00               	movlw	0
 10039  005412  0100               	movlb	0	; () banked
 10040  005414  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
 10041  005416  0100               	movlb	0	; () banked
 10042  005418  6F7F               	movwf	(??___flpack+2)& (0+255),b
 10043  00541A  0EFE               	movlw	254
 10044  00541C  0100               	movlb	0	; () banked
 10045  00541E  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
 10046  005420  0100               	movlb	0	; () banked
 10047  005422  6F80               	movwf	(??___flpack+3)& (0+255),b
 10048  005424  0100               	movlb	0	; () banked
 10049  005426  517D               	movf	??___flpack& (0+255),w,b
 10050  005428  0100               	movlb	0	; () banked
 10051  00542A  117E               	iorwf	(??___flpack+1)& (0+255),w,b
 10052  00542C  0100               	movlb	0	; () banked
 10053  00542E  117F               	iorwf	(??___flpack+2)& (0+255),w,b
 10054  005430  0100               	movlb	0	; () banked
 10055  005432  1180               	iorwf	(??___flpack+3)& (0+255),w,b
 10056  005434  B4D8               	btfsc	status,2,c
 10057  005436  D011               	goto	l1121
 10058  005438  D7D8               	goto	l6179
 10059                           
 10060                           ; BSR set to: 0
 10061  00543A  D00F               	goto	l1121
 10062  00543C                     l6183:
 10063                           
 10064                           ; BSR set to: 0
 10065  00543C  0100               	movlb	0	; () banked
 10066  00543E  2B7B               	incf	___flpack@exp& (0+255),f,b
 10067                           
 10068                           ; BSR set to: 0
 10069  005440  0E01               	movlw	1
 10070  005442  0100               	movlb	0	; () banked
 10071  005444  2777               	addwf	___flpack@arg& (0+255),f,b
 10072  005446  0E00               	movlw	0
 10073  005448  2378               	addwfc	(___flpack@arg+1)& (0+255),f,b
 10074  00544A  2379               	addwfc	(___flpack@arg+2)& (0+255),f,b
 10075  00544C  237A               	addwfc	(___flpack@arg+3)& (0+255),f,b
 10076                           
 10077                           ; BSR set to: 0
 10078  00544E  0100               	movlb	0	; () banked
 10079  005450  90D8               	bcf	status,0,c
 10080  005452  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
 10081  005454  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
 10082  005456  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
 10083  005458  3377               	rrcf	___flpack@arg& (0+255),f,b
 10084  00545A                     l1121:
 10085                           
 10086                           ; BSR set to: 0
 10087  00545A  0E00               	movlw	0
 10088  00545C  0100               	movlb	0	; () banked
 10089  00545E  1577               	andwf	___flpack@arg& (0+255),w,b
 10090  005460  0100               	movlb	0	; () banked
 10091  005462  6F7D               	movwf	??___flpack& (0+255),b
 10092  005464  0E00               	movlw	0
 10093  005466  0100               	movlb	0	; () banked
 10094  005468  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
 10095  00546A  0100               	movlb	0	; () banked
 10096  00546C  6F7E               	movwf	(??___flpack+1)& (0+255),b
 10097  00546E  0E00               	movlw	0
 10098  005470  0100               	movlb	0	; () banked
 10099  005472  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
 10100  005474  0100               	movlb	0	; () banked
 10101  005476  6F7F               	movwf	(??___flpack+2)& (0+255),b
 10102  005478  0EFF               	movlw	255
 10103  00547A  0100               	movlb	0	; () banked
 10104  00547C  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
 10105  00547E  0100               	movlb	0	; () banked
 10106  005480  6F80               	movwf	(??___flpack+3)& (0+255),b
 10107  005482  0100               	movlb	0	; () banked
 10108  005484  517D               	movf	??___flpack& (0+255),w,b
 10109  005486  0100               	movlb	0	; () banked
 10110  005488  117E               	iorwf	(??___flpack+1)& (0+255),w,b
 10111  00548A  0100               	movlb	0	; () banked
 10112  00548C  117F               	iorwf	(??___flpack+2)& (0+255),w,b
 10113  00548E  0100               	movlb	0	; () banked
 10114  005490  1180               	iorwf	(??___flpack+3)& (0+255),w,b
 10115  005492  B4D8               	btfsc	status,2,c
 10116  005494  D00B               	goto	l6191
 10117  005496  D7D2               	goto	l6183
 10118                           
 10119                           ; BSR set to: 0
 10120  005498  D009               	goto	l6191
 10121  00549A                     l6189:
 10122                           
 10123                           ; BSR set to: 0
 10124  00549A  0100               	movlb	0	; () banked
 10125  00549C  077B               	decf	___flpack@exp& (0+255),f,b
 10126  00549E  0100               	movlb	0	; () banked
 10127  0054A0  90D8               	bcf	status,0,c
 10128  0054A2  3777               	rlcf	___flpack@arg& (0+255),f,b
 10129  0054A4  3778               	rlcf	(___flpack@arg+1)& (0+255),f,b
 10130  0054A6  3779               	rlcf	(___flpack@arg+2)& (0+255),f,b
 10131  0054A8  377A               	rlcf	(___flpack@arg+3)& (0+255),f,b
 10132  0054AA  D000               	goto	l6191
 10133  0054AC                     l6191:
 10134                           
 10135                           ; BSR set to: 0
 10136  0054AC  0100               	movlb	0	; () banked
 10137  0054AE  BF79               	btfsc	(___flpack@arg+2)& (0+255),7,b
 10138  0054B0  D005               	goto	l1128
 10139                           
 10140                           ; BSR set to: 0
 10141  0054B2  0E02               	movlw	2
 10142  0054B4  0100               	movlb	0	; () banked
 10143  0054B6  617B               	cpfslt	___flpack@exp& (0+255),b
 10144  0054B8  D7F0               	goto	l6189
 10145  0054BA  D000               	goto	l1128
 10146  0054BC                     l1128:
 10147                           
 10148                           ; BSR set to: 0
 10149  0054BC  0100               	movlb	0	; () banked
 10150  0054BE  B17B               	btfsc	___flpack@exp& (0+255),0,b
 10151  0054C0  D009               	goto	l1129
 10152                           
 10153                           ; BSR set to: 0
 10154  0054C2  0EFF               	movlw	255
 10155  0054C4  0100               	movlb	0	; () banked
 10156  0054C6  1777               	andwf	___flpack@arg& (0+255),f,b
 10157  0054C8  0EFF               	movlw	255
 10158  0054CA  1778               	andwf	(___flpack@arg+1)& (0+255),f,b
 10159  0054CC  0E7F               	movlw	127
 10160  0054CE  1779               	andwf	(___flpack@arg+2)& (0+255),f,b
 10161  0054D0  0EFF               	movlw	255
 10162  0054D2  177A               	andwf	(___flpack@arg+3)& (0+255),f,b
 10163  0054D4                     l1129:
 10164                           
 10165                           ; BSR set to: 0
 10166  0054D4  0100               	movlb	0	; () banked
 10167  0054D6  90D8               	bcf	status,0,c
 10168  0054D8  337B               	rrcf	___flpack@exp& (0+255),f,b
 10169  0054DA  C07B  F07D         	movff	___flpack@exp,??___flpack
 10170  0054DE  0100               	movlb	0	; () banked
 10171  0054E0  6B7E               	clrf	(??___flpack+1)& (0+255),b
 10172  0054E2  6B7F               	clrf	(??___flpack+2)& (0+255),b
 10173  0054E4  6B80               	clrf	(??___flpack+3)& (0+255),b
 10174  0054E6  C07D  F080         	movff	??___flpack,??___flpack+3
 10175  0054EA  0100               	movlb	0	; () banked
 10176  0054EC  6B7F               	clrf	(??___flpack+2)& (0+255),b
 10177  0054EE  6B7E               	clrf	(??___flpack+1)& (0+255),b
 10178  0054F0  6B7D               	clrf	??___flpack& (0+255),b
 10179  0054F2  0100               	movlb	0	; () banked
 10180  0054F4  517D               	movf	??___flpack& (0+255),w,b
 10181  0054F6  0100               	movlb	0	; () banked
 10182  0054F8  1377               	iorwf	___flpack@arg& (0+255),f,b
 10183  0054FA  0100               	movlb	0	; () banked
 10184  0054FC  517E               	movf	(??___flpack+1)& (0+255),w,b
 10185  0054FE  0100               	movlb	0	; () banked
 10186  005500  1378               	iorwf	(___flpack@arg+1)& (0+255),f,b
 10187  005502  0100               	movlb	0	; () banked
 10188  005504  517F               	movf	(??___flpack+2)& (0+255),w,b
 10189  005506  0100               	movlb	0	; () banked
 10190  005508  1379               	iorwf	(___flpack@arg+2)& (0+255),f,b
 10191  00550A  0100               	movlb	0	; () banked
 10192  00550C  5180               	movf	(??___flpack+3)& (0+255),w,b
 10193  00550E  0100               	movlb	0	; () banked
 10194  005510  137A               	iorwf	(___flpack@arg+3)& (0+255),f,b
 10195                           
 10196                           ; BSR set to: 0
 10197  005512  0100               	movlb	0	; () banked
 10198  005514  517C               	movf	___flpack@sign& (0+255),w,b
 10199  005516  0100               	movlb	0	; () banked
 10200  005518  B4D8               	btfsc	status,2,c
 10201  00551A  D003               	goto	l6201
 10202                           
 10203                           ; BSR set to: 0
 10204  00551C  0100               	movlb	0	; () banked
 10205  00551E  8F7A               	bsf	(___flpack@arg+3)& (0+255),7,b
 10206  005520  D000               	goto	l6201
 10207  005522                     l6201:
 10208                           
 10209                           ; BSR set to: 0
 10210  005522  C077  F077         	movff	___flpack@arg,?___flpack
 10211  005526  C078  F078         	movff	___flpack@arg+1,?___flpack+1
 10212  00552A  C079  F079         	movff	___flpack@arg+2,?___flpack+2
 10213  00552E  C07A  F07A         	movff	___flpack@arg+3,?___flpack+3
 10214  005532  0012               	return	
 10215                           
 10216                           ; BSR set to: 0
 10217                           
 10218                           ; BSR set to: 0
 10219  005534  0012               	return		;funcret
 10220  005536                     __end_of___flpack:
 10221                           	opt stack 0
 10222                           tblptru	equ	0xFF8
 10223                           tblptrh	equ	0xFF7
 10224                           tblptrl	equ	0xFF6
 10225                           tablat	equ	0xFF5
 10226                           prodh	equ	0xFF4
 10227                           prodl	equ	0xFF3
 10228                           postinc0	equ	0xFEE
 10229                           wreg	equ	0xFE8
 10230                           indf2	equ	0xFDF
 10231                           postinc2	equ	0xFDE
 10232                           postdec2	equ	0xFDD
 10233                           fsr2h	equ	0xFDA
 10234                           fsr2l	equ	0xFD9
 10235                           status	equ	0xFD8
 10236                           
 10237 ;; *************** function _configurations *****************
 10238 ;; Defined at:
 10239 ;;		line 529 in file "parcheggio.c"
 10240 ;; Parameters:    Size  Location     Type
 10241 ;;		None
 10242 ;; Auto vars:     Size  Location     Type
 10243 ;;		None
 10244 ;; Return value:  Size  Location     Type
 10245 ;;		None               void
 10246 ;; Registers used:
 10247 ;;		wreg, status,2, status,0, cstack
 10248 ;; Tracked objects:
 10249 ;;		On entry : 0/0
 10250 ;;		On exit  : 0/0
 10251 ;;		Unchanged: 0/0
 10252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;Total ram usage:        0 bytes
 10258 ;; Hardware stack levels used:    1
 10259 ;; Hardware stack levels required when called:    7
 10260 ;; This function calls:
 10261 ;;		_CANInitialize
 10262 ;; This function is called by:
 10263 ;;		_main
 10264 ;; This function uses a non-reentrant model
 10265 ;;
 10266                           
 10267                           	psect	text32
 10268  006196                     __ptext32:
 10269                           	opt stack 0
 10270  006196                     _configurations:
 10271                           	opt stack 23
 10272                           
 10273                           ;parcheggio.c: 530: LATA = 0x00;
 10274                           
 10275                           ; BSR set to: 0
 10276                           ;incstack = 0
 10277  006196  0E00               	movlw	0
 10278  006198  6E89               	movwf	3977,c	;volatile
 10279                           
 10280                           ;parcheggio.c: 531: TRISA = 0b11110000;
 10281  00619A  0EF0               	movlw	240
 10282  00619C  6E92               	movwf	3986,c	;volatile
 10283                           
 10284                           ;parcheggio.c: 532: LATB = 0x00;
 10285  00619E  0E00               	movlw	0
 10286  0061A0  6E8A               	movwf	3978,c	;volatile
 10287                           
 10288                           ;parcheggio.c: 533: TRISB = 0b10001010;
 10289  0061A2  0E8A               	movlw	138
 10290  0061A4  6E93               	movwf	3987,c	;volatile
 10291                           
 10292                           ;parcheggio.c: 534: LATC = 0x00;
 10293  0061A6  0E00               	movlw	0
 10294  0061A8  6E8B               	movwf	3979,c	;volatile
 10295                           
 10296                           ;parcheggio.c: 535: TRISC = 0b11111111;
 10297  0061AA  6894               	setf	3988,c	;volatile
 10298                           
 10299                           ;parcheggio.c: 537: ADCON1 = 0xFF;
 10300  0061AC  68C1               	setf	4033,c	;volatile
 10301                           
 10302                           ;parcheggio.c: 538: CANInitialize(4, 6, 5, 1, 3, CAN_CONFIG_LINE_FILTER_OFF & CAN_CONFIG
      +                          _SAMPLE_ONCE & CAN_CONFIG_ALL_VALID_MSG & CAN_CONFIG_DBL_BUFFER_ON);
 10303  0061AE  0E06               	movlw	6
 10304  0061B0  0100               	movlb	0	; () banked
 10305  0061B2  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
 10306  0061B4  0E05               	movlw	5
 10307  0061B6  0100               	movlb	0	; () banked
 10308  0061B8  6F86               	movwf	CANInitialize@phaseSeg2& (0+255),b
 10309  0061BA  0E01               	movlw	1
 10310  0061BC  0100               	movlb	0	; () banked
 10311  0061BE  6F87               	movwf	CANInitialize@SJW& (0+255),b
 10312  0061C0  0E03               	movlw	3
 10313  0061C2  0100               	movlb	0	; () banked
 10314  0061C4  6F88               	movwf	CANInitialize@BRP& (0+255),b
 10315  0061C6  0E9D               	movlw	157
 10316  0061C8  0100               	movlb	0	; () banked
 10317  0061CA  6F89               	movwf	CANInitialize@flags& (0+255),b
 10318  0061CC  0E04               	movlw	4
 10319  0061CE  ECF4  F028         	call	_CANInitialize
 10320                           
 10321                           ;parcheggio.c: 541: RCONbits.IPEN = 1;
 10322  0061D2  8ED0               	bsf	4048,7,c	;volatile
 10323                           
 10324                           ;parcheggio.c: 542: IPR3bits.RXB1IP = 0;
 10325  0061D4  92A5               	bcf	4005,1,c	;volatile
 10326                           
 10327                           ;parcheggio.c: 543: IPR3bits.RXB0IP = 0;
 10328  0061D6  90A5               	bcf	4005,0,c	;volatile
 10329                           
 10330                           ;parcheggio.c: 544: INTCON2bits.TMR0IP = 0;
 10331  0061D8  94F1               	bcf	intcon2,2,c	;volatile
 10332                           
 10333                           ;parcheggio.c: 547: PIR3bits.RXB1IF = 0;
 10334  0061DA  92A4               	bcf	4004,1,c	;volatile
 10335                           
 10336                           ;parcheggio.c: 548: PIR3bits.RXB0IF = 0;
 10337  0061DC  90A4               	bcf	4004,0,c	;volatile
 10338                           
 10339                           ;parcheggio.c: 549: INTCONbits.INT0IF = 0;
 10340  0061DE  92F2               	bcf	intcon,1,c	;volatile
 10341                           
 10342                           ;parcheggio.c: 550: INTCONbits.TMR0IF = 0;
 10343  0061E0  94F2               	bcf	intcon,2,c	;volatile
 10344                           
 10345                           ;parcheggio.c: 554: PIE3bits.RXB1IE = 1;
 10346  0061E2  82A3               	bsf	4003,1,c	;volatile
 10347                           
 10348                           ;parcheggio.c: 555: PIE3bits.RXB0IE = 1;
 10349  0061E4  80A3               	bsf	4003,0,c	;volatile
 10350                           
 10351                           ;parcheggio.c: 556: INTCONbits.TMR0IE = 1;
 10352  0061E6  8AF2               	bsf	intcon,5,c	;volatile
 10353                           
 10354                           ;parcheggio.c: 557: INTCONbits.INT0IE = 0;
 10355  0061E8  98F2               	bcf	intcon,4,c	;volatile
 10356                           
 10357                           ;parcheggio.c: 560: T0CON = 0x80;
 10358  0061EA  0E80               	movlw	128
 10359  0061EC  6ED5               	movwf	4053,c	;volatile
 10360                           
 10361                           ;parcheggio.c: 561: TMR0H = 0x34;
 10362  0061EE  0E34               	movlw	52
 10363  0061F0  6ED7               	movwf	4055,c	;volatile
 10364                           
 10365                           ;parcheggio.c: 562: TMR0L = 0xE0;
 10366  0061F2  0EE0               	movlw	224
 10367  0061F4  6ED6               	movwf	4054,c	;volatile
 10368                           
 10369                           ;parcheggio.c: 563: T3CON = 0x11;
 10370  0061F6  0E11               	movlw	17
 10371  0061F8  6EB1               	movwf	4017,c	;volatile
 10372                           
 10373                           ;parcheggio.c: 565: INTCON2bits.INTEDG0 = 1;
 10374  0061FA  8CF1               	bsf	intcon2,6,c	;volatile
 10375                           
 10376                           ;parcheggio.c: 566: INTCONbits.GIEL = 1;
 10377  0061FC  8CF2               	bsf	intcon,6,c	;volatile
 10378                           
 10379                           ;parcheggio.c: 567: INTCONbits.GIEH = 1;
 10380  0061FE  8EF2               	bsf	intcon,7,c	;volatile
 10381  006200  0012               	return		;funcret
 10382  006202                     __end_of_configurations:
 10383                           	opt stack 0
 10384                           tblptru	equ	0xFF8
 10385                           tblptrh	equ	0xFF7
 10386                           tblptrl	equ	0xFF6
 10387                           tablat	equ	0xFF5
 10388                           prodh	equ	0xFF4
 10389                           prodl	equ	0xFF3
 10390                           intcon	equ	0xFF2
 10391                           intcon2	equ	0xFF1
 10392                           postinc0	equ	0xFEE
 10393                           wreg	equ	0xFE8
 10394                           indf2	equ	0xFDF
 10395                           postinc2	equ	0xFDE
 10396                           postdec2	equ	0xFDD
 10397                           fsr2h	equ	0xFDA
 10398                           fsr2l	equ	0xFD9
 10399                           status	equ	0xFD8
 10400                           
 10401 ;; *************** function _CANInitialize *****************
 10402 ;; Defined at:
 10403 ;;		line 218 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 10404 ;; Parameters:    Size  Location     Type
 10405 ;;  propSeg         1    wreg     unsigned char 
 10406 ;;  phaseSeg1       1   37[BANK0 ] unsigned char 
 10407 ;;  phaseSeg2       1   38[BANK0 ] unsigned char 
 10408 ;;  SJW             1   39[BANK0 ] unsigned char 
 10409 ;;  BRP             1   40[BANK0 ] unsigned char 
 10410 ;;  flags           1   41[BANK0 ] enum E16354
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;  propSeg         1   46[BANK0 ] unsigned char 
 10413 ;;  FilterConfig    1   48[BANK0 ] unsigned char 
 10414 ;;  FilterConfig    1   47[BANK0 ] unsigned char 
 10415 ;; Return value:  Size  Location     Type
 10416 ;;		None               void
 10417 ;; Registers used:
 10418 ;;		wreg, status,2, status,0, cstack
 10419 ;; Tracked objects:
 10420 ;;		On entry : 0/0
 10421 ;;		On exit  : 0/0
 10422 ;;		Unchanged: 0/0
 10423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10424 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;Total ram usage:       12 bytes
 10429 ;; Hardware stack levels used:    1
 10430 ;; Hardware stack levels required when called:    6
 10431 ;; This function calls:
 10432 ;;		_CANOperationMode
 10433 ;;		_CANSetFilter
 10434 ;;		_CANSetMask
 10435 ;; This function is called by:
 10436 ;;		_configurations
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           	psect	text33
 10441  0051E8                     __ptext33:
 10442                           	opt stack 0
 10443  0051E8                     _CANInitialize:
 10444                           	opt stack 23
 10445                           
 10446                           ;incstack = 0
 10447                           ;CANInitialize@propSeg stored from wreg
 10448  0051E8  0100               	movlb	0	; () banked
 10449  0051EA  6F8E               	movwf	CANInitialize@propSeg& (0+255),b
 10450                           
 10451                           ; BSR set to: 0
 10452                           ;inc\CANlib.h: 220: BYTE FilterConfig1;
 10453                           ;inc\CANlib.h: 221: BYTE FilterConfig2;
 10454                           ;inc\CANlib.h: 223: CANOperationMode(CAN_OP_MODE_CONFIG);
 10455  0051EC  0E80               	movlw	128
 10456  0051EE  ECBE  F032         	call	_CANOperationMode
 10457                           
 10458                           ;inc\CANlib.h: 225: BRGCON1 = 0x00;
 10459  0051F2  0E00               	movlw	0
 10460  0051F4  6E70               	movwf	3952,c	;volatile
 10461                           
 10462                           ;inc\CANlib.h: 226: BRGCON2 = 0x00;
 10463  0051F6  0E00               	movlw	0
 10464  0051F8  6E71               	movwf	3953,c	;volatile
 10465                           
 10466                           ;inc\CANlib.h: 227: BRGCON3 = 0x00;
 10467  0051FA  0E00               	movlw	0
 10468  0051FC  6E72               	movwf	3954,c	;volatile
 10469                           
 10470                           ;inc\CANlib.h: 229: SJW= SJW << 6;
 10471  0051FE  0100               	movlb	0	; () banked
 10472  005200  4187               	rrncf	CANInitialize@SJW& (0+255),w,b
 10473  005202  42E8               	rrncf	wreg,f,c
 10474  005204  0BC0               	andlw	192
 10475  005206  0100               	movlb	0	; () banked
 10476  005208  6F87               	movwf	CANInitialize@SJW& (0+255),b
 10477                           
 10478                           ; BSR set to: 0
 10479                           ;inc\CANlib.h: 230: BRGCON1 |= SJW;
 10480  00520A  0100               	movlb	0	; () banked
 10481  00520C  5187               	movf	CANInitialize@SJW& (0+255),w,b
 10482  00520E  1270               	iorwf	3952,f,c	;volatile
 10483                           
 10484                           ; BSR set to: 0
 10485                           ;inc\CANlib.h: 231: BRGCON1 |= BRP;
 10486  005210  0100               	movlb	0	; () banked
 10487  005212  5188               	movf	CANInitialize@BRP& (0+255),w,b
 10488  005214  1270               	iorwf	3952,f,c	;volatile
 10489                           
 10490                           ; BSR set to: 0
 10491                           ;inc\CANlib.h: 233: BRGCON2 |= propSeg;
 10492  005216  0100               	movlb	0	; () banked
 10493  005218  518E               	movf	CANInitialize@propSeg& (0+255),w,b
 10494  00521A  1271               	iorwf	3953,f,c	;volatile
 10495                           
 10496                           ; BSR set to: 0
 10497                           ;inc\CANlib.h: 234: phaseSeg1 = phaseSeg1 <<3;
 10498  00521C  0100               	movlb	0	; () banked
 10499  00521E  3985               	swapf	CANInitialize@phaseSeg1& (0+255),w,b
 10500  005220  42E8               	rrncf	wreg,f,c
 10501  005222  0BF8               	andlw	248
 10502  005224  0100               	movlb	0	; () banked
 10503  005226  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
 10504                           
 10505                           ; BSR set to: 0
 10506                           ;inc\CANlib.h: 235: BRGCON2 |= phaseSeg1;
 10507  005228  0100               	movlb	0	; () banked
 10508  00522A  5185               	movf	CANInitialize@phaseSeg1& (0+255),w,b
 10509  00522C  1271               	iorwf	3953,f,c	;volatile
 10510                           
 10511                           ; BSR set to: 0
 10512                           ;inc\CANlib.h: 237: if ( !(flags & CAN_CONFIG_SAMPLE_BIT) )
 10513  00522E  0100               	movlb	0	; () banked
 10514  005230  A589               	btfss	CANInitialize@flags& (0+255),2,b
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;inc\CANlib.h: 238: BRGCON2bits.SAM= 1;
 10518  005232  8C71               	bsf	3953,6,c	;volatile
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;inc\CANlib.h: 240: if ( flags & CAN_CONFIG_PHSEG2_PRG_BIT )
 10522  005234  0100               	movlb	0	; () banked
 10523  005236  A189               	btfss	CANInitialize@flags& (0+255),0,b
 10524  005238  D002               	goto	l6741
 10525                           
 10526                           ; BSR set to: 0
 10527                           ;inc\CANlib.h: 241: BRGCON2bits.SEG2PHTS = 1;
 10528  00523A  8E71               	bsf	3953,7,c	;volatile
 10529  00523C  D000               	goto	l6741
 10530  00523E                     l6741:
 10531                           
 10532                           ; BSR set to: 0
 10533                           ;inc\CANlib.h: 243: BRGCON3 |= phaseSeg2;
 10534  00523E  0100               	movlb	0	; () banked
 10535  005240  5186               	movf	CANInitialize@phaseSeg2& (0+255),w,b
 10536  005242  1272               	iorwf	3954,f,c	;volatile
 10537                           
 10538                           ; BSR set to: 0
 10539                           ;inc\CANlib.h: 245: if ( flags & CAN_CONFIG_LINE_FILTER_BIT )
 10540  005244  0100               	movlb	0	; () banked
 10541  005246  A389               	btfss	CANInitialize@flags& (0+255),1,b
 10542  005248  D002               	goto	l6747
 10543                           
 10544                           ; BSR set to: 0
 10545                           ;inc\CANlib.h: 246: BRGCON3bits.WAKFIL = 1;
 10546  00524A  8C72               	bsf	3954,6,c	;volatile
 10547  00524C  D000               	goto	l6747
 10548  00524E                     l6747:
 10549                           
 10550                           ; BSR set to: 0
 10551                           ;inc\CANlib.h: 251: RXB0CON = flags & CAN_CONFIG_MSG_BITS;
 10552  00524E  0100               	movlb	0	; () banked
 10553  005250  5189               	movf	CANInitialize@flags& (0+255),w,b
 10554  005252  0B60               	andlw	96
 10555  005254  6E60               	movwf	3936,c	;volatile
 10556                           
 10557                           ;inc\CANlib.h: 252: if ( (flags & CAN_CONFIG_DBL_BUFFER_BIT)== CAN_CONFIG_DBL_BUFFER_ON 
      +                          )
 10558  005256  0100               	movlb	0	; () banked
 10559  005258  5189               	movf	CANInitialize@flags& (0+255),w,b
 10560  00525A  0B10               	andlw	16
 10561  00525C  0AFF               	xorlw	255
 10562  00525E  B4D8               	btfsc	status,2,c
 10563                           
 10564                           ; BSR set to: 0
 10565                           ;inc\CANlib.h: 253: RXB0CONbits.RXB0DBEN = 1;
 10566  005260  8460               	bsf	3936,2,c	;volatile
 10567                           
 10568                           ; BSR set to: 0
 10569                           ;inc\CANlib.h: 255: RXB1CON = RXB0CON;
 10570  005262  CF60 FF50          	movff	3936,3920	;volatile
 10571                           
 10572                           ; BSR set to: 0
 10573                           ;inc\CANlib.h: 259: CANSetMask (CAN_MASK_B1, 0x00000000, CAN_CONFIG_XTD_MSG);
 10574  005266  0E00               	movlw	0
 10575  005268  0100               	movlb	0	; () banked
 10576  00526A  6F77               	movwf	CANSetMask@mask& (0+255),b
 10577  00526C  0E00               	movlw	0
 10578  00526E  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10579  005270  0E00               	movlw	0
 10580  005272  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10581  005274  0E00               	movlw	0
 10582  005276  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10583  005278  0EF7               	movlw	247
 10584  00527A  0100               	movlb	0	; () banked
 10585  00527C  6F7B               	movwf	CANSetMask@type& (0+255),b
 10586  00527E  0E01               	movlw	1
 10587  005280  EC69  F01E         	call	_CANSetMask
 10588                           
 10589                           ;inc\CANlib.h: 260: CANSetMask (CAN_MASK_B2, 0x00000000, CAN_CONFIG_XTD_MSG);
 10590  005284  0E00               	movlw	0
 10591  005286  0100               	movlb	0	; () banked
 10592  005288  6F77               	movwf	CANSetMask@mask& (0+255),b
 10593  00528A  0E00               	movlw	0
 10594  00528C  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10595  00528E  0E00               	movlw	0
 10596  005290  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10597  005292  0E00               	movlw	0
 10598  005294  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10599  005296  0EF7               	movlw	247
 10600  005298  0100               	movlb	0	; () banked
 10601  00529A  6F7B               	movwf	CANSetMask@type& (0+255),b
 10602  00529C  0E02               	movlw	2
 10603  00529E  EC69  F01E         	call	_CANSetMask
 10604                           
 10605                           ;inc\CANlib.h: 263: switch( (flags & CAN_CONFIG_MSG_BITS) | ~CAN_CONFIG_MSG_BITS )
 10606  0052A2  D00F               	goto	l6759
 10607  0052A4                     l6753:
 10608                           
 10609                           ;inc\CANlib.h: 266: FilterConfig1 = CAN_CONFIG_XTD_MSG;
 10610  0052A4  0EF7               	movlw	247
 10611  0052A6  0100               	movlb	0	; () banked
 10612  0052A8  6F8F               	movwf	CANInitialize@FilterConfig1& (0+255),b
 10613  0052AA  D007               	goto	l6755
 10614  0052AC                     l356:
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;inc\CANlib.h: 271: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10618  0052AC  0100               	movlb	0	; () banked
 10619  0052AE  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10620                           
 10621                           ;inc\CANlib.h: 272: FilterConfig2 = CAN_CONFIG_STD_MSG;
 10622  0052B0  0100               	movlb	0	; () banked
 10623  0052B2  6990               	setf	CANInitialize@FilterConfig2& (0+255),b
 10624                           
 10625                           ;inc\CANlib.h: 273: break;
 10626  0052B4  D028               	goto	l6761
 10627  0052B6                     l357:
 10628                           
 10629                           ; BSR set to: 0
 10630                           ;inc\CANlib.h: 275: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10631  0052B6  0100               	movlb	0	; () banked
 10632  0052B8  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10633  0052BA                     l6755:
 10634                           
 10635                           ; BSR set to: 0
 10636                           ;inc\CANlib.h: 276: FilterConfig2 = CAN_CONFIG_XTD_MSG;
 10637  0052BA  0EF7               	movlw	247
 10638  0052BC  0100               	movlb	0	; () banked
 10639  0052BE  6F90               	movwf	CANInitialize@FilterConfig2& (0+255),b
 10640                           
 10641                           ; BSR set to: 0
 10642                           ;inc\CANlib.h: 278: }
 10643                           
 10644                           ;inc\CANlib.h: 277: break;
 10645  0052C0  D022               	goto	l6761
 10646  0052C2                     l6759:
 10647  0052C2  0E9F               	movlw	159
 10648  0052C4  0100               	movlb	0	; () banked
 10649  0052C6  6F8A               	movwf	??_CANInitialize& (0+255),b
 10650  0052C8  0EFF               	movlw	255
 10651  0052CA  0100               	movlb	0	; () banked
 10652  0052CC  6F8B               	movwf	(??_CANInitialize+1)& (0+255),b
 10653  0052CE  0100               	movlb	0	; () banked
 10654  0052D0  5189               	movf	CANInitialize@flags& (0+255),w,b
 10655  0052D2  0B60               	andlw	96
 10656  0052D4  0100               	movlb	0	; () banked
 10657  0052D6  6F8C               	movwf	(??_CANInitialize+2)& (0+255),b
 10658  0052D8  6B8D               	clrf	(??_CANInitialize+3)& (0+255),b
 10659  0052DA  0100               	movlb	0	; () banked
 10660  0052DC  518A               	movf	??_CANInitialize& (0+255),w,b
 10661  0052DE  0100               	movlb	0	; () banked
 10662  0052E0  138C               	iorwf	(??_CANInitialize+2)& (0+255),f,b
 10663  0052E2  0100               	movlb	0	; () banked
 10664  0052E4  518B               	movf	(??_CANInitialize+1)& (0+255),w,b
 10665  0052E6  0100               	movlb	0	; () banked
 10666  0052E8  138D               	iorwf	(??_CANInitialize+3)& (0+255),f,b
 10667                           
 10668                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10669                           ; Switch size 1, requested type "space"
 10670                           ; Number of cases is 1, Range of values is 0 to 0
 10671                           ; switch strategies available:
 10672                           ; Name         Instructions Cycles
 10673                           ; simple_byte            4     3 (average)
 10674                           ;	Chosen strategy is simple_byte
 10675  0052EA  0100               	movlb	0	; () banked
 10676  0052EC  518D               	movf	(??_CANInitialize+3)& (0+255),w,b
 10677  0052EE  0A00               	xorlw	0	; case 0
 10678  0052F0  A4D8               	btfss	status,2,c
 10679  0052F2  D7E1               	goto	l357
 10680                           
 10681                           ; BSR set to: 0
 10682                           ; Switch size 1, requested type "space"
 10683                           ; Number of cases is 2, Range of values is 191 to 223
 10684                           ; switch strategies available:
 10685                           ; Name         Instructions Cycles
 10686                           ; simple_byte            7     4 (average)
 10687                           ;	Chosen strategy is simple_byte
 10688  0052F4  0100               	movlb	0	; () banked
 10689  0052F6  518C               	movf	(??_CANInitialize+2)& (0+255),w,b
 10690  0052F8  0ABF               	xorlw	191	; case 191
 10691  0052FA  B4D8               	btfsc	status,2,c
 10692  0052FC  D7D7               	goto	l356
 10693  0052FE  0A60               	xorlw	96	; case 223
 10694  005300  B4D8               	btfsc	status,2,c
 10695  005302  D7D0               	goto	l6753
 10696  005304  D7D8               	goto	l357
 10697  005306                     l6761:
 10698                           
 10699                           ; BSR set to: 0
 10700                           ;inc\CANlib.h: 280: CANSetFilter(CAN_FILTER_B1_F1, 0, FilterConfig1);
 10701  005306  0E00               	movlw	0
 10702  005308  0100               	movlb	0	; () banked
 10703  00530A  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10704  00530C  0E00               	movlw	0
 10705  00530E  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10706  005310  0E00               	movlw	0
 10707  005312  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10708  005314  0E00               	movlw	0
 10709  005316  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10710  005318  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10711  00531C  0E00               	movlw	0
 10712  00531E  EC44  F00C         	call	_CANSetFilter
 10713                           
 10714                           ;inc\CANlib.h: 281: CANSetFilter(CAN_FILTER_B1_F2, 0, FilterConfig1);
 10715  005322  0E00               	movlw	0
 10716  005324  0100               	movlb	0	; () banked
 10717  005326  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10718  005328  0E00               	movlw	0
 10719  00532A  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10720  00532C  0E00               	movlw	0
 10721  00532E  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10722  005330  0E00               	movlw	0
 10723  005332  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10724  005334  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10725  005338  0E01               	movlw	1
 10726  00533A  EC44  F00C         	call	_CANSetFilter
 10727                           
 10728                           ;inc\CANlib.h: 282: CANSetFilter(CAN_FILTER_B2_F1, 0, FilterConfig2);
 10729  00533E  0E00               	movlw	0
 10730  005340  0100               	movlb	0	; () banked
 10731  005342  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10732  005344  0E00               	movlw	0
 10733  005346  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10734  005348  0E00               	movlw	0
 10735  00534A  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10736  00534C  0E00               	movlw	0
 10737  00534E  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10738  005350  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10739  005354  0E02               	movlw	2
 10740  005356  EC44  F00C         	call	_CANSetFilter
 10741                           
 10742                           ;inc\CANlib.h: 283: CANSetFilter(CAN_FILTER_B2_F2, 0, FilterConfig2);
 10743  00535A  0E00               	movlw	0
 10744  00535C  0100               	movlb	0	; () banked
 10745  00535E  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10746  005360  0E00               	movlw	0
 10747  005362  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10748  005364  0E00               	movlw	0
 10749  005366  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10750  005368  0E00               	movlw	0
 10751  00536A  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10752  00536C  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10753  005370  0E03               	movlw	3
 10754  005372  EC44  F00C         	call	_CANSetFilter
 10755                           
 10756                           ;inc\CANlib.h: 284: CANSetFilter(CAN_FILTER_B2_F3, 0, FilterConfig2);
 10757  005376  0E00               	movlw	0
 10758  005378  0100               	movlb	0	; () banked
 10759  00537A  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10760  00537C  0E00               	movlw	0
 10761  00537E  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10762  005380  0E00               	movlw	0
 10763  005382  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10764  005384  0E00               	movlw	0
 10765  005386  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10766  005388  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10767  00538C  0E04               	movlw	4
 10768  00538E  EC44  F00C         	call	_CANSetFilter
 10769                           
 10770                           ;inc\CANlib.h: 285: CANSetFilter(CAN_FILTER_B2_F4, 0, FilterConfig2);
 10771  005392  0E00               	movlw	0
 10772  005394  0100               	movlb	0	; () banked
 10773  005396  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10774  005398  0E00               	movlw	0
 10775  00539A  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10776  00539C  0E00               	movlw	0
 10777  00539E  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10778  0053A0  0E00               	movlw	0
 10779  0053A2  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10780  0053A4  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10781  0053A8  0E05               	movlw	5
 10782  0053AA  EC44  F00C         	call	_CANSetFilter
 10783                           
 10784                           ;inc\CANlib.h: 287: CANOperationMode(CAN_OP_MODE_NORMAL);
 10785  0053AE  0E00               	movlw	0
 10786  0053B0  ECBE  F032         	call	_CANOperationMode
 10787  0053B4  0012               	return		;funcret
 10788  0053B6                     __end_of_CANInitialize:
 10789                           	opt stack 0
 10790                           tblptru	equ	0xFF8
 10791                           tblptrh	equ	0xFF7
 10792                           tblptrl	equ	0xFF6
 10793                           tablat	equ	0xFF5
 10794                           prodh	equ	0xFF4
 10795                           prodl	equ	0xFF3
 10796                           intcon	equ	0xFF2
 10797                           intcon2	equ	0xFF1
 10798                           postinc0	equ	0xFEE
 10799                           wreg	equ	0xFE8
 10800                           indf2	equ	0xFDF
 10801                           postinc2	equ	0xFDE
 10802                           postdec2	equ	0xFDD
 10803                           fsr2h	equ	0xFDA
 10804                           fsr2l	equ	0xFD9
 10805                           status	equ	0xFD8
 10806                           
 10807 ;; *************** function _CANSetMask *****************
 10808 ;; Defined at:
 10809 ;;		line 640 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 10810 ;; Parameters:    Size  Location     Type
 10811 ;;  numBuffer       1    wreg     enum E16388
 10812 ;;  mask            4   23[BANK0 ] unsigned long 
 10813 ;;  type            1   27[BANK0 ] enum E16354
 10814 ;; Auto vars:     Size  Location     Type
 10815 ;;  numBuffer       1   32[BANK0 ] enum E16388
 10816 ;;  tamp            4   33[BANK0 ] unsigned long 
 10817 ;; Return value:  Size  Location     Type
 10818 ;;		None               void
 10819 ;; Registers used:
 10820 ;;		wreg, status,2, status,0
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10826 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;Total ram usage:       14 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; Hardware stack levels required when called:    5
 10833 ;; This function calls:
 10834 ;;		Nothing
 10835 ;; This function is called by:
 10836 ;;		_CANInitialize
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           	psect	text34
 10841  003CD2                     __ptext34:
 10842                           	opt stack 0
 10843  003CD2                     _CANSetMask:
 10844                           	opt stack 23
 10845                           
 10846                           ;incstack = 0
 10847                           ;CANSetMask@numBuffer stored from wreg
 10848  003CD2  0100               	movlb	0	; () banked
 10849  003CD4  6F80               	movwf	CANSetMask@numBuffer& (0+255),b
 10850                           
 10851                           ; BSR set to: 0
 10852                           ;inc\CANlib.h: 643: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_STD_MSG))
 10853  003CD6  0100               	movlb	0	; () banked
 10854  003CD8  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 10855  003CDA  A4D8               	btfss	status,2,c
 10856  003CDC  D057               	goto	l4573
 10857                           
 10858                           ; BSR set to: 0
 10859  003CDE  0100               	movlb	0	; () banked
 10860  003CE0  297B               	incf	CANSetMask@type& (0+255),w,b
 10861  003CE2  A4D8               	btfss	status,2,c
 10862  003CE4  D053               	goto	l4573
 10863                           
 10864                           ; BSR set to: 0
 10865                           ;inc\CANlib.h: 644: {
 10866                           ;inc\CANlib.h: 645: tamp = (mask >> 3);
 10867  003CE6  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10868  003CEA  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10869  003CEE  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10870  003CF2  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10871  003CF6  0E04               	movlw	4
 10872  003CF8  D006               	goto	u4930
 10873  003CFA                     u4935:
 10874  003CFA  0100               	movlb	0	; () banked
 10875  003CFC  90D8               	bcf	status,0,c
 10876  003CFE  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10877  003D00  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10878  003D02  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10879  003D04  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10880  003D06                     u4930:
 10881  003D06  2EE8               	decfsz	wreg,f,c
 10882  003D08  D7F8               	goto	u4935
 10883  003D0A  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10884  003D0E  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10885  003D12  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10886  003D16  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;inc\CANlib.h: 646: tamp = tamp & 0x000000FF;
 10890  003D1A  0100               	movlb	0	; () banked
 10891  003D1C  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10892  003D1E  0100               	movlb	0	; () banked
 10893  003D20  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10894  003D22  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10895  003D24  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10896  003D26  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10897                           
 10898                           ; BSR set to: 0
 10899                           ;inc\CANlib.h: 647: RXM0SIDH = (unsigned char) tamp;
 10900  003D28  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;inc\CANlib.h: 649: tamp = mask & 0x00000007;
 10904  003D2C  0E07               	movlw	7
 10905  003D2E  0100               	movlb	0	; () banked
 10906  003D30  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10907  003D32  0100               	movlb	0	; () banked
 10908  003D34  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10909  003D36  0E00               	movlw	0
 10910  003D38  0100               	movlb	0	; () banked
 10911  003D3A  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10912  003D3C  0100               	movlb	0	; () banked
 10913  003D3E  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10914  003D40  0E00               	movlw	0
 10915  003D42  0100               	movlb	0	; () banked
 10916  003D44  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10917  003D46  0100               	movlb	0	; () banked
 10918  003D48  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10919  003D4A  0E00               	movlw	0
 10920  003D4C  0100               	movlb	0	; () banked
 10921  003D4E  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10922  003D50  0100               	movlb	0	; () banked
 10923  003D52  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;inc\CANlib.h: 650: tamp = tamp << 5;
 10927  003D54  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10928  003D58  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10929  003D5C  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10930  003D60  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10931  003D64  0E05               	movlw	5
 10932  003D66                     u4945:
 10933  003D66  90D8               	bcf	status,0,c
 10934  003D68  0100               	movlb	0	; () banked
 10935  003D6A  377C               	rlcf	??_CANSetMask& (0+255),f,b
 10936  003D6C  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 10937  003D6E  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 10938  003D70  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 10939  003D72  2EE8               	decfsz	wreg,f,c
 10940  003D74  D7F8               	goto	u4945
 10941  003D76  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10942  003D7A  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10943  003D7E  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10944  003D82  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10945                           
 10946                           ; BSR set to: 0
 10947                           ;inc\CANlib.h: 651: RXM0SIDL = (unsigned char) tamp;
 10948  003D86  C081  FF19         	movff	CANSetMask@tamp,3865	;volatile
 10949  003D8A  D000               	goto	l4573
 10950  003D8C                     l4573:
 10951                           
 10952                           ; BSR set to: 0
 10953                           ;inc\CANlib.h: 652: }
 10954                           ;inc\CANlib.h: 654: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_STD_MSG))
 10955  003D8C  0E02               	movlw	2
 10956  003D8E  0100               	movlb	0	; () banked
 10957  003D90  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 10958  003D92  A4D8               	btfss	status,2,c
 10959  003D94  D057               	goto	l4589
 10960                           
 10961                           ; BSR set to: 0
 10962  003D96  0100               	movlb	0	; () banked
 10963  003D98  297B               	incf	CANSetMask@type& (0+255),w,b
 10964  003D9A  A4D8               	btfss	status,2,c
 10965  003D9C  D053               	goto	l4589
 10966                           
 10967                           ; BSR set to: 0
 10968                           ;inc\CANlib.h: 655: {
 10969                           ;inc\CANlib.h: 656: tamp = (mask >> 3);
 10970  003D9E  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10971  003DA2  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10972  003DA6  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10973  003DAA  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10974  003DAE  0E04               	movlw	4
 10975  003DB0  D006               	goto	u4970
 10976  003DB2                     u4975:
 10977  003DB2  0100               	movlb	0	; () banked
 10978  003DB4  90D8               	bcf	status,0,c
 10979  003DB6  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10980  003DB8  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10981  003DBA  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10982  003DBC  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10983  003DBE                     u4970:
 10984  003DBE  2EE8               	decfsz	wreg,f,c
 10985  003DC0  D7F8               	goto	u4975
 10986  003DC2  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10987  003DC6  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10988  003DCA  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10989  003DCE  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10990                           
 10991                           ; BSR set to: 0
 10992                           ;inc\CANlib.h: 657: tamp = tamp & 0x000000FF;
 10993  003DD2  0100               	movlb	0	; () banked
 10994  003DD4  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10995  003DD6  0100               	movlb	0	; () banked
 10996  003DD8  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10997  003DDA  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10998  003DDC  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10999  003DDE  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 11000                           
 11001                           ; BSR set to: 0
 11002                           ;inc\CANlib.h: 658: RXM1SIDH = (unsigned char) tamp;
 11003  003DE0  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 11004                           
 11005                           ; BSR set to: 0
 11006                           ;inc\CANlib.h: 660: tamp = mask & 0x00000007;
 11007  003DE4  0E07               	movlw	7
 11008  003DE6  0100               	movlb	0	; () banked
 11009  003DE8  1577               	andwf	CANSetMask@mask& (0+255),w,b
 11010  003DEA  0100               	movlb	0	; () banked
 11011  003DEC  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11012  003DEE  0E00               	movlw	0
 11013  003DF0  0100               	movlb	0	; () banked
 11014  003DF2  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 11015  003DF4  0100               	movlb	0	; () banked
 11016  003DF6  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 11017  003DF8  0E00               	movlw	0
 11018  003DFA  0100               	movlb	0	; () banked
 11019  003DFC  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 11020  003DFE  0100               	movlb	0	; () banked
 11021  003E00  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 11022  003E02  0E00               	movlw	0
 11023  003E04  0100               	movlb	0	; () banked
 11024  003E06  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 11025  003E08  0100               	movlb	0	; () banked
 11026  003E0A  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 11027                           
 11028                           ; BSR set to: 0
 11029                           ;inc\CANlib.h: 661: tamp = tamp << 5;
 11030  003E0C  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 11031  003E10  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 11032  003E14  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 11033  003E18  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 11034  003E1C  0E05               	movlw	5
 11035  003E1E                     u4985:
 11036  003E1E  90D8               	bcf	status,0,c
 11037  003E20  0100               	movlb	0	; () banked
 11038  003E22  377C               	rlcf	??_CANSetMask& (0+255),f,b
 11039  003E24  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 11040  003E26  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 11041  003E28  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 11042  003E2A  2EE8               	decfsz	wreg,f,c
 11043  003E2C  D7F8               	goto	u4985
 11044  003E2E  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 11045  003E32  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 11046  003E36  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 11047  003E3A  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;inc\CANlib.h: 662: RXM1SIDL = (unsigned char) tamp;
 11051  003E3E  C081  FF1D         	movff	CANSetMask@tamp,3869	;volatile
 11052  003E42  D000               	goto	l4589
 11053  003E44                     l4589:
 11054                           
 11055                           ; BSR set to: 0
 11056                           ;inc\CANlib.h: 663: }
 11057                           ;inc\CANlib.h: 665: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_XTD_MSG))
 11058  003E44  0100               	movlb	0	; () banked
 11059  003E46  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 11060  003E48  A4D8               	btfss	status,2,c
 11061  003E4A  D089               	goto	l4621
 11062                           
 11063                           ; BSR set to: 0
 11064  003E4C  0EF7               	movlw	247
 11065  003E4E  0100               	movlb	0	; () banked
 11066  003E50  197B               	xorwf	CANSetMask@type& (0+255),w,b
 11067  003E52  A4D8               	btfss	status,2,c
 11068  003E54  D084               	goto	l4621
 11069                           
 11070                           ; BSR set to: 0
 11071                           ;inc\CANlib.h: 666: {
 11072                           ;inc\CANlib.h: 667: tamp = mask & 0x000000FF;
 11073  003E56  0100               	movlb	0	; () banked
 11074  003E58  5177               	movf	CANSetMask@mask& (0+255),w,b
 11075  003E5A  0100               	movlb	0	; () banked
 11076  003E5C  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11077  003E5E  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 11078  003E60  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 11079  003E62  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 11080                           
 11081                           ; BSR set to: 0
 11082                           ;inc\CANlib.h: 668: RXM0EIDL = (unsigned char) tamp;
 11083  003E64  C081  FF1B         	movff	CANSetMask@tamp,3867	;volatile
 11084                           
 11085                           ; BSR set to: 0
 11086                           ;inc\CANlib.h: 670: tamp = mask & 0x0000FF00;
 11087  003E68  0E00               	movlw	0
 11088  003E6A  0100               	movlb	0	; () banked
 11089  003E6C  1577               	andwf	CANSetMask@mask& (0+255),w,b
 11090  003E6E  0100               	movlb	0	; () banked
 11091  003E70  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11092  003E72  0EFF               	movlw	255
 11093  003E74  0100               	movlb	0	; () banked
 11094  003E76  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 11095  003E78  0100               	movlb	0	; () banked
 11096  003E7A  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 11097  003E7C  0E00               	movlw	0
 11098  003E7E  0100               	movlb	0	; () banked
 11099  003E80  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 11100  003E82  0100               	movlb	0	; () banked
 11101  003E84  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 11102  003E86  0E00               	movlw	0
 11103  003E88  0100               	movlb	0	; () banked
 11104  003E8A  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 11105  003E8C  0100               	movlb	0	; () banked
 11106  003E8E  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;inc\CANlib.h: 671: tamp = tamp >> 8;
 11110  003E90  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 11111  003E94  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 11112  003E98  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 11113  003E9C  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 11114  003EA0  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 11115  003EA4  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 11116  003EA8  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 11117  003EAC  0100               	movlb	0	; () banked
 11118  003EAE  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 11119  003EB0  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 11120  003EB4  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 11121  003EB8  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 11122  003EBC  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 11123                           
 11124                           ; BSR set to: 0
 11125                           ;inc\CANlib.h: 672: RXM0EIDH = (unsigned char) tamp;
 11126  003EC0  C081  FF1A         	movff	CANSetMask@tamp,3866	;volatile
 11127                           
 11128                           ; BSR set to: 0
 11129                           ;inc\CANlib.h: 674: if (mask & 0x00010000)
 11130  003EC4  0100               	movlb	0	; () banked
 11131  003EC6  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 11132  003EC8  D003               	goto	l430
 11133                           
 11134                           ; BSR set to: 0
 11135                           ;inc\CANlib.h: 675: RXM0SIDLbits.EID16 = 0x01;
 11136  003ECA  010F               	movlb	15	; () banked
 11137  003ECC  8119               	bsf	25,0,b	;volatile
 11138  003ECE  D002               	goto	l431
 11139  003ED0                     l430:
 11140                           
 11141                           ; BSR set to: 0
 11142                           ;inc\CANlib.h: 676: else
 11143                           ;inc\CANlib.h: 677: RXM0SIDLbits.EID16 = 0x00;
 11144  003ED0  010F               	movlb	15	; () banked
 11145  003ED2  9119               	bcf	25,0,b	;volatile
 11146  003ED4                     l431:
 11147                           
 11148                           ; BSR set to: 15
 11149                           ;inc\CANlib.h: 679: if (mask & 0x00020000)
 11150  003ED4  0100               	movlb	0	; () banked
 11151  003ED6  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 11152  003ED8  D003               	goto	l432
 11153                           
 11154                           ; BSR set to: 0
 11155                           ;inc\CANlib.h: 680: RXM0SIDLbits.EID17 = 0x01;
 11156  003EDA  010F               	movlb	15	; () banked
 11157  003EDC  8319               	bsf	25,1,b	;volatile
 11158  003EDE  D002               	goto	l433
 11159  003EE0                     l432:
 11160                           
 11161                           ; BSR set to: 0
 11162                           ;inc\CANlib.h: 681: else
 11163                           ;inc\CANlib.h: 682: RXM0SIDLbits.EID17 = 0x00;
 11164  003EE0  010F               	movlb	15	; () banked
 11165  003EE2  9319               	bcf	25,1,b	;volatile
 11166  003EE4                     l433:
 11167                           
 11168                           ; BSR set to: 15
 11169                           ;inc\CANlib.h: 684: if (mask & 0x00040000)
 11170  003EE4  0100               	movlb	0	; () banked
 11171  003EE6  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 11172  003EE8  D003               	goto	l434
 11173                           
 11174                           ; BSR set to: 0
 11175                           ;inc\CANlib.h: 685: RXM0SIDLbits.SID0 = 0x01;
 11176  003EEA  010F               	movlb	15	; () banked
 11177  003EEC  8B19               	bsf	25,5,b	;volatile
 11178  003EEE  D002               	goto	l435
 11179  003EF0                     l434:
 11180                           
 11181                           ; BSR set to: 0
 11182                           ;inc\CANlib.h: 686: else
 11183                           ;inc\CANlib.h: 687: RXM0SIDLbits.SID0 = 0x00;
 11184  003EF0  010F               	movlb	15	; () banked
 11185  003EF2  9B19               	bcf	25,5,b	;volatile
 11186  003EF4                     l435:
 11187                           
 11188                           ; BSR set to: 15
 11189                           ;inc\CANlib.h: 689: if (mask & 0x00080000)
 11190  003EF4  0100               	movlb	0	; () banked
 11191  003EF6  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 11192  003EF8  D003               	goto	l436
 11193                           
 11194                           ; BSR set to: 0
 11195                           ;inc\CANlib.h: 690: RXM0SIDLbits.SID1 = 0x01;
 11196  003EFA  010F               	movlb	15	; () banked
 11197  003EFC  8D19               	bsf	25,6,b	;volatile
 11198  003EFE  D002               	goto	l437
 11199  003F00                     l436:
 11200                           
 11201                           ; BSR set to: 0
 11202                           ;inc\CANlib.h: 691: else
 11203                           ;inc\CANlib.h: 692: RXM0SIDLbits.SID1 = 0x00;
 11204  003F00  010F               	movlb	15	; () banked
 11205  003F02  9D19               	bcf	25,6,b	;volatile
 11206  003F04                     l437:
 11207                           
 11208                           ; BSR set to: 15
 11209                           ;inc\CANlib.h: 694: if (mask & 0x00100000)
 11210  003F04  0100               	movlb	0	; () banked
 11211  003F06  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 11212  003F08  D003               	goto	l438
 11213                           
 11214                           ; BSR set to: 0
 11215                           ;inc\CANlib.h: 695: RXM0SIDLbits.SID2 = 0x01 ;
 11216  003F0A  010F               	movlb	15	; () banked
 11217  003F0C  8F19               	bsf	25,7,b	;volatile
 11218  003F0E  D003               	goto	l4615
 11219  003F10                     l438:
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;inc\CANlib.h: 696: else
 11223                           ;inc\CANlib.h: 697: RXM0SIDLbits.SID2 = 0x00 ;
 11224  003F10  010F               	movlb	15	; () banked
 11225  003F12  9F19               	bcf	25,7,b	;volatile
 11226  003F14  D000               	goto	l4615
 11227  003F16                     l4615:
 11228                           
 11229                           ; BSR set to: 15
 11230                           ;inc\CANlib.h: 699: tamp = (mask >> 21);
 11231  003F16  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 11232  003F1A  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 11233  003F1E  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 11234  003F22  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 11235  003F26  0E16               	movlw	22
 11236  003F28  D006               	goto	u5060
 11237  003F2A                     u5065:
 11238  003F2A  0100               	movlb	0	; () banked
 11239  003F2C  90D8               	bcf	status,0,c
 11240  003F2E  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 11241  003F30  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 11242  003F32  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 11243  003F34  337C               	rrcf	??_CANSetMask& (0+255),f,b
 11244  003F36                     u5060:
 11245  003F36  2EE8               	decfsz	wreg,f,c
 11246  003F38  D7F8               	goto	u5065
 11247  003F3A  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 11248  003F3E  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 11249  003F42  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 11250  003F46  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 11251                           
 11252                           ; BSR set to: 0
 11253                           ;inc\CANlib.h: 700: tamp = tamp & 0x000000FF;
 11254  003F4A  0100               	movlb	0	; () banked
 11255  003F4C  5181               	movf	CANSetMask@tamp& (0+255),w,b
 11256  003F4E  0100               	movlb	0	; () banked
 11257  003F50  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11258  003F52  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 11259  003F54  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 11260  003F56  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 11261                           
 11262                           ; BSR set to: 0
 11263                           ;inc\CANlib.h: 701: RXM0SIDH = (unsigned char) tamp;
 11264  003F58  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 11265  003F5C  D000               	goto	l4621
 11266  003F5E                     l4621:
 11267                           
 11268                           ; BSR set to: 0
 11269                           ;inc\CANlib.h: 702: }
 11270                           ;inc\CANlib.h: 704: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_XTD_MSG))
 11271  003F5E  0E02               	movlw	2
 11272  003F60  0100               	movlb	0	; () banked
 11273  003F62  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 11274  003F64  A4D8               	btfss	status,2,c
 11275  003F66  0012               	return	
 11276                           
 11277                           ; BSR set to: 0
 11278  003F68  0EF7               	movlw	247
 11279  003F6A  0100               	movlb	0	; () banked
 11280  003F6C  197B               	xorwf	CANSetMask@type& (0+255),w,b
 11281  003F6E  A4D8               	btfss	status,2,c
 11282  003F70  0012               	return	
 11283                           
 11284                           ; BSR set to: 0
 11285                           ;inc\CANlib.h: 705: {
 11286                           ;inc\CANlib.h: 706: tamp = mask & 0x000000FF;
 11287  003F72  0100               	movlb	0	; () banked
 11288  003F74  5177               	movf	CANSetMask@mask& (0+255),w,b
 11289  003F76  0100               	movlb	0	; () banked
 11290  003F78  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11291  003F7A  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 11292  003F7C  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 11293  003F7E  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 11294                           
 11295                           ; BSR set to: 0
 11296                           ;inc\CANlib.h: 707: RXM1EIDL = (unsigned char) tamp;
 11297  003F80  C081  FF1F         	movff	CANSetMask@tamp,3871	;volatile
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;inc\CANlib.h: 709: tamp = mask & 0x0000FF00;
 11301  003F84  0E00               	movlw	0
 11302  003F86  0100               	movlb	0	; () banked
 11303  003F88  1577               	andwf	CANSetMask@mask& (0+255),w,b
 11304  003F8A  0100               	movlb	0	; () banked
 11305  003F8C  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11306  003F8E  0EFF               	movlw	255
 11307  003F90  0100               	movlb	0	; () banked
 11308  003F92  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 11309  003F94  0100               	movlb	0	; () banked
 11310  003F96  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 11311  003F98  0E00               	movlw	0
 11312  003F9A  0100               	movlb	0	; () banked
 11313  003F9C  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 11314  003F9E  0100               	movlb	0	; () banked
 11315  003FA0  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 11316  003FA2  0E00               	movlw	0
 11317  003FA4  0100               	movlb	0	; () banked
 11318  003FA6  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 11319  003FA8  0100               	movlb	0	; () banked
 11320  003FAA  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 11321                           
 11322                           ; BSR set to: 0
 11323                           ;inc\CANlib.h: 710: tamp = tamp >> 8;
 11324  003FAC  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 11325  003FB0  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 11326  003FB4  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 11327  003FB8  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 11328  003FBC  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 11329  003FC0  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 11330  003FC4  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 11331  003FC8  0100               	movlb	0	; () banked
 11332  003FCA  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 11333  003FCC  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 11334  003FD0  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 11335  003FD4  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 11336  003FD8  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;inc\CANlib.h: 711: RXM1EIDH = (unsigned char) tamp;
 11340  003FDC  C081  FF1E         	movff	CANSetMask@tamp,3870	;volatile
 11341                           
 11342                           ; BSR set to: 0
 11343                           ;inc\CANlib.h: 713: if (mask & 0x00010000)
 11344  003FE0  0100               	movlb	0	; () banked
 11345  003FE2  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 11346  003FE4  D003               	goto	l441
 11347                           
 11348                           ; BSR set to: 0
 11349                           ;inc\CANlib.h: 714: RXM1SIDLbits.EID16 = 0x01;
 11350  003FE6  010F               	movlb	15	; () banked
 11351  003FE8  811D               	bsf	29,0,b	;volatile
 11352  003FEA  D002               	goto	l442
 11353  003FEC                     l441:
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;inc\CANlib.h: 715: else
 11357                           ;inc\CANlib.h: 716: RXM1SIDLbits.EID16 = 0x00;
 11358  003FEC  010F               	movlb	15	; () banked
 11359  003FEE  911D               	bcf	29,0,b	;volatile
 11360  003FF0                     l442:
 11361                           
 11362                           ; BSR set to: 15
 11363                           ;inc\CANlib.h: 718: if (mask & 0x00020000)
 11364  003FF0  0100               	movlb	0	; () banked
 11365  003FF2  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 11366  003FF4  D003               	goto	l443
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;inc\CANlib.h: 719: RXM1SIDLbits.EID17 = 0x01;
 11370  003FF6  010F               	movlb	15	; () banked
 11371  003FF8  831D               	bsf	29,1,b	;volatile
 11372  003FFA  D002               	goto	l444
 11373  003FFC                     l443:
 11374                           
 11375                           ; BSR set to: 0
 11376                           ;inc\CANlib.h: 720: else
 11377                           ;inc\CANlib.h: 721: RXM1SIDLbits.EID17 = 0x00;
 11378  003FFC  010F               	movlb	15	; () banked
 11379  003FFE  931D               	bcf	29,1,b	;volatile
 11380  004000                     l444:
 11381                           
 11382                           ; BSR set to: 15
 11383                           ;inc\CANlib.h: 723: if (mask & 0x00040000)
 11384  004000  0100               	movlb	0	; () banked
 11385  004002  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 11386  004004  D003               	goto	l445
 11387                           
 11388                           ; BSR set to: 0
 11389                           ;inc\CANlib.h: 724: RXM1SIDLbits.SID0 = 0x01;
 11390  004006  010F               	movlb	15	; () banked
 11391  004008  8B1D               	bsf	29,5,b	;volatile
 11392  00400A  D002               	goto	l446
 11393  00400C                     l445:
 11394                           
 11395                           ; BSR set to: 0
 11396                           ;inc\CANlib.h: 725: else
 11397                           ;inc\CANlib.h: 726: RXM1SIDLbits.SID0 = 0x00;
 11398  00400C  010F               	movlb	15	; () banked
 11399  00400E  9B1D               	bcf	29,5,b	;volatile
 11400  004010                     l446:
 11401                           
 11402                           ; BSR set to: 15
 11403                           ;inc\CANlib.h: 728: if (mask & 0x00080000)
 11404  004010  0100               	movlb	0	; () banked
 11405  004012  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 11406  004014  D003               	goto	l447
 11407                           
 11408                           ; BSR set to: 0
 11409                           ;inc\CANlib.h: 729: RXM1SIDLbits.SID1 = 0x01;
 11410  004016  010F               	movlb	15	; () banked
 11411  004018  8D1D               	bsf	29,6,b	;volatile
 11412  00401A  D002               	goto	l448
 11413  00401C                     l447:
 11414                           
 11415                           ; BSR set to: 0
 11416                           ;inc\CANlib.h: 730: else
 11417                           ;inc\CANlib.h: 731: RXM1SIDLbits.SID1 = 0x00;
 11418  00401C  010F               	movlb	15	; () banked
 11419  00401E  9D1D               	bcf	29,6,b	;volatile
 11420  004020                     l448:
 11421                           
 11422                           ; BSR set to: 15
 11423                           ;inc\CANlib.h: 733: if (mask & 0x00100000)
 11424  004020  0100               	movlb	0	; () banked
 11425  004022  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 11426  004024  D003               	goto	l449
 11427                           
 11428                           ; BSR set to: 0
 11429                           ;inc\CANlib.h: 734: RXM1SIDLbits.SID2 = 0x01 ;
 11430  004026  010F               	movlb	15	; () banked
 11431  004028  8F1D               	bsf	29,7,b	;volatile
 11432  00402A  D003               	goto	l4647
 11433  00402C                     l449:
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;inc\CANlib.h: 735: else
 11437                           ;inc\CANlib.h: 736: RXM1SIDLbits.SID2 = 0x00 ;
 11438  00402C  010F               	movlb	15	; () banked
 11439  00402E  9F1D               	bcf	29,7,b	;volatile
 11440  004030  D000               	goto	l4647
 11441  004032                     l4647:
 11442                           
 11443                           ; BSR set to: 15
 11444                           ;inc\CANlib.h: 738: tamp = (mask >> 21);
 11445  004032  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 11446  004036  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 11447  00403A  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 11448  00403E  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 11449  004042  0E16               	movlw	22
 11450  004044  D006               	goto	u5140
 11451  004046                     u5145:
 11452  004046  0100               	movlb	0	; () banked
 11453  004048  90D8               	bcf	status,0,c
 11454  00404A  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 11455  00404C  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 11456  00404E  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 11457  004050  337C               	rrcf	??_CANSetMask& (0+255),f,b
 11458  004052                     u5140:
 11459  004052  2EE8               	decfsz	wreg,f,c
 11460  004054  D7F8               	goto	u5145
 11461  004056  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 11462  00405A  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 11463  00405E  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 11464  004062  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 11465                           
 11466                           ; BSR set to: 0
 11467                           ;inc\CANlib.h: 739: tamp = tamp & 0x000000FF;
 11468  004066  0100               	movlb	0	; () banked
 11469  004068  5181               	movf	CANSetMask@tamp& (0+255),w,b
 11470  00406A  0100               	movlb	0	; () banked
 11471  00406C  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11472  00406E  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 11473  004070  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 11474  004072  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 11475                           
 11476                           ; BSR set to: 0
 11477                           ;inc\CANlib.h: 740: RXM1SIDH = (unsigned char) tamp;
 11478  004074  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 11479  004078  0012               	return	
 11480                           
 11481                           ; BSR set to: 0
 11482                           
 11483                           ; BSR set to: 0
 11484  00407A  0012               	return		;funcret
 11485  00407C                     __end_of_CANSetMask:
 11486                           	opt stack 0
 11487                           tblptru	equ	0xFF8
 11488                           tblptrh	equ	0xFF7
 11489                           tblptrl	equ	0xFF6
 11490                           tablat	equ	0xFF5
 11491                           prodh	equ	0xFF4
 11492                           prodl	equ	0xFF3
 11493                           intcon	equ	0xFF2
 11494                           intcon2	equ	0xFF1
 11495                           postinc0	equ	0xFEE
 11496                           wreg	equ	0xFE8
 11497                           indf2	equ	0xFDF
 11498                           postinc2	equ	0xFDE
 11499                           postdec2	equ	0xFDD
 11500                           fsr2h	equ	0xFDA
 11501                           fsr2l	equ	0xFD9
 11502                           status	equ	0xFD8
 11503                           
 11504 ;; *************** function _CANSetFilter *****************
 11505 ;; Defined at:
 11506 ;;		line 748 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 11507 ;; Parameters:    Size  Location     Type
 11508 ;;  numBuffer       1    wreg     enum E16391
 11509 ;;  filter          4   23[BANK0 ] unsigned long 
 11510 ;;  type            1   27[BANK0 ] enum E16354
 11511 ;; Auto vars:     Size  Location     Type
 11512 ;;  numBuffer       1   32[BANK0 ] enum E16391
 11513 ;;  tamp            4   33[BANK0 ] unsigned long 
 11514 ;; Return value:  Size  Location     Type
 11515 ;;		None               void
 11516 ;; Registers used:
 11517 ;;		wreg, status,2, status,0
 11518 ;; Tracked objects:
 11519 ;;		On entry : 0/0
 11520 ;;		On exit  : 0/0
 11521 ;;		Unchanged: 0/0
 11522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11523 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11524 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11525 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11526 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11527 ;;Total ram usage:       14 bytes
 11528 ;; Hardware stack levels used:    1
 11529 ;; Hardware stack levels required when called:    5
 11530 ;; This function calls:
 11531 ;;		Nothing
 11532 ;; This function is called by:
 11533 ;;		_CANInitialize
 11534 ;; This function uses a non-reentrant model
 11535 ;;
 11536                           
 11537                           	psect	text35
 11538  001888                     __ptext35:
 11539                           	opt stack 0
 11540  001888                     _CANSetFilter:
 11541                           	opt stack 23
 11542                           
 11543                           ; BSR set to: 0
 11544                           ;incstack = 0
 11545                           ;CANSetFilter@numBuffer stored from wreg
 11546  001888  0100               	movlb	0	; () banked
 11547  00188A  6F80               	movwf	CANSetFilter@numBuffer& (0+255),b
 11548                           
 11549                           ; BSR set to: 0
 11550                           ;inc\CANlib.h: 750: unsigned long tamp;
 11551                           ;inc\CANlib.h: 752: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_STD_MSG))
 11552  00188C  0100               	movlb	0	; () banked
 11553  00188E  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 11554  001890  0100               	movlb	0	; () banked
 11555  001892  A4D8               	btfss	status,2,c
 11556  001894  D059               	goto	l4671
 11557                           
 11558                           ; BSR set to: 0
 11559  001896  0100               	movlb	0	; () banked
 11560  001898  297B               	incf	CANSetFilter@type& (0+255),w,b
 11561  00189A  A4D8               	btfss	status,2,c
 11562  00189C  D055               	goto	l4671
 11563                           
 11564                           ; BSR set to: 0
 11565                           ;inc\CANlib.h: 753: {
 11566                           ;inc\CANlib.h: 754: RXF0SIDLbits.EXIDEN = 0x00;
 11567  00189E  010F               	movlb	15	; () banked
 11568  0018A0  9701               	bcf	1,3,b	;volatile
 11569                           
 11570                           ; BSR set to: 15
 11571                           ;inc\CANlib.h: 756: tamp = (filter >> 3);
 11572  0018A2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11573  0018A6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11574  0018AA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11575  0018AE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11576  0018B2  0E04               	movlw	4
 11577  0018B4  D006               	goto	u5170
 11578  0018B6                     u5175:
 11579  0018B6  0100               	movlb	0	; () banked
 11580  0018B8  90D8               	bcf	status,0,c
 11581  0018BA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11582  0018BC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11583  0018BE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11584  0018C0  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11585  0018C2                     u5170:
 11586  0018C2  2EE8               	decfsz	wreg,f,c
 11587  0018C4  D7F8               	goto	u5175
 11588  0018C6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11589  0018CA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11590  0018CE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11591  0018D2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11592                           
 11593                           ; BSR set to: 0
 11594                           ;inc\CANlib.h: 757: tamp = tamp & 0x000000FF;
 11595  0018D6  0100               	movlb	0	; () banked
 11596  0018D8  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11597  0018DA  0100               	movlb	0	; () banked
 11598  0018DC  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11599  0018DE  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11600  0018E0  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11601  0018E2  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11602                           
 11603                           ; BSR set to: 0
 11604                           ;inc\CANlib.h: 758: RXF0SIDH = (unsigned char) tamp;
 11605  0018E4  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;inc\CANlib.h: 760: tamp = filter & 0x00000007;
 11609  0018E8  0E07               	movlw	7
 11610  0018EA  0100               	movlb	0	; () banked
 11611  0018EC  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11612  0018EE  0100               	movlb	0	; () banked
 11613  0018F0  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11614  0018F2  0E00               	movlw	0
 11615  0018F4  0100               	movlb	0	; () banked
 11616  0018F6  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11617  0018F8  0100               	movlb	0	; () banked
 11618  0018FA  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11619  0018FC  0E00               	movlw	0
 11620  0018FE  0100               	movlb	0	; () banked
 11621  001900  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11622  001902  0100               	movlb	0	; () banked
 11623  001904  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11624  001906  0E00               	movlw	0
 11625  001908  0100               	movlb	0	; () banked
 11626  00190A  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11627  00190C  0100               	movlb	0	; () banked
 11628  00190E  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11629                           
 11630                           ; BSR set to: 0
 11631                           ;inc\CANlib.h: 761: tamp = tamp << 5;
 11632  001910  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11633  001914  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11634  001918  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11635  00191C  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11636  001920  0E05               	movlw	5
 11637  001922                     u5185:
 11638  001922  90D8               	bcf	status,0,c
 11639  001924  0100               	movlb	0	; () banked
 11640  001926  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11641  001928  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11642  00192A  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11643  00192C  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11644  00192E  2EE8               	decfsz	wreg,f,c
 11645  001930  D7F8               	goto	u5185
 11646  001932  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11647  001936  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11648  00193A  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11649  00193E  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11650                           
 11651                           ; BSR set to: 0
 11652                           ;inc\CANlib.h: 762: RXF0SIDL = (unsigned char) tamp;
 11653  001942  C081  FF01         	movff	CANSetFilter@tamp,3841	;volatile
 11654  001946  D000               	goto	l4671
 11655  001948                     l4671:
 11656                           
 11657                           ; BSR set to: 0
 11658                           ;inc\CANlib.h: 763: }
 11659                           ;inc\CANlib.h: 765: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_STD_MSG))
 11660  001948  0100               	movlb	0	; () banked
 11661  00194A  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 11662  00194C  A4D8               	btfss	status,2,c
 11663  00194E  D059               	goto	l4689
 11664                           
 11665                           ; BSR set to: 0
 11666  001950  0100               	movlb	0	; () banked
 11667  001952  297B               	incf	CANSetFilter@type& (0+255),w,b
 11668  001954  A4D8               	btfss	status,2,c
 11669  001956  D055               	goto	l4689
 11670                           
 11671                           ; BSR set to: 0
 11672                           ;inc\CANlib.h: 766: {
 11673                           ;inc\CANlib.h: 767: RXF1SIDLbits.EXIDEN = 0x00;
 11674  001958  010F               	movlb	15	; () banked
 11675  00195A  9705               	bcf	5,3,b	;volatile
 11676                           
 11677                           ; BSR set to: 15
 11678                           ;inc\CANlib.h: 769: tamp = (filter >> 3);
 11679  00195C  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11680  001960  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11681  001964  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11682  001968  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11683  00196C  0E04               	movlw	4
 11684  00196E  D006               	goto	u5210
 11685  001970                     u5215:
 11686  001970  0100               	movlb	0	; () banked
 11687  001972  90D8               	bcf	status,0,c
 11688  001974  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11689  001976  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11690  001978  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11691  00197A  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11692  00197C                     u5210:
 11693  00197C  2EE8               	decfsz	wreg,f,c
 11694  00197E  D7F8               	goto	u5215
 11695  001980  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11696  001984  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11697  001988  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11698  00198C  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11699                           
 11700                           ; BSR set to: 0
 11701                           ;inc\CANlib.h: 770: tamp = tamp & 0x000000FF;
 11702  001990  0100               	movlb	0	; () banked
 11703  001992  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11704  001994  0100               	movlb	0	; () banked
 11705  001996  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11706  001998  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11707  00199A  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11708  00199C  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11709                           
 11710                           ; BSR set to: 0
 11711                           ;inc\CANlib.h: 771: RXF1SIDH = (unsigned char) tamp;
 11712  00199E  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 11713                           
 11714                           ; BSR set to: 0
 11715                           ;inc\CANlib.h: 773: tamp = filter & 0x00000007;
 11716  0019A2  0E07               	movlw	7
 11717  0019A4  0100               	movlb	0	; () banked
 11718  0019A6  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11719  0019A8  0100               	movlb	0	; () banked
 11720  0019AA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11721  0019AC  0E00               	movlw	0
 11722  0019AE  0100               	movlb	0	; () banked
 11723  0019B0  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11724  0019B2  0100               	movlb	0	; () banked
 11725  0019B4  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11726  0019B6  0E00               	movlw	0
 11727  0019B8  0100               	movlb	0	; () banked
 11728  0019BA  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11729  0019BC  0100               	movlb	0	; () banked
 11730  0019BE  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11731  0019C0  0E00               	movlw	0
 11732  0019C2  0100               	movlb	0	; () banked
 11733  0019C4  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11734  0019C6  0100               	movlb	0	; () banked
 11735  0019C8  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11736                           
 11737                           ; BSR set to: 0
 11738                           ;inc\CANlib.h: 774: tamp = tamp << 5;
 11739  0019CA  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11740  0019CE  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11741  0019D2  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11742  0019D6  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11743  0019DA  0E05               	movlw	5
 11744  0019DC                     u5225:
 11745  0019DC  90D8               	bcf	status,0,c
 11746  0019DE  0100               	movlb	0	; () banked
 11747  0019E0  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11748  0019E2  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11749  0019E4  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11750  0019E6  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11751  0019E8  2EE8               	decfsz	wreg,f,c
 11752  0019EA  D7F8               	goto	u5225
 11753  0019EC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11754  0019F0  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11755  0019F4  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11756  0019F8  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11757                           
 11758                           ; BSR set to: 0
 11759                           ;inc\CANlib.h: 775: RXF1SIDL = (unsigned char) tamp;
 11760  0019FC  C081  FF05         	movff	CANSetFilter@tamp,3845	;volatile
 11761  001A00  D000               	goto	l4689
 11762  001A02                     l4689:
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;inc\CANlib.h: 776: }
 11766                           ;inc\CANlib.h: 778: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_STD_MSG))
 11767  001A02  0E02               	movlw	2
 11768  001A04  0100               	movlb	0	; () banked
 11769  001A06  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11770  001A08  A4D8               	btfss	status,2,c
 11771  001A0A  D059               	goto	l4707
 11772                           
 11773                           ; BSR set to: 0
 11774  001A0C  0100               	movlb	0	; () banked
 11775  001A0E  297B               	incf	CANSetFilter@type& (0+255),w,b
 11776  001A10  A4D8               	btfss	status,2,c
 11777  001A12  D055               	goto	l4707
 11778                           
 11779                           ; BSR set to: 0
 11780                           ;inc\CANlib.h: 779: {
 11781                           ;inc\CANlib.h: 780: RXF2SIDLbits.EXIDEN = 0x00;
 11782  001A14  010F               	movlb	15	; () banked
 11783  001A16  9709               	bcf	9,3,b	;volatile
 11784                           
 11785                           ; BSR set to: 15
 11786                           ;inc\CANlib.h: 782: tamp = (filter >> 3);
 11787  001A18  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11788  001A1C  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11789  001A20  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11790  001A24  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11791  001A28  0E04               	movlw	4
 11792  001A2A  D006               	goto	u5250
 11793  001A2C                     u5255:
 11794  001A2C  0100               	movlb	0	; () banked
 11795  001A2E  90D8               	bcf	status,0,c
 11796  001A30  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11797  001A32  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11798  001A34  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11799  001A36  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11800  001A38                     u5250:
 11801  001A38  2EE8               	decfsz	wreg,f,c
 11802  001A3A  D7F8               	goto	u5255
 11803  001A3C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11804  001A40  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11805  001A44  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11806  001A48  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11807                           
 11808                           ; BSR set to: 0
 11809                           ;inc\CANlib.h: 783: tamp = tamp & 0x000000FF;
 11810  001A4C  0100               	movlb	0	; () banked
 11811  001A4E  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11812  001A50  0100               	movlb	0	; () banked
 11813  001A52  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11814  001A54  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11815  001A56  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11816  001A58  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;inc\CANlib.h: 784: RXF2SIDH = (unsigned char) tamp;
 11820  001A5A  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 11821                           
 11822                           ; BSR set to: 0
 11823                           ;inc\CANlib.h: 786: tamp = filter & 0x00000007;
 11824  001A5E  0E07               	movlw	7
 11825  001A60  0100               	movlb	0	; () banked
 11826  001A62  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11827  001A64  0100               	movlb	0	; () banked
 11828  001A66  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11829  001A68  0E00               	movlw	0
 11830  001A6A  0100               	movlb	0	; () banked
 11831  001A6C  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11832  001A6E  0100               	movlb	0	; () banked
 11833  001A70  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11834  001A72  0E00               	movlw	0
 11835  001A74  0100               	movlb	0	; () banked
 11836  001A76  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11837  001A78  0100               	movlb	0	; () banked
 11838  001A7A  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11839  001A7C  0E00               	movlw	0
 11840  001A7E  0100               	movlb	0	; () banked
 11841  001A80  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11842  001A82  0100               	movlb	0	; () banked
 11843  001A84  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;inc\CANlib.h: 787: tamp = tamp << 5;
 11847  001A86  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11848  001A8A  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11849  001A8E  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11850  001A92  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11851  001A96  0E05               	movlw	5
 11852  001A98                     u5265:
 11853  001A98  90D8               	bcf	status,0,c
 11854  001A9A  0100               	movlb	0	; () banked
 11855  001A9C  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11856  001A9E  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11857  001AA0  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11858  001AA2  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11859  001AA4  2EE8               	decfsz	wreg,f,c
 11860  001AA6  D7F8               	goto	u5265
 11861  001AA8  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11862  001AAC  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11863  001AB0  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11864  001AB4  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11865                           
 11866                           ; BSR set to: 0
 11867                           ;inc\CANlib.h: 788: RXF2SIDL = (unsigned char) tamp;
 11868  001AB8  C081  FF09         	movff	CANSetFilter@tamp,3849	;volatile
 11869  001ABC  D000               	goto	l4707
 11870  001ABE                     l4707:
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;inc\CANlib.h: 789: }
 11874                           ;inc\CANlib.h: 791: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_STD_MSG))
 11875  001ABE  0E03               	movlw	3
 11876  001AC0  0100               	movlb	0	; () banked
 11877  001AC2  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11878  001AC4  A4D8               	btfss	status,2,c
 11879  001AC6  D059               	goto	l4725
 11880                           
 11881                           ; BSR set to: 0
 11882  001AC8  0100               	movlb	0	; () banked
 11883  001ACA  297B               	incf	CANSetFilter@type& (0+255),w,b
 11884  001ACC  A4D8               	btfss	status,2,c
 11885  001ACE  D055               	goto	l4725
 11886                           
 11887                           ; BSR set to: 0
 11888                           ;inc\CANlib.h: 792: {
 11889                           ;inc\CANlib.h: 793: RXF3SIDLbits.EXIDEN = 0x00;
 11890  001AD0  010F               	movlb	15	; () banked
 11891  001AD2  970D               	bcf	13,3,b	;volatile
 11892                           
 11893                           ; BSR set to: 15
 11894                           ;inc\CANlib.h: 795: tamp = (filter >> 3);
 11895  001AD4  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11896  001AD8  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11897  001ADC  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11898  001AE0  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11899  001AE4  0E04               	movlw	4
 11900  001AE6  D006               	goto	u5290
 11901  001AE8                     u5295:
 11902  001AE8  0100               	movlb	0	; () banked
 11903  001AEA  90D8               	bcf	status,0,c
 11904  001AEC  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11905  001AEE  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11906  001AF0  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11907  001AF2  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11908  001AF4                     u5290:
 11909  001AF4  2EE8               	decfsz	wreg,f,c
 11910  001AF6  D7F8               	goto	u5295
 11911  001AF8  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11912  001AFC  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11913  001B00  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11914  001B04  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;inc\CANlib.h: 796: tamp = tamp & 0x000000FF;
 11918  001B08  0100               	movlb	0	; () banked
 11919  001B0A  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11920  001B0C  0100               	movlb	0	; () banked
 11921  001B0E  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11922  001B10  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11923  001B12  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11924  001B14  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11925                           
 11926                           ; BSR set to: 0
 11927                           ;inc\CANlib.h: 797: RXF3SIDH = (unsigned char) tamp;
 11928  001B16  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;inc\CANlib.h: 799: tamp = filter & 0x00000007;
 11932  001B1A  0E07               	movlw	7
 11933  001B1C  0100               	movlb	0	; () banked
 11934  001B1E  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11935  001B20  0100               	movlb	0	; () banked
 11936  001B22  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11937  001B24  0E00               	movlw	0
 11938  001B26  0100               	movlb	0	; () banked
 11939  001B28  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11940  001B2A  0100               	movlb	0	; () banked
 11941  001B2C  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11942  001B2E  0E00               	movlw	0
 11943  001B30  0100               	movlb	0	; () banked
 11944  001B32  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11945  001B34  0100               	movlb	0	; () banked
 11946  001B36  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11947  001B38  0E00               	movlw	0
 11948  001B3A  0100               	movlb	0	; () banked
 11949  001B3C  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11950  001B3E  0100               	movlb	0	; () banked
 11951  001B40  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;inc\CANlib.h: 800: tamp = tamp << 5;
 11955  001B42  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11956  001B46  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11957  001B4A  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11958  001B4E  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11959  001B52  0E05               	movlw	5
 11960  001B54                     u5305:
 11961  001B54  90D8               	bcf	status,0,c
 11962  001B56  0100               	movlb	0	; () banked
 11963  001B58  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11964  001B5A  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11965  001B5C  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11966  001B5E  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11967  001B60  2EE8               	decfsz	wreg,f,c
 11968  001B62  D7F8               	goto	u5305
 11969  001B64  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11970  001B68  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11971  001B6C  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11972  001B70  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11973                           
 11974                           ; BSR set to: 0
 11975                           ;inc\CANlib.h: 801: RXF3SIDL = (unsigned char) tamp;
 11976  001B74  C081  FF0D         	movff	CANSetFilter@tamp,3853	;volatile
 11977  001B78  D000               	goto	l4725
 11978  001B7A                     l4725:
 11979                           
 11980                           ; BSR set to: 0
 11981                           ;inc\CANlib.h: 802: }
 11982                           ;inc\CANlib.h: 804: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_STD_MSG))
 11983  001B7A  0E04               	movlw	4
 11984  001B7C  0100               	movlb	0	; () banked
 11985  001B7E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11986  001B80  A4D8               	btfss	status,2,c
 11987  001B82  D059               	goto	l4743
 11988                           
 11989                           ; BSR set to: 0
 11990  001B84  0100               	movlb	0	; () banked
 11991  001B86  297B               	incf	CANSetFilter@type& (0+255),w,b
 11992  001B88  A4D8               	btfss	status,2,c
 11993  001B8A  D055               	goto	l4743
 11994                           
 11995                           ; BSR set to: 0
 11996                           ;inc\CANlib.h: 805: {
 11997                           ;inc\CANlib.h: 806: RXF4SIDLbits.EXIDEN = 0x00;
 11998  001B8C  010F               	movlb	15	; () banked
 11999  001B8E  9711               	bcf	17,3,b	;volatile
 12000                           
 12001                           ; BSR set to: 15
 12002                           ;inc\CANlib.h: 808: tamp = (filter >> 3);
 12003  001B90  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12004  001B94  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12005  001B98  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12006  001B9C  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12007  001BA0  0E04               	movlw	4
 12008  001BA2  D006               	goto	u5330
 12009  001BA4                     u5335:
 12010  001BA4  0100               	movlb	0	; () banked
 12011  001BA6  90D8               	bcf	status,0,c
 12012  001BA8  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12013  001BAA  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12014  001BAC  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12015  001BAE  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12016  001BB0                     u5330:
 12017  001BB0  2EE8               	decfsz	wreg,f,c
 12018  001BB2  D7F8               	goto	u5335
 12019  001BB4  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12020  001BB8  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12021  001BBC  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12022  001BC0  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12023                           
 12024                           ; BSR set to: 0
 12025                           ;inc\CANlib.h: 809: tamp = tamp & 0x000000FF;
 12026  001BC4  0100               	movlb	0	; () banked
 12027  001BC6  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12028  001BC8  0100               	movlb	0	; () banked
 12029  001BCA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12030  001BCC  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12031  001BCE  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12032  001BD0  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;inc\CANlib.h: 810: RXF4SIDH = (unsigned char) tamp;
 12036  001BD2  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;inc\CANlib.h: 812: tamp = filter & 0x00000007;
 12040  001BD6  0E07               	movlw	7
 12041  001BD8  0100               	movlb	0	; () banked
 12042  001BDA  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12043  001BDC  0100               	movlb	0	; () banked
 12044  001BDE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12045  001BE0  0E00               	movlw	0
 12046  001BE2  0100               	movlb	0	; () banked
 12047  001BE4  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12048  001BE6  0100               	movlb	0	; () banked
 12049  001BE8  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12050  001BEA  0E00               	movlw	0
 12051  001BEC  0100               	movlb	0	; () banked
 12052  001BEE  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12053  001BF0  0100               	movlb	0	; () banked
 12054  001BF2  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12055  001BF4  0E00               	movlw	0
 12056  001BF6  0100               	movlb	0	; () banked
 12057  001BF8  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12058  001BFA  0100               	movlb	0	; () banked
 12059  001BFC  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12060                           
 12061                           ; BSR set to: 0
 12062                           ;inc\CANlib.h: 813: tamp = tamp << 5;
 12063  001BFE  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12064  001C02  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12065  001C06  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12066  001C0A  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12067  001C0E  0E05               	movlw	5
 12068  001C10                     u5345:
 12069  001C10  90D8               	bcf	status,0,c
 12070  001C12  0100               	movlb	0	; () banked
 12071  001C14  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 12072  001C16  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 12073  001C18  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 12074  001C1A  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 12075  001C1C  2EE8               	decfsz	wreg,f,c
 12076  001C1E  D7F8               	goto	u5345
 12077  001C20  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12078  001C24  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12079  001C28  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12080  001C2C  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;inc\CANlib.h: 814: RXF4SIDL = (unsigned char) tamp;
 12084  001C30  C081  FF11         	movff	CANSetFilter@tamp,3857	;volatile
 12085  001C34  D000               	goto	l4743
 12086  001C36                     l4743:
 12087                           
 12088                           ; BSR set to: 0
 12089                           ;inc\CANlib.h: 815: }
 12090                           ;inc\CANlib.h: 817: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_STD_MSG))
 12091  001C36  0E05               	movlw	5
 12092  001C38  0100               	movlb	0	; () banked
 12093  001C3A  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12094  001C3C  A4D8               	btfss	status,2,c
 12095  001C3E  D059               	goto	l4761
 12096                           
 12097                           ; BSR set to: 0
 12098  001C40  0100               	movlb	0	; () banked
 12099  001C42  297B               	incf	CANSetFilter@type& (0+255),w,b
 12100  001C44  A4D8               	btfss	status,2,c
 12101  001C46  D055               	goto	l4761
 12102                           
 12103                           ; BSR set to: 0
 12104                           ;inc\CANlib.h: 818: {
 12105                           ;inc\CANlib.h: 819: RXF5SIDLbits.EXIDEN = 0x00;
 12106  001C48  010F               	movlb	15	; () banked
 12107  001C4A  9715               	bcf	21,3,b	;volatile
 12108                           
 12109                           ; BSR set to: 15
 12110                           ;inc\CANlib.h: 821: tamp = (filter >> 3);
 12111  001C4C  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12112  001C50  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12113  001C54  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12114  001C58  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12115  001C5C  0E04               	movlw	4
 12116  001C5E  D006               	goto	u5370
 12117  001C60                     u5375:
 12118  001C60  0100               	movlb	0	; () banked
 12119  001C62  90D8               	bcf	status,0,c
 12120  001C64  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12121  001C66  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12122  001C68  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12123  001C6A  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12124  001C6C                     u5370:
 12125  001C6C  2EE8               	decfsz	wreg,f,c
 12126  001C6E  D7F8               	goto	u5375
 12127  001C70  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12128  001C74  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12129  001C78  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12130  001C7C  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;inc\CANlib.h: 822: tamp = tamp & 0x000000FF;
 12134  001C80  0100               	movlb	0	; () banked
 12135  001C82  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12136  001C84  0100               	movlb	0	; () banked
 12137  001C86  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12138  001C88  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12139  001C8A  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12140  001C8C  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12141                           
 12142                           ; BSR set to: 0
 12143                           ;inc\CANlib.h: 823: RXF5SIDH = (unsigned char) tamp;
 12144  001C8E  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 12145                           
 12146                           ; BSR set to: 0
 12147                           ;inc\CANlib.h: 825: tamp = filter & 0x00000007;
 12148  001C92  0E07               	movlw	7
 12149  001C94  0100               	movlb	0	; () banked
 12150  001C96  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12151  001C98  0100               	movlb	0	; () banked
 12152  001C9A  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12153  001C9C  0E00               	movlw	0
 12154  001C9E  0100               	movlb	0	; () banked
 12155  001CA0  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12156  001CA2  0100               	movlb	0	; () banked
 12157  001CA4  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12158  001CA6  0E00               	movlw	0
 12159  001CA8  0100               	movlb	0	; () banked
 12160  001CAA  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12161  001CAC  0100               	movlb	0	; () banked
 12162  001CAE  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12163  001CB0  0E00               	movlw	0
 12164  001CB2  0100               	movlb	0	; () banked
 12165  001CB4  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12166  001CB6  0100               	movlb	0	; () banked
 12167  001CB8  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12168                           
 12169                           ; BSR set to: 0
 12170                           ;inc\CANlib.h: 826: tamp = tamp << 5;
 12171  001CBA  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12172  001CBE  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12173  001CC2  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12174  001CC6  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12175  001CCA  0E05               	movlw	5
 12176  001CCC                     u5385:
 12177  001CCC  90D8               	bcf	status,0,c
 12178  001CCE  0100               	movlb	0	; () banked
 12179  001CD0  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 12180  001CD2  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 12181  001CD4  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 12182  001CD6  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 12183  001CD8  2EE8               	decfsz	wreg,f,c
 12184  001CDA  D7F8               	goto	u5385
 12185  001CDC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12186  001CE0  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12187  001CE4  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12188  001CE8  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12189                           
 12190                           ; BSR set to: 0
 12191                           ;inc\CANlib.h: 827: RXF5SIDL = (unsigned char) tamp;
 12192  001CEC  C081  FF15         	movff	CANSetFilter@tamp,3861	;volatile
 12193  001CF0  D000               	goto	l4761
 12194  001CF2                     l4761:
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;inc\CANlib.h: 828: }
 12198                           ;inc\CANlib.h: 831: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_XTD_MSG))
 12199  001CF2  0100               	movlb	0	; () banked
 12200  001CF4  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 12201  001CF6  0100               	movlb	0	; () banked
 12202  001CF8  A4D8               	btfss	status,2,c
 12203  001CFA  D08B               	goto	l4795
 12204                           
 12205                           ; BSR set to: 0
 12206  001CFC  0EF7               	movlw	247
 12207  001CFE  0100               	movlb	0	; () banked
 12208  001D00  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12209  001D02  A4D8               	btfss	status,2,c
 12210  001D04  D086               	goto	l4795
 12211                           
 12212                           ; BSR set to: 0
 12213                           ;inc\CANlib.h: 832: {
 12214                           ;inc\CANlib.h: 833: RXF0SIDLbits.EXIDEN = 0x01;
 12215  001D06  010F               	movlb	15	; () banked
 12216  001D08  8701               	bsf	1,3,b	;volatile
 12217                           
 12218                           ; BSR set to: 15
 12219                           ;inc\CANlib.h: 835: tamp = filter & 0x000000FF;
 12220  001D0A  0100               	movlb	0	; () banked
 12221  001D0C  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12222  001D0E  0100               	movlb	0	; () banked
 12223  001D10  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12224  001D12  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12225  001D14  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12226  001D16  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12227                           
 12228                           ; BSR set to: 0
 12229                           ;inc\CANlib.h: 836: RXF0EIDL = (unsigned char) tamp;
 12230  001D18  C081  FF03         	movff	CANSetFilter@tamp,3843	;volatile
 12231                           
 12232                           ; BSR set to: 0
 12233                           ;inc\CANlib.h: 838: tamp = filter & 0x0000FF00;
 12234  001D1C  0E00               	movlw	0
 12235  001D1E  0100               	movlb	0	; () banked
 12236  001D20  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12237  001D22  0100               	movlb	0	; () banked
 12238  001D24  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12239  001D26  0EFF               	movlw	255
 12240  001D28  0100               	movlb	0	; () banked
 12241  001D2A  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12242  001D2C  0100               	movlb	0	; () banked
 12243  001D2E  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12244  001D30  0E00               	movlw	0
 12245  001D32  0100               	movlb	0	; () banked
 12246  001D34  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12247  001D36  0100               	movlb	0	; () banked
 12248  001D38  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12249  001D3A  0E00               	movlw	0
 12250  001D3C  0100               	movlb	0	; () banked
 12251  001D3E  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12252  001D40  0100               	movlb	0	; () banked
 12253  001D42  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12254                           
 12255                           ; BSR set to: 0
 12256                           ;inc\CANlib.h: 839: tamp = tamp >> 8;
 12257  001D44  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12258  001D48  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12259  001D4C  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12260  001D50  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12261  001D54  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12262  001D58  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12263  001D5C  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12264  001D60  0100               	movlb	0	; () banked
 12265  001D62  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12266  001D64  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12267  001D68  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12268  001D6C  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12269  001D70  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12270                           
 12271                           ; BSR set to: 0
 12272                           ;inc\CANlib.h: 840: RXF0EIDH = (unsigned char) tamp;
 12273  001D74  C081  FF02         	movff	CANSetFilter@tamp,3842	;volatile
 12274                           
 12275                           ; BSR set to: 0
 12276                           ;inc\CANlib.h: 842: if (filter & 0x00010000)
 12277  001D78  0100               	movlb	0	; () banked
 12278  001D7A  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12279  001D7C  D003               	goto	l461
 12280                           
 12281                           ; BSR set to: 0
 12282                           ;inc\CANlib.h: 843: RXF0SIDLbits.EID16 = 0x01;
 12283  001D7E  010F               	movlb	15	; () banked
 12284  001D80  8101               	bsf	1,0,b	;volatile
 12285  001D82  D002               	goto	l462
 12286  001D84                     l461:
 12287                           
 12288                           ; BSR set to: 0
 12289                           ;inc\CANlib.h: 844: else
 12290                           ;inc\CANlib.h: 845: RXF0SIDLbits.EID16 = 0x00;
 12291  001D84  010F               	movlb	15	; () banked
 12292  001D86  9101               	bcf	1,0,b	;volatile
 12293  001D88                     l462:
 12294                           
 12295                           ; BSR set to: 15
 12296                           ;inc\CANlib.h: 847: if (filter & 0x00020000)
 12297  001D88  0100               	movlb	0	; () banked
 12298  001D8A  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12299  001D8C  D003               	goto	l463
 12300                           
 12301                           ; BSR set to: 0
 12302                           ;inc\CANlib.h: 848: RXF0SIDLbits.EID17 = 0x01;
 12303  001D8E  010F               	movlb	15	; () banked
 12304  001D90  8301               	bsf	1,1,b	;volatile
 12305  001D92  D002               	goto	l464
 12306  001D94                     l463:
 12307                           
 12308                           ; BSR set to: 0
 12309                           ;inc\CANlib.h: 849: else
 12310                           ;inc\CANlib.h: 850: RXF0SIDLbits.EID17 = 0x00;
 12311  001D94  010F               	movlb	15	; () banked
 12312  001D96  9301               	bcf	1,1,b	;volatile
 12313  001D98                     l464:
 12314                           
 12315                           ; BSR set to: 15
 12316                           ;inc\CANlib.h: 852: if (filter & 0x00040000)
 12317  001D98  0100               	movlb	0	; () banked
 12318  001D9A  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12319  001D9C  D003               	goto	l465
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;inc\CANlib.h: 853: RXF0SIDLbits.SID0 = 0x01;
 12323  001D9E  010F               	movlb	15	; () banked
 12324  001DA0  8B01               	bsf	1,5,b	;volatile
 12325  001DA2  D002               	goto	l466
 12326  001DA4                     l465:
 12327                           
 12328                           ; BSR set to: 0
 12329                           ;inc\CANlib.h: 854: else
 12330                           ;inc\CANlib.h: 855: RXF0SIDLbits.SID0 = 0x00;
 12331  001DA4  010F               	movlb	15	; () banked
 12332  001DA6  9B01               	bcf	1,5,b	;volatile
 12333  001DA8                     l466:
 12334                           
 12335                           ; BSR set to: 15
 12336                           ;inc\CANlib.h: 857: if (filter & 0x00080000)
 12337  001DA8  0100               	movlb	0	; () banked
 12338  001DAA  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12339  001DAC  D003               	goto	l467
 12340                           
 12341                           ; BSR set to: 0
 12342                           ;inc\CANlib.h: 858: RXF0SIDLbits.SID1 = 0x01;
 12343  001DAE  010F               	movlb	15	; () banked
 12344  001DB0  8D01               	bsf	1,6,b	;volatile
 12345  001DB2  D002               	goto	l468
 12346  001DB4                     l467:
 12347                           
 12348                           ; BSR set to: 0
 12349                           ;inc\CANlib.h: 859: else
 12350                           ;inc\CANlib.h: 860: RXF0SIDLbits.SID1 = 0x00;
 12351  001DB4  010F               	movlb	15	; () banked
 12352  001DB6  9D01               	bcf	1,6,b	;volatile
 12353  001DB8                     l468:
 12354                           
 12355                           ; BSR set to: 15
 12356                           ;inc\CANlib.h: 862: if (filter & 0x00100000)
 12357  001DB8  0100               	movlb	0	; () banked
 12358  001DBA  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12359  001DBC  D003               	goto	l469
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;inc\CANlib.h: 863: RXF0SIDLbits.SID2 = 0x01 ;
 12363  001DBE  010F               	movlb	15	; () banked
 12364  001DC0  8F01               	bsf	1,7,b	;volatile
 12365  001DC2  D003               	goto	l4789
 12366  001DC4                     l469:
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;inc\CANlib.h: 864: else
 12370                           ;inc\CANlib.h: 865: RXF0SIDLbits.SID2 = 0x00 ;
 12371  001DC4  010F               	movlb	15	; () banked
 12372  001DC6  9F01               	bcf	1,7,b	;volatile
 12373  001DC8  D000               	goto	l4789
 12374  001DCA                     l4789:
 12375                           
 12376                           ; BSR set to: 15
 12377                           ;inc\CANlib.h: 867: tamp = (filter >> 21);
 12378  001DCA  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12379  001DCE  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12380  001DD2  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12381  001DD6  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12382  001DDA  0E16               	movlw	22
 12383  001DDC  D006               	goto	u5460
 12384  001DDE                     u5465:
 12385  001DDE  0100               	movlb	0	; () banked
 12386  001DE0  90D8               	bcf	status,0,c
 12387  001DE2  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12388  001DE4  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12389  001DE6  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12390  001DE8  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12391  001DEA                     u5460:
 12392  001DEA  2EE8               	decfsz	wreg,f,c
 12393  001DEC  D7F8               	goto	u5465
 12394  001DEE  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12395  001DF2  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12396  001DF6  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12397  001DFA  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12398                           
 12399                           ; BSR set to: 0
 12400                           ;inc\CANlib.h: 868: tamp = tamp & 0x000000FF;
 12401  001DFE  0100               	movlb	0	; () banked
 12402  001E00  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12403  001E02  0100               	movlb	0	; () banked
 12404  001E04  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12405  001E06  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12406  001E08  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12407  001E0A  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12408                           
 12409                           ; BSR set to: 0
 12410                           ;inc\CANlib.h: 869: RXF0SIDH = (unsigned char) tamp;
 12411  001E0C  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 12412  001E10  D000               	goto	l4795
 12413  001E12                     l4795:
 12414                           
 12415                           ; BSR set to: 0
 12416                           ;inc\CANlib.h: 870: }
 12417                           ;inc\CANlib.h: 872: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_XTD_MSG))
 12418  001E12  0100               	movlb	0	; () banked
 12419  001E14  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 12420  001E16  A4D8               	btfss	status,2,c
 12421  001E18  D08B               	goto	l4829
 12422                           
 12423                           ; BSR set to: 0
 12424  001E1A  0EF7               	movlw	247
 12425  001E1C  0100               	movlb	0	; () banked
 12426  001E1E  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12427  001E20  A4D8               	btfss	status,2,c
 12428  001E22  D086               	goto	l4829
 12429                           
 12430                           ; BSR set to: 0
 12431                           ;inc\CANlib.h: 873: {
 12432                           ;inc\CANlib.h: 874: RXF1SIDLbits.EXIDEN = 0x01;
 12433  001E24  010F               	movlb	15	; () banked
 12434  001E26  8705               	bsf	5,3,b	;volatile
 12435                           
 12436                           ; BSR set to: 15
 12437                           ;inc\CANlib.h: 876: tamp = filter & 0x000000FF;
 12438  001E28  0100               	movlb	0	; () banked
 12439  001E2A  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12440  001E2C  0100               	movlb	0	; () banked
 12441  001E2E  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12442  001E30  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12443  001E32  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12444  001E34  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12445                           
 12446                           ; BSR set to: 0
 12447                           ;inc\CANlib.h: 877: RXF1EIDL = (unsigned char) tamp;
 12448  001E36  C081  FF07         	movff	CANSetFilter@tamp,3847	;volatile
 12449                           
 12450                           ; BSR set to: 0
 12451                           ;inc\CANlib.h: 879: tamp = filter & 0x0000FF00;
 12452  001E3A  0E00               	movlw	0
 12453  001E3C  0100               	movlb	0	; () banked
 12454  001E3E  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12455  001E40  0100               	movlb	0	; () banked
 12456  001E42  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12457  001E44  0EFF               	movlw	255
 12458  001E46  0100               	movlb	0	; () banked
 12459  001E48  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12460  001E4A  0100               	movlb	0	; () banked
 12461  001E4C  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12462  001E4E  0E00               	movlw	0
 12463  001E50  0100               	movlb	0	; () banked
 12464  001E52  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12465  001E54  0100               	movlb	0	; () banked
 12466  001E56  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12467  001E58  0E00               	movlw	0
 12468  001E5A  0100               	movlb	0	; () banked
 12469  001E5C  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12470  001E5E  0100               	movlb	0	; () banked
 12471  001E60  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12472                           
 12473                           ; BSR set to: 0
 12474                           ;inc\CANlib.h: 880: tamp = tamp >> 8;
 12475  001E62  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12476  001E66  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12477  001E6A  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12478  001E6E  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12479  001E72  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12480  001E76  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12481  001E7A  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12482  001E7E  0100               	movlb	0	; () banked
 12483  001E80  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12484  001E82  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12485  001E86  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12486  001E8A  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12487  001E8E  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12488                           
 12489                           ; BSR set to: 0
 12490                           ;inc\CANlib.h: 881: RXF1EIDH = (unsigned char) tamp;
 12491  001E92  C081  FF06         	movff	CANSetFilter@tamp,3846	;volatile
 12492                           
 12493                           ; BSR set to: 0
 12494                           ;inc\CANlib.h: 883: if (filter & 0x00010000)
 12495  001E96  0100               	movlb	0	; () banked
 12496  001E98  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12497  001E9A  D003               	goto	l472
 12498                           
 12499                           ; BSR set to: 0
 12500                           ;inc\CANlib.h: 884: RXF1SIDLbits.EID16 = 0x01;
 12501  001E9C  010F               	movlb	15	; () banked
 12502  001E9E  8105               	bsf	5,0,b	;volatile
 12503  001EA0  D002               	goto	l473
 12504  001EA2                     l472:
 12505                           
 12506                           ; BSR set to: 0
 12507                           ;inc\CANlib.h: 885: else
 12508                           ;inc\CANlib.h: 886: RXF1SIDLbits.EID16 = 0x00;
 12509  001EA2  010F               	movlb	15	; () banked
 12510  001EA4  9105               	bcf	5,0,b	;volatile
 12511  001EA6                     l473:
 12512                           
 12513                           ; BSR set to: 15
 12514                           ;inc\CANlib.h: 888: if (filter & 0x00020000)
 12515  001EA6  0100               	movlb	0	; () banked
 12516  001EA8  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12517  001EAA  D003               	goto	l474
 12518                           
 12519                           ; BSR set to: 0
 12520                           ;inc\CANlib.h: 889: RXF1SIDLbits.EID17 = 0x01;
 12521  001EAC  010F               	movlb	15	; () banked
 12522  001EAE  8305               	bsf	5,1,b	;volatile
 12523  001EB0  D002               	goto	l475
 12524  001EB2                     l474:
 12525                           
 12526                           ; BSR set to: 0
 12527                           ;inc\CANlib.h: 890: else
 12528                           ;inc\CANlib.h: 891: RXF1SIDLbits.EID17 = 0x00;
 12529  001EB2  010F               	movlb	15	; () banked
 12530  001EB4  9305               	bcf	5,1,b	;volatile
 12531  001EB6                     l475:
 12532                           
 12533                           ; BSR set to: 15
 12534                           ;inc\CANlib.h: 893: if (filter & 0x00040000)
 12535  001EB6  0100               	movlb	0	; () banked
 12536  001EB8  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12537  001EBA  D003               	goto	l476
 12538                           
 12539                           ; BSR set to: 0
 12540                           ;inc\CANlib.h: 894: RXF1SIDLbits.SID0 = 0x01;
 12541  001EBC  010F               	movlb	15	; () banked
 12542  001EBE  8B05               	bsf	5,5,b	;volatile
 12543  001EC0  D002               	goto	l477
 12544  001EC2                     l476:
 12545                           
 12546                           ; BSR set to: 0
 12547                           ;inc\CANlib.h: 895: else
 12548                           ;inc\CANlib.h: 896: RXF1SIDLbits.SID0 = 0x00;
 12549  001EC2  010F               	movlb	15	; () banked
 12550  001EC4  9B05               	bcf	5,5,b	;volatile
 12551  001EC6                     l477:
 12552                           
 12553                           ; BSR set to: 15
 12554                           ;inc\CANlib.h: 898: if (filter & 0x00080000)
 12555  001EC6  0100               	movlb	0	; () banked
 12556  001EC8  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12557  001ECA  D003               	goto	l478
 12558                           
 12559                           ; BSR set to: 0
 12560                           ;inc\CANlib.h: 899: RXF1SIDLbits.SID1 = 0x01;
 12561  001ECC  010F               	movlb	15	; () banked
 12562  001ECE  8D05               	bsf	5,6,b	;volatile
 12563  001ED0  D002               	goto	l479
 12564  001ED2                     l478:
 12565                           
 12566                           ; BSR set to: 0
 12567                           ;inc\CANlib.h: 900: else
 12568                           ;inc\CANlib.h: 901: RXF1SIDLbits.SID1 = 0x00;
 12569  001ED2  010F               	movlb	15	; () banked
 12570  001ED4  9D05               	bcf	5,6,b	;volatile
 12571  001ED6                     l479:
 12572                           
 12573                           ; BSR set to: 15
 12574                           ;inc\CANlib.h: 903: if (filter & 0x00100000)
 12575  001ED6  0100               	movlb	0	; () banked
 12576  001ED8  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12577  001EDA  D003               	goto	l480
 12578                           
 12579                           ; BSR set to: 0
 12580                           ;inc\CANlib.h: 904: RXF1SIDLbits.SID2 = 0x01 ;
 12581  001EDC  010F               	movlb	15	; () banked
 12582  001EDE  8F05               	bsf	5,7,b	;volatile
 12583  001EE0  D003               	goto	l4823
 12584  001EE2                     l480:
 12585                           
 12586                           ; BSR set to: 0
 12587                           ;inc\CANlib.h: 905: else
 12588                           ;inc\CANlib.h: 906: RXF1SIDLbits.SID2 = 0x00 ;
 12589  001EE2  010F               	movlb	15	; () banked
 12590  001EE4  9F05               	bcf	5,7,b	;volatile
 12591  001EE6  D000               	goto	l4823
 12592  001EE8                     l4823:
 12593                           
 12594                           ; BSR set to: 15
 12595                           ;inc\CANlib.h: 908: tamp = (filter >> 21);
 12596  001EE8  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12597  001EEC  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12598  001EF0  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12599  001EF4  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12600  001EF8  0E16               	movlw	22
 12601  001EFA  D006               	goto	u5540
 12602  001EFC                     u5545:
 12603  001EFC  0100               	movlb	0	; () banked
 12604  001EFE  90D8               	bcf	status,0,c
 12605  001F00  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12606  001F02  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12607  001F04  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12608  001F06  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12609  001F08                     u5540:
 12610  001F08  2EE8               	decfsz	wreg,f,c
 12611  001F0A  D7F8               	goto	u5545
 12612  001F0C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12613  001F10  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12614  001F14  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12615  001F18  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12616                           
 12617                           ; BSR set to: 0
 12618                           ;inc\CANlib.h: 909: tamp = tamp & 0x000000FF;
 12619  001F1C  0100               	movlb	0	; () banked
 12620  001F1E  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12621  001F20  0100               	movlb	0	; () banked
 12622  001F22  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12623  001F24  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12624  001F26  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12625  001F28  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12626                           
 12627                           ; BSR set to: 0
 12628                           ;inc\CANlib.h: 910: RXF1SIDH = (unsigned char) tamp;
 12629  001F2A  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 12630  001F2E  D000               	goto	l4829
 12631  001F30                     l4829:
 12632                           
 12633                           ; BSR set to: 0
 12634                           ;inc\CANlib.h: 911: }
 12635                           ;inc\CANlib.h: 914: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_XTD_MSG))
 12636  001F30  0E02               	movlw	2
 12637  001F32  0100               	movlb	0	; () banked
 12638  001F34  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12639  001F36  A4D8               	btfss	status,2,c
 12640  001F38  D08B               	goto	l4863
 12641                           
 12642                           ; BSR set to: 0
 12643  001F3A  0EF7               	movlw	247
 12644  001F3C  0100               	movlb	0	; () banked
 12645  001F3E  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12646  001F40  A4D8               	btfss	status,2,c
 12647  001F42  D086               	goto	l4863
 12648                           
 12649                           ; BSR set to: 0
 12650                           ;inc\CANlib.h: 915: {
 12651                           ;inc\CANlib.h: 916: RXF2SIDLbits.EXIDEN = 0x01;
 12652  001F44  010F               	movlb	15	; () banked
 12653  001F46  8709               	bsf	9,3,b	;volatile
 12654                           
 12655                           ; BSR set to: 15
 12656                           ;inc\CANlib.h: 918: tamp = filter & 0x000000FF;
 12657  001F48  0100               	movlb	0	; () banked
 12658  001F4A  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12659  001F4C  0100               	movlb	0	; () banked
 12660  001F4E  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12661  001F50  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12662  001F52  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12663  001F54  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;inc\CANlib.h: 919: RXF2EIDL = (unsigned char) tamp;
 12667  001F56  C081  FF0B         	movff	CANSetFilter@tamp,3851	;volatile
 12668                           
 12669                           ; BSR set to: 0
 12670                           ;inc\CANlib.h: 921: tamp = filter & 0x0000FF00;
 12671  001F5A  0E00               	movlw	0
 12672  001F5C  0100               	movlb	0	; () banked
 12673  001F5E  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12674  001F60  0100               	movlb	0	; () banked
 12675  001F62  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12676  001F64  0EFF               	movlw	255
 12677  001F66  0100               	movlb	0	; () banked
 12678  001F68  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12679  001F6A  0100               	movlb	0	; () banked
 12680  001F6C  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12681  001F6E  0E00               	movlw	0
 12682  001F70  0100               	movlb	0	; () banked
 12683  001F72  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12684  001F74  0100               	movlb	0	; () banked
 12685  001F76  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12686  001F78  0E00               	movlw	0
 12687  001F7A  0100               	movlb	0	; () banked
 12688  001F7C  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12689  001F7E  0100               	movlb	0	; () banked
 12690  001F80  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12691                           
 12692                           ; BSR set to: 0
 12693                           ;inc\CANlib.h: 922: tamp = tamp >> 8;
 12694  001F82  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12695  001F86  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12696  001F8A  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12697  001F8E  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12698  001F92  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12699  001F96  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12700  001F9A  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12701  001F9E  0100               	movlb	0	; () banked
 12702  001FA0  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12703  001FA2  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12704  001FA6  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12705  001FAA  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12706  001FAE  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12707                           
 12708                           ; BSR set to: 0
 12709                           ;inc\CANlib.h: 923: RXF2EIDH = (unsigned char) tamp;
 12710  001FB2  C081  FF0A         	movff	CANSetFilter@tamp,3850	;volatile
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;inc\CANlib.h: 925: if (filter & 0x00010000)
 12714  001FB6  0100               	movlb	0	; () banked
 12715  001FB8  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12716  001FBA  D003               	goto	l483
 12717                           
 12718                           ; BSR set to: 0
 12719                           ;inc\CANlib.h: 926: RXF2SIDLbits.EID16 = 0x01;
 12720  001FBC  010F               	movlb	15	; () banked
 12721  001FBE  8109               	bsf	9,0,b	;volatile
 12722  001FC0  D002               	goto	l484
 12723  001FC2                     l483:
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;inc\CANlib.h: 927: else
 12727                           ;inc\CANlib.h: 928: RXF2SIDLbits.EID16 = 0x00;
 12728  001FC2  010F               	movlb	15	; () banked
 12729  001FC4  9109               	bcf	9,0,b	;volatile
 12730  001FC6                     l484:
 12731                           
 12732                           ; BSR set to: 15
 12733                           ;inc\CANlib.h: 930: if (filter & 0x00020000)
 12734  001FC6  0100               	movlb	0	; () banked
 12735  001FC8  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12736  001FCA  D003               	goto	l485
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;inc\CANlib.h: 931: RXF2SIDLbits.EID17 = 0x01;
 12740  001FCC  010F               	movlb	15	; () banked
 12741  001FCE  8309               	bsf	9,1,b	;volatile
 12742  001FD0  D002               	goto	l486
 12743  001FD2                     l485:
 12744                           
 12745                           ; BSR set to: 0
 12746                           ;inc\CANlib.h: 932: else
 12747                           ;inc\CANlib.h: 933: RXF2SIDLbits.EID17 = 0x00;
 12748  001FD2  010F               	movlb	15	; () banked
 12749  001FD4  9309               	bcf	9,1,b	;volatile
 12750  001FD6                     l486:
 12751                           
 12752                           ; BSR set to: 15
 12753                           ;inc\CANlib.h: 935: if (filter & 0x00040000)
 12754  001FD6  0100               	movlb	0	; () banked
 12755  001FD8  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12756  001FDA  D003               	goto	l487
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;inc\CANlib.h: 936: RXF2SIDLbits.SID0 = 0x01;
 12760  001FDC  010F               	movlb	15	; () banked
 12761  001FDE  8B09               	bsf	9,5,b	;volatile
 12762  001FE0  D002               	goto	l488
 12763  001FE2                     l487:
 12764                           
 12765                           ; BSR set to: 0
 12766                           ;inc\CANlib.h: 937: else
 12767                           ;inc\CANlib.h: 938: RXF2SIDLbits.SID0 = 0x00;
 12768  001FE2  010F               	movlb	15	; () banked
 12769  001FE4  9B09               	bcf	9,5,b	;volatile
 12770  001FE6                     l488:
 12771                           
 12772                           ; BSR set to: 15
 12773                           ;inc\CANlib.h: 940: if (filter & 0x00080000)
 12774  001FE6  0100               	movlb	0	; () banked
 12775  001FE8  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12776  001FEA  D003               	goto	l489
 12777                           
 12778                           ; BSR set to: 0
 12779                           ;inc\CANlib.h: 941: RXF2SIDLbits.SID1 = 0x01;
 12780  001FEC  010F               	movlb	15	; () banked
 12781  001FEE  8D09               	bsf	9,6,b	;volatile
 12782  001FF0  D002               	goto	l490
 12783  001FF2                     l489:
 12784                           
 12785                           ; BSR set to: 0
 12786                           ;inc\CANlib.h: 942: else
 12787                           ;inc\CANlib.h: 943: RXF2SIDLbits.SID1 = 0x00;
 12788  001FF2  010F               	movlb	15	; () banked
 12789  001FF4  9D09               	bcf	9,6,b	;volatile
 12790  001FF6                     l490:
 12791                           
 12792                           ; BSR set to: 15
 12793                           ;inc\CANlib.h: 945: if (filter & 0x00100000)
 12794  001FF6  0100               	movlb	0	; () banked
 12795  001FF8  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12796  001FFA  D003               	goto	l491
 12797                           
 12798                           ; BSR set to: 0
 12799                           ;inc\CANlib.h: 946: RXF2SIDLbits.SID2 = 0x01 ;
 12800  001FFC  010F               	movlb	15	; () banked
 12801  001FFE  8F09               	bsf	9,7,b	;volatile
 12802  002000  D003               	goto	l4857
 12803  002002                     l491:
 12804                           
 12805                           ; BSR set to: 0
 12806                           ;inc\CANlib.h: 947: else
 12807                           ;inc\CANlib.h: 948: RXF2SIDLbits.SID2 = 0x00 ;
 12808  002002  010F               	movlb	15	; () banked
 12809  002004  9F09               	bcf	9,7,b	;volatile
 12810  002006  D000               	goto	l4857
 12811  002008                     l4857:
 12812                           
 12813                           ; BSR set to: 15
 12814                           ;inc\CANlib.h: 950: tamp = (filter >> 21);
 12815  002008  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12816  00200C  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12817  002010  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12818  002014  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12819  002018  0E16               	movlw	22
 12820  00201A  D006               	goto	u5620
 12821  00201C                     u5625:
 12822  00201C  0100               	movlb	0	; () banked
 12823  00201E  90D8               	bcf	status,0,c
 12824  002020  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12825  002022  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12826  002024  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12827  002026  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12828  002028                     u5620:
 12829  002028  2EE8               	decfsz	wreg,f,c
 12830  00202A  D7F8               	goto	u5625
 12831  00202C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12832  002030  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12833  002034  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12834  002038  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12835                           
 12836                           ; BSR set to: 0
 12837                           ;inc\CANlib.h: 951: tamp = tamp & 0x000000FF;
 12838  00203C  0100               	movlb	0	; () banked
 12839  00203E  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12840  002040  0100               	movlb	0	; () banked
 12841  002042  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12842  002044  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12843  002046  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12844  002048  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12845                           
 12846                           ; BSR set to: 0
 12847                           ;inc\CANlib.h: 952: RXF2SIDH = (unsigned char) tamp;
 12848  00204A  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 12849  00204E  D000               	goto	l4863
 12850  002050                     l4863:
 12851                           
 12852                           ; BSR set to: 0
 12853                           ;inc\CANlib.h: 953: }
 12854                           ;inc\CANlib.h: 955: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_XTD_MSG))
 12855  002050  0E03               	movlw	3
 12856  002052  0100               	movlb	0	; () banked
 12857  002054  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12858  002056  A4D8               	btfss	status,2,c
 12859  002058  D08B               	goto	l4897
 12860                           
 12861                           ; BSR set to: 0
 12862  00205A  0EF7               	movlw	247
 12863  00205C  0100               	movlb	0	; () banked
 12864  00205E  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12865  002060  A4D8               	btfss	status,2,c
 12866  002062  D086               	goto	l4897
 12867                           
 12868                           ; BSR set to: 0
 12869                           ;inc\CANlib.h: 956: {
 12870                           ;inc\CANlib.h: 957: RXF3SIDLbits.EXIDEN = 0x01;
 12871  002064  010F               	movlb	15	; () banked
 12872  002066  870D               	bsf	13,3,b	;volatile
 12873                           
 12874                           ; BSR set to: 15
 12875                           ;inc\CANlib.h: 959: tamp = filter & 0x000000FF;
 12876  002068  0100               	movlb	0	; () banked
 12877  00206A  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12878  00206C  0100               	movlb	0	; () banked
 12879  00206E  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12880  002070  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12881  002072  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12882  002074  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12883                           
 12884                           ; BSR set to: 0
 12885                           ;inc\CANlib.h: 960: RXF3EIDL = (unsigned char) tamp;
 12886  002076  C081  FF0F         	movff	CANSetFilter@tamp,3855	;volatile
 12887                           
 12888                           ; BSR set to: 0
 12889                           ;inc\CANlib.h: 962: tamp = filter & 0x0000FF00;
 12890  00207A  0E00               	movlw	0
 12891  00207C  0100               	movlb	0	; () banked
 12892  00207E  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12893  002080  0100               	movlb	0	; () banked
 12894  002082  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12895  002084  0EFF               	movlw	255
 12896  002086  0100               	movlb	0	; () banked
 12897  002088  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12898  00208A  0100               	movlb	0	; () banked
 12899  00208C  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12900  00208E  0E00               	movlw	0
 12901  002090  0100               	movlb	0	; () banked
 12902  002092  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12903  002094  0100               	movlb	0	; () banked
 12904  002096  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12905  002098  0E00               	movlw	0
 12906  00209A  0100               	movlb	0	; () banked
 12907  00209C  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12908  00209E  0100               	movlb	0	; () banked
 12909  0020A0  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12910                           
 12911                           ; BSR set to: 0
 12912                           ;inc\CANlib.h: 963: tamp = tamp >> 8;
 12913  0020A2  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12914  0020A6  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12915  0020AA  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12916  0020AE  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12917  0020B2  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12918  0020B6  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12919  0020BA  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12920  0020BE  0100               	movlb	0	; () banked
 12921  0020C0  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12922  0020C2  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12923  0020C6  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12924  0020CA  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12925  0020CE  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12926                           
 12927                           ; BSR set to: 0
 12928                           ;inc\CANlib.h: 964: RXF3EIDH = (unsigned char) tamp;
 12929  0020D2  C081  FF0E         	movff	CANSetFilter@tamp,3854	;volatile
 12930                           
 12931                           ; BSR set to: 0
 12932                           ;inc\CANlib.h: 966: if (filter & 0x00010000)
 12933  0020D6  0100               	movlb	0	; () banked
 12934  0020D8  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12935  0020DA  D003               	goto	l494
 12936                           
 12937                           ; BSR set to: 0
 12938                           ;inc\CANlib.h: 967: RXF3SIDLbits.EID16 = 0x01;
 12939  0020DC  010F               	movlb	15	; () banked
 12940  0020DE  810D               	bsf	13,0,b	;volatile
 12941  0020E0  D002               	goto	l495
 12942  0020E2                     l494:
 12943                           
 12944                           ; BSR set to: 0
 12945                           ;inc\CANlib.h: 968: else
 12946                           ;inc\CANlib.h: 969: RXF3SIDLbits.EID16 = 0x00;
 12947  0020E2  010F               	movlb	15	; () banked
 12948  0020E4  910D               	bcf	13,0,b	;volatile
 12949  0020E6                     l495:
 12950                           
 12951                           ; BSR set to: 15
 12952                           ;inc\CANlib.h: 971: if (filter & 0x00020000)
 12953  0020E6  0100               	movlb	0	; () banked
 12954  0020E8  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12955  0020EA  D003               	goto	l496
 12956                           
 12957                           ; BSR set to: 0
 12958                           ;inc\CANlib.h: 972: RXF3SIDLbits.EID17 = 0x01;
 12959  0020EC  010F               	movlb	15	; () banked
 12960  0020EE  830D               	bsf	13,1,b	;volatile
 12961  0020F0  D002               	goto	l497
 12962  0020F2                     l496:
 12963                           
 12964                           ; BSR set to: 0
 12965                           ;inc\CANlib.h: 973: else
 12966                           ;inc\CANlib.h: 974: RXF3SIDLbits.EID17 = 0x00;
 12967  0020F2  010F               	movlb	15	; () banked
 12968  0020F4  930D               	bcf	13,1,b	;volatile
 12969  0020F6                     l497:
 12970                           
 12971                           ; BSR set to: 15
 12972                           ;inc\CANlib.h: 976: if (filter & 0x00040000)
 12973  0020F6  0100               	movlb	0	; () banked
 12974  0020F8  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12975  0020FA  D003               	goto	l498
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;inc\CANlib.h: 977: RXF3SIDLbits.SID0 = 0x01;
 12979  0020FC  010F               	movlb	15	; () banked
 12980  0020FE  8B0D               	bsf	13,5,b	;volatile
 12981  002100  D002               	goto	l499
 12982  002102                     l498:
 12983                           
 12984                           ; BSR set to: 0
 12985                           ;inc\CANlib.h: 978: else
 12986                           ;inc\CANlib.h: 979: RXF3SIDLbits.SID0 = 0x00;
 12987  002102  010F               	movlb	15	; () banked
 12988  002104  9B0D               	bcf	13,5,b	;volatile
 12989  002106                     l499:
 12990                           
 12991                           ; BSR set to: 15
 12992                           ;inc\CANlib.h: 981: if (filter & 0x00080000)
 12993  002106  0100               	movlb	0	; () banked
 12994  002108  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12995  00210A  D003               	goto	l500
 12996                           
 12997                           ; BSR set to: 0
 12998                           ;inc\CANlib.h: 982: RXF3SIDLbits.SID1 = 0x01;
 12999  00210C  010F               	movlb	15	; () banked
 13000  00210E  8D0D               	bsf	13,6,b	;volatile
 13001  002110  D002               	goto	l501
 13002  002112                     l500:
 13003                           
 13004                           ; BSR set to: 0
 13005                           ;inc\CANlib.h: 983: else
 13006                           ;inc\CANlib.h: 984: RXF3SIDLbits.SID1 = 0x00;
 13007  002112  010F               	movlb	15	; () banked
 13008  002114  9D0D               	bcf	13,6,b	;volatile
 13009  002116                     l501:
 13010                           
 13011                           ; BSR set to: 15
 13012                           ;inc\CANlib.h: 986: if (filter & 0x00100000)
 13013  002116  0100               	movlb	0	; () banked
 13014  002118  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 13015  00211A  D003               	goto	l502
 13016                           
 13017                           ; BSR set to: 0
 13018                           ;inc\CANlib.h: 987: RXF3SIDLbits.SID2 = 0x01 ;
 13019  00211C  010F               	movlb	15	; () banked
 13020  00211E  8F0D               	bsf	13,7,b	;volatile
 13021  002120  D003               	goto	l4891
 13022  002122                     l502:
 13023                           
 13024                           ; BSR set to: 0
 13025                           ;inc\CANlib.h: 988: else
 13026                           ;inc\CANlib.h: 989: RXF3SIDLbits.SID2 = 0x00 ;
 13027  002122  010F               	movlb	15	; () banked
 13028  002124  9F0D               	bcf	13,7,b	;volatile
 13029  002126  D000               	goto	l4891
 13030  002128                     l4891:
 13031                           
 13032                           ; BSR set to: 15
 13033                           ;inc\CANlib.h: 991: tamp = (filter >> 21);
 13034  002128  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 13035  00212C  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 13036  002130  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 13037  002134  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 13038  002138  0E16               	movlw	22
 13039  00213A  D006               	goto	u5700
 13040  00213C                     u5705:
 13041  00213C  0100               	movlb	0	; () banked
 13042  00213E  90D8               	bcf	status,0,c
 13043  002140  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 13044  002142  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 13045  002144  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 13046  002146  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 13047  002148                     u5700:
 13048  002148  2EE8               	decfsz	wreg,f,c
 13049  00214A  D7F8               	goto	u5705
 13050  00214C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 13051  002150  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 13052  002154  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 13053  002158  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 13054                           
 13055                           ; BSR set to: 0
 13056                           ;inc\CANlib.h: 992: tamp = tamp & 0x000000FF;
 13057  00215C  0100               	movlb	0	; () banked
 13058  00215E  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 13059  002160  0100               	movlb	0	; () banked
 13060  002162  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13061  002164  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 13062  002166  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 13063  002168  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 13064                           
 13065                           ; BSR set to: 0
 13066                           ;inc\CANlib.h: 993: RXF3SIDH = (unsigned char) tamp;
 13067  00216A  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 13068  00216E  D000               	goto	l4897
 13069  002170                     l4897:
 13070                           
 13071                           ; BSR set to: 0
 13072                           ;inc\CANlib.h: 994: }
 13073                           ;inc\CANlib.h: 996: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_XTD_MSG))
 13074  002170  0E04               	movlw	4
 13075  002172  0100               	movlb	0	; () banked
 13076  002174  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 13077  002176  A4D8               	btfss	status,2,c
 13078  002178  D08B               	goto	l4931
 13079                           
 13080                           ; BSR set to: 0
 13081  00217A  0EF7               	movlw	247
 13082  00217C  0100               	movlb	0	; () banked
 13083  00217E  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 13084  002180  A4D8               	btfss	status,2,c
 13085  002182  D086               	goto	l4931
 13086                           
 13087                           ; BSR set to: 0
 13088                           ;inc\CANlib.h: 997: {
 13089                           ;inc\CANlib.h: 998: RXF4SIDLbits.EXIDEN = 0x01;
 13090  002184  010F               	movlb	15	; () banked
 13091  002186  8711               	bsf	17,3,b	;volatile
 13092                           
 13093                           ; BSR set to: 15
 13094                           ;inc\CANlib.h: 1000: tamp = filter & 0x000000FF;
 13095  002188  0100               	movlb	0	; () banked
 13096  00218A  5177               	movf	CANSetFilter@filter& (0+255),w,b
 13097  00218C  0100               	movlb	0	; () banked
 13098  00218E  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13099  002190  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 13100  002192  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 13101  002194  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;inc\CANlib.h: 1001: RXF4EIDL = (unsigned char) tamp;
 13105  002196  C081  FF13         	movff	CANSetFilter@tamp,3859	;volatile
 13106                           
 13107                           ; BSR set to: 0
 13108                           ;inc\CANlib.h: 1003: tamp = filter & 0x0000FF00;
 13109  00219A  0E00               	movlw	0
 13110  00219C  0100               	movlb	0	; () banked
 13111  00219E  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 13112  0021A0  0100               	movlb	0	; () banked
 13113  0021A2  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13114  0021A4  0EFF               	movlw	255
 13115  0021A6  0100               	movlb	0	; () banked
 13116  0021A8  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 13117  0021AA  0100               	movlb	0	; () banked
 13118  0021AC  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 13119  0021AE  0E00               	movlw	0
 13120  0021B0  0100               	movlb	0	; () banked
 13121  0021B2  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 13122  0021B4  0100               	movlb	0	; () banked
 13123  0021B6  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 13124  0021B8  0E00               	movlw	0
 13125  0021BA  0100               	movlb	0	; () banked
 13126  0021BC  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 13127  0021BE  0100               	movlb	0	; () banked
 13128  0021C0  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 13129                           
 13130                           ; BSR set to: 0
 13131                           ;inc\CANlib.h: 1004: tamp = tamp >> 8;
 13132  0021C2  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 13133  0021C6  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 13134  0021CA  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 13135  0021CE  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 13136  0021D2  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 13137  0021D6  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 13138  0021DA  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 13139  0021DE  0100               	movlb	0	; () banked
 13140  0021E0  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 13141  0021E2  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 13142  0021E6  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 13143  0021EA  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 13144  0021EE  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 13145                           
 13146                           ; BSR set to: 0
 13147                           ;inc\CANlib.h: 1005: RXF4EIDH = (unsigned char) tamp;
 13148  0021F2  C081  FF12         	movff	CANSetFilter@tamp,3858	;volatile
 13149                           
 13150                           ; BSR set to: 0
 13151                           ;inc\CANlib.h: 1007: if (filter & 0x00010000)
 13152  0021F6  0100               	movlb	0	; () banked
 13153  0021F8  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 13154  0021FA  D003               	goto	l505
 13155                           
 13156                           ; BSR set to: 0
 13157                           ;inc\CANlib.h: 1008: RXF4SIDLbits.EID16 = 0x01;
 13158  0021FC  010F               	movlb	15	; () banked
 13159  0021FE  8111               	bsf	17,0,b	;volatile
 13160  002200  D002               	goto	l506
 13161  002202                     l505:
 13162                           
 13163                           ; BSR set to: 0
 13164                           ;inc\CANlib.h: 1009: else
 13165                           ;inc\CANlib.h: 1010: RXF4SIDLbits.EID16 = 0x00;
 13166  002202  010F               	movlb	15	; () banked
 13167  002204  9111               	bcf	17,0,b	;volatile
 13168  002206                     l506:
 13169                           
 13170                           ; BSR set to: 15
 13171                           ;inc\CANlib.h: 1012: if (filter & 0x00020000)
 13172  002206  0100               	movlb	0	; () banked
 13173  002208  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 13174  00220A  D003               	goto	l507
 13175                           
 13176                           ; BSR set to: 0
 13177                           ;inc\CANlib.h: 1013: RXF4SIDLbits.EID17 = 0x01;
 13178  00220C  010F               	movlb	15	; () banked
 13179  00220E  8311               	bsf	17,1,b	;volatile
 13180  002210  D002               	goto	l508
 13181  002212                     l507:
 13182                           
 13183                           ; BSR set to: 0
 13184                           ;inc\CANlib.h: 1014: else
 13185                           ;inc\CANlib.h: 1015: RXF4SIDLbits.EID17 = 0x00;
 13186  002212  010F               	movlb	15	; () banked
 13187  002214  9311               	bcf	17,1,b	;volatile
 13188  002216                     l508:
 13189                           
 13190                           ; BSR set to: 15
 13191                           ;inc\CANlib.h: 1017: if (filter & 0x00040000)
 13192  002216  0100               	movlb	0	; () banked
 13193  002218  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 13194  00221A  D003               	goto	l509
 13195                           
 13196                           ; BSR set to: 0
 13197                           ;inc\CANlib.h: 1018: RXF4SIDLbits.SID0 = 0x01;
 13198  00221C  010F               	movlb	15	; () banked
 13199  00221E  8B11               	bsf	17,5,b	;volatile
 13200  002220  D002               	goto	l510
 13201  002222                     l509:
 13202                           
 13203                           ; BSR set to: 0
 13204                           ;inc\CANlib.h: 1019: else
 13205                           ;inc\CANlib.h: 1020: RXF4SIDLbits.SID0 = 0x00;
 13206  002222  010F               	movlb	15	; () banked
 13207  002224  9B11               	bcf	17,5,b	;volatile
 13208  002226                     l510:
 13209                           
 13210                           ; BSR set to: 15
 13211                           ;inc\CANlib.h: 1022: if (filter & 0x00080000)
 13212  002226  0100               	movlb	0	; () banked
 13213  002228  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 13214  00222A  D003               	goto	l511
 13215                           
 13216                           ; BSR set to: 0
 13217                           ;inc\CANlib.h: 1023: RXF4SIDLbits.SID1 = 0x01;
 13218  00222C  010F               	movlb	15	; () banked
 13219  00222E  8D11               	bsf	17,6,b	;volatile
 13220  002230  D002               	goto	l512
 13221  002232                     l511:
 13222                           
 13223                           ; BSR set to: 0
 13224                           ;inc\CANlib.h: 1024: else
 13225                           ;inc\CANlib.h: 1025: RXF4SIDLbits.SID1 = 0x00;
 13226  002232  010F               	movlb	15	; () banked
 13227  002234  9D11               	bcf	17,6,b	;volatile
 13228  002236                     l512:
 13229                           
 13230                           ; BSR set to: 15
 13231                           ;inc\CANlib.h: 1027: if (filter & 0x00100000)
 13232  002236  0100               	movlb	0	; () banked
 13233  002238  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 13234  00223A  D003               	goto	l513
 13235                           
 13236                           ; BSR set to: 0
 13237                           ;inc\CANlib.h: 1028: RXF4SIDLbits.SID2 = 0x01 ;
 13238  00223C  010F               	movlb	15	; () banked
 13239  00223E  8F11               	bsf	17,7,b	;volatile
 13240  002240  D003               	goto	l4925
 13241  002242                     l513:
 13242                           
 13243                           ; BSR set to: 0
 13244                           ;inc\CANlib.h: 1029: else
 13245                           ;inc\CANlib.h: 1030: RXF4SIDLbits.SID2 = 0x00 ;
 13246  002242  010F               	movlb	15	; () banked
 13247  002244  9F11               	bcf	17,7,b	;volatile
 13248  002246  D000               	goto	l4925
 13249  002248                     l4925:
 13250                           
 13251                           ; BSR set to: 15
 13252                           ;inc\CANlib.h: 1032: tamp = (filter >> 21);
 13253  002248  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 13254  00224C  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 13255  002250  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 13256  002254  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 13257  002258  0E16               	movlw	22
 13258  00225A  D006               	goto	u5780
 13259  00225C                     u5785:
 13260  00225C  0100               	movlb	0	; () banked
 13261  00225E  90D8               	bcf	status,0,c
 13262  002260  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 13263  002262  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 13264  002264  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 13265  002266  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 13266  002268                     u5780:
 13267  002268  2EE8               	decfsz	wreg,f,c
 13268  00226A  D7F8               	goto	u5785
 13269  00226C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 13270  002270  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 13271  002274  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 13272  002278  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 13273                           
 13274                           ; BSR set to: 0
 13275                           ;inc\CANlib.h: 1033: tamp = tamp & 0x000000FF;
 13276  00227C  0100               	movlb	0	; () banked
 13277  00227E  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 13278  002280  0100               	movlb	0	; () banked
 13279  002282  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13280  002284  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 13281  002286  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 13282  002288  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 13283                           
 13284                           ; BSR set to: 0
 13285                           ;inc\CANlib.h: 1034: RXF4SIDH = (unsigned char) tamp;
 13286  00228A  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 13287  00228E  D000               	goto	l4931
 13288  002290                     l4931:
 13289                           
 13290                           ; BSR set to: 0
 13291                           ;inc\CANlib.h: 1035: }
 13292                           ;inc\CANlib.h: 1037: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_XTD_MSG))
 13293  002290  0E05               	movlw	5
 13294  002292  0100               	movlb	0	; () banked
 13295  002294  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 13296  002296  A4D8               	btfss	status,2,c
 13297  002298  0012               	return	
 13298                           
 13299                           ; BSR set to: 0
 13300  00229A  0EF7               	movlw	247
 13301  00229C  0100               	movlb	0	; () banked
 13302  00229E  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 13303  0022A0  A4D8               	btfss	status,2,c
 13304  0022A2  0012               	return	
 13305                           
 13306                           ; BSR set to: 0
 13307                           ;inc\CANlib.h: 1038: {
 13308                           ;inc\CANlib.h: 1039: RXF5SIDLbits.EXIDEN = 0x01;
 13309  0022A4  010F               	movlb	15	; () banked
 13310  0022A6  8715               	bsf	21,3,b	;volatile
 13311                           
 13312                           ; BSR set to: 15
 13313                           ;inc\CANlib.h: 1041: tamp = filter & 0x000000FF;
 13314  0022A8  0100               	movlb	0	; () banked
 13315  0022AA  5177               	movf	CANSetFilter@filter& (0+255),w,b
 13316  0022AC  0100               	movlb	0	; () banked
 13317  0022AE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13318  0022B0  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 13319  0022B2  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 13320  0022B4  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 13321                           
 13322                           ; BSR set to: 0
 13323                           ;inc\CANlib.h: 1042: RXF5EIDL = (unsigned char) tamp;
 13324  0022B6  C081  FF17         	movff	CANSetFilter@tamp,3863	;volatile
 13325                           
 13326                           ; BSR set to: 0
 13327                           ;inc\CANlib.h: 1044: tamp = filter & 0x0000FF00;
 13328  0022BA  0E00               	movlw	0
 13329  0022BC  0100               	movlb	0	; () banked
 13330  0022BE  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 13331  0022C0  0100               	movlb	0	; () banked
 13332  0022C2  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13333  0022C4  0EFF               	movlw	255
 13334  0022C6  0100               	movlb	0	; () banked
 13335  0022C8  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 13336  0022CA  0100               	movlb	0	; () banked
 13337  0022CC  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 13338  0022CE  0E00               	movlw	0
 13339  0022D0  0100               	movlb	0	; () banked
 13340  0022D2  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 13341  0022D4  0100               	movlb	0	; () banked
 13342  0022D6  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 13343  0022D8  0E00               	movlw	0
 13344  0022DA  0100               	movlb	0	; () banked
 13345  0022DC  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 13346  0022DE  0100               	movlb	0	; () banked
 13347  0022E0  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 13348                           
 13349                           ; BSR set to: 0
 13350                           ;inc\CANlib.h: 1045: tamp = tamp >> 8;
 13351  0022E2  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 13352  0022E6  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 13353  0022EA  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 13354  0022EE  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 13355  0022F2  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 13356  0022F6  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 13357  0022FA  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 13358  0022FE  0100               	movlb	0	; () banked
 13359  002300  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 13360  002302  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 13361  002306  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 13362  00230A  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 13363  00230E  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 13364                           
 13365                           ; BSR set to: 0
 13366                           ;inc\CANlib.h: 1046: RXF5EIDH = (unsigned char) tamp;
 13367  002312  C081  FF16         	movff	CANSetFilter@tamp,3862	;volatile
 13368                           
 13369                           ; BSR set to: 0
 13370                           ;inc\CANlib.h: 1048: if (filter & 0x00010000)
 13371  002316  0100               	movlb	0	; () banked
 13372  002318  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 13373  00231A  D003               	goto	l516
 13374                           
 13375                           ; BSR set to: 0
 13376                           ;inc\CANlib.h: 1049: RXF5SIDLbits.EID16 = 0x01;
 13377  00231C  010F               	movlb	15	; () banked
 13378  00231E  8115               	bsf	21,0,b	;volatile
 13379  002320  D002               	goto	l517
 13380  002322                     l516:
 13381                           
 13382                           ; BSR set to: 0
 13383                           ;inc\CANlib.h: 1050: else
 13384                           ;inc\CANlib.h: 1051: RXF5SIDLbits.EID16 = 0x00;
 13385  002322  010F               	movlb	15	; () banked
 13386  002324  9115               	bcf	21,0,b	;volatile
 13387  002326                     l517:
 13388                           
 13389                           ; BSR set to: 15
 13390                           ;inc\CANlib.h: 1053: if (filter & 0x00020000)
 13391  002326  0100               	movlb	0	; () banked
 13392  002328  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 13393  00232A  D003               	goto	l518
 13394                           
 13395                           ; BSR set to: 0
 13396                           ;inc\CANlib.h: 1054: RXF5SIDLbits.EID17 = 0x01;
 13397  00232C  010F               	movlb	15	; () banked
 13398  00232E  8315               	bsf	21,1,b	;volatile
 13399  002330  D002               	goto	l519
 13400  002332                     l518:
 13401                           
 13402                           ; BSR set to: 0
 13403                           ;inc\CANlib.h: 1055: else
 13404                           ;inc\CANlib.h: 1056: RXF5SIDLbits.EID17 = 0x00;
 13405  002332  010F               	movlb	15	; () banked
 13406  002334  9315               	bcf	21,1,b	;volatile
 13407  002336                     l519:
 13408                           
 13409                           ; BSR set to: 15
 13410                           ;inc\CANlib.h: 1058: if (filter & 0x00040000)
 13411  002336  0100               	movlb	0	; () banked
 13412  002338  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 13413  00233A  D003               	goto	l520
 13414                           
 13415                           ; BSR set to: 0
 13416                           ;inc\CANlib.h: 1059: RXF5SIDLbits.SID0 = 0x01;
 13417  00233C  010F               	movlb	15	; () banked
 13418  00233E  8B15               	bsf	21,5,b	;volatile
 13419  002340  D002               	goto	l521
 13420  002342                     l520:
 13421                           
 13422                           ; BSR set to: 0
 13423                           ;inc\CANlib.h: 1060: else
 13424                           ;inc\CANlib.h: 1061: RXF5SIDLbits.SID0 = 0x00;
 13425  002342  010F               	movlb	15	; () banked
 13426  002344  9B15               	bcf	21,5,b	;volatile
 13427  002346                     l521:
 13428                           
 13429                           ; BSR set to: 15
 13430                           ;inc\CANlib.h: 1063: if (filter & 0x00080000)
 13431  002346  0100               	movlb	0	; () banked
 13432  002348  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 13433  00234A  D003               	goto	l522
 13434                           
 13435                           ; BSR set to: 0
 13436                           ;inc\CANlib.h: 1064: RXF5SIDLbits.SID1 = 0x01;
 13437  00234C  010F               	movlb	15	; () banked
 13438  00234E  8D15               	bsf	21,6,b	;volatile
 13439  002350  D002               	goto	l523
 13440  002352                     l522:
 13441                           
 13442                           ; BSR set to: 0
 13443                           ;inc\CANlib.h: 1065: else
 13444                           ;inc\CANlib.h: 1066: RXF5SIDLbits.SID1 = 0x00;
 13445  002352  010F               	movlb	15	; () banked
 13446  002354  9D15               	bcf	21,6,b	;volatile
 13447  002356                     l523:
 13448                           
 13449                           ; BSR set to: 15
 13450                           ;inc\CANlib.h: 1068: if (filter & 0x00100000)
 13451  002356  0100               	movlb	0	; () banked
 13452  002358  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 13453  00235A  D003               	goto	l524
 13454                           
 13455                           ; BSR set to: 0
 13456                           ;inc\CANlib.h: 1069: RXF5SIDLbits.SID2 = 0x01 ;
 13457  00235C  010F               	movlb	15	; () banked
 13458  00235E  8F15               	bsf	21,7,b	;volatile
 13459  002360  D003               	goto	l4959
 13460  002362                     l524:
 13461                           
 13462                           ; BSR set to: 0
 13463                           ;inc\CANlib.h: 1070: else
 13464                           ;inc\CANlib.h: 1071: RXF5SIDLbits.SID2 = 0x00 ;
 13465  002362  010F               	movlb	15	; () banked
 13466  002364  9F15               	bcf	21,7,b	;volatile
 13467  002366  D000               	goto	l4959
 13468  002368                     l4959:
 13469                           
 13470                           ; BSR set to: 15
 13471                           ;inc\CANlib.h: 1073: tamp = (filter >> 21);
 13472  002368  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 13473  00236C  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 13474  002370  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 13475  002374  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 13476  002378  0E16               	movlw	22
 13477  00237A  D006               	goto	u5860
 13478  00237C                     u5865:
 13479  00237C  0100               	movlb	0	; () banked
 13480  00237E  90D8               	bcf	status,0,c
 13481  002380  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 13482  002382  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 13483  002384  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 13484  002386  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 13485  002388                     u5860:
 13486  002388  2EE8               	decfsz	wreg,f,c
 13487  00238A  D7F8               	goto	u5865
 13488  00238C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 13489  002390  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 13490  002394  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 13491  002398  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 13492                           
 13493                           ; BSR set to: 0
 13494                           ;inc\CANlib.h: 1074: tamp = tamp & 0x000000FF;
 13495  00239C  0100               	movlb	0	; () banked
 13496  00239E  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 13497  0023A0  0100               	movlb	0	; () banked
 13498  0023A2  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13499  0023A4  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 13500  0023A6  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 13501  0023A8  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 13502                           
 13503                           ; BSR set to: 0
 13504                           ;inc\CANlib.h: 1075: RXF5SIDH = (unsigned char) tamp;
 13505  0023AA  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 13506  0023AE  0012               	return	
 13507                           
 13508                           ; BSR set to: 0
 13509                           
 13510                           ; BSR set to: 0
 13511  0023B0  0012               	return		;funcret
 13512  0023B2                     __end_of_CANSetFilter:
 13513                           	opt stack 0
 13514                           tblptru	equ	0xFF8
 13515                           tblptrh	equ	0xFF7
 13516                           tblptrl	equ	0xFF6
 13517                           tablat	equ	0xFF5
 13518                           prodh	equ	0xFF4
 13519                           prodl	equ	0xFF3
 13520                           intcon	equ	0xFF2
 13521                           intcon2	equ	0xFF1
 13522                           postinc0	equ	0xFEE
 13523                           wreg	equ	0xFE8
 13524                           indf2	equ	0xFDF
 13525                           postinc2	equ	0xFDE
 13526                           postdec2	equ	0xFDD
 13527                           fsr2h	equ	0xFDA
 13528                           fsr2l	equ	0xFD9
 13529                           status	equ	0xFD8
 13530                           
 13531 ;; *************** function _CANOperationMode *****************
 13532 ;; Defined at:
 13533 ;;		line 206 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 13534 ;; Parameters:    Size  Location     Type
 13535 ;;  mode            1    wreg     enum E16348
 13536 ;; Auto vars:     Size  Location     Type
 13537 ;;  mode            1   23[BANK0 ] enum E16348
 13538 ;; Return value:  Size  Location     Type
 13539 ;;		None               void
 13540 ;; Registers used:
 13541 ;;		wreg, status,2, status,0
 13542 ;; Tracked objects:
 13543 ;;		On entry : 0/0
 13544 ;;		On exit  : 0/0
 13545 ;;		Unchanged: 0/0
 13546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13548 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13550 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13551 ;;Total ram usage:        1 bytes
 13552 ;; Hardware stack levels used:    1
 13553 ;; Hardware stack levels required when called:    5
 13554 ;; This function calls:
 13555 ;;		Nothing
 13556 ;; This function is called by:
 13557 ;;		_CANInitialize
 13558 ;; This function uses a non-reentrant model
 13559 ;;
 13560                           
 13561                           	psect	text36
 13562  00657C                     __ptext36:
 13563                           	opt stack 0
 13564  00657C                     _CANOperationMode:
 13565                           	opt stack 23
 13566                           
 13567                           ; BSR set to: 0
 13568                           ;incstack = 0
 13569                           ;CANOperationMode@mode stored from wreg
 13570  00657C  0100               	movlb	0	; () banked
 13571  00657E  6F77               	movwf	CANOperationMode@mode& (0+255),b
 13572                           
 13573                           ; BSR set to: 0
 13574                           ;inc\CANlib.h: 208: CANCON = mode;
 13575  006580  C077  FF6F         	movff	CANOperationMode@mode,3951	;volatile
 13576                           
 13577                           ; BSR set to: 0
 13578                           
 13579                           ;inc\CANlib.h: 210: while((CANSTAT & 0b11100000) != mode );
 13580  006584  D000               	goto	l6615
 13581  006586                     l6615:
 13582                           
 13583                           ; BSR set to: 0
 13584  006586  506E               	movf	3950,w,c	;volatile
 13585  006588  0BE0               	andlw	224
 13586  00658A  0100               	movlb	0	; () banked
 13587  00658C  1977               	xorwf	CANOperationMode@mode& (0+255),w,b
 13588  00658E  A4D8               	btfss	status,2,c
 13589  006590  D7FA               	goto	l6615
 13590                           
 13591                           ; BSR set to: 0
 13592                           
 13593                           ; BSR set to: 0
 13594  006592  0012               	return		;funcret
 13595  006594                     __end_of_CANOperationMode:
 13596                           	opt stack 0
 13597                           tblptru	equ	0xFF8
 13598                           tblptrh	equ	0xFF7
 13599                           tblptrl	equ	0xFF6
 13600                           tablat	equ	0xFF5
 13601                           prodh	equ	0xFF4
 13602                           prodl	equ	0xFF3
 13603                           intcon	equ	0xFF2
 13604                           intcon2	equ	0xFF1
 13605                           postinc0	equ	0xFEE
 13606                           wreg	equ	0xFE8
 13607                           indf2	equ	0xFDF
 13608                           postinc2	equ	0xFDE
 13609                           postdec2	equ	0xFDD
 13610                           fsr2h	equ	0xFDA
 13611                           fsr2l	equ	0xFD9
 13612                           status	equ	0xFD8
 13613                           
 13614 ;; *************** function _ISR_Bassa *****************
 13615 ;; Defined at:
 13616 ;;		line 121 in file "parcheggio.c"
 13617 ;; Parameters:    Size  Location     Type
 13618 ;;		None
 13619 ;; Auto vars:     Size  Location     Type
 13620 ;;  MUX_index_co    2   37[COMRAM] unsigned char [2]
 13621 ;;  PORTA_temp      1   39[COMRAM] unsigned char 
 13622 ;; Return value:  Size  Location     Type
 13623 ;;		None               void
 13624 ;; Registers used:
 13625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13626 ;; Tracked objects:
 13627 ;;		On entry : 0/0
 13628 ;;		On exit  : 0/0
 13629 ;;		Unchanged: 0/0
 13630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13632 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13633 ;;      Temps:         21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13634 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13635 ;;Total ram usage:       24 bytes
 13636 ;; Hardware stack levels used:    1
 13637 ;; Hardware stack levels required when called:    4
 13638 ;; This function calls:
 13639 ;;		_CANisRxReady
 13640 ;;		_CANreceiveMessage
 13641 ;;		i1_CANsendMessage
 13642 ;;		i1_can_send
 13643 ;;		i1_delay_ms
 13644 ;; This function is called by:
 13645 ;;		Interrupt level 1
 13646 ;; This function uses a non-reentrant model
 13647 ;;
 13648                           
 13649                           	psect	intcodelo
 13650  000018                     __pintcodelo:
 13651                           	opt stack 0
 13652  000018                     _ISR_Bassa:
 13653                           	opt stack 19
 13654                           
 13655                           ; BSR set to: 0
 13656                           ;incstack = 0
 13657  000018  CFD8 F042          	movff	status,??_ISR_Bassa+4
 13658  00001C  CFE8 F043          	movff	wreg,??_ISR_Bassa+5
 13659  000020  CFE0 F044          	movff	bsr,??_ISR_Bassa+6
 13660  000024  CFFA F045          	movff	pclath,??_ISR_Bassa+7
 13661  000028  CFFB F046          	movff	pclatu,??_ISR_Bassa+8
 13662  00002C  CFE9 F047          	movff	fsr0l,??_ISR_Bassa+9
 13663  000030  CFEA F048          	movff	fsr0h,??_ISR_Bassa+10
 13664  000034  CFE1 F049          	movff	fsr1l,??_ISR_Bassa+11
 13665  000038  CFE2 F04A          	movff	fsr1h,??_ISR_Bassa+12
 13666  00003C  CFD9 F04B          	movff	fsr2l,??_ISR_Bassa+13
 13667  000040  CFDA F04C          	movff	fsr2h,??_ISR_Bassa+14
 13668  000044  CFF3 F04D          	movff	prodl,??_ISR_Bassa+15
 13669  000048  CFF4 F04E          	movff	prodh,??_ISR_Bassa+16
 13670  00004C  CFF6 F04F          	movff	tblptrl,??_ISR_Bassa+17
 13671  000050  CFF7 F050          	movff	tblptrh,??_ISR_Bassa+18
 13672  000054  CFF8 F051          	movff	tblptru,??_ISR_Bassa+19
 13673  000058  CFF5 F052          	movff	tablat,??_ISR_Bassa+20
 13674                           
 13675                           ;parcheggio.c: 124: if (INTCONbits.TMR0IF == 1) {
 13676  00005C  A4F2               	btfss	intcon,2,c	;volatile
 13677  00005E  D0CC               	goto	i1l6081
 13678                           
 13679                           ;parcheggio.c: 125: INTCONbits.INT0IE = 0;
 13680  000060  98F2               	bcf	intcon,4,c	;volatile
 13681                           
 13682                           ;parcheggio.c: 126: T0CONbits.TMR0ON = 0;
 13683  000062  9ED5               	bcf	4053,7,c	;volatile
 13684                           
 13685                           ;parcheggio.c: 127: TMR0H = 0x34;
 13686  000064  0E34               	movlw	52
 13687  000066  6ED7               	movwf	4055,c	;volatile
 13688                           
 13689                           ;parcheggio.c: 128: TMR0L = 0xE0;
 13690  000068  0EE0               	movlw	224
 13691  00006A  6ED6               	movwf	4054,c	;volatile
 13692                           
 13693                           ;parcheggio.c: 129: T0CONbits.TMR0ON = 1;
 13694  00006C  8ED5               	bsf	4053,7,c	;volatile
 13695                           
 13696                           ;parcheggio.c: 131: if (distance_error == 1) {
 13697  00006E  AA56               	btfss	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13698  000070  D00C               	goto	i1l696
 13699                           
 13700                           ;parcheggio.c: 132: sensor_distance[MUX_index] = 3000;
 13701  000072  5021               	movf	_MUX_index,w,c	;volatile
 13702  000074  0D02               	mullw	2
 13703  000076  0E01               	movlw	low _sensor_distance
 13704  000078  24F3               	addwf	prodl,w,c
 13705  00007A  6ED9               	movwf	fsr2l,c
 13706  00007C  0E00               	movlw	high _sensor_distance
 13707  00007E  20F4               	addwfc	prodh,w,c
 13708  000080  6EDA               	movwf	fsr2h,c
 13709  000082  0EB8               	movlw	184
 13710  000084  6EDE               	movwf	postinc2,c
 13711  000086  0E0B               	movlw	11
 13712  000088  6EDD               	movwf	postdec2,c
 13713  00008A                     i1l696:
 13714                           
 13715                           ;parcheggio.c: 133: }
 13716                           ;parcheggio.c: 135: if ((sensor_distance[MUX_index] < 250)&&(start_operation == 0)&&((MU
      +                          X_index == 3) || (MUX_index == 6))) {
 13717  00008A  5021               	movf	_MUX_index,w,c	;volatile
 13718  00008C  0D02               	mullw	2
 13719  00008E  0E01               	movlw	low _sensor_distance
 13720  000090  24F3               	addwf	prodl,w,c
 13721  000092  6ED9               	movwf	fsr2l,c
 13722  000094  0E00               	movlw	high _sensor_distance
 13723  000096  20F4               	addwfc	prodh,w,c
 13724  000098  6EDA               	movwf	fsr2h,c
 13725  00009A  0E01               	movlw	1
 13726  00009C  50DB               	movf	plusw2,w,c
 13727  00009E  E118               	bnz	i1l6013
 13728  0000A0  0EFA               	movlw	250
 13729  0000A2  5CDE               	subwf	postinc2,w,c
 13730  0000A4  B0D8               	btfsc	status,0,c
 13731  0000A6  D014               	goto	i1l6013
 13732  0000A8  BC57               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13733  0000AA  D012               	goto	i1l6013
 13734  0000AC  0E03               	movlw	3
 13735  0000AE  1821               	xorwf	_MUX_index,w,c	;volatile
 13736  0000B0  B4D8               	btfsc	status,2,c
 13737  0000B2  D004               	goto	i1l6009
 13738  0000B4  0E06               	movlw	6
 13739  0000B6  1821               	xorwf	_MUX_index,w,c	;volatile
 13740  0000B8  A4D8               	btfss	status,2,c
 13741  0000BA  D00A               	goto	i1l6013
 13742  0000BC                     i1l6009:
 13743                           
 13744                           ;parcheggio.c: 136: if (MUX_index == 3) {
 13745  0000BC  0E03               	movlw	3
 13746  0000BE  1821               	xorwf	_MUX_index,w,c	;volatile
 13747  0000C0  A4D8               	btfss	status,2,c
 13748  0000C2  D003               	goto	i1l700
 13749                           
 13750                           ;parcheggio.c: 137: sensor_distance_short[1] = sensor_distance[3];
 13751  0000C4  C007  F17C         	movff	_sensor_distance+6,_sensor_distance_short+1	;volatile
 13752                           
 13753                           ;parcheggio.c: 138: } else {
 13754  0000C8  D011               	goto	i1l6021
 13755  0000CA                     i1l700:
 13756                           
 13757                           ;parcheggio.c: 139: sensor_distance_short[0] = sensor_distance[6];
 13758  0000CA  C00D  F17B         	movff	_sensor_distance+12,_sensor_distance_short	;volatile
 13759                           
 13760                           ;parcheggio.c: 140: }
 13761                           ;parcheggio.c: 141: } else if (MUX_index == 3){
 13762  0000CE  D00E               	goto	i1l6021
 13763  0000D0                     i1l6013:
 13764  0000D0  0E03               	movlw	3
 13765  0000D2  1821               	xorwf	_MUX_index,w,c	;volatile
 13766  0000D4  A4D8               	btfss	status,2,c
 13767  0000D6  D003               	goto	i1l6017
 13768                           
 13769                           ;parcheggio.c: 142: sensor_distance_short[3] = 255;
 13770  0000D8  0101               	movlb	1	; () banked
 13771  0000DA  697E               	setf	(_sensor_distance_short+3)& (0+255),b	;volatile
 13772                           
 13773                           ;parcheggio.c: 143: }
 13774  0000DC  D007               	goto	i1l6021
 13775  0000DE                     i1l6017:
 13776                           
 13777                           ;parcheggio.c: 144: else if (MUX_index == 6){
 13778  0000DE  0E06               	movlw	6
 13779  0000E0  1821               	xorwf	_MUX_index,w,c	;volatile
 13780  0000E2  A4D8               	btfss	status,2,c
 13781  0000E4  D003               	goto	i1l6021
 13782                           
 13783                           ;parcheggio.c: 145: sensor_distance_short[6] = 255;
 13784  0000E6  0101               	movlb	1	; () banked
 13785  0000E8  6981               	setf	(_sensor_distance_short+6)& (0+255),b	;volatile
 13786                           
 13787                           ; BSR set to: 1
 13788                           
 13789                           ; BSR set to: 1
 13790  0000EA  D000               	goto	i1l6021
 13791  0000EC                     i1l6021:
 13792                           
 13793                           ;parcheggio.c: 146: }
 13794                           ;parcheggio.c: 147: if ((sensor_distance[MUX_index] < 5)&&(start_operation == 1)&&(avvic
      +                          inamento == 0)&&((MUX_index != 0) || (MUX_index != 1))) {
 13795  0000EC  5021               	movf	_MUX_index,w,c	;volatile
 13796  0000EE  0D02               	mullw	2
 13797  0000F0  0E01               	movlw	low _sensor_distance
 13798  0000F2  24F3               	addwf	prodl,w,c
 13799  0000F4  6ED9               	movwf	fsr2l,c
 13800  0000F6  0E00               	movlw	high _sensor_distance
 13801  0000F8  20F4               	addwfc	prodh,w,c
 13802  0000FA  6EDA               	movwf	fsr2h,c
 13803  0000FC  0E01               	movlw	1
 13804  0000FE  50DB               	movf	plusw2,w,c
 13805  000100  E142               	bnz	i1l6045
 13806  000102  0E05               	movlw	5
 13807  000104  5CDE               	subwf	postinc2,w,c
 13808  000106  B0D8               	btfsc	status,0,c
 13809  000108  D03E               	goto	i1l6045
 13810  00010A  BC57               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13811  00010C  B656               	btfsc	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
 13812  00010E  D03B               	goto	i1l6045
 13813  000110  5021               	movf	_MUX_index,w,c	;volatile
 13814  000112  A4D8               	btfss	status,2,c
 13815  000114  D003               	goto	i1l6031
 13816  000116  0421               	decf	_MUX_index,w,c	;volatile
 13817  000118  B4D8               	btfsc	status,2,c
 13818  00011A  D035               	goto	i1l6045
 13819  00011C                     i1l6031:
 13820                           
 13821                           ;parcheggio.c: 148: counter++;
 13822  00011C  2A24               	incf	_counter,f,c	;volatile
 13823                           
 13824                           ;parcheggio.c: 149: if (counter > 0) {
 13825  00011E  5024               	movf	_counter,w,c	;volatile
 13826  000120  B4D8               	btfsc	status,2,c
 13827  000122  D031               	goto	i1l6045
 13828                           
 13829                           ;parcheggio.c: 150: set_speed = 0;
 13830  000124  0E00               	movlw	0
 13831  000126  0100               	movlb	0	; () banked
 13832  000128  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
 13833  00012A  0E00               	movlw	0
 13834  00012C  6FE5               	movwf	_set_speed& (0+255),b	;volatile
 13835                           
 13836                           ;parcheggio.c: 151: data_steering[0] = 90;
 13837  00012E  0E5A               	movlw	90
 13838  000130  0101               	movlb	1	; () banked
 13839  000132  6F6B               	movwf	_data_steering& (0+255),b	;volatile
 13840                           
 13841                           ;parcheggio.c: 152: data_brake [0] = 0;
 13842  000134  0E00               	movlw	0
 13843  000136  6E26               	movwf	_data_brake,c	;volatile
 13844                           
 13845                           ;parcheggio.c: 153: data_brake [1] = 1;
 13846  000138  0E01               	movlw	1
 13847  00013A  6E27               	movwf	_data_brake+1,c	;volatile
 13848                           
 13849                           ; BSR set to: 1
 13850                           ;parcheggio.c: 154: can_send();
 13851  00013C  EC09  F02F         	call	i1_can_send	;wreg free
 13852                           
 13853                           ;parcheggio.c: 155: delay_ms(100);
 13854  000140  0E00               	movlw	0
 13855  000142  6E35               	movwf	i1delay_ms@value_ms+1,c
 13856  000144  0E64               	movlw	100
 13857  000146  6E34               	movwf	i1delay_ms@value_ms,c
 13858  000148  EC25  F032         	call	i1_delay_ms	;wreg free
 13859                           
 13860                           ;parcheggio.c: 156: data[0] = 4;
 13861  00014C  0E04               	movlw	4
 13862  00014E  0101               	movlb	1	; () banked
 13863  000150  6F53               	movwf	_data& (0+255),b	;volatile
 13864                           
 13865                           ; BSR set to: 1
 13866                           ;parcheggio.c: 157: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
 13867  000152  0E0D               	movlw	13
 13868  000154  6E2E               	movwf	i1CANsendMessage@identifier,c
 13869  000156  0E00               	movlw	0
 13870  000158  6E2F               	movwf	i1CANsendMessage@identifier+1,c
 13871  00015A  0E00               	movlw	0
 13872  00015C  6E30               	movwf	i1CANsendMessage@identifier+2,c
 13873  00015E  0E00               	movlw	0
 13874  000160  6E31               	movwf	i1CANsendMessage@identifier+3,c
 13875  000162  0E53               	movlw	low _data
 13876  000164  6E32               	movwf	i1CANsendMessage@data,c
 13877  000166  0E01               	movlw	high _data
 13878  000168  6E33               	movwf	i1CANsendMessage@data+1,c
 13879  00016A  0E08               	movlw	8
 13880  00016C  6E34               	movwf	i1CANsendMessage@dataLength,c
 13881  00016E  0EBC               	movlw	188
 13882  000170  6E35               	movwf	i1CANsendMessage@flags,c
 13883  000172  ECA9  F015         	call	i1_CANsendMessage	;wreg free
 13884                           
 13885                           ;parcheggio.c: 158: delay_ms(30);
 13886  000176  0E00               	movlw	0
 13887  000178  6E35               	movwf	i1delay_ms@value_ms+1,c
 13888  00017A  0E1E               	movlw	30
 13889  00017C  6E34               	movwf	i1delay_ms@value_ms,c
 13890  00017E  EC25  F032         	call	i1_delay_ms	;wreg free
 13891  000182  00FF               	reset		;# 
 13892  000184  D000               	goto	i1l6045
 13893  000186                     i1l6045:
 13894                           
 13895                           ;parcheggio.c: 160: }
 13896                           ;parcheggio.c: 161: }
 13897                           ;parcheggio.c: 163: MUX_index++;
 13898  000186  2A21               	incf	_MUX_index,f,c	;volatile
 13899                           
 13900                           ;parcheggio.c: 164: if (activation == 0) {
 13901  000188  B256               	btfsc	_activation/(0+8),_activation& (0+7),c	;volatile
 13902  00018A  D015               	goto	i1l6053
 13903                           
 13904                           ;parcheggio.c: 165: unsigned char MUX_index_collision [] = {3, 6};
 13905  00018C  C1E0  F053         	movff	ISR_Bassa@F16865,ISR_Bassa@MUX_index_collision
 13906  000190  C1E1  F054         	movff	ISR_Bassa@F16865+1,ISR_Bassa@MUX_index_collision+1
 13907                           
 13908                           ;parcheggio.c: 166: MUX_toggle = ~MUX_toggle;
 13909  000194  7056               	btg	_MUX_toggle/(0+8),_MUX_toggle& (0+7),c	;volatile
 13910                           
 13911                           ;parcheggio.c: 167: MUX_index = MUX_index_collision[MUX_toggle];
 13912  000196  A056               	btfss	_MUX_toggle/(0+8),_MUX_toggle& (0+7),c	;volatile
 13913  000198  D002               	goto	i1u743_20
 13914  00019A  0E01               	movlw	1
 13915  00019C  D001               	goto	i1u744_20
 13916  00019E                     i1u743_20:
 13917  00019E  0E00               	movlw	0
 13918  0001A0                     i1u744_20:
 13919  0001A0  6E3E               	movwf	??_ISR_Bassa& (0+255),c
 13920  0001A2  6A3F               	clrf	(??_ISR_Bassa+1)& (0+255),c
 13921  0001A4  0E53               	movlw	low ISR_Bassa@MUX_index_collision
 13922  0001A6  243E               	addwf	??_ISR_Bassa,w,c
 13923  0001A8  6ED9               	movwf	fsr2l,c
 13924  0001AA  0E00               	movlw	high ISR_Bassa@MUX_index_collision
 13925  0001AC  203F               	addwfc	??_ISR_Bassa+1,w,c
 13926  0001AE  6EDA               	movwf	fsr2h,c
 13927  0001B0  50DF               	movf	indf2,w,c
 13928  0001B2  6E21               	movwf	_MUX_index,c	;volatile
 13929  0001B4  D000               	goto	i1l6053
 13930  0001B6                     i1l6053:
 13931                           
 13932                           ;parcheggio.c: 168: }
 13933                           ;parcheggio.c: 170: if (MUX_index == 8) {
 13934  0001B6  0E08               	movlw	8
 13935  0001B8  1821               	xorwf	_MUX_index,w,c	;volatile
 13936  0001BA  A4D8               	btfss	status,2,c
 13937  0001BC  D002               	goto	i1l713
 13938                           
 13939                           ;parcheggio.c: 171: MUX_index = 0;
 13940  0001BE  0E00               	movlw	0
 13941  0001C0  6E21               	movwf	_MUX_index,c	;volatile
 13942  0001C2                     i1l713:
 13943                           
 13944                           ;parcheggio.c: 172: }
 13945                           ;parcheggio.c: 174: unsigned char PORTA_temp = 0;
 13946  0001C2  0E00               	movlw	0
 13947  0001C4  6E55               	movwf	ISR_Bassa@PORTA_temp,c
 13948                           
 13949                           ;parcheggio.c: 175: PORTA_temp = MUX_select[MUX_index];
 13950  0001C6  5021               	movf	_MUX_index,w,c	;volatile
 13951  0001C8  0D01               	mullw	1
 13952  0001CA  0E00               	movlw	low _MUX_select
 13953  0001CC  24F3               	addwf	prodl,w,c
 13954  0001CE  6ED9               	movwf	fsr2l,c
 13955  0001D0  0E01               	movlw	high _MUX_select
 13956  0001D2  20F4               	addwfc	prodh,w,c
 13957  0001D4  6EDA               	movwf	fsr2h,c
 13958  0001D6  50DF               	movf	indf2,w,c
 13959  0001D8  6E55               	movwf	ISR_Bassa@PORTA_temp,c
 13960                           
 13961                           ;parcheggio.c: 176: PORTA = PORTA_temp;
 13962  0001DA  C055  FF80         	movff	ISR_Bassa@PORTA_temp,3968	;volatile
 13963                           
 13964                           ;parcheggio.c: 178: TRISBbits.RB0 = 0;
 13965  0001DE  9093               	bcf	3987,0,c	;volatile
 13966                           
 13967                           ;parcheggio.c: 179: LATBbits.LATB0 = 1;
 13968  0001E0  808A               	bsf	3978,0,c	;volatile
 13969                           
 13970                           ;parcheggio.c: 180: _delay((unsigned long)((15)*(16000000/4000000.0)));
 13971  0001E2  0E14               	movlw	20
 13972  0001E4                     i1u898_27:
 13973  0001E4  2EE8               	decfsz	wreg,f,c
 13974  0001E6  D7FE               	goto	i1u898_27
 13975                           
 13976                           ;parcheggio.c: 181: distance_error = 1;
 13977  0001E8  8A56               	bsf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13978                           
 13979                           ;parcheggio.c: 182: LATBbits.LATB0 = 0;
 13980  0001EA  908A               	bcf	3978,0,c	;volatile
 13981                           
 13982                           ;parcheggio.c: 183: TRISBbits.RB0 = 1;
 13983  0001EC  8093               	bsf	3987,0,c	;volatile
 13984                           
 13985                           ;parcheggio.c: 184: INTCONbits.INT0IF = 0;
 13986  0001EE  92F2               	bcf	intcon,1,c	;volatile
 13987                           
 13988                           ;parcheggio.c: 185: INTCON2bits.INTEDG0 = 1;
 13989  0001F0  8CF1               	bsf	intcon2,6,c	;volatile
 13990                           
 13991                           ;parcheggio.c: 186: INTCONbits.INT0IE = 1;
 13992  0001F2  88F2               	bsf	intcon,4,c	;volatile
 13993                           
 13994                           ;parcheggio.c: 187: INTCONbits.TMR0IF = 0;
 13995  0001F4  94F2               	bcf	intcon,2,c	;volatile
 13996  0001F6  D000               	goto	i1l6081
 13997  0001F8                     i1l6081:
 13998                           
 13999                           ;parcheggio.c: 189: }
 14000                           ;parcheggio.c: 192: if ((PIR3bits.RXB0IF == 1) || (PIR3bits.RXB1IF == 1)) {
 14001  0001F8  B0A4               	btfsc	4004,0,c	;volatile
 14002  0001FA  D002               	goto	i1l6085
 14003  0001FC  A2A4               	btfss	4004,1,c	;volatile
 14004  0001FE  D073               	goto	i1l724
 14005  000200                     i1l6085:
 14006                           
 14007                           ;parcheggio.c: 193: if (CANisRxReady() == 1) {
 14008  000200  ECCA  F032         	call	_CANisRxReady	;wreg free
 14009  000204  06E8               	decf	wreg,f,c
 14010  000206  A4D8               	btfss	status,2,c
 14011  000208  D06E               	goto	i1l724
 14012                           
 14013                           ;parcheggio.c: 194: CANreceiveMessage(&msg);
 14014  00020A  0E44               	movlw	low _msg
 14015  00020C  6E2E               	movwf	CANreceiveMessage@msg,c
 14016  00020E  0E01               	movlw	high _msg
 14017  000210  6E2F               	movwf	CANreceiveMessage@msg+1,c
 14018  000212  ECD2  F01B         	call	_CANreceiveMessage	;wreg free
 14019                           
 14020                           ;parcheggio.c: 196: if (msg.identifier == 0b00000001111) {
 14021  000216  0E0F               	movlw	15
 14022  000218  0101               	movlb	1	; () banked
 14023  00021A  1944               	xorwf	_msg& (0+255),w,b
 14024  00021C  0101               	movlb	1	; () banked
 14025  00021E  1145               	iorwf	(_msg+1)& (0+255),w,b
 14026  000220  0101               	movlb	1	; () banked
 14027  000222  1146               	iorwf	(_msg+2)& (0+255),w,b
 14028  000224  0101               	movlb	1	; () banked
 14029  000226  1147               	iorwf	(_msg+3)& (0+255),w,b
 14030  000228  A4D8               	btfss	status,2,c
 14031  00022A  D002               	goto	i1l6093
 14032                           
 14033                           ; BSR set to: 1
 14034                           ;parcheggio.c: 197: asd = 0;
 14035  00022C  9456               	bcf	_asd/(0+8),_asd& (0+7),c	;volatile
 14036  00022E  D000               	goto	i1l6093
 14037  000230                     i1l6093:
 14038                           
 14039                           ; BSR set to: 1
 14040                           ;parcheggio.c: 198: }
 14041                           ;parcheggio.c: 200: if ((msg.identifier == 0b00000001001) && (msg.RTR != 1)) {
 14042  000230  0E09               	movlw	9
 14043  000232  0101               	movlb	1	; () banked
 14044  000234  1944               	xorwf	_msg& (0+255),w,b
 14045  000236  0101               	movlb	1	; () banked
 14046  000238  1145               	iorwf	(_msg+1)& (0+255),w,b
 14047  00023A  0101               	movlb	1	; () banked
 14048  00023C  1146               	iorwf	(_msg+2)& (0+255),w,b
 14049  00023E  0101               	movlb	1	; () banked
 14050  000240  1147               	iorwf	(_msg+3)& (0+255),w,b
 14051  000242  A4D8               	btfss	status,2,c
 14052  000244  D02E               	goto	i1l6109
 14053                           
 14054                           ; BSR set to: 1
 14055  000246  0101               	movlb	1	; () banked
 14056  000248  0552               	decf	(_msg+14)& (0+255),w,b
 14057  00024A  B4D8               	btfsc	status,2,c
 14058  00024C  D02A               	goto	i1l6109
 14059                           
 14060                           ; BSR set to: 1
 14061                           ;parcheggio.c: 201: distance_average = 0;
 14062  00024E  0E00               	movlw	0
 14063  000250  0100               	movlb	0	; () banked
 14064  000252  6FE4               	movwf	(_distance_average+1)& (0+255),b	;volatile
 14065  000254  0E00               	movlw	0
 14066  000256  6FE3               	movwf	_distance_average& (0+255),b	;volatile
 14067                           
 14068                           ; BSR set to: 0
 14069                           ;parcheggio.c: 202: distance_dx = msg.data[1];
 14070  000258  C149  F019         	movff	_msg+5,_distance_dx	;volatile
 14071  00025C  6A1A               	clrf	_distance_dx+1,c	;volatile
 14072                           
 14073                           ;parcheggio.c: 203: distance_dx = ((distance_dx << 8) | msg.data[0]);
 14074  00025E  5019               	movf	_distance_dx,w,c	;volatile
 14075  000260  6E3E               	movwf	??_ISR_Bassa& (0+255),c
 14076  000262  0101               	movlb	1	; () banked
 14077  000264  5148               	movf	(_msg+4)& (0+255),w,b
 14078  000266  6E19               	movwf	_distance_dx,c	;volatile
 14079  000268  C03E  F01A         	movff	??_ISR_Bassa,_distance_dx+1	;volatile
 14080                           
 14081                           ; BSR set to: 1
 14082                           ;parcheggio.c: 204: distance_sx = msg.data[3];
 14083  00026C  C14B  F01B         	movff	_msg+7,_distance_sx	;volatile
 14084  000270  6A1C               	clrf	_distance_sx+1,c	;volatile
 14085                           
 14086                           ;parcheggio.c: 205: distance_sx = ((distance_sx << 8) | msg.data[2]);
 14087  000272  501B               	movf	_distance_sx,w,c	;volatile
 14088  000274  6E3E               	movwf	??_ISR_Bassa& (0+255),c
 14089  000276  0101               	movlb	1	; () banked
 14090  000278  514A               	movf	(_msg+6)& (0+255),w,b
 14091  00027A  6E1B               	movwf	_distance_sx,c	;volatile
 14092  00027C  C03E  F01C         	movff	??_ISR_Bassa,_distance_sx+1	;volatile
 14093                           
 14094                           ; BSR set to: 1
 14095                           ;parcheggio.c: 206: distance_average = (distance_sx + distance_dx) / 2;
 14096  000280  5019               	movf	_distance_dx,w,c	;volatile
 14097  000282  241B               	addwf	_distance_sx,w,c	;volatile
 14098  000284  6E3E               	movwf	??_ISR_Bassa& (0+255),c
 14099  000286  501A               	movf	_distance_dx+1,w,c	;volatile
 14100  000288  201C               	addwfc	_distance_sx+1,w,c	;volatile
 14101  00028A  6E3F               	movwf	(??_ISR_Bassa+1)& (0+255),c
 14102  00028C  90D8               	bcf	status,0,c
 14103  00028E  303F               	rrcf	??_ISR_Bassa+1,w,c
 14104  000290  6E40               	movwf	(??_ISR_Bassa+2)& (0+255),c
 14105  000292  303E               	rrcf	??_ISR_Bassa,w,c
 14106  000294  0100               	movlb	0	; () banked
 14107  000296  6FE3               	movwf	_distance_average& (0+255),b	;volatile
 14108  000298  C040  F0E4         	movff	??_ISR_Bassa+2,_distance_average+1	;volatile
 14109                           
 14110                           ; BSR set to: 0
 14111                           ;parcheggio.c: 207: distance_received = 1;
 14112  00029C  8C56               	bsf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
 14113                           
 14114                           ; BSR set to: 0
 14115                           ;parcheggio.c: 208: distance_received1 = 1;
 14116  00029E  8E56               	bsf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
 14117  0002A0  D000               	goto	i1l6109
 14118  0002A2                     i1l6109:
 14119                           
 14120                           ;parcheggio.c: 209: }
 14121                           ;parcheggio.c: 211: if (msg.identifier == 0b00000001100) {
 14122  0002A2  0E0C               	movlw	12
 14123  0002A4  0101               	movlb	1	; () banked
 14124  0002A6  1944               	xorwf	_msg& (0+255),w,b
 14125  0002A8  0101               	movlb	1	; () banked
 14126  0002AA  1145               	iorwf	(_msg+1)& (0+255),w,b
 14127  0002AC  0101               	movlb	1	; () banked
 14128  0002AE  1146               	iorwf	(_msg+2)& (0+255),w,b
 14129  0002B0  0101               	movlb	1	; () banked
 14130  0002B2  1147               	iorwf	(_msg+3)& (0+255),w,b
 14131  0002B4  A4D8               	btfss	status,2,c
 14132  0002B6  D009               	goto	i1l6115
 14133                           
 14134                           ; BSR set to: 1
 14135                           ;parcheggio.c: 212: if (msg.data[0] == 1) {
 14136  0002B8  0101               	movlb	1	; () banked
 14137  0002BA  0548               	decf	(_msg+4)& (0+255),w,b
 14138  0002BC  A4D8               	btfss	status,2,c
 14139  0002BE  D003               	goto	i1l721
 14140                           
 14141                           ; BSR set to: 1
 14142                           ;parcheggio.c: 213: activation = 1;
 14143  0002C0  8256               	bsf	_activation/(0+8),_activation& (0+7),c	;volatile
 14144                           
 14145                           ;parcheggio.c: 214: PORTBbits.RB6 = 1;
 14146  0002C2  8C81               	bsf	3969,6,c	;volatile
 14147                           
 14148                           ;parcheggio.c: 215: } else {
 14149  0002C4  D002               	goto	i1l6115
 14150  0002C6                     i1l721:
 14151                           
 14152                           ; BSR set to: 1
 14153  0002C6  00FF               	reset		;# 
 14154  0002C8  D000               	goto	i1l6115
 14155  0002CA                     i1l6115:
 14156                           
 14157                           ;parcheggio.c: 217: }
 14158                           ;parcheggio.c: 218: }
 14159                           ;parcheggio.c: 220: if (msg.identifier == 0b00000001110) {
 14160  0002CA  0E0E               	movlw	14
 14161  0002CC  0101               	movlb	1	; () banked
 14162  0002CE  1944               	xorwf	_msg& (0+255),w,b
 14163  0002D0  0101               	movlb	1	; () banked
 14164  0002D2  1145               	iorwf	(_msg+1)& (0+255),w,b
 14165  0002D4  0101               	movlb	1	; () banked
 14166  0002D6  1146               	iorwf	(_msg+2)& (0+255),w,b
 14167  0002D8  0101               	movlb	1	; () banked
 14168  0002DA  1147               	iorwf	(_msg+3)& (0+255),w,b
 14169  0002DC  B4D8               	btfsc	status,2,c
 14170                           
 14171                           ; BSR set to: 1
 14172                           ;parcheggio.c: 221: start_operation = 1;
 14173  0002DE  8C57               	bsf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 14174                           
 14175                           ; BSR set to: 1
 14176                           ;parcheggio.c: 222: }
 14177                           ;parcheggio.c: 228: PIR3bits.RXB0IF = 0;
 14178  0002E0  90A4               	bcf	4004,0,c	;volatile
 14179                           
 14180                           ;parcheggio.c: 229: PIR3bits.RXB1IF = 0;
 14181  0002E2  92A4               	bcf	4004,1,c	;volatile
 14182                           
 14183                           ; BSR set to: 1
 14184  0002E4  D000               	goto	i1l724
 14185  0002E6                     i1l724:
 14186  0002E6  C052  FFF5         	movff	??_ISR_Bassa+20,tablat
 14187  0002EA  C051  FFF8         	movff	??_ISR_Bassa+19,tblptru
 14188  0002EE  C050  FFF7         	movff	??_ISR_Bassa+18,tblptrh
 14189  0002F2  C04F  FFF6         	movff	??_ISR_Bassa+17,tblptrl
 14190  0002F6  C04E  FFF4         	movff	??_ISR_Bassa+16,prodh
 14191  0002FA  C04D  FFF3         	movff	??_ISR_Bassa+15,prodl
 14192  0002FE  C04C  FFDA         	movff	??_ISR_Bassa+14,fsr2h
 14193  000302  C04B  FFD9         	movff	??_ISR_Bassa+13,fsr2l
 14194  000306  C04A  FFE2         	movff	??_ISR_Bassa+12,fsr1h
 14195  00030A  C049  FFE1         	movff	??_ISR_Bassa+11,fsr1l
 14196  00030E  C048  FFEA         	movff	??_ISR_Bassa+10,fsr0h
 14197  000312  C047  FFE9         	movff	??_ISR_Bassa+9,fsr0l
 14198  000316  C046  FFFB         	movff	??_ISR_Bassa+8,pclatu
 14199  00031A  C045  FFFA         	movff	??_ISR_Bassa+7,pclath
 14200  00031E  C044  FFE0         	movff	??_ISR_Bassa+6,bsr
 14201  000322  C043  FFE8         	movff	??_ISR_Bassa+5,wreg
 14202  000326  C042  FFD8         	movff	??_ISR_Bassa+4,status
 14203  00032A  0010               	retfie	
 14204  00032C                     __end_of_ISR_Bassa:
 14205                           	opt stack 0
 14206                           pclatu	equ	0xFFB
 14207                           pclath	equ	0xFFA
 14208                           tblptru	equ	0xFF8
 14209                           tblptrh	equ	0xFF7
 14210                           tblptrl	equ	0xFF6
 14211                           tablat	equ	0xFF5
 14212                           prodh	equ	0xFF4
 14213                           prodl	equ	0xFF3
 14214                           intcon	equ	0xFF2
 14215                           intcon2	equ	0xFF1
 14216                           postinc0	equ	0xFEE
 14217                           fsr0h	equ	0xFEA
 14218                           fsr0l	equ	0xFE9
 14219                           wreg	equ	0xFE8
 14220                           fsr1h	equ	0xFE2
 14221                           fsr1l	equ	0xFE1
 14222                           bsr	equ	0xFE0
 14223                           indf2	equ	0xFDF
 14224                           postinc2	equ	0xFDE
 14225                           postdec2	equ	0xFDD
 14226                           plusw2	equ	0xFDB
 14227                           fsr2h	equ	0xFDA
 14228                           fsr2l	equ	0xFD9
 14229                           status	equ	0xFD8
 14230                           
 14231 ;; *************** function i1_delay_ms *****************
 14232 ;; Defined at:
 14233 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
 14234 ;; Parameters:    Size  Location     Type
 14235 ;;  value_ms        2    6[COMRAM] unsigned int 
 14236 ;; Auto vars:     Size  Location     Type
 14237 ;;		None
 14238 ;; Return value:  Size  Location     Type
 14239 ;;		None               void
 14240 ;; Registers used:
 14241 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14242 ;; Tracked objects:
 14243 ;;		On entry : 0/0
 14244 ;;		On exit  : 0/0
 14245 ;;		Unchanged: 0/0
 14246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14247 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14250 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14251 ;;Total ram usage:        2 bytes
 14252 ;; Hardware stack levels used:    1
 14253 ;; Hardware stack levels required when called:    3
 14254 ;; This function calls:
 14255 ;;		i1___wmul
 14256 ;; This function is called by:
 14257 ;;		_ISR_Bassa
 14258 ;; This function uses a non-reentrant model
 14259 ;;
 14260                           
 14261                           	psect	text38
 14262  00644A                     __ptext38:
 14263                           	opt stack 0
 14264  00644A                     i1_delay_ms:
 14265                           	opt stack 19
 14266                           
 14267                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
 14268                           
 14269                           ;incstack = 0
 14270  00644A  C0E8  F02E         	movff	_delay_quartz_frequency_value,i1___wmul@multiplier	;volatile
 14271  00644E  6A2F               	clrf	i1___wmul@multiplier+1,c
 14272  006450  C034  F030         	movff	i1delay_ms@value_ms,i1___wmul@multiplicand
 14273  006454  C035  F031         	movff	i1delay_ms@value_ms+1,i1___wmul@multiplicand+1
 14274  006458  EC87  F032         	call	i1___wmul	;wreg free
 14275  00645C  C02E  F0E1         	movff	?i1___wmul,_clock_counter_reference	;volatile
 14276  006460  C02F  F0E2         	movff	?i1___wmul+1,_clock_counter_reference+1	;volatile
 14277                           
 14278                           ;src\delay.c: 75: while (clock_counter_reference) {
 14279  006464  D007               	goto	i1l567
 14280  006466                     i1l5939:
 14281                           
 14282                           ;src\delay.c: 85: _delay(240);
 14283  006466  0E50               	movlw	80
 14284  006468                     i1u899_27:
 14285  006468  2EE8               	decfsz	wreg,f,c
 14286  00646A  D7FE               	goto	i1u899_27
 14287                           
 14288                           ;src\delay.c: 88: clock_counter_reference--;
 14289  00646C  0100               	movlb	0	; () banked
 14290  00646E  07E1               	decf	_clock_counter_reference& (0+255),f,b	;volatile
 14291  006470  A0D8               	btfss	status,0,c
 14292  006472  07E2               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
 14293  006474                     i1l567:
 14294  006474  0100               	movlb	0	; () banked
 14295  006476  51E1               	movf	_clock_counter_reference& (0+255),w,b	;volatile
 14296  006478  0100               	movlb	0	; () banked
 14297  00647A  11E2               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
 14298  00647C  A4D8               	btfss	status,2,c
 14299  00647E  D7F3               	goto	i1l5939
 14300                           
 14301                           ; BSR set to: 0
 14302                           
 14303                           ; BSR set to: 0
 14304  006480  0012               	return		;funcret
 14305  006482                     __end_ofi1_delay_ms:
 14306                           	opt stack 0
 14307                           pclatu	equ	0xFFB
 14308                           pclath	equ	0xFFA
 14309                           tblptru	equ	0xFF8
 14310                           tblptrh	equ	0xFF7
 14311                           tblptrl	equ	0xFF6
 14312                           tablat	equ	0xFF5
 14313                           prodh	equ	0xFF4
 14314                           prodl	equ	0xFF3
 14315                           intcon	equ	0xFF2
 14316                           intcon2	equ	0xFF1
 14317                           postinc0	equ	0xFEE
 14318                           fsr0h	equ	0xFEA
 14319                           fsr0l	equ	0xFE9
 14320                           wreg	equ	0xFE8
 14321                           fsr1h	equ	0xFE2
 14322                           fsr1l	equ	0xFE1
 14323                           bsr	equ	0xFE0
 14324                           indf2	equ	0xFDF
 14325                           postinc2	equ	0xFDE
 14326                           postdec2	equ	0xFDD
 14327                           plusw2	equ	0xFDB
 14328                           fsr2h	equ	0xFDA
 14329                           fsr2l	equ	0xFD9
 14330                           status	equ	0xFD8
 14331                           
 14332 ;; *************** function i1___wmul *****************
 14333 ;; Defined at:
 14334 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 14335 ;; Parameters:    Size  Location     Type
 14336 ;;  multiplier      2    0[COMRAM] unsigned int 
 14337 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14338 ;; Auto vars:     Size  Location     Type
 14339 ;;  __wmul          2    4[COMRAM] unsigned int 
 14340 ;; Return value:  Size  Location     Type
 14341 ;;                  2    0[COMRAM] unsigned int 
 14342 ;; Registers used:
 14343 ;;		wreg, status,2, status,0, prodl, prodh
 14344 ;; Tracked objects:
 14345 ;;		On entry : 0/0
 14346 ;;		On exit  : 0/0
 14347 ;;		Unchanged: 0/0
 14348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14349 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14350 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;Total ram usage:        6 bytes
 14354 ;; Hardware stack levels used:    1
 14355 ;; Hardware stack levels required when called:    2
 14356 ;; This function calls:
 14357 ;;		Nothing
 14358 ;; This function is called by:
 14359 ;;		i1_delay_ms
 14360 ;; This function uses a non-reentrant model
 14361 ;;
 14362                           
 14363                           	psect	text39
 14364  00650E                     __ptext39:
 14365                           	opt stack 0
 14366  00650E                     i1___wmul:
 14367                           	opt stack 19
 14368                           
 14369                           ; BSR set to: 0
 14370                           ;incstack = 0
 14371  00650E  502E               	movf	i1___wmul@multiplier,w,c
 14372  006510  0230               	mulwf	i1___wmul@multiplicand,c
 14373  006512  CFF3 F032          	movff	prodl,i1___wmul@product
 14374  006516  CFF4 F033          	movff	prodh,i1___wmul@product+1
 14375  00651A  502E               	movf	i1___wmul@multiplier,w,c
 14376  00651C  0231               	mulwf	i1___wmul@multiplicand+1,c
 14377  00651E  50F3               	movf	prodl,w,c
 14378  006520  2633               	addwf	i1___wmul@product+1,f,c
 14379  006522  502F               	movf	i1___wmul@multiplier+1,w,c
 14380  006524  0230               	mulwf	i1___wmul@multiplicand,c
 14381  006526  50F3               	movf	prodl,w,c
 14382  006528  2633               	addwf	i1___wmul@product+1,f,c
 14383  00652A  C032  F02E         	movff	i1___wmul@product,?i1___wmul
 14384  00652E  C033  F02F         	movff	i1___wmul@product+1,?i1___wmul+1
 14385  006532  0012               	return	
 14386  006534  0012               	return		;funcret
 14387  006536                     __end_ofi1___wmul:
 14388                           	opt stack 0
 14389                           pclatu	equ	0xFFB
 14390                           pclath	equ	0xFFA
 14391                           tblptru	equ	0xFF8
 14392                           tblptrh	equ	0xFF7
 14393                           tblptrl	equ	0xFF6
 14394                           tablat	equ	0xFF5
 14395                           prodh	equ	0xFF4
 14396                           prodl	equ	0xFF3
 14397                           intcon	equ	0xFF2
 14398                           intcon2	equ	0xFF1
 14399                           postinc0	equ	0xFEE
 14400                           fsr0h	equ	0xFEA
 14401                           fsr0l	equ	0xFE9
 14402                           wreg	equ	0xFE8
 14403                           fsr1h	equ	0xFE2
 14404                           fsr1l	equ	0xFE1
 14405                           bsr	equ	0xFE0
 14406                           indf2	equ	0xFDF
 14407                           postinc2	equ	0xFDE
 14408                           postdec2	equ	0xFDD
 14409                           plusw2	equ	0xFDB
 14410                           fsr2h	equ	0xFDA
 14411                           fsr2l	equ	0xFD9
 14412                           status	equ	0xFD8
 14413                           
 14414 ;; *************** function i1_can_send *****************
 14415 ;; Defined at:
 14416 ;;		line 463 in file "parcheggio.c"
 14417 ;; Parameters:    Size  Location     Type
 14418 ;;		None
 14419 ;; Auto vars:     Size  Location     Type
 14420 ;;		None
 14421 ;; Return value:  Size  Location     Type
 14422 ;;		None               void
 14423 ;; Registers used:
 14424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14425 ;; Tracked objects:
 14426 ;;		On entry : 0/0
 14427 ;;		On exit  : 0/0
 14428 ;;		Unchanged: 0/0
 14429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14434 ;;Total ram usage:        0 bytes
 14435 ;; Hardware stack levels used:    1
 14436 ;; Hardware stack levels required when called:    3
 14437 ;; This function calls:
 14438 ;;		i1_CANisTxReady
 14439 ;;		i1_CANsendMessage
 14440 ;; This function is called by:
 14441 ;;		_ISR_Bassa
 14442 ;; This function uses a non-reentrant model
 14443 ;;
 14444                           
 14445                           	psect	text40
 14446  005E12                     __ptext40:
 14447                           	opt stack 0
 14448  005E12                     i1_can_send:
 14449                           	opt stack 19
 14450                           
 14451                           ;parcheggio.c: 464: if (start_operation == 1) {
 14452                           
 14453                           ;incstack = 0
 14454  005E12  BC57               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 14455  005E14  D002               	goto	i1l5947
 14456  005E16  D057               	goto	i1l5967
 14457                           
 14458                           ;parcheggio.c: 466: while (CANisTxReady() != 1);
 14459  005E18  D000               	goto	i1l5947
 14460  005E1A                     i1l5947:
 14461  005E1A  ECAE  F032         	call	i1_CANisTxReady	;wreg free
 14462  005E1E  06E8               	decf	wreg,f,c
 14463  005E20  A4D8               	btfss	status,2,c
 14464  005E22  D7FB               	goto	i1l5947
 14465                           
 14466                           ;parcheggio.c: 467: CANsendMessage(0b00000000111, data_steering, 8, CAN_CONFIG_STD_MSG &
      +                           CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
 14467  005E24  0E07               	movlw	7
 14468  005E26  6E2E               	movwf	i1CANsendMessage@identifier,c
 14469  005E28  0E00               	movlw	0
 14470  005E2A  6E2F               	movwf	i1CANsendMessage@identifier+1,c
 14471  005E2C  0E00               	movlw	0
 14472  005E2E  6E30               	movwf	i1CANsendMessage@identifier+2,c
 14473  005E30  0E00               	movlw	0
 14474  005E32  6E31               	movwf	i1CANsendMessage@identifier+3,c
 14475  005E34  0E6B               	movlw	low _data_steering
 14476  005E36  6E32               	movwf	i1CANsendMessage@data,c
 14477  005E38  0E01               	movlw	high _data_steering
 14478  005E3A  6E33               	movwf	i1CANsendMessage@data+1,c
 14479  005E3C  0E08               	movlw	8
 14480  005E3E  6E34               	movwf	i1CANsendMessage@dataLength,c
 14481  005E40  0EBC               	movlw	188
 14482  005E42  6E35               	movwf	i1CANsendMessage@flags,c
 14483  005E44  ECA9  F015         	call	i1_CANsendMessage	;wreg free
 14484                           
 14485                           ;parcheggio.c: 470: data_speed[0] = set_speed;
 14486  005E48  C0E5  F163         	movff	_set_speed,_data_speed	;volatile
 14487                           
 14488                           ;parcheggio.c: 471: data_speed[1] = (set_speed >> 8);
 14489  005E4C  0100               	movlb	0	; () banked
 14490  005E4E  51E6               	movf	(_set_speed+1)& (0+255),w,b	;volatile
 14491  005E50  0101               	movlb	1	; () banked
 14492  005E52  6F64               	movwf	(_data_speed+1)& (0+255),b	;volatile
 14493                           
 14494                           ; BSR set to: 1
 14495                           ;parcheggio.c: 472: data_speed[2] = dir;
 14496  005E54  0E00               	movlw	0
 14497  005E56  B856               	btfsc	_dir/(0+8),_dir& (0+7),c	;volatile
 14498  005E58  0E01               	movlw	1
 14499  005E5A  0101               	movlb	1	; () banked
 14500  005E5C  6F65               	movwf	(_data_speed+2)& (0+255),b	;volatile
 14501                           
 14502                           ; BSR set to: 1
 14503                           
 14504                           ;parcheggio.c: 473: while (CANisTxReady() != 1);
 14505  005E5E  D000               	goto	i1l5957
 14506  005E60                     i1l5957:
 14507  005E60  ECAE  F032         	call	i1_CANisTxReady	;wreg free
 14508  005E64  06E8               	decf	wreg,f,c
 14509  005E66  A4D8               	btfss	status,2,c
 14510  005E68  D7FB               	goto	i1l5957
 14511                           
 14512                           ;parcheggio.c: 474: CANsendMessage(0b00000000101, data_speed, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
 14513  005E6A  0E05               	movlw	5
 14514  005E6C  6E2E               	movwf	i1CANsendMessage@identifier,c
 14515  005E6E  0E00               	movlw	0
 14516  005E70  6E2F               	movwf	i1CANsendMessage@identifier+1,c
 14517  005E72  0E00               	movlw	0
 14518  005E74  6E30               	movwf	i1CANsendMessage@identifier+2,c
 14519  005E76  0E00               	movlw	0
 14520  005E78  6E31               	movwf	i1CANsendMessage@identifier+3,c
 14521  005E7A  0E63               	movlw	low _data_speed
 14522  005E7C  6E32               	movwf	i1CANsendMessage@data,c
 14523  005E7E  0E01               	movlw	high _data_speed
 14524  005E80  6E33               	movwf	i1CANsendMessage@data+1,c
 14525  005E82  0E08               	movlw	8
 14526  005E84  6E34               	movwf	i1CANsendMessage@dataLength,c
 14527  005E86  0EBC               	movlw	188
 14528  005E88  6E35               	movwf	i1CANsendMessage@flags,c
 14529  005E8A  ECA9  F015         	call	i1_CANsendMessage	;wreg free
 14530                           
 14531                           ;parcheggio.c: 477: data_brake[1] = 0;
 14532  005E8E  0E00               	movlw	0
 14533  005E90  6E27               	movwf	_data_brake+1,c	;volatile
 14534                           
 14535                           ;parcheggio.c: 478: while (CANisTxReady() != 1);
 14536  005E92  D000               	goto	i1l5963
 14537  005E94                     i1l5963:
 14538  005E94  ECAE  F032         	call	i1_CANisTxReady	;wreg free
 14539  005E98  06E8               	decf	wreg,f,c
 14540  005E9A  A4D8               	btfss	status,2,c
 14541  005E9C  D7FB               	goto	i1l5963
 14542                           
 14543                           ;parcheggio.c: 479: CANsendMessage(0b00000000110, data_brake, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
 14544  005E9E  0E06               	movlw	6
 14545  005EA0  6E2E               	movwf	i1CANsendMessage@identifier,c
 14546  005EA2  0E00               	movlw	0
 14547  005EA4  6E2F               	movwf	i1CANsendMessage@identifier+1,c
 14548  005EA6  0E00               	movlw	0
 14549  005EA8  6E30               	movwf	i1CANsendMessage@identifier+2,c
 14550  005EAA  0E00               	movlw	0
 14551  005EAC  6E31               	movwf	i1CANsendMessage@identifier+3,c
 14552  005EAE  0E26               	movlw	low _data_brake
 14553  005EB0  6E32               	movwf	i1CANsendMessage@data,c
 14554  005EB2  0E00               	movlw	high _data_brake
 14555  005EB4  6E33               	movwf	i1CANsendMessage@data+1,c
 14556  005EB6  0E08               	movlw	8
 14557  005EB8  6E34               	movwf	i1CANsendMessage@dataLength,c
 14558  005EBA  0EBC               	movlw	188
 14559  005EBC  6E35               	movwf	i1CANsendMessage@flags,c
 14560  005EBE  ECA9  F015         	call	i1_CANsendMessage	;wreg free
 14561                           
 14562                           ;parcheggio.c: 480: } else {
 14563  005EC2  0012               	return	
 14564                           
 14565                           ;parcheggio.c: 481: while (CANisTxReady() != 1);
 14566  005EC4  D000               	goto	i1l5967
 14567  005EC6                     i1l5967:
 14568  005EC6  ECAE  F032         	call	i1_CANisTxReady	;wreg free
 14569  005ECA  06E8               	decf	wreg,f,c
 14570  005ECC  A4D8               	btfss	status,2,c
 14571  005ECE  D7FB               	goto	i1l5967
 14572                           
 14573                           ;parcheggio.c: 482: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
 14574  005ED0  0E10               	movlw	16
 14575  005ED2  6E2E               	movwf	i1CANsendMessage@identifier,c
 14576  005ED4  0E00               	movlw	0
 14577  005ED6  6E2F               	movwf	i1CANsendMessage@identifier+1,c
 14578  005ED8  0E00               	movlw	0
 14579  005EDA  6E30               	movwf	i1CANsendMessage@identifier+2,c
 14580  005EDC  0E00               	movlw	0
 14581  005EDE  6E31               	movwf	i1CANsendMessage@identifier+3,c
 14582  005EE0  0E5B               	movlw	low _data_correction
 14583  005EE2  6E32               	movwf	i1CANsendMessage@data,c
 14584  005EE4  0E01               	movlw	high _data_correction
 14585  005EE6  6E33               	movwf	i1CANsendMessage@data+1,c
 14586  005EE8  0E08               	movlw	8
 14587  005EEA  6E34               	movwf	i1CANsendMessage@dataLength,c
 14588  005EEC  0EBC               	movlw	188
 14589  005EEE  6E35               	movwf	i1CANsendMessage@flags,c
 14590  005EF0  ECA9  F015         	call	i1_CANsendMessage	;wreg free
 14591  005EF4  0012               	return	
 14592  005EF6  0012               	return		;funcret
 14593  005EF8                     __end_ofi1_can_send:
 14594                           	opt stack 0
 14595                           pclatu	equ	0xFFB
 14596                           pclath	equ	0xFFA
 14597                           tblptru	equ	0xFF8
 14598                           tblptrh	equ	0xFF7
 14599                           tblptrl	equ	0xFF6
 14600                           tablat	equ	0xFF5
 14601                           prodh	equ	0xFF4
 14602                           prodl	equ	0xFF3
 14603                           intcon	equ	0xFF2
 14604                           intcon2	equ	0xFF1
 14605                           postinc0	equ	0xFEE
 14606                           fsr0h	equ	0xFEA
 14607                           fsr0l	equ	0xFE9
 14608                           wreg	equ	0xFE8
 14609                           fsr1h	equ	0xFE2
 14610                           fsr1l	equ	0xFE1
 14611                           bsr	equ	0xFE0
 14612                           indf2	equ	0xFDF
 14613                           postinc2	equ	0xFDE
 14614                           postdec2	equ	0xFDD
 14615                           plusw2	equ	0xFDB
 14616                           fsr2h	equ	0xFDA
 14617                           fsr2l	equ	0xFD9
 14618                           status	equ	0xFD8
 14619                           
 14620 ;; *************** function i1_CANsendMessage *****************
 14621 ;; Defined at:
 14622 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 14623 ;; Parameters:    Size  Location     Type
 14624 ;;  identifier      4    0[COMRAM] unsigned long 
 14625 ;;  data            2    4[COMRAM] PTR unsigned char 
 14626 ;;		 -> data_speed(8), data_correction(8), data_test(8), data(8), 
 14627 ;;		 -> data_brake(8), data_steering(8), sensor_distance_short(8), 
 14628 ;;  dataLength      1    6[COMRAM] unsigned char 
 14629 ;;  flags           1    7[COMRAM] enum E16376
 14630 ;; Auto vars:     Size  Location     Type
 14631 ;;  CANsendMessa    4   12[COMRAM] unsigned long 
 14632 ;; Return value:  Size  Location     Type
 14633 ;;		None               void
 14634 ;; Registers used:
 14635 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14636 ;; Tracked objects:
 14637 ;;		On entry : 0/0
 14638 ;;		On exit  : 0/0
 14639 ;;		Unchanged: 0/0
 14640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14641 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14643 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14644 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14645 ;;Total ram usage:       16 bytes
 14646 ;; Hardware stack levels used:    1
 14647 ;; Hardware stack levels required when called:    2
 14648 ;; This function calls:
 14649 ;;		Nothing
 14650 ;; This function is called by:
 14651 ;;		_ISR_Bassa
 14652 ;;		i1_can_send
 14653 ;; This function uses a non-reentrant model
 14654 ;;
 14655                           
 14656                           	psect	text41
 14657  002B52                     __ptext41:
 14658                           	opt stack 0
 14659  002B52                     i1_CANsendMessage:
 14660                           	opt stack 19
 14661                           
 14662                           ;inc\CANlib.h: 296: unsigned long tamp;
 14663                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
 14664                           
 14665                           ;incstack = 0
 14666  002B52  010F               	movlb	15	; () banked
 14667  002B54  B740               	btfsc	64,3,b	;volatile
 14668  002B56  D118               	goto	i1l361
 14669                           
 14670                           ; BSR set to: 15
 14671                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
 14672  002B58  C034  FF45         	movff	i1CANsendMessage@dataLength,3909	;volatile
 14673                           
 14674                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
 14675  002B5C  AC35               	btfss	i1CANsendMessage@flags,6,c
 14676  002B5E  D003               	goto	i1l362
 14677                           
 14678                           ; BSR set to: 15
 14679                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
 14680  002B60  010F               	movlb	15	; () banked
 14681  002B62  8D45               	bsf	69,6,b	;volatile
 14682  002B64  D002               	goto	i1l363
 14683  002B66                     i1l362:
 14684                           
 14685                           ; BSR set to: 15
 14686                           ;inc\CANlib.h: 302: else
 14687                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
 14688  002B66  010F               	movlb	15	; () banked
 14689  002B68  9D45               	bcf	69,6,b	;volatile
 14690  002B6A                     i1l363:
 14691                           
 14692                           ; BSR set to: 15
 14693                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
 14694  002B6A  A635               	btfss	i1CANsendMessage@flags,3,c
 14695  002B6C  D067               	goto	i1l364
 14696                           
 14697                           ; BSR set to: 15
 14698                           ;inc\CANlib.h: 306: {
 14699                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
 14700  002B6E  502E               	movf	i1CANsendMessage@identifier,w,c
 14701  002B70  6E3A               	movwf	i1CANsendMessage@tamp,c
 14702  002B72  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 14703  002B74  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 14704  002B76  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 14705                           
 14706                           ; BSR set to: 15
 14707                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
 14708  002B78  C03A  FF44         	movff	i1CANsendMessage@tamp,3908	;volatile
 14709                           
 14710                           ; BSR set to: 15
 14711                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
 14712  002B7C  0E00               	movlw	0
 14713  002B7E  142E               	andwf	i1CANsendMessage@identifier,w,c
 14714  002B80  6E3A               	movwf	i1CANsendMessage@tamp,c
 14715  002B82  0EFF               	movlw	255
 14716  002B84  142F               	andwf	i1CANsendMessage@identifier+1,w,c
 14717  002B86  6E3B               	movwf	i1CANsendMessage@tamp+1,c
 14718  002B88  0E00               	movlw	0
 14719  002B8A  1430               	andwf	i1CANsendMessage@identifier+2,w,c
 14720  002B8C  6E3C               	movwf	i1CANsendMessage@tamp+2,c
 14721  002B8E  0E00               	movlw	0
 14722  002B90  1431               	andwf	i1CANsendMessage@identifier+3,w,c
 14723  002B92  6E3D               	movwf	i1CANsendMessage@tamp+3,c
 14724                           
 14725                           ; BSR set to: 15
 14726                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
 14727  002B94  C03A  F036         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14728  002B98  C03B  F037         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14729  002B9C  C03C  F038         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14730  002BA0  C03D  F039         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14731  002BA4  C037  F036         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14732  002BA8  C038  F037         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14733  002BAC  C039  F038         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14734  002BB0  6A39               	clrf	??i1_CANsendMessage+3,c
 14735  002BB2  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14736  002BB6  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14737  002BBA  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14738  002BBE  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14739                           
 14740                           ; BSR set to: 15
 14741                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
 14742  002BC2  C03A  FF43         	movff	i1CANsendMessage@tamp,3907	;volatile
 14743                           
 14744                           ; BSR set to: 15
 14745                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
 14746  002BC6  0E00               	movlw	0
 14747  002BC8  010F               	movlb	15	; () banked
 14748  002BCA  6F42               	movwf	66,b	;volatile
 14749                           
 14750                           ; BSR set to: 15
 14751                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
 14752  002BCC  010F               	movlb	15	; () banked
 14753  002BCE  8742               	bsf	66,3,b	;volatile
 14754                           
 14755                           ; BSR set to: 15
 14756                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
 14757  002BD0  A030               	btfss	i1CANsendMessage@identifier+2,0,c
 14758  002BD2  D002               	goto	i1l365
 14759                           
 14760                           ; BSR set to: 15
 14761                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
 14762  002BD4  010F               	movlb	15	; () banked
 14763  002BD6  8142               	bsf	66,0,b	;volatile
 14764  002BD8                     i1l365:
 14765                           
 14766                           ; BSR set to: 15
 14767                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
 14768  002BD8  A230               	btfss	i1CANsendMessage@identifier+2,1,c
 14769  002BDA  D002               	goto	i1l366
 14770                           
 14771                           ; BSR set to: 15
 14772                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
 14773  002BDC  010F               	movlb	15	; () banked
 14774  002BDE  8342               	bsf	66,1,b	;volatile
 14775  002BE0                     i1l366:
 14776                           
 14777                           ; BSR set to: 15
 14778                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
 14779  002BE0  A430               	btfss	i1CANsendMessage@identifier+2,2,c
 14780  002BE2  D002               	goto	i1l367
 14781                           
 14782                           ; BSR set to: 15
 14783                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
 14784  002BE4  010F               	movlb	15	; () banked
 14785  002BE6  8B42               	bsf	66,5,b	;volatile
 14786  002BE8                     i1l367:
 14787                           
 14788                           ; BSR set to: 15
 14789                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
 14790  002BE8  A630               	btfss	i1CANsendMessage@identifier+2,3,c
 14791  002BEA  D002               	goto	i1l368
 14792                           
 14793                           ; BSR set to: 15
 14794                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
 14795  002BEC  010F               	movlb	15	; () banked
 14796  002BEE  8D42               	bsf	66,6,b	;volatile
 14797  002BF0                     i1l368:
 14798                           
 14799                           ; BSR set to: 15
 14800                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
 14801  002BF0  A830               	btfss	i1CANsendMessage@identifier+2,4,c
 14802  002BF2  D003               	goto	i1l5233
 14803                           
 14804                           ; BSR set to: 15
 14805                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
 14806  002BF4  010F               	movlb	15	; () banked
 14807  002BF6  8F42               	bsf	66,7,b	;volatile
 14808  002BF8  D000               	goto	i1l5233
 14809  002BFA                     i1l5233:
 14810                           
 14811                           ; BSR set to: 15
 14812                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
 14813  002BFA  C02E  F036         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14814  002BFE  C02F  F037         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14815  002C02  C030  F038         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14816  002C06  C031  F039         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14817  002C0A  0E16               	movlw	22
 14818  002C0C  D005               	goto	i1u619_20
 14819  002C0E                     i1u619_25:
 14820  002C0E  90D8               	bcf	status,0,c
 14821  002C10  3239               	rrcf	??i1_CANsendMessage+3,f,c
 14822  002C12  3238               	rrcf	??i1_CANsendMessage+2,f,c
 14823  002C14  3237               	rrcf	??i1_CANsendMessage+1,f,c
 14824  002C16  3236               	rrcf	??i1_CANsendMessage,f,c
 14825  002C18                     i1u619_20:
 14826  002C18  2EE8               	decfsz	wreg,f,c
 14827  002C1A  D7F9               	goto	i1u619_25
 14828  002C1C  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14829  002C20  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14830  002C24  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14831  002C28  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14832                           
 14833                           ; BSR set to: 15
 14834                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
 14835  002C2C  503A               	movf	i1CANsendMessage@tamp,w,c
 14836  002C2E  6E3A               	movwf	i1CANsendMessage@tamp,c
 14837  002C30  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 14838  002C32  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 14839  002C34  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 14840                           
 14841                           ; BSR set to: 15
 14842                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
 14843  002C36  C03A  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14844                           
 14845                           ;inc\CANlib.h: 332: }
 14846  002C3A  D04E               	goto	i1l5253
 14847  002C3C                     i1l364:
 14848                           
 14849                           ; BSR set to: 15
 14850                           ;inc\CANlib.h: 334: else
 14851                           ;inc\CANlib.h: 336: {
 14852                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
 14853  002C3C  010F               	movlb	15	; () banked
 14854  002C3E  9742               	bcf	66,3,b	;volatile
 14855                           
 14856                           ; BSR set to: 15
 14857                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
 14858  002C40  C02E  F036         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14859  002C44  C02F  F037         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14860  002C48  C030  F038         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14861  002C4C  C031  F039         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14862  002C50  0E04               	movlw	4
 14863  002C52  D005               	goto	i1u620_20
 14864  002C54                     i1u620_25:
 14865  002C54  90D8               	bcf	status,0,c
 14866  002C56  3239               	rrcf	??i1_CANsendMessage+3,f,c
 14867  002C58  3238               	rrcf	??i1_CANsendMessage+2,f,c
 14868  002C5A  3237               	rrcf	??i1_CANsendMessage+1,f,c
 14869  002C5C  3236               	rrcf	??i1_CANsendMessage,f,c
 14870  002C5E                     i1u620_20:
 14871  002C5E  2EE8               	decfsz	wreg,f,c
 14872  002C60  D7F9               	goto	i1u620_25
 14873  002C62  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14874  002C66  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14875  002C6A  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14876  002C6E  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14877                           
 14878                           ; BSR set to: 15
 14879                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
 14880  002C72  503A               	movf	i1CANsendMessage@tamp,w,c
 14881  002C74  6E3A               	movwf	i1CANsendMessage@tamp,c
 14882  002C76  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 14883  002C78  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 14884  002C7A  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 14885                           
 14886                           ; BSR set to: 15
 14887                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
 14888  002C7C  C03A  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14889                           
 14890                           ; BSR set to: 15
 14891                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
 14892  002C80  0E07               	movlw	7
 14893  002C82  142E               	andwf	i1CANsendMessage@identifier,w,c
 14894  002C84  6E3A               	movwf	i1CANsendMessage@tamp,c
 14895  002C86  0E00               	movlw	0
 14896  002C88  142F               	andwf	i1CANsendMessage@identifier+1,w,c
 14897  002C8A  6E3B               	movwf	i1CANsendMessage@tamp+1,c
 14898  002C8C  0E00               	movlw	0
 14899  002C8E  1430               	andwf	i1CANsendMessage@identifier+2,w,c
 14900  002C90  6E3C               	movwf	i1CANsendMessage@tamp+2,c
 14901  002C92  0E00               	movlw	0
 14902  002C94  1431               	andwf	i1CANsendMessage@identifier+3,w,c
 14903  002C96  6E3D               	movwf	i1CANsendMessage@tamp+3,c
 14904                           
 14905                           ; BSR set to: 15
 14906                           ;inc\CANlib.h: 344: tamp = tamp << 5;
 14907  002C98  C03A  F036         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14908  002C9C  C03B  F037         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14909  002CA0  C03C  F038         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14910  002CA4  C03D  F039         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14911  002CA8  0E05               	movlw	5
 14912  002CAA                     i1u621_25:
 14913  002CAA  90D8               	bcf	status,0,c
 14914  002CAC  3636               	rlcf	??i1_CANsendMessage,f,c
 14915  002CAE  3637               	rlcf	??i1_CANsendMessage+1,f,c
 14916  002CB0  3638               	rlcf	??i1_CANsendMessage+2,f,c
 14917  002CB2  3639               	rlcf	??i1_CANsendMessage+3,f,c
 14918  002CB4  2EE8               	decfsz	wreg,f,c
 14919  002CB6  D7F9               	goto	i1u621_25
 14920  002CB8  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14921  002CBC  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14922  002CC0  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14923  002CC4  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14924                           
 14925                           ; BSR set to: 15
 14926                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
 14927  002CC8  010F               	movlb	15	; () banked
 14928  002CCA  5142               	movf	66,w,b	;volatile
 14929  002CCC  0B1F               	andlw	31
 14930  002CCE  010F               	movlb	15	; () banked
 14931  002CD0  6F42               	movwf	66,b	;volatile
 14932                           
 14933                           ; BSR set to: 15
 14934                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
 14935  002CD2  C03A  FF42         	movff	i1CANsendMessage@tamp,3906	;volatile
 14936  002CD6  D000               	goto	i1l5253
 14937  002CD8                     i1l5253:
 14938                           
 14939                           ; BSR set to: 15
 14940                           ;inc\CANlib.h: 347: }
 14941                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
 14942  002CD8  A035               	btfss	i1CANsendMessage@flags,0,c
 14943  002CDA  D003               	goto	i1l371
 14944                           
 14945                           ; BSR set to: 15
 14946                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
 14947  002CDC  010F               	movlb	15	; () banked
 14948  002CDE  8140               	bsf	64,0,b	;volatile
 14949  002CE0  D002               	goto	i1l372
 14950  002CE2                     i1l371:
 14951                           
 14952                           ; BSR set to: 15
 14953                           ;inc\CANlib.h: 351: else
 14954                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
 14955  002CE2  010F               	movlb	15	; () banked
 14956  002CE4  9140               	bcf	64,0,b	;volatile
 14957  002CE6                     i1l372:
 14958                           
 14959                           ; BSR set to: 15
 14960                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
 14961  002CE6  A235               	btfss	i1CANsendMessage@flags,1,c
 14962  002CE8  D003               	goto	i1l373
 14963                           
 14964                           ; BSR set to: 15
 14965                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
 14966  002CEA  010F               	movlb	15	; () banked
 14967  002CEC  8340               	bsf	64,1,b	;volatile
 14968  002CEE  D003               	goto	i1l5259
 14969  002CF0                     i1l373:
 14970                           
 14971                           ; BSR set to: 15
 14972                           ;inc\CANlib.h: 355: else
 14973                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
 14974  002CF0  010F               	movlb	15	; () banked
 14975  002CF2  9340               	bcf	64,1,b	;volatile
 14976  002CF4  D000               	goto	i1l5259
 14977  002CF6                     i1l5259:
 14978                           
 14979                           ; BSR set to: 15
 14980                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
 14981  002CF6  C032  FFD9         	movff	i1CANsendMessage@data,fsr2l
 14982  002CFA  C033  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 14983  002CFE  50DF               	movf	indf2,w,c
 14984  002D00  010F               	movlb	15	; () banked
 14985  002D02  6F46               	movwf	70,b	;volatile
 14986                           
 14987                           ; BSR set to: 15
 14988                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
 14989  002D04  EE20 F001          	lfsr	2,1
 14990  002D08  5032               	movf	i1CANsendMessage@data,w,c
 14991  002D0A  26D9               	addwf	fsr2l,f,c
 14992  002D0C  5033               	movf	i1CANsendMessage@data+1,w,c
 14993  002D0E  22DA               	addwfc	fsr2h,f,c
 14994  002D10  50DF               	movf	indf2,w,c
 14995  002D12  010F               	movlb	15	; () banked
 14996  002D14  6F47               	movwf	71,b	;volatile
 14997                           
 14998                           ; BSR set to: 15
 14999                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
 15000  002D16  EE20 F002          	lfsr	2,2
 15001  002D1A  5032               	movf	i1CANsendMessage@data,w,c
 15002  002D1C  26D9               	addwf	fsr2l,f,c
 15003  002D1E  5033               	movf	i1CANsendMessage@data+1,w,c
 15004  002D20  22DA               	addwfc	fsr2h,f,c
 15005  002D22  50DF               	movf	indf2,w,c
 15006  002D24  010F               	movlb	15	; () banked
 15007  002D26  6F48               	movwf	72,b	;volatile
 15008                           
 15009                           ; BSR set to: 15
 15010                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
 15011  002D28  EE20 F003          	lfsr	2,3
 15012  002D2C  5032               	movf	i1CANsendMessage@data,w,c
 15013  002D2E  26D9               	addwf	fsr2l,f,c
 15014  002D30  5033               	movf	i1CANsendMessage@data+1,w,c
 15015  002D32  22DA               	addwfc	fsr2h,f,c
 15016  002D34  50DF               	movf	indf2,w,c
 15017  002D36  010F               	movlb	15	; () banked
 15018  002D38  6F49               	movwf	73,b	;volatile
 15019                           
 15020                           ; BSR set to: 15
 15021                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
 15022  002D3A  EE20 F004          	lfsr	2,4
 15023  002D3E  5032               	movf	i1CANsendMessage@data,w,c
 15024  002D40  26D9               	addwf	fsr2l,f,c
 15025  002D42  5033               	movf	i1CANsendMessage@data+1,w,c
 15026  002D44  22DA               	addwfc	fsr2h,f,c
 15027  002D46  50DF               	movf	indf2,w,c
 15028  002D48  010F               	movlb	15	; () banked
 15029  002D4A  6F4A               	movwf	74,b	;volatile
 15030                           
 15031                           ; BSR set to: 15
 15032                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
 15033  002D4C  EE20 F005          	lfsr	2,5
 15034  002D50  5032               	movf	i1CANsendMessage@data,w,c
 15035  002D52  26D9               	addwf	fsr2l,f,c
 15036  002D54  5033               	movf	i1CANsendMessage@data+1,w,c
 15037  002D56  22DA               	addwfc	fsr2h,f,c
 15038  002D58  50DF               	movf	indf2,w,c
 15039  002D5A  010F               	movlb	15	; () banked
 15040  002D5C  6F4B               	movwf	75,b	;volatile
 15041                           
 15042                           ; BSR set to: 15
 15043                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
 15044  002D5E  EE20 F006          	lfsr	2,6
 15045  002D62  5032               	movf	i1CANsendMessage@data,w,c
 15046  002D64  26D9               	addwf	fsr2l,f,c
 15047  002D66  5033               	movf	i1CANsendMessage@data+1,w,c
 15048  002D68  22DA               	addwfc	fsr2h,f,c
 15049  002D6A  50DF               	movf	indf2,w,c
 15050  002D6C  010F               	movlb	15	; () banked
 15051  002D6E  6F4C               	movwf	76,b	;volatile
 15052                           
 15053                           ; BSR set to: 15
 15054                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
 15055  002D70  EE20 F007          	lfsr	2,7
 15056  002D74  5032               	movf	i1CANsendMessage@data,w,c
 15057  002D76  26D9               	addwf	fsr2l,f,c
 15058  002D78  5033               	movf	i1CANsendMessage@data+1,w,c
 15059  002D7A  22DA               	addwfc	fsr2h,f,c
 15060  002D7C  50DF               	movf	indf2,w,c
 15061  002D7E  010F               	movlb	15	; () banked
 15062  002D80  6F4D               	movwf	77,b	;volatile
 15063                           
 15064                           ; BSR set to: 15
 15065                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
 15066  002D82  010F               	movlb	15	; () banked
 15067  002D84  8740               	bsf	64,3,b	;volatile
 15068                           
 15069                           ; BSR set to: 15
 15070                           ;inc\CANlib.h: 368: return;
 15071  002D86  0012               	return	
 15072  002D88                     i1l361:
 15073                           
 15074                           ; BSR set to: 15
 15075                           ;inc\CANlib.h: 369: }
 15076                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
 15077  002D88  010F               	movlb	15	; () banked
 15078  002D8A  B730               	btfsc	48,3,b	;volatile
 15079  002D8C  D118               	goto	i1l376
 15080                           
 15081                           ; BSR set to: 15
 15082                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
 15083  002D8E  C034  FF35         	movff	i1CANsendMessage@dataLength,3893	;volatile
 15084                           
 15085                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
 15086  002D92  AC35               	btfss	i1CANsendMessage@flags,6,c
 15087  002D94  D003               	goto	i1l377
 15088                           
 15089                           ; BSR set to: 15
 15090                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
 15091  002D96  010F               	movlb	15	; () banked
 15092  002D98  8D35               	bsf	53,6,b	;volatile
 15093  002D9A  D002               	goto	i1l378
 15094  002D9C                     i1l377:
 15095                           
 15096                           ; BSR set to: 15
 15097                           ;inc\CANlib.h: 378: else
 15098                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
 15099  002D9C  010F               	movlb	15	; () banked
 15100  002D9E  9D35               	bcf	53,6,b	;volatile
 15101  002DA0                     i1l378:
 15102                           
 15103                           ; BSR set to: 15
 15104                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
 15105  002DA0  A635               	btfss	i1CANsendMessage@flags,3,c
 15106  002DA2  D067               	goto	i1l379
 15107                           
 15108                           ; BSR set to: 15
 15109                           ;inc\CANlib.h: 382: {
 15110                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
 15111  002DA4  502E               	movf	i1CANsendMessage@identifier,w,c
 15112  002DA6  6E3A               	movwf	i1CANsendMessage@tamp,c
 15113  002DA8  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 15114  002DAA  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 15115  002DAC  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 15116                           
 15117                           ; BSR set to: 15
 15118                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
 15119  002DAE  C03A  FF34         	movff	i1CANsendMessage@tamp,3892	;volatile
 15120                           
 15121                           ; BSR set to: 15
 15122                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
 15123  002DB2  0E00               	movlw	0
 15124  002DB4  142E               	andwf	i1CANsendMessage@identifier,w,c
 15125  002DB6  6E3A               	movwf	i1CANsendMessage@tamp,c
 15126  002DB8  0EFF               	movlw	255
 15127  002DBA  142F               	andwf	i1CANsendMessage@identifier+1,w,c
 15128  002DBC  6E3B               	movwf	i1CANsendMessage@tamp+1,c
 15129  002DBE  0E00               	movlw	0
 15130  002DC0  1430               	andwf	i1CANsendMessage@identifier+2,w,c
 15131  002DC2  6E3C               	movwf	i1CANsendMessage@tamp+2,c
 15132  002DC4  0E00               	movlw	0
 15133  002DC6  1431               	andwf	i1CANsendMessage@identifier+3,w,c
 15134  002DC8  6E3D               	movwf	i1CANsendMessage@tamp+3,c
 15135                           
 15136                           ; BSR set to: 15
 15137                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
 15138  002DCA  C03A  F036         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 15139  002DCE  C03B  F037         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 15140  002DD2  C03C  F038         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 15141  002DD6  C03D  F039         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 15142  002DDA  C037  F036         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 15143  002DDE  C038  F037         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 15144  002DE2  C039  F038         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 15145  002DE6  6A39               	clrf	??i1_CANsendMessage+3,c
 15146  002DE8  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15147  002DEC  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15148  002DF0  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15149  002DF4  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15150                           
 15151                           ; BSR set to: 15
 15152                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
 15153  002DF8  C03A  FF33         	movff	i1CANsendMessage@tamp,3891	;volatile
 15154                           
 15155                           ; BSR set to: 15
 15156                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
 15157  002DFC  0E00               	movlw	0
 15158  002DFE  010F               	movlb	15	; () banked
 15159  002E00  6F32               	movwf	50,b	;volatile
 15160                           
 15161                           ; BSR set to: 15
 15162                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
 15163  002E02  010F               	movlb	15	; () banked
 15164  002E04  8732               	bsf	50,3,b	;volatile
 15165                           
 15166                           ; BSR set to: 15
 15167                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
 15168  002E06  A030               	btfss	i1CANsendMessage@identifier+2,0,c
 15169  002E08  D002               	goto	i1l380
 15170                           
 15171                           ; BSR set to: 15
 15172                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
 15173  002E0A  010F               	movlb	15	; () banked
 15174  002E0C  8132               	bsf	50,0,b	;volatile
 15175  002E0E                     i1l380:
 15176                           
 15177                           ; BSR set to: 15
 15178                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
 15179  002E0E  A230               	btfss	i1CANsendMessage@identifier+2,1,c
 15180  002E10  D002               	goto	i1l381
 15181                           
 15182                           ; BSR set to: 15
 15183                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
 15184  002E12  010F               	movlb	15	; () banked
 15185  002E14  8332               	bsf	50,1,b	;volatile
 15186  002E16                     i1l381:
 15187                           
 15188                           ; BSR set to: 15
 15189                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
 15190  002E16  A430               	btfss	i1CANsendMessage@identifier+2,2,c
 15191  002E18  D002               	goto	i1l382
 15192                           
 15193                           ; BSR set to: 15
 15194                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
 15195  002E1A  010F               	movlb	15	; () banked
 15196  002E1C  8B32               	bsf	50,5,b	;volatile
 15197  002E1E                     i1l382:
 15198                           
 15199                           ; BSR set to: 15
 15200                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
 15201  002E1E  A630               	btfss	i1CANsendMessage@identifier+2,3,c
 15202  002E20  D002               	goto	i1l383
 15203                           
 15204                           ; BSR set to: 15
 15205                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
 15206  002E22  010F               	movlb	15	; () banked
 15207  002E24  8D32               	bsf	50,6,b	;volatile
 15208  002E26                     i1l383:
 15209                           
 15210                           ; BSR set to: 15
 15211                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
 15212  002E26  A830               	btfss	i1CANsendMessage@identifier+2,4,c
 15213  002E28  D003               	goto	i1l5309
 15214                           
 15215                           ; BSR set to: 15
 15216                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
 15217  002E2A  010F               	movlb	15	; () banked
 15218  002E2C  8F32               	bsf	50,7,b	;volatile
 15219  002E2E  D000               	goto	i1l5309
 15220  002E30                     i1l5309:
 15221                           
 15222                           ; BSR set to: 15
 15223                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
 15224  002E30  C02E  F036         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15225  002E34  C02F  F037         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15226  002E38  C030  F038         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15227  002E3C  C031  F039         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15228  002E40  0E16               	movlw	22
 15229  002E42  D005               	goto	i1u632_20
 15230  002E44                     i1u632_25:
 15231  002E44  90D8               	bcf	status,0,c
 15232  002E46  3239               	rrcf	??i1_CANsendMessage+3,f,c
 15233  002E48  3238               	rrcf	??i1_CANsendMessage+2,f,c
 15234  002E4A  3237               	rrcf	??i1_CANsendMessage+1,f,c
 15235  002E4C  3236               	rrcf	??i1_CANsendMessage,f,c
 15236  002E4E                     i1u632_20:
 15237  002E4E  2EE8               	decfsz	wreg,f,c
 15238  002E50  D7F9               	goto	i1u632_25
 15239  002E52  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15240  002E56  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15241  002E5A  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15242  002E5E  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15243                           
 15244                           ; BSR set to: 15
 15245                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
 15246  002E62  503A               	movf	i1CANsendMessage@tamp,w,c
 15247  002E64  6E3A               	movwf	i1CANsendMessage@tamp,c
 15248  002E66  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 15249  002E68  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 15250  002E6A  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 15251                           
 15252                           ; BSR set to: 15
 15253                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
 15254  002E6C  C03A  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 15255                           
 15256                           ;inc\CANlib.h: 407: }
 15257  002E70  D04E               	goto	i1l5329
 15258  002E72                     i1l379:
 15259                           
 15260                           ; BSR set to: 15
 15261                           ;inc\CANlib.h: 409: else
 15262                           ;inc\CANlib.h: 411: {
 15263                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
 15264  002E72  010F               	movlb	15	; () banked
 15265  002E74  9732               	bcf	50,3,b	;volatile
 15266                           
 15267                           ; BSR set to: 15
 15268                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
 15269  002E76  C02E  F036         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15270  002E7A  C02F  F037         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15271  002E7E  C030  F038         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15272  002E82  C031  F039         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15273  002E86  0E04               	movlw	4
 15274  002E88  D005               	goto	i1u633_20
 15275  002E8A                     i1u633_25:
 15276  002E8A  90D8               	bcf	status,0,c
 15277  002E8C  3239               	rrcf	??i1_CANsendMessage+3,f,c
 15278  002E8E  3238               	rrcf	??i1_CANsendMessage+2,f,c
 15279  002E90  3237               	rrcf	??i1_CANsendMessage+1,f,c
 15280  002E92  3236               	rrcf	??i1_CANsendMessage,f,c
 15281  002E94                     i1u633_20:
 15282  002E94  2EE8               	decfsz	wreg,f,c
 15283  002E96  D7F9               	goto	i1u633_25
 15284  002E98  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15285  002E9C  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15286  002EA0  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15287  002EA4  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15288                           
 15289                           ; BSR set to: 15
 15290                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
 15291  002EA8  503A               	movf	i1CANsendMessage@tamp,w,c
 15292  002EAA  6E3A               	movwf	i1CANsendMessage@tamp,c
 15293  002EAC  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 15294  002EAE  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 15295  002EB0  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 15296                           
 15297                           ; BSR set to: 15
 15298                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
 15299  002EB2  C03A  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 15300                           
 15301                           ; BSR set to: 15
 15302                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
 15303  002EB6  0E07               	movlw	7
 15304  002EB8  142E               	andwf	i1CANsendMessage@identifier,w,c
 15305  002EBA  6E3A               	movwf	i1CANsendMessage@tamp,c
 15306  002EBC  0E00               	movlw	0
 15307  002EBE  142F               	andwf	i1CANsendMessage@identifier+1,w,c
 15308  002EC0  6E3B               	movwf	i1CANsendMessage@tamp+1,c
 15309  002EC2  0E00               	movlw	0
 15310  002EC4  1430               	andwf	i1CANsendMessage@identifier+2,w,c
 15311  002EC6  6E3C               	movwf	i1CANsendMessage@tamp+2,c
 15312  002EC8  0E00               	movlw	0
 15313  002ECA  1431               	andwf	i1CANsendMessage@identifier+3,w,c
 15314  002ECC  6E3D               	movwf	i1CANsendMessage@tamp+3,c
 15315                           
 15316                           ; BSR set to: 15
 15317                           ;inc\CANlib.h: 419: tamp = tamp << 5;
 15318  002ECE  C03A  F036         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 15319  002ED2  C03B  F037         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 15320  002ED6  C03C  F038         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 15321  002EDA  C03D  F039         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 15322  002EDE  0E05               	movlw	5
 15323  002EE0                     i1u634_25:
 15324  002EE0  90D8               	bcf	status,0,c
 15325  002EE2  3636               	rlcf	??i1_CANsendMessage,f,c
 15326  002EE4  3637               	rlcf	??i1_CANsendMessage+1,f,c
 15327  002EE6  3638               	rlcf	??i1_CANsendMessage+2,f,c
 15328  002EE8  3639               	rlcf	??i1_CANsendMessage+3,f,c
 15329  002EEA  2EE8               	decfsz	wreg,f,c
 15330  002EEC  D7F9               	goto	i1u634_25
 15331  002EEE  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15332  002EF2  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15333  002EF6  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15334  002EFA  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15335                           
 15336                           ; BSR set to: 15
 15337                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
 15338  002EFE  010F               	movlb	15	; () banked
 15339  002F00  5132               	movf	50,w,b	;volatile
 15340  002F02  0B1F               	andlw	31
 15341  002F04  010F               	movlb	15	; () banked
 15342  002F06  6F32               	movwf	50,b	;volatile
 15343                           
 15344                           ; BSR set to: 15
 15345                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
 15346  002F08  C03A  FF32         	movff	i1CANsendMessage@tamp,3890	;volatile
 15347  002F0C  D000               	goto	i1l5329
 15348  002F0E                     i1l5329:
 15349                           
 15350                           ; BSR set to: 15
 15351                           ;inc\CANlib.h: 422: }
 15352                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
 15353  002F0E  A035               	btfss	i1CANsendMessage@flags,0,c
 15354  002F10  D003               	goto	i1l386
 15355                           
 15356                           ; BSR set to: 15
 15357                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
 15358  002F12  010F               	movlb	15	; () banked
 15359  002F14  8130               	bsf	48,0,b	;volatile
 15360  002F16  D002               	goto	i1l387
 15361  002F18                     i1l386:
 15362                           
 15363                           ; BSR set to: 15
 15364                           ;inc\CANlib.h: 426: else
 15365                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
 15366  002F18  010F               	movlb	15	; () banked
 15367  002F1A  9130               	bcf	48,0,b	;volatile
 15368  002F1C                     i1l387:
 15369                           
 15370                           ; BSR set to: 15
 15371                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
 15372  002F1C  A235               	btfss	i1CANsendMessage@flags,1,c
 15373  002F1E  D003               	goto	i1l388
 15374                           
 15375                           ; BSR set to: 15
 15376                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
 15377  002F20  010F               	movlb	15	; () banked
 15378  002F22  8330               	bsf	48,1,b	;volatile
 15379  002F24  D003               	goto	i1l5335
 15380  002F26                     i1l388:
 15381                           
 15382                           ; BSR set to: 15
 15383                           ;inc\CANlib.h: 430: else
 15384                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
 15385  002F26  010F               	movlb	15	; () banked
 15386  002F28  9330               	bcf	48,1,b	;volatile
 15387  002F2A  D000               	goto	i1l5335
 15388  002F2C                     i1l5335:
 15389                           
 15390                           ; BSR set to: 15
 15391                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
 15392  002F2C  C032  FFD9         	movff	i1CANsendMessage@data,fsr2l
 15393  002F30  C033  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 15394  002F34  50DF               	movf	indf2,w,c
 15395  002F36  010F               	movlb	15	; () banked
 15396  002F38  6F36               	movwf	54,b	;volatile
 15397                           
 15398                           ; BSR set to: 15
 15399                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
 15400  002F3A  EE20 F001          	lfsr	2,1
 15401  002F3E  5032               	movf	i1CANsendMessage@data,w,c
 15402  002F40  26D9               	addwf	fsr2l,f,c
 15403  002F42  5033               	movf	i1CANsendMessage@data+1,w,c
 15404  002F44  22DA               	addwfc	fsr2h,f,c
 15405  002F46  50DF               	movf	indf2,w,c
 15406  002F48  010F               	movlb	15	; () banked
 15407  002F4A  6F37               	movwf	55,b	;volatile
 15408                           
 15409                           ; BSR set to: 15
 15410                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
 15411  002F4C  EE20 F002          	lfsr	2,2
 15412  002F50  5032               	movf	i1CANsendMessage@data,w,c
 15413  002F52  26D9               	addwf	fsr2l,f,c
 15414  002F54  5033               	movf	i1CANsendMessage@data+1,w,c
 15415  002F56  22DA               	addwfc	fsr2h,f,c
 15416  002F58  50DF               	movf	indf2,w,c
 15417  002F5A  010F               	movlb	15	; () banked
 15418  002F5C  6F38               	movwf	56,b	;volatile
 15419                           
 15420                           ; BSR set to: 15
 15421                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
 15422  002F5E  EE20 F003          	lfsr	2,3
 15423  002F62  5032               	movf	i1CANsendMessage@data,w,c
 15424  002F64  26D9               	addwf	fsr2l,f,c
 15425  002F66  5033               	movf	i1CANsendMessage@data+1,w,c
 15426  002F68  22DA               	addwfc	fsr2h,f,c
 15427  002F6A  50DF               	movf	indf2,w,c
 15428  002F6C  010F               	movlb	15	; () banked
 15429  002F6E  6F39               	movwf	57,b	;volatile
 15430                           
 15431                           ; BSR set to: 15
 15432                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
 15433  002F70  EE20 F004          	lfsr	2,4
 15434  002F74  5032               	movf	i1CANsendMessage@data,w,c
 15435  002F76  26D9               	addwf	fsr2l,f,c
 15436  002F78  5033               	movf	i1CANsendMessage@data+1,w,c
 15437  002F7A  22DA               	addwfc	fsr2h,f,c
 15438  002F7C  50DF               	movf	indf2,w,c
 15439  002F7E  010F               	movlb	15	; () banked
 15440  002F80  6F3A               	movwf	58,b	;volatile
 15441                           
 15442                           ; BSR set to: 15
 15443                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
 15444  002F82  EE20 F005          	lfsr	2,5
 15445  002F86  5032               	movf	i1CANsendMessage@data,w,c
 15446  002F88  26D9               	addwf	fsr2l,f,c
 15447  002F8A  5033               	movf	i1CANsendMessage@data+1,w,c
 15448  002F8C  22DA               	addwfc	fsr2h,f,c
 15449  002F8E  50DF               	movf	indf2,w,c
 15450  002F90  010F               	movlb	15	; () banked
 15451  002F92  6F3B               	movwf	59,b	;volatile
 15452                           
 15453                           ; BSR set to: 15
 15454                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
 15455  002F94  EE20 F006          	lfsr	2,6
 15456  002F98  5032               	movf	i1CANsendMessage@data,w,c
 15457  002F9A  26D9               	addwf	fsr2l,f,c
 15458  002F9C  5033               	movf	i1CANsendMessage@data+1,w,c
 15459  002F9E  22DA               	addwfc	fsr2h,f,c
 15460  002FA0  50DF               	movf	indf2,w,c
 15461  002FA2  010F               	movlb	15	; () banked
 15462  002FA4  6F3C               	movwf	60,b	;volatile
 15463                           
 15464                           ; BSR set to: 15
 15465                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
 15466  002FA6  EE20 F007          	lfsr	2,7
 15467  002FAA  5032               	movf	i1CANsendMessage@data,w,c
 15468  002FAC  26D9               	addwf	fsr2l,f,c
 15469  002FAE  5033               	movf	i1CANsendMessage@data+1,w,c
 15470  002FB0  22DA               	addwfc	fsr2h,f,c
 15471  002FB2  50DF               	movf	indf2,w,c
 15472  002FB4  010F               	movlb	15	; () banked
 15473  002FB6  6F3D               	movwf	61,b	;volatile
 15474                           
 15475                           ; BSR set to: 15
 15476                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
 15477  002FB8  010F               	movlb	15	; () banked
 15478  002FBA  8730               	bsf	48,3,b	;volatile
 15479                           
 15480                           ; BSR set to: 15
 15481                           ;inc\CANlib.h: 444: return;
 15482  002FBC  0012               	return	
 15483  002FBE                     i1l376:
 15484                           
 15485                           ; BSR set to: 15
 15486                           ;inc\CANlib.h: 445: }
 15487                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
 15488  002FBE  010F               	movlb	15	; () banked
 15489  002FC0  B720               	btfsc	32,3,b	;volatile
 15490  002FC2  0012               	return	
 15491                           
 15492                           ; BSR set to: 15
 15493                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
 15494  002FC4  C034  FF25         	movff	i1CANsendMessage@dataLength,3877	;volatile
 15495                           
 15496                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
 15497  002FC8  AC35               	btfss	i1CANsendMessage@flags,6,c
 15498  002FCA  D003               	goto	i1l391
 15499                           
 15500                           ; BSR set to: 15
 15501                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
 15502  002FCC  010F               	movlb	15	; () banked
 15503  002FCE  8D25               	bsf	37,6,b	;volatile
 15504  002FD0  D002               	goto	i1l392
 15505  002FD2                     i1l391:
 15506                           
 15507                           ; BSR set to: 15
 15508                           ;inc\CANlib.h: 454: else
 15509                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
 15510  002FD2  010F               	movlb	15	; () banked
 15511  002FD4  9D25               	bcf	37,6,b	;volatile
 15512  002FD6                     i1l392:
 15513                           
 15514                           ; BSR set to: 15
 15515                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
 15516  002FD6  A635               	btfss	i1CANsendMessage@flags,3,c
 15517  002FD8  D067               	goto	i1l393
 15518                           
 15519                           ; BSR set to: 15
 15520                           ;inc\CANlib.h: 458: {
 15521                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
 15522  002FDA  502E               	movf	i1CANsendMessage@identifier,w,c
 15523  002FDC  6E3A               	movwf	i1CANsendMessage@tamp,c
 15524  002FDE  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 15525  002FE0  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 15526  002FE2  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 15527                           
 15528                           ; BSR set to: 15
 15529                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
 15530  002FE4  C03A  FF24         	movff	i1CANsendMessage@tamp,3876	;volatile
 15531                           
 15532                           ; BSR set to: 15
 15533                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
 15534  002FE8  0E00               	movlw	0
 15535  002FEA  142E               	andwf	i1CANsendMessage@identifier,w,c
 15536  002FEC  6E3A               	movwf	i1CANsendMessage@tamp,c
 15537  002FEE  0EFF               	movlw	255
 15538  002FF0  142F               	andwf	i1CANsendMessage@identifier+1,w,c
 15539  002FF2  6E3B               	movwf	i1CANsendMessage@tamp+1,c
 15540  002FF4  0E00               	movlw	0
 15541  002FF6  1430               	andwf	i1CANsendMessage@identifier+2,w,c
 15542  002FF8  6E3C               	movwf	i1CANsendMessage@tamp+2,c
 15543  002FFA  0E00               	movlw	0
 15544  002FFC  1431               	andwf	i1CANsendMessage@identifier+3,w,c
 15545  002FFE  6E3D               	movwf	i1CANsendMessage@tamp+3,c
 15546                           
 15547                           ; BSR set to: 15
 15548                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
 15549  003000  C03A  F036         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 15550  003004  C03B  F037         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 15551  003008  C03C  F038         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 15552  00300C  C03D  F039         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 15553  003010  C037  F036         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 15554  003014  C038  F037         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 15555  003018  C039  F038         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 15556  00301C  6A39               	clrf	??i1_CANsendMessage+3,c
 15557  00301E  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15558  003022  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15559  003026  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15560  00302A  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15561                           
 15562                           ; BSR set to: 15
 15563                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
 15564  00302E  C03A  FF23         	movff	i1CANsendMessage@tamp,3875	;volatile
 15565                           
 15566                           ; BSR set to: 15
 15567                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
 15568  003032  0E00               	movlw	0
 15569  003034  010F               	movlb	15	; () banked
 15570  003036  6F22               	movwf	34,b	;volatile
 15571                           
 15572                           ; BSR set to: 15
 15573                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
 15574  003038  010F               	movlb	15	; () banked
 15575  00303A  8722               	bsf	34,3,b	;volatile
 15576                           
 15577                           ; BSR set to: 15
 15578                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
 15579  00303C  A030               	btfss	i1CANsendMessage@identifier+2,0,c
 15580  00303E  D002               	goto	i1l394
 15581                           
 15582                           ; BSR set to: 15
 15583                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
 15584  003040  010F               	movlb	15	; () banked
 15585  003042  8122               	bsf	34,0,b	;volatile
 15586  003044                     i1l394:
 15587                           
 15588                           ; BSR set to: 15
 15589                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
 15590  003044  A230               	btfss	i1CANsendMessage@identifier+2,1,c
 15591  003046  D002               	goto	i1l395
 15592                           
 15593                           ; BSR set to: 15
 15594                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
 15595  003048  010F               	movlb	15	; () banked
 15596  00304A  8322               	bsf	34,1,b	;volatile
 15597  00304C                     i1l395:
 15598                           
 15599                           ; BSR set to: 15
 15600                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
 15601  00304C  A430               	btfss	i1CANsendMessage@identifier+2,2,c
 15602  00304E  D002               	goto	i1l396
 15603                           
 15604                           ; BSR set to: 15
 15605                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
 15606  003050  010F               	movlb	15	; () banked
 15607  003052  8B22               	bsf	34,5,b	;volatile
 15608  003054                     i1l396:
 15609                           
 15610                           ; BSR set to: 15
 15611                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
 15612  003054  A630               	btfss	i1CANsendMessage@identifier+2,3,c
 15613  003056  D002               	goto	i1l397
 15614                           
 15615                           ; BSR set to: 15
 15616                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
 15617  003058  010F               	movlb	15	; () banked
 15618  00305A  8D22               	bsf	34,6,b	;volatile
 15619  00305C                     i1l397:
 15620                           
 15621                           ; BSR set to: 15
 15622                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
 15623  00305C  A830               	btfss	i1CANsendMessage@identifier+2,4,c
 15624  00305E  D003               	goto	i1l5385
 15625                           
 15626                           ; BSR set to: 15
 15627                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
 15628  003060  010F               	movlb	15	; () banked
 15629  003062  8F22               	bsf	34,7,b	;volatile
 15630  003064  D000               	goto	i1l5385
 15631  003066                     i1l5385:
 15632                           
 15633                           ; BSR set to: 15
 15634                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
 15635  003066  C02E  F036         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15636  00306A  C02F  F037         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15637  00306E  C030  F038         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15638  003072  C031  F039         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15639  003076  0E16               	movlw	22
 15640  003078  D005               	goto	i1u645_20
 15641  00307A                     i1u645_25:
 15642  00307A  90D8               	bcf	status,0,c
 15643  00307C  3239               	rrcf	??i1_CANsendMessage+3,f,c
 15644  00307E  3238               	rrcf	??i1_CANsendMessage+2,f,c
 15645  003080  3237               	rrcf	??i1_CANsendMessage+1,f,c
 15646  003082  3236               	rrcf	??i1_CANsendMessage,f,c
 15647  003084                     i1u645_20:
 15648  003084  2EE8               	decfsz	wreg,f,c
 15649  003086  D7F9               	goto	i1u645_25
 15650  003088  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15651  00308C  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15652  003090  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15653  003094  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15654                           
 15655                           ; BSR set to: 15
 15656                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
 15657  003098  503A               	movf	i1CANsendMessage@tamp,w,c
 15658  00309A  6E3A               	movwf	i1CANsendMessage@tamp,c
 15659  00309C  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 15660  00309E  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 15661  0030A0  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 15662                           
 15663                           ; BSR set to: 15
 15664                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
 15665  0030A2  C03A  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15666                           
 15667                           ;inc\CANlib.h: 483: }
 15668  0030A6  D04E               	goto	i1l5405
 15669  0030A8                     i1l393:
 15670                           
 15671                           ; BSR set to: 15
 15672                           ;inc\CANlib.h: 485: else
 15673                           ;inc\CANlib.h: 487: {
 15674                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
 15675  0030A8  010F               	movlb	15	; () banked
 15676  0030AA  9722               	bcf	34,3,b	;volatile
 15677                           
 15678                           ; BSR set to: 15
 15679                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
 15680  0030AC  C02E  F036         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15681  0030B0  C02F  F037         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15682  0030B4  C030  F038         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15683  0030B8  C031  F039         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15684  0030BC  0E04               	movlw	4
 15685  0030BE  D005               	goto	i1u646_20
 15686  0030C0                     i1u646_25:
 15687  0030C0  90D8               	bcf	status,0,c
 15688  0030C2  3239               	rrcf	??i1_CANsendMessage+3,f,c
 15689  0030C4  3238               	rrcf	??i1_CANsendMessage+2,f,c
 15690  0030C6  3237               	rrcf	??i1_CANsendMessage+1,f,c
 15691  0030C8  3236               	rrcf	??i1_CANsendMessage,f,c
 15692  0030CA                     i1u646_20:
 15693  0030CA  2EE8               	decfsz	wreg,f,c
 15694  0030CC  D7F9               	goto	i1u646_25
 15695  0030CE  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15696  0030D2  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15697  0030D6  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15698  0030DA  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15699                           
 15700                           ; BSR set to: 15
 15701                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
 15702  0030DE  503A               	movf	i1CANsendMessage@tamp,w,c
 15703  0030E0  6E3A               	movwf	i1CANsendMessage@tamp,c
 15704  0030E2  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 15705  0030E4  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 15706  0030E6  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 15707                           
 15708                           ; BSR set to: 15
 15709                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
 15710  0030E8  C03A  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15711                           
 15712                           ; BSR set to: 15
 15713                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
 15714  0030EC  0E07               	movlw	7
 15715  0030EE  142E               	andwf	i1CANsendMessage@identifier,w,c
 15716  0030F0  6E3A               	movwf	i1CANsendMessage@tamp,c
 15717  0030F2  0E00               	movlw	0
 15718  0030F4  142F               	andwf	i1CANsendMessage@identifier+1,w,c
 15719  0030F6  6E3B               	movwf	i1CANsendMessage@tamp+1,c
 15720  0030F8  0E00               	movlw	0
 15721  0030FA  1430               	andwf	i1CANsendMessage@identifier+2,w,c
 15722  0030FC  6E3C               	movwf	i1CANsendMessage@tamp+2,c
 15723  0030FE  0E00               	movlw	0
 15724  003100  1431               	andwf	i1CANsendMessage@identifier+3,w,c
 15725  003102  6E3D               	movwf	i1CANsendMessage@tamp+3,c
 15726                           
 15727                           ; BSR set to: 15
 15728                           ;inc\CANlib.h: 495: tamp = tamp << 5;
 15729  003104  C03A  F036         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 15730  003108  C03B  F037         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 15731  00310C  C03C  F038         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 15732  003110  C03D  F039         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 15733  003114  0E05               	movlw	5
 15734  003116                     i1u647_25:
 15735  003116  90D8               	bcf	status,0,c
 15736  003118  3636               	rlcf	??i1_CANsendMessage,f,c
 15737  00311A  3637               	rlcf	??i1_CANsendMessage+1,f,c
 15738  00311C  3638               	rlcf	??i1_CANsendMessage+2,f,c
 15739  00311E  3639               	rlcf	??i1_CANsendMessage+3,f,c
 15740  003120  2EE8               	decfsz	wreg,f,c
 15741  003122  D7F9               	goto	i1u647_25
 15742  003124  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15743  003128  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15744  00312C  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15745  003130  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15746                           
 15747                           ; BSR set to: 15
 15748                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
 15749  003134  010F               	movlb	15	; () banked
 15750  003136  5122               	movf	34,w,b	;volatile
 15751  003138  0B1F               	andlw	31
 15752  00313A  010F               	movlb	15	; () banked
 15753  00313C  6F22               	movwf	34,b	;volatile
 15754                           
 15755                           ; BSR set to: 15
 15756                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
 15757  00313E  C03A  FF22         	movff	i1CANsendMessage@tamp,3874	;volatile
 15758  003142  D000               	goto	i1l5405
 15759  003144                     i1l5405:
 15760                           
 15761                           ; BSR set to: 15
 15762                           ;inc\CANlib.h: 498: }
 15763                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
 15764  003144  A035               	btfss	i1CANsendMessage@flags,0,c
 15765  003146  D003               	goto	i1l400
 15766                           
 15767                           ; BSR set to: 15
 15768                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
 15769  003148  010F               	movlb	15	; () banked
 15770  00314A  8120               	bsf	32,0,b	;volatile
 15771  00314C  D002               	goto	i1l401
 15772  00314E                     i1l400:
 15773                           
 15774                           ; BSR set to: 15
 15775                           ;inc\CANlib.h: 502: else
 15776                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
 15777  00314E  010F               	movlb	15	; () banked
 15778  003150  9120               	bcf	32,0,b	;volatile
 15779  003152                     i1l401:
 15780                           
 15781                           ; BSR set to: 15
 15782                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
 15783  003152  A235               	btfss	i1CANsendMessage@flags,1,c
 15784  003154  D003               	goto	i1l402
 15785                           
 15786                           ; BSR set to: 15
 15787                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
 15788  003156  010F               	movlb	15	; () banked
 15789  003158  8320               	bsf	32,1,b	;volatile
 15790  00315A  D003               	goto	i1l5411
 15791  00315C                     i1l402:
 15792                           
 15793                           ; BSR set to: 15
 15794                           ;inc\CANlib.h: 506: else
 15795                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
 15796  00315C  010F               	movlb	15	; () banked
 15797  00315E  9320               	bcf	32,1,b	;volatile
 15798  003160  D000               	goto	i1l5411
 15799  003162                     i1l5411:
 15800                           
 15801                           ; BSR set to: 15
 15802                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
 15803  003162  C032  FFD9         	movff	i1CANsendMessage@data,fsr2l
 15804  003166  C033  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 15805  00316A  50DF               	movf	indf2,w,c
 15806  00316C  010F               	movlb	15	; () banked
 15807  00316E  6F26               	movwf	38,b	;volatile
 15808                           
 15809                           ; BSR set to: 15
 15810                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
 15811  003170  EE20 F001          	lfsr	2,1
 15812  003174  5032               	movf	i1CANsendMessage@data,w,c
 15813  003176  26D9               	addwf	fsr2l,f,c
 15814  003178  5033               	movf	i1CANsendMessage@data+1,w,c
 15815  00317A  22DA               	addwfc	fsr2h,f,c
 15816  00317C  50DF               	movf	indf2,w,c
 15817  00317E  010F               	movlb	15	; () banked
 15818  003180  6F27               	movwf	39,b	;volatile
 15819                           
 15820                           ; BSR set to: 15
 15821                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
 15822  003182  EE20 F002          	lfsr	2,2
 15823  003186  5032               	movf	i1CANsendMessage@data,w,c
 15824  003188  26D9               	addwf	fsr2l,f,c
 15825  00318A  5033               	movf	i1CANsendMessage@data+1,w,c
 15826  00318C  22DA               	addwfc	fsr2h,f,c
 15827  00318E  50DF               	movf	indf2,w,c
 15828  003190  010F               	movlb	15	; () banked
 15829  003192  6F28               	movwf	40,b	;volatile
 15830                           
 15831                           ; BSR set to: 15
 15832                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
 15833  003194  EE20 F003          	lfsr	2,3
 15834  003198  5032               	movf	i1CANsendMessage@data,w,c
 15835  00319A  26D9               	addwf	fsr2l,f,c
 15836  00319C  5033               	movf	i1CANsendMessage@data+1,w,c
 15837  00319E  22DA               	addwfc	fsr2h,f,c
 15838  0031A0  50DF               	movf	indf2,w,c
 15839  0031A2  010F               	movlb	15	; () banked
 15840  0031A4  6F29               	movwf	41,b	;volatile
 15841                           
 15842                           ; BSR set to: 15
 15843                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
 15844  0031A6  EE20 F004          	lfsr	2,4
 15845  0031AA  5032               	movf	i1CANsendMessage@data,w,c
 15846  0031AC  26D9               	addwf	fsr2l,f,c
 15847  0031AE  5033               	movf	i1CANsendMessage@data+1,w,c
 15848  0031B0  22DA               	addwfc	fsr2h,f,c
 15849  0031B2  50DF               	movf	indf2,w,c
 15850  0031B4  010F               	movlb	15	; () banked
 15851  0031B6  6F2A               	movwf	42,b	;volatile
 15852                           
 15853                           ; BSR set to: 15
 15854                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
 15855  0031B8  EE20 F005          	lfsr	2,5
 15856  0031BC  5032               	movf	i1CANsendMessage@data,w,c
 15857  0031BE  26D9               	addwf	fsr2l,f,c
 15858  0031C0  5033               	movf	i1CANsendMessage@data+1,w,c
 15859  0031C2  22DA               	addwfc	fsr2h,f,c
 15860  0031C4  50DF               	movf	indf2,w,c
 15861  0031C6  010F               	movlb	15	; () banked
 15862  0031C8  6F2B               	movwf	43,b	;volatile
 15863                           
 15864                           ; BSR set to: 15
 15865                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
 15866  0031CA  EE20 F006          	lfsr	2,6
 15867  0031CE  5032               	movf	i1CANsendMessage@data,w,c
 15868  0031D0  26D9               	addwf	fsr2l,f,c
 15869  0031D2  5033               	movf	i1CANsendMessage@data+1,w,c
 15870  0031D4  22DA               	addwfc	fsr2h,f,c
 15871  0031D6  50DF               	movf	indf2,w,c
 15872  0031D8  010F               	movlb	15	; () banked
 15873  0031DA  6F2C               	movwf	44,b	;volatile
 15874                           
 15875                           ; BSR set to: 15
 15876                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
 15877  0031DC  EE20 F007          	lfsr	2,7
 15878  0031E0  5032               	movf	i1CANsendMessage@data,w,c
 15879  0031E2  26D9               	addwf	fsr2l,f,c
 15880  0031E4  5033               	movf	i1CANsendMessage@data+1,w,c
 15881  0031E6  22DA               	addwfc	fsr2h,f,c
 15882  0031E8  50DF               	movf	indf2,w,c
 15883  0031EA  010F               	movlb	15	; () banked
 15884  0031EC  6F2D               	movwf	45,b	;volatile
 15885                           
 15886                           ; BSR set to: 15
 15887                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
 15888  0031EE  010F               	movlb	15	; () banked
 15889  0031F0  8720               	bsf	32,3,b	;volatile
 15890                           
 15891                           ; BSR set to: 15
 15892                           ;inc\CANlib.h: 520: return;
 15893  0031F2  0012               	return	
 15894                           
 15895                           ; BSR set to: 15
 15896                           
 15897                           ; BSR set to: 15
 15898  0031F4  0012               	return		;funcret
 15899  0031F6                     __end_ofi1_CANsendMessage:
 15900                           	opt stack 0
 15901                           pclatu	equ	0xFFB
 15902                           pclath	equ	0xFFA
 15903                           tblptru	equ	0xFF8
 15904                           tblptrh	equ	0xFF7
 15905                           tblptrl	equ	0xFF6
 15906                           tablat	equ	0xFF5
 15907                           prodh	equ	0xFF4
 15908                           prodl	equ	0xFF3
 15909                           intcon	equ	0xFF2
 15910                           intcon2	equ	0xFF1
 15911                           postinc0	equ	0xFEE
 15912                           fsr0h	equ	0xFEA
 15913                           fsr0l	equ	0xFE9
 15914                           wreg	equ	0xFE8
 15915                           fsr1h	equ	0xFE2
 15916                           fsr1l	equ	0xFE1
 15917                           bsr	equ	0xFE0
 15918                           indf2	equ	0xFDF
 15919                           postinc2	equ	0xFDE
 15920                           postdec2	equ	0xFDD
 15921                           plusw2	equ	0xFDB
 15922                           fsr2h	equ	0xFDA
 15923                           fsr2l	equ	0xFD9
 15924                           status	equ	0xFD8
 15925                           
 15926 ;; *************** function i1_CANisTxReady *****************
 15927 ;; Defined at:
 15928 ;;		line 1154 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 15929 ;; Parameters:    Size  Location     Type
 15930 ;;		None
 15931 ;; Auto vars:     Size  Location     Type
 15932 ;;		None
 15933 ;; Return value:  Size  Location     Type
 15934 ;;                  1    wreg      unsigned char 
 15935 ;; Registers used:
 15936 ;;		wreg, status,2
 15937 ;; Tracked objects:
 15938 ;;		On entry : 0/0
 15939 ;;		On exit  : 0/0
 15940 ;;		Unchanged: 0/0
 15941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15945 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15946 ;;Total ram usage:        1 bytes
 15947 ;; Hardware stack levels used:    1
 15948 ;; Hardware stack levels required when called:    2
 15949 ;; This function calls:
 15950 ;;		Nothing
 15951 ;; This function is called by:
 15952 ;;		i1_can_send
 15953 ;; This function uses a non-reentrant model
 15954 ;;
 15955                           
 15956                           	psect	text42
 15957  00655C                     __ptext42:
 15958                           	opt stack 0
 15959  00655C                     i1_CANisTxReady:
 15960                           	opt stack 19
 15961                           
 15962                           ;inc\CANlib.h: 1156: return (!TXB0CONbits.TXREQ || !TXB1CONbits.TXREQ || !TXB2CONbits.TX
      +                          REQ);
 15963                           
 15964                           ; BSR set to: 15
 15965                           ;incstack = 0
 15966  00655C  0E01               	movlw	1
 15967  00655E  6E2E               	movwf	i1_CANisTxReady$2841,c
 15968  006560  010F               	movlb	15	; () banked
 15969  006562  A740               	btfss	64,3,b	;volatile
 15970  006564  D008               	goto	i1l554
 15971                           
 15972                           ; BSR set to: 15
 15973  006566  010F               	movlb	15	; () banked
 15974  006568  A730               	btfss	48,3,b	;volatile
 15975  00656A  D005               	goto	i1l554
 15976                           
 15977                           ; BSR set to: 15
 15978  00656C  010F               	movlb	15	; () banked
 15979  00656E  A720               	btfss	32,3,b	;volatile
 15980  006570  D002               	goto	i1l554
 15981                           
 15982                           ; BSR set to: 15
 15983  006572  0E00               	movlw	0
 15984  006574  6E2E               	movwf	i1_CANisTxReady$2841,c
 15985  006576                     i1l554:
 15986                           
 15987                           ; BSR set to: 15
 15988  006576  502E               	movf	i1_CANisTxReady$2841,w,c
 15989  006578  0012               	return	
 15990                           
 15991                           ; BSR set to: 15
 15992                           
 15993                           ; BSR set to: 15
 15994  00657A  0012               	return		;funcret
 15995  00657C                     __end_ofi1_CANisTxReady:
 15996                           	opt stack 0
 15997                           pclatu	equ	0xFFB
 15998                           pclath	equ	0xFFA
 15999                           tblptru	equ	0xFF8
 16000                           tblptrh	equ	0xFF7
 16001                           tblptrl	equ	0xFF6
 16002                           tablat	equ	0xFF5
 16003                           prodh	equ	0xFF4
 16004                           prodl	equ	0xFF3
 16005                           intcon	equ	0xFF2
 16006                           intcon2	equ	0xFF1
 16007                           postinc0	equ	0xFEE
 16008                           fsr0h	equ	0xFEA
 16009                           fsr0l	equ	0xFE9
 16010                           wreg	equ	0xFE8
 16011                           fsr1h	equ	0xFE2
 16012                           fsr1l	equ	0xFE1
 16013                           bsr	equ	0xFE0
 16014                           indf2	equ	0xFDF
 16015                           postinc2	equ	0xFDE
 16016                           postdec2	equ	0xFDD
 16017                           plusw2	equ	0xFDB
 16018                           fsr2h	equ	0xFDA
 16019                           fsr2l	equ	0xFD9
 16020                           status	equ	0xFD8
 16021                           
 16022 ;; *************** function _CANreceiveMessage *****************
 16023 ;; Defined at:
 16024 ;;		line 528 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 16025 ;; Parameters:    Size  Location     Type
 16026 ;;  msg             2    0[COMRAM] PTR struct .
 16027 ;;		 -> msg(15), 
 16028 ;; Auto vars:     Size  Location     Type
 16029 ;;  tamp            1   11[COMRAM] unsigned char 
 16030 ;;  error           1   10[COMRAM] unsigned char 
 16031 ;; Return value:  Size  Location     Type
 16032 ;;                  1    wreg      unsigned char 
 16033 ;; Registers used:
 16034 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16035 ;; Tracked objects:
 16036 ;;		On entry : 0/0
 16037 ;;		On exit  : 0/0
 16038 ;;		Unchanged: 0/0
 16039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16040 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16042 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16043 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16044 ;;Total ram usage:       12 bytes
 16045 ;; Hardware stack levels used:    1
 16046 ;; Hardware stack levels required when called:    2
 16047 ;; This function calls:
 16048 ;;		Nothing
 16049 ;; This function is called by:
 16050 ;;		_ISR_Bassa
 16051 ;; This function uses a non-reentrant model
 16052 ;;
 16053                           
 16054                           	psect	text43
 16055  0037A4                     __ptext43:
 16056                           	opt stack 0
 16057  0037A4                     _CANreceiveMessage:
 16058                           	opt stack 20
 16059                           
 16060                           ;inc\CANlib.h: 530: BYTE tamp;
 16061                           ;inc\CANlib.h: 531: BYTE error = 0;
 16062                           
 16063                           ; BSR set to: 15
 16064                           ;incstack = 0
 16065  0037A4  0E00               	movlw	0
 16066  0037A6  6E38               	movwf	CANreceiveMessage@error,c
 16067                           
 16068                           ;inc\CANlib.h: 533: if (COMSTATbits.RXB0OVFL == 0x01)
 16069  0037A8  AE74               	btfss	3956,7,c	;volatile
 16070  0037AA  D002               	goto	i1l5455
 16071                           
 16072                           ;inc\CANlib.h: 534: error |= CAN_RX_BUFFER_1_OVFL;
 16073  0037AC  8038               	bsf	CANreceiveMessage@error,0,c
 16074  0037AE  D000               	goto	i1l5455
 16075  0037B0                     i1l5455:
 16076                           
 16077                           ;inc\CANlib.h: 536: if (COMSTATbits.RXB1OVFL == 0x01)
 16078  0037B0  AC74               	btfss	3956,6,c	;volatile
 16079  0037B2  D002               	goto	i1l5459
 16080                           
 16081                           ;inc\CANlib.h: 537: error |= CAN_RX_BUFFER_2_OVFL;
 16082  0037B4  8238               	bsf	CANreceiveMessage@error,1,c
 16083  0037B6  D000               	goto	i1l5459
 16084  0037B8                     i1l5459:
 16085                           
 16086                           ;inc\CANlib.h: 540: if (RXB1CONbits.RXFUL ==0x01)
 16087  0037B8  010F               	movlb	15	; () banked
 16088  0037BA  AF50               	btfss	80,7,b	;volatile
 16089  0037BC  D149               	goto	i1l408
 16090                           
 16091                           ; BSR set to: 15
 16092                           ;inc\CANlib.h: 541: {
 16093                           ;inc\CANlib.h: 542: msg->identifier = 0;
 16094  0037BE  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16095  0037C2  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16096  0037C6  6ADE               	clrf	postinc2,c
 16097  0037C8  6ADE               	clrf	postinc2,c
 16098  0037CA  6ADE               	clrf	postinc2,c
 16099  0037CC  6ADD               	clrf	postdec2,c
 16100                           
 16101                           ; BSR set to: 15
 16102                           ;inc\CANlib.h: 543: msg->data[0] =RXB1D0;
 16103  0037CE  EE20 F004          	lfsr	2,4
 16104  0037D2  502E               	movf	CANreceiveMessage@msg,w,c
 16105  0037D4  26D9               	addwf	fsr2l,f,c
 16106  0037D6  502F               	movf	CANreceiveMessage@msg+1,w,c
 16107  0037D8  22DA               	addwfc	fsr2h,f,c
 16108  0037DA  CF56 FFDF          	movff	3926,indf2	;volatile
 16109                           
 16110                           ; BSR set to: 15
 16111                           ;inc\CANlib.h: 544: msg->data[1] =RXB1D1;
 16112  0037DE  EE20 F005          	lfsr	2,5
 16113  0037E2  502E               	movf	CANreceiveMessage@msg,w,c
 16114  0037E4  26D9               	addwf	fsr2l,f,c
 16115  0037E6  502F               	movf	CANreceiveMessage@msg+1,w,c
 16116  0037E8  22DA               	addwfc	fsr2h,f,c
 16117  0037EA  CF57 FFDF          	movff	3927,indf2	;volatile
 16118                           
 16119                           ; BSR set to: 15
 16120                           ;inc\CANlib.h: 545: msg->data[2] =RXB1D2;
 16121  0037EE  EE20 F006          	lfsr	2,6
 16122  0037F2  502E               	movf	CANreceiveMessage@msg,w,c
 16123  0037F4  26D9               	addwf	fsr2l,f,c
 16124  0037F6  502F               	movf	CANreceiveMessage@msg+1,w,c
 16125  0037F8  22DA               	addwfc	fsr2h,f,c
 16126  0037FA  CF58 FFDF          	movff	3928,indf2	;volatile
 16127                           
 16128                           ; BSR set to: 15
 16129                           ;inc\CANlib.h: 546: msg->data[3] =RXB1D3;
 16130  0037FE  EE20 F007          	lfsr	2,7
 16131  003802  502E               	movf	CANreceiveMessage@msg,w,c
 16132  003804  26D9               	addwf	fsr2l,f,c
 16133  003806  502F               	movf	CANreceiveMessage@msg+1,w,c
 16134  003808  22DA               	addwfc	fsr2h,f,c
 16135  00380A  CF59 FFDF          	movff	3929,indf2	;volatile
 16136                           
 16137                           ; BSR set to: 15
 16138                           ;inc\CANlib.h: 547: msg->data[4] =RXB1D4;
 16139  00380E  EE20 F008          	lfsr	2,8
 16140  003812  502E               	movf	CANreceiveMessage@msg,w,c
 16141  003814  26D9               	addwf	fsr2l,f,c
 16142  003816  502F               	movf	CANreceiveMessage@msg+1,w,c
 16143  003818  22DA               	addwfc	fsr2h,f,c
 16144  00381A  CF5A FFDF          	movff	3930,indf2	;volatile
 16145                           
 16146                           ; BSR set to: 15
 16147                           ;inc\CANlib.h: 548: msg->data[5] =RXB1D5;
 16148  00381E  EE20 F009          	lfsr	2,9
 16149  003822  502E               	movf	CANreceiveMessage@msg,w,c
 16150  003824  26D9               	addwf	fsr2l,f,c
 16151  003826  502F               	movf	CANreceiveMessage@msg+1,w,c
 16152  003828  22DA               	addwfc	fsr2h,f,c
 16153  00382A  CF5B FFDF          	movff	3931,indf2	;volatile
 16154                           
 16155                           ; BSR set to: 15
 16156                           ;inc\CANlib.h: 549: msg->data[6] =RXB1D6;
 16157  00382E  EE20 F00A          	lfsr	2,10
 16158  003832  502E               	movf	CANreceiveMessage@msg,w,c
 16159  003834  26D9               	addwf	fsr2l,f,c
 16160  003836  502F               	movf	CANreceiveMessage@msg+1,w,c
 16161  003838  22DA               	addwfc	fsr2h,f,c
 16162  00383A  CF5C FFDF          	movff	3932,indf2	;volatile
 16163                           
 16164                           ; BSR set to: 15
 16165                           ;inc\CANlib.h: 550: msg->data[7] =RXB1D7;
 16166  00383E  EE20 F00B          	lfsr	2,11
 16167  003842  502E               	movf	CANreceiveMessage@msg,w,c
 16168  003844  26D9               	addwf	fsr2l,f,c
 16169  003846  502F               	movf	CANreceiveMessage@msg+1,w,c
 16170  003848  22DA               	addwfc	fsr2h,f,c
 16171  00384A  CF5D FFDF          	movff	3933,indf2	;volatile
 16172                           
 16173                           ; BSR set to: 15
 16174                           ;inc\CANlib.h: 552: msg->RTR = RXB1DLCbits.RXRTR;
 16175  00384E  EE20 F00E          	lfsr	2,14
 16176  003852  502E               	movf	CANreceiveMessage@msg,w,c
 16177  003854  26D9               	addwf	fsr2l,f,c
 16178  003856  502F               	movf	CANreceiveMessage@msg+1,w,c
 16179  003858  22DA               	addwfc	fsr2h,f,c
 16180  00385A  010F               	movlb	15	; () banked
 16181  00385C  AD55               	btfss	85,6,b	;volatile
 16182  00385E  D002               	goto	i1u656_20
 16183  003860  0E01               	movlw	1
 16184  003862  D001               	goto	i1u656_26
 16185  003864                     i1u656_20:
 16186  003864  0E00               	movlw	0
 16187  003866                     i1u656_26:
 16188  003866  6EDF               	movwf	indf2,c
 16189                           
 16190                           ; BSR set to: 15
 16191                           ;inc\CANlib.h: 554: msg->length = RXB1DLC & 0x0F;
 16192  003868  EE20 F00D          	lfsr	2,13
 16193  00386C  502E               	movf	CANreceiveMessage@msg,w,c
 16194  00386E  26D9               	addwf	fsr2l,f,c
 16195  003870  502F               	movf	CANreceiveMessage@msg+1,w,c
 16196  003872  22DA               	addwfc	fsr2h,f,c
 16197  003874  010F               	movlb	15	; () banked
 16198  003876  5155               	movf	85,w,b	;volatile
 16199  003878  0B0F               	andlw	15
 16200  00387A  6EDF               	movwf	indf2,c
 16201                           
 16202                           ; BSR set to: 15
 16203                           ;inc\CANlib.h: 556: msg->type = RXB1SIDLbits.EXID;
 16204  00387C  EE20 F00C          	lfsr	2,12
 16205  003880  502E               	movf	CANreceiveMessage@msg,w,c
 16206  003882  26D9               	addwf	fsr2l,f,c
 16207  003884  502F               	movf	CANreceiveMessage@msg+1,w,c
 16208  003886  22DA               	addwfc	fsr2h,f,c
 16209  003888  010F               	movlb	15	; () banked
 16210  00388A  A752               	btfss	82,3,b	;volatile
 16211  00388C  D002               	goto	i1u657_20
 16212  00388E  0E01               	movlw	1
 16213  003890  D001               	goto	i1u657_26
 16214  003892                     i1u657_20:
 16215  003892  0E00               	movlw	0
 16216  003894                     i1u657_26:
 16217  003894  6EDF               	movwf	indf2,c
 16218                           
 16219                           ; BSR set to: 15
 16220                           ;inc\CANlib.h: 558: if (RXB1SIDLbits.EXID == 0)
 16221  003896  010F               	movlb	15	; () banked
 16222  003898  B752               	btfsc	82,3,b	;volatile
 16223  00389A  D044               	goto	i1l5493
 16224                           
 16225                           ; BSR set to: 15
 16226                           ;inc\CANlib.h: 559: {
 16227                           ;inc\CANlib.h: 560: msg->identifier = ((unsigned long)RXB1SIDH)<< 3;
 16228  00389C  CF51 F030          	movff	3921,??_CANreceiveMessage	;volatile
 16229  0038A0  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16230  0038A2  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16231  0038A4  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16232  0038A6  0E03               	movlw	3
 16233  0038A8                     i1u659_25:
 16234  0038A8  90D8               	bcf	status,0,c
 16235  0038AA  3630               	rlcf	??_CANreceiveMessage,f,c
 16236  0038AC  3631               	rlcf	??_CANreceiveMessage+1,f,c
 16237  0038AE  3632               	rlcf	??_CANreceiveMessage+2,f,c
 16238  0038B0  3633               	rlcf	??_CANreceiveMessage+3,f,c
 16239  0038B2  2EE8               	decfsz	wreg,f,c
 16240  0038B4  D7F9               	goto	i1u659_25
 16241  0038B6  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16242  0038BA  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16243  0038BE  C030  FFDE         	movff	??_CANreceiveMessage,postinc2
 16244  0038C2  C031  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 16245  0038C6  C032  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 16246  0038CA  C033  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 16247                           
 16248                           ; BSR set to: 15
 16249                           ;inc\CANlib.h: 561: tamp = (RXB1SIDL >> 5 ) & 0x07;
 16250  0038CE  010F               	movlb	15	; () banked
 16251  0038D0  3952               	swapf	82,w,b	;volatile
 16252  0038D2  42E8               	rrncf	wreg,f,c
 16253  0038D4  0B07               	andlw	7
 16254  0038D6  0B07               	andlw	7
 16255  0038D8  6E39               	movwf	CANreceiveMessage@tamp,c
 16256                           
 16257                           ; BSR set to: 15
 16258                           ;inc\CANlib.h: 562: msg->identifier = msg->identifier + tamp;
 16259  0038DA  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16260  0038DE  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16261  0038E2  CFDE F030          	movff	postinc2,??_CANreceiveMessage
 16262  0038E6  CFDE F031          	movff	postinc2,??_CANreceiveMessage+1
 16263  0038EA  CFDE F032          	movff	postinc2,??_CANreceiveMessage+2
 16264  0038EE  CFDE F033          	movff	postinc2,??_CANreceiveMessage+3
 16265  0038F2  5039               	movf	CANreceiveMessage@tamp,w,c
 16266  0038F4  2430               	addwf	??_CANreceiveMessage,w,c
 16267  0038F6  6E34               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 16268  0038F8  0E00               	movlw	0
 16269  0038FA  2031               	addwfc	??_CANreceiveMessage+1,w,c
 16270  0038FC  6E35               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 16271  0038FE  0E00               	movlw	0
 16272  003900  2032               	addwfc	??_CANreceiveMessage+2,w,c
 16273  003902  6E36               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 16274  003904  0E00               	movlw	0
 16275  003906  2033               	addwfc	??_CANreceiveMessage+3,w,c
 16276  003908  6E37               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 16277  00390A  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16278  00390E  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16279  003912  C034  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 16280  003916  C035  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 16281  00391A  C036  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 16282  00391E  C037  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 16283                           
 16284                           ;inc\CANlib.h: 563: }
 16285  003922  D093               	goto	i1l5519
 16286  003924                     i1l5493:
 16287                           
 16288                           ; BSR set to: 15
 16289                           ;inc\CANlib.h: 564: else
 16290                           ;inc\CANlib.h: 565: {
 16291                           ;inc\CANlib.h: 566: msg->identifier = (unsigned long) RXB1EIDL;
 16292  003924  CF54 F030          	movff	3924,??_CANreceiveMessage	;volatile
 16293  003928  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16294  00392A  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16295  00392C  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16296  00392E  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16297  003932  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16298  003936  C030  FFDE         	movff	??_CANreceiveMessage,postinc2
 16299  00393A  C031  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 16300  00393E  C032  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 16301  003942  C033  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 16302                           
 16303                           ; BSR set to: 15
 16304                           ;inc\CANlib.h: 567: msg->identifier += ((unsigned long) RXB1EIDH) << 8;
 16305  003946  CF53 F030          	movff	3923,??_CANreceiveMessage	;volatile
 16306  00394A  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16307  00394C  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16308  00394E  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16309  003950  C032  F033         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 16310  003954  C031  F032         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 16311  003958  C030  F031         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 16312  00395C  6A30               	clrf	??_CANreceiveMessage,c
 16313  00395E  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16314  003962  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16315  003966  5030               	movf	??_CANreceiveMessage,w,c
 16316  003968  26DE               	addwf	postinc2,f,c
 16317  00396A  5031               	movf	??_CANreceiveMessage+1,w,c
 16318  00396C  22DE               	addwfc	postinc2,f,c
 16319  00396E  5032               	movf	??_CANreceiveMessage+2,w,c
 16320  003970  22DE               	addwfc	postinc2,f,c
 16321  003972  5033               	movf	??_CANreceiveMessage+3,w,c
 16322  003974  22DE               	addwfc	postinc2,f,c
 16323                           
 16324                           ; BSR set to: 15
 16325                           ;inc\CANlib.h: 569: if (RXB1SIDLbits.EID16)
 16326  003976  010F               	movlb	15	; () banked
 16327  003978  A152               	btfss	82,0,b	;volatile
 16328  00397A  D00D               	goto	i1l5501
 16329                           
 16330                           ; BSR set to: 15
 16331                           ;inc\CANlib.h: 570: msg->identifier |= 0x00010000;
 16332  00397C  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16333  003980  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16334  003984  0E00               	movlw	0
 16335  003986  12DE               	iorwf	postinc2,f,c
 16336  003988  0E00               	movlw	0
 16337  00398A  12DE               	iorwf	postinc2,f,c
 16338  00398C  0E01               	movlw	1
 16339  00398E  12DE               	iorwf	postinc2,f,c
 16340  003990  0E00               	movlw	0
 16341  003992  12DE               	iorwf	postinc2,f,c
 16342  003994  D000               	goto	i1l5501
 16343  003996                     i1l5501:
 16344                           
 16345                           ; BSR set to: 15
 16346                           ;inc\CANlib.h: 571: if (RXB1SIDLbits.EID17)
 16347  003996  010F               	movlb	15	; () banked
 16348  003998  A352               	btfss	82,1,b	;volatile
 16349  00399A  D00D               	goto	i1l5505
 16350                           
 16351                           ; BSR set to: 15
 16352                           ;inc\CANlib.h: 572: msg->identifier |= 0x00020000;
 16353  00399C  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16354  0039A0  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16355  0039A4  0E00               	movlw	0
 16356  0039A6  12DE               	iorwf	postinc2,f,c
 16357  0039A8  0E00               	movlw	0
 16358  0039AA  12DE               	iorwf	postinc2,f,c
 16359  0039AC  0E02               	movlw	2
 16360  0039AE  12DE               	iorwf	postinc2,f,c
 16361  0039B0  0E00               	movlw	0
 16362  0039B2  12DE               	iorwf	postinc2,f,c
 16363  0039B4  D000               	goto	i1l5505
 16364  0039B6                     i1l5505:
 16365                           
 16366                           ; BSR set to: 15
 16367                           ;inc\CANlib.h: 573: if (RXB1SIDLbits.SID0)
 16368  0039B6  010F               	movlb	15	; () banked
 16369  0039B8  AB52               	btfss	82,5,b	;volatile
 16370  0039BA  D00D               	goto	i1l5509
 16371                           
 16372                           ; BSR set to: 15
 16373                           ;inc\CANlib.h: 574: msg->identifier |= 0x00040000;
 16374  0039BC  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16375  0039C0  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16376  0039C4  0E00               	movlw	0
 16377  0039C6  12DE               	iorwf	postinc2,f,c
 16378  0039C8  0E00               	movlw	0
 16379  0039CA  12DE               	iorwf	postinc2,f,c
 16380  0039CC  0E04               	movlw	4
 16381  0039CE  12DE               	iorwf	postinc2,f,c
 16382  0039D0  0E00               	movlw	0
 16383  0039D2  12DE               	iorwf	postinc2,f,c
 16384  0039D4  D000               	goto	i1l5509
 16385  0039D6                     i1l5509:
 16386                           
 16387                           ; BSR set to: 15
 16388                           ;inc\CANlib.h: 575: if (RXB1SIDLbits.SID1)
 16389  0039D6  010F               	movlb	15	; () banked
 16390  0039D8  AD52               	btfss	82,6,b	;volatile
 16391  0039DA  D00D               	goto	i1l5513
 16392                           
 16393                           ; BSR set to: 15
 16394                           ;inc\CANlib.h: 576: msg->identifier |= 0x00080000;
 16395  0039DC  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16396  0039E0  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16397  0039E4  0E00               	movlw	0
 16398  0039E6  12DE               	iorwf	postinc2,f,c
 16399  0039E8  0E00               	movlw	0
 16400  0039EA  12DE               	iorwf	postinc2,f,c
 16401  0039EC  0E08               	movlw	8
 16402  0039EE  12DE               	iorwf	postinc2,f,c
 16403  0039F0  0E00               	movlw	0
 16404  0039F2  12DE               	iorwf	postinc2,f,c
 16405  0039F4  D000               	goto	i1l5513
 16406  0039F6                     i1l5513:
 16407                           
 16408                           ; BSR set to: 15
 16409                           ;inc\CANlib.h: 577: if (RXB1SIDLbits.SID2)
 16410  0039F6  010F               	movlb	15	; () banked
 16411  0039F8  AF52               	btfss	82,7,b	;volatile
 16412  0039FA  D00D               	goto	i1l5517
 16413                           
 16414                           ; BSR set to: 15
 16415                           ;inc\CANlib.h: 578: msg->identifier |= 0x00100000;
 16416  0039FC  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16417  003A00  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16418  003A04  0E00               	movlw	0
 16419  003A06  12DE               	iorwf	postinc2,f,c
 16420  003A08  0E00               	movlw	0
 16421  003A0A  12DE               	iorwf	postinc2,f,c
 16422  003A0C  0E10               	movlw	16
 16423  003A0E  12DE               	iorwf	postinc2,f,c
 16424  003A10  0E00               	movlw	0
 16425  003A12  12DE               	iorwf	postinc2,f,c
 16426  003A14  D000               	goto	i1l5517
 16427  003A16                     i1l5517:
 16428                           
 16429                           ; BSR set to: 15
 16430                           ;inc\CANlib.h: 580: msg->identifier |= ((unsigned long) RXB1SIDH) << 21;
 16431  003A16  CF51 F030          	movff	3921,??_CANreceiveMessage	;volatile
 16432  003A1A  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16433  003A1C  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16434  003A1E  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16435  003A20  0E15               	movlw	21
 16436  003A22                     i1u665_25:
 16437  003A22  90D8               	bcf	status,0,c
 16438  003A24  3630               	rlcf	??_CANreceiveMessage,f,c
 16439  003A26  3631               	rlcf	??_CANreceiveMessage+1,f,c
 16440  003A28  3632               	rlcf	??_CANreceiveMessage+2,f,c
 16441  003A2A  3633               	rlcf	??_CANreceiveMessage+3,f,c
 16442  003A2C  2EE8               	decfsz	wreg,f,c
 16443  003A2E  D7F9               	goto	i1u665_25
 16444  003A30  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16445  003A34  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16446  003A38  5030               	movf	??_CANreceiveMessage,w,c
 16447  003A3A  12DE               	iorwf	postinc2,f,c
 16448  003A3C  5031               	movf	??_CANreceiveMessage+1,w,c
 16449  003A3E  12DE               	iorwf	postinc2,f,c
 16450  003A40  5032               	movf	??_CANreceiveMessage+2,w,c
 16451  003A42  12DE               	iorwf	postinc2,f,c
 16452  003A44  5033               	movf	??_CANreceiveMessage+3,w,c
 16453  003A46  12DE               	iorwf	postinc2,f,c
 16454  003A48  D000               	goto	i1l5519
 16455  003A4A                     i1l5519:
 16456                           
 16457                           ; BSR set to: 15
 16458                           ;inc\CANlib.h: 581: }
 16459                           ;inc\CANlib.h: 583: RXB1CONbits.RXFUL = 0x00;
 16460  003A4A  010F               	movlb	15	; () banked
 16461  003A4C  9F50               	bcf	80,7,b	;volatile
 16462                           
 16463                           ; BSR set to: 15
 16464                           ;inc\CANlib.h: 584: return (error);
 16465                           ;	Return value of _CANreceiveMessage is never used
 16466  003A4E  0012               	return	
 16467  003A50                     i1l408:
 16468                           
 16469                           ; BSR set to: 15
 16470                           ;inc\CANlib.h: 585: }
 16471                           ;inc\CANlib.h: 587: if (RXB0CONbits.RXFUL ==0x01)
 16472  003A50  AE60               	btfss	3936,7,c	;volatile
 16473  003A52  0012               	return	
 16474                           
 16475                           ; BSR set to: 15
 16476                           ;inc\CANlib.h: 588: {
 16477                           ;inc\CANlib.h: 589: msg->identifier = 0;
 16478  003A54  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16479  003A58  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16480  003A5C  6ADE               	clrf	postinc2,c
 16481  003A5E  6ADE               	clrf	postinc2,c
 16482  003A60  6ADE               	clrf	postinc2,c
 16483  003A62  6ADD               	clrf	postdec2,c
 16484                           
 16485                           ; BSR set to: 15
 16486                           ;inc\CANlib.h: 590: msg->data[0] =RXB0D0;
 16487  003A64  EE20 F004          	lfsr	2,4
 16488  003A68  502E               	movf	CANreceiveMessage@msg,w,c
 16489  003A6A  26D9               	addwf	fsr2l,f,c
 16490  003A6C  502F               	movf	CANreceiveMessage@msg+1,w,c
 16491  003A6E  22DA               	addwfc	fsr2h,f,c
 16492  003A70  CF66 FFDF          	movff	3942,indf2	;volatile
 16493                           
 16494                           ; BSR set to: 15
 16495                           ;inc\CANlib.h: 591: msg->data[1] =RXB0D1;
 16496  003A74  EE20 F005          	lfsr	2,5
 16497  003A78  502E               	movf	CANreceiveMessage@msg,w,c
 16498  003A7A  26D9               	addwf	fsr2l,f,c
 16499  003A7C  502F               	movf	CANreceiveMessage@msg+1,w,c
 16500  003A7E  22DA               	addwfc	fsr2h,f,c
 16501  003A80  CF67 FFDF          	movff	3943,indf2	;volatile
 16502                           
 16503                           ; BSR set to: 15
 16504                           ;inc\CANlib.h: 592: msg->data[2] =RXB0D2;
 16505  003A84  EE20 F006          	lfsr	2,6
 16506  003A88  502E               	movf	CANreceiveMessage@msg,w,c
 16507  003A8A  26D9               	addwf	fsr2l,f,c
 16508  003A8C  502F               	movf	CANreceiveMessage@msg+1,w,c
 16509  003A8E  22DA               	addwfc	fsr2h,f,c
 16510  003A90  CF68 FFDF          	movff	3944,indf2	;volatile
 16511                           
 16512                           ; BSR set to: 15
 16513                           ;inc\CANlib.h: 593: msg->data[3] =RXB0D3;
 16514  003A94  EE20 F007          	lfsr	2,7
 16515  003A98  502E               	movf	CANreceiveMessage@msg,w,c
 16516  003A9A  26D9               	addwf	fsr2l,f,c
 16517  003A9C  502F               	movf	CANreceiveMessage@msg+1,w,c
 16518  003A9E  22DA               	addwfc	fsr2h,f,c
 16519  003AA0  CF69 FFDF          	movff	3945,indf2	;volatile
 16520                           
 16521                           ; BSR set to: 15
 16522                           ;inc\CANlib.h: 594: msg->data[4] =RXB0D4;
 16523  003AA4  EE20 F008          	lfsr	2,8
 16524  003AA8  502E               	movf	CANreceiveMessage@msg,w,c
 16525  003AAA  26D9               	addwf	fsr2l,f,c
 16526  003AAC  502F               	movf	CANreceiveMessage@msg+1,w,c
 16527  003AAE  22DA               	addwfc	fsr2h,f,c
 16528  003AB0  CF6A FFDF          	movff	3946,indf2	;volatile
 16529                           
 16530                           ; BSR set to: 15
 16531                           ;inc\CANlib.h: 595: msg->data[5] =RXB0D5;
 16532  003AB4  EE20 F009          	lfsr	2,9
 16533  003AB8  502E               	movf	CANreceiveMessage@msg,w,c
 16534  003ABA  26D9               	addwf	fsr2l,f,c
 16535  003ABC  502F               	movf	CANreceiveMessage@msg+1,w,c
 16536  003ABE  22DA               	addwfc	fsr2h,f,c
 16537  003AC0  CF6B FFDF          	movff	3947,indf2	;volatile
 16538                           
 16539                           ; BSR set to: 15
 16540                           ;inc\CANlib.h: 596: msg->data[6] =RXB0D6;
 16541  003AC4  EE20 F00A          	lfsr	2,10
 16542  003AC8  502E               	movf	CANreceiveMessage@msg,w,c
 16543  003ACA  26D9               	addwf	fsr2l,f,c
 16544  003ACC  502F               	movf	CANreceiveMessage@msg+1,w,c
 16545  003ACE  22DA               	addwfc	fsr2h,f,c
 16546  003AD0  CF6C FFDF          	movff	3948,indf2	;volatile
 16547                           
 16548                           ; BSR set to: 15
 16549                           ;inc\CANlib.h: 597: msg->data[7] =RXB0D7;
 16550  003AD4  EE20 F00B          	lfsr	2,11
 16551  003AD8  502E               	movf	CANreceiveMessage@msg,w,c
 16552  003ADA  26D9               	addwf	fsr2l,f,c
 16553  003ADC  502F               	movf	CANreceiveMessage@msg+1,w,c
 16554  003ADE  22DA               	addwfc	fsr2h,f,c
 16555  003AE0  CF6D FFDF          	movff	3949,indf2	;volatile
 16556                           
 16557                           ; BSR set to: 15
 16558                           ;inc\CANlib.h: 599: msg->RTR = RXB0DLCbits.RXRTR;
 16559  003AE4  EE20 F00E          	lfsr	2,14
 16560  003AE8  502E               	movf	CANreceiveMessage@msg,w,c
 16561  003AEA  26D9               	addwf	fsr2l,f,c
 16562  003AEC  502F               	movf	CANreceiveMessage@msg+1,w,c
 16563  003AEE  22DA               	addwfc	fsr2h,f,c
 16564  003AF0  AC65               	btfss	3941,6,c	;volatile
 16565  003AF2  D002               	goto	i1u667_20
 16566  003AF4  0E01               	movlw	1
 16567  003AF6  D001               	goto	i1u667_26
 16568  003AF8                     i1u667_20:
 16569  003AF8  0E00               	movlw	0
 16570  003AFA                     i1u667_26:
 16571  003AFA  6EDF               	movwf	indf2,c
 16572                           
 16573                           ; BSR set to: 15
 16574                           ;inc\CANlib.h: 601: msg->length = RXB0DLC & 0x0F;
 16575  003AFC  EE20 F00D          	lfsr	2,13
 16576  003B00  502E               	movf	CANreceiveMessage@msg,w,c
 16577  003B02  26D9               	addwf	fsr2l,f,c
 16578  003B04  502F               	movf	CANreceiveMessage@msg+1,w,c
 16579  003B06  22DA               	addwfc	fsr2h,f,c
 16580  003B08  5065               	movf	3941,w,c	;volatile
 16581  003B0A  0B0F               	andlw	15
 16582  003B0C  6EDF               	movwf	indf2,c
 16583                           
 16584                           ; BSR set to: 15
 16585                           ;inc\CANlib.h: 603: msg->type = RXB0SIDLbits.EXID;
 16586  003B0E  EE20 F00C          	lfsr	2,12
 16587  003B12  502E               	movf	CANreceiveMessage@msg,w,c
 16588  003B14  26D9               	addwf	fsr2l,f,c
 16589  003B16  502F               	movf	CANreceiveMessage@msg+1,w,c
 16590  003B18  22DA               	addwfc	fsr2h,f,c
 16591  003B1A  A662               	btfss	3938,3,c	;volatile
 16592  003B1C  D002               	goto	i1u668_20
 16593  003B1E  0E01               	movlw	1
 16594  003B20  D001               	goto	i1u668_26
 16595  003B22                     i1u668_20:
 16596  003B22  0E00               	movlw	0
 16597  003B24                     i1u668_26:
 16598  003B24  6EDF               	movwf	indf2,c
 16599                           
 16600                           ; BSR set to: 15
 16601                           ;inc\CANlib.h: 605: if (RXB0SIDLbits.EXID == 0)
 16602  003B26  B662               	btfsc	3938,3,c	;volatile
 16603  003B28  D043               	goto	i1l5555
 16604                           
 16605                           ; BSR set to: 15
 16606                           ;inc\CANlib.h: 606: {
 16607                           ;inc\CANlib.h: 607: msg->identifier = ((unsigned long)RXB0SIDH)<< 3;
 16608  003B2A  CF61 F030          	movff	3937,??_CANreceiveMessage	;volatile
 16609  003B2E  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16610  003B30  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16611  003B32  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16612  003B34  0E03               	movlw	3
 16613  003B36                     i1u670_25:
 16614  003B36  90D8               	bcf	status,0,c
 16615  003B38  3630               	rlcf	??_CANreceiveMessage,f,c
 16616  003B3A  3631               	rlcf	??_CANreceiveMessage+1,f,c
 16617  003B3C  3632               	rlcf	??_CANreceiveMessage+2,f,c
 16618  003B3E  3633               	rlcf	??_CANreceiveMessage+3,f,c
 16619  003B40  2EE8               	decfsz	wreg,f,c
 16620  003B42  D7F9               	goto	i1u670_25
 16621  003B44  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16622  003B48  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16623  003B4C  C030  FFDE         	movff	??_CANreceiveMessage,postinc2
 16624  003B50  C031  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 16625  003B54  C032  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 16626  003B58  C033  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 16627                           
 16628                           ; BSR set to: 15
 16629                           ;inc\CANlib.h: 608: tamp = (RXB0SIDL >> 5 ) & 0x07;
 16630  003B5C  3862               	swapf	3938,w,c	;volatile
 16631  003B5E  42E8               	rrncf	wreg,f,c
 16632  003B60  0B07               	andlw	7
 16633  003B62  0B07               	andlw	7
 16634  003B64  6E39               	movwf	CANreceiveMessage@tamp,c
 16635                           
 16636                           ; BSR set to: 15
 16637                           ;inc\CANlib.h: 609: msg->identifier = msg->identifier + tamp;
 16638  003B66  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16639  003B6A  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16640  003B6E  CFDE F030          	movff	postinc2,??_CANreceiveMessage
 16641  003B72  CFDE F031          	movff	postinc2,??_CANreceiveMessage+1
 16642  003B76  CFDE F032          	movff	postinc2,??_CANreceiveMessage+2
 16643  003B7A  CFDE F033          	movff	postinc2,??_CANreceiveMessage+3
 16644  003B7E  5039               	movf	CANreceiveMessage@tamp,w,c
 16645  003B80  2430               	addwf	??_CANreceiveMessage,w,c
 16646  003B82  6E34               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 16647  003B84  0E00               	movlw	0
 16648  003B86  2031               	addwfc	??_CANreceiveMessage+1,w,c
 16649  003B88  6E35               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 16650  003B8A  0E00               	movlw	0
 16651  003B8C  2032               	addwfc	??_CANreceiveMessage+2,w,c
 16652  003B8E  6E36               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 16653  003B90  0E00               	movlw	0
 16654  003B92  2033               	addwfc	??_CANreceiveMessage+3,w,c
 16655  003B94  6E37               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 16656  003B96  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16657  003B9A  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16658  003B9E  C034  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 16659  003BA2  C035  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 16660  003BA6  C036  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 16661  003BAA  C037  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 16662                           
 16663                           ;inc\CANlib.h: 610: }
 16664  003BAE  D08E               	goto	i1l5581
 16665  003BB0                     i1l5555:
 16666                           
 16667                           ; BSR set to: 15
 16668                           ;inc\CANlib.h: 611: else
 16669                           ;inc\CANlib.h: 612: {
 16670                           ;inc\CANlib.h: 613: msg->identifier = (unsigned long) RXB0EIDL;
 16671  003BB0  CF64 F030          	movff	3940,??_CANreceiveMessage	;volatile
 16672  003BB4  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16673  003BB6  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16674  003BB8  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16675  003BBA  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16676  003BBE  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16677  003BC2  C030  FFDE         	movff	??_CANreceiveMessage,postinc2
 16678  003BC6  C031  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 16679  003BCA  C032  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 16680  003BCE  C033  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 16681                           
 16682                           ; BSR set to: 15
 16683                           ;inc\CANlib.h: 614: msg->identifier += ((unsigned long) RXB0EIDH) << 8;
 16684  003BD2  CF63 F030          	movff	3939,??_CANreceiveMessage	;volatile
 16685  003BD6  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16686  003BD8  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16687  003BDA  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16688  003BDC  C032  F033         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 16689  003BE0  C031  F032         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 16690  003BE4  C030  F031         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 16691  003BE8  6A30               	clrf	??_CANreceiveMessage,c
 16692  003BEA  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16693  003BEE  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16694  003BF2  5030               	movf	??_CANreceiveMessage,w,c
 16695  003BF4  26DE               	addwf	postinc2,f,c
 16696  003BF6  5031               	movf	??_CANreceiveMessage+1,w,c
 16697  003BF8  22DE               	addwfc	postinc2,f,c
 16698  003BFA  5032               	movf	??_CANreceiveMessage+2,w,c
 16699  003BFC  22DE               	addwfc	postinc2,f,c
 16700  003BFE  5033               	movf	??_CANreceiveMessage+3,w,c
 16701  003C00  22DE               	addwfc	postinc2,f,c
 16702                           
 16703                           ; BSR set to: 15
 16704                           ;inc\CANlib.h: 616: if (RXB0SIDLbits.EID16)
 16705  003C02  A062               	btfss	3938,0,c	;volatile
 16706  003C04  D00D               	goto	i1l5563
 16707                           
 16708                           ; BSR set to: 15
 16709                           ;inc\CANlib.h: 617: msg->identifier |= 0x00010000;
 16710  003C06  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16711  003C0A  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16712  003C0E  0E00               	movlw	0
 16713  003C10  12DE               	iorwf	postinc2,f,c
 16714  003C12  0E00               	movlw	0
 16715  003C14  12DE               	iorwf	postinc2,f,c
 16716  003C16  0E01               	movlw	1
 16717  003C18  12DE               	iorwf	postinc2,f,c
 16718  003C1A  0E00               	movlw	0
 16719  003C1C  12DE               	iorwf	postinc2,f,c
 16720  003C1E  D000               	goto	i1l5563
 16721  003C20                     i1l5563:
 16722                           
 16723                           ; BSR set to: 15
 16724                           ;inc\CANlib.h: 618: if (RXB0SIDLbits.EID17)
 16725  003C20  A262               	btfss	3938,1,c	;volatile
 16726  003C22  D00D               	goto	i1l5567
 16727                           
 16728                           ; BSR set to: 15
 16729                           ;inc\CANlib.h: 619: msg->identifier |= 0x00020000;
 16730  003C24  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16731  003C28  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16732  003C2C  0E00               	movlw	0
 16733  003C2E  12DE               	iorwf	postinc2,f,c
 16734  003C30  0E00               	movlw	0
 16735  003C32  12DE               	iorwf	postinc2,f,c
 16736  003C34  0E02               	movlw	2
 16737  003C36  12DE               	iorwf	postinc2,f,c
 16738  003C38  0E00               	movlw	0
 16739  003C3A  12DE               	iorwf	postinc2,f,c
 16740  003C3C  D000               	goto	i1l5567
 16741  003C3E                     i1l5567:
 16742                           
 16743                           ; BSR set to: 15
 16744                           ;inc\CANlib.h: 620: if (RXB0SIDLbits.SID0)
 16745  003C3E  AA62               	btfss	3938,5,c	;volatile
 16746  003C40  D00D               	goto	i1l5571
 16747                           
 16748                           ; BSR set to: 15
 16749                           ;inc\CANlib.h: 621: msg->identifier |= 0x00040000;
 16750  003C42  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16751  003C46  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16752  003C4A  0E00               	movlw	0
 16753  003C4C  12DE               	iorwf	postinc2,f,c
 16754  003C4E  0E00               	movlw	0
 16755  003C50  12DE               	iorwf	postinc2,f,c
 16756  003C52  0E04               	movlw	4
 16757  003C54  12DE               	iorwf	postinc2,f,c
 16758  003C56  0E00               	movlw	0
 16759  003C58  12DE               	iorwf	postinc2,f,c
 16760  003C5A  D000               	goto	i1l5571
 16761  003C5C                     i1l5571:
 16762                           
 16763                           ; BSR set to: 15
 16764                           ;inc\CANlib.h: 622: if (RXB0SIDLbits.SID1)
 16765  003C5C  AC62               	btfss	3938,6,c	;volatile
 16766  003C5E  D00D               	goto	i1l5575
 16767                           
 16768                           ; BSR set to: 15
 16769                           ;inc\CANlib.h: 623: msg->identifier |= 0x00080000;
 16770  003C60  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16771  003C64  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16772  003C68  0E00               	movlw	0
 16773  003C6A  12DE               	iorwf	postinc2,f,c
 16774  003C6C  0E00               	movlw	0
 16775  003C6E  12DE               	iorwf	postinc2,f,c
 16776  003C70  0E08               	movlw	8
 16777  003C72  12DE               	iorwf	postinc2,f,c
 16778  003C74  0E00               	movlw	0
 16779  003C76  12DE               	iorwf	postinc2,f,c
 16780  003C78  D000               	goto	i1l5575
 16781  003C7A                     i1l5575:
 16782                           
 16783                           ; BSR set to: 15
 16784                           ;inc\CANlib.h: 624: if (RXB0SIDLbits.SID2)
 16785  003C7A  AE62               	btfss	3938,7,c	;volatile
 16786  003C7C  D00D               	goto	i1l5579
 16787                           
 16788                           ; BSR set to: 15
 16789                           ;inc\CANlib.h: 625: msg->identifier |= 0x00100000;
 16790  003C7E  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16791  003C82  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16792  003C86  0E00               	movlw	0
 16793  003C88  12DE               	iorwf	postinc2,f,c
 16794  003C8A  0E00               	movlw	0
 16795  003C8C  12DE               	iorwf	postinc2,f,c
 16796  003C8E  0E10               	movlw	16
 16797  003C90  12DE               	iorwf	postinc2,f,c
 16798  003C92  0E00               	movlw	0
 16799  003C94  12DE               	iorwf	postinc2,f,c
 16800  003C96  D000               	goto	i1l5579
 16801  003C98                     i1l5579:
 16802                           
 16803                           ; BSR set to: 15
 16804                           ;inc\CANlib.h: 627: msg->identifier |= ((unsigned long) RXB0SIDH) << 21;
 16805  003C98  CF61 F030          	movff	3937,??_CANreceiveMessage	;volatile
 16806  003C9C  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16807  003C9E  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16808  003CA0  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16809  003CA2  0E15               	movlw	21
 16810  003CA4                     i1u676_25:
 16811  003CA4  90D8               	bcf	status,0,c
 16812  003CA6  3630               	rlcf	??_CANreceiveMessage,f,c
 16813  003CA8  3631               	rlcf	??_CANreceiveMessage+1,f,c
 16814  003CAA  3632               	rlcf	??_CANreceiveMessage+2,f,c
 16815  003CAC  3633               	rlcf	??_CANreceiveMessage+3,f,c
 16816  003CAE  2EE8               	decfsz	wreg,f,c
 16817  003CB0  D7F9               	goto	i1u676_25
 16818  003CB2  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16819  003CB6  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16820  003CBA  5030               	movf	??_CANreceiveMessage,w,c
 16821  003CBC  12DE               	iorwf	postinc2,f,c
 16822  003CBE  5031               	movf	??_CANreceiveMessage+1,w,c
 16823  003CC0  12DE               	iorwf	postinc2,f,c
 16824  003CC2  5032               	movf	??_CANreceiveMessage+2,w,c
 16825  003CC4  12DE               	iorwf	postinc2,f,c
 16826  003CC6  5033               	movf	??_CANreceiveMessage+3,w,c
 16827  003CC8  12DE               	iorwf	postinc2,f,c
 16828  003CCA  D000               	goto	i1l5581
 16829  003CCC                     i1l5581:
 16830                           
 16831                           ; BSR set to: 15
 16832                           ;inc\CANlib.h: 629: }
 16833                           ;inc\CANlib.h: 630: RXB0CONbits.RXFUL = 0x00;
 16834  003CCC  9E60               	bcf	3936,7,c	;volatile
 16835                           
 16836                           ; BSR set to: 15
 16837                           ;inc\CANlib.h: 632: return (error);
 16838                           ;	Return value of _CANreceiveMessage is never used
 16839  003CCE  0012               	return	
 16840                           
 16841                           ; BSR set to: 15
 16842                           
 16843                           ; BSR set to: 15
 16844  003CD0  0012               	return		;funcret
 16845  003CD2                     __end_of_CANreceiveMessage:
 16846                           	opt stack 0
 16847                           pclatu	equ	0xFFB
 16848                           pclath	equ	0xFFA
 16849                           tblptru	equ	0xFF8
 16850                           tblptrh	equ	0xFF7
 16851                           tblptrl	equ	0xFF6
 16852                           tablat	equ	0xFF5
 16853                           prodh	equ	0xFF4
 16854                           prodl	equ	0xFF3
 16855                           intcon	equ	0xFF2
 16856                           intcon2	equ	0xFF1
 16857                           postinc0	equ	0xFEE
 16858                           fsr0h	equ	0xFEA
 16859                           fsr0l	equ	0xFE9
 16860                           wreg	equ	0xFE8
 16861                           fsr1h	equ	0xFE2
 16862                           fsr1l	equ	0xFE1
 16863                           bsr	equ	0xFE0
 16864                           indf2	equ	0xFDF
 16865                           postinc2	equ	0xFDE
 16866                           postdec2	equ	0xFDD
 16867                           plusw2	equ	0xFDB
 16868                           fsr2h	equ	0xFDA
 16869                           fsr2l	equ	0xFD9
 16870                           status	equ	0xFD8
 16871                           
 16872 ;; *************** function _CANisRxReady *****************
 16873 ;; Defined at:
 16874 ;;		line 1163 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 16875 ;; Parameters:    Size  Location     Type
 16876 ;;		None
 16877 ;; Auto vars:     Size  Location     Type
 16878 ;;		None
 16879 ;; Return value:  Size  Location     Type
 16880 ;;                  1    wreg      unsigned char 
 16881 ;; Registers used:
 16882 ;;		wreg, status,2
 16883 ;; Tracked objects:
 16884 ;;		On entry : 0/0
 16885 ;;		On exit  : 0/0
 16886 ;;		Unchanged: 0/0
 16887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16891 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16892 ;;Total ram usage:        1 bytes
 16893 ;; Hardware stack levels used:    1
 16894 ;; Hardware stack levels required when called:    2
 16895 ;; This function calls:
 16896 ;;		Nothing
 16897 ;; This function is called by:
 16898 ;;		_ISR_Bassa
 16899 ;; This function uses a non-reentrant model
 16900 ;;
 16901                           
 16902                           	psect	text44
 16903  006594                     __ptext44:
 16904                           	opt stack 0
 16905  006594                     _CANisRxReady:
 16906                           	opt stack 20
 16907                           
 16908                           ;inc\CANlib.h: 1165: return (RXB0CONbits.RXFUL || RXB1CONbits.RXFUL);
 16909                           
 16910                           ; BSR set to: 15
 16911                           ;incstack = 0
 16912  006594  0E01               	movlw	1
 16913  006596  6E2E               	movwf	_CANisRxReady$2843,c
 16914  006598  BE60               	btfsc	3936,7,c	;volatile
 16915  00659A  D005               	goto	i1l559
 16916  00659C  010F               	movlb	15	; () banked
 16917  00659E  BF50               	btfsc	80,7,b	;volatile
 16918  0065A0  D002               	goto	i1l559
 16919                           
 16920                           ; BSR set to: 15
 16921  0065A2  0E00               	movlw	0
 16922  0065A4  6E2E               	movwf	_CANisRxReady$2843,c
 16923  0065A6                     i1l559:
 16924  0065A6  502E               	movf	_CANisRxReady$2843,w,c
 16925  0065A8  0012               	return	
 16926  0065AA  0012               	return		;funcret
 16927  0065AC                     __end_of_CANisRxReady:
 16928                           	opt stack 0
 16929                           pclatu	equ	0xFFB
 16930                           pclath	equ	0xFFA
 16931                           tblptru	equ	0xFF8
 16932                           tblptrh	equ	0xFF7
 16933                           tblptrl	equ	0xFF6
 16934                           tablat	equ	0xFF5
 16935                           prodh	equ	0xFF4
 16936                           prodl	equ	0xFF3
 16937                           intcon	equ	0xFF2
 16938                           intcon2	equ	0xFF1
 16939                           postinc0	equ	0xFEE
 16940                           fsr0h	equ	0xFEA
 16941                           fsr0l	equ	0xFE9
 16942                           wreg	equ	0xFE8
 16943                           fsr1h	equ	0xFE2
 16944                           fsr1l	equ	0xFE1
 16945                           bsr	equ	0xFE0
 16946                           indf2	equ	0xFDF
 16947                           postinc2	equ	0xFDE
 16948                           postdec2	equ	0xFDD
 16949                           plusw2	equ	0xFDB
 16950                           fsr2h	equ	0xFDA
 16951                           fsr2l	equ	0xFD9
 16952                           status	equ	0xFD8
 16953                           
 16954 ;; *************** function _ISR_Alta *****************
 16955 ;; Defined at:
 16956 ;;		line 103 in file "parcheggio.c"
 16957 ;; Parameters:    Size  Location     Type
 16958 ;;		None
 16959 ;; Auto vars:     Size  Location     Type
 16960 ;;		None
 16961 ;; Return value:  Size  Location     Type
 16962 ;;		None               void
 16963 ;; Registers used:
 16964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16965 ;; Tracked objects:
 16966 ;;		On entry : 0/0
 16967 ;;		On exit  : 0/0
 16968 ;;		Unchanged: 0/0
 16969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16972 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16973 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16974 ;;Total ram usage:       16 bytes
 16975 ;; Hardware stack levels used:    1
 16976 ;; Hardware stack levels required when called:    1
 16977 ;; This function calls:
 16978 ;;		___lwdiv
 16979 ;; This function is called by:
 16980 ;;		Interrupt level 2
 16981 ;; This function uses a non-reentrant model
 16982 ;;
 16983                           
 16984                           	psect	intcode
 16985  000008                     __pintcode:
 16986                           	opt stack 0
 16987  000008                     _ISR_Alta:
 16988                           	opt stack 19
 16989                           
 16990                           ;incstack = 0
 16991  000008  CFFA F069          	movff	pclath,??_ISR_Alta+2
 16992  00000C  CFFB F06A          	movff	pclatu,??_ISR_Alta+3
 16993  000010  CFE9 F06B          	movff	fsr0l,??_ISR_Alta+4
 16994  000014  EF7C  F02F         	goto	int_func
 16995                           pclatu	equ	0xFFB
 16996                           pclath	equ	0xFFA
 16997                           tblptru	equ	0xFF8
 16998                           tblptrh	equ	0xFF7
 16999                           tblptrl	equ	0xFF6
 17000                           tablat	equ	0xFF5
 17001                           prodh	equ	0xFF4
 17002                           prodl	equ	0xFF3
 17003                           intcon	equ	0xFF2
 17004                           intcon2	equ	0xFF1
 17005                           postinc0	equ	0xFEE
 17006                           fsr0h	equ	0xFEA
 17007                           fsr0l	equ	0xFE9
 17008                           wreg	equ	0xFE8
 17009                           fsr1h	equ	0xFE2
 17010                           fsr1l	equ	0xFE1
 17011                           bsr	equ	0xFE0
 17012                           indf2	equ	0xFDF
 17013                           postinc2	equ	0xFDE
 17014                           postdec2	equ	0xFDD
 17015                           plusw2	equ	0xFDB
 17016                           fsr2h	equ	0xFDA
 17017                           fsr2l	equ	0xFD9
 17018                           status	equ	0xFD8
 17019                           
 17020                           	psect	intcode_body
 17021  005EF8                     __pintcode_body:
 17022                           	opt stack 19
 17023  005EF8                     int_func:
 17024                           	opt stack 19
 17025  005EF8  CFEA F06C          	movff	fsr0h,??_ISR_Alta+5
 17026  005EFC  CFE1 F06D          	movff	fsr1l,??_ISR_Alta+6
 17027  005F00  CFE2 F06E          	movff	fsr1h,??_ISR_Alta+7
 17028  005F04  CFD9 F06F          	movff	fsr2l,??_ISR_Alta+8
 17029  005F08  CFDA F070          	movff	fsr2h,??_ISR_Alta+9
 17030  005F0C  CFF3 F071          	movff	prodl,??_ISR_Alta+10
 17031  005F10  CFF4 F072          	movff	prodh,??_ISR_Alta+11
 17032  005F14  CFF6 F073          	movff	tblptrl,??_ISR_Alta+12
 17033  005F18  CFF7 F074          	movff	tblptrh,??_ISR_Alta+13
 17034  005F1C  CFF8 F075          	movff	tblptru,??_ISR_Alta+14
 17035  005F20  CFF5 F076          	movff	tablat,??_ISR_Alta+15
 17036                           
 17037                           ;parcheggio.c: 104: if (INTCON2bits.INTEDG0 == 1) {
 17038  005F24  ACF1               	btfss	intcon2,6,c	;volatile
 17039  005F26  D007               	goto	i2l690
 17040                           
 17041                           ;parcheggio.c: 105: INTCON2bits.INTEDG0 = 0;
 17042  005F28  9CF1               	bcf	intcon2,6,c	;volatile
 17043                           
 17044                           ;parcheggio.c: 106: TMR3H = 0;
 17045  005F2A  0E00               	movlw	0
 17046  005F2C  6EB3               	movwf	4019,c	;volatile
 17047                           
 17048                           ;parcheggio.c: 107: TMR3L = 0;
 17049  005F2E  0E00               	movlw	0
 17050  005F30  6EB2               	movwf	4018,c	;volatile
 17051                           
 17052                           ;parcheggio.c: 108: distance_error = 0;
 17053  005F32  9A56               	bcf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 17054                           
 17055                           ;parcheggio.c: 109: } else {
 17056  005F34  D031               	goto	i2l7207
 17057  005F36                     i2l690:
 17058                           
 17059                           ;parcheggio.c: 110: TMR3H_temp = TMR3H;
 17060  005F36  CFB3 F022          	movff	4019,_TMR3H_temp	;volatile
 17061                           
 17062                           ;parcheggio.c: 111: TMR3L_temp = TMR3L;
 17063  005F3A  CFB2 F023          	movff	4018,_TMR3L_temp	;volatile
 17064                           
 17065                           ;parcheggio.c: 112: timerValue2 = TMR3H_temp;
 17066  005F3E  C022  F01F         	movff	_TMR3H_temp,_timerValue2	;volatile
 17067  005F42  6A20               	clrf	_timerValue2+1,c	;volatile
 17068                           
 17069                           ;parcheggio.c: 113: timerValue2 = ((timerValue2 << 8) | (TMR3L_temp));
 17070  005F44  501F               	movf	_timerValue2,w,c	;volatile
 17071  005F46  0100               	movlb	0	; () banked
 17072  005F48  6F67               	movwf	??_ISR_Alta& (0+255),b
 17073  005F4A  5023               	movf	_TMR3L_temp,w,c	;volatile
 17074  005F4C  6E1F               	movwf	_timerValue2,c	;volatile
 17075  005F4E  C067  F020         	movff	??_ISR_Alta,_timerValue2+1	;volatile
 17076                           
 17077                           ; BSR set to: 0
 17078                           ;parcheggio.c: 114: pulse_time = timerValue2 / 2;
 17079  005F52  90D8               	bcf	status,0,c
 17080  005F54  3020               	rrcf	_timerValue2+1,w,c	;volatile
 17081  005F56  0100               	movlb	0	; () banked
 17082  005F58  6F67               	movwf	??_ISR_Alta& (0+255),b
 17083  005F5A  301F               	rrcf	_timerValue2,w,c	;volatile
 17084  005F5C  6E1D               	movwf	_pulse_time,c	;volatile
 17085  005F5E  C067  F01E         	movff	??_ISR_Alta,_pulse_time+1	;volatile
 17086                           
 17087                           ; BSR set to: 0
 17088                           ;parcheggio.c: 115: sensor_distance[MUX_index] = pulse_time / 58;
 17089  005F62  C01D  F060         	movff	_pulse_time,___lwdiv@dividend	;volatile
 17090  005F66  C01E  F061         	movff	_pulse_time+1,___lwdiv@dividend+1	;volatile
 17091  005F6A  0E00               	movlw	0
 17092  005F6C  0100               	movlb	0	; () banked
 17093  005F6E  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 17094  005F70  0E3A               	movlw	58
 17095  005F72  6F62               	movwf	___lwdiv@divisor& (0+255),b
 17096  005F74  EC8A  F030         	call	___lwdiv	;wreg free
 17097  005F78  5021               	movf	_MUX_index,w,c	;volatile
 17098  005F7A  0D02               	mullw	2
 17099  005F7C  0E01               	movlw	low _sensor_distance
 17100  005F7E  24F3               	addwf	prodl,w,c
 17101  005F80  6ED9               	movwf	fsr2l,c
 17102  005F82  0E00               	movlw	high _sensor_distance
 17103  005F84  20F4               	addwfc	prodh,w,c
 17104  005F86  6EDA               	movwf	fsr2h,c
 17105  005F88  0100               	movlb	0	; () banked
 17106  005F8A  C060  FFDE         	movff	?___lwdiv,postinc2
 17107  005F8E  0100               	movlb	0	; () banked
 17108  005F90  C061  FFDD         	movff	?___lwdiv+1,postdec2
 17109                           
 17110                           ; BSR set to: 0
 17111                           ;parcheggio.c: 116: INTCON2bits.INTEDG0 = 1;
 17112  005F94  8CF1               	bsf	intcon2,6,c	;volatile
 17113  005F96  D000               	goto	i2l7207
 17114  005F98                     i2l7207:
 17115                           
 17116                           ;parcheggio.c: 117: }
 17117                           ;parcheggio.c: 118: INTCONbits.INT0IF = 0;
 17118  005F98  92F2               	bcf	intcon,1,c	;volatile
 17119  005F9A  C076  FFF5         	movff	??_ISR_Alta+15,tablat
 17120  005F9E  C075  FFF8         	movff	??_ISR_Alta+14,tblptru
 17121  005FA2  C074  FFF7         	movff	??_ISR_Alta+13,tblptrh
 17122  005FA6  C073  FFF6         	movff	??_ISR_Alta+12,tblptrl
 17123  005FAA  C072  FFF4         	movff	??_ISR_Alta+11,prodh
 17124  005FAE  C071  FFF3         	movff	??_ISR_Alta+10,prodl
 17125  005FB2  C070  FFDA         	movff	??_ISR_Alta+9,fsr2h
 17126  005FB6  C06F  FFD9         	movff	??_ISR_Alta+8,fsr2l
 17127  005FBA  C06E  FFE2         	movff	??_ISR_Alta+7,fsr1h
 17128  005FBE  C06D  FFE1         	movff	??_ISR_Alta+6,fsr1l
 17129  005FC2  C06C  FFEA         	movff	??_ISR_Alta+5,fsr0h
 17130  005FC6  C06B  FFE9         	movff	??_ISR_Alta+4,fsr0l
 17131  005FCA  C06A  FFFB         	movff	??_ISR_Alta+3,pclatu
 17132  005FCE  C069  FFFA         	movff	??_ISR_Alta+2,pclath
 17133  005FD2  0011               	retfie		f
 17134  005FD4                     __end_of_ISR_Alta:
 17135                           	opt stack 0
 17136                           pclatu	equ	0xFFB
 17137                           pclath	equ	0xFFA
 17138                           tblptru	equ	0xFF8
 17139                           tblptrh	equ	0xFF7
 17140                           tblptrl	equ	0xFF6
 17141                           tablat	equ	0xFF5
 17142                           prodh	equ	0xFF4
 17143                           prodl	equ	0xFF3
 17144                           intcon	equ	0xFF2
 17145                           intcon2	equ	0xFF1
 17146                           postinc0	equ	0xFEE
 17147                           fsr0h	equ	0xFEA
 17148                           fsr0l	equ	0xFE9
 17149                           wreg	equ	0xFE8
 17150                           fsr1h	equ	0xFE2
 17151                           fsr1l	equ	0xFE1
 17152                           bsr	equ	0xFE0
 17153                           indf2	equ	0xFDF
 17154                           postinc2	equ	0xFDE
 17155                           postdec2	equ	0xFDD
 17156                           plusw2	equ	0xFDB
 17157                           fsr2h	equ	0xFDA
 17158                           fsr2l	equ	0xFD9
 17159                           status	equ	0xFD8
 17160                           
 17161 ;; *************** function ___lwdiv *****************
 17162 ;; Defined at:
 17163 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 17164 ;; Parameters:    Size  Location     Type
 17165 ;;  dividend        2    0[BANK0 ] unsigned int 
 17166 ;;  divisor         2    2[BANK0 ] unsigned int 
 17167 ;; Auto vars:     Size  Location     Type
 17168 ;;  quotient        2    5[BANK0 ] unsigned int 
 17169 ;;  counter         1    4[BANK0 ] unsigned char 
 17170 ;; Return value:  Size  Location     Type
 17171 ;;                  2    0[BANK0 ] unsigned int 
 17172 ;; Registers used:
 17173 ;;		wreg, status,2, status,0
 17174 ;; Tracked objects:
 17175 ;;		On entry : 0/0
 17176 ;;		On exit  : 0/0
 17177 ;;		Unchanged: 0/0
 17178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17179 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17180 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17182 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17183 ;;Total ram usage:        7 bytes
 17184 ;; Hardware stack levels used:    1
 17185 ;; This function calls:
 17186 ;;		Nothing
 17187 ;; This function is called by:
 17188 ;;		_ISR_Alta
 17189 ;; This function uses a non-reentrant model
 17190 ;;
 17191                           
 17192                           	psect	text46
 17193  006114                     __ptext46:
 17194                           	opt stack 0
 17195  006114                     ___lwdiv:
 17196                           	opt stack 19
 17197                           
 17198                           ;incstack = 0
 17199  006114  0E00               	movlw	0
 17200  006116  0100               	movlb	0	; () banked
 17201  006118  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17202  00611A  0E00               	movlw	0
 17203  00611C  6F65               	movwf	___lwdiv@quotient& (0+255),b
 17204                           
 17205                           ; BSR set to: 0
 17206  00611E  0100               	movlb	0	; () banked
 17207  006120  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17208  006122  0100               	movlb	0	; () banked
 17209  006124  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17210  006126  B4D8               	btfsc	status,2,c
 17211  006128  D031               	goto	i2l1423
 17212                           
 17213                           ; BSR set to: 0
 17214  00612A  0E01               	movlw	1
 17215  00612C  0100               	movlb	0	; () banked
 17216  00612E  6F64               	movwf	___lwdiv@counter& (0+255),b
 17217  006130  D007               	goto	i2l7177
 17218  006132                     i2l7175:
 17219                           
 17220                           ; BSR set to: 0
 17221  006132  0100               	movlb	0	; () banked
 17222  006134  90D8               	bcf	status,0,c
 17223  006136  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 17224  006138  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17225  00613A  0100               	movlb	0	; () banked
 17226  00613C  2B64               	incf	___lwdiv@counter& (0+255),f,b
 17227  00613E  D000               	goto	i2l7177
 17228  006140                     i2l7177:
 17229                           
 17230                           ; BSR set to: 0
 17231  006140  0100               	movlb	0	; () banked
 17232  006142  BF63               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
 17233  006144  D002               	goto	i2l7179
 17234  006146  D7F5               	goto	i2l7175
 17235                           
 17236                           ; BSR set to: 0
 17237  006148  D000               	goto	i2l7179
 17238  00614A                     i2l7179:
 17239                           
 17240                           ; BSR set to: 0
 17241  00614A  0100               	movlb	0	; () banked
 17242  00614C  90D8               	bcf	status,0,c
 17243  00614E  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 17244  006150  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17245                           
 17246                           ; BSR set to: 0
 17247  006152  0100               	movlb	0	; () banked
 17248  006154  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17249  006156  0100               	movlb	0	; () banked
 17250  006158  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 17251  00615A  0100               	movlb	0	; () banked
 17252  00615C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17253  00615E  0100               	movlb	0	; () banked
 17254  006160  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17255  006162  A0D8               	btfss	status,0,c
 17256  006164  D00B               	goto	i2l7187
 17257                           
 17258                           ; BSR set to: 0
 17259  006166  0100               	movlb	0	; () banked
 17260  006168  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17261  00616A  0100               	movlb	0	; () banked
 17262  00616C  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 17263  00616E  0100               	movlb	0	; () banked
 17264  006170  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17265  006172  0100               	movlb	0	; () banked
 17266  006174  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17267                           
 17268                           ; BSR set to: 0
 17269  006176  0100               	movlb	0	; () banked
 17270  006178  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 17271  00617A  D000               	goto	i2l7187
 17272  00617C                     i2l7187:
 17273                           
 17274                           ; BSR set to: 0
 17275  00617C  0100               	movlb	0	; () banked
 17276  00617E  90D8               	bcf	status,0,c
 17277  006180  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17278  006182  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 17279                           
 17280                           ; BSR set to: 0
 17281  006184  0100               	movlb	0	; () banked
 17282  006186  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 17283  006188  D7E0               	goto	i2l7179
 17284  00618A  D000               	goto	i2l1423
 17285  00618C                     i2l1423:
 17286                           
 17287                           ; BSR set to: 0
 17288  00618C  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 17289  006190  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17290                           
 17291                           ; BSR set to: 0
 17292  006194  0012               	return		;funcret
 17293  006196                     __end_of___lwdiv:
 17294                           	opt stack 0
 17295                           pclatu	equ	0xFFB
 17296                           pclath	equ	0xFFA
 17297                           tblptru	equ	0xFF8
 17298                           tblptrh	equ	0xFF7
 17299                           tblptrl	equ	0xFF6
 17300                           tablat	equ	0xFF5
 17301                           prodh	equ	0xFF4
 17302                           prodl	equ	0xFF3
 17303                           intcon	equ	0xFF2
 17304                           intcon2	equ	0xFF1
 17305                           postinc0	equ	0xFEE
 17306                           fsr0h	equ	0xFEA
 17307                           fsr0l	equ	0xFE9
 17308                           wreg	equ	0xFE8
 17309                           fsr1h	equ	0xFE2
 17310                           fsr1l	equ	0xFE1
 17311                           bsr	equ	0xFE0
 17312                           indf2	equ	0xFDF
 17313                           postinc2	equ	0xFDE
 17314                           postdec2	equ	0xFDD
 17315                           plusw2	equ	0xFDB
 17316                           fsr2h	equ	0xFDA
 17317                           fsr2l	equ	0xFD9
 17318                           status	equ	0xFD8
 17319                           pclatu	equ	0xFFB
 17320                           pclath	equ	0xFFA
 17321                           tblptru	equ	0xFF8
 17322                           tblptrh	equ	0xFF7
 17323                           tblptrl	equ	0xFF6
 17324                           tablat	equ	0xFF5
 17325                           prodh	equ	0xFF4
 17326                           prodl	equ	0xFF3
 17327                           intcon	equ	0xFF2
 17328                           intcon2	equ	0xFF1
 17329                           postinc0	equ	0xFEE
 17330                           fsr0h	equ	0xFEA
 17331                           fsr0l	equ	0xFE9
 17332                           wreg	equ	0xFE8
 17333                           fsr1h	equ	0xFE2
 17334                           fsr1l	equ	0xFE1
 17335                           bsr	equ	0xFE0
 17336                           indf2	equ	0xFDF
 17337                           postinc2	equ	0xFDE
 17338                           postdec2	equ	0xFDD
 17339                           plusw2	equ	0xFDB
 17340                           fsr2h	equ	0xFDA
 17341                           fsr2l	equ	0xFD9
 17342                           status	equ	0xFD8
 17343                           
 17344                           	psect	param0
 17345  0000                     pclatu	equ	0xFFB
 17346                           pclath	equ	0xFFA
 17347                           tblptru	equ	0xFF8
 17348                           tblptrh	equ	0xFF7
 17349                           tblptrl	equ	0xFF6
 17350                           tablat	equ	0xFF5
 17351                           prodh	equ	0xFF4
 17352                           prodl	equ	0xFF3
 17353                           intcon	equ	0xFF2
 17354                           intcon2	equ	0xFF1
 17355                           postinc0	equ	0xFEE
 17356                           fsr0h	equ	0xFEA
 17357                           fsr0l	equ	0xFE9
 17358                           wreg	equ	0xFE8
 17359                           fsr1h	equ	0xFE2
 17360                           fsr1l	equ	0xFE1
 17361                           bsr	equ	0xFE0
 17362                           indf2	equ	0xFDF
 17363                           postinc2	equ	0xFDE
 17364                           postdec2	equ	0xFDD
 17365                           plusw2	equ	0xFDB
 17366                           fsr2h	equ	0xFDA
 17367                           fsr2l	equ	0xFD9
 17368                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    80
    Data        3
    BSS         191
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     40      87
    BANK0           160    121     137
    BANK1           256     93     226
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 24
		 -> sin@coeff_a(CODE[20]), sin@coeff_b(CODE[16]), atan@coeff_a(CODE[24]), atan@coeff_b(CODE[20]), 

    CANreceiveMessage@msg	PTR struct . size(2) Largest target is 15
		 -> msg(BANK1[15]), 

    CANsendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data_speed(BANK1[8]), data_correction(BANK1[8]), data_test(BANK1[8]), data(BANK1[8]), 
		 -> data_brake(COMRAM[8]), data_steering(BANK1[8]), sensor_distance_short(BANK1[8]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Alta in COMRAM

    None.

Critical Paths under _ISR_Bassa in COMRAM

    _ISR_Bassa->i1_CANsendMessage
    i1_delay_ms->i1___wmul
    i1_can_send->i1_CANsendMessage

Critical Paths under _main in BANK0

    _parallelo->_sqrt
    _can_send->_CANsendMessage
    _asin->_sqrt
    _sqrt->___flsub
    _atan->___flge
    _fabs->___flneg
    ___awtofl->___flpack
    _delay_s->_delay_ms
    _delay_ms->___wmul
    _sin->___flsub
    _floor->___flge
    ___fltol->___flneg
    ___flge->_fabs
    ___altofl->___fltol
    _eval_poly->___fladd
    ___flmul->___flpack
    ___flsub->_floor
    ___fladd->___fldiv
    ___flneg->___fladd
    ___fldiv->___flmul
    ___lwtofl->___flpack
    _configurations->_CANInitialize
    _CANInitialize->_CANSetFilter
    _CANInitialize->_CANSetMask

Critical Paths under _ISR_Alta in BANK0

    _ISR_Alta->___lwdiv

Critical Paths under _ISR_Bassa in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_park_routine
    _park_search->_matematica
    _matematica->_cos
    _park_routine->_cos
    _parallelo->_asin
    _asin->_sqrt
    _cos->_asin

Critical Paths under _ISR_Alta in BANK1

    None.

Critical Paths under _ISR_Bassa in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Alta in BANK2

    None.

Critical Paths under _ISR_Bassa in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Alta in BANK3

    None.

Critical Paths under _ISR_Bassa in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Alta in BANK4

    None.

Critical Paths under _ISR_Bassa in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Alta in BANK5

    None.

Critical Paths under _ISR_Bassa in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Alta in BANK6

    None.

Critical Paths under _ISR_Bassa in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Alta in BANK7

    None.

Critical Paths under _ISR_Bassa in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Alta in BANK8

    None.

Critical Paths under _ISR_Bassa in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Alta in BANK9

    None.

Critical Paths under _ISR_Bassa in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Alta in BANK10

    None.

Critical Paths under _ISR_Bassa in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Alta in BANK11

    None.

Critical Paths under _ISR_Bassa in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Alta in BANK12

    None.

Critical Paths under _ISR_Bassa in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  778376
                       _CANisTxReady
                     _CANsendMessage
                     _configurations
                           _delay_ms
                       _park_routine
                        _park_search
 ---------------------------------------------------------------------------------
 (1) _park_search                                          2     2      0  380113
                                             89 BANK1      2     2      0
                       _CANisTxReady
                     _CANsendMessage
                           ___awtofl
                             ___flge
                           ___lwtofl
                                _abs
                         _matematica
                          _parallelo
 ---------------------------------------------------------------------------------
 (2) _matematica                                          40    40      0  208702
                                             53 BANK1     36    36      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                               _asin
                                _cos
 ---------------------------------------------------------------------------------
 (1) _park_routine                                        52    52      0  384666
                                             53 BANK1     40    40      0
                       _CANisTxReady
                     _CANsendMessage
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lwtofl
                               _asin
                           _can_send
                                _cos
                           _delay_ms
                            _delay_s
                          _parallelo
 ---------------------------------------------------------------------------------
 (2) _parallelo                                            2     2      0  157338
                                             45 BANK1      2     2      0
                           ___awtofl
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___fltol
                                _abs
                               _asin
                           _can_send
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _can_send                                             0     0      0    6424
                       _CANisTxReady
                     _CANsendMessage
 ---------------------------------------------------------------------------------
 (4) _CANsendMessage                                      16     8      8    6387
                                             23 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (4) _CANisTxReady                                         1     1      0      37
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _asin                                                40    36      4  100446
                                             17 BANK1     28    24      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                               _atan
                               _fabs
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _sqrt                                                25    21      4   20397
                                            113 BANK0      8     4      4
                                              0 BANK1     17    17      0
                             ___flge
                            ___flmul
                            ___flneg (ARG)
                            ___flsub
 ---------------------------------------------------------------------------------
 (4) _atan                                                21    17      4   48989
                                             95 BANK0     21    17      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (4) _fabs                                                 4     0      4    1929
                                             79 BANK0      4     0      4
                            ___flneg
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     194
                                             23 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    2871
                                             33 BANK0      5     1      4
                           ___flpack
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0    1037
                                             31 BANK0      2     2      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2     969
                                             29 BANK0      2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     392
                                             23 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _cos                                                 12     8      4   81449
                                             45 BANK1      8     4      4
                            ___fladd
                             ___flge
                               _asin (ARG)
                                _sin
 ---------------------------------------------------------------------------------
 (4) _sin                                                 17    13      4   70785
                                            113 BANK0      4     0      4
                                              0 BANK1     13    13      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   14540
                                             95 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                8     2      6     452
                                             23 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     722
                                             79 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8    1738
                                             83 BANK0     12     4      8
                           ___lwtofl (ARG)
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2794
                                             89 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   18451
                                             75 BANK0     16     8      8
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             15     7      8    8884
                                             33 BANK0     15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    9061
                                            105 BANK0      8     0      8
                            ___fladd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             12     4      8    8389
                                             63 BANK0     12     4      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4    1605
                                             75 BANK0      4     0      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             15     7      8    7273
                                             48 BANK0     15     7      8
                            ___flmul (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2846
                                             33 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (6) ___flpack                                            10     4      6    2584
                                             23 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (1) _configurations                                       0     0      0    6204
                      _CANInitialize
 ---------------------------------------------------------------------------------
 (2) _CANInitialize                                       12     7      5    6204
                                             37 BANK0     12     7      5
                   _CANOperationMode
                       _CANSetFilter
                         _CANSetMask
 ---------------------------------------------------------------------------------
 (3) _CANSetMask                                          14     9      5    1286
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANSetFilter                                        14     9      5    3858
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANOperationMode                                     1     1      0      62
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR_Bassa                                           24    24      0    6834
                                             16 COMRAM    24    24      0
                       _CANisRxReady
                  _CANreceiveMessage
                   i1_CANsendMessage
                         i1_can_send
                         i1_delay_ms
 ---------------------------------------------------------------------------------
 (9) i1_delay_ms                                           2     0      2     283
                                              6 COMRAM     2     0      2
                           i1___wmul
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) i1_can_send                                           0     0      0    2683
                     i1_CANisTxReady
                   i1_CANsendMessage
 ---------------------------------------------------------------------------------
 (10) i1_CANsendMessage                                   16     8      8    2659
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (10) i1_CANisTxReady                                      1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _CANreceiveMessage                                   12    10      2    1137
                                              0 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (9) _CANisRxReady                                         1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Alta                                           16    16      0     395
                                              7 BANK0     16    16      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (12) ___lwdiv                                             7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CANisTxReady
   _CANsendMessage
   _configurations
     _CANInitialize
       _CANOperationMode
       _CANSetFilter
       _CANSetMask
   _delay_ms
     ___wmul
   _park_routine
     _CANisTxReady
     _CANsendMessage
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
       ___flpack (ARG)
       ___lwtofl (ARG)
         ___flpack
     ___fldiv
       ___flmul (ARG)
         ___flpack
       ___flpack (ARG)
     ___flmul
       ___flpack
     ___flneg
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___flneg (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
     ___lwtofl
       ___flpack
     _asin
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flge
         ___lwtofl (ARG)
           ___flpack
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       ___flmul
         ___flpack
       ___flneg
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
       _atan
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _eval_poly
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       _fabs
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
       _sqrt
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp
     _can_send
       _CANisTxReady
       _CANsendMessage
     _cos
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___flge
         ___lwtofl (ARG)
           ___flpack
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       _asin (ARG)
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
         _sqrt
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flge
                 ___lwtofl (ARG)
                   ___flpack
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
               _frexp
       _sin (ARG)
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         ___flsub
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp
         _eval_poly
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___fltol
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flneg (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
           _frexp
     _delay_ms
       ___wmul
     _delay_s
       _delay_ms
         ___wmul
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flge
         ___lwtofl (ARG)
           ___flpack
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       ___flmul
         ___flpack
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
         _sqrt
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flge
                 ___lwtofl (ARG)
                   ___flpack
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp
   _park_search
     _CANisTxReady
     _CANsendMessage
     ___awtofl
       ___flpack
       _abs (ARG)
     ___flge
       ___lwtofl (ARG)
         ___flpack
       _fabs (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
     ___lwtofl
       ___flpack
     _abs
     _matematica
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flmul
         ___flpack
       ___flneg
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
         _sqrt
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flge
                 ___lwtofl (ARG)
                   ___flpack
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
               _frexp
       _cos
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         _asin (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _atan
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___flmul
               ___flpack
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
             _eval_poly
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
             _fabs
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
           _sqrt
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___flmul
               ___flpack
             ___flneg (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
             ___flsub (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               _floor (ARG)
                 ___altofl
                   ___flpack
                   ___fltol (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___flneg (ARG)
                       ___fladd (ARG)
                         ___fldiv (ARG)
                           ___flmul (ARG)
                             ___flpack
                           ___flpack (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                         ___lwtofl (ARG)
                           ___flpack
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flge
                   ___lwtofl (ARG)
                     ___flpack
                   _fabs (ARG)
                     ___flneg
                       ___fladd (ARG)
                         ___fldiv (ARG)
                           ___flmul (ARG)
                             ___flpack
                           ___flpack (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                         ___lwtofl (ARG)
                           ___flpack
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                 _frexp
         _sin (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           ___flsub
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flge
                 ___lwtofl (ARG)
                   ___flpack
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
               _frexp
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flge
         ___lwtofl (ARG)
           ___flpack
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       ___flmul
         ___flpack
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
         _sqrt
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flge
                 ___lwtofl (ARG)
                   ___flpack
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp

 _ISR_Bassa (ROOT)
   _CANisRxReady
   _CANreceiveMessage
   i1_CANsendMessage
   i1_can_send
     i1_CANisTxReady
     i1_CANsendMessage
   i1_delay_ms
     i1___wmul

 _ISR_Alta (ROOT)
   ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     5D      E2       7       88.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     79      89       5       85.6%
BITCOMRAM           5F      0       2       0        2.1%
COMRAM              5F     28      57       1       91.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C2      20        0.0%
DATA                 0      0     1C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Jun 11 19:04:48 2016

               ___altofl@sign 00BD                             _n 0138                             _x 0015  
                           _z 00DD                  ___fldiv@cntr 009C          __end_of_CANSetFilter 23B2  
                ___fldiv@sign 009E            delay_s@repeat_loop 0080                            bsr 000FE0  
         ___wmul@multiplicand 0079                   __CFG_BORV$3 000000              i1___wmul@product 0032  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                  i1_can_send 5E12                  __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000  
                ___flpack@arg 0077                  ___flpack@exp 007B                    _MUX_select 0100  
                         l400 2A9A                           l401 2A9E                           l402 2AAA  
                         l500 2112                           l501 2116                           l510 2226  
                         l502 2122                           l430 3ED0                           l511 2232  
                         l431 3ED4                           l520 2342                           l512 2236  
                         l432 3EE0                           l521 2346                           l513 2242  
                         l505 2202                           l441 3FEC                           l433 3EE4  
                         l361 263C                           l522 2352                           l506 2206  
                         l442 3FF0                           l434 3EF0                           l362 23C8  
                         l523 2356                           l507 2212                           l443 3FFC  
                         l435 3EF4                           l371 2586                           l363 23CC  
                         l524 2362                           l516 2322                           l508 2216  
                         l444 4000                           l436 3F00                           l356 52AC  
                         l380 26DE                           l372 258A                           l364 24C6  
                         l517 2326                           l509 2222                           l461 1D84  
                         l445 400C                           l437 3F04                           l357 52B6  
                         l381 26E8                           l373 2596                           l365 2454  
                         l518 2332                           l462 1D88                           l446 4010  
                         l438 3F10                           l382 26F2                           l366 245E  
                         l519 2336                           l463 1D94                           l447 401C  
                         l391 28DC                           l383 26FC                           l367 2468  
                         l480 1EE2                           l472 1EA2                           l464 1D98  
                         l448 4020                           l392 28E0                           l376 28C6  
                         l368 2472                           l473 1EA6                           l465 1DA4  
                         l449 402C                           l393 29DA                           l377 2652  
                         l801 179A                           l490 1FF6                           l474 1EB2  
                         l466 1DA8                           l554 6554                           l394 2968  
                         l386 2810                           l378 2656                           l491 2002  
                         l483 1FC2                           l475 1EB6                           l467 1DB4  
                         l395 2972                           l387 2814                           l379 2750  
                         l484 1FC6                           l476 1EC2                           l468 1DB8  
                         l396 297C                           l388 2820                           l485 1FD2  
                         l477 1EC6                           l469 1DC4                           l397 2986  
                         l741 5054                           l494 20E2                           l486 1FD6  
                         l478 1ED2                           l495 20E6                           l487 1FE2  
                         l479 1ED6                           l567 6404                           l496 20F2  
                         l488 1FE6                           l840 4DA2                           l497 20F6  
                         l489 1FF2                           l753 51D4                           l498 2102  
                         l499 2106                           l739 51DA                           l773 0DC8  
                         l782 0E38                           l776 0E06                           l786 1600  
                         l795 16FE                           l898 6504                  __CFG_CPB$OFF 000000  
                __CFG_CPD$OFF 000000                    _MUX_toggle 02B0                    i1_delay_ms 644A  
                         _abs 64E2                           _asd 02B2                           _dir 02B4  
                         _cos 5D2C                           _msg 0144                           _sin 43A0  
                         prod 000FF3                           wreg 000FE8               ?_configurations 002E  
                ___flmul@cntr 008E                  ___flmul@sign 008F                  __CFG_LVP$OFF 000000  
               ___flpack@sign 007C                  ___fltol@exp1 00B8                  __CFG_WDT$OFF 000000  
                        l1024 49E8                          l1121 545A                          ?_abs 0077  
                        l1141 638A                          l1128 54BC                          l1129 54D4  
                        l1153 473A                          l1155 4768                          l1164 4854  
                        l1149 46FC                          l1189 5CDA                          l1470 4E22  
                        l1463 457A                          l1471 4E0E                          l1464 46AA  
                        l1483 58E0                          l4243 247E                          l4421 2AB0  
                        ?_cos 01B0                          l4415 2A8E                          l4319 2708  
                        l4263 257A                          l6201 5522                          l4345 2826  
                        l7001 0E2A                          l4339 2804                          l4621 3F5E  
                        l6213 62E0                          l4269 259C                          l4615 3F16  
                        l6223 470E                          l7111 16C0                          l6321 5622  
                        l6313 55FA                          l7121 174E                          l4707 1ABE  
                        l6251 47E4                          l6243 47A0                          l6235 475E  
                        l6331 566A                          l4395 2992                          l7107 1686  
                        l4725 1B7A                          l4573 3D8C                          l6181 53FC  
                        l6261 4832                          l6253 47F4                          l6229 474C  
                        l6325 564A                          l6309 55D2                          l4823 1EE8  
                        l4743 1C36                          l4671 1948                          l4647 4032  
                        l6191 54AC                          l6183 543C                          l6175 53D4  
                        l6423 56C0                          l6271 48A4                          l6263 4844  
                        l6255 4800                          l6319 561A                          l6407 60A6  
                        l7231 606E                          l4761 1CF2                          l6441 5736  
                        l6353 63C4                          l6281 48F8                          l6249 47D2  
                        l6345 5D26                          l7145 17EE                          l7225 6022  
                        l4931 2290                          l6179 53EA                          l6267 487C  
                        l6291 555C                          l6339 5C88                          l6363 5918  
                        l7147 17FE                          l7083 15C2                          l7163 1874  
                        l7227 6032                          l4925 2248                          l4829 1F30  
                        l4589 3E44                          l6189 549A                          l6453 57A0  
                        l6429 56E6                          l6461 622A                          l7157 182A  
                        l6615 6586                          l4863 2050                          l6391 59CC  
                        l6383 599C                          l6711 632E                          l6543 4FC2  
                        l4857 2008                          l4689 1A02                          l6449 578C  
                        l6297 5582                          l6473 5A62                          l6393 59DA  
                        l6529 4EA4                          l4891 2128                          l4795 1E12  
                        l6475 5B08                          l6379 5988                          l6491 5824  
                        l6619 63F6                          l6571 4B3E                          l6643 5BBC  
                        l6627 5B2E                          l6803 4DC4                          l4789 1DCA  
                        l6741 523E                          l6397 59F8                          l6389 59BA  
                        l6637 5B7E                          l4959 2368                          l6495 5846  
                        l6487 5810                          l6575 4B56                          l6559 4974  
                        l6671 4218                          l6647 5BF8                          l6911 5050  
                        l4897 2170                          l6761 5306                          l6753 52A4  
                        l6657 40DA                          l6905 5014                          l6755 52BA  
                        l6747 524E                          l6587 43D8                          l6683 42FA  
                        l6931 5108                          l6915 50A2                          l6773 64D4  
                        l6759 52C2                          l6599 4504                          l6951 5196  
                        l6927 50CE                          l6769 64C0                          l6699 5DB4  
                        l6795 4D6A                          ?_sin 00D1                          l6797 4D72  
                        l6981 0DBE                          l6967 0D60                          l6977 0D84  
                        l6897 4FFC                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          u5210 197C                          u5140 4052  
                        u5060 3F36                          u4420 249E                          u4430 24EA  
                        u5215 1970                          u5305 1B54                          u5225 19DC  
                        u5145 4046                          u5065 3F2A                          u4425 2492  
                        u5330 1BB0                          u5250 1A38                          u5170 18C2  
                        u4435 24DE                          u4445 254A                          u4550 2728  
                        u5335 1BA4                          u5255 1A2C                          u5175 18B6  
                        u4560 2774                          u5345 1C10                          u5265 1A98  
                        u5185 1922                          u4705 2A5E                          u5370 1C6C  
                        u5290 1AF4                          u8010 60D8                          u4555 271C  
                        u5700 2148                          u5620 2028                          u5540 1F08  
                        u5460 1DEA                          u8100 5834                          u4565 2768  
                        u5375 1C60                          u5295 1AE8                          u4575 27D4  
                        u4680 29B2                          u5705 213C                          u5625 201C  
                        u5545 1EFC                          u5465 1DDE                          u5385 1CCC  
                        u4930 3D06                          u8018 60DC                          u4690 29FE  
                        u4685 29A6                          u4935 3CFA                          u4695 29F2  
                        u4945 3D66                          u4970 3DBE                          u8250 44FC  
                        u5860 2388                          u5780 2268                          u8260 44FE  
                        u8180 49A4                          u8190 49A6                          u4975 3DB2  
                        u5865 237C                          u5785 225C                          u4985 3E1E  
                        u8530 500C                          u8525 4DBC                          u8526 4DBE  
                        u8471 4BFE                          u8481 4C0A                          u7940 5938  
                        u7945 592C                          u8850 17CE                          u8977 63F8  
            matematica@raggio 01D8      __end_ofi1_CANsendMessage 31F6           __size_of_CANSetMask 03AA  
                        _Pmin 0128                          abs@a 0077                          _alfa 012C  
                        _fabs 635E                          _data 0153                          _beta 0130  
                        _atan 4928                          _asin 407C                          _main 5FD4  
                        cos@f 01B0                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr0l 000FE9                          fsr2h 000FDA                          fsr1l 000FE1  
                        indf2 000FDF                          fsr2l 000FD9                          _sqrt 4DD2  
                        pclat 000FFA                          sin@f 00D1                          sin@y 0183  
                        prodh 000FF4                          prodl 000FF3                          start 032C  
               __CFG_IESO$OFF 000000                delay_s@value_s 007F           ISR_Bassa@PORTA_temp 0055  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000              _CANOperationMode 657C  
                       ??_abs 0079                         ??_cos 00D9                         ??_sin 00D5  
  __size_of_CANreceiveMessage 052E                         ?_fabs 00AF                 ___fltol@sign1 00B7  
                       ?_atan 00BF                         ?_asin 0194               __end_of___fladd 4928  
                       ?_main 002E               __end_of___fldiv 57D0               __end_of___flneg 63D8  
             __end_of___flmul 569A               __end_of___flsub 6262               __end_of___fltol 5A0C  
                       ?_sqrt 00D1                         _T0CON 000FD5                         _T3CON 000FB1  
          __size_of_ISR_Bassa 0314               __end_of___lwdiv 6196                         i1l400 314E  
                       i1l401 3152                         i1l402 315C                         i1l408 3A50  
                       i1l361 2D88                         i1l362 2B66                         i1l371 2CE2  
                       i1l363 2B6A                         i1l380 2E0E                         i1l372 2CE6  
                       i1l364 2C3C                         i1l700 00CA                         i1l381 2E16  
                       i1l373 2CF0                         i1l365 2BD8                         i1l382 2E1E  
                       i1l366 2BE0                         i1l391 2FD2                         i1l383 2E26  
                       i1l367 2BE8                         i1l392 2FD6                         i1l376 2FBE  
                       i1l368 2BF0                         i1l393 30A8                         i1l377 2D9C  
                       i1l721 02C6                         i1l713 01C2                         i1l554 6576  
                       i1l394 3044                         i1l386 2F18                         i1l378 2DA0  
                       i1l395 304C                         i1l387 2F1C                         i1l379 2E72  
                       i1l396 3054                         i1l388 2F26                         i1l724 02E6  
                       i1l397 305C                         i1l559 65A6                         i1l567 6474  
                       i1l696 008A                         i2l690 5F36                         _TMR0H 000FD7  
                       _TMR0L 000FD6                         _TMR3H 000FB3                         _TMR3L 000FB2  
                       _PORTA 000F80                         _TRISA 000F92             _CANisRxReady$2843 002E  
                       _TRISB 000F93                         _TRISC 000F94            __end_ofsin@coeff_a 0D41  
          __end_ofsin@coeff_b 0D51                 __CFG_PWRT$OFF 000000              __end_of_ISR_Alta 5FD4  
             __end_of_delay_s 64E2                 __CFG_WRT0$OFF 000000                         _J_var 0120  
               __CFG_WRT1$OFF 000000                         _K_var 0124                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000            CANInitialize@flags 0089                __CFG_EBTR2$OFF 000000  
               ___awtofl@sign 0085                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
                       _bordo 0134                         fabs@d 00AF                         _first 02B9  
                       _floor 57D0                         _frexp 6080                         _errno 0142  
                       atan@f 00BF                         atan@x 00C7                         atan@y 00C3  
                       asin@x 0194                         asin@y 01A8                __pbitbssCOMRAM 02B0  
        __end_of_CANisRxReady 65AC                         sin@x2 018B                         tablat 000FF5  
        __end_of_CANisTxReady 655C              __end_ofi1___wmul 6536                         plusw2 000FDB  
                       sqrt@i 018B                         sqrt@q 018C                         sqrt@x 0190  
                       sqrt@y 00D1                         sqrt@z 0187                         status 000FD8  
         i1___wmul@multiplier 002E                  ?_park_search 002E               __initialization 6262  
                __end_of_fabs 639C                  __end_of_atan 4B7E                  __end_of_asin 43A0  
                __end_of_main 6080                  __end_of_sqrt 4FFA                   ?i1_can_send 002E  
                      ??_fabs 00B3                        ??_atan 00C3                        ??_asin 00D9  
                      ??_main 00D9             _park_routine$3670 01C4             _park_routine$3671 01C8  
           _park_routine$3665 01CC             _park_routine$3666 01D0             _park_routine$3667 01BC  
           _park_routine$3668 01C0             _park_routine$3669 01D4                        ??_sqrt 00D5  
               __activetblptr 000003                   ?i1_delay_ms 0034             _CANisTxReady$2841 0077  
                      _ADCON1 000FC1                        ?_floor 00BF                        ?_frexp 0077  
            __end_of___altofl 6312                        _CANCON 000F6F              __end_of___flpack 5536  
          _distance_received1 02B7              __end_of___awtofl 635E               __CFG_BBSIZ$1024 000000  
               _avvicinamento 02B3                        i1l6021 00EC                        i1l6013 00D0  
                      i1l6031 011C                        i1l5233 2BFA                        i1l6017 00DE  
                      i1l6009 00BC                        i1l5411 3162                        i1l6115 02CA  
                      i1l5501 3996                        i1l5405 3144                        i1l5309 2E30  
                      i1l5253 2CD8                        i1l6109 02A2                        i1l6053 01B6  
                      i1l6045 0186                        i2l1423 618C                        i1l5335 2F2C  
                      i1l5513 39F6                        i1l5505 39B6                        i1l5329 2F0E  
                      i1l6081 01F8                        i1l5259 2CF6                        i1l5517 3A16  
                      i1l5509 39D6                        i1l6093 0230                        i1l6085 0200  
                      i1l5519 3A4A                        i1l5455 37B0                        i1l5385 3066  
                      i1l5571 3C5C                        i1l5563 3C20                        i1l5555 3BB0  
                      i1l5459 37B8                        i1l5581 3CCC                        i1l5493 3924  
                      i1l5575 3C7A                        i1l5567 3C3E                        i1l5579 3C98  
                      i1l5963 5E94                        i1l5947 5E1A                        i1l5939 6466  
                      i1l5957 5E60                        i1l5967 5EC6                        i2l7207 5F98  
                      i2l7175 6132                        i2l7177 6140                        i2l7187 617C  
                      i2l7179 614A              __end_of___lwtofl 64B4                        _RXB0D0 000F66  
                      _RXB0D1 000F67                        _RXB0D2 000F68                        _RXB0D3 000F69  
                      _RXB0D4 000F6A                        _RXB1D0 000F56                        _RXB0D5 000F6B  
                      _RXB1D1 000F57                        _RXB0D6 000F6C                        _RXB1D2 000F58  
                      _RXB0D7 000F6D                        _RXB1D3 000F59                        _RXB1D4 000F5A  
                      _RXB1D5 000F5B                        _RXB1D6 000F5C                        _RXB1D7 000F5D  
                      _TXB0D0 000F46                        _TXB0D1 000F47                        _TXB0D2 000F48  
                      _TXB0D3 000F49                        _TXB1D0 000F36                        _TXB0D4 000F4A  
                      _TXB1D1 000F37                        _TXB0D5 000F4B                        _TXB1D2 000F38  
                      _TXB0D6 000F4C                        _TXB1D3 000F39                        _TXB0D7 000F4D  
                      _TXB2D0 000F26                        _TXB1D4 000F3A                        _TXB2D1 000F27  
                      _TXB1D5 000F3B                        _TXB2D2 000F28                        _TXB1D6 000F3C  
                      _TXB2D3 000F29                        _TXB1D7 000F3D                        _TXB2D4 000F2A  
                      _TXB2D5 000F2B                        _TXB2D6 000F2C                        _TXB2D7 000F2D  
          CANsendMessage@data 007B              __end_of_can_send 5C34            CANsendMessage@tamp 0083  
           __end_of_ISR_Bassa 032C              __end_of_delay_ms 6412         __size_of_CANSetFilter 0B2A  
              __CFG_XINST$OFF 000000                        ___flge 5C34               _data_correction 015B  
                   ??___fladd 00A7                        ___wmul 6412                     ??___fldiv 0098  
                   ??___flneg 00AF                __CFG_STVREN$ON 000000                     ??___flmul 0089  
                   ??___flsub 00D1                     ??___fltol 00B3                     ??___lwdiv 0064  
                ??_CANSetMask 007C                        clear_0 6268                        clear_1 6274  
                      clear_2 6284                     ??_delay_s 007F                        floor@i 00C3  
                      floor@x 00BF               __CFG_BOREN$BOHW 000000       __size_ofi1_CANisTxReady 0020  
                      sin@sgn 018F                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8               ISR_Bassa@F16865 01E0  
                      sqrt@og 0183                  _CANSetFilter 1888                    ___fladd@f1 009F  
                  ___fladd@f2 00A3                    ___flge@ff1 00B3                    ___flge@ff2 00B7  
                  ___altofl@c 00B9                    ___fldiv@f1 0090                    ___fldiv@f2 0094  
                  ___fldiv@f3 0098                    __accesstop 0060       __end_of__initialization 62B4  
          __end_of_CANSetMask 407C               __CFG_PBADEN$OFF 000000                    ___flneg@f1 00AB  
               ?_park_routine 002E           __size_ofi1_can_send 00E6                    ___flmul@f1 0081  
                  ___flmul@f2 0085                  eval_poly@res 00B7                 ___rparam_used 000000  
                  ___flsub@f1 00C9                    ___flsub@f2 00CD                    ___fltol@f1 00AF  
                  ___awtofl@c 0081           __size_ofi1_delay_ms 0038                __pcstackCOMRAM 002E  
                   ?_ISR_Alta 002E                  __pidataBANK0 65AE                  __pidataBANK1 65AC  
               __end_of_floor 58F2                 __end_of_frexp 6114              ??_configurations 0091  
                  ___lwtofl@c 0081                     ?i1___wmul 002E         CANSetFilter@numBuffer 0080  
       __size_of_CANisRxReady 0018         __size_of_CANisTxReady 0026                       ??_floor 00C3  
                     ??_frexp 007D      __end_of_CANOperationMode 6594                    __pbssBANK0 00D9  
                  __pbssBANK1 0100               _sensor_distance 0001            __size_of_eval_poly 011A  
           ?i1_CANsendMessage 002E                    _data_brake 0026                ??_park_routine 01B8  
     __size_of_CANsendMessage 07A0                    _data_speed 0163                    _activation 02B1  
          ??i1_CANsendMessage 0036            __size_of_parallelo 0254          __size_of_park_search 01EE  
           _old_alignment_gap 0011                    ??_ISR_Alta 0067                       ?___flge 00B3  
                     ?___wmul 0077            park_routine@raggio 01DC                     ?___altofl 00B9  
            _counter_distance 00E7                     ?___flpack 0077                  _CANisRxReady 6594  
                     _CANSTAT 000F6E                     ?___awtofl 0081                  _CANisTxReady 6536  
                     _BRGCON1 000F70                       _BRGCON2 000F71                       _BRGCON3 000F72  
                  ??i1___wmul 0032                     ?___lwtofl 0081                     ?_can_send 002E  
      __size_of_CANInitialize 01CE           matematica@larghezza 01D4                     ?_delay_ms 007D  
                     _RXB0DLC 000F65                       _RXB1DLC 000F55                       _RXB0CON 000F60  
                     _RXB1CON 000F50                       _TXB0DLC 000F45                       _TXB1DLC 000F35  
                     _TXB2DLC 000F25           CANsendMessage@flags 007E                       __Hparam 0000  
                     __Lparam 0000              delay_ms@value_ms 007D               __size_of___flge 00F8  
                  _matematica 31F6                       ___fladd 46BC                       ___fldiv 569A  
                     ___flneg 639C                       ___flmul 5536                       ___flsub 6202  
                     ___fltol 58F2               __size_of___wmul 0038                       ___lwdiv 6114  
                __psmallconst 0D00                    ??___altofl 00BD                    ??___flpack 007D  
        CANInitialize@propSeg 008E                       __pcinit 6262                    ??___awtofl 0085  
           __end_of_eval_poly 5B26                       _delay_s 64B4                       __ramtop 0D00  
                ??i1_can_send 003E                       __ptext0 5FD4                       __ptext1 4FFA  
                     __ptext2 31F6                       __ptext3 0D52                       __ptext4 4B7E  
                     __ptext5 5B26                       __ptext6 23B2                       __ptext7 6536  
                     __ptext8 407C                       __ptext9 4DD2                    ??___lwtofl 0085  
                   _T0CONbits 000FD5                  ??i1_delay_ms 0036                i1_CANisTxReady 655C  
                     _counter 0024                    ??_can_send 0087                  __size_of_abs 002C  
                __size_of_cos 00E6               atan@val_squared 00CC                  __size_of_sin 031C  
                     atan@val 00D0             __end_of_parallelo 4DD2                    ??_delay_ms 007F  
                     asin@sgn 0198        CANreceiveMessage@error 0038               _start_operation 02BE  
              __pintcode_body 5EF8          end_of_initialization 62B4                       int_func 5EF8  
          __end_ofi1_can_send 5EF8                 _CANInitialize 51E8            __end_ofi1_delay_ms 6482  
                   _ISR_Bassa 0018                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE         i1___wmul@multiplicand 0030        __end_ofi1_CANisTxReady 657C  
     _steering_correction_dir 02BF                     _PORTBbits 000F81                CANSetMask@mask 0077  
              CANSetMask@tamp 0081                  _distance_set 0110                CANSetMask@type 007B  
        __end_of_park_routine 1888                     _TRISBbits 000F93                   ___fldiv@exp 009D  
                   _MUX_index 0021                    _pulse_time 001D       _clock_counter_reference 00E1  
                 ___flmul@exp 0089                _CANsendMessage 23B2              CANInitialize@BRP 0088  
            CANInitialize@SJW 0087                ?_CANInitialize 0085           i1_CANisTxReady$2841 002E  
                  ?_ISR_Bassa 002E                   ?_matematica 002E                __end_of___flge 5D2C  
           __size_of_ISR_Alta 5FCC                __end_of___wmul 644A               ?i1_CANisTxReady 002E  
                  floor@expon 00C7           start_initialization 6262             __size_ofi1___wmul 0028  
                  eval_poly@d 00AF                    eval_poly@n 00B1                    eval_poly@x 00AB  
                 __end_of_abs 650E                   __end_of_cos 5E12                   __end_of_sin 46BC  
         CANSetMask@numBuffer 0080                 _data_speed_rx 0108        __end_of_CANsendMessage 2B52  
           ?_CANOperationMode 002E                 _data_steering 016B            i1delay_ms@value_ms 0034  
                  frexp@value 0077            ??_CANOperationMode 0077             _distance_received 02B6  
  CANInitialize@FilterConfig1 008F    CANInitialize@FilterConfig2 0090           _steering_correction 0025  
                    ??___flge 00BB  ISR_Bassa@MUX_index_collision 0053                      ??___wmul 007B  
                 __pdataBANK0 00E8                   __pdataBANK1 01E0              __CFG_LPT1OSC$OFF 000000  
   __size_ofi1_CANsendMessage 06A4             __size_of___altofl 0058             __size_of___flpack 0180  
      CANInitialize@phaseSeg1 0085        CANInitialize@phaseSeg2 0086             __size_of___awtofl 004C  
                 __pbssCOMRAM 0001             __size_of___lwtofl 0032                 __pcstackBANK0 0060  
               __pcstackBANK1 0183                   _BRGCON2bits 000F71                   _BRGCON3bits 000F72  
           __size_of_can_send 010E             __size_of_delay_ms 003A               ?_CANsendMessage 0077  
         __size_of_matematica 05AE               ??_CANInitialize 008A                     _asin$3680 01AC  
                   _asin$3681 01A4                     _asin$3682 01A0                     _asin$3679 019C  
                  sin@coeff_a 0D2D                    sin@coeff_b 0D41                 ??_park_search 01DC  
               _alignment_gap 00D9            CANSetFilter@filter 0077                     _data_test 0173  
            ___lwdiv@dividend 0060                   ??_ISR_Bassa 003E                     __pintcode 0008  
                    ?___fladd 009F                      ?___fldiv 0090                      ?___flneg 00AB  
                    ?___flmul 0081                      ?___flsub 00C9                      ?___fltol 00AF  
       __size_of_park_routine 0B36                      ?___lwdiv 0060                   __pintcodelo 0018  
                    ?_delay_s 002E                   __smallconst 0D00                   _COMSTATbits 000F74  
                   _eval_poly 5A0C              ___lwdiv@quotient 0065                __size_of_floor 0122  
              __size_of_frexp 0094       __size_of_configurations 006C                     _parallelo 4B7E  
                _new_distance 02BA         park_routine@larghezza 01D8         CANreceiveMessage@tamp 0039  
              _prima_sterzata 013C                ___wmul@product 007B                      _LATBbits 000F8A  
                   atan@recip 00CB                  _park_routine 0D52  _delay_quartz_frequency_value 00E8  
                    _IPR3bits 000FA5                      _PIE3bits 000FA3                      i1u620_20 2C5E  
                    i1u620_25 2C54                      i1u621_25 2CAA                      i1u632_20 2E4E  
                    i1u632_25 2E44                      i1u633_20 2E94                      i1u633_25 2E8A  
                    i1u634_25 2EE0                      i1u619_20 2C18                      i1u619_25 2C0E  
                    i1u645_20 3084                      i1u645_25 307A                      i1u646_20 30CA  
                    i1u670_25 3B36                      i1u646_25 30C0                      i1u743_20 019E  
                    i1u647_25 3116                      i1u656_20 3864                      i1u744_20 01A0  
                    i1u656_26 3866                      i1u657_20 3892                      i1u665_25 3A22  
                    i1u657_26 3894                      i1u667_20 3AF8                      i1u659_25 38A8  
                    i1u667_26 3AFA                      i1u668_20 3B22                      i1u676_25 3CA4  
                    i1u668_26 3B24                      _PIR3bits 000FA4                      i1u898_27 01E4  
                    i1u899_27 6468                      _RXB0EIDH 000F63                      _RXB0EIDL 000F64  
                    _RXB1EIDH 000F53                      _RXB1EIDL 000F54                      _ISR_Alta 0008  
                   _set_speed 00E5                      _RCONbits 000FD0              __CFG_WDTPS$32768 000000  
                    _RXB0SIDH 000F61                      _RXB0SIDL 000F62                      _RXF0EIDH 000F02  
                    _RXB1SIDH 000F51                      _RXF0EIDL 000F03                      _RXB1SIDL 000F52  
                    _RXF1EIDH 000F06                      _RXF1EIDL 000F07                      _RXF2EIDH 000F0A  
                    _RXF2EIDL 000F0B                      _RXF3EIDH 000F0E                      _RXF3EIDL 000F0F  
                    _RXF4EIDH 000F12                      _RXF4EIDL 000F13                      _RXF5EIDH 000F16  
                    _RXF5EIDL 000F17                      _RXF0SIDH 000F00                      _RXF0SIDL 000F01  
         __end_of_park_search 51E8                      _TXB0EIDH 000F43                      _RXF1SIDH 000F04  
                    _TXB0EIDL 000F44                      _RXF1SIDL 000F05                      _TXB1EIDH 000F33  
                    _RXF2SIDH 000F08                      _TXB1EIDL 000F34                      _RXF2SIDL 000F09  
                    _TXB2EIDH 000F23                      _RXF3SIDH 000F0C                      _TXB2EIDL 000F24  
                    _RXF3SIDL 000F0D                      _RXF4SIDH 000F10                      _RXF4SIDL 000F11  
                    _RXF5SIDH 000F14                      _RXF5SIDL 000F15                      _RXM0EIDH 000F1A  
                    _RXM0EIDL 000F1B                      _TXB0SIDH 000F41                      _RXM1EIDH 000F1E  
                    _TXB0SIDL 000F42                      _RXM1EIDL 000F1F                      _TXB1SIDH 000F31  
                    _TXB1SIDL 000F32                      _TXB2SIDH 000F21                      _TXB2SIDL 000F22  
                    _RXM0SIDH 000F18                      _RXM0SIDL 000F19                      _RXM1SIDH 000F1C  
                    _RXM1SIDL 000F1D                   _distance_dx 0019                   _distance_sx 001B  
                    _RXERRCNT 000F75                      _TXERRCNT 000F76             ___wmul@multiplier 0077  
                    i1___wmul 650E                    ?_eval_poly 00AB           __end_ofatan@coeff_a 0D19  
         __end_ofatan@coeff_b 0D2D                 ?_CANSetFilter 0077                   _INTCON2bits 000FF1  
                  _CANCONbits 000F6F                    ?_parallelo 002E              _distance_average 00E3  
                   frexp@eptr 007B                      __Hparam0 0000                      __Lparam0 0000  
                _RXB0SIDLbits 000F62                  _RXB1SIDLbits 000F52              ??i1_CANisTxReady 002E  
                ??_matematica 00D9                 _request_sent1 02BD              __size_of___fladd 026C  
                  _CANSetMask 3CD2              __size_of___fldiv 0136              __size_of___flneg 003C  
            __size_of___flmul 0164              __size_of___flsub 0060              __size_of___fltol 011A  
                    ___altofl 62BA              i1_CANsendMessage 2B52                      _cos$3683 01B4  
                    ___flpack 53B6              __size_of___lwdiv 0082                      ___awtofl 6312  
            __size_of_delay_s 002E                      ___lwtofl 6482                      _can_send 5B26  
                _RXF0SIDLbits 000F01                      _delay_ms 63D8               ___lwdiv@divisor 0062  
                _RXF1SIDLbits 000F05               ___lwdiv@counter 0064         i1CANsendMessage@flags 0035  
              ??_CANSetFilter 007C                      __ptext10 4928                      __ptext11 635E  
                    __ptext20 6080                      __ptext12 64E2                      __ptext21 58F2  
                    __ptext13 6312                      __ptext30 6482                      __ptext22 5C34  
                    __ptext14 64B4                      __ptext31 53B6                      __ptext23 62BA  
                    __ptext15 63D8                      __ptext40 5E12                      __ptext32 6196  
                    __ptext24 5A0C                      __ptext16 6412                      __ptext41 2B52  
                    __ptext33 51E8                      __ptext25 5536                      __ptext17 5D2C  
                    __ptext42 655C                      __ptext34 3CD2                      __ptext26 6202  
                    __ptext18 43A0                      __ptext43 37A4                      __ptext35 1888  
                    __ptext27 46BC                      __ptext19 57D0                      __ptext44 6594  
                    __ptext36 657C                      __ptext28 639C                      __ptext29 569A  
                    __ptext46 6114                      __ptext38 644A                      __ptext39 650E  
                _RXF2SIDLbits 000F09                      _sin$3684 0187                  _RXF3SIDLbits 000F0D  
                    _distance 0140            __end_of_matematica 37A4                  _RXF4SIDLbits 000F11  
                _RXF5SIDLbits 000F15      CANsendMessage@dataLength 007D                 __size_of_fabs 003E  
               __size_of_atan 0256                 __size_of_asin 0324                 __size_of_main 00AC  
               __size_of_sqrt 0228                   _park_search 4FFA          CANreceiveMessage@msg 002E  
                _TXB0SIDLbits 000F42                  _TXB1SIDLbits 000F32                  _TXB2SIDLbits 000F22  
   __size_of_CANOperationMode 0018                 ?_CANisRxReady 002E                 ?_CANisTxReady 002E  
                 atan@coeff_a 0D01                   atan@coeff_b 0D19                   _RXB0DLCbits 000F65  
       ___flmul@f3_as_product 008A                   _RXB1DLCbits 000F55                  _RXM0SIDLbits 000F19  
                 _RXB0CONbits 000F60                   _RXB1CONbits 000F50             _CANreceiveMessage 37A4  
                _RXM1SIDLbits 000F1D                    _INTCONbits 000FF2                   ??_eval_poly 00B3  
            ??_CANsendMessage 007F    i1CANsendMessage@dataLength 0034            ?_CANreceiveMessage 002E  
                _request_sent 02BC                _configurations 6196      CANsendMessage@identifier 0077  
                 ??_parallelo 01B0                      intlevel1 0000                      intlevel2 0000  
            CANSetFilter@tamp 0081              CANSetFilter@type 007B           ??_CANreceiveMessage 0030  
        i1CANsendMessage@data 0032          i1CANsendMessage@tamp 003A                   _TXB0DLCbits 000F45  
                 _TXB1DLCbits 000F35                   _TXB0CONbits 000F40                   _TXB2DLCbits 000F25  
                 _TXB1CONbits 000F30                   _TXB2CONbits 000F20          CANOperationMode@mode 0077  
              ??_CANisRxReady 002E                   ?_CANSetMask 0077                ??_CANisTxReady 0077  
              _distance_error 02B5               _matematica$3672 01B8               _matematica$3673 01BC  
             _matematica$3674 01C0               _matematica$3675 01C4               _matematica$3676 01D0  
             _matematica$3677 01C8               _matematica$3678 01CC     __end_of_CANreceiveMessage 3CD2  
  i1CANsendMessage@identifier 002E                   _timerValue2 001F                    _TMR3H_temp 0022  
      __end_of_configurations 6202                    _TMR3L_temp 0023                 _distance_wait 02B8  
          _old_dir_correction 02BB                  ___fladd@exp1 00AA                  ___fladd@exp2 00A9  
                ___fladd@sign 00A8         __end_of_CANInitialize 53B6         _sensor_distance_short 017B  
         _sensor_distance_old 0118  
