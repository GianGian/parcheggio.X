

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Jun 01 21:57:10 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2685
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	param0,global,class=BANK0,space=1,delta=1
    68  0000                     
    69                           	psect	idataCOMRAM
    70  005E16                     __pidataCOMRAM:
    71                           	opt stack 0
    72                           
    73                           ;initializer for _spazio_parcheggio
    74  005E16  0064               	dw	100
    75                           
    76                           	psect	idataBANK0
    77  005E18                     __pidataBANK0:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _delay_quartz_frequency_value
    81  005E18  10                 	db	16
    82                           
    83                           	psect	idataBANK1
    84  005E0E                     __pidataBANK1:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _larghezza
    88  005E0E  0000               	dw	0
    89  005E10  4200               	dw	16896
    90                           
    91                           ;initializer for _raggio
    92  005E12  0000               	dw	0
    93  005E14  425C               	dw	16988
    94                           
    95                           	psect	smallconst
    96  000D00                     __psmallconst:
    97                           	opt stack 0
    98  000D00  00                 	db	0
    99  000D01                     atan@coeff_a:
   100                           	opt stack 0
   101  000D01  3C06               	dw	15366
   102  000D03  4204               	dw	16900
   103  000D05  9F7D               	dw	40829
   104  000D07  426A               	dw	17002
   105  000D09  905C               	dw	36956
   106  000D0B  4201               	dw	16897
   107  000D0D  4D60               	dw	19808
   108  000D0F  40BB               	dw	16571
   109  000D11  EC51               	dw	60497
   110  000D13  3E47               	dw	15943
   111  000D15  8DDE               	dw	36318
   112  000D17  BB1F               	dw	47903
   113  000D19                     __end_ofatan@coeff_a:
   114                           	opt stack 0
   115  000D19                     atan@coeff_b:
   116                           	opt stack 0
   117  000D19  3C06               	dw	15366
   118  000D1B  4204               	dw	16900
   119  000D1D  59C0               	dw	22976
   120  000D1F  428B               	dw	17035
   121  000D21  0474               	dw	1140
   122  000D23  4244               	dw	16964
   123  000D25  9BF9               	dw	39929
   124  000D27  414F               	dw	16719
   125  000D29  0000               	dw	0
   126  000D2B  3F80               	dw	16256
   127  000D2D                     __end_ofatan@coeff_b:
   128                           	opt stack 0
   129  000D2D                     sin@coeff_a:
   130                           	opt stack 0
   131  000D2D  F3EC               	dw	62444
   132  000D2F  484A               	dw	18506
   133  000D31  9535               	dw	38197
   134  000D33  C795               	dw	51093
   135  000D35  C117               	dw	49431
   136  000D37  45DC               	dw	17884
   137  000D39  DBFD               	dw	56317
   138  000D3B  C36D               	dw	50029
   139  000D3D  B372               	dw	45938
   140  000D3F  4033               	dw	16435
   141  000D41                     __end_ofsin@coeff_a:
   142                           	opt stack 0
   143  000D41                     sin@coeff_b:
   144                           	opt stack 0
   145  000D41  342B               	dw	13355
   146  000D43  4801               	dw	18433
   147  000D45  9D7F               	dw	40319
   148  000D47  45B0               	dw	17840
   149  000D49  FFE7               	dw	65511
   150  000D4B  42D9               	dw	17113
   151  000D4D  0000               	dw	0
   152  000D4F  3F80               	dw	16256
   153  000D51                     __end_ofsin@coeff_b:
   154                           	opt stack 0
   155  0000                     _RXB1CON	set	3920
   156  0000                     _RXB1CONbits	set	3920
   157  0000                     _RXB1D0	set	3926
   158  0000                     _RXB1D1	set	3927
   159  0000                     _RXB1D2	set	3928
   160  0000                     _RXB1D3	set	3929
   161  0000                     _RXB1D4	set	3930
   162  0000                     _RXB1D5	set	3931
   163  0000                     _RXB1D6	set	3932
   164  0000                     _RXB1D7	set	3933
   165  0000                     _RXB1DLC	set	3925
   166  0000                     _RXB1DLCbits	set	3925
   167  0000                     _RXB1EIDH	set	3923
   168  0000                     _RXB1EIDL	set	3924
   169  0000                     _RXB1SIDH	set	3921
   170  0000                     _RXB1SIDL	set	3922
   171  0000                     _RXB1SIDLbits	set	3922
   172  0000                     _RXF0EIDH	set	3842
   173  0000                     _RXF0EIDL	set	3843
   174  0000                     _RXF0SIDH	set	3840
   175  0000                     _RXF0SIDL	set	3841
   176  0000                     _RXF0SIDLbits	set	3841
   177  0000                     _RXF1EIDH	set	3846
   178  0000                     _RXF1EIDL	set	3847
   179  0000                     _RXF1SIDH	set	3844
   180  0000                     _RXF1SIDL	set	3845
   181  0000                     _RXF1SIDLbits	set	3845
   182  0000                     _RXF2EIDH	set	3850
   183  0000                     _RXF2EIDL	set	3851
   184  0000                     _RXF2SIDH	set	3848
   185  0000                     _RXF2SIDL	set	3849
   186  0000                     _RXF2SIDLbits	set	3849
   187  0000                     _RXF3EIDH	set	3854
   188  0000                     _RXF3EIDL	set	3855
   189  0000                     _RXF3SIDH	set	3852
   190  0000                     _RXF3SIDL	set	3853
   191  0000                     _RXF3SIDLbits	set	3853
   192  0000                     _RXF4EIDH	set	3858
   193  0000                     _RXF4EIDL	set	3859
   194  0000                     _RXF4SIDH	set	3856
   195  0000                     _RXF4SIDL	set	3857
   196  0000                     _RXF4SIDLbits	set	3857
   197  0000                     _RXF5EIDH	set	3862
   198  0000                     _RXF5EIDL	set	3863
   199  0000                     _RXF5SIDH	set	3860
   200  0000                     _RXF5SIDL	set	3861
   201  0000                     _RXF5SIDLbits	set	3861
   202  0000                     _RXM0EIDH	set	3866
   203  0000                     _RXM0EIDL	set	3867
   204  0000                     _RXM0SIDH	set	3864
   205  0000                     _RXM0SIDL	set	3865
   206  0000                     _RXM0SIDLbits	set	3865
   207  0000                     _RXM1EIDH	set	3870
   208  0000                     _RXM1EIDL	set	3871
   209  0000                     _RXM1SIDH	set	3868
   210  0000                     _RXM1SIDL	set	3869
   211  0000                     _RXM1SIDLbits	set	3869
   212  0000                     _TXB0CONbits	set	3904
   213  0000                     _TXB0D0	set	3910
   214  0000                     _TXB0D1	set	3911
   215  0000                     _TXB0D2	set	3912
   216  0000                     _TXB0D3	set	3913
   217  0000                     _TXB0D4	set	3914
   218  0000                     _TXB0D5	set	3915
   219  0000                     _TXB0D6	set	3916
   220  0000                     _TXB0D7	set	3917
   221  0000                     _TXB0DLC	set	3909
   222  0000                     _TXB0DLCbits	set	3909
   223  0000                     _TXB0EIDH	set	3907
   224  0000                     _TXB0EIDL	set	3908
   225  0000                     _TXB0SIDH	set	3905
   226  0000                     _TXB0SIDL	set	3906
   227  0000                     _TXB0SIDLbits	set	3906
   228  0000                     _TXB1CONbits	set	3888
   229  0000                     _TXB1D0	set	3894
   230  0000                     _TXB1D1	set	3895
   231  0000                     _TXB1D2	set	3896
   232  0000                     _TXB1D3	set	3897
   233  0000                     _TXB1D4	set	3898
   234  0000                     _TXB1D5	set	3899
   235  0000                     _TXB1D6	set	3900
   236  0000                     _TXB1D7	set	3901
   237  0000                     _TXB1DLC	set	3893
   238  0000                     _TXB1DLCbits	set	3893
   239  0000                     _TXB1EIDH	set	3891
   240  0000                     _TXB1EIDL	set	3892
   241  0000                     _TXB1SIDH	set	3889
   242  0000                     _TXB1SIDL	set	3890
   243  0000                     _TXB1SIDLbits	set	3890
   244  0000                     _TXB2CONbits	set	3872
   245  0000                     _TXB2D0	set	3878
   246  0000                     _TXB2D1	set	3879
   247  0000                     _TXB2D2	set	3880
   248  0000                     _TXB2D3	set	3881
   249  0000                     _TXB2D4	set	3882
   250  0000                     _TXB2D5	set	3883
   251  0000                     _TXB2D6	set	3884
   252  0000                     _TXB2D7	set	3885
   253  0000                     _TXB2DLC	set	3877
   254  0000                     _TXB2DLCbits	set	3877
   255  0000                     _TXB2EIDH	set	3875
   256  0000                     _TXB2EIDL	set	3876
   257  0000                     _TXB2SIDH	set	3873
   258  0000                     _TXB2SIDL	set	3874
   259  0000                     _TXB2SIDLbits	set	3874
   260  0000                     _ADCON1	set	4033
   261  0000                     _BRGCON1	set	3952
   262  0000                     _BRGCON2	set	3953
   263  0000                     _BRGCON2bits	set	3953
   264  0000                     _BRGCON3	set	3954
   265  0000                     _BRGCON3bits	set	3954
   266  0000                     _CANCON	set	3951
   267  0000                     _CANCONbits	set	3951
   268  0000                     _CANSTAT	set	3950
   269  0000                     _COMSTATbits	set	3956
   270  0000                     _INTCON2bits	set	4081
   271  0000                     _INTCONbits	set	4082
   272  0000                     _IPR3bits	set	4005
   273  0000                     _LATA	set	3977
   274  0000                     _LATB	set	3978
   275  0000                     _LATBbits	set	3978
   276  0000                     _LATC	set	3979
   277  0000                     _PIE3bits	set	4003
   278  0000                     _PIR3bits	set	4004
   279  0000                     _PORTA	set	3968
   280  0000                     _PORTBbits	set	3969
   281  0000                     _RCONbits	set	4048
   282  0000                     _RXB0CON	set	3936
   283  0000                     _RXB0CONbits	set	3936
   284  0000                     _RXB0D0	set	3942
   285  0000                     _RXB0D1	set	3943
   286  0000                     _RXB0D2	set	3944
   287  0000                     _RXB0D3	set	3945
   288  0000                     _RXB0D4	set	3946
   289  0000                     _RXB0D5	set	3947
   290  0000                     _RXB0D6	set	3948
   291  0000                     _RXB0D7	set	3949
   292  0000                     _RXB0DLC	set	3941
   293  0000                     _RXB0DLCbits	set	3941
   294  0000                     _RXB0EIDH	set	3939
   295  0000                     _RXB0EIDL	set	3940
   296  0000                     _RXB0SIDH	set	3937
   297  0000                     _RXB0SIDL	set	3938
   298  0000                     _RXB0SIDLbits	set	3938
   299  0000                     _RXERRCNT	set	3957
   300  0000                     _T0CON	set	4053
   301  0000                     _T0CONbits	set	4053
   302  0000                     _T3CON	set	4017
   303  0000                     _TMR0H	set	4055
   304  0000                     _TMR0L	set	4054
   305  0000                     _TMR3H	set	4019
   306  0000                     _TMR3L	set	4018
   307  0000                     _TRISA	set	3986
   308  0000                     _TRISB	set	3987
   309  0000                     _TRISBbits	set	3987
   310  0000                     _TRISC	set	3988
   311  0000                     _TXERRCNT	set	3958
   312                           
   313                           ; #config settings
   314  000D51  00                 	db	0	; dummy byte at the end
   315  0000                     
   316                           	psect	cinit
   317  0059BE                     __pcinit:
   318                           	opt stack 0
   319  0059BE                     start_initialization:
   320                           	opt stack 0
   321  0059BE                     __initialization:
   322                           	opt stack 0
   323                           
   324                           ; Clear objects allocated to BANK1 (139 bytes)
   325  0059BE  EE01  F000         	lfsr	0,__pbssBANK1
   326  0059C2  0E8B               	movlw	139
   327  0059C4                     clear_0:
   328  0059C4  6AEE               	clrf	postinc0,c
   329  0059C6  06E8               	decf	wreg,f,c
   330  0059C8  E1FD               	bnz	clear_0
   331                           
   332                           ; Clear objects allocated to BANK0 (16 bytes)
   333  0059CA  EE00  F0D7         	lfsr	0,__pbssBANK0
   334  0059CE  0E10               	movlw	16
   335  0059D0                     clear_1:
   336  0059D0  6AEE               	clrf	postinc0,c
   337  0059D2  06E8               	decf	wreg,f,c
   338  0059D4  E1FD               	bnz	clear_1
   339                           
   340                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   341  0059D6  6A52               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   342  0059D8  6A51               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   343                           
   344                           ; Clear objects allocated to COMRAM (41 bytes)
   345  0059DA  EE00  F001         	lfsr	0,__pbssCOMRAM
   346  0059DE  0E29               	movlw	41
   347  0059E0                     clear_2:
   348  0059E0  6AEE               	clrf	postinc0,c
   349  0059E2  06E8               	decf	wreg,f,c
   350  0059E4  E1FD               	bnz	clear_2
   351                           
   352                           ; Initialize objects allocated to BANK1 (8 bytes)
   353                           ; load TBLPTR registers with __pidataBANK1
   354  0059E6  0E0E               	movlw	low __pidataBANK1
   355  0059E8  6EF6               	movwf	tblptrl,c
   356  0059EA  0E5E               	movlw	high __pidataBANK1
   357  0059EC  6EF7               	movwf	tblptrh,c
   358  0059EE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   359  0059F0  6EF8               	movwf	tblptru,c
   360  0059F2  EE01  F0EC         	lfsr	0,__pdataBANK1
   361  0059F6  EE10 F008          	lfsr	1,8
   362  0059FA                     copy_data0:
   363  0059FA  0009               	tblrd		*+
   364  0059FC  CFF5 FFEE          	movff	tablat,postinc0
   365  005A00  50E5               	movf	postdec1,w,c
   366  005A02  50E1               	movf	fsr1l,w,c
   367  005A04  E1FA               	bnz	copy_data0
   368                           
   369                           ; Initialize objects allocated to BANK0 (1 bytes)
   370                           ; load TBLPTR registers with __pidataBANK0
   371  005A06  0E18               	movlw	low __pidataBANK0
   372  005A08  6EF6               	movwf	tblptrl,c
   373  005A0A  0E5E               	movlw	high __pidataBANK0
   374  005A0C  6EF7               	movwf	tblptrh,c
   375  005A0E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   376  005A10  6EF8               	movwf	tblptru,c
   377  005A12  0009               	tblrd		*+	;fetch initializer
   378  005A14  CFF5 F0E7          	movff	tablat,__pdataBANK0
   379                           
   380                           ; Initialize objects allocated to COMRAM (2 bytes)
   381                           ; load TBLPTR registers with __pidataCOMRAM
   382  005A18  0E16               	movlw	low __pidataCOMRAM
   383  005A1A  6EF6               	movwf	tblptrl,c
   384  005A1C  0E5E               	movlw	high __pidataCOMRAM
   385  005A1E  6EF7               	movwf	tblptrh,c
   386  005A20  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   387  005A22  6EF8               	movwf	tblptru,c
   388  005A24  0009               	tblrd		*+	;fetch initializer
   389  005A26  CFF5 F053          	movff	tablat,__pdataCOMRAM
   390  005A2A  0009               	tblrd		*+	;fetch initializer
   391  005A2C  CFF5 F054          	movff	tablat,__pdataCOMRAM+1
   392  005A30                     end_of_initialization:
   393                           	opt stack 0
   394  005A30                     __end_of__initialization:
   395                           	opt stack 0
   396  005A30  0100               	movlb	0
   397  005A32  EFFC  F02B         	goto	_main	;jump to C main() function
   398                           tblptru	equ	0xFF8
   399                           tblptrh	equ	0xFF7
   400                           tblptrl	equ	0xFF6
   401                           tablat	equ	0xFF5
   402                           postinc0	equ	0xFEE
   403                           wreg	equ	0xFE8
   404                           postdec1	equ	0xFE5
   405                           fsr1l	equ	0xFE1
   406                           
   407                           	psect	bitbssCOMRAM
   408  000288                     __pbitbssCOMRAM:
   409                           	opt stack 0
   410  000288                     _activation:
   411                           	opt stack 0
   412  000288                     	ds	1
   413  000289                     _asd:
   414                           	opt stack 0
   415  000289                     	ds	1
   416  00028A                     _avvicinamento:
   417                           	opt stack 0
   418  00028A                     	ds	1
   419  00028B                     _dir:
   420                           	opt stack 0
   421  00028B                     	ds	1
   422  00028C                     _distance_error:
   423                           	opt stack 0
   424  00028C                     	ds	1
   425  00028D                     _distance_received:
   426                           	opt stack 0
   427  00028D                     	ds	1
   428  00028E                     _distance_received1:
   429                           	opt stack 0
   430  00028E                     	ds	1
   431  00028F                     _distance_wait:
   432                           	opt stack 0
   433  00028F                     	ds	1
   434  000290                     _first:
   435                           	opt stack 0
   436  000290                     	ds	1
   437  000291                     _new_distance:
   438                           	opt stack 0
   439  000291                     	ds	1
   440  000292                     _old_dir_correction:
   441                           	opt stack 0
   442  000292                     	ds	1
   443  000293                     _request_sent:
   444                           	opt stack 0
   445  000293                     	ds	1
   446  000294                     _request_sent1:
   447                           	opt stack 0
   448  000294                     	ds	1
   449  000295                     _start_operation:
   450                           	opt stack 0
   451  000295                     	ds	1
   452  000296                     _steering_correction_dir:
   453                           	opt stack 0
   454  000296                     	ds	1
   455                           tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           postdec1	equ	0xFE5
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	bssCOMRAM
   465  000001                     __pbssCOMRAM:
   466                           	opt stack 0
   467  000001                     _sensor_distance:
   468                           	opt stack 0
   469  000001                     	ds	16
   470  000011                     _x:
   471                           	opt stack 0
   472  000011                     	ds	4
   473  000015                     _actual_speed:
   474                           	opt stack 0
   475  000015                     	ds	2
   476  000017                     _distance:
   477                           	opt stack 0
   478  000017                     	ds	2
   479  000019                     _distance_dx:
   480                           	opt stack 0
   481  000019                     	ds	2
   482  00001B                     _distance_sx:
   483                           	opt stack 0
   484  00001B                     	ds	2
   485  00001D                     _left_speed:
   486                           	opt stack 0
   487  00001D                     	ds	2
   488  00001F                     _pulse_time:
   489                           	opt stack 0
   490  00001F                     	ds	2
   491  000021                     _right_speed:
   492                           	opt stack 0
   493  000021                     	ds	2
   494  000023                     _timerValue2:
   495                           	opt stack 0
   496  000023                     	ds	2
   497  000025                     _MUX_index:
   498                           	opt stack 0
   499  000025                     	ds	1
   500  000026                     _TMR3H_temp:
   501                           	opt stack 0
   502  000026                     	ds	1
   503  000027                     _TMR3L_temp:
   504                           	opt stack 0
   505  000027                     	ds	1
   506  000028                     _counter:
   507                           	opt stack 0
   508  000028                     	ds	1
   509  000029                     _steering_correction:
   510                           	opt stack 0
   511  000029                     	ds	1
   512                           tblptru	equ	0xFF8
   513                           tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           postinc0	equ	0xFEE
   517                           wreg	equ	0xFE8
   518                           postdec1	equ	0xFE5
   519                           fsr1l	equ	0xFE1
   520                           
   521                           	psect	dataCOMRAM
   522  000053                     __pdataCOMRAM:
   523                           	opt stack 0
   524  000053                     _spazio_parcheggio:
   525                           	opt stack 0
   526  000053                     	ds	2
   527                           tblptru	equ	0xFF8
   528                           tblptrh	equ	0xFF7
   529                           tblptrl	equ	0xFF6
   530                           tablat	equ	0xFF5
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           postdec1	equ	0xFE5
   534                           fsr1l	equ	0xFE1
   535                           
   536                           	psect	bssBANK0
   537  0000D7                     __pbssBANK0:
   538                           	opt stack 0
   539  0000D7                     _alignment_gap:
   540                           	opt stack 0
   541  0000D7                     	ds	4
   542  0000DB                     _z:
   543                           	opt stack 0
   544  0000DB                     	ds	4
   545  0000DF                     _clock_counter_reference:
   546                           	opt stack 0
   547  0000DF                     	ds	2
   548  0000E1                     _distance_average:
   549                           	opt stack 0
   550  0000E1                     	ds	2
   551  0000E3                     _errno:
   552                           	opt stack 0
   553  0000E3                     	ds	2
   554  0000E5                     _set_speed:
   555                           	opt stack 0
   556  0000E5                     	ds	2
   557                           tblptru	equ	0xFF8
   558                           tblptrh	equ	0xFF7
   559                           tblptrl	equ	0xFF6
   560                           tablat	equ	0xFF5
   561                           postinc0	equ	0xFEE
   562                           wreg	equ	0xFE8
   563                           postdec1	equ	0xFE5
   564                           fsr1l	equ	0xFE1
   565                           
   566                           	psect	dataBANK0
   567  0000E7                     __pdataBANK0:
   568                           	opt stack 0
   569  0000E7                     _delay_quartz_frequency_value:
   570                           	opt stack 0
   571  0000E7                     	ds	1
   572                           tblptru	equ	0xFF8
   573                           tblptrh	equ	0xFF7
   574                           tblptrl	equ	0xFF6
   575                           tablat	equ	0xFF5
   576                           postinc0	equ	0xFEE
   577                           wreg	equ	0xFE8
   578                           postdec1	equ	0xFE5
   579                           fsr1l	equ	0xFE1
   580                           
   581                           	psect	bssBANK1
   582  000100                     __pbssBANK1:
   583                           	opt stack 0
   584  000100                     _MUX_select:
   585                           	opt stack 0
   586  000100                     	ds	8
   587  000108                     _data_speed_rx:
   588                           	opt stack 0
   589  000108                     	ds	8
   590  000110                     _distance_set:
   591                           	opt stack 0
   592  000110                     	ds	8
   593  000118                     _sensor_distance_old:
   594                           	opt stack 0
   595  000118                     	ds	8
   596  000120                     _J_var:
   597                           	opt stack 0
   598  000120                     	ds	4
   599  000124                     _K_var:
   600                           	opt stack 0
   601  000124                     	ds	4
   602  000128                     _Pmin:
   603                           	opt stack 0
   604  000128                     	ds	4
   605  00012C                     _alfa:
   606                           	opt stack 0
   607  00012C                     	ds	4
   608  000130                     _beta:
   609                           	opt stack 0
   610  000130                     	ds	4
   611  000134                     _bordo:
   612                           	opt stack 0
   613  000134                     	ds	4
   614  000138                     _n:
   615                           	opt stack 0
   616  000138                     	ds	4
   617  00013C                     _old_alignment_gap:
   618                           	opt stack 0
   619  00013C                     	ds	4
   620  000140                     _prima_sterzata:
   621                           	opt stack 0
   622  000140                     	ds	4
   623  000144                     _msg:
   624                           	opt stack 0
   625  000144                     	ds	15
   626  000153                     _data:
   627                           	opt stack 0
   628  000153                     	ds	8
   629  00015B                     _data_brake:
   630                           	opt stack 0
   631  00015B                     	ds	8
   632  000163                     _data_correction:
   633                           	opt stack 0
   634  000163                     	ds	8
   635  00016B                     _data_speed:
   636                           	opt stack 0
   637  00016B                     	ds	8
   638  000173                     _data_steering:
   639                           	opt stack 0
   640  000173                     	ds	8
   641  00017B                     _data_test:
   642                           	opt stack 0
   643  00017B                     	ds	8
   644  000183                     _sensor_distance_short:
   645                           	opt stack 0
   646  000183                     	ds	8
   647                           tblptru	equ	0xFF8
   648                           tblptrh	equ	0xFF7
   649                           tblptrl	equ	0xFF6
   650                           tablat	equ	0xFF5
   651                           postinc0	equ	0xFEE
   652                           wreg	equ	0xFE8
   653                           postdec1	equ	0xFE5
   654                           fsr1l	equ	0xFE1
   655                           
   656                           	psect	dataBANK1
   657  0001EC                     __pdataBANK1:
   658                           	opt stack 0
   659  0001EC                     _larghezza:
   660                           	opt stack 0
   661  0001EC                     	ds	4
   662  0001F0                     _raggio:
   663                           	opt stack 0
   664  0001F0                     	ds	4
   665                           tblptru	equ	0xFF8
   666                           tblptrh	equ	0xFF7
   667                           tblptrl	equ	0xFF6
   668                           tablat	equ	0xFF5
   669                           postinc0	equ	0xFEE
   670                           wreg	equ	0xFE8
   671                           postdec1	equ	0xFE5
   672                           fsr1l	equ	0xFE1
   673                           
   674                           	psect	cstackBANK1
   675  00018B                     __pcstackBANK1:
   676                           	opt stack 0
   677  00018B                     ??_sqrt:
   678  00018B                     sin@y:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x0
   682  00018B                     	ds	4
   683  00018F                     sqrt@og:
   684                           	opt stack 0
   685  00018F                     _sin$3683:
   686                           	opt stack 0
   687                           
   688                           ; 4 bytes @ 0x4
   689  00018F                     	ds	4
   690  000193                     sin@x2:
   691                           	opt stack 0
   692  000193                     sqrt@z:
   693                           	opt stack 0
   694                           
   695                           ; 4 bytes @ 0x8
   696  000193                     	ds	4
   697  000197                     sin@sgn:
   698                           	opt stack 0
   699  000197                     sqrt@i:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0xC
   703  000197                     	ds	1
   704  000198                     sqrt@q:
   705                           	opt stack 0
   706                           
   707                           ; 4 bytes @ 0xD
   708  000198                     	ds	4
   709  00019C                     sqrt@x:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x11
   713  00019C                     	ds	4
   714  0001A0                     ?_asin:
   715                           	opt stack 0
   716  0001A0                     asin@x:
   717                           	opt stack 0
   718                           
   719                           ; 4 bytes @ 0x15
   720  0001A0                     	ds	4
   721  0001A4                     asin@sgn:
   722                           	opt stack 0
   723                           
   724                           ; 4 bytes @ 0x19
   725  0001A4                     	ds	4
   726  0001A8                     _asin$3678:
   727                           	opt stack 0
   728                           
   729                           ; 4 bytes @ 0x1D
   730  0001A8                     	ds	4
   731  0001AC                     _asin$3681:
   732                           	opt stack 0
   733                           
   734                           ; 4 bytes @ 0x21
   735  0001AC                     	ds	4
   736  0001B0                     _asin$3680:
   737                           	opt stack 0
   738                           
   739                           ; 4 bytes @ 0x25
   740  0001B0                     	ds	4
   741  0001B4                     asin@y:
   742                           	opt stack 0
   743                           
   744                           ; 4 bytes @ 0x29
   745  0001B4                     	ds	4
   746  0001B8                     _asin$3679:
   747                           	opt stack 0
   748                           
   749                           ; 4 bytes @ 0x2D
   750  0001B8                     	ds	4
   751  0001BC                     ??_park_search:
   752  0001BC                     ?_cos:
   753                           	opt stack 0
   754  0001BC                     cos@f:
   755                           	opt stack 0
   756                           
   757                           ; 4 bytes @ 0x31
   758  0001BC                     	ds	4
   759  0001C0                     _cos$3682:
   760                           	opt stack 0
   761                           
   762                           ; 4 bytes @ 0x35
   763  0001C0                     	ds	4
   764  0001C4                     _matematica$3671:
   765                           	opt stack 0
   766                           
   767                           ; 4 bytes @ 0x39
   768  0001C4                     	ds	4
   769  0001C8                     _matematica$3672:
   770                           	opt stack 0
   771                           
   772                           ; 4 bytes @ 0x3D
   773  0001C8                     	ds	4
   774  0001CC                     _matematica$3673:
   775                           	opt stack 0
   776                           
   777                           ; 4 bytes @ 0x41
   778  0001CC                     	ds	4
   779  0001D0                     _matematica$3674:
   780                           	opt stack 0
   781                           
   782                           ; 4 bytes @ 0x45
   783  0001D0                     	ds	4
   784  0001D4                     _matematica$3676:
   785                           	opt stack 0
   786                           
   787                           ; 4 bytes @ 0x49
   788  0001D4                     	ds	4
   789  0001D8                     _matematica$3677:
   790                           	opt stack 0
   791                           
   792                           ; 4 bytes @ 0x4D
   793  0001D8                     	ds	4
   794  0001DC                     _matematica$3675:
   795                           	opt stack 0
   796                           
   797                           ; 4 bytes @ 0x51
   798  0001DC                     	ds	4
   799  0001E0                     ??_park_routine:
   800                           
   801                           ; 0 bytes @ 0x55
   802  0001E0                     	ds	4
   803  0001E4                     _park_routine$3669:
   804                           	opt stack 0
   805                           
   806                           ; 4 bytes @ 0x59
   807  0001E4                     	ds	4
   808  0001E8                     _park_routine$3670:
   809                           	opt stack 0
   810                           
   811                           ; 4 bytes @ 0x5D
   812  0001E8                     	ds	4
   813                           tblptru	equ	0xFF8
   814                           tblptrh	equ	0xFF7
   815                           tblptrl	equ	0xFF6
   816                           tablat	equ	0xFF5
   817                           postinc0	equ	0xFEE
   818                           wreg	equ	0xFE8
   819                           postdec1	equ	0xFE5
   820                           fsr1l	equ	0xFE1
   821                           
   822                           	psect	cstackBANK0
   823  000060                     __pcstackBANK0:
   824                           	opt stack 0
   825  000060                     ?___lwdiv:
   826                           	opt stack 0
   827  000060                     ___lwdiv@dividend:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x0
   831  000060                     	ds	2
   832  000062                     ___lwdiv@divisor:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x2
   836  000062                     	ds	2
   837  000064                     ___lwdiv@counter:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x4
   841  000064                     	ds	1
   842  000065                     ___lwdiv@quotient:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x5
   846  000065                     	ds	2
   847  000067                     ??_ISR_Alta:
   848                           
   849                           ; 0 bytes @ 0x7
   850  000067                     	ds	16
   851  000077                     ??_can_interpreter:
   852  000077                     ?_abs:
   853                           	opt stack 0
   854  000077                     ?___wmul:
   855                           	opt stack 0
   856  000077                     ?___flpack:
   857                           	opt stack 0
   858  000077                     CANOperationMode@mode:
   859                           	opt stack 0
   860  000077                     _CANisTxReady$2845:
   861                           	opt stack 0
   862  000077                     ___wmul@multiplier:
   863                           	opt stack 0
   864  000077                     abs@a:
   865                           	opt stack 0
   866  000077                     CANsendMessage@identifier:
   867                           	opt stack 0
   868  000077                     CANSetMask@mask:
   869                           	opt stack 0
   870  000077                     CANSetFilter@filter:
   871                           	opt stack 0
   872  000077                     ___flpack@arg:
   873                           	opt stack 0
   874  000077                     frexp@value:
   875                           	opt stack 0
   876                           
   877                           ; 4 bytes @ 0x17
   878  000077                     	ds	2
   879  000079                     ??_abs:
   880  000079                     ___wmul@multiplicand:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x19
   884  000079                     	ds	2
   885  00007B                     CANSetMask@type:
   886                           	opt stack 0
   887  00007B                     CANSetFilter@type:
   888                           	opt stack 0
   889  00007B                     ___flpack@exp:
   890                           	opt stack 0
   891  00007B                     CANsendMessage@data:
   892                           	opt stack 0
   893  00007B                     ___wmul@product:
   894                           	opt stack 0
   895  00007B                     frexp@eptr:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x1B
   899  00007B                     	ds	1
   900  00007C                     ??_CANSetMask:
   901  00007C                     ??_CANSetFilter:
   902  00007C                     ___flpack@sign:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x1C
   906  00007C                     	ds	1
   907  00007D                     ??___flpack:
   908  00007D                     ??_frexp:
   909  00007D                     CANsendMessage@dataLength:
   910                           	opt stack 0
   911  00007D                     delay_ms@value_ms:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x1D
   915  00007D                     	ds	1
   916  00007E                     CANsendMessage@flags:
   917                           	opt stack 0
   918                           
   919                           ; 1 bytes @ 0x1E
   920  00007E                     	ds	1
   921  00007F                     ??_CANsendMessage:
   922  00007F                     delay_s@value_s:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x1F
   926  00007F                     	ds	1
   927  000080                     CANSetMask@numBuffer:
   928                           	opt stack 0
   929  000080                     CANSetFilter@numBuffer:
   930                           	opt stack 0
   931  000080                     delay_s@repeat_loop:
   932                           	opt stack 0
   933                           
   934                           ; 1 bytes @ 0x20
   935  000080                     	ds	1
   936  000081                     ?___fldiv:
   937                           	opt stack 0
   938  000081                     ?___awtofl:
   939                           	opt stack 0
   940  000081                     ?___lwtofl:
   941                           	opt stack 0
   942  000081                     ___awtofl@c:
   943                           	opt stack 0
   944  000081                     ___lwtofl@c:
   945                           	opt stack 0
   946  000081                     CANSetMask@tamp:
   947                           	opt stack 0
   948  000081                     CANSetFilter@tamp:
   949                           	opt stack 0
   950  000081                     ___fldiv@f1:
   951                           	opt stack 0
   952                           
   953                           ; 4 bytes @ 0x21
   954  000081                     	ds	2
   955  000083                     CANsendMessage@tamp:
   956                           	opt stack 0
   957                           
   958                           ; 4 bytes @ 0x23
   959  000083                     	ds	2
   960  000085                     CANInitialize@phaseSeg1:
   961                           	opt stack 0
   962  000085                     ___awtofl@sign:
   963                           	opt stack 0
   964  000085                     ___fldiv@f2:
   965                           	opt stack 0
   966                           
   967                           ; 4 bytes @ 0x25
   968  000085                     	ds	1
   969  000086                     CANInitialize@phaseSeg2:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x26
   973  000086                     	ds	1
   974  000087                     CANInitialize@SJW:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x27
   978  000087                     	ds	1
   979  000088                     CANInitialize@BRP:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x28
   983  000088                     	ds	1
   984  000089                     CANInitialize@flags:
   985                           	opt stack 0
   986  000089                     ___fldiv@f3:
   987                           	opt stack 0
   988                           
   989                           ; 4 bytes @ 0x29
   990  000089                     	ds	1
   991  00008A                     ??_CANInitialize:
   992                           
   993                           ; 0 bytes @ 0x2A
   994  00008A                     	ds	3
   995  00008D                     ___fldiv@cntr:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x2D
   999  00008D                     	ds	1
  1000  00008E                     CANInitialize@propSeg:
  1001                           	opt stack 0
  1002  00008E                     ___fldiv@exp:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x2E
  1006  00008E                     	ds	1
  1007  00008F                     CANInitialize@FilterConfig1:
  1008                           	opt stack 0
  1009  00008F                     ___fldiv@sign:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x2F
  1013  00008F                     	ds	1
  1014  000090                     ?___flmul:
  1015                           	opt stack 0
  1016  000090                     CANInitialize@FilterConfig2:
  1017                           	opt stack 0
  1018  000090                     ___flmul@f1:
  1019                           	opt stack 0
  1020                           
  1021                           ; 4 bytes @ 0x30
  1022  000090                     	ds	1
  1023  000091                     
  1024                           ; 0 bytes @ 0x31
  1025  000091                     	ds	3
  1026  000094                     ___flmul@f2:
  1027                           	opt stack 0
  1028                           
  1029                           ; 4 bytes @ 0x34
  1030  000094                     	ds	4
  1031  000098                     ___flmul@exp:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x38
  1035  000098                     	ds	1
  1036  000099                     ___flmul@f3_as_product:
  1037                           	opt stack 0
  1038                           
  1039                           ; 4 bytes @ 0x39
  1040  000099                     	ds	4
  1041  00009D                     ___flmul@cntr:
  1042                           	opt stack 0
  1043                           
  1044                           ; 1 bytes @ 0x3D
  1045  00009D                     	ds	1
  1046  00009E                     ___flmul@sign:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x3E
  1050  00009E                     	ds	1
  1051  00009F                     ?___fladd:
  1052                           	opt stack 0
  1053  00009F                     ___fladd@f1:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x3F
  1057  00009F                     	ds	4
  1058  0000A3                     ___fladd@f2:
  1059                           	opt stack 0
  1060                           
  1061                           ; 4 bytes @ 0x43
  1062  0000A3                     	ds	4
  1063  0000A7                     ??___fladd:
  1064                           
  1065                           ; 0 bytes @ 0x47
  1066  0000A7                     	ds	1
  1067  0000A8                     ___fladd@sign:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x48
  1071  0000A8                     	ds	1
  1072  0000A9                     ___fladd@exp2:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x49
  1076  0000A9                     	ds	1
  1077  0000AA                     ___fladd@exp1:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x4A
  1081  0000AA                     	ds	1
  1082  0000AB                     ?_eval_poly:
  1083                           	opt stack 0
  1084  0000AB                     ?___flneg:
  1085                           	opt stack 0
  1086  0000AB                     eval_poly@x:
  1087                           	opt stack 0
  1088  0000AB                     ___flneg@f1:
  1089                           	opt stack 0
  1090                           
  1091                           ; 4 bytes @ 0x4B
  1092  0000AB                     	ds	4
  1093  0000AF                     ?_fabs:
  1094                           	opt stack 0
  1095  0000AF                     ?___fltol:
  1096                           	opt stack 0
  1097  0000AF                     eval_poly@d:
  1098                           	opt stack 0
  1099  0000AF                     fabs@d:
  1100                           	opt stack 0
  1101  0000AF                     ___fltol@f1:
  1102                           	opt stack 0
  1103                           
  1104                           ; 4 bytes @ 0x4F
  1105  0000AF                     	ds	2
  1106  0000B1                     eval_poly@n:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x51
  1110  0000B1                     	ds	2
  1111  0000B3                     ??_eval_poly:
  1112  0000B3                     ??___fltol:
  1113  0000B3                     ___flge@ff1:
  1114                           	opt stack 0
  1115                           
  1116                           ; 4 bytes @ 0x53
  1117  0000B3                     	ds	4
  1118  0000B7                     ___fltol@sign1:
  1119                           	opt stack 0
  1120  0000B7                     eval_poly@res:
  1121                           	opt stack 0
  1122  0000B7                     ___flge@ff2:
  1123                           	opt stack 0
  1124                           
  1125                           ; 4 bytes @ 0x57
  1126  0000B7                     	ds	1
  1127  0000B8                     ___fltol@exp1:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x58
  1131  0000B8                     	ds	1
  1132  0000B9                     ?___altofl:
  1133                           	opt stack 0
  1134  0000B9                     ___altofl@c:
  1135                           	opt stack 0
  1136                           
  1137                           ; 4 bytes @ 0x59
  1138  0000B9                     	ds	2
  1139  0000BB                     ??___flge:
  1140                           
  1141                           ; 0 bytes @ 0x5B
  1142  0000BB                     	ds	2
  1143  0000BD                     ___altofl@sign:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x5D
  1147  0000BD                     	ds	2
  1148  0000BF                     ?_atan:
  1149                           	opt stack 0
  1150  0000BF                     ?_floor:
  1151                           	opt stack 0
  1152  0000BF                     atan@f:
  1153                           	opt stack 0
  1154  0000BF                     floor@x:
  1155                           	opt stack 0
  1156                           
  1157                           ; 4 bytes @ 0x5F
  1158  0000BF                     	ds	4
  1159  0000C3                     atan@y:
  1160                           	opt stack 0
  1161  0000C3                     floor@i:
  1162                           	opt stack 0
  1163                           
  1164                           ; 4 bytes @ 0x63
  1165  0000C3                     	ds	4
  1166  0000C7                     floor@expon:
  1167                           	opt stack 0
  1168  0000C7                     atan@x:
  1169                           	opt stack 0
  1170                           
  1171                           ; 4 bytes @ 0x67
  1172  0000C7                     	ds	2
  1173  0000C9                     ?___flsub:
  1174                           	opt stack 0
  1175  0000C9                     ___flsub@f1:
  1176                           	opt stack 0
  1177                           
  1178                           ; 4 bytes @ 0x69
  1179  0000C9                     	ds	2
  1180  0000CB                     atan@recip:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x6B
  1184  0000CB                     	ds	1
  1185  0000CC                     atan@val_squared:
  1186                           	opt stack 0
  1187                           
  1188                           ; 4 bytes @ 0x6C
  1189  0000CC                     	ds	1
  1190  0000CD                     ___flsub@f2:
  1191                           	opt stack 0
  1192                           
  1193                           ; 4 bytes @ 0x6D
  1194  0000CD                     	ds	3
  1195  0000D0                     atan@val:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x70
  1199  0000D0                     	ds	1
  1200  0000D1                     ?_sqrt:
  1201                           	opt stack 0
  1202  0000D1                     ?_sin:
  1203                           	opt stack 0
  1204  0000D1                     sin@f:
  1205                           	opt stack 0
  1206  0000D1                     sqrt@y:
  1207                           	opt stack 0
  1208                           
  1209                           ; 4 bytes @ 0x71
  1210  0000D1                     	ds	4
  1211  0000D5                     ??_parallelo:
  1212  0000D5                     
  1213                           ; 0 bytes @ 0x75
  1214  0000D5                     	ds	2
  1215  0000D7                     tblptru	equ	0xFF8
  1216                           tblptrh	equ	0xFF7
  1217                           tblptrl	equ	0xFF6
  1218                           tablat	equ	0xFF5
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           postdec1	equ	0xFE5
  1222                           fsr1l	equ	0xFE1
  1223                           
  1224                           ; 0 bytes @ 0x77
  1225                           
  1226                           	psect	cstackCOMRAM
  1227  00002A                     __pcstackCOMRAM:
  1228                           	opt stack 0
  1229  00002A                     ?i1___wmul:
  1230                           	opt stack 0
  1231  00002A                     CANreceiveMessage@msg:
  1232                           	opt stack 0
  1233  00002A                     i1___wmul@multiplier:
  1234                           	opt stack 0
  1235  00002A                     i1CANsendMessage@identifier:
  1236                           	opt stack 0
  1237                           
  1238                           ; 4 bytes @ 0x0
  1239  00002A                     	ds	2
  1240  00002C                     ??_CANreceiveMessage:
  1241  00002C                     i1___wmul@multiplicand:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x2
  1245  00002C                     	ds	2
  1246  00002E                     i1CANsendMessage@data:
  1247                           	opt stack 0
  1248  00002E                     i1___wmul@product:
  1249                           	opt stack 0
  1250                           
  1251                           ; 2 bytes @ 0x4
  1252  00002E                     	ds	2
  1253  000030                     i1CANsendMessage@dataLength:
  1254                           	opt stack 0
  1255  000030                     i1delay_ms@value_ms:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x6
  1259  000030                     	ds	1
  1260  000031                     i1CANsendMessage@flags:
  1261                           	opt stack 0
  1262                           
  1263                           ; 1 bytes @ 0x7
  1264  000031                     	ds	1
  1265  000032                     ??i1_CANsendMessage:
  1266  000032                     
  1267                           ; 0 bytes @ 0x8
  1268  000032                     	ds	2
  1269  000034                     CANreceiveMessage@error:
  1270                           	opt stack 0
  1271                           
  1272                           ; 1 bytes @ 0xA
  1273  000034                     	ds	1
  1274  000035                     CANreceiveMessage@tamp:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0xB
  1278  000035                     	ds	1
  1279  000036                     i1CANsendMessage@tamp:
  1280                           	opt stack 0
  1281                           
  1282                           ; 4 bytes @ 0xC
  1283  000036                     	ds	4
  1284  00003A                     ??_ISR_Bassa:
  1285                           
  1286                           ; 0 bytes @ 0x10
  1287  00003A                     	ds	21
  1288  00004F                     ISR_Bassa@PORTA_temp:
  1289                           	opt stack 0
  1290                           
  1291                           ; 1 bytes @ 0x25
  1292  00004F                     	ds	1
  1293  000050                     ISR_Bassa@i:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x26
  1297  000050                     	ds	1
  1298                           tblptru	equ	0xFF8
  1299                           tblptrh	equ	0xFF7
  1300                           tblptrl	equ	0xFF6
  1301                           tablat	equ	0xFF5
  1302                           postinc0	equ	0xFEE
  1303                           wreg	equ	0xFE8
  1304                           postdec1	equ	0xFE5
  1305                           fsr1l	equ	0xFE1
  1306                           
  1307 ;;
  1308 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1309 ;;
  1310 ;; *************** function _main *****************
  1311 ;; Defined at:
  1312 ;;		line 224 in file "parcheggio.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;		None
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;		None
  1317 ;; Return value:  Size  Location     Type
  1318 ;;		None               void
  1319 ;; Registers used:
  1320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1321 ;; Tracked objects:
  1322 ;;		On entry : 0/0
  1323 ;;		On exit  : 0/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1330 ;;Total ram usage:        0 bytes
  1331 ;; Hardware stack levels required when called:   12
  1332 ;; This function calls:
  1333 ;;		_CANisTxReady
  1334 ;;		_CANsendMessage
  1335 ;;		_can_interpreter
  1336 ;;		_configurations
  1337 ;;		_delay_ms
  1338 ;;		_park_routine
  1339 ;;		_park_search
  1340 ;; This function is called by:
  1341 ;;		Startup code after reset
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text0
  1346  0057F8                     __ptext0:
  1347                           	opt stack 0
  1348  0057F8                     _main:
  1349                           	opt stack 19
  1350                           
  1351                           ;parcheggio.c: 225: MUX_select[0] = 0b00000000;
  1352                           
  1353                           ; BSR set to: 15
  1354                           ;incstack = 0
  1355  0057F8  0E00               	movlw	0
  1356  0057FA  0101               	movlb	1	; () banked
  1357  0057FC  6F00               	movwf	_MUX_select& (0+255),b	;volatile
  1358                           
  1359                           ;parcheggio.c: 226: MUX_select[1] = 0b00000001;
  1360  0057FE  0E01               	movlw	1
  1361  005800  0101               	movlb	1	; () banked
  1362  005802  6F01               	movwf	(_MUX_select+1)& (0+255),b	;volatile
  1363                           
  1364                           ;parcheggio.c: 227: MUX_select[2] = 0b00000010;
  1365  005804  0E02               	movlw	2
  1366  005806  0101               	movlb	1	; () banked
  1367  005808  6F02               	movwf	(_MUX_select+2)& (0+255),b	;volatile
  1368                           
  1369                           ;parcheggio.c: 228: MUX_select[3] = 0b00000011;
  1370  00580A  0E03               	movlw	3
  1371  00580C  0101               	movlb	1	; () banked
  1372  00580E  6F03               	movwf	(_MUX_select+3)& (0+255),b	;volatile
  1373                           
  1374                           ;parcheggio.c: 229: MUX_select[4] = 0b00000100;
  1375  005810  0E04               	movlw	4
  1376  005812  0101               	movlb	1	; () banked
  1377  005814  6F04               	movwf	(_MUX_select+4)& (0+255),b	;volatile
  1378                           
  1379                           ;parcheggio.c: 230: MUX_select[5] = 0b00000101;
  1380  005816  0E05               	movlw	5
  1381  005818  0101               	movlb	1	; () banked
  1382  00581A  6F05               	movwf	(_MUX_select+5)& (0+255),b	;volatile
  1383                           
  1384                           ;parcheggio.c: 231: MUX_select[6] = 0b00000110;
  1385  00581C  0E06               	movlw	6
  1386  00581E  0101               	movlb	1	; () banked
  1387  005820  6F06               	movwf	(_MUX_select+6)& (0+255),b	;volatile
  1388                           
  1389                           ;parcheggio.c: 232: MUX_select[7] = 0b00000111;
  1390  005822  0E07               	movlw	7
  1391  005824  0101               	movlb	1	; () banked
  1392  005826  6F07               	movwf	(_MUX_select+7)& (0+255),b	;volatile
  1393                           
  1394                           ; BSR set to: 1
  1395                           ;parcheggio.c: 234: configurations();
  1396  005828  EC1B  F02D         	call	_configurations	;wreg free
  1397                           
  1398                           ;parcheggio.c: 236: PORTBbits.RB4 = 0;
  1399  00582C  9881               	bcf	3969,4,c	;volatile
  1400                           
  1401                           ;parcheggio.c: 237: PORTBbits.RB5 = 0;
  1402  00582E  9A81               	bcf	3969,5,c	;volatile
  1403                           
  1404                           ;parcheggio.c: 238: PORTBbits.RB6 = 0;
  1405  005830  9C81               	bcf	3969,6,c	;volatile
  1406                           
  1407                           ;parcheggio.c: 240: request_sent = 0;
  1408  005832  9652               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1409                           
  1410                           ;parcheggio.c: 241: start_operation = 0;
  1411  005834  9A52               	bcf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  1412                           
  1413                           ;parcheggio.c: 242: delay_ms(500);
  1414  005836  0E01               	movlw	1
  1415  005838  0100               	movlb	0	; () banked
  1416  00583A  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1417  00583C  0EF4               	movlw	244
  1418  00583E  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1419  005840  EC39  F02E         	call	_delay_ms	;wreg free
  1420                           
  1421                           ;parcheggio.c: 245: while (activation != 1) {
  1422                           
  1423                           ;parcheggio.c: 244: while (1) {
  1424  005844  D026               	goto	l6955
  1425  005846                     l6949:
  1426                           
  1427                           ;parcheggio.c: 246: delay_ms(100);
  1428  005846  0E00               	movlw	0
  1429  005848  0100               	movlb	0	; () banked
  1430  00584A  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1431  00584C  0E64               	movlw	100
  1432  00584E  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1433  005850  EC39  F02E         	call	_delay_ms	;wreg free
  1434                           
  1435                           ;parcheggio.c: 247: while (!CANisTxReady());
  1436  005854  D000               	goto	l6951
  1437  005856                     l6951:
  1438  005856  ECE8  F02E         	call	_CANisTxReady	;wreg free
  1439  00585A  0900               	iorlw	0
  1440  00585C  B4D8               	btfsc	status,2,c
  1441  00585E  D7FB               	goto	l6951
  1442                           
  1443                           ;parcheggio.c: 248: PORTBbits.RB4 = ~PORTBbits.RB4;
  1444  005860  7881               	btg	3969,4,c	;volatile
  1445                           
  1446                           ;parcheggio.c: 249: CANsendMessage(0b00000010001, sensor_distance_short, 8, CAN_CONFIG_S
      +                          TD_MSG & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1447  005862  0E11               	movlw	17
  1448  005864  0100               	movlb	0	; () banked
  1449  005866  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1450  005868  0E00               	movlw	0
  1451  00586A  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1452  00586C  0E00               	movlw	0
  1453  00586E  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1454  005870  0E00               	movlw	0
  1455  005872  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1456  005874  0E83               	movlw	low _sensor_distance_short
  1457  005876  0100               	movlb	0	; () banked
  1458  005878  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1459  00587A  0E01               	movlw	high _sensor_distance_short
  1460  00587C  0100               	movlb	0	; () banked
  1461  00587E  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1462  005880  0E08               	movlw	8
  1463  005882  0100               	movlb	0	; () banked
  1464  005884  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1465  005886  0EBC               	movlw	188
  1466  005888  0100               	movlb	0	; () banked
  1467  00588A  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1468  00588C  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1469  005890  D000               	goto	l6955
  1470  005892                     l6955:
  1471  005892  A051               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1472  005894  D7D8               	goto	l6949
  1473                           
  1474                           ;parcheggio.c: 250: }
  1475                           ;parcheggio.c: 251: park_search();
  1476  005896  EC7A  F025         	call	_park_search	;wreg free
  1477                           
  1478                           ;parcheggio.c: 252: can_interpreter();
  1479  00589A  ECAD  F02D         	call	_can_interpreter	;wreg free
  1480                           
  1481                           ;parcheggio.c: 253: park_routine();
  1482  00589E  ECBC  F018         	call	_park_routine	;wreg free
  1483  0058A2  D7F7               	goto	l6955
  1484  0058A4  EF9D  F001         	goto	start
  1485  0058A8                     __end_of_main:
  1486                           	opt stack 0
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           postinc0	equ	0xFEE
  1492                           wreg	equ	0xFE8
  1493                           postdec1	equ	0xFE5
  1494                           fsr1l	equ	0xFE1
  1495                           status	equ	0xFD8
  1496                           
  1497 ;; *************** function _park_search *****************
  1498 ;; Defined at:
  1499 ;;		line 257 in file "parcheggio.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;		None
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;		None
  1504 ;; Return value:  Size  Location     Type
  1505 ;;		None               void
  1506 ;; Registers used:
  1507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1515 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1516 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1517 ;;Total ram usage:        2 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:   11
  1520 ;; This function calls:
  1521 ;;		_CANisTxReady
  1522 ;;		_CANsendMessage
  1523 ;;		___awtofl
  1524 ;;		_abs
  1525 ;;		_parallelo
  1526 ;; This function is called by:
  1527 ;;		_main
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           	psect	text1
  1532  004AF4                     __ptext1:
  1533                           	opt stack 0
  1534  004AF4                     _park_search:
  1535                           	opt stack 19
  1536                           
  1537                           ;parcheggio.c: 258: while ((activation == 1) && (PORTBbits.RB5 == 0)) {
  1538                           
  1539                           ;incstack = 0
  1540  004AF4  D0DD               	goto	l743
  1541  004AF6                     l6677:
  1542                           
  1543                           ;parcheggio.c: 259: parallelo();
  1544  004AF6  EC26  F021         	call	_parallelo	;wreg free
  1545                           
  1546                           ;parcheggio.c: 261: if (sensor_distance[0] > 50) {
  1547  004AFA  5002               	movf	_sensor_distance+1,w,c	;volatile
  1548  004AFC  E104               	bnz	u8240
  1549  004AFE  0E33               	movlw	51
  1550  004B00  5C01               	subwf	_sensor_distance,w,c	;volatile
  1551  004B02  A0D8               	btfss	status,0,c
  1552  004B04  D02D               	goto	l745
  1553  004B06                     u8240:
  1554                           
  1555                           ;parcheggio.c: 262: if (request_sent == 0) {
  1556  004B06  A652               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1557  004B08  D002               	goto	l6685
  1558  004B0A  D028               	goto	l6693
  1559                           
  1560                           ;parcheggio.c: 263: while (!CANisTxReady());
  1561  004B0C  D000               	goto	l6685
  1562  004B0E                     l6685:
  1563  004B0E  ECE8  F02E         	call	_CANisTxReady	;wreg free
  1564  004B12  0900               	iorlw	0
  1565  004B14  B4D8               	btfsc	status,2,c
  1566  004B16  D7FB               	goto	l6685
  1567                           
  1568                           ;parcheggio.c: 264: CANsendMessage(0b00000001010, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1569  004B18  0E0A               	movlw	10
  1570  004B1A  0100               	movlb	0	; () banked
  1571  004B1C  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1572  004B1E  0E00               	movlw	0
  1573  004B20  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1574  004B22  0E00               	movlw	0
  1575  004B24  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1576  004B26  0E00               	movlw	0
  1577  004B28  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1578  004B2A  0E53               	movlw	low _data
  1579  004B2C  0100               	movlb	0	; () banked
  1580  004B2E  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1581  004B30  0E01               	movlw	high _data
  1582  004B32  0100               	movlb	0	; () banked
  1583  004B34  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1584  004B36  0E08               	movlw	8
  1585  004B38  0100               	movlb	0	; () banked
  1586  004B3A  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1587  004B3C  0EFC               	movlw	252
  1588  004B3E  0100               	movlb	0	; () banked
  1589  004B40  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1590  004B42  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1591                           
  1592                           ;parcheggio.c: 265: request_sent = 1;
  1593  004B46  8652               	bsf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1594                           
  1595                           ;parcheggio.c: 266: alignment_gap = 0;
  1596  004B48  0E00               	movlw	0
  1597  004B4A  0100               	movlb	0	; () banked
  1598  004B4C  6FD7               	movwf	_alignment_gap& (0+255),b
  1599  004B4E  0E00               	movlw	0
  1600  004B50  6FD8               	movwf	(_alignment_gap+1)& (0+255),b
  1601  004B52  0E00               	movlw	0
  1602  004B54  6FD9               	movwf	(_alignment_gap+2)& (0+255),b
  1603  004B56  0E00               	movlw	0
  1604  004B58  6FDA               	movwf	(_alignment_gap+3)& (0+255),b
  1605  004B5A  D000               	goto	l6693
  1606  004B5C                     l6693:
  1607                           
  1608                           ;parcheggio.c: 267: }
  1609                           ;parcheggio.c: 268: LATBbits.LATB4 = 1;
  1610  004B5C  888A               	bsf	3978,4,c	;volatile
  1611                           
  1612                           ;parcheggio.c: 269: } else {
  1613  004B5E  D027               	goto	l6697
  1614  004B60                     l745:
  1615                           
  1616                           ;parcheggio.c: 270: LATBbits.LATB4 = 0;
  1617  004B60  988A               	bcf	3978,4,c	;volatile
  1618                           
  1619                           ;parcheggio.c: 271: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  1620  004B62  EE20  F003         	lfsr	2,_sensor_distance+2	;volatile
  1621  004B66  CFDE F1BC          	movff	postinc2,??_park_search
  1622  004B6A  CFDD F1BD          	movff	postdec2,??_park_search+1
  1623  004B6E  0101               	movlb	1	; () banked
  1624  004B70  1FBC               	comf	??_park_search& (0+255),f,b
  1625  004B72  1FBD               	comf	(??_park_search+1)& (0+255),f,b
  1626  004B74  4BBC               	infsnz	??_park_search& (0+255),f,b
  1627  004B76  2BBD               	incf	(??_park_search+1)& (0+255),f,b
  1628  004B78  5001               	movf	_sensor_distance,w,c	;volatile
  1629  004B7A  0101               	movlb	1	; () banked
  1630  004B7C  25BC               	addwf	??_park_search& (0+255),w,b
  1631  004B7E  0100               	movlb	0	; () banked
  1632  004B80  6F77               	movwf	abs@a& (0+255),b
  1633  004B82  5002               	movf	_sensor_distance+1,w,c	;volatile
  1634  004B84  0101               	movlb	1	; () banked
  1635  004B86  21BD               	addwfc	(??_park_search+1)& (0+255),w,b
  1636  004B88  0100               	movlb	0	; () banked
  1637  004B8A  6F78               	movwf	(abs@a+1)& (0+255),b
  1638  004B8C  ECBE  F02E         	call	_abs	;wreg free
  1639  004B90  C077  F081         	movff	?_abs,___awtofl@c
  1640  004B94  C078  F082         	movff	?_abs+1,___awtofl@c+1
  1641  004B98  ECD6  F02D         	call	___awtofl	;wreg free
  1642  004B9C  C081  F0D7         	movff	?___awtofl,_alignment_gap
  1643  004BA0  C082  F0D8         	movff	?___awtofl+1,_alignment_gap+1
  1644  004BA4  C083  F0D9         	movff	?___awtofl+2,_alignment_gap+2
  1645  004BA8  C084  F0DA         	movff	?___awtofl+3,_alignment_gap+3
  1646  004BAC  D000               	goto	l6697
  1647  004BAE                     l6697:
  1648                           
  1649                           ;parcheggio.c: 272: }
  1650                           ;parcheggio.c: 274: if ((sensor_distance[0] < 50) && (request_sent == 1)&&(sensor_distan
      +                          ce[1] < 50)) {
  1651  004BAE  5002               	movf	_sensor_distance+1,w,c	;volatile
  1652  004BB0  E12B               	bnz	l6709
  1653  004BB2  0E32               	movlw	50
  1654  004BB4  5C01               	subwf	_sensor_distance,w,c	;volatile
  1655  004BB6  B0D8               	btfsc	status,0,c
  1656  004BB8  D027               	goto	l6709
  1657  004BBA  A652               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1658  004BBC  D025               	goto	l6709
  1659  004BBE  5004               	movf	_sensor_distance+3,w,c	;volatile
  1660  004BC0  E123               	bnz	l6709
  1661  004BC2  0E32               	movlw	50
  1662  004BC4  5C03               	subwf	_sensor_distance+2,w,c	;volatile
  1663  004BC6  B0D8               	btfsc	status,0,c
  1664  004BC8  D01F               	goto	l6709
  1665                           
  1666                           ;parcheggio.c: 275: request_sent = 0;
  1667  004BCA  9652               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1668                           
  1669                           ;parcheggio.c: 276: while (!CANisTxReady());
  1670  004BCC  D000               	goto	l6705
  1671  004BCE                     l6705:
  1672  004BCE  ECE8  F02E         	call	_CANisTxReady	;wreg free
  1673  004BD2  0900               	iorlw	0
  1674  004BD4  B4D8               	btfsc	status,2,c
  1675  004BD6  D7FB               	goto	l6705
  1676                           
  1677                           ;parcheggio.c: 277: CANsendMessage(0b00000001001, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1678  004BD8  0E09               	movlw	9
  1679  004BDA  0100               	movlb	0	; () banked
  1680  004BDC  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1681  004BDE  0E00               	movlw	0
  1682  004BE0  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1683  004BE2  0E00               	movlw	0
  1684  004BE4  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1685  004BE6  0E00               	movlw	0
  1686  004BE8  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1687  004BEA  0E53               	movlw	low _data
  1688  004BEC  0100               	movlb	0	; () banked
  1689  004BEE  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1690  004BF0  0E01               	movlw	high _data
  1691  004BF2  0100               	movlb	0	; () banked
  1692  004BF4  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1693  004BF6  0E08               	movlw	8
  1694  004BF8  0100               	movlb	0	; () banked
  1695  004BFA  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1696  004BFC  0EFC               	movlw	252
  1697  004BFE  0100               	movlb	0	; () banked
  1698  004C00  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1699  004C02  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1700  004C06  D000               	goto	l6709
  1701  004C08                     l6709:
  1702                           
  1703                           ;parcheggio.c: 278: }
  1704                           ;parcheggio.c: 280: if (distance_received == 1) {
  1705  004C08  AA51               	btfss	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1706  004C0A  D052               	goto	l743
  1707                           
  1708                           ;parcheggio.c: 281: if (distance_average > 65) {
  1709  004C0C  0100               	movlb	0	; () banked
  1710  004C0E  51E2               	movf	(_distance_average+1)& (0+255),w,b	;volatile
  1711  004C10  E105               	bnz	u8320
  1712  004C12  0E42               	movlw	66
  1713  004C14  0100               	movlb	0	; () banked
  1714  004C16  5DE1               	subwf	_distance_average& (0+255),w,b	;volatile
  1715  004C18  A0D8               	btfss	status,0,c
  1716  004C1A  D047               	goto	l756
  1717  004C1C                     u8320:
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;parcheggio.c: 282: PORTBbits.RB5 = 1;
  1721  004C1C  8A81               	bsf	3969,5,c	;volatile
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;parcheggio.c: 283: data[0] = 1;
  1725  004C1E  0E01               	movlw	1
  1726  004C20  0101               	movlb	1	; () banked
  1727  004C22  6F53               	movwf	_data& (0+255),b	;volatile
  1728                           
  1729                           ; BSR set to: 1
  1730                           ;parcheggio.c: 284: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  1731  004C24  0E0D               	movlw	13
  1732  004C26  0100               	movlb	0	; () banked
  1733  004C28  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1734  004C2A  0E00               	movlw	0
  1735  004C2C  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1736  004C2E  0E00               	movlw	0
  1737  004C30  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1738  004C32  0E00               	movlw	0
  1739  004C34  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1740  004C36  0E53               	movlw	low _data
  1741  004C38  0100               	movlb	0	; () banked
  1742  004C3A  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1743  004C3C  0E01               	movlw	high _data
  1744  004C3E  0100               	movlb	0	; () banked
  1745  004C40  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1746  004C42  0E01               	movlw	1
  1747  004C44  0100               	movlb	0	; () banked
  1748  004C46  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1749  004C48  0EBC               	movlw	188
  1750  004C4A  0100               	movlb	0	; () banked
  1751  004C4C  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1752  004C4E  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1753                           
  1754                           ;parcheggio.c: 285: if ((request_sent1 == 0)&&(sensor_distance[0] < 40)) {
  1755  004C52  B852               	btfsc	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1756  004C54  D02D               	goto	l743
  1757  004C56  5002               	movf	_sensor_distance+1,w,c	;volatile
  1758  004C58  E12B               	bnz	l743
  1759  004C5A  0E28               	movlw	40
  1760  004C5C  5C01               	subwf	_sensor_distance,w,c	;volatile
  1761  004C5E  B0D8               	btfsc	status,0,c
  1762  004C60  D027               	goto	l743
  1763                           
  1764                           ;parcheggio.c: 286: data_test[0] = 50;
  1765  004C62  0E32               	movlw	50
  1766  004C64  0101               	movlb	1	; () banked
  1767  004C66  6F7B               	movwf	_data_test& (0+255),b
  1768                           
  1769                           ; BSR set to: 1
  1770                           ;parcheggio.c: 287: asd = 1;
  1771  004C68  8251               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  1772                           
  1773                           ; BSR set to: 1
  1774                           
  1775                           ;parcheggio.c: 288: while (!CANisTxReady());
  1776  004C6A  D000               	goto	l6727
  1777  004C6C                     l6727:
  1778  004C6C  ECE8  F02E         	call	_CANisTxReady	;wreg free
  1779  004C70  0900               	iorlw	0
  1780  004C72  B4D8               	btfsc	status,2,c
  1781  004C74  D7FB               	goto	l6727
  1782                           
  1783                           ;parcheggio.c: 289: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1784  004C76  0E0F               	movlw	15
  1785  004C78  0100               	movlb	0	; () banked
  1786  004C7A  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1787  004C7C  0E00               	movlw	0
  1788  004C7E  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1789  004C80  0E00               	movlw	0
  1790  004C82  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1791  004C84  0E00               	movlw	0
  1792  004C86  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1793  004C88  0E7B               	movlw	low _data_test
  1794  004C8A  0100               	movlb	0	; () banked
  1795  004C8C  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1796  004C8E  0E01               	movlw	high _data_test
  1797  004C90  0100               	movlb	0	; () banked
  1798  004C92  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1799  004C94  0E08               	movlw	8
  1800  004C96  0100               	movlb	0	; () banked
  1801  004C98  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1802  004C9A  0EBC               	movlw	188
  1803  004C9C  0100               	movlb	0	; () banked
  1804  004C9E  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1805  004CA0  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1806                           
  1807                           ;parcheggio.c: 291: distance_received1 = 0;
  1808  004CA4  9C51               	bcf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
  1809                           
  1810                           ;parcheggio.c: 292: request_sent1 = 1;
  1811  004CA6  8852               	bsf	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1812                           
  1813                           ;parcheggio.c: 293: }
  1814                           ;parcheggio.c: 294: } else {
  1815  004CA8  D003               	goto	l743
  1816  004CAA                     l756:
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;parcheggio.c: 295: distance_received = 0;
  1820  004CAA  9A51               	bcf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1821                           
  1822                           ;parcheggio.c: 296: PORTBbits.RB5 = 0;
  1823  004CAC  9A81               	bcf	3969,5,c	;volatile
  1824                           
  1825                           ; BSR set to: 0
  1826  004CAE  D000               	goto	l743
  1827  004CB0                     l743:
  1828  004CB0  A051               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1829  004CB2  0012               	return	
  1830  004CB4  BA81               	btfsc	3969,5,c	;volatile
  1831  004CB6  0012               	return	
  1832  004CB8  D71E               	goto	l6677
  1833  004CBA  0012               	return	
  1834  004CBC  0012               	return		;funcret
  1835  004CBE                     __end_of_park_search:
  1836                           	opt stack 0
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           postinc0	equ	0xFEE
  1842                           wreg	equ	0xFE8
  1843                           postdec1	equ	0xFE5
  1844                           fsr1l	equ	0xFE1
  1845                           postinc2	equ	0xFDE
  1846                           postdec2	equ	0xFDD
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _park_routine *****************
  1850 ;; Defined at:
  1851 ;;		line 302 in file "parcheggio.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;		None               void
  1858 ;; Registers used:
  1859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1866 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  1867 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  1868 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
  1869 ;;Total ram usage:       12 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:   11
  1872 ;; This function calls:
  1873 ;;		_CANisTxReady
  1874 ;;		_CANsendMessage
  1875 ;;		___fladd
  1876 ;;		___flneg
  1877 ;;		___fltol
  1878 ;;		___lwtofl
  1879 ;;		_can_send
  1880 ;;		_delay_ms
  1881 ;;		_delay_s
  1882 ;;		_matematica
  1883 ;;		_parallelo
  1884 ;; This function is called by:
  1885 ;;		_main
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           	psect	text2
  1890  003178                     __ptext2:
  1891                           	opt stack 0
  1892  003178                     _park_routine:
  1893                           	opt stack 19
  1894                           
  1895                           ;parcheggio.c: 303: avvicinamento = 0;
  1896                           
  1897                           ;incstack = 0
  1898  003178  9451               	bcf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  1899                           
  1900                           ;parcheggio.c: 304: data_correction[0] = 0;
  1901  00317A  0E00               	movlw	0
  1902  00317C  0101               	movlb	1	; () banked
  1903  00317E  6F63               	movwf	_data_correction& (0+255),b
  1904                           
  1905                           ; BSR set to: 1
  1906                           ;parcheggio.c: 305: parallelo();
  1907  003180  EC26  F021         	call	_parallelo	;wreg free
  1908                           
  1909                           ;parcheggio.c: 307: while ((asd == 1)&&(PORTBbits.RB5 == 1) && (activation == 1)) {
  1910  003184  D02F               	goto	l6757
  1911  003186                     l6743:
  1912                           
  1913                           ;parcheggio.c: 308: delay_ms(200);
  1914  003186  0E00               	movlw	0
  1915  003188  0100               	movlb	0	; () banked
  1916  00318A  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1917  00318C  0EC8               	movlw	200
  1918  00318E  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1919  003190  EC39  F02E         	call	_delay_ms	;wreg free
  1920                           
  1921                           ;parcheggio.c: 309: PORTBbits.RB6 = ~PORTBbits.RB6;
  1922  003194  7C81               	btg	3969,6,c	;volatile
  1923                           
  1924                           ;parcheggio.c: 310: parallelo();
  1925  003196  EC26  F021         	call	_parallelo	;wreg free
  1926                           
  1927                           ;parcheggio.c: 311: if (data_correction[0] > 30) {
  1928  00319A  0E1E               	movlw	30
  1929  00319C  0101               	movlb	1	; () banked
  1930  00319E  6563               	cpfsgt	_data_correction& (0+255),b
  1931  0031A0  D004               	goto	l6753
  1932                           
  1933                           ; BSR set to: 1
  1934                           ;parcheggio.c: 312: data_correction[0] = 0;
  1935  0031A2  0E00               	movlw	0
  1936  0031A4  0101               	movlb	1	; () banked
  1937  0031A6  6F63               	movwf	_data_correction& (0+255),b
  1938                           
  1939                           ; BSR set to: 1
  1940                           
  1941                           ; BSR set to: 1
  1942                           ;parcheggio.c: 313: }
  1943                           ;parcheggio.c: 314: while (!CANisTxReady());
  1944  0031A8  D000               	goto	l6753
  1945  0031AA                     l6753:
  1946  0031AA  ECE8  F02E         	call	_CANisTxReady	;wreg free
  1947  0031AE  0900               	iorlw	0
  1948  0031B0  B4D8               	btfsc	status,2,c
  1949  0031B2  D7FB               	goto	l6753
  1950                           
  1951                           ;parcheggio.c: 315: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1952  0031B4  0E10               	movlw	16
  1953  0031B6  0100               	movlb	0	; () banked
  1954  0031B8  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1955  0031BA  0E00               	movlw	0
  1956  0031BC  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1957  0031BE  0E00               	movlw	0
  1958  0031C0  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1959  0031C2  0E00               	movlw	0
  1960  0031C4  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1961  0031C6  0E63               	movlw	low _data_correction
  1962  0031C8  0100               	movlb	0	; () banked
  1963  0031CA  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1964  0031CC  0E01               	movlw	high _data_correction
  1965  0031CE  0100               	movlb	0	; () banked
  1966  0031D0  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1967  0031D2  0E08               	movlw	8
  1968  0031D4  0100               	movlb	0	; () banked
  1969  0031D6  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1970  0031D8  0EBC               	movlw	188
  1971  0031DA  0100               	movlb	0	; () banked
  1972  0031DC  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1973  0031DE  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1974  0031E2  D000               	goto	l6757
  1975  0031E4                     l6757:
  1976  0031E4  B251               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  1977  0031E6  AA81               	btfss	3969,5,c	;volatile
  1978  0031E8  D002               	goto	l776
  1979  0031EA  B051               	btfsc	_activation/(0+8),_activation& (0+7),c	;volatile
  1980  0031EC  D7CC               	goto	l6743
  1981  0031EE                     l776:
  1982                           
  1983                           ;parcheggio.c: 316: }
  1984                           ;parcheggio.c: 318: if ((PORTBbits.RB5 == 1) && (activation == 1)) {
  1985  0031EE  BA81               	btfsc	3969,5,c	;volatile
  1986  0031F0  A051               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1987  0031F2  D030               	goto	l6777
  1988                           
  1989                           ;parcheggio.c: 319: PORTBbits.RB6 = 0;
  1990  0031F4  9C81               	bcf	3969,6,c	;volatile
  1991                           
  1992                           ;parcheggio.c: 320: data[0] = 2;
  1993  0031F6  0E02               	movlw	2
  1994  0031F8  0101               	movlb	1	; () banked
  1995  0031FA  6F53               	movwf	_data& (0+255),b	;volatile
  1996                           
  1997                           ; BSR set to: 1
  1998                           ;parcheggio.c: 321: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  1999  0031FC  0E0D               	movlw	13
  2000  0031FE  0100               	movlb	0	; () banked
  2001  003200  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2002  003202  0E00               	movlw	0
  2003  003204  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2004  003206  0E00               	movlw	0
  2005  003208  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2006  00320A  0E00               	movlw	0
  2007  00320C  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2008  00320E  0E53               	movlw	low _data
  2009  003210  0100               	movlb	0	; () banked
  2010  003212  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2011  003214  0E01               	movlw	high _data
  2012  003216  0100               	movlb	0	; () banked
  2013  003218  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2014  00321A  0E01               	movlw	1
  2015  00321C  0100               	movlb	0	; () banked
  2016  00321E  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2017  003220  0EBC               	movlw	188
  2018  003222  0100               	movlb	0	; () banked
  2019  003224  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2020  003226  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2021                           
  2022                           ;parcheggio.c: 322: }
  2023                           ;parcheggio.c: 324: while ((start_operation != 1)&&(activation == 1)) {
  2024  00322A  D014               	goto	l6777
  2025  00322C                     l779:
  2026                           
  2027                           ;parcheggio.c: 325: if (first == 0) {
  2028  00322C  B052               	btfsc	_first/(0+8),_first& (0+7),c	;volatile
  2029  00322E  D012               	goto	l6777
  2030                           
  2031                           ;parcheggio.c: 326: set_speed = 0;
  2032  003230  0E00               	movlw	0
  2033  003232  0100               	movlb	0	; () banked
  2034  003234  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2035  003236  0E00               	movlw	0
  2036  003238  6FE5               	movwf	_set_speed& (0+255),b
  2037                           
  2038                           ;parcheggio.c: 327: data_steering[0] = 90;
  2039  00323A  0E5A               	movlw	90
  2040  00323C  0101               	movlb	1	; () banked
  2041  00323E  6F73               	movwf	_data_steering& (0+255),b
  2042                           
  2043                           ;parcheggio.c: 328: data_brake [0] = 0;
  2044  003240  0E00               	movlw	0
  2045  003242  0101               	movlb	1	; () banked
  2046  003244  6F5B               	movwf	_data_brake& (0+255),b
  2047                           
  2048                           ;parcheggio.c: 329: data_brake [1] = 1;
  2049  003246  0E01               	movlw	1
  2050  003248  0101               	movlb	1	; () banked
  2051  00324A  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2052                           
  2053                           ; BSR set to: 1
  2054                           ;parcheggio.c: 330: can_send();
  2055  00324C  EC17  F02A         	call	_can_send	;wreg free
  2056                           
  2057                           ;parcheggio.c: 331: first = 1;
  2058  003250  8052               	bsf	_first/(0+8),_first& (0+7),c	;volatile
  2059  003252  D000               	goto	l6777
  2060  003254                     l6777:
  2061  003254  AA52               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  2062  003256  A051               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2063  003258  D1C5               	goto	l6887
  2064  00325A  D7E8               	goto	l779
  2065                           
  2066                           ;parcheggio.c: 332: }
  2067                           ;parcheggio.c: 333: }
  2068                           ;parcheggio.c: 335: while ((PORTBbits.RB5 == 1) && (activation == 1)&&(start_operation =
      +                          = 1)) {
  2069  00325C  D1C3               	goto	l6887
  2070  00325E                     l785:
  2071                           
  2072                           ;parcheggio.c: 336: LATBbits.LATB4 = 1;
  2073  00325E  888A               	bsf	3978,4,c	;volatile
  2074                           
  2075                           ;parcheggio.c: 338: bordo = (sensor_distance[0] + sensor_distance[1]) / 2;
  2076  003260  5001               	movf	_sensor_distance,w,c	;volatile
  2077  003262  2403               	addwf	_sensor_distance+2,w,c	;volatile
  2078  003264  0101               	movlb	1	; () banked
  2079  003266  6FE0               	movwf	??_park_routine& (0+255),b
  2080  003268  5002               	movf	_sensor_distance+1,w,c	;volatile
  2081  00326A  2004               	addwfc	_sensor_distance+3,w,c	;volatile
  2082  00326C  0101               	movlb	1	; () banked
  2083  00326E  6FE1               	movwf	(??_park_routine+1)& (0+255),b
  2084  003270  90D8               	bcf	status,0,c
  2085  003272  0101               	movlb	1	; () banked
  2086  003274  31E1               	rrcf	(??_park_routine+1)& (0+255),w,b
  2087  003276  0101               	movlb	1	; () banked
  2088  003278  6FE2               	movwf	(??_park_routine+2)& (0+255),b
  2089  00327A  0101               	movlb	1	; () banked
  2090  00327C  31E0               	rrcf	??_park_routine& (0+255),w,b
  2091  00327E  0100               	movlb	0	; () banked
  2092  003280  6F81               	movwf	___lwtofl@c& (0+255),b
  2093  003282  C1E2  F082         	movff	??_park_routine+2,___lwtofl@c+1
  2094  003286  EC8E  F02E         	call	___lwtofl	;wreg free
  2095  00328A  C081  F134         	movff	?___lwtofl,_bordo	;volatile
  2096  00328E  C082  F135         	movff	?___lwtofl+1,_bordo+1	;volatile
  2097  003292  C083  F136         	movff	?___lwtofl+2,_bordo+2	;volatile
  2098  003296  C084  F137         	movff	?___lwtofl+3,_bordo+3	;volatile
  2099                           
  2100                           ;parcheggio.c: 339: matematica();
  2101  00329A  EC60  F013         	call	_matematica	;wreg free
  2102                           
  2103                           ;parcheggio.c: 340: set_speed = 0;
  2104  00329E  0E00               	movlw	0
  2105  0032A0  0100               	movlb	0	; () banked
  2106  0032A2  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2107  0032A4  0E00               	movlw	0
  2108  0032A6  6FE5               	movwf	_set_speed& (0+255),b
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;parcheggio.c: 341: data_steering[0] = 90;
  2112  0032A8  0E5A               	movlw	90
  2113  0032AA  0101               	movlb	1	; () banked
  2114  0032AC  6F73               	movwf	_data_steering& (0+255),b
  2115                           
  2116                           ; BSR set to: 1
  2117                           ;parcheggio.c: 342: data_brake [0] = 0;
  2118  0032AE  0E00               	movlw	0
  2119  0032B0  0101               	movlb	1	; () banked
  2120  0032B2  6F5B               	movwf	_data_brake& (0+255),b
  2121                           
  2122                           ; BSR set to: 1
  2123                           ;parcheggio.c: 343: data_brake [1] = 1;
  2124  0032B4  0E01               	movlw	1
  2125  0032B6  0101               	movlb	1	; () banked
  2126  0032B8  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2127                           
  2128                           ; BSR set to: 1
  2129                           ;parcheggio.c: 344: can_send();
  2130  0032BA  EC17  F02A         	call	_can_send	;wreg free
  2131                           
  2132                           ;parcheggio.c: 345: delay_s(1);
  2133  0032BE  0E01               	movlw	1
  2134  0032C0  ECA7  F02E         	call	_delay_s
  2135                           
  2136                           ;parcheggio.c: 347: data_brake [0] = 3;
  2137  0032C4  0E03               	movlw	3
  2138  0032C6  0101               	movlb	1	; () banked
  2139  0032C8  6F5B               	movwf	_data_brake& (0+255),b
  2140                           
  2141                           ; BSR set to: 1
  2142                           ;parcheggio.c: 348: data_brake [1] = 1;
  2143  0032CA  0E01               	movlw	1
  2144  0032CC  0101               	movlb	1	; () banked
  2145  0032CE  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2146                           
  2147                           ; BSR set to: 1
  2148                           ;parcheggio.c: 350: set_speed = 200;
  2149  0032D0  0E00               	movlw	0
  2150  0032D2  0100               	movlb	0	; () banked
  2151  0032D4  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2152  0032D6  0EC8               	movlw	200
  2153  0032D8  6FE5               	movwf	_set_speed& (0+255),b
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;parcheggio.c: 351: dir = 0;
  2157  0032DA  9651               	bcf	_dir/(0+8),_dir& (0+7),c
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;parcheggio.c: 352: data_steering[0] = 90;
  2161  0032DC  0E5A               	movlw	90
  2162  0032DE  0101               	movlb	1	; () banked
  2163  0032E0  6F73               	movwf	_data_steering& (0+255),b
  2164                           
  2165                           ; BSR set to: 1
  2166                           ;parcheggio.c: 353: data_test[0] = ((60 + Pmin + 5)-(n + 15));
  2167  0032E2  0E00               	movlw	0
  2168  0032E4  0100               	movlb	0	; () banked
  2169  0032E6  6FA3               	movwf	___fladd@f2& (0+255),b
  2170  0032E8  0E00               	movlw	0
  2171  0032EA  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2172  0032EC  0E70               	movlw	112
  2173  0032EE  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2174  0032F0  0E41               	movlw	65
  2175  0032F2  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2176  0032F4  C138  F09F         	movff	_n,___fladd@f1
  2177  0032F8  C139  F0A0         	movff	_n+1,___fladd@f1+1
  2178  0032FC  C13A  F0A1         	movff	_n+2,___fladd@f1+2
  2179  003300  C13B  F0A2         	movff	_n+3,___fladd@f1+3
  2180  003304  ECF0  F01F         	call	___fladd	;wreg free
  2181  003308  C09F  F0AB         	movff	?___fladd,___flneg@f1
  2182  00330C  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  2183  003310  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  2184  003314  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  2185  003318  EC1B  F02E         	call	___flneg	;wreg free
  2186  00331C  C0AB  F1E4         	movff	?___flneg,_park_routine$3669
  2187  003320  C0AC  F1E5         	movff	?___flneg+1,_park_routine$3669+1
  2188  003324  C0AD  F1E6         	movff	?___flneg+2,_park_routine$3669+2
  2189  003328  C0AE  F1E7         	movff	?___flneg+3,_park_routine$3669+3
  2190                           
  2191                           ;parcheggio.c: 353: data_test[0] = ((60 + Pmin + 5)-(n + 15));
  2192  00332C  C128  F0A3         	movff	_Pmin,___fladd@f2
  2193  003330  C129  F0A4         	movff	_Pmin+1,___fladd@f2+1
  2194  003334  C12A  F0A5         	movff	_Pmin+2,___fladd@f2+2
  2195  003338  C12B  F0A6         	movff	_Pmin+3,___fladd@f2+3
  2196  00333C  C1E4  F09F         	movff	_park_routine$3669,___fladd@f1
  2197  003340  C1E5  F0A0         	movff	_park_routine$3669+1,___fladd@f1+1
  2198  003344  C1E6  F0A1         	movff	_park_routine$3669+2,___fladd@f1+2
  2199  003348  C1E7  F0A2         	movff	_park_routine$3669+3,___fladd@f1+3
  2200  00334C  ECF0  F01F         	call	___fladd	;wreg free
  2201  003350  C09F  F1E8         	movff	?___fladd,_park_routine$3670
  2202  003354  C0A0  F1E9         	movff	?___fladd+1,_park_routine$3670+1
  2203  003358  C0A1  F1EA         	movff	?___fladd+2,_park_routine$3670+2
  2204  00335C  C0A2  F1EB         	movff	?___fladd+3,_park_routine$3670+3
  2205                           
  2206                           ;parcheggio.c: 353: data_test[0] = ((60 + Pmin + 5)-(n + 15));
  2207  003360  0E00               	movlw	0
  2208  003362  0100               	movlb	0	; () banked
  2209  003364  6FA3               	movwf	___fladd@f2& (0+255),b
  2210  003366  0E00               	movlw	0
  2211  003368  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2212  00336A  0E82               	movlw	130
  2213  00336C  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2214  00336E  0E42               	movlw	66
  2215  003370  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2216  003372  C1E8  F09F         	movff	_park_routine$3670,___fladd@f1
  2217  003376  C1E9  F0A0         	movff	_park_routine$3670+1,___fladd@f1+1
  2218  00337A  C1EA  F0A1         	movff	_park_routine$3670+2,___fladd@f1+2
  2219  00337E  C1EB  F0A2         	movff	_park_routine$3670+3,___fladd@f1+3
  2220  003382  ECF0  F01F         	call	___fladd	;wreg free
  2221  003386  C09F  F0AF         	movff	?___fladd,___fltol@f1
  2222  00338A  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  2223  00338E  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  2224  003392  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  2225  003396  ECFD  F028         	call	___fltol	;wreg free
  2226  00339A  0100               	movlb	0	; () banked
  2227  00339C  51AF               	movf	?___fltol& (0+255),w,b
  2228  00339E  0101               	movlb	1	; () banked
  2229  0033A0  6F7B               	movwf	_data_test& (0+255),b
  2230                           
  2231                           ; BSR set to: 1
  2232                           ;parcheggio.c: 354: asd = 1;
  2233  0033A2  8251               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2234                           
  2235                           ; BSR set to: 1
  2236                           ;parcheggio.c: 355: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2237  0033A4  0E0F               	movlw	15
  2238  0033A6  0100               	movlb	0	; () banked
  2239  0033A8  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2240  0033AA  0E00               	movlw	0
  2241  0033AC  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2242  0033AE  0E00               	movlw	0
  2243  0033B0  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2244  0033B2  0E00               	movlw	0
  2245  0033B4  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2246  0033B6  0E7B               	movlw	low _data_test
  2247  0033B8  0100               	movlb	0	; () banked
  2248  0033BA  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2249  0033BC  0E01               	movlw	high _data_test
  2250  0033BE  0100               	movlb	0	; () banked
  2251  0033C0  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2252  0033C2  0E08               	movlw	8
  2253  0033C4  0100               	movlb	0	; () banked
  2254  0033C6  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2255  0033C8  0EBC               	movlw	188
  2256  0033CA  0100               	movlb	0	; () banked
  2257  0033CC  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2258  0033CE  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2259                           
  2260                           ;parcheggio.c: 356: can_send();
  2261  0033D2  EC17  F02A         	call	_can_send	;wreg free
  2262                           
  2263                           ;parcheggio.c: 357: while (asd == 1);
  2264  0033D6  D000               	goto	l786
  2265  0033D8                     l786:
  2266  0033D8  B251               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2267  0033DA  D7FE               	goto	l786
  2268                           
  2269                           ;parcheggio.c: 359: set_speed = 0;
  2270  0033DC  0E00               	movlw	0
  2271  0033DE  0100               	movlb	0	; () banked
  2272  0033E0  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2273  0033E2  0E00               	movlw	0
  2274  0033E4  6FE5               	movwf	_set_speed& (0+255),b
  2275                           
  2276                           ;parcheggio.c: 360: data_steering[0] = 90;
  2277  0033E6  0E5A               	movlw	90
  2278  0033E8  0101               	movlb	1	; () banked
  2279  0033EA  6F73               	movwf	_data_steering& (0+255),b
  2280                           
  2281                           ;parcheggio.c: 361: data_brake [0] = 0;
  2282  0033EC  0E00               	movlw	0
  2283  0033EE  0101               	movlb	1	; () banked
  2284  0033F0  6F5B               	movwf	_data_brake& (0+255),b
  2285                           
  2286                           ;parcheggio.c: 362: data_brake [1] = 1;
  2287  0033F2  0E01               	movlw	1
  2288  0033F4  0101               	movlb	1	; () banked
  2289  0033F6  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2290                           
  2291                           ; BSR set to: 1
  2292                           ;parcheggio.c: 363: can_send();
  2293  0033F8  EC17  F02A         	call	_can_send	;wreg free
  2294                           
  2295                           ;parcheggio.c: 364: delay_s(1);
  2296  0033FC  0E01               	movlw	1
  2297  0033FE  ECA7  F02E         	call	_delay_s
  2298                           
  2299                           ;parcheggio.c: 366: data_brake [0] = 3;
  2300  003402  0E03               	movlw	3
  2301  003404  0101               	movlb	1	; () banked
  2302  003406  6F5B               	movwf	_data_brake& (0+255),b
  2303                           
  2304                           ; BSR set to: 1
  2305                           ;parcheggio.c: 367: data_brake [1] = 1;
  2306  003408  0E01               	movlw	1
  2307  00340A  0101               	movlb	1	; () banked
  2308  00340C  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2309                           
  2310                           ; BSR set to: 1
  2311                           ;parcheggio.c: 368: set_speed = 200;
  2312  00340E  0E00               	movlw	0
  2313  003410  0100               	movlb	0	; () banked
  2314  003412  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2315  003414  0EC8               	movlw	200
  2316  003416  6FE5               	movwf	_set_speed& (0+255),b
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;parcheggio.c: 369: dir = 0;
  2320  003418  9651               	bcf	_dir/(0+8),_dir& (0+7),c
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;parcheggio.c: 370: data_steering[0] = 180;
  2324  00341A  0EB4               	movlw	180
  2325  00341C  0101               	movlb	1	; () banked
  2326  00341E  6F73               	movwf	_data_steering& (0+255),b
  2327                           
  2328                           ; BSR set to: 1
  2329                           ;parcheggio.c: 371: data_test[0] = prima_sterzata;
  2330  003420  C140  F0AF         	movff	_prima_sterzata,___fltol@f1
  2331  003424  C141  F0B0         	movff	_prima_sterzata+1,___fltol@f1+1
  2332  003428  C142  F0B1         	movff	_prima_sterzata+2,___fltol@f1+2
  2333  00342C  C143  F0B2         	movff	_prima_sterzata+3,___fltol@f1+3
  2334  003430  ECFD  F028         	call	___fltol	;wreg free
  2335  003434  0100               	movlb	0	; () banked
  2336  003436  51AF               	movf	?___fltol& (0+255),w,b
  2337  003438  0101               	movlb	1	; () banked
  2338  00343A  6F7B               	movwf	_data_test& (0+255),b
  2339                           
  2340                           ; BSR set to: 1
  2341                           ;parcheggio.c: 372: asd = 1;
  2342  00343C  8251               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2343                           
  2344                           ; BSR set to: 1
  2345                           ;parcheggio.c: 373: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2346  00343E  0E0F               	movlw	15
  2347  003440  0100               	movlb	0	; () banked
  2348  003442  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2349  003444  0E00               	movlw	0
  2350  003446  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2351  003448  0E00               	movlw	0
  2352  00344A  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2353  00344C  0E00               	movlw	0
  2354  00344E  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2355  003450  0E7B               	movlw	low _data_test
  2356  003452  0100               	movlb	0	; () banked
  2357  003454  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2358  003456  0E01               	movlw	high _data_test
  2359  003458  0100               	movlb	0	; () banked
  2360  00345A  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2361  00345C  0E08               	movlw	8
  2362  00345E  0100               	movlb	0	; () banked
  2363  003460  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2364  003462  0EBC               	movlw	188
  2365  003464  0100               	movlb	0	; () banked
  2366  003466  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2367  003468  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2368                           
  2369                           ;parcheggio.c: 374: can_send();
  2370  00346C  EC17  F02A         	call	_can_send	;wreg free
  2371                           
  2372                           ;parcheggio.c: 375: while (asd == 1);
  2373  003470  D000               	goto	l789
  2374  003472                     l789:
  2375  003472  B251               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2376  003474  D7FE               	goto	l789
  2377                           
  2378                           ;parcheggio.c: 376: set_speed = 200;
  2379  003476  0E00               	movlw	0
  2380  003478  0100               	movlb	0	; () banked
  2381  00347A  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2382  00347C  0EC8               	movlw	200
  2383  00347E  6FE5               	movwf	_set_speed& (0+255),b
  2384                           
  2385                           ;parcheggio.c: 377: data_steering[0] = 0;
  2386  003480  0E00               	movlw	0
  2387  003482  0101               	movlb	1	; () banked
  2388  003484  6F73               	movwf	_data_steering& (0+255),b
  2389                           
  2390                           ; BSR set to: 1
  2391                           ;parcheggio.c: 378: asd = 1;
  2392  003486  8251               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2393                           
  2394                           ; BSR set to: 1
  2395                           ;parcheggio.c: 379: data_test[0] = prima_sterzata + 9;
  2396  003488  0E00               	movlw	0
  2397  00348A  0100               	movlb	0	; () banked
  2398  00348C  6FA3               	movwf	___fladd@f2& (0+255),b
  2399  00348E  0E00               	movlw	0
  2400  003490  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2401  003492  0E10               	movlw	16
  2402  003494  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2403  003496  0E41               	movlw	65
  2404  003498  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2405  00349A  C140  F09F         	movff	_prima_sterzata,___fladd@f1
  2406  00349E  C141  F0A0         	movff	_prima_sterzata+1,___fladd@f1+1
  2407  0034A2  C142  F0A1         	movff	_prima_sterzata+2,___fladd@f1+2
  2408  0034A6  C143  F0A2         	movff	_prima_sterzata+3,___fladd@f1+3
  2409  0034AA  ECF0  F01F         	call	___fladd	;wreg free
  2410  0034AE  C09F  F0AF         	movff	?___fladd,___fltol@f1
  2411  0034B2  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  2412  0034B6  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  2413  0034BA  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  2414  0034BE  ECFD  F028         	call	___fltol	;wreg free
  2415  0034C2  0100               	movlb	0	; () banked
  2416  0034C4  51AF               	movf	?___fltol& (0+255),w,b
  2417  0034C6  0101               	movlb	1	; () banked
  2418  0034C8  6F7B               	movwf	_data_test& (0+255),b
  2419                           
  2420                           ; BSR set to: 1
  2421                           ;parcheggio.c: 380: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2422  0034CA  0E0F               	movlw	15
  2423  0034CC  0100               	movlb	0	; () banked
  2424  0034CE  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2425  0034D0  0E00               	movlw	0
  2426  0034D2  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2427  0034D4  0E00               	movlw	0
  2428  0034D6  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2429  0034D8  0E00               	movlw	0
  2430  0034DA  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2431  0034DC  0E7B               	movlw	low _data_test
  2432  0034DE  0100               	movlb	0	; () banked
  2433  0034E0  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2434  0034E2  0E01               	movlw	high _data_test
  2435  0034E4  0100               	movlb	0	; () banked
  2436  0034E6  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2437  0034E8  0E08               	movlw	8
  2438  0034EA  0100               	movlb	0	; () banked
  2439  0034EC  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2440  0034EE  0EBC               	movlw	188
  2441  0034F0  0100               	movlb	0	; () banked
  2442  0034F2  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2443  0034F4  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2444                           
  2445                           ;parcheggio.c: 381: can_send();
  2446  0034F8  EC17  F02A         	call	_can_send	;wreg free
  2447                           
  2448                           ;parcheggio.c: 382: while (asd == 1);
  2449  0034FC  D000               	goto	l792
  2450  0034FE                     l792:
  2451  0034FE  B251               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2452  003500  D7FE               	goto	l792
  2453                           
  2454                           ;parcheggio.c: 383: data_brake [0] = 0;
  2455  003502  0E00               	movlw	0
  2456  003504  0101               	movlb	1	; () banked
  2457  003506  6F5B               	movwf	_data_brake& (0+255),b
  2458                           
  2459                           ;parcheggio.c: 384: data_brake [1] = 1;
  2460  003508  0E01               	movlw	1
  2461  00350A  0101               	movlb	1	; () banked
  2462  00350C  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2463                           
  2464                           ;parcheggio.c: 385: set_speed = 0;
  2465  00350E  0E00               	movlw	0
  2466  003510  0100               	movlb	0	; () banked
  2467  003512  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2468  003514  0E00               	movlw	0
  2469  003516  6FE5               	movwf	_set_speed& (0+255),b
  2470                           
  2471                           ;parcheggio.c: 386: data_steering[0] = 90;
  2472  003518  0E5A               	movlw	90
  2473  00351A  0101               	movlb	1	; () banked
  2474  00351C  6F73               	movwf	_data_steering& (0+255),b
  2475                           
  2476                           ; BSR set to: 1
  2477                           ;parcheggio.c: 387: can_send();
  2478  00351E  EC17  F02A         	call	_can_send	;wreg free
  2479                           
  2480                           ;parcheggio.c: 388: delay_s(1);
  2481  003522  0E01               	movlw	1
  2482  003524  ECA7  F02E         	call	_delay_s
  2483                           
  2484                           ;parcheggio.c: 389: avvicinamento = 1;
  2485  003528  8451               	bsf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  2486                           
  2487                           ;parcheggio.c: 390: if (sensor_distance [6] > 20) {
  2488  00352A  500E               	movf	_sensor_distance+13,w,c	;volatile
  2489  00352C  E104               	bnz	u8510
  2490  00352E  0E15               	movlw	21
  2491  003530  5C0D               	subwf	_sensor_distance+12,w,c	;volatile
  2492  003532  A0D8               	btfss	status,0,c
  2493  003534  D01A               	goto	l6871
  2494  003536                     u8510:
  2495                           
  2496                           ;parcheggio.c: 391: data_brake [0] = 3;
  2497  003536  0E03               	movlw	3
  2498  003538  0101               	movlb	1	; () banked
  2499  00353A  6F5B               	movwf	_data_brake& (0+255),b
  2500                           
  2501                           ;parcheggio.c: 392: data_brake [1] = 1;
  2502  00353C  0E01               	movlw	1
  2503  00353E  0101               	movlb	1	; () banked
  2504  003540  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2505                           
  2506                           ;parcheggio.c: 393: set_speed = 200;
  2507  003542  0E00               	movlw	0
  2508  003544  0100               	movlb	0	; () banked
  2509  003546  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2510  003548  0EC8               	movlw	200
  2511  00354A  6FE5               	movwf	_set_speed& (0+255),b
  2512                           
  2513                           ;parcheggio.c: 394: data_steering[0] = 90;
  2514  00354C  0E5A               	movlw	90
  2515  00354E  0101               	movlb	1	; () banked
  2516  003550  6F73               	movwf	_data_steering& (0+255),b
  2517                           
  2518                           ; BSR set to: 1
  2519                           ;parcheggio.c: 395: dir = 1;
  2520  003552  8651               	bsf	_dir/(0+8),_dir& (0+7),c
  2521                           
  2522                           ; BSR set to: 1
  2523                           ;parcheggio.c: 396: can_send();
  2524  003554  EC17  F02A         	call	_can_send	;wreg free
  2525                           
  2526                           ;parcheggio.c: 397: while (sensor_distance [6] > 20);
  2527  003558  D000               	goto	l6869
  2528  00355A                     l6869:
  2529  00355A  500E               	movf	_sensor_distance+13,w,c	;volatile
  2530  00355C  E1FE               	bnz	l6869
  2531  00355E  0E15               	movlw	21
  2532  003560  5C0D               	subwf	_sensor_distance+12,w,c	;volatile
  2533  003562  A0D8               	btfss	status,0,c
  2534  003564  D002               	goto	l6871
  2535  003566  D7F9               	goto	l6869
  2536  003568  D000               	goto	l6871
  2537  00356A                     l6871:
  2538                           
  2539                           ;parcheggio.c: 398: }
  2540                           ;parcheggio.c: 399: data_brake [0] = 0;
  2541  00356A  0E00               	movlw	0
  2542  00356C  0101               	movlb	1	; () banked
  2543  00356E  6F5B               	movwf	_data_brake& (0+255),b
  2544                           
  2545                           ;parcheggio.c: 400: data_brake [1] = 1;
  2546  003570  0E01               	movlw	1
  2547  003572  0101               	movlb	1	; () banked
  2548  003574  6F5C               	movwf	(_data_brake+1)& (0+255),b
  2549                           
  2550                           ;parcheggio.c: 401: set_speed = 0;
  2551  003576  0E00               	movlw	0
  2552  003578  0100               	movlb	0	; () banked
  2553  00357A  6FE6               	movwf	(_set_speed+1)& (0+255),b
  2554  00357C  0E00               	movlw	0
  2555  00357E  6FE5               	movwf	_set_speed& (0+255),b
  2556                           
  2557                           ;parcheggio.c: 402: data_steering[0] = 90;
  2558  003580  0E5A               	movlw	90
  2559  003582  0101               	movlb	1	; () banked
  2560  003584  6F73               	movwf	_data_steering& (0+255),b
  2561                           
  2562                           ; BSR set to: 1
  2563                           ;parcheggio.c: 403: dir = 0;
  2564  003586  9651               	bcf	_dir/(0+8),_dir& (0+7),c
  2565                           
  2566                           ; BSR set to: 1
  2567                           ;parcheggio.c: 404: can_send();
  2568  003588  EC17  F02A         	call	_can_send	;wreg free
  2569                           
  2570                           ;parcheggio.c: 405: delay_s(1);
  2571  00358C  0E01               	movlw	1
  2572  00358E  ECA7  F02E         	call	_delay_s
  2573                           
  2574                           ;parcheggio.c: 406: data[0] = 3;
  2575  003592  0E03               	movlw	3
  2576  003594  0101               	movlb	1	; () banked
  2577  003596  6F53               	movwf	_data& (0+255),b	;volatile
  2578                           
  2579                           ; BSR set to: 1
  2580                           
  2581                           ;parcheggio.c: 407: while (!CANisTxReady());
  2582  003598  D000               	goto	l6881
  2583  00359A                     l6881:
  2584  00359A  ECE8  F02E         	call	_CANisTxReady	;wreg free
  2585  00359E  0900               	iorlw	0
  2586  0035A0  B4D8               	btfsc	status,2,c
  2587  0035A2  D7FB               	goto	l6881
  2588                           
  2589                           ;parcheggio.c: 408: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  2590  0035A4  0E0D               	movlw	13
  2591  0035A6  0100               	movlb	0	; () banked
  2592  0035A8  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2593  0035AA  0E00               	movlw	0
  2594  0035AC  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2595  0035AE  0E00               	movlw	0
  2596  0035B0  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2597  0035B2  0E00               	movlw	0
  2598  0035B4  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2599  0035B6  0E53               	movlw	low _data
  2600  0035B8  0100               	movlb	0	; () banked
  2601  0035BA  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2602  0035BC  0E01               	movlw	high _data
  2603  0035BE  0100               	movlb	0	; () banked
  2604  0035C0  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2605  0035C2  0E08               	movlw	8
  2606  0035C4  0100               	movlb	0	; () banked
  2607  0035C6  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2608  0035C8  0EBC               	movlw	188
  2609  0035CA  0100               	movlb	0	; () banked
  2610  0035CC  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2611  0035CE  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2612                           
  2613                           ;parcheggio.c: 409: delay_ms(100);
  2614  0035D2  0E00               	movlw	0
  2615  0035D4  0100               	movlb	0	; () banked
  2616  0035D6  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  2617  0035D8  0E64               	movlw	100
  2618  0035DA  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  2619  0035DC  EC39  F02E         	call	_delay_ms	;wreg free
  2620  0035E0  00FF               	reset		;# 
  2621  0035E2  D000               	goto	l6887
  2622  0035E4                     l6887:
  2623  0035E4  AA81               	btfss	3969,5,c	;volatile
  2624  0035E6  0012               	return	
  2625  0035E8  A051               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2626  0035EA  0012               	return	
  2627  0035EC  AA52               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  2628  0035EE  0012               	return	
  2629  0035F0  D636               	goto	l785
  2630  0035F2  0012               	return	
  2631  0035F4  0012               	return		;funcret
  2632  0035F6                     __end_of_park_routine:
  2633                           	opt stack 0
  2634                           tblptru	equ	0xFF8
  2635                           tblptrh	equ	0xFF7
  2636                           tblptrl	equ	0xFF6
  2637                           tablat	equ	0xFF5
  2638                           postinc0	equ	0xFEE
  2639                           wreg	equ	0xFE8
  2640                           postdec1	equ	0xFE5
  2641                           fsr1l	equ	0xFE1
  2642                           postinc2	equ	0xFDE
  2643                           postdec2	equ	0xFDD
  2644                           status	equ	0xFD8
  2645                           
  2646 ;; *************** function _parallelo *****************
  2647 ;; Defined at:
  2648 ;;		line 437 in file "parcheggio.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;		None
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;		None
  2653 ;; Return value:  Size  Location     Type
  2654 ;;		None               void
  2655 ;; Registers used:
  2656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2664 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2665 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2666 ;;Total ram usage:        2 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:   10
  2669 ;; This function calls:
  2670 ;;		___awtofl
  2671 ;;		___fladd
  2672 ;;		___fldiv
  2673 ;;		___flge
  2674 ;;		___flmul
  2675 ;;		___fltol
  2676 ;;		_abs
  2677 ;;		_asin
  2678 ;;		_can_send
  2679 ;;		_sqrt
  2680 ;; This function is called by:
  2681 ;;		_park_search
  2682 ;;		_park_routine
  2683 ;; This function uses a non-reentrant model
  2684 ;;
  2685                           
  2686                           	psect	text3
  2687  00424C                     __ptext3:
  2688                           	opt stack 0
  2689  00424C                     _parallelo:
  2690                           	opt stack 19
  2691                           
  2692                           ;parcheggio.c: 438: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  2693                           
  2694                           ;incstack = 0
  2695  00424C  EE20  F003         	lfsr	2,_sensor_distance+2	;volatile
  2696  004250  CFDE F0D5          	movff	postinc2,??_parallelo
  2697  004254  CFDD F0D6          	movff	postdec2,??_parallelo+1
  2698  004258  0100               	movlb	0	; () banked
  2699  00425A  1FD5               	comf	??_parallelo& (0+255),f,b
  2700  00425C  1FD6               	comf	(??_parallelo+1)& (0+255),f,b
  2701  00425E  4BD5               	infsnz	??_parallelo& (0+255),f,b
  2702  004260  2BD6               	incf	(??_parallelo+1)& (0+255),f,b
  2703  004262  5001               	movf	_sensor_distance,w,c	;volatile
  2704  004264  0100               	movlb	0	; () banked
  2705  004266  25D5               	addwf	??_parallelo& (0+255),w,b
  2706  004268  0100               	movlb	0	; () banked
  2707  00426A  6F77               	movwf	abs@a& (0+255),b
  2708  00426C  5002               	movf	_sensor_distance+1,w,c	;volatile
  2709  00426E  0100               	movlb	0	; () banked
  2710  004270  21D6               	addwfc	(??_parallelo+1)& (0+255),w,b
  2711  004272  0100               	movlb	0	; () banked
  2712  004274  6F78               	movwf	(abs@a+1)& (0+255),b
  2713  004276  ECBE  F02E         	call	_abs	;wreg free
  2714  00427A  C077  F081         	movff	?_abs,___awtofl@c
  2715  00427E  C078  F082         	movff	?_abs+1,___awtofl@c+1
  2716  004282  ECD6  F02D         	call	___awtofl	;wreg free
  2717  004286  C081  F0D7         	movff	?___awtofl,_alignment_gap
  2718  00428A  C082  F0D8         	movff	?___awtofl+1,_alignment_gap+1
  2719  00428E  C083  F0D9         	movff	?___awtofl+2,_alignment_gap+2
  2720  004292  C084  F0DA         	movff	?___awtofl+3,_alignment_gap+3
  2721                           
  2722                           ;parcheggio.c: 439: if (alignment_gap < 30) {
  2723  004296  C0D7  F0B3         	movff	_alignment_gap,___flge@ff1
  2724  00429A  C0D8  F0B4         	movff	_alignment_gap+1,___flge@ff1+1
  2725  00429E  C0D9  F0B5         	movff	_alignment_gap+2,___flge@ff1+2
  2726  0042A2  C0DA  F0B6         	movff	_alignment_gap+3,___flge@ff1+3
  2727  0042A6  0E00               	movlw	0
  2728  0042A8  0100               	movlb	0	; () banked
  2729  0042AA  6FB7               	movwf	___flge@ff2& (0+255),b
  2730  0042AC  0E00               	movlw	0
  2731  0042AE  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  2732  0042B0  0EF0               	movlw	240
  2733  0042B2  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  2734  0042B4  0E41               	movlw	65
  2735  0042B6  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  2736  0042B8  EC9F  F02A         	call	___flge	;wreg free
  2737  0042BC  0100               	movlb	0	; () banked
  2738  0042BE  B0D8               	btfsc	status,0,c
  2739  0042C0  D0EC               	goto	l6591
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;parcheggio.c: 440: if ((sensor_distance[0] < 30) && (sensor_distance[1] < 30)) {
  2743  0042C2  5002               	movf	_sensor_distance+1,w,c	;volatile
  2744  0042C4  E103               	bnz	u8181
  2745  0042C6  0E1E               	movlw	30
  2746  0042C8  5C01               	subwf	_sensor_distance,w,c	;volatile
  2747  0042CA  B0D8               	btfsc	status,0,c
  2748  0042CC                     u8181:
  2749  0042CC  0012               	return	
  2750                           
  2751                           ; BSR set to: 0
  2752  0042CE  5004               	movf	_sensor_distance+3,w,c	;volatile
  2753  0042D0  E103               	bnz	u8191
  2754  0042D2  0E1E               	movlw	30
  2755  0042D4  5C03               	subwf	_sensor_distance+2,w,c	;volatile
  2756  0042D6  B0D8               	btfsc	status,0,c
  2757  0042D8                     u8191:
  2758  0042D8  0012               	return	
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;parcheggio.c: 441: x = (((10)*(10)) + ((alignment_gap * alignment_gap)));
  2762  0042DA  C0D7  F094         	movff	_alignment_gap,___flmul@f2
  2763  0042DE  C0D8  F095         	movff	_alignment_gap+1,___flmul@f2+1
  2764  0042E2  C0D9  F096         	movff	_alignment_gap+2,___flmul@f2+2
  2765  0042E6  C0DA  F097         	movff	_alignment_gap+3,___flmul@f2+3
  2766  0042EA  C0D7  F090         	movff	_alignment_gap,___flmul@f1
  2767  0042EE  C0D8  F091         	movff	_alignment_gap+1,___flmul@f1+1
  2768  0042F2  C0D9  F092         	movff	_alignment_gap+2,___flmul@f1+2
  2769  0042F6  C0DA  F093         	movff	_alignment_gap+3,___flmul@f1+3
  2770  0042FA  EC1F  F027         	call	___flmul	;wreg free
  2771  0042FE  C090  F09F         	movff	?___flmul,___fladd@f1
  2772  004302  C091  F0A0         	movff	?___flmul+1,___fladd@f1+1
  2773  004306  C092  F0A1         	movff	?___flmul+2,___fladd@f1+2
  2774  00430A  C093  F0A2         	movff	?___flmul+3,___fladd@f1+3
  2775  00430E  0E00               	movlw	0
  2776  004310  0100               	movlb	0	; () banked
  2777  004312  6FA3               	movwf	___fladd@f2& (0+255),b
  2778  004314  0E00               	movlw	0
  2779  004316  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2780  004318  0EC8               	movlw	200
  2781  00431A  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2782  00431C  0E42               	movlw	66
  2783  00431E  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2784  004320  ECF0  F01F         	call	___fladd	;wreg free
  2785  004324  C09F  F011         	movff	?___fladd,_x
  2786  004328  C0A0  F012         	movff	?___fladd+1,_x+1
  2787  00432C  C0A1  F013         	movff	?___fladd+2,_x+2
  2788  004330  C0A2  F014         	movff	?___fladd+3,_x+3
  2789                           
  2790                           ;parcheggio.c: 442: x = sqrt(x);
  2791  004334  C011  F0D1         	movff	_x,sqrt@y
  2792  004338  C012  F0D2         	movff	_x+1,sqrt@y+1
  2793  00433C  C013  F0D3         	movff	_x+2,sqrt@y+2
  2794  004340  C014  F0D4         	movff	_x+3,sqrt@y+3
  2795  004344  EC7F  F023         	call	_sqrt	;wreg free
  2796  004348  C0D1  F011         	movff	?_sqrt,_x
  2797  00434C  C0D2  F012         	movff	?_sqrt+1,_x+1
  2798  004350  C0D3  F013         	movff	?_sqrt+2,_x+2
  2799  004354  C0D4  F014         	movff	?_sqrt+3,_x+3
  2800                           
  2801                           ;parcheggio.c: 443: z = alignment_gap / x;
  2802  004358  C0D7  F081         	movff	_alignment_gap,___fldiv@f1
  2803  00435C  C0D8  F082         	movff	_alignment_gap+1,___fldiv@f1+1
  2804  004360  C0D9  F083         	movff	_alignment_gap+2,___fldiv@f1+2
  2805  004364  C0DA  F084         	movff	_alignment_gap+3,___fldiv@f1+3
  2806  004368  C011  F085         	movff	_x,___fldiv@f2
  2807  00436C  C012  F086         	movff	_x+1,___fldiv@f2+1
  2808  004370  C013  F087         	movff	_x+2,___fldiv@f2+2
  2809  004374  C014  F088         	movff	_x+3,___fldiv@f2+3
  2810  004378  ECD1  F027         	call	___fldiv	;wreg free
  2811  00437C  C081  F0DB         	movff	?___fldiv,_z
  2812  004380  C082  F0DC         	movff	?___fldiv+1,_z+1
  2813  004384  C083  F0DD         	movff	?___fldiv+2,_z+2
  2814  004388  C084  F0DE         	movff	?___fldiv+3,_z+3
  2815                           
  2816                           ;parcheggio.c: 444: z = asin(z);
  2817  00438C  C0DB  F1A0         	movff	_z,asin@x
  2818  004390  C0DC  F1A1         	movff	_z+1,asin@x+1
  2819  004394  C0DD  F1A2         	movff	_z+2,asin@x+2
  2820  004398  C0DE  F1A3         	movff	_z+3,asin@x+3
  2821  00439C  ECD0  F01C         	call	_asin	;wreg free
  2822  0043A0  C1A0  F0DB         	movff	?_asin,_z
  2823  0043A4  C1A1  F0DC         	movff	?_asin+1,_z+1
  2824  0043A8  C1A2  F0DD         	movff	?_asin+2,_z+2
  2825  0043AC  C1A3  F0DE         	movff	?_asin+3,_z+3
  2826                           
  2827                           ;parcheggio.c: 445: z = z / 3.14159265358979323846 * 180;
  2828  0043B0  0EDB               	movlw	219
  2829  0043B2  0100               	movlb	0	; () banked
  2830  0043B4  6F85               	movwf	___fldiv@f2& (0+255),b
  2831  0043B6  0E0F               	movlw	15
  2832  0043B8  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  2833  0043BA  0E49               	movlw	73
  2834  0043BC  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  2835  0043BE  0E40               	movlw	64
  2836  0043C0  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  2837  0043C2  C0DB  F081         	movff	_z,___fldiv@f1
  2838  0043C6  C0DC  F082         	movff	_z+1,___fldiv@f1+1
  2839  0043CA  C0DD  F083         	movff	_z+2,___fldiv@f1+2
  2840  0043CE  C0DE  F084         	movff	_z+3,___fldiv@f1+3
  2841  0043D2  ECD1  F027         	call	___fldiv	;wreg free
  2842  0043D6  C081  F090         	movff	?___fldiv,___flmul@f1
  2843  0043DA  C082  F091         	movff	?___fldiv+1,___flmul@f1+1
  2844  0043DE  C083  F092         	movff	?___fldiv+2,___flmul@f1+2
  2845  0043E2  C084  F093         	movff	?___fldiv+3,___flmul@f1+3
  2846  0043E6  0E00               	movlw	0
  2847  0043E8  0100               	movlb	0	; () banked
  2848  0043EA  6F94               	movwf	___flmul@f2& (0+255),b
  2849  0043EC  0E00               	movlw	0
  2850  0043EE  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  2851  0043F0  0E34               	movlw	52
  2852  0043F2  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  2853  0043F4  0E43               	movlw	67
  2854  0043F6  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  2855  0043F8  EC1F  F027         	call	___flmul	;wreg free
  2856  0043FC  C090  F0DB         	movff	?___flmul,_z
  2857  004400  C091  F0DC         	movff	?___flmul+1,_z+1
  2858  004404  C092  F0DD         	movff	?___flmul+2,_z+2
  2859  004408  C093  F0DE         	movff	?___flmul+3,_z+3
  2860                           
  2861                           ;parcheggio.c: 446: data_correction[0] = z;
  2862  00440C  C0DB  F0AF         	movff	_z,___fltol@f1
  2863  004410  C0DC  F0B0         	movff	_z+1,___fltol@f1+1
  2864  004414  C0DD  F0B1         	movff	_z+2,___fltol@f1+2
  2865  004418  C0DE  F0B2         	movff	_z+3,___fltol@f1+3
  2866  00441C  ECFD  F028         	call	___fltol	;wreg free
  2867  004420  0100               	movlb	0	; () banked
  2868  004422  51AF               	movf	?___fltol& (0+255),w,b
  2869  004424  0101               	movlb	1	; () banked
  2870  004426  6F63               	movwf	_data_correction& (0+255),b
  2871                           
  2872                           ; BSR set to: 1
  2873                           ;parcheggio.c: 448: if (sensor_distance[0] < sensor_distance[1]) {
  2874  004428  5003               	movf	_sensor_distance+2,w,c	;volatile
  2875  00442A  5C01               	subwf	_sensor_distance,w,c	;volatile
  2876  00442C  5004               	movf	_sensor_distance+3,w,c	;volatile
  2877  00442E  5802               	subwfb	_sensor_distance+1,w,c	;volatile
  2878  004430  B0D8               	btfsc	status,0,c
  2879  004432  D002               	goto	l6583
  2880                           
  2881                           ; BSR set to: 1
  2882                           ;parcheggio.c: 449: data_correction[1] = 0;
  2883  004434  0E00               	movlw	0
  2884  004436  D001               	goto	L1
  2885  004438                     l6583:
  2886                           
  2887                           ; BSR set to: 1
  2888                           ;parcheggio.c: 451: data_correction[1] = 1;
  2889  004438  0E01               	movlw	1
  2890  00443A                     L1:
  2891  00443A  0101               	movlb	1	; () banked
  2892  00443C  6F64               	movwf	(_data_correction+1)& (0+255),b
  2893  00443E  D000               	goto	l6585
  2894  004440                     l6585:
  2895                           
  2896                           ; BSR set to: 1
  2897                           ;parcheggio.c: 452: }
  2898                           ;parcheggio.c: 453: if ((old_alignment_gap != alignment_gap) || (old_dir_correction != d
      +                          ata_correction[1])) {
  2899  004440  0100               	movlb	0	; () banked
  2900  004442  51D7               	movf	_alignment_gap& (0+255),w,b
  2901  004444  0101               	movlb	1	; () banked
  2902  004446  193C               	xorwf	_old_alignment_gap& (0+255),w,b
  2903  004448  E117               	bnz	l831
  2904  00444A  0100               	movlb	0	; () banked
  2905  00444C  51D8               	movf	(_alignment_gap+1)& (0+255),w,b
  2906  00444E  0101               	movlb	1	; () banked
  2907  004450  193D               	xorwf	(_old_alignment_gap+1)& (0+255),w,b
  2908  004452  E112               	bnz	l831
  2909  004454  0100               	movlb	0	; () banked
  2910  004456  51D9               	movf	(_alignment_gap+2)& (0+255),w,b
  2911  004458  0101               	movlb	1	; () banked
  2912  00445A  193E               	xorwf	(_old_alignment_gap+2)& (0+255),w,b
  2913  00445C  E10D               	bnz	l831
  2914  00445E  0100               	movlb	0	; () banked
  2915  004460  51DA               	movf	(_alignment_gap+3)& (0+255),w,b
  2916  004462  0101               	movlb	1	; () banked
  2917  004464  193F               	xorwf	(_old_alignment_gap+3)& (0+255),w,b
  2918  004466  A4D8               	btfss	status,2,c
  2919  004468  D007               	goto	l831
  2920                           
  2921                           ; BSR set to: 1
  2922  00446A  0E00               	movlw	0
  2923  00446C  B452               	btfsc	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  2924  00446E  0E01               	movlw	1
  2925  004470  0101               	movlb	1	; () banked
  2926  004472  1964               	xorwf	(_data_correction+1)& (0+255),w,b
  2927  004474  B4D8               	btfsc	status,2,c
  2928  004476  0012               	return	
  2929  004478                     l831:
  2930                           
  2931                           ; BSR set to: 1
  2932                           ;parcheggio.c: 454: old_alignment_gap = alignment_gap;
  2933  004478  C0D7  F13C         	movff	_alignment_gap,_old_alignment_gap
  2934  00447C  C0D8  F13D         	movff	_alignment_gap+1,_old_alignment_gap+1
  2935  004480  C0D9  F13E         	movff	_alignment_gap+2,_old_alignment_gap+2
  2936  004484  C0DA  F13F         	movff	_alignment_gap+3,_old_alignment_gap+3
  2937                           
  2938                           ;parcheggio.c: 455: old_dir_correction = data_correction[1];
  2939  004488  0101               	movlb	1	; () banked
  2940  00448A  B164               	btfsc	(_data_correction+1)& (0+255),0,b
  2941  00448C  D002               	bra	u8235
  2942  00448E  9452               	bcf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  2943  004490  D001               	bra	u8236
  2944  004492                     u8235:
  2945  004492  8452               	bsf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  2946  004494                     u8236:
  2947                           
  2948                           ;parcheggio.c: 456: can_send();
  2949  004494  EC17  F02A         	call	_can_send	;wreg free
  2950                           
  2951                           ;parcheggio.c: 457: }
  2952                           ;parcheggio.c: 458: }
  2953                           ;parcheggio.c: 459: } else {
  2954  004498  0012               	return	
  2955  00449A                     l6591:
  2956                           
  2957                           ;parcheggio.c: 460: data_correction[0] = 0;
  2958  00449A  0E00               	movlw	0
  2959  00449C  0101               	movlb	1	; () banked
  2960  00449E  6F63               	movwf	_data_correction& (0+255),b
  2961                           
  2962                           ; BSR set to: 1
  2963                           ;parcheggio.c: 461: can_send();
  2964  0044A0  EC17  F02A         	call	_can_send	;wreg free
  2965  0044A4  0012               	return	
  2966  0044A6  0012               	return		;funcret
  2967  0044A8                     __end_of_parallelo:
  2968                           	opt stack 0
  2969                           tblptru	equ	0xFF8
  2970                           tblptrh	equ	0xFF7
  2971                           tblptrl	equ	0xFF6
  2972                           tablat	equ	0xFF5
  2973                           postinc0	equ	0xFEE
  2974                           wreg	equ	0xFE8
  2975                           postdec1	equ	0xFE5
  2976                           fsr1l	equ	0xFE1
  2977                           postinc2	equ	0xFDE
  2978                           postdec2	equ	0xFDD
  2979                           status	equ	0xFD8
  2980                           
  2981 ;; *************** function _can_send *****************
  2982 ;; Defined at:
  2983 ;;		line 414 in file "parcheggio.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;		None
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;		None
  2988 ;; Return value:  Size  Location     Type
  2989 ;;		None               void
  2990 ;; Registers used:
  2991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3001 ;;Total ram usage:        0 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; Hardware stack levels required when called:    6
  3004 ;; This function calls:
  3005 ;;		_CANisTxReady
  3006 ;;		_CANsendMessage
  3007 ;; This function is called by:
  3008 ;;		_park_routine
  3009 ;;		_parallelo
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           	psect	text4
  3014  00542E                     __ptext4:
  3015                           	opt stack 0
  3016  00542E                     _can_send:
  3017                           	opt stack 22
  3018                           
  3019                           ;parcheggio.c: 415: if (start_operation == 1) {
  3020                           
  3021                           ;incstack = 0
  3022  00542E  BA52               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  3023  005430  D002               	goto	l6415
  3024  005432  D067               	goto	l6435
  3025                           
  3026                           ;parcheggio.c: 417: while (CANisTxReady() != 1);
  3027  005434  D000               	goto	l6415
  3028  005436                     l6415:
  3029  005436  ECE8  F02E         	call	_CANisTxReady	;wreg free
  3030  00543A  06E8               	decf	wreg,f,c
  3031  00543C  A4D8               	btfss	status,2,c
  3032  00543E  D7FB               	goto	l6415
  3033                           
  3034                           ;parcheggio.c: 418: CANsendMessage(0b00000000111, data_steering, 8, CAN_CONFIG_STD_MSG &
      +                           CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3035  005440  0E07               	movlw	7
  3036  005442  0100               	movlb	0	; () banked
  3037  005444  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3038  005446  0E00               	movlw	0
  3039  005448  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3040  00544A  0E00               	movlw	0
  3041  00544C  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3042  00544E  0E00               	movlw	0
  3043  005450  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3044  005452  0E73               	movlw	low _data_steering
  3045  005454  0100               	movlb	0	; () banked
  3046  005456  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3047  005458  0E01               	movlw	high _data_steering
  3048  00545A  0100               	movlb	0	; () banked
  3049  00545C  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3050  00545E  0E08               	movlw	8
  3051  005460  0100               	movlb	0	; () banked
  3052  005462  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3053  005464  0EBC               	movlw	188
  3054  005466  0100               	movlb	0	; () banked
  3055  005468  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3056  00546A  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3057                           
  3058                           ;parcheggio.c: 421: data_speed[0] = set_speed;
  3059  00546E  C0E5  F16B         	movff	_set_speed,_data_speed
  3060                           
  3061                           ;parcheggio.c: 422: data_speed[1] = (set_speed >> 8);
  3062  005472  0100               	movlb	0	; () banked
  3063  005474  51E6               	movf	(_set_speed+1)& (0+255),w,b
  3064  005476  0101               	movlb	1	; () banked
  3065  005478  6F6C               	movwf	(_data_speed+1)& (0+255),b
  3066                           
  3067                           ; BSR set to: 1
  3068                           ;parcheggio.c: 423: data_speed[2] = dir;
  3069  00547A  0E00               	movlw	0
  3070  00547C  B651               	btfsc	_dir/(0+8),_dir& (0+7),c
  3071  00547E  0E01               	movlw	1
  3072  005480  0101               	movlb	1	; () banked
  3073  005482  6F6D               	movwf	(_data_speed+2)& (0+255),b
  3074                           
  3075                           ; BSR set to: 1
  3076                           
  3077                           ;parcheggio.c: 424: while (CANisTxReady() != 1);
  3078  005484  D000               	goto	l6425
  3079  005486                     l6425:
  3080  005486  ECE8  F02E         	call	_CANisTxReady	;wreg free
  3081  00548A  06E8               	decf	wreg,f,c
  3082  00548C  A4D8               	btfss	status,2,c
  3083  00548E  D7FB               	goto	l6425
  3084                           
  3085                           ;parcheggio.c: 425: CANsendMessage(0b00000000101, data_speed, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3086  005490  0E05               	movlw	5
  3087  005492  0100               	movlb	0	; () banked
  3088  005494  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3089  005496  0E00               	movlw	0
  3090  005498  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3091  00549A  0E00               	movlw	0
  3092  00549C  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3093  00549E  0E00               	movlw	0
  3094  0054A0  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3095  0054A2  0E6B               	movlw	low _data_speed
  3096  0054A4  0100               	movlb	0	; () banked
  3097  0054A6  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3098  0054A8  0E01               	movlw	high _data_speed
  3099  0054AA  0100               	movlb	0	; () banked
  3100  0054AC  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3101  0054AE  0E08               	movlw	8
  3102  0054B0  0100               	movlb	0	; () banked
  3103  0054B2  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3104  0054B4  0EBC               	movlw	188
  3105  0054B6  0100               	movlb	0	; () banked
  3106  0054B8  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3107  0054BA  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3108                           
  3109                           ;parcheggio.c: 428: data_brake[1] = 0;
  3110  0054BE  0E00               	movlw	0
  3111  0054C0  0101               	movlb	1	; () banked
  3112  0054C2  6F5C               	movwf	(_data_brake+1)& (0+255),b
  3113                           
  3114                           ; BSR set to: 1
  3115                           
  3116                           ;parcheggio.c: 429: while (CANisTxReady() != 1);
  3117  0054C4  D000               	goto	l6431
  3118  0054C6                     l6431:
  3119  0054C6  ECE8  F02E         	call	_CANisTxReady	;wreg free
  3120  0054CA  06E8               	decf	wreg,f,c
  3121  0054CC  A4D8               	btfss	status,2,c
  3122  0054CE  D7FB               	goto	l6431
  3123                           
  3124                           ;parcheggio.c: 430: CANsendMessage(0b00000000110, data_brake, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3125  0054D0  0E06               	movlw	6
  3126  0054D2  0100               	movlb	0	; () banked
  3127  0054D4  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3128  0054D6  0E00               	movlw	0
  3129  0054D8  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3130  0054DA  0E00               	movlw	0
  3131  0054DC  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3132  0054DE  0E00               	movlw	0
  3133  0054E0  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3134  0054E2  0E5B               	movlw	low _data_brake
  3135  0054E4  0100               	movlb	0	; () banked
  3136  0054E6  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3137  0054E8  0E01               	movlw	high _data_brake
  3138  0054EA  0100               	movlb	0	; () banked
  3139  0054EC  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3140  0054EE  0E08               	movlw	8
  3141  0054F0  0100               	movlb	0	; () banked
  3142  0054F2  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3143  0054F4  0EBC               	movlw	188
  3144  0054F6  0100               	movlb	0	; () banked
  3145  0054F8  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3146  0054FA  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3147                           
  3148                           ;parcheggio.c: 431: } else {
  3149  0054FE  0012               	return	
  3150                           
  3151                           ;parcheggio.c: 432: while (CANisTxReady() != 1);
  3152  005500  D000               	goto	l6435
  3153  005502                     l6435:
  3154  005502  ECE8  F02E         	call	_CANisTxReady	;wreg free
  3155  005506  06E8               	decf	wreg,f,c
  3156  005508  A4D8               	btfss	status,2,c
  3157  00550A  D7FB               	goto	l6435
  3158                           
  3159                           ;parcheggio.c: 433: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3160  00550C  0E10               	movlw	16
  3161  00550E  0100               	movlb	0	; () banked
  3162  005510  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3163  005512  0E00               	movlw	0
  3164  005514  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3165  005516  0E00               	movlw	0
  3166  005518  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3167  00551A  0E00               	movlw	0
  3168  00551C  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3169  00551E  0E63               	movlw	low _data_correction
  3170  005520  0100               	movlb	0	; () banked
  3171  005522  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3172  005524  0E01               	movlw	high _data_correction
  3173  005526  0100               	movlb	0	; () banked
  3174  005528  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3175  00552A  0E08               	movlw	8
  3176  00552C  0100               	movlb	0	; () banked
  3177  00552E  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3178  005530  0EBC               	movlw	188
  3179  005532  0100               	movlb	0	; () banked
  3180  005534  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3181  005536  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3182  00553A  0012               	return	
  3183  00553C  0012               	return		;funcret
  3184  00553E                     __end_of_can_send:
  3185                           	opt stack 0
  3186                           tblptru	equ	0xFF8
  3187                           tblptrh	equ	0xFF7
  3188                           tblptrl	equ	0xFF6
  3189                           tablat	equ	0xFF5
  3190                           postinc0	equ	0xFEE
  3191                           wreg	equ	0xFE8
  3192                           postdec1	equ	0xFE5
  3193                           fsr1l	equ	0xFE1
  3194                           postinc2	equ	0xFDE
  3195                           postdec2	equ	0xFDD
  3196                           status	equ	0xFD8
  3197                           
  3198 ;; *************** function _CANsendMessage *****************
  3199 ;; Defined at:
  3200 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  identifier      4   23[BANK0 ] unsigned long 
  3203 ;;  data            2   27[BANK0 ] PTR unsigned char 
  3204 ;;		 -> data_speed(8), data_brake(8), data_steering(8), data_correction(8), 
  3205 ;;		 -> data_test(8), data(8), sensor_distance_short(8), 
  3206 ;;  dataLength      1   29[BANK0 ] unsigned char 
  3207 ;;  flags           1   30[BANK0 ] enum E16376
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  tamp            4   35[BANK0 ] unsigned long 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;		None               void
  3212 ;; Registers used:
  3213 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3219 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3220 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3221 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3222 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3223 ;;Total ram usage:       16 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:    5
  3226 ;; This function calls:
  3227 ;;		Nothing
  3228 ;; This function is called by:
  3229 ;;		_main
  3230 ;;		_park_search
  3231 ;;		_park_routine
  3232 ;;		_can_send
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text5
  3237  00187C                     __ptext5:
  3238                           	opt stack 0
  3239  00187C                     _CANsendMessage:
  3240                           	opt stack 22
  3241                           
  3242                           ;inc\CANlib.h: 296: unsigned long tamp;
  3243                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
  3244                           
  3245                           ;incstack = 0
  3246  00187C  010F               	movlb	15	; () banked
  3247  00187E  B740               	btfsc	64,3,b	;volatile
  3248  001880  D142               	goto	l363
  3249                           
  3250                           ; BSR set to: 15
  3251                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
  3252  001882  C07D  FF45         	movff	CANsendMessage@dataLength,3909	;volatile
  3253                           
  3254                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
  3255  001886  0100               	movlb	0	; () banked
  3256  001888  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  3257  00188A  D003               	goto	l364
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
  3261  00188C  010F               	movlb	15	; () banked
  3262  00188E  8D45               	bsf	69,6,b	;volatile
  3263  001890  D002               	goto	l365
  3264  001892                     l364:
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;inc\CANlib.h: 302: else
  3268                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
  3269  001892  010F               	movlb	15	; () banked
  3270  001894  9D45               	bcf	69,6,b	;volatile
  3271  001896                     l365:
  3272                           
  3273                           ; BSR set to: 15
  3274                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
  3275  001896  0100               	movlb	0	; () banked
  3276  001898  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  3277  00189A  D07A               	goto	l366
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;inc\CANlib.h: 306: {
  3281                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
  3282  00189C  0100               	movlb	0	; () banked
  3283  00189E  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  3284  0018A0  0100               	movlb	0	; () banked
  3285  0018A2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3286  0018A4  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3287  0018A6  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3288  0018A8  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
  3292  0018AA  C083  FF44         	movff	CANsendMessage@tamp,3908	;volatile
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
  3296  0018AE  0E00               	movlw	0
  3297  0018B0  0100               	movlb	0	; () banked
  3298  0018B2  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3299  0018B4  0100               	movlb	0	; () banked
  3300  0018B6  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3301  0018B8  0EFF               	movlw	255
  3302  0018BA  0100               	movlb	0	; () banked
  3303  0018BC  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3304  0018BE  0100               	movlb	0	; () banked
  3305  0018C0  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3306  0018C2  0E00               	movlw	0
  3307  0018C4  0100               	movlb	0	; () banked
  3308  0018C6  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3309  0018C8  0100               	movlb	0	; () banked
  3310  0018CA  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3311  0018CC  0E00               	movlw	0
  3312  0018CE  0100               	movlb	0	; () banked
  3313  0018D0  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3314  0018D2  0100               	movlb	0	; () banked
  3315  0018D4  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
  3319  0018D6  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3320  0018DA  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3321  0018DE  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3322  0018E2  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3323  0018E6  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  3324  0018EA  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  3325  0018EE  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  3326  0018F2  0100               	movlb	0	; () banked
  3327  0018F4  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  3328  0018F6  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3329  0018FA  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3330  0018FE  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3331  001902  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
  3335  001906  C083  FF43         	movff	CANsendMessage@tamp,3907	;volatile
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
  3339  00190A  0E00               	movlw	0
  3340  00190C  010F               	movlb	15	; () banked
  3341  00190E  6F42               	movwf	66,b	;volatile
  3342                           
  3343                           ; BSR set to: 15
  3344                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
  3345  001910  010F               	movlb	15	; () banked
  3346  001912  8742               	bsf	66,3,b	;volatile
  3347                           
  3348                           ; BSR set to: 15
  3349                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
  3350  001914  0100               	movlb	0	; () banked
  3351  001916  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  3352  001918  D002               	goto	l367
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
  3356  00191A  010F               	movlb	15	; () banked
  3357  00191C  8142               	bsf	66,0,b	;volatile
  3358  00191E                     l367:
  3359                           
  3360                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
  3361  00191E  0100               	movlb	0	; () banked
  3362  001920  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  3363  001922  D002               	goto	l368
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
  3367  001924  010F               	movlb	15	; () banked
  3368  001926  8342               	bsf	66,1,b	;volatile
  3369  001928                     l368:
  3370                           
  3371                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
  3372  001928  0100               	movlb	0	; () banked
  3373  00192A  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  3374  00192C  D002               	goto	l369
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
  3378  00192E  010F               	movlb	15	; () banked
  3379  001930  8B42               	bsf	66,5,b	;volatile
  3380  001932                     l369:
  3381                           
  3382                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
  3383  001932  0100               	movlb	0	; () banked
  3384  001934  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  3385  001936  D002               	goto	l370
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
  3389  001938  010F               	movlb	15	; () banked
  3390  00193A  8D42               	bsf	66,6,b	;volatile
  3391  00193C                     l370:
  3392                           
  3393                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
  3394  00193C  0100               	movlb	0	; () banked
  3395  00193E  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  3396  001940  D003               	goto	l4135
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
  3400  001942  010F               	movlb	15	; () banked
  3401  001944  8F42               	bsf	66,7,b	;volatile
  3402  001946  D000               	goto	l4135
  3403  001948                     l4135:
  3404                           
  3405                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
  3406  001948  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3407  00194C  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3408  001950  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3409  001954  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3410  001958  0E16               	movlw	22
  3411  00195A  D006               	goto	u4280
  3412  00195C                     u4285:
  3413  00195C  0100               	movlb	0	; () banked
  3414  00195E  90D8               	bcf	status,0,c
  3415  001960  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3416  001962  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3417  001964  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3418  001966  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3419  001968                     u4280:
  3420  001968  2EE8               	decfsz	wreg,f,c
  3421  00196A  D7F8               	goto	u4285
  3422  00196C  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3423  001970  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3424  001974  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3425  001978  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
  3429  00197C  0100               	movlb	0	; () banked
  3430  00197E  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3431  001980  0100               	movlb	0	; () banked
  3432  001982  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3433  001984  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3434  001986  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3435  001988  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
  3439  00198A  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  3440                           
  3441                           ;inc\CANlib.h: 332: }
  3442  00198E  D05A               	goto	l4155
  3443  001990                     l366:
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;inc\CANlib.h: 334: else
  3447                           ;inc\CANlib.h: 336: {
  3448                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
  3449  001990  010F               	movlb	15	; () banked
  3450  001992  9742               	bcf	66,3,b	;volatile
  3451                           
  3452                           ; BSR set to: 15
  3453                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
  3454  001994  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3455  001998  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3456  00199C  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3457  0019A0  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3458  0019A4  0E04               	movlw	4
  3459  0019A6  D006               	goto	u4290
  3460  0019A8                     u4295:
  3461  0019A8  0100               	movlb	0	; () banked
  3462  0019AA  90D8               	bcf	status,0,c
  3463  0019AC  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3464  0019AE  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3465  0019B0  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3466  0019B2  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3467  0019B4                     u4290:
  3468  0019B4  2EE8               	decfsz	wreg,f,c
  3469  0019B6  D7F8               	goto	u4295
  3470  0019B8  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3471  0019BC  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3472  0019C0  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3473  0019C4  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
  3477  0019C8  0100               	movlb	0	; () banked
  3478  0019CA  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3479  0019CC  0100               	movlb	0	; () banked
  3480  0019CE  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3481  0019D0  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3482  0019D2  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3483  0019D4  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
  3487  0019D6  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
  3491  0019DA  0E07               	movlw	7
  3492  0019DC  0100               	movlb	0	; () banked
  3493  0019DE  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3494  0019E0  0100               	movlb	0	; () banked
  3495  0019E2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3496  0019E4  0E00               	movlw	0
  3497  0019E6  0100               	movlb	0	; () banked
  3498  0019E8  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3499  0019EA  0100               	movlb	0	; () banked
  3500  0019EC  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3501  0019EE  0E00               	movlw	0
  3502  0019F0  0100               	movlb	0	; () banked
  3503  0019F2  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3504  0019F4  0100               	movlb	0	; () banked
  3505  0019F6  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3506  0019F8  0E00               	movlw	0
  3507  0019FA  0100               	movlb	0	; () banked
  3508  0019FC  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3509  0019FE  0100               	movlb	0	; () banked
  3510  001A00  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;inc\CANlib.h: 344: tamp = tamp << 5;
  3514  001A02  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3515  001A06  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3516  001A0A  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3517  001A0E  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3518  001A12  0E05               	movlw	5
  3519  001A14                     u4305:
  3520  001A14  90D8               	bcf	status,0,c
  3521  001A16  0100               	movlb	0	; () banked
  3522  001A18  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  3523  001A1A  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  3524  001A1C  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  3525  001A1E  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  3526  001A20  2EE8               	decfsz	wreg,f,c
  3527  001A22  D7F8               	goto	u4305
  3528  001A24  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3529  001A28  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3530  001A2C  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3531  001A30  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
  3535  001A34  010F               	movlb	15	; () banked
  3536  001A36  5142               	movf	66,w,b	;volatile
  3537  001A38  0B1F               	andlw	31
  3538  001A3A  010F               	movlb	15	; () banked
  3539  001A3C  6F42               	movwf	66,b	;volatile
  3540                           
  3541                           ; BSR set to: 15
  3542                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
  3543  001A3E  C083  FF42         	movff	CANsendMessage@tamp,3906	;volatile
  3544  001A42  D000               	goto	l4155
  3545  001A44                     l4155:
  3546                           
  3547                           ;inc\CANlib.h: 347: }
  3548                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
  3549  001A44  0100               	movlb	0	; () banked
  3550  001A46  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  3551  001A48  D003               	goto	l373
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
  3555  001A4A  010F               	movlb	15	; () banked
  3556  001A4C  8140               	bsf	64,0,b	;volatile
  3557  001A4E  D002               	goto	l374
  3558  001A50                     l373:
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;inc\CANlib.h: 351: else
  3562                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
  3563  001A50  010F               	movlb	15	; () banked
  3564  001A52  9140               	bcf	64,0,b	;volatile
  3565  001A54                     l374:
  3566                           
  3567                           ; BSR set to: 15
  3568                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
  3569  001A54  0100               	movlb	0	; () banked
  3570  001A56  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  3571  001A58  D003               	goto	l375
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
  3575  001A5A  010F               	movlb	15	; () banked
  3576  001A5C  8340               	bsf	64,1,b	;volatile
  3577  001A5E  D003               	goto	l4161
  3578  001A60                     l375:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;inc\CANlib.h: 355: else
  3582                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
  3583  001A60  010F               	movlb	15	; () banked
  3584  001A62  9340               	bcf	64,1,b	;volatile
  3585  001A64  D000               	goto	l4161
  3586  001A66                     l4161:
  3587                           
  3588                           ; BSR set to: 15
  3589                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
  3590  001A66  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  3591  001A6A  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  3592  001A6E  50DF               	movf	indf2,w,c
  3593  001A70  010F               	movlb	15	; () banked
  3594  001A72  6F46               	movwf	70,b	;volatile
  3595                           
  3596                           ; BSR set to: 15
  3597                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
  3598  001A74  0100               	movlb	0	; () banked
  3599  001A76  EE20 F001          	lfsr	2,1
  3600  001A7A  517B               	movf	CANsendMessage@data& (0+255),w,b
  3601  001A7C  26D9               	addwf	fsr2l,f,c
  3602  001A7E  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3603  001A80  22DA               	addwfc	fsr2h,f,c
  3604  001A82  50DF               	movf	indf2,w,c
  3605  001A84  010F               	movlb	15	; () banked
  3606  001A86  6F47               	movwf	71,b	;volatile
  3607                           
  3608                           ; BSR set to: 15
  3609                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
  3610  001A88  0100               	movlb	0	; () banked
  3611  001A8A  EE20 F002          	lfsr	2,2
  3612  001A8E  517B               	movf	CANsendMessage@data& (0+255),w,b
  3613  001A90  26D9               	addwf	fsr2l,f,c
  3614  001A92  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3615  001A94  22DA               	addwfc	fsr2h,f,c
  3616  001A96  50DF               	movf	indf2,w,c
  3617  001A98  010F               	movlb	15	; () banked
  3618  001A9A  6F48               	movwf	72,b	;volatile
  3619                           
  3620                           ; BSR set to: 15
  3621                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
  3622  001A9C  0100               	movlb	0	; () banked
  3623  001A9E  EE20 F003          	lfsr	2,3
  3624  001AA2  517B               	movf	CANsendMessage@data& (0+255),w,b
  3625  001AA4  26D9               	addwf	fsr2l,f,c
  3626  001AA6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3627  001AA8  22DA               	addwfc	fsr2h,f,c
  3628  001AAA  50DF               	movf	indf2,w,c
  3629  001AAC  010F               	movlb	15	; () banked
  3630  001AAE  6F49               	movwf	73,b	;volatile
  3631                           
  3632                           ; BSR set to: 15
  3633                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
  3634  001AB0  0100               	movlb	0	; () banked
  3635  001AB2  EE20 F004          	lfsr	2,4
  3636  001AB6  517B               	movf	CANsendMessage@data& (0+255),w,b
  3637  001AB8  26D9               	addwf	fsr2l,f,c
  3638  001ABA  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3639  001ABC  22DA               	addwfc	fsr2h,f,c
  3640  001ABE  50DF               	movf	indf2,w,c
  3641  001AC0  010F               	movlb	15	; () banked
  3642  001AC2  6F4A               	movwf	74,b	;volatile
  3643                           
  3644                           ; BSR set to: 15
  3645                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
  3646  001AC4  0100               	movlb	0	; () banked
  3647  001AC6  EE20 F005          	lfsr	2,5
  3648  001ACA  517B               	movf	CANsendMessage@data& (0+255),w,b
  3649  001ACC  26D9               	addwf	fsr2l,f,c
  3650  001ACE  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3651  001AD0  22DA               	addwfc	fsr2h,f,c
  3652  001AD2  50DF               	movf	indf2,w,c
  3653  001AD4  010F               	movlb	15	; () banked
  3654  001AD6  6F4B               	movwf	75,b	;volatile
  3655                           
  3656                           ; BSR set to: 15
  3657                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
  3658  001AD8  0100               	movlb	0	; () banked
  3659  001ADA  EE20 F006          	lfsr	2,6
  3660  001ADE  517B               	movf	CANsendMessage@data& (0+255),w,b
  3661  001AE0  26D9               	addwf	fsr2l,f,c
  3662  001AE2  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3663  001AE4  22DA               	addwfc	fsr2h,f,c
  3664  001AE6  50DF               	movf	indf2,w,c
  3665  001AE8  010F               	movlb	15	; () banked
  3666  001AEA  6F4C               	movwf	76,b	;volatile
  3667                           
  3668                           ; BSR set to: 15
  3669                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
  3670  001AEC  0100               	movlb	0	; () banked
  3671  001AEE  EE20 F007          	lfsr	2,7
  3672  001AF2  517B               	movf	CANsendMessage@data& (0+255),w,b
  3673  001AF4  26D9               	addwf	fsr2l,f,c
  3674  001AF6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3675  001AF8  22DA               	addwfc	fsr2h,f,c
  3676  001AFA  50DF               	movf	indf2,w,c
  3677  001AFC  010F               	movlb	15	; () banked
  3678  001AFE  6F4D               	movwf	77,b	;volatile
  3679                           
  3680                           ; BSR set to: 15
  3681                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
  3682  001B00  010F               	movlb	15	; () banked
  3683  001B02  8740               	bsf	64,3,b	;volatile
  3684                           
  3685                           ; BSR set to: 15
  3686                           ;inc\CANlib.h: 368: return;
  3687  001B04  0012               	return	
  3688  001B06                     l363:
  3689                           
  3690                           ; BSR set to: 15
  3691                           ;inc\CANlib.h: 369: }
  3692                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
  3693  001B06  010F               	movlb	15	; () banked
  3694  001B08  B730               	btfsc	48,3,b	;volatile
  3695  001B0A  D142               	goto	l378
  3696                           
  3697                           ; BSR set to: 15
  3698                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
  3699  001B0C  C07D  FF35         	movff	CANsendMessage@dataLength,3893	;volatile
  3700                           
  3701                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
  3702  001B10  0100               	movlb	0	; () banked
  3703  001B12  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  3704  001B14  D003               	goto	l379
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
  3708  001B16  010F               	movlb	15	; () banked
  3709  001B18  8D35               	bsf	53,6,b	;volatile
  3710  001B1A  D002               	goto	l380
  3711  001B1C                     l379:
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;inc\CANlib.h: 378: else
  3715                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
  3716  001B1C  010F               	movlb	15	; () banked
  3717  001B1E  9D35               	bcf	53,6,b	;volatile
  3718  001B20                     l380:
  3719                           
  3720                           ; BSR set to: 15
  3721                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
  3722  001B20  0100               	movlb	0	; () banked
  3723  001B22  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  3724  001B24  D07A               	goto	l381
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;inc\CANlib.h: 382: {
  3728                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
  3729  001B26  0100               	movlb	0	; () banked
  3730  001B28  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  3731  001B2A  0100               	movlb	0	; () banked
  3732  001B2C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3733  001B2E  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3734  001B30  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3735  001B32  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
  3739  001B34  C083  FF34         	movff	CANsendMessage@tamp,3892	;volatile
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
  3743  001B38  0E00               	movlw	0
  3744  001B3A  0100               	movlb	0	; () banked
  3745  001B3C  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3746  001B3E  0100               	movlb	0	; () banked
  3747  001B40  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3748  001B42  0EFF               	movlw	255
  3749  001B44  0100               	movlb	0	; () banked
  3750  001B46  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3751  001B48  0100               	movlb	0	; () banked
  3752  001B4A  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3753  001B4C  0E00               	movlw	0
  3754  001B4E  0100               	movlb	0	; () banked
  3755  001B50  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3756  001B52  0100               	movlb	0	; () banked
  3757  001B54  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3758  001B56  0E00               	movlw	0
  3759  001B58  0100               	movlb	0	; () banked
  3760  001B5A  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3761  001B5C  0100               	movlb	0	; () banked
  3762  001B5E  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
  3766  001B60  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3767  001B64  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3768  001B68  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3769  001B6C  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3770  001B70  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  3771  001B74  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  3772  001B78  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  3773  001B7C  0100               	movlb	0	; () banked
  3774  001B7E  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  3775  001B80  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3776  001B84  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3777  001B88  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3778  001B8C  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
  3782  001B90  C083  FF33         	movff	CANsendMessage@tamp,3891	;volatile
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
  3786  001B94  0E00               	movlw	0
  3787  001B96  010F               	movlb	15	; () banked
  3788  001B98  6F32               	movwf	50,b	;volatile
  3789                           
  3790                           ; BSR set to: 15
  3791                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
  3792  001B9A  010F               	movlb	15	; () banked
  3793  001B9C  8732               	bsf	50,3,b	;volatile
  3794                           
  3795                           ; BSR set to: 15
  3796                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
  3797  001B9E  0100               	movlb	0	; () banked
  3798  001BA0  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  3799  001BA2  D002               	goto	l382
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
  3803  001BA4  010F               	movlb	15	; () banked
  3804  001BA6  8132               	bsf	50,0,b	;volatile
  3805  001BA8                     l382:
  3806                           
  3807                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
  3808  001BA8  0100               	movlb	0	; () banked
  3809  001BAA  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  3810  001BAC  D002               	goto	l383
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
  3814  001BAE  010F               	movlb	15	; () banked
  3815  001BB0  8332               	bsf	50,1,b	;volatile
  3816  001BB2                     l383:
  3817                           
  3818                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
  3819  001BB2  0100               	movlb	0	; () banked
  3820  001BB4  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  3821  001BB6  D002               	goto	l384
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
  3825  001BB8  010F               	movlb	15	; () banked
  3826  001BBA  8B32               	bsf	50,5,b	;volatile
  3827  001BBC                     l384:
  3828                           
  3829                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
  3830  001BBC  0100               	movlb	0	; () banked
  3831  001BBE  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  3832  001BC0  D002               	goto	l385
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
  3836  001BC2  010F               	movlb	15	; () banked
  3837  001BC4  8D32               	bsf	50,6,b	;volatile
  3838  001BC6                     l385:
  3839                           
  3840                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
  3841  001BC6  0100               	movlb	0	; () banked
  3842  001BC8  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  3843  001BCA  D003               	goto	l4211
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
  3847  001BCC  010F               	movlb	15	; () banked
  3848  001BCE  8F32               	bsf	50,7,b	;volatile
  3849  001BD0  D000               	goto	l4211
  3850  001BD2                     l4211:
  3851                           
  3852                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
  3853  001BD2  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3854  001BD6  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3855  001BDA  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3856  001BDE  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3857  001BE2  0E16               	movlw	22
  3858  001BE4  D006               	goto	u4410
  3859  001BE6                     u4415:
  3860  001BE6  0100               	movlb	0	; () banked
  3861  001BE8  90D8               	bcf	status,0,c
  3862  001BEA  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3863  001BEC  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3864  001BEE  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3865  001BF0  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3866  001BF2                     u4410:
  3867  001BF2  2EE8               	decfsz	wreg,f,c
  3868  001BF4  D7F8               	goto	u4415
  3869  001BF6  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3870  001BFA  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3871  001BFE  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3872  001C02  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
  3876  001C06  0100               	movlb	0	; () banked
  3877  001C08  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3878  001C0A  0100               	movlb	0	; () banked
  3879  001C0C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3880  001C0E  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3881  001C10  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3882  001C12  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
  3886  001C14  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  3887                           
  3888                           ;inc\CANlib.h: 407: }
  3889  001C18  D05A               	goto	l4231
  3890  001C1A                     l381:
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;inc\CANlib.h: 409: else
  3894                           ;inc\CANlib.h: 411: {
  3895                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
  3896  001C1A  010F               	movlb	15	; () banked
  3897  001C1C  9732               	bcf	50,3,b	;volatile
  3898                           
  3899                           ; BSR set to: 15
  3900                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
  3901  001C1E  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3902  001C22  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3903  001C26  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3904  001C2A  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3905  001C2E  0E04               	movlw	4
  3906  001C30  D006               	goto	u4420
  3907  001C32                     u4425:
  3908  001C32  0100               	movlb	0	; () banked
  3909  001C34  90D8               	bcf	status,0,c
  3910  001C36  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3911  001C38  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3912  001C3A  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3913  001C3C  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3914  001C3E                     u4420:
  3915  001C3E  2EE8               	decfsz	wreg,f,c
  3916  001C40  D7F8               	goto	u4425
  3917  001C42  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3918  001C46  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3919  001C4A  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3920  001C4E  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
  3924  001C52  0100               	movlb	0	; () banked
  3925  001C54  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3926  001C56  0100               	movlb	0	; () banked
  3927  001C58  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3928  001C5A  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3929  001C5C  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3930  001C5E  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
  3934  001C60  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
  3938  001C64  0E07               	movlw	7
  3939  001C66  0100               	movlb	0	; () banked
  3940  001C68  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3941  001C6A  0100               	movlb	0	; () banked
  3942  001C6C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3943  001C6E  0E00               	movlw	0
  3944  001C70  0100               	movlb	0	; () banked
  3945  001C72  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3946  001C74  0100               	movlb	0	; () banked
  3947  001C76  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3948  001C78  0E00               	movlw	0
  3949  001C7A  0100               	movlb	0	; () banked
  3950  001C7C  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3951  001C7E  0100               	movlb	0	; () banked
  3952  001C80  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3953  001C82  0E00               	movlw	0
  3954  001C84  0100               	movlb	0	; () banked
  3955  001C86  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3956  001C88  0100               	movlb	0	; () banked
  3957  001C8A  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;inc\CANlib.h: 419: tamp = tamp << 5;
  3961  001C8C  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3962  001C90  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3963  001C94  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3964  001C98  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3965  001C9C  0E05               	movlw	5
  3966  001C9E                     u4435:
  3967  001C9E  90D8               	bcf	status,0,c
  3968  001CA0  0100               	movlb	0	; () banked
  3969  001CA2  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  3970  001CA4  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  3971  001CA6  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  3972  001CA8  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  3973  001CAA  2EE8               	decfsz	wreg,f,c
  3974  001CAC  D7F8               	goto	u4435
  3975  001CAE  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3976  001CB2  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3977  001CB6  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3978  001CBA  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
  3982  001CBE  010F               	movlb	15	; () banked
  3983  001CC0  5132               	movf	50,w,b	;volatile
  3984  001CC2  0B1F               	andlw	31
  3985  001CC4  010F               	movlb	15	; () banked
  3986  001CC6  6F32               	movwf	50,b	;volatile
  3987                           
  3988                           ; BSR set to: 15
  3989                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
  3990  001CC8  C083  FF32         	movff	CANsendMessage@tamp,3890	;volatile
  3991  001CCC  D000               	goto	l4231
  3992  001CCE                     l4231:
  3993                           
  3994                           ;inc\CANlib.h: 422: }
  3995                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
  3996  001CCE  0100               	movlb	0	; () banked
  3997  001CD0  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  3998  001CD2  D003               	goto	l388
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
  4002  001CD4  010F               	movlb	15	; () banked
  4003  001CD6  8130               	bsf	48,0,b	;volatile
  4004  001CD8  D002               	goto	l389
  4005  001CDA                     l388:
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;inc\CANlib.h: 426: else
  4009                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
  4010  001CDA  010F               	movlb	15	; () banked
  4011  001CDC  9130               	bcf	48,0,b	;volatile
  4012  001CDE                     l389:
  4013                           
  4014                           ; BSR set to: 15
  4015                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
  4016  001CDE  0100               	movlb	0	; () banked
  4017  001CE0  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  4018  001CE2  D003               	goto	l390
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
  4022  001CE4  010F               	movlb	15	; () banked
  4023  001CE6  8330               	bsf	48,1,b	;volatile
  4024  001CE8  D003               	goto	l4237
  4025  001CEA                     l390:
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;inc\CANlib.h: 430: else
  4029                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
  4030  001CEA  010F               	movlb	15	; () banked
  4031  001CEC  9330               	bcf	48,1,b	;volatile
  4032  001CEE  D000               	goto	l4237
  4033  001CF0                     l4237:
  4034                           
  4035                           ; BSR set to: 15
  4036                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
  4037  001CF0  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  4038  001CF4  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  4039  001CF8  50DF               	movf	indf2,w,c
  4040  001CFA  010F               	movlb	15	; () banked
  4041  001CFC  6F36               	movwf	54,b	;volatile
  4042                           
  4043                           ; BSR set to: 15
  4044                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
  4045  001CFE  0100               	movlb	0	; () banked
  4046  001D00  EE20 F001          	lfsr	2,1
  4047  001D04  517B               	movf	CANsendMessage@data& (0+255),w,b
  4048  001D06  26D9               	addwf	fsr2l,f,c
  4049  001D08  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4050  001D0A  22DA               	addwfc	fsr2h,f,c
  4051  001D0C  50DF               	movf	indf2,w,c
  4052  001D0E  010F               	movlb	15	; () banked
  4053  001D10  6F37               	movwf	55,b	;volatile
  4054                           
  4055                           ; BSR set to: 15
  4056                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
  4057  001D12  0100               	movlb	0	; () banked
  4058  001D14  EE20 F002          	lfsr	2,2
  4059  001D18  517B               	movf	CANsendMessage@data& (0+255),w,b
  4060  001D1A  26D9               	addwf	fsr2l,f,c
  4061  001D1C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4062  001D1E  22DA               	addwfc	fsr2h,f,c
  4063  001D20  50DF               	movf	indf2,w,c
  4064  001D22  010F               	movlb	15	; () banked
  4065  001D24  6F38               	movwf	56,b	;volatile
  4066                           
  4067                           ; BSR set to: 15
  4068                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
  4069  001D26  0100               	movlb	0	; () banked
  4070  001D28  EE20 F003          	lfsr	2,3
  4071  001D2C  517B               	movf	CANsendMessage@data& (0+255),w,b
  4072  001D2E  26D9               	addwf	fsr2l,f,c
  4073  001D30  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4074  001D32  22DA               	addwfc	fsr2h,f,c
  4075  001D34  50DF               	movf	indf2,w,c
  4076  001D36  010F               	movlb	15	; () banked
  4077  001D38  6F39               	movwf	57,b	;volatile
  4078                           
  4079                           ; BSR set to: 15
  4080                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
  4081  001D3A  0100               	movlb	0	; () banked
  4082  001D3C  EE20 F004          	lfsr	2,4
  4083  001D40  517B               	movf	CANsendMessage@data& (0+255),w,b
  4084  001D42  26D9               	addwf	fsr2l,f,c
  4085  001D44  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4086  001D46  22DA               	addwfc	fsr2h,f,c
  4087  001D48  50DF               	movf	indf2,w,c
  4088  001D4A  010F               	movlb	15	; () banked
  4089  001D4C  6F3A               	movwf	58,b	;volatile
  4090                           
  4091                           ; BSR set to: 15
  4092                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
  4093  001D4E  0100               	movlb	0	; () banked
  4094  001D50  EE20 F005          	lfsr	2,5
  4095  001D54  517B               	movf	CANsendMessage@data& (0+255),w,b
  4096  001D56  26D9               	addwf	fsr2l,f,c
  4097  001D58  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4098  001D5A  22DA               	addwfc	fsr2h,f,c
  4099  001D5C  50DF               	movf	indf2,w,c
  4100  001D5E  010F               	movlb	15	; () banked
  4101  001D60  6F3B               	movwf	59,b	;volatile
  4102                           
  4103                           ; BSR set to: 15
  4104                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
  4105  001D62  0100               	movlb	0	; () banked
  4106  001D64  EE20 F006          	lfsr	2,6
  4107  001D68  517B               	movf	CANsendMessage@data& (0+255),w,b
  4108  001D6A  26D9               	addwf	fsr2l,f,c
  4109  001D6C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4110  001D6E  22DA               	addwfc	fsr2h,f,c
  4111  001D70  50DF               	movf	indf2,w,c
  4112  001D72  010F               	movlb	15	; () banked
  4113  001D74  6F3C               	movwf	60,b	;volatile
  4114                           
  4115                           ; BSR set to: 15
  4116                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
  4117  001D76  0100               	movlb	0	; () banked
  4118  001D78  EE20 F007          	lfsr	2,7
  4119  001D7C  517B               	movf	CANsendMessage@data& (0+255),w,b
  4120  001D7E  26D9               	addwf	fsr2l,f,c
  4121  001D80  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4122  001D82  22DA               	addwfc	fsr2h,f,c
  4123  001D84  50DF               	movf	indf2,w,c
  4124  001D86  010F               	movlb	15	; () banked
  4125  001D88  6F3D               	movwf	61,b	;volatile
  4126                           
  4127                           ; BSR set to: 15
  4128                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
  4129  001D8A  010F               	movlb	15	; () banked
  4130  001D8C  8730               	bsf	48,3,b	;volatile
  4131                           
  4132                           ; BSR set to: 15
  4133                           ;inc\CANlib.h: 444: return;
  4134  001D8E  0012               	return	
  4135  001D90                     l378:
  4136                           
  4137                           ; BSR set to: 15
  4138                           ;inc\CANlib.h: 445: }
  4139                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
  4140  001D90  010F               	movlb	15	; () banked
  4141  001D92  B720               	btfsc	32,3,b	;volatile
  4142  001D94  0012               	return	
  4143                           
  4144                           ; BSR set to: 15
  4145                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
  4146  001D96  C07D  FF25         	movff	CANsendMessage@dataLength,3877	;volatile
  4147                           
  4148                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
  4149  001D9A  0100               	movlb	0	; () banked
  4150  001D9C  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  4151  001D9E  D003               	goto	l393
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
  4155  001DA0  010F               	movlb	15	; () banked
  4156  001DA2  8D25               	bsf	37,6,b	;volatile
  4157  001DA4  D002               	goto	l394
  4158  001DA6                     l393:
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;inc\CANlib.h: 454: else
  4162                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
  4163  001DA6  010F               	movlb	15	; () banked
  4164  001DA8  9D25               	bcf	37,6,b	;volatile
  4165  001DAA                     l394:
  4166                           
  4167                           ; BSR set to: 15
  4168                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
  4169  001DAA  0100               	movlb	0	; () banked
  4170  001DAC  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  4171  001DAE  D07A               	goto	l395
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;inc\CANlib.h: 458: {
  4175                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
  4176  001DB0  0100               	movlb	0	; () banked
  4177  001DB2  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  4178  001DB4  0100               	movlb	0	; () banked
  4179  001DB6  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4180  001DB8  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4181  001DBA  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4182  001DBC  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
  4186  001DBE  C083  FF24         	movff	CANsendMessage@tamp,3876	;volatile
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
  4190  001DC2  0E00               	movlw	0
  4191  001DC4  0100               	movlb	0	; () banked
  4192  001DC6  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4193  001DC8  0100               	movlb	0	; () banked
  4194  001DCA  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4195  001DCC  0EFF               	movlw	255
  4196  001DCE  0100               	movlb	0	; () banked
  4197  001DD0  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4198  001DD2  0100               	movlb	0	; () banked
  4199  001DD4  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4200  001DD6  0E00               	movlw	0
  4201  001DD8  0100               	movlb	0	; () banked
  4202  001DDA  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4203  001DDC  0100               	movlb	0	; () banked
  4204  001DDE  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4205  001DE0  0E00               	movlw	0
  4206  001DE2  0100               	movlb	0	; () banked
  4207  001DE4  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4208  001DE6  0100               	movlb	0	; () banked
  4209  001DE8  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
  4213  001DEA  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4214  001DEE  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4215  001DF2  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4216  001DF6  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4217  001DFA  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  4218  001DFE  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  4219  001E02  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  4220  001E06  0100               	movlb	0	; () banked
  4221  001E08  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  4222  001E0A  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4223  001E0E  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4224  001E12  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4225  001E16  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
  4229  001E1A  C083  FF23         	movff	CANsendMessage@tamp,3875	;volatile
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
  4233  001E1E  0E00               	movlw	0
  4234  001E20  010F               	movlb	15	; () banked
  4235  001E22  6F22               	movwf	34,b	;volatile
  4236                           
  4237                           ; BSR set to: 15
  4238                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
  4239  001E24  010F               	movlb	15	; () banked
  4240  001E26  8722               	bsf	34,3,b	;volatile
  4241                           
  4242                           ; BSR set to: 15
  4243                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
  4244  001E28  0100               	movlb	0	; () banked
  4245  001E2A  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  4246  001E2C  D002               	goto	l396
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
  4250  001E2E  010F               	movlb	15	; () banked
  4251  001E30  8122               	bsf	34,0,b	;volatile
  4252  001E32                     l396:
  4253                           
  4254                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
  4255  001E32  0100               	movlb	0	; () banked
  4256  001E34  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  4257  001E36  D002               	goto	l397
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
  4261  001E38  010F               	movlb	15	; () banked
  4262  001E3A  8322               	bsf	34,1,b	;volatile
  4263  001E3C                     l397:
  4264                           
  4265                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
  4266  001E3C  0100               	movlb	0	; () banked
  4267  001E3E  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  4268  001E40  D002               	goto	l398
  4269                           
  4270                           ; BSR set to: 0
  4271                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
  4272  001E42  010F               	movlb	15	; () banked
  4273  001E44  8B22               	bsf	34,5,b	;volatile
  4274  001E46                     l398:
  4275                           
  4276                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
  4277  001E46  0100               	movlb	0	; () banked
  4278  001E48  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  4279  001E4A  D002               	goto	l399
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
  4283  001E4C  010F               	movlb	15	; () banked
  4284  001E4E  8D22               	bsf	34,6,b	;volatile
  4285  001E50                     l399:
  4286                           
  4287                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
  4288  001E50  0100               	movlb	0	; () banked
  4289  001E52  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  4290  001E54  D003               	goto	l4287
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
  4294  001E56  010F               	movlb	15	; () banked
  4295  001E58  8F22               	bsf	34,7,b	;volatile
  4296  001E5A  D000               	goto	l4287
  4297  001E5C                     l4287:
  4298                           
  4299                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
  4300  001E5C  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4301  001E60  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4302  001E64  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4303  001E68  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4304  001E6C  0E16               	movlw	22
  4305  001E6E  D006               	goto	u4540
  4306  001E70                     u4545:
  4307  001E70  0100               	movlb	0	; () banked
  4308  001E72  90D8               	bcf	status,0,c
  4309  001E74  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4310  001E76  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4311  001E78  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4312  001E7A  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4313  001E7C                     u4540:
  4314  001E7C  2EE8               	decfsz	wreg,f,c
  4315  001E7E  D7F8               	goto	u4545
  4316  001E80  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4317  001E84  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4318  001E88  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4319  001E8C  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4320                           
  4321                           ; BSR set to: 0
  4322                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
  4323  001E90  0100               	movlb	0	; () banked
  4324  001E92  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4325  001E94  0100               	movlb	0	; () banked
  4326  001E96  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4327  001E98  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4328  001E9A  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4329  001E9C  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
  4333  001E9E  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  4334                           
  4335                           ;inc\CANlib.h: 483: }
  4336  001EA2  D05A               	goto	l4307
  4337  001EA4                     l395:
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;inc\CANlib.h: 485: else
  4341                           ;inc\CANlib.h: 487: {
  4342                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
  4343  001EA4  010F               	movlb	15	; () banked
  4344  001EA6  9722               	bcf	34,3,b	;volatile
  4345                           
  4346                           ; BSR set to: 15
  4347                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
  4348  001EA8  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4349  001EAC  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4350  001EB0  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4351  001EB4  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4352  001EB8  0E04               	movlw	4
  4353  001EBA  D006               	goto	u4550
  4354  001EBC                     u4555:
  4355  001EBC  0100               	movlb	0	; () banked
  4356  001EBE  90D8               	bcf	status,0,c
  4357  001EC0  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4358  001EC2  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4359  001EC4  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4360  001EC6  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4361  001EC8                     u4550:
  4362  001EC8  2EE8               	decfsz	wreg,f,c
  4363  001ECA  D7F8               	goto	u4555
  4364  001ECC  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4365  001ED0  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4366  001ED4  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4367  001ED8  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
  4371  001EDC  0100               	movlb	0	; () banked
  4372  001EDE  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4373  001EE0  0100               	movlb	0	; () banked
  4374  001EE2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4375  001EE4  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4376  001EE6  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4377  001EE8  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
  4381  001EEA  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
  4385  001EEE  0E07               	movlw	7
  4386  001EF0  0100               	movlb	0	; () banked
  4387  001EF2  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4388  001EF4  0100               	movlb	0	; () banked
  4389  001EF6  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4390  001EF8  0E00               	movlw	0
  4391  001EFA  0100               	movlb	0	; () banked
  4392  001EFC  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4393  001EFE  0100               	movlb	0	; () banked
  4394  001F00  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4395  001F02  0E00               	movlw	0
  4396  001F04  0100               	movlb	0	; () banked
  4397  001F06  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4398  001F08  0100               	movlb	0	; () banked
  4399  001F0A  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4400  001F0C  0E00               	movlw	0
  4401  001F0E  0100               	movlb	0	; () banked
  4402  001F10  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4403  001F12  0100               	movlb	0	; () banked
  4404  001F14  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;inc\CANlib.h: 495: tamp = tamp << 5;
  4408  001F16  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4409  001F1A  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4410  001F1E  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4411  001F22  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4412  001F26  0E05               	movlw	5
  4413  001F28                     u4565:
  4414  001F28  90D8               	bcf	status,0,c
  4415  001F2A  0100               	movlb	0	; () banked
  4416  001F2C  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  4417  001F2E  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  4418  001F30  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  4419  001F32  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  4420  001F34  2EE8               	decfsz	wreg,f,c
  4421  001F36  D7F8               	goto	u4565
  4422  001F38  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4423  001F3C  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4424  001F40  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4425  001F44  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
  4429  001F48  010F               	movlb	15	; () banked
  4430  001F4A  5122               	movf	34,w,b	;volatile
  4431  001F4C  0B1F               	andlw	31
  4432  001F4E  010F               	movlb	15	; () banked
  4433  001F50  6F22               	movwf	34,b	;volatile
  4434                           
  4435                           ; BSR set to: 15
  4436                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
  4437  001F52  C083  FF22         	movff	CANsendMessage@tamp,3874	;volatile
  4438  001F56  D000               	goto	l4307
  4439  001F58                     l4307:
  4440                           
  4441                           ;inc\CANlib.h: 498: }
  4442                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
  4443  001F58  0100               	movlb	0	; () banked
  4444  001F5A  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  4445  001F5C  D003               	goto	l402
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
  4449  001F5E  010F               	movlb	15	; () banked
  4450  001F60  8120               	bsf	32,0,b	;volatile
  4451  001F62  D002               	goto	l403
  4452  001F64                     l402:
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;inc\CANlib.h: 502: else
  4456                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
  4457  001F64  010F               	movlb	15	; () banked
  4458  001F66  9120               	bcf	32,0,b	;volatile
  4459  001F68                     l403:
  4460                           
  4461                           ; BSR set to: 15
  4462                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
  4463  001F68  0100               	movlb	0	; () banked
  4464  001F6A  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  4465  001F6C  D003               	goto	l404
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
  4469  001F6E  010F               	movlb	15	; () banked
  4470  001F70  8320               	bsf	32,1,b	;volatile
  4471  001F72  D003               	goto	l4313
  4472  001F74                     l404:
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;inc\CANlib.h: 506: else
  4476                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
  4477  001F74  010F               	movlb	15	; () banked
  4478  001F76  9320               	bcf	32,1,b	;volatile
  4479  001F78  D000               	goto	l4313
  4480  001F7A                     l4313:
  4481                           
  4482                           ; BSR set to: 15
  4483                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
  4484  001F7A  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  4485  001F7E  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  4486  001F82  50DF               	movf	indf2,w,c
  4487  001F84  010F               	movlb	15	; () banked
  4488  001F86  6F26               	movwf	38,b	;volatile
  4489                           
  4490                           ; BSR set to: 15
  4491                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
  4492  001F88  0100               	movlb	0	; () banked
  4493  001F8A  EE20 F001          	lfsr	2,1
  4494  001F8E  517B               	movf	CANsendMessage@data& (0+255),w,b
  4495  001F90  26D9               	addwf	fsr2l,f,c
  4496  001F92  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4497  001F94  22DA               	addwfc	fsr2h,f,c
  4498  001F96  50DF               	movf	indf2,w,c
  4499  001F98  010F               	movlb	15	; () banked
  4500  001F9A  6F27               	movwf	39,b	;volatile
  4501                           
  4502                           ; BSR set to: 15
  4503                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
  4504  001F9C  0100               	movlb	0	; () banked
  4505  001F9E  EE20 F002          	lfsr	2,2
  4506  001FA2  517B               	movf	CANsendMessage@data& (0+255),w,b
  4507  001FA4  26D9               	addwf	fsr2l,f,c
  4508  001FA6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4509  001FA8  22DA               	addwfc	fsr2h,f,c
  4510  001FAA  50DF               	movf	indf2,w,c
  4511  001FAC  010F               	movlb	15	; () banked
  4512  001FAE  6F28               	movwf	40,b	;volatile
  4513                           
  4514                           ; BSR set to: 15
  4515                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
  4516  001FB0  0100               	movlb	0	; () banked
  4517  001FB2  EE20 F003          	lfsr	2,3
  4518  001FB6  517B               	movf	CANsendMessage@data& (0+255),w,b
  4519  001FB8  26D9               	addwf	fsr2l,f,c
  4520  001FBA  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4521  001FBC  22DA               	addwfc	fsr2h,f,c
  4522  001FBE  50DF               	movf	indf2,w,c
  4523  001FC0  010F               	movlb	15	; () banked
  4524  001FC2  6F29               	movwf	41,b	;volatile
  4525                           
  4526                           ; BSR set to: 15
  4527                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
  4528  001FC4  0100               	movlb	0	; () banked
  4529  001FC6  EE20 F004          	lfsr	2,4
  4530  001FCA  517B               	movf	CANsendMessage@data& (0+255),w,b
  4531  001FCC  26D9               	addwf	fsr2l,f,c
  4532  001FCE  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4533  001FD0  22DA               	addwfc	fsr2h,f,c
  4534  001FD2  50DF               	movf	indf2,w,c
  4535  001FD4  010F               	movlb	15	; () banked
  4536  001FD6  6F2A               	movwf	42,b	;volatile
  4537                           
  4538                           ; BSR set to: 15
  4539                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
  4540  001FD8  0100               	movlb	0	; () banked
  4541  001FDA  EE20 F005          	lfsr	2,5
  4542  001FDE  517B               	movf	CANsendMessage@data& (0+255),w,b
  4543  001FE0  26D9               	addwf	fsr2l,f,c
  4544  001FE2  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4545  001FE4  22DA               	addwfc	fsr2h,f,c
  4546  001FE6  50DF               	movf	indf2,w,c
  4547  001FE8  010F               	movlb	15	; () banked
  4548  001FEA  6F2B               	movwf	43,b	;volatile
  4549                           
  4550                           ; BSR set to: 15
  4551                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
  4552  001FEC  0100               	movlb	0	; () banked
  4553  001FEE  EE20 F006          	lfsr	2,6
  4554  001FF2  517B               	movf	CANsendMessage@data& (0+255),w,b
  4555  001FF4  26D9               	addwf	fsr2l,f,c
  4556  001FF6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4557  001FF8  22DA               	addwfc	fsr2h,f,c
  4558  001FFA  50DF               	movf	indf2,w,c
  4559  001FFC  010F               	movlb	15	; () banked
  4560  001FFE  6F2C               	movwf	44,b	;volatile
  4561                           
  4562                           ; BSR set to: 15
  4563                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
  4564  002000  0100               	movlb	0	; () banked
  4565  002002  EE20 F007          	lfsr	2,7
  4566  002006  517B               	movf	CANsendMessage@data& (0+255),w,b
  4567  002008  26D9               	addwf	fsr2l,f,c
  4568  00200A  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4569  00200C  22DA               	addwfc	fsr2h,f,c
  4570  00200E  50DF               	movf	indf2,w,c
  4571  002010  010F               	movlb	15	; () banked
  4572  002012  6F2D               	movwf	45,b	;volatile
  4573                           
  4574                           ; BSR set to: 15
  4575                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
  4576  002014  010F               	movlb	15	; () banked
  4577  002016  8720               	bsf	32,3,b	;volatile
  4578                           
  4579                           ; BSR set to: 15
  4580                           ;inc\CANlib.h: 520: return;
  4581  002018  0012               	return	
  4582                           
  4583                           ; BSR set to: 15
  4584                           
  4585                           ; BSR set to: 15
  4586  00201A  0012               	return		;funcret
  4587  00201C                     __end_of_CANsendMessage:
  4588                           	opt stack 0
  4589                           tblptru	equ	0xFF8
  4590                           tblptrh	equ	0xFF7
  4591                           tblptrl	equ	0xFF6
  4592                           tablat	equ	0xFF5
  4593                           postinc0	equ	0xFEE
  4594                           wreg	equ	0xFE8
  4595                           postdec1	equ	0xFE5
  4596                           fsr1l	equ	0xFE1
  4597                           indf2	equ	0xFDF
  4598                           postinc2	equ	0xFDE
  4599                           postdec2	equ	0xFDD
  4600                           fsr2h	equ	0xFDA
  4601                           fsr2l	equ	0xFD9
  4602                           status	equ	0xFD8
  4603                           
  4604 ;; *************** function _CANisTxReady *****************
  4605 ;; Defined at:
  4606 ;;		line 1154 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;		None
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;		None
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  1    wreg      unsigned char 
  4613 ;; Registers used:
  4614 ;;		wreg, status,2
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4621 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4623 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4624 ;;Total ram usage:        1 bytes
  4625 ;; Hardware stack levels used:    1
  4626 ;; Hardware stack levels required when called:    5
  4627 ;; This function calls:
  4628 ;;		Nothing
  4629 ;; This function is called by:
  4630 ;;		_main
  4631 ;;		_park_search
  4632 ;;		_park_routine
  4633 ;;		_can_send
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           	psect	text6
  4638  005DD0                     __ptext6:
  4639                           	opt stack 0
  4640  005DD0                     _CANisTxReady:
  4641                           	opt stack 22
  4642                           
  4643                           ;inc\CANlib.h: 1156: return (!TXB0CONbits.TXREQ || !TXB1CONbits.TXREQ || !TXB2CONbits.TX
      +                          REQ);
  4644                           
  4645                           ; BSR set to: 15
  4646                           ;incstack = 0
  4647  005DD0  0E01               	movlw	1
  4648  005DD2  0100               	movlb	0	; () banked
  4649  005DD4  6F77               	movwf	_CANisTxReady$2845& (0+255),b
  4650                           
  4651                           ; BSR set to: 0
  4652  005DD6  010F               	movlb	15	; () banked
  4653  005DD8  A740               	btfss	64,3,b	;volatile
  4654  005DDA  D009               	goto	l556
  4655                           
  4656                           ; BSR set to: 15
  4657  005DDC  010F               	movlb	15	; () banked
  4658  005DDE  A730               	btfss	48,3,b	;volatile
  4659  005DE0  D006               	goto	l556
  4660                           
  4661                           ; BSR set to: 15
  4662  005DE2  010F               	movlb	15	; () banked
  4663  005DE4  A720               	btfss	32,3,b	;volatile
  4664  005DE6  D003               	goto	l556
  4665                           
  4666                           ; BSR set to: 15
  4667  005DE8  0E00               	movlw	0
  4668  005DEA  0100               	movlb	0	; () banked
  4669  005DEC  6F77               	movwf	_CANisTxReady$2845& (0+255),b
  4670  005DEE                     l556:
  4671  005DEE  0100               	movlb	0	; () banked
  4672  005DF0  5177               	movf	_CANisTxReady$2845& (0+255),w,b
  4673  005DF2  0012               	return	
  4674                           
  4675                           ; BSR set to: 0
  4676                           
  4677                           ; BSR set to: 0
  4678  005DF4  0012               	return		;funcret
  4679  005DF6                     __end_of_CANisTxReady:
  4680                           	opt stack 0
  4681                           tblptru	equ	0xFF8
  4682                           tblptrh	equ	0xFF7
  4683                           tblptrl	equ	0xFF6
  4684                           tablat	equ	0xFF5
  4685                           postinc0	equ	0xFEE
  4686                           wreg	equ	0xFE8
  4687                           postdec1	equ	0xFE5
  4688                           fsr1l	equ	0xFE1
  4689                           indf2	equ	0xFDF
  4690                           postinc2	equ	0xFDE
  4691                           postdec2	equ	0xFDD
  4692                           fsr2h	equ	0xFDA
  4693                           fsr2l	equ	0xFD9
  4694                           status	equ	0xFD8
  4695                           
  4696 ;; *************** function _abs *****************
  4697 ;; Defined at:
  4698 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\abs.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  a               2   23[BANK0 ] int 
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;		None
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  2   23[BANK0 ] int 
  4705 ;; Registers used:
  4706 ;;		wreg, status,2, status,0
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4712 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;Total ram usage:        4 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    5
  4719 ;; This function calls:
  4720 ;;		Nothing
  4721 ;; This function is called by:
  4722 ;;		_park_search
  4723 ;;		_parallelo
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           	psect	text7
  4728  005D7C                     __ptext7:
  4729                           	opt stack 0
  4730  005D7C                     _abs:
  4731                           	opt stack 23
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;incstack = 0
  4735  005D7C  0100               	movlb	0	; () banked
  4736  005D7E  AF78               	btfss	(abs@a+1)& (0+255),7,b
  4737  005D80  D00E               	goto	l892
  4738                           
  4739                           ; BSR set to: 0
  4740  005D82  C077  F079         	movff	abs@a,??_abs
  4741  005D86  C078  F07A         	movff	abs@a+1,??_abs+1
  4742  005D8A  0100               	movlb	0	; () banked
  4743  005D8C  1F79               	comf	??_abs& (0+255),f,b
  4744  005D8E  1F7A               	comf	(??_abs+1)& (0+255),f,b
  4745  005D90  4B79               	infsnz	??_abs& (0+255),f,b
  4746  005D92  2B7A               	incf	(??_abs+1)& (0+255),f,b
  4747  005D94  C079  F077         	movff	??_abs,?_abs
  4748  005D98  C07A  F078         	movff	??_abs+1,?_abs+1
  4749  005D9C  0012               	return	
  4750  005D9E                     l892:
  4751                           
  4752                           ; BSR set to: 0
  4753  005D9E  C077  F077         	movff	abs@a,?_abs
  4754  005DA2  C078  F078         	movff	abs@a+1,?_abs+1
  4755                           
  4756                           ; BSR set to: 0
  4757  005DA6  0012               	return		;funcret
  4758  005DA8                     __end_of_abs:
  4759                           	opt stack 0
  4760                           tblptru	equ	0xFF8
  4761                           tblptrh	equ	0xFF7
  4762                           tblptrl	equ	0xFF6
  4763                           tablat	equ	0xFF5
  4764                           postinc0	equ	0xFEE
  4765                           wreg	equ	0xFE8
  4766                           postdec1	equ	0xFE5
  4767                           fsr1l	equ	0xFE1
  4768                           indf2	equ	0xFDF
  4769                           postinc2	equ	0xFDE
  4770                           postdec2	equ	0xFDD
  4771                           fsr2h	equ	0xFDA
  4772                           fsr2l	equ	0xFD9
  4773                           status	equ	0xFD8
  4774                           
  4775 ;; *************** function ___awtofl *****************
  4776 ;; Defined at:
  4777 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;  c               2   33[BANK0 ] int 
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;  f1              4    0        int 
  4782 ;;  sign            1   37[BANK0 ] unsigned char 
  4783 ;; Return value:  Size  Location     Type
  4784 ;;                  4   33[BANK0 ] unsigned char 
  4785 ;; Registers used:
  4786 ;;		wreg, status,2, status,0, cstack
  4787 ;; Tracked objects:
  4788 ;;		On entry : 0/0
  4789 ;;		On exit  : 0/0
  4790 ;;		Unchanged: 0/0
  4791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4792 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4793 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4795 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4796 ;;Total ram usage:        5 bytes
  4797 ;; Hardware stack levels used:    1
  4798 ;; Hardware stack levels required when called:    6
  4799 ;; This function calls:
  4800 ;;		___flpack
  4801 ;; This function is called by:
  4802 ;;		_park_search
  4803 ;;		_parallelo
  4804 ;; This function uses a non-reentrant model
  4805 ;;
  4806                           
  4807                           	psect	text8
  4808  005BAC                     __ptext8:
  4809                           	opt stack 0
  4810  005BAC                     ___awtofl:
  4811                           	opt stack 22
  4812                           
  4813                           ; BSR set to: 0
  4814                           ;incstack = 0
  4815  005BAC  0E00               	movlw	0
  4816  005BAE  0100               	movlb	0	; () banked
  4817  005BB0  6F85               	movwf	___awtofl@sign& (0+255),b
  4818                           
  4819                           ; BSR set to: 0
  4820  005BB2  0100               	movlb	0	; () banked
  4821  005BB4  AF82               	btfss	(___awtofl@c+1)& (0+255),7,b
  4822  005BB6  D008               	goto	l6499
  4823                           
  4824                           ; BSR set to: 0
  4825  005BB8  0100               	movlb	0	; () banked
  4826  005BBA  6D81               	negf	___awtofl@c& (0+255),b
  4827  005BBC  1F82               	comf	(___awtofl@c+1)& (0+255),f,b
  4828  005BBE  B0D8               	btfsc	status,0,c
  4829  005BC0  2B82               	incf	(___awtofl@c+1)& (0+255),f,b
  4830  005BC2  0100               	movlb	0	; () banked
  4831  005BC4  2B85               	incf	___awtofl@sign& (0+255),f,b
  4832  005BC6  D000               	goto	l6499
  4833  005BC8                     l6499:
  4834                           
  4835                           ; BSR set to: 0
  4836  005BC8  C081  F077         	movff	___awtofl@c,___flpack@arg
  4837  005BCC  C082  F078         	movff	___awtofl@c+1,___flpack@arg+1
  4838  005BD0  0100               	movlb	0	; () banked
  4839  005BD2  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  4840  005BD4  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  4841  005BD6  0E96               	movlw	150
  4842  005BD8  0100               	movlb	0	; () banked
  4843  005BDA  6F7B               	movwf	___flpack@exp& (0+255),b
  4844  005BDC  C085  F07C         	movff	___awtofl@sign,___flpack@sign
  4845  005BE0  EC5F  F026         	call	___flpack	;wreg free
  4846  005BE4  C077  F081         	movff	?___flpack,?___awtofl
  4847  005BE8  C078  F082         	movff	?___flpack+1,?___awtofl+1
  4848  005BEC  C079  F083         	movff	?___flpack+2,?___awtofl+2
  4849  005BF0  C07A  F084         	movff	?___flpack+3,?___awtofl+3
  4850  005BF4  0012               	return	
  4851  005BF6  0012               	return		;funcret
  4852  005BF8                     __end_of___awtofl:
  4853                           	opt stack 0
  4854                           tblptru	equ	0xFF8
  4855                           tblptrh	equ	0xFF7
  4856                           tblptrl	equ	0xFF6
  4857                           tablat	equ	0xFF5
  4858                           postinc0	equ	0xFEE
  4859                           wreg	equ	0xFE8
  4860                           postdec1	equ	0xFE5
  4861                           fsr1l	equ	0xFE1
  4862                           indf2	equ	0xFDF
  4863                           postinc2	equ	0xFDE
  4864                           postdec2	equ	0xFDD
  4865                           fsr2h	equ	0xFDA
  4866                           fsr2l	equ	0xFD9
  4867                           status	equ	0xFD8
  4868                           
  4869 ;; *************** function _matematica *****************
  4870 ;; Defined at:
  4871 ;;		line 465 in file "parcheggio.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;		None
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;		None
  4876 ;; Return value:  Size  Location     Type
  4877 ;;		None               void
  4878 ;; Registers used:
  4879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4886 ;;      Locals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  4887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4888 ;;      Totals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;Total ram usage:       28 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; Hardware stack levels required when called:   10
  4892 ;; This function calls:
  4893 ;;		___fladd
  4894 ;;		___fldiv
  4895 ;;		___flmul
  4896 ;;		___flneg
  4897 ;;		_asin
  4898 ;;		_cos
  4899 ;; This function is called by:
  4900 ;;		_park_routine
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           	psect	text9
  4905  0026C0                     __ptext9:
  4906                           	opt stack 0
  4907  0026C0                     _matematica:
  4908                           	opt stack 19
  4909                           
  4910                           ;parcheggio.c: 466: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  4911                           
  4912                           ;incstack = 0
  4913  0026C0  C134  F0A3         	movff	_bordo,___fladd@f2	;volatile
  4914  0026C4  C135  F0A4         	movff	_bordo+1,___fladd@f2+1	;volatile
  4915  0026C8  C136  F0A5         	movff	_bordo+2,___fladd@f2+2	;volatile
  4916  0026CC  C137  F0A6         	movff	_bordo+3,___fladd@f2+3	;volatile
  4917  0026D0  0E00               	movlw	0
  4918  0026D2  0100               	movlb	0	; () banked
  4919  0026D4  6F85               	movwf	___fldiv@f2& (0+255),b
  4920  0026D6  0E00               	movlw	0
  4921  0026D8  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  4922  0026DA  0E00               	movlw	0
  4923  0026DC  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  4924  0026DE  0E40               	movlw	64
  4925  0026E0  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  4926  0026E2  C1EC  F081         	movff	_larghezza,___fldiv@f1
  4927  0026E6  C1ED  F082         	movff	_larghezza+1,___fldiv@f1+1
  4928  0026EA  C1EE  F083         	movff	_larghezza+2,___fldiv@f1+2
  4929  0026EE  C1EF  F084         	movff	_larghezza+3,___fldiv@f1+3
  4930  0026F2  ECD1  F027         	call	___fldiv	;wreg free
  4931  0026F6  C081  F09F         	movff	?___fldiv,___fladd@f1
  4932  0026FA  C082  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  4933  0026FE  C083  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  4934  002702  C084  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  4935  002706  ECF0  F01F         	call	___fladd	;wreg free
  4936  00270A  C09F  F0AB         	movff	?___fladd,___flneg@f1
  4937  00270E  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  4938  002712  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  4939  002716  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  4940  00271A  EC1B  F02E         	call	___flneg	;wreg free
  4941  00271E  C0AB  F1C4         	movff	?___flneg,_matematica$3671
  4942  002722  C0AC  F1C5         	movff	?___flneg+1,_matematica$3671+1
  4943  002726  C0AD  F1C6         	movff	?___flneg+2,_matematica$3671+2
  4944  00272A  C0AE  F1C7         	movff	?___flneg+3,_matematica$3671+3
  4945                           
  4946                           ;parcheggio.c: 466: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  4947  00272E  C1C4  F0A3         	movff	_matematica$3671,___fladd@f2
  4948  002732  C1C5  F0A4         	movff	_matematica$3671+1,___fladd@f2+1
  4949  002736  C1C6  F0A5         	movff	_matematica$3671+2,___fladd@f2+2
  4950  00273A  C1C7  F0A6         	movff	_matematica$3671+3,___fladd@f2+3
  4951  00273E  0E00               	movlw	0
  4952  002740  0100               	movlb	0	; () banked
  4953  002742  6F94               	movwf	___flmul@f2& (0+255),b
  4954  002744  0E00               	movlw	0
  4955  002746  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  4956  002748  0E00               	movlw	0
  4957  00274A  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  4958  00274C  0E40               	movlw	64
  4959  00274E  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  4960  002750  C1F0  F090         	movff	_raggio,___flmul@f1
  4961  002754  C1F1  F091         	movff	_raggio+1,___flmul@f1+1
  4962  002758  C1F2  F092         	movff	_raggio+2,___flmul@f1+2
  4963  00275C  C1F3  F093         	movff	_raggio+3,___flmul@f1+3
  4964  002760  EC1F  F027         	call	___flmul	;wreg free
  4965  002764  C090  F09F         	movff	?___flmul,___fladd@f1
  4966  002768  C091  F0A0         	movff	?___flmul+1,___fladd@f1+1
  4967  00276C  C092  F0A1         	movff	?___flmul+2,___fladd@f1+2
  4968  002770  C093  F0A2         	movff	?___flmul+3,___fladd@f1+3
  4969  002774  ECF0  F01F         	call	___fladd	;wreg free
  4970  002778  C09F  F1C8         	movff	?___fladd,_matematica$3672
  4971  00277C  C0A0  F1C9         	movff	?___fladd+1,_matematica$3672+1
  4972  002780  C0A1  F1CA         	movff	?___fladd+2,_matematica$3672+2
  4973  002784  C0A2  F1CB         	movff	?___fladd+3,_matematica$3672+3
  4974                           
  4975                           ;parcheggio.c: 466: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  4976  002788  0E00               	movlw	0
  4977  00278A  0100               	movlb	0	; () banked
  4978  00278C  6F85               	movwf	___fldiv@f2& (0+255),b
  4979  00278E  0E00               	movlw	0
  4980  002790  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  4981  002792  0E00               	movlw	0
  4982  002794  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  4983  002796  0E40               	movlw	64
  4984  002798  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  4985  00279A  C1EC  F081         	movff	_larghezza,___fldiv@f1
  4986  00279E  C1ED  F082         	movff	_larghezza+1,___fldiv@f1+1
  4987  0027A2  C1EE  F083         	movff	_larghezza+2,___fldiv@f1+2
  4988  0027A6  C1EF  F084         	movff	_larghezza+3,___fldiv@f1+3
  4989  0027AA  ECD1  F027         	call	___fldiv	;wreg free
  4990  0027AE  C081  F0AB         	movff	?___fldiv,___flneg@f1
  4991  0027B2  C082  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  4992  0027B6  C083  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  4993  0027BA  C084  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  4994  0027BE  EC1B  F02E         	call	___flneg	;wreg free
  4995  0027C2  C0AB  F0A3         	movff	?___flneg,___fladd@f2
  4996  0027C6  C0AC  F0A4         	movff	?___flneg+1,___fladd@f2+1
  4997  0027CA  C0AD  F0A5         	movff	?___flneg+2,___fladd@f2+2
  4998  0027CE  C0AE  F0A6         	movff	?___flneg+3,___fladd@f2+3
  4999  0027D2  C1C8  F09F         	movff	_matematica$3672,___fladd@f1
  5000  0027D6  C1C9  F0A0         	movff	_matematica$3672+1,___fladd@f1+1
  5001  0027DA  C1CA  F0A1         	movff	_matematica$3672+2,___fladd@f1+2
  5002  0027DE  C1CB  F0A2         	movff	_matematica$3672+3,___fladd@f1+3
  5003  0027E2  ECF0  F01F         	call	___fladd	;wreg free
  5004  0027E6  C09F  F1CC         	movff	?___fladd,_matematica$3673
  5005  0027EA  C0A0  F1CD         	movff	?___fladd+1,_matematica$3673+1
  5006  0027EE  C0A1  F1CE         	movff	?___fladd+2,_matematica$3673+2
  5007  0027F2  C0A2  F1CF         	movff	?___fladd+3,_matematica$3673+3
  5008                           
  5009                           ;parcheggio.c: 466: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  5010  0027F6  C1CC  F081         	movff	_matematica$3673,___fldiv@f1
  5011  0027FA  C1CD  F082         	movff	_matematica$3673+1,___fldiv@f1+1
  5012  0027FE  C1CE  F083         	movff	_matematica$3673+2,___fldiv@f1+2
  5013  002802  C1CF  F084         	movff	_matematica$3673+3,___fldiv@f1+3
  5014  002806  0E00               	movlw	0
  5015  002808  0100               	movlb	0	; () banked
  5016  00280A  6F94               	movwf	___flmul@f2& (0+255),b
  5017  00280C  0E00               	movlw	0
  5018  00280E  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5019  002810  0E00               	movlw	0
  5020  002812  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5021  002814  0E40               	movlw	64
  5022  002816  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5023  002818  C1F0  F090         	movff	_raggio,___flmul@f1
  5024  00281C  C1F1  F091         	movff	_raggio+1,___flmul@f1+1
  5025  002820  C1F2  F092         	movff	_raggio+2,___flmul@f1+2
  5026  002824  C1F3  F093         	movff	_raggio+3,___flmul@f1+3
  5027  002828  EC1F  F027         	call	___flmul	;wreg free
  5028  00282C  C090  F085         	movff	?___flmul,___fldiv@f2
  5029  002830  C091  F086         	movff	?___flmul+1,___fldiv@f2+1
  5030  002834  C092  F087         	movff	?___flmul+2,___fldiv@f2+2
  5031  002838  C093  F088         	movff	?___flmul+3,___fldiv@f2+3
  5032  00283C  ECD1  F027         	call	___fldiv	;wreg free
  5033  002840  C081  F1D0         	movff	?___fldiv,_matematica$3674
  5034  002844  C082  F1D1         	movff	?___fldiv+1,_matematica$3674+1
  5035  002848  C083  F1D2         	movff	?___fldiv+2,_matematica$3674+2
  5036  00284C  C084  F1D3         	movff	?___fldiv+3,_matematica$3674+3
  5037                           
  5038                           ;parcheggio.c: 466: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  5039  002850  C1D0  F1A0         	movff	_matematica$3674,asin@x
  5040  002854  C1D1  F1A1         	movff	_matematica$3674+1,asin@x+1
  5041  002858  C1D2  F1A2         	movff	_matematica$3674+2,asin@x+2
  5042  00285C  C1D3  F1A3         	movff	_matematica$3674+3,asin@x+3
  5043  002860  ECD0  F01C         	call	_asin	;wreg free
  5044  002864  C1A0  F12C         	movff	?_asin,_alfa
  5045  002868  C1A1  F12D         	movff	?_asin+1,_alfa+1
  5046  00286C  C1A2  F12E         	movff	?_asin+2,_alfa+2
  5047  002870  C1A3  F12F         	movff	?_asin+3,_alfa+3
  5048                           
  5049                           ;parcheggio.c: 467: alfa = alfa / 3.14159265358979323846 * 180;
  5050  002874  0EDB               	movlw	219
  5051  002876  0100               	movlb	0	; () banked
  5052  002878  6F85               	movwf	___fldiv@f2& (0+255),b
  5053  00287A  0E0F               	movlw	15
  5054  00287C  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5055  00287E  0E49               	movlw	73
  5056  002880  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5057  002882  0E40               	movlw	64
  5058  002884  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5059  002886  C12C  F081         	movff	_alfa,___fldiv@f1
  5060  00288A  C12D  F082         	movff	_alfa+1,___fldiv@f1+1
  5061  00288E  C12E  F083         	movff	_alfa+2,___fldiv@f1+2
  5062  002892  C12F  F084         	movff	_alfa+3,___fldiv@f1+3
  5063  002896  ECD1  F027         	call	___fldiv	;wreg free
  5064  00289A  C081  F090         	movff	?___fldiv,___flmul@f1
  5065  00289E  C082  F091         	movff	?___fldiv+1,___flmul@f1+1
  5066  0028A2  C083  F092         	movff	?___fldiv+2,___flmul@f1+2
  5067  0028A6  C084  F093         	movff	?___fldiv+3,___flmul@f1+3
  5068  0028AA  0E00               	movlw	0
  5069  0028AC  0100               	movlb	0	; () banked
  5070  0028AE  6F94               	movwf	___flmul@f2& (0+255),b
  5071  0028B0  0E00               	movlw	0
  5072  0028B2  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5073  0028B4  0E34               	movlw	52
  5074  0028B6  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5075  0028B8  0E43               	movlw	67
  5076  0028BA  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5077  0028BC  EC1F  F027         	call	___flmul	;wreg free
  5078  0028C0  C090  F12C         	movff	?___flmul,_alfa
  5079  0028C4  C091  F12D         	movff	?___flmul+1,_alfa+1
  5080  0028C8  C092  F12E         	movff	?___flmul+2,_alfa+2
  5081  0028CC  C093  F12F         	movff	?___flmul+3,_alfa+3
  5082                           
  5083                           ;parcheggio.c: 468: beta = 90 - alfa;
  5084  0028D0  C12C  F0AB         	movff	_alfa,___flneg@f1
  5085  0028D4  C12D  F0AC         	movff	_alfa+1,___flneg@f1+1
  5086  0028D8  C12E  F0AD         	movff	_alfa+2,___flneg@f1+2
  5087  0028DC  C12F  F0AE         	movff	_alfa+3,___flneg@f1+3
  5088  0028E0  EC1B  F02E         	call	___flneg	;wreg free
  5089  0028E4  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5090  0028E8  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5091  0028EC  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5092  0028F0  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5093  0028F4  0E00               	movlw	0
  5094  0028F6  0100               	movlb	0	; () banked
  5095  0028F8  6FA3               	movwf	___fladd@f2& (0+255),b
  5096  0028FA  0E00               	movlw	0
  5097  0028FC  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5098  0028FE  0EB4               	movlw	180
  5099  002900  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5100  002902  0E42               	movlw	66
  5101  002904  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5102  002906  ECF0  F01F         	call	___fladd	;wreg free
  5103  00290A  C09F  F130         	movff	?___fladd,_beta
  5104  00290E  C0A0  F131         	movff	?___fladd+1,_beta+1
  5105  002912  C0A1  F132         	movff	?___fladd+2,_beta+2
  5106  002916  C0A2  F133         	movff	?___fladd+3,_beta+3
  5107                           
  5108                           ;parcheggio.c: 469: alfa = (alfa * 3.14159265358979323846) / 180;
  5109  00291A  0EDB               	movlw	219
  5110  00291C  0100               	movlb	0	; () banked
  5111  00291E  6F94               	movwf	___flmul@f2& (0+255),b
  5112  002920  0E0F               	movlw	15
  5113  002922  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5114  002924  0E49               	movlw	73
  5115  002926  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5116  002928  0E40               	movlw	64
  5117  00292A  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5118  00292C  C12C  F090         	movff	_alfa,___flmul@f1
  5119  002930  C12D  F091         	movff	_alfa+1,___flmul@f1+1
  5120  002934  C12E  F092         	movff	_alfa+2,___flmul@f1+2
  5121  002938  C12F  F093         	movff	_alfa+3,___flmul@f1+3
  5122  00293C  EC1F  F027         	call	___flmul	;wreg free
  5123  002940  C090  F081         	movff	?___flmul,___fldiv@f1
  5124  002944  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5125  002948  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5126  00294C  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5127  002950  0E00               	movlw	0
  5128  002952  0100               	movlb	0	; () banked
  5129  002954  6F85               	movwf	___fldiv@f2& (0+255),b
  5130  002956  0E00               	movlw	0
  5131  002958  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5132  00295A  0E34               	movlw	52
  5133  00295C  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5134  00295E  0E43               	movlw	67
  5135  002960  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5136  002962  ECD1  F027         	call	___fldiv	;wreg free
  5137  002966  C081  F12C         	movff	?___fldiv,_alfa
  5138  00296A  C082  F12D         	movff	?___fldiv+1,_alfa+1
  5139  00296E  C083  F12E         	movff	?___fldiv+2,_alfa+2
  5140  002972  C084  F12F         	movff	?___fldiv+3,_alfa+3
  5141                           
  5142                           ;parcheggio.c: 470: n = cos(alfa);
  5143  002976  C12C  F1BC         	movff	_alfa,cos@f
  5144  00297A  C12D  F1BD         	movff	_alfa+1,cos@f+1
  5145  00297E  C12E  F1BE         	movff	_alfa+2,cos@f+2
  5146  002982  C12F  F1BF         	movff	_alfa+3,cos@f+3
  5147  002986  EC1B  F02B         	call	_cos	;wreg free
  5148  00298A  C1BC  F138         	movff	?_cos,_n
  5149  00298E  C1BD  F139         	movff	?_cos+1,_n+1
  5150  002992  C1BE  F13A         	movff	?_cos+2,_n+2
  5151  002996  C1BF  F13B         	movff	?_cos+3,_n+3
  5152                           
  5153                           ;parcheggio.c: 471: n = 2 * raggio *n;
  5154  00299A  C138  F094         	movff	_n,___flmul@f2
  5155  00299E  C139  F095         	movff	_n+1,___flmul@f2+1
  5156  0029A2  C13A  F096         	movff	_n+2,___flmul@f2+2
  5157  0029A6  C13B  F097         	movff	_n+3,___flmul@f2+3
  5158  0029AA  C1F0  F090         	movff	_raggio,___flmul@f1
  5159  0029AE  C1F1  F091         	movff	_raggio+1,___flmul@f1+1
  5160  0029B2  C1F2  F092         	movff	_raggio+2,___flmul@f1+2
  5161  0029B6  C1F3  F093         	movff	_raggio+3,___flmul@f1+3
  5162  0029BA  EC1F  F027         	call	___flmul	;wreg free
  5163  0029BE  C090  F1DC         	movff	?___flmul,_matematica$3675
  5164  0029C2  C091  F1DD         	movff	?___flmul+1,_matematica$3675+1
  5165  0029C6  C092  F1DE         	movff	?___flmul+2,_matematica$3675+2
  5166  0029CA  C093  F1DF         	movff	?___flmul+3,_matematica$3675+3
  5167                           
  5168                           ;parcheggio.c: 471: n = 2 * raggio *n;
  5169  0029CE  C1DC  F090         	movff	_matematica$3675,___flmul@f1
  5170  0029D2  C1DD  F091         	movff	_matematica$3675+1,___flmul@f1+1
  5171  0029D6  C1DE  F092         	movff	_matematica$3675+2,___flmul@f1+2
  5172  0029DA  C1DF  F093         	movff	_matematica$3675+3,___flmul@f1+3
  5173  0029DE  0E00               	movlw	0
  5174  0029E0  0100               	movlb	0	; () banked
  5175  0029E2  6F94               	movwf	___flmul@f2& (0+255),b
  5176  0029E4  0E00               	movlw	0
  5177  0029E6  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5178  0029E8  0E00               	movlw	0
  5179  0029EA  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5180  0029EC  0E40               	movlw	64
  5181  0029EE  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5182  0029F0  EC1F  F027         	call	___flmul	;wreg free
  5183  0029F4  C090  F138         	movff	?___flmul,_n
  5184  0029F8  C091  F139         	movff	?___flmul+1,_n+1
  5185  0029FC  C092  F13A         	movff	?___flmul+2,_n+2
  5186  002A00  C093  F13B         	movff	?___flmul+3,_n+3
  5187                           
  5188                           ;parcheggio.c: 472: prima_sterzata = 2 * 3.14159265358979323846 * raggio * beta / 360;
  5189  002A04  C130  F094         	movff	_beta,___flmul@f2
  5190  002A08  C131  F095         	movff	_beta+1,___flmul@f2+1
  5191  002A0C  C132  F096         	movff	_beta+2,___flmul@f2+2
  5192  002A10  C133  F097         	movff	_beta+3,___flmul@f2+3
  5193  002A14  C1F0  F090         	movff	_raggio,___flmul@f1
  5194  002A18  C1F1  F091         	movff	_raggio+1,___flmul@f1+1
  5195  002A1C  C1F2  F092         	movff	_raggio+2,___flmul@f1+2
  5196  002A20  C1F3  F093         	movff	_raggio+3,___flmul@f1+3
  5197  002A24  EC1F  F027         	call	___flmul	;wreg free
  5198  002A28  C090  F1DC         	movff	?___flmul,_matematica$3675
  5199  002A2C  C091  F1DD         	movff	?___flmul+1,_matematica$3675+1
  5200  002A30  C092  F1DE         	movff	?___flmul+2,_matematica$3675+2
  5201  002A34  C093  F1DF         	movff	?___flmul+3,_matematica$3675+3
  5202                           
  5203                           ;parcheggio.c: 472: prima_sterzata = 2 * 3.14159265358979323846 * raggio * beta / 360;
  5204  002A38  0EDB               	movlw	219
  5205  002A3A  0100               	movlb	0	; () banked
  5206  002A3C  6F94               	movwf	___flmul@f2& (0+255),b
  5207  002A3E  0E0F               	movlw	15
  5208  002A40  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5209  002A42  0EC9               	movlw	201
  5210  002A44  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5211  002A46  0E40               	movlw	64
  5212  002A48  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5213  002A4A  C1DC  F090         	movff	_matematica$3675,___flmul@f1
  5214  002A4E  C1DD  F091         	movff	_matematica$3675+1,___flmul@f1+1
  5215  002A52  C1DE  F092         	movff	_matematica$3675+2,___flmul@f1+2
  5216  002A56  C1DF  F093         	movff	_matematica$3675+3,___flmul@f1+3
  5217  002A5A  EC1F  F027         	call	___flmul	;wreg free
  5218  002A5E  C090  F081         	movff	?___flmul,___fldiv@f1
  5219  002A62  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5220  002A66  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5221  002A6A  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5222  002A6E  0E00               	movlw	0
  5223  002A70  0100               	movlb	0	; () banked
  5224  002A72  6F85               	movwf	___fldiv@f2& (0+255),b
  5225  002A74  0E00               	movlw	0
  5226  002A76  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5227  002A78  0EB4               	movlw	180
  5228  002A7A  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5229  002A7C  0E43               	movlw	67
  5230  002A7E  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5231  002A80  ECD1  F027         	call	___fldiv	;wreg free
  5232  002A84  C081  F140         	movff	?___fldiv,_prima_sterzata
  5233  002A88  C082  F141         	movff	?___fldiv+1,_prima_sterzata+1
  5234  002A8C  C083  F142         	movff	?___fldiv+2,_prima_sterzata+2
  5235  002A90  C084  F143         	movff	?___fldiv+3,_prima_sterzata+3
  5236                           
  5237                           ;parcheggio.c: 473: K_var = raggio + (2 * larghezza / 3);
  5238  002A94  0E00               	movlw	0
  5239  002A96  0100               	movlb	0	; () banked
  5240  002A98  6F85               	movwf	___fldiv@f2& (0+255),b
  5241  002A9A  0E00               	movlw	0
  5242  002A9C  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5243  002A9E  0E40               	movlw	64
  5244  002AA0  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5245  002AA2  0E40               	movlw	64
  5246  002AA4  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5247  002AA6  0E00               	movlw	0
  5248  002AA8  0100               	movlb	0	; () banked
  5249  002AAA  6F94               	movwf	___flmul@f2& (0+255),b
  5250  002AAC  0E00               	movlw	0
  5251  002AAE  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5252  002AB0  0E00               	movlw	0
  5253  002AB2  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5254  002AB4  0E40               	movlw	64
  5255  002AB6  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5256  002AB8  C1EC  F090         	movff	_larghezza,___flmul@f1
  5257  002ABC  C1ED  F091         	movff	_larghezza+1,___flmul@f1+1
  5258  002AC0  C1EE  F092         	movff	_larghezza+2,___flmul@f1+2
  5259  002AC4  C1EF  F093         	movff	_larghezza+3,___flmul@f1+3
  5260  002AC8  EC1F  F027         	call	___flmul	;wreg free
  5261  002ACC  C090  F081         	movff	?___flmul,___fldiv@f1
  5262  002AD0  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5263  002AD4  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5264  002AD8  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5265  002ADC  ECD1  F027         	call	___fldiv	;wreg free
  5266  002AE0  C081  F09F         	movff	?___fldiv,___fladd@f1
  5267  002AE4  C082  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  5268  002AE8  C083  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  5269  002AEC  C084  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  5270  002AF0  C1F0  F0A3         	movff	_raggio,___fladd@f2
  5271  002AF4  C1F1  F0A4         	movff	_raggio+1,___fladd@f2+1
  5272  002AF8  C1F2  F0A5         	movff	_raggio+2,___fladd@f2+2
  5273  002AFC  C1F3  F0A6         	movff	_raggio+3,___fladd@f2+3
  5274  002B00  ECF0  F01F         	call	___fladd	;wreg free
  5275  002B04  C09F  F124         	movff	?___fladd,_K_var
  5276  002B08  C0A0  F125         	movff	?___fladd+1,_K_var+1
  5277  002B0C  C0A1  F126         	movff	?___fladd+2,_K_var+2
  5278  002B10  C0A2  F127         	movff	?___fladd+3,_K_var+3
  5279                           
  5280                           ;parcheggio.c: 474: J_var = raggio - (2 * larghezza / 3);
  5281  002B14  0E00               	movlw	0
  5282  002B16  0100               	movlb	0	; () banked
  5283  002B18  6F85               	movwf	___fldiv@f2& (0+255),b
  5284  002B1A  0E00               	movlw	0
  5285  002B1C  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5286  002B1E  0E40               	movlw	64
  5287  002B20  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5288  002B22  0E40               	movlw	64
  5289  002B24  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5290  002B26  0E00               	movlw	0
  5291  002B28  0100               	movlb	0	; () banked
  5292  002B2A  6F94               	movwf	___flmul@f2& (0+255),b
  5293  002B2C  0E00               	movlw	0
  5294  002B2E  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5295  002B30  0E00               	movlw	0
  5296  002B32  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5297  002B34  0E40               	movlw	64
  5298  002B36  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5299  002B38  C1EC  F090         	movff	_larghezza,___flmul@f1
  5300  002B3C  C1ED  F091         	movff	_larghezza+1,___flmul@f1+1
  5301  002B40  C1EE  F092         	movff	_larghezza+2,___flmul@f1+2
  5302  002B44  C1EF  F093         	movff	_larghezza+3,___flmul@f1+3
  5303  002B48  EC1F  F027         	call	___flmul	;wreg free
  5304  002B4C  C090  F081         	movff	?___flmul,___fldiv@f1
  5305  002B50  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5306  002B54  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5307  002B58  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5308  002B5C  ECD1  F027         	call	___fldiv	;wreg free
  5309  002B60  C081  F0AB         	movff	?___fldiv,___flneg@f1
  5310  002B64  C082  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  5311  002B68  C083  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  5312  002B6C  C084  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  5313  002B70  EC1B  F02E         	call	___flneg	;wreg free
  5314  002B74  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5315  002B78  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5316  002B7C  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5317  002B80  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5318  002B84  C1F0  F0A3         	movff	_raggio,___fladd@f2
  5319  002B88  C1F1  F0A4         	movff	_raggio+1,___fladd@f2+1
  5320  002B8C  C1F2  F0A5         	movff	_raggio+2,___fladd@f2+2
  5321  002B90  C1F3  F0A6         	movff	_raggio+3,___fladd@f2+3
  5322  002B94  ECF0  F01F         	call	___fladd	;wreg free
  5323  002B98  C09F  F120         	movff	?___fladd,_J_var
  5324  002B9C  C0A0  F121         	movff	?___fladd+1,_J_var+1
  5325  002BA0  C0A1  F122         	movff	?___fladd+2,_J_var+2
  5326  002BA4  C0A2  F123         	movff	?___fladd+3,_J_var+3
  5327                           
  5328                           ;parcheggio.c: 475: Pmin = K_var * cos(asin((J_var / K_var)));
  5329  002BA8  C124  F085         	movff	_K_var,___fldiv@f2
  5330  002BAC  C125  F086         	movff	_K_var+1,___fldiv@f2+1
  5331  002BB0  C126  F087         	movff	_K_var+2,___fldiv@f2+2
  5332  002BB4  C127  F088         	movff	_K_var+3,___fldiv@f2+3
  5333  002BB8  C120  F081         	movff	_J_var,___fldiv@f1
  5334  002BBC  C121  F082         	movff	_J_var+1,___fldiv@f1+1
  5335  002BC0  C122  F083         	movff	_J_var+2,___fldiv@f1+2
  5336  002BC4  C123  F084         	movff	_J_var+3,___fldiv@f1+3
  5337  002BC8  ECD1  F027         	call	___fldiv	;wreg free
  5338  002BCC  C081  F1D4         	movff	?___fldiv,_matematica$3676
  5339  002BD0  C082  F1D5         	movff	?___fldiv+1,_matematica$3676+1
  5340  002BD4  C083  F1D6         	movff	?___fldiv+2,_matematica$3676+2
  5341  002BD8  C084  F1D7         	movff	?___fldiv+3,_matematica$3676+3
  5342                           
  5343                           ;parcheggio.c: 475: Pmin = K_var * cos(asin((J_var / K_var)));
  5344  002BDC  C1D4  F1A0         	movff	_matematica$3676,asin@x
  5345  002BE0  C1D5  F1A1         	movff	_matematica$3676+1,asin@x+1
  5346  002BE4  C1D6  F1A2         	movff	_matematica$3676+2,asin@x+2
  5347  002BE8  C1D7  F1A3         	movff	_matematica$3676+3,asin@x+3
  5348  002BEC  ECD0  F01C         	call	_asin	;wreg free
  5349  002BF0  C1A0  F1BC         	movff	?_asin,cos@f
  5350  002BF4  C1A1  F1BD         	movff	?_asin+1,cos@f+1
  5351  002BF8  C1A2  F1BE         	movff	?_asin+2,cos@f+2
  5352  002BFC  C1A3  F1BF         	movff	?_asin+3,cos@f+3
  5353  002C00  EC1B  F02B         	call	_cos	;wreg free
  5354  002C04  C1BC  F1D8         	movff	?_cos,_matematica$3677
  5355  002C08  C1BD  F1D9         	movff	?_cos+1,_matematica$3677+1
  5356  002C0C  C1BE  F1DA         	movff	?_cos+2,_matematica$3677+2
  5357  002C10  C1BF  F1DB         	movff	?_cos+3,_matematica$3677+3
  5358                           
  5359                           ;parcheggio.c: 475: Pmin = K_var * cos(asin((J_var / K_var)));
  5360  002C14  C1D8  F090         	movff	_matematica$3677,___flmul@f1
  5361  002C18  C1D9  F091         	movff	_matematica$3677+1,___flmul@f1+1
  5362  002C1C  C1DA  F092         	movff	_matematica$3677+2,___flmul@f1+2
  5363  002C20  C1DB  F093         	movff	_matematica$3677+3,___flmul@f1+3
  5364  002C24  C124  F094         	movff	_K_var,___flmul@f2
  5365  002C28  C125  F095         	movff	_K_var+1,___flmul@f2+1
  5366  002C2C  C126  F096         	movff	_K_var+2,___flmul@f2+2
  5367  002C30  C127  F097         	movff	_K_var+3,___flmul@f2+3
  5368  002C34  EC1F  F027         	call	___flmul	;wreg free
  5369  002C38  C090  F128         	movff	?___flmul,_Pmin
  5370  002C3C  C091  F129         	movff	?___flmul+1,_Pmin+1
  5371  002C40  C092  F12A         	movff	?___flmul+2,_Pmin+2
  5372  002C44  C093  F12B         	movff	?___flmul+3,_Pmin+3
  5373  002C48  0012               	return		;funcret
  5374  002C4A                     __end_of_matematica:
  5375                           	opt stack 0
  5376                           tblptru	equ	0xFF8
  5377                           tblptrh	equ	0xFF7
  5378                           tblptrl	equ	0xFF6
  5379                           tablat	equ	0xFF5
  5380                           postinc0	equ	0xFEE
  5381                           wreg	equ	0xFE8
  5382                           postdec1	equ	0xFE5
  5383                           fsr1l	equ	0xFE1
  5384                           indf2	equ	0xFDF
  5385                           postinc2	equ	0xFDE
  5386                           postdec2	equ	0xFDD
  5387                           fsr2h	equ	0xFDA
  5388                           fsr2l	equ	0xFD9
  5389                           status	equ	0xFD8
  5390                           
  5391 ;; *************** function _cos *****************
  5392 ;; Defined at:
  5393 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\cos.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;  f               4   49[BANK1 ] unsigned char 
  5396 ;; Auto vars:     Size  Location     Type
  5397 ;;		None
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  4   49[BANK1 ] unsigned char 
  5400 ;; Registers used:
  5401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5407 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5408 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5410 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5411 ;;Total ram usage:        8 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    9
  5414 ;; This function calls:
  5415 ;;		___fladd
  5416 ;;		___flge
  5417 ;;		_sin
  5418 ;; This function is called by:
  5419 ;;		_matematica
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text10
  5424  005636                     __ptext10:
  5425                           	opt stack 0
  5426  005636                     _cos:
  5427                           	opt stack 19
  5428                           
  5429                           ;incstack = 0
  5430  005636  0EDB               	movlw	219
  5431  005638  0100               	movlb	0	; () banked
  5432  00563A  6FB3               	movwf	___flge@ff1& (0+255),b
  5433  00563C  0E0F               	movlw	15
  5434  00563E  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5435  005640  0E49               	movlw	73
  5436  005642  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5437  005644  0E40               	movlw	64
  5438  005646  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5439  005648  C1BC  F0B7         	movff	cos@f,___flge@ff2
  5440  00564C  C1BD  F0B8         	movff	cos@f+1,___flge@ff2+1
  5441  005650  C1BE  F0B9         	movff	cos@f+2,___flge@ff2+2
  5442  005654  C1BF  F0BA         	movff	cos@f+3,___flge@ff2+3
  5443  005658  EC9F  F02A         	call	___flge	;wreg free
  5444  00565C  0100               	movlb	0	; () banked
  5445  00565E  B0D8               	btfsc	status,0,c
  5446  005660  D02E               	goto	l6487
  5447                           
  5448                           ; BSR set to: 0
  5449  005662  C1BC  F09F         	movff	cos@f,___fladd@f1
  5450  005666  C1BD  F0A0         	movff	cos@f+1,___fladd@f1+1
  5451  00566A  C1BE  F0A1         	movff	cos@f+2,___fladd@f1+2
  5452  00566E  C1BF  F0A2         	movff	cos@f+3,___fladd@f1+3
  5453  005672  0EE4               	movlw	228
  5454  005674  0100               	movlb	0	; () banked
  5455  005676  6FA3               	movwf	___fladd@f2& (0+255),b
  5456  005678  0ECB               	movlw	203
  5457  00567A  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5458  00567C  0E96               	movlw	150
  5459  00567E  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5460  005680  0EC0               	movlw	192
  5461  005682  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5462  005684  ECF0  F01F         	call	___fladd	;wreg free
  5463  005688  C09F  F1C0         	movff	?___fladd,_cos$3682
  5464  00568C  C0A0  F1C1         	movff	?___fladd+1,_cos$3682+1
  5465  005690  C0A1  F1C2         	movff	?___fladd+2,_cos$3682+2
  5466  005694  C0A2  F1C3         	movff	?___fladd+3,_cos$3682+3
  5467  005698  C1C0  F0D1         	movff	_cos$3682,sin@f
  5468  00569C  C1C1  F0D2         	movff	_cos$3682+1,sin@f+1
  5469  0056A0  C1C2  F0D3         	movff	_cos$3682+2,sin@f+2
  5470  0056A4  C1C3  F0D4         	movff	_cos$3682+3,sin@f+3
  5471  0056A8  EC62  F01E         	call	_sin	;wreg free
  5472  0056AC  C0D1  F1BC         	movff	?_sin,?_cos
  5473  0056B0  C0D2  F1BD         	movff	?_sin+1,?_cos+1
  5474  0056B4  C0D3  F1BE         	movff	?_sin+2,?_cos+2
  5475  0056B8  C0D4  F1BF         	movff	?_sin+3,?_cos+3
  5476  0056BC  0012               	return	
  5477  0056BE                     l6487:
  5478  0056BE  C1BC  F09F         	movff	cos@f,___fladd@f1
  5479  0056C2  C1BD  F0A0         	movff	cos@f+1,___fladd@f1+1
  5480  0056C6  C1BE  F0A1         	movff	cos@f+2,___fladd@f1+2
  5481  0056CA  C1BF  F0A2         	movff	cos@f+3,___fladd@f1+3
  5482  0056CE  0EDB               	movlw	219
  5483  0056D0  0100               	movlb	0	; () banked
  5484  0056D2  6FA3               	movwf	___fladd@f2& (0+255),b
  5485  0056D4  0E0F               	movlw	15
  5486  0056D6  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5487  0056D8  0EC9               	movlw	201
  5488  0056DA  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5489  0056DC  0E3F               	movlw	63
  5490  0056DE  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5491  0056E0  ECF0  F01F         	call	___fladd	;wreg free
  5492  0056E4  C09F  F1C0         	movff	?___fladd,_cos$3682
  5493  0056E8  C0A0  F1C1         	movff	?___fladd+1,_cos$3682+1
  5494  0056EC  C0A1  F1C2         	movff	?___fladd+2,_cos$3682+2
  5495  0056F0  C0A2  F1C3         	movff	?___fladd+3,_cos$3682+3
  5496  0056F4  C1C0  F0D1         	movff	_cos$3682,sin@f
  5497  0056F8  C1C1  F0D2         	movff	_cos$3682+1,sin@f+1
  5498  0056FC  C1C2  F0D3         	movff	_cos$3682+2,sin@f+2
  5499  005700  C1C3  F0D4         	movff	_cos$3682+3,sin@f+3
  5500  005704  EC62  F01E         	call	_sin	;wreg free
  5501  005708  C0D1  F1BC         	movff	?_sin,?_cos
  5502  00570C  C0D2  F1BD         	movff	?_sin+1,?_cos+1
  5503  005710  C0D3  F1BE         	movff	?_sin+2,?_cos+2
  5504  005714  C0D4  F1BF         	movff	?_sin+3,?_cos+3
  5505  005718  0012               	return	
  5506  00571A  0012               	return		;funcret
  5507  00571C                     __end_of_cos:
  5508                           	opt stack 0
  5509                           tblptru	equ	0xFF8
  5510                           tblptrh	equ	0xFF7
  5511                           tblptrl	equ	0xFF6
  5512                           tablat	equ	0xFF5
  5513                           postinc0	equ	0xFEE
  5514                           wreg	equ	0xFE8
  5515                           postdec1	equ	0xFE5
  5516                           fsr1l	equ	0xFE1
  5517                           indf2	equ	0xFDF
  5518                           postinc2	equ	0xFDE
  5519                           postdec2	equ	0xFDD
  5520                           fsr2h	equ	0xFDA
  5521                           fsr2l	equ	0xFD9
  5522                           status	equ	0xFD8
  5523                           
  5524 ;; *************** function _sin *****************
  5525 ;; Defined at:
  5526 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sin.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;  f               4  113[BANK0 ] unsigned char 
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;  x2              4    8[BANK1 ] unsigned char 
  5531 ;;  y               4    0[BANK1 ] unsigned char 
  5532 ;;  sgn             1   12[BANK1 ] unsigned char 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  4  113[BANK0 ] unsigned char 
  5535 ;; Registers used:
  5536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5542 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Totals:         0       4      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;Total ram usage:       17 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:    8
  5549 ;; This function calls:
  5550 ;;		___fladd
  5551 ;;		___fldiv
  5552 ;;		___flge
  5553 ;;		___flmul
  5554 ;;		___flneg
  5555 ;;		___flsub
  5556 ;;		_eval_poly
  5557 ;;		_floor
  5558 ;; This function is called by:
  5559 ;;		_cos
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           	psect	text11
  5564  003CC4                     __ptext11:
  5565                           	opt stack 0
  5566  003CC4                     _sin:
  5567                           	opt stack 19
  5568                           
  5569                           ;incstack = 0
  5570  003CC4  0E00               	movlw	0
  5571  003CC6  0101               	movlb	1	; () banked
  5572  003CC8  6F97               	movwf	sin@sgn& (0+255),b
  5573                           
  5574                           ; BSR set to: 1
  5575  003CCA  0100               	movlb	0	; () banked
  5576  003CCC  AFD4               	btfss	(sin@f+3)& (0+255),7,b
  5577  003CCE  D016               	goto	l6371
  5578                           
  5579                           ; BSR set to: 0
  5580  003CD0  C0D1  F0AB         	movff	sin@f,___flneg@f1
  5581  003CD4  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  5582  003CD8  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  5583  003CDC  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  5584  003CE0  EC1B  F02E         	call	___flneg	;wreg free
  5585  003CE4  C0AB  F0D1         	movff	?___flneg,sin@f
  5586  003CE8  C0AC  F0D2         	movff	?___flneg+1,sin@f+1
  5587  003CEC  C0AD  F0D3         	movff	?___flneg+2,sin@f+2
  5588  003CF0  C0AE  F0D4         	movff	?___flneg+3,sin@f+3
  5589  003CF4  0E01               	movlw	1
  5590  003CF6  0101               	movlb	1	; () banked
  5591  003CF8  6F97               	movwf	sin@sgn& (0+255),b
  5592  003CFA  D000               	goto	l6371
  5593  003CFC                     l6371:
  5594  003CFC  C0D1  F090         	movff	sin@f,___flmul@f1
  5595  003D00  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5596  003D04  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5597  003D08  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5598  003D0C  0E83               	movlw	131
  5599  003D0E  0100               	movlb	0	; () banked
  5600  003D10  6F94               	movwf	___flmul@f2& (0+255),b
  5601  003D12  0EF9               	movlw	249
  5602  003D14  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5603  003D16  0E22               	movlw	34
  5604  003D18  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5605  003D1A  0E3E               	movlw	62
  5606  003D1C  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5607  003D1E  EC1F  F027         	call	___flmul	;wreg free
  5608  003D22  C090  F0D1         	movff	?___flmul,sin@f
  5609  003D26  C091  F0D2         	movff	?___flmul+1,sin@f+1
  5610  003D2A  C092  F0D3         	movff	?___flmul+2,sin@f+2
  5611  003D2E  C093  F0D4         	movff	?___flmul+3,sin@f+3
  5612  003D32  C0D1  F0C9         	movff	sin@f,___flsub@f1
  5613  003D36  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  5614  003D3A  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  5615  003D3E  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  5616  003D42  C0D1  F0BF         	movff	sin@f,floor@x
  5617  003D46  C0D2  F0C0         	movff	sin@f+1,floor@x+1
  5618  003D4A  C0D3  F0C1         	movff	sin@f+2,floor@x+2
  5619  003D4E  C0D4  F0C2         	movff	sin@f+3,floor@x+3
  5620  003D52  EC6C  F028         	call	_floor	;wreg free
  5621  003D56  C0BF  F0CD         	movff	?_floor,___flsub@f2
  5622  003D5A  C0C0  F0CE         	movff	?_floor+1,___flsub@f2+1
  5623  003D5E  C0C1  F0CF         	movff	?_floor+2,___flsub@f2+2
  5624  003D62  C0C2  F0D0         	movff	?_floor+3,___flsub@f2+3
  5625  003D66  EC51  F02D         	call	___flsub	;wreg free
  5626  003D6A  C0C9  F0D1         	movff	?___flsub,sin@f
  5627  003D6E  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  5628  003D72  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  5629  003D76  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  5630  003D7A  C0D1  F090         	movff	sin@f,___flmul@f1
  5631  003D7E  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5632  003D82  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5633  003D86  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5634  003D8A  0E00               	movlw	0
  5635  003D8C  0100               	movlb	0	; () banked
  5636  003D8E  6F94               	movwf	___flmul@f2& (0+255),b
  5637  003D90  0E00               	movlw	0
  5638  003D92  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5639  003D94  0E80               	movlw	128
  5640  003D96  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5641  003D98  0E40               	movlw	64
  5642  003D9A  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5643  003D9C  EC1F  F027         	call	___flmul	;wreg free
  5644  003DA0  C090  F0D1         	movff	?___flmul,sin@f
  5645  003DA4  C091  F0D2         	movff	?___flmul+1,sin@f+1
  5646  003DA8  C092  F0D3         	movff	?___flmul+2,sin@f+2
  5647  003DAC  C093  F0D4         	movff	?___flmul+3,sin@f+3
  5648  003DB0  0E00               	movlw	0
  5649  003DB2  0100               	movlb	0	; () banked
  5650  003DB4  6FB3               	movwf	___flge@ff1& (0+255),b
  5651  003DB6  0E00               	movlw	0
  5652  003DB8  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5653  003DBA  0E00               	movlw	0
  5654  003DBC  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5655  003DBE  0E40               	movlw	64
  5656  003DC0  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5657  003DC2  C0D1  F0B7         	movff	sin@f,___flge@ff2
  5658  003DC6  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  5659  003DCA  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  5660  003DCE  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  5661  003DD2  EC9F  F02A         	call	___flge	;wreg free
  5662  003DD6  0100               	movlb	0	; () banked
  5663  003DD8  B0D8               	btfsc	status,0,c
  5664  003DDA  D026               	goto	l6383
  5665                           
  5666                           ; BSR set to: 0
  5667  003DDC  C0D1  F0C9         	movff	sin@f,___flsub@f1
  5668  003DE0  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  5669  003DE4  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  5670  003DE8  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  5671  003DEC  0E00               	movlw	0
  5672  003DEE  0100               	movlb	0	; () banked
  5673  003DF0  6FCD               	movwf	___flsub@f2& (0+255),b
  5674  003DF2  0E00               	movlw	0
  5675  003DF4  6FCE               	movwf	(___flsub@f2+1)& (0+255),b
  5676  003DF6  0E00               	movlw	0
  5677  003DF8  6FCF               	movwf	(___flsub@f2+2)& (0+255),b
  5678  003DFA  0E40               	movlw	64
  5679  003DFC  6FD0               	movwf	(___flsub@f2+3)& (0+255),b
  5680  003DFE  EC51  F02D         	call	___flsub	;wreg free
  5681  003E02  C0C9  F0D1         	movff	?___flsub,sin@f
  5682  003E06  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  5683  003E0A  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  5684  003E0E  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  5685  003E12  0101               	movlb	1	; () banked
  5686  003E14  5197               	movf	sin@sgn& (0+255),w,b
  5687  003E16  0101               	movlb	1	; () banked
  5688  003E18  A4D8               	btfss	status,2,c
  5689  003E1A  D002               	goto	u7950
  5690  003E1C  0E01               	movlw	1
  5691  003E1E  D001               	goto	u7960
  5692  003E20                     u7950:
  5693  003E20  0E00               	movlw	0
  5694  003E22                     u7960:
  5695  003E22  0101               	movlb	1	; () banked
  5696  003E24  6F97               	movwf	sin@sgn& (0+255),b
  5697  003E26  D000               	goto	l6383
  5698  003E28                     l6383:
  5699  003E28  0E00               	movlw	0
  5700  003E2A  0100               	movlb	0	; () banked
  5701  003E2C  6FB3               	movwf	___flge@ff1& (0+255),b
  5702  003E2E  0E00               	movlw	0
  5703  003E30  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5704  003E32  0E80               	movlw	128
  5705  003E34  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5706  003E36  0E3F               	movlw	63
  5707  003E38  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5708  003E3A  C0D1  F0B7         	movff	sin@f,___flge@ff2
  5709  003E3E  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  5710  003E42  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  5711  003E46  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  5712  003E4A  EC9F  F02A         	call	___flge	;wreg free
  5713  003E4E  0100               	movlb	0	; () banked
  5714  003E50  B0D8               	btfsc	status,0,c
  5715  003E52  D025               	goto	l1457
  5716                           
  5717                           ; BSR set to: 0
  5718  003E54  C0D1  F0AB         	movff	sin@f,___flneg@f1
  5719  003E58  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  5720  003E5C  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  5721  003E60  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  5722  003E64  EC1B  F02E         	call	___flneg	;wreg free
  5723  003E68  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5724  003E6C  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5725  003E70  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5726  003E74  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5727  003E78  0E00               	movlw	0
  5728  003E7A  0100               	movlb	0	; () banked
  5729  003E7C  6FA3               	movwf	___fladd@f2& (0+255),b
  5730  003E7E  0E00               	movlw	0
  5731  003E80  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5732  003E82  0E00               	movlw	0
  5733  003E84  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5734  003E86  0E40               	movlw	64
  5735  003E88  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5736  003E8A  ECF0  F01F         	call	___fladd	;wreg free
  5737  003E8E  C09F  F0D1         	movff	?___fladd,sin@f
  5738  003E92  C0A0  F0D2         	movff	?___fladd+1,sin@f+1
  5739  003E96  C0A1  F0D3         	movff	?___fladd+2,sin@f+2
  5740  003E9A  C0A2  F0D4         	movff	?___fladd+3,sin@f+3
  5741  003E9E                     l1457:
  5742  003E9E  C0D1  F090         	movff	sin@f,___flmul@f1
  5743  003EA2  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5744  003EA6  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5745  003EAA  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5746  003EAE  C0D1  F094         	movff	sin@f,___flmul@f2
  5747  003EB2  C0D2  F095         	movff	sin@f+1,___flmul@f2+1
  5748  003EB6  C0D3  F096         	movff	sin@f+2,___flmul@f2+2
  5749  003EBA  C0D4  F097         	movff	sin@f+3,___flmul@f2+3
  5750  003EBE  EC1F  F027         	call	___flmul	;wreg free
  5751  003EC2  C090  F193         	movff	?___flmul,sin@x2
  5752  003EC6  C091  F194         	movff	?___flmul+1,sin@x2+1
  5753  003ECA  C092  F195         	movff	?___flmul+2,sin@x2+2
  5754  003ECE  C093  F196         	movff	?___flmul+3,sin@x2+3
  5755  003ED2  C193  F0AB         	movff	sin@x2,eval_poly@x
  5756  003ED6  C194  F0AC         	movff	sin@x2+1,eval_poly@x+1
  5757  003EDA  C195  F0AD         	movff	sin@x2+2,eval_poly@x+2
  5758  003EDE  C196  F0AE         	movff	sin@x2+3,eval_poly@x+3
  5759  003EE2  0E41               	movlw	low sin@coeff_b
  5760  003EE4  0100               	movlb	0	; () banked
  5761  003EE6  6FAF               	movwf	eval_poly@d& (0+255),b
  5762  003EE8  0E0D               	movlw	high sin@coeff_b
  5763  003EEA  0100               	movlb	0	; () banked
  5764  003EEC  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  5765  003EEE  0E00               	movlw	0
  5766  003EF0  0100               	movlb	0	; () banked
  5767  003EF2  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  5768  003EF4  0E03               	movlw	3
  5769  003EF6  6FB1               	movwf	eval_poly@n& (0+255),b
  5770  003EF8  EC8A  F029         	call	_eval_poly	;wreg free
  5771  003EFC  C0AB  F18B         	movff	?_eval_poly,sin@y
  5772  003F00  C0AC  F18C         	movff	?_eval_poly+1,sin@y+1
  5773  003F04  C0AD  F18D         	movff	?_eval_poly+2,sin@y+2
  5774  003F08  C0AE  F18E         	movff	?_eval_poly+3,sin@y+3
  5775  003F0C  C18B  F085         	movff	sin@y,___fldiv@f2
  5776  003F10  C18C  F086         	movff	sin@y+1,___fldiv@f2+1
  5777  003F14  C18D  F087         	movff	sin@y+2,___fldiv@f2+2
  5778  003F18  C18E  F088         	movff	sin@y+3,___fldiv@f2+3
  5779  003F1C  0E00               	movlw	0
  5780  003F1E  0100               	movlb	0	; () banked
  5781  003F20  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  5782  003F22  0E04               	movlw	4
  5783  003F24  6FB1               	movwf	eval_poly@n& (0+255),b
  5784  003F26  0E2D               	movlw	low sin@coeff_a
  5785  003F28  0100               	movlb	0	; () banked
  5786  003F2A  6FAF               	movwf	eval_poly@d& (0+255),b
  5787  003F2C  0E0D               	movlw	high sin@coeff_a
  5788  003F2E  0100               	movlb	0	; () banked
  5789  003F30  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  5790  003F32  C193  F0AB         	movff	sin@x2,eval_poly@x
  5791  003F36  C194  F0AC         	movff	sin@x2+1,eval_poly@x+1
  5792  003F3A  C195  F0AD         	movff	sin@x2+2,eval_poly@x+2
  5793  003F3E  C196  F0AE         	movff	sin@x2+3,eval_poly@x+3
  5794  003F42  EC8A  F029         	call	_eval_poly	;wreg free
  5795  003F46  C0AB  F081         	movff	?_eval_poly,___fldiv@f1
  5796  003F4A  C0AC  F082         	movff	?_eval_poly+1,___fldiv@f1+1
  5797  003F4E  C0AD  F083         	movff	?_eval_poly+2,___fldiv@f1+2
  5798  003F52  C0AE  F084         	movff	?_eval_poly+3,___fldiv@f1+3
  5799  003F56  ECD1  F027         	call	___fldiv	;wreg free
  5800  003F5A  C081  F18F         	movff	?___fldiv,_sin$3683
  5801  003F5E  C082  F190         	movff	?___fldiv+1,_sin$3683+1
  5802  003F62  C083  F191         	movff	?___fldiv+2,_sin$3683+2
  5803  003F66  C084  F192         	movff	?___fldiv+3,_sin$3683+3
  5804  003F6A  C0D1  F090         	movff	sin@f,___flmul@f1
  5805  003F6E  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5806  003F72  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5807  003F76  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5808  003F7A  C18F  F094         	movff	_sin$3683,___flmul@f2
  5809  003F7E  C190  F095         	movff	_sin$3683+1,___flmul@f2+1
  5810  003F82  C191  F096         	movff	_sin$3683+2,___flmul@f2+2
  5811  003F86  C192  F097         	movff	_sin$3683+3,___flmul@f2+3
  5812  003F8A  EC1F  F027         	call	___flmul	;wreg free
  5813  003F8E  C090  F0D1         	movff	?___flmul,sin@f
  5814  003F92  C091  F0D2         	movff	?___flmul+1,sin@f+1
  5815  003F96  C092  F0D3         	movff	?___flmul+2,sin@f+2
  5816  003F9A  C093  F0D4         	movff	?___flmul+3,sin@f+3
  5817  003F9E  0101               	movlb	1	; () banked
  5818  003FA0  5197               	movf	sin@sgn& (0+255),w,b
  5819  003FA2  0101               	movlb	1	; () banked
  5820  003FA4  B4D8               	btfsc	status,2,c
  5821  003FA6  D013               	goto	l1458
  5822                           
  5823                           ; BSR set to: 1
  5824  003FA8  C0D1  F0AB         	movff	sin@f,___flneg@f1
  5825  003FAC  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  5826  003FB0  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  5827  003FB4  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  5828  003FB8  EC1B  F02E         	call	___flneg	;wreg free
  5829  003FBC  C0AB  F0D1         	movff	?___flneg,?_sin
  5830  003FC0  C0AC  F0D2         	movff	?___flneg+1,?_sin+1
  5831  003FC4  C0AD  F0D3         	movff	?___flneg+2,?_sin+2
  5832  003FC8  C0AE  F0D4         	movff	?___flneg+3,?_sin+3
  5833  003FCC  0012               	return	
  5834  003FCE                     l1458:
  5835                           
  5836                           ; BSR set to: 1
  5837  003FCE  C0D1  F0D1         	movff	sin@f,?_sin
  5838  003FD2  C0D2  F0D2         	movff	sin@f+1,?_sin+1
  5839  003FD6  C0D3  F0D3         	movff	sin@f+2,?_sin+2
  5840  003FDA  C0D4  F0D4         	movff	sin@f+3,?_sin+3
  5841  003FDE  0012               	return		;funcret
  5842  003FE0                     __end_of_sin:
  5843                           	opt stack 0
  5844                           tblptru	equ	0xFF8
  5845                           tblptrh	equ	0xFF7
  5846                           tblptrl	equ	0xFF6
  5847                           tablat	equ	0xFF5
  5848                           postinc0	equ	0xFEE
  5849                           wreg	equ	0xFE8
  5850                           postdec1	equ	0xFE5
  5851                           fsr1l	equ	0xFE1
  5852                           indf2	equ	0xFDF
  5853                           postinc2	equ	0xFDE
  5854                           postdec2	equ	0xFDD
  5855                           fsr2h	equ	0xFDA
  5856                           fsr2l	equ	0xFD9
  5857                           status	equ	0xFD8
  5858                           
  5859 ;; *************** function _floor *****************
  5860 ;; Defined at:
  5861 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;  x               4   95[BANK0 ] unsigned char 
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;  i               4   99[BANK0 ] unsigned char 
  5866 ;;  expon           2  103[BANK0 ] int 
  5867 ;; Return value:  Size  Location     Type
  5868 ;;                  4   95[BANK0 ] int 
  5869 ;; Registers used:
  5870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5871 ;; Tracked objects:
  5872 ;;		On entry : 0/0
  5873 ;;		On exit  : 0/0
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5876 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5877 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5879 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5880 ;;Total ram usage:       10 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; Hardware stack levels required when called:    7
  5883 ;; This function calls:
  5884 ;;		___altofl
  5885 ;;		___fladd
  5886 ;;		___flge
  5887 ;;		___fltol
  5888 ;;		_frexp
  5889 ;; This function is called by:
  5890 ;;		_sin
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text12
  5895  0050D8                     __ptext12:
  5896                           	opt stack 0
  5897  0050D8                     _floor:
  5898                           	opt stack 19
  5899                           
  5900                           ;incstack = 0
  5901  0050D8  C0BF  F077         	movff	floor@x,frexp@value
  5902  0050DC  C0C0  F078         	movff	floor@x+1,frexp@value+1
  5903  0050E0  C0C1  F079         	movff	floor@x+2,frexp@value+2
  5904  0050E4  C0C2  F07A         	movff	floor@x+3,frexp@value+3
  5905  0050E8  0EC7               	movlw	low floor@expon
  5906  0050EA  0100               	movlb	0	; () banked
  5907  0050EC  6F7B               	movwf	frexp@eptr& (0+255),b
  5908  0050EE  0E00               	movlw	high floor@expon
  5909  0050F0  0100               	movlb	0	; () banked
  5910  0050F2  6F7C               	movwf	(frexp@eptr+1)& (0+255),b
  5911  0050F4  EC54  F02C         	call	_frexp	;wreg free
  5912  0050F8  0100               	movlb	0	; () banked
  5913  0050FA  AFC8               	btfss	(floor@expon+1)& (0+255),7,b
  5914  0050FC  D017               	goto	l6275
  5915                           
  5916                           ; BSR set to: 0
  5917  0050FE  0100               	movlb	0	; () banked
  5918  005100  AFC2               	btfss	(floor@x+3)& (0+255),7,b
  5919  005102  D00A               	goto	l6271
  5920                           
  5921                           ; BSR set to: 0
  5922  005104  0E00               	movlw	0
  5923  005106  0100               	movlb	0	; () banked
  5924  005108  6FBF               	movwf	?_floor& (0+255),b
  5925  00510A  0E00               	movlw	0
  5926  00510C  6FC0               	movwf	(?_floor+1)& (0+255),b
  5927  00510E  0E80               	movlw	128
  5928  005110  6FC1               	movwf	(?_floor+2)& (0+255),b
  5929  005112  0EBF               	movlw	191
  5930  005114  6FC2               	movwf	(?_floor+3)& (0+255),b
  5931                           
  5932                           ; BSR set to: 0
  5933  005116  0012               	return	
  5934  005118                     l6271:
  5935                           
  5936                           ; BSR set to: 0
  5937  005118  0E00               	movlw	0
  5938  00511A  0100               	movlb	0	; () banked
  5939  00511C  6FBF               	movwf	?_floor& (0+255),b
  5940  00511E  0E00               	movlw	0
  5941  005120  6FC0               	movwf	(?_floor+1)& (0+255),b
  5942  005122  0E00               	movlw	0
  5943  005124  6FC1               	movwf	(?_floor+2)& (0+255),b
  5944  005126  0E00               	movlw	0
  5945  005128  6FC2               	movwf	(?_floor+3)& (0+255),b
  5946                           
  5947                           ; BSR set to: 0
  5948  00512A  0012               	return	
  5949  00512C                     l6275:
  5950                           
  5951                           ; BSR set to: 0
  5952  00512C  0100               	movlb	0	; () banked
  5953  00512E  51C8               	movf	(floor@expon+1)& (0+255),w,b
  5954  005130  E105               	bnz	u7800
  5955  005132  0E1D               	movlw	29
  5956  005134  0100               	movlb	0	; () banked
  5957  005136  5DC7               	subwf	floor@expon& (0+255),w,b
  5958  005138  A0D8               	btfss	status,0,c
  5959  00513A  D009               	goto	l6279
  5960  00513C                     u7800:
  5961                           
  5962                           ; BSR set to: 0
  5963  00513C  C0BF  F0BF         	movff	floor@x,?_floor
  5964  005140  C0C0  F0C0         	movff	floor@x+1,?_floor+1
  5965  005144  C0C1  F0C1         	movff	floor@x+2,?_floor+2
  5966  005148  C0C2  F0C2         	movff	floor@x+3,?_floor+3
  5967  00514C  0012               	return	
  5968  00514E                     l6279:
  5969                           
  5970                           ; BSR set to: 0
  5971  00514E  C0BF  F0AF         	movff	floor@x,___fltol@f1
  5972  005152  C0C0  F0B0         	movff	floor@x+1,___fltol@f1+1
  5973  005156  C0C1  F0B1         	movff	floor@x+2,___fltol@f1+2
  5974  00515A  C0C2  F0B2         	movff	floor@x+3,___fltol@f1+3
  5975  00515E  ECFD  F028         	call	___fltol	;wreg free
  5976  005162  C0AF  F0B9         	movff	?___fltol,___altofl@c
  5977  005166  C0B0  F0BA         	movff	?___fltol+1,___altofl@c+1
  5978  00516A  C0B1  F0BB         	movff	?___fltol+2,___altofl@c+2
  5979  00516E  C0B2  F0BC         	movff	?___fltol+3,___altofl@c+3
  5980  005172  EC81  F02D         	call	___altofl	;wreg free
  5981  005176  C0B9  F0C3         	movff	?___altofl,floor@i
  5982  00517A  C0BA  F0C4         	movff	?___altofl+1,floor@i+1
  5983  00517E  C0BB  F0C5         	movff	?___altofl+2,floor@i+2
  5984  005182  C0BC  F0C6         	movff	?___altofl+3,floor@i+3
  5985  005186  C0BF  F0B3         	movff	floor@x,___flge@ff1
  5986  00518A  C0C0  F0B4         	movff	floor@x+1,___flge@ff1+1
  5987  00518E  C0C1  F0B5         	movff	floor@x+2,___flge@ff1+2
  5988  005192  C0C2  F0B6         	movff	floor@x+3,___flge@ff1+3
  5989  005196  C0C3  F0B7         	movff	floor@i,___flge@ff2
  5990  00519A  C0C4  F0B8         	movff	floor@i+1,___flge@ff2+1
  5991  00519E  C0C5  F0B9         	movff	floor@i+2,___flge@ff2+2
  5992  0051A2  C0C6  F0BA         	movff	floor@i+3,___flge@ff2+3
  5993  0051A6  EC9F  F02A         	call	___flge	;wreg free
  5994  0051AA  0100               	movlb	0	; () banked
  5995  0051AC  B0D8               	btfsc	status,0,c
  5996  0051AE  D01C               	goto	l1477
  5997                           
  5998                           ; BSR set to: 0
  5999  0051B0  C0C3  F09F         	movff	floor@i,___fladd@f1
  6000  0051B4  C0C4  F0A0         	movff	floor@i+1,___fladd@f1+1
  6001  0051B8  C0C5  F0A1         	movff	floor@i+2,___fladd@f1+2
  6002  0051BC  C0C6  F0A2         	movff	floor@i+3,___fladd@f1+3
  6003  0051C0  0E00               	movlw	0
  6004  0051C2  0100               	movlb	0	; () banked
  6005  0051C4  6FA3               	movwf	___fladd@f2& (0+255),b
  6006  0051C6  0E00               	movlw	0
  6007  0051C8  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6008  0051CA  0E80               	movlw	128
  6009  0051CC  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6010  0051CE  0EBF               	movlw	191
  6011  0051D0  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6012  0051D2  ECF0  F01F         	call	___fladd	;wreg free
  6013  0051D6  C09F  F0BF         	movff	?___fladd,?_floor
  6014  0051DA  C0A0  F0C0         	movff	?___fladd+1,?_floor+1
  6015  0051DE  C0A1  F0C1         	movff	?___fladd+2,?_floor+2
  6016  0051E2  C0A2  F0C2         	movff	?___fladd+3,?_floor+3
  6017  0051E6  0012               	return	
  6018  0051E8                     l1477:
  6019                           
  6020                           ; BSR set to: 0
  6021  0051E8  C0C3  F0BF         	movff	floor@i,?_floor
  6022  0051EC  C0C4  F0C0         	movff	floor@i+1,?_floor+1
  6023  0051F0  C0C5  F0C1         	movff	floor@i+2,?_floor+2
  6024  0051F4  C0C6  F0C2         	movff	floor@i+3,?_floor+3
  6025  0051F8  0012               	return		;funcret
  6026  0051FA                     __end_of_floor:
  6027                           	opt stack 0
  6028                           tblptru	equ	0xFF8
  6029                           tblptrh	equ	0xFF7
  6030                           tblptrl	equ	0xFF6
  6031                           tablat	equ	0xFF5
  6032                           postinc0	equ	0xFEE
  6033                           wreg	equ	0xFE8
  6034                           postdec1	equ	0xFE5
  6035                           fsr1l	equ	0xFE1
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           postdec2	equ	0xFDD
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _frexp *****************
  6044 ;; Defined at:
  6045 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  value           4   23[BANK0 ] int 
  6048 ;;  eptr            2   27[BANK0 ] PTR int 
  6049 ;;		 -> floor@expon(2), 
  6050 ;; Auto vars:     Size  Location     Type
  6051 ;;		None
  6052 ;; Return value:  Size  Location     Type
  6053 ;;                  4   23[BANK0 ] PTR int 
  6054 ;; Registers used:
  6055 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6056 ;; Tracked objects:
  6057 ;;		On entry : 0/0
  6058 ;;		On exit  : 0/0
  6059 ;;		Unchanged: 0/0
  6060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6061 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6063 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6064 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6065 ;;Total ram usage:        8 bytes
  6066 ;; Hardware stack levels used:    1
  6067 ;; Hardware stack levels required when called:    5
  6068 ;; This function calls:
  6069 ;;		Nothing
  6070 ;; This function is called by:
  6071 ;;		_floor
  6072 ;; This function uses a non-reentrant model
  6073 ;;
  6074                           
  6075                           	psect	text13
  6076  0058A8                     __ptext13:
  6077                           	opt stack 0
  6078  0058A8                     _frexp:
  6079                           	opt stack 20
  6080                           
  6081                           ;incstack = 0
  6082  0058A8  0100               	movlb	0	; () banked
  6083  0058AA  5177               	movf	frexp@value& (0+255),w,b
  6084  0058AC  0100               	movlb	0	; () banked
  6085  0058AE  1178               	iorwf	(frexp@value+1)& (0+255),w,b
  6086  0058B0  0100               	movlb	0	; () banked
  6087  0058B2  1179               	iorwf	(frexp@value+2)& (0+255),w,b
  6088  0058B4  0100               	movlb	0	; () banked
  6089  0058B6  117A               	iorwf	(frexp@value+3)& (0+255),w,b
  6090  0058B8  A4D8               	btfss	status,2,c
  6091  0058BA  D009               	goto	l6191
  6092                           
  6093                           ; BSR set to: 0
  6094  0058BC  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6095  0058C0  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6096  0058C4  0E00               	movlw	0
  6097  0058C6  6EDE               	movwf	postinc2,c
  6098  0058C8  0E00               	movlw	0
  6099  0058CA  6EDD               	movwf	postdec2,c
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;	Return value of _frexp is never used
  6103  0058CC  0012               	return	
  6104  0058CE                     l6191:
  6105                           
  6106                           ; BSR set to: 0
  6107  0058CE  0100               	movlb	0	; () banked
  6108  0058D0  517A               	movf	(frexp@value+3)& (0+255),w,b
  6109  0058D2  0B7F               	andlw	127
  6110  0058D4  0100               	movlb	0	; () banked
  6111  0058D6  6F7D               	movwf	??_frexp& (0+255),b
  6112  0058D8  6B7E               	clrf	(??_frexp+1)& (0+255),b
  6113  0058DA  90D8               	bcf	status,0,c
  6114  0058DC  0100               	movlb	0	; () banked
  6115  0058DE  377D               	rlcf	??_frexp& (0+255),f,b
  6116  0058E0  377E               	rlcf	(??_frexp+1)& (0+255),f,b
  6117  0058E2  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6118  0058E6  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6119  0058EA  C07D  FFDE         	movff	??_frexp,postinc2
  6120  0058EE  C07E  FFDD         	movff	??_frexp+1,postdec2
  6121  0058F2  0100               	movlb	0	; () banked
  6122  0058F4  AF79               	btfss	(frexp@value+2)& (0+255),7,b
  6123  0058F6  D004               	goto	u7710
  6124  0058F8  0100               	movlb	0	; () banked
  6125  0058FA  6B7D               	clrf	??_frexp& (0+255),b
  6126  0058FC  2B7D               	incf	??_frexp& (0+255),f,b
  6127  0058FE  D002               	goto	u7718
  6128  005900                     u7710:
  6129  005900  0100               	movlb	0	; () banked
  6130  005902  6B7D               	clrf	??_frexp& (0+255),b
  6131  005904                     u7718:
  6132  005904  0100               	movlb	0	; () banked
  6133  005906  517D               	movf	??_frexp& (0+255),w,b
  6134  005908  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6135  00590C  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6136  005910  12DE               	iorwf	postinc2,f,c
  6137  005912  0E00               	movlw	0
  6138  005914  12DD               	iorwf	postdec2,f,c
  6139                           
  6140                           ; BSR set to: 0
  6141  005916  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6142  00591A  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6143  00591E  0E82               	movlw	130
  6144  005920  26DE               	addwf	postinc2,f,c
  6145  005922  0EFF               	movlw	255
  6146  005924  22DD               	addwfc	postdec2,f,c
  6147                           
  6148                           ; BSR set to: 0
  6149  005926  817A               	bsf	(frexp@value+3)& (0+255),0,b
  6150  005928  837A               	bsf	(frexp@value+3)& (0+255),1,b
  6151  00592A  857A               	bsf	(frexp@value+3)& (0+255),2,b
  6152  00592C  877A               	bsf	(frexp@value+3)& (0+255),3,b
  6153  00592E  897A               	bsf	(frexp@value+3)& (0+255),4,b
  6154  005930  8B7A               	bsf	(frexp@value+3)& (0+255),5,b
  6155  005932  9D7A               	bcf	(frexp@value+3)& (0+255),6,b
  6156                           
  6157                           ; BSR set to: 0
  6158  005934  0100               	movlb	0	; () banked
  6159  005936  9F79               	bcf	(frexp@value+2)& (0+255),7,b
  6160  005938  0012               	return	
  6161                           
  6162                           ; BSR set to: 0
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;	Return value of _frexp is never used
  6166  00593A  0012               	return		;funcret
  6167  00593C                     __end_of_frexp:
  6168                           	opt stack 0
  6169                           tblptru	equ	0xFF8
  6170                           tblptrh	equ	0xFF7
  6171                           tblptrl	equ	0xFF6
  6172                           tablat	equ	0xFF5
  6173                           postinc0	equ	0xFEE
  6174                           wreg	equ	0xFE8
  6175                           postdec1	equ	0xFE5
  6176                           fsr1l	equ	0xFE1
  6177                           indf2	equ	0xFDF
  6178                           postinc2	equ	0xFDE
  6179                           postdec2	equ	0xFDD
  6180                           fsr2h	equ	0xFDA
  6181                           fsr2l	equ	0xFD9
  6182                           status	equ	0xFD8
  6183                           
  6184 ;; *************** function ___fltol *****************
  6185 ;; Defined at:
  6186 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  6187 ;; Parameters:    Size  Location     Type
  6188 ;;  f1              4   79[BANK0 ] PTR int 
  6189 ;; Auto vars:     Size  Location     Type
  6190 ;;  exp1            1   88[BANK0 ] unsigned char 
  6191 ;;  sign1           1   87[BANK0 ] unsigned char 
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  4   79[BANK0 ] long 
  6194 ;; Registers used:
  6195 ;;		wreg, status,2, status,0
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6201 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6202 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6203 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;Total ram usage:       10 bytes
  6206 ;; Hardware stack levels used:    1
  6207 ;; Hardware stack levels required when called:    5
  6208 ;; This function calls:
  6209 ;;		Nothing
  6210 ;; This function is called by:
  6211 ;;		_park_routine
  6212 ;;		_parallelo
  6213 ;;		_floor
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           	psect	text14
  6218  0051FA                     __ptext14:
  6219                           	opt stack 0
  6220  0051FA                     ___fltol:
  6221                           	opt stack 23
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;incstack = 0
  6225  0051FA  0100               	movlb	0	; () banked
  6226  0051FC  35B1               	rlcf	(___fltol@f1+2)& (0+255),w,b
  6227  0051FE  35B2               	rlcf	(___fltol@f1+3)& (0+255),w,b
  6228  005200  0100               	movlb	0	; () banked
  6229  005202  6FB8               	movwf	___fltol@exp1& (0+255),b
  6230  005204  0100               	movlb	0	; () banked
  6231  005206  51B8               	movf	___fltol@exp1& (0+255),w,b
  6232  005208  A4D8               	btfss	status,2,c
  6233  00520A  D00A               	goto	l6147
  6234                           
  6235                           ; BSR set to: 0
  6236  00520C  0E00               	movlw	0
  6237  00520E  0100               	movlb	0	; () banked
  6238  005210  6FAF               	movwf	?___fltol& (0+255),b
  6239  005212  0E00               	movlw	0
  6240  005214  6FB0               	movwf	(?___fltol+1)& (0+255),b
  6241  005216  0E00               	movlw	0
  6242  005218  6FB1               	movwf	(?___fltol+2)& (0+255),b
  6243  00521A  0E00               	movlw	0
  6244  00521C  6FB2               	movwf	(?___fltol+3)& (0+255),b
  6245                           
  6246                           ; BSR set to: 0
  6247  00521E  0012               	return	
  6248  005220                     l6147:
  6249                           
  6250                           ; BSR set to: 0
  6251  005220  C0AF  F0B3         	movff	___fltol@f1,??___fltol
  6252  005224  C0B0  F0B4         	movff	___fltol@f1+1,??___fltol+1
  6253  005228  C0B1  F0B5         	movff	___fltol@f1+2,??___fltol+2
  6254  00522C  C0B2  F0B6         	movff	___fltol@f1+3,??___fltol+3
  6255  005230  0E20               	movlw	32
  6256  005232  D006               	goto	u7640
  6257  005234                     u7645:
  6258  005234  0100               	movlb	0	; () banked
  6259  005236  90D8               	bcf	status,0,c
  6260  005238  33B6               	rrcf	(??___fltol+3)& (0+255),f,b
  6261  00523A  33B5               	rrcf	(??___fltol+2)& (0+255),f,b
  6262  00523C  33B4               	rrcf	(??___fltol+1)& (0+255),f,b
  6263  00523E  33B3               	rrcf	??___fltol& (0+255),f,b
  6264  005240                     u7640:
  6265  005240  2EE8               	decfsz	wreg,f,c
  6266  005242  D7F8               	goto	u7645
  6267  005244  0100               	movlb	0	; () banked
  6268  005246  51B3               	movf	??___fltol& (0+255),w,b
  6269  005248  0100               	movlb	0	; () banked
  6270  00524A  6FB7               	movwf	___fltol@sign1& (0+255),b
  6271                           
  6272                           ; BSR set to: 0
  6273  00524C  0100               	movlb	0	; () banked
  6274  00524E  8FB1               	bsf	(___fltol@f1+2)& (0+255),7,b
  6275                           
  6276                           ; BSR set to: 0
  6277  005250  0EFF               	movlw	255
  6278  005252  0100               	movlb	0	; () banked
  6279  005254  17AF               	andwf	___fltol@f1& (0+255),f,b
  6280  005256  0EFF               	movlw	255
  6281  005258  17B0               	andwf	(___fltol@f1+1)& (0+255),f,b
  6282  00525A  0EFF               	movlw	255
  6283  00525C  17B1               	andwf	(___fltol@f1+2)& (0+255),f,b
  6284  00525E  0E00               	movlw	0
  6285  005260  17B2               	andwf	(___fltol@f1+3)& (0+255),f,b
  6286                           
  6287                           ; BSR set to: 0
  6288  005262  0E96               	movlw	150
  6289  005264  0100               	movlb	0	; () banked
  6290  005266  5FB8               	subwf	___fltol@exp1& (0+255),f,b
  6291                           
  6292                           ; BSR set to: 0
  6293  005268  0100               	movlb	0	; () banked
  6294  00526A  AFB8               	btfss	___fltol@exp1& (0+255),7,b
  6295  00526C  D01B               	goto	l6167
  6296                           
  6297                           ; BSR set to: 0
  6298  00526E  0100               	movlb	0	; () banked
  6299  005270  51B8               	movf	___fltol@exp1& (0+255),w,b
  6300  005272  0A80               	xorlw	128
  6301  005274  0F97               	addlw	151
  6302  005276  B0D8               	btfsc	status,0,c
  6303  005278  D00B               	goto	l6163
  6304                           
  6305                           ; BSR set to: 0
  6306  00527A  0E00               	movlw	0
  6307  00527C  0100               	movlb	0	; () banked
  6308  00527E  6FAF               	movwf	?___fltol& (0+255),b
  6309  005280  0E00               	movlw	0
  6310  005282  6FB0               	movwf	(?___fltol+1)& (0+255),b
  6311  005284  0E00               	movlw	0
  6312  005286  6FB1               	movwf	(?___fltol+2)& (0+255),b
  6313  005288  0E00               	movlw	0
  6314  00528A  6FB2               	movwf	(?___fltol+3)& (0+255),b
  6315                           
  6316                           ; BSR set to: 0
  6317  00528C  0012               	return	
  6318                           
  6319                           ; BSR set to: 0
  6320  00528E  D000               	goto	l6163
  6321  005290                     l6163:
  6322                           
  6323                           ; BSR set to: 0
  6324  005290  0100               	movlb	0	; () banked
  6325  005292  90D8               	bcf	status,0,c
  6326  005294  33B2               	rrcf	(___fltol@f1+3)& (0+255),f,b
  6327  005296  33B1               	rrcf	(___fltol@f1+2)& (0+255),f,b
  6328  005298  33B0               	rrcf	(___fltol@f1+1)& (0+255),f,b
  6329  00529A  33AF               	rrcf	___fltol@f1& (0+255),f,b
  6330                           
  6331                           ; BSR set to: 0
  6332  00529C  0100               	movlb	0	; () banked
  6333  00529E  3FB8               	incfsz	___fltol@exp1& (0+255),f,b
  6334  0052A0  D7F7               	goto	l6163
  6335                           
  6336                           ; BSR set to: 0
  6337  0052A2  D01F               	goto	l6177
  6338  0052A4                     l6167:
  6339                           
  6340                           ; BSR set to: 0
  6341  0052A4  0E1F               	movlw	31
  6342  0052A6  0100               	movlb	0	; () banked
  6343  0052A8  65B8               	cpfsgt	___fltol@exp1& (0+255),b
  6344  0052AA  D014               	goto	l6175
  6345                           
  6346                           ; BSR set to: 0
  6347  0052AC  0E00               	movlw	0
  6348  0052AE  0100               	movlb	0	; () banked
  6349  0052B0  6FAF               	movwf	?___fltol& (0+255),b
  6350  0052B2  0E00               	movlw	0
  6351  0052B4  6FB0               	movwf	(?___fltol+1)& (0+255),b
  6352  0052B6  0E00               	movlw	0
  6353  0052B8  6FB1               	movwf	(?___fltol+2)& (0+255),b
  6354  0052BA  0E00               	movlw	0
  6355  0052BC  6FB2               	movwf	(?___fltol+3)& (0+255),b
  6356                           
  6357                           ; BSR set to: 0
  6358  0052BE  0012               	return	
  6359                           
  6360                           ; BSR set to: 0
  6361  0052C0  D009               	goto	l6175
  6362  0052C2                     l6173:
  6363                           
  6364                           ; BSR set to: 0
  6365  0052C2  0100               	movlb	0	; () banked
  6366  0052C4  90D8               	bcf	status,0,c
  6367  0052C6  37AF               	rlcf	___fltol@f1& (0+255),f,b
  6368  0052C8  37B0               	rlcf	(___fltol@f1+1)& (0+255),f,b
  6369  0052CA  37B1               	rlcf	(___fltol@f1+2)& (0+255),f,b
  6370  0052CC  37B2               	rlcf	(___fltol@f1+3)& (0+255),f,b
  6371  0052CE  0100               	movlb	0	; () banked
  6372  0052D0  07B8               	decf	___fltol@exp1& (0+255),f,b
  6373  0052D2  D000               	goto	l6175
  6374  0052D4                     l6175:
  6375                           
  6376                           ; BSR set to: 0
  6377  0052D4  0100               	movlb	0	; () banked
  6378  0052D6  51B8               	movf	___fltol@exp1& (0+255),w,b
  6379  0052D8  0100               	movlb	0	; () banked
  6380  0052DA  B4D8               	btfsc	status,2,c
  6381  0052DC  D002               	goto	l6177
  6382  0052DE  D7F1               	goto	l6173
  6383                           
  6384                           ; BSR set to: 0
  6385  0052E0  D000               	goto	l6177
  6386  0052E2                     l6177:
  6387                           
  6388                           ; BSR set to: 0
  6389  0052E2  0100               	movlb	0	; () banked
  6390  0052E4  51B7               	movf	___fltol@sign1& (0+255),w,b
  6391  0052E6  0100               	movlb	0	; () banked
  6392  0052E8  B4D8               	btfsc	status,2,c
  6393  0052EA  D00A               	goto	l6181
  6394                           
  6395                           ; BSR set to: 0
  6396  0052EC  0100               	movlb	0	; () banked
  6397  0052EE  1FB2               	comf	(___fltol@f1+3)& (0+255),f,b
  6398  0052F0  1FB1               	comf	(___fltol@f1+2)& (0+255),f,b
  6399  0052F2  1FB0               	comf	(___fltol@f1+1)& (0+255),f,b
  6400  0052F4  6DAF               	negf	___fltol@f1& (0+255),b
  6401  0052F6  0E00               	movlw	0
  6402  0052F8  23B0               	addwfc	(___fltol@f1+1)& (0+255),f,b
  6403  0052FA  23B1               	addwfc	(___fltol@f1+2)& (0+255),f,b
  6404  0052FC  23B2               	addwfc	(___fltol@f1+3)& (0+255),f,b
  6405  0052FE  D000               	goto	l6181
  6406  005300                     l6181:
  6407                           
  6408                           ; BSR set to: 0
  6409  005300  C0AF  F0AF         	movff	___fltol@f1,?___fltol
  6410  005304  C0B0  F0B0         	movff	___fltol@f1+1,?___fltol+1
  6411  005308  C0B1  F0B1         	movff	___fltol@f1+2,?___fltol+2
  6412  00530C  C0B2  F0B2         	movff	___fltol@f1+3,?___fltol+3
  6413  005310  0012               	return	
  6414                           
  6415                           ; BSR set to: 0
  6416                           
  6417                           ; BSR set to: 0
  6418  005312  0012               	return		;funcret
  6419  005314                     __end_of___fltol:
  6420                           	opt stack 0
  6421                           tblptru	equ	0xFF8
  6422                           tblptrh	equ	0xFF7
  6423                           tblptrl	equ	0xFF6
  6424                           tablat	equ	0xFF5
  6425                           postinc0	equ	0xFEE
  6426                           wreg	equ	0xFE8
  6427                           postdec1	equ	0xFE5
  6428                           fsr1l	equ	0xFE1
  6429                           indf2	equ	0xFDF
  6430                           postinc2	equ	0xFDE
  6431                           postdec2	equ	0xFDD
  6432                           fsr2h	equ	0xFDA
  6433                           fsr2l	equ	0xFD9
  6434                           status	equ	0xFD8
  6435                           
  6436 ;; *************** function ___altofl *****************
  6437 ;; Defined at:
  6438 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;  c               4   89[BANK0 ] long 
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;  sign            1   93[BANK0 ] unsigned char 
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  4   89[BANK0 ] unsigned char 
  6445 ;; Registers used:
  6446 ;;		wreg, status,2, status,0, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6452 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;Total ram usage:        5 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    6
  6459 ;; This function calls:
  6460 ;;		___flpack
  6461 ;; This function is called by:
  6462 ;;		_floor
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           	psect	text15
  6467  005B02                     __ptext15:
  6468                           	opt stack 0
  6469  005B02                     ___altofl:
  6470                           	opt stack 19
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;incstack = 0
  6474  005B02  0E00               	movlw	0
  6475  005B04  0100               	movlb	0	; () banked
  6476  005B06  6FBD               	movwf	___altofl@sign& (0+255),b
  6477                           
  6478                           ; BSR set to: 0
  6479  005B08  0100               	movlb	0	; () banked
  6480  005B0A  AFBC               	btfss	(___altofl@c+3)& (0+255),7,b
  6481  005B0C  D00D               	goto	l5997
  6482                           
  6483                           ; BSR set to: 0
  6484  005B0E  0100               	movlb	0	; () banked
  6485  005B10  1FBC               	comf	(___altofl@c+3)& (0+255),f,b
  6486  005B12  1FBB               	comf	(___altofl@c+2)& (0+255),f,b
  6487  005B14  1FBA               	comf	(___altofl@c+1)& (0+255),f,b
  6488  005B16  6DB9               	negf	___altofl@c& (0+255),b
  6489  005B18  0E00               	movlw	0
  6490  005B1A  23BA               	addwfc	(___altofl@c+1)& (0+255),f,b
  6491  005B1C  23BB               	addwfc	(___altofl@c+2)& (0+255),f,b
  6492  005B1E  23BC               	addwfc	(___altofl@c+3)& (0+255),f,b
  6493                           
  6494                           ; BSR set to: 0
  6495  005B20  0E01               	movlw	1
  6496  005B22  0100               	movlb	0	; () banked
  6497  005B24  6FBD               	movwf	___altofl@sign& (0+255),b
  6498  005B26  D000               	goto	l5997
  6499  005B28                     l5997:
  6500                           
  6501                           ; BSR set to: 0
  6502  005B28  C0B9  F077         	movff	___altofl@c,___flpack@arg
  6503  005B2C  C0BA  F078         	movff	___altofl@c+1,___flpack@arg+1
  6504  005B30  C0BB  F079         	movff	___altofl@c+2,___flpack@arg+2
  6505  005B34  C0BC  F07A         	movff	___altofl@c+3,___flpack@arg+3
  6506  005B38  0E96               	movlw	150
  6507  005B3A  0100               	movlb	0	; () banked
  6508  005B3C  6F7B               	movwf	___flpack@exp& (0+255),b
  6509  005B3E  C0BD  F07C         	movff	___altofl@sign,___flpack@sign
  6510  005B42  EC5F  F026         	call	___flpack	;wreg free
  6511  005B46  C077  F0B9         	movff	?___flpack,?___altofl
  6512  005B4A  C078  F0BA         	movff	?___flpack+1,?___altofl+1
  6513  005B4E  C079  F0BB         	movff	?___flpack+2,?___altofl+2
  6514  005B52  C07A  F0BC         	movff	?___flpack+3,?___altofl+3
  6515  005B56  0012               	return	
  6516  005B58  0012               	return		;funcret
  6517  005B5A                     __end_of___altofl:
  6518                           	opt stack 0
  6519                           tblptru	equ	0xFF8
  6520                           tblptrh	equ	0xFF7
  6521                           tblptrl	equ	0xFF6
  6522                           tablat	equ	0xFF5
  6523                           postinc0	equ	0xFEE
  6524                           wreg	equ	0xFE8
  6525                           postdec1	equ	0xFE5
  6526                           fsr1l	equ	0xFE1
  6527                           indf2	equ	0xFDF
  6528                           postinc2	equ	0xFDE
  6529                           postdec2	equ	0xFDD
  6530                           fsr2h	equ	0xFDA
  6531                           fsr2l	equ	0xFD9
  6532                           status	equ	0xFD8
  6533                           
  6534 ;; *************** function _asin *****************
  6535 ;; Defined at:
  6536 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\asin.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  x               4   21[BANK1 ] unsigned char 
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  y               4   41[BANK1 ] unsigned char 
  6541 ;;  sgn             4   25[BANK1 ] unsigned char 
  6542 ;; Return value:  Size  Location     Type
  6543 ;;                  4   21[BANK1 ] unsigned char 
  6544 ;; Registers used:
  6545 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6546 ;; Tracked objects:
  6547 ;;		On entry : 0/0
  6548 ;;		On exit  : 0/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6551 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;      Totals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;Total ram usage:       28 bytes
  6556 ;; Hardware stack levels used:    1
  6557 ;; Hardware stack levels required when called:    9
  6558 ;; This function calls:
  6559 ;;		___fladd
  6560 ;;		___fldiv
  6561 ;;		___flge
  6562 ;;		___flmul
  6563 ;;		___flneg
  6564 ;;		_atan
  6565 ;;		_fabs
  6566 ;;		_sqrt
  6567 ;; This function is called by:
  6568 ;;		_parallelo
  6569 ;;		_matematica
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           	psect	text16
  6574  0039A0                     __ptext16:
  6575                           	opt stack 0
  6576  0039A0                     _asin:
  6577                           	opt stack 19
  6578                           
  6579                           ;incstack = 0
  6580  0039A0  0E00               	movlw	0
  6581  0039A2  0100               	movlb	0	; () banked
  6582  0039A4  6FB3               	movwf	___flge@ff1& (0+255),b
  6583  0039A6  0E00               	movlw	0
  6584  0039A8  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6585  0039AA  0E80               	movlw	128
  6586  0039AC  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6587  0039AE  0E3F               	movlw	63
  6588  0039B0  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6589  0039B2  C1A0  F0AF         	movff	asin@x,fabs@d
  6590  0039B6  C1A1  F0B0         	movff	asin@x+1,fabs@d+1
  6591  0039BA  C1A2  F0B1         	movff	asin@x+2,fabs@d+2
  6592  0039BE  C1A3  F0B2         	movff	asin@x+3,fabs@d+3
  6593  0039C2  ECFC  F02D         	call	_fabs	;wreg free
  6594  0039C6  C0AF  F0B7         	movff	?_fabs,___flge@ff2
  6595  0039CA  C0B0  F0B8         	movff	?_fabs+1,___flge@ff2+1
  6596  0039CE  C0B1  F0B9         	movff	?_fabs+2,___flge@ff2+2
  6597  0039D2  C0B2  F0BA         	movff	?_fabs+3,___flge@ff2+3
  6598  0039D6  EC9F  F02A         	call	___flge	;wreg free
  6599  0039DA  0100               	movlb	0	; () banked
  6600  0039DC  B0D8               	btfsc	status,0,c
  6601  0039DE  D00F               	goto	l6445
  6602                           
  6603                           ; BSR set to: 0
  6604  0039E0  0E00               	movlw	0
  6605  0039E2  0100               	movlb	0	; () banked
  6606  0039E4  6FE4               	movwf	(_errno+1)& (0+255),b
  6607  0039E6  0E21               	movlw	33
  6608  0039E8  6FE3               	movwf	_errno& (0+255),b
  6609  0039EA  0E00               	movlw	0
  6610  0039EC  0101               	movlb	1	; () banked
  6611  0039EE  6FA0               	movwf	?_asin& (0+255),b
  6612  0039F0  0E00               	movlw	0
  6613  0039F2  6FA1               	movwf	(?_asin+1)& (0+255),b
  6614  0039F4  0E00               	movlw	0
  6615  0039F6  6FA2               	movwf	(?_asin+2)& (0+255),b
  6616  0039F8  0E00               	movlw	0
  6617  0039FA  6FA3               	movwf	(?_asin+3)& (0+255),b
  6618                           
  6619                           ; BSR set to: 1
  6620  0039FC  0012               	return	
  6621  0039FE                     l6445:
  6622  0039FE  0E00               	movlw	0
  6623  003A00  0101               	movlb	1	; () banked
  6624  003A02  6FA4               	movwf	asin@sgn& (0+255),b
  6625  003A04  0E00               	movlw	0
  6626  003A06  6FA5               	movwf	(asin@sgn+1)& (0+255),b
  6627  003A08  0E80               	movlw	128
  6628  003A0A  6FA6               	movwf	(asin@sgn+2)& (0+255),b
  6629  003A0C  0E3F               	movlw	63
  6630  003A0E  6FA7               	movwf	(asin@sgn+3)& (0+255),b
  6631                           
  6632                           ; BSR set to: 1
  6633  003A10  C1A0  F094         	movff	asin@x,___flmul@f2
  6634  003A14  C1A1  F095         	movff	asin@x+1,___flmul@f2+1
  6635  003A18  C1A2  F096         	movff	asin@x+2,___flmul@f2+2
  6636  003A1C  C1A3  F097         	movff	asin@x+3,___flmul@f2+3
  6637  003A20  C1A0  F090         	movff	asin@x,___flmul@f1
  6638  003A24  C1A1  F091         	movff	asin@x+1,___flmul@f1+1
  6639  003A28  C1A2  F092         	movff	asin@x+2,___flmul@f1+2
  6640  003A2C  C1A3  F093         	movff	asin@x+3,___flmul@f1+3
  6641  003A30  EC1F  F027         	call	___flmul	;wreg free
  6642  003A34  C090  F0AB         	movff	?___flmul,___flneg@f1
  6643  003A38  C091  F0AC         	movff	?___flmul+1,___flneg@f1+1
  6644  003A3C  C092  F0AD         	movff	?___flmul+2,___flneg@f1+2
  6645  003A40  C093  F0AE         	movff	?___flmul+3,___flneg@f1+3
  6646  003A44  EC1B  F02E         	call	___flneg	;wreg free
  6647  003A48  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6648  003A4C  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6649  003A50  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6650  003A54  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6651  003A58  0E00               	movlw	0
  6652  003A5A  0100               	movlb	0	; () banked
  6653  003A5C  6FA3               	movwf	___fladd@f2& (0+255),b
  6654  003A5E  0E00               	movlw	0
  6655  003A60  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6656  003A62  0E80               	movlw	128
  6657  003A64  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6658  003A66  0E3F               	movlw	63
  6659  003A68  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6660  003A6A  ECF0  F01F         	call	___fladd	;wreg free
  6661  003A6E  C09F  F1A8         	movff	?___fladd,_asin$3678
  6662  003A72  C0A0  F1A9         	movff	?___fladd+1,_asin$3678+1
  6663  003A76  C0A1  F1AA         	movff	?___fladd+2,_asin$3678+2
  6664  003A7A  C0A2  F1AB         	movff	?___fladd+3,_asin$3678+3
  6665  003A7E  C1A8  F0D1         	movff	_asin$3678,sqrt@y
  6666  003A82  C1A9  F0D2         	movff	_asin$3678+1,sqrt@y+1
  6667  003A86  C1AA  F0D3         	movff	_asin$3678+2,sqrt@y+2
  6668  003A8A  C1AB  F0D4         	movff	_asin$3678+3,sqrt@y+3
  6669  003A8E  EC7F  F023         	call	_sqrt	;wreg free
  6670  003A92  C0D1  F1B4         	movff	?_sqrt,asin@y
  6671  003A96  C0D2  F1B5         	movff	?_sqrt+1,asin@y+1
  6672  003A9A  C0D3  F1B6         	movff	?_sqrt+2,asin@y+2
  6673  003A9E  C0D4  F1B7         	movff	?_sqrt+3,asin@y+3
  6674  003AA2  C1A0  F0AF         	movff	asin@x,fabs@d
  6675  003AA6  C1A1  F0B0         	movff	asin@x+1,fabs@d+1
  6676  003AAA  C1A2  F0B1         	movff	asin@x+2,fabs@d+2
  6677  003AAE  C1A3  F0B2         	movff	asin@x+3,fabs@d+3
  6678  003AB2  ECFC  F02D         	call	_fabs	;wreg free
  6679  003AB6  C0AF  F0B3         	movff	?_fabs,___flge@ff1
  6680  003ABA  C0B0  F0B4         	movff	?_fabs+1,___flge@ff1+1
  6681  003ABE  C0B1  F0B5         	movff	?_fabs+2,___flge@ff1+2
  6682  003AC2  C0B2  F0B6         	movff	?_fabs+3,___flge@ff1+3
  6683  003AC6  0E8F               	movlw	143
  6684  003AC8  0100               	movlb	0	; () banked
  6685  003ACA  6FB7               	movwf	___flge@ff2& (0+255),b
  6686  003ACC  0EC2               	movlw	194
  6687  003ACE  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  6688  003AD0  0E35               	movlw	53
  6689  003AD2  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  6690  003AD4  0E3F               	movlw	63
  6691  003AD6  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  6692  003AD8  EC9F  F02A         	call	___flge	;wreg free
  6693  003ADC  0100               	movlb	0	; () banked
  6694  003ADE  B0D8               	btfsc	status,0,c
  6695  003AE0  D02D               	goto	l6459
  6696                           
  6697                           ; BSR set to: 0
  6698  003AE2  C1A0  F081         	movff	asin@x,___fldiv@f1
  6699  003AE6  C1A1  F082         	movff	asin@x+1,___fldiv@f1+1
  6700  003AEA  C1A2  F083         	movff	asin@x+2,___fldiv@f1+2
  6701  003AEE  C1A3  F084         	movff	asin@x+3,___fldiv@f1+3
  6702  003AF2  C1B4  F085         	movff	asin@y,___fldiv@f2
  6703  003AF6  C1B5  F086         	movff	asin@y+1,___fldiv@f2+1
  6704  003AFA  C1B6  F087         	movff	asin@y+2,___fldiv@f2+2
  6705  003AFE  C1B7  F088         	movff	asin@y+3,___fldiv@f2+3
  6706  003B02  ECD1  F027         	call	___fldiv	;wreg free
  6707  003B06  C081  F1B8         	movff	?___fldiv,_asin$3679
  6708  003B0A  C082  F1B9         	movff	?___fldiv+1,_asin$3679+1
  6709  003B0E  C083  F1BA         	movff	?___fldiv+2,_asin$3679+2
  6710  003B12  C084  F1BB         	movff	?___fldiv+3,_asin$3679+3
  6711  003B16  C1B8  F0BF         	movff	_asin$3679,atan@f
  6712  003B1A  C1B9  F0C0         	movff	_asin$3679+1,atan@f+1
  6713  003B1E  C1BA  F0C1         	movff	_asin$3679+2,atan@f+2
  6714  003B22  C1BB  F0C2         	movff	_asin$3679+3,atan@f+3
  6715  003B26  EC54  F022         	call	_atan	;wreg free
  6716  003B2A  C0BF  F1A0         	movff	?_atan,?_asin
  6717  003B2E  C0C0  F1A1         	movff	?_atan+1,?_asin+1
  6718  003B32  C0C1  F1A2         	movff	?_atan+2,?_asin+2
  6719  003B36  C0C2  F1A3         	movff	?_atan+3,?_asin+3
  6720  003B3A  0012               	return	
  6721  003B3C                     l6459:
  6722  003B3C  0101               	movlb	1	; () banked
  6723  003B3E  AFA3               	btfss	(asin@x+3)& (0+255),7,b
  6724  003B40  D06E               	goto	l6471
  6725                           
  6726                           ; BSR set to: 1
  6727  003B42  C1A0  F085         	movff	asin@x,___fldiv@f2
  6728  003B46  C1A1  F086         	movff	asin@x+1,___fldiv@f2+1
  6729  003B4A  C1A2  F087         	movff	asin@x+2,___fldiv@f2+2
  6730  003B4E  C1A3  F088         	movff	asin@x+3,___fldiv@f2+3
  6731  003B52  C1B4  F0AB         	movff	asin@y,___flneg@f1
  6732  003B56  C1B5  F0AC         	movff	asin@y+1,___flneg@f1+1
  6733  003B5A  C1B6  F0AD         	movff	asin@y+2,___flneg@f1+2
  6734  003B5E  C1B7  F0AE         	movff	asin@y+3,___flneg@f1+3
  6735  003B62  EC1B  F02E         	call	___flneg	;wreg free
  6736  003B66  C0AB  F081         	movff	?___flneg,___fldiv@f1
  6737  003B6A  C0AC  F082         	movff	?___flneg+1,___fldiv@f1+1
  6738  003B6E  C0AD  F083         	movff	?___flneg+2,___fldiv@f1+2
  6739  003B72  C0AE  F084         	movff	?___flneg+3,___fldiv@f1+3
  6740  003B76  ECD1  F027         	call	___fldiv	;wreg free
  6741  003B7A  C081  F1B8         	movff	?___fldiv,_asin$3679
  6742  003B7E  C082  F1B9         	movff	?___fldiv+1,_asin$3679+1
  6743  003B82  C083  F1BA         	movff	?___fldiv+2,_asin$3679+2
  6744  003B86  C084  F1BB         	movff	?___fldiv+3,_asin$3679+3
  6745  003B8A  C1B8  F0BF         	movff	_asin$3679,atan@f
  6746  003B8E  C1B9  F0C0         	movff	_asin$3679+1,atan@f+1
  6747  003B92  C1BA  F0C1         	movff	_asin$3679+2,atan@f+2
  6748  003B96  C1BB  F0C2         	movff	_asin$3679+3,atan@f+3
  6749  003B9A  EC54  F022         	call	_atan	;wreg free
  6750  003B9E  C0BF  F1B0         	movff	?_atan,_asin$3680
  6751  003BA2  C0C0  F1B1         	movff	?_atan+1,_asin$3680+1
  6752  003BA6  C0C1  F1B2         	movff	?_atan+2,_asin$3680+2
  6753  003BAA  C0C2  F1B3         	movff	?_atan+3,_asin$3680+3
  6754  003BAE  0EDB               	movlw	219
  6755  003BB0  0100               	movlb	0	; () banked
  6756  003BB2  6FA3               	movwf	___fladd@f2& (0+255),b
  6757  003BB4  0E0F               	movlw	15
  6758  003BB6  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6759  003BB8  0EC9               	movlw	201
  6760  003BBA  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6761  003BBC  0E3F               	movlw	63
  6762  003BBE  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6763  003BC0  C1B0  F0AB         	movff	_asin$3680,___flneg@f1
  6764  003BC4  C1B1  F0AC         	movff	_asin$3680+1,___flneg@f1+1
  6765  003BC8  C1B2  F0AD         	movff	_asin$3680+2,___flneg@f1+2
  6766  003BCC  C1B3  F0AE         	movff	_asin$3680+3,___flneg@f1+3
  6767  003BD0  EC1B  F02E         	call	___flneg	;wreg free
  6768  003BD4  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6769  003BD8  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6770  003BDC  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6771  003BE0  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6772  003BE4  ECF0  F01F         	call	___fladd	;wreg free
  6773  003BE8  C09F  F1AC         	movff	?___fladd,_asin$3681
  6774  003BEC  C0A0  F1AD         	movff	?___fladd+1,_asin$3681+1
  6775  003BF0  C0A1  F1AE         	movff	?___fladd+2,_asin$3681+2
  6776  003BF4  C0A2  F1AF         	movff	?___fladd+3,_asin$3681+3
  6777  003BF8  C1AC  F0AB         	movff	_asin$3681,___flneg@f1
  6778  003BFC  C1AD  F0AC         	movff	_asin$3681+1,___flneg@f1+1
  6779  003C00  C1AE  F0AD         	movff	_asin$3681+2,___flneg@f1+2
  6780  003C04  C1AF  F0AE         	movff	_asin$3681+3,___flneg@f1+3
  6781  003C08  EC1B  F02E         	call	___flneg	;wreg free
  6782  003C0C  C0AB  F1A0         	movff	?___flneg,?_asin
  6783  003C10  C0AC  F1A1         	movff	?___flneg+1,?_asin+1
  6784  003C14  C0AD  F1A2         	movff	?___flneg+2,?_asin+2
  6785  003C18  C0AE  F1A3         	movff	?___flneg+3,?_asin+3
  6786  003C1C  0012               	return	
  6787  003C1E                     l6471:
  6788  003C1E  C1A0  F085         	movff	asin@x,___fldiv@f2
  6789  003C22  C1A1  F086         	movff	asin@x+1,___fldiv@f2+1
  6790  003C26  C1A2  F087         	movff	asin@x+2,___fldiv@f2+2
  6791  003C2A  C1A3  F088         	movff	asin@x+3,___fldiv@f2+3
  6792  003C2E  C1B4  F081         	movff	asin@y,___fldiv@f1
  6793  003C32  C1B5  F082         	movff	asin@y+1,___fldiv@f1+1
  6794  003C36  C1B6  F083         	movff	asin@y+2,___fldiv@f1+2
  6795  003C3A  C1B7  F084         	movff	asin@y+3,___fldiv@f1+3
  6796  003C3E  ECD1  F027         	call	___fldiv	;wreg free
  6797  003C42  C081  F1B8         	movff	?___fldiv,_asin$3679
  6798  003C46  C082  F1B9         	movff	?___fldiv+1,_asin$3679+1
  6799  003C4A  C083  F1BA         	movff	?___fldiv+2,_asin$3679+2
  6800  003C4E  C084  F1BB         	movff	?___fldiv+3,_asin$3679+3
  6801  003C52  C1B8  F0BF         	movff	_asin$3679,atan@f
  6802  003C56  C1B9  F0C0         	movff	_asin$3679+1,atan@f+1
  6803  003C5A  C1BA  F0C1         	movff	_asin$3679+2,atan@f+2
  6804  003C5E  C1BB  F0C2         	movff	_asin$3679+3,atan@f+3
  6805  003C62  EC54  F022         	call	_atan	;wreg free
  6806  003C66  C0BF  F1B0         	movff	?_atan,_asin$3680
  6807  003C6A  C0C0  F1B1         	movff	?_atan+1,_asin$3680+1
  6808  003C6E  C0C1  F1B2         	movff	?_atan+2,_asin$3680+2
  6809  003C72  C0C2  F1B3         	movff	?_atan+3,_asin$3680+3
  6810  003C76  C1B0  F0AB         	movff	_asin$3680,___flneg@f1
  6811  003C7A  C1B1  F0AC         	movff	_asin$3680+1,___flneg@f1+1
  6812  003C7E  C1B2  F0AD         	movff	_asin$3680+2,___flneg@f1+2
  6813  003C82  C1B3  F0AE         	movff	_asin$3680+3,___flneg@f1+3
  6814  003C86  EC1B  F02E         	call	___flneg	;wreg free
  6815  003C8A  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6816  003C8E  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6817  003C92  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6818  003C96  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6819  003C9A  0EDB               	movlw	219
  6820  003C9C  0100               	movlb	0	; () banked
  6821  003C9E  6FA3               	movwf	___fladd@f2& (0+255),b
  6822  003CA0  0E0F               	movlw	15
  6823  003CA2  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6824  003CA4  0EC9               	movlw	201
  6825  003CA6  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6826  003CA8  0E3F               	movlw	63
  6827  003CAA  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6828  003CAC  ECF0  F01F         	call	___fladd	;wreg free
  6829  003CB0  C09F  F1A0         	movff	?___fladd,?_asin
  6830  003CB4  C0A0  F1A1         	movff	?___fladd+1,?_asin+1
  6831  003CB8  C0A1  F1A2         	movff	?___fladd+2,?_asin+2
  6832  003CBC  C0A2  F1A3         	movff	?___fladd+3,?_asin+3
  6833  003CC0  0012               	return	
  6834  003CC2  0012               	return		;funcret
  6835  003CC4                     __end_of_asin:
  6836                           	opt stack 0
  6837                           tblptru	equ	0xFF8
  6838                           tblptrh	equ	0xFF7
  6839                           tblptrl	equ	0xFF6
  6840                           tablat	equ	0xFF5
  6841                           postinc0	equ	0xFEE
  6842                           wreg	equ	0xFE8
  6843                           postdec1	equ	0xFE5
  6844                           fsr1l	equ	0xFE1
  6845                           indf2	equ	0xFDF
  6846                           postinc2	equ	0xFDE
  6847                           postdec2	equ	0xFDD
  6848                           fsr2h	equ	0xFDA
  6849                           fsr2l	equ	0xFD9
  6850                           status	equ	0xFD8
  6851                           
  6852 ;; *************** function _sqrt *****************
  6853 ;; Defined at:
  6854 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;  y               4  113[BANK0 ] unsigned char 
  6857 ;; Auto vars:     Size  Location     Type
  6858 ;;  x               4   17[BANK1 ] unsigned char 
  6859 ;;  q               4   13[BANK1 ] unsigned char 
  6860 ;;  z               4    8[BANK1 ] unsigned char 
  6861 ;;  og              4    4[BANK1 ] unsigned char 
  6862 ;;  i               1   12[BANK1 ] unsigned char 
  6863 ;; Return value:  Size  Location     Type
  6864 ;;                  4  113[BANK0 ] unsigned char 
  6865 ;; Registers used:
  6866 ;;		wreg, status,2, status,0, cstack
  6867 ;; Tracked objects:
  6868 ;;		On entry : 0/0
  6869 ;;		On exit  : 0/0
  6870 ;;		Unchanged: 0/0
  6871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6872 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6873 ;;      Locals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Totals:         0       4      21       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;Total ram usage:       25 bytes
  6877 ;; Hardware stack levels used:    1
  6878 ;; Hardware stack levels required when called:    8
  6879 ;; This function calls:
  6880 ;;		___flge
  6881 ;;		___flmul
  6882 ;;		___flsub
  6883 ;; This function is called by:
  6884 ;;		_parallelo
  6885 ;;		_asin
  6886 ;; This function uses a non-reentrant model
  6887 ;;
  6888                           
  6889                           	psect	text17
  6890  0046FE                     __ptext17:
  6891                           	opt stack 0
  6892  0046FE                     _sqrt:
  6893                           	opt stack 20
  6894                           
  6895                           ;incstack = 0
  6896  0046FE  0E00               	movlw	0
  6897  004700  0100               	movlb	0	; () banked
  6898  004702  6FB3               	movwf	___flge@ff1& (0+255),b
  6899  004704  0E00               	movlw	0
  6900  004706  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6901  004708  0E00               	movlw	0
  6902  00470A  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6903  00470C  0E00               	movlw	0
  6904  00470E  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6905  004710  C0D1  F0B7         	movff	sqrt@y,___flge@ff2
  6906  004714  C0D2  F0B8         	movff	sqrt@y+1,___flge@ff2+1
  6907  004718  C0D3  F0B9         	movff	sqrt@y+2,___flge@ff2+2
  6908  00471C  C0D4  F0BA         	movff	sqrt@y+3,___flge@ff2+3
  6909  004720  EC9F  F02A         	call	___flge	;wreg free
  6910  004724  0100               	movlb	0	; () banked
  6911  004726  A0D8               	btfss	status,0,c
  6912  004728  D012               	goto	l1464
  6913                           
  6914                           ; BSR set to: 0
  6915  00472A  0100               	movlb	0	; () banked
  6916  00472C  AFD4               	btfss	(sqrt@y+3)& (0+255),7,b
  6917  00472E  D005               	goto	l1465
  6918                           
  6919                           ; BSR set to: 0
  6920  004730  0E00               	movlw	0
  6921  004732  0100               	movlb	0	; () banked
  6922  004734  6FE4               	movwf	(_errno+1)& (0+255),b
  6923  004736  0E21               	movlw	33
  6924  004738  6FE3               	movwf	_errno& (0+255),b
  6925  00473A                     l1465:
  6926                           
  6927                           ; BSR set to: 0
  6928  00473A  0E00               	movlw	0
  6929  00473C  0100               	movlb	0	; () banked
  6930  00473E  6FD1               	movwf	?_sqrt& (0+255),b
  6931  004740  0E00               	movlw	0
  6932  004742  6FD2               	movwf	(?_sqrt+1)& (0+255),b
  6933  004744  0E00               	movlw	0
  6934  004746  6FD3               	movwf	(?_sqrt+2)& (0+255),b
  6935  004748  0E00               	movlw	0
  6936  00474A  6FD4               	movwf	(?_sqrt+3)& (0+255),b
  6937                           
  6938                           ; BSR set to: 0
  6939  00474C  0012               	return	
  6940  00474E                     l1464:
  6941                           
  6942                           ; BSR set to: 0
  6943  00474E  C0D1  F193         	movff	sqrt@y,sqrt@z
  6944  004752  C0D2  F194         	movff	sqrt@y+1,sqrt@z+1
  6945  004756  C0D3  F195         	movff	sqrt@y+2,sqrt@z+2
  6946  00475A  C0D4  F196         	movff	sqrt@y+3,sqrt@z+3
  6947                           
  6948                           ; BSR set to: 0
  6949  00475E  C0D1  F18B         	movff	sqrt@y,??_sqrt
  6950  004762  C0D2  F18C         	movff	sqrt@y+1,??_sqrt+1
  6951  004766  C0D3  F18D         	movff	sqrt@y+2,??_sqrt+2
  6952  00476A  C0D4  F18E         	movff	sqrt@y+3,??_sqrt+3
  6953  00476E  0101               	movlb	1	; () banked
  6954  004770  1F8B               	comf	??_sqrt& (0+255),f,b
  6955  004772  1F8C               	comf	(??_sqrt+1)& (0+255),f,b
  6956  004774  1F8D               	comf	(??_sqrt+2)& (0+255),f,b
  6957  004776  1F8E               	comf	(??_sqrt+3)& (0+255),f,b
  6958  004778  2B8B               	incf	??_sqrt& (0+255),f,b
  6959  00477A  0E00               	movlw	0
  6960  00477C  238C               	addwfc	(??_sqrt+1)& (0+255),f,b
  6961  00477E  238D               	addwfc	(??_sqrt+2)& (0+255),f,b
  6962  004780  238E               	addwfc	(??_sqrt+3)& (0+255),f,b
  6963  004782  0E5E               	movlw	94
  6964  004784  0101               	movlb	1	; () banked
  6965  004786  258B               	addwf	??_sqrt& (0+255),w,b
  6966  004788  0101               	movlb	1	; () banked
  6967  00478A  6F9C               	movwf	sqrt@x& (0+255),b
  6968  00478C  0EC8               	movlw	200
  6969  00478E  0101               	movlb	1	; () banked
  6970  004790  218C               	addwfc	(??_sqrt+1)& (0+255),w,b
  6971  004792  0101               	movlb	1	; () banked
  6972  004794  6F9D               	movwf	(sqrt@x+1)& (0+255),b
  6973  004796  0E6E               	movlw	110
  6974  004798  0101               	movlb	1	; () banked
  6975  00479A  218D               	addwfc	(??_sqrt+2)& (0+255),w,b
  6976  00479C  0101               	movlb	1	; () banked
  6977  00479E  6F9E               	movwf	(sqrt@x+2)& (0+255),b
  6978  0047A0  0EBE               	movlw	190
  6979  0047A2  0101               	movlb	1	; () banked
  6980  0047A4  218E               	addwfc	(??_sqrt+3)& (0+255),w,b
  6981  0047A6  0101               	movlb	1	; () banked
  6982  0047A8  6F9F               	movwf	(sqrt@x+3)& (0+255),b
  6983                           
  6984                           ; BSR set to: 1
  6985  0047AA  0101               	movlb	1	; () banked
  6986  0047AC  90D8               	bcf	status,0,c
  6987  0047AE  339F               	rrcf	(sqrt@x+3)& (0+255),f,b
  6988  0047B0  339E               	rrcf	(sqrt@x+2)& (0+255),f,b
  6989  0047B2  339D               	rrcf	(sqrt@x+1)& (0+255),f,b
  6990  0047B4  339C               	rrcf	sqrt@x& (0+255),f,b
  6991                           
  6992                           ; BSR set to: 1
  6993  0047B6  0E00               	movlw	0
  6994  0047B8  0101               	movlb	1	; () banked
  6995  0047BA  5F93               	subwf	sqrt@z& (0+255),f,b
  6996  0047BC  0E00               	movlw	0
  6997  0047BE  5B94               	subwfb	(sqrt@z+1)& (0+255),f,b
  6998  0047C0  0E80               	movlw	128
  6999  0047C2  5B95               	subwfb	(sqrt@z+2)& (0+255),f,b
  7000  0047C4  0E00               	movlw	0
  7001  0047C6  5B96               	subwfb	(sqrt@z+3)& (0+255),f,b
  7002                           
  7003                           ; BSR set to: 1
  7004  0047C8  0E04               	movlw	4
  7005  0047CA  0101               	movlb	1	; () banked
  7006  0047CC  6F97               	movwf	sqrt@i& (0+255),b
  7007  0047CE  D000               	goto	l6313
  7008  0047D0                     l6313:
  7009                           
  7010                           ; BSR set to: 1
  7011  0047D0  C19C  F18F         	movff	sqrt@x,sqrt@og
  7012  0047D4  C19D  F190         	movff	sqrt@x+1,sqrt@og+1
  7013  0047D8  C19E  F191         	movff	sqrt@x+2,sqrt@og+2
  7014  0047DC  C19F  F192         	movff	sqrt@x+3,sqrt@og+3
  7015                           
  7016                           ; BSR set to: 1
  7017  0047E0  C19C  F090         	movff	sqrt@x,___flmul@f1
  7018  0047E4  C19D  F091         	movff	sqrt@x+1,___flmul@f1+1
  7019  0047E8  C19E  F092         	movff	sqrt@x+2,___flmul@f1+2
  7020  0047EC  C19F  F093         	movff	sqrt@x+3,___flmul@f1+3
  7021  0047F0  C193  F094         	movff	sqrt@z,___flmul@f2
  7022  0047F4  C194  F095         	movff	sqrt@z+1,___flmul@f2+1
  7023  0047F8  C195  F096         	movff	sqrt@z+2,___flmul@f2+2
  7024  0047FC  C196  F097         	movff	sqrt@z+3,___flmul@f2+3
  7025  004800  EC1F  F027         	call	___flmul	;wreg free
  7026  004804  C090  F198         	movff	?___flmul,sqrt@q
  7027  004808  C091  F199         	movff	?___flmul+1,sqrt@q+1
  7028  00480C  C092  F19A         	movff	?___flmul+2,sqrt@q+2
  7029  004810  C093  F19B         	movff	?___flmul+3,sqrt@q+3
  7030  004814  C198  F090         	movff	sqrt@q,___flmul@f1
  7031  004818  C199  F091         	movff	sqrt@q+1,___flmul@f1+1
  7032  00481C  C19A  F092         	movff	sqrt@q+2,___flmul@f1+2
  7033  004820  C19B  F093         	movff	sqrt@q+3,___flmul@f1+3
  7034  004824  C19C  F094         	movff	sqrt@x,___flmul@f2
  7035  004828  C19D  F095         	movff	sqrt@x+1,___flmul@f2+1
  7036  00482C  C19E  F096         	movff	sqrt@x+2,___flmul@f2+2
  7037  004830  C19F  F097         	movff	sqrt@x+3,___flmul@f2+3
  7038  004834  EC1F  F027         	call	___flmul	;wreg free
  7039  004838  C090  F198         	movff	?___flmul,sqrt@q
  7040  00483C  C091  F199         	movff	?___flmul+1,sqrt@q+1
  7041  004840  C092  F19A         	movff	?___flmul+2,sqrt@q+2
  7042  004844  C093  F19B         	movff	?___flmul+3,sqrt@q+3
  7043  004848  C198  F090         	movff	sqrt@q,___flmul@f1
  7044  00484C  C199  F091         	movff	sqrt@q+1,___flmul@f1+1
  7045  004850  C19A  F092         	movff	sqrt@q+2,___flmul@f1+2
  7046  004854  C19B  F093         	movff	sqrt@q+3,___flmul@f1+3
  7047  004858  C19C  F094         	movff	sqrt@x,___flmul@f2
  7048  00485C  C19D  F095         	movff	sqrt@x+1,___flmul@f2+1
  7049  004860  C19E  F096         	movff	sqrt@x+2,___flmul@f2+2
  7050  004864  C19F  F097         	movff	sqrt@x+3,___flmul@f2+3
  7051  004868  EC1F  F027         	call	___flmul	;wreg free
  7052  00486C  C090  F198         	movff	?___flmul,sqrt@q
  7053  004870  C091  F199         	movff	?___flmul+1,sqrt@q+1
  7054  004874  C092  F19A         	movff	?___flmul+2,sqrt@q+2
  7055  004878  C093  F19B         	movff	?___flmul+3,sqrt@q+3
  7056  00487C  C19C  F090         	movff	sqrt@x,___flmul@f1
  7057  004880  C19D  F091         	movff	sqrt@x+1,___flmul@f1+1
  7058  004884  C19E  F092         	movff	sqrt@x+2,___flmul@f1+2
  7059  004888  C19F  F093         	movff	sqrt@x+3,___flmul@f1+3
  7060  00488C  0E00               	movlw	0
  7061  00488E  0100               	movlb	0	; () banked
  7062  004890  6F94               	movwf	___flmul@f2& (0+255),b
  7063  004892  0E00               	movlw	0
  7064  004894  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  7065  004896  0EC0               	movlw	192
  7066  004898  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  7067  00489A  0E3F               	movlw	63
  7068  00489C  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  7069  00489E  EC1F  F027         	call	___flmul	;wreg free
  7070  0048A2  C090  F19C         	movff	?___flmul,sqrt@x
  7071  0048A6  C091  F19D         	movff	?___flmul+1,sqrt@x+1
  7072  0048AA  C092  F19E         	movff	?___flmul+2,sqrt@x+2
  7073  0048AE  C093  F19F         	movff	?___flmul+3,sqrt@x+3
  7074  0048B2  C19C  F0C9         	movff	sqrt@x,___flsub@f1
  7075  0048B6  C19D  F0CA         	movff	sqrt@x+1,___flsub@f1+1
  7076  0048BA  C19E  F0CB         	movff	sqrt@x+2,___flsub@f1+2
  7077  0048BE  C19F  F0CC         	movff	sqrt@x+3,___flsub@f1+3
  7078  0048C2  C198  F0CD         	movff	sqrt@q,___flsub@f2
  7079  0048C6  C199  F0CE         	movff	sqrt@q+1,___flsub@f2+1
  7080  0048CA  C19A  F0CF         	movff	sqrt@q+2,___flsub@f2+2
  7081  0048CE  C19B  F0D0         	movff	sqrt@q+3,___flsub@f2+3
  7082  0048D2  EC51  F02D         	call	___flsub	;wreg free
  7083  0048D6  C0C9  F19C         	movff	?___flsub,sqrt@x
  7084  0048DA  C0CA  F19D         	movff	?___flsub+1,sqrt@x+1
  7085  0048DE  C0CB  F19E         	movff	?___flsub+2,sqrt@x+2
  7086  0048E2  C0CC  F19F         	movff	?___flsub+3,sqrt@x+3
  7087  0048E6  0101               	movlb	1	; () banked
  7088  0048E8  2F97               	decfsz	sqrt@i& (0+255),f,b
  7089  0048EA  D772               	goto	l6313
  7090  0048EC  D000               	goto	l6327
  7091  0048EE                     l6327:
  7092                           
  7093                           ; BSR set to: 1
  7094  0048EE  C19C  F090         	movff	sqrt@x,___flmul@f1
  7095  0048F2  C19D  F091         	movff	sqrt@x+1,___flmul@f1+1
  7096  0048F6  C19E  F092         	movff	sqrt@x+2,___flmul@f1+2
  7097  0048FA  C19F  F093         	movff	sqrt@x+3,___flmul@f1+3
  7098  0048FE  C0D1  F094         	movff	sqrt@y,___flmul@f2
  7099  004902  C0D2  F095         	movff	sqrt@y+1,___flmul@f2+1
  7100  004906  C0D3  F096         	movff	sqrt@y+2,___flmul@f2+2
  7101  00490A  C0D4  F097         	movff	sqrt@y+3,___flmul@f2+3
  7102  00490E  EC1F  F027         	call	___flmul	;wreg free
  7103  004912  C090  F0D1         	movff	?___flmul,?_sqrt
  7104  004916  C091  F0D2         	movff	?___flmul+1,?_sqrt+1
  7105  00491A  C092  F0D3         	movff	?___flmul+2,?_sqrt+2
  7106  00491E  C093  F0D4         	movff	?___flmul+3,?_sqrt+3
  7107  004922  0012               	return	
  7108  004924  0012               	return		;funcret
  7109  004926                     __end_of_sqrt:
  7110                           	opt stack 0
  7111                           tblptru	equ	0xFF8
  7112                           tblptrh	equ	0xFF7
  7113                           tblptrl	equ	0xFF6
  7114                           tablat	equ	0xFF5
  7115                           postinc0	equ	0xFEE
  7116                           wreg	equ	0xFE8
  7117                           postdec1	equ	0xFE5
  7118                           fsr1l	equ	0xFE1
  7119                           indf2	equ	0xFDF
  7120                           postinc2	equ	0xFDE
  7121                           postdec2	equ	0xFDD
  7122                           fsr2h	equ	0xFDA
  7123                           fsr2l	equ	0xFD9
  7124                           status	equ	0xFD8
  7125                           
  7126 ;; *************** function ___flsub *****************
  7127 ;; Defined at:
  7128 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  7129 ;; Parameters:    Size  Location     Type
  7130 ;;  f1              4  105[BANK0 ] unsigned char 
  7131 ;;  f2              4  109[BANK0 ] unsigned char 
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;		None
  7134 ;; Return value:  Size  Location     Type
  7135 ;;                  4  105[BANK0 ] unsigned char 
  7136 ;; Registers used:
  7137 ;;		wreg, status,2, status,0, cstack
  7138 ;; Tracked objects:
  7139 ;;		On entry : 0/0
  7140 ;;		On exit  : 0/0
  7141 ;;		Unchanged: 0/0
  7142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7143 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7147 ;;Total ram usage:        8 bytes
  7148 ;; Hardware stack levels used:    1
  7149 ;; Hardware stack levels required when called:    7
  7150 ;; This function calls:
  7151 ;;		___fladd
  7152 ;; This function is called by:
  7153 ;;		_sin
  7154 ;;		_sqrt
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157                           
  7158                           	psect	text18
  7159  005AA2                     __ptext18:
  7160                           	opt stack 0
  7161  005AA2                     ___flsub:
  7162                           	opt stack 20
  7163                           
  7164                           ;incstack = 0
  7165  005AA2  0100               	movlb	0	; () banked
  7166  005AA4  51CD               	movf	___flsub@f2& (0+255),w,b
  7167  005AA6  0100               	movlb	0	; () banked
  7168  005AA8  11CE               	iorwf	(___flsub@f2+1)& (0+255),w,b
  7169  005AAA  0100               	movlb	0	; () banked
  7170  005AAC  11CF               	iorwf	(___flsub@f2+2)& (0+255),w,b
  7171  005AAE  0100               	movlb	0	; () banked
  7172  005AB0  11D0               	iorwf	(___flsub@f2+3)& (0+255),w,b
  7173  005AB2  B4D8               	btfsc	status,2,c
  7174  005AB4  D00A               	goto	l6245
  7175                           
  7176                           ; BSR set to: 0
  7177  005AB6  0E00               	movlw	0
  7178  005AB8  0100               	movlb	0	; () banked
  7179  005ABA  1BCD               	xorwf	___flsub@f2& (0+255),f,b
  7180  005ABC  0E00               	movlw	0
  7181  005ABE  1BCE               	xorwf	(___flsub@f2+1)& (0+255),f,b
  7182  005AC0  0E00               	movlw	0
  7183  005AC2  1BCF               	xorwf	(___flsub@f2+2)& (0+255),f,b
  7184  005AC4  0E80               	movlw	128
  7185  005AC6  1BD0               	xorwf	(___flsub@f2+3)& (0+255),f,b
  7186  005AC8  D000               	goto	l6245
  7187  005ACA                     l6245:
  7188                           
  7189                           ; BSR set to: 0
  7190  005ACA  C0C9  F09F         	movff	___flsub@f1,___fladd@f1
  7191  005ACE  C0CA  F0A0         	movff	___flsub@f1+1,___fladd@f1+1
  7192  005AD2  C0CB  F0A1         	movff	___flsub@f1+2,___fladd@f1+2
  7193  005AD6  C0CC  F0A2         	movff	___flsub@f1+3,___fladd@f1+3
  7194  005ADA  C0CD  F0A3         	movff	___flsub@f2,___fladd@f2
  7195  005ADE  C0CE  F0A4         	movff	___flsub@f2+1,___fladd@f2+1
  7196  005AE2  C0CF  F0A5         	movff	___flsub@f2+2,___fladd@f2+2
  7197  005AE6  C0D0  F0A6         	movff	___flsub@f2+3,___fladd@f2+3
  7198  005AEA  ECF0  F01F         	call	___fladd	;wreg free
  7199  005AEE  C09F  F0C9         	movff	?___fladd,?___flsub
  7200  005AF2  C0A0  F0CA         	movff	?___fladd+1,?___flsub+1
  7201  005AF6  C0A1  F0CB         	movff	?___fladd+2,?___flsub+2
  7202  005AFA  C0A2  F0CC         	movff	?___fladd+3,?___flsub+3
  7203  005AFE  0012               	return	
  7204  005B00  0012               	return		;funcret
  7205  005B02                     __end_of___flsub:
  7206                           	opt stack 0
  7207                           tblptru	equ	0xFF8
  7208                           tblptrh	equ	0xFF7
  7209                           tblptrl	equ	0xFF6
  7210                           tablat	equ	0xFF5
  7211                           postinc0	equ	0xFEE
  7212                           wreg	equ	0xFE8
  7213                           postdec1	equ	0xFE5
  7214                           fsr1l	equ	0xFE1
  7215                           indf2	equ	0xFDF
  7216                           postinc2	equ	0xFDE
  7217                           postdec2	equ	0xFDD
  7218                           fsr2h	equ	0xFDA
  7219                           fsr2l	equ	0xFD9
  7220                           status	equ	0xFD8
  7221                           
  7222 ;; *************** function _atan *****************
  7223 ;; Defined at:
  7224 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atan.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;  f               4   95[BANK0 ] unsigned char 
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;  val             4  112[BANK0 ] unsigned char 
  7229 ;;  val_squared     4  108[BANK0 ] unsigned char 
  7230 ;;  x               4  103[BANK0 ] unsigned char 
  7231 ;;  y               4   99[BANK0 ] unsigned char 
  7232 ;;  recip           1  107[BANK0 ] unsigned char 
  7233 ;; Return value:  Size  Location     Type
  7234 ;;                  4   95[BANK0 ] unsigned char 
  7235 ;; Registers used:
  7236 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7237 ;; Tracked objects:
  7238 ;;		On entry : 0/0
  7239 ;;		On exit  : 0/0
  7240 ;;		Unchanged: 0/0
  7241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7242 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;Total ram usage:       21 bytes
  7247 ;; Hardware stack levels used:    1
  7248 ;; Hardware stack levels required when called:    8
  7249 ;; This function calls:
  7250 ;;		___fladd
  7251 ;;		___fldiv
  7252 ;;		___flge
  7253 ;;		___flmul
  7254 ;;		___flneg
  7255 ;;		_eval_poly
  7256 ;;		_fabs
  7257 ;; This function is called by:
  7258 ;;		_asin
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           	psect	text19
  7263  0044A8                     __ptext19:
  7264                           	opt stack 0
  7265  0044A8                     _atan:
  7266                           	opt stack 19
  7267                           
  7268                           ;incstack = 0
  7269  0044A8  C0BF  F0AF         	movff	atan@f,fabs@d
  7270  0044AC  C0C0  F0B0         	movff	atan@f+1,fabs@d+1
  7271  0044B0  C0C1  F0B1         	movff	atan@f+2,fabs@d+2
  7272  0044B4  C0C2  F0B2         	movff	atan@f+3,fabs@d+3
  7273  0044B8  ECFC  F02D         	call	_fabs	;wreg free
  7274  0044BC  C0AF  F0D0         	movff	?_fabs,atan@val
  7275  0044C0  C0B0  F0D1         	movff	?_fabs+1,atan@val+1
  7276  0044C4  C0B1  F0D2         	movff	?_fabs+2,atan@val+2
  7277  0044C8  C0B2  F0D3         	movff	?_fabs+3,atan@val+3
  7278  0044CC  0100               	movlb	0	; () banked
  7279  0044CE  51D0               	movf	atan@val& (0+255),w,b
  7280  0044D0  0100               	movlb	0	; () banked
  7281  0044D2  11D1               	iorwf	(atan@val+1)& (0+255),w,b
  7282  0044D4  0100               	movlb	0	; () banked
  7283  0044D6  11D2               	iorwf	(atan@val+2)& (0+255),w,b
  7284  0044D8  0100               	movlb	0	; () banked
  7285  0044DA  11D3               	iorwf	(atan@val+3)& (0+255),w,b
  7286  0044DC  A4D8               	btfss	status,2,c
  7287  0044DE  D00A               	goto	l6343
  7288                           
  7289                           ; BSR set to: 0
  7290  0044E0  0E00               	movlw	0
  7291  0044E2  0100               	movlb	0	; () banked
  7292  0044E4  6FBF               	movwf	?_atan& (0+255),b
  7293  0044E6  0E00               	movlw	0
  7294  0044E8  6FC0               	movwf	(?_atan+1)& (0+255),b
  7295  0044EA  0E00               	movlw	0
  7296  0044EC  6FC1               	movwf	(?_atan+2)& (0+255),b
  7297  0044EE  0E00               	movlw	0
  7298  0044F0  6FC2               	movwf	(?_atan+3)& (0+255),b
  7299                           
  7300                           ; BSR set to: 0
  7301  0044F2  0012               	return	
  7302  0044F4                     l6343:
  7303                           
  7304                           ; BSR set to: 0
  7305  0044F4  0E00               	movlw	0
  7306  0044F6  0100               	movlb	0	; () banked
  7307  0044F8  6FB3               	movwf	___flge@ff1& (0+255),b
  7308  0044FA  0E00               	movlw	0
  7309  0044FC  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  7310  0044FE  0E80               	movlw	128
  7311  004500  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  7312  004502  0E3F               	movlw	63
  7313  004504  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  7314  004506  C0D0  F0B7         	movff	atan@val,___flge@ff2
  7315  00450A  C0D1  F0B8         	movff	atan@val+1,___flge@ff2+1
  7316  00450E  C0D2  F0B9         	movff	atan@val+2,___flge@ff2+2
  7317  004512  C0D3  F0BA         	movff	atan@val+3,___flge@ff2+3
  7318  004516  EC9F  F02A         	call	___flge	;wreg free
  7319  00451A  0100               	movlb	0	; () banked
  7320  00451C  B0D8               	btfsc	status,0,c
  7321  00451E  D002               	goto	u7880
  7322  004520  0E01               	movlw	1
  7323  004522  D001               	goto	u7890
  7324  004524                     u7880:
  7325  004524  0E00               	movlw	0
  7326  004526                     u7890:
  7327  004526  0100               	movlb	0	; () banked
  7328  004528  6FCB               	movwf	atan@recip& (0+255),b
  7329  00452A  0100               	movlb	0	; () banked
  7330  00452C  51CB               	movf	atan@recip& (0+255),w,b
  7331  00452E  B4D8               	btfsc	status,2,c
  7332  004530  D01B               	goto	l1018
  7333                           
  7334                           ; BSR set to: 0
  7335  004532  0E00               	movlw	0
  7336  004534  0100               	movlb	0	; () banked
  7337  004536  6F81               	movwf	___fldiv@f1& (0+255),b
  7338  004538  0E00               	movlw	0
  7339  00453A  6F82               	movwf	(___fldiv@f1+1)& (0+255),b
  7340  00453C  0E80               	movlw	128
  7341  00453E  6F83               	movwf	(___fldiv@f1+2)& (0+255),b
  7342  004540  0E3F               	movlw	63
  7343  004542  6F84               	movwf	(___fldiv@f1+3)& (0+255),b
  7344  004544  C0D0  F085         	movff	atan@val,___fldiv@f2
  7345  004548  C0D1  F086         	movff	atan@val+1,___fldiv@f2+1
  7346  00454C  C0D2  F087         	movff	atan@val+2,___fldiv@f2+2
  7347  004550  C0D3  F088         	movff	atan@val+3,___fldiv@f2+3
  7348  004554  ECD1  F027         	call	___fldiv	;wreg free
  7349  004558  C081  F0D0         	movff	?___fldiv,atan@val
  7350  00455C  C082  F0D1         	movff	?___fldiv+1,atan@val+1
  7351  004560  C083  F0D2         	movff	?___fldiv+2,atan@val+2
  7352  004564  C084  F0D3         	movff	?___fldiv+3,atan@val+3
  7353  004568                     l1018:
  7354  004568  C0D0  F090         	movff	atan@val,___flmul@f1
  7355  00456C  C0D1  F091         	movff	atan@val+1,___flmul@f1+1
  7356  004570  C0D2  F092         	movff	atan@val+2,___flmul@f1+2
  7357  004574  C0D3  F093         	movff	atan@val+3,___flmul@f1+3
  7358  004578  C0D0  F094         	movff	atan@val,___flmul@f2
  7359  00457C  C0D1  F095         	movff	atan@val+1,___flmul@f2+1
  7360  004580  C0D2  F096         	movff	atan@val+2,___flmul@f2+2
  7361  004584  C0D3  F097         	movff	atan@val+3,___flmul@f2+3
  7362  004588  EC1F  F027         	call	___flmul	;wreg free
  7363  00458C  C090  F0CC         	movff	?___flmul,atan@val_squared
  7364  004590  C091  F0CD         	movff	?___flmul+1,atan@val_squared+1
  7365  004594  C092  F0CE         	movff	?___flmul+2,atan@val_squared+2
  7366  004598  C093  F0CF         	movff	?___flmul+3,atan@val_squared+3
  7367  00459C  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  7368  0045A0  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  7369  0045A4  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  7370  0045A8  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  7371  0045AC  0E19               	movlw	low atan@coeff_b
  7372  0045AE  0100               	movlb	0	; () banked
  7373  0045B0  6FAF               	movwf	eval_poly@d& (0+255),b
  7374  0045B2  0E0D               	movlw	high atan@coeff_b
  7375  0045B4  0100               	movlb	0	; () banked
  7376  0045B6  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  7377  0045B8  0E00               	movlw	0
  7378  0045BA  0100               	movlb	0	; () banked
  7379  0045BC  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  7380  0045BE  0E04               	movlw	4
  7381  0045C0  6FB1               	movwf	eval_poly@n& (0+255),b
  7382  0045C2  EC8A  F029         	call	_eval_poly	;wreg free
  7383  0045C6  C0AB  F0C3         	movff	?_eval_poly,atan@y
  7384  0045CA  C0AC  F0C4         	movff	?_eval_poly+1,atan@y+1
  7385  0045CE  C0AD  F0C5         	movff	?_eval_poly+2,atan@y+2
  7386  0045D2  C0AE  F0C6         	movff	?_eval_poly+3,atan@y+3
  7387  0045D6  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  7388  0045DA  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  7389  0045DE  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  7390  0045E2  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  7391  0045E6  0E01               	movlw	low atan@coeff_a
  7392  0045E8  0100               	movlb	0	; () banked
  7393  0045EA  6FAF               	movwf	eval_poly@d& (0+255),b
  7394  0045EC  0E0D               	movlw	high atan@coeff_a
  7395  0045EE  0100               	movlb	0	; () banked
  7396  0045F0  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  7397  0045F2  0E00               	movlw	0
  7398  0045F4  0100               	movlb	0	; () banked
  7399  0045F6  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  7400  0045F8  0E05               	movlw	5
  7401  0045FA  6FB1               	movwf	eval_poly@n& (0+255),b
  7402  0045FC  EC8A  F029         	call	_eval_poly	;wreg free
  7403  004600  C0AB  F0C7         	movff	?_eval_poly,atan@x
  7404  004604  C0AC  F0C8         	movff	?_eval_poly+1,atan@x+1
  7405  004608  C0AD  F0C9         	movff	?_eval_poly+2,atan@x+2
  7406  00460C  C0AE  F0CA         	movff	?_eval_poly+3,atan@x+3
  7407  004610  C0D0  F090         	movff	atan@val,___flmul@f1
  7408  004614  C0D1  F091         	movff	atan@val+1,___flmul@f1+1
  7409  004618  C0D2  F092         	movff	atan@val+2,___flmul@f1+2
  7410  00461C  C0D3  F093         	movff	atan@val+3,___flmul@f1+3
  7411  004620  C0C3  F085         	movff	atan@y,___fldiv@f2
  7412  004624  C0C4  F086         	movff	atan@y+1,___fldiv@f2+1
  7413  004628  C0C5  F087         	movff	atan@y+2,___fldiv@f2+2
  7414  00462C  C0C6  F088         	movff	atan@y+3,___fldiv@f2+3
  7415  004630  C0C7  F081         	movff	atan@x,___fldiv@f1
  7416  004634  C0C8  F082         	movff	atan@x+1,___fldiv@f1+1
  7417  004638  C0C9  F083         	movff	atan@x+2,___fldiv@f1+2
  7418  00463C  C0CA  F084         	movff	atan@x+3,___fldiv@f1+3
  7419  004640  ECD1  F027         	call	___fldiv	;wreg free
  7420  004644  C081  F094         	movff	?___fldiv,___flmul@f2
  7421  004648  C082  F095         	movff	?___fldiv+1,___flmul@f2+1
  7422  00464C  C083  F096         	movff	?___fldiv+2,___flmul@f2+2
  7423  004650  C084  F097         	movff	?___fldiv+3,___flmul@f2+3
  7424  004654  EC1F  F027         	call	___flmul	;wreg free
  7425  004658  C090  F0D0         	movff	?___flmul,atan@val
  7426  00465C  C091  F0D1         	movff	?___flmul+1,atan@val+1
  7427  004660  C092  F0D2         	movff	?___flmul+2,atan@val+2
  7428  004664  C093  F0D3         	movff	?___flmul+3,atan@val+3
  7429  004668  0100               	movlb	0	; () banked
  7430  00466A  51CB               	movf	atan@recip& (0+255),w,b
  7431  00466C  0100               	movlb	0	; () banked
  7432  00466E  B4D8               	btfsc	status,2,c
  7433  004670  D026               	goto	l6355
  7434                           
  7435                           ; BSR set to: 0
  7436  004672  C0D0  F0AB         	movff	atan@val,___flneg@f1
  7437  004676  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  7438  00467A  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  7439  00467E  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  7440  004682  EC1B  F02E         	call	___flneg	;wreg free
  7441  004686  C0AB  F09F         	movff	?___flneg,___fladd@f1
  7442  00468A  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  7443  00468E  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  7444  004692  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  7445  004696  0EDB               	movlw	219
  7446  004698  0100               	movlb	0	; () banked
  7447  00469A  6FA3               	movwf	___fladd@f2& (0+255),b
  7448  00469C  0E0F               	movlw	15
  7449  00469E  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  7450  0046A0  0EC9               	movlw	201
  7451  0046A2  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  7452  0046A4  0E3F               	movlw	63
  7453  0046A6  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  7454  0046A8  ECF0  F01F         	call	___fladd	;wreg free
  7455  0046AC  C09F  F0D0         	movff	?___fladd,atan@val
  7456  0046B0  C0A0  F0D1         	movff	?___fladd+1,atan@val+1
  7457  0046B4  C0A1  F0D2         	movff	?___fladd+2,atan@val+2
  7458  0046B8  C0A2  F0D3         	movff	?___fladd+3,atan@val+3
  7459  0046BC  D000               	goto	l6355
  7460  0046BE                     l6355:
  7461  0046BE  0100               	movlb	0	; () banked
  7462  0046C0  BFC2               	btfsc	(atan@f+3)& (0+255),7,b
  7463  0046C2  D009               	goto	l6359
  7464                           
  7465                           ; BSR set to: 0
  7466  0046C4  C0D0  F0BF         	movff	atan@val,?_atan
  7467  0046C8  C0D1  F0C0         	movff	atan@val+1,?_atan+1
  7468  0046CC  C0D2  F0C1         	movff	atan@val+2,?_atan+2
  7469  0046D0  C0D3  F0C2         	movff	atan@val+3,?_atan+3
  7470  0046D4  0012               	return	
  7471  0046D6                     l6359:
  7472                           
  7473                           ; BSR set to: 0
  7474  0046D6  C0D0  F0AB         	movff	atan@val,___flneg@f1
  7475  0046DA  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  7476  0046DE  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  7477  0046E2  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  7478  0046E6  EC1B  F02E         	call	___flneg	;wreg free
  7479  0046EA  C0AB  F0BF         	movff	?___flneg,?_atan
  7480  0046EE  C0AC  F0C0         	movff	?___flneg+1,?_atan+1
  7481  0046F2  C0AD  F0C1         	movff	?___flneg+2,?_atan+2
  7482  0046F6  C0AE  F0C2         	movff	?___flneg+3,?_atan+3
  7483  0046FA  0012               	return	
  7484  0046FC  0012               	return		;funcret
  7485  0046FE                     __end_of_atan:
  7486                           	opt stack 0
  7487                           tblptru	equ	0xFF8
  7488                           tblptrh	equ	0xFF7
  7489                           tblptrl	equ	0xFF6
  7490                           tablat	equ	0xFF5
  7491                           postinc0	equ	0xFEE
  7492                           wreg	equ	0xFE8
  7493                           postdec1	equ	0xFE5
  7494                           fsr1l	equ	0xFE1
  7495                           indf2	equ	0xFDF
  7496                           postinc2	equ	0xFDE
  7497                           postdec2	equ	0xFDD
  7498                           fsr2h	equ	0xFDA
  7499                           fsr2l	equ	0xFD9
  7500                           status	equ	0xFD8
  7501                           
  7502 ;; *************** function _fabs *****************
  7503 ;; Defined at:
  7504 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fabs.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;  d               4   79[BANK0 ] unsigned char 
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;		None
  7509 ;; Return value:  Size  Location     Type
  7510 ;;                  4   79[BANK0 ] unsigned char 
  7511 ;; Registers used:
  7512 ;;		wreg, status,2, status,0, cstack
  7513 ;; Tracked objects:
  7514 ;;		On entry : 0/0
  7515 ;;		On exit  : 0/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7518 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7522 ;;Total ram usage:        4 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; Hardware stack levels required when called:    6
  7525 ;; This function calls:
  7526 ;;		___flneg
  7527 ;; This function is called by:
  7528 ;;		_asin
  7529 ;;		_atan
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           	psect	text20
  7534  005BF8                     __ptext20:
  7535                           	opt stack 0
  7536  005BF8                     _fabs:
  7537                           	opt stack 21
  7538                           
  7539                           ;incstack = 0
  7540  005BF8  0100               	movlb	0	; () banked
  7541  005BFA  AFB2               	btfss	(fabs@d+3)& (0+255),7,b
  7542  005BFC  D013               	goto	l1135
  7543                           
  7544                           ; BSR set to: 0
  7545  005BFE  C0AF  F0AB         	movff	fabs@d,___flneg@f1
  7546  005C02  C0B0  F0AC         	movff	fabs@d+1,___flneg@f1+1
  7547  005C06  C0B1  F0AD         	movff	fabs@d+2,___flneg@f1+2
  7548  005C0A  C0B2  F0AE         	movff	fabs@d+3,___flneg@f1+3
  7549  005C0E  EC1B  F02E         	call	___flneg	;wreg free
  7550  005C12  C0AB  F0AF         	movff	?___flneg,?_fabs
  7551  005C16  C0AC  F0B0         	movff	?___flneg+1,?_fabs+1
  7552  005C1A  C0AD  F0B1         	movff	?___flneg+2,?_fabs+2
  7553  005C1E  C0AE  F0B2         	movff	?___flneg+3,?_fabs+3
  7554  005C22  0012               	return	
  7555  005C24                     l1135:
  7556                           
  7557                           ; BSR set to: 0
  7558  005C24  C0AF  F0AF         	movff	fabs@d,?_fabs
  7559  005C28  C0B0  F0B0         	movff	fabs@d+1,?_fabs+1
  7560  005C2C  C0B1  F0B1         	movff	fabs@d+2,?_fabs+2
  7561  005C30  C0B2  F0B2         	movff	fabs@d+3,?_fabs+3
  7562  005C34  0012               	return		;funcret
  7563  005C36                     __end_of_fabs:
  7564                           	opt stack 0
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           postinc0	equ	0xFEE
  7570                           wreg	equ	0xFE8
  7571                           postdec1	equ	0xFE5
  7572                           fsr1l	equ	0xFE1
  7573                           indf2	equ	0xFDF
  7574                           postinc2	equ	0xFDE
  7575                           postdec2	equ	0xFDD
  7576                           fsr2h	equ	0xFDA
  7577                           fsr2l	equ	0xFD9
  7578                           status	equ	0xFD8
  7579                           
  7580 ;; *************** function ___flneg *****************
  7581 ;; Defined at:
  7582 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  7583 ;; Parameters:    Size  Location     Type
  7584 ;;  f1              4   75[BANK0 ] unsigned char 
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;		None
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  4   75[BANK0 ] unsigned char 
  7589 ;; Registers used:
  7590 ;;		wreg, status,2, status,0
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7596 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;Total ram usage:        4 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    5
  7603 ;; This function calls:
  7604 ;;		Nothing
  7605 ;; This function is called by:
  7606 ;;		_park_routine
  7607 ;;		_matematica
  7608 ;;		_asin
  7609 ;;		_atan
  7610 ;;		_fabs
  7611 ;;		_sin
  7612 ;; This function uses a non-reentrant model
  7613 ;;
  7614                           
  7615                           	psect	text21
  7616  005C36                     __ptext21:
  7617                           	opt stack 0
  7618  005C36                     ___flneg:
  7619                           	opt stack 21
  7620                           
  7621                           ;incstack = 0
  7622  005C36  0100               	movlb	0	; () banked
  7623  005C38  51AB               	movf	___flneg@f1& (0+255),w,b
  7624  005C3A  0100               	movlb	0	; () banked
  7625  005C3C  11AC               	iorwf	(___flneg@f1+1)& (0+255),w,b
  7626  005C3E  0100               	movlb	0	; () banked
  7627  005C40  11AD               	iorwf	(___flneg@f1+2)& (0+255),w,b
  7628  005C42  0100               	movlb	0	; () banked
  7629  005C44  11AE               	iorwf	(___flneg@f1+3)& (0+255),w,b
  7630  005C46  B4D8               	btfsc	status,2,c
  7631  005C48  D00A               	goto	l6137
  7632                           
  7633                           ; BSR set to: 0
  7634  005C4A  0E00               	movlw	0
  7635  005C4C  0100               	movlb	0	; () banked
  7636  005C4E  1BAB               	xorwf	___flneg@f1& (0+255),f,b
  7637  005C50  0E00               	movlw	0
  7638  005C52  1BAC               	xorwf	(___flneg@f1+1)& (0+255),f,b
  7639  005C54  0E00               	movlw	0
  7640  005C56  1BAD               	xorwf	(___flneg@f1+2)& (0+255),f,b
  7641  005C58  0E80               	movlw	128
  7642  005C5A  1BAE               	xorwf	(___flneg@f1+3)& (0+255),f,b
  7643  005C5C  D000               	goto	l6137
  7644  005C5E                     l6137:
  7645                           
  7646                           ; BSR set to: 0
  7647  005C5E  C0AB  F0AB         	movff	___flneg@f1,?___flneg
  7648  005C62  C0AC  F0AC         	movff	___flneg@f1+1,?___flneg+1
  7649  005C66  C0AD  F0AD         	movff	___flneg@f1+2,?___flneg+2
  7650  005C6A  C0AE  F0AE         	movff	___flneg@f1+3,?___flneg+3
  7651  005C6E  0012               	return	
  7652                           
  7653                           ; BSR set to: 0
  7654                           
  7655                           ; BSR set to: 0
  7656  005C70  0012               	return		;funcret
  7657  005C72                     __end_of___flneg:
  7658                           	opt stack 0
  7659                           tblptru	equ	0xFF8
  7660                           tblptrh	equ	0xFF7
  7661                           tblptrl	equ	0xFF6
  7662                           tablat	equ	0xFF5
  7663                           postinc0	equ	0xFEE
  7664                           wreg	equ	0xFE8
  7665                           postdec1	equ	0xFE5
  7666                           fsr1l	equ	0xFE1
  7667                           indf2	equ	0xFDF
  7668                           postinc2	equ	0xFDE
  7669                           postdec2	equ	0xFDD
  7670                           fsr2h	equ	0xFDA
  7671                           fsr2l	equ	0xFD9
  7672                           status	equ	0xFD8
  7673                           
  7674 ;; *************** function _eval_poly *****************
  7675 ;; Defined at:
  7676 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  x               4   75[BANK0 ] unsigned char 
  7679 ;;  d               2   79[BANK0 ] PTR const 
  7680 ;;		 -> sin@coeff_a(20), sin@coeff_b(16), atan@coeff_a(24), atan@coeff_b(20), 
  7681 ;;  n               2   81[BANK0 ] int 
  7682 ;; Auto vars:     Size  Location     Type
  7683 ;;  res             4   87[BANK0 ] int 
  7684 ;; Return value:  Size  Location     Type
  7685 ;;                  4   75[BANK0 ] int 
  7686 ;; Registers used:
  7687 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7688 ;; Tracked objects:
  7689 ;;		On entry : 0/0
  7690 ;;		On exit  : 0/0
  7691 ;;		Unchanged: 0/0
  7692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7693 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7697 ;;Total ram usage:       16 bytes
  7698 ;; Hardware stack levels used:    1
  7699 ;; Hardware stack levels required when called:    7
  7700 ;; This function calls:
  7701 ;;		___fladd
  7702 ;;		___flmul
  7703 ;; This function is called by:
  7704 ;;		_atan
  7705 ;;		_sin
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           	psect	text22
  7710  005314                     __ptext22:
  7711                           	opt stack 0
  7712  005314                     _eval_poly:
  7713                           	opt stack 19
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;incstack = 0
  7717  005314  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  7718  005318  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  7719  00531C  0100               	movlb	0	; () banked
  7720  00531E  90D8               	bcf	status,0,c
  7721  005320  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7722  005322  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7723  005324  0100               	movlb	0	; () banked
  7724  005326  90D8               	bcf	status,0,c
  7725  005328  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7726  00532A  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7727  00532C  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  7728  005330  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  7729  005334  0100               	movlb	0	; () banked
  7730  005336  51B3               	movf	??_eval_poly& (0+255),w,b
  7731  005338  0100               	movlb	0	; () banked
  7732  00533A  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  7733  00533C  0100               	movlb	0	; () banked
  7734  00533E  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  7735  005340  0100               	movlb	0	; () banked
  7736  005342  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  7737  005344  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  7738  005348  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  7739  00534C                     	if	0	;tblptru may be non-zero
  7740  00534C                     	endif
  7741  00534C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7742  00534C  0E00               	movlw	low (__mediumconst shr (0+16))
  7743  00534E  6EF8               	movwf	tblptru,c
  7744  005350                     	endif
  7745  005350  0009               	tblrd		*+
  7746  005352  CFF5 F0B7          	movff	tablat,eval_poly@res
  7747  005356  0009               	tblrd		*+
  7748  005358  CFF5 F0B8          	movff	tablat,eval_poly@res+1
  7749  00535C  0009               	tblrd		*+
  7750  00535E  CFF5 F0B9          	movff	tablat,eval_poly@res+2
  7751  005362  000A               	tblrd		*-
  7752  005364  CFF5 F0BA          	movff	tablat,eval_poly@res+3
  7753  005368  D053               	goto	l6259
  7754  00536A                     l6257:
  7755                           
  7756                           ; BSR set to: 0
  7757  00536A  C0B7  F094         	movff	eval_poly@res,___flmul@f2
  7758  00536E  C0B8  F095         	movff	eval_poly@res+1,___flmul@f2+1
  7759  005372  C0B9  F096         	movff	eval_poly@res+2,___flmul@f2+2
  7760  005376  C0BA  F097         	movff	eval_poly@res+3,___flmul@f2+3
  7761  00537A  C0AB  F090         	movff	eval_poly@x,___flmul@f1
  7762  00537E  C0AC  F091         	movff	eval_poly@x+1,___flmul@f1+1
  7763  005382  C0AD  F092         	movff	eval_poly@x+2,___flmul@f1+2
  7764  005386  C0AE  F093         	movff	eval_poly@x+3,___flmul@f1+3
  7765  00538A  EC1F  F027         	call	___flmul	;wreg free
  7766  00538E  C090  F09F         	movff	?___flmul,___fladd@f1
  7767  005392  C091  F0A0         	movff	?___flmul+1,___fladd@f1+1
  7768  005396  C092  F0A1         	movff	?___flmul+2,___fladd@f1+2
  7769  00539A  C093  F0A2         	movff	?___flmul+3,___fladd@f1+3
  7770  00539E  0100               	movlb	0	; () banked
  7771  0053A0  07B1               	decf	eval_poly@n& (0+255),f,b
  7772  0053A2  A0D8               	btfss	status,0,c
  7773  0053A4  07B2               	decf	(eval_poly@n+1)& (0+255),f,b
  7774  0053A6  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  7775  0053AA  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  7776  0053AE  0100               	movlb	0	; () banked
  7777  0053B0  90D8               	bcf	status,0,c
  7778  0053B2  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7779  0053B4  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7780  0053B6  0100               	movlb	0	; () banked
  7781  0053B8  90D8               	bcf	status,0,c
  7782  0053BA  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7783  0053BC  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7784  0053BE  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  7785  0053C2  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  7786  0053C6  0100               	movlb	0	; () banked
  7787  0053C8  51B3               	movf	??_eval_poly& (0+255),w,b
  7788  0053CA  0100               	movlb	0	; () banked
  7789  0053CC  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  7790  0053CE  0100               	movlb	0	; () banked
  7791  0053D0  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  7792  0053D2  0100               	movlb	0	; () banked
  7793  0053D4  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  7794  0053D6  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  7795  0053DA  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  7796  0053DE                     	if	0	;tblptru may be non-zero
  7797  0053DE                     	endif
  7798  0053DE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7799  0053DE  0E00               	movlw	low (__mediumconst shr (0+16))
  7800  0053E0  6EF8               	movwf	tblptru,c
  7801  0053E2                     	endif
  7802  0053E2  0009               	tblrd		*+
  7803  0053E4  CFF5 F0A3          	movff	tablat,___fladd@f2
  7804  0053E8  0009               	tblrd		*+
  7805  0053EA  CFF5 F0A4          	movff	tablat,___fladd@f2+1
  7806  0053EE  0009               	tblrd		*+
  7807  0053F0  CFF5 F0A5          	movff	tablat,___fladd@f2+2
  7808  0053F4  000A               	tblrd		*-
  7809  0053F6  CFF5 F0A6          	movff	tablat,___fladd@f2+3
  7810  0053FA  ECF0  F01F         	call	___fladd	;wreg free
  7811  0053FE  C09F  F0B7         	movff	?___fladd,eval_poly@res
  7812  005402  C0A0  F0B8         	movff	?___fladd+1,eval_poly@res+1
  7813  005406  C0A1  F0B9         	movff	?___fladd+2,eval_poly@res+2
  7814  00540A  C0A2  F0BA         	movff	?___fladd+3,eval_poly@res+3
  7815  00540E  D000               	goto	l6259
  7816  005410                     l6259:
  7817  005410  0100               	movlb	0	; () banked
  7818  005412  51B1               	movf	eval_poly@n& (0+255),w,b
  7819  005414  0100               	movlb	0	; () banked
  7820  005416  11B2               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7821  005418  A4D8               	btfss	status,2,c
  7822  00541A  D7A7               	goto	l6257
  7823                           
  7824                           ; BSR set to: 0
  7825  00541C  C0B7  F0AB         	movff	eval_poly@res,?_eval_poly
  7826  005420  C0B8  F0AC         	movff	eval_poly@res+1,?_eval_poly+1
  7827  005424  C0B9  F0AD         	movff	eval_poly@res+2,?_eval_poly+2
  7828  005428  C0BA  F0AE         	movff	eval_poly@res+3,?_eval_poly+3
  7829                           
  7830                           ; BSR set to: 0
  7831  00542C  0012               	return		;funcret
  7832  00542E                     __end_of_eval_poly:
  7833                           	opt stack 0
  7834                           tblptru	equ	0xFF8
  7835                           tblptrh	equ	0xFF7
  7836                           tblptrl	equ	0xFF6
  7837                           tablat	equ	0xFF5
  7838                           postinc0	equ	0xFEE
  7839                           wreg	equ	0xFE8
  7840                           postdec1	equ	0xFE5
  7841                           fsr1l	equ	0xFE1
  7842                           indf2	equ	0xFDF
  7843                           postinc2	equ	0xFDE
  7844                           postdec2	equ	0xFDD
  7845                           fsr2h	equ	0xFDA
  7846                           fsr2l	equ	0xFD9
  7847                           status	equ	0xFD8
  7848                           
  7849 ;; *************** function ___flmul *****************
  7850 ;; Defined at:
  7851 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  7852 ;; Parameters:    Size  Location     Type
  7853 ;;  f1              4   48[BANK0 ] int 
  7854 ;;  f2              4   52[BANK0 ] int 
  7855 ;; Auto vars:     Size  Location     Type
  7856 ;;  f3_as_produc    4   57[BANK0 ] unsigned long 
  7857 ;;  sign            1   62[BANK0 ] unsigned char 
  7858 ;;  cntr            1   61[BANK0 ] unsigned char 
  7859 ;;  exp             1   56[BANK0 ] unsigned char 
  7860 ;; Return value:  Size  Location     Type
  7861 ;;                  4   48[BANK0 ] unsigned char 
  7862 ;; Registers used:
  7863 ;;		wreg, status,2, status,0, cstack
  7864 ;; Tracked objects:
  7865 ;;		On entry : 0/0
  7866 ;;		On exit  : 0/0
  7867 ;;		Unchanged: 0/0
  7868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7869 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7870 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7872 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7873 ;;Total ram usage:       15 bytes
  7874 ;; Hardware stack levels used:    1
  7875 ;; Hardware stack levels required when called:    6
  7876 ;; This function calls:
  7877 ;;		___flpack
  7878 ;; This function is called by:
  7879 ;;		_parallelo
  7880 ;;		_matematica
  7881 ;;		_asin
  7882 ;;		_atan
  7883 ;;		_eval_poly
  7884 ;;		_sin
  7885 ;;		_sqrt
  7886 ;; This function uses a non-reentrant model
  7887 ;;
  7888                           
  7889                           	psect	text23
  7890  004E3E                     __ptext23:
  7891                           	opt stack 0
  7892  004E3E                     ___flmul:
  7893                           	opt stack 21
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;incstack = 0
  7897  004E3E  0100               	movlb	0	; () banked
  7898  004E40  3592               	rlcf	(___flmul@f1+2)& (0+255),w,b
  7899  004E42  3593               	rlcf	(___flmul@f1+3)& (0+255),w,b
  7900  004E44  0100               	movlb	0	; () banked
  7901  004E46  6F98               	movwf	___flmul@exp& (0+255),b
  7902  004E48  0100               	movlb	0	; () banked
  7903  004E4A  5198               	movf	___flmul@exp& (0+255),w,b
  7904  004E4C  A4D8               	btfss	status,2,c
  7905  004E4E  D00A               	goto	l6075
  7906                           
  7907                           ; BSR set to: 0
  7908  004E50  0E00               	movlw	0
  7909  004E52  0100               	movlb	0	; () banked
  7910  004E54  6F90               	movwf	?___flmul& (0+255),b
  7911  004E56  0E00               	movlw	0
  7912  004E58  6F91               	movwf	(?___flmul+1)& (0+255),b
  7913  004E5A  0E00               	movlw	0
  7914  004E5C  6F92               	movwf	(?___flmul+2)& (0+255),b
  7915  004E5E  0E00               	movlw	0
  7916  004E60  6F93               	movwf	(?___flmul+3)& (0+255),b
  7917                           
  7918                           ; BSR set to: 0
  7919  004E62  0012               	return	
  7920  004E64                     l6075:
  7921                           
  7922                           ; BSR set to: 0
  7923  004E64  0100               	movlb	0	; () banked
  7924  004E66  3596               	rlcf	(___flmul@f2+2)& (0+255),w,b
  7925  004E68  3597               	rlcf	(___flmul@f2+3)& (0+255),w,b
  7926  004E6A  0100               	movlb	0	; () banked
  7927  004E6C  6F9E               	movwf	___flmul@sign& (0+255),b
  7928  004E6E  0100               	movlb	0	; () banked
  7929  004E70  519E               	movf	___flmul@sign& (0+255),w,b
  7930  004E72  A4D8               	btfss	status,2,c
  7931  004E74  D00A               	goto	l6081
  7932                           
  7933                           ; BSR set to: 0
  7934  004E76  0E00               	movlw	0
  7935  004E78  0100               	movlb	0	; () banked
  7936  004E7A  6F90               	movwf	?___flmul& (0+255),b
  7937  004E7C  0E00               	movlw	0
  7938  004E7E  6F91               	movwf	(?___flmul+1)& (0+255),b
  7939  004E80  0E00               	movlw	0
  7940  004E82  6F92               	movwf	(?___flmul+2)& (0+255),b
  7941  004E84  0E00               	movlw	0
  7942  004E86  6F93               	movwf	(?___flmul+3)& (0+255),b
  7943                           
  7944                           ; BSR set to: 0
  7945  004E88  0012               	return	
  7946  004E8A                     l6081:
  7947                           
  7948                           ; BSR set to: 0
  7949  004E8A  0100               	movlb	0	; () banked
  7950  004E8C  519E               	movf	___flmul@sign& (0+255),w,b
  7951  004E8E  0F7B               	addlw	123
  7952  004E90  0100               	movlb	0	; () banked
  7953  004E92  2798               	addwf	___flmul@exp& (0+255),f,b
  7954                           
  7955                           ; BSR set to: 0
  7956  004E94  C093  F09E         	movff	___flmul@f1+3,___flmul@sign
  7957  004E98  0100               	movlb	0	; () banked
  7958  004E9A  5197               	movf	(___flmul@f2+3)& (0+255),w,b
  7959  004E9C  0100               	movlb	0	; () banked
  7960  004E9E  1B9E               	xorwf	___flmul@sign& (0+255),f,b
  7961  004EA0  0E80               	movlw	128
  7962  004EA2  0100               	movlb	0	; () banked
  7963  004EA4  179E               	andwf	___flmul@sign& (0+255),f,b
  7964                           
  7965                           ; BSR set to: 0
  7966  004EA6  0100               	movlb	0	; () banked
  7967  004EA8  8F92               	bsf	(___flmul@f1+2)& (0+255),7,b
  7968                           
  7969                           ; BSR set to: 0
  7970  004EAA  0100               	movlb	0	; () banked
  7971  004EAC  8F96               	bsf	(___flmul@f2+2)& (0+255),7,b
  7972  004EAE  0EFF               	movlw	255
  7973  004EB0  0100               	movlb	0	; () banked
  7974  004EB2  1794               	andwf	___flmul@f2& (0+255),f,b
  7975  004EB4  0EFF               	movlw	255
  7976  004EB6  1795               	andwf	(___flmul@f2+1)& (0+255),f,b
  7977  004EB8  0EFF               	movlw	255
  7978  004EBA  1796               	andwf	(___flmul@f2+2)& (0+255),f,b
  7979  004EBC  0E00               	movlw	0
  7980  004EBE  1797               	andwf	(___flmul@f2+3)& (0+255),f,b
  7981                           
  7982                           ; BSR set to: 0
  7983  004EC0  0E00               	movlw	0
  7984  004EC2  0100               	movlb	0	; () banked
  7985  004EC4  6F99               	movwf	___flmul@f3_as_product& (0+255),b
  7986  004EC6  0E00               	movlw	0
  7987  004EC8  6F9A               	movwf	(___flmul@f3_as_product+1)& (0+255),b
  7988  004ECA  0E00               	movlw	0
  7989  004ECC  6F9B               	movwf	(___flmul@f3_as_product+2)& (0+255),b
  7990  004ECE  0E00               	movlw	0
  7991  004ED0  6F9C               	movwf	(___flmul@f3_as_product+3)& (0+255),b
  7992                           
  7993                           ; BSR set to: 0
  7994  004ED2  0E07               	movlw	7
  7995  004ED4  0100               	movlb	0	; () banked
  7996  004ED6  6F9D               	movwf	___flmul@cntr& (0+255),b
  7997  004ED8  D000               	goto	l6093
  7998  004EDA                     l6093:
  7999                           
  8000                           ; BSR set to: 0
  8001  004EDA  0100               	movlb	0	; () banked
  8002  004EDC  A190               	btfss	___flmul@f1& (0+255),0,b
  8003  004EDE  D011               	goto	l6097
  8004                           
  8005                           ; BSR set to: 0
  8006  004EE0  0100               	movlb	0	; () banked
  8007  004EE2  5194               	movf	___flmul@f2& (0+255),w,b
  8008  004EE4  0100               	movlb	0	; () banked
  8009  004EE6  2799               	addwf	___flmul@f3_as_product& (0+255),f,b
  8010  004EE8  0100               	movlb	0	; () banked
  8011  004EEA  5195               	movf	(___flmul@f2+1)& (0+255),w,b
  8012  004EEC  0100               	movlb	0	; () banked
  8013  004EEE  239A               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8014  004EF0  0100               	movlb	0	; () banked
  8015  004EF2  5196               	movf	(___flmul@f2+2)& (0+255),w,b
  8016  004EF4  0100               	movlb	0	; () banked
  8017  004EF6  239B               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8018  004EF8  0100               	movlb	0	; () banked
  8019  004EFA  5197               	movf	(___flmul@f2+3)& (0+255),w,b
  8020  004EFC  0100               	movlb	0	; () banked
  8021  004EFE  239C               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8022  004F00  D000               	goto	l6097
  8023  004F02                     l6097:
  8024                           
  8025                           ; BSR set to: 0
  8026  004F02  0100               	movlb	0	; () banked
  8027  004F04  90D8               	bcf	status,0,c
  8028  004F06  3393               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8029  004F08  3392               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8030  004F0A  3391               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8031  004F0C  3390               	rrcf	___flmul@f1& (0+255),f,b
  8032                           
  8033                           ; BSR set to: 0
  8034  004F0E  0100               	movlb	0	; () banked
  8035  004F10  90D8               	bcf	status,0,c
  8036  004F12  3794               	rlcf	___flmul@f2& (0+255),f,b
  8037  004F14  3795               	rlcf	(___flmul@f2+1)& (0+255),f,b
  8038  004F16  3796               	rlcf	(___flmul@f2+2)& (0+255),f,b
  8039  004F18  3797               	rlcf	(___flmul@f2+3)& (0+255),f,b
  8040                           
  8041                           ; BSR set to: 0
  8042  004F1A  0100               	movlb	0	; () banked
  8043  004F1C  2F9D               	decfsz	___flmul@cntr& (0+255),f,b
  8044  004F1E  D7DD               	goto	l6093
  8045  004F20  D000               	goto	l6103
  8046  004F22                     l6103:
  8047                           
  8048                           ; BSR set to: 0
  8049  004F22  0E11               	movlw	17
  8050  004F24  0100               	movlb	0	; () banked
  8051  004F26  6F9D               	movwf	___flmul@cntr& (0+255),b
  8052  004F28  D000               	goto	l6105
  8053  004F2A                     l6105:
  8054                           
  8055                           ; BSR set to: 0
  8056  004F2A  0100               	movlb	0	; () banked
  8057  004F2C  A190               	btfss	___flmul@f1& (0+255),0,b
  8058  004F2E  D011               	goto	l6109
  8059                           
  8060                           ; BSR set to: 0
  8061  004F30  0100               	movlb	0	; () banked
  8062  004F32  5194               	movf	___flmul@f2& (0+255),w,b
  8063  004F34  0100               	movlb	0	; () banked
  8064  004F36  2799               	addwf	___flmul@f3_as_product& (0+255),f,b
  8065  004F38  0100               	movlb	0	; () banked
  8066  004F3A  5195               	movf	(___flmul@f2+1)& (0+255),w,b
  8067  004F3C  0100               	movlb	0	; () banked
  8068  004F3E  239A               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8069  004F40  0100               	movlb	0	; () banked
  8070  004F42  5196               	movf	(___flmul@f2+2)& (0+255),w,b
  8071  004F44  0100               	movlb	0	; () banked
  8072  004F46  239B               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8073  004F48  0100               	movlb	0	; () banked
  8074  004F4A  5197               	movf	(___flmul@f2+3)& (0+255),w,b
  8075  004F4C  0100               	movlb	0	; () banked
  8076  004F4E  239C               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8077  004F50  D000               	goto	l6109
  8078  004F52                     l6109:
  8079                           
  8080                           ; BSR set to: 0
  8081  004F52  0100               	movlb	0	; () banked
  8082  004F54  90D8               	bcf	status,0,c
  8083  004F56  3393               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8084  004F58  3392               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8085  004F5A  3391               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8086  004F5C  3390               	rrcf	___flmul@f1& (0+255),f,b
  8087                           
  8088                           ; BSR set to: 0
  8089  004F5E  0100               	movlb	0	; () banked
  8090  004F60  90D8               	bcf	status,0,c
  8091  004F62  339C               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
  8092  004F64  339B               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
  8093  004F66  339A               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
  8094  004F68  3399               	rrcf	___flmul@f3_as_product& (0+255),f,b
  8095                           
  8096                           ; BSR set to: 0
  8097  004F6A  0100               	movlb	0	; () banked
  8098  004F6C  2F9D               	decfsz	___flmul@cntr& (0+255),f,b
  8099  004F6E  D7DD               	goto	l6105
  8100  004F70  D000               	goto	l6115
  8101  004F72                     l6115:
  8102                           
  8103                           ; BSR set to: 0
  8104  004F72  C099  F077         	movff	___flmul@f3_as_product,___flpack@arg
  8105  004F76  C09A  F078         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  8106  004F7A  C09B  F079         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  8107  004F7E  C09C  F07A         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  8108  004F82  C098  F07B         	movff	___flmul@exp,___flpack@exp
  8109  004F86  C09E  F07C         	movff	___flmul@sign,___flpack@sign
  8110  004F8A  EC5F  F026         	call	___flpack	;wreg free
  8111  004F8E  C077  F090         	movff	?___flpack,?___flmul
  8112  004F92  C078  F091         	movff	?___flpack+1,?___flmul+1
  8113  004F96  C079  F092         	movff	?___flpack+2,?___flmul+2
  8114  004F9A  C07A  F093         	movff	?___flpack+3,?___flmul+3
  8115  004F9E  0012               	return	
  8116  004FA0  0012               	return		;funcret
  8117  004FA2                     __end_of___flmul:
  8118                           	opt stack 0
  8119                           tblptru	equ	0xFF8
  8120                           tblptrh	equ	0xFF7
  8121                           tblptrl	equ	0xFF6
  8122                           tablat	equ	0xFF5
  8123                           postinc0	equ	0xFEE
  8124                           wreg	equ	0xFE8
  8125                           postdec1	equ	0xFE5
  8126                           fsr1l	equ	0xFE1
  8127                           indf2	equ	0xFDF
  8128                           postinc2	equ	0xFDE
  8129                           postdec2	equ	0xFDD
  8130                           fsr2h	equ	0xFDA
  8131                           fsr2l	equ	0xFD9
  8132                           status	equ	0xFD8
  8133                           
  8134 ;; *************** function ___fladd *****************
  8135 ;; Defined at:
  8136 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  8137 ;; Parameters:    Size  Location     Type
  8138 ;;  f1              4   63[BANK0 ] unsigned char 
  8139 ;;  f2              4   67[BANK0 ] unsigned char 
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;  exp1            1   74[BANK0 ] unsigned char 
  8142 ;;  exp2            1   73[BANK0 ] unsigned char 
  8143 ;;  sign            1   72[BANK0 ] unsigned char 
  8144 ;; Return value:  Size  Location     Type
  8145 ;;                  4   63[BANK0 ] unsigned char 
  8146 ;; Registers used:
  8147 ;;		wreg, status,2, status,0, cstack
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/0
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8153 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;Total ram usage:       12 bytes
  8158 ;; Hardware stack levels used:    1
  8159 ;; Hardware stack levels required when called:    6
  8160 ;; This function calls:
  8161 ;;		___flpack
  8162 ;; This function is called by:
  8163 ;;		_park_routine
  8164 ;;		_parallelo
  8165 ;;		_matematica
  8166 ;;		_asin
  8167 ;;		_atan
  8168 ;;		_cos
  8169 ;;		_eval_poly
  8170 ;;		___flsub
  8171 ;;		_sin
  8172 ;;		_floor
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           	psect	text24
  8177  003FE0                     __ptext24:
  8178                           	opt stack 0
  8179  003FE0                     ___fladd:
  8180                           	opt stack 20
  8181                           
  8182                           ;incstack = 0
  8183  003FE0  0100               	movlb	0	; () banked
  8184  003FE2  35A1               	rlcf	(___fladd@f1+2)& (0+255),w,b
  8185  003FE4  35A2               	rlcf	(___fladd@f1+3)& (0+255),w,b
  8186  003FE6  0100               	movlb	0	; () banked
  8187  003FE8  6FAA               	movwf	___fladd@exp1& (0+255),b
  8188  003FEA  0100               	movlb	0	; () banked
  8189  003FEC  35A5               	rlcf	(___fladd@f2+2)& (0+255),w,b
  8190  003FEE  35A6               	rlcf	(___fladd@f2+3)& (0+255),w,b
  8191  003FF0  0100               	movlb	0	; () banked
  8192  003FF2  6FA9               	movwf	___fladd@exp2& (0+255),b
  8193  003FF4  0100               	movlb	0	; () banked
  8194  003FF6  51AA               	movf	___fladd@exp1& (0+255),w,b
  8195  003FF8  0100               	movlb	0	; () banked
  8196  003FFA  B4D8               	btfsc	status,2,c
  8197  003FFC  D011               	goto	l1143
  8198                           
  8199                           ; BSR set to: 0
  8200  003FFE  0100               	movlb	0	; () banked
  8201  004000  51A9               	movf	___fladd@exp2& (0+255),w,b
  8202  004002  0100               	movlb	0	; () banked
  8203  004004  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  8204  004006  B0D8               	btfsc	status,0,c
  8205  004008  D014               	goto	l6007
  8206                           
  8207                           ; BSR set to: 0
  8208  00400A  0100               	movlb	0	; () banked
  8209  00400C  51AA               	movf	___fladd@exp1& (0+255),w,b
  8210  00400E  0800               	sublw	0
  8211  004010  0100               	movlb	0	; () banked
  8212  004012  25A9               	addwf	___fladd@exp2& (0+255),w,b
  8213  004014  0100               	movlb	0	; () banked
  8214  004016  6FA7               	movwf	??___fladd& (0+255),b
  8215  004018  0E20               	movlw	32
  8216  00401A  0100               	movlb	0	; () banked
  8217  00401C  65A7               	cpfsgt	??___fladd& (0+255),b
  8218  00401E  D009               	goto	l6007
  8219  004020                     l1143:
  8220                           
  8221                           ; BSR set to: 0
  8222  004020  C0A3  F09F         	movff	___fladd@f2,?___fladd
  8223  004024  C0A4  F0A0         	movff	___fladd@f2+1,?___fladd+1
  8224  004028  C0A5  F0A1         	movff	___fladd@f2+2,?___fladd+2
  8225  00402C  C0A6  F0A2         	movff	___fladd@f2+3,?___fladd+3
  8226  004030  0012               	return	
  8227  004032                     l6007:
  8228                           
  8229                           ; BSR set to: 0
  8230  004032  0100               	movlb	0	; () banked
  8231  004034  51A9               	movf	___fladd@exp2& (0+255),w,b
  8232  004036  0100               	movlb	0	; () banked
  8233  004038  B4D8               	btfsc	status,2,c
  8234  00403A  D011               	goto	l1147
  8235                           
  8236                           ; BSR set to: 0
  8237  00403C  0100               	movlb	0	; () banked
  8238  00403E  51AA               	movf	___fladd@exp1& (0+255),w,b
  8239  004040  0100               	movlb	0	; () banked
  8240  004042  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  8241  004044  B0D8               	btfsc	status,0,c
  8242  004046  D014               	goto	l6013
  8243                           
  8244                           ; BSR set to: 0
  8245  004048  0100               	movlb	0	; () banked
  8246  00404A  51A9               	movf	___fladd@exp2& (0+255),w,b
  8247  00404C  0800               	sublw	0
  8248  00404E  0100               	movlb	0	; () banked
  8249  004050  25AA               	addwf	___fladd@exp1& (0+255),w,b
  8250  004052  0100               	movlb	0	; () banked
  8251  004054  6FA7               	movwf	??___fladd& (0+255),b
  8252  004056  0E20               	movlw	32
  8253  004058  0100               	movlb	0	; () banked
  8254  00405A  65A7               	cpfsgt	??___fladd& (0+255),b
  8255  00405C  D009               	goto	l6013
  8256  00405E                     l1147:
  8257                           
  8258                           ; BSR set to: 0
  8259  00405E  C09F  F09F         	movff	___fladd@f1,?___fladd
  8260  004062  C0A0  F0A0         	movff	___fladd@f1+1,?___fladd+1
  8261  004066  C0A1  F0A1         	movff	___fladd@f1+2,?___fladd+2
  8262  00406A  C0A2  F0A2         	movff	___fladd@f1+3,?___fladd+3
  8263  00406E  0012               	return	
  8264  004070                     l6013:
  8265                           
  8266                           ; BSR set to: 0
  8267  004070  0E06               	movlw	6
  8268  004072  0100               	movlb	0	; () banked
  8269  004074  6FA8               	movwf	___fladd@sign& (0+255),b
  8270                           
  8271                           ; BSR set to: 0
  8272  004076  0100               	movlb	0	; () banked
  8273  004078  AFA2               	btfss	(___fladd@f1+3)& (0+255),7,b
  8274  00407A  D003               	goto	l6019
  8275                           
  8276                           ; BSR set to: 0
  8277  00407C  0100               	movlb	0	; () banked
  8278  00407E  8FA8               	bsf	___fladd@sign& (0+255),7,b
  8279  004080  D000               	goto	l6019
  8280  004082                     l6019:
  8281                           
  8282                           ; BSR set to: 0
  8283  004082  0100               	movlb	0	; () banked
  8284  004084  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  8285  004086  D002               	goto	l1149
  8286                           
  8287                           ; BSR set to: 0
  8288  004088  0100               	movlb	0	; () banked
  8289  00408A  8DA8               	bsf	___fladd@sign& (0+255),6,b
  8290  00408C                     l1149:
  8291                           
  8292                           ; BSR set to: 0
  8293  00408C  0100               	movlb	0	; () banked
  8294  00408E  8FA1               	bsf	(___fladd@f1+2)& (0+255),7,b
  8295                           
  8296                           ; BSR set to: 0
  8297  004090  0EFF               	movlw	255
  8298  004092  0100               	movlb	0	; () banked
  8299  004094  179F               	andwf	___fladd@f1& (0+255),f,b
  8300  004096  0EFF               	movlw	255
  8301  004098  17A0               	andwf	(___fladd@f1+1)& (0+255),f,b
  8302  00409A  0EFF               	movlw	255
  8303  00409C  17A1               	andwf	(___fladd@f1+2)& (0+255),f,b
  8304  00409E  0E00               	movlw	0
  8305  0040A0  17A2               	andwf	(___fladd@f1+3)& (0+255),f,b
  8306                           
  8307                           ; BSR set to: 0
  8308  0040A2  0100               	movlb	0	; () banked
  8309  0040A4  8FA5               	bsf	(___fladd@f2+2)& (0+255),7,b
  8310  0040A6  0EFF               	movlw	255
  8311  0040A8  0100               	movlb	0	; () banked
  8312  0040AA  17A3               	andwf	___fladd@f2& (0+255),f,b
  8313  0040AC  0EFF               	movlw	255
  8314  0040AE  17A4               	andwf	(___fladd@f2+1)& (0+255),f,b
  8315  0040B0  0EFF               	movlw	255
  8316  0040B2  17A5               	andwf	(___fladd@f2+2)& (0+255),f,b
  8317  0040B4  0E00               	movlw	0
  8318  0040B6  17A6               	andwf	(___fladd@f2+3)& (0+255),f,b
  8319  0040B8  0100               	movlb	0	; () banked
  8320  0040BA  51A9               	movf	___fladd@exp2& (0+255),w,b
  8321  0040BC  0100               	movlb	0	; () banked
  8322  0040BE  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  8323  0040C0  B0D8               	btfsc	status,0,c
  8324  0040C2  D02A               	goto	l6037
  8325  0040C4                     l6027:
  8326                           
  8327                           ; BSR set to: 0
  8328  0040C4  0100               	movlb	0	; () banked
  8329  0040C6  90D8               	bcf	status,0,c
  8330  0040C8  37A3               	rlcf	___fladd@f2& (0+255),f,b
  8331  0040CA  37A4               	rlcf	(___fladd@f2+1)& (0+255),f,b
  8332  0040CC  37A5               	rlcf	(___fladd@f2+2)& (0+255),f,b
  8333  0040CE  37A6               	rlcf	(___fladd@f2+3)& (0+255),f,b
  8334  0040D0  0100               	movlb	0	; () banked
  8335  0040D2  07A9               	decf	___fladd@exp2& (0+255),f,b
  8336                           
  8337                           ; BSR set to: 0
  8338  0040D4  0100               	movlb	0	; () banked
  8339  0040D6  51AA               	movf	___fladd@exp1& (0+255),w,b
  8340  0040D8  0100               	movlb	0	; () banked
  8341  0040DA  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  8342  0040DC  B4D8               	btfsc	status,2,c
  8343  0040DE  D014               	goto	l6035
  8344                           
  8345                           ; BSR set to: 0
  8346  0040E0  0100               	movlb	0	; () banked
  8347  0040E2  07A8               	decf	___fladd@sign& (0+255),f,b
  8348  0040E4  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  8349  0040E8  0E07               	movlw	7
  8350  0040EA  0100               	movlb	0	; () banked
  8351  0040EC  17A7               	andwf	??___fladd& (0+255),f,b
  8352  0040EE  B4D8               	btfsc	status,2,c
  8353  0040F0  D00B               	goto	l6035
  8354  0040F2  D7E8               	goto	l6027
  8355                           
  8356                           ; BSR set to: 0
  8357                           
  8358                           ; BSR set to: 0
  8359  0040F4  D009               	goto	l6035
  8360  0040F6                     l6033:
  8361                           
  8362                           ; BSR set to: 0
  8363  0040F6  0100               	movlb	0	; () banked
  8364  0040F8  90D8               	bcf	status,0,c
  8365  0040FA  33A2               	rrcf	(___fladd@f1+3)& (0+255),f,b
  8366  0040FC  33A1               	rrcf	(___fladd@f1+2)& (0+255),f,b
  8367  0040FE  33A0               	rrcf	(___fladd@f1+1)& (0+255),f,b
  8368  004100  339F               	rrcf	___fladd@f1& (0+255),f,b
  8369  004102  0100               	movlb	0	; () banked
  8370  004104  2BAA               	incf	___fladd@exp1& (0+255),f,b
  8371  004106  D000               	goto	l6035
  8372  004108                     l6035:
  8373                           
  8374                           ; BSR set to: 0
  8375  004108  0100               	movlb	0	; () banked
  8376  00410A  51A9               	movf	___fladd@exp2& (0+255),w,b
  8377  00410C  0100               	movlb	0	; () banked
  8378  00410E  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  8379  004110  B4D8               	btfsc	status,2,c
  8380  004112  D032               	goto	l1158
  8381  004114  D7F0               	goto	l6033
  8382                           
  8383                           ; BSR set to: 0
  8384  004116  D030               	goto	l1158
  8385  004118                     l6037:
  8386                           
  8387                           ; BSR set to: 0
  8388  004118  0100               	movlb	0	; () banked
  8389  00411A  51AA               	movf	___fladd@exp1& (0+255),w,b
  8390  00411C  0100               	movlb	0	; () banked
  8391  00411E  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  8392  004120  B0D8               	btfsc	status,0,c
  8393  004122  D02A               	goto	l1158
  8394  004124                     l6039:
  8395                           
  8396                           ; BSR set to: 0
  8397  004124  0100               	movlb	0	; () banked
  8398  004126  90D8               	bcf	status,0,c
  8399  004128  379F               	rlcf	___fladd@f1& (0+255),f,b
  8400  00412A  37A0               	rlcf	(___fladd@f1+1)& (0+255),f,b
  8401  00412C  37A1               	rlcf	(___fladd@f1+2)& (0+255),f,b
  8402  00412E  37A2               	rlcf	(___fladd@f1+3)& (0+255),f,b
  8403  004130  0100               	movlb	0	; () banked
  8404  004132  07AA               	decf	___fladd@exp1& (0+255),f,b
  8405                           
  8406                           ; BSR set to: 0
  8407  004134  0100               	movlb	0	; () banked
  8408  004136  51AA               	movf	___fladd@exp1& (0+255),w,b
  8409  004138  0100               	movlb	0	; () banked
  8410  00413A  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  8411  00413C  B4D8               	btfsc	status,2,c
  8412  00413E  D014               	goto	l6047
  8413                           
  8414                           ; BSR set to: 0
  8415  004140  0100               	movlb	0	; () banked
  8416  004142  07A8               	decf	___fladd@sign& (0+255),f,b
  8417  004144  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  8418  004148  0E07               	movlw	7
  8419  00414A  0100               	movlb	0	; () banked
  8420  00414C  17A7               	andwf	??___fladd& (0+255),f,b
  8421  00414E  B4D8               	btfsc	status,2,c
  8422  004150  D00B               	goto	l6047
  8423  004152  D7E8               	goto	l6039
  8424                           
  8425                           ; BSR set to: 0
  8426                           
  8427                           ; BSR set to: 0
  8428  004154  D009               	goto	l6047
  8429  004156                     l6045:
  8430                           
  8431                           ; BSR set to: 0
  8432  004156  0100               	movlb	0	; () banked
  8433  004158  90D8               	bcf	status,0,c
  8434  00415A  33A6               	rrcf	(___fladd@f2+3)& (0+255),f,b
  8435  00415C  33A5               	rrcf	(___fladd@f2+2)& (0+255),f,b
  8436  00415E  33A4               	rrcf	(___fladd@f2+1)& (0+255),f,b
  8437  004160  33A3               	rrcf	___fladd@f2& (0+255),f,b
  8438  004162  0100               	movlb	0	; () banked
  8439  004164  2BA9               	incf	___fladd@exp2& (0+255),f,b
  8440  004166  D000               	goto	l6047
  8441  004168                     l6047:
  8442                           
  8443                           ; BSR set to: 0
  8444  004168  0100               	movlb	0	; () banked
  8445  00416A  51A9               	movf	___fladd@exp2& (0+255),w,b
  8446  00416C  0100               	movlb	0	; () banked
  8447  00416E  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  8448  004170  B4D8               	btfsc	status,2,c
  8449  004172  D002               	goto	l1158
  8450  004174  D7F0               	goto	l6045
  8451                           
  8452                           ; BSR set to: 0
  8453  004176  D000               	goto	l1158
  8454  004178                     l1158:
  8455                           
  8456                           ; BSR set to: 0
  8457  004178  0100               	movlb	0	; () banked
  8458  00417A  AFA8               	btfss	___fladd@sign& (0+255),7,b
  8459  00417C  D011               	goto	l6051
  8460                           
  8461                           ; BSR set to: 0
  8462  00417E  0EFF               	movlw	255
  8463  004180  0100               	movlb	0	; () banked
  8464  004182  1B9F               	xorwf	___fladd@f1& (0+255),f,b
  8465  004184  0EFF               	movlw	255
  8466  004186  1BA0               	xorwf	(___fladd@f1+1)& (0+255),f,b
  8467  004188  0EFF               	movlw	255
  8468  00418A  1BA1               	xorwf	(___fladd@f1+2)& (0+255),f,b
  8469  00418C  0EFF               	movlw	255
  8470  00418E  1BA2               	xorwf	(___fladd@f1+3)& (0+255),f,b
  8471  004190  0E01               	movlw	1
  8472  004192  0100               	movlb	0	; () banked
  8473  004194  279F               	addwf	___fladd@f1& (0+255),f,b
  8474  004196  0E00               	movlw	0
  8475  004198  23A0               	addwfc	(___fladd@f1+1)& (0+255),f,b
  8476  00419A  23A1               	addwfc	(___fladd@f1+2)& (0+255),f,b
  8477  00419C  23A2               	addwfc	(___fladd@f1+3)& (0+255),f,b
  8478  00419E  D000               	goto	l6051
  8479  0041A0                     l6051:
  8480                           
  8481                           ; BSR set to: 0
  8482  0041A0  0100               	movlb	0	; () banked
  8483  0041A2  ADA8               	btfss	___fladd@sign& (0+255),6,b
  8484  0041A4  D011               	goto	l6055
  8485                           
  8486                           ; BSR set to: 0
  8487  0041A6  0EFF               	movlw	255
  8488  0041A8  0100               	movlb	0	; () banked
  8489  0041AA  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  8490  0041AC  0EFF               	movlw	255
  8491  0041AE  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  8492  0041B0  0EFF               	movlw	255
  8493  0041B2  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  8494  0041B4  0EFF               	movlw	255
  8495  0041B6  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  8496  0041B8  0E01               	movlw	1
  8497  0041BA  0100               	movlb	0	; () banked
  8498  0041BC  27A3               	addwf	___fladd@f2& (0+255),f,b
  8499  0041BE  0E00               	movlw	0
  8500  0041C0  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8501  0041C2  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8502  0041C4  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8503  0041C6  D000               	goto	l6055
  8504  0041C8                     l6055:
  8505                           
  8506                           ; BSR set to: 0
  8507  0041C8  0E00               	movlw	0
  8508  0041CA  0100               	movlb	0	; () banked
  8509  0041CC  6FA8               	movwf	___fladd@sign& (0+255),b
  8510                           
  8511                           ; BSR set to: 0
  8512  0041CE  0100               	movlb	0	; () banked
  8513  0041D0  519F               	movf	___fladd@f1& (0+255),w,b
  8514  0041D2  0100               	movlb	0	; () banked
  8515  0041D4  27A3               	addwf	___fladd@f2& (0+255),f,b
  8516  0041D6  0100               	movlb	0	; () banked
  8517  0041D8  51A0               	movf	(___fladd@f1+1)& (0+255),w,b
  8518  0041DA  0100               	movlb	0	; () banked
  8519  0041DC  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8520  0041DE  0100               	movlb	0	; () banked
  8521  0041E0  51A1               	movf	(___fladd@f1+2)& (0+255),w,b
  8522  0041E2  0100               	movlb	0	; () banked
  8523  0041E4  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8524  0041E6  0100               	movlb	0	; () banked
  8525  0041E8  51A2               	movf	(___fladd@f1+3)& (0+255),w,b
  8526  0041EA  0100               	movlb	0	; () banked
  8527  0041EC  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8528                           
  8529                           ; BSR set to: 0
  8530  0041EE  0100               	movlb	0	; () banked
  8531  0041F0  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  8532  0041F2  D014               	goto	l6065
  8533                           
  8534                           ; BSR set to: 0
  8535  0041F4  0EFF               	movlw	255
  8536  0041F6  0100               	movlb	0	; () banked
  8537  0041F8  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  8538  0041FA  0EFF               	movlw	255
  8539  0041FC  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  8540  0041FE  0EFF               	movlw	255
  8541  004200  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  8542  004202  0EFF               	movlw	255
  8543  004204  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  8544  004206  0E01               	movlw	1
  8545  004208  0100               	movlb	0	; () banked
  8546  00420A  27A3               	addwf	___fladd@f2& (0+255),f,b
  8547  00420C  0E00               	movlw	0
  8548  00420E  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8549  004210  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8550  004212  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8551                           
  8552                           ; BSR set to: 0
  8553  004214  0E01               	movlw	1
  8554  004216  0100               	movlb	0	; () banked
  8555  004218  6FA8               	movwf	___fladd@sign& (0+255),b
  8556  00421A  D000               	goto	l6065
  8557  00421C                     l6065:
  8558                           
  8559                           ; BSR set to: 0
  8560  00421C  C0A3  F077         	movff	___fladd@f2,___flpack@arg
  8561  004220  C0A4  F078         	movff	___fladd@f2+1,___flpack@arg+1
  8562  004224  C0A5  F079         	movff	___fladd@f2+2,___flpack@arg+2
  8563  004228  C0A6  F07A         	movff	___fladd@f2+3,___flpack@arg+3
  8564  00422C  C0AA  F07B         	movff	___fladd@exp1,___flpack@exp
  8565  004230  C0A8  F07C         	movff	___fladd@sign,___flpack@sign
  8566  004234  EC5F  F026         	call	___flpack	;wreg free
  8567  004238  C077  F09F         	movff	?___flpack,?___fladd
  8568  00423C  C078  F0A0         	movff	?___flpack+1,?___fladd+1
  8569  004240  C079  F0A1         	movff	?___flpack+2,?___fladd+2
  8570  004244  C07A  F0A2         	movff	?___flpack+3,?___fladd+3
  8571  004248  0012               	return	
  8572  00424A  0012               	return		;funcret
  8573  00424C                     __end_of___fladd:
  8574                           	opt stack 0
  8575                           tblptru	equ	0xFF8
  8576                           tblptrh	equ	0xFF7
  8577                           tblptrl	equ	0xFF6
  8578                           tablat	equ	0xFF5
  8579                           postinc0	equ	0xFEE
  8580                           wreg	equ	0xFE8
  8581                           postdec1	equ	0xFE5
  8582                           fsr1l	equ	0xFE1
  8583                           indf2	equ	0xFDF
  8584                           postinc2	equ	0xFDE
  8585                           postdec2	equ	0xFDD
  8586                           fsr2h	equ	0xFDA
  8587                           fsr2l	equ	0xFD9
  8588                           status	equ	0xFD8
  8589                           
  8590 ;; *************** function ___flge *****************
  8591 ;; Defined at:
  8592 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  8593 ;; Parameters:    Size  Location     Type
  8594 ;;  ff1             4   83[BANK0 ] unsigned char 
  8595 ;;  ff2             4   87[BANK0 ] unsigned char 
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;		None
  8598 ;; Return value:  Size  Location     Type
  8599 ;;		None               void
  8600 ;; Registers used:
  8601 ;;		wreg, status,2, status,0
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8607 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;Total ram usage:       12 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; Hardware stack levels required when called:    5
  8614 ;; This function calls:
  8615 ;;		Nothing
  8616 ;; This function is called by:
  8617 ;;		_parallelo
  8618 ;;		_asin
  8619 ;;		_atan
  8620 ;;		_cos
  8621 ;;		_sin
  8622 ;;		_sqrt
  8623 ;;		_floor
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           	psect	text25
  8628  00553E                     __ptext25:
  8629                           	opt stack 0
  8630  00553E                     ___flge:
  8631                           	opt stack 22
  8632                           
  8633                           ;incstack = 0
  8634  00553E  0100               	movlb	0	; () banked
  8635  005540  AFB6               	btfss	(___flge@ff1+3)& (0+255),7,b
  8636  005542  D027               	goto	l6123
  8637                           
  8638                           ; BSR set to: 0
  8639  005544  C0B3  F0BB         	movff	___flge@ff1,??___flge
  8640  005548  C0B4  F0BC         	movff	___flge@ff1+1,??___flge+1
  8641  00554C  C0B5  F0BD         	movff	___flge@ff1+2,??___flge+2
  8642  005550  C0B6  F0BE         	movff	___flge@ff1+3,??___flge+3
  8643  005554  0100               	movlb	0	; () banked
  8644  005556  1FBB               	comf	??___flge& (0+255),f,b
  8645  005558  1FBC               	comf	(??___flge+1)& (0+255),f,b
  8646  00555A  1FBD               	comf	(??___flge+2)& (0+255),f,b
  8647  00555C  1FBE               	comf	(??___flge+3)& (0+255),f,b
  8648  00555E  2BBB               	incf	??___flge& (0+255),f,b
  8649  005560  0E00               	movlw	0
  8650  005562  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  8651  005564  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  8652  005566  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  8653  005568  0E00               	movlw	0
  8654  00556A  0100               	movlb	0	; () banked
  8655  00556C  25BB               	addwf	??___flge& (0+255),w,b
  8656  00556E  0100               	movlb	0	; () banked
  8657  005570  6FB3               	movwf	___flge@ff1& (0+255),b
  8658  005572  0E00               	movlw	0
  8659  005574  0100               	movlb	0	; () banked
  8660  005576  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  8661  005578  0100               	movlb	0	; () banked
  8662  00557A  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  8663  00557C  0E00               	movlw	0
  8664  00557E  0100               	movlb	0	; () banked
  8665  005580  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  8666  005582  0100               	movlb	0	; () banked
  8667  005584  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  8668  005586  0E80               	movlw	128
  8669  005588  0100               	movlb	0	; () banked
  8670  00558A  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  8671  00558C  0100               	movlb	0	; () banked
  8672  00558E  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  8673  005590  D000               	goto	l6123
  8674  005592                     l6123:
  8675                           
  8676                           ; BSR set to: 0
  8677  005592  0100               	movlb	0	; () banked
  8678  005594  AFBA               	btfss	(___flge@ff2+3)& (0+255),7,b
  8679  005596  D026               	goto	l1183
  8680                           
  8681                           ; BSR set to: 0
  8682  005598  C0B7  F0BB         	movff	___flge@ff2,??___flge
  8683  00559C  C0B8  F0BC         	movff	___flge@ff2+1,??___flge+1
  8684  0055A0  C0B9  F0BD         	movff	___flge@ff2+2,??___flge+2
  8685  0055A4  C0BA  F0BE         	movff	___flge@ff2+3,??___flge+3
  8686  0055A8  0100               	movlb	0	; () banked
  8687  0055AA  1FBB               	comf	??___flge& (0+255),f,b
  8688  0055AC  1FBC               	comf	(??___flge+1)& (0+255),f,b
  8689  0055AE  1FBD               	comf	(??___flge+2)& (0+255),f,b
  8690  0055B0  1FBE               	comf	(??___flge+3)& (0+255),f,b
  8691  0055B2  2BBB               	incf	??___flge& (0+255),f,b
  8692  0055B4  0E00               	movlw	0
  8693  0055B6  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  8694  0055B8  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  8695  0055BA  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  8696  0055BC  0E00               	movlw	0
  8697  0055BE  0100               	movlb	0	; () banked
  8698  0055C0  25BB               	addwf	??___flge& (0+255),w,b
  8699  0055C2  0100               	movlb	0	; () banked
  8700  0055C4  6FB7               	movwf	___flge@ff2& (0+255),b
  8701  0055C6  0E00               	movlw	0
  8702  0055C8  0100               	movlb	0	; () banked
  8703  0055CA  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  8704  0055CC  0100               	movlb	0	; () banked
  8705  0055CE  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  8706  0055D0  0E00               	movlw	0
  8707  0055D2  0100               	movlb	0	; () banked
  8708  0055D4  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  8709  0055D6  0100               	movlb	0	; () banked
  8710  0055D8  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  8711  0055DA  0E80               	movlw	128
  8712  0055DC  0100               	movlb	0	; () banked
  8713  0055DE  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  8714  0055E0  0100               	movlb	0	; () banked
  8715  0055E2  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  8716  0055E4                     l1183:
  8717                           
  8718                           ; BSR set to: 0
  8719  0055E4  0E00               	movlw	0
  8720  0055E6  0100               	movlb	0	; () banked
  8721  0055E8  1BB3               	xorwf	___flge@ff1& (0+255),f,b
  8722  0055EA  0E00               	movlw	0
  8723  0055EC  1BB4               	xorwf	(___flge@ff1+1)& (0+255),f,b
  8724  0055EE  0E00               	movlw	0
  8725  0055F0  1BB5               	xorwf	(___flge@ff1+2)& (0+255),f,b
  8726  0055F2  0E80               	movlw	128
  8727  0055F4  1BB6               	xorwf	(___flge@ff1+3)& (0+255),f,b
  8728  0055F6  0E00               	movlw	0
  8729  0055F8  0100               	movlb	0	; () banked
  8730  0055FA  1BB7               	xorwf	___flge@ff2& (0+255),f,b
  8731  0055FC  0E00               	movlw	0
  8732  0055FE  1BB8               	xorwf	(___flge@ff2+1)& (0+255),f,b
  8733  005600  0E00               	movlw	0
  8734  005602  1BB9               	xorwf	(___flge@ff2+2)& (0+255),f,b
  8735  005604  0E80               	movlw	128
  8736  005606  1BBA               	xorwf	(___flge@ff2+3)& (0+255),f,b
  8737  005608  0100               	movlb	0	; () banked
  8738  00560A  51B7               	movf	___flge@ff2& (0+255),w,b
  8739  00560C  0100               	movlb	0	; () banked
  8740  00560E  5DB3               	subwf	___flge@ff1& (0+255),w,b
  8741  005610  0100               	movlb	0	; () banked
  8742  005612  51B8               	movf	(___flge@ff2+1)& (0+255),w,b
  8743  005614  0100               	movlb	0	; () banked
  8744  005616  59B4               	subwfb	(___flge@ff1+1)& (0+255),w,b
  8745  005618  0100               	movlb	0	; () banked
  8746  00561A  51B9               	movf	(___flge@ff2+2)& (0+255),w,b
  8747  00561C  0100               	movlb	0	; () banked
  8748  00561E  59B5               	subwfb	(___flge@ff1+2)& (0+255),w,b
  8749  005620  0100               	movlb	0	; () banked
  8750  005622  51BA               	movf	(___flge@ff2+3)& (0+255),w,b
  8751  005624  0100               	movlb	0	; () banked
  8752  005626  59B6               	subwfb	(___flge@ff1+3)& (0+255),w,b
  8753  005628  B0D8               	btfsc	status,0,c
  8754  00562A  D002               	goto	l6129
  8755                           
  8756                           ; BSR set to: 0
  8757  00562C  90D8               	bcf	status,0,c
  8758  00562E  0012               	return	
  8759  005630                     l6129:
  8760                           
  8761                           ; BSR set to: 0
  8762  005630  80D8               	bsf	status,0,c
  8763                           
  8764                           ; BSR set to: 0
  8765  005632  0012               	return	
  8766                           
  8767                           ; BSR set to: 0
  8768                           
  8769                           ; BSR set to: 0
  8770  005634  0012               	return		;funcret
  8771  005636                     __end_of___flge:
  8772                           	opt stack 0
  8773                           tblptru	equ	0xFF8
  8774                           tblptrh	equ	0xFF7
  8775                           tblptrl	equ	0xFF6
  8776                           tablat	equ	0xFF5
  8777                           postinc0	equ	0xFEE
  8778                           wreg	equ	0xFE8
  8779                           postdec1	equ	0xFE5
  8780                           fsr1l	equ	0xFE1
  8781                           indf2	equ	0xFDF
  8782                           postinc2	equ	0xFDE
  8783                           postdec2	equ	0xFDD
  8784                           fsr2h	equ	0xFDA
  8785                           fsr2l	equ	0xFD9
  8786                           status	equ	0xFD8
  8787                           
  8788 ;; *************** function ___fldiv *****************
  8789 ;; Defined at:
  8790 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  8791 ;; Parameters:    Size  Location     Type
  8792 ;;  f1              4   33[BANK0 ] unsigned char 
  8793 ;;  f2              4   37[BANK0 ] unsigned char 
  8794 ;; Auto vars:     Size  Location     Type
  8795 ;;  f3              4   41[BANK0 ] unsigned char 
  8796 ;;  sign            1   47[BANK0 ] unsigned char 
  8797 ;;  exp             1   46[BANK0 ] unsigned char 
  8798 ;;  cntr            1   45[BANK0 ] unsigned char 
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  4   33[BANK0 ] unsigned char 
  8801 ;; Registers used:
  8802 ;;		wreg, status,2, status,0, cstack
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8808 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;Total ram usage:       15 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; Hardware stack levels required when called:    6
  8815 ;; This function calls:
  8816 ;;		___flpack
  8817 ;; This function is called by:
  8818 ;;		_parallelo
  8819 ;;		_matematica
  8820 ;;		_asin
  8821 ;;		_atan
  8822 ;;		_sin
  8823 ;; This function uses a non-reentrant model
  8824 ;;
  8825                           
  8826                           	psect	text26
  8827  004FA2                     __ptext26:
  8828                           	opt stack 0
  8829  004FA2                     ___fldiv:
  8830                           	opt stack 20
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;incstack = 0
  8834  004FA2  0100               	movlb	0	; () banked
  8835  004FA4  3583               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  8836  004FA6  3584               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  8837  004FA8  0100               	movlb	0	; () banked
  8838  004FAA  6F8E               	movwf	___fldiv@exp& (0+255),b
  8839  004FAC  0100               	movlb	0	; () banked
  8840  004FAE  518E               	movf	___fldiv@exp& (0+255),w,b
  8841  004FB0  A4D8               	btfss	status,2,c
  8842  004FB2  D00A               	goto	l6207
  8843                           
  8844                           ; BSR set to: 0
  8845  004FB4  0E00               	movlw	0
  8846  004FB6  0100               	movlb	0	; () banked
  8847  004FB8  6F81               	movwf	?___fldiv& (0+255),b
  8848  004FBA  0E00               	movlw	0
  8849  004FBC  6F82               	movwf	(?___fldiv+1)& (0+255),b
  8850  004FBE  0E00               	movlw	0
  8851  004FC0  6F83               	movwf	(?___fldiv+2)& (0+255),b
  8852  004FC2  0E00               	movlw	0
  8853  004FC4  6F84               	movwf	(?___fldiv+3)& (0+255),b
  8854                           
  8855                           ; BSR set to: 0
  8856  004FC6  0012               	return	
  8857  004FC8                     l6207:
  8858                           
  8859                           ; BSR set to: 0
  8860  004FC8  0100               	movlb	0	; () banked
  8861  004FCA  3587               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  8862  004FCC  3588               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  8863  004FCE  0100               	movlb	0	; () banked
  8864  004FD0  6F8F               	movwf	___fldiv@sign& (0+255),b
  8865  004FD2  0100               	movlb	0	; () banked
  8866  004FD4  518F               	movf	___fldiv@sign& (0+255),w,b
  8867  004FD6  A4D8               	btfss	status,2,c
  8868  004FD8  D00A               	goto	l6213
  8869                           
  8870                           ; BSR set to: 0
  8871  004FDA  0E00               	movlw	0
  8872  004FDC  0100               	movlb	0	; () banked
  8873  004FDE  6F81               	movwf	?___fldiv& (0+255),b
  8874  004FE0  0E00               	movlw	0
  8875  004FE2  6F82               	movwf	(?___fldiv+1)& (0+255),b
  8876  004FE4  0E00               	movlw	0
  8877  004FE6  6F83               	movwf	(?___fldiv+2)& (0+255),b
  8878  004FE8  0E00               	movlw	0
  8879  004FEA  6F84               	movwf	(?___fldiv+3)& (0+255),b
  8880                           
  8881                           ; BSR set to: 0
  8882  004FEC  0012               	return	
  8883  004FEE                     l6213:
  8884                           
  8885                           ; BSR set to: 0
  8886  004FEE  0100               	movlb	0	; () banked
  8887  004FF0  518F               	movf	___fldiv@sign& (0+255),w,b
  8888  004FF2  0F89               	addlw	137
  8889  004FF4  0100               	movlb	0	; () banked
  8890  004FF6  5F8E               	subwf	___fldiv@exp& (0+255),f,b
  8891                           
  8892                           ; BSR set to: 0
  8893  004FF8  C084  F08F         	movff	___fldiv@f1+3,___fldiv@sign
  8894  004FFC  0100               	movlb	0	; () banked
  8895  004FFE  5188               	movf	(___fldiv@f2+3)& (0+255),w,b
  8896  005000  0100               	movlb	0	; () banked
  8897  005002  1B8F               	xorwf	___fldiv@sign& (0+255),f,b
  8898  005004  0E80               	movlw	128
  8899  005006  0100               	movlb	0	; () banked
  8900  005008  178F               	andwf	___fldiv@sign& (0+255),f,b
  8901                           
  8902                           ; BSR set to: 0
  8903  00500A  0100               	movlb	0	; () banked
  8904  00500C  8F83               	bsf	(___fldiv@f1+2)& (0+255),7,b
  8905                           
  8906                           ; BSR set to: 0
  8907  00500E  0EFF               	movlw	255
  8908  005010  0100               	movlb	0	; () banked
  8909  005012  1781               	andwf	___fldiv@f1& (0+255),f,b
  8910  005014  0EFF               	movlw	255
  8911  005016  1782               	andwf	(___fldiv@f1+1)& (0+255),f,b
  8912  005018  0EFF               	movlw	255
  8913  00501A  1783               	andwf	(___fldiv@f1+2)& (0+255),f,b
  8914  00501C  0E00               	movlw	0
  8915  00501E  1784               	andwf	(___fldiv@f1+3)& (0+255),f,b
  8916  005020  0100               	movlb	0	; () banked
  8917  005022  8F87               	bsf	(___fldiv@f2+2)& (0+255),7,b
  8918                           
  8919                           ; BSR set to: 0
  8920  005024  0EFF               	movlw	255
  8921  005026  0100               	movlb	0	; () banked
  8922  005028  1785               	andwf	___fldiv@f2& (0+255),f,b
  8923  00502A  0EFF               	movlw	255
  8924  00502C  1786               	andwf	(___fldiv@f2+1)& (0+255),f,b
  8925  00502E  0EFF               	movlw	255
  8926  005030  1787               	andwf	(___fldiv@f2+2)& (0+255),f,b
  8927  005032  0E00               	movlw	0
  8928  005034  1788               	andwf	(___fldiv@f2+3)& (0+255),f,b
  8929                           
  8930                           ; BSR set to: 0
  8931  005036  0E20               	movlw	32
  8932  005038  0100               	movlb	0	; () banked
  8933  00503A  6F8D               	movwf	___fldiv@cntr& (0+255),b
  8934  00503C  D000               	goto	l6225
  8935  00503E                     l6225:
  8936                           
  8937                           ; BSR set to: 0
  8938  00503E  0100               	movlb	0	; () banked
  8939  005040  90D8               	bcf	status,0,c
  8940  005042  3789               	rlcf	___fldiv@f3& (0+255),f,b
  8941  005044  378A               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  8942  005046  378B               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  8943  005048  378C               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  8944                           
  8945                           ; BSR set to: 0
  8946  00504A  0100               	movlb	0	; () banked
  8947  00504C  5185               	movf	___fldiv@f2& (0+255),w,b
  8948  00504E  0100               	movlb	0	; () banked
  8949  005050  5D81               	subwf	___fldiv@f1& (0+255),w,b
  8950  005052  0100               	movlb	0	; () banked
  8951  005054  5186               	movf	(___fldiv@f2+1)& (0+255),w,b
  8952  005056  0100               	movlb	0	; () banked
  8953  005058  5982               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  8954  00505A  0100               	movlb	0	; () banked
  8955  00505C  5187               	movf	(___fldiv@f2+2)& (0+255),w,b
  8956  00505E  0100               	movlb	0	; () banked
  8957  005060  5983               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  8958  005062  0100               	movlb	0	; () banked
  8959  005064  5188               	movf	(___fldiv@f2+3)& (0+255),w,b
  8960  005066  0100               	movlb	0	; () banked
  8961  005068  5984               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  8962  00506A  A0D8               	btfss	status,0,c
  8963  00506C  D013               	goto	l6233
  8964                           
  8965                           ; BSR set to: 0
  8966  00506E  0100               	movlb	0	; () banked
  8967  005070  5185               	movf	___fldiv@f2& (0+255),w,b
  8968  005072  0100               	movlb	0	; () banked
  8969  005074  5F81               	subwf	___fldiv@f1& (0+255),f,b
  8970  005076  0100               	movlb	0	; () banked
  8971  005078  5186               	movf	(___fldiv@f2+1)& (0+255),w,b
  8972  00507A  0100               	movlb	0	; () banked
  8973  00507C  5B82               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  8974  00507E  0100               	movlb	0	; () banked
  8975  005080  5187               	movf	(___fldiv@f2+2)& (0+255),w,b
  8976  005082  0100               	movlb	0	; () banked
  8977  005084  5B83               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  8978  005086  0100               	movlb	0	; () banked
  8979  005088  5188               	movf	(___fldiv@f2+3)& (0+255),w,b
  8980  00508A  0100               	movlb	0	; () banked
  8981  00508C  5B84               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  8982                           
  8983                           ; BSR set to: 0
  8984  00508E  0100               	movlb	0	; () banked
  8985  005090  8189               	bsf	___fldiv@f3& (0+255),0,b
  8986  005092  D000               	goto	l6233
  8987  005094                     l6233:
  8988                           
  8989                           ; BSR set to: 0
  8990  005094  0100               	movlb	0	; () banked
  8991  005096  90D8               	bcf	status,0,c
  8992  005098  3781               	rlcf	___fldiv@f1& (0+255),f,b
  8993  00509A  3782               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  8994  00509C  3783               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  8995  00509E  3784               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  8996                           
  8997                           ; BSR set to: 0
  8998  0050A0  0100               	movlb	0	; () banked
  8999  0050A2  2F8D               	decfsz	___fldiv@cntr& (0+255),f,b
  9000  0050A4  D7CC               	goto	l6225
  9001  0050A6  D000               	goto	l6237
  9002  0050A8                     l6237:
  9003                           
  9004                           ; BSR set to: 0
  9005  0050A8  C089  F077         	movff	___fldiv@f3,___flpack@arg
  9006  0050AC  C08A  F078         	movff	___fldiv@f3+1,___flpack@arg+1
  9007  0050B0  C08B  F079         	movff	___fldiv@f3+2,___flpack@arg+2
  9008  0050B4  C08C  F07A         	movff	___fldiv@f3+3,___flpack@arg+3
  9009  0050B8  C08E  F07B         	movff	___fldiv@exp,___flpack@exp
  9010  0050BC  C08F  F07C         	movff	___fldiv@sign,___flpack@sign
  9011  0050C0  EC5F  F026         	call	___flpack	;wreg free
  9012  0050C4  C077  F081         	movff	?___flpack,?___fldiv
  9013  0050C8  C078  F082         	movff	?___flpack+1,?___fldiv+1
  9014  0050CC  C079  F083         	movff	?___flpack+2,?___fldiv+2
  9015  0050D0  C07A  F084         	movff	?___flpack+3,?___fldiv+3
  9016  0050D4  0012               	return	
  9017  0050D6  0012               	return		;funcret
  9018  0050D8                     __end_of___fldiv:
  9019                           	opt stack 0
  9020                           tblptru	equ	0xFF8
  9021                           tblptrh	equ	0xFF7
  9022                           tblptrl	equ	0xFF6
  9023                           tablat	equ	0xFF5
  9024                           postinc0	equ	0xFEE
  9025                           wreg	equ	0xFE8
  9026                           postdec1	equ	0xFE5
  9027                           fsr1l	equ	0xFE1
  9028                           indf2	equ	0xFDF
  9029                           postinc2	equ	0xFDE
  9030                           postdec2	equ	0xFDD
  9031                           fsr2h	equ	0xFDA
  9032                           fsr2l	equ	0xFD9
  9033                           status	equ	0xFD8
  9034                           
  9035 ;; *************** function _delay_s *****************
  9036 ;; Defined at:
  9037 ;;		line 102 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  9038 ;; Parameters:    Size  Location     Type
  9039 ;;  value_s         1    wreg     unsigned char 
  9040 ;; Auto vars:     Size  Location     Type
  9041 ;;  value_s         1   31[BANK0 ] unsigned char 
  9042 ;;  repeat_loop     1   32[BANK0 ] unsigned char 
  9043 ;; Return value:  Size  Location     Type
  9044 ;;		None               void
  9045 ;; Registers used:
  9046 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9047 ;; Tracked objects:
  9048 ;;		On entry : 0/0
  9049 ;;		On exit  : 0/0
  9050 ;;		Unchanged: 0/0
  9051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9053 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;Total ram usage:        2 bytes
  9057 ;; Hardware stack levels used:    1
  9058 ;; Hardware stack levels required when called:    7
  9059 ;; This function calls:
  9060 ;;		_delay_ms
  9061 ;; This function is called by:
  9062 ;;		_park_routine
  9063 ;; This function uses a non-reentrant model
  9064 ;;
  9065                           
  9066                           	psect	text27
  9067  005D4E                     __ptext27:
  9068                           	opt stack 0
  9069  005D4E                     _delay_s:
  9070                           	opt stack 22
  9071                           
  9072                           ;incstack = 0
  9073                           ;delay_s@value_s stored from wreg
  9074  005D4E  0100               	movlb	0	; () banked
  9075  005D50  6F7F               	movwf	delay_s@value_s& (0+255),b
  9076                           
  9077                           ; BSR set to: 0
  9078                           ;src\delay.c: 104: unsigned char repeat_loop;
  9079                           ;src\delay.c: 106: for (repeat_loop = 0; repeat_loop < value_s; repeat_loop++)
  9080  005D52  0E00               	movlw	0
  9081  005D54  0100               	movlb	0	; () banked
  9082  005D56  6F80               	movwf	delay_s@repeat_loop& (0+255),b
  9083  005D58  D00A               	goto	l6561
  9084  005D5A                     l6557:
  9085                           
  9086                           ; BSR set to: 0
  9087                           ;src\delay.c: 107: delay_ms (1000);
  9088  005D5A  0E03               	movlw	3
  9089  005D5C  0100               	movlb	0	; () banked
  9090  005D5E  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  9091  005D60  0EE8               	movlw	232
  9092  005D62  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  9093  005D64  EC39  F02E         	call	_delay_ms	;wreg free
  9094  005D68  0100               	movlb	0	; () banked
  9095  005D6A  2B80               	incf	delay_s@repeat_loop& (0+255),f,b
  9096  005D6C  D000               	goto	l6561
  9097  005D6E                     l6561:
  9098                           
  9099                           ; BSR set to: 0
  9100  005D6E  0100               	movlb	0	; () banked
  9101  005D70  517F               	movf	delay_s@value_s& (0+255),w,b
  9102  005D72  0100               	movlb	0	; () banked
  9103  005D74  5D80               	subwf	delay_s@repeat_loop& (0+255),w,b
  9104  005D76  A0D8               	btfss	status,0,c
  9105  005D78  D7F0               	goto	l6557
  9106                           
  9107                           ; BSR set to: 0
  9108                           
  9109                           ; BSR set to: 0
  9110  005D7A  0012               	return		;funcret
  9111  005D7C                     __end_of_delay_s:
  9112                           	opt stack 0
  9113                           tblptru	equ	0xFF8
  9114                           tblptrh	equ	0xFF7
  9115                           tblptrl	equ	0xFF6
  9116                           tablat	equ	0xFF5
  9117                           postinc0	equ	0xFEE
  9118                           wreg	equ	0xFE8
  9119                           postdec1	equ	0xFE5
  9120                           fsr1l	equ	0xFE1
  9121                           indf2	equ	0xFDF
  9122                           postinc2	equ	0xFDE
  9123                           postdec2	equ	0xFDD
  9124                           fsr2h	equ	0xFDA
  9125                           fsr2l	equ	0xFD9
  9126                           status	equ	0xFD8
  9127                           
  9128 ;; *************** function _delay_ms *****************
  9129 ;; Defined at:
  9130 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  9131 ;; Parameters:    Size  Location     Type
  9132 ;;  value_ms        2   29[BANK0 ] unsigned int 
  9133 ;; Auto vars:     Size  Location     Type
  9134 ;;		None
  9135 ;; Return value:  Size  Location     Type
  9136 ;;		None               void
  9137 ;; Registers used:
  9138 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9139 ;; Tracked objects:
  9140 ;;		On entry : 0/0
  9141 ;;		On exit  : 0/0
  9142 ;;		Unchanged: 0/0
  9143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9144 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9147 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9148 ;;Total ram usage:        2 bytes
  9149 ;; Hardware stack levels used:    1
  9150 ;; Hardware stack levels required when called:    6
  9151 ;; This function calls:
  9152 ;;		___wmul
  9153 ;; This function is called by:
  9154 ;;		_delay_s
  9155 ;;		_main
  9156 ;;		_park_routine
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           	psect	text28
  9161  005C72                     __ptext28:
  9162                           	opt stack 0
  9163  005C72                     _delay_ms:
  9164                           	opt stack 22
  9165                           
  9166                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
  9167                           
  9168                           ; BSR set to: 0
  9169                           ;incstack = 0
  9170  005C72  C0E7  F077         	movff	_delay_quartz_frequency_value,___wmul@multiplier	;volatile
  9171  005C76  0100               	movlb	0	; () banked
  9172  005C78  6B78               	clrf	(___wmul@multiplier+1)& (0+255),b
  9173  005C7A  C07D  F079         	movff	delay_ms@value_ms,___wmul@multiplicand
  9174  005C7E  C07E  F07A         	movff	delay_ms@value_ms+1,___wmul@multiplicand+1
  9175  005C82  EC56  F02E         	call	___wmul	;wreg free
  9176  005C86  C077  F0DF         	movff	?___wmul,_clock_counter_reference	;volatile
  9177  005C8A  C078  F0E0         	movff	?___wmul+1,_clock_counter_reference+1	;volatile
  9178                           
  9179                           ;src\delay.c: 75: while (clock_counter_reference) {
  9180  005C8E  D007               	goto	l569
  9181  005C90                     l6403:
  9182                           
  9183                           ;src\delay.c: 85: _delay(240);
  9184  005C90  0E50               	movlw	80
  9185  005C92                     u8637:
  9186  005C92  2EE8               	decfsz	wreg,f,c
  9187  005C94  D7FE               	goto	u8637
  9188                           
  9189                           ;src\delay.c: 88: clock_counter_reference--;
  9190  005C96  0100               	movlb	0	; () banked
  9191  005C98  07DF               	decf	_clock_counter_reference& (0+255),f,b	;volatile
  9192  005C9A  A0D8               	btfss	status,0,c
  9193  005C9C  07E0               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
  9194  005C9E                     l569:
  9195  005C9E  0100               	movlb	0	; () banked
  9196  005CA0  51DF               	movf	_clock_counter_reference& (0+255),w,b	;volatile
  9197  005CA2  0100               	movlb	0	; () banked
  9198  005CA4  11E0               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
  9199  005CA6  A4D8               	btfss	status,2,c
  9200  005CA8  D7F3               	goto	l6403
  9201                           
  9202                           ; BSR set to: 0
  9203                           
  9204                           ; BSR set to: 0
  9205  005CAA  0012               	return		;funcret
  9206  005CAC                     __end_of_delay_ms:
  9207                           	opt stack 0
  9208                           tblptru	equ	0xFF8
  9209                           tblptrh	equ	0xFF7
  9210                           tblptrl	equ	0xFF6
  9211                           tablat	equ	0xFF5
  9212                           postinc0	equ	0xFEE
  9213                           wreg	equ	0xFE8
  9214                           postdec1	equ	0xFE5
  9215                           fsr1l	equ	0xFE1
  9216                           indf2	equ	0xFDF
  9217                           postinc2	equ	0xFDE
  9218                           postdec2	equ	0xFDD
  9219                           fsr2h	equ	0xFDA
  9220                           fsr2l	equ	0xFD9
  9221                           status	equ	0xFD8
  9222                           
  9223 ;; *************** function ___wmul *****************
  9224 ;; Defined at:
  9225 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9226 ;; Parameters:    Size  Location     Type
  9227 ;;  multiplier      2   23[BANK0 ] unsigned int 
  9228 ;;  multiplicand    2   25[BANK0 ] unsigned int 
  9229 ;; Auto vars:     Size  Location     Type
  9230 ;;  product         2   27[BANK0 ] unsigned int 
  9231 ;; Return value:  Size  Location     Type
  9232 ;;                  2   23[BANK0 ] unsigned int 
  9233 ;; Registers used:
  9234 ;;		wreg, status,2, status,0, prodl, prodh
  9235 ;; Tracked objects:
  9236 ;;		On entry : 0/0
  9237 ;;		On exit  : 0/0
  9238 ;;		Unchanged: 0/0
  9239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9240 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9243 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9244 ;;Total ram usage:        6 bytes
  9245 ;; Hardware stack levels used:    1
  9246 ;; Hardware stack levels required when called:    5
  9247 ;; This function calls:
  9248 ;;		Nothing
  9249 ;; This function is called by:
  9250 ;;		_delay_ms
  9251 ;; This function uses a non-reentrant model
  9252 ;;
  9253                           
  9254                           	psect	text29
  9255  005CAC                     __ptext29:
  9256                           	opt stack 0
  9257  005CAC                     ___wmul:
  9258                           	opt stack 22
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;incstack = 0
  9262  005CAC  0100               	movlb	0	; () banked
  9263  005CAE  5177               	movf	___wmul@multiplier& (0+255),w,b
  9264  005CB0  0100               	movlb	0	; () banked
  9265  005CB2  0379               	mulwf	___wmul@multiplicand& (0+255),b
  9266  005CB4  CFF3 F07B          	movff	prodl,___wmul@product
  9267  005CB8  CFF4 F07C          	movff	prodh,___wmul@product+1
  9268  005CBC  0100               	movlb	0	; () banked
  9269  005CBE  5177               	movf	___wmul@multiplier& (0+255),w,b
  9270  005CC0  0100               	movlb	0	; () banked
  9271  005CC2  037A               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9272  005CC4  50F3               	movf	prodl,w,c
  9273  005CC6  0100               	movlb	0	; () banked
  9274  005CC8  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  9275  005CCA  0100               	movlb	0	; () banked
  9276  005CCC  5178               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9277  005CCE  0100               	movlb	0	; () banked
  9278  005CD0  0379               	mulwf	___wmul@multiplicand& (0+255),b
  9279  005CD2  50F3               	movf	prodl,w,c
  9280  005CD4  0100               	movlb	0	; () banked
  9281  005CD6  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  9282                           
  9283                           ; BSR set to: 0
  9284  005CD8  C07B  F077         	movff	___wmul@product,?___wmul
  9285  005CDC  C07C  F078         	movff	___wmul@product+1,?___wmul+1
  9286  005CE0  0012               	return	
  9287                           
  9288                           ; BSR set to: 0
  9289                           
  9290                           ; BSR set to: 0
  9291  005CE2  0012               	return		;funcret
  9292  005CE4                     __end_of___wmul:
  9293                           	opt stack 0
  9294                           tblptru	equ	0xFF8
  9295                           tblptrh	equ	0xFF7
  9296                           tblptrl	equ	0xFF6
  9297                           tablat	equ	0xFF5
  9298                           prodh	equ	0xFF4
  9299                           prodl	equ	0xFF3
  9300                           postinc0	equ	0xFEE
  9301                           wreg	equ	0xFE8
  9302                           postdec1	equ	0xFE5
  9303                           fsr1l	equ	0xFE1
  9304                           indf2	equ	0xFDF
  9305                           postinc2	equ	0xFDE
  9306                           postdec2	equ	0xFDD
  9307                           fsr2h	equ	0xFDA
  9308                           fsr2l	equ	0xFD9
  9309                           status	equ	0xFD8
  9310                           
  9311 ;; *************** function ___lwtofl *****************
  9312 ;; Defined at:
  9313 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;  c               2   33[BANK0 ] unsigned int 
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;		None
  9318 ;; Return value:  Size  Location     Type
  9319 ;;                  4   33[BANK0 ] unsigned int 
  9320 ;; Registers used:
  9321 ;;		wreg, status,2, status,0, cstack
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9327 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9330 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;Total ram usage:        4 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; Hardware stack levels required when called:    6
  9334 ;; This function calls:
  9335 ;;		___flpack
  9336 ;; This function is called by:
  9337 ;;		_park_routine
  9338 ;; This function uses a non-reentrant model
  9339 ;;
  9340                           
  9341                           	psect	text30
  9342  005D1C                     __ptext30:
  9343                           	opt stack 0
  9344  005D1C                     ___lwtofl:
  9345                           	opt stack 23
  9346                           
  9347                           ; BSR set to: 0
  9348                           ;incstack = 0
  9349  005D1C  C081  F077         	movff	___lwtofl@c,___flpack@arg
  9350  005D20  C082  F078         	movff	___lwtofl@c+1,___flpack@arg+1
  9351  005D24  0100               	movlb	0	; () banked
  9352  005D26  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  9353  005D28  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  9354  005D2A  0E96               	movlw	150
  9355  005D2C  0100               	movlb	0	; () banked
  9356  005D2E  6F7B               	movwf	___flpack@exp& (0+255),b
  9357  005D30  0E00               	movlw	0
  9358  005D32  0100               	movlb	0	; () banked
  9359  005D34  6F7C               	movwf	___flpack@sign& (0+255),b
  9360  005D36  EC5F  F026         	call	___flpack	;wreg free
  9361  005D3A  C077  F081         	movff	?___flpack,?___lwtofl
  9362  005D3E  C078  F082         	movff	?___flpack+1,?___lwtofl+1
  9363  005D42  C079  F083         	movff	?___flpack+2,?___lwtofl+2
  9364  005D46  C07A  F084         	movff	?___flpack+3,?___lwtofl+3
  9365  005D4A  0012               	return	
  9366  005D4C  0012               	return		;funcret
  9367  005D4E                     __end_of___lwtofl:
  9368                           	opt stack 0
  9369                           tblptru	equ	0xFF8
  9370                           tblptrh	equ	0xFF7
  9371                           tblptrl	equ	0xFF6
  9372                           tablat	equ	0xFF5
  9373                           prodh	equ	0xFF4
  9374                           prodl	equ	0xFF3
  9375                           postinc0	equ	0xFEE
  9376                           wreg	equ	0xFE8
  9377                           postdec1	equ	0xFE5
  9378                           fsr1l	equ	0xFE1
  9379                           indf2	equ	0xFDF
  9380                           postinc2	equ	0xFDE
  9381                           postdec2	equ	0xFDD
  9382                           fsr2h	equ	0xFDA
  9383                           fsr2l	equ	0xFD9
  9384                           status	equ	0xFD8
  9385                           
  9386 ;; *************** function ___flpack *****************
  9387 ;; Defined at:
  9388 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  9389 ;; Parameters:    Size  Location     Type
  9390 ;;  arg             4   23[BANK0 ] unsigned long 
  9391 ;;  exp             1   27[BANK0 ] unsigned char 
  9392 ;;  sign            1   28[BANK0 ] unsigned char 
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;		None
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  4   23[BANK0 ] unsigned char 
  9397 ;; Registers used:
  9398 ;;		wreg, status,2, status,0
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9404 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;Total ram usage:       10 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:    5
  9411 ;; This function calls:
  9412 ;;		Nothing
  9413 ;; This function is called by:
  9414 ;;		___altofl
  9415 ;;		___awtofl
  9416 ;;		___fladd
  9417 ;;		___fldiv
  9418 ;;		___flmul
  9419 ;;		___lwtofl
  9420 ;; This function uses a non-reentrant model
  9421 ;;
  9422                           
  9423                           	psect	text31
  9424  004CBE                     __ptext31:
  9425                           	opt stack 0
  9426  004CBE                     ___flpack:
  9427                           	opt stack 20
  9428                           
  9429                           ;incstack = 0
  9430  004CBE  0100               	movlb	0	; () banked
  9431  004CC0  517B               	movf	___flpack@exp& (0+255),w,b
  9432  004CC2  0100               	movlb	0	; () banked
  9433  004CC4  B4D8               	btfsc	status,2,c
  9434  004CC6  D00A               	goto	l5959
  9435                           
  9436                           ; BSR set to: 0
  9437  004CC8  0100               	movlb	0	; () banked
  9438  004CCA  5177               	movf	___flpack@arg& (0+255),w,b
  9439  004CCC  0100               	movlb	0	; () banked
  9440  004CCE  1178               	iorwf	(___flpack@arg+1)& (0+255),w,b
  9441  004CD0  0100               	movlb	0	; () banked
  9442  004CD2  1179               	iorwf	(___flpack@arg+2)& (0+255),w,b
  9443  004CD4  0100               	movlb	0	; () banked
  9444  004CD6  117A               	iorwf	(___flpack@arg+3)& (0+255),w,b
  9445  004CD8  A4D8               	btfss	status,2,c
  9446  004CDA  D014               	goto	l5965
  9447  004CDC                     l5959:
  9448                           
  9449                           ; BSR set to: 0
  9450  004CDC  0E00               	movlw	0
  9451  004CDE  0100               	movlb	0	; () banked
  9452  004CE0  6F77               	movwf	?___flpack& (0+255),b
  9453  004CE2  0E00               	movlw	0
  9454  004CE4  6F78               	movwf	(?___flpack+1)& (0+255),b
  9455  004CE6  0E00               	movlw	0
  9456  004CE8  6F79               	movwf	(?___flpack+2)& (0+255),b
  9457  004CEA  0E00               	movlw	0
  9458  004CEC  6F7A               	movwf	(?___flpack+3)& (0+255),b
  9459                           
  9460                           ; BSR set to: 0
  9461  004CEE  0012               	return	
  9462                           
  9463                           ; BSR set to: 0
  9464  004CF0  D009               	goto	l5965
  9465  004CF2                     l5963:
  9466                           
  9467                           ; BSR set to: 0
  9468  004CF2  0100               	movlb	0	; () banked
  9469  004CF4  2B7B               	incf	___flpack@exp& (0+255),f,b
  9470  004CF6  0100               	movlb	0	; () banked
  9471  004CF8  90D8               	bcf	status,0,c
  9472  004CFA  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
  9473  004CFC  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
  9474  004CFE  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
  9475  004D00  3377               	rrcf	___flpack@arg& (0+255),f,b
  9476  004D02  D000               	goto	l5965
  9477  004D04                     l5965:
  9478                           
  9479                           ; BSR set to: 0
  9480  004D04  0E00               	movlw	0
  9481  004D06  0100               	movlb	0	; () banked
  9482  004D08  1577               	andwf	___flpack@arg& (0+255),w,b
  9483  004D0A  0100               	movlb	0	; () banked
  9484  004D0C  6F7D               	movwf	??___flpack& (0+255),b
  9485  004D0E  0E00               	movlw	0
  9486  004D10  0100               	movlb	0	; () banked
  9487  004D12  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
  9488  004D14  0100               	movlb	0	; () banked
  9489  004D16  6F7E               	movwf	(??___flpack+1)& (0+255),b
  9490  004D18  0E00               	movlw	0
  9491  004D1A  0100               	movlb	0	; () banked
  9492  004D1C  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
  9493  004D1E  0100               	movlb	0	; () banked
  9494  004D20  6F7F               	movwf	(??___flpack+2)& (0+255),b
  9495  004D22  0EFE               	movlw	254
  9496  004D24  0100               	movlb	0	; () banked
  9497  004D26  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
  9498  004D28  0100               	movlb	0	; () banked
  9499  004D2A  6F80               	movwf	(??___flpack+3)& (0+255),b
  9500  004D2C  0100               	movlb	0	; () banked
  9501  004D2E  517D               	movf	??___flpack& (0+255),w,b
  9502  004D30  0100               	movlb	0	; () banked
  9503  004D32  117E               	iorwf	(??___flpack+1)& (0+255),w,b
  9504  004D34  0100               	movlb	0	; () banked
  9505  004D36  117F               	iorwf	(??___flpack+2)& (0+255),w,b
  9506  004D38  0100               	movlb	0	; () banked
  9507  004D3A  1180               	iorwf	(??___flpack+3)& (0+255),w,b
  9508  004D3C  B4D8               	btfsc	status,2,c
  9509  004D3E  D011               	goto	l1115
  9510  004D40  D7D8               	goto	l5963
  9511                           
  9512                           ; BSR set to: 0
  9513  004D42  D00F               	goto	l1115
  9514  004D44                     l5967:
  9515                           
  9516                           ; BSR set to: 0
  9517  004D44  0100               	movlb	0	; () banked
  9518  004D46  2B7B               	incf	___flpack@exp& (0+255),f,b
  9519                           
  9520                           ; BSR set to: 0
  9521  004D48  0E01               	movlw	1
  9522  004D4A  0100               	movlb	0	; () banked
  9523  004D4C  2777               	addwf	___flpack@arg& (0+255),f,b
  9524  004D4E  0E00               	movlw	0
  9525  004D50  2378               	addwfc	(___flpack@arg+1)& (0+255),f,b
  9526  004D52  2379               	addwfc	(___flpack@arg+2)& (0+255),f,b
  9527  004D54  237A               	addwfc	(___flpack@arg+3)& (0+255),f,b
  9528                           
  9529                           ; BSR set to: 0
  9530  004D56  0100               	movlb	0	; () banked
  9531  004D58  90D8               	bcf	status,0,c
  9532  004D5A  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
  9533  004D5C  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
  9534  004D5E  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
  9535  004D60  3377               	rrcf	___flpack@arg& (0+255),f,b
  9536  004D62                     l1115:
  9537                           
  9538                           ; BSR set to: 0
  9539  004D62  0E00               	movlw	0
  9540  004D64  0100               	movlb	0	; () banked
  9541  004D66  1577               	andwf	___flpack@arg& (0+255),w,b
  9542  004D68  0100               	movlb	0	; () banked
  9543  004D6A  6F7D               	movwf	??___flpack& (0+255),b
  9544  004D6C  0E00               	movlw	0
  9545  004D6E  0100               	movlb	0	; () banked
  9546  004D70  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
  9547  004D72  0100               	movlb	0	; () banked
  9548  004D74  6F7E               	movwf	(??___flpack+1)& (0+255),b
  9549  004D76  0E00               	movlw	0
  9550  004D78  0100               	movlb	0	; () banked
  9551  004D7A  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
  9552  004D7C  0100               	movlb	0	; () banked
  9553  004D7E  6F7F               	movwf	(??___flpack+2)& (0+255),b
  9554  004D80  0EFF               	movlw	255
  9555  004D82  0100               	movlb	0	; () banked
  9556  004D84  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
  9557  004D86  0100               	movlb	0	; () banked
  9558  004D88  6F80               	movwf	(??___flpack+3)& (0+255),b
  9559  004D8A  0100               	movlb	0	; () banked
  9560  004D8C  517D               	movf	??___flpack& (0+255),w,b
  9561  004D8E  0100               	movlb	0	; () banked
  9562  004D90  117E               	iorwf	(??___flpack+1)& (0+255),w,b
  9563  004D92  0100               	movlb	0	; () banked
  9564  004D94  117F               	iorwf	(??___flpack+2)& (0+255),w,b
  9565  004D96  0100               	movlb	0	; () banked
  9566  004D98  1180               	iorwf	(??___flpack+3)& (0+255),w,b
  9567  004D9A  B4D8               	btfsc	status,2,c
  9568  004D9C  D00B               	goto	l5975
  9569  004D9E  D7D2               	goto	l5967
  9570                           
  9571                           ; BSR set to: 0
  9572  004DA0  D009               	goto	l5975
  9573  004DA2                     l5973:
  9574                           
  9575                           ; BSR set to: 0
  9576  004DA2  0100               	movlb	0	; () banked
  9577  004DA4  077B               	decf	___flpack@exp& (0+255),f,b
  9578  004DA6  0100               	movlb	0	; () banked
  9579  004DA8  90D8               	bcf	status,0,c
  9580  004DAA  3777               	rlcf	___flpack@arg& (0+255),f,b
  9581  004DAC  3778               	rlcf	(___flpack@arg+1)& (0+255),f,b
  9582  004DAE  3779               	rlcf	(___flpack@arg+2)& (0+255),f,b
  9583  004DB0  377A               	rlcf	(___flpack@arg+3)& (0+255),f,b
  9584  004DB2  D000               	goto	l5975
  9585  004DB4                     l5975:
  9586                           
  9587                           ; BSR set to: 0
  9588  004DB4  0100               	movlb	0	; () banked
  9589  004DB6  BF79               	btfsc	(___flpack@arg+2)& (0+255),7,b
  9590  004DB8  D005               	goto	l1122
  9591                           
  9592                           ; BSR set to: 0
  9593  004DBA  0E02               	movlw	2
  9594  004DBC  0100               	movlb	0	; () banked
  9595  004DBE  617B               	cpfslt	___flpack@exp& (0+255),b
  9596  004DC0  D7F0               	goto	l5973
  9597  004DC2  D000               	goto	l1122
  9598  004DC4                     l1122:
  9599                           
  9600                           ; BSR set to: 0
  9601  004DC4  0100               	movlb	0	; () banked
  9602  004DC6  B17B               	btfsc	___flpack@exp& (0+255),0,b
  9603  004DC8  D009               	goto	l1123
  9604                           
  9605                           ; BSR set to: 0
  9606  004DCA  0EFF               	movlw	255
  9607  004DCC  0100               	movlb	0	; () banked
  9608  004DCE  1777               	andwf	___flpack@arg& (0+255),f,b
  9609  004DD0  0EFF               	movlw	255
  9610  004DD2  1778               	andwf	(___flpack@arg+1)& (0+255),f,b
  9611  004DD4  0E7F               	movlw	127
  9612  004DD6  1779               	andwf	(___flpack@arg+2)& (0+255),f,b
  9613  004DD8  0EFF               	movlw	255
  9614  004DDA  177A               	andwf	(___flpack@arg+3)& (0+255),f,b
  9615  004DDC                     l1123:
  9616                           
  9617                           ; BSR set to: 0
  9618  004DDC  0100               	movlb	0	; () banked
  9619  004DDE  90D8               	bcf	status,0,c
  9620  004DE0  337B               	rrcf	___flpack@exp& (0+255),f,b
  9621  004DE2  C07B  F07D         	movff	___flpack@exp,??___flpack
  9622  004DE6  0100               	movlb	0	; () banked
  9623  004DE8  6B7E               	clrf	(??___flpack+1)& (0+255),b
  9624  004DEA  6B7F               	clrf	(??___flpack+2)& (0+255),b
  9625  004DEC  6B80               	clrf	(??___flpack+3)& (0+255),b
  9626  004DEE  C07D  F080         	movff	??___flpack,??___flpack+3
  9627  004DF2  0100               	movlb	0	; () banked
  9628  004DF4  6B7F               	clrf	(??___flpack+2)& (0+255),b
  9629  004DF6  6B7E               	clrf	(??___flpack+1)& (0+255),b
  9630  004DF8  6B7D               	clrf	??___flpack& (0+255),b
  9631  004DFA  0100               	movlb	0	; () banked
  9632  004DFC  517D               	movf	??___flpack& (0+255),w,b
  9633  004DFE  0100               	movlb	0	; () banked
  9634  004E00  1377               	iorwf	___flpack@arg& (0+255),f,b
  9635  004E02  0100               	movlb	0	; () banked
  9636  004E04  517E               	movf	(??___flpack+1)& (0+255),w,b
  9637  004E06  0100               	movlb	0	; () banked
  9638  004E08  1378               	iorwf	(___flpack@arg+1)& (0+255),f,b
  9639  004E0A  0100               	movlb	0	; () banked
  9640  004E0C  517F               	movf	(??___flpack+2)& (0+255),w,b
  9641  004E0E  0100               	movlb	0	; () banked
  9642  004E10  1379               	iorwf	(___flpack@arg+2)& (0+255),f,b
  9643  004E12  0100               	movlb	0	; () banked
  9644  004E14  5180               	movf	(??___flpack+3)& (0+255),w,b
  9645  004E16  0100               	movlb	0	; () banked
  9646  004E18  137A               	iorwf	(___flpack@arg+3)& (0+255),f,b
  9647                           
  9648                           ; BSR set to: 0
  9649  004E1A  0100               	movlb	0	; () banked
  9650  004E1C  517C               	movf	___flpack@sign& (0+255),w,b
  9651  004E1E  0100               	movlb	0	; () banked
  9652  004E20  B4D8               	btfsc	status,2,c
  9653  004E22  D003               	goto	l5985
  9654                           
  9655                           ; BSR set to: 0
  9656  004E24  0100               	movlb	0	; () banked
  9657  004E26  8F7A               	bsf	(___flpack@arg+3)& (0+255),7,b
  9658  004E28  D000               	goto	l5985
  9659  004E2A                     l5985:
  9660                           
  9661                           ; BSR set to: 0
  9662  004E2A  C077  F077         	movff	___flpack@arg,?___flpack
  9663  004E2E  C078  F078         	movff	___flpack@arg+1,?___flpack+1
  9664  004E32  C079  F079         	movff	___flpack@arg+2,?___flpack+2
  9665  004E36  C07A  F07A         	movff	___flpack@arg+3,?___flpack+3
  9666  004E3A  0012               	return	
  9667                           
  9668                           ; BSR set to: 0
  9669                           
  9670                           ; BSR set to: 0
  9671  004E3C  0012               	return		;funcret
  9672  004E3E                     __end_of___flpack:
  9673                           	opt stack 0
  9674                           tblptru	equ	0xFF8
  9675                           tblptrh	equ	0xFF7
  9676                           tblptrl	equ	0xFF6
  9677                           tablat	equ	0xFF5
  9678                           prodh	equ	0xFF4
  9679                           prodl	equ	0xFF3
  9680                           postinc0	equ	0xFEE
  9681                           wreg	equ	0xFE8
  9682                           postdec1	equ	0xFE5
  9683                           fsr1l	equ	0xFE1
  9684                           indf2	equ	0xFDF
  9685                           postinc2	equ	0xFDE
  9686                           postdec2	equ	0xFDD
  9687                           fsr2h	equ	0xFDA
  9688                           fsr2l	equ	0xFD9
  9689                           status	equ	0xFD8
  9690                           
  9691 ;; *************** function _configurations *****************
  9692 ;; Defined at:
  9693 ;;		line 486 in file "parcheggio.c"
  9694 ;; Parameters:    Size  Location     Type
  9695 ;;		None
  9696 ;; Auto vars:     Size  Location     Type
  9697 ;;		None
  9698 ;; Return value:  Size  Location     Type
  9699 ;;		None               void
  9700 ;; Registers used:
  9701 ;;		wreg, status,2, status,0, cstack
  9702 ;; Tracked objects:
  9703 ;;		On entry : 0/0
  9704 ;;		On exit  : 0/0
  9705 ;;		Unchanged: 0/0
  9706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9711 ;;Total ram usage:        0 bytes
  9712 ;; Hardware stack levels used:    1
  9713 ;; Hardware stack levels required when called:    7
  9714 ;; This function calls:
  9715 ;;		_CANInitialize
  9716 ;; This function is called by:
  9717 ;;		_main
  9718 ;; This function uses a non-reentrant model
  9719 ;;
  9720                           
  9721                           	psect	text32
  9722  005A36                     __ptext32:
  9723                           	opt stack 0
  9724  005A36                     _configurations:
  9725                           	opt stack 23
  9726                           
  9727                           ;parcheggio.c: 487: LATA = 0x00;
  9728                           
  9729                           ; BSR set to: 0
  9730                           ;incstack = 0
  9731  005A36  0E00               	movlw	0
  9732  005A38  6E89               	movwf	3977,c	;volatile
  9733                           
  9734                           ;parcheggio.c: 488: TRISA = 0b11110000;
  9735  005A3A  0EF0               	movlw	240
  9736  005A3C  6E92               	movwf	3986,c	;volatile
  9737                           
  9738                           ;parcheggio.c: 489: LATB = 0x00;
  9739  005A3E  0E00               	movlw	0
  9740  005A40  6E8A               	movwf	3978,c	;volatile
  9741                           
  9742                           ;parcheggio.c: 490: TRISB = 0b10001010;
  9743  005A42  0E8A               	movlw	138
  9744  005A44  6E93               	movwf	3987,c	;volatile
  9745                           
  9746                           ;parcheggio.c: 491: LATC = 0x00;
  9747  005A46  0E00               	movlw	0
  9748  005A48  6E8B               	movwf	3979,c	;volatile
  9749                           
  9750                           ;parcheggio.c: 492: TRISC = 0b11111111;
  9751  005A4A  6894               	setf	3988,c	;volatile
  9752                           
  9753                           ;parcheggio.c: 494: ADCON1 = 0xFF;
  9754  005A4C  68C1               	setf	4033,c	;volatile
  9755                           
  9756                           ;parcheggio.c: 495: CANInitialize(4, 6, 5, 1, 3, CAN_CONFIG_LINE_FILTER_OFF & CAN_CONFIG
      +                          _SAMPLE_ONCE & CAN_CONFIG_ALL_VALID_MSG & CAN_CONFIG_DBL_BUFFER_ON);
  9757  005A4E  0E06               	movlw	6
  9758  005A50  0100               	movlb	0	; () banked
  9759  005A52  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
  9760  005A54  0E05               	movlw	5
  9761  005A56  0100               	movlb	0	; () banked
  9762  005A58  6F86               	movwf	CANInitialize@phaseSeg2& (0+255),b
  9763  005A5A  0E01               	movlw	1
  9764  005A5C  0100               	movlb	0	; () banked
  9765  005A5E  6F87               	movwf	CANInitialize@SJW& (0+255),b
  9766  005A60  0E03               	movlw	3
  9767  005A62  0100               	movlb	0	; () banked
  9768  005A64  6F88               	movwf	CANInitialize@BRP& (0+255),b
  9769  005A66  0E9D               	movlw	157
  9770  005A68  0100               	movlb	0	; () banked
  9771  005A6A  6F89               	movwf	CANInitialize@flags& (0+255),b
  9772  005A6C  0E04               	movlw	4
  9773  005A6E  EC93  F024         	call	_CANInitialize
  9774                           
  9775                           ;parcheggio.c: 498: RCONbits.IPEN = 1;
  9776  005A72  8ED0               	bsf	4048,7,c	;volatile
  9777                           
  9778                           ;parcheggio.c: 499: IPR3bits.RXB1IP = 0;
  9779  005A74  92A5               	bcf	4005,1,c	;volatile
  9780                           
  9781                           ;parcheggio.c: 500: IPR3bits.RXB0IP = 0;
  9782  005A76  90A5               	bcf	4005,0,c	;volatile
  9783                           
  9784                           ;parcheggio.c: 501: INTCON2bits.TMR0IP = 0;
  9785  005A78  94F1               	bcf	intcon2,2,c	;volatile
  9786                           
  9787                           ;parcheggio.c: 504: PIR3bits.RXB1IF = 0;
  9788  005A7A  92A4               	bcf	4004,1,c	;volatile
  9789                           
  9790                           ;parcheggio.c: 505: PIR3bits.RXB0IF = 0;
  9791  005A7C  90A4               	bcf	4004,0,c	;volatile
  9792                           
  9793                           ;parcheggio.c: 506: INTCONbits.INT0IF = 0;
  9794  005A7E  92F2               	bcf	intcon,1,c	;volatile
  9795                           
  9796                           ;parcheggio.c: 507: INTCONbits.TMR0IF = 0;
  9797  005A80  94F2               	bcf	intcon,2,c	;volatile
  9798                           
  9799                           ;parcheggio.c: 511: PIE3bits.RXB1IE = 1;
  9800  005A82  82A3               	bsf	4003,1,c	;volatile
  9801                           
  9802                           ;parcheggio.c: 512: PIE3bits.RXB0IE = 1;
  9803  005A84  80A3               	bsf	4003,0,c	;volatile
  9804                           
  9805                           ;parcheggio.c: 513: INTCONbits.TMR0IE = 1;
  9806  005A86  8AF2               	bsf	intcon,5,c	;volatile
  9807                           
  9808                           ;parcheggio.c: 514: INTCONbits.INT0IE = 0;
  9809  005A88  98F2               	bcf	intcon,4,c	;volatile
  9810                           
  9811                           ;parcheggio.c: 517: T0CON = 0x80;
  9812  005A8A  0E80               	movlw	128
  9813  005A8C  6ED5               	movwf	4053,c	;volatile
  9814                           
  9815                           ;parcheggio.c: 518: TMR0H = 0x34;
  9816  005A8E  0E34               	movlw	52
  9817  005A90  6ED7               	movwf	4055,c	;volatile
  9818                           
  9819                           ;parcheggio.c: 519: TMR0L = 0xE0;
  9820  005A92  0EE0               	movlw	224
  9821  005A94  6ED6               	movwf	4054,c	;volatile
  9822                           
  9823                           ;parcheggio.c: 520: T3CON = 0x11;
  9824  005A96  0E11               	movlw	17
  9825  005A98  6EB1               	movwf	4017,c	;volatile
  9826                           
  9827                           ;parcheggio.c: 522: INTCON2bits.INTEDG0 = 1;
  9828  005A9A  8CF1               	bsf	intcon2,6,c	;volatile
  9829                           
  9830                           ;parcheggio.c: 523: INTCONbits.GIEL = 1;
  9831  005A9C  8CF2               	bsf	intcon,6,c	;volatile
  9832                           
  9833                           ;parcheggio.c: 524: INTCONbits.GIEH = 1;
  9834  005A9E  8EF2               	bsf	intcon,7,c	;volatile
  9835  005AA0  0012               	return		;funcret
  9836  005AA2                     __end_of_configurations:
  9837                           	opt stack 0
  9838                           tblptru	equ	0xFF8
  9839                           tblptrh	equ	0xFF7
  9840                           tblptrl	equ	0xFF6
  9841                           tablat	equ	0xFF5
  9842                           prodh	equ	0xFF4
  9843                           prodl	equ	0xFF3
  9844                           intcon	equ	0xFF2
  9845                           intcon2	equ	0xFF1
  9846                           postinc0	equ	0xFEE
  9847                           wreg	equ	0xFE8
  9848                           postdec1	equ	0xFE5
  9849                           fsr1l	equ	0xFE1
  9850                           indf2	equ	0xFDF
  9851                           postinc2	equ	0xFDE
  9852                           postdec2	equ	0xFDD
  9853                           fsr2h	equ	0xFDA
  9854                           fsr2l	equ	0xFD9
  9855                           status	equ	0xFD8
  9856                           
  9857 ;; *************** function _CANInitialize *****************
  9858 ;; Defined at:
  9859 ;;		line 218 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  9860 ;; Parameters:    Size  Location     Type
  9861 ;;  propSeg         1    wreg     unsigned char 
  9862 ;;  phaseSeg1       1   37[BANK0 ] unsigned char 
  9863 ;;  phaseSeg2       1   38[BANK0 ] unsigned char 
  9864 ;;  SJW             1   39[BANK0 ] unsigned char 
  9865 ;;  BRP             1   40[BANK0 ] unsigned char 
  9866 ;;  flags           1   41[BANK0 ] enum E16354
  9867 ;; Auto vars:     Size  Location     Type
  9868 ;;  propSeg         1   46[BANK0 ] unsigned char 
  9869 ;;  FilterConfig    1   48[BANK0 ] unsigned char 
  9870 ;;  FilterConfig    1   47[BANK0 ] unsigned char 
  9871 ;; Return value:  Size  Location     Type
  9872 ;;		None               void
  9873 ;; Registers used:
  9874 ;;		wreg, status,2, status,0, cstack
  9875 ;; Tracked objects:
  9876 ;;		On entry : 0/0
  9877 ;;		On exit  : 0/0
  9878 ;;		Unchanged: 0/0
  9879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9880 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;Total ram usage:       12 bytes
  9885 ;; Hardware stack levels used:    1
  9886 ;; Hardware stack levels required when called:    6
  9887 ;; This function calls:
  9888 ;;		_CANOperationMode
  9889 ;;		_CANSetFilter
  9890 ;;		_CANSetMask
  9891 ;; This function is called by:
  9892 ;;		_configurations
  9893 ;; This function uses a non-reentrant model
  9894 ;;
  9895                           
  9896                           	psect	text33
  9897  004926                     __ptext33:
  9898                           	opt stack 0
  9899  004926                     _CANInitialize:
  9900                           	opt stack 23
  9901                           
  9902                           ;incstack = 0
  9903                           ;CANInitialize@propSeg stored from wreg
  9904  004926  0100               	movlb	0	; () banked
  9905  004928  6F8E               	movwf	CANInitialize@propSeg& (0+255),b
  9906                           
  9907                           ; BSR set to: 0
  9908                           ;inc\CANlib.h: 220: BYTE FilterConfig1;
  9909                           ;inc\CANlib.h: 221: BYTE FilterConfig2;
  9910                           ;inc\CANlib.h: 223: CANOperationMode(CAN_OP_MODE_CONFIG);
  9911  00492A  0E80               	movlw	128
  9912  00492C  ECFB  F02E         	call	_CANOperationMode
  9913                           
  9914                           ;inc\CANlib.h: 225: BRGCON1 = 0x00;
  9915  004930  0E00               	movlw	0
  9916  004932  6E70               	movwf	3952,c	;volatile
  9917                           
  9918                           ;inc\CANlib.h: 226: BRGCON2 = 0x00;
  9919  004934  0E00               	movlw	0
  9920  004936  6E71               	movwf	3953,c	;volatile
  9921                           
  9922                           ;inc\CANlib.h: 227: BRGCON3 = 0x00;
  9923  004938  0E00               	movlw	0
  9924  00493A  6E72               	movwf	3954,c	;volatile
  9925                           
  9926                           ;inc\CANlib.h: 229: SJW= SJW << 6;
  9927  00493C  0100               	movlb	0	; () banked
  9928  00493E  4187               	rrncf	CANInitialize@SJW& (0+255),w,b
  9929  004940  42E8               	rrncf	wreg,f,c
  9930  004942  0BC0               	andlw	192
  9931  004944  0100               	movlb	0	; () banked
  9932  004946  6F87               	movwf	CANInitialize@SJW& (0+255),b
  9933                           
  9934                           ; BSR set to: 0
  9935                           ;inc\CANlib.h: 230: BRGCON1 |= SJW;
  9936  004948  0100               	movlb	0	; () banked
  9937  00494A  5187               	movf	CANInitialize@SJW& (0+255),w,b
  9938  00494C  1270               	iorwf	3952,f,c	;volatile
  9939                           
  9940                           ; BSR set to: 0
  9941                           ;inc\CANlib.h: 231: BRGCON1 |= BRP;
  9942  00494E  0100               	movlb	0	; () banked
  9943  004950  5188               	movf	CANInitialize@BRP& (0+255),w,b
  9944  004952  1270               	iorwf	3952,f,c	;volatile
  9945                           
  9946                           ; BSR set to: 0
  9947                           ;inc\CANlib.h: 233: BRGCON2 |= propSeg;
  9948  004954  0100               	movlb	0	; () banked
  9949  004956  518E               	movf	CANInitialize@propSeg& (0+255),w,b
  9950  004958  1271               	iorwf	3953,f,c	;volatile
  9951                           
  9952                           ; BSR set to: 0
  9953                           ;inc\CANlib.h: 234: phaseSeg1 = phaseSeg1 <<3;
  9954  00495A  0100               	movlb	0	; () banked
  9955  00495C  3985               	swapf	CANInitialize@phaseSeg1& (0+255),w,b
  9956  00495E  42E8               	rrncf	wreg,f,c
  9957  004960  0BF8               	andlw	248
  9958  004962  0100               	movlb	0	; () banked
  9959  004964  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;inc\CANlib.h: 235: BRGCON2 |= phaseSeg1;
  9963  004966  0100               	movlb	0	; () banked
  9964  004968  5185               	movf	CANInitialize@phaseSeg1& (0+255),w,b
  9965  00496A  1271               	iorwf	3953,f,c	;volatile
  9966                           
  9967                           ; BSR set to: 0
  9968                           ;inc\CANlib.h: 237: if ( !(flags & CAN_CONFIG_SAMPLE_BIT) )
  9969  00496C  0100               	movlb	0	; () banked
  9970  00496E  A589               	btfss	CANInitialize@flags& (0+255),2,b
  9971                           
  9972                           ; BSR set to: 0
  9973                           ;inc\CANlib.h: 238: BRGCON2bits.SAM= 1;
  9974  004970  8C71               	bsf	3953,6,c	;volatile
  9975                           
  9976                           ; BSR set to: 0
  9977                           ;inc\CANlib.h: 240: if ( flags & CAN_CONFIG_PHSEG2_PRG_BIT )
  9978  004972  0100               	movlb	0	; () banked
  9979  004974  A189               	btfss	CANInitialize@flags& (0+255),0,b
  9980  004976  D002               	goto	l6529
  9981                           
  9982                           ; BSR set to: 0
  9983                           ;inc\CANlib.h: 241: BRGCON2bits.SEG2PHTS = 1;
  9984  004978  8E71               	bsf	3953,7,c	;volatile
  9985  00497A  D000               	goto	l6529
  9986  00497C                     l6529:
  9987                           
  9988                           ; BSR set to: 0
  9989                           ;inc\CANlib.h: 243: BRGCON3 |= phaseSeg2;
  9990  00497C  0100               	movlb	0	; () banked
  9991  00497E  5186               	movf	CANInitialize@phaseSeg2& (0+255),w,b
  9992  004980  1272               	iorwf	3954,f,c	;volatile
  9993                           
  9994                           ; BSR set to: 0
  9995                           ;inc\CANlib.h: 245: if ( flags & CAN_CONFIG_LINE_FILTER_BIT )
  9996  004982  0100               	movlb	0	; () banked
  9997  004984  A389               	btfss	CANInitialize@flags& (0+255),1,b
  9998  004986  D002               	goto	l6535
  9999                           
 10000                           ; BSR set to: 0
 10001                           ;inc\CANlib.h: 246: BRGCON3bits.WAKFIL = 1;
 10002  004988  8C72               	bsf	3954,6,c	;volatile
 10003  00498A  D000               	goto	l6535
 10004  00498C                     l6535:
 10005                           
 10006                           ; BSR set to: 0
 10007                           ;inc\CANlib.h: 251: RXB0CON = flags & CAN_CONFIG_MSG_BITS;
 10008  00498C  0100               	movlb	0	; () banked
 10009  00498E  5189               	movf	CANInitialize@flags& (0+255),w,b
 10010  004990  0B60               	andlw	96
 10011  004992  6E60               	movwf	3936,c	;volatile
 10012                           
 10013                           ;inc\CANlib.h: 252: if ( (flags & CAN_CONFIG_DBL_BUFFER_BIT)== CAN_CONFIG_DBL_BUFFER_ON 
      +                          )
 10014  004994  0100               	movlb	0	; () banked
 10015  004996  5189               	movf	CANInitialize@flags& (0+255),w,b
 10016  004998  0B10               	andlw	16
 10017  00499A  0AFF               	xorlw	255
 10018  00499C  B4D8               	btfsc	status,2,c
 10019                           
 10020                           ; BSR set to: 0
 10021                           ;inc\CANlib.h: 253: RXB0CONbits.RXB0DBEN = 1;
 10022  00499E  8460               	bsf	3936,2,c	;volatile
 10023                           
 10024                           ; BSR set to: 0
 10025                           ;inc\CANlib.h: 255: RXB1CON = RXB0CON;
 10026  0049A0  CF60 FF50          	movff	3936,3920	;volatile
 10027                           
 10028                           ; BSR set to: 0
 10029                           ;inc\CANlib.h: 259: CANSetMask (CAN_MASK_B1, 0x00000000, CAN_CONFIG_XTD_MSG);
 10030  0049A4  0E00               	movlw	0
 10031  0049A6  0100               	movlb	0	; () banked
 10032  0049A8  6F77               	movwf	CANSetMask@mask& (0+255),b
 10033  0049AA  0E00               	movlw	0
 10034  0049AC  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10035  0049AE  0E00               	movlw	0
 10036  0049B0  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10037  0049B2  0E00               	movlw	0
 10038  0049B4  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10039  0049B6  0EF7               	movlw	247
 10040  0049B8  0100               	movlb	0	; () banked
 10041  0049BA  6F7B               	movwf	CANSetMask@type& (0+255),b
 10042  0049BC  0E01               	movlw	1
 10043  0049BE  ECFB  F01A         	call	_CANSetMask
 10044                           
 10045                           ;inc\CANlib.h: 260: CANSetMask (CAN_MASK_B2, 0x00000000, CAN_CONFIG_XTD_MSG);
 10046  0049C2  0E00               	movlw	0
 10047  0049C4  0100               	movlb	0	; () banked
 10048  0049C6  6F77               	movwf	CANSetMask@mask& (0+255),b
 10049  0049C8  0E00               	movlw	0
 10050  0049CA  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10051  0049CC  0E00               	movlw	0
 10052  0049CE  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10053  0049D0  0E00               	movlw	0
 10054  0049D2  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10055  0049D4  0EF7               	movlw	247
 10056  0049D6  0100               	movlb	0	; () banked
 10057  0049D8  6F7B               	movwf	CANSetMask@type& (0+255),b
 10058  0049DA  0E02               	movlw	2
 10059  0049DC  ECFB  F01A         	call	_CANSetMask
 10060                           
 10061                           ;inc\CANlib.h: 263: switch( (flags & CAN_CONFIG_MSG_BITS) | ~CAN_CONFIG_MSG_BITS )
 10062  0049E0  D00F               	goto	l6547
 10063  0049E2                     l6541:
 10064                           
 10065                           ;inc\CANlib.h: 266: FilterConfig1 = CAN_CONFIG_XTD_MSG;
 10066  0049E2  0EF7               	movlw	247
 10067  0049E4  0100               	movlb	0	; () banked
 10068  0049E6  6F8F               	movwf	CANInitialize@FilterConfig1& (0+255),b
 10069  0049E8  D007               	goto	l6543
 10070  0049EA                     l358:
 10071                           
 10072                           ; BSR set to: 0
 10073                           ;inc\CANlib.h: 271: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10074  0049EA  0100               	movlb	0	; () banked
 10075  0049EC  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10076                           
 10077                           ;inc\CANlib.h: 272: FilterConfig2 = CAN_CONFIG_STD_MSG;
 10078  0049EE  0100               	movlb	0	; () banked
 10079  0049F0  6990               	setf	CANInitialize@FilterConfig2& (0+255),b
 10080                           
 10081                           ;inc\CANlib.h: 273: break;
 10082  0049F2  D028               	goto	l6549
 10083  0049F4                     l359:
 10084                           
 10085                           ; BSR set to: 0
 10086                           ;inc\CANlib.h: 275: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10087  0049F4  0100               	movlb	0	; () banked
 10088  0049F6  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10089  0049F8                     l6543:
 10090                           
 10091                           ; BSR set to: 0
 10092                           ;inc\CANlib.h: 276: FilterConfig2 = CAN_CONFIG_XTD_MSG;
 10093  0049F8  0EF7               	movlw	247
 10094  0049FA  0100               	movlb	0	; () banked
 10095  0049FC  6F90               	movwf	CANInitialize@FilterConfig2& (0+255),b
 10096                           
 10097                           ; BSR set to: 0
 10098                           ;inc\CANlib.h: 278: }
 10099                           
 10100                           ;inc\CANlib.h: 277: break;
 10101  0049FE  D022               	goto	l6549
 10102  004A00                     l6547:
 10103  004A00  0E9F               	movlw	159
 10104  004A02  0100               	movlb	0	; () banked
 10105  004A04  6F8A               	movwf	??_CANInitialize& (0+255),b
 10106  004A06  0EFF               	movlw	255
 10107  004A08  0100               	movlb	0	; () banked
 10108  004A0A  6F8B               	movwf	(??_CANInitialize+1)& (0+255),b
 10109  004A0C  0100               	movlb	0	; () banked
 10110  004A0E  5189               	movf	CANInitialize@flags& (0+255),w,b
 10111  004A10  0B60               	andlw	96
 10112  004A12  0100               	movlb	0	; () banked
 10113  004A14  6F8C               	movwf	(??_CANInitialize+2)& (0+255),b
 10114  004A16  6B8D               	clrf	(??_CANInitialize+3)& (0+255),b
 10115  004A18  0100               	movlb	0	; () banked
 10116  004A1A  518A               	movf	??_CANInitialize& (0+255),w,b
 10117  004A1C  0100               	movlb	0	; () banked
 10118  004A1E  138C               	iorwf	(??_CANInitialize+2)& (0+255),f,b
 10119  004A20  0100               	movlb	0	; () banked
 10120  004A22  518B               	movf	(??_CANInitialize+1)& (0+255),w,b
 10121  004A24  0100               	movlb	0	; () banked
 10122  004A26  138D               	iorwf	(??_CANInitialize+3)& (0+255),f,b
 10123                           
 10124                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10125                           ; Switch size 1, requested type "space"
 10126                           ; Number of cases is 1, Range of values is 0 to 0
 10127                           ; switch strategies available:
 10128                           ; Name         Instructions Cycles
 10129                           ; simple_byte            4     3 (average)
 10130                           ;	Chosen strategy is simple_byte
 10131  004A28  0100               	movlb	0	; () banked
 10132  004A2A  518D               	movf	(??_CANInitialize+3)& (0+255),w,b
 10133  004A2C  0A00               	xorlw	0	; case 0
 10134  004A2E  A4D8               	btfss	status,2,c
 10135  004A30  D7E1               	goto	l359
 10136                           
 10137                           ; BSR set to: 0
 10138                           ; Switch size 1, requested type "space"
 10139                           ; Number of cases is 2, Range of values is 191 to 223
 10140                           ; switch strategies available:
 10141                           ; Name         Instructions Cycles
 10142                           ; simple_byte            7     4 (average)
 10143                           ;	Chosen strategy is simple_byte
 10144  004A32  0100               	movlb	0	; () banked
 10145  004A34  518C               	movf	(??_CANInitialize+2)& (0+255),w,b
 10146  004A36  0ABF               	xorlw	191	; case 191
 10147  004A38  B4D8               	btfsc	status,2,c
 10148  004A3A  D7D7               	goto	l358
 10149  004A3C  0A60               	xorlw	96	; case 223
 10150  004A3E  B4D8               	btfsc	status,2,c
 10151  004A40  D7D0               	goto	l6541
 10152  004A42  D7D8               	goto	l359
 10153  004A44                     l6549:
 10154                           
 10155                           ; BSR set to: 0
 10156                           ;inc\CANlib.h: 280: CANSetFilter(CAN_FILTER_B1_F1, 0, FilterConfig1);
 10157  004A44  0E00               	movlw	0
 10158  004A46  0100               	movlb	0	; () banked
 10159  004A48  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10160  004A4A  0E00               	movlw	0
 10161  004A4C  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10162  004A4E  0E00               	movlw	0
 10163  004A50  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10164  004A52  0E00               	movlw	0
 10165  004A54  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10166  004A56  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10167  004A5A  0E00               	movlw	0
 10168  004A5C  ECA9  F006         	call	_CANSetFilter
 10169                           
 10170                           ;inc\CANlib.h: 281: CANSetFilter(CAN_FILTER_B1_F2, 0, FilterConfig1);
 10171  004A60  0E00               	movlw	0
 10172  004A62  0100               	movlb	0	; () banked
 10173  004A64  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10174  004A66  0E00               	movlw	0
 10175  004A68  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10176  004A6A  0E00               	movlw	0
 10177  004A6C  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10178  004A6E  0E00               	movlw	0
 10179  004A70  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10180  004A72  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10181  004A76  0E01               	movlw	1
 10182  004A78  ECA9  F006         	call	_CANSetFilter
 10183                           
 10184                           ;inc\CANlib.h: 282: CANSetFilter(CAN_FILTER_B2_F1, 0, FilterConfig2);
 10185  004A7C  0E00               	movlw	0
 10186  004A7E  0100               	movlb	0	; () banked
 10187  004A80  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10188  004A82  0E00               	movlw	0
 10189  004A84  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10190  004A86  0E00               	movlw	0
 10191  004A88  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10192  004A8A  0E00               	movlw	0
 10193  004A8C  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10194  004A8E  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10195  004A92  0E02               	movlw	2
 10196  004A94  ECA9  F006         	call	_CANSetFilter
 10197                           
 10198                           ;inc\CANlib.h: 283: CANSetFilter(CAN_FILTER_B2_F2, 0, FilterConfig2);
 10199  004A98  0E00               	movlw	0
 10200  004A9A  0100               	movlb	0	; () banked
 10201  004A9C  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10202  004A9E  0E00               	movlw	0
 10203  004AA0  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10204  004AA2  0E00               	movlw	0
 10205  004AA4  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10206  004AA6  0E00               	movlw	0
 10207  004AA8  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10208  004AAA  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10209  004AAE  0E03               	movlw	3
 10210  004AB0  ECA9  F006         	call	_CANSetFilter
 10211                           
 10212                           ;inc\CANlib.h: 284: CANSetFilter(CAN_FILTER_B2_F3, 0, FilterConfig2);
 10213  004AB4  0E00               	movlw	0
 10214  004AB6  0100               	movlb	0	; () banked
 10215  004AB8  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10216  004ABA  0E00               	movlw	0
 10217  004ABC  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10218  004ABE  0E00               	movlw	0
 10219  004AC0  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10220  004AC2  0E00               	movlw	0
 10221  004AC4  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10222  004AC6  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10223  004ACA  0E04               	movlw	4
 10224  004ACC  ECA9  F006         	call	_CANSetFilter
 10225                           
 10226                           ;inc\CANlib.h: 285: CANSetFilter(CAN_FILTER_B2_F4, 0, FilterConfig2);
 10227  004AD0  0E00               	movlw	0
 10228  004AD2  0100               	movlb	0	; () banked
 10229  004AD4  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10230  004AD6  0E00               	movlw	0
 10231  004AD8  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10232  004ADA  0E00               	movlw	0
 10233  004ADC  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10234  004ADE  0E00               	movlw	0
 10235  004AE0  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10236  004AE2  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10237  004AE6  0E05               	movlw	5
 10238  004AE8  ECA9  F006         	call	_CANSetFilter
 10239                           
 10240                           ;inc\CANlib.h: 287: CANOperationMode(CAN_OP_MODE_NORMAL);
 10241  004AEC  0E00               	movlw	0
 10242  004AEE  ECFB  F02E         	call	_CANOperationMode
 10243  004AF2  0012               	return		;funcret
 10244  004AF4                     __end_of_CANInitialize:
 10245                           	opt stack 0
 10246                           tblptru	equ	0xFF8
 10247                           tblptrh	equ	0xFF7
 10248                           tblptrl	equ	0xFF6
 10249                           tablat	equ	0xFF5
 10250                           prodh	equ	0xFF4
 10251                           prodl	equ	0xFF3
 10252                           intcon	equ	0xFF2
 10253                           intcon2	equ	0xFF1
 10254                           postinc0	equ	0xFEE
 10255                           wreg	equ	0xFE8
 10256                           postdec1	equ	0xFE5
 10257                           fsr1l	equ	0xFE1
 10258                           indf2	equ	0xFDF
 10259                           postinc2	equ	0xFDE
 10260                           postdec2	equ	0xFDD
 10261                           fsr2h	equ	0xFDA
 10262                           fsr2l	equ	0xFD9
 10263                           status	equ	0xFD8
 10264                           
 10265 ;; *************** function _CANSetMask *****************
 10266 ;; Defined at:
 10267 ;;		line 640 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 10268 ;; Parameters:    Size  Location     Type
 10269 ;;  numBuffer       1    wreg     enum E16388
 10270 ;;  mask            4   23[BANK0 ] unsigned long 
 10271 ;;  type            1   27[BANK0 ] enum E16354
 10272 ;; Auto vars:     Size  Location     Type
 10273 ;;  numBuffer       1   32[BANK0 ] enum E16388
 10274 ;;  tamp            4   33[BANK0 ] unsigned long 
 10275 ;; Return value:  Size  Location     Type
 10276 ;;		None               void
 10277 ;; Registers used:
 10278 ;;		wreg, status,2, status,0
 10279 ;; Tracked objects:
 10280 ;;		On entry : 0/0
 10281 ;;		On exit  : 0/0
 10282 ;;		Unchanged: 0/0
 10283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10284 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10285 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10287 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10288 ;;Total ram usage:       14 bytes
 10289 ;; Hardware stack levels used:    1
 10290 ;; Hardware stack levels required when called:    5
 10291 ;; This function calls:
 10292 ;;		Nothing
 10293 ;; This function is called by:
 10294 ;;		_CANInitialize
 10295 ;; This function uses a non-reentrant model
 10296 ;;
 10297                           
 10298                           	psect	text34
 10299  0035F6                     __ptext34:
 10300                           	opt stack 0
 10301  0035F6                     _CANSetMask:
 10302                           	opt stack 23
 10303                           
 10304                           ;incstack = 0
 10305                           ;CANSetMask@numBuffer stored from wreg
 10306  0035F6  0100               	movlb	0	; () banked
 10307  0035F8  6F80               	movwf	CANSetMask@numBuffer& (0+255),b
 10308                           
 10309                           ; BSR set to: 0
 10310                           ;inc\CANlib.h: 643: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_STD_MSG))
 10311  0035FA  0100               	movlb	0	; () banked
 10312  0035FC  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 10313  0035FE  A4D8               	btfss	status,2,c
 10314  003600  D057               	goto	l4465
 10315                           
 10316                           ; BSR set to: 0
 10317  003602  0100               	movlb	0	; () banked
 10318  003604  297B               	incf	CANSetMask@type& (0+255),w,b
 10319  003606  A4D8               	btfss	status,2,c
 10320  003608  D053               	goto	l4465
 10321                           
 10322                           ; BSR set to: 0
 10323                           ;inc\CANlib.h: 644: {
 10324                           ;inc\CANlib.h: 645: tamp = (mask >> 3);
 10325  00360A  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10326  00360E  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10327  003612  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10328  003616  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10329  00361A  0E04               	movlw	4
 10330  00361C  D006               	goto	u4790
 10331  00361E                     u4795:
 10332  00361E  0100               	movlb	0	; () banked
 10333  003620  90D8               	bcf	status,0,c
 10334  003622  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10335  003624  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10336  003626  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10337  003628  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10338  00362A                     u4790:
 10339  00362A  2EE8               	decfsz	wreg,f,c
 10340  00362C  D7F8               	goto	u4795
 10341  00362E  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10342  003632  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10343  003636  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10344  00363A  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10345                           
 10346                           ; BSR set to: 0
 10347                           ;inc\CANlib.h: 646: tamp = tamp & 0x000000FF;
 10348  00363E  0100               	movlb	0	; () banked
 10349  003640  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10350  003642  0100               	movlb	0	; () banked
 10351  003644  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10352  003646  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10353  003648  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10354  00364A  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10355                           
 10356                           ; BSR set to: 0
 10357                           ;inc\CANlib.h: 647: RXM0SIDH = (unsigned char) tamp;
 10358  00364C  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 10359                           
 10360                           ; BSR set to: 0
 10361                           ;inc\CANlib.h: 649: tamp = mask & 0x00000007;
 10362  003650  0E07               	movlw	7
 10363  003652  0100               	movlb	0	; () banked
 10364  003654  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10365  003656  0100               	movlb	0	; () banked
 10366  003658  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10367  00365A  0E00               	movlw	0
 10368  00365C  0100               	movlb	0	; () banked
 10369  00365E  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10370  003660  0100               	movlb	0	; () banked
 10371  003662  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10372  003664  0E00               	movlw	0
 10373  003666  0100               	movlb	0	; () banked
 10374  003668  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10375  00366A  0100               	movlb	0	; () banked
 10376  00366C  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10377  00366E  0E00               	movlw	0
 10378  003670  0100               	movlb	0	; () banked
 10379  003672  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10380  003674  0100               	movlb	0	; () banked
 10381  003676  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10382                           
 10383                           ; BSR set to: 0
 10384                           ;inc\CANlib.h: 650: tamp = tamp << 5;
 10385  003678  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10386  00367C  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10387  003680  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10388  003684  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10389  003688  0E05               	movlw	5
 10390  00368A                     u4805:
 10391  00368A  90D8               	bcf	status,0,c
 10392  00368C  0100               	movlb	0	; () banked
 10393  00368E  377C               	rlcf	??_CANSetMask& (0+255),f,b
 10394  003690  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 10395  003692  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 10396  003694  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 10397  003696  2EE8               	decfsz	wreg,f,c
 10398  003698  D7F8               	goto	u4805
 10399  00369A  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10400  00369E  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10401  0036A2  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10402  0036A6  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10403                           
 10404                           ; BSR set to: 0
 10405                           ;inc\CANlib.h: 651: RXM0SIDL = (unsigned char) tamp;
 10406  0036AA  C081  FF19         	movff	CANSetMask@tamp,3865	;volatile
 10407  0036AE  D000               	goto	l4465
 10408  0036B0                     l4465:
 10409                           
 10410                           ; BSR set to: 0
 10411                           ;inc\CANlib.h: 652: }
 10412                           ;inc\CANlib.h: 654: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_STD_MSG))
 10413  0036B0  0E02               	movlw	2
 10414  0036B2  0100               	movlb	0	; () banked
 10415  0036B4  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 10416  0036B6  A4D8               	btfss	status,2,c
 10417  0036B8  D057               	goto	l4481
 10418                           
 10419                           ; BSR set to: 0
 10420  0036BA  0100               	movlb	0	; () banked
 10421  0036BC  297B               	incf	CANSetMask@type& (0+255),w,b
 10422  0036BE  A4D8               	btfss	status,2,c
 10423  0036C0  D053               	goto	l4481
 10424                           
 10425                           ; BSR set to: 0
 10426                           ;inc\CANlib.h: 655: {
 10427                           ;inc\CANlib.h: 656: tamp = (mask >> 3);
 10428  0036C2  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10429  0036C6  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10430  0036CA  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10431  0036CE  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10432  0036D2  0E04               	movlw	4
 10433  0036D4  D006               	goto	u4830
 10434  0036D6                     u4835:
 10435  0036D6  0100               	movlb	0	; () banked
 10436  0036D8  90D8               	bcf	status,0,c
 10437  0036DA  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10438  0036DC  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10439  0036DE  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10440  0036E0  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10441  0036E2                     u4830:
 10442  0036E2  2EE8               	decfsz	wreg,f,c
 10443  0036E4  D7F8               	goto	u4835
 10444  0036E6  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10445  0036EA  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10446  0036EE  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10447  0036F2  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10448                           
 10449                           ; BSR set to: 0
 10450                           ;inc\CANlib.h: 657: tamp = tamp & 0x000000FF;
 10451  0036F6  0100               	movlb	0	; () banked
 10452  0036F8  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10453  0036FA  0100               	movlb	0	; () banked
 10454  0036FC  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10455  0036FE  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10456  003700  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10457  003702  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10458                           
 10459                           ; BSR set to: 0
 10460                           ;inc\CANlib.h: 658: RXM1SIDH = (unsigned char) tamp;
 10461  003704  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 10462                           
 10463                           ; BSR set to: 0
 10464                           ;inc\CANlib.h: 660: tamp = mask & 0x00000007;
 10465  003708  0E07               	movlw	7
 10466  00370A  0100               	movlb	0	; () banked
 10467  00370C  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10468  00370E  0100               	movlb	0	; () banked
 10469  003710  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10470  003712  0E00               	movlw	0
 10471  003714  0100               	movlb	0	; () banked
 10472  003716  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10473  003718  0100               	movlb	0	; () banked
 10474  00371A  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10475  00371C  0E00               	movlw	0
 10476  00371E  0100               	movlb	0	; () banked
 10477  003720  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10478  003722  0100               	movlb	0	; () banked
 10479  003724  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10480  003726  0E00               	movlw	0
 10481  003728  0100               	movlb	0	; () banked
 10482  00372A  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10483  00372C  0100               	movlb	0	; () banked
 10484  00372E  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10485                           
 10486                           ; BSR set to: 0
 10487                           ;inc\CANlib.h: 661: tamp = tamp << 5;
 10488  003730  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10489  003734  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10490  003738  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10491  00373C  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10492  003740  0E05               	movlw	5
 10493  003742                     u4845:
 10494  003742  90D8               	bcf	status,0,c
 10495  003744  0100               	movlb	0	; () banked
 10496  003746  377C               	rlcf	??_CANSetMask& (0+255),f,b
 10497  003748  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 10498  00374A  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 10499  00374C  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 10500  00374E  2EE8               	decfsz	wreg,f,c
 10501  003750  D7F8               	goto	u4845
 10502  003752  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10503  003756  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10504  00375A  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10505  00375E  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10506                           
 10507                           ; BSR set to: 0
 10508                           ;inc\CANlib.h: 662: RXM1SIDL = (unsigned char) tamp;
 10509  003762  C081  FF1D         	movff	CANSetMask@tamp,3869	;volatile
 10510  003766  D000               	goto	l4481
 10511  003768                     l4481:
 10512                           
 10513                           ; BSR set to: 0
 10514                           ;inc\CANlib.h: 663: }
 10515                           ;inc\CANlib.h: 665: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_XTD_MSG))
 10516  003768  0100               	movlb	0	; () banked
 10517  00376A  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 10518  00376C  A4D8               	btfss	status,2,c
 10519  00376E  D089               	goto	l4513
 10520                           
 10521                           ; BSR set to: 0
 10522  003770  0EF7               	movlw	247
 10523  003772  0100               	movlb	0	; () banked
 10524  003774  197B               	xorwf	CANSetMask@type& (0+255),w,b
 10525  003776  A4D8               	btfss	status,2,c
 10526  003778  D084               	goto	l4513
 10527                           
 10528                           ; BSR set to: 0
 10529                           ;inc\CANlib.h: 666: {
 10530                           ;inc\CANlib.h: 667: tamp = mask & 0x000000FF;
 10531  00377A  0100               	movlb	0	; () banked
 10532  00377C  5177               	movf	CANSetMask@mask& (0+255),w,b
 10533  00377E  0100               	movlb	0	; () banked
 10534  003780  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10535  003782  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10536  003784  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10537  003786  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10538                           
 10539                           ; BSR set to: 0
 10540                           ;inc\CANlib.h: 668: RXM0EIDL = (unsigned char) tamp;
 10541  003788  C081  FF1B         	movff	CANSetMask@tamp,3867	;volatile
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;inc\CANlib.h: 670: tamp = mask & 0x0000FF00;
 10545  00378C  0E00               	movlw	0
 10546  00378E  0100               	movlb	0	; () banked
 10547  003790  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10548  003792  0100               	movlb	0	; () banked
 10549  003794  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10550  003796  0EFF               	movlw	255
 10551  003798  0100               	movlb	0	; () banked
 10552  00379A  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10553  00379C  0100               	movlb	0	; () banked
 10554  00379E  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10555  0037A0  0E00               	movlw	0
 10556  0037A2  0100               	movlb	0	; () banked
 10557  0037A4  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10558  0037A6  0100               	movlb	0	; () banked
 10559  0037A8  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10560  0037AA  0E00               	movlw	0
 10561  0037AC  0100               	movlb	0	; () banked
 10562  0037AE  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10563  0037B0  0100               	movlb	0	; () banked
 10564  0037B2  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10565                           
 10566                           ; BSR set to: 0
 10567                           ;inc\CANlib.h: 671: tamp = tamp >> 8;
 10568  0037B4  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10569  0037B8  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10570  0037BC  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10571  0037C0  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10572  0037C4  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 10573  0037C8  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 10574  0037CC  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 10575  0037D0  0100               	movlb	0	; () banked
 10576  0037D2  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 10577  0037D4  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10578  0037D8  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10579  0037DC  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10580  0037E0  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10581                           
 10582                           ; BSR set to: 0
 10583                           ;inc\CANlib.h: 672: RXM0EIDH = (unsigned char) tamp;
 10584  0037E4  C081  FF1A         	movff	CANSetMask@tamp,3866	;volatile
 10585                           
 10586                           ; BSR set to: 0
 10587                           ;inc\CANlib.h: 674: if (mask & 0x00010000)
 10588  0037E8  0100               	movlb	0	; () banked
 10589  0037EA  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 10590  0037EC  D003               	goto	l432
 10591                           
 10592                           ; BSR set to: 0
 10593                           ;inc\CANlib.h: 675: RXM0SIDLbits.EID16 = 0x01;
 10594  0037EE  010F               	movlb	15	; () banked
 10595  0037F0  8119               	bsf	25,0,b	;volatile
 10596  0037F2  D002               	goto	l433
 10597  0037F4                     l432:
 10598                           
 10599                           ; BSR set to: 0
 10600                           ;inc\CANlib.h: 676: else
 10601                           ;inc\CANlib.h: 677: RXM0SIDLbits.EID16 = 0x00;
 10602  0037F4  010F               	movlb	15	; () banked
 10603  0037F6  9119               	bcf	25,0,b	;volatile
 10604  0037F8                     l433:
 10605                           
 10606                           ; BSR set to: 15
 10607                           ;inc\CANlib.h: 679: if (mask & 0x00020000)
 10608  0037F8  0100               	movlb	0	; () banked
 10609  0037FA  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 10610  0037FC  D003               	goto	l434
 10611                           
 10612                           ; BSR set to: 0
 10613                           ;inc\CANlib.h: 680: RXM0SIDLbits.EID17 = 0x01;
 10614  0037FE  010F               	movlb	15	; () banked
 10615  003800  8319               	bsf	25,1,b	;volatile
 10616  003802  D002               	goto	l435
 10617  003804                     l434:
 10618                           
 10619                           ; BSR set to: 0
 10620                           ;inc\CANlib.h: 681: else
 10621                           ;inc\CANlib.h: 682: RXM0SIDLbits.EID17 = 0x00;
 10622  003804  010F               	movlb	15	; () banked
 10623  003806  9319               	bcf	25,1,b	;volatile
 10624  003808                     l435:
 10625                           
 10626                           ; BSR set to: 15
 10627                           ;inc\CANlib.h: 684: if (mask & 0x00040000)
 10628  003808  0100               	movlb	0	; () banked
 10629  00380A  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 10630  00380C  D003               	goto	l436
 10631                           
 10632                           ; BSR set to: 0
 10633                           ;inc\CANlib.h: 685: RXM0SIDLbits.SID0 = 0x01;
 10634  00380E  010F               	movlb	15	; () banked
 10635  003810  8B19               	bsf	25,5,b	;volatile
 10636  003812  D002               	goto	l437
 10637  003814                     l436:
 10638                           
 10639                           ; BSR set to: 0
 10640                           ;inc\CANlib.h: 686: else
 10641                           ;inc\CANlib.h: 687: RXM0SIDLbits.SID0 = 0x00;
 10642  003814  010F               	movlb	15	; () banked
 10643  003816  9B19               	bcf	25,5,b	;volatile
 10644  003818                     l437:
 10645                           
 10646                           ; BSR set to: 15
 10647                           ;inc\CANlib.h: 689: if (mask & 0x00080000)
 10648  003818  0100               	movlb	0	; () banked
 10649  00381A  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 10650  00381C  D003               	goto	l438
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;inc\CANlib.h: 690: RXM0SIDLbits.SID1 = 0x01;
 10654  00381E  010F               	movlb	15	; () banked
 10655  003820  8D19               	bsf	25,6,b	;volatile
 10656  003822  D002               	goto	l439
 10657  003824                     l438:
 10658                           
 10659                           ; BSR set to: 0
 10660                           ;inc\CANlib.h: 691: else
 10661                           ;inc\CANlib.h: 692: RXM0SIDLbits.SID1 = 0x00;
 10662  003824  010F               	movlb	15	; () banked
 10663  003826  9D19               	bcf	25,6,b	;volatile
 10664  003828                     l439:
 10665                           
 10666                           ; BSR set to: 15
 10667                           ;inc\CANlib.h: 694: if (mask & 0x00100000)
 10668  003828  0100               	movlb	0	; () banked
 10669  00382A  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 10670  00382C  D003               	goto	l440
 10671                           
 10672                           ; BSR set to: 0
 10673                           ;inc\CANlib.h: 695: RXM0SIDLbits.SID2 = 0x01 ;
 10674  00382E  010F               	movlb	15	; () banked
 10675  003830  8F19               	bsf	25,7,b	;volatile
 10676  003832  D003               	goto	l4507
 10677  003834                     l440:
 10678                           
 10679                           ; BSR set to: 0
 10680                           ;inc\CANlib.h: 696: else
 10681                           ;inc\CANlib.h: 697: RXM0SIDLbits.SID2 = 0x00 ;
 10682  003834  010F               	movlb	15	; () banked
 10683  003836  9F19               	bcf	25,7,b	;volatile
 10684  003838  D000               	goto	l4507
 10685  00383A                     l4507:
 10686                           
 10687                           ; BSR set to: 15
 10688                           ;inc\CANlib.h: 699: tamp = (mask >> 21);
 10689  00383A  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10690  00383E  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10691  003842  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10692  003846  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10693  00384A  0E16               	movlw	22
 10694  00384C  D006               	goto	u4920
 10695  00384E                     u4925:
 10696  00384E  0100               	movlb	0	; () banked
 10697  003850  90D8               	bcf	status,0,c
 10698  003852  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10699  003854  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10700  003856  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10701  003858  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10702  00385A                     u4920:
 10703  00385A  2EE8               	decfsz	wreg,f,c
 10704  00385C  D7F8               	goto	u4925
 10705  00385E  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10706  003862  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10707  003866  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10708  00386A  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;inc\CANlib.h: 700: tamp = tamp & 0x000000FF;
 10712  00386E  0100               	movlb	0	; () banked
 10713  003870  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10714  003872  0100               	movlb	0	; () banked
 10715  003874  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10716  003876  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10717  003878  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10718  00387A  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;inc\CANlib.h: 701: RXM0SIDH = (unsigned char) tamp;
 10722  00387C  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 10723  003880  D000               	goto	l4513
 10724  003882                     l4513:
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;inc\CANlib.h: 702: }
 10728                           ;inc\CANlib.h: 704: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_XTD_MSG))
 10729  003882  0E02               	movlw	2
 10730  003884  0100               	movlb	0	; () banked
 10731  003886  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 10732  003888  A4D8               	btfss	status,2,c
 10733  00388A  0012               	return	
 10734                           
 10735                           ; BSR set to: 0
 10736  00388C  0EF7               	movlw	247
 10737  00388E  0100               	movlb	0	; () banked
 10738  003890  197B               	xorwf	CANSetMask@type& (0+255),w,b
 10739  003892  A4D8               	btfss	status,2,c
 10740  003894  0012               	return	
 10741                           
 10742                           ; BSR set to: 0
 10743                           ;inc\CANlib.h: 705: {
 10744                           ;inc\CANlib.h: 706: tamp = mask & 0x000000FF;
 10745  003896  0100               	movlb	0	; () banked
 10746  003898  5177               	movf	CANSetMask@mask& (0+255),w,b
 10747  00389A  0100               	movlb	0	; () banked
 10748  00389C  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10749  00389E  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10750  0038A0  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10751  0038A2  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;inc\CANlib.h: 707: RXM1EIDL = (unsigned char) tamp;
 10755  0038A4  C081  FF1F         	movff	CANSetMask@tamp,3871	;volatile
 10756                           
 10757                           ; BSR set to: 0
 10758                           ;inc\CANlib.h: 709: tamp = mask & 0x0000FF00;
 10759  0038A8  0E00               	movlw	0
 10760  0038AA  0100               	movlb	0	; () banked
 10761  0038AC  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10762  0038AE  0100               	movlb	0	; () banked
 10763  0038B0  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10764  0038B2  0EFF               	movlw	255
 10765  0038B4  0100               	movlb	0	; () banked
 10766  0038B6  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10767  0038B8  0100               	movlb	0	; () banked
 10768  0038BA  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10769  0038BC  0E00               	movlw	0
 10770  0038BE  0100               	movlb	0	; () banked
 10771  0038C0  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10772  0038C2  0100               	movlb	0	; () banked
 10773  0038C4  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10774  0038C6  0E00               	movlw	0
 10775  0038C8  0100               	movlb	0	; () banked
 10776  0038CA  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10777  0038CC  0100               	movlb	0	; () banked
 10778  0038CE  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10779                           
 10780                           ; BSR set to: 0
 10781                           ;inc\CANlib.h: 710: tamp = tamp >> 8;
 10782  0038D0  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10783  0038D4  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10784  0038D8  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10785  0038DC  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10786  0038E0  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 10787  0038E4  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 10788  0038E8  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 10789  0038EC  0100               	movlb	0	; () banked
 10790  0038EE  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 10791  0038F0  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10792  0038F4  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10793  0038F8  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10794  0038FC  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;inc\CANlib.h: 711: RXM1EIDH = (unsigned char) tamp;
 10798  003900  C081  FF1E         	movff	CANSetMask@tamp,3870	;volatile
 10799                           
 10800                           ; BSR set to: 0
 10801                           ;inc\CANlib.h: 713: if (mask & 0x00010000)
 10802  003904  0100               	movlb	0	; () banked
 10803  003906  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 10804  003908  D003               	goto	l443
 10805                           
 10806                           ; BSR set to: 0
 10807                           ;inc\CANlib.h: 714: RXM1SIDLbits.EID16 = 0x01;
 10808  00390A  010F               	movlb	15	; () banked
 10809  00390C  811D               	bsf	29,0,b	;volatile
 10810  00390E  D002               	goto	l444
 10811  003910                     l443:
 10812                           
 10813                           ; BSR set to: 0
 10814                           ;inc\CANlib.h: 715: else
 10815                           ;inc\CANlib.h: 716: RXM1SIDLbits.EID16 = 0x00;
 10816  003910  010F               	movlb	15	; () banked
 10817  003912  911D               	bcf	29,0,b	;volatile
 10818  003914                     l444:
 10819                           
 10820                           ; BSR set to: 15
 10821                           ;inc\CANlib.h: 718: if (mask & 0x00020000)
 10822  003914  0100               	movlb	0	; () banked
 10823  003916  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 10824  003918  D003               	goto	l445
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;inc\CANlib.h: 719: RXM1SIDLbits.EID17 = 0x01;
 10828  00391A  010F               	movlb	15	; () banked
 10829  00391C  831D               	bsf	29,1,b	;volatile
 10830  00391E  D002               	goto	l446
 10831  003920                     l445:
 10832                           
 10833                           ; BSR set to: 0
 10834                           ;inc\CANlib.h: 720: else
 10835                           ;inc\CANlib.h: 721: RXM1SIDLbits.EID17 = 0x00;
 10836  003920  010F               	movlb	15	; () banked
 10837  003922  931D               	bcf	29,1,b	;volatile
 10838  003924                     l446:
 10839                           
 10840                           ; BSR set to: 15
 10841                           ;inc\CANlib.h: 723: if (mask & 0x00040000)
 10842  003924  0100               	movlb	0	; () banked
 10843  003926  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 10844  003928  D003               	goto	l447
 10845                           
 10846                           ; BSR set to: 0
 10847                           ;inc\CANlib.h: 724: RXM1SIDLbits.SID0 = 0x01;
 10848  00392A  010F               	movlb	15	; () banked
 10849  00392C  8B1D               	bsf	29,5,b	;volatile
 10850  00392E  D002               	goto	l448
 10851  003930                     l447:
 10852                           
 10853                           ; BSR set to: 0
 10854                           ;inc\CANlib.h: 725: else
 10855                           ;inc\CANlib.h: 726: RXM1SIDLbits.SID0 = 0x00;
 10856  003930  010F               	movlb	15	; () banked
 10857  003932  9B1D               	bcf	29,5,b	;volatile
 10858  003934                     l448:
 10859                           
 10860                           ; BSR set to: 15
 10861                           ;inc\CANlib.h: 728: if (mask & 0x00080000)
 10862  003934  0100               	movlb	0	; () banked
 10863  003936  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 10864  003938  D003               	goto	l449
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;inc\CANlib.h: 729: RXM1SIDLbits.SID1 = 0x01;
 10868  00393A  010F               	movlb	15	; () banked
 10869  00393C  8D1D               	bsf	29,6,b	;volatile
 10870  00393E  D002               	goto	l450
 10871  003940                     l449:
 10872                           
 10873                           ; BSR set to: 0
 10874                           ;inc\CANlib.h: 730: else
 10875                           ;inc\CANlib.h: 731: RXM1SIDLbits.SID1 = 0x00;
 10876  003940  010F               	movlb	15	; () banked
 10877  003942  9D1D               	bcf	29,6,b	;volatile
 10878  003944                     l450:
 10879                           
 10880                           ; BSR set to: 15
 10881                           ;inc\CANlib.h: 733: if (mask & 0x00100000)
 10882  003944  0100               	movlb	0	; () banked
 10883  003946  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 10884  003948  D003               	goto	l451
 10885                           
 10886                           ; BSR set to: 0
 10887                           ;inc\CANlib.h: 734: RXM1SIDLbits.SID2 = 0x01 ;
 10888  00394A  010F               	movlb	15	; () banked
 10889  00394C  8F1D               	bsf	29,7,b	;volatile
 10890  00394E  D003               	goto	l4539
 10891  003950                     l451:
 10892                           
 10893                           ; BSR set to: 0
 10894                           ;inc\CANlib.h: 735: else
 10895                           ;inc\CANlib.h: 736: RXM1SIDLbits.SID2 = 0x00 ;
 10896  003950  010F               	movlb	15	; () banked
 10897  003952  9F1D               	bcf	29,7,b	;volatile
 10898  003954  D000               	goto	l4539
 10899  003956                     l4539:
 10900                           
 10901                           ; BSR set to: 15
 10902                           ;inc\CANlib.h: 738: tamp = (mask >> 21);
 10903  003956  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10904  00395A  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10905  00395E  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10906  003962  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10907  003966  0E16               	movlw	22
 10908  003968  D006               	goto	u5000
 10909  00396A                     u5005:
 10910  00396A  0100               	movlb	0	; () banked
 10911  00396C  90D8               	bcf	status,0,c
 10912  00396E  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10913  003970  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10914  003972  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10915  003974  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10916  003976                     u5000:
 10917  003976  2EE8               	decfsz	wreg,f,c
 10918  003978  D7F8               	goto	u5005
 10919  00397A  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10920  00397E  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10921  003982  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10922  003986  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;inc\CANlib.h: 739: tamp = tamp & 0x000000FF;
 10926  00398A  0100               	movlb	0	; () banked
 10927  00398C  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10928  00398E  0100               	movlb	0	; () banked
 10929  003990  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10930  003992  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10931  003994  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10932  003996  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10933                           
 10934                           ; BSR set to: 0
 10935                           ;inc\CANlib.h: 740: RXM1SIDH = (unsigned char) tamp;
 10936  003998  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 10937  00399C  0012               	return	
 10938                           
 10939                           ; BSR set to: 0
 10940                           
 10941                           ; BSR set to: 0
 10942  00399E  0012               	return		;funcret
 10943  0039A0                     __end_of_CANSetMask:
 10944                           	opt stack 0
 10945                           tblptru	equ	0xFF8
 10946                           tblptrh	equ	0xFF7
 10947                           tblptrl	equ	0xFF6
 10948                           tablat	equ	0xFF5
 10949                           prodh	equ	0xFF4
 10950                           prodl	equ	0xFF3
 10951                           intcon	equ	0xFF2
 10952                           intcon2	equ	0xFF1
 10953                           postinc0	equ	0xFEE
 10954                           wreg	equ	0xFE8
 10955                           postdec1	equ	0xFE5
 10956                           fsr1l	equ	0xFE1
 10957                           indf2	equ	0xFDF
 10958                           postinc2	equ	0xFDE
 10959                           postdec2	equ	0xFDD
 10960                           fsr2h	equ	0xFDA
 10961                           fsr2l	equ	0xFD9
 10962                           status	equ	0xFD8
 10963                           
 10964 ;; *************** function _CANSetFilter *****************
 10965 ;; Defined at:
 10966 ;;		line 748 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 10967 ;; Parameters:    Size  Location     Type
 10968 ;;  numBuffer       1    wreg     enum E16391
 10969 ;;  filter          4   23[BANK0 ] unsigned long 
 10970 ;;  type            1   27[BANK0 ] enum E16354
 10971 ;; Auto vars:     Size  Location     Type
 10972 ;;  numBuffer       1   32[BANK0 ] enum E16391
 10973 ;;  tamp            4   33[BANK0 ] unsigned long 
 10974 ;; Return value:  Size  Location     Type
 10975 ;;		None               void
 10976 ;; Registers used:
 10977 ;;		wreg, status,2, status,0
 10978 ;; Tracked objects:
 10979 ;;		On entry : 0/0
 10980 ;;		On exit  : 0/0
 10981 ;;		Unchanged: 0/0
 10982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10983 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10985 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10986 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;Total ram usage:       14 bytes
 10988 ;; Hardware stack levels used:    1
 10989 ;; Hardware stack levels required when called:    5
 10990 ;; This function calls:
 10991 ;;		Nothing
 10992 ;; This function is called by:
 10993 ;;		_CANInitialize
 10994 ;; This function uses a non-reentrant model
 10995 ;;
 10996                           
 10997                           	psect	text35
 10998  000D52                     __ptext35:
 10999                           	opt stack 0
 11000  000D52                     _CANSetFilter:
 11001                           	opt stack 23
 11002                           
 11003                           ; BSR set to: 0
 11004                           ;incstack = 0
 11005                           ;CANSetFilter@numBuffer stored from wreg
 11006  000D52  0100               	movlb	0	; () banked
 11007  000D54  6F80               	movwf	CANSetFilter@numBuffer& (0+255),b
 11008                           
 11009                           ; BSR set to: 0
 11010                           ;inc\CANlib.h: 750: unsigned long tamp;
 11011                           ;inc\CANlib.h: 752: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_STD_MSG))
 11012  000D56  0100               	movlb	0	; () banked
 11013  000D58  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 11014  000D5A  0100               	movlb	0	; () banked
 11015  000D5C  A4D8               	btfss	status,2,c
 11016  000D5E  D059               	goto	l4563
 11017                           
 11018                           ; BSR set to: 0
 11019  000D60  0100               	movlb	0	; () banked
 11020  000D62  297B               	incf	CANSetFilter@type& (0+255),w,b
 11021  000D64  A4D8               	btfss	status,2,c
 11022  000D66  D055               	goto	l4563
 11023                           
 11024                           ; BSR set to: 0
 11025                           ;inc\CANlib.h: 753: {
 11026                           ;inc\CANlib.h: 754: RXF0SIDLbits.EXIDEN = 0x00;
 11027  000D68  010F               	movlb	15	; () banked
 11028  000D6A  9701               	bcf	1,3,b	;volatile
 11029                           
 11030                           ; BSR set to: 15
 11031                           ;inc\CANlib.h: 756: tamp = (filter >> 3);
 11032  000D6C  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11033  000D70  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11034  000D74  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11035  000D78  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11036  000D7C  0E04               	movlw	4
 11037  000D7E  D006               	goto	u5030
 11038  000D80                     u5035:
 11039  000D80  0100               	movlb	0	; () banked
 11040  000D82  90D8               	bcf	status,0,c
 11041  000D84  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11042  000D86  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11043  000D88  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11044  000D8A  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11045  000D8C                     u5030:
 11046  000D8C  2EE8               	decfsz	wreg,f,c
 11047  000D8E  D7F8               	goto	u5035
 11048  000D90  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11049  000D94  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11050  000D98  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11051  000D9C  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11052                           
 11053                           ; BSR set to: 0
 11054                           ;inc\CANlib.h: 757: tamp = tamp & 0x000000FF;
 11055  000DA0  0100               	movlb	0	; () banked
 11056  000DA2  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11057  000DA4  0100               	movlb	0	; () banked
 11058  000DA6  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11059  000DA8  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11060  000DAA  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11061  000DAC  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11062                           
 11063                           ; BSR set to: 0
 11064                           ;inc\CANlib.h: 758: RXF0SIDH = (unsigned char) tamp;
 11065  000DAE  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 11066                           
 11067                           ; BSR set to: 0
 11068                           ;inc\CANlib.h: 760: tamp = filter & 0x00000007;
 11069  000DB2  0E07               	movlw	7
 11070  000DB4  0100               	movlb	0	; () banked
 11071  000DB6  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11072  000DB8  0100               	movlb	0	; () banked
 11073  000DBA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11074  000DBC  0E00               	movlw	0
 11075  000DBE  0100               	movlb	0	; () banked
 11076  000DC0  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11077  000DC2  0100               	movlb	0	; () banked
 11078  000DC4  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11079  000DC6  0E00               	movlw	0
 11080  000DC8  0100               	movlb	0	; () banked
 11081  000DCA  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11082  000DCC  0100               	movlb	0	; () banked
 11083  000DCE  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11084  000DD0  0E00               	movlw	0
 11085  000DD2  0100               	movlb	0	; () banked
 11086  000DD4  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11087  000DD6  0100               	movlb	0	; () banked
 11088  000DD8  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11089                           
 11090                           ; BSR set to: 0
 11091                           ;inc\CANlib.h: 761: tamp = tamp << 5;
 11092  000DDA  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11093  000DDE  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11094  000DE2  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11095  000DE6  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11096  000DEA  0E05               	movlw	5
 11097  000DEC                     u5045:
 11098  000DEC  90D8               	bcf	status,0,c
 11099  000DEE  0100               	movlb	0	; () banked
 11100  000DF0  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11101  000DF2  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11102  000DF4  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11103  000DF6  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11104  000DF8  2EE8               	decfsz	wreg,f,c
 11105  000DFA  D7F8               	goto	u5045
 11106  000DFC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11107  000E00  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11108  000E04  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11109  000E08  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;inc\CANlib.h: 762: RXF0SIDL = (unsigned char) tamp;
 11113  000E0C  C081  FF01         	movff	CANSetFilter@tamp,3841	;volatile
 11114  000E10  D000               	goto	l4563
 11115  000E12                     l4563:
 11116                           
 11117                           ; BSR set to: 0
 11118                           ;inc\CANlib.h: 763: }
 11119                           ;inc\CANlib.h: 765: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_STD_MSG))
 11120  000E12  0100               	movlb	0	; () banked
 11121  000E14  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 11122  000E16  A4D8               	btfss	status,2,c
 11123  000E18  D059               	goto	l4581
 11124                           
 11125                           ; BSR set to: 0
 11126  000E1A  0100               	movlb	0	; () banked
 11127  000E1C  297B               	incf	CANSetFilter@type& (0+255),w,b
 11128  000E1E  A4D8               	btfss	status,2,c
 11129  000E20  D055               	goto	l4581
 11130                           
 11131                           ; BSR set to: 0
 11132                           ;inc\CANlib.h: 766: {
 11133                           ;inc\CANlib.h: 767: RXF1SIDLbits.EXIDEN = 0x00;
 11134  000E22  010F               	movlb	15	; () banked
 11135  000E24  9705               	bcf	5,3,b	;volatile
 11136                           
 11137                           ; BSR set to: 15
 11138                           ;inc\CANlib.h: 769: tamp = (filter >> 3);
 11139  000E26  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11140  000E2A  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11141  000E2E  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11142  000E32  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11143  000E36  0E04               	movlw	4
 11144  000E38  D006               	goto	u5070
 11145  000E3A                     u5075:
 11146  000E3A  0100               	movlb	0	; () banked
 11147  000E3C  90D8               	bcf	status,0,c
 11148  000E3E  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11149  000E40  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11150  000E42  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11151  000E44  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11152  000E46                     u5070:
 11153  000E46  2EE8               	decfsz	wreg,f,c
 11154  000E48  D7F8               	goto	u5075
 11155  000E4A  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11156  000E4E  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11157  000E52  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11158  000E56  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11159                           
 11160                           ; BSR set to: 0
 11161                           ;inc\CANlib.h: 770: tamp = tamp & 0x000000FF;
 11162  000E5A  0100               	movlb	0	; () banked
 11163  000E5C  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11164  000E5E  0100               	movlb	0	; () banked
 11165  000E60  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11166  000E62  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11167  000E64  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11168  000E66  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;inc\CANlib.h: 771: RXF1SIDH = (unsigned char) tamp;
 11172  000E68  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 11173                           
 11174                           ; BSR set to: 0
 11175                           ;inc\CANlib.h: 773: tamp = filter & 0x00000007;
 11176  000E6C  0E07               	movlw	7
 11177  000E6E  0100               	movlb	0	; () banked
 11178  000E70  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11179  000E72  0100               	movlb	0	; () banked
 11180  000E74  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11181  000E76  0E00               	movlw	0
 11182  000E78  0100               	movlb	0	; () banked
 11183  000E7A  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11184  000E7C  0100               	movlb	0	; () banked
 11185  000E7E  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11186  000E80  0E00               	movlw	0
 11187  000E82  0100               	movlb	0	; () banked
 11188  000E84  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11189  000E86  0100               	movlb	0	; () banked
 11190  000E88  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11191  000E8A  0E00               	movlw	0
 11192  000E8C  0100               	movlb	0	; () banked
 11193  000E8E  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11194  000E90  0100               	movlb	0	; () banked
 11195  000E92  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11196                           
 11197                           ; BSR set to: 0
 11198                           ;inc\CANlib.h: 774: tamp = tamp << 5;
 11199  000E94  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11200  000E98  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11201  000E9C  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11202  000EA0  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11203  000EA4  0E05               	movlw	5
 11204  000EA6                     u5085:
 11205  000EA6  90D8               	bcf	status,0,c
 11206  000EA8  0100               	movlb	0	; () banked
 11207  000EAA  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11208  000EAC  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11209  000EAE  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11210  000EB0  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11211  000EB2  2EE8               	decfsz	wreg,f,c
 11212  000EB4  D7F8               	goto	u5085
 11213  000EB6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11214  000EBA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11215  000EBE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11216  000EC2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;inc\CANlib.h: 775: RXF1SIDL = (unsigned char) tamp;
 11220  000EC6  C081  FF05         	movff	CANSetFilter@tamp,3845	;volatile
 11221  000ECA  D000               	goto	l4581
 11222  000ECC                     l4581:
 11223                           
 11224                           ; BSR set to: 0
 11225                           ;inc\CANlib.h: 776: }
 11226                           ;inc\CANlib.h: 778: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_STD_MSG))
 11227  000ECC  0E02               	movlw	2
 11228  000ECE  0100               	movlb	0	; () banked
 11229  000ED0  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11230  000ED2  A4D8               	btfss	status,2,c
 11231  000ED4  D059               	goto	l4599
 11232                           
 11233                           ; BSR set to: 0
 11234  000ED6  0100               	movlb	0	; () banked
 11235  000ED8  297B               	incf	CANSetFilter@type& (0+255),w,b
 11236  000EDA  A4D8               	btfss	status,2,c
 11237  000EDC  D055               	goto	l4599
 11238                           
 11239                           ; BSR set to: 0
 11240                           ;inc\CANlib.h: 779: {
 11241                           ;inc\CANlib.h: 780: RXF2SIDLbits.EXIDEN = 0x00;
 11242  000EDE  010F               	movlb	15	; () banked
 11243  000EE0  9709               	bcf	9,3,b	;volatile
 11244                           
 11245                           ; BSR set to: 15
 11246                           ;inc\CANlib.h: 782: tamp = (filter >> 3);
 11247  000EE2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11248  000EE6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11249  000EEA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11250  000EEE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11251  000EF2  0E04               	movlw	4
 11252  000EF4  D006               	goto	u5110
 11253  000EF6                     u5115:
 11254  000EF6  0100               	movlb	0	; () banked
 11255  000EF8  90D8               	bcf	status,0,c
 11256  000EFA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11257  000EFC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11258  000EFE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11259  000F00  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11260  000F02                     u5110:
 11261  000F02  2EE8               	decfsz	wreg,f,c
 11262  000F04  D7F8               	goto	u5115
 11263  000F06  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11264  000F0A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11265  000F0E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11266  000F12  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11267                           
 11268                           ; BSR set to: 0
 11269                           ;inc\CANlib.h: 783: tamp = tamp & 0x000000FF;
 11270  000F16  0100               	movlb	0	; () banked
 11271  000F18  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11272  000F1A  0100               	movlb	0	; () banked
 11273  000F1C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11274  000F1E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11275  000F20  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11276  000F22  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11277                           
 11278                           ; BSR set to: 0
 11279                           ;inc\CANlib.h: 784: RXF2SIDH = (unsigned char) tamp;
 11280  000F24  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 11281                           
 11282                           ; BSR set to: 0
 11283                           ;inc\CANlib.h: 786: tamp = filter & 0x00000007;
 11284  000F28  0E07               	movlw	7
 11285  000F2A  0100               	movlb	0	; () banked
 11286  000F2C  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11287  000F2E  0100               	movlb	0	; () banked
 11288  000F30  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11289  000F32  0E00               	movlw	0
 11290  000F34  0100               	movlb	0	; () banked
 11291  000F36  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11292  000F38  0100               	movlb	0	; () banked
 11293  000F3A  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11294  000F3C  0E00               	movlw	0
 11295  000F3E  0100               	movlb	0	; () banked
 11296  000F40  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11297  000F42  0100               	movlb	0	; () banked
 11298  000F44  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11299  000F46  0E00               	movlw	0
 11300  000F48  0100               	movlb	0	; () banked
 11301  000F4A  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11302  000F4C  0100               	movlb	0	; () banked
 11303  000F4E  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11304                           
 11305                           ; BSR set to: 0
 11306                           ;inc\CANlib.h: 787: tamp = tamp << 5;
 11307  000F50  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11308  000F54  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11309  000F58  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11310  000F5C  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11311  000F60  0E05               	movlw	5
 11312  000F62                     u5125:
 11313  000F62  90D8               	bcf	status,0,c
 11314  000F64  0100               	movlb	0	; () banked
 11315  000F66  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11316  000F68  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11317  000F6A  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11318  000F6C  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11319  000F6E  2EE8               	decfsz	wreg,f,c
 11320  000F70  D7F8               	goto	u5125
 11321  000F72  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11322  000F76  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11323  000F7A  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11324  000F7E  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11325                           
 11326                           ; BSR set to: 0
 11327                           ;inc\CANlib.h: 788: RXF2SIDL = (unsigned char) tamp;
 11328  000F82  C081  FF09         	movff	CANSetFilter@tamp,3849	;volatile
 11329  000F86  D000               	goto	l4599
 11330  000F88                     l4599:
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;inc\CANlib.h: 789: }
 11334                           ;inc\CANlib.h: 791: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_STD_MSG))
 11335  000F88  0E03               	movlw	3
 11336  000F8A  0100               	movlb	0	; () banked
 11337  000F8C  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11338  000F8E  A4D8               	btfss	status,2,c
 11339  000F90  D059               	goto	l4617
 11340                           
 11341                           ; BSR set to: 0
 11342  000F92  0100               	movlb	0	; () banked
 11343  000F94  297B               	incf	CANSetFilter@type& (0+255),w,b
 11344  000F96  A4D8               	btfss	status,2,c
 11345  000F98  D055               	goto	l4617
 11346                           
 11347                           ; BSR set to: 0
 11348                           ;inc\CANlib.h: 792: {
 11349                           ;inc\CANlib.h: 793: RXF3SIDLbits.EXIDEN = 0x00;
 11350  000F9A  010F               	movlb	15	; () banked
 11351  000F9C  970D               	bcf	13,3,b	;volatile
 11352                           
 11353                           ; BSR set to: 15
 11354                           ;inc\CANlib.h: 795: tamp = (filter >> 3);
 11355  000F9E  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11356  000FA2  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11357  000FA6  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11358  000FAA  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11359  000FAE  0E04               	movlw	4
 11360  000FB0  D006               	goto	u5150
 11361  000FB2                     u5155:
 11362  000FB2  0100               	movlb	0	; () banked
 11363  000FB4  90D8               	bcf	status,0,c
 11364  000FB6  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11365  000FB8  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11366  000FBA  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11367  000FBC  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11368  000FBE                     u5150:
 11369  000FBE  2EE8               	decfsz	wreg,f,c
 11370  000FC0  D7F8               	goto	u5155
 11371  000FC2  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11372  000FC6  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11373  000FCA  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11374  000FCE  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11375                           
 11376                           ; BSR set to: 0
 11377                           ;inc\CANlib.h: 796: tamp = tamp & 0x000000FF;
 11378  000FD2  0100               	movlb	0	; () banked
 11379  000FD4  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11380  000FD6  0100               	movlb	0	; () banked
 11381  000FD8  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11382  000FDA  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11383  000FDC  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11384  000FDE  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11385                           
 11386                           ; BSR set to: 0
 11387                           ;inc\CANlib.h: 797: RXF3SIDH = (unsigned char) tamp;
 11388  000FE0  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 11389                           
 11390                           ; BSR set to: 0
 11391                           ;inc\CANlib.h: 799: tamp = filter & 0x00000007;
 11392  000FE4  0E07               	movlw	7
 11393  000FE6  0100               	movlb	0	; () banked
 11394  000FE8  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11395  000FEA  0100               	movlb	0	; () banked
 11396  000FEC  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11397  000FEE  0E00               	movlw	0
 11398  000FF0  0100               	movlb	0	; () banked
 11399  000FF2  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11400  000FF4  0100               	movlb	0	; () banked
 11401  000FF6  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11402  000FF8  0E00               	movlw	0
 11403  000FFA  0100               	movlb	0	; () banked
 11404  000FFC  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11405  000FFE  0100               	movlb	0	; () banked
 11406  001000  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11407  001002  0E00               	movlw	0
 11408  001004  0100               	movlb	0	; () banked
 11409  001006  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11410  001008  0100               	movlb	0	; () banked
 11411  00100A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11412                           
 11413                           ; BSR set to: 0
 11414                           ;inc\CANlib.h: 800: tamp = tamp << 5;
 11415  00100C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11416  001010  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11417  001014  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11418  001018  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11419  00101C  0E05               	movlw	5
 11420  00101E                     u5165:
 11421  00101E  90D8               	bcf	status,0,c
 11422  001020  0100               	movlb	0	; () banked
 11423  001022  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11424  001024  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11425  001026  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11426  001028  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11427  00102A  2EE8               	decfsz	wreg,f,c
 11428  00102C  D7F8               	goto	u5165
 11429  00102E  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11430  001032  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11431  001036  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11432  00103A  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11433                           
 11434                           ; BSR set to: 0
 11435                           ;inc\CANlib.h: 801: RXF3SIDL = (unsigned char) tamp;
 11436  00103E  C081  FF0D         	movff	CANSetFilter@tamp,3853	;volatile
 11437  001042  D000               	goto	l4617
 11438  001044                     l4617:
 11439                           
 11440                           ; BSR set to: 0
 11441                           ;inc\CANlib.h: 802: }
 11442                           ;inc\CANlib.h: 804: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_STD_MSG))
 11443  001044  0E04               	movlw	4
 11444  001046  0100               	movlb	0	; () banked
 11445  001048  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11446  00104A  A4D8               	btfss	status,2,c
 11447  00104C  D059               	goto	l4635
 11448                           
 11449                           ; BSR set to: 0
 11450  00104E  0100               	movlb	0	; () banked
 11451  001050  297B               	incf	CANSetFilter@type& (0+255),w,b
 11452  001052  A4D8               	btfss	status,2,c
 11453  001054  D055               	goto	l4635
 11454                           
 11455                           ; BSR set to: 0
 11456                           ;inc\CANlib.h: 805: {
 11457                           ;inc\CANlib.h: 806: RXF4SIDLbits.EXIDEN = 0x00;
 11458  001056  010F               	movlb	15	; () banked
 11459  001058  9711               	bcf	17,3,b	;volatile
 11460                           
 11461                           ; BSR set to: 15
 11462                           ;inc\CANlib.h: 808: tamp = (filter >> 3);
 11463  00105A  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11464  00105E  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11465  001062  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11466  001066  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11467  00106A  0E04               	movlw	4
 11468  00106C  D006               	goto	u5190
 11469  00106E                     u5195:
 11470  00106E  0100               	movlb	0	; () banked
 11471  001070  90D8               	bcf	status,0,c
 11472  001072  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11473  001074  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11474  001076  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11475  001078  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11476  00107A                     u5190:
 11477  00107A  2EE8               	decfsz	wreg,f,c
 11478  00107C  D7F8               	goto	u5195
 11479  00107E  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11480  001082  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11481  001086  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11482  00108A  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11483                           
 11484                           ; BSR set to: 0
 11485                           ;inc\CANlib.h: 809: tamp = tamp & 0x000000FF;
 11486  00108E  0100               	movlb	0	; () banked
 11487  001090  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11488  001092  0100               	movlb	0	; () banked
 11489  001094  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11490  001096  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11491  001098  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11492  00109A  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11493                           
 11494                           ; BSR set to: 0
 11495                           ;inc\CANlib.h: 810: RXF4SIDH = (unsigned char) tamp;
 11496  00109C  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 11497                           
 11498                           ; BSR set to: 0
 11499                           ;inc\CANlib.h: 812: tamp = filter & 0x00000007;
 11500  0010A0  0E07               	movlw	7
 11501  0010A2  0100               	movlb	0	; () banked
 11502  0010A4  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11503  0010A6  0100               	movlb	0	; () banked
 11504  0010A8  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11505  0010AA  0E00               	movlw	0
 11506  0010AC  0100               	movlb	0	; () banked
 11507  0010AE  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11508  0010B0  0100               	movlb	0	; () banked
 11509  0010B2  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11510  0010B4  0E00               	movlw	0
 11511  0010B6  0100               	movlb	0	; () banked
 11512  0010B8  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11513  0010BA  0100               	movlb	0	; () banked
 11514  0010BC  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11515  0010BE  0E00               	movlw	0
 11516  0010C0  0100               	movlb	0	; () banked
 11517  0010C2  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11518  0010C4  0100               	movlb	0	; () banked
 11519  0010C6  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11520                           
 11521                           ; BSR set to: 0
 11522                           ;inc\CANlib.h: 813: tamp = tamp << 5;
 11523  0010C8  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11524  0010CC  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11525  0010D0  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11526  0010D4  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11527  0010D8  0E05               	movlw	5
 11528  0010DA                     u5205:
 11529  0010DA  90D8               	bcf	status,0,c
 11530  0010DC  0100               	movlb	0	; () banked
 11531  0010DE  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11532  0010E0  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11533  0010E2  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11534  0010E4  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11535  0010E6  2EE8               	decfsz	wreg,f,c
 11536  0010E8  D7F8               	goto	u5205
 11537  0010EA  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11538  0010EE  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11539  0010F2  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11540  0010F6  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11541                           
 11542                           ; BSR set to: 0
 11543                           ;inc\CANlib.h: 814: RXF4SIDL = (unsigned char) tamp;
 11544  0010FA  C081  FF11         	movff	CANSetFilter@tamp,3857	;volatile
 11545  0010FE  D000               	goto	l4635
 11546  001100                     l4635:
 11547                           
 11548                           ; BSR set to: 0
 11549                           ;inc\CANlib.h: 815: }
 11550                           ;inc\CANlib.h: 817: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_STD_MSG))
 11551  001100  0E05               	movlw	5
 11552  001102  0100               	movlb	0	; () banked
 11553  001104  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11554  001106  A4D8               	btfss	status,2,c
 11555  001108  D059               	goto	l4653
 11556                           
 11557                           ; BSR set to: 0
 11558  00110A  0100               	movlb	0	; () banked
 11559  00110C  297B               	incf	CANSetFilter@type& (0+255),w,b
 11560  00110E  A4D8               	btfss	status,2,c
 11561  001110  D055               	goto	l4653
 11562                           
 11563                           ; BSR set to: 0
 11564                           ;inc\CANlib.h: 818: {
 11565                           ;inc\CANlib.h: 819: RXF5SIDLbits.EXIDEN = 0x00;
 11566  001112  010F               	movlb	15	; () banked
 11567  001114  9715               	bcf	21,3,b	;volatile
 11568                           
 11569                           ; BSR set to: 15
 11570                           ;inc\CANlib.h: 821: tamp = (filter >> 3);
 11571  001116  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11572  00111A  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11573  00111E  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11574  001122  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11575  001126  0E04               	movlw	4
 11576  001128  D006               	goto	u5230
 11577  00112A                     u5235:
 11578  00112A  0100               	movlb	0	; () banked
 11579  00112C  90D8               	bcf	status,0,c
 11580  00112E  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11581  001130  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11582  001132  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11583  001134  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11584  001136                     u5230:
 11585  001136  2EE8               	decfsz	wreg,f,c
 11586  001138  D7F8               	goto	u5235
 11587  00113A  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11588  00113E  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11589  001142  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11590  001146  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11591                           
 11592                           ; BSR set to: 0
 11593                           ;inc\CANlib.h: 822: tamp = tamp & 0x000000FF;
 11594  00114A  0100               	movlb	0	; () banked
 11595  00114C  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11596  00114E  0100               	movlb	0	; () banked
 11597  001150  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11598  001152  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11599  001154  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11600  001156  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11601                           
 11602                           ; BSR set to: 0
 11603                           ;inc\CANlib.h: 823: RXF5SIDH = (unsigned char) tamp;
 11604  001158  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 11605                           
 11606                           ; BSR set to: 0
 11607                           ;inc\CANlib.h: 825: tamp = filter & 0x00000007;
 11608  00115C  0E07               	movlw	7
 11609  00115E  0100               	movlb	0	; () banked
 11610  001160  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11611  001162  0100               	movlb	0	; () banked
 11612  001164  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11613  001166  0E00               	movlw	0
 11614  001168  0100               	movlb	0	; () banked
 11615  00116A  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11616  00116C  0100               	movlb	0	; () banked
 11617  00116E  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11618  001170  0E00               	movlw	0
 11619  001172  0100               	movlb	0	; () banked
 11620  001174  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11621  001176  0100               	movlb	0	; () banked
 11622  001178  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11623  00117A  0E00               	movlw	0
 11624  00117C  0100               	movlb	0	; () banked
 11625  00117E  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11626  001180  0100               	movlb	0	; () banked
 11627  001182  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11628                           
 11629                           ; BSR set to: 0
 11630                           ;inc\CANlib.h: 826: tamp = tamp << 5;
 11631  001184  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11632  001188  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11633  00118C  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11634  001190  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11635  001194  0E05               	movlw	5
 11636  001196                     u5245:
 11637  001196  90D8               	bcf	status,0,c
 11638  001198  0100               	movlb	0	; () banked
 11639  00119A  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11640  00119C  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11641  00119E  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11642  0011A0  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11643  0011A2  2EE8               	decfsz	wreg,f,c
 11644  0011A4  D7F8               	goto	u5245
 11645  0011A6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11646  0011AA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11647  0011AE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11648  0011B2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11649                           
 11650                           ; BSR set to: 0
 11651                           ;inc\CANlib.h: 827: RXF5SIDL = (unsigned char) tamp;
 11652  0011B6  C081  FF15         	movff	CANSetFilter@tamp,3861	;volatile
 11653  0011BA  D000               	goto	l4653
 11654  0011BC                     l4653:
 11655                           
 11656                           ; BSR set to: 0
 11657                           ;inc\CANlib.h: 828: }
 11658                           ;inc\CANlib.h: 831: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_XTD_MSG))
 11659  0011BC  0100               	movlb	0	; () banked
 11660  0011BE  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 11661  0011C0  0100               	movlb	0	; () banked
 11662  0011C2  A4D8               	btfss	status,2,c
 11663  0011C4  D08B               	goto	l4687
 11664                           
 11665                           ; BSR set to: 0
 11666  0011C6  0EF7               	movlw	247
 11667  0011C8  0100               	movlb	0	; () banked
 11668  0011CA  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 11669  0011CC  A4D8               	btfss	status,2,c
 11670  0011CE  D086               	goto	l4687
 11671                           
 11672                           ; BSR set to: 0
 11673                           ;inc\CANlib.h: 832: {
 11674                           ;inc\CANlib.h: 833: RXF0SIDLbits.EXIDEN = 0x01;
 11675  0011D0  010F               	movlb	15	; () banked
 11676  0011D2  8701               	bsf	1,3,b	;volatile
 11677                           
 11678                           ; BSR set to: 15
 11679                           ;inc\CANlib.h: 835: tamp = filter & 0x000000FF;
 11680  0011D4  0100               	movlb	0	; () banked
 11681  0011D6  5177               	movf	CANSetFilter@filter& (0+255),w,b
 11682  0011D8  0100               	movlb	0	; () banked
 11683  0011DA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11684  0011DC  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11685  0011DE  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11686  0011E0  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11687                           
 11688                           ; BSR set to: 0
 11689                           ;inc\CANlib.h: 836: RXF0EIDL = (unsigned char) tamp;
 11690  0011E2  C081  FF03         	movff	CANSetFilter@tamp,3843	;volatile
 11691                           
 11692                           ; BSR set to: 0
 11693                           ;inc\CANlib.h: 838: tamp = filter & 0x0000FF00;
 11694  0011E6  0E00               	movlw	0
 11695  0011E8  0100               	movlb	0	; () banked
 11696  0011EA  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11697  0011EC  0100               	movlb	0	; () banked
 11698  0011EE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11699  0011F0  0EFF               	movlw	255
 11700  0011F2  0100               	movlb	0	; () banked
 11701  0011F4  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11702  0011F6  0100               	movlb	0	; () banked
 11703  0011F8  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11704  0011FA  0E00               	movlw	0
 11705  0011FC  0100               	movlb	0	; () banked
 11706  0011FE  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11707  001200  0100               	movlb	0	; () banked
 11708  001202  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11709  001204  0E00               	movlw	0
 11710  001206  0100               	movlb	0	; () banked
 11711  001208  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11712  00120A  0100               	movlb	0	; () banked
 11713  00120C  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11714                           
 11715                           ; BSR set to: 0
 11716                           ;inc\CANlib.h: 839: tamp = tamp >> 8;
 11717  00120E  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11718  001212  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11719  001216  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11720  00121A  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11721  00121E  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 11722  001222  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 11723  001226  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 11724  00122A  0100               	movlb	0	; () banked
 11725  00122C  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 11726  00122E  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11727  001232  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11728  001236  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11729  00123A  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11730                           
 11731                           ; BSR set to: 0
 11732                           ;inc\CANlib.h: 840: RXF0EIDH = (unsigned char) tamp;
 11733  00123E  C081  FF02         	movff	CANSetFilter@tamp,3842	;volatile
 11734                           
 11735                           ; BSR set to: 0
 11736                           ;inc\CANlib.h: 842: if (filter & 0x00010000)
 11737  001242  0100               	movlb	0	; () banked
 11738  001244  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 11739  001246  D003               	goto	l463
 11740                           
 11741                           ; BSR set to: 0
 11742                           ;inc\CANlib.h: 843: RXF0SIDLbits.EID16 = 0x01;
 11743  001248  010F               	movlb	15	; () banked
 11744  00124A  8101               	bsf	1,0,b	;volatile
 11745  00124C  D002               	goto	l464
 11746  00124E                     l463:
 11747                           
 11748                           ; BSR set to: 0
 11749                           ;inc\CANlib.h: 844: else
 11750                           ;inc\CANlib.h: 845: RXF0SIDLbits.EID16 = 0x00;
 11751  00124E  010F               	movlb	15	; () banked
 11752  001250  9101               	bcf	1,0,b	;volatile
 11753  001252                     l464:
 11754                           
 11755                           ; BSR set to: 15
 11756                           ;inc\CANlib.h: 847: if (filter & 0x00020000)
 11757  001252  0100               	movlb	0	; () banked
 11758  001254  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 11759  001256  D003               	goto	l465
 11760                           
 11761                           ; BSR set to: 0
 11762                           ;inc\CANlib.h: 848: RXF0SIDLbits.EID17 = 0x01;
 11763  001258  010F               	movlb	15	; () banked
 11764  00125A  8301               	bsf	1,1,b	;volatile
 11765  00125C  D002               	goto	l466
 11766  00125E                     l465:
 11767                           
 11768                           ; BSR set to: 0
 11769                           ;inc\CANlib.h: 849: else
 11770                           ;inc\CANlib.h: 850: RXF0SIDLbits.EID17 = 0x00;
 11771  00125E  010F               	movlb	15	; () banked
 11772  001260  9301               	bcf	1,1,b	;volatile
 11773  001262                     l466:
 11774                           
 11775                           ; BSR set to: 15
 11776                           ;inc\CANlib.h: 852: if (filter & 0x00040000)
 11777  001262  0100               	movlb	0	; () banked
 11778  001264  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 11779  001266  D003               	goto	l467
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;inc\CANlib.h: 853: RXF0SIDLbits.SID0 = 0x01;
 11783  001268  010F               	movlb	15	; () banked
 11784  00126A  8B01               	bsf	1,5,b	;volatile
 11785  00126C  D002               	goto	l468
 11786  00126E                     l467:
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;inc\CANlib.h: 854: else
 11790                           ;inc\CANlib.h: 855: RXF0SIDLbits.SID0 = 0x00;
 11791  00126E  010F               	movlb	15	; () banked
 11792  001270  9B01               	bcf	1,5,b	;volatile
 11793  001272                     l468:
 11794                           
 11795                           ; BSR set to: 15
 11796                           ;inc\CANlib.h: 857: if (filter & 0x00080000)
 11797  001272  0100               	movlb	0	; () banked
 11798  001274  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 11799  001276  D003               	goto	l469
 11800                           
 11801                           ; BSR set to: 0
 11802                           ;inc\CANlib.h: 858: RXF0SIDLbits.SID1 = 0x01;
 11803  001278  010F               	movlb	15	; () banked
 11804  00127A  8D01               	bsf	1,6,b	;volatile
 11805  00127C  D002               	goto	l470
 11806  00127E                     l469:
 11807                           
 11808                           ; BSR set to: 0
 11809                           ;inc\CANlib.h: 859: else
 11810                           ;inc\CANlib.h: 860: RXF0SIDLbits.SID1 = 0x00;
 11811  00127E  010F               	movlb	15	; () banked
 11812  001280  9D01               	bcf	1,6,b	;volatile
 11813  001282                     l470:
 11814                           
 11815                           ; BSR set to: 15
 11816                           ;inc\CANlib.h: 862: if (filter & 0x00100000)
 11817  001282  0100               	movlb	0	; () banked
 11818  001284  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 11819  001286  D003               	goto	l471
 11820                           
 11821                           ; BSR set to: 0
 11822                           ;inc\CANlib.h: 863: RXF0SIDLbits.SID2 = 0x01 ;
 11823  001288  010F               	movlb	15	; () banked
 11824  00128A  8F01               	bsf	1,7,b	;volatile
 11825  00128C  D003               	goto	l4681
 11826  00128E                     l471:
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;inc\CANlib.h: 864: else
 11830                           ;inc\CANlib.h: 865: RXF0SIDLbits.SID2 = 0x00 ;
 11831  00128E  010F               	movlb	15	; () banked
 11832  001290  9F01               	bcf	1,7,b	;volatile
 11833  001292  D000               	goto	l4681
 11834  001294                     l4681:
 11835                           
 11836                           ; BSR set to: 15
 11837                           ;inc\CANlib.h: 867: tamp = (filter >> 21);
 11838  001294  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11839  001298  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11840  00129C  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11841  0012A0  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11842  0012A4  0E16               	movlw	22
 11843  0012A6  D006               	goto	u5320
 11844  0012A8                     u5325:
 11845  0012A8  0100               	movlb	0	; () banked
 11846  0012AA  90D8               	bcf	status,0,c
 11847  0012AC  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11848  0012AE  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11849  0012B0  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11850  0012B2  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11851  0012B4                     u5320:
 11852  0012B4  2EE8               	decfsz	wreg,f,c
 11853  0012B6  D7F8               	goto	u5325
 11854  0012B8  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11855  0012BC  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11856  0012C0  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11857  0012C4  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11858                           
 11859                           ; BSR set to: 0
 11860                           ;inc\CANlib.h: 868: tamp = tamp & 0x000000FF;
 11861  0012C8  0100               	movlb	0	; () banked
 11862  0012CA  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11863  0012CC  0100               	movlb	0	; () banked
 11864  0012CE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11865  0012D0  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11866  0012D2  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11867  0012D4  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11868                           
 11869                           ; BSR set to: 0
 11870                           ;inc\CANlib.h: 869: RXF0SIDH = (unsigned char) tamp;
 11871  0012D6  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 11872  0012DA  D000               	goto	l4687
 11873  0012DC                     l4687:
 11874                           
 11875                           ; BSR set to: 0
 11876                           ;inc\CANlib.h: 870: }
 11877                           ;inc\CANlib.h: 872: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_XTD_MSG))
 11878  0012DC  0100               	movlb	0	; () banked
 11879  0012DE  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 11880  0012E0  A4D8               	btfss	status,2,c
 11881  0012E2  D08B               	goto	l4721
 11882                           
 11883                           ; BSR set to: 0
 11884  0012E4  0EF7               	movlw	247
 11885  0012E6  0100               	movlb	0	; () banked
 11886  0012E8  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 11887  0012EA  A4D8               	btfss	status,2,c
 11888  0012EC  D086               	goto	l4721
 11889                           
 11890                           ; BSR set to: 0
 11891                           ;inc\CANlib.h: 873: {
 11892                           ;inc\CANlib.h: 874: RXF1SIDLbits.EXIDEN = 0x01;
 11893  0012EE  010F               	movlb	15	; () banked
 11894  0012F0  8705               	bsf	5,3,b	;volatile
 11895                           
 11896                           ; BSR set to: 15
 11897                           ;inc\CANlib.h: 876: tamp = filter & 0x000000FF;
 11898  0012F2  0100               	movlb	0	; () banked
 11899  0012F4  5177               	movf	CANSetFilter@filter& (0+255),w,b
 11900  0012F6  0100               	movlb	0	; () banked
 11901  0012F8  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11902  0012FA  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11903  0012FC  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11904  0012FE  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11905                           
 11906                           ; BSR set to: 0
 11907                           ;inc\CANlib.h: 877: RXF1EIDL = (unsigned char) tamp;
 11908  001300  C081  FF07         	movff	CANSetFilter@tamp,3847	;volatile
 11909                           
 11910                           ; BSR set to: 0
 11911                           ;inc\CANlib.h: 879: tamp = filter & 0x0000FF00;
 11912  001304  0E00               	movlw	0
 11913  001306  0100               	movlb	0	; () banked
 11914  001308  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11915  00130A  0100               	movlb	0	; () banked
 11916  00130C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11917  00130E  0EFF               	movlw	255
 11918  001310  0100               	movlb	0	; () banked
 11919  001312  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11920  001314  0100               	movlb	0	; () banked
 11921  001316  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11922  001318  0E00               	movlw	0
 11923  00131A  0100               	movlb	0	; () banked
 11924  00131C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11925  00131E  0100               	movlb	0	; () banked
 11926  001320  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11927  001322  0E00               	movlw	0
 11928  001324  0100               	movlb	0	; () banked
 11929  001326  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11930  001328  0100               	movlb	0	; () banked
 11931  00132A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11932                           
 11933                           ; BSR set to: 0
 11934                           ;inc\CANlib.h: 880: tamp = tamp >> 8;
 11935  00132C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11936  001330  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11937  001334  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11938  001338  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11939  00133C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 11940  001340  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 11941  001344  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 11942  001348  0100               	movlb	0	; () banked
 11943  00134A  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 11944  00134C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11945  001350  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11946  001354  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11947  001358  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11948                           
 11949                           ; BSR set to: 0
 11950                           ;inc\CANlib.h: 881: RXF1EIDH = (unsigned char) tamp;
 11951  00135C  C081  FF06         	movff	CANSetFilter@tamp,3846	;volatile
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;inc\CANlib.h: 883: if (filter & 0x00010000)
 11955  001360  0100               	movlb	0	; () banked
 11956  001362  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 11957  001364  D003               	goto	l474
 11958                           
 11959                           ; BSR set to: 0
 11960                           ;inc\CANlib.h: 884: RXF1SIDLbits.EID16 = 0x01;
 11961  001366  010F               	movlb	15	; () banked
 11962  001368  8105               	bsf	5,0,b	;volatile
 11963  00136A  D002               	goto	l475
 11964  00136C                     l474:
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;inc\CANlib.h: 885: else
 11968                           ;inc\CANlib.h: 886: RXF1SIDLbits.EID16 = 0x00;
 11969  00136C  010F               	movlb	15	; () banked
 11970  00136E  9105               	bcf	5,0,b	;volatile
 11971  001370                     l475:
 11972                           
 11973                           ; BSR set to: 15
 11974                           ;inc\CANlib.h: 888: if (filter & 0x00020000)
 11975  001370  0100               	movlb	0	; () banked
 11976  001372  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 11977  001374  D003               	goto	l476
 11978                           
 11979                           ; BSR set to: 0
 11980                           ;inc\CANlib.h: 889: RXF1SIDLbits.EID17 = 0x01;
 11981  001376  010F               	movlb	15	; () banked
 11982  001378  8305               	bsf	5,1,b	;volatile
 11983  00137A  D002               	goto	l477
 11984  00137C                     l476:
 11985                           
 11986                           ; BSR set to: 0
 11987                           ;inc\CANlib.h: 890: else
 11988                           ;inc\CANlib.h: 891: RXF1SIDLbits.EID17 = 0x00;
 11989  00137C  010F               	movlb	15	; () banked
 11990  00137E  9305               	bcf	5,1,b	;volatile
 11991  001380                     l477:
 11992                           
 11993                           ; BSR set to: 15
 11994                           ;inc\CANlib.h: 893: if (filter & 0x00040000)
 11995  001380  0100               	movlb	0	; () banked
 11996  001382  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 11997  001384  D003               	goto	l478
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;inc\CANlib.h: 894: RXF1SIDLbits.SID0 = 0x01;
 12001  001386  010F               	movlb	15	; () banked
 12002  001388  8B05               	bsf	5,5,b	;volatile
 12003  00138A  D002               	goto	l479
 12004  00138C                     l478:
 12005                           
 12006                           ; BSR set to: 0
 12007                           ;inc\CANlib.h: 895: else
 12008                           ;inc\CANlib.h: 896: RXF1SIDLbits.SID0 = 0x00;
 12009  00138C  010F               	movlb	15	; () banked
 12010  00138E  9B05               	bcf	5,5,b	;volatile
 12011  001390                     l479:
 12012                           
 12013                           ; BSR set to: 15
 12014                           ;inc\CANlib.h: 898: if (filter & 0x00080000)
 12015  001390  0100               	movlb	0	; () banked
 12016  001392  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12017  001394  D003               	goto	l480
 12018                           
 12019                           ; BSR set to: 0
 12020                           ;inc\CANlib.h: 899: RXF1SIDLbits.SID1 = 0x01;
 12021  001396  010F               	movlb	15	; () banked
 12022  001398  8D05               	bsf	5,6,b	;volatile
 12023  00139A  D002               	goto	l481
 12024  00139C                     l480:
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;inc\CANlib.h: 900: else
 12028                           ;inc\CANlib.h: 901: RXF1SIDLbits.SID1 = 0x00;
 12029  00139C  010F               	movlb	15	; () banked
 12030  00139E  9D05               	bcf	5,6,b	;volatile
 12031  0013A0                     l481:
 12032                           
 12033                           ; BSR set to: 15
 12034                           ;inc\CANlib.h: 903: if (filter & 0x00100000)
 12035  0013A0  0100               	movlb	0	; () banked
 12036  0013A2  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12037  0013A4  D003               	goto	l482
 12038                           
 12039                           ; BSR set to: 0
 12040                           ;inc\CANlib.h: 904: RXF1SIDLbits.SID2 = 0x01 ;
 12041  0013A6  010F               	movlb	15	; () banked
 12042  0013A8  8F05               	bsf	5,7,b	;volatile
 12043  0013AA  D003               	goto	l4715
 12044  0013AC                     l482:
 12045                           
 12046                           ; BSR set to: 0
 12047                           ;inc\CANlib.h: 905: else
 12048                           ;inc\CANlib.h: 906: RXF1SIDLbits.SID2 = 0x00 ;
 12049  0013AC  010F               	movlb	15	; () banked
 12050  0013AE  9F05               	bcf	5,7,b	;volatile
 12051  0013B0  D000               	goto	l4715
 12052  0013B2                     l4715:
 12053                           
 12054                           ; BSR set to: 15
 12055                           ;inc\CANlib.h: 908: tamp = (filter >> 21);
 12056  0013B2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12057  0013B6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12058  0013BA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12059  0013BE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12060  0013C2  0E16               	movlw	22
 12061  0013C4  D006               	goto	u5400
 12062  0013C6                     u5405:
 12063  0013C6  0100               	movlb	0	; () banked
 12064  0013C8  90D8               	bcf	status,0,c
 12065  0013CA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12066  0013CC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12067  0013CE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12068  0013D0  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12069  0013D2                     u5400:
 12070  0013D2  2EE8               	decfsz	wreg,f,c
 12071  0013D4  D7F8               	goto	u5405
 12072  0013D6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12073  0013DA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12074  0013DE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12075  0013E2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12076                           
 12077                           ; BSR set to: 0
 12078                           ;inc\CANlib.h: 909: tamp = tamp & 0x000000FF;
 12079  0013E6  0100               	movlb	0	; () banked
 12080  0013E8  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12081  0013EA  0100               	movlb	0	; () banked
 12082  0013EC  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12083  0013EE  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12084  0013F0  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12085  0013F2  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12086                           
 12087                           ; BSR set to: 0
 12088                           ;inc\CANlib.h: 910: RXF1SIDH = (unsigned char) tamp;
 12089  0013F4  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 12090  0013F8  D000               	goto	l4721
 12091  0013FA                     l4721:
 12092                           
 12093                           ; BSR set to: 0
 12094                           ;inc\CANlib.h: 911: }
 12095                           ;inc\CANlib.h: 914: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_XTD_MSG))
 12096  0013FA  0E02               	movlw	2
 12097  0013FC  0100               	movlb	0	; () banked
 12098  0013FE  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12099  001400  A4D8               	btfss	status,2,c
 12100  001402  D08B               	goto	l4755
 12101                           
 12102                           ; BSR set to: 0
 12103  001404  0EF7               	movlw	247
 12104  001406  0100               	movlb	0	; () banked
 12105  001408  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12106  00140A  A4D8               	btfss	status,2,c
 12107  00140C  D086               	goto	l4755
 12108                           
 12109                           ; BSR set to: 0
 12110                           ;inc\CANlib.h: 915: {
 12111                           ;inc\CANlib.h: 916: RXF2SIDLbits.EXIDEN = 0x01;
 12112  00140E  010F               	movlb	15	; () banked
 12113  001410  8709               	bsf	9,3,b	;volatile
 12114                           
 12115                           ; BSR set to: 15
 12116                           ;inc\CANlib.h: 918: tamp = filter & 0x000000FF;
 12117  001412  0100               	movlb	0	; () banked
 12118  001414  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12119  001416  0100               	movlb	0	; () banked
 12120  001418  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12121  00141A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12122  00141C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12123  00141E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;inc\CANlib.h: 919: RXF2EIDL = (unsigned char) tamp;
 12127  001420  C081  FF0B         	movff	CANSetFilter@tamp,3851	;volatile
 12128                           
 12129                           ; BSR set to: 0
 12130                           ;inc\CANlib.h: 921: tamp = filter & 0x0000FF00;
 12131  001424  0E00               	movlw	0
 12132  001426  0100               	movlb	0	; () banked
 12133  001428  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12134  00142A  0100               	movlb	0	; () banked
 12135  00142C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12136  00142E  0EFF               	movlw	255
 12137  001430  0100               	movlb	0	; () banked
 12138  001432  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12139  001434  0100               	movlb	0	; () banked
 12140  001436  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12141  001438  0E00               	movlw	0
 12142  00143A  0100               	movlb	0	; () banked
 12143  00143C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12144  00143E  0100               	movlb	0	; () banked
 12145  001440  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12146  001442  0E00               	movlw	0
 12147  001444  0100               	movlb	0	; () banked
 12148  001446  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12149  001448  0100               	movlb	0	; () banked
 12150  00144A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12151                           
 12152                           ; BSR set to: 0
 12153                           ;inc\CANlib.h: 922: tamp = tamp >> 8;
 12154  00144C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12155  001450  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12156  001454  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12157  001458  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12158  00145C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12159  001460  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12160  001464  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12161  001468  0100               	movlb	0	; () banked
 12162  00146A  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12163  00146C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12164  001470  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12165  001474  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12166  001478  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12167                           
 12168                           ; BSR set to: 0
 12169                           ;inc\CANlib.h: 923: RXF2EIDH = (unsigned char) tamp;
 12170  00147C  C081  FF0A         	movff	CANSetFilter@tamp,3850	;volatile
 12171                           
 12172                           ; BSR set to: 0
 12173                           ;inc\CANlib.h: 925: if (filter & 0x00010000)
 12174  001480  0100               	movlb	0	; () banked
 12175  001482  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12176  001484  D003               	goto	l485
 12177                           
 12178                           ; BSR set to: 0
 12179                           ;inc\CANlib.h: 926: RXF2SIDLbits.EID16 = 0x01;
 12180  001486  010F               	movlb	15	; () banked
 12181  001488  8109               	bsf	9,0,b	;volatile
 12182  00148A  D002               	goto	l486
 12183  00148C                     l485:
 12184                           
 12185                           ; BSR set to: 0
 12186                           ;inc\CANlib.h: 927: else
 12187                           ;inc\CANlib.h: 928: RXF2SIDLbits.EID16 = 0x00;
 12188  00148C  010F               	movlb	15	; () banked
 12189  00148E  9109               	bcf	9,0,b	;volatile
 12190  001490                     l486:
 12191                           
 12192                           ; BSR set to: 15
 12193                           ;inc\CANlib.h: 930: if (filter & 0x00020000)
 12194  001490  0100               	movlb	0	; () banked
 12195  001492  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12196  001494  D003               	goto	l487
 12197                           
 12198                           ; BSR set to: 0
 12199                           ;inc\CANlib.h: 931: RXF2SIDLbits.EID17 = 0x01;
 12200  001496  010F               	movlb	15	; () banked
 12201  001498  8309               	bsf	9,1,b	;volatile
 12202  00149A  D002               	goto	l488
 12203  00149C                     l487:
 12204                           
 12205                           ; BSR set to: 0
 12206                           ;inc\CANlib.h: 932: else
 12207                           ;inc\CANlib.h: 933: RXF2SIDLbits.EID17 = 0x00;
 12208  00149C  010F               	movlb	15	; () banked
 12209  00149E  9309               	bcf	9,1,b	;volatile
 12210  0014A0                     l488:
 12211                           
 12212                           ; BSR set to: 15
 12213                           ;inc\CANlib.h: 935: if (filter & 0x00040000)
 12214  0014A0  0100               	movlb	0	; () banked
 12215  0014A2  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12216  0014A4  D003               	goto	l489
 12217                           
 12218                           ; BSR set to: 0
 12219                           ;inc\CANlib.h: 936: RXF2SIDLbits.SID0 = 0x01;
 12220  0014A6  010F               	movlb	15	; () banked
 12221  0014A8  8B09               	bsf	9,5,b	;volatile
 12222  0014AA  D002               	goto	l490
 12223  0014AC                     l489:
 12224                           
 12225                           ; BSR set to: 0
 12226                           ;inc\CANlib.h: 937: else
 12227                           ;inc\CANlib.h: 938: RXF2SIDLbits.SID0 = 0x00;
 12228  0014AC  010F               	movlb	15	; () banked
 12229  0014AE  9B09               	bcf	9,5,b	;volatile
 12230  0014B0                     l490:
 12231                           
 12232                           ; BSR set to: 15
 12233                           ;inc\CANlib.h: 940: if (filter & 0x00080000)
 12234  0014B0  0100               	movlb	0	; () banked
 12235  0014B2  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12236  0014B4  D003               	goto	l491
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;inc\CANlib.h: 941: RXF2SIDLbits.SID1 = 0x01;
 12240  0014B6  010F               	movlb	15	; () banked
 12241  0014B8  8D09               	bsf	9,6,b	;volatile
 12242  0014BA  D002               	goto	l492
 12243  0014BC                     l491:
 12244                           
 12245                           ; BSR set to: 0
 12246                           ;inc\CANlib.h: 942: else
 12247                           ;inc\CANlib.h: 943: RXF2SIDLbits.SID1 = 0x00;
 12248  0014BC  010F               	movlb	15	; () banked
 12249  0014BE  9D09               	bcf	9,6,b	;volatile
 12250  0014C0                     l492:
 12251                           
 12252                           ; BSR set to: 15
 12253                           ;inc\CANlib.h: 945: if (filter & 0x00100000)
 12254  0014C0  0100               	movlb	0	; () banked
 12255  0014C2  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12256  0014C4  D003               	goto	l493
 12257                           
 12258                           ; BSR set to: 0
 12259                           ;inc\CANlib.h: 946: RXF2SIDLbits.SID2 = 0x01 ;
 12260  0014C6  010F               	movlb	15	; () banked
 12261  0014C8  8F09               	bsf	9,7,b	;volatile
 12262  0014CA  D003               	goto	l4749
 12263  0014CC                     l493:
 12264                           
 12265                           ; BSR set to: 0
 12266                           ;inc\CANlib.h: 947: else
 12267                           ;inc\CANlib.h: 948: RXF2SIDLbits.SID2 = 0x00 ;
 12268  0014CC  010F               	movlb	15	; () banked
 12269  0014CE  9F09               	bcf	9,7,b	;volatile
 12270  0014D0  D000               	goto	l4749
 12271  0014D2                     l4749:
 12272                           
 12273                           ; BSR set to: 15
 12274                           ;inc\CANlib.h: 950: tamp = (filter >> 21);
 12275  0014D2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12276  0014D6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12277  0014DA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12278  0014DE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12279  0014E2  0E16               	movlw	22
 12280  0014E4  D006               	goto	u5480
 12281  0014E6                     u5485:
 12282  0014E6  0100               	movlb	0	; () banked
 12283  0014E8  90D8               	bcf	status,0,c
 12284  0014EA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12285  0014EC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12286  0014EE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12287  0014F0  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12288  0014F2                     u5480:
 12289  0014F2  2EE8               	decfsz	wreg,f,c
 12290  0014F4  D7F8               	goto	u5485
 12291  0014F6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12292  0014FA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12293  0014FE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12294  001502  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12295                           
 12296                           ; BSR set to: 0
 12297                           ;inc\CANlib.h: 951: tamp = tamp & 0x000000FF;
 12298  001506  0100               	movlb	0	; () banked
 12299  001508  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12300  00150A  0100               	movlb	0	; () banked
 12301  00150C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12302  00150E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12303  001510  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12304  001512  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;inc\CANlib.h: 952: RXF2SIDH = (unsigned char) tamp;
 12308  001514  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 12309  001518  D000               	goto	l4755
 12310  00151A                     l4755:
 12311                           
 12312                           ; BSR set to: 0
 12313                           ;inc\CANlib.h: 953: }
 12314                           ;inc\CANlib.h: 955: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_XTD_MSG))
 12315  00151A  0E03               	movlw	3
 12316  00151C  0100               	movlb	0	; () banked
 12317  00151E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12318  001520  A4D8               	btfss	status,2,c
 12319  001522  D08B               	goto	l4789
 12320                           
 12321                           ; BSR set to: 0
 12322  001524  0EF7               	movlw	247
 12323  001526  0100               	movlb	0	; () banked
 12324  001528  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12325  00152A  A4D8               	btfss	status,2,c
 12326  00152C  D086               	goto	l4789
 12327                           
 12328                           ; BSR set to: 0
 12329                           ;inc\CANlib.h: 956: {
 12330                           ;inc\CANlib.h: 957: RXF3SIDLbits.EXIDEN = 0x01;
 12331  00152E  010F               	movlb	15	; () banked
 12332  001530  870D               	bsf	13,3,b	;volatile
 12333                           
 12334                           ; BSR set to: 15
 12335                           ;inc\CANlib.h: 959: tamp = filter & 0x000000FF;
 12336  001532  0100               	movlb	0	; () banked
 12337  001534  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12338  001536  0100               	movlb	0	; () banked
 12339  001538  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12340  00153A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12341  00153C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12342  00153E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12343                           
 12344                           ; BSR set to: 0
 12345                           ;inc\CANlib.h: 960: RXF3EIDL = (unsigned char) tamp;
 12346  001540  C081  FF0F         	movff	CANSetFilter@tamp,3855	;volatile
 12347                           
 12348                           ; BSR set to: 0
 12349                           ;inc\CANlib.h: 962: tamp = filter & 0x0000FF00;
 12350  001544  0E00               	movlw	0
 12351  001546  0100               	movlb	0	; () banked
 12352  001548  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12353  00154A  0100               	movlb	0	; () banked
 12354  00154C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12355  00154E  0EFF               	movlw	255
 12356  001550  0100               	movlb	0	; () banked
 12357  001552  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12358  001554  0100               	movlb	0	; () banked
 12359  001556  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12360  001558  0E00               	movlw	0
 12361  00155A  0100               	movlb	0	; () banked
 12362  00155C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12363  00155E  0100               	movlb	0	; () banked
 12364  001560  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12365  001562  0E00               	movlw	0
 12366  001564  0100               	movlb	0	; () banked
 12367  001566  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12368  001568  0100               	movlb	0	; () banked
 12369  00156A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12370                           
 12371                           ; BSR set to: 0
 12372                           ;inc\CANlib.h: 963: tamp = tamp >> 8;
 12373  00156C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12374  001570  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12375  001574  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12376  001578  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12377  00157C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12378  001580  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12379  001584  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12380  001588  0100               	movlb	0	; () banked
 12381  00158A  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12382  00158C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12383  001590  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12384  001594  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12385  001598  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12386                           
 12387                           ; BSR set to: 0
 12388                           ;inc\CANlib.h: 964: RXF3EIDH = (unsigned char) tamp;
 12389  00159C  C081  FF0E         	movff	CANSetFilter@tamp,3854	;volatile
 12390                           
 12391                           ; BSR set to: 0
 12392                           ;inc\CANlib.h: 966: if (filter & 0x00010000)
 12393  0015A0  0100               	movlb	0	; () banked
 12394  0015A2  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12395  0015A4  D003               	goto	l496
 12396                           
 12397                           ; BSR set to: 0
 12398                           ;inc\CANlib.h: 967: RXF3SIDLbits.EID16 = 0x01;
 12399  0015A6  010F               	movlb	15	; () banked
 12400  0015A8  810D               	bsf	13,0,b	;volatile
 12401  0015AA  D002               	goto	l497
 12402  0015AC                     l496:
 12403                           
 12404                           ; BSR set to: 0
 12405                           ;inc\CANlib.h: 968: else
 12406                           ;inc\CANlib.h: 969: RXF3SIDLbits.EID16 = 0x00;
 12407  0015AC  010F               	movlb	15	; () banked
 12408  0015AE  910D               	bcf	13,0,b	;volatile
 12409  0015B0                     l497:
 12410                           
 12411                           ; BSR set to: 15
 12412                           ;inc\CANlib.h: 971: if (filter & 0x00020000)
 12413  0015B0  0100               	movlb	0	; () banked
 12414  0015B2  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12415  0015B4  D003               	goto	l498
 12416                           
 12417                           ; BSR set to: 0
 12418                           ;inc\CANlib.h: 972: RXF3SIDLbits.EID17 = 0x01;
 12419  0015B6  010F               	movlb	15	; () banked
 12420  0015B8  830D               	bsf	13,1,b	;volatile
 12421  0015BA  D002               	goto	l499
 12422  0015BC                     l498:
 12423                           
 12424                           ; BSR set to: 0
 12425                           ;inc\CANlib.h: 973: else
 12426                           ;inc\CANlib.h: 974: RXF3SIDLbits.EID17 = 0x00;
 12427  0015BC  010F               	movlb	15	; () banked
 12428  0015BE  930D               	bcf	13,1,b	;volatile
 12429  0015C0                     l499:
 12430                           
 12431                           ; BSR set to: 15
 12432                           ;inc\CANlib.h: 976: if (filter & 0x00040000)
 12433  0015C0  0100               	movlb	0	; () banked
 12434  0015C2  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12435  0015C4  D003               	goto	l500
 12436                           
 12437                           ; BSR set to: 0
 12438                           ;inc\CANlib.h: 977: RXF3SIDLbits.SID0 = 0x01;
 12439  0015C6  010F               	movlb	15	; () banked
 12440  0015C8  8B0D               	bsf	13,5,b	;volatile
 12441  0015CA  D002               	goto	l501
 12442  0015CC                     l500:
 12443                           
 12444                           ; BSR set to: 0
 12445                           ;inc\CANlib.h: 978: else
 12446                           ;inc\CANlib.h: 979: RXF3SIDLbits.SID0 = 0x00;
 12447  0015CC  010F               	movlb	15	; () banked
 12448  0015CE  9B0D               	bcf	13,5,b	;volatile
 12449  0015D0                     l501:
 12450                           
 12451                           ; BSR set to: 15
 12452                           ;inc\CANlib.h: 981: if (filter & 0x00080000)
 12453  0015D0  0100               	movlb	0	; () banked
 12454  0015D2  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12455  0015D4  D003               	goto	l502
 12456                           
 12457                           ; BSR set to: 0
 12458                           ;inc\CANlib.h: 982: RXF3SIDLbits.SID1 = 0x01;
 12459  0015D6  010F               	movlb	15	; () banked
 12460  0015D8  8D0D               	bsf	13,6,b	;volatile
 12461  0015DA  D002               	goto	l503
 12462  0015DC                     l502:
 12463                           
 12464                           ; BSR set to: 0
 12465                           ;inc\CANlib.h: 983: else
 12466                           ;inc\CANlib.h: 984: RXF3SIDLbits.SID1 = 0x00;
 12467  0015DC  010F               	movlb	15	; () banked
 12468  0015DE  9D0D               	bcf	13,6,b	;volatile
 12469  0015E0                     l503:
 12470                           
 12471                           ; BSR set to: 15
 12472                           ;inc\CANlib.h: 986: if (filter & 0x00100000)
 12473  0015E0  0100               	movlb	0	; () banked
 12474  0015E2  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12475  0015E4  D003               	goto	l504
 12476                           
 12477                           ; BSR set to: 0
 12478                           ;inc\CANlib.h: 987: RXF3SIDLbits.SID2 = 0x01 ;
 12479  0015E6  010F               	movlb	15	; () banked
 12480  0015E8  8F0D               	bsf	13,7,b	;volatile
 12481  0015EA  D003               	goto	l4783
 12482  0015EC                     l504:
 12483                           
 12484                           ; BSR set to: 0
 12485                           ;inc\CANlib.h: 988: else
 12486                           ;inc\CANlib.h: 989: RXF3SIDLbits.SID2 = 0x00 ;
 12487  0015EC  010F               	movlb	15	; () banked
 12488  0015EE  9F0D               	bcf	13,7,b	;volatile
 12489  0015F0  D000               	goto	l4783
 12490  0015F2                     l4783:
 12491                           
 12492                           ; BSR set to: 15
 12493                           ;inc\CANlib.h: 991: tamp = (filter >> 21);
 12494  0015F2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12495  0015F6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12496  0015FA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12497  0015FE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12498  001602  0E16               	movlw	22
 12499  001604  D006               	goto	u5560
 12500  001606                     u5565:
 12501  001606  0100               	movlb	0	; () banked
 12502  001608  90D8               	bcf	status,0,c
 12503  00160A  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12504  00160C  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12505  00160E  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12506  001610  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12507  001612                     u5560:
 12508  001612  2EE8               	decfsz	wreg,f,c
 12509  001614  D7F8               	goto	u5565
 12510  001616  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12511  00161A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12512  00161E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12513  001622  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12514                           
 12515                           ; BSR set to: 0
 12516                           ;inc\CANlib.h: 992: tamp = tamp & 0x000000FF;
 12517  001626  0100               	movlb	0	; () banked
 12518  001628  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12519  00162A  0100               	movlb	0	; () banked
 12520  00162C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12521  00162E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12522  001630  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12523  001632  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;inc\CANlib.h: 993: RXF3SIDH = (unsigned char) tamp;
 12527  001634  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 12528  001638  D000               	goto	l4789
 12529  00163A                     l4789:
 12530                           
 12531                           ; BSR set to: 0
 12532                           ;inc\CANlib.h: 994: }
 12533                           ;inc\CANlib.h: 996: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_XTD_MSG))
 12534  00163A  0E04               	movlw	4
 12535  00163C  0100               	movlb	0	; () banked
 12536  00163E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12537  001640  A4D8               	btfss	status,2,c
 12538  001642  D08B               	goto	l4823
 12539                           
 12540                           ; BSR set to: 0
 12541  001644  0EF7               	movlw	247
 12542  001646  0100               	movlb	0	; () banked
 12543  001648  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12544  00164A  A4D8               	btfss	status,2,c
 12545  00164C  D086               	goto	l4823
 12546                           
 12547                           ; BSR set to: 0
 12548                           ;inc\CANlib.h: 997: {
 12549                           ;inc\CANlib.h: 998: RXF4SIDLbits.EXIDEN = 0x01;
 12550  00164E  010F               	movlb	15	; () banked
 12551  001650  8711               	bsf	17,3,b	;volatile
 12552                           
 12553                           ; BSR set to: 15
 12554                           ;inc\CANlib.h: 1000: tamp = filter & 0x000000FF;
 12555  001652  0100               	movlb	0	; () banked
 12556  001654  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12557  001656  0100               	movlb	0	; () banked
 12558  001658  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12559  00165A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12560  00165C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12561  00165E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12562                           
 12563                           ; BSR set to: 0
 12564                           ;inc\CANlib.h: 1001: RXF4EIDL = (unsigned char) tamp;
 12565  001660  C081  FF13         	movff	CANSetFilter@tamp,3859	;volatile
 12566                           
 12567                           ; BSR set to: 0
 12568                           ;inc\CANlib.h: 1003: tamp = filter & 0x0000FF00;
 12569  001664  0E00               	movlw	0
 12570  001666  0100               	movlb	0	; () banked
 12571  001668  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12572  00166A  0100               	movlb	0	; () banked
 12573  00166C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12574  00166E  0EFF               	movlw	255
 12575  001670  0100               	movlb	0	; () banked
 12576  001672  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12577  001674  0100               	movlb	0	; () banked
 12578  001676  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12579  001678  0E00               	movlw	0
 12580  00167A  0100               	movlb	0	; () banked
 12581  00167C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12582  00167E  0100               	movlb	0	; () banked
 12583  001680  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12584  001682  0E00               	movlw	0
 12585  001684  0100               	movlb	0	; () banked
 12586  001686  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12587  001688  0100               	movlb	0	; () banked
 12588  00168A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12589                           
 12590                           ; BSR set to: 0
 12591                           ;inc\CANlib.h: 1004: tamp = tamp >> 8;
 12592  00168C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12593  001690  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12594  001694  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12595  001698  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12596  00169C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12597  0016A0  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12598  0016A4  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12599  0016A8  0100               	movlb	0	; () banked
 12600  0016AA  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12601  0016AC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12602  0016B0  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12603  0016B4  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12604  0016B8  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12605                           
 12606                           ; BSR set to: 0
 12607                           ;inc\CANlib.h: 1005: RXF4EIDH = (unsigned char) tamp;
 12608  0016BC  C081  FF12         	movff	CANSetFilter@tamp,3858	;volatile
 12609                           
 12610                           ; BSR set to: 0
 12611                           ;inc\CANlib.h: 1007: if (filter & 0x00010000)
 12612  0016C0  0100               	movlb	0	; () banked
 12613  0016C2  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12614  0016C4  D003               	goto	l507
 12615                           
 12616                           ; BSR set to: 0
 12617                           ;inc\CANlib.h: 1008: RXF4SIDLbits.EID16 = 0x01;
 12618  0016C6  010F               	movlb	15	; () banked
 12619  0016C8  8111               	bsf	17,0,b	;volatile
 12620  0016CA  D002               	goto	l508
 12621  0016CC                     l507:
 12622                           
 12623                           ; BSR set to: 0
 12624                           ;inc\CANlib.h: 1009: else
 12625                           ;inc\CANlib.h: 1010: RXF4SIDLbits.EID16 = 0x00;
 12626  0016CC  010F               	movlb	15	; () banked
 12627  0016CE  9111               	bcf	17,0,b	;volatile
 12628  0016D0                     l508:
 12629                           
 12630                           ; BSR set to: 15
 12631                           ;inc\CANlib.h: 1012: if (filter & 0x00020000)
 12632  0016D0  0100               	movlb	0	; () banked
 12633  0016D2  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12634  0016D4  D003               	goto	l509
 12635                           
 12636                           ; BSR set to: 0
 12637                           ;inc\CANlib.h: 1013: RXF4SIDLbits.EID17 = 0x01;
 12638  0016D6  010F               	movlb	15	; () banked
 12639  0016D8  8311               	bsf	17,1,b	;volatile
 12640  0016DA  D002               	goto	l510
 12641  0016DC                     l509:
 12642                           
 12643                           ; BSR set to: 0
 12644                           ;inc\CANlib.h: 1014: else
 12645                           ;inc\CANlib.h: 1015: RXF4SIDLbits.EID17 = 0x00;
 12646  0016DC  010F               	movlb	15	; () banked
 12647  0016DE  9311               	bcf	17,1,b	;volatile
 12648  0016E0                     l510:
 12649                           
 12650                           ; BSR set to: 15
 12651                           ;inc\CANlib.h: 1017: if (filter & 0x00040000)
 12652  0016E0  0100               	movlb	0	; () banked
 12653  0016E2  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12654  0016E4  D003               	goto	l511
 12655                           
 12656                           ; BSR set to: 0
 12657                           ;inc\CANlib.h: 1018: RXF4SIDLbits.SID0 = 0x01;
 12658  0016E6  010F               	movlb	15	; () banked
 12659  0016E8  8B11               	bsf	17,5,b	;volatile
 12660  0016EA  D002               	goto	l512
 12661  0016EC                     l511:
 12662                           
 12663                           ; BSR set to: 0
 12664                           ;inc\CANlib.h: 1019: else
 12665                           ;inc\CANlib.h: 1020: RXF4SIDLbits.SID0 = 0x00;
 12666  0016EC  010F               	movlb	15	; () banked
 12667  0016EE  9B11               	bcf	17,5,b	;volatile
 12668  0016F0                     l512:
 12669                           
 12670                           ; BSR set to: 15
 12671                           ;inc\CANlib.h: 1022: if (filter & 0x00080000)
 12672  0016F0  0100               	movlb	0	; () banked
 12673  0016F2  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12674  0016F4  D003               	goto	l513
 12675                           
 12676                           ; BSR set to: 0
 12677                           ;inc\CANlib.h: 1023: RXF4SIDLbits.SID1 = 0x01;
 12678  0016F6  010F               	movlb	15	; () banked
 12679  0016F8  8D11               	bsf	17,6,b	;volatile
 12680  0016FA  D002               	goto	l514
 12681  0016FC                     l513:
 12682                           
 12683                           ; BSR set to: 0
 12684                           ;inc\CANlib.h: 1024: else
 12685                           ;inc\CANlib.h: 1025: RXF4SIDLbits.SID1 = 0x00;
 12686  0016FC  010F               	movlb	15	; () banked
 12687  0016FE  9D11               	bcf	17,6,b	;volatile
 12688  001700                     l514:
 12689                           
 12690                           ; BSR set to: 15
 12691                           ;inc\CANlib.h: 1027: if (filter & 0x00100000)
 12692  001700  0100               	movlb	0	; () banked
 12693  001702  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12694  001704  D003               	goto	l515
 12695                           
 12696                           ; BSR set to: 0
 12697                           ;inc\CANlib.h: 1028: RXF4SIDLbits.SID2 = 0x01 ;
 12698  001706  010F               	movlb	15	; () banked
 12699  001708  8F11               	bsf	17,7,b	;volatile
 12700  00170A  D003               	goto	l4817
 12701  00170C                     l515:
 12702                           
 12703                           ; BSR set to: 0
 12704                           ;inc\CANlib.h: 1029: else
 12705                           ;inc\CANlib.h: 1030: RXF4SIDLbits.SID2 = 0x00 ;
 12706  00170C  010F               	movlb	15	; () banked
 12707  00170E  9F11               	bcf	17,7,b	;volatile
 12708  001710  D000               	goto	l4817
 12709  001712                     l4817:
 12710                           
 12711                           ; BSR set to: 15
 12712                           ;inc\CANlib.h: 1032: tamp = (filter >> 21);
 12713  001712  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12714  001716  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12715  00171A  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12716  00171E  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12717  001722  0E16               	movlw	22
 12718  001724  D006               	goto	u5640
 12719  001726                     u5645:
 12720  001726  0100               	movlb	0	; () banked
 12721  001728  90D8               	bcf	status,0,c
 12722  00172A  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12723  00172C  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12724  00172E  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12725  001730  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12726  001732                     u5640:
 12727  001732  2EE8               	decfsz	wreg,f,c
 12728  001734  D7F8               	goto	u5645
 12729  001736  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12730  00173A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12731  00173E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12732  001742  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12733                           
 12734                           ; BSR set to: 0
 12735                           ;inc\CANlib.h: 1033: tamp = tamp & 0x000000FF;
 12736  001746  0100               	movlb	0	; () banked
 12737  001748  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12738  00174A  0100               	movlb	0	; () banked
 12739  00174C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12740  00174E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12741  001750  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12742  001752  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12743                           
 12744                           ; BSR set to: 0
 12745                           ;inc\CANlib.h: 1034: RXF4SIDH = (unsigned char) tamp;
 12746  001754  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 12747  001758  D000               	goto	l4823
 12748  00175A                     l4823:
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;inc\CANlib.h: 1035: }
 12752                           ;inc\CANlib.h: 1037: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_XTD_MSG))
 12753  00175A  0E05               	movlw	5
 12754  00175C  0100               	movlb	0	; () banked
 12755  00175E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12756  001760  A4D8               	btfss	status,2,c
 12757  001762  0012               	return	
 12758                           
 12759                           ; BSR set to: 0
 12760  001764  0EF7               	movlw	247
 12761  001766  0100               	movlb	0	; () banked
 12762  001768  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12763  00176A  A4D8               	btfss	status,2,c
 12764  00176C  0012               	return	
 12765                           
 12766                           ; BSR set to: 0
 12767                           ;inc\CANlib.h: 1038: {
 12768                           ;inc\CANlib.h: 1039: RXF5SIDLbits.EXIDEN = 0x01;
 12769  00176E  010F               	movlb	15	; () banked
 12770  001770  8715               	bsf	21,3,b	;volatile
 12771                           
 12772                           ; BSR set to: 15
 12773                           ;inc\CANlib.h: 1041: tamp = filter & 0x000000FF;
 12774  001772  0100               	movlb	0	; () banked
 12775  001774  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12776  001776  0100               	movlb	0	; () banked
 12777  001778  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12778  00177A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12779  00177C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12780  00177E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12781                           
 12782                           ; BSR set to: 0
 12783                           ;inc\CANlib.h: 1042: RXF5EIDL = (unsigned char) tamp;
 12784  001780  C081  FF17         	movff	CANSetFilter@tamp,3863	;volatile
 12785                           
 12786                           ; BSR set to: 0
 12787                           ;inc\CANlib.h: 1044: tamp = filter & 0x0000FF00;
 12788  001784  0E00               	movlw	0
 12789  001786  0100               	movlb	0	; () banked
 12790  001788  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12791  00178A  0100               	movlb	0	; () banked
 12792  00178C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12793  00178E  0EFF               	movlw	255
 12794  001790  0100               	movlb	0	; () banked
 12795  001792  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12796  001794  0100               	movlb	0	; () banked
 12797  001796  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12798  001798  0E00               	movlw	0
 12799  00179A  0100               	movlb	0	; () banked
 12800  00179C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12801  00179E  0100               	movlb	0	; () banked
 12802  0017A0  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12803  0017A2  0E00               	movlw	0
 12804  0017A4  0100               	movlb	0	; () banked
 12805  0017A6  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12806  0017A8  0100               	movlb	0	; () banked
 12807  0017AA  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12808                           
 12809                           ; BSR set to: 0
 12810                           ;inc\CANlib.h: 1045: tamp = tamp >> 8;
 12811  0017AC  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12812  0017B0  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12813  0017B4  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12814  0017B8  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12815  0017BC  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12816  0017C0  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12817  0017C4  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12818  0017C8  0100               	movlb	0	; () banked
 12819  0017CA  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12820  0017CC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12821  0017D0  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12822  0017D4  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12823  0017D8  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12824                           
 12825                           ; BSR set to: 0
 12826                           ;inc\CANlib.h: 1046: RXF5EIDH = (unsigned char) tamp;
 12827  0017DC  C081  FF16         	movff	CANSetFilter@tamp,3862	;volatile
 12828                           
 12829                           ; BSR set to: 0
 12830                           ;inc\CANlib.h: 1048: if (filter & 0x00010000)
 12831  0017E0  0100               	movlb	0	; () banked
 12832  0017E2  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12833  0017E4  D003               	goto	l518
 12834                           
 12835                           ; BSR set to: 0
 12836                           ;inc\CANlib.h: 1049: RXF5SIDLbits.EID16 = 0x01;
 12837  0017E6  010F               	movlb	15	; () banked
 12838  0017E8  8115               	bsf	21,0,b	;volatile
 12839  0017EA  D002               	goto	l519
 12840  0017EC                     l518:
 12841                           
 12842                           ; BSR set to: 0
 12843                           ;inc\CANlib.h: 1050: else
 12844                           ;inc\CANlib.h: 1051: RXF5SIDLbits.EID16 = 0x00;
 12845  0017EC  010F               	movlb	15	; () banked
 12846  0017EE  9115               	bcf	21,0,b	;volatile
 12847  0017F0                     l519:
 12848                           
 12849                           ; BSR set to: 15
 12850                           ;inc\CANlib.h: 1053: if (filter & 0x00020000)
 12851  0017F0  0100               	movlb	0	; () banked
 12852  0017F2  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12853  0017F4  D003               	goto	l520
 12854                           
 12855                           ; BSR set to: 0
 12856                           ;inc\CANlib.h: 1054: RXF5SIDLbits.EID17 = 0x01;
 12857  0017F6  010F               	movlb	15	; () banked
 12858  0017F8  8315               	bsf	21,1,b	;volatile
 12859  0017FA  D002               	goto	l521
 12860  0017FC                     l520:
 12861                           
 12862                           ; BSR set to: 0
 12863                           ;inc\CANlib.h: 1055: else
 12864                           ;inc\CANlib.h: 1056: RXF5SIDLbits.EID17 = 0x00;
 12865  0017FC  010F               	movlb	15	; () banked
 12866  0017FE  9315               	bcf	21,1,b	;volatile
 12867  001800                     l521:
 12868                           
 12869                           ; BSR set to: 15
 12870                           ;inc\CANlib.h: 1058: if (filter & 0x00040000)
 12871  001800  0100               	movlb	0	; () banked
 12872  001802  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12873  001804  D003               	goto	l522
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;inc\CANlib.h: 1059: RXF5SIDLbits.SID0 = 0x01;
 12877  001806  010F               	movlb	15	; () banked
 12878  001808  8B15               	bsf	21,5,b	;volatile
 12879  00180A  D002               	goto	l523
 12880  00180C                     l522:
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;inc\CANlib.h: 1060: else
 12884                           ;inc\CANlib.h: 1061: RXF5SIDLbits.SID0 = 0x00;
 12885  00180C  010F               	movlb	15	; () banked
 12886  00180E  9B15               	bcf	21,5,b	;volatile
 12887  001810                     l523:
 12888                           
 12889                           ; BSR set to: 15
 12890                           ;inc\CANlib.h: 1063: if (filter & 0x00080000)
 12891  001810  0100               	movlb	0	; () banked
 12892  001812  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12893  001814  D003               	goto	l524
 12894                           
 12895                           ; BSR set to: 0
 12896                           ;inc\CANlib.h: 1064: RXF5SIDLbits.SID1 = 0x01;
 12897  001816  010F               	movlb	15	; () banked
 12898  001818  8D15               	bsf	21,6,b	;volatile
 12899  00181A  D002               	goto	l525
 12900  00181C                     l524:
 12901                           
 12902                           ; BSR set to: 0
 12903                           ;inc\CANlib.h: 1065: else
 12904                           ;inc\CANlib.h: 1066: RXF5SIDLbits.SID1 = 0x00;
 12905  00181C  010F               	movlb	15	; () banked
 12906  00181E  9D15               	bcf	21,6,b	;volatile
 12907  001820                     l525:
 12908                           
 12909                           ; BSR set to: 15
 12910                           ;inc\CANlib.h: 1068: if (filter & 0x00100000)
 12911  001820  0100               	movlb	0	; () banked
 12912  001822  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12913  001824  D003               	goto	l526
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;inc\CANlib.h: 1069: RXF5SIDLbits.SID2 = 0x01 ;
 12917  001826  010F               	movlb	15	; () banked
 12918  001828  8F15               	bsf	21,7,b	;volatile
 12919  00182A  D003               	goto	l4851
 12920  00182C                     l526:
 12921                           
 12922                           ; BSR set to: 0
 12923                           ;inc\CANlib.h: 1070: else
 12924                           ;inc\CANlib.h: 1071: RXF5SIDLbits.SID2 = 0x00 ;
 12925  00182C  010F               	movlb	15	; () banked
 12926  00182E  9F15               	bcf	21,7,b	;volatile
 12927  001830  D000               	goto	l4851
 12928  001832                     l4851:
 12929                           
 12930                           ; BSR set to: 15
 12931                           ;inc\CANlib.h: 1073: tamp = (filter >> 21);
 12932  001832  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12933  001836  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12934  00183A  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12935  00183E  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12936  001842  0E16               	movlw	22
 12937  001844  D006               	goto	u5720
 12938  001846                     u5725:
 12939  001846  0100               	movlb	0	; () banked
 12940  001848  90D8               	bcf	status,0,c
 12941  00184A  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12942  00184C  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12943  00184E  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12944  001850  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12945  001852                     u5720:
 12946  001852  2EE8               	decfsz	wreg,f,c
 12947  001854  D7F8               	goto	u5725
 12948  001856  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12949  00185A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12950  00185E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12951  001862  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;inc\CANlib.h: 1074: tamp = tamp & 0x000000FF;
 12955  001866  0100               	movlb	0	; () banked
 12956  001868  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12957  00186A  0100               	movlb	0	; () banked
 12958  00186C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12959  00186E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12960  001870  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12961  001872  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12962                           
 12963                           ; BSR set to: 0
 12964                           ;inc\CANlib.h: 1075: RXF5SIDH = (unsigned char) tamp;
 12965  001874  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 12966  001878  0012               	return	
 12967                           
 12968                           ; BSR set to: 0
 12969                           
 12970                           ; BSR set to: 0
 12971  00187A  0012               	return		;funcret
 12972  00187C                     __end_of_CANSetFilter:
 12973                           	opt stack 0
 12974                           tblptru	equ	0xFF8
 12975                           tblptrh	equ	0xFF7
 12976                           tblptrl	equ	0xFF6
 12977                           tablat	equ	0xFF5
 12978                           prodh	equ	0xFF4
 12979                           prodl	equ	0xFF3
 12980                           intcon	equ	0xFF2
 12981                           intcon2	equ	0xFF1
 12982                           postinc0	equ	0xFEE
 12983                           wreg	equ	0xFE8
 12984                           postdec1	equ	0xFE5
 12985                           fsr1l	equ	0xFE1
 12986                           indf2	equ	0xFDF
 12987                           postinc2	equ	0xFDE
 12988                           postdec2	equ	0xFDD
 12989                           fsr2h	equ	0xFDA
 12990                           fsr2l	equ	0xFD9
 12991                           status	equ	0xFD8
 12992                           
 12993 ;; *************** function _CANOperationMode *****************
 12994 ;; Defined at:
 12995 ;;		line 206 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 12996 ;; Parameters:    Size  Location     Type
 12997 ;;  mode            1    wreg     enum E16348
 12998 ;; Auto vars:     Size  Location     Type
 12999 ;;  mode            1   23[BANK0 ] enum E16348
 13000 ;; Return value:  Size  Location     Type
 13001 ;;		None               void
 13002 ;; Registers used:
 13003 ;;		wreg, status,2, status,0
 13004 ;; Tracked objects:
 13005 ;;		On entry : 0/0
 13006 ;;		On exit  : 0/0
 13007 ;;		Unchanged: 0/0
 13008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13012 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;Total ram usage:        1 bytes
 13014 ;; Hardware stack levels used:    1
 13015 ;; Hardware stack levels required when called:    5
 13016 ;; This function calls:
 13017 ;;		Nothing
 13018 ;; This function is called by:
 13019 ;;		_CANInitialize
 13020 ;; This function uses a non-reentrant model
 13021 ;;
 13022                           
 13023                           	psect	text36
 13024  005DF6                     __ptext36:
 13025                           	opt stack 0
 13026  005DF6                     _CANOperationMode:
 13027                           	opt stack 23
 13028                           
 13029                           ; BSR set to: 0
 13030                           ;incstack = 0
 13031                           ;CANOperationMode@mode stored from wreg
 13032  005DF6  0100               	movlb	0	; () banked
 13033  005DF8  6F77               	movwf	CANOperationMode@mode& (0+255),b
 13034                           
 13035                           ; BSR set to: 0
 13036                           ;inc\CANlib.h: 208: CANCON = mode;
 13037  005DFA  C077  FF6F         	movff	CANOperationMode@mode,3951	;volatile
 13038                           
 13039                           ; BSR set to: 0
 13040                           
 13041                           ;inc\CANlib.h: 210: while((CANSTAT & 0b11100000) != mode );
 13042  005DFE  D000               	goto	l6399
 13043  005E00                     l6399:
 13044                           
 13045                           ; BSR set to: 0
 13046  005E00  506E               	movf	3950,w,c	;volatile
 13047  005E02  0BE0               	andlw	224
 13048  005E04  0100               	movlb	0	; () banked
 13049  005E06  1977               	xorwf	CANOperationMode@mode& (0+255),w,b
 13050  005E08  A4D8               	btfss	status,2,c
 13051  005E0A  D7FA               	goto	l6399
 13052                           
 13053                           ; BSR set to: 0
 13054                           
 13055                           ; BSR set to: 0
 13056  005E0C  0012               	return		;funcret
 13057  005E0E                     __end_of_CANOperationMode:
 13058                           	opt stack 0
 13059                           tblptru	equ	0xFF8
 13060                           tblptrh	equ	0xFF7
 13061                           tblptrl	equ	0xFF6
 13062                           tablat	equ	0xFF5
 13063                           prodh	equ	0xFF4
 13064                           prodl	equ	0xFF3
 13065                           intcon	equ	0xFF2
 13066                           intcon2	equ	0xFF1
 13067                           postinc0	equ	0xFEE
 13068                           wreg	equ	0xFE8
 13069                           postdec1	equ	0xFE5
 13070                           fsr1l	equ	0xFE1
 13071                           indf2	equ	0xFDF
 13072                           postinc2	equ	0xFDE
 13073                           postdec2	equ	0xFDD
 13074                           fsr2h	equ	0xFDA
 13075                           fsr2l	equ	0xFD9
 13076                           status	equ	0xFD8
 13077                           
 13078 ;; *************** function _can_interpreter *****************
 13079 ;; Defined at:
 13080 ;;		line 478 in file "parcheggio.c"
 13081 ;; Parameters:    Size  Location     Type
 13082 ;;		None
 13083 ;; Auto vars:     Size  Location     Type
 13084 ;;		None
 13085 ;; Return value:  Size  Location     Type
 13086 ;;		None               void
 13087 ;; Registers used:
 13088 ;;		wreg, status,2, status,0
 13089 ;; Tracked objects:
 13090 ;;		On entry : 0/0
 13091 ;;		On exit  : 0/0
 13092 ;;		Unchanged: 0/0
 13093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13096 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13097 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13098 ;;Total ram usage:        4 bytes
 13099 ;; Hardware stack levels used:    1
 13100 ;; Hardware stack levels required when called:    5
 13101 ;; This function calls:
 13102 ;;		Nothing
 13103 ;; This function is called by:
 13104 ;;		_main
 13105 ;; This function uses a non-reentrant model
 13106 ;;
 13107                           
 13108                           	psect	text37
 13109  005B5A                     __ptext37:
 13110                           	opt stack 0
 13111  005B5A                     _can_interpreter:
 13112                           	opt stack 25
 13113                           
 13114                           ;parcheggio.c: 479: left_speed = data_speed_rx[1];
 13115                           
 13116                           ; BSR set to: 0
 13117                           ;incstack = 0
 13118  005B5A  C109  F01D         	movff	_data_speed_rx+1,_left_speed
 13119  005B5E  6A1E               	clrf	_left_speed+1,c
 13120                           
 13121                           ;parcheggio.c: 480: left_speed = ((left_speed << 8) | (data_speed_rx[0]));
 13122  005B60  501D               	movf	_left_speed,w,c
 13123  005B62  0100               	movlb	0	; () banked
 13124  005B64  6F77               	movwf	??_can_interpreter& (0+255),b
 13125  005B66  0101               	movlb	1	; () banked
 13126  005B68  5108               	movf	_data_speed_rx& (0+255),w,b
 13127  005B6A  6E1D               	movwf	_left_speed,c
 13128  005B6C  C077  F01E         	movff	??_can_interpreter,_left_speed+1
 13129                           
 13130                           ; BSR set to: 1
 13131                           ;parcheggio.c: 481: right_speed = data_speed_rx[3];
 13132  005B70  C10B  F021         	movff	_data_speed_rx+3,_right_speed
 13133  005B74  6A22               	clrf	_right_speed+1,c
 13134                           
 13135                           ;parcheggio.c: 482: right_speed = ((right_speed << 8) | (data_speed_rx[2]));
 13136  005B76  5021               	movf	_right_speed,w,c
 13137  005B78  0100               	movlb	0	; () banked
 13138  005B7A  6F77               	movwf	??_can_interpreter& (0+255),b
 13139  005B7C  0101               	movlb	1	; () banked
 13140  005B7E  510A               	movf	(_data_speed_rx+2)& (0+255),w,b
 13141  005B80  6E21               	movwf	_right_speed,c
 13142  005B82  C077  F022         	movff	??_can_interpreter,_right_speed+1
 13143                           
 13144                           ; BSR set to: 1
 13145                           ;parcheggio.c: 483: actual_speed = (right_speed + left_speed) / 2;
 13146  005B86  501D               	movf	_left_speed,w,c
 13147  005B88  2421               	addwf	_right_speed,w,c
 13148  005B8A  0100               	movlb	0	; () banked
 13149  005B8C  6F77               	movwf	??_can_interpreter& (0+255),b
 13150  005B8E  501E               	movf	_left_speed+1,w,c
 13151  005B90  2022               	addwfc	_right_speed+1,w,c
 13152  005B92  0100               	movlb	0	; () banked
 13153  005B94  6F78               	movwf	(??_can_interpreter+1)& (0+255),b
 13154  005B96  90D8               	bcf	status,0,c
 13155  005B98  0100               	movlb	0	; () banked
 13156  005B9A  3178               	rrcf	(??_can_interpreter+1)& (0+255),w,b
 13157  005B9C  0100               	movlb	0	; () banked
 13158  005B9E  6F79               	movwf	(??_can_interpreter+2)& (0+255),b
 13159  005BA0  0100               	movlb	0	; () banked
 13160  005BA2  3177               	rrcf	??_can_interpreter& (0+255),w,b
 13161  005BA4  6E15               	movwf	_actual_speed,c
 13162  005BA6  C079  F016         	movff	??_can_interpreter+2,_actual_speed+1
 13163                           
 13164                           ; BSR set to: 0
 13165  005BAA  0012               	return		;funcret
 13166  005BAC                     __end_of_can_interpreter:
 13167                           	opt stack 0
 13168                           tblptru	equ	0xFF8
 13169                           tblptrh	equ	0xFF7
 13170                           tblptrl	equ	0xFF6
 13171                           tablat	equ	0xFF5
 13172                           prodh	equ	0xFF4
 13173                           prodl	equ	0xFF3
 13174                           intcon	equ	0xFF2
 13175                           intcon2	equ	0xFF1
 13176                           postinc0	equ	0xFEE
 13177                           wreg	equ	0xFE8
 13178                           postdec1	equ	0xFE5
 13179                           fsr1l	equ	0xFE1
 13180                           indf2	equ	0xFDF
 13181                           postinc2	equ	0xFDE
 13182                           postdec2	equ	0xFDD
 13183                           fsr2h	equ	0xFDA
 13184                           fsr2l	equ	0xFD9
 13185                           status	equ	0xFD8
 13186                           
 13187 ;; *************** function _ISR_Bassa *****************
 13188 ;; Defined at:
 13189 ;;		line 123 in file "parcheggio.c"
 13190 ;; Parameters:    Size  Location     Type
 13191 ;;		None
 13192 ;; Auto vars:     Size  Location     Type
 13193 ;;  i               1   38[COMRAM] unsigned char 
 13194 ;;  PORTA_temp      1   37[COMRAM] unsigned char 
 13195 ;; Return value:  Size  Location     Type
 13196 ;;		None               void
 13197 ;; Registers used:
 13198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13199 ;; Tracked objects:
 13200 ;;		On entry : 0/0
 13201 ;;		On exit  : 0/0
 13202 ;;		Unchanged: 0/0
 13203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13205 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13206 ;;      Temps:         21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13207 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13208 ;;Total ram usage:       23 bytes
 13209 ;; Hardware stack levels used:    1
 13210 ;; Hardware stack levels required when called:    4
 13211 ;; This function calls:
 13212 ;;		_CANreceiveMessage
 13213 ;;		i1_CANsendMessage
 13214 ;;		i1_delay_ms
 13215 ;; This function is called by:
 13216 ;;		Interrupt level 1
 13217 ;; This function uses a non-reentrant model
 13218 ;;
 13219                           
 13220                           	psect	intcodelo
 13221  000018                     __pintcodelo:
 13222                           	opt stack 0
 13223  000018                     _ISR_Bassa:
 13224                           	opt stack 19
 13225                           
 13226                           ; BSR set to: 0
 13227                           ;incstack = 0
 13228  000018  CFD8 F03E          	movff	status,??_ISR_Bassa+4
 13229  00001C  CFE8 F03F          	movff	wreg,??_ISR_Bassa+5
 13230  000020  CFE0 F040          	movff	bsr,??_ISR_Bassa+6
 13231  000024  CFFA F041          	movff	pclath,??_ISR_Bassa+7
 13232  000028  CFFB F042          	movff	pclatu,??_ISR_Bassa+8
 13233  00002C  CFE9 F043          	movff	fsr0l,??_ISR_Bassa+9
 13234  000030  CFEA F044          	movff	fsr0h,??_ISR_Bassa+10
 13235  000034  CFE1 F045          	movff	fsr1l,??_ISR_Bassa+11
 13236  000038  CFE2 F046          	movff	fsr1h,??_ISR_Bassa+12
 13237  00003C  CFD9 F047          	movff	fsr2l,??_ISR_Bassa+13
 13238  000040  CFDA F048          	movff	fsr2h,??_ISR_Bassa+14
 13239  000044  CFF3 F049          	movff	prodl,??_ISR_Bassa+15
 13240  000048  CFF4 F04A          	movff	prodh,??_ISR_Bassa+16
 13241  00004C  CFF6 F04B          	movff	tblptrl,??_ISR_Bassa+17
 13242  000050  CFF7 F04C          	movff	tblptrh,??_ISR_Bassa+18
 13243  000054  CFF8 F04D          	movff	tblptru,??_ISR_Bassa+19
 13244  000058  CFF5 F04E          	movff	tablat,??_ISR_Bassa+20
 13245                           
 13246                           ;parcheggio.c: 126: if (INTCONbits.TMR0IF == 1) {
 13247  00005C  A4F2               	btfss	intcon,2,c	;volatile
 13248  00005E  D0AD               	goto	i1l5851
 13249                           
 13250                           ;parcheggio.c: 127: INTCONbits.INT0IE = 0;
 13251  000060  98F2               	bcf	intcon,4,c	;volatile
 13252                           
 13253                           ;parcheggio.c: 128: T0CONbits.TMR0ON = 0;
 13254  000062  9ED5               	bcf	4053,7,c	;volatile
 13255                           
 13256                           ;parcheggio.c: 129: TMR0H = 0x34;
 13257  000064  0E34               	movlw	52
 13258  000066  6ED7               	movwf	4055,c	;volatile
 13259                           
 13260                           ;parcheggio.c: 130: TMR0L = 0xE0;
 13261  000068  0EE0               	movlw	224
 13262  00006A  6ED6               	movwf	4054,c	;volatile
 13263                           
 13264                           ;parcheggio.c: 131: T0CONbits.TMR0ON = 1;
 13265  00006C  8ED5               	bsf	4053,7,c	;volatile
 13266                           
 13267                           ;parcheggio.c: 133: if (distance_error == 1) {
 13268  00006E  A851               	btfss	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13269  000070  D00C               	goto	i1l706
 13270                           
 13271                           ;parcheggio.c: 134: sensor_distance[MUX_index] = 5000;
 13272  000072  5025               	movf	_MUX_index,w,c	;volatile
 13273  000074  0D02               	mullw	2
 13274  000076  0E01               	movlw	low _sensor_distance
 13275  000078  24F3               	addwf	prodl,w,c
 13276  00007A  6ED9               	movwf	fsr2l,c
 13277  00007C  0E00               	movlw	high _sensor_distance
 13278  00007E  20F4               	addwfc	prodh,w,c
 13279  000080  6EDA               	movwf	fsr2h,c
 13280  000082  0E88               	movlw	136
 13281  000084  6EDE               	movwf	postinc2,c
 13282  000086  0E13               	movlw	19
 13283  000088  6EDD               	movwf	postdec2,c
 13284  00008A                     i1l706:
 13285                           
 13286                           ;parcheggio.c: 135: }
 13287                           ;parcheggio.c: 137: if ((sensor_distance[MUX_index] < 15)&&(start_operation == 0)) {
 13288  00008A  5025               	movf	_MUX_index,w,c	;volatile
 13289  00008C  0D02               	mullw	2
 13290  00008E  0E01               	movlw	low _sensor_distance
 13291  000090  24F3               	addwf	prodl,w,c
 13292  000092  6ED9               	movwf	fsr2l,c
 13293  000094  0E00               	movlw	high _sensor_distance
 13294  000096  20F4               	addwfc	prodh,w,c
 13295  000098  6EDA               	movwf	fsr2h,c
 13296  00009A  0E01               	movlw	1
 13297  00009C  50DB               	movf	plusw2,w,c
 13298  00009E  E114               	bnz	i1l5793
 13299  0000A0  0E0F               	movlw	15
 13300  0000A2  5CDE               	subwf	postinc2,w,c
 13301  0000A4  B0D8               	btfsc	status,0,c
 13302  0000A6  D010               	goto	i1l5793
 13303  0000A8  BA52               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13304  0000AA  D00E               	goto	i1l5793
 13305                           
 13306                           ;parcheggio.c: 138: sensor_distance_short[0] = (sensor_distance_short[0] | (0b00000001 <
      +                          < MUX_index));
 13307  0000AC  C025  F03A         	movff	_MUX_index,??_ISR_Bassa	;volatile
 13308  0000B0  0E01               	movlw	1
 13309  0000B2  6E3B               	movwf	(??_ISR_Bassa+1)& (0+255),c
 13310  0000B4  2A3A               	incf	??_ISR_Bassa,f,c
 13311  0000B6  D002               	goto	i1u702_24
 13312  0000B8                     i1u702_25:
 13313  0000B8  90D8               	bcf	status,0,c
 13314  0000BA  363B               	rlcf	??_ISR_Bassa+1,f,c
 13315  0000BC                     i1u702_24:
 13316  0000BC  2E3A               	decfsz	??_ISR_Bassa,f,c
 13317  0000BE  D7FC               	goto	i1u702_25
 13318  0000C0  503B               	movf	??_ISR_Bassa+1,w,c
 13319  0000C2  0101               	movlb	1	; () banked
 13320  0000C4  1183               	iorwf	_sensor_distance_short& (0+255),w,b	;volatile
 13321  0000C6  D054               	goto	L2
 13322  0000C8                     i1l5793:
 13323  0000C8  5025               	movf	_MUX_index,w,c	;volatile
 13324  0000CA  0D02               	mullw	2
 13325  0000CC  0E01               	movlw	low _sensor_distance
 13326  0000CE  24F3               	addwf	prodl,w,c
 13327  0000D0  6ED9               	movwf	fsr2l,c
 13328  0000D2  0E00               	movlw	high _sensor_distance
 13329  0000D4  20F4               	addwfc	prodh,w,c
 13330  0000D6  6EDA               	movwf	fsr2h,c
 13331  0000D8  0E01               	movlw	1
 13332  0000DA  50DB               	movf	plusw2,w,c
 13333  0000DC  E13B               	bnz	i1l5819
 13334  0000DE  0E04               	movlw	4
 13335  0000E0  5CDE               	subwf	postinc2,w,c
 13336  0000E2  B0D8               	btfsc	status,0,c
 13337  0000E4  D037               	goto	i1l5819
 13338  0000E6  BA52               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13339  0000E8  B451               	btfsc	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
 13340  0000EA  D034               	goto	i1l5819
 13341                           
 13342                           ;parcheggio.c: 140: if ((MUX_index == 0) || (MUX_index == 1) || (MUX_index == 5) || (MUX
      +                          _index == 6) || (MUX_index == 7)) {
 13343  0000EC  5025               	movf	_MUX_index,w,c	;volatile
 13344  0000EE  B4D8               	btfsc	status,2,c
 13345  0000F0  D00F               	goto	i1l5809
 13346  0000F2  0425               	decf	_MUX_index,w,c	;volatile
 13347  0000F4  B4D8               	btfsc	status,2,c
 13348  0000F6  D00C               	goto	i1l5809
 13349  0000F8  0E05               	movlw	5
 13350  0000FA  1825               	xorwf	_MUX_index,w,c	;volatile
 13351  0000FC  B4D8               	btfsc	status,2,c
 13352  0000FE  D008               	goto	i1l5809
 13353  000100  0E06               	movlw	6
 13354  000102  1825               	xorwf	_MUX_index,w,c	;volatile
 13355  000104  B4D8               	btfsc	status,2,c
 13356  000106  D004               	goto	i1l5809
 13357  000108  0E07               	movlw	7
 13358  00010A  1825               	xorwf	_MUX_index,w,c	;volatile
 13359  00010C  A4D8               	btfss	status,2,c
 13360  00010E  D002               	goto	i1l5811
 13361  000110                     i1l5809:
 13362                           
 13363                           ;parcheggio.c: 141: counter++;
 13364  000110  2A28               	incf	_counter,f,c	;volatile
 13365  000112  D000               	goto	i1l5811
 13366  000114                     i1l5811:
 13367                           
 13368                           ;parcheggio.c: 142: }
 13369                           ;parcheggio.c: 143: if (counter > 0) {
 13370  000114  5028               	movf	_counter,w,c	;volatile
 13371  000116  B4D8               	btfsc	status,2,c
 13372  000118  D02E               	goto	i1l5821
 13373                           
 13374                           ;parcheggio.c: 144: data[0] = 4;
 13375  00011A  0E04               	movlw	4
 13376  00011C  0101               	movlb	1	; () banked
 13377  00011E  6F53               	movwf	_data& (0+255),b	;volatile
 13378                           
 13379                           ; BSR set to: 1
 13380                           ;parcheggio.c: 145: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
 13381  000120  0E0D               	movlw	13
 13382  000122  6E2A               	movwf	i1CANsendMessage@identifier,c
 13383  000124  0E00               	movlw	0
 13384  000126  6E2B               	movwf	i1CANsendMessage@identifier+1,c
 13385  000128  0E00               	movlw	0
 13386  00012A  6E2C               	movwf	i1CANsendMessage@identifier+2,c
 13387  00012C  0E00               	movlw	0
 13388  00012E  6E2D               	movwf	i1CANsendMessage@identifier+3,c
 13389  000130  0E53               	movlw	low _data
 13390  000132  6E2E               	movwf	i1CANsendMessage@data,c
 13391  000134  0E01               	movlw	high _data
 13392  000136  6E2F               	movwf	i1CANsendMessage@data+1,c
 13393  000138  0E08               	movlw	8
 13394  00013A  6E30               	movwf	i1CANsendMessage@dataLength,c
 13395  00013C  0EBC               	movlw	188
 13396  00013E  6E31               	movwf	i1CANsendMessage@flags,c
 13397  000140  EC0E  F010         	call	i1_CANsendMessage	;wreg free
 13398                           
 13399                           ;parcheggio.c: 146: delay_ms(100);
 13400  000144  0E00               	movlw	0
 13401  000146  6E31               	movwf	i1delay_ms@value_ms+1,c
 13402  000148  0E64               	movlw	100
 13403  00014A  6E30               	movwf	i1delay_ms@value_ms,c
 13404  00014C  EC72  F02E         	call	i1_delay_ms	;wreg free
 13405  000150  00FF               	reset		;# 
 13406                           
 13407                           ;parcheggio.c: 148: }
 13408                           ;parcheggio.c: 149: } else {
 13409  000152  D011               	goto	i1l5821
 13410  000154                     i1l5819:
 13411                           
 13412                           ;parcheggio.c: 150: sensor_distance_short[0] = (sensor_distance_short[0] & (~(0b00000001
      +                           << MUX_index)));
 13413  000154  C025  F03A         	movff	_MUX_index,??_ISR_Bassa	;volatile
 13414  000158  0E01               	movlw	1
 13415  00015A  6E3B               	movwf	(??_ISR_Bassa+1)& (0+255),c
 13416  00015C  2A3A               	incf	??_ISR_Bassa,f,c
 13417  00015E  D002               	goto	i1u712_24
 13418  000160                     i1u712_25:
 13419  000160  90D8               	bcf	status,0,c
 13420  000162  363B               	rlcf	??_ISR_Bassa+1,f,c
 13421  000164                     i1u712_24:
 13422  000164  2E3A               	decfsz	??_ISR_Bassa,f,c
 13423  000166  D7FC               	goto	i1u712_25
 13424  000168  503B               	movf	??_ISR_Bassa+1,w,c
 13425  00016A  0AFF               	xorlw	255
 13426  00016C  0101               	movlb	1	; () banked
 13427  00016E  1583               	andwf	_sensor_distance_short& (0+255),w,b	;volatile
 13428  000170                     L2:
 13429  000170  0101               	movlb	1	; () banked
 13430  000172  6F83               	movwf	_sensor_distance_short& (0+255),b	;volatile
 13431                           
 13432                           ; BSR set to: 1
 13433  000174  D000               	goto	i1l5821
 13434  000176                     i1l5821:
 13435                           
 13436                           ;parcheggio.c: 151: }
 13437                           ;parcheggio.c: 153: MUX_index++;
 13438  000176  2A25               	incf	_MUX_index,f,c	;volatile
 13439                           
 13440                           ;parcheggio.c: 154: if (MUX_index == 8) {
 13441  000178  0E08               	movlw	8
 13442  00017A  1825               	xorwf	_MUX_index,w,c	;volatile
 13443  00017C  A4D8               	btfss	status,2,c
 13444  00017E  D002               	goto	i1l715
 13445                           
 13446                           ;parcheggio.c: 155: MUX_index = 0;
 13447  000180  0E00               	movlw	0
 13448  000182  6E25               	movwf	_MUX_index,c	;volatile
 13449  000184                     i1l715:
 13450                           
 13451                           ;parcheggio.c: 156: }
 13452                           ;parcheggio.c: 158: unsigned char PORTA_temp = 0;
 13453  000184  0E00               	movlw	0
 13454  000186  6E4F               	movwf	ISR_Bassa@PORTA_temp,c
 13455                           
 13456                           ;parcheggio.c: 159: PORTA_temp = MUX_select[MUX_index];
 13457  000188  5025               	movf	_MUX_index,w,c	;volatile
 13458  00018A  0D01               	mullw	1
 13459  00018C  0E00               	movlw	low _MUX_select
 13460  00018E  24F3               	addwf	prodl,w,c
 13461  000190  6ED9               	movwf	fsr2l,c
 13462  000192  0E01               	movlw	high _MUX_select
 13463  000194  20F4               	addwfc	prodh,w,c
 13464  000196  6EDA               	movwf	fsr2h,c
 13465  000198  50DF               	movf	indf2,w,c
 13466  00019A  6E4F               	movwf	ISR_Bassa@PORTA_temp,c
 13467                           
 13468                           ;parcheggio.c: 160: PORTA = PORTA_temp;
 13469  00019C  C04F  FF80         	movff	ISR_Bassa@PORTA_temp,3968	;volatile
 13470                           
 13471                           ;parcheggio.c: 162: TRISBbits.RB0 = 0;
 13472  0001A0  9093               	bcf	3987,0,c	;volatile
 13473                           
 13474                           ;parcheggio.c: 163: LATBbits.LATB0 = 1;
 13475  0001A2  808A               	bsf	3978,0,c	;volatile
 13476                           
 13477                           ;parcheggio.c: 164: _delay((unsigned long)((15)*(16000000/4000000.0)));
 13478  0001A4  0E14               	movlw	20
 13479  0001A6                     i1u864_27:
 13480  0001A6  2EE8               	decfsz	wreg,f,c
 13481  0001A8  D7FE               	goto	i1u864_27
 13482                           
 13483                           ;parcheggio.c: 165: distance_error = 1;
 13484  0001AA  8851               	bsf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13485                           
 13486                           ;parcheggio.c: 166: LATBbits.LATB0 = 0;
 13487  0001AC  908A               	bcf	3978,0,c	;volatile
 13488                           
 13489                           ;parcheggio.c: 167: TRISBbits.RB0 = 1;
 13490  0001AE  8093               	bsf	3987,0,c	;volatile
 13491                           
 13492                           ;parcheggio.c: 168: INTCONbits.INT0IF = 0;
 13493  0001B0  92F2               	bcf	intcon,1,c	;volatile
 13494                           
 13495                           ;parcheggio.c: 169: INTCON2bits.INTEDG0 = 1;
 13496  0001B2  8CF1               	bsf	intcon2,6,c	;volatile
 13497                           
 13498                           ;parcheggio.c: 170: INTCONbits.INT0IE = 1;
 13499  0001B4  88F2               	bsf	intcon,4,c	;volatile
 13500                           
 13501                           ;parcheggio.c: 171: INTCONbits.TMR0IF = 0;
 13502  0001B6  94F2               	bcf	intcon,2,c	;volatile
 13503  0001B8  D000               	goto	i1l5851
 13504  0001BA                     i1l5851:
 13505                           
 13506                           ;parcheggio.c: 173: }
 13507                           ;parcheggio.c: 176: if ((PIR3bits.RXB0IF == 1) || (PIR3bits.RXB1IF == 1)) {
 13508  0001BA  B0A4               	btfsc	4004,0,c	;volatile
 13509  0001BC  D002               	goto	i1l5855
 13510  0001BE  A2A4               	btfss	4004,1,c	;volatile
 13511  0001C0  D099               	goto	i1l728
 13512  0001C2                     i1l5855:
 13513                           
 13514                           ;parcheggio.c: 177: CANreceiveMessage(&msg);
 13515  0001C2  0E44               	movlw	low _msg
 13516  0001C4  6E2A               	movwf	CANreceiveMessage@msg,c
 13517  0001C6  0E01               	movlw	high _msg
 13518  0001C8  6E2B               	movwf	CANreceiveMessage@msg+1,c
 13519  0001CA  EC25  F016         	call	_CANreceiveMessage	;wreg free
 13520                           
 13521                           ;parcheggio.c: 179: if (msg.identifier == 0b00000001111) {
 13522  0001CE  0E0F               	movlw	15
 13523  0001D0  0101               	movlb	1	; () banked
 13524  0001D2  1944               	xorwf	_msg& (0+255),w,b
 13525  0001D4  0101               	movlb	1	; () banked
 13526  0001D6  1145               	iorwf	(_msg+1)& (0+255),w,b
 13527  0001D8  0101               	movlb	1	; () banked
 13528  0001DA  1146               	iorwf	(_msg+2)& (0+255),w,b
 13529  0001DC  0101               	movlb	1	; () banked
 13530  0001DE  1147               	iorwf	(_msg+3)& (0+255),w,b
 13531  0001E0  A4D8               	btfss	status,2,c
 13532  0001E2  D002               	goto	i1l5861
 13533                           
 13534                           ; BSR set to: 1
 13535                           ;parcheggio.c: 180: asd = 0;
 13536  0001E4  9251               	bcf	_asd/(0+8),_asd& (0+7),c	;volatile
 13537  0001E6  D000               	goto	i1l5861
 13538  0001E8                     i1l5861:
 13539                           
 13540                           ; BSR set to: 1
 13541                           ;parcheggio.c: 181: }
 13542                           ;parcheggio.c: 183: if ((msg.identifier == 0b00000001001) && (msg.RTR != 1)) {
 13543  0001E8  0E09               	movlw	9
 13544  0001EA  0101               	movlb	1	; () banked
 13545  0001EC  1944               	xorwf	_msg& (0+255),w,b
 13546  0001EE  0101               	movlb	1	; () banked
 13547  0001F0  1145               	iorwf	(_msg+1)& (0+255),w,b
 13548  0001F2  0101               	movlb	1	; () banked
 13549  0001F4  1146               	iorwf	(_msg+2)& (0+255),w,b
 13550  0001F6  0101               	movlb	1	; () banked
 13551  0001F8  1147               	iorwf	(_msg+3)& (0+255),w,b
 13552  0001FA  A4D8               	btfss	status,2,c
 13553  0001FC  D02E               	goto	i1l5877
 13554                           
 13555                           ; BSR set to: 1
 13556  0001FE  0101               	movlb	1	; () banked
 13557  000200  0552               	decf	(_msg+14)& (0+255),w,b
 13558  000202  B4D8               	btfsc	status,2,c
 13559  000204  D02A               	goto	i1l5877
 13560                           
 13561                           ; BSR set to: 1
 13562                           ;parcheggio.c: 184: distance_average = 0;
 13563  000206  0E00               	movlw	0
 13564  000208  0100               	movlb	0	; () banked
 13565  00020A  6FE2               	movwf	(_distance_average+1)& (0+255),b	;volatile
 13566  00020C  0E00               	movlw	0
 13567  00020E  6FE1               	movwf	_distance_average& (0+255),b	;volatile
 13568                           
 13569                           ; BSR set to: 0
 13570                           ;parcheggio.c: 185: distance_dx = msg.data[1];
 13571  000210  C149  F019         	movff	_msg+5,_distance_dx	;volatile
 13572  000214  6A1A               	clrf	_distance_dx+1,c	;volatile
 13573                           
 13574                           ;parcheggio.c: 186: distance_dx = ((distance_dx << 8) | msg.data[0]);
 13575  000216  5019               	movf	_distance_dx,w,c	;volatile
 13576  000218  6E3A               	movwf	??_ISR_Bassa& (0+255),c
 13577  00021A  0101               	movlb	1	; () banked
 13578  00021C  5148               	movf	(_msg+4)& (0+255),w,b
 13579  00021E  6E19               	movwf	_distance_dx,c	;volatile
 13580  000220  C03A  F01A         	movff	??_ISR_Bassa,_distance_dx+1	;volatile
 13581                           
 13582                           ; BSR set to: 1
 13583                           ;parcheggio.c: 187: distance_sx = msg.data[3];
 13584  000224  C14B  F01B         	movff	_msg+7,_distance_sx	;volatile
 13585  000228  6A1C               	clrf	_distance_sx+1,c	;volatile
 13586                           
 13587                           ;parcheggio.c: 188: distance_sx = ((distance_sx << 8) | msg.data[2]);
 13588  00022A  501B               	movf	_distance_sx,w,c	;volatile
 13589  00022C  6E3A               	movwf	??_ISR_Bassa& (0+255),c
 13590  00022E  0101               	movlb	1	; () banked
 13591  000230  514A               	movf	(_msg+6)& (0+255),w,b
 13592  000232  6E1B               	movwf	_distance_sx,c	;volatile
 13593  000234  C03A  F01C         	movff	??_ISR_Bassa,_distance_sx+1	;volatile
 13594                           
 13595                           ; BSR set to: 1
 13596                           ;parcheggio.c: 189: distance_average = (distance_sx + distance_dx) / 2;
 13597  000238  5019               	movf	_distance_dx,w,c	;volatile
 13598  00023A  241B               	addwf	_distance_sx,w,c	;volatile
 13599  00023C  6E3A               	movwf	??_ISR_Bassa& (0+255),c
 13600  00023E  501A               	movf	_distance_dx+1,w,c	;volatile
 13601  000240  201C               	addwfc	_distance_sx+1,w,c	;volatile
 13602  000242  6E3B               	movwf	(??_ISR_Bassa+1)& (0+255),c
 13603  000244  90D8               	bcf	status,0,c
 13604  000246  303B               	rrcf	??_ISR_Bassa+1,w,c
 13605  000248  6E3C               	movwf	(??_ISR_Bassa+2)& (0+255),c
 13606  00024A  303A               	rrcf	??_ISR_Bassa,w,c
 13607  00024C  0100               	movlb	0	; () banked
 13608  00024E  6FE1               	movwf	_distance_average& (0+255),b	;volatile
 13609  000250  C03C  F0E2         	movff	??_ISR_Bassa+2,_distance_average+1	;volatile
 13610                           
 13611                           ; BSR set to: 0
 13612                           ;parcheggio.c: 190: distance_received = 1;
 13613  000254  8A51               	bsf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
 13614                           
 13615                           ; BSR set to: 0
 13616                           ;parcheggio.c: 191: distance_received1 = 1;
 13617  000256  8C51               	bsf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
 13618  000258  D000               	goto	i1l5877
 13619  00025A                     i1l5877:
 13620                           
 13621                           ;parcheggio.c: 192: }
 13622                           ;parcheggio.c: 194: if (msg.identifier == 0b00000001100) {
 13623  00025A  0E0C               	movlw	12
 13624  00025C  0101               	movlb	1	; () banked
 13625  00025E  1944               	xorwf	_msg& (0+255),w,b
 13626  000260  0101               	movlb	1	; () banked
 13627  000262  1145               	iorwf	(_msg+1)& (0+255),w,b
 13628  000264  0101               	movlb	1	; () banked
 13629  000266  1146               	iorwf	(_msg+2)& (0+255),w,b
 13630  000268  0101               	movlb	1	; () banked
 13631  00026A  1147               	iorwf	(_msg+3)& (0+255),w,b
 13632  00026C  A4D8               	btfss	status,2,c
 13633  00026E  D00D               	goto	i1l5883
 13634                           
 13635                           ; BSR set to: 1
 13636                           ;parcheggio.c: 195: if (msg.data[0] == 1) {
 13637  000270  0101               	movlb	1	; () banked
 13638  000272  0548               	decf	(_msg+4)& (0+255),w,b
 13639  000274  A4D8               	btfss	status,2,c
 13640  000276  D003               	goto	i1l722
 13641                           
 13642                           ; BSR set to: 1
 13643                           ;parcheggio.c: 196: activation = 1;
 13644  000278  8051               	bsf	_activation/(0+8),_activation& (0+7),c	;volatile
 13645                           
 13646                           ;parcheggio.c: 197: PORTBbits.RB6 = 1;
 13647  00027A  8C81               	bsf	3969,6,c	;volatile
 13648                           
 13649                           ;parcheggio.c: 198: } else {
 13650  00027C  D006               	goto	i1l5883
 13651  00027E                     i1l722:
 13652                           
 13653                           ; BSR set to: 1
 13654                           ;parcheggio.c: 199: activation = 0;
 13655  00027E  9051               	bcf	_activation/(0+8),_activation& (0+7),c	;volatile
 13656                           
 13657                           ;parcheggio.c: 200: PORTBbits.RB4 = 0;
 13658  000280  9881               	bcf	3969,4,c	;volatile
 13659                           
 13660                           ;parcheggio.c: 201: PORTBbits.RB5 = 0;
 13661  000282  9A81               	bcf	3969,5,c	;volatile
 13662                           
 13663                           ;parcheggio.c: 202: PORTBbits.RB6 = 0;
 13664  000284  9C81               	bcf	3969,6,c	;volatile
 13665                           
 13666                           ;parcheggio.c: 203: request_sent = 0;
 13667  000286  9652               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
 13668                           
 13669                           ; BSR set to: 1
 13670  000288  D000               	goto	i1l5883
 13671  00028A                     i1l5883:
 13672                           
 13673                           ; BSR set to: 1
 13674                           ;parcheggio.c: 204: }
 13675                           ;parcheggio.c: 205: }
 13676                           ;parcheggio.c: 207: if (msg.identifier == 0b00000001110) {
 13677  00028A  0E0E               	movlw	14
 13678  00028C  0101               	movlb	1	; () banked
 13679  00028E  1944               	xorwf	_msg& (0+255),w,b
 13680  000290  0101               	movlb	1	; () banked
 13681  000292  1145               	iorwf	(_msg+1)& (0+255),w,b
 13682  000294  0101               	movlb	1	; () banked
 13683  000296  1146               	iorwf	(_msg+2)& (0+255),w,b
 13684  000298  0101               	movlb	1	; () banked
 13685  00029A  1147               	iorwf	(_msg+3)& (0+255),w,b
 13686  00029C  A4D8               	btfss	status,2,c
 13687  00029E  D002               	goto	i1l5887
 13688                           
 13689                           ; BSR set to: 1
 13690                           ;parcheggio.c: 208: start_operation = 1;
 13691  0002A0  8A52               	bsf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13692  0002A2  D000               	goto	i1l5887
 13693  0002A4                     i1l5887:
 13694                           
 13695                           ; BSR set to: 1
 13696                           ;parcheggio.c: 209: }
 13697                           ;parcheggio.c: 212: if (msg.identifier == 0b00000001000) {
 13698  0002A4  0E08               	movlw	8
 13699  0002A6  0101               	movlb	1	; () banked
 13700  0002A8  1944               	xorwf	_msg& (0+255),w,b
 13701  0002AA  0101               	movlb	1	; () banked
 13702  0002AC  1145               	iorwf	(_msg+1)& (0+255),w,b
 13703  0002AE  0101               	movlb	1	; () banked
 13704  0002B0  1146               	iorwf	(_msg+2)& (0+255),w,b
 13705  0002B2  0101               	movlb	1	; () banked
 13706  0002B4  1147               	iorwf	(_msg+3)& (0+255),w,b
 13707  0002B6  A4D8               	btfss	status,2,c
 13708  0002B8  D01A               	goto	i1l725
 13709                           
 13710                           ; BSR set to: 1
 13711                           ;parcheggio.c: 213: for (unsigned char i = 0; i < 8; i++) {
 13712  0002BA  0E00               	movlw	0
 13713  0002BC  6E50               	movwf	ISR_Bassa@i,c
 13714  0002BE                     i1l5891:
 13715                           
 13716                           ; BSR set to: 1
 13717  0002BE  0E07               	movlw	7
 13718  0002C0  6450               	cpfsgt	ISR_Bassa@i,c
 13719  0002C2  D001               	goto	i1l5895
 13720                           
 13721                           ; BSR set to: 1
 13722  0002C4  D014               	goto	i1l725
 13723  0002C6                     i1l5895:
 13724                           
 13725                           ;parcheggio.c: 214: data_speed_rx[i] = msg.data[i];
 13726  0002C6  5050               	movf	ISR_Bassa@i,w,c
 13727  0002C8  0D01               	mullw	1
 13728  0002CA  0E48               	movlw	low (_msg+4)
 13729  0002CC  24F3               	addwf	prodl,w,c
 13730  0002CE  6ED9               	movwf	fsr2l,c
 13731  0002D0  0E01               	movlw	high (_msg+4)
 13732  0002D2  20F4               	addwfc	prodh,w,c
 13733  0002D4  6EDA               	movwf	fsr2h,c
 13734  0002D6  5050               	movf	ISR_Bassa@i,w,c
 13735  0002D8  0D01               	mullw	1
 13736  0002DA  0E08               	movlw	low _data_speed_rx
 13737  0002DC  24F3               	addwf	prodl,w,c
 13738  0002DE  6EE1               	movwf	fsr1l,c
 13739  0002E0  0E01               	movlw	high _data_speed_rx
 13740  0002E2  20F4               	addwfc	prodh,w,c
 13741  0002E4  6EE2               	movwf	fsr1h,c
 13742  0002E6  CFDF FFE7          	movff	indf2,indf1
 13743  0002EA  2A50               	incf	ISR_Bassa@i,f,c
 13744  0002EC  D7E8               	goto	i1l5891
 13745  0002EE                     i1l725:
 13746                           
 13747                           ;parcheggio.c: 215: }
 13748                           ;parcheggio.c: 216: }
 13749                           ;parcheggio.c: 219: PIR3bits.RXB0IF = 0;
 13750  0002EE  90A4               	bcf	4004,0,c	;volatile
 13751                           
 13752                           ;parcheggio.c: 220: PIR3bits.RXB1IF = 0;
 13753  0002F0  92A4               	bcf	4004,1,c	;volatile
 13754  0002F2  D000               	goto	i1l728
 13755  0002F4                     i1l728:
 13756  0002F4  C04E  FFF5         	movff	??_ISR_Bassa+20,tablat
 13757  0002F8  C04D  FFF8         	movff	??_ISR_Bassa+19,tblptru
 13758  0002FC  C04C  FFF7         	movff	??_ISR_Bassa+18,tblptrh
 13759  000300  C04B  FFF6         	movff	??_ISR_Bassa+17,tblptrl
 13760  000304  C04A  FFF4         	movff	??_ISR_Bassa+16,prodh
 13761  000308  C049  FFF3         	movff	??_ISR_Bassa+15,prodl
 13762  00030C  C048  FFDA         	movff	??_ISR_Bassa+14,fsr2h
 13763  000310  C047  FFD9         	movff	??_ISR_Bassa+13,fsr2l
 13764  000314  C046  FFE2         	movff	??_ISR_Bassa+12,fsr1h
 13765  000318  C045  FFE1         	movff	??_ISR_Bassa+11,fsr1l
 13766  00031C  C044  FFEA         	movff	??_ISR_Bassa+10,fsr0h
 13767  000320  C043  FFE9         	movff	??_ISR_Bassa+9,fsr0l
 13768  000324  C042  FFFB         	movff	??_ISR_Bassa+8,pclatu
 13769  000328  C041  FFFA         	movff	??_ISR_Bassa+7,pclath
 13770  00032C  C040  FFE0         	movff	??_ISR_Bassa+6,bsr
 13771  000330  C03F  FFE8         	movff	??_ISR_Bassa+5,wreg
 13772  000334  C03E  FFD8         	movff	??_ISR_Bassa+4,status
 13773  000338  0010               	retfie	
 13774  00033A                     __end_of_ISR_Bassa:
 13775                           	opt stack 0
 13776                           pclatu	equ	0xFFB
 13777                           pclath	equ	0xFFA
 13778                           tblptru	equ	0xFF8
 13779                           tblptrh	equ	0xFF7
 13780                           tblptrl	equ	0xFF6
 13781                           tablat	equ	0xFF5
 13782                           prodh	equ	0xFF4
 13783                           prodl	equ	0xFF3
 13784                           intcon	equ	0xFF2
 13785                           intcon2	equ	0xFF1
 13786                           postinc0	equ	0xFEE
 13787                           fsr0h	equ	0xFEA
 13788                           fsr0l	equ	0xFE9
 13789                           wreg	equ	0xFE8
 13790                           indf1	equ	0xFE7
 13791                           postdec1	equ	0xFE5
 13792                           fsr1h	equ	0xFE2
 13793                           fsr1l	equ	0xFE1
 13794                           bsr	equ	0xFE0
 13795                           indf2	equ	0xFDF
 13796                           postinc2	equ	0xFDE
 13797                           postdec2	equ	0xFDD
 13798                           plusw2	equ	0xFDB
 13799                           fsr2h	equ	0xFDA
 13800                           fsr2l	equ	0xFD9
 13801                           status	equ	0xFD8
 13802                           
 13803 ;; *************** function i1_delay_ms *****************
 13804 ;; Defined at:
 13805 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
 13806 ;; Parameters:    Size  Location     Type
 13807 ;;  value_ms        2    6[COMRAM] unsigned int 
 13808 ;; Auto vars:     Size  Location     Type
 13809 ;;		None
 13810 ;; Return value:  Size  Location     Type
 13811 ;;		None               void
 13812 ;; Registers used:
 13813 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13814 ;; Tracked objects:
 13815 ;;		On entry : 0/0
 13816 ;;		On exit  : 0/0
 13817 ;;		Unchanged: 0/0
 13818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13819 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13822 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;Total ram usage:        2 bytes
 13824 ;; Hardware stack levels used:    1
 13825 ;; Hardware stack levels required when called:    3
 13826 ;; This function calls:
 13827 ;;		i1___wmul
 13828 ;; This function is called by:
 13829 ;;		_ISR_Bassa
 13830 ;; This function uses a non-reentrant model
 13831 ;;
 13832                           
 13833                           	psect	text39
 13834  005CE4                     __ptext39:
 13835                           	opt stack 0
 13836  005CE4                     i1_delay_ms:
 13837                           	opt stack 19
 13838                           
 13839                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
 13840                           
 13841                           ;incstack = 0
 13842  005CE4  C0E7  F02A         	movff	_delay_quartz_frequency_value,i1___wmul@multiplier	;volatile
 13843  005CE8  6A2B               	clrf	i1___wmul@multiplier+1,c
 13844  005CEA  C030  F02C         	movff	i1delay_ms@value_ms,i1___wmul@multiplicand
 13845  005CEE  C031  F02D         	movff	i1delay_ms@value_ms+1,i1___wmul@multiplicand+1
 13846  005CF2  ECD4  F02E         	call	i1___wmul	;wreg free
 13847  005CF6  C02A  F0DF         	movff	?i1___wmul,_clock_counter_reference	;volatile
 13848  005CFA  C02B  F0E0         	movff	?i1___wmul+1,_clock_counter_reference+1	;volatile
 13849                           
 13850                           ;src\delay.c: 75: while (clock_counter_reference) {
 13851  005CFE  D007               	goto	i1l569
 13852  005D00                     i1l5753:
 13853                           
 13854                           ;src\delay.c: 85: _delay(240);
 13855  005D00  0E50               	movlw	80
 13856  005D02                     i1u865_27:
 13857  005D02  2EE8               	decfsz	wreg,f,c
 13858  005D04  D7FE               	goto	i1u865_27
 13859                           
 13860                           ;src\delay.c: 88: clock_counter_reference--;
 13861  005D06  0100               	movlb	0	; () banked
 13862  005D08  07DF               	decf	_clock_counter_reference& (0+255),f,b	;volatile
 13863  005D0A  A0D8               	btfss	status,0,c
 13864  005D0C  07E0               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
 13865  005D0E                     i1l569:
 13866  005D0E  0100               	movlb	0	; () banked
 13867  005D10  51DF               	movf	_clock_counter_reference& (0+255),w,b	;volatile
 13868  005D12  0100               	movlb	0	; () banked
 13869  005D14  11E0               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
 13870  005D16  A4D8               	btfss	status,2,c
 13871  005D18  D7F3               	goto	i1l5753
 13872                           
 13873                           ; BSR set to: 0
 13874                           
 13875                           ; BSR set to: 0
 13876  005D1A  0012               	return		;funcret
 13877  005D1C                     __end_ofi1_delay_ms:
 13878                           	opt stack 0
 13879                           pclatu	equ	0xFFB
 13880                           pclath	equ	0xFFA
 13881                           tblptru	equ	0xFF8
 13882                           tblptrh	equ	0xFF7
 13883                           tblptrl	equ	0xFF6
 13884                           tablat	equ	0xFF5
 13885                           prodh	equ	0xFF4
 13886                           prodl	equ	0xFF3
 13887                           intcon	equ	0xFF2
 13888                           intcon2	equ	0xFF1
 13889                           postinc0	equ	0xFEE
 13890                           fsr0h	equ	0xFEA
 13891                           fsr0l	equ	0xFE9
 13892                           wreg	equ	0xFE8
 13893                           indf1	equ	0xFE7
 13894                           postdec1	equ	0xFE5
 13895                           fsr1h	equ	0xFE2
 13896                           fsr1l	equ	0xFE1
 13897                           bsr	equ	0xFE0
 13898                           indf2	equ	0xFDF
 13899                           postinc2	equ	0xFDE
 13900                           postdec2	equ	0xFDD
 13901                           plusw2	equ	0xFDB
 13902                           fsr2h	equ	0xFDA
 13903                           fsr2l	equ	0xFD9
 13904                           status	equ	0xFD8
 13905                           
 13906 ;; *************** function i1___wmul *****************
 13907 ;; Defined at:
 13908 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 13909 ;; Parameters:    Size  Location     Type
 13910 ;;  multiplier      2    0[COMRAM] unsigned int 
 13911 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13912 ;; Auto vars:     Size  Location     Type
 13913 ;;  __wmul          2    4[COMRAM] unsigned int 
 13914 ;; Return value:  Size  Location     Type
 13915 ;;                  2    0[COMRAM] unsigned int 
 13916 ;; Registers used:
 13917 ;;		wreg, status,2, status,0, prodl, prodh
 13918 ;; Tracked objects:
 13919 ;;		On entry : 0/0
 13920 ;;		On exit  : 0/0
 13921 ;;		Unchanged: 0/0
 13922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13923 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13924 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13926 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13927 ;;Total ram usage:        6 bytes
 13928 ;; Hardware stack levels used:    1
 13929 ;; Hardware stack levels required when called:    2
 13930 ;; This function calls:
 13931 ;;		Nothing
 13932 ;; This function is called by:
 13933 ;;		i1_delay_ms
 13934 ;; This function uses a non-reentrant model
 13935 ;;
 13936                           
 13937                           	psect	text40
 13938  005DA8                     __ptext40:
 13939                           	opt stack 0
 13940  005DA8                     i1___wmul:
 13941                           	opt stack 19
 13942                           
 13943                           ; BSR set to: 0
 13944                           ;incstack = 0
 13945  005DA8  502A               	movf	i1___wmul@multiplier,w,c
 13946  005DAA  022C               	mulwf	i1___wmul@multiplicand,c
 13947  005DAC  CFF3 F02E          	movff	prodl,i1___wmul@product
 13948  005DB0  CFF4 F02F          	movff	prodh,i1___wmul@product+1
 13949  005DB4  502A               	movf	i1___wmul@multiplier,w,c
 13950  005DB6  022D               	mulwf	i1___wmul@multiplicand+1,c
 13951  005DB8  50F3               	movf	prodl,w,c
 13952  005DBA  262F               	addwf	i1___wmul@product+1,f,c
 13953  005DBC  502B               	movf	i1___wmul@multiplier+1,w,c
 13954  005DBE  022C               	mulwf	i1___wmul@multiplicand,c
 13955  005DC0  50F3               	movf	prodl,w,c
 13956  005DC2  262F               	addwf	i1___wmul@product+1,f,c
 13957  005DC4  C02E  F02A         	movff	i1___wmul@product,?i1___wmul
 13958  005DC8  C02F  F02B         	movff	i1___wmul@product+1,?i1___wmul+1
 13959  005DCC  0012               	return	
 13960  005DCE  0012               	return		;funcret
 13961  005DD0                     __end_ofi1___wmul:
 13962                           	opt stack 0
 13963                           pclatu	equ	0xFFB
 13964                           pclath	equ	0xFFA
 13965                           tblptru	equ	0xFF8
 13966                           tblptrh	equ	0xFF7
 13967                           tblptrl	equ	0xFF6
 13968                           tablat	equ	0xFF5
 13969                           prodh	equ	0xFF4
 13970                           prodl	equ	0xFF3
 13971                           intcon	equ	0xFF2
 13972                           intcon2	equ	0xFF1
 13973                           postinc0	equ	0xFEE
 13974                           fsr0h	equ	0xFEA
 13975                           fsr0l	equ	0xFE9
 13976                           wreg	equ	0xFE8
 13977                           indf1	equ	0xFE7
 13978                           postdec1	equ	0xFE5
 13979                           fsr1h	equ	0xFE2
 13980                           fsr1l	equ	0xFE1
 13981                           bsr	equ	0xFE0
 13982                           indf2	equ	0xFDF
 13983                           postinc2	equ	0xFDE
 13984                           postdec2	equ	0xFDD
 13985                           plusw2	equ	0xFDB
 13986                           fsr2h	equ	0xFDA
 13987                           fsr2l	equ	0xFD9
 13988                           status	equ	0xFD8
 13989                           
 13990 ;; *************** function i1_CANsendMessage *****************
 13991 ;; Defined at:
 13992 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 13993 ;; Parameters:    Size  Location     Type
 13994 ;;  identifier      4    0[COMRAM] unsigned long 
 13995 ;;  data            2    4[COMRAM] PTR unsigned char 
 13996 ;;		 -> data_speed(8), data_brake(8), data_steering(8), data_correction(8), 
 13997 ;;		 -> data_test(8), data(8), sensor_distance_short(8), 
 13998 ;;  dataLength      1    6[COMRAM] unsigned char 
 13999 ;;  flags           1    7[COMRAM] enum E16376
 14000 ;; Auto vars:     Size  Location     Type
 14001 ;;  CANsendMessa    4   12[COMRAM] unsigned long 
 14002 ;; Return value:  Size  Location     Type
 14003 ;;		None               void
 14004 ;; Registers used:
 14005 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14006 ;; Tracked objects:
 14007 ;;		On entry : 0/0
 14008 ;;		On exit  : 0/0
 14009 ;;		Unchanged: 0/0
 14010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14011 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14012 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14013 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14014 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14015 ;;Total ram usage:       16 bytes
 14016 ;; Hardware stack levels used:    1
 14017 ;; Hardware stack levels required when called:    2
 14018 ;; This function calls:
 14019 ;;		Nothing
 14020 ;; This function is called by:
 14021 ;;		_ISR_Bassa
 14022 ;; This function uses a non-reentrant model
 14023 ;;
 14024                           
 14025                           	psect	text41
 14026  00201C                     __ptext41:
 14027                           	opt stack 0
 14028  00201C                     i1_CANsendMessage:
 14029                           	opt stack 20
 14030                           
 14031                           ;inc\CANlib.h: 296: unsigned long tamp;
 14032                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
 14033                           
 14034                           ;incstack = 0
 14035  00201C  010F               	movlb	15	; () banked
 14036  00201E  B740               	btfsc	64,3,b	;volatile
 14037  002020  D118               	goto	i1l363
 14038                           
 14039                           ; BSR set to: 15
 14040                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
 14041  002022  C030  FF45         	movff	i1CANsendMessage@dataLength,3909	;volatile
 14042                           
 14043                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
 14044  002026  AC31               	btfss	i1CANsendMessage@flags,6,c
 14045  002028  D003               	goto	i1l364
 14046                           
 14047                           ; BSR set to: 15
 14048                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
 14049  00202A  010F               	movlb	15	; () banked
 14050  00202C  8D45               	bsf	69,6,b	;volatile
 14051  00202E  D002               	goto	i1l365
 14052  002030                     i1l364:
 14053                           
 14054                           ; BSR set to: 15
 14055                           ;inc\CANlib.h: 302: else
 14056                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
 14057  002030  010F               	movlb	15	; () banked
 14058  002032  9D45               	bcf	69,6,b	;volatile
 14059  002034                     i1l365:
 14060                           
 14061                           ; BSR set to: 15
 14062                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
 14063  002034  A631               	btfss	i1CANsendMessage@flags,3,c
 14064  002036  D067               	goto	i1l366
 14065                           
 14066                           ; BSR set to: 15
 14067                           ;inc\CANlib.h: 306: {
 14068                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
 14069  002038  502A               	movf	i1CANsendMessage@identifier,w,c
 14070  00203A  6E36               	movwf	i1CANsendMessage@tamp,c
 14071  00203C  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14072  00203E  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14073  002040  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14074                           
 14075                           ; BSR set to: 15
 14076                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
 14077  002042  C036  FF44         	movff	i1CANsendMessage@tamp,3908	;volatile
 14078                           
 14079                           ; BSR set to: 15
 14080                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
 14081  002046  0E00               	movlw	0
 14082  002048  142A               	andwf	i1CANsendMessage@identifier,w,c
 14083  00204A  6E36               	movwf	i1CANsendMessage@tamp,c
 14084  00204C  0EFF               	movlw	255
 14085  00204E  142B               	andwf	i1CANsendMessage@identifier+1,w,c
 14086  002050  6E37               	movwf	i1CANsendMessage@tamp+1,c
 14087  002052  0E00               	movlw	0
 14088  002054  142C               	andwf	i1CANsendMessage@identifier+2,w,c
 14089  002056  6E38               	movwf	i1CANsendMessage@tamp+2,c
 14090  002058  0E00               	movlw	0
 14091  00205A  142D               	andwf	i1CANsendMessage@identifier+3,w,c
 14092  00205C  6E39               	movwf	i1CANsendMessage@tamp+3,c
 14093                           
 14094                           ; BSR set to: 15
 14095                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
 14096  00205E  C036  F032         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14097  002062  C037  F033         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14098  002066  C038  F034         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14099  00206A  C039  F035         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14100  00206E  C033  F032         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14101  002072  C034  F033         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14102  002076  C035  F034         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14103  00207A  6A35               	clrf	??i1_CANsendMessage+3,c
 14104  00207C  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14105  002080  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14106  002084  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14107  002088  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14108                           
 14109                           ; BSR set to: 15
 14110                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
 14111  00208C  C036  FF43         	movff	i1CANsendMessage@tamp,3907	;volatile
 14112                           
 14113                           ; BSR set to: 15
 14114                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
 14115  002090  0E00               	movlw	0
 14116  002092  010F               	movlb	15	; () banked
 14117  002094  6F42               	movwf	66,b	;volatile
 14118                           
 14119                           ; BSR set to: 15
 14120                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
 14121  002096  010F               	movlb	15	; () banked
 14122  002098  8742               	bsf	66,3,b	;volatile
 14123                           
 14124                           ; BSR set to: 15
 14125                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
 14126  00209A  A02C               	btfss	i1CANsendMessage@identifier+2,0,c
 14127  00209C  D002               	goto	i1l367
 14128                           
 14129                           ; BSR set to: 15
 14130                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
 14131  00209E  010F               	movlb	15	; () banked
 14132  0020A0  8142               	bsf	66,0,b	;volatile
 14133  0020A2                     i1l367:
 14134                           
 14135                           ; BSR set to: 15
 14136                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
 14137  0020A2  A22C               	btfss	i1CANsendMessage@identifier+2,1,c
 14138  0020A4  D002               	goto	i1l368
 14139                           
 14140                           ; BSR set to: 15
 14141                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
 14142  0020A6  010F               	movlb	15	; () banked
 14143  0020A8  8342               	bsf	66,1,b	;volatile
 14144  0020AA                     i1l368:
 14145                           
 14146                           ; BSR set to: 15
 14147                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
 14148  0020AA  A42C               	btfss	i1CANsendMessage@identifier+2,2,c
 14149  0020AC  D002               	goto	i1l369
 14150                           
 14151                           ; BSR set to: 15
 14152                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
 14153  0020AE  010F               	movlb	15	; () banked
 14154  0020B0  8B42               	bsf	66,5,b	;volatile
 14155  0020B2                     i1l369:
 14156                           
 14157                           ; BSR set to: 15
 14158                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
 14159  0020B2  A62C               	btfss	i1CANsendMessage@identifier+2,3,c
 14160  0020B4  D002               	goto	i1l370
 14161                           
 14162                           ; BSR set to: 15
 14163                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
 14164  0020B6  010F               	movlb	15	; () banked
 14165  0020B8  8D42               	bsf	66,6,b	;volatile
 14166  0020BA                     i1l370:
 14167                           
 14168                           ; BSR set to: 15
 14169                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
 14170  0020BA  A82C               	btfss	i1CANsendMessage@identifier+2,4,c
 14171  0020BC  D003               	goto	i1l5553
 14172                           
 14173                           ; BSR set to: 15
 14174                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
 14175  0020BE  010F               	movlb	15	; () banked
 14176  0020C0  8F42               	bsf	66,7,b	;volatile
 14177  0020C2  D000               	goto	i1l5553
 14178  0020C4                     i1l5553:
 14179                           
 14180                           ; BSR set to: 15
 14181                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
 14182  0020C4  C02A  F032         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14183  0020C8  C02B  F033         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14184  0020CC  C02C  F034         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14185  0020D0  C02D  F035         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14186  0020D4  0E16               	movlw	22
 14187  0020D6  D005               	goto	i1u665_20
 14188  0020D8                     i1u665_25:
 14189  0020D8  90D8               	bcf	status,0,c
 14190  0020DA  3235               	rrcf	??i1_CANsendMessage+3,f,c
 14191  0020DC  3234               	rrcf	??i1_CANsendMessage+2,f,c
 14192  0020DE  3233               	rrcf	??i1_CANsendMessage+1,f,c
 14193  0020E0  3232               	rrcf	??i1_CANsendMessage,f,c
 14194  0020E2                     i1u665_20:
 14195  0020E2  2EE8               	decfsz	wreg,f,c
 14196  0020E4  D7F9               	goto	i1u665_25
 14197  0020E6  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14198  0020EA  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14199  0020EE  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14200  0020F2  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14201                           
 14202                           ; BSR set to: 15
 14203                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
 14204  0020F6  5036               	movf	i1CANsendMessage@tamp,w,c
 14205  0020F8  6E36               	movwf	i1CANsendMessage@tamp,c
 14206  0020FA  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14207  0020FC  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14208  0020FE  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14209                           
 14210                           ; BSR set to: 15
 14211                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
 14212  002100  C036  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14213                           
 14214                           ;inc\CANlib.h: 332: }
 14215  002104  D04E               	goto	i1l5573
 14216  002106                     i1l366:
 14217                           
 14218                           ; BSR set to: 15
 14219                           ;inc\CANlib.h: 334: else
 14220                           ;inc\CANlib.h: 336: {
 14221                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
 14222  002106  010F               	movlb	15	; () banked
 14223  002108  9742               	bcf	66,3,b	;volatile
 14224                           
 14225                           ; BSR set to: 15
 14226                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
 14227  00210A  C02A  F032         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14228  00210E  C02B  F033         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14229  002112  C02C  F034         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14230  002116  C02D  F035         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14231  00211A  0E04               	movlw	4
 14232  00211C  D005               	goto	i1u666_20
 14233  00211E                     i1u666_25:
 14234  00211E  90D8               	bcf	status,0,c
 14235  002120  3235               	rrcf	??i1_CANsendMessage+3,f,c
 14236  002122  3234               	rrcf	??i1_CANsendMessage+2,f,c
 14237  002124  3233               	rrcf	??i1_CANsendMessage+1,f,c
 14238  002126  3232               	rrcf	??i1_CANsendMessage,f,c
 14239  002128                     i1u666_20:
 14240  002128  2EE8               	decfsz	wreg,f,c
 14241  00212A  D7F9               	goto	i1u666_25
 14242  00212C  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14243  002130  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14244  002134  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14245  002138  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14246                           
 14247                           ; BSR set to: 15
 14248                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
 14249  00213C  5036               	movf	i1CANsendMessage@tamp,w,c
 14250  00213E  6E36               	movwf	i1CANsendMessage@tamp,c
 14251  002140  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14252  002142  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14253  002144  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14254                           
 14255                           ; BSR set to: 15
 14256                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
 14257  002146  C036  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14258                           
 14259                           ; BSR set to: 15
 14260                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
 14261  00214A  0E07               	movlw	7
 14262  00214C  142A               	andwf	i1CANsendMessage@identifier,w,c
 14263  00214E  6E36               	movwf	i1CANsendMessage@tamp,c
 14264  002150  0E00               	movlw	0
 14265  002152  142B               	andwf	i1CANsendMessage@identifier+1,w,c
 14266  002154  6E37               	movwf	i1CANsendMessage@tamp+1,c
 14267  002156  0E00               	movlw	0
 14268  002158  142C               	andwf	i1CANsendMessage@identifier+2,w,c
 14269  00215A  6E38               	movwf	i1CANsendMessage@tamp+2,c
 14270  00215C  0E00               	movlw	0
 14271  00215E  142D               	andwf	i1CANsendMessage@identifier+3,w,c
 14272  002160  6E39               	movwf	i1CANsendMessage@tamp+3,c
 14273                           
 14274                           ; BSR set to: 15
 14275                           ;inc\CANlib.h: 344: tamp = tamp << 5;
 14276  002162  C036  F032         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14277  002166  C037  F033         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14278  00216A  C038  F034         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14279  00216E  C039  F035         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14280  002172  0E05               	movlw	5
 14281  002174                     i1u667_25:
 14282  002174  90D8               	bcf	status,0,c
 14283  002176  3632               	rlcf	??i1_CANsendMessage,f,c
 14284  002178  3633               	rlcf	??i1_CANsendMessage+1,f,c
 14285  00217A  3634               	rlcf	??i1_CANsendMessage+2,f,c
 14286  00217C  3635               	rlcf	??i1_CANsendMessage+3,f,c
 14287  00217E  2EE8               	decfsz	wreg,f,c
 14288  002180  D7F9               	goto	i1u667_25
 14289  002182  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14290  002186  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14291  00218A  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14292  00218E  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14293                           
 14294                           ; BSR set to: 15
 14295                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
 14296  002192  010F               	movlb	15	; () banked
 14297  002194  5142               	movf	66,w,b	;volatile
 14298  002196  0B1F               	andlw	31
 14299  002198  010F               	movlb	15	; () banked
 14300  00219A  6F42               	movwf	66,b	;volatile
 14301                           
 14302                           ; BSR set to: 15
 14303                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
 14304  00219C  C036  FF42         	movff	i1CANsendMessage@tamp,3906	;volatile
 14305  0021A0  D000               	goto	i1l5573
 14306  0021A2                     i1l5573:
 14307                           
 14308                           ; BSR set to: 15
 14309                           ;inc\CANlib.h: 347: }
 14310                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
 14311  0021A2  A031               	btfss	i1CANsendMessage@flags,0,c
 14312  0021A4  D003               	goto	i1l373
 14313                           
 14314                           ; BSR set to: 15
 14315                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
 14316  0021A6  010F               	movlb	15	; () banked
 14317  0021A8  8140               	bsf	64,0,b	;volatile
 14318  0021AA  D002               	goto	i1l374
 14319  0021AC                     i1l373:
 14320                           
 14321                           ; BSR set to: 15
 14322                           ;inc\CANlib.h: 351: else
 14323                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
 14324  0021AC  010F               	movlb	15	; () banked
 14325  0021AE  9140               	bcf	64,0,b	;volatile
 14326  0021B0                     i1l374:
 14327                           
 14328                           ; BSR set to: 15
 14329                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
 14330  0021B0  A231               	btfss	i1CANsendMessage@flags,1,c
 14331  0021B2  D003               	goto	i1l375
 14332                           
 14333                           ; BSR set to: 15
 14334                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
 14335  0021B4  010F               	movlb	15	; () banked
 14336  0021B6  8340               	bsf	64,1,b	;volatile
 14337  0021B8  D003               	goto	i1l5579
 14338  0021BA                     i1l375:
 14339                           
 14340                           ; BSR set to: 15
 14341                           ;inc\CANlib.h: 355: else
 14342                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
 14343  0021BA  010F               	movlb	15	; () banked
 14344  0021BC  9340               	bcf	64,1,b	;volatile
 14345  0021BE  D000               	goto	i1l5579
 14346  0021C0                     i1l5579:
 14347                           
 14348                           ; BSR set to: 15
 14349                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
 14350  0021C0  C02E  FFD9         	movff	i1CANsendMessage@data,fsr2l
 14351  0021C4  C02F  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 14352  0021C8  50DF               	movf	indf2,w,c
 14353  0021CA  010F               	movlb	15	; () banked
 14354  0021CC  6F46               	movwf	70,b	;volatile
 14355                           
 14356                           ; BSR set to: 15
 14357                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
 14358  0021CE  EE20 F001          	lfsr	2,1
 14359  0021D2  502E               	movf	i1CANsendMessage@data,w,c
 14360  0021D4  26D9               	addwf	fsr2l,f,c
 14361  0021D6  502F               	movf	i1CANsendMessage@data+1,w,c
 14362  0021D8  22DA               	addwfc	fsr2h,f,c
 14363  0021DA  50DF               	movf	indf2,w,c
 14364  0021DC  010F               	movlb	15	; () banked
 14365  0021DE  6F47               	movwf	71,b	;volatile
 14366                           
 14367                           ; BSR set to: 15
 14368                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
 14369  0021E0  EE20 F002          	lfsr	2,2
 14370  0021E4  502E               	movf	i1CANsendMessage@data,w,c
 14371  0021E6  26D9               	addwf	fsr2l,f,c
 14372  0021E8  502F               	movf	i1CANsendMessage@data+1,w,c
 14373  0021EA  22DA               	addwfc	fsr2h,f,c
 14374  0021EC  50DF               	movf	indf2,w,c
 14375  0021EE  010F               	movlb	15	; () banked
 14376  0021F0  6F48               	movwf	72,b	;volatile
 14377                           
 14378                           ; BSR set to: 15
 14379                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
 14380  0021F2  EE20 F003          	lfsr	2,3
 14381  0021F6  502E               	movf	i1CANsendMessage@data,w,c
 14382  0021F8  26D9               	addwf	fsr2l,f,c
 14383  0021FA  502F               	movf	i1CANsendMessage@data+1,w,c
 14384  0021FC  22DA               	addwfc	fsr2h,f,c
 14385  0021FE  50DF               	movf	indf2,w,c
 14386  002200  010F               	movlb	15	; () banked
 14387  002202  6F49               	movwf	73,b	;volatile
 14388                           
 14389                           ; BSR set to: 15
 14390                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
 14391  002204  EE20 F004          	lfsr	2,4
 14392  002208  502E               	movf	i1CANsendMessage@data,w,c
 14393  00220A  26D9               	addwf	fsr2l,f,c
 14394  00220C  502F               	movf	i1CANsendMessage@data+1,w,c
 14395  00220E  22DA               	addwfc	fsr2h,f,c
 14396  002210  50DF               	movf	indf2,w,c
 14397  002212  010F               	movlb	15	; () banked
 14398  002214  6F4A               	movwf	74,b	;volatile
 14399                           
 14400                           ; BSR set to: 15
 14401                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
 14402  002216  EE20 F005          	lfsr	2,5
 14403  00221A  502E               	movf	i1CANsendMessage@data,w,c
 14404  00221C  26D9               	addwf	fsr2l,f,c
 14405  00221E  502F               	movf	i1CANsendMessage@data+1,w,c
 14406  002220  22DA               	addwfc	fsr2h,f,c
 14407  002222  50DF               	movf	indf2,w,c
 14408  002224  010F               	movlb	15	; () banked
 14409  002226  6F4B               	movwf	75,b	;volatile
 14410                           
 14411                           ; BSR set to: 15
 14412                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
 14413  002228  EE20 F006          	lfsr	2,6
 14414  00222C  502E               	movf	i1CANsendMessage@data,w,c
 14415  00222E  26D9               	addwf	fsr2l,f,c
 14416  002230  502F               	movf	i1CANsendMessage@data+1,w,c
 14417  002232  22DA               	addwfc	fsr2h,f,c
 14418  002234  50DF               	movf	indf2,w,c
 14419  002236  010F               	movlb	15	; () banked
 14420  002238  6F4C               	movwf	76,b	;volatile
 14421                           
 14422                           ; BSR set to: 15
 14423                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
 14424  00223A  EE20 F007          	lfsr	2,7
 14425  00223E  502E               	movf	i1CANsendMessage@data,w,c
 14426  002240  26D9               	addwf	fsr2l,f,c
 14427  002242  502F               	movf	i1CANsendMessage@data+1,w,c
 14428  002244  22DA               	addwfc	fsr2h,f,c
 14429  002246  50DF               	movf	indf2,w,c
 14430  002248  010F               	movlb	15	; () banked
 14431  00224A  6F4D               	movwf	77,b	;volatile
 14432                           
 14433                           ; BSR set to: 15
 14434                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
 14435  00224C  010F               	movlb	15	; () banked
 14436  00224E  8740               	bsf	64,3,b	;volatile
 14437                           
 14438                           ; BSR set to: 15
 14439                           ;inc\CANlib.h: 368: return;
 14440  002250  0012               	return	
 14441  002252                     i1l363:
 14442                           
 14443                           ; BSR set to: 15
 14444                           ;inc\CANlib.h: 369: }
 14445                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
 14446  002252  010F               	movlb	15	; () banked
 14447  002254  B730               	btfsc	48,3,b	;volatile
 14448  002256  D118               	goto	i1l378
 14449                           
 14450                           ; BSR set to: 15
 14451                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
 14452  002258  C030  FF35         	movff	i1CANsendMessage@dataLength,3893	;volatile
 14453                           
 14454                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
 14455  00225C  AC31               	btfss	i1CANsendMessage@flags,6,c
 14456  00225E  D003               	goto	i1l379
 14457                           
 14458                           ; BSR set to: 15
 14459                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
 14460  002260  010F               	movlb	15	; () banked
 14461  002262  8D35               	bsf	53,6,b	;volatile
 14462  002264  D002               	goto	i1l380
 14463  002266                     i1l379:
 14464                           
 14465                           ; BSR set to: 15
 14466                           ;inc\CANlib.h: 378: else
 14467                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
 14468  002266  010F               	movlb	15	; () banked
 14469  002268  9D35               	bcf	53,6,b	;volatile
 14470  00226A                     i1l380:
 14471                           
 14472                           ; BSR set to: 15
 14473                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
 14474  00226A  A631               	btfss	i1CANsendMessage@flags,3,c
 14475  00226C  D067               	goto	i1l381
 14476                           
 14477                           ; BSR set to: 15
 14478                           ;inc\CANlib.h: 382: {
 14479                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
 14480  00226E  502A               	movf	i1CANsendMessage@identifier,w,c
 14481  002270  6E36               	movwf	i1CANsendMessage@tamp,c
 14482  002272  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14483  002274  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14484  002276  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14485                           
 14486                           ; BSR set to: 15
 14487                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
 14488  002278  C036  FF34         	movff	i1CANsendMessage@tamp,3892	;volatile
 14489                           
 14490                           ; BSR set to: 15
 14491                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
 14492  00227C  0E00               	movlw	0
 14493  00227E  142A               	andwf	i1CANsendMessage@identifier,w,c
 14494  002280  6E36               	movwf	i1CANsendMessage@tamp,c
 14495  002282  0EFF               	movlw	255
 14496  002284  142B               	andwf	i1CANsendMessage@identifier+1,w,c
 14497  002286  6E37               	movwf	i1CANsendMessage@tamp+1,c
 14498  002288  0E00               	movlw	0
 14499  00228A  142C               	andwf	i1CANsendMessage@identifier+2,w,c
 14500  00228C  6E38               	movwf	i1CANsendMessage@tamp+2,c
 14501  00228E  0E00               	movlw	0
 14502  002290  142D               	andwf	i1CANsendMessage@identifier+3,w,c
 14503  002292  6E39               	movwf	i1CANsendMessage@tamp+3,c
 14504                           
 14505                           ; BSR set to: 15
 14506                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
 14507  002294  C036  F032         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14508  002298  C037  F033         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14509  00229C  C038  F034         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14510  0022A0  C039  F035         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14511  0022A4  C033  F032         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14512  0022A8  C034  F033         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14513  0022AC  C035  F034         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14514  0022B0  6A35               	clrf	??i1_CANsendMessage+3,c
 14515  0022B2  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14516  0022B6  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14517  0022BA  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14518  0022BE  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14519                           
 14520                           ; BSR set to: 15
 14521                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
 14522  0022C2  C036  FF33         	movff	i1CANsendMessage@tamp,3891	;volatile
 14523                           
 14524                           ; BSR set to: 15
 14525                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
 14526  0022C6  0E00               	movlw	0
 14527  0022C8  010F               	movlb	15	; () banked
 14528  0022CA  6F32               	movwf	50,b	;volatile
 14529                           
 14530                           ; BSR set to: 15
 14531                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
 14532  0022CC  010F               	movlb	15	; () banked
 14533  0022CE  8732               	bsf	50,3,b	;volatile
 14534                           
 14535                           ; BSR set to: 15
 14536                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
 14537  0022D0  A02C               	btfss	i1CANsendMessage@identifier+2,0,c
 14538  0022D2  D002               	goto	i1l382
 14539                           
 14540                           ; BSR set to: 15
 14541                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
 14542  0022D4  010F               	movlb	15	; () banked
 14543  0022D6  8132               	bsf	50,0,b	;volatile
 14544  0022D8                     i1l382:
 14545                           
 14546                           ; BSR set to: 15
 14547                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
 14548  0022D8  A22C               	btfss	i1CANsendMessage@identifier+2,1,c
 14549  0022DA  D002               	goto	i1l383
 14550                           
 14551                           ; BSR set to: 15
 14552                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
 14553  0022DC  010F               	movlb	15	; () banked
 14554  0022DE  8332               	bsf	50,1,b	;volatile
 14555  0022E0                     i1l383:
 14556                           
 14557                           ; BSR set to: 15
 14558                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
 14559  0022E0  A42C               	btfss	i1CANsendMessage@identifier+2,2,c
 14560  0022E2  D002               	goto	i1l384
 14561                           
 14562                           ; BSR set to: 15
 14563                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
 14564  0022E4  010F               	movlb	15	; () banked
 14565  0022E6  8B32               	bsf	50,5,b	;volatile
 14566  0022E8                     i1l384:
 14567                           
 14568                           ; BSR set to: 15
 14569                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
 14570  0022E8  A62C               	btfss	i1CANsendMessage@identifier+2,3,c
 14571  0022EA  D002               	goto	i1l385
 14572                           
 14573                           ; BSR set to: 15
 14574                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
 14575  0022EC  010F               	movlb	15	; () banked
 14576  0022EE  8D32               	bsf	50,6,b	;volatile
 14577  0022F0                     i1l385:
 14578                           
 14579                           ; BSR set to: 15
 14580                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
 14581  0022F0  A82C               	btfss	i1CANsendMessage@identifier+2,4,c
 14582  0022F2  D003               	goto	i1l5629
 14583                           
 14584                           ; BSR set to: 15
 14585                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
 14586  0022F4  010F               	movlb	15	; () banked
 14587  0022F6  8F32               	bsf	50,7,b	;volatile
 14588  0022F8  D000               	goto	i1l5629
 14589  0022FA                     i1l5629:
 14590                           
 14591                           ; BSR set to: 15
 14592                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
 14593  0022FA  C02A  F032         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14594  0022FE  C02B  F033         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14595  002302  C02C  F034         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14596  002306  C02D  F035         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14597  00230A  0E16               	movlw	22
 14598  00230C  D005               	goto	i1u678_20
 14599  00230E                     i1u678_25:
 14600  00230E  90D8               	bcf	status,0,c
 14601  002310  3235               	rrcf	??i1_CANsendMessage+3,f,c
 14602  002312  3234               	rrcf	??i1_CANsendMessage+2,f,c
 14603  002314  3233               	rrcf	??i1_CANsendMessage+1,f,c
 14604  002316  3232               	rrcf	??i1_CANsendMessage,f,c
 14605  002318                     i1u678_20:
 14606  002318  2EE8               	decfsz	wreg,f,c
 14607  00231A  D7F9               	goto	i1u678_25
 14608  00231C  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14609  002320  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14610  002324  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14611  002328  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14612                           
 14613                           ; BSR set to: 15
 14614                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
 14615  00232C  5036               	movf	i1CANsendMessage@tamp,w,c
 14616  00232E  6E36               	movwf	i1CANsendMessage@tamp,c
 14617  002330  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14618  002332  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14619  002334  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14620                           
 14621                           ; BSR set to: 15
 14622                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
 14623  002336  C036  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 14624                           
 14625                           ;inc\CANlib.h: 407: }
 14626  00233A  D04E               	goto	i1l5649
 14627  00233C                     i1l381:
 14628                           
 14629                           ; BSR set to: 15
 14630                           ;inc\CANlib.h: 409: else
 14631                           ;inc\CANlib.h: 411: {
 14632                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
 14633  00233C  010F               	movlb	15	; () banked
 14634  00233E  9732               	bcf	50,3,b	;volatile
 14635                           
 14636                           ; BSR set to: 15
 14637                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
 14638  002340  C02A  F032         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14639  002344  C02B  F033         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14640  002348  C02C  F034         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14641  00234C  C02D  F035         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14642  002350  0E04               	movlw	4
 14643  002352  D005               	goto	i1u679_20
 14644  002354                     i1u679_25:
 14645  002354  90D8               	bcf	status,0,c
 14646  002356  3235               	rrcf	??i1_CANsendMessage+3,f,c
 14647  002358  3234               	rrcf	??i1_CANsendMessage+2,f,c
 14648  00235A  3233               	rrcf	??i1_CANsendMessage+1,f,c
 14649  00235C  3232               	rrcf	??i1_CANsendMessage,f,c
 14650  00235E                     i1u679_20:
 14651  00235E  2EE8               	decfsz	wreg,f,c
 14652  002360  D7F9               	goto	i1u679_25
 14653  002362  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14654  002366  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14655  00236A  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14656  00236E  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14657                           
 14658                           ; BSR set to: 15
 14659                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
 14660  002372  5036               	movf	i1CANsendMessage@tamp,w,c
 14661  002374  6E36               	movwf	i1CANsendMessage@tamp,c
 14662  002376  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14663  002378  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14664  00237A  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14665                           
 14666                           ; BSR set to: 15
 14667                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
 14668  00237C  C036  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 14669                           
 14670                           ; BSR set to: 15
 14671                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
 14672  002380  0E07               	movlw	7
 14673  002382  142A               	andwf	i1CANsendMessage@identifier,w,c
 14674  002384  6E36               	movwf	i1CANsendMessage@tamp,c
 14675  002386  0E00               	movlw	0
 14676  002388  142B               	andwf	i1CANsendMessage@identifier+1,w,c
 14677  00238A  6E37               	movwf	i1CANsendMessage@tamp+1,c
 14678  00238C  0E00               	movlw	0
 14679  00238E  142C               	andwf	i1CANsendMessage@identifier+2,w,c
 14680  002390  6E38               	movwf	i1CANsendMessage@tamp+2,c
 14681  002392  0E00               	movlw	0
 14682  002394  142D               	andwf	i1CANsendMessage@identifier+3,w,c
 14683  002396  6E39               	movwf	i1CANsendMessage@tamp+3,c
 14684                           
 14685                           ; BSR set to: 15
 14686                           ;inc\CANlib.h: 419: tamp = tamp << 5;
 14687  002398  C036  F032         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14688  00239C  C037  F033         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14689  0023A0  C038  F034         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14690  0023A4  C039  F035         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14691  0023A8  0E05               	movlw	5
 14692  0023AA                     i1u680_25:
 14693  0023AA  90D8               	bcf	status,0,c
 14694  0023AC  3632               	rlcf	??i1_CANsendMessage,f,c
 14695  0023AE  3633               	rlcf	??i1_CANsendMessage+1,f,c
 14696  0023B0  3634               	rlcf	??i1_CANsendMessage+2,f,c
 14697  0023B2  3635               	rlcf	??i1_CANsendMessage+3,f,c
 14698  0023B4  2EE8               	decfsz	wreg,f,c
 14699  0023B6  D7F9               	goto	i1u680_25
 14700  0023B8  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14701  0023BC  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14702  0023C0  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14703  0023C4  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14704                           
 14705                           ; BSR set to: 15
 14706                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
 14707  0023C8  010F               	movlb	15	; () banked
 14708  0023CA  5132               	movf	50,w,b	;volatile
 14709  0023CC  0B1F               	andlw	31
 14710  0023CE  010F               	movlb	15	; () banked
 14711  0023D0  6F32               	movwf	50,b	;volatile
 14712                           
 14713                           ; BSR set to: 15
 14714                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
 14715  0023D2  C036  FF32         	movff	i1CANsendMessage@tamp,3890	;volatile
 14716  0023D6  D000               	goto	i1l5649
 14717  0023D8                     i1l5649:
 14718                           
 14719                           ; BSR set to: 15
 14720                           ;inc\CANlib.h: 422: }
 14721                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
 14722  0023D8  A031               	btfss	i1CANsendMessage@flags,0,c
 14723  0023DA  D003               	goto	i1l388
 14724                           
 14725                           ; BSR set to: 15
 14726                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
 14727  0023DC  010F               	movlb	15	; () banked
 14728  0023DE  8130               	bsf	48,0,b	;volatile
 14729  0023E0  D002               	goto	i1l389
 14730  0023E2                     i1l388:
 14731                           
 14732                           ; BSR set to: 15
 14733                           ;inc\CANlib.h: 426: else
 14734                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
 14735  0023E2  010F               	movlb	15	; () banked
 14736  0023E4  9130               	bcf	48,0,b	;volatile
 14737  0023E6                     i1l389:
 14738                           
 14739                           ; BSR set to: 15
 14740                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
 14741  0023E6  A231               	btfss	i1CANsendMessage@flags,1,c
 14742  0023E8  D003               	goto	i1l390
 14743                           
 14744                           ; BSR set to: 15
 14745                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
 14746  0023EA  010F               	movlb	15	; () banked
 14747  0023EC  8330               	bsf	48,1,b	;volatile
 14748  0023EE  D003               	goto	i1l5655
 14749  0023F0                     i1l390:
 14750                           
 14751                           ; BSR set to: 15
 14752                           ;inc\CANlib.h: 430: else
 14753                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
 14754  0023F0  010F               	movlb	15	; () banked
 14755  0023F2  9330               	bcf	48,1,b	;volatile
 14756  0023F4  D000               	goto	i1l5655
 14757  0023F6                     i1l5655:
 14758                           
 14759                           ; BSR set to: 15
 14760                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
 14761  0023F6  C02E  FFD9         	movff	i1CANsendMessage@data,fsr2l
 14762  0023FA  C02F  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 14763  0023FE  50DF               	movf	indf2,w,c
 14764  002400  010F               	movlb	15	; () banked
 14765  002402  6F36               	movwf	54,b	;volatile
 14766                           
 14767                           ; BSR set to: 15
 14768                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
 14769  002404  EE20 F001          	lfsr	2,1
 14770  002408  502E               	movf	i1CANsendMessage@data,w,c
 14771  00240A  26D9               	addwf	fsr2l,f,c
 14772  00240C  502F               	movf	i1CANsendMessage@data+1,w,c
 14773  00240E  22DA               	addwfc	fsr2h,f,c
 14774  002410  50DF               	movf	indf2,w,c
 14775  002412  010F               	movlb	15	; () banked
 14776  002414  6F37               	movwf	55,b	;volatile
 14777                           
 14778                           ; BSR set to: 15
 14779                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
 14780  002416  EE20 F002          	lfsr	2,2
 14781  00241A  502E               	movf	i1CANsendMessage@data,w,c
 14782  00241C  26D9               	addwf	fsr2l,f,c
 14783  00241E  502F               	movf	i1CANsendMessage@data+1,w,c
 14784  002420  22DA               	addwfc	fsr2h,f,c
 14785  002422  50DF               	movf	indf2,w,c
 14786  002424  010F               	movlb	15	; () banked
 14787  002426  6F38               	movwf	56,b	;volatile
 14788                           
 14789                           ; BSR set to: 15
 14790                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
 14791  002428  EE20 F003          	lfsr	2,3
 14792  00242C  502E               	movf	i1CANsendMessage@data,w,c
 14793  00242E  26D9               	addwf	fsr2l,f,c
 14794  002430  502F               	movf	i1CANsendMessage@data+1,w,c
 14795  002432  22DA               	addwfc	fsr2h,f,c
 14796  002434  50DF               	movf	indf2,w,c
 14797  002436  010F               	movlb	15	; () banked
 14798  002438  6F39               	movwf	57,b	;volatile
 14799                           
 14800                           ; BSR set to: 15
 14801                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
 14802  00243A  EE20 F004          	lfsr	2,4
 14803  00243E  502E               	movf	i1CANsendMessage@data,w,c
 14804  002440  26D9               	addwf	fsr2l,f,c
 14805  002442  502F               	movf	i1CANsendMessage@data+1,w,c
 14806  002444  22DA               	addwfc	fsr2h,f,c
 14807  002446  50DF               	movf	indf2,w,c
 14808  002448  010F               	movlb	15	; () banked
 14809  00244A  6F3A               	movwf	58,b	;volatile
 14810                           
 14811                           ; BSR set to: 15
 14812                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
 14813  00244C  EE20 F005          	lfsr	2,5
 14814  002450  502E               	movf	i1CANsendMessage@data,w,c
 14815  002452  26D9               	addwf	fsr2l,f,c
 14816  002454  502F               	movf	i1CANsendMessage@data+1,w,c
 14817  002456  22DA               	addwfc	fsr2h,f,c
 14818  002458  50DF               	movf	indf2,w,c
 14819  00245A  010F               	movlb	15	; () banked
 14820  00245C  6F3B               	movwf	59,b	;volatile
 14821                           
 14822                           ; BSR set to: 15
 14823                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
 14824  00245E  EE20 F006          	lfsr	2,6
 14825  002462  502E               	movf	i1CANsendMessage@data,w,c
 14826  002464  26D9               	addwf	fsr2l,f,c
 14827  002466  502F               	movf	i1CANsendMessage@data+1,w,c
 14828  002468  22DA               	addwfc	fsr2h,f,c
 14829  00246A  50DF               	movf	indf2,w,c
 14830  00246C  010F               	movlb	15	; () banked
 14831  00246E  6F3C               	movwf	60,b	;volatile
 14832                           
 14833                           ; BSR set to: 15
 14834                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
 14835  002470  EE20 F007          	lfsr	2,7
 14836  002474  502E               	movf	i1CANsendMessage@data,w,c
 14837  002476  26D9               	addwf	fsr2l,f,c
 14838  002478  502F               	movf	i1CANsendMessage@data+1,w,c
 14839  00247A  22DA               	addwfc	fsr2h,f,c
 14840  00247C  50DF               	movf	indf2,w,c
 14841  00247E  010F               	movlb	15	; () banked
 14842  002480  6F3D               	movwf	61,b	;volatile
 14843                           
 14844                           ; BSR set to: 15
 14845                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
 14846  002482  010F               	movlb	15	; () banked
 14847  002484  8730               	bsf	48,3,b	;volatile
 14848                           
 14849                           ; BSR set to: 15
 14850                           ;inc\CANlib.h: 444: return;
 14851  002486  0012               	return	
 14852  002488                     i1l378:
 14853                           
 14854                           ; BSR set to: 15
 14855                           ;inc\CANlib.h: 445: }
 14856                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
 14857  002488  010F               	movlb	15	; () banked
 14858  00248A  B720               	btfsc	32,3,b	;volatile
 14859  00248C  0012               	return	
 14860                           
 14861                           ; BSR set to: 15
 14862                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
 14863  00248E  C030  FF25         	movff	i1CANsendMessage@dataLength,3877	;volatile
 14864                           
 14865                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
 14866  002492  AC31               	btfss	i1CANsendMessage@flags,6,c
 14867  002494  D003               	goto	i1l393
 14868                           
 14869                           ; BSR set to: 15
 14870                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
 14871  002496  010F               	movlb	15	; () banked
 14872  002498  8D25               	bsf	37,6,b	;volatile
 14873  00249A  D002               	goto	i1l394
 14874  00249C                     i1l393:
 14875                           
 14876                           ; BSR set to: 15
 14877                           ;inc\CANlib.h: 454: else
 14878                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
 14879  00249C  010F               	movlb	15	; () banked
 14880  00249E  9D25               	bcf	37,6,b	;volatile
 14881  0024A0                     i1l394:
 14882                           
 14883                           ; BSR set to: 15
 14884                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
 14885  0024A0  A631               	btfss	i1CANsendMessage@flags,3,c
 14886  0024A2  D067               	goto	i1l395
 14887                           
 14888                           ; BSR set to: 15
 14889                           ;inc\CANlib.h: 458: {
 14890                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
 14891  0024A4  502A               	movf	i1CANsendMessage@identifier,w,c
 14892  0024A6  6E36               	movwf	i1CANsendMessage@tamp,c
 14893  0024A8  6A37               	clrf	i1CANsendMessage@tamp+1,c
 14894  0024AA  6A38               	clrf	i1CANsendMessage@tamp+2,c
 14895  0024AC  6A39               	clrf	i1CANsendMessage@tamp+3,c
 14896                           
 14897                           ; BSR set to: 15
 14898                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
 14899  0024AE  C036  FF24         	movff	i1CANsendMessage@tamp,3876	;volatile
 14900                           
 14901                           ; BSR set to: 15
 14902                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
 14903  0024B2  0E00               	movlw	0
 14904  0024B4  142A               	andwf	i1CANsendMessage@identifier,w,c
 14905  0024B6  6E36               	movwf	i1CANsendMessage@tamp,c
 14906  0024B8  0EFF               	movlw	255
 14907  0024BA  142B               	andwf	i1CANsendMessage@identifier+1,w,c
 14908  0024BC  6E37               	movwf	i1CANsendMessage@tamp+1,c
 14909  0024BE  0E00               	movlw	0
 14910  0024C0  142C               	andwf	i1CANsendMessage@identifier+2,w,c
 14911  0024C2  6E38               	movwf	i1CANsendMessage@tamp+2,c
 14912  0024C4  0E00               	movlw	0
 14913  0024C6  142D               	andwf	i1CANsendMessage@identifier+3,w,c
 14914  0024C8  6E39               	movwf	i1CANsendMessage@tamp+3,c
 14915                           
 14916                           ; BSR set to: 15
 14917                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
 14918  0024CA  C036  F032         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14919  0024CE  C037  F033         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14920  0024D2  C038  F034         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14921  0024D6  C039  F035         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14922  0024DA  C033  F032         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14923  0024DE  C034  F033         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14924  0024E2  C035  F034         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14925  0024E6  6A35               	clrf	??i1_CANsendMessage+3,c
 14926  0024E8  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14927  0024EC  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14928  0024F0  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14929  0024F4  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14930                           
 14931                           ; BSR set to: 15
 14932                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
 14933  0024F8  C036  FF23         	movff	i1CANsendMessage@tamp,3875	;volatile
 14934                           
 14935                           ; BSR set to: 15
 14936                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
 14937  0024FC  0E00               	movlw	0
 14938  0024FE  010F               	movlb	15	; () banked
 14939  002500  6F22               	movwf	34,b	;volatile
 14940                           
 14941                           ; BSR set to: 15
 14942                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
 14943  002502  010F               	movlb	15	; () banked
 14944  002504  8722               	bsf	34,3,b	;volatile
 14945                           
 14946                           ; BSR set to: 15
 14947                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
 14948  002506  A02C               	btfss	i1CANsendMessage@identifier+2,0,c
 14949  002508  D002               	goto	i1l396
 14950                           
 14951                           ; BSR set to: 15
 14952                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
 14953  00250A  010F               	movlb	15	; () banked
 14954  00250C  8122               	bsf	34,0,b	;volatile
 14955  00250E                     i1l396:
 14956                           
 14957                           ; BSR set to: 15
 14958                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
 14959  00250E  A22C               	btfss	i1CANsendMessage@identifier+2,1,c
 14960  002510  D002               	goto	i1l397
 14961                           
 14962                           ; BSR set to: 15
 14963                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
 14964  002512  010F               	movlb	15	; () banked
 14965  002514  8322               	bsf	34,1,b	;volatile
 14966  002516                     i1l397:
 14967                           
 14968                           ; BSR set to: 15
 14969                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
 14970  002516  A42C               	btfss	i1CANsendMessage@identifier+2,2,c
 14971  002518  D002               	goto	i1l398
 14972                           
 14973                           ; BSR set to: 15
 14974                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
 14975  00251A  010F               	movlb	15	; () banked
 14976  00251C  8B22               	bsf	34,5,b	;volatile
 14977  00251E                     i1l398:
 14978                           
 14979                           ; BSR set to: 15
 14980                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
 14981  00251E  A62C               	btfss	i1CANsendMessage@identifier+2,3,c
 14982  002520  D002               	goto	i1l399
 14983                           
 14984                           ; BSR set to: 15
 14985                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
 14986  002522  010F               	movlb	15	; () banked
 14987  002524  8D22               	bsf	34,6,b	;volatile
 14988  002526                     i1l399:
 14989                           
 14990                           ; BSR set to: 15
 14991                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
 14992  002526  A82C               	btfss	i1CANsendMessage@identifier+2,4,c
 14993  002528  D003               	goto	i1l5705
 14994                           
 14995                           ; BSR set to: 15
 14996                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
 14997  00252A  010F               	movlb	15	; () banked
 14998  00252C  8F22               	bsf	34,7,b	;volatile
 14999  00252E  D000               	goto	i1l5705
 15000  002530                     i1l5705:
 15001                           
 15002                           ; BSR set to: 15
 15003                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
 15004  002530  C02A  F032         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15005  002534  C02B  F033         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15006  002538  C02C  F034         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15007  00253C  C02D  F035         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15008  002540  0E16               	movlw	22
 15009  002542  D005               	goto	i1u691_20
 15010  002544                     i1u691_25:
 15011  002544  90D8               	bcf	status,0,c
 15012  002546  3235               	rrcf	??i1_CANsendMessage+3,f,c
 15013  002548  3234               	rrcf	??i1_CANsendMessage+2,f,c
 15014  00254A  3233               	rrcf	??i1_CANsendMessage+1,f,c
 15015  00254C  3232               	rrcf	??i1_CANsendMessage,f,c
 15016  00254E                     i1u691_20:
 15017  00254E  2EE8               	decfsz	wreg,f,c
 15018  002550  D7F9               	goto	i1u691_25
 15019  002552  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15020  002556  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15021  00255A  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15022  00255E  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15023                           
 15024                           ; BSR set to: 15
 15025                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
 15026  002562  5036               	movf	i1CANsendMessage@tamp,w,c
 15027  002564  6E36               	movwf	i1CANsendMessage@tamp,c
 15028  002566  6A37               	clrf	i1CANsendMessage@tamp+1,c
 15029  002568  6A38               	clrf	i1CANsendMessage@tamp+2,c
 15030  00256A  6A39               	clrf	i1CANsendMessage@tamp+3,c
 15031                           
 15032                           ; BSR set to: 15
 15033                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
 15034  00256C  C036  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15035                           
 15036                           ;inc\CANlib.h: 483: }
 15037  002570  D04E               	goto	i1l5725
 15038  002572                     i1l395:
 15039                           
 15040                           ; BSR set to: 15
 15041                           ;inc\CANlib.h: 485: else
 15042                           ;inc\CANlib.h: 487: {
 15043                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
 15044  002572  010F               	movlb	15	; () banked
 15045  002574  9722               	bcf	34,3,b	;volatile
 15046                           
 15047                           ; BSR set to: 15
 15048                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
 15049  002576  C02A  F032         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15050  00257A  C02B  F033         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15051  00257E  C02C  F034         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15052  002582  C02D  F035         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15053  002586  0E04               	movlw	4
 15054  002588  D005               	goto	i1u692_20
 15055  00258A                     i1u692_25:
 15056  00258A  90D8               	bcf	status,0,c
 15057  00258C  3235               	rrcf	??i1_CANsendMessage+3,f,c
 15058  00258E  3234               	rrcf	??i1_CANsendMessage+2,f,c
 15059  002590  3233               	rrcf	??i1_CANsendMessage+1,f,c
 15060  002592  3232               	rrcf	??i1_CANsendMessage,f,c
 15061  002594                     i1u692_20:
 15062  002594  2EE8               	decfsz	wreg,f,c
 15063  002596  D7F9               	goto	i1u692_25
 15064  002598  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15065  00259C  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15066  0025A0  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15067  0025A4  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15068                           
 15069                           ; BSR set to: 15
 15070                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
 15071  0025A8  5036               	movf	i1CANsendMessage@tamp,w,c
 15072  0025AA  6E36               	movwf	i1CANsendMessage@tamp,c
 15073  0025AC  6A37               	clrf	i1CANsendMessage@tamp+1,c
 15074  0025AE  6A38               	clrf	i1CANsendMessage@tamp+2,c
 15075  0025B0  6A39               	clrf	i1CANsendMessage@tamp+3,c
 15076                           
 15077                           ; BSR set to: 15
 15078                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
 15079  0025B2  C036  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15080                           
 15081                           ; BSR set to: 15
 15082                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
 15083  0025B6  0E07               	movlw	7
 15084  0025B8  142A               	andwf	i1CANsendMessage@identifier,w,c
 15085  0025BA  6E36               	movwf	i1CANsendMessage@tamp,c
 15086  0025BC  0E00               	movlw	0
 15087  0025BE  142B               	andwf	i1CANsendMessage@identifier+1,w,c
 15088  0025C0  6E37               	movwf	i1CANsendMessage@tamp+1,c
 15089  0025C2  0E00               	movlw	0
 15090  0025C4  142C               	andwf	i1CANsendMessage@identifier+2,w,c
 15091  0025C6  6E38               	movwf	i1CANsendMessage@tamp+2,c
 15092  0025C8  0E00               	movlw	0
 15093  0025CA  142D               	andwf	i1CANsendMessage@identifier+3,w,c
 15094  0025CC  6E39               	movwf	i1CANsendMessage@tamp+3,c
 15095                           
 15096                           ; BSR set to: 15
 15097                           ;inc\CANlib.h: 495: tamp = tamp << 5;
 15098  0025CE  C036  F032         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 15099  0025D2  C037  F033         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 15100  0025D6  C038  F034         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 15101  0025DA  C039  F035         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 15102  0025DE  0E05               	movlw	5
 15103  0025E0                     i1u693_25:
 15104  0025E0  90D8               	bcf	status,0,c
 15105  0025E2  3632               	rlcf	??i1_CANsendMessage,f,c
 15106  0025E4  3633               	rlcf	??i1_CANsendMessage+1,f,c
 15107  0025E6  3634               	rlcf	??i1_CANsendMessage+2,f,c
 15108  0025E8  3635               	rlcf	??i1_CANsendMessage+3,f,c
 15109  0025EA  2EE8               	decfsz	wreg,f,c
 15110  0025EC  D7F9               	goto	i1u693_25
 15111  0025EE  C032  F036         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15112  0025F2  C033  F037         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15113  0025F6  C034  F038         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15114  0025FA  C035  F039         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15115                           
 15116                           ; BSR set to: 15
 15117                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
 15118  0025FE  010F               	movlb	15	; () banked
 15119  002600  5122               	movf	34,w,b	;volatile
 15120  002602  0B1F               	andlw	31
 15121  002604  010F               	movlb	15	; () banked
 15122  002606  6F22               	movwf	34,b	;volatile
 15123                           
 15124                           ; BSR set to: 15
 15125                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
 15126  002608  C036  FF22         	movff	i1CANsendMessage@tamp,3874	;volatile
 15127  00260C  D000               	goto	i1l5725
 15128  00260E                     i1l5725:
 15129                           
 15130                           ; BSR set to: 15
 15131                           ;inc\CANlib.h: 498: }
 15132                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
 15133  00260E  A031               	btfss	i1CANsendMessage@flags,0,c
 15134  002610  D003               	goto	i1l402
 15135                           
 15136                           ; BSR set to: 15
 15137                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
 15138  002612  010F               	movlb	15	; () banked
 15139  002614  8120               	bsf	32,0,b	;volatile
 15140  002616  D002               	goto	i1l403
 15141  002618                     i1l402:
 15142                           
 15143                           ; BSR set to: 15
 15144                           ;inc\CANlib.h: 502: else
 15145                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
 15146  002618  010F               	movlb	15	; () banked
 15147  00261A  9120               	bcf	32,0,b	;volatile
 15148  00261C                     i1l403:
 15149                           
 15150                           ; BSR set to: 15
 15151                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
 15152  00261C  A231               	btfss	i1CANsendMessage@flags,1,c
 15153  00261E  D003               	goto	i1l404
 15154                           
 15155                           ; BSR set to: 15
 15156                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
 15157  002620  010F               	movlb	15	; () banked
 15158  002622  8320               	bsf	32,1,b	;volatile
 15159  002624  D003               	goto	i1l5731
 15160  002626                     i1l404:
 15161                           
 15162                           ; BSR set to: 15
 15163                           ;inc\CANlib.h: 506: else
 15164                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
 15165  002626  010F               	movlb	15	; () banked
 15166  002628  9320               	bcf	32,1,b	;volatile
 15167  00262A  D000               	goto	i1l5731
 15168  00262C                     i1l5731:
 15169                           
 15170                           ; BSR set to: 15
 15171                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
 15172  00262C  C02E  FFD9         	movff	i1CANsendMessage@data,fsr2l
 15173  002630  C02F  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 15174  002634  50DF               	movf	indf2,w,c
 15175  002636  010F               	movlb	15	; () banked
 15176  002638  6F26               	movwf	38,b	;volatile
 15177                           
 15178                           ; BSR set to: 15
 15179                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
 15180  00263A  EE20 F001          	lfsr	2,1
 15181  00263E  502E               	movf	i1CANsendMessage@data,w,c
 15182  002640  26D9               	addwf	fsr2l,f,c
 15183  002642  502F               	movf	i1CANsendMessage@data+1,w,c
 15184  002644  22DA               	addwfc	fsr2h,f,c
 15185  002646  50DF               	movf	indf2,w,c
 15186  002648  010F               	movlb	15	; () banked
 15187  00264A  6F27               	movwf	39,b	;volatile
 15188                           
 15189                           ; BSR set to: 15
 15190                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
 15191  00264C  EE20 F002          	lfsr	2,2
 15192  002650  502E               	movf	i1CANsendMessage@data,w,c
 15193  002652  26D9               	addwf	fsr2l,f,c
 15194  002654  502F               	movf	i1CANsendMessage@data+1,w,c
 15195  002656  22DA               	addwfc	fsr2h,f,c
 15196  002658  50DF               	movf	indf2,w,c
 15197  00265A  010F               	movlb	15	; () banked
 15198  00265C  6F28               	movwf	40,b	;volatile
 15199                           
 15200                           ; BSR set to: 15
 15201                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
 15202  00265E  EE20 F003          	lfsr	2,3
 15203  002662  502E               	movf	i1CANsendMessage@data,w,c
 15204  002664  26D9               	addwf	fsr2l,f,c
 15205  002666  502F               	movf	i1CANsendMessage@data+1,w,c
 15206  002668  22DA               	addwfc	fsr2h,f,c
 15207  00266A  50DF               	movf	indf2,w,c
 15208  00266C  010F               	movlb	15	; () banked
 15209  00266E  6F29               	movwf	41,b	;volatile
 15210                           
 15211                           ; BSR set to: 15
 15212                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
 15213  002670  EE20 F004          	lfsr	2,4
 15214  002674  502E               	movf	i1CANsendMessage@data,w,c
 15215  002676  26D9               	addwf	fsr2l,f,c
 15216  002678  502F               	movf	i1CANsendMessage@data+1,w,c
 15217  00267A  22DA               	addwfc	fsr2h,f,c
 15218  00267C  50DF               	movf	indf2,w,c
 15219  00267E  010F               	movlb	15	; () banked
 15220  002680  6F2A               	movwf	42,b	;volatile
 15221                           
 15222                           ; BSR set to: 15
 15223                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
 15224  002682  EE20 F005          	lfsr	2,5
 15225  002686  502E               	movf	i1CANsendMessage@data,w,c
 15226  002688  26D9               	addwf	fsr2l,f,c
 15227  00268A  502F               	movf	i1CANsendMessage@data+1,w,c
 15228  00268C  22DA               	addwfc	fsr2h,f,c
 15229  00268E  50DF               	movf	indf2,w,c
 15230  002690  010F               	movlb	15	; () banked
 15231  002692  6F2B               	movwf	43,b	;volatile
 15232                           
 15233                           ; BSR set to: 15
 15234                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
 15235  002694  EE20 F006          	lfsr	2,6
 15236  002698  502E               	movf	i1CANsendMessage@data,w,c
 15237  00269A  26D9               	addwf	fsr2l,f,c
 15238  00269C  502F               	movf	i1CANsendMessage@data+1,w,c
 15239  00269E  22DA               	addwfc	fsr2h,f,c
 15240  0026A0  50DF               	movf	indf2,w,c
 15241  0026A2  010F               	movlb	15	; () banked
 15242  0026A4  6F2C               	movwf	44,b	;volatile
 15243                           
 15244                           ; BSR set to: 15
 15245                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
 15246  0026A6  EE20 F007          	lfsr	2,7
 15247  0026AA  502E               	movf	i1CANsendMessage@data,w,c
 15248  0026AC  26D9               	addwf	fsr2l,f,c
 15249  0026AE  502F               	movf	i1CANsendMessage@data+1,w,c
 15250  0026B0  22DA               	addwfc	fsr2h,f,c
 15251  0026B2  50DF               	movf	indf2,w,c
 15252  0026B4  010F               	movlb	15	; () banked
 15253  0026B6  6F2D               	movwf	45,b	;volatile
 15254                           
 15255                           ; BSR set to: 15
 15256                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
 15257  0026B8  010F               	movlb	15	; () banked
 15258  0026BA  8720               	bsf	32,3,b	;volatile
 15259                           
 15260                           ; BSR set to: 15
 15261                           ;inc\CANlib.h: 520: return;
 15262  0026BC  0012               	return	
 15263                           
 15264                           ; BSR set to: 15
 15265                           
 15266                           ; BSR set to: 15
 15267  0026BE  0012               	return		;funcret
 15268  0026C0                     __end_ofi1_CANsendMessage:
 15269                           	opt stack 0
 15270                           pclatu	equ	0xFFB
 15271                           pclath	equ	0xFFA
 15272                           tblptru	equ	0xFF8
 15273                           tblptrh	equ	0xFF7
 15274                           tblptrl	equ	0xFF6
 15275                           tablat	equ	0xFF5
 15276                           prodh	equ	0xFF4
 15277                           prodl	equ	0xFF3
 15278                           intcon	equ	0xFF2
 15279                           intcon2	equ	0xFF1
 15280                           postinc0	equ	0xFEE
 15281                           fsr0h	equ	0xFEA
 15282                           fsr0l	equ	0xFE9
 15283                           wreg	equ	0xFE8
 15284                           indf1	equ	0xFE7
 15285                           postdec1	equ	0xFE5
 15286                           fsr1h	equ	0xFE2
 15287                           fsr1l	equ	0xFE1
 15288                           bsr	equ	0xFE0
 15289                           indf2	equ	0xFDF
 15290                           postinc2	equ	0xFDE
 15291                           postdec2	equ	0xFDD
 15292                           plusw2	equ	0xFDB
 15293                           fsr2h	equ	0xFDA
 15294                           fsr2l	equ	0xFD9
 15295                           status	equ	0xFD8
 15296                           
 15297 ;; *************** function _CANreceiveMessage *****************
 15298 ;; Defined at:
 15299 ;;		line 528 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 15300 ;; Parameters:    Size  Location     Type
 15301 ;;  msg             2    0[COMRAM] PTR struct .
 15302 ;;		 -> msg(15), 
 15303 ;; Auto vars:     Size  Location     Type
 15304 ;;  tamp            1   11[COMRAM] unsigned char 
 15305 ;;  error           1   10[COMRAM] unsigned char 
 15306 ;; Return value:  Size  Location     Type
 15307 ;;                  1    wreg      unsigned char 
 15308 ;; Registers used:
 15309 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15310 ;; Tracked objects:
 15311 ;;		On entry : 0/0
 15312 ;;		On exit  : 0/0
 15313 ;;		Unchanged: 0/0
 15314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15315 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15316 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15317 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15318 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15319 ;;Total ram usage:       12 bytes
 15320 ;; Hardware stack levels used:    1
 15321 ;; Hardware stack levels required when called:    2
 15322 ;; This function calls:
 15323 ;;		Nothing
 15324 ;; This function is called by:
 15325 ;;		_ISR_Bassa
 15326 ;; This function uses a non-reentrant model
 15327 ;;
 15328                           
 15329                           	psect	text42
 15330  002C4A                     __ptext42:
 15331                           	opt stack 0
 15332  002C4A                     _CANreceiveMessage:
 15333                           	opt stack 20
 15334                           
 15335                           ;inc\CANlib.h: 530: BYTE tamp;
 15336                           ;inc\CANlib.h: 531: BYTE error = 0;
 15337                           
 15338                           ; BSR set to: 15
 15339                           ;incstack = 0
 15340  002C4A  0E00               	movlw	0
 15341  002C4C  6E34               	movwf	CANreceiveMessage@error,c
 15342                           
 15343                           ;inc\CANlib.h: 533: if (COMSTATbits.RXB0OVFL == 0x01)
 15344  002C4E  AE74               	btfss	3956,7,c	;volatile
 15345  002C50  D002               	goto	i1l5097
 15346                           
 15347                           ;inc\CANlib.h: 534: error |= CAN_RX_BUFFER_1_OVFL;
 15348  002C52  8034               	bsf	CANreceiveMessage@error,0,c
 15349  002C54  D000               	goto	i1l5097
 15350  002C56                     i1l5097:
 15351                           
 15352                           ;inc\CANlib.h: 536: if (COMSTATbits.RXB1OVFL == 0x01)
 15353  002C56  AC74               	btfss	3956,6,c	;volatile
 15354  002C58  D002               	goto	i1l5101
 15355                           
 15356                           ;inc\CANlib.h: 537: error |= CAN_RX_BUFFER_2_OVFL;
 15357  002C5A  8234               	bsf	CANreceiveMessage@error,1,c
 15358  002C5C  D000               	goto	i1l5101
 15359  002C5E                     i1l5101:
 15360                           
 15361                           ;inc\CANlib.h: 540: if (RXB1CONbits.RXFUL ==0x01)
 15362  002C5E  010F               	movlb	15	; () banked
 15363  002C60  AF50               	btfss	80,7,b	;volatile
 15364  002C62  D149               	goto	i1l410
 15365                           
 15366                           ; BSR set to: 15
 15367                           ;inc\CANlib.h: 541: {
 15368                           ;inc\CANlib.h: 542: msg->identifier = 0;
 15369  002C64  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15370  002C68  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15371  002C6C  6ADE               	clrf	postinc2,c
 15372  002C6E  6ADE               	clrf	postinc2,c
 15373  002C70  6ADE               	clrf	postinc2,c
 15374  002C72  6ADD               	clrf	postdec2,c
 15375                           
 15376                           ; BSR set to: 15
 15377                           ;inc\CANlib.h: 543: msg->data[0] =RXB1D0;
 15378  002C74  EE20 F004          	lfsr	2,4
 15379  002C78  502A               	movf	CANreceiveMessage@msg,w,c
 15380  002C7A  26D9               	addwf	fsr2l,f,c
 15381  002C7C  502B               	movf	CANreceiveMessage@msg+1,w,c
 15382  002C7E  22DA               	addwfc	fsr2h,f,c
 15383  002C80  CF56 FFDF          	movff	3926,indf2	;volatile
 15384                           
 15385                           ; BSR set to: 15
 15386                           ;inc\CANlib.h: 544: msg->data[1] =RXB1D1;
 15387  002C84  EE20 F005          	lfsr	2,5
 15388  002C88  502A               	movf	CANreceiveMessage@msg,w,c
 15389  002C8A  26D9               	addwf	fsr2l,f,c
 15390  002C8C  502B               	movf	CANreceiveMessage@msg+1,w,c
 15391  002C8E  22DA               	addwfc	fsr2h,f,c
 15392  002C90  CF57 FFDF          	movff	3927,indf2	;volatile
 15393                           
 15394                           ; BSR set to: 15
 15395                           ;inc\CANlib.h: 545: msg->data[2] =RXB1D2;
 15396  002C94  EE20 F006          	lfsr	2,6
 15397  002C98  502A               	movf	CANreceiveMessage@msg,w,c
 15398  002C9A  26D9               	addwf	fsr2l,f,c
 15399  002C9C  502B               	movf	CANreceiveMessage@msg+1,w,c
 15400  002C9E  22DA               	addwfc	fsr2h,f,c
 15401  002CA0  CF58 FFDF          	movff	3928,indf2	;volatile
 15402                           
 15403                           ; BSR set to: 15
 15404                           ;inc\CANlib.h: 546: msg->data[3] =RXB1D3;
 15405  002CA4  EE20 F007          	lfsr	2,7
 15406  002CA8  502A               	movf	CANreceiveMessage@msg,w,c
 15407  002CAA  26D9               	addwf	fsr2l,f,c
 15408  002CAC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15409  002CAE  22DA               	addwfc	fsr2h,f,c
 15410  002CB0  CF59 FFDF          	movff	3929,indf2	;volatile
 15411                           
 15412                           ; BSR set to: 15
 15413                           ;inc\CANlib.h: 547: msg->data[4] =RXB1D4;
 15414  002CB4  EE20 F008          	lfsr	2,8
 15415  002CB8  502A               	movf	CANreceiveMessage@msg,w,c
 15416  002CBA  26D9               	addwf	fsr2l,f,c
 15417  002CBC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15418  002CBE  22DA               	addwfc	fsr2h,f,c
 15419  002CC0  CF5A FFDF          	movff	3930,indf2	;volatile
 15420                           
 15421                           ; BSR set to: 15
 15422                           ;inc\CANlib.h: 548: msg->data[5] =RXB1D5;
 15423  002CC4  EE20 F009          	lfsr	2,9
 15424  002CC8  502A               	movf	CANreceiveMessage@msg,w,c
 15425  002CCA  26D9               	addwf	fsr2l,f,c
 15426  002CCC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15427  002CCE  22DA               	addwfc	fsr2h,f,c
 15428  002CD0  CF5B FFDF          	movff	3931,indf2	;volatile
 15429                           
 15430                           ; BSR set to: 15
 15431                           ;inc\CANlib.h: 549: msg->data[6] =RXB1D6;
 15432  002CD4  EE20 F00A          	lfsr	2,10
 15433  002CD8  502A               	movf	CANreceiveMessage@msg,w,c
 15434  002CDA  26D9               	addwf	fsr2l,f,c
 15435  002CDC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15436  002CDE  22DA               	addwfc	fsr2h,f,c
 15437  002CE0  CF5C FFDF          	movff	3932,indf2	;volatile
 15438                           
 15439                           ; BSR set to: 15
 15440                           ;inc\CANlib.h: 550: msg->data[7] =RXB1D7;
 15441  002CE4  EE20 F00B          	lfsr	2,11
 15442  002CE8  502A               	movf	CANreceiveMessage@msg,w,c
 15443  002CEA  26D9               	addwf	fsr2l,f,c
 15444  002CEC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15445  002CEE  22DA               	addwfc	fsr2h,f,c
 15446  002CF0  CF5D FFDF          	movff	3933,indf2	;volatile
 15447                           
 15448                           ; BSR set to: 15
 15449                           ;inc\CANlib.h: 552: msg->RTR = RXB1DLCbits.RXRTR;
 15450  002CF4  EE20 F00E          	lfsr	2,14
 15451  002CF8  502A               	movf	CANreceiveMessage@msg,w,c
 15452  002CFA  26D9               	addwf	fsr2l,f,c
 15453  002CFC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15454  002CFE  22DA               	addwfc	fsr2h,f,c
 15455  002D00  010F               	movlb	15	; () banked
 15456  002D02  AD55               	btfss	85,6,b	;volatile
 15457  002D04  D002               	goto	i1u600_20
 15458  002D06  0E01               	movlw	1
 15459  002D08  D001               	goto	i1u600_26
 15460  002D0A                     i1u600_20:
 15461  002D0A  0E00               	movlw	0
 15462  002D0C                     i1u600_26:
 15463  002D0C  6EDF               	movwf	indf2,c
 15464                           
 15465                           ; BSR set to: 15
 15466                           ;inc\CANlib.h: 554: msg->length = RXB1DLC & 0x0F;
 15467  002D0E  EE20 F00D          	lfsr	2,13
 15468  002D12  502A               	movf	CANreceiveMessage@msg,w,c
 15469  002D14  26D9               	addwf	fsr2l,f,c
 15470  002D16  502B               	movf	CANreceiveMessage@msg+1,w,c
 15471  002D18  22DA               	addwfc	fsr2h,f,c
 15472  002D1A  010F               	movlb	15	; () banked
 15473  002D1C  5155               	movf	85,w,b	;volatile
 15474  002D1E  0B0F               	andlw	15
 15475  002D20  6EDF               	movwf	indf2,c
 15476                           
 15477                           ; BSR set to: 15
 15478                           ;inc\CANlib.h: 556: msg->type = RXB1SIDLbits.EXID;
 15479  002D22  EE20 F00C          	lfsr	2,12
 15480  002D26  502A               	movf	CANreceiveMessage@msg,w,c
 15481  002D28  26D9               	addwf	fsr2l,f,c
 15482  002D2A  502B               	movf	CANreceiveMessage@msg+1,w,c
 15483  002D2C  22DA               	addwfc	fsr2h,f,c
 15484  002D2E  010F               	movlb	15	; () banked
 15485  002D30  A752               	btfss	82,3,b	;volatile
 15486  002D32  D002               	goto	i1u601_20
 15487  002D34  0E01               	movlw	1
 15488  002D36  D001               	goto	i1u601_26
 15489  002D38                     i1u601_20:
 15490  002D38  0E00               	movlw	0
 15491  002D3A                     i1u601_26:
 15492  002D3A  6EDF               	movwf	indf2,c
 15493                           
 15494                           ; BSR set to: 15
 15495                           ;inc\CANlib.h: 558: if (RXB1SIDLbits.EXID == 0)
 15496  002D3C  010F               	movlb	15	; () banked
 15497  002D3E  B752               	btfsc	82,3,b	;volatile
 15498  002D40  D044               	goto	i1l5135
 15499                           
 15500                           ; BSR set to: 15
 15501                           ;inc\CANlib.h: 559: {
 15502                           ;inc\CANlib.h: 560: msg->identifier = ((unsigned long)RXB1SIDH)<< 3;
 15503  002D42  CF51 F02C          	movff	3921,??_CANreceiveMessage	;volatile
 15504  002D46  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15505  002D48  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15506  002D4A  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15507  002D4C  0E03               	movlw	3
 15508  002D4E                     i1u603_25:
 15509  002D4E  90D8               	bcf	status,0,c
 15510  002D50  362C               	rlcf	??_CANreceiveMessage,f,c
 15511  002D52  362D               	rlcf	??_CANreceiveMessage+1,f,c
 15512  002D54  362E               	rlcf	??_CANreceiveMessage+2,f,c
 15513  002D56  362F               	rlcf	??_CANreceiveMessage+3,f,c
 15514  002D58  2EE8               	decfsz	wreg,f,c
 15515  002D5A  D7F9               	goto	i1u603_25
 15516  002D5C  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15517  002D60  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15518  002D64  C02C  FFDE         	movff	??_CANreceiveMessage,postinc2
 15519  002D68  C02D  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15520  002D6C  C02E  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15521  002D70  C02F  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15522                           
 15523                           ; BSR set to: 15
 15524                           ;inc\CANlib.h: 561: tamp = (RXB1SIDL >> 5 ) & 0x07;
 15525  002D74  010F               	movlb	15	; () banked
 15526  002D76  3952               	swapf	82,w,b	;volatile
 15527  002D78  42E8               	rrncf	wreg,f,c
 15528  002D7A  0B07               	andlw	7
 15529  002D7C  0B07               	andlw	7
 15530  002D7E  6E35               	movwf	CANreceiveMessage@tamp,c
 15531                           
 15532                           ; BSR set to: 15
 15533                           ;inc\CANlib.h: 562: msg->identifier = msg->identifier + tamp;
 15534  002D80  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15535  002D84  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15536  002D88  CFDE F02C          	movff	postinc2,??_CANreceiveMessage
 15537  002D8C  CFDE F02D          	movff	postinc2,??_CANreceiveMessage+1
 15538  002D90  CFDE F02E          	movff	postinc2,??_CANreceiveMessage+2
 15539  002D94  CFDE F02F          	movff	postinc2,??_CANreceiveMessage+3
 15540  002D98  5035               	movf	CANreceiveMessage@tamp,w,c
 15541  002D9A  242C               	addwf	??_CANreceiveMessage,w,c
 15542  002D9C  6E30               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 15543  002D9E  0E00               	movlw	0
 15544  002DA0  202D               	addwfc	??_CANreceiveMessage+1,w,c
 15545  002DA2  6E31               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 15546  002DA4  0E00               	movlw	0
 15547  002DA6  202E               	addwfc	??_CANreceiveMessage+2,w,c
 15548  002DA8  6E32               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 15549  002DAA  0E00               	movlw	0
 15550  002DAC  202F               	addwfc	??_CANreceiveMessage+3,w,c
 15551  002DAE  6E33               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 15552  002DB0  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15553  002DB4  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15554  002DB8  C030  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 15555  002DBC  C031  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 15556  002DC0  C032  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 15557  002DC4  C033  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 15558                           
 15559                           ;inc\CANlib.h: 563: }
 15560  002DC8  D093               	goto	i1l5161
 15561  002DCA                     i1l5135:
 15562                           
 15563                           ; BSR set to: 15
 15564                           ;inc\CANlib.h: 564: else
 15565                           ;inc\CANlib.h: 565: {
 15566                           ;inc\CANlib.h: 566: msg->identifier = (unsigned long) RXB1EIDL;
 15567  002DCA  CF54 F02C          	movff	3924,??_CANreceiveMessage	;volatile
 15568  002DCE  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15569  002DD0  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15570  002DD2  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15571  002DD4  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15572  002DD8  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15573  002DDC  C02C  FFDE         	movff	??_CANreceiveMessage,postinc2
 15574  002DE0  C02D  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15575  002DE4  C02E  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15576  002DE8  C02F  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15577                           
 15578                           ; BSR set to: 15
 15579                           ;inc\CANlib.h: 567: msg->identifier += ((unsigned long) RXB1EIDH) << 8;
 15580  002DEC  CF53 F02C          	movff	3923,??_CANreceiveMessage	;volatile
 15581  002DF0  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15582  002DF2  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15583  002DF4  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15584  002DF6  C02E  F02F         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 15585  002DFA  C02D  F02E         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 15586  002DFE  C02C  F02D         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 15587  002E02  6A2C               	clrf	??_CANreceiveMessage,c
 15588  002E04  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15589  002E08  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15590  002E0C  502C               	movf	??_CANreceiveMessage,w,c
 15591  002E0E  26DE               	addwf	postinc2,f,c
 15592  002E10  502D               	movf	??_CANreceiveMessage+1,w,c
 15593  002E12  22DE               	addwfc	postinc2,f,c
 15594  002E14  502E               	movf	??_CANreceiveMessage+2,w,c
 15595  002E16  22DE               	addwfc	postinc2,f,c
 15596  002E18  502F               	movf	??_CANreceiveMessage+3,w,c
 15597  002E1A  22DE               	addwfc	postinc2,f,c
 15598                           
 15599                           ; BSR set to: 15
 15600                           ;inc\CANlib.h: 569: if (RXB1SIDLbits.EID16)
 15601  002E1C  010F               	movlb	15	; () banked
 15602  002E1E  A152               	btfss	82,0,b	;volatile
 15603  002E20  D00D               	goto	i1l5143
 15604                           
 15605                           ; BSR set to: 15
 15606                           ;inc\CANlib.h: 570: msg->identifier |= 0x00010000;
 15607  002E22  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15608  002E26  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15609  002E2A  0E00               	movlw	0
 15610  002E2C  12DE               	iorwf	postinc2,f,c
 15611  002E2E  0E00               	movlw	0
 15612  002E30  12DE               	iorwf	postinc2,f,c
 15613  002E32  0E01               	movlw	1
 15614  002E34  12DE               	iorwf	postinc2,f,c
 15615  002E36  0E00               	movlw	0
 15616  002E38  12DE               	iorwf	postinc2,f,c
 15617  002E3A  D000               	goto	i1l5143
 15618  002E3C                     i1l5143:
 15619                           
 15620                           ; BSR set to: 15
 15621                           ;inc\CANlib.h: 571: if (RXB1SIDLbits.EID17)
 15622  002E3C  010F               	movlb	15	; () banked
 15623  002E3E  A352               	btfss	82,1,b	;volatile
 15624  002E40  D00D               	goto	i1l5147
 15625                           
 15626                           ; BSR set to: 15
 15627                           ;inc\CANlib.h: 572: msg->identifier |= 0x00020000;
 15628  002E42  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15629  002E46  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15630  002E4A  0E00               	movlw	0
 15631  002E4C  12DE               	iorwf	postinc2,f,c
 15632  002E4E  0E00               	movlw	0
 15633  002E50  12DE               	iorwf	postinc2,f,c
 15634  002E52  0E02               	movlw	2
 15635  002E54  12DE               	iorwf	postinc2,f,c
 15636  002E56  0E00               	movlw	0
 15637  002E58  12DE               	iorwf	postinc2,f,c
 15638  002E5A  D000               	goto	i1l5147
 15639  002E5C                     i1l5147:
 15640                           
 15641                           ; BSR set to: 15
 15642                           ;inc\CANlib.h: 573: if (RXB1SIDLbits.SID0)
 15643  002E5C  010F               	movlb	15	; () banked
 15644  002E5E  AB52               	btfss	82,5,b	;volatile
 15645  002E60  D00D               	goto	i1l5151
 15646                           
 15647                           ; BSR set to: 15
 15648                           ;inc\CANlib.h: 574: msg->identifier |= 0x00040000;
 15649  002E62  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15650  002E66  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15651  002E6A  0E00               	movlw	0
 15652  002E6C  12DE               	iorwf	postinc2,f,c
 15653  002E6E  0E00               	movlw	0
 15654  002E70  12DE               	iorwf	postinc2,f,c
 15655  002E72  0E04               	movlw	4
 15656  002E74  12DE               	iorwf	postinc2,f,c
 15657  002E76  0E00               	movlw	0
 15658  002E78  12DE               	iorwf	postinc2,f,c
 15659  002E7A  D000               	goto	i1l5151
 15660  002E7C                     i1l5151:
 15661                           
 15662                           ; BSR set to: 15
 15663                           ;inc\CANlib.h: 575: if (RXB1SIDLbits.SID1)
 15664  002E7C  010F               	movlb	15	; () banked
 15665  002E7E  AD52               	btfss	82,6,b	;volatile
 15666  002E80  D00D               	goto	i1l5155
 15667                           
 15668                           ; BSR set to: 15
 15669                           ;inc\CANlib.h: 576: msg->identifier |= 0x00080000;
 15670  002E82  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15671  002E86  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15672  002E8A  0E00               	movlw	0
 15673  002E8C  12DE               	iorwf	postinc2,f,c
 15674  002E8E  0E00               	movlw	0
 15675  002E90  12DE               	iorwf	postinc2,f,c
 15676  002E92  0E08               	movlw	8
 15677  002E94  12DE               	iorwf	postinc2,f,c
 15678  002E96  0E00               	movlw	0
 15679  002E98  12DE               	iorwf	postinc2,f,c
 15680  002E9A  D000               	goto	i1l5155
 15681  002E9C                     i1l5155:
 15682                           
 15683                           ; BSR set to: 15
 15684                           ;inc\CANlib.h: 577: if (RXB1SIDLbits.SID2)
 15685  002E9C  010F               	movlb	15	; () banked
 15686  002E9E  AF52               	btfss	82,7,b	;volatile
 15687  002EA0  D00D               	goto	i1l5159
 15688                           
 15689                           ; BSR set to: 15
 15690                           ;inc\CANlib.h: 578: msg->identifier |= 0x00100000;
 15691  002EA2  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15692  002EA6  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15693  002EAA  0E00               	movlw	0
 15694  002EAC  12DE               	iorwf	postinc2,f,c
 15695  002EAE  0E00               	movlw	0
 15696  002EB0  12DE               	iorwf	postinc2,f,c
 15697  002EB2  0E10               	movlw	16
 15698  002EB4  12DE               	iorwf	postinc2,f,c
 15699  002EB6  0E00               	movlw	0
 15700  002EB8  12DE               	iorwf	postinc2,f,c
 15701  002EBA  D000               	goto	i1l5159
 15702  002EBC                     i1l5159:
 15703                           
 15704                           ; BSR set to: 15
 15705                           ;inc\CANlib.h: 580: msg->identifier |= ((unsigned long) RXB1SIDH) << 21;
 15706  002EBC  CF51 F02C          	movff	3921,??_CANreceiveMessage	;volatile
 15707  002EC0  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15708  002EC2  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15709  002EC4  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15710  002EC6  0E15               	movlw	21
 15711  002EC8                     i1u609_25:
 15712  002EC8  90D8               	bcf	status,0,c
 15713  002ECA  362C               	rlcf	??_CANreceiveMessage,f,c
 15714  002ECC  362D               	rlcf	??_CANreceiveMessage+1,f,c
 15715  002ECE  362E               	rlcf	??_CANreceiveMessage+2,f,c
 15716  002ED0  362F               	rlcf	??_CANreceiveMessage+3,f,c
 15717  002ED2  2EE8               	decfsz	wreg,f,c
 15718  002ED4  D7F9               	goto	i1u609_25
 15719  002ED6  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15720  002EDA  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15721  002EDE  502C               	movf	??_CANreceiveMessage,w,c
 15722  002EE0  12DE               	iorwf	postinc2,f,c
 15723  002EE2  502D               	movf	??_CANreceiveMessage+1,w,c
 15724  002EE4  12DE               	iorwf	postinc2,f,c
 15725  002EE6  502E               	movf	??_CANreceiveMessage+2,w,c
 15726  002EE8  12DE               	iorwf	postinc2,f,c
 15727  002EEA  502F               	movf	??_CANreceiveMessage+3,w,c
 15728  002EEC  12DE               	iorwf	postinc2,f,c
 15729  002EEE  D000               	goto	i1l5161
 15730  002EF0                     i1l5161:
 15731                           
 15732                           ; BSR set to: 15
 15733                           ;inc\CANlib.h: 581: }
 15734                           ;inc\CANlib.h: 583: RXB1CONbits.RXFUL = 0x00;
 15735  002EF0  010F               	movlb	15	; () banked
 15736  002EF2  9F50               	bcf	80,7,b	;volatile
 15737                           
 15738                           ; BSR set to: 15
 15739                           ;inc\CANlib.h: 584: return (error);
 15740                           ;	Return value of _CANreceiveMessage is never used
 15741  002EF4  0012               	return	
 15742  002EF6                     i1l410:
 15743                           
 15744                           ; BSR set to: 15
 15745                           ;inc\CANlib.h: 585: }
 15746                           ;inc\CANlib.h: 587: if (RXB0CONbits.RXFUL ==0x01)
 15747  002EF6  AE60               	btfss	3936,7,c	;volatile
 15748  002EF8  0012               	return	
 15749                           
 15750                           ; BSR set to: 15
 15751                           ;inc\CANlib.h: 588: {
 15752                           ;inc\CANlib.h: 589: msg->identifier = 0;
 15753  002EFA  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15754  002EFE  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15755  002F02  6ADE               	clrf	postinc2,c
 15756  002F04  6ADE               	clrf	postinc2,c
 15757  002F06  6ADE               	clrf	postinc2,c
 15758  002F08  6ADD               	clrf	postdec2,c
 15759                           
 15760                           ; BSR set to: 15
 15761                           ;inc\CANlib.h: 590: msg->data[0] =RXB0D0;
 15762  002F0A  EE20 F004          	lfsr	2,4
 15763  002F0E  502A               	movf	CANreceiveMessage@msg,w,c
 15764  002F10  26D9               	addwf	fsr2l,f,c
 15765  002F12  502B               	movf	CANreceiveMessage@msg+1,w,c
 15766  002F14  22DA               	addwfc	fsr2h,f,c
 15767  002F16  CF66 FFDF          	movff	3942,indf2	;volatile
 15768                           
 15769                           ; BSR set to: 15
 15770                           ;inc\CANlib.h: 591: msg->data[1] =RXB0D1;
 15771  002F1A  EE20 F005          	lfsr	2,5
 15772  002F1E  502A               	movf	CANreceiveMessage@msg,w,c
 15773  002F20  26D9               	addwf	fsr2l,f,c
 15774  002F22  502B               	movf	CANreceiveMessage@msg+1,w,c
 15775  002F24  22DA               	addwfc	fsr2h,f,c
 15776  002F26  CF67 FFDF          	movff	3943,indf2	;volatile
 15777                           
 15778                           ; BSR set to: 15
 15779                           ;inc\CANlib.h: 592: msg->data[2] =RXB0D2;
 15780  002F2A  EE20 F006          	lfsr	2,6
 15781  002F2E  502A               	movf	CANreceiveMessage@msg,w,c
 15782  002F30  26D9               	addwf	fsr2l,f,c
 15783  002F32  502B               	movf	CANreceiveMessage@msg+1,w,c
 15784  002F34  22DA               	addwfc	fsr2h,f,c
 15785  002F36  CF68 FFDF          	movff	3944,indf2	;volatile
 15786                           
 15787                           ; BSR set to: 15
 15788                           ;inc\CANlib.h: 593: msg->data[3] =RXB0D3;
 15789  002F3A  EE20 F007          	lfsr	2,7
 15790  002F3E  502A               	movf	CANreceiveMessage@msg,w,c
 15791  002F40  26D9               	addwf	fsr2l,f,c
 15792  002F42  502B               	movf	CANreceiveMessage@msg+1,w,c
 15793  002F44  22DA               	addwfc	fsr2h,f,c
 15794  002F46  CF69 FFDF          	movff	3945,indf2	;volatile
 15795                           
 15796                           ; BSR set to: 15
 15797                           ;inc\CANlib.h: 594: msg->data[4] =RXB0D4;
 15798  002F4A  EE20 F008          	lfsr	2,8
 15799  002F4E  502A               	movf	CANreceiveMessage@msg,w,c
 15800  002F50  26D9               	addwf	fsr2l,f,c
 15801  002F52  502B               	movf	CANreceiveMessage@msg+1,w,c
 15802  002F54  22DA               	addwfc	fsr2h,f,c
 15803  002F56  CF6A FFDF          	movff	3946,indf2	;volatile
 15804                           
 15805                           ; BSR set to: 15
 15806                           ;inc\CANlib.h: 595: msg->data[5] =RXB0D5;
 15807  002F5A  EE20 F009          	lfsr	2,9
 15808  002F5E  502A               	movf	CANreceiveMessage@msg,w,c
 15809  002F60  26D9               	addwf	fsr2l,f,c
 15810  002F62  502B               	movf	CANreceiveMessage@msg+1,w,c
 15811  002F64  22DA               	addwfc	fsr2h,f,c
 15812  002F66  CF6B FFDF          	movff	3947,indf2	;volatile
 15813                           
 15814                           ; BSR set to: 15
 15815                           ;inc\CANlib.h: 596: msg->data[6] =RXB0D6;
 15816  002F6A  EE20 F00A          	lfsr	2,10
 15817  002F6E  502A               	movf	CANreceiveMessage@msg,w,c
 15818  002F70  26D9               	addwf	fsr2l,f,c
 15819  002F72  502B               	movf	CANreceiveMessage@msg+1,w,c
 15820  002F74  22DA               	addwfc	fsr2h,f,c
 15821  002F76  CF6C FFDF          	movff	3948,indf2	;volatile
 15822                           
 15823                           ; BSR set to: 15
 15824                           ;inc\CANlib.h: 597: msg->data[7] =RXB0D7;
 15825  002F7A  EE20 F00B          	lfsr	2,11
 15826  002F7E  502A               	movf	CANreceiveMessage@msg,w,c
 15827  002F80  26D9               	addwf	fsr2l,f,c
 15828  002F82  502B               	movf	CANreceiveMessage@msg+1,w,c
 15829  002F84  22DA               	addwfc	fsr2h,f,c
 15830  002F86  CF6D FFDF          	movff	3949,indf2	;volatile
 15831                           
 15832                           ; BSR set to: 15
 15833                           ;inc\CANlib.h: 599: msg->RTR = RXB0DLCbits.RXRTR;
 15834  002F8A  EE20 F00E          	lfsr	2,14
 15835  002F8E  502A               	movf	CANreceiveMessage@msg,w,c
 15836  002F90  26D9               	addwf	fsr2l,f,c
 15837  002F92  502B               	movf	CANreceiveMessage@msg+1,w,c
 15838  002F94  22DA               	addwfc	fsr2h,f,c
 15839  002F96  AC65               	btfss	3941,6,c	;volatile
 15840  002F98  D002               	goto	i1u611_20
 15841  002F9A  0E01               	movlw	1
 15842  002F9C  D001               	goto	i1u611_26
 15843  002F9E                     i1u611_20:
 15844  002F9E  0E00               	movlw	0
 15845  002FA0                     i1u611_26:
 15846  002FA0  6EDF               	movwf	indf2,c
 15847                           
 15848                           ; BSR set to: 15
 15849                           ;inc\CANlib.h: 601: msg->length = RXB0DLC & 0x0F;
 15850  002FA2  EE20 F00D          	lfsr	2,13
 15851  002FA6  502A               	movf	CANreceiveMessage@msg,w,c
 15852  002FA8  26D9               	addwf	fsr2l,f,c
 15853  002FAA  502B               	movf	CANreceiveMessage@msg+1,w,c
 15854  002FAC  22DA               	addwfc	fsr2h,f,c
 15855  002FAE  5065               	movf	3941,w,c	;volatile
 15856  002FB0  0B0F               	andlw	15
 15857  002FB2  6EDF               	movwf	indf2,c
 15858                           
 15859                           ; BSR set to: 15
 15860                           ;inc\CANlib.h: 603: msg->type = RXB0SIDLbits.EXID;
 15861  002FB4  EE20 F00C          	lfsr	2,12
 15862  002FB8  502A               	movf	CANreceiveMessage@msg,w,c
 15863  002FBA  26D9               	addwf	fsr2l,f,c
 15864  002FBC  502B               	movf	CANreceiveMessage@msg+1,w,c
 15865  002FBE  22DA               	addwfc	fsr2h,f,c
 15866  002FC0  A662               	btfss	3938,3,c	;volatile
 15867  002FC2  D002               	goto	i1u612_20
 15868  002FC4  0E01               	movlw	1
 15869  002FC6  D001               	goto	i1u612_26
 15870  002FC8                     i1u612_20:
 15871  002FC8  0E00               	movlw	0
 15872  002FCA                     i1u612_26:
 15873  002FCA  6EDF               	movwf	indf2,c
 15874                           
 15875                           ; BSR set to: 15
 15876                           ;inc\CANlib.h: 605: if (RXB0SIDLbits.EXID == 0)
 15877  002FCC  B662               	btfsc	3938,3,c	;volatile
 15878  002FCE  D043               	goto	i1l5197
 15879                           
 15880                           ; BSR set to: 15
 15881                           ;inc\CANlib.h: 606: {
 15882                           ;inc\CANlib.h: 607: msg->identifier = ((unsigned long)RXB0SIDH)<< 3;
 15883  002FD0  CF61 F02C          	movff	3937,??_CANreceiveMessage	;volatile
 15884  002FD4  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15885  002FD6  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15886  002FD8  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15887  002FDA  0E03               	movlw	3
 15888  002FDC                     i1u614_25:
 15889  002FDC  90D8               	bcf	status,0,c
 15890  002FDE  362C               	rlcf	??_CANreceiveMessage,f,c
 15891  002FE0  362D               	rlcf	??_CANreceiveMessage+1,f,c
 15892  002FE2  362E               	rlcf	??_CANreceiveMessage+2,f,c
 15893  002FE4  362F               	rlcf	??_CANreceiveMessage+3,f,c
 15894  002FE6  2EE8               	decfsz	wreg,f,c
 15895  002FE8  D7F9               	goto	i1u614_25
 15896  002FEA  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15897  002FEE  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15898  002FF2  C02C  FFDE         	movff	??_CANreceiveMessage,postinc2
 15899  002FF6  C02D  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15900  002FFA  C02E  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15901  002FFE  C02F  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15902                           
 15903                           ; BSR set to: 15
 15904                           ;inc\CANlib.h: 608: tamp = (RXB0SIDL >> 5 ) & 0x07;
 15905  003002  3862               	swapf	3938,w,c	;volatile
 15906  003004  42E8               	rrncf	wreg,f,c
 15907  003006  0B07               	andlw	7
 15908  003008  0B07               	andlw	7
 15909  00300A  6E35               	movwf	CANreceiveMessage@tamp,c
 15910                           
 15911                           ; BSR set to: 15
 15912                           ;inc\CANlib.h: 609: msg->identifier = msg->identifier + tamp;
 15913  00300C  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15914  003010  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15915  003014  CFDE F02C          	movff	postinc2,??_CANreceiveMessage
 15916  003018  CFDE F02D          	movff	postinc2,??_CANreceiveMessage+1
 15917  00301C  CFDE F02E          	movff	postinc2,??_CANreceiveMessage+2
 15918  003020  CFDE F02F          	movff	postinc2,??_CANreceiveMessage+3
 15919  003024  5035               	movf	CANreceiveMessage@tamp,w,c
 15920  003026  242C               	addwf	??_CANreceiveMessage,w,c
 15921  003028  6E30               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 15922  00302A  0E00               	movlw	0
 15923  00302C  202D               	addwfc	??_CANreceiveMessage+1,w,c
 15924  00302E  6E31               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 15925  003030  0E00               	movlw	0
 15926  003032  202E               	addwfc	??_CANreceiveMessage+2,w,c
 15927  003034  6E32               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 15928  003036  0E00               	movlw	0
 15929  003038  202F               	addwfc	??_CANreceiveMessage+3,w,c
 15930  00303A  6E33               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 15931  00303C  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15932  003040  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15933  003044  C030  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 15934  003048  C031  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 15935  00304C  C032  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 15936  003050  C033  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 15937                           
 15938                           ;inc\CANlib.h: 610: }
 15939  003054  D08E               	goto	i1l5223
 15940  003056                     i1l5197:
 15941                           
 15942                           ; BSR set to: 15
 15943                           ;inc\CANlib.h: 611: else
 15944                           ;inc\CANlib.h: 612: {
 15945                           ;inc\CANlib.h: 613: msg->identifier = (unsigned long) RXB0EIDL;
 15946  003056  CF64 F02C          	movff	3940,??_CANreceiveMessage	;volatile
 15947  00305A  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15948  00305C  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15949  00305E  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15950  003060  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15951  003064  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15952  003068  C02C  FFDE         	movff	??_CANreceiveMessage,postinc2
 15953  00306C  C02D  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15954  003070  C02E  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15955  003074  C02F  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15956                           
 15957                           ; BSR set to: 15
 15958                           ;inc\CANlib.h: 614: msg->identifier += ((unsigned long) RXB0EIDH) << 8;
 15959  003078  CF63 F02C          	movff	3939,??_CANreceiveMessage	;volatile
 15960  00307C  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15961  00307E  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15962  003080  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15963  003082  C02E  F02F         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 15964  003086  C02D  F02E         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 15965  00308A  C02C  F02D         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 15966  00308E  6A2C               	clrf	??_CANreceiveMessage,c
 15967  003090  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15968  003094  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15969  003098  502C               	movf	??_CANreceiveMessage,w,c
 15970  00309A  26DE               	addwf	postinc2,f,c
 15971  00309C  502D               	movf	??_CANreceiveMessage+1,w,c
 15972  00309E  22DE               	addwfc	postinc2,f,c
 15973  0030A0  502E               	movf	??_CANreceiveMessage+2,w,c
 15974  0030A2  22DE               	addwfc	postinc2,f,c
 15975  0030A4  502F               	movf	??_CANreceiveMessage+3,w,c
 15976  0030A6  22DE               	addwfc	postinc2,f,c
 15977                           
 15978                           ; BSR set to: 15
 15979                           ;inc\CANlib.h: 616: if (RXB0SIDLbits.EID16)
 15980  0030A8  A062               	btfss	3938,0,c	;volatile
 15981  0030AA  D00D               	goto	i1l5205
 15982                           
 15983                           ; BSR set to: 15
 15984                           ;inc\CANlib.h: 617: msg->identifier |= 0x00010000;
 15985  0030AC  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15986  0030B0  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15987  0030B4  0E00               	movlw	0
 15988  0030B6  12DE               	iorwf	postinc2,f,c
 15989  0030B8  0E00               	movlw	0
 15990  0030BA  12DE               	iorwf	postinc2,f,c
 15991  0030BC  0E01               	movlw	1
 15992  0030BE  12DE               	iorwf	postinc2,f,c
 15993  0030C0  0E00               	movlw	0
 15994  0030C2  12DE               	iorwf	postinc2,f,c
 15995  0030C4  D000               	goto	i1l5205
 15996  0030C6                     i1l5205:
 15997                           
 15998                           ; BSR set to: 15
 15999                           ;inc\CANlib.h: 618: if (RXB0SIDLbits.EID17)
 16000  0030C6  A262               	btfss	3938,1,c	;volatile
 16001  0030C8  D00D               	goto	i1l5209
 16002                           
 16003                           ; BSR set to: 15
 16004                           ;inc\CANlib.h: 619: msg->identifier |= 0x00020000;
 16005  0030CA  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16006  0030CE  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16007  0030D2  0E00               	movlw	0
 16008  0030D4  12DE               	iorwf	postinc2,f,c
 16009  0030D6  0E00               	movlw	0
 16010  0030D8  12DE               	iorwf	postinc2,f,c
 16011  0030DA  0E02               	movlw	2
 16012  0030DC  12DE               	iorwf	postinc2,f,c
 16013  0030DE  0E00               	movlw	0
 16014  0030E0  12DE               	iorwf	postinc2,f,c
 16015  0030E2  D000               	goto	i1l5209
 16016  0030E4                     i1l5209:
 16017                           
 16018                           ; BSR set to: 15
 16019                           ;inc\CANlib.h: 620: if (RXB0SIDLbits.SID0)
 16020  0030E4  AA62               	btfss	3938,5,c	;volatile
 16021  0030E6  D00D               	goto	i1l5213
 16022                           
 16023                           ; BSR set to: 15
 16024                           ;inc\CANlib.h: 621: msg->identifier |= 0x00040000;
 16025  0030E8  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16026  0030EC  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16027  0030F0  0E00               	movlw	0
 16028  0030F2  12DE               	iorwf	postinc2,f,c
 16029  0030F4  0E00               	movlw	0
 16030  0030F6  12DE               	iorwf	postinc2,f,c
 16031  0030F8  0E04               	movlw	4
 16032  0030FA  12DE               	iorwf	postinc2,f,c
 16033  0030FC  0E00               	movlw	0
 16034  0030FE  12DE               	iorwf	postinc2,f,c
 16035  003100  D000               	goto	i1l5213
 16036  003102                     i1l5213:
 16037                           
 16038                           ; BSR set to: 15
 16039                           ;inc\CANlib.h: 622: if (RXB0SIDLbits.SID1)
 16040  003102  AC62               	btfss	3938,6,c	;volatile
 16041  003104  D00D               	goto	i1l5217
 16042                           
 16043                           ; BSR set to: 15
 16044                           ;inc\CANlib.h: 623: msg->identifier |= 0x00080000;
 16045  003106  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16046  00310A  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16047  00310E  0E00               	movlw	0
 16048  003110  12DE               	iorwf	postinc2,f,c
 16049  003112  0E00               	movlw	0
 16050  003114  12DE               	iorwf	postinc2,f,c
 16051  003116  0E08               	movlw	8
 16052  003118  12DE               	iorwf	postinc2,f,c
 16053  00311A  0E00               	movlw	0
 16054  00311C  12DE               	iorwf	postinc2,f,c
 16055  00311E  D000               	goto	i1l5217
 16056  003120                     i1l5217:
 16057                           
 16058                           ; BSR set to: 15
 16059                           ;inc\CANlib.h: 624: if (RXB0SIDLbits.SID2)
 16060  003120  AE62               	btfss	3938,7,c	;volatile
 16061  003122  D00D               	goto	i1l5221
 16062                           
 16063                           ; BSR set to: 15
 16064                           ;inc\CANlib.h: 625: msg->identifier |= 0x00100000;
 16065  003124  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16066  003128  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16067  00312C  0E00               	movlw	0
 16068  00312E  12DE               	iorwf	postinc2,f,c
 16069  003130  0E00               	movlw	0
 16070  003132  12DE               	iorwf	postinc2,f,c
 16071  003134  0E10               	movlw	16
 16072  003136  12DE               	iorwf	postinc2,f,c
 16073  003138  0E00               	movlw	0
 16074  00313A  12DE               	iorwf	postinc2,f,c
 16075  00313C  D000               	goto	i1l5221
 16076  00313E                     i1l5221:
 16077                           
 16078                           ; BSR set to: 15
 16079                           ;inc\CANlib.h: 627: msg->identifier |= ((unsigned long) RXB0SIDH) << 21;
 16080  00313E  CF61 F02C          	movff	3937,??_CANreceiveMessage	;volatile
 16081  003142  6A2D               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16082  003144  6A2E               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16083  003146  6A2F               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16084  003148  0E15               	movlw	21
 16085  00314A                     i1u620_25:
 16086  00314A  90D8               	bcf	status,0,c
 16087  00314C  362C               	rlcf	??_CANreceiveMessage,f,c
 16088  00314E  362D               	rlcf	??_CANreceiveMessage+1,f,c
 16089  003150  362E               	rlcf	??_CANreceiveMessage+2,f,c
 16090  003152  362F               	rlcf	??_CANreceiveMessage+3,f,c
 16091  003154  2EE8               	decfsz	wreg,f,c
 16092  003156  D7F9               	goto	i1u620_25
 16093  003158  C02A  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16094  00315C  C02B  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16095  003160  502C               	movf	??_CANreceiveMessage,w,c
 16096  003162  12DE               	iorwf	postinc2,f,c
 16097  003164  502D               	movf	??_CANreceiveMessage+1,w,c
 16098  003166  12DE               	iorwf	postinc2,f,c
 16099  003168  502E               	movf	??_CANreceiveMessage+2,w,c
 16100  00316A  12DE               	iorwf	postinc2,f,c
 16101  00316C  502F               	movf	??_CANreceiveMessage+3,w,c
 16102  00316E  12DE               	iorwf	postinc2,f,c
 16103  003170  D000               	goto	i1l5223
 16104  003172                     i1l5223:
 16105                           
 16106                           ; BSR set to: 15
 16107                           ;inc\CANlib.h: 629: }
 16108                           ;inc\CANlib.h: 630: RXB0CONbits.RXFUL = 0x00;
 16109  003172  9E60               	bcf	3936,7,c	;volatile
 16110                           
 16111                           ; BSR set to: 15
 16112                           ;inc\CANlib.h: 632: return (error);
 16113                           ;	Return value of _CANreceiveMessage is never used
 16114  003174  0012               	return	
 16115                           
 16116                           ; BSR set to: 15
 16117                           
 16118                           ; BSR set to: 15
 16119  003176  0012               	return		;funcret
 16120  003178                     __end_of_CANreceiveMessage:
 16121                           	opt stack 0
 16122                           pclatu	equ	0xFFB
 16123                           pclath	equ	0xFFA
 16124                           tblptru	equ	0xFF8
 16125                           tblptrh	equ	0xFF7
 16126                           tblptrl	equ	0xFF6
 16127                           tablat	equ	0xFF5
 16128                           prodh	equ	0xFF4
 16129                           prodl	equ	0xFF3
 16130                           intcon	equ	0xFF2
 16131                           intcon2	equ	0xFF1
 16132                           postinc0	equ	0xFEE
 16133                           fsr0h	equ	0xFEA
 16134                           fsr0l	equ	0xFE9
 16135                           wreg	equ	0xFE8
 16136                           indf1	equ	0xFE7
 16137                           postdec1	equ	0xFE5
 16138                           fsr1h	equ	0xFE2
 16139                           fsr1l	equ	0xFE1
 16140                           bsr	equ	0xFE0
 16141                           indf2	equ	0xFDF
 16142                           postinc2	equ	0xFDE
 16143                           postdec2	equ	0xFDD
 16144                           plusw2	equ	0xFDB
 16145                           fsr2h	equ	0xFDA
 16146                           fsr2l	equ	0xFD9
 16147                           status	equ	0xFD8
 16148                           
 16149 ;; *************** function _ISR_Alta *****************
 16150 ;; Defined at:
 16151 ;;		line 105 in file "parcheggio.c"
 16152 ;; Parameters:    Size  Location     Type
 16153 ;;		None
 16154 ;; Auto vars:     Size  Location     Type
 16155 ;;		None
 16156 ;; Return value:  Size  Location     Type
 16157 ;;		None               void
 16158 ;; Registers used:
 16159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16160 ;; Tracked objects:
 16161 ;;		On entry : 0/0
 16162 ;;		On exit  : 0/0
 16163 ;;		Unchanged: 0/0
 16164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16167 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16169 ;;Total ram usage:       16 bytes
 16170 ;; Hardware stack levels used:    1
 16171 ;; Hardware stack levels required when called:    1
 16172 ;; This function calls:
 16173 ;;		___lwdiv
 16174 ;; This function is called by:
 16175 ;;		Interrupt level 2
 16176 ;; This function uses a non-reentrant model
 16177 ;;
 16178                           
 16179                           	psect	intcode
 16180  000008                     __pintcode:
 16181                           	opt stack 0
 16182  000008                     _ISR_Alta:
 16183                           	opt stack 19
 16184                           
 16185                           ; BSR set to: 15
 16186                           ;incstack = 0
 16187  000008  CFFA F069          	movff	pclath,??_ISR_Alta+2
 16188  00000C  CFFB F06A          	movff	pclatu,??_ISR_Alta+3
 16189  000010  CFE9 F06B          	movff	fsr0l,??_ISR_Alta+4
 16190  000014  EF8E  F02B         	goto	int_func
 16191                           pclatu	equ	0xFFB
 16192                           pclath	equ	0xFFA
 16193                           tblptru	equ	0xFF8
 16194                           tblptrh	equ	0xFF7
 16195                           tblptrl	equ	0xFF6
 16196                           tablat	equ	0xFF5
 16197                           prodh	equ	0xFF4
 16198                           prodl	equ	0xFF3
 16199                           intcon	equ	0xFF2
 16200                           intcon2	equ	0xFF1
 16201                           postinc0	equ	0xFEE
 16202                           fsr0h	equ	0xFEA
 16203                           fsr0l	equ	0xFE9
 16204                           wreg	equ	0xFE8
 16205                           indf1	equ	0xFE7
 16206                           postdec1	equ	0xFE5
 16207                           fsr1h	equ	0xFE2
 16208                           fsr1l	equ	0xFE1
 16209                           bsr	equ	0xFE0
 16210                           indf2	equ	0xFDF
 16211                           postinc2	equ	0xFDE
 16212                           postdec2	equ	0xFDD
 16213                           plusw2	equ	0xFDB
 16214                           fsr2h	equ	0xFDA
 16215                           fsr2l	equ	0xFD9
 16216                           status	equ	0xFD8
 16217                           
 16218                           	psect	intcode_body
 16219  00571C                     __pintcode_body:
 16220                           	opt stack 19
 16221  00571C                     int_func:
 16222                           	opt stack 19
 16223  00571C  CFEA F06C          	movff	fsr0h,??_ISR_Alta+5
 16224  005720  CFE1 F06D          	movff	fsr1l,??_ISR_Alta+6
 16225  005724  CFE2 F06E          	movff	fsr1h,??_ISR_Alta+7
 16226  005728  CFD9 F06F          	movff	fsr2l,??_ISR_Alta+8
 16227  00572C  CFDA F070          	movff	fsr2h,??_ISR_Alta+9
 16228  005730  CFF3 F071          	movff	prodl,??_ISR_Alta+10
 16229  005734  CFF4 F072          	movff	prodh,??_ISR_Alta+11
 16230  005738  CFF6 F073          	movff	tblptrl,??_ISR_Alta+12
 16231  00573C  CFF7 F074          	movff	tblptrh,??_ISR_Alta+13
 16232  005740  CFF8 F075          	movff	tblptru,??_ISR_Alta+14
 16233  005744  CFF5 F076          	movff	tablat,??_ISR_Alta+15
 16234                           
 16235                           ;parcheggio.c: 106: if (INTCON2bits.INTEDG0 == 1) {
 16236  005748  ACF1               	btfss	intcon2,6,c	;volatile
 16237  00574A  D007               	goto	i2l700
 16238                           
 16239                           ;parcheggio.c: 107: INTCON2bits.INTEDG0 = 0;
 16240  00574C  9CF1               	bcf	intcon2,6,c	;volatile
 16241                           
 16242                           ;parcheggio.c: 108: TMR3H = 0;
 16243  00574E  0E00               	movlw	0
 16244  005750  6EB3               	movwf	4019,c	;volatile
 16245                           
 16246                           ;parcheggio.c: 109: TMR3L = 0;
 16247  005752  0E00               	movlw	0
 16248  005754  6EB2               	movwf	4018,c	;volatile
 16249                           
 16250                           ;parcheggio.c: 110: distance_error = 0;
 16251  005756  9851               	bcf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 16252                           
 16253                           ;parcheggio.c: 111: } else {
 16254  005758  D031               	goto	i2l6931
 16255  00575A                     i2l700:
 16256                           
 16257                           ;parcheggio.c: 112: TMR3H_temp = TMR3H;
 16258  00575A  CFB3 F026          	movff	4019,_TMR3H_temp	;volatile
 16259                           
 16260                           ;parcheggio.c: 113: TMR3L_temp = TMR3L;
 16261  00575E  CFB2 F027          	movff	4018,_TMR3L_temp	;volatile
 16262                           
 16263                           ;parcheggio.c: 114: timerValue2 = TMR3H_temp;
 16264  005762  C026  F023         	movff	_TMR3H_temp,_timerValue2	;volatile
 16265  005766  6A24               	clrf	_timerValue2+1,c	;volatile
 16266                           
 16267                           ;parcheggio.c: 115: timerValue2 = ((timerValue2 << 8) | (TMR3L_temp));
 16268  005768  5023               	movf	_timerValue2,w,c	;volatile
 16269  00576A  0100               	movlb	0	; () banked
 16270  00576C  6F67               	movwf	??_ISR_Alta& (0+255),b
 16271  00576E  5027               	movf	_TMR3L_temp,w,c	;volatile
 16272  005770  6E23               	movwf	_timerValue2,c	;volatile
 16273  005772  C067  F024         	movff	??_ISR_Alta,_timerValue2+1	;volatile
 16274                           
 16275                           ; BSR set to: 0
 16276                           ;parcheggio.c: 116: pulse_time = timerValue2 / 2;
 16277  005776  90D8               	bcf	status,0,c
 16278  005778  3024               	rrcf	_timerValue2+1,w,c	;volatile
 16279  00577A  0100               	movlb	0	; () banked
 16280  00577C  6F67               	movwf	??_ISR_Alta& (0+255),b
 16281  00577E  3023               	rrcf	_timerValue2,w,c	;volatile
 16282  005780  6E1F               	movwf	_pulse_time,c	;volatile
 16283  005782  C067  F020         	movff	??_ISR_Alta,_pulse_time+1	;volatile
 16284                           
 16285                           ; BSR set to: 0
 16286                           ;parcheggio.c: 117: sensor_distance[MUX_index] = pulse_time / 58;
 16287  005786  C01F  F060         	movff	_pulse_time,___lwdiv@dividend	;volatile
 16288  00578A  C020  F061         	movff	_pulse_time+1,___lwdiv@dividend+1	;volatile
 16289  00578E  0E00               	movlw	0
 16290  005790  0100               	movlb	0	; () banked
 16291  005792  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 16292  005794  0E3A               	movlw	58
 16293  005796  6F62               	movwf	___lwdiv@divisor& (0+255),b
 16294  005798  EC9E  F02C         	call	___lwdiv	;wreg free
 16295  00579C  5025               	movf	_MUX_index,w,c	;volatile
 16296  00579E  0D02               	mullw	2
 16297  0057A0  0E01               	movlw	low _sensor_distance
 16298  0057A2  24F3               	addwf	prodl,w,c
 16299  0057A4  6ED9               	movwf	fsr2l,c
 16300  0057A6  0E00               	movlw	high _sensor_distance
 16301  0057A8  20F4               	addwfc	prodh,w,c
 16302  0057AA  6EDA               	movwf	fsr2h,c
 16303  0057AC  0100               	movlb	0	; () banked
 16304  0057AE  C060  FFDE         	movff	?___lwdiv,postinc2
 16305  0057B2  0100               	movlb	0	; () banked
 16306  0057B4  C061  FFDD         	movff	?___lwdiv+1,postdec2
 16307                           
 16308                           ; BSR set to: 0
 16309                           ;parcheggio.c: 118: INTCON2bits.INTEDG0 = 1;
 16310  0057B8  8CF1               	bsf	intcon2,6,c	;volatile
 16311  0057BA  D000               	goto	i2l6931
 16312  0057BC                     i2l6931:
 16313                           
 16314                           ;parcheggio.c: 119: }
 16315                           ;parcheggio.c: 120: INTCONbits.INT0IF = 0;
 16316  0057BC  92F2               	bcf	intcon,1,c	;volatile
 16317  0057BE  C076  FFF5         	movff	??_ISR_Alta+15,tablat
 16318  0057C2  C075  FFF8         	movff	??_ISR_Alta+14,tblptru
 16319  0057C6  C074  FFF7         	movff	??_ISR_Alta+13,tblptrh
 16320  0057CA  C073  FFF6         	movff	??_ISR_Alta+12,tblptrl
 16321  0057CE  C072  FFF4         	movff	??_ISR_Alta+11,prodh
 16322  0057D2  C071  FFF3         	movff	??_ISR_Alta+10,prodl
 16323  0057D6  C070  FFDA         	movff	??_ISR_Alta+9,fsr2h
 16324  0057DA  C06F  FFD9         	movff	??_ISR_Alta+8,fsr2l
 16325  0057DE  C06E  FFE2         	movff	??_ISR_Alta+7,fsr1h
 16326  0057E2  C06D  FFE1         	movff	??_ISR_Alta+6,fsr1l
 16327  0057E6  C06C  FFEA         	movff	??_ISR_Alta+5,fsr0h
 16328  0057EA  C06B  FFE9         	movff	??_ISR_Alta+4,fsr0l
 16329  0057EE  C06A  FFFB         	movff	??_ISR_Alta+3,pclatu
 16330  0057F2  C069  FFFA         	movff	??_ISR_Alta+2,pclath
 16331  0057F6  0011               	retfie		f
 16332  0057F8                     __end_of_ISR_Alta:
 16333                           	opt stack 0
 16334                           pclatu	equ	0xFFB
 16335                           pclath	equ	0xFFA
 16336                           tblptru	equ	0xFF8
 16337                           tblptrh	equ	0xFF7
 16338                           tblptrl	equ	0xFF6
 16339                           tablat	equ	0xFF5
 16340                           prodh	equ	0xFF4
 16341                           prodl	equ	0xFF3
 16342                           intcon	equ	0xFF2
 16343                           intcon2	equ	0xFF1
 16344                           postinc0	equ	0xFEE
 16345                           fsr0h	equ	0xFEA
 16346                           fsr0l	equ	0xFE9
 16347                           wreg	equ	0xFE8
 16348                           indf1	equ	0xFE7
 16349                           postdec1	equ	0xFE5
 16350                           fsr1h	equ	0xFE2
 16351                           fsr1l	equ	0xFE1
 16352                           bsr	equ	0xFE0
 16353                           indf2	equ	0xFDF
 16354                           postinc2	equ	0xFDE
 16355                           postdec2	equ	0xFDD
 16356                           plusw2	equ	0xFDB
 16357                           fsr2h	equ	0xFDA
 16358                           fsr2l	equ	0xFD9
 16359                           status	equ	0xFD8
 16360                           
 16361 ;; *************** function ___lwdiv *****************
 16362 ;; Defined at:
 16363 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 16364 ;; Parameters:    Size  Location     Type
 16365 ;;  dividend        2    0[BANK0 ] unsigned int 
 16366 ;;  divisor         2    2[BANK0 ] unsigned int 
 16367 ;; Auto vars:     Size  Location     Type
 16368 ;;  quotient        2    5[BANK0 ] unsigned int 
 16369 ;;  counter         1    4[BANK0 ] unsigned char 
 16370 ;; Return value:  Size  Location     Type
 16371 ;;                  2    0[BANK0 ] unsigned int 
 16372 ;; Registers used:
 16373 ;;		wreg, status,2, status,0
 16374 ;; Tracked objects:
 16375 ;;		On entry : 0/0
 16376 ;;		On exit  : 0/0
 16377 ;;		Unchanged: 0/0
 16378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16379 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16380 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16382 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16383 ;;Total ram usage:        7 bytes
 16384 ;; Hardware stack levels used:    1
 16385 ;; This function calls:
 16386 ;;		Nothing
 16387 ;; This function is called by:
 16388 ;;		_ISR_Alta
 16389 ;; This function uses a non-reentrant model
 16390 ;;
 16391                           
 16392                           	psect	text44
 16393  00593C                     __ptext44:
 16394                           	opt stack 0
 16395  00593C                     ___lwdiv:
 16396                           	opt stack 19
 16397                           
 16398                           ;incstack = 0
 16399  00593C  0E00               	movlw	0
 16400  00593E  0100               	movlb	0	; () banked
 16401  005940  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16402  005942  0E00               	movlw	0
 16403  005944  6F65               	movwf	___lwdiv@quotient& (0+255),b
 16404                           
 16405                           ; BSR set to: 0
 16406  005946  0100               	movlb	0	; () banked
 16407  005948  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16408  00594A  0100               	movlb	0	; () banked
 16409  00594C  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16410  00594E  B4D8               	btfsc	status,2,c
 16411  005950  D031               	goto	i2l1417
 16412                           
 16413                           ; BSR set to: 0
 16414  005952  0E01               	movlw	1
 16415  005954  0100               	movlb	0	; () banked
 16416  005956  6F64               	movwf	___lwdiv@counter& (0+255),b
 16417  005958  D007               	goto	i2l6901
 16418  00595A                     i2l6899:
 16419                           
 16420                           ; BSR set to: 0
 16421  00595A  0100               	movlb	0	; () banked
 16422  00595C  90D8               	bcf	status,0,c
 16423  00595E  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 16424  005960  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16425  005962  0100               	movlb	0	; () banked
 16426  005964  2B64               	incf	___lwdiv@counter& (0+255),f,b
 16427  005966  D000               	goto	i2l6901
 16428  005968                     i2l6901:
 16429                           
 16430                           ; BSR set to: 0
 16431  005968  0100               	movlb	0	; () banked
 16432  00596A  BF63               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
 16433  00596C  D002               	goto	i2l6903
 16434  00596E  D7F5               	goto	i2l6899
 16435                           
 16436                           ; BSR set to: 0
 16437  005970  D000               	goto	i2l6903
 16438  005972                     i2l6903:
 16439                           
 16440                           ; BSR set to: 0
 16441  005972  0100               	movlb	0	; () banked
 16442  005974  90D8               	bcf	status,0,c
 16443  005976  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 16444  005978  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16445                           
 16446                           ; BSR set to: 0
 16447  00597A  0100               	movlb	0	; () banked
 16448  00597C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16449  00597E  0100               	movlb	0	; () banked
 16450  005980  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 16451  005982  0100               	movlb	0	; () banked
 16452  005984  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16453  005986  0100               	movlb	0	; () banked
 16454  005988  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16455  00598A  A0D8               	btfss	status,0,c
 16456  00598C  D00B               	goto	i2l6911
 16457                           
 16458                           ; BSR set to: 0
 16459  00598E  0100               	movlb	0	; () banked
 16460  005990  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16461  005992  0100               	movlb	0	; () banked
 16462  005994  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 16463  005996  0100               	movlb	0	; () banked
 16464  005998  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16465  00599A  0100               	movlb	0	; () banked
 16466  00599C  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16467                           
 16468                           ; BSR set to: 0
 16469  00599E  0100               	movlb	0	; () banked
 16470  0059A0  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 16471  0059A2  D000               	goto	i2l6911
 16472  0059A4                     i2l6911:
 16473                           
 16474                           ; BSR set to: 0
 16475  0059A4  0100               	movlb	0	; () banked
 16476  0059A6  90D8               	bcf	status,0,c
 16477  0059A8  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16478  0059AA  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 16479                           
 16480                           ; BSR set to: 0
 16481  0059AC  0100               	movlb	0	; () banked
 16482  0059AE  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 16483  0059B0  D7E0               	goto	i2l6903
 16484  0059B2  D000               	goto	i2l1417
 16485  0059B4                     i2l1417:
 16486                           
 16487                           ; BSR set to: 0
 16488  0059B4  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 16489  0059B8  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16490                           
 16491                           ; BSR set to: 0
 16492  0059BC  0012               	return		;funcret
 16493  0059BE                     __end_of___lwdiv:
 16494                           	opt stack 0
 16495                           pclatu	equ	0xFFB
 16496                           pclath	equ	0xFFA
 16497                           tblptru	equ	0xFF8
 16498                           tblptrh	equ	0xFF7
 16499                           tblptrl	equ	0xFF6
 16500                           tablat	equ	0xFF5
 16501                           prodh	equ	0xFF4
 16502                           prodl	equ	0xFF3
 16503                           intcon	equ	0xFF2
 16504                           intcon2	equ	0xFF1
 16505                           postinc0	equ	0xFEE
 16506                           fsr0h	equ	0xFEA
 16507                           fsr0l	equ	0xFE9
 16508                           wreg	equ	0xFE8
 16509                           indf1	equ	0xFE7
 16510                           postdec1	equ	0xFE5
 16511                           fsr1h	equ	0xFE2
 16512                           fsr1l	equ	0xFE1
 16513                           bsr	equ	0xFE0
 16514                           indf2	equ	0xFDF
 16515                           postinc2	equ	0xFDE
 16516                           postdec2	equ	0xFDD
 16517                           plusw2	equ	0xFDB
 16518                           fsr2h	equ	0xFDA
 16519                           fsr2l	equ	0xFD9
 16520                           status	equ	0xFD8
 16521                           pclatu	equ	0xFFB
 16522                           pclath	equ	0xFFA
 16523                           tblptru	equ	0xFF8
 16524                           tblptrh	equ	0xFF7
 16525                           tblptrl	equ	0xFF6
 16526                           tablat	equ	0xFF5
 16527                           prodh	equ	0xFF4
 16528                           prodl	equ	0xFF3
 16529                           intcon	equ	0xFF2
 16530                           intcon2	equ	0xFF1
 16531                           postinc0	equ	0xFEE
 16532                           fsr0h	equ	0xFEA
 16533                           fsr0l	equ	0xFE9
 16534                           wreg	equ	0xFE8
 16535                           indf1	equ	0xFE7
 16536                           postdec1	equ	0xFE5
 16537                           fsr1h	equ	0xFE2
 16538                           fsr1l	equ	0xFE1
 16539                           bsr	equ	0xFE0
 16540                           indf2	equ	0xFDF
 16541                           postinc2	equ	0xFDE
 16542                           postdec2	equ	0xFDD
 16543                           plusw2	equ	0xFDB
 16544                           fsr2h	equ	0xFDA
 16545                           fsr2l	equ	0xFD9
 16546                           status	equ	0xFD8
 16547                           
 16548                           	psect	param0
 16549  0000                     pclatu	equ	0xFFB
 16550                           pclath	equ	0xFFA
 16551                           tblptru	equ	0xFF8
 16552                           tblptrh	equ	0xFF7
 16553                           tblptrl	equ	0xFF6
 16554                           tablat	equ	0xFF5
 16555                           prodh	equ	0xFF4
 16556                           prodl	equ	0xFF3
 16557                           intcon	equ	0xFF2
 16558                           intcon2	equ	0xFF1
 16559                           postinc0	equ	0xFEE
 16560                           fsr0h	equ	0xFEA
 16561                           fsr0l	equ	0xFE9
 16562                           wreg	equ	0xFE8
 16563                           indf1	equ	0xFE7
 16564                           postdec1	equ	0xFE5
 16565                           fsr1h	equ	0xFE2
 16566                           fsr1l	equ	0xFE1
 16567                           bsr	equ	0xFE0
 16568                           indf2	equ	0xFDF
 16569                           postinc2	equ	0xFDE
 16570                           postdec2	equ	0xFDD
 16571                           plusw2	equ	0xFDB
 16572                           fsr2h	equ	0xFDA
 16573                           fsr2l	equ	0xFD9
 16574                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    80
    Data        11
    BSS         196
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     39      84
    BANK0           160    119     136
    BANK1           256     97     244
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 24
		 -> sin@coeff_a(CODE[20]), sin@coeff_b(CODE[16]), atan@coeff_a(CODE[24]), atan@coeff_b(CODE[20]), 

    CANreceiveMessage@msg	PTR struct . size(2) Largest target is 15
		 -> msg(BANK1[15]), 

    CANsendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data_speed(BANK1[8]), data_brake(BANK1[8]), data_steering(BANK1[8]), data_correction(BANK1[8]), 
		 -> data_test(BANK1[8]), data(BANK1[8]), sensor_distance_short(BANK1[8]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Alta in COMRAM

    None.

Critical Paths under _ISR_Bassa in COMRAM

    _ISR_Bassa->i1_CANsendMessage
    i1_delay_ms->i1___wmul

Critical Paths under _main in BANK0

    _park_search->_parallelo
    _park_routine->_parallelo
    _parallelo->_sqrt
    _can_send->_CANsendMessage
    ___awtofl->___flpack
    _cos->_sin
    _sin->___flsub
    _floor->___flge
    ___fltol->___flneg
    ___altofl->___fltol
    _asin->_sqrt
    _sqrt->___flsub
    ___flsub->_floor
    _atan->___flge
    _fabs->___flneg
    ___flneg->___fladd
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___flge->_fabs
    ___fldiv->___flpack
    _delay_s->_delay_ms
    _delay_ms->___wmul
    ___lwtofl->___flpack
    _configurations->_CANInitialize
    _CANInitialize->_CANSetFilter
    _CANInitialize->_CANSetMask

Critical Paths under _ISR_Alta in BANK0

    _ISR_Alta->___lwdiv

Critical Paths under _ISR_Bassa in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_park_routine
    _park_routine->_matematica
    _parallelo->_asin
    _matematica->_cos
    _cos->_asin
    _asin->_sqrt

Critical Paths under _ISR_Alta in BANK1

    None.

Critical Paths under _ISR_Bassa in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Alta in BANK2

    None.

Critical Paths under _ISR_Bassa in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Alta in BANK3

    None.

Critical Paths under _ISR_Bassa in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Alta in BANK4

    None.

Critical Paths under _ISR_Bassa in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Alta in BANK5

    None.

Critical Paths under _ISR_Bassa in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Alta in BANK6

    None.

Critical Paths under _ISR_Bassa in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Alta in BANK7

    None.

Critical Paths under _ISR_Bassa in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Alta in BANK8

    None.

Critical Paths under _ISR_Bassa in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Alta in BANK9

    None.

Critical Paths under _ISR_Bassa in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Alta in BANK10

    None.

Critical Paths under _ISR_Bassa in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Alta in BANK11

    None.

Critical Paths under _ISR_Bassa in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Alta in BANK12

    None.

Critical Paths under _ISR_Bassa in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  489122
                       _CANisTxReady
                     _CANsendMessage
                    _can_interpreter
                     _configurations
                           _delay_ms
                       _park_routine
                        _park_search
 ---------------------------------------------------------------------------------
 (1) _park_search                                          2     2      0  142089
                                             49 BANK1      2     2      0
                       _CANisTxReady
                     _CANsendMessage
                           ___awtofl
                                _abs
                          _parallelo
 ---------------------------------------------------------------------------------
 (1) _park_routine                                        12    12      0  333811
                                             85 BANK1     12    12      0
                       _CANisTxReady
                     _CANsendMessage
                            ___fladd
                            ___flneg
                            ___fltol
                           ___lwtofl
                           _can_send
                           _delay_ms
                            _delay_s
                         _matematica
                          _parallelo
 ---------------------------------------------------------------------------------
 (2) _parallelo                                            2     2      0  132803
                                            117 BANK0      2     2      0
                           ___awtofl
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___fltol
                                _abs
                               _asin
                           _can_send
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _can_send                                             0     0      0    6168
                       _CANisTxReady
                     _CANsendMessage
 ---------------------------------------------------------------------------------
 (4) _CANsendMessage                                      16     8      8    6131
                                             23 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (4) _CANisTxReady                                         1     1      0      37
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     247
                                             23 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    2871
                                             33 BANK0      5     1      4
                           ___flpack
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (2) _matematica                                          32    32      0  174968
                                             57 BANK1     28    28      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                               _asin
                                _cos
 ---------------------------------------------------------------------------------
 (3) _cos                                                 12     8      4   69437
                                             49 BANK1      8     4      4
                            ___fladd
                             ___flge
                               _asin (ARG)
                                _sin
 ---------------------------------------------------------------------------------
 (4) _sin                                                 17    13      4   60313
                                            113 BANK0      4     0      4
                                              0 BANK1     13    13      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   13154
                                             95 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                8     2      6     452
                                             23 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     722
                                             79 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2794
                                             89 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (3) _asin                                                40    36      4   83814
                                             21 BANK1     28    24      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                               _atan
                               _fabs
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _sqrt                                                25    21      4   17317
                                            113 BANK0      4     0      4
                                              0 BANK1     21    21      0
                             ___flge
                            ___flmul
                            ___flneg (ARG)
                            ___flsub
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    7829
                                            105 BANK0      8     0      8
                            ___fladd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (4) _atan                                                21    17      4   40827
                                             95 BANK0     21    17      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (4) _fabs                                                 4     0      4    1621
                                             79 BANK0      4     0      4
                            ___flneg
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4    1297
                                             75 BANK0      4     0      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   15525
                                             75 BANK0     16     8      8
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             15     7      8    7190
                                             48 BANK0     15     7      8
                            ___fldiv (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             12     4      8    7157
                                             63 BANK0     12     4      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8    1584
                                             83 BANK0     12     4      8
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             15     7      8    5733
                                             33 BANK0     15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0     918
                                             31 BANK0      2     2      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2     850
                                             29 BANK0      2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     392
                                             23 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2692
                                             33 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (6) ___flpack                                            10     4      6    2584
                                             23 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (1) _configurations                                       0     0      0    6204
                      _CANInitialize
 ---------------------------------------------------------------------------------
 (2) _CANInitialize                                       12     7      5    6204
                                             37 BANK0     12     7      5
                   _CANOperationMode
                       _CANSetFilter
                         _CANSetMask
 ---------------------------------------------------------------------------------
 (3) _CANSetMask                                          14     9      5    1286
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANSetFilter                                        14     9      5    3858
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANOperationMode                                     1     1      0      62
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _can_interpreter                                      4     4      0       0
                                             23 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR_Bassa                                           23    23      0    3751
                                             16 COMRAM    23    23      0
                  _CANreceiveMessage
                   i1_CANsendMessage
                         i1_delay_ms
 ---------------------------------------------------------------------------------
 (9) i1_delay_ms                                           2     0      2     257
                                              6 COMRAM     2     0      2
                           i1___wmul
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) i1_CANsendMessage                                    16     8      8    2243
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (9) _CANreceiveMessage                                   12    10      2    1137
                                              0 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Alta                                           16    16      0     395
                                              7 BANK0     16    16      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (12) ___lwdiv                                             7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CANisTxReady
   _CANsendMessage
   _can_interpreter
   _configurations
     _CANInitialize
       _CANOperationMode
       _CANSetFilter
       _CANSetMask
   _delay_ms
     ___wmul
   _park_routine
     _CANisTxReady
     _CANsendMessage
     ___fladd
       ___fldiv (ARG)
         ___flpack
       ___flmul (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___flpack (ARG)
     ___flneg
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flmul (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___flneg (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
     ___lwtofl
       ___flpack
     _can_send
       _CANisTxReady
       _CANsendMessage
     _delay_ms
       ___wmul
     _delay_s
       _delay_ms
         ___wmul
     _matematica
       ___fladd
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv
         ___flpack
       ___flmul
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___flneg
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv
           ___flpack
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
       _cos
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _asin (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _atan
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv
               ___flpack
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___flmul
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
             _eval_poly
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
             _fabs
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
           _sqrt
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___flmul
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flneg (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
             ___flsub (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               _floor (ARG)
                 ___altofl
                   ___flpack
                   ___fltol (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___flneg (ARG)
                       ___fladd (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                         ___flpack (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                 ___fladd
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flge
                   _fabs (ARG)
                     ___flneg
                       ___fladd (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                         ___flpack (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                 _frexp
         _sin (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
             _frexp
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv
         ___flpack
       ___flge
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
       ___flmul
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv
           ___flpack
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
             _frexp
   _park_search
     _CANisTxReady
     _CANsendMessage
     ___awtofl
       ___flpack
       _abs (ARG)
     _abs
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv
         ___flpack
       ___flge
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
       ___flmul
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv
           ___flpack
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
             _frexp

 _ISR_Bassa (ROOT)
   _CANreceiveMessage
   i1_CANsendMessage
   i1_delay_ms
     i1___wmul

 _ISR_Alta (ROOT)
   ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     61      F4       7       95.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     77      88       5       85.0%
BITCOMRAM           5F      0       2       0        2.1%
COMRAM              5F     27      54       1       88.4%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D0      20        0.0%
DATA                 0      0     1D0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Jun 01 21:57:10 2016

               ___altofl@sign 00BD                             _n 0138                             _x 0011  
                           _z 00DB                  ___fldiv@cntr 008D          __end_of_CANSetFilter 187C  
                ___fldiv@sign 008F            delay_s@repeat_loop 0080                            bsr 000FE0  
         ___wmul@multiplicand 0079                   __CFG_BORV$3 000000              i1___wmul@product 002E  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000                  ___flpack@arg 0077  
                ___flpack@exp 007B                    _MUX_select 0100                           l402 1F64  
                         l403 1F68                           l500 15CC                           l404 1F74  
                         l501 15D0                           l510 16E0                           l502 15DC  
                         l511 16EC                           l503 15E0                           l520 17FC  
                         l512 16F0                           l504 15EC                           l440 3834  
                         l432 37F4                           l521 1800                           l513 16FC  
                         l433 37F8                           l522 180C                           l514 1700  
                         l450 3944                           l434 3804                           l370 193C  
                         l523 1810                           l515 170C                           l507 16CC  
                         l451 3950                           l443 3910                           l435 3808  
                         l363 1B06                           l524 181C                           l508 16D0  
                         l444 3914                           l436 3814                           l380 1B20  
                         l364 1892                           l525 1820                           l509 16DC  
                         l445 3920                           l437 3818                           l381 1C1A  
                         l373 1A50                           l365 1896                           l526 182C  
                         l518 17EC                           l470 1282                           l446 3924  
                         l438 3824                           l358 49EA                           l390 1CEA  
                         l382 1BA8                           l374 1A54                           l366 1990  
                         l519 17F0                           l471 128E                           l463 124E  
                         l447 3930                           l439 3828                           l359 49F4  
                         l383 1BB2                           l375 1A60                           l367 191E  
                         l480 139C                           l464 1252                           l448 3934  
                         l384 1BBC                           l368 1928                           l481 13A0  
                         l465 125E                           l449 3940                           l393 1DA6  
                         l385 1BC6                           l369 1932                           l490 14B0  
                         l482 13AC                           l474 136C                           l466 1262  
                         l394 1DAA                           l378 1D90                           l491 14BC  
                         l475 1370                           l467 126E                           l395 1EA4  
                         l379 1B1C                           l492 14C0                           l476 137C  
                         l468 1272                           l556 5DEE                           l396 1E32  
                         l388 1CDA                           l493 14CC                           l485 148C  
                         l477 1380                           l469 127E                           l397 1E3C  
                         l389 1CDE                           l486 1490                           l478 138C  
                         l398 1E46                           l487 149C                           l479 1390  
                         l399 1E50                           l831 4478                           l743 4CB0  
                         l496 15AC                           l488 14A0                           l497 15B0  
                         l489 14AC                           l569 5C9E                           l745 4B60  
                         l498 15BC                           l499 15C0                           l756 4CAA  
                         l792 34FE                           l776 31EE                           l785 325E  
                         l786 33D8                           l779 322C                           l892 5D9E  
                         l789 3472                  __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000  
                  i1_delay_ms 5CE4                           _abs 5D7C                           _asd 0289  
                         _dir 028B                           _cos 5636                           _msg 0144  
                         _sin 3CC4                           prod 000FF3                           wreg 000FE8  
             ?_configurations 002A                  ___flmul@cntr 009D                  ___flmul@sign 009E  
                __CFG_LVP$OFF 000000                 ___flpack@sign 007C                  ___fltol@exp1 00B8  
                __CFG_WDT$OFF 000000                          l1122 4DC4                          l1018 4568  
                        l1123 4DDC                          l1115 4D62                          ?_abs 0077  
                        l1143 4020                          l1135 5C24                          l1147 405E  
                        l1149 408C                          l1158 4178                          l1183 55E4  
                        l1464 474E                          l1465 473A                          l1457 3E9E  
                        l1458 3FCE                          l4211 1BD2                          l1477 51E8  
                        l4231 1CCE                          l4135 1948                          l4313 1F7A  
                        l4161 1A66                          l4307 1F58                          l4155 1A44  
                        l6013 4070                          l4237 1CF0                          ?_cos 01BC  
                        l6007 4032                          l6103 4F22                          l4513 3882  
                        l6033 40F6                          l6105 4F2A                          l4507 383A  
                        l6123 5592                          l6051 41A0                          l6035 4108  
                        l6027 40C4                          l6019 4082                          l6115 4F72  
                        l6213 4FEE                          l6045 4156                          l6037 4118  
                        l6109 4F52                          l6207 4FC8                          l6055 41C8  
                        l6047 4168                          l6039 4124                          l4287 1E5C  
                        l4721 13FA                          l4617 1044                          l4481 3768  
                        l4465 36B0                          l6233 5094                          l6225 503E  
                        l6129 5630                          l6065 421C                          l6081 4E8A  
                        l6137 5C5E                          l6313 47D0                          l4715 13B2  
                        l4635 1100                          l4563 0E12                          l4539 3956  
                        l6403 5C90                          l6075 4E64                          l6163 5290  
                        l6147 5220                          l4653 11BC                          l4581 0ECC  
                        l6237 50A8                          l6093 4EDA                          l6245 5ACA  
                        l6181 5300                          l6173 52C2                          l4823 175A  
                        l6343 44F4                          l6327 48EE                          l6175 52D4  
                        l6167 52A4                          l6191 58CE                          l6271 5118  
                        l6431 54C6                          l6415 5436                          l4817 1712  
                        l4681 1294                          l6097 4F02                          l6257 536A  
                        l6177 52E2                          l6425 5486                          l4851 1832  
                        l4755 151A                          l6259 5410                          l6355 46BE  
                        l6275 512C                          l6371 3CFC                          l6435 5502  
                        l4749 14D2                          l6541 49E2                          l6445 39FE  
                        l4783 15F2                          l4687 12DC                          l4599 0F88  
                        l6543 49F8                          l6535 498C                          l6359 46D6  
                        l6471 3C1E                          l6279 514E                          l6383 3E28  
                        l6529 497C                          l6561 5D6E                          l6705 4BCE  
                        l6547 4A00                          l6459 3B3C                          l4789 163A  
                        l6549 4A44                          l6557 5D5A                          l6709 4C08  
                        l6399 5E00                          l6487 56BE                          l6583 4438  
                        l6591 449A                          l6743 3186                          l6727 4C6C  
                        l6585 4440                          l6753 31AA                          l5963 4CF2  
                        l6499 5BC8                          l5973 4DA2                          l5965 4D04  
                        l6757 31E4                          l6685 4B0E                          l6693 4B5C  
                        l6677 4AF6                          l5975 4DB4                          l5967 4D44  
                        l5959 4CDC                          l6871 356A                          l6951 5856  
                        l5985 4E2A                          l6881 359A                          l6777 3254  
                        l6697 4BAE                          l6955 5892                          ?_sin 00D1  
                        l5997 5B28                          l6869 355A                          l6949 5846  
                        l6887 35E4                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          u5000 3976                          u5005 396A  
                        u5110 0F02                          u5030 0D8C                          u4305 1A14  
                        u4410 1BF2                          u5115 0EF6                          u5035 0D80  
                        u4420 1C3E                          u5205 10DA                          u5125 0F62  
                        u5045 0DEC                          u5230 1136                          u5150 0FBE  
                        u5070 0E46                          u4415 1BE6                          u5400 13D2  
                        u5320 12B4                          u4280 1968                          u4425 1C32  
                        u4290 19B4                          u5235 112A                          u5155 0FB2  
                        u5075 0E3A                          u4435 1C9E                          u4540 1E7C  
                        u5405 13C6                          u5325 12A8                          u5245 1196  
                        u5165 101E                          u5085 0EA6                          u4285 195C  
                        u5190 107A                          u4550 1EC8                          u4295 19A8  
                        u4545 1E70                          u5195 106E                          u4555 1EBC  
                        u4805 368A                          u4565 1F28                          u4830 36E2  
                        u5720 1852                          u5640 1732                          u5560 1612  
                        u5480 14F2                          u4920 385A                          u4835 36D6  
                        u5725 1846                          u5645 1726                          u5565 1606  
                        u5485 14E6                          u4925 384E                          u4845 3742  
                        u4790 362A                          u8320 4C1C                          u8240 4B06  
                        u4795 361E                          u8235 4492                          u8236 4494  
                        u8181 42CC                          u7710 5900                          u8510 3536  
                        u8191 42D8                          u7640 5240                          u7800 513C  
                        u7645 5234                          u7718 5904                          u8637 5C92  
                        u7950 3E20                          u7880 4524                          u7960 3E22  
                        u7890 4526      __end_ofi1_CANsendMessage 26C0           __size_of_CANSetMask 03AA  
                        _Pmin 0128                          abs@a 0077                          _alfa 012C  
                        _fabs 5BF8                          _data 0153                          _beta 0130  
                        _atan 44A8                          _asin 39A0                          _main 57F8  
                        cos@f 01BC                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr0l 000FE9                          fsr2h 000FDA                          indf1 000FE7  
                        fsr1l 000FE1                          indf2 000FDF                          fsr2l 000FD9  
                        _sqrt 46FE                          pclat 000FFA                          sin@f 00D1  
                        sin@y 018B                          prodh 000FF4                          prodl 000FF3  
                        start 033A                 __CFG_IESO$OFF 000000                delay_s@value_s 007F  
         ISR_Bassa@PORTA_temp 004F                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
            _CANOperationMode 5DF6                         ??_abs 0079                         ??_cos 00D5  
                       ??_sin 00D5    __size_of_CANreceiveMessage 052E                         ?_fabs 00AF  
               ___fltol@sign1 00B7                         ?_atan 00BF                         ?_asin 01A0  
             __end_of___fladd 424C                         ?_main 002A               __end_of___fldiv 50D8  
             __end_of___flneg 5C72               __end_of___flmul 4FA2               __end_of___flsub 5B02  
             __end_of___fltol 5314                         ?_sqrt 00D1                         _T0CON 000FD5  
                       _T3CON 000FB1            __size_of_ISR_Bassa 0322               __end_of___lwdiv 59BE  
                       i1l410 2EF6                         i1l402 2618                         i1l403 261C  
                       i1l404 2626                         i1l370 20BA                         i1l363 2252  
                       i1l380 226A                         i1l364 2030                         i1l381 233C  
                       i1l373 21AC                         i1l365 2034                         i1l390 23F0  
                       i1l382 22D8                         i1l374 21B0                         i1l366 2106  
                       i1l383 22E0                         i1l375 21BA                         i1l367 20A2  
                       i1l384 22E8                         i1l368 20AA                         i1l393 249C  
                       i1l385 22F0                         i1l369 20B2                         i1l394 24A0  
                       i1l378 2488                         i1l722 027E                         i1l706 008A  
                       i1l395 2572                         i1l379 2266                         i1l715 0184  
                       i1l396 250E                         i1l388 23E2                         i1l397 2516  
                       i1l389 23E6                         i1l725 02EE                         i1l398 251E  
                       i1l399 2526                         i1l728 02F4                         i1l569 5D0E  
                       i2l700 575A                         _TMR0H 000FD7                         _TMR0L 000FD6  
                       _TMR3H 000FB3                         _TMR3L 000FB2                         _PORTA 000F80  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
          __end_ofsin@coeff_a 0D41            __end_ofsin@coeff_b 0D51                 __CFG_PWRT$OFF 000000  
            __end_of_ISR_Alta 57F8               __end_of_delay_s 5D7C                 __CFG_WRT0$OFF 000000  
                       _J_var 0120                 __CFG_WRT1$OFF 000000                         _K_var 0124  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000            CANInitialize@flags 0089  
              __CFG_EBTR2$OFF 000000                 ___awtofl@sign 0085                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         _bordo 0134                         fabs@d 00AF  
                       _first 0290                         _floor 50D8                         _frexp 58A8  
                       _errno 00E3                         atan@f 00BF                         atan@x 00C7  
                       atan@y 00C3                         asin@x 01A0                         asin@y 01B4  
              __pbitbssCOMRAM 0288                         sin@x2 0193                         tablat 000FF5  
        __end_of_CANisTxReady 5DF6              __end_ofi1___wmul 5DD0                         plusw2 000FDB  
                       sqrt@i 0197                         sqrt@q 0198                         sqrt@x 019C  
                       sqrt@y 00D1                         sqrt@z 0193                         status 000FD8  
         i1___wmul@multiplier 002A                  ?_park_search 002A               __initialization 59BE  
                __end_of_fabs 5C36                  __end_of_atan 46FE                  __end_of_asin 3CC4  
                __end_of_main 58A8                  __end_of_sqrt 4926                        ??_fabs 00B3  
                      ??_atan 00C3                        ??_asin 00D5                        ??_main 00D7  
           _park_routine$3670 01E8             _park_routine$3669 01E4                        ??_sqrt 018B  
               __activetblptr 000003                   ?i1_delay_ms 0030             _CANisTxReady$2845 0077  
                      _ADCON1 000FC1                        ?_floor 00BF                        ?_frexp 0077  
            __end_of___altofl 5B5A                        _CANCON 000F6F              __end_of___flpack 4E3E  
          _distance_received1 028E              __end_of___awtofl 5BF8               __CFG_BBSIZ$1024 000000  
           _spazio_parcheggio 0053                 _avvicinamento 028A                        i1l5101 2C5E  
                      i1l5221 313E                        i1l5213 3102                        i1l5205 30C6  
                      i1l5223 3172                        i1l5151 2E7C                        i1l5143 2E3C  
                      i1l5135 2DCA                        i1l5217 3120                        i1l5209 30E4  
                      i1l5161 2EF0                        i1l5155 2E9C                        i1l5147 2E5C  
                      i1l5159 2EBC                        i2l1417 59B4                        i1l5097 2C56  
                      i1l5197 3056                        i1l5705 2530                        i1l5553 20C4  
                      i1l5731 262C                        i1l5811 0114                        i1l5725 260E  
                      i1l5629 22FA                        i1l5573 21A2                        i1l5821 0176  
                      i1l5655 23F6                        i1l5649 23D8                        i1l5753 5D00  
                      i1l5809 0110                        i1l5579 21C0                        i1l5819 0154  
                      i1l5851 01BA                        i1l5861 01E8                        i1l5855 01C2  
                      i1l5793 00C8                        i1l5891 02BE                        i1l5883 028A  
                      i1l5877 025A                        i1l5895 02C6                        i1l5887 02A4  
                      i2l6901 5968                        i2l6911 59A4                        i2l6903 5972  
                      i2l6931 57BC                        i2l6899 595A              __end_of___lwtofl 5D4E  
                      _RXB0D0 000F66                        _RXB0D1 000F67                        _RXB0D2 000F68  
                      _RXB0D3 000F69                        _RXB0D4 000F6A                        _RXB1D0 000F56  
                      _RXB0D5 000F6B                        _RXB1D1 000F57                        _RXB0D6 000F6C  
                      _RXB1D2 000F58                        _RXB0D7 000F6D                        _RXB1D3 000F59  
                      _RXB1D4 000F5A                        _RXB1D5 000F5B                        _RXB1D6 000F5C  
                      _RXB1D7 000F5D                        _TXB0D0 000F46                        _TXB0D1 000F47  
                      _TXB0D2 000F48                        _TXB0D3 000F49                        _TXB1D0 000F36  
                      _TXB0D4 000F4A                        _TXB1D1 000F37                        _TXB0D5 000F4B  
                      _TXB1D2 000F38                        _TXB0D6 000F4C                        _TXB1D3 000F39  
                      _TXB0D7 000F4D                        _TXB2D0 000F26                        _TXB1D4 000F3A  
                      _TXB2D1 000F27                        _TXB1D5 000F3B                        _TXB2D2 000F28  
                      _TXB1D6 000F3C                        _TXB2D3 000F29                        _TXB1D7 000F3D  
                      _TXB2D4 000F2A                        _TXB2D5 000F2B                        _TXB2D6 000F2C  
                      _TXB2D7 000F2D            CANsendMessage@data 007B              __end_of_can_send 553E  
          CANsendMessage@tamp 0083             __end_of_ISR_Bassa 033A              __end_of_delay_ms 5CAC  
       __size_of_CANSetFilter 0B2A                __CFG_XINST$OFF 000000                        ___flge 553E  
             _data_correction 0163                     ??___fladd 00A7                        ___wmul 5CAC  
                   ??___fldiv 0089                     ??___flneg 00AF                __CFG_STVREN$ON 000000  
                   ??___flmul 0098                     ??___flsub 00D1                     ??___fltol 00B3  
                   ??___lwdiv 0064                  ??_CANSetMask 007C                        _raggio 01F0  
                      clear_0 59C4                        clear_1 59D0                        clear_2 59E0  
                   ??_delay_s 007F                        floor@i 00C3                        floor@x 00BF  
             __CFG_BOREN$BOHW 000000                  __pdataCOMRAM 0053                        sin@sgn 0197  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                        sqrt@og 018F                  _CANSetFilter 0D52  
                  ___fladd@f1 009F                    ___fladd@f2 00A3                    ___flge@ff1 00B3  
                  ___flge@ff2 00B7                    ___altofl@c 00B9                    ___fldiv@f1 0081  
                  ___fldiv@f2 0085                    ___fldiv@f3 0089                    __accesstop 0060  
     __end_of__initialization 5A30            __end_of_CANSetMask 39A0               __CFG_PBADEN$OFF 000000  
                  ___flneg@f1 00AB                 ?_park_routine 002A                    ___flmul@f1 0090  
                  ___flmul@f2 0094                  eval_poly@res 00B7                 ___rparam_used 000000  
                  ___flsub@f1 00C9                    ___flsub@f2 00CD                    ___fltol@f1 00AF  
                  ___awtofl@c 0081           __size_ofi1_delay_ms 0038                __pcstackCOMRAM 002A  
                   ?_ISR_Alta 002A                  __pidataBANK0 5E18                  __pidataBANK1 5E0E  
               __end_of_floor 51FA                 __end_of_frexp 593C              ??_configurations 0091  
                  ___lwtofl@c 0081                     ?i1___wmul 002A         CANSetFilter@numBuffer 0080  
                _actual_speed 0015         __size_of_CANisTxReady 0026                       ??_floor 00C3  
                     ??_frexp 007D      __end_of_CANOperationMode 5E0E                    __pbssBANK0 00D7  
                  __pbssBANK1 0100               _sensor_distance 0001            __size_of_eval_poly 011A  
           ?i1_CANsendMessage 002A                    _data_brake 015B                ??_park_routine 01E0  
     __size_of_CANsendMessage 07A0                    _data_speed 016B                    _activation 0288  
          ??i1_CANsendMessage 0032      __size_of_can_interpreter 0052            __size_of_parallelo 025C  
        __size_of_park_search 01CA             _old_alignment_gap 013C                    ??_ISR_Alta 0067  
                     ?___flge 00B3                       ?___wmul 0077                     ?___altofl 00B9  
                   ?___flpack 0077                       _CANSTAT 000F6E                     ?___awtofl 0081  
                _CANisTxReady 5DD0                       _BRGCON1 000F70                       _BRGCON2 000F71  
                     _BRGCON3 000F72                    ??i1___wmul 002E                     ?___lwtofl 0081  
                   ?_can_send 002A        __size_of_CANInitialize 01CE                     ?_delay_ms 007D  
                     _RXB0DLC 000F65                       _RXB1DLC 000F55                       _RXB0CON 000F60  
                     _RXB1CON 000F50                       _TXB0DLC 000F45                       _TXB1DLC 000F35  
                     _TXB2DLC 000F25           CANsendMessage@flags 007E                       __Hparam 0000  
                  _left_speed 001D                       __Lparam 0000              delay_ms@value_ms 007D  
             __size_of___flge 00F8                    _matematica 26C0                       ___fladd 3FE0  
                     ___fldiv 4FA2                       ___flneg 5C36                       ___flmul 4E3E  
                     ___flsub 5AA2                       ___fltol 51FA               __size_of___wmul 0038  
                     ___lwdiv 593C                  __psmallconst 0D00                    ??___altofl 00BD  
                  ??___flpack 007D          CANInitialize@propSeg 008E                       __pcinit 59BE  
                  ??___awtofl 0085             __end_of_eval_poly 542E                       _delay_s 5D4E  
                     __ramtop 0D00                       __ptext0 57F8                       __ptext1 4AF4  
                     __ptext2 3178                       __ptext3 424C                       __ptext4 542E  
                     __ptext5 187C                       __ptext6 5DD0                       __ptext7 5D7C  
                     __ptext8 5BAC                       __ptext9 26C0                    ??___lwtofl 0085  
                   _T0CONbits 000FD5                  ??i1_delay_ms 0032                       _counter 0028  
                  ??_can_send 0087                  __size_of_abs 002C                  __size_of_cos 00E6  
             atan@val_squared 00CC                  __size_of_sin 031C                       atan@val 00D0  
           __end_of_parallelo 44A8                    ??_delay_ms 007F                       asin@sgn 01A4  
      CANreceiveMessage@error 0034               _start_operation 0295                __pintcode_body 571C  
        end_of_initialization 5A30                       int_func 571C                 _CANInitialize 4926  
          __end_ofi1_delay_ms 5D1C                     _ISR_Bassa 0018                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
       i1___wmul@multiplicand 002C             ??_can_interpreter 0077       _steering_correction_dir 0296  
                   _PORTBbits 000F81                CANSetMask@mask 0077                CANSetMask@tamp 0081  
                _distance_set 0110                CANSetMask@type 007B          __end_of_park_routine 35F6  
                   _TRISBbits 000F93                   ___fldiv@exp 008E                     _MUX_index 0025  
                  _pulse_time 001F       _clock_counter_reference 00DF                   ___flmul@exp 0098  
              _CANsendMessage 187C              CANInitialize@BRP 0088              CANInitialize@SJW 0087  
              ?_CANInitialize 0085                    ?_ISR_Bassa 002A                   ?_matematica 002A  
              __end_of___flge 5636             __size_of_ISR_Alta 57F0                __end_of___wmul 5CE4  
               __pidataCOMRAM 5E16                    floor@expon 00C7           start_initialization 59BE  
           __size_ofi1___wmul 0028                    eval_poly@d 00AF                    eval_poly@n 00B1  
                  eval_poly@x 00AB                   __end_of_abs 5DA8                   __end_of_cos 571C  
                 __end_of_sin 3FE0           CANSetMask@numBuffer 0080                 _data_speed_rx 0108  
      __end_of_CANsendMessage 201C             ?_CANOperationMode 002A                 _data_steering 0173  
          i1delay_ms@value_ms 0030                    frexp@value 0077            ??_CANOperationMode 0077  
           _distance_received 028D    CANInitialize@FilterConfig1 008F    CANInitialize@FilterConfig2 0090  
         _steering_correction 0029                      ??___flge 00BB                      ??___wmul 007B  
                 __pdataBANK0 00E7                   __pdataBANK1 01EC              __CFG_LPT1OSC$OFF 000000  
   __size_ofi1_CANsendMessage 06A4             __size_of___altofl 0058             __size_of___flpack 0180  
      CANInitialize@phaseSeg1 0085        CANInitialize@phaseSeg2 0086             __size_of___awtofl 004C  
                 __pbssCOMRAM 0001             __size_of___lwtofl 0032                 __pcstackBANK0 0060  
               __pcstackBANK1 018B                   _BRGCON2bits 000F71                   _BRGCON3bits 000F72  
           __size_of_can_send 0110             __size_of_delay_ms 003A               ?_CANsendMessage 0077  
         __size_of_matematica 058A               ??_CANInitialize 008A                     _asin$3680 01B0  
                   _asin$3681 01AC                     _asin$3678 01A8                     _asin$3679 01B8  
                  sin@coeff_a 0D2D                    sin@coeff_b 0D41                 ??_park_search 01BC  
               _alignment_gap 00D7            CANSetFilter@filter 0077                     _data_test 017B  
            ___lwdiv@dividend 0060                    ISR_Bassa@i 0050                   ??_ISR_Bassa 003A  
                   __pintcode 0008                      ?___fladd 009F                      ?___fldiv 0081  
                    ?___flneg 00AB                      ?___flmul 0090                      ?___flsub 00C9  
                    ?___fltol 00AF         __size_of_park_routine 047E                      ?___lwdiv 0060  
                 __pintcodelo 0018                      ?_delay_s 002A                   __smallconst 0D00  
                 _COMSTATbits 000F74                     _eval_poly 5314                     _larghezza 01EC  
            ___lwdiv@quotient 0065                __size_of_floor 0122                __size_of_frexp 0094  
     __size_of_configurations 006C                     _parallelo 424C                  _new_distance 0291  
       CANreceiveMessage@tamp 0035                _prima_sterzata 0140                ___wmul@product 007B  
                    _LATBbits 000F8A               _can_interpreter 5B5A                     atan@recip 00CB  
                _park_routine 3178  _delay_quartz_frequency_value 00E7                      _IPR3bits 000FA5  
                    _PIE3bits 000FA3                      i1u600_20 2D0A                      i1u600_26 2D0C  
                    i1u601_20 2D38                      i1u601_26 2D3A                      i1u611_20 2F9E  
                    i1u603_25 2D4E                      i1u611_26 2FA0                      i1u612_20 2FC8  
                    i1u620_25 314A                      i1u612_26 2FCA                      i1u702_24 00BC  
                    i1u614_25 2FDC                      i1u702_25 00B8                      i1u712_24 0164  
                    i1u712_25 0160                      i1u609_25 2EC8                      i1u680_25 23AA  
                    i1u665_20 20E2                      i1u665_25 20D8                      i1u666_20 2128  
                    i1u666_25 211E                      i1u691_20 254E                      i1u691_25 2544  
                    i1u667_25 2174                      i1u692_20 2594                      i1u692_25 258A  
                    i1u693_25 25E0                      _PIR3bits 000FA4                      i1u678_20 2318  
                    i1u678_25 230E                      i1u679_20 235E                      i1u679_25 2354  
                    i1u864_27 01A6                      i1u865_27 5D02                      _RXB0EIDH 000F63  
                    _RXB0EIDL 000F64                      _RXB1EIDH 000F53                      _RXB1EIDL 000F54  
                    _ISR_Alta 0008                     _set_speed 00E5                      _RCONbits 000FD0  
            __CFG_WDTPS$32768 000000                      _RXB0SIDH 000F61                      _RXB0SIDL 000F62  
                    _RXF0EIDH 000F02                      _RXB1SIDH 000F51                      _RXF0EIDL 000F03  
                    _RXB1SIDL 000F52                      _RXF1EIDH 000F06                      _RXF1EIDL 000F07  
                    _RXF2EIDH 000F0A                      _RXF2EIDL 000F0B                      _RXF3EIDH 000F0E  
                    _RXF3EIDL 000F0F                      _RXF4EIDH 000F12                      _RXF4EIDL 000F13  
                    _RXF5EIDH 000F16                      _RXF5EIDL 000F17                      _RXF0SIDH 000F00  
                    _RXF0SIDL 000F01           __end_of_park_search 4CBE                      _TXB0EIDH 000F43  
                    _RXF1SIDH 000F04                      _TXB0EIDL 000F44                      _RXF1SIDL 000F05  
                    _TXB1EIDH 000F33                      _RXF2SIDH 000F08                      _TXB1EIDL 000F34  
                    _RXF2SIDL 000F09                      _TXB2EIDH 000F23                      _RXF3SIDH 000F0C  
                    _TXB2EIDL 000F24                      _RXF3SIDL 000F0D                      _RXF4SIDH 000F10  
                    _RXF4SIDL 000F11                      _RXF5SIDH 000F14                      _RXF5SIDL 000F15  
                    _RXM0EIDH 000F1A                      _RXM0EIDL 000F1B                      _TXB0SIDH 000F41  
                    _RXM1EIDH 000F1E                      _TXB0SIDL 000F42                      _RXM1EIDL 000F1F  
                    _TXB1SIDH 000F31                      _TXB1SIDL 000F32                      _TXB2SIDH 000F21  
                    _TXB2SIDL 000F22                      _RXM0SIDH 000F18                      _RXM0SIDL 000F19  
                    _RXM1SIDH 000F1C                      _RXM1SIDL 000F1D                   _distance_dx 0019  
                 _distance_sx 001B                      _RXERRCNT 000F75                      _TXERRCNT 000F76  
           ___wmul@multiplier 0077                      i1___wmul 5DA8                    ?_eval_poly 00AB  
         __end_ofatan@coeff_a 0D19           __end_ofatan@coeff_b 0D2D                 ?_CANSetFilter 0077  
                 _INTCON2bits 000FF1                     copy_data0 59FA                    _CANCONbits 000F6F  
                  ?_parallelo 002A              _distance_average 00E1                     frexp@eptr 007B  
                    __Hparam0 0000                      __Lparam0 0000                  _RXB0SIDLbits 000F62  
                _RXB1SIDLbits 000F52                  ??_matematica 00D5                 _request_sent1 0294  
            __size_of___fladd 026C                    _CANSetMask 35F6              __size_of___fldiv 0136  
            __size_of___flneg 003C              __size_of___flmul 0164              __size_of___flsub 0060  
            __size_of___fltol 011A                      ___altofl 5B02              i1_CANsendMessage 201C  
                    _cos$3682 01C0                      ___flpack 4CBE              __size_of___lwdiv 0082  
                    ___awtofl 5BAC              __size_of_delay_s 002E                      ___lwtofl 5D1C  
                    _can_send 542E                  _RXF0SIDLbits 000F01                      _delay_ms 5C72  
             ___lwdiv@divisor 0062                  _RXF1SIDLbits 000F05               ___lwdiv@counter 0064  
       i1CANsendMessage@flags 0031                ??_CANSetFilter 007C                      __ptext10 5636  
                    __ptext11 3CC4                      __ptext20 5BF8                      __ptext12 50D8  
                    __ptext21 5C36                      __ptext13 58A8                      __ptext30 5D1C  
                    __ptext22 5314                      __ptext14 51FA                      __ptext31 4CBE  
                    __ptext23 4E3E                      __ptext15 5B02                      __ptext40 5DA8  
                    __ptext32 5A36                      __ptext24 3FE0                      __ptext16 39A0  
                    __ptext41 201C                      __ptext33 4926                      __ptext25 553E  
                    __ptext17 46FE                      __ptext42 2C4A                      __ptext34 35F6  
                    __ptext26 4FA2                      __ptext18 5AA2                      __ptext35 0D52  
                    __ptext27 5D4E                      __ptext19 44A8                      __ptext44 593C  
                    __ptext36 5DF6                      __ptext28 5C72                      __ptext37 5B5A  
                    __ptext29 5CAC                      __ptext39 5CE4                  _RXF2SIDLbits 000F09  
                    _sin$3683 018F       __end_of_can_interpreter 5BAC                  _RXF3SIDLbits 000F0D  
                    _distance 0017            __end_of_matematica 2C4A                  _RXF4SIDLbits 000F11  
                _RXF5SIDLbits 000F15      CANsendMessage@dataLength 007D                 __size_of_fabs 003E  
               __size_of_atan 0256                 __size_of_asin 0324                 __size_of_main 00B0  
               __size_of_sqrt 0228                   _park_search 4AF4          CANreceiveMessage@msg 002A  
                _TXB0SIDLbits 000F42                  _TXB1SIDLbits 000F32                  _TXB2SIDLbits 000F22  
   __size_of_CANOperationMode 0018                 ?_CANisTxReady 002A                   atan@coeff_a 0D01  
                 atan@coeff_b 0D19                   _RXB0DLCbits 000F65         ___flmul@f3_as_product 0099  
                 _RXB1DLCbits 000F55                  _RXM0SIDLbits 000F19                   _RXB0CONbits 000F60  
                 _RXB1CONbits 000F50             _CANreceiveMessage 2C4A                  _RXM1SIDLbits 000F1D  
                  _INTCONbits 000FF2                   ??_eval_poly 00B3              ??_CANsendMessage 007F  
  i1CANsendMessage@dataLength 0030            ?_CANreceiveMessage 002A                  _request_sent 0293  
              _configurations 5A36      CANsendMessage@identifier 0077                   ??_parallelo 00D5  
                    intlevel1 0000                      intlevel2 0000              CANSetFilter@tamp 0081  
            CANSetFilter@type 007B           ??_CANreceiveMessage 002C          i1CANsendMessage@data 002E  
        i1CANsendMessage@tamp 0036                   _TXB0DLCbits 000F45                   _right_speed 0021  
                 _TXB1DLCbits 000F35                   _TXB0CONbits 000F40                   _TXB2DLCbits 000F25  
                 _TXB1CONbits 000F30                   _TXB2CONbits 000F20          CANOperationMode@mode 0077  
                 ?_CANSetMask 0077                ??_CANisTxReady 0077                _distance_error 028C  
             _matematica$3671 01C4               _matematica$3672 01C8               _matematica$3673 01CC  
             _matematica$3674 01D0               _matematica$3675 01DC               _matematica$3676 01D4  
             _matematica$3677 01D8     __end_of_CANreceiveMessage 3178    i1CANsendMessage@identifier 002A  
                 _timerValue2 0023                    _TMR3H_temp 0026        __end_of_configurations 5AA2  
                  _TMR3L_temp 0027                 _distance_wait 028F              ?_can_interpreter 002A  
          _old_dir_correction 0292                  ___fladd@exp1 00AA                  ___fladd@exp2 00A9  
                ___fladd@sign 00A8         __end_of_CANInitialize 4AF4         _sensor_distance_short 0183  
         _sensor_distance_old 0118  
