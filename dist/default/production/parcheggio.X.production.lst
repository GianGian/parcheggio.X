

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Jun 06 15:34:44 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2685
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	param0,global,class=BANK0,space=1,delta=1
    68  0000                     
    69                           	psect	idataCOMRAM
    70  005E8C                     __pidataCOMRAM:
    71                           	opt stack 0
    72                           
    73                           ;initializer for ISR_Bassa@F16869
    74  005E8C  03                 	db	3
    75  005E8D  06                 	db	6
    76                           
    77                           	psect	idataBANK0
    78  005E8E                     __pidataBANK0:
    79                           	opt stack 0
    80                           
    81                           ;initializer for _delay_quartz_frequency_value
    82  005E8E  10                 	db	16
    83                           
    84                           	psect	idataBANK1
    85  005E84                     __pidataBANK1:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _larghezza
    89  005E84  0000               	dw	0
    90  005E86  4204               	dw	16900
    91                           
    92                           ;initializer for _raggio
    93  005E88  0000               	dw	0
    94  005E8A  428C               	dw	17036
    95                           
    96                           	psect	smallconst
    97  000D00                     __psmallconst:
    98                           	opt stack 0
    99  000D00  00                 	db	0
   100  000D01                     atan@coeff_a:
   101                           	opt stack 0
   102  000D01  3C06               	dw	15366
   103  000D03  4204               	dw	16900
   104  000D05  9F7D               	dw	40829
   105  000D07  426A               	dw	17002
   106  000D09  905C               	dw	36956
   107  000D0B  4201               	dw	16897
   108  000D0D  4D60               	dw	19808
   109  000D0F  40BB               	dw	16571
   110  000D11  EC51               	dw	60497
   111  000D13  3E47               	dw	15943
   112  000D15  8DDE               	dw	36318
   113  000D17  BB1F               	dw	47903
   114  000D19                     __end_ofatan@coeff_a:
   115                           	opt stack 0
   116  000D19                     atan@coeff_b:
   117                           	opt stack 0
   118  000D19  3C06               	dw	15366
   119  000D1B  4204               	dw	16900
   120  000D1D  59C0               	dw	22976
   121  000D1F  428B               	dw	17035
   122  000D21  0474               	dw	1140
   123  000D23  4244               	dw	16964
   124  000D25  9BF9               	dw	39929
   125  000D27  414F               	dw	16719
   126  000D29  0000               	dw	0
   127  000D2B  3F80               	dw	16256
   128  000D2D                     __end_ofatan@coeff_b:
   129                           	opt stack 0
   130  000D2D                     sin@coeff_a:
   131                           	opt stack 0
   132  000D2D  F3EC               	dw	62444
   133  000D2F  484A               	dw	18506
   134  000D31  9535               	dw	38197
   135  000D33  C795               	dw	51093
   136  000D35  C117               	dw	49431
   137  000D37  45DC               	dw	17884
   138  000D39  DBFD               	dw	56317
   139  000D3B  C36D               	dw	50029
   140  000D3D  B372               	dw	45938
   141  000D3F  4033               	dw	16435
   142  000D41                     __end_ofsin@coeff_a:
   143                           	opt stack 0
   144  000D41                     sin@coeff_b:
   145                           	opt stack 0
   146  000D41  342B               	dw	13355
   147  000D43  4801               	dw	18433
   148  000D45  9D7F               	dw	40319
   149  000D47  45B0               	dw	17840
   150  000D49  FFE7               	dw	65511
   151  000D4B  42D9               	dw	17113
   152  000D4D  0000               	dw	0
   153  000D4F  3F80               	dw	16256
   154  000D51                     __end_ofsin@coeff_b:
   155                           	opt stack 0
   156  0000                     _RXB1CON	set	3920
   157  0000                     _RXB1CONbits	set	3920
   158  0000                     _RXB1D0	set	3926
   159  0000                     _RXB1D1	set	3927
   160  0000                     _RXB1D2	set	3928
   161  0000                     _RXB1D3	set	3929
   162  0000                     _RXB1D4	set	3930
   163  0000                     _RXB1D5	set	3931
   164  0000                     _RXB1D6	set	3932
   165  0000                     _RXB1D7	set	3933
   166  0000                     _RXB1DLC	set	3925
   167  0000                     _RXB1DLCbits	set	3925
   168  0000                     _RXB1EIDH	set	3923
   169  0000                     _RXB1EIDL	set	3924
   170  0000                     _RXB1SIDH	set	3921
   171  0000                     _RXB1SIDL	set	3922
   172  0000                     _RXB1SIDLbits	set	3922
   173  0000                     _RXF0EIDH	set	3842
   174  0000                     _RXF0EIDL	set	3843
   175  0000                     _RXF0SIDH	set	3840
   176  0000                     _RXF0SIDL	set	3841
   177  0000                     _RXF0SIDLbits	set	3841
   178  0000                     _RXF1EIDH	set	3846
   179  0000                     _RXF1EIDL	set	3847
   180  0000                     _RXF1SIDH	set	3844
   181  0000                     _RXF1SIDL	set	3845
   182  0000                     _RXF1SIDLbits	set	3845
   183  0000                     _RXF2EIDH	set	3850
   184  0000                     _RXF2EIDL	set	3851
   185  0000                     _RXF2SIDH	set	3848
   186  0000                     _RXF2SIDL	set	3849
   187  0000                     _RXF2SIDLbits	set	3849
   188  0000                     _RXF3EIDH	set	3854
   189  0000                     _RXF3EIDL	set	3855
   190  0000                     _RXF3SIDH	set	3852
   191  0000                     _RXF3SIDL	set	3853
   192  0000                     _RXF3SIDLbits	set	3853
   193  0000                     _RXF4EIDH	set	3858
   194  0000                     _RXF4EIDL	set	3859
   195  0000                     _RXF4SIDH	set	3856
   196  0000                     _RXF4SIDL	set	3857
   197  0000                     _RXF4SIDLbits	set	3857
   198  0000                     _RXF5EIDH	set	3862
   199  0000                     _RXF5EIDL	set	3863
   200  0000                     _RXF5SIDH	set	3860
   201  0000                     _RXF5SIDL	set	3861
   202  0000                     _RXF5SIDLbits	set	3861
   203  0000                     _RXM0EIDH	set	3866
   204  0000                     _RXM0EIDL	set	3867
   205  0000                     _RXM0SIDH	set	3864
   206  0000                     _RXM0SIDL	set	3865
   207  0000                     _RXM0SIDLbits	set	3865
   208  0000                     _RXM1EIDH	set	3870
   209  0000                     _RXM1EIDL	set	3871
   210  0000                     _RXM1SIDH	set	3868
   211  0000                     _RXM1SIDL	set	3869
   212  0000                     _RXM1SIDLbits	set	3869
   213  0000                     _TXB0CONbits	set	3904
   214  0000                     _TXB0D0	set	3910
   215  0000                     _TXB0D1	set	3911
   216  0000                     _TXB0D2	set	3912
   217  0000                     _TXB0D3	set	3913
   218  0000                     _TXB0D4	set	3914
   219  0000                     _TXB0D5	set	3915
   220  0000                     _TXB0D6	set	3916
   221  0000                     _TXB0D7	set	3917
   222  0000                     _TXB0DLC	set	3909
   223  0000                     _TXB0DLCbits	set	3909
   224  0000                     _TXB0EIDH	set	3907
   225  0000                     _TXB0EIDL	set	3908
   226  0000                     _TXB0SIDH	set	3905
   227  0000                     _TXB0SIDL	set	3906
   228  0000                     _TXB0SIDLbits	set	3906
   229  0000                     _TXB1CONbits	set	3888
   230  0000                     _TXB1D0	set	3894
   231  0000                     _TXB1D1	set	3895
   232  0000                     _TXB1D2	set	3896
   233  0000                     _TXB1D3	set	3897
   234  0000                     _TXB1D4	set	3898
   235  0000                     _TXB1D5	set	3899
   236  0000                     _TXB1D6	set	3900
   237  0000                     _TXB1D7	set	3901
   238  0000                     _TXB1DLC	set	3893
   239  0000                     _TXB1DLCbits	set	3893
   240  0000                     _TXB1EIDH	set	3891
   241  0000                     _TXB1EIDL	set	3892
   242  0000                     _TXB1SIDH	set	3889
   243  0000                     _TXB1SIDL	set	3890
   244  0000                     _TXB1SIDLbits	set	3890
   245  0000                     _TXB2CONbits	set	3872
   246  0000                     _TXB2D0	set	3878
   247  0000                     _TXB2D1	set	3879
   248  0000                     _TXB2D2	set	3880
   249  0000                     _TXB2D3	set	3881
   250  0000                     _TXB2D4	set	3882
   251  0000                     _TXB2D5	set	3883
   252  0000                     _TXB2D6	set	3884
   253  0000                     _TXB2D7	set	3885
   254  0000                     _TXB2DLC	set	3877
   255  0000                     _TXB2DLCbits	set	3877
   256  0000                     _TXB2EIDH	set	3875
   257  0000                     _TXB2EIDL	set	3876
   258  0000                     _TXB2SIDH	set	3873
   259  0000                     _TXB2SIDL	set	3874
   260  0000                     _TXB2SIDLbits	set	3874
   261  0000                     _ADCON1	set	4033
   262  0000                     _BRGCON1	set	3952
   263  0000                     _BRGCON2	set	3953
   264  0000                     _BRGCON2bits	set	3953
   265  0000                     _BRGCON3	set	3954
   266  0000                     _BRGCON3bits	set	3954
   267  0000                     _CANCON	set	3951
   268  0000                     _CANCONbits	set	3951
   269  0000                     _CANSTAT	set	3950
   270  0000                     _COMSTATbits	set	3956
   271  0000                     _INTCON2bits	set	4081
   272  0000                     _INTCONbits	set	4082
   273  0000                     _IPR3bits	set	4005
   274  0000                     _LATA	set	3977
   275  0000                     _LATB	set	3978
   276  0000                     _LATBbits	set	3978
   277  0000                     _LATC	set	3979
   278  0000                     _PIE3bits	set	4003
   279  0000                     _PIR3bits	set	4004
   280  0000                     _PORTA	set	3968
   281  0000                     _PORTBbits	set	3969
   282  0000                     _RCONbits	set	4048
   283  0000                     _RXB0CON	set	3936
   284  0000                     _RXB0CONbits	set	3936
   285  0000                     _RXB0D0	set	3942
   286  0000                     _RXB0D1	set	3943
   287  0000                     _RXB0D2	set	3944
   288  0000                     _RXB0D3	set	3945
   289  0000                     _RXB0D4	set	3946
   290  0000                     _RXB0D5	set	3947
   291  0000                     _RXB0D6	set	3948
   292  0000                     _RXB0D7	set	3949
   293  0000                     _RXB0DLC	set	3941
   294  0000                     _RXB0DLCbits	set	3941
   295  0000                     _RXB0EIDH	set	3939
   296  0000                     _RXB0EIDL	set	3940
   297  0000                     _RXB0SIDH	set	3937
   298  0000                     _RXB0SIDL	set	3938
   299  0000                     _RXB0SIDLbits	set	3938
   300  0000                     _RXERRCNT	set	3957
   301  0000                     _T0CON	set	4053
   302  0000                     _T0CONbits	set	4053
   303  0000                     _T3CON	set	4017
   304  0000                     _TMR0H	set	4055
   305  0000                     _TMR0L	set	4054
   306  0000                     _TMR3H	set	4019
   307  0000                     _TMR3L	set	4018
   308  0000                     _TRISA	set	3986
   309  0000                     _TRISB	set	3987
   310  0000                     _TRISBbits	set	3987
   311  0000                     _TRISC	set	3988
   312  0000                     _TXERRCNT	set	3958
   313                           
   314                           ; #config settings
   315  000D51  00                 	db	0	; dummy byte at the end
   316  0000                     
   317                           	psect	cinit
   318  005A6E                     __pcinit:
   319                           	opt stack 0
   320  005A6E                     start_initialization:
   321                           	opt stack 0
   322  005A6E                     __initialization:
   323                           	opt stack 0
   324                           
   325                           ; Clear objects allocated to BANK1 (141 bytes)
   326  005A6E  EE01  F000         	lfsr	0,__pbssBANK1
   327  005A72  0E8D               	movlw	141
   328  005A74                     clear_0:
   329  005A74  6AEE               	clrf	postinc0,c
   330  005A76  06E8               	decf	wreg,f,c
   331  005A78  E1FD               	bnz	clear_0
   332                           
   333                           ; Clear objects allocated to BANK0 (16 bytes)
   334  005A7A  EE00  F0D7         	lfsr	0,__pbssBANK0
   335  005A7E  0E10               	movlw	16
   336  005A80                     clear_1:
   337  005A80  6AEE               	clrf	postinc0,c
   338  005A82  06E8               	decf	wreg,f,c
   339  005A84  E1FD               	bnz	clear_1
   340                           
   341                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   342  005A86  6A52               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   343  005A88  6A51               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   344                           
   345                           ; Clear objects allocated to COMRAM (39 bytes)
   346  005A8A  EE00  F02A         	lfsr	0,__pbssCOMRAM
   347  005A8E  0E27               	movlw	39
   348  005A90                     clear_2:
   349  005A90  6AEE               	clrf	postinc0,c
   350  005A92  06E8               	decf	wreg,f,c
   351  005A94  E1FD               	bnz	clear_2
   352                           
   353                           ; Initialize objects allocated to BANK1 (8 bytes)
   354                           ; load TBLPTR registers with __pidataBANK1
   355  005A96  0E84               	movlw	low __pidataBANK1
   356  005A98  6EF6               	movwf	tblptrl,c
   357  005A9A  0E5E               	movlw	high __pidataBANK1
   358  005A9C  6EF7               	movwf	tblptrh,c
   359  005A9E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   360  005AA0  6EF8               	movwf	tblptru,c
   361  005AA2  EE01  F0F2         	lfsr	0,__pdataBANK1
   362  005AA6  EE10 F008          	lfsr	1,8
   363  005AAA                     copy_data0:
   364  005AAA  0009               	tblrd		*+
   365  005AAC  CFF5 FFEE          	movff	tablat,postinc0
   366  005AB0  50E5               	movf	postdec1,w,c
   367  005AB2  50E1               	movf	fsr1l,w,c
   368  005AB4  E1FA               	bnz	copy_data0
   369                           
   370                           ; Initialize objects allocated to BANK0 (1 bytes)
   371                           ; load TBLPTR registers with __pidataBANK0
   372  005AB6  0E8E               	movlw	low __pidataBANK0
   373  005AB8  6EF6               	movwf	tblptrl,c
   374  005ABA  0E5E               	movlw	high __pidataBANK0
   375  005ABC  6EF7               	movwf	tblptrh,c
   376  005ABE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   377  005AC0  6EF8               	movwf	tblptru,c
   378  005AC2  0009               	tblrd		*+	;fetch initializer
   379  005AC4  CFF5 F0E7          	movff	tablat,__pdataBANK0
   380                           
   381                           ; Initialize objects allocated to COMRAM (2 bytes)
   382                           ; load TBLPTR registers with __pidataCOMRAM
   383  005AC8  0E8C               	movlw	low __pidataCOMRAM
   384  005ACA  6EF6               	movwf	tblptrl,c
   385  005ACC  0E5E               	movlw	high __pidataCOMRAM
   386  005ACE  6EF7               	movwf	tblptrh,c
   387  005AD0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   388  005AD2  6EF8               	movwf	tblptru,c
   389  005AD4  0009               	tblrd		*+	;fetch initializer
   390  005AD6  CFF5 F053          	movff	tablat,__pdataCOMRAM
   391  005ADA  0009               	tblrd		*+	;fetch initializer
   392  005ADC  CFF5 F054          	movff	tablat,__pdataCOMRAM+1
   393  005AE0                     end_of_initialization:
   394                           	opt stack 0
   395  005AE0                     __end_of__initialization:
   396                           	opt stack 0
   397  005AE0  0100               	movlb	0
   398  005AE2  EFCE  F02A         	goto	_main	;jump to C main() function
   399                           tblptru	equ	0xFF8
   400                           tblptrh	equ	0xFF7
   401                           tblptrl	equ	0xFF6
   402                           tablat	equ	0xFF5
   403                           postinc0	equ	0xFEE
   404                           wreg	equ	0xFE8
   405                           postdec1	equ	0xFE5
   406                           fsr1l	equ	0xFE1
   407                           
   408                           	psect	bitbssCOMRAM
   409  000288                     __pbitbssCOMRAM:
   410                           	opt stack 0
   411  000288                     _MUX_toggle:
   412                           	opt stack 0
   413  000288                     	ds	1
   414  000289                     _activation:
   415                           	opt stack 0
   416  000289                     	ds	1
   417  00028A                     _asd:
   418                           	opt stack 0
   419  00028A                     	ds	1
   420  00028B                     _avvicinamento:
   421                           	opt stack 0
   422  00028B                     	ds	1
   423  00028C                     _dir:
   424                           	opt stack 0
   425  00028C                     	ds	1
   426  00028D                     _distance_error:
   427                           	opt stack 0
   428  00028D                     	ds	1
   429  00028E                     _distance_received:
   430                           	opt stack 0
   431  00028E                     	ds	1
   432  00028F                     _distance_received1:
   433                           	opt stack 0
   434  00028F                     	ds	1
   435  000290                     _distance_wait:
   436                           	opt stack 0
   437  000290                     	ds	1
   438  000291                     _first:
   439                           	opt stack 0
   440  000291                     	ds	1
   441  000292                     _new_distance:
   442                           	opt stack 0
   443  000292                     	ds	1
   444  000293                     _old_dir_correction:
   445                           	opt stack 0
   446  000293                     	ds	1
   447  000294                     _request_sent:
   448                           	opt stack 0
   449  000294                     	ds	1
   450  000295                     _request_sent1:
   451                           	opt stack 0
   452  000295                     	ds	1
   453  000296                     _start_operation:
   454                           	opt stack 0
   455  000296                     	ds	1
   456  000297                     _steering_correction_dir:
   457                           	opt stack 0
   458  000297                     	ds	1
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           postinc0	equ	0xFEE
   464                           wreg	equ	0xFE8
   465                           postdec1	equ	0xFE5
   466                           fsr1l	equ	0xFE1
   467                           
   468                           	psect	bssCOMRAM
   469  00002A                     __pbssCOMRAM:
   470                           	opt stack 0
   471  00002A                     _sensor_distance:
   472                           	opt stack 0
   473  00002A                     	ds	16
   474  00003A                     _MUX_select:
   475                           	opt stack 0
   476  00003A                     	ds	8
   477  000042                     _distance:
   478                           	opt stack 0
   479  000042                     	ds	2
   480  000044                     _distance_dx:
   481                           	opt stack 0
   482  000044                     	ds	2
   483  000046                     _distance_sx:
   484                           	opt stack 0
   485  000046                     	ds	2
   486  000048                     _pulse_time:
   487                           	opt stack 0
   488  000048                     	ds	2
   489  00004A                     _timerValue2:
   490                           	opt stack 0
   491  00004A                     	ds	2
   492  00004C                     _MUX_index:
   493                           	opt stack 0
   494  00004C                     	ds	1
   495  00004D                     _TMR3H_temp:
   496                           	opt stack 0
   497  00004D                     	ds	1
   498  00004E                     _TMR3L_temp:
   499                           	opt stack 0
   500  00004E                     	ds	1
   501  00004F                     _counter:
   502                           	opt stack 0
   503  00004F                     	ds	1
   504  000050                     _steering_correction:
   505                           	opt stack 0
   506  000050                     	ds	1
   507                           tblptru	equ	0xFF8
   508                           tblptrh	equ	0xFF7
   509                           tblptrl	equ	0xFF6
   510                           tablat	equ	0xFF5
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           postdec1	equ	0xFE5
   514                           fsr1l	equ	0xFE1
   515                           
   516                           	psect	dataCOMRAM
   517  000053                     __pdataCOMRAM:
   518                           	opt stack 0
   519  000053                     ISR_Bassa@F16869:
   520                           	opt stack 0
   521  000053                     	ds	2
   522                           tblptru	equ	0xFF8
   523                           tblptrh	equ	0xFF7
   524                           tblptrl	equ	0xFF6
   525                           tablat	equ	0xFF5
   526                           postinc0	equ	0xFEE
   527                           wreg	equ	0xFE8
   528                           postdec1	equ	0xFE5
   529                           fsr1l	equ	0xFE1
   530                           
   531                           	psect	bssBANK0
   532  0000D7                     __pbssBANK0:
   533                           	opt stack 0
   534  0000D7                     _alignment_gap:
   535                           	opt stack 0
   536  0000D7                     	ds	4
   537  0000DB                     _x:
   538                           	opt stack 0
   539  0000DB                     	ds	4
   540  0000DF                     _z:
   541                           	opt stack 0
   542  0000DF                     	ds	4
   543  0000E3                     _clock_counter_reference:
   544                           	opt stack 0
   545  0000E3                     	ds	2
   546  0000E5                     _set_speed:
   547                           	opt stack 0
   548  0000E5                     	ds	2
   549                           tblptru	equ	0xFF8
   550                           tblptrh	equ	0xFF7
   551                           tblptrl	equ	0xFF6
   552                           tablat	equ	0xFF5
   553                           postinc0	equ	0xFEE
   554                           wreg	equ	0xFE8
   555                           postdec1	equ	0xFE5
   556                           fsr1l	equ	0xFE1
   557                           
   558                           	psect	dataBANK0
   559  0000E7                     __pdataBANK0:
   560                           	opt stack 0
   561  0000E7                     _delay_quartz_frequency_value:
   562                           	opt stack 0
   563  0000E7                     	ds	1
   564                           tblptru	equ	0xFF8
   565                           tblptrh	equ	0xFF7
   566                           tblptrl	equ	0xFF6
   567                           tablat	equ	0xFF5
   568                           postinc0	equ	0xFEE
   569                           wreg	equ	0xFE8
   570                           postdec1	equ	0xFE5
   571                           fsr1l	equ	0xFE1
   572                           
   573                           	psect	bssBANK1
   574  000100                     __pbssBANK1:
   575                           	opt stack 0
   576  000100                     _data_speed_rx:
   577                           	opt stack 0
   578  000100                     	ds	8
   579  000108                     _distance_set:
   580                           	opt stack 0
   581  000108                     	ds	8
   582  000110                     _sensor_distance_old:
   583                           	opt stack 0
   584  000110                     	ds	8
   585  000118                     _J_var:
   586                           	opt stack 0
   587  000118                     	ds	4
   588  00011C                     _K_var:
   589                           	opt stack 0
   590  00011C                     	ds	4
   591  000120                     _Pmin:
   592                           	opt stack 0
   593  000120                     	ds	4
   594  000124                     _alfa:
   595                           	opt stack 0
   596  000124                     	ds	4
   597  000128                     _beta:
   598                           	opt stack 0
   599  000128                     	ds	4
   600  00012C                     _bordo:
   601                           	opt stack 0
   602  00012C                     	ds	4
   603  000130                     _n:
   604                           	opt stack 0
   605  000130                     	ds	4
   606  000134                     _old_alignment_gap:
   607                           	opt stack 0
   608  000134                     	ds	4
   609  000138                     _prima_sterzata:
   610                           	opt stack 0
   611  000138                     	ds	4
   612  00013C                     _actual_speed:
   613                           	opt stack 0
   614  00013C                     	ds	2
   615  00013E                     _distance_average:
   616                           	opt stack 0
   617  00013E                     	ds	2
   618  000140                     _errno:
   619                           	opt stack 0
   620  000140                     	ds	2
   621  000142                     _left_speed:
   622                           	opt stack 0
   623  000142                     	ds	2
   624  000144                     _right_speed:
   625                           	opt stack 0
   626  000144                     	ds	2
   627  000146                     _msg:
   628                           	opt stack 0
   629  000146                     	ds	15
   630  000155                     _data:
   631                           	opt stack 0
   632  000155                     	ds	8
   633  00015D                     _data_brake:
   634                           	opt stack 0
   635  00015D                     	ds	8
   636  000165                     _data_correction:
   637                           	opt stack 0
   638  000165                     	ds	8
   639  00016D                     _data_speed:
   640                           	opt stack 0
   641  00016D                     	ds	8
   642  000175                     _data_steering:
   643                           	opt stack 0
   644  000175                     	ds	8
   645  00017D                     _data_test:
   646                           	opt stack 0
   647  00017D                     	ds	8
   648  000185                     _sensor_distance_short:
   649                           	opt stack 0
   650  000185                     	ds	8
   651                           tblptru	equ	0xFF8
   652                           tblptrh	equ	0xFF7
   653                           tblptrl	equ	0xFF6
   654                           tablat	equ	0xFF5
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           postdec1	equ	0xFE5
   658                           fsr1l	equ	0xFE1
   659                           
   660                           	psect	dataBANK1
   661  0001F2                     __pdataBANK1:
   662                           	opt stack 0
   663  0001F2                     _larghezza:
   664                           	opt stack 0
   665  0001F2                     	ds	4
   666  0001F6                     _raggio:
   667                           	opt stack 0
   668  0001F6                     	ds	4
   669                           tblptru	equ	0xFF8
   670                           tblptrh	equ	0xFF7
   671                           tblptrl	equ	0xFF6
   672                           tablat	equ	0xFF5
   673                           postinc0	equ	0xFEE
   674                           wreg	equ	0xFE8
   675                           postdec1	equ	0xFE5
   676                           fsr1l	equ	0xFE1
   677                           
   678                           	psect	cstackBANK1
   679  00018D                     __pcstackBANK1:
   680                           	opt stack 0
   681  00018D                     ??_sqrt:
   682  00018D                     sin@y:
   683                           	opt stack 0
   684                           
   685                           ; 4 bytes @ 0x0
   686  00018D                     	ds	4
   687  000191                     sqrt@og:
   688                           	opt stack 0
   689  000191                     _sin$3680:
   690                           	opt stack 0
   691                           
   692                           ; 4 bytes @ 0x4
   693  000191                     	ds	4
   694  000195                     sin@x2:
   695                           	opt stack 0
   696  000195                     sqrt@z:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x8
   700  000195                     	ds	4
   701  000199                     sin@sgn:
   702                           	opt stack 0
   703  000199                     sqrt@i:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0xC
   707  000199                     	ds	1
   708  00019A                     sqrt@q:
   709                           	opt stack 0
   710                           
   711                           ; 4 bytes @ 0xD
   712  00019A                     	ds	4
   713  00019E                     sqrt@x:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x11
   717  00019E                     	ds	4
   718  0001A2                     ?_asin:
   719                           	opt stack 0
   720  0001A2                     asin@x:
   721                           	opt stack 0
   722                           
   723                           ; 4 bytes @ 0x15
   724  0001A2                     	ds	4
   725  0001A6                     asin@sgn:
   726                           	opt stack 0
   727                           
   728                           ; 4 bytes @ 0x19
   729  0001A6                     	ds	4
   730  0001AA                     _asin$3675:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x1D
   734  0001AA                     	ds	4
   735  0001AE                     _asin$3678:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0x21
   739  0001AE                     	ds	4
   740  0001B2                     _asin$3677:
   741                           	opt stack 0
   742                           
   743                           ; 4 bytes @ 0x25
   744  0001B2                     	ds	4
   745  0001B6                     asin@y:
   746                           	opt stack 0
   747                           
   748                           ; 4 bytes @ 0x29
   749  0001B6                     	ds	4
   750  0001BA                     _asin$3676:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0x2D
   754  0001BA                     	ds	4
   755  0001BE                     ??_park_search:
   756  0001BE                     ?_cos:
   757                           	opt stack 0
   758  0001BE                     cos@f:
   759                           	opt stack 0
   760                           
   761                           ; 4 bytes @ 0x31
   762  0001BE                     	ds	4
   763  0001C2                     _cos$3679:
   764                           	opt stack 0
   765                           
   766                           ; 4 bytes @ 0x35
   767  0001C2                     	ds	4
   768  0001C6                     _matematica$3668:
   769                           	opt stack 0
   770                           
   771                           ; 4 bytes @ 0x39
   772  0001C6                     	ds	4
   773  0001CA                     _matematica$3669:
   774                           	opt stack 0
   775                           
   776                           ; 4 bytes @ 0x3D
   777  0001CA                     	ds	4
   778  0001CE                     _matematica$3670:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0x41
   782  0001CE                     	ds	4
   783  0001D2                     _matematica$3671:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0x45
   787  0001D2                     	ds	4
   788  0001D6                     _matematica$3673:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x49
   792  0001D6                     	ds	4
   793  0001DA                     _matematica$3674:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x4D
   797  0001DA                     	ds	4
   798  0001DE                     _matematica$3672:
   799                           	opt stack 0
   800                           
   801                           ; 4 bytes @ 0x51
   802  0001DE                     	ds	4
   803  0001E2                     ??_park_routine:
   804                           
   805                           ; 0 bytes @ 0x55
   806  0001E2                     	ds	4
   807  0001E6                     _park_routine$3666:
   808                           	opt stack 0
   809                           
   810                           ; 4 bytes @ 0x59
   811  0001E6                     	ds	4
   812  0001EA                     _park_routine$3667:
   813                           	opt stack 0
   814                           
   815                           ; 4 bytes @ 0x5D
   816  0001EA                     	ds	4
   817  0001EE                     ??_main:
   818                           
   819                           ; 0 bytes @ 0x61
   820  0001EE                     	ds	4
   821                           tblptru	equ	0xFF8
   822                           tblptrh	equ	0xFF7
   823                           tblptrl	equ	0xFF6
   824                           tablat	equ	0xFF5
   825                           postinc0	equ	0xFEE
   826                           wreg	equ	0xFE8
   827                           postdec1	equ	0xFE5
   828                           fsr1l	equ	0xFE1
   829                           
   830                           	psect	cstackBANK0
   831  000060                     __pcstackBANK0:
   832                           	opt stack 0
   833  000060                     ?___lwdiv:
   834                           	opt stack 0
   835  000060                     ___lwdiv@dividend:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x0
   839  000060                     	ds	2
   840  000062                     ___lwdiv@divisor:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x2
   844  000062                     	ds	2
   845  000064                     ___lwdiv@counter:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x4
   849  000064                     	ds	1
   850  000065                     ___lwdiv@quotient:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x5
   854  000065                     	ds	2
   855  000067                     ??_ISR_Alta:
   856                           
   857                           ; 0 bytes @ 0x7
   858  000067                     	ds	16
   859  000077                     ?_abs:
   860                           	opt stack 0
   861  000077                     ?___wmul:
   862                           	opt stack 0
   863  000077                     ?___flpack:
   864                           	opt stack 0
   865  000077                     CANOperationMode@mode:
   866                           	opt stack 0
   867  000077                     _CANisTxReady$2841:
   868                           	opt stack 0
   869  000077                     ___wmul@multiplier:
   870                           	opt stack 0
   871  000077                     abs@a:
   872                           	opt stack 0
   873  000077                     CANsendMessage@identifier:
   874                           	opt stack 0
   875  000077                     CANSetMask@mask:
   876                           	opt stack 0
   877  000077                     CANSetFilter@filter:
   878                           	opt stack 0
   879  000077                     ___flpack@arg:
   880                           	opt stack 0
   881  000077                     frexp@value:
   882                           	opt stack 0
   883                           
   884                           ; 4 bytes @ 0x17
   885  000077                     	ds	2
   886  000079                     ??_abs:
   887  000079                     ___wmul@multiplicand:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x19
   891  000079                     	ds	2
   892  00007B                     CANSetMask@type:
   893                           	opt stack 0
   894  00007B                     CANSetFilter@type:
   895                           	opt stack 0
   896  00007B                     ___flpack@exp:
   897                           	opt stack 0
   898  00007B                     CANsendMessage@data:
   899                           	opt stack 0
   900  00007B                     ___wmul@product:
   901                           	opt stack 0
   902  00007B                     frexp@eptr:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x1B
   906  00007B                     	ds	1
   907  00007C                     ??_CANSetMask:
   908  00007C                     ??_CANSetFilter:
   909  00007C                     ___flpack@sign:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x1C
   913  00007C                     	ds	1
   914  00007D                     ??___flpack:
   915  00007D                     ??_frexp:
   916  00007D                     CANsendMessage@dataLength:
   917                           	opt stack 0
   918  00007D                     delay_ms@value_ms:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x1D
   922  00007D                     	ds	1
   923  00007E                     CANsendMessage@flags:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x1E
   927  00007E                     	ds	1
   928  00007F                     ??_CANsendMessage:
   929  00007F                     delay_s@value_s:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x1F
   933  00007F                     	ds	1
   934  000080                     CANSetMask@numBuffer:
   935                           	opt stack 0
   936  000080                     CANSetFilter@numBuffer:
   937                           	opt stack 0
   938  000080                     delay_s@repeat_loop:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x20
   942  000080                     	ds	1
   943  000081                     ?___fldiv:
   944                           	opt stack 0
   945  000081                     ?___awtofl:
   946                           	opt stack 0
   947  000081                     ?___lwtofl:
   948                           	opt stack 0
   949  000081                     ___awtofl@c:
   950                           	opt stack 0
   951  000081                     ___lwtofl@c:
   952                           	opt stack 0
   953  000081                     CANSetMask@tamp:
   954                           	opt stack 0
   955  000081                     CANSetFilter@tamp:
   956                           	opt stack 0
   957  000081                     ___fldiv@f1:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x21
   961  000081                     	ds	2
   962  000083                     CANsendMessage@tamp:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x23
   966  000083                     	ds	2
   967  000085                     CANInitialize@phaseSeg1:
   968                           	opt stack 0
   969  000085                     ___awtofl@sign:
   970                           	opt stack 0
   971  000085                     ___fldiv@f2:
   972                           	opt stack 0
   973                           
   974                           ; 4 bytes @ 0x25
   975  000085                     	ds	1
   976  000086                     CANInitialize@phaseSeg2:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x26
   980  000086                     	ds	1
   981  000087                     CANInitialize@SJW:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x27
   985  000087                     	ds	1
   986  000088                     CANInitialize@BRP:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x28
   990  000088                     	ds	1
   991  000089                     CANInitialize@flags:
   992                           	opt stack 0
   993  000089                     ___fldiv@f3:
   994                           	opt stack 0
   995                           
   996                           ; 4 bytes @ 0x29
   997  000089                     	ds	1
   998  00008A                     ??_CANInitialize:
   999                           
  1000                           ; 0 bytes @ 0x2A
  1001  00008A                     	ds	3
  1002  00008D                     ___fldiv@cntr:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x2D
  1006  00008D                     	ds	1
  1007  00008E                     CANInitialize@propSeg:
  1008                           	opt stack 0
  1009  00008E                     ___fldiv@exp:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x2E
  1013  00008E                     	ds	1
  1014  00008F                     CANInitialize@FilterConfig1:
  1015                           	opt stack 0
  1016  00008F                     ___fldiv@sign:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x2F
  1020  00008F                     	ds	1
  1021  000090                     ?___flmul:
  1022                           	opt stack 0
  1023  000090                     CANInitialize@FilterConfig2:
  1024                           	opt stack 0
  1025  000090                     ___flmul@f1:
  1026                           	opt stack 0
  1027                           
  1028                           ; 4 bytes @ 0x30
  1029  000090                     	ds	1
  1030  000091                     
  1031                           ; 0 bytes @ 0x31
  1032  000091                     	ds	3
  1033  000094                     ___flmul@f2:
  1034                           	opt stack 0
  1035                           
  1036                           ; 4 bytes @ 0x34
  1037  000094                     	ds	4
  1038  000098                     ___flmul@exp:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x38
  1042  000098                     	ds	1
  1043  000099                     ___flmul@f3_as_product:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x39
  1047  000099                     	ds	4
  1048  00009D                     ___flmul@cntr:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x3D
  1052  00009D                     	ds	1
  1053  00009E                     ___flmul@sign:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x3E
  1057  00009E                     	ds	1
  1058  00009F                     ?___fladd:
  1059                           	opt stack 0
  1060  00009F                     ___fladd@f1:
  1061                           	opt stack 0
  1062                           
  1063                           ; 4 bytes @ 0x3F
  1064  00009F                     	ds	4
  1065  0000A3                     ___fladd@f2:
  1066                           	opt stack 0
  1067                           
  1068                           ; 4 bytes @ 0x43
  1069  0000A3                     	ds	4
  1070  0000A7                     ??___fladd:
  1071                           
  1072                           ; 0 bytes @ 0x47
  1073  0000A7                     	ds	1
  1074  0000A8                     ___fladd@sign:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x48
  1078  0000A8                     	ds	1
  1079  0000A9                     ___fladd@exp2:
  1080                           	opt stack 0
  1081                           
  1082                           ; 1 bytes @ 0x49
  1083  0000A9                     	ds	1
  1084  0000AA                     ___fladd@exp1:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0x4A
  1088  0000AA                     	ds	1
  1089  0000AB                     ?_eval_poly:
  1090                           	opt stack 0
  1091  0000AB                     ?___flneg:
  1092                           	opt stack 0
  1093  0000AB                     eval_poly@x:
  1094                           	opt stack 0
  1095  0000AB                     ___flneg@f1:
  1096                           	opt stack 0
  1097                           
  1098                           ; 4 bytes @ 0x4B
  1099  0000AB                     	ds	4
  1100  0000AF                     ?_fabs:
  1101                           	opt stack 0
  1102  0000AF                     ?___fltol:
  1103                           	opt stack 0
  1104  0000AF                     eval_poly@d:
  1105                           	opt stack 0
  1106  0000AF                     fabs@d:
  1107                           	opt stack 0
  1108  0000AF                     ___fltol@f1:
  1109                           	opt stack 0
  1110                           
  1111                           ; 4 bytes @ 0x4F
  1112  0000AF                     	ds	2
  1113  0000B1                     eval_poly@n:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x51
  1117  0000B1                     	ds	2
  1118  0000B3                     ??_eval_poly:
  1119  0000B3                     ??___fltol:
  1120  0000B3                     ___flge@ff1:
  1121                           	opt stack 0
  1122                           
  1123                           ; 4 bytes @ 0x53
  1124  0000B3                     	ds	4
  1125  0000B7                     ___fltol@sign1:
  1126                           	opt stack 0
  1127  0000B7                     eval_poly@res:
  1128                           	opt stack 0
  1129  0000B7                     ___flge@ff2:
  1130                           	opt stack 0
  1131                           
  1132                           ; 4 bytes @ 0x57
  1133  0000B7                     	ds	1
  1134  0000B8                     ___fltol@exp1:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x58
  1138  0000B8                     	ds	1
  1139  0000B9                     ?___altofl:
  1140                           	opt stack 0
  1141  0000B9                     ___altofl@c:
  1142                           	opt stack 0
  1143                           
  1144                           ; 4 bytes @ 0x59
  1145  0000B9                     	ds	2
  1146  0000BB                     ??___flge:
  1147                           
  1148                           ; 0 bytes @ 0x5B
  1149  0000BB                     	ds	2
  1150  0000BD                     ___altofl@sign:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x5D
  1154  0000BD                     	ds	2
  1155  0000BF                     ?_atan:
  1156                           	opt stack 0
  1157  0000BF                     ?_floor:
  1158                           	opt stack 0
  1159  0000BF                     atan@f:
  1160                           	opt stack 0
  1161  0000BF                     floor@x:
  1162                           	opt stack 0
  1163                           
  1164                           ; 4 bytes @ 0x5F
  1165  0000BF                     	ds	4
  1166  0000C3                     atan@y:
  1167                           	opt stack 0
  1168  0000C3                     floor@i:
  1169                           	opt stack 0
  1170                           
  1171                           ; 4 bytes @ 0x63
  1172  0000C3                     	ds	4
  1173  0000C7                     floor@expon:
  1174                           	opt stack 0
  1175  0000C7                     atan@x:
  1176                           	opt stack 0
  1177                           
  1178                           ; 4 bytes @ 0x67
  1179  0000C7                     	ds	2
  1180  0000C9                     ?___flsub:
  1181                           	opt stack 0
  1182  0000C9                     ___flsub@f1:
  1183                           	opt stack 0
  1184                           
  1185                           ; 4 bytes @ 0x69
  1186  0000C9                     	ds	2
  1187  0000CB                     atan@recip:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x6B
  1191  0000CB                     	ds	1
  1192  0000CC                     atan@val_squared:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x6C
  1196  0000CC                     	ds	1
  1197  0000CD                     ___flsub@f2:
  1198                           	opt stack 0
  1199                           
  1200                           ; 4 bytes @ 0x6D
  1201  0000CD                     	ds	3
  1202  0000D0                     atan@val:
  1203                           	opt stack 0
  1204                           
  1205                           ; 4 bytes @ 0x70
  1206  0000D0                     	ds	1
  1207  0000D1                     ?_sqrt:
  1208                           	opt stack 0
  1209  0000D1                     ?_sin:
  1210                           	opt stack 0
  1211  0000D1                     sin@f:
  1212                           	opt stack 0
  1213  0000D1                     sqrt@y:
  1214                           	opt stack 0
  1215                           
  1216                           ; 4 bytes @ 0x71
  1217  0000D1                     	ds	4
  1218  0000D5                     ??_parallelo:
  1219  0000D5                     
  1220                           ; 0 bytes @ 0x75
  1221  0000D5                     	ds	2
  1222                           tblptru	equ	0xFF8
  1223                           tblptrh	equ	0xFF7
  1224                           tblptrl	equ	0xFF6
  1225                           tablat	equ	0xFF5
  1226                           postinc0	equ	0xFEE
  1227                           wreg	equ	0xFE8
  1228                           postdec1	equ	0xFE5
  1229                           fsr1l	equ	0xFE1
  1230                           
  1231                           	psect	cstackCOMRAM
  1232  000001                     __pcstackCOMRAM:
  1233                           	opt stack 0
  1234  000001                     ?i1___wmul:
  1235                           	opt stack 0
  1236  000001                     _CANisRxReady$2843:
  1237                           	opt stack 0
  1238  000001                     CANreceiveMessage@msg:
  1239                           	opt stack 0
  1240  000001                     i1___wmul@multiplier:
  1241                           	opt stack 0
  1242  000001                     i1CANsendMessage@identifier:
  1243                           	opt stack 0
  1244                           
  1245                           ; 4 bytes @ 0x0
  1246  000001                     	ds	2
  1247  000003                     ??_CANreceiveMessage:
  1248  000003                     i1___wmul@multiplicand:
  1249                           	opt stack 0
  1250                           
  1251                           ; 2 bytes @ 0x2
  1252  000003                     	ds	2
  1253  000005                     i1CANsendMessage@data:
  1254                           	opt stack 0
  1255  000005                     i1___wmul@product:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x4
  1259  000005                     	ds	2
  1260  000007                     i1CANsendMessage@dataLength:
  1261                           	opt stack 0
  1262  000007                     i1delay_ms@value_ms:
  1263                           	opt stack 0
  1264                           
  1265                           ; 2 bytes @ 0x6
  1266  000007                     	ds	1
  1267  000008                     i1CANsendMessage@flags:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x7
  1271  000008                     	ds	1
  1272  000009                     ??i1_CANsendMessage:
  1273  000009                     
  1274                           ; 0 bytes @ 0x8
  1275  000009                     	ds	2
  1276  00000B                     CANreceiveMessage@error:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0xA
  1280  00000B                     	ds	1
  1281  00000C                     CANreceiveMessage@tamp:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0xB
  1285  00000C                     	ds	1
  1286  00000D                     i1CANsendMessage@tamp:
  1287                           	opt stack 0
  1288                           
  1289                           ; 4 bytes @ 0xC
  1290  00000D                     	ds	4
  1291  000011                     ??_ISR_Bassa:
  1292                           
  1293                           ; 0 bytes @ 0x10
  1294  000011                     	ds	21
  1295  000026                     ISR_Bassa@MUX_index_collision:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x25
  1299  000026                     	ds	2
  1300  000028                     ISR_Bassa@PORTA_temp:
  1301                           	opt stack 0
  1302                           
  1303                           ; 1 bytes @ 0x27
  1304  000028                     	ds	1
  1305  000029                     ISR_Bassa@i:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x28
  1309  000029                     	ds	1
  1310                           tblptru	equ	0xFF8
  1311                           tblptrh	equ	0xFF7
  1312                           tblptrl	equ	0xFF6
  1313                           tablat	equ	0xFF5
  1314                           postinc0	equ	0xFEE
  1315                           wreg	equ	0xFE8
  1316                           postdec1	equ	0xFE5
  1317                           fsr1l	equ	0xFE1
  1318                           
  1319 ;;
  1320 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1321 ;;
  1322 ;; *************** function _main *****************
  1323 ;; Defined at:
  1324 ;;		line 237 in file "parcheggio.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;		None
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;		None
  1329 ;; Return value:  Size  Location     Type
  1330 ;;		None               void
  1331 ;; Registers used:
  1332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1340 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  1341 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  1342 ;;Total ram usage:        4 bytes
  1343 ;; Hardware stack levels required when called:   12
  1344 ;; This function calls:
  1345 ;;		_CANisTxReady
  1346 ;;		_CANsendMessage
  1347 ;;		_configurations
  1348 ;;		_delay_ms
  1349 ;;		_park_routine
  1350 ;;		_park_search
  1351 ;; This function is called by:
  1352 ;;		Startup code after reset
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           	psect	text0
  1357  00559C                     __ptext0:
  1358                           	opt stack 0
  1359  00559C                     _main:
  1360                           	opt stack 19
  1361                           
  1362                           ;parcheggio.c: 238: MUX_select[0] = 0b00000000;
  1363                           
  1364                           ;incstack = 0
  1365  00559C  0E00               	movlw	0
  1366  00559E  6E3A               	movwf	_MUX_select,c	;volatile
  1367                           
  1368                           ;parcheggio.c: 239: MUX_select[1] = 0b00000001;
  1369  0055A0  0E01               	movlw	1
  1370  0055A2  6E3B               	movwf	_MUX_select+1,c	;volatile
  1371                           
  1372                           ;parcheggio.c: 240: MUX_select[2] = 0b00000010;
  1373  0055A4  0E02               	movlw	2
  1374  0055A6  6E3C               	movwf	_MUX_select+2,c	;volatile
  1375                           
  1376                           ;parcheggio.c: 241: MUX_select[3] = 0b00000011;
  1377  0055A8  0E03               	movlw	3
  1378  0055AA  6E3D               	movwf	_MUX_select+3,c	;volatile
  1379                           
  1380                           ;parcheggio.c: 242: MUX_select[4] = 0b00000100;
  1381  0055AC  0E04               	movlw	4
  1382  0055AE  6E3E               	movwf	_MUX_select+4,c	;volatile
  1383                           
  1384                           ;parcheggio.c: 243: MUX_select[5] = 0b00000101;
  1385  0055B0  0E05               	movlw	5
  1386  0055B2  6E3F               	movwf	_MUX_select+5,c	;volatile
  1387                           
  1388                           ;parcheggio.c: 244: MUX_select[6] = 0b00000110;
  1389  0055B4  0E06               	movlw	6
  1390  0055B6  6E40               	movwf	_MUX_select+6,c	;volatile
  1391                           
  1392                           ;parcheggio.c: 245: MUX_select[7] = 0b00000111;
  1393  0055B8  0E07               	movlw	7
  1394  0055BA  6E41               	movwf	_MUX_select+7,c	;volatile
  1395                           
  1396                           ;parcheggio.c: 247: configurations();
  1397  0055BC  EC73  F02D         	call	_configurations	;wreg free
  1398                           
  1399                           ;parcheggio.c: 249: PORTBbits.RB4 = 0;
  1400  0055C0  9881               	bcf	3969,4,c	;volatile
  1401                           
  1402                           ;parcheggio.c: 250: PORTBbits.RB5 = 0;
  1403  0055C2  9A81               	bcf	3969,5,c	;volatile
  1404                           
  1405                           ;parcheggio.c: 251: PORTBbits.RB6 = 0;
  1406  0055C4  9C81               	bcf	3969,6,c	;volatile
  1407                           
  1408                           ;parcheggio.c: 253: request_sent = 0;
  1409  0055C6  9852               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1410                           
  1411                           ;parcheggio.c: 254: start_operation = 0;
  1412  0055C8  9C52               	bcf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  1413                           
  1414                           ;parcheggio.c: 255: delay_ms(500);
  1415  0055CA  0E01               	movlw	1
  1416  0055CC  0100               	movlb	0	; () banked
  1417  0055CE  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1418  0055D0  0EF4               	movlw	244
  1419  0055D2  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1420  0055D4  EC68  F02E         	call	_delay_ms	;wreg free
  1421                           
  1422                           ;parcheggio.c: 258: while (activation != 1) {
  1423                           
  1424                           ;parcheggio.c: 257: while (1) {
  1425  0055D8  D026               	goto	l6840
  1426  0055DA                     l6834:
  1427                           
  1428                           ;parcheggio.c: 259: delay_ms(10);
  1429  0055DA  0E00               	movlw	0
  1430  0055DC  0100               	movlb	0	; () banked
  1431  0055DE  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1432  0055E0  0E0A               	movlw	10
  1433  0055E2  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1434  0055E4  EC68  F02E         	call	_delay_ms	;wreg free
  1435                           
  1436                           ;parcheggio.c: 260: while (!CANisTxReady());
  1437  0055E8  D000               	goto	l6836
  1438  0055EA                     l6836:
  1439  0055EA  EC17  F02F         	call	_CANisTxReady	;wreg free
  1440  0055EE  0900               	iorlw	0
  1441  0055F0  B4D8               	btfsc	status,2,c
  1442  0055F2  D7FB               	goto	l6836
  1443                           
  1444                           ;parcheggio.c: 261: PORTBbits.RB4 = ~PORTBbits.RB4;
  1445  0055F4  7881               	btg	3969,4,c	;volatile
  1446                           
  1447                           ;parcheggio.c: 262: CANsendMessage(0b00000010001, sensor_distance_short, 2, CAN_CONFIG_S
      +                          TD_MSG & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1448  0055F6  0E11               	movlw	17
  1449  0055F8  0100               	movlb	0	; () banked
  1450  0055FA  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1451  0055FC  0E00               	movlw	0
  1452  0055FE  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1453  005600  0E00               	movlw	0
  1454  005602  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1455  005604  0E00               	movlw	0
  1456  005606  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1457  005608  0E85               	movlw	low _sensor_distance_short
  1458  00560A  0100               	movlb	0	; () banked
  1459  00560C  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1460  00560E  0E01               	movlw	high _sensor_distance_short
  1461  005610  0100               	movlb	0	; () banked
  1462  005612  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1463  005614  0E02               	movlw	2
  1464  005616  0100               	movlb	0	; () banked
  1465  005618  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1466  00561A  0EBC               	movlw	188
  1467  00561C  0100               	movlb	0	; () banked
  1468  00561E  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1469  005620  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1470  005624  D000               	goto	l6840
  1471  005626                     l6840:
  1472  005626  A251               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1473  005628  D7D8               	goto	l6834
  1474                           
  1475                           ;parcheggio.c: 263: }
  1476                           ;parcheggio.c: 265: park_search();
  1477  00562A  ECA9  F025         	call	_park_search	;wreg free
  1478                           
  1479                           ;parcheggio.c: 267: left_speed = data_speed_rx[1];
  1480  00562E  C101  F142         	movff	_data_speed_rx+1,_left_speed	;volatile
  1481  005632  0101               	movlb	1	; () banked
  1482  005634  6B43               	clrf	(_left_speed+1)& (0+255),b	;volatile
  1483                           
  1484                           ; BSR set to: 1
  1485                           ;parcheggio.c: 268: left_speed = ((left_speed << 8) | (data_speed_rx[0]));
  1486  005636  0101               	movlb	1	; () banked
  1487  005638  5142               	movf	_left_speed& (0+255),w,b	;volatile
  1488  00563A  0101               	movlb	1	; () banked
  1489  00563C  6FEE               	movwf	??_main& (0+255),b
  1490  00563E  0101               	movlb	1	; () banked
  1491  005640  5100               	movf	_data_speed_rx& (0+255),w,b	;volatile
  1492  005642  0101               	movlb	1	; () banked
  1493  005644  6F42               	movwf	_left_speed& (0+255),b	;volatile
  1494  005646  C1EE  F143         	movff	??_main,_left_speed+1	;volatile
  1495                           
  1496                           ; BSR set to: 1
  1497                           ;parcheggio.c: 269: right_speed = data_speed_rx[3];
  1498  00564A  C103  F144         	movff	_data_speed_rx+3,_right_speed	;volatile
  1499  00564E  0101               	movlb	1	; () banked
  1500  005650  6B45               	clrf	(_right_speed+1)& (0+255),b	;volatile
  1501                           
  1502                           ; BSR set to: 1
  1503                           ;parcheggio.c: 270: right_speed = ((right_speed << 8) | (data_speed_rx[2]));
  1504  005652  0101               	movlb	1	; () banked
  1505  005654  5144               	movf	_right_speed& (0+255),w,b	;volatile
  1506  005656  0101               	movlb	1	; () banked
  1507  005658  6FEE               	movwf	??_main& (0+255),b
  1508  00565A  0101               	movlb	1	; () banked
  1509  00565C  5102               	movf	(_data_speed_rx+2)& (0+255),w,b	;volatile
  1510  00565E  0101               	movlb	1	; () banked
  1511  005660  6F44               	movwf	_right_speed& (0+255),b	;volatile
  1512  005662  C1EE  F145         	movff	??_main,_right_speed+1	;volatile
  1513                           
  1514                           ; BSR set to: 1
  1515                           ;parcheggio.c: 271: actual_speed = (right_speed + left_speed) / 2;
  1516  005666  0101               	movlb	1	; () banked
  1517  005668  5142               	movf	_left_speed& (0+255),w,b	;volatile
  1518  00566A  0101               	movlb	1	; () banked
  1519  00566C  2544               	addwf	_right_speed& (0+255),w,b	;volatile
  1520  00566E  0101               	movlb	1	; () banked
  1521  005670  6FEE               	movwf	??_main& (0+255),b
  1522  005672  0101               	movlb	1	; () banked
  1523  005674  5143               	movf	(_left_speed+1)& (0+255),w,b	;volatile
  1524  005676  0101               	movlb	1	; () banked
  1525  005678  2145               	addwfc	(_right_speed+1)& (0+255),w,b	;volatile
  1526  00567A  0101               	movlb	1	; () banked
  1527  00567C  6FEF               	movwf	(??_main+1)& (0+255),b
  1528  00567E  90D8               	bcf	status,0,c
  1529  005680  0101               	movlb	1	; () banked
  1530  005682  31EF               	rrcf	(??_main+1)& (0+255),w,b
  1531  005684  0101               	movlb	1	; () banked
  1532  005686  6FF0               	movwf	(??_main+2)& (0+255),b
  1533  005688  0101               	movlb	1	; () banked
  1534  00568A  31EE               	rrcf	??_main& (0+255),w,b
  1535  00568C  0101               	movlb	1	; () banked
  1536  00568E  6F3C               	movwf	_actual_speed& (0+255),b	;volatile
  1537  005690  C1F0  F13D         	movff	??_main+2,_actual_speed+1	;volatile
  1538                           
  1539                           ; BSR set to: 1
  1540                           ;parcheggio.c: 273: park_routine();
  1541  005694  ECBC  F018         	call	_park_routine	;wreg free
  1542  005698  D7C6               	goto	l6840
  1543  00569A  EFA9  F001         	goto	start
  1544  00569E                     __end_of_main:
  1545                           	opt stack 0
  1546                           tblptru	equ	0xFF8
  1547                           tblptrh	equ	0xFF7
  1548                           tblptrl	equ	0xFF6
  1549                           tablat	equ	0xFF5
  1550                           postinc0	equ	0xFEE
  1551                           wreg	equ	0xFE8
  1552                           postdec1	equ	0xFE5
  1553                           fsr1l	equ	0xFE1
  1554                           status	equ	0xFD8
  1555                           
  1556 ;; *************** function _park_search *****************
  1557 ;; Defined at:
  1558 ;;		line 277 in file "parcheggio.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;		None
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;		None
  1563 ;; Return value:  Size  Location     Type
  1564 ;;		None               void
  1565 ;; Registers used:
  1566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1574 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1575 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1576 ;;Total ram usage:        2 bytes
  1577 ;; Hardware stack levels used:    1
  1578 ;; Hardware stack levels required when called:   11
  1579 ;; This function calls:
  1580 ;;		_CANisTxReady
  1581 ;;		_CANsendMessage
  1582 ;;		___awtofl
  1583 ;;		_abs
  1584 ;;		_parallelo
  1585 ;; This function is called by:
  1586 ;;		_main
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text1
  1591  004B52                     __ptext1:
  1592                           	opt stack 0
  1593  004B52                     _park_search:
  1594                           	opt stack 19
  1595                           
  1596                           ;parcheggio.c: 278: while ((activation == 1) && (PORTBbits.RB5 == 0)) {
  1597                           
  1598                           ;incstack = 0
  1599  004B52  D0DD               	goto	l747
  1600  004B54                     l6558:
  1601                           
  1602                           ;parcheggio.c: 280: parallelo();
  1603  004B54  EC55  F021         	call	_parallelo	;wreg free
  1604                           
  1605                           ;parcheggio.c: 282: if (sensor_distance[0] > 50) {
  1606  004B58  502B               	movf	_sensor_distance+1,w,c	;volatile
  1607  004B5A  E104               	bnz	u8220
  1608  004B5C  0E33               	movlw	51
  1609  004B5E  5C2A               	subwf	_sensor_distance,w,c	;volatile
  1610  004B60  A0D8               	btfss	status,0,c
  1611  004B62  D02D               	goto	l749
  1612  004B64                     u8220:
  1613                           
  1614                           ;parcheggio.c: 283: if (request_sent == 0) {
  1615  004B64  A852               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1616  004B66  D002               	goto	l6566
  1617  004B68  D028               	goto	l6574
  1618                           
  1619                           ;parcheggio.c: 284: while (!CANisTxReady());
  1620  004B6A  D000               	goto	l6566
  1621  004B6C                     l6566:
  1622  004B6C  EC17  F02F         	call	_CANisTxReady	;wreg free
  1623  004B70  0900               	iorlw	0
  1624  004B72  B4D8               	btfsc	status,2,c
  1625  004B74  D7FB               	goto	l6566
  1626                           
  1627                           ;parcheggio.c: 285: CANsendMessage(0b00000001010, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1628  004B76  0E0A               	movlw	10
  1629  004B78  0100               	movlb	0	; () banked
  1630  004B7A  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1631  004B7C  0E00               	movlw	0
  1632  004B7E  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1633  004B80  0E00               	movlw	0
  1634  004B82  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1635  004B84  0E00               	movlw	0
  1636  004B86  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1637  004B88  0E55               	movlw	low _data
  1638  004B8A  0100               	movlb	0	; () banked
  1639  004B8C  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1640  004B8E  0E01               	movlw	high _data
  1641  004B90  0100               	movlb	0	; () banked
  1642  004B92  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1643  004B94  0E08               	movlw	8
  1644  004B96  0100               	movlb	0	; () banked
  1645  004B98  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1646  004B9A  0EFC               	movlw	252
  1647  004B9C  0100               	movlb	0	; () banked
  1648  004B9E  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1649  004BA0  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1650                           
  1651                           ;parcheggio.c: 286: request_sent = 1;
  1652  004BA4  8852               	bsf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1653                           
  1654                           ;parcheggio.c: 287: alignment_gap = 0;
  1655  004BA6  0E00               	movlw	0
  1656  004BA8  0100               	movlb	0	; () banked
  1657  004BAA  6FD7               	movwf	_alignment_gap& (0+255),b	;volatile
  1658  004BAC  0E00               	movlw	0
  1659  004BAE  6FD8               	movwf	(_alignment_gap+1)& (0+255),b	;volatile
  1660  004BB0  0E00               	movlw	0
  1661  004BB2  6FD9               	movwf	(_alignment_gap+2)& (0+255),b	;volatile
  1662  004BB4  0E00               	movlw	0
  1663  004BB6  6FDA               	movwf	(_alignment_gap+3)& (0+255),b	;volatile
  1664  004BB8  D000               	goto	l6574
  1665  004BBA                     l6574:
  1666                           
  1667                           ;parcheggio.c: 288: }
  1668                           ;parcheggio.c: 289: LATBbits.LATB4 = 1;
  1669  004BBA  888A               	bsf	3978,4,c	;volatile
  1670                           
  1671                           ;parcheggio.c: 290: } else {
  1672  004BBC  D027               	goto	l6578
  1673  004BBE                     l749:
  1674                           
  1675                           ;parcheggio.c: 291: LATBbits.LATB4 = 0;
  1676  004BBE  988A               	bcf	3978,4,c	;volatile
  1677                           
  1678                           ;parcheggio.c: 292: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  1679  004BC0  EE20  F02C         	lfsr	2,_sensor_distance+2	;volatile
  1680  004BC4  CFDE F1BE          	movff	postinc2,??_park_search
  1681  004BC8  CFDD F1BF          	movff	postdec2,??_park_search+1
  1682  004BCC  0101               	movlb	1	; () banked
  1683  004BCE  1FBE               	comf	??_park_search& (0+255),f,b
  1684  004BD0  1FBF               	comf	(??_park_search+1)& (0+255),f,b
  1685  004BD2  4BBE               	infsnz	??_park_search& (0+255),f,b
  1686  004BD4  2BBF               	incf	(??_park_search+1)& (0+255),f,b
  1687  004BD6  502A               	movf	_sensor_distance,w,c	;volatile
  1688  004BD8  0101               	movlb	1	; () banked
  1689  004BDA  25BE               	addwf	??_park_search& (0+255),w,b
  1690  004BDC  0100               	movlb	0	; () banked
  1691  004BDE  6F77               	movwf	abs@a& (0+255),b
  1692  004BE0  502B               	movf	_sensor_distance+1,w,c	;volatile
  1693  004BE2  0101               	movlb	1	; () banked
  1694  004BE4  21BF               	addwfc	(??_park_search+1)& (0+255),w,b
  1695  004BE6  0100               	movlb	0	; () banked
  1696  004BE8  6F78               	movwf	(abs@a+1)& (0+255),b
  1697  004BEA  ECED  F02E         	call	_abs	;wreg free
  1698  004BEE  C077  F081         	movff	?_abs,___awtofl@c
  1699  004BF2  C078  F082         	movff	?_abs+1,___awtofl@c+1
  1700  004BF6  EC05  F02E         	call	___awtofl	;wreg free
  1701  004BFA  C081  F0D7         	movff	?___awtofl,_alignment_gap	;volatile
  1702  004BFE  C082  F0D8         	movff	?___awtofl+1,_alignment_gap+1	;volatile
  1703  004C02  C083  F0D9         	movff	?___awtofl+2,_alignment_gap+2	;volatile
  1704  004C06  C084  F0DA         	movff	?___awtofl+3,_alignment_gap+3	;volatile
  1705  004C0A  D000               	goto	l6578
  1706  004C0C                     l6578:
  1707                           
  1708                           ;parcheggio.c: 293: }
  1709                           ;parcheggio.c: 295: if ((sensor_distance[0] < 50) && (request_sent == 1)&&(sensor_distan
      +                          ce[1] < 50)) {
  1710  004C0C  502B               	movf	_sensor_distance+1,w,c	;volatile
  1711  004C0E  E12B               	bnz	l6590
  1712  004C10  0E32               	movlw	50
  1713  004C12  5C2A               	subwf	_sensor_distance,w,c	;volatile
  1714  004C14  B0D8               	btfsc	status,0,c
  1715  004C16  D027               	goto	l6590
  1716  004C18  A852               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1717  004C1A  D025               	goto	l6590
  1718  004C1C  502D               	movf	_sensor_distance+3,w,c	;volatile
  1719  004C1E  E123               	bnz	l6590
  1720  004C20  0E32               	movlw	50
  1721  004C22  5C2C               	subwf	_sensor_distance+2,w,c	;volatile
  1722  004C24  B0D8               	btfsc	status,0,c
  1723  004C26  D01F               	goto	l6590
  1724                           
  1725                           ;parcheggio.c: 296: request_sent = 0;
  1726  004C28  9852               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1727                           
  1728                           ;parcheggio.c: 297: while (!CANisTxReady());
  1729  004C2A  D000               	goto	l6586
  1730  004C2C                     l6586:
  1731  004C2C  EC17  F02F         	call	_CANisTxReady	;wreg free
  1732  004C30  0900               	iorlw	0
  1733  004C32  B4D8               	btfsc	status,2,c
  1734  004C34  D7FB               	goto	l6586
  1735                           
  1736                           ;parcheggio.c: 298: CANsendMessage(0b00000001001, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1737  004C36  0E09               	movlw	9
  1738  004C38  0100               	movlb	0	; () banked
  1739  004C3A  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1740  004C3C  0E00               	movlw	0
  1741  004C3E  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1742  004C40  0E00               	movlw	0
  1743  004C42  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1744  004C44  0E00               	movlw	0
  1745  004C46  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1746  004C48  0E55               	movlw	low _data
  1747  004C4A  0100               	movlb	0	; () banked
  1748  004C4C  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1749  004C4E  0E01               	movlw	high _data
  1750  004C50  0100               	movlb	0	; () banked
  1751  004C52  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1752  004C54  0E08               	movlw	8
  1753  004C56  0100               	movlb	0	; () banked
  1754  004C58  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1755  004C5A  0EFC               	movlw	252
  1756  004C5C  0100               	movlb	0	; () banked
  1757  004C5E  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1758  004C60  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1759  004C64  D000               	goto	l6590
  1760  004C66                     l6590:
  1761                           
  1762                           ;parcheggio.c: 299: }
  1763                           ;parcheggio.c: 301: if (distance_received == 1) {
  1764  004C66  AC51               	btfss	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1765  004C68  D052               	goto	l747
  1766                           
  1767                           ;parcheggio.c: 302: if (distance_average > 65) {
  1768  004C6A  0101               	movlb	1	; () banked
  1769  004C6C  513F               	movf	(_distance_average+1)& (0+255),w,b	;volatile
  1770  004C6E  E105               	bnz	u8300
  1771  004C70  0E42               	movlw	66
  1772  004C72  0101               	movlb	1	; () banked
  1773  004C74  5D3E               	subwf	_distance_average& (0+255),w,b	;volatile
  1774  004C76  A0D8               	btfss	status,0,c
  1775  004C78  D047               	goto	l760
  1776  004C7A                     u8300:
  1777                           
  1778                           ; BSR set to: 1
  1779                           ;parcheggio.c: 303: PORTBbits.RB5 = 1;
  1780  004C7A  8A81               	bsf	3969,5,c	;volatile
  1781                           
  1782                           ; BSR set to: 1
  1783                           ;parcheggio.c: 304: data[0] = 1;
  1784  004C7C  0E01               	movlw	1
  1785  004C7E  0101               	movlb	1	; () banked
  1786  004C80  6F55               	movwf	_data& (0+255),b	;volatile
  1787                           
  1788                           ; BSR set to: 1
  1789                           ;parcheggio.c: 305: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  1790  004C82  0E0D               	movlw	13
  1791  004C84  0100               	movlb	0	; () banked
  1792  004C86  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1793  004C88  0E00               	movlw	0
  1794  004C8A  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1795  004C8C  0E00               	movlw	0
  1796  004C8E  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1797  004C90  0E00               	movlw	0
  1798  004C92  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1799  004C94  0E55               	movlw	low _data
  1800  004C96  0100               	movlb	0	; () banked
  1801  004C98  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1802  004C9A  0E01               	movlw	high _data
  1803  004C9C  0100               	movlb	0	; () banked
  1804  004C9E  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1805  004CA0  0E01               	movlw	1
  1806  004CA2  0100               	movlb	0	; () banked
  1807  004CA4  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1808  004CA6  0EBC               	movlw	188
  1809  004CA8  0100               	movlb	0	; () banked
  1810  004CAA  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1811  004CAC  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1812                           
  1813                           ;parcheggio.c: 306: if ((request_sent1 == 0)&&(sensor_distance[0] < 40)) {
  1814  004CB0  BA52               	btfsc	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1815  004CB2  D02D               	goto	l747
  1816  004CB4  502B               	movf	_sensor_distance+1,w,c	;volatile
  1817  004CB6  E12B               	bnz	l747
  1818  004CB8  0E28               	movlw	40
  1819  004CBA  5C2A               	subwf	_sensor_distance,w,c	;volatile
  1820  004CBC  B0D8               	btfsc	status,0,c
  1821  004CBE  D027               	goto	l747
  1822                           
  1823                           ;parcheggio.c: 307: data_test[0] = 50;
  1824  004CC0  0E32               	movlw	50
  1825  004CC2  0101               	movlb	1	; () banked
  1826  004CC4  6F7D               	movwf	_data_test& (0+255),b	;volatile
  1827                           
  1828                           ; BSR set to: 1
  1829                           ;parcheggio.c: 308: asd = 1;
  1830  004CC6  8451               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  1831                           
  1832                           ; BSR set to: 1
  1833                           
  1834                           ;parcheggio.c: 309: while (!CANisTxReady());
  1835  004CC8  D000               	goto	l6608
  1836  004CCA                     l6608:
  1837  004CCA  EC17  F02F         	call	_CANisTxReady	;wreg free
  1838  004CCE  0900               	iorlw	0
  1839  004CD0  B4D8               	btfsc	status,2,c
  1840  004CD2  D7FB               	goto	l6608
  1841                           
  1842                           ;parcheggio.c: 310: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1843  004CD4  0E0F               	movlw	15
  1844  004CD6  0100               	movlb	0	; () banked
  1845  004CD8  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1846  004CDA  0E00               	movlw	0
  1847  004CDC  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1848  004CDE  0E00               	movlw	0
  1849  004CE0  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1850  004CE2  0E00               	movlw	0
  1851  004CE4  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1852  004CE6  0E7D               	movlw	low _data_test
  1853  004CE8  0100               	movlb	0	; () banked
  1854  004CEA  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1855  004CEC  0E01               	movlw	high _data_test
  1856  004CEE  0100               	movlb	0	; () banked
  1857  004CF0  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1858  004CF2  0E08               	movlw	8
  1859  004CF4  0100               	movlb	0	; () banked
  1860  004CF6  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1861  004CF8  0EBC               	movlw	188
  1862  004CFA  0100               	movlb	0	; () banked
  1863  004CFC  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1864  004CFE  EC3E  F00C         	call	_CANsendMessage	;wreg free
  1865                           
  1866                           ;parcheggio.c: 312: distance_received1 = 0;
  1867  004D02  9E51               	bcf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
  1868                           
  1869                           ;parcheggio.c: 313: request_sent1 = 1;
  1870  004D04  8A52               	bsf	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1871                           
  1872                           ;parcheggio.c: 314: }
  1873                           ;parcheggio.c: 315: } else {
  1874  004D06  D003               	goto	l747
  1875  004D08                     l760:
  1876                           
  1877                           ; BSR set to: 1
  1878                           ;parcheggio.c: 316: distance_received = 0;
  1879  004D08  9C51               	bcf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1880                           
  1881                           ;parcheggio.c: 317: PORTBbits.RB5 = 0;
  1882  004D0A  9A81               	bcf	3969,5,c	;volatile
  1883                           
  1884                           ; BSR set to: 1
  1885  004D0C  D000               	goto	l747
  1886  004D0E                     l747:
  1887  004D0E  A251               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1888  004D10  0012               	return	
  1889  004D12  BA81               	btfsc	3969,5,c	;volatile
  1890  004D14  0012               	return	
  1891  004D16  D71E               	goto	l6558
  1892  004D18  0012               	return	
  1893  004D1A  0012               	return		;funcret
  1894  004D1C                     __end_of_park_search:
  1895                           	opt stack 0
  1896                           tblptru	equ	0xFF8
  1897                           tblptrh	equ	0xFF7
  1898                           tblptrl	equ	0xFF6
  1899                           tablat	equ	0xFF5
  1900                           postinc0	equ	0xFEE
  1901                           wreg	equ	0xFE8
  1902                           postdec1	equ	0xFE5
  1903                           fsr1l	equ	0xFE1
  1904                           postinc2	equ	0xFDE
  1905                           postdec2	equ	0xFDD
  1906                           status	equ	0xFD8
  1907                           
  1908 ;; *************** function _park_routine *****************
  1909 ;; Defined at:
  1910 ;;		line 323 in file "parcheggio.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;		None
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;		None               void
  1917 ;; Registers used:
  1918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1925 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  1926 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  1927 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
  1928 ;;Total ram usage:       12 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:   11
  1931 ;; This function calls:
  1932 ;;		_CANisTxReady
  1933 ;;		_CANsendMessage
  1934 ;;		___fladd
  1935 ;;		___flneg
  1936 ;;		___fltol
  1937 ;;		___lwtofl
  1938 ;;		_can_send
  1939 ;;		_delay_ms
  1940 ;;		_delay_s
  1941 ;;		_matematica
  1942 ;;		_parallelo
  1943 ;; This function is called by:
  1944 ;;		_main
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           	psect	text2
  1949  003178                     __ptext2:
  1950                           	opt stack 0
  1951  003178                     _park_routine:
  1952                           	opt stack 19
  1953                           
  1954                           ;parcheggio.c: 324: avvicinamento = 0;
  1955                           
  1956                           ;incstack = 0
  1957  003178  9651               	bcf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  1958                           
  1959                           ;parcheggio.c: 325: data_correction[0] = 0;
  1960  00317A  0E00               	movlw	0
  1961  00317C  0101               	movlb	1	; () banked
  1962  00317E  6F65               	movwf	_data_correction& (0+255),b	;volatile
  1963                           
  1964                           ; BSR set to: 1
  1965                           ;parcheggio.c: 327: parallelo();
  1966  003180  EC55  F021         	call	_parallelo	;wreg free
  1967                           
  1968                           ;parcheggio.c: 329: while ((asd == 1)&&(PORTBbits.RB5 == 1) && (activation == 1)) {
  1969  003184  D02F               	goto	l6638
  1970  003186                     l6624:
  1971                           
  1972                           ;parcheggio.c: 330: delay_ms(50);
  1973  003186  0E00               	movlw	0
  1974  003188  0100               	movlb	0	; () banked
  1975  00318A  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1976  00318C  0E32               	movlw	50
  1977  00318E  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1978  003190  EC68  F02E         	call	_delay_ms	;wreg free
  1979                           
  1980                           ;parcheggio.c: 331: PORTBbits.RB6 = ~PORTBbits.RB6;
  1981  003194  7C81               	btg	3969,6,c	;volatile
  1982                           
  1983                           ;parcheggio.c: 332: parallelo();
  1984  003196  EC55  F021         	call	_parallelo	;wreg free
  1985                           
  1986                           ;parcheggio.c: 333: if (data_correction[0] > 30) {
  1987  00319A  0E1E               	movlw	30
  1988  00319C  0101               	movlb	1	; () banked
  1989  00319E  6565               	cpfsgt	_data_correction& (0+255),b	;volatile
  1990  0031A0  D004               	goto	l6634
  1991                           
  1992                           ; BSR set to: 1
  1993                           ;parcheggio.c: 334: data_correction[0] = 0;
  1994  0031A2  0E00               	movlw	0
  1995  0031A4  0101               	movlb	1	; () banked
  1996  0031A6  6F65               	movwf	_data_correction& (0+255),b	;volatile
  1997                           
  1998                           ; BSR set to: 1
  1999                           
  2000                           ; BSR set to: 1
  2001                           ;parcheggio.c: 335: }
  2002                           ;parcheggio.c: 336: while (!CANisTxReady());
  2003  0031A8  D000               	goto	l6634
  2004  0031AA                     l6634:
  2005  0031AA  EC17  F02F         	call	_CANisTxReady	;wreg free
  2006  0031AE  0900               	iorlw	0
  2007  0031B0  B4D8               	btfsc	status,2,c
  2008  0031B2  D7FB               	goto	l6634
  2009                           
  2010                           ;parcheggio.c: 337: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2011  0031B4  0E10               	movlw	16
  2012  0031B6  0100               	movlb	0	; () banked
  2013  0031B8  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2014  0031BA  0E00               	movlw	0
  2015  0031BC  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2016  0031BE  0E00               	movlw	0
  2017  0031C0  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2018  0031C2  0E00               	movlw	0
  2019  0031C4  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2020  0031C6  0E65               	movlw	low _data_correction
  2021  0031C8  0100               	movlb	0	; () banked
  2022  0031CA  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2023  0031CC  0E01               	movlw	high _data_correction
  2024  0031CE  0100               	movlb	0	; () banked
  2025  0031D0  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2026  0031D2  0E08               	movlw	8
  2027  0031D4  0100               	movlb	0	; () banked
  2028  0031D6  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2029  0031D8  0EBC               	movlw	188
  2030  0031DA  0100               	movlb	0	; () banked
  2031  0031DC  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2032  0031DE  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2033  0031E2  D000               	goto	l6638
  2034  0031E4                     l6638:
  2035  0031E4  B451               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2036  0031E6  AA81               	btfss	3969,5,c	;volatile
  2037  0031E8  D002               	goto	l780
  2038  0031EA  B251               	btfsc	_activation/(0+8),_activation& (0+7),c	;volatile
  2039  0031EC  D7CC               	goto	l6624
  2040  0031EE                     l780:
  2041                           
  2042                           ;parcheggio.c: 338: }
  2043                           ;parcheggio.c: 340: if ((PORTBbits.RB5 == 1) && (activation == 1)) {
  2044  0031EE  BA81               	btfsc	3969,5,c	;volatile
  2045  0031F0  A251               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2046  0031F2  D030               	goto	l6658
  2047                           
  2048                           ;parcheggio.c: 341: PORTBbits.RB6 = 0;
  2049  0031F4  9C81               	bcf	3969,6,c	;volatile
  2050                           
  2051                           ;parcheggio.c: 342: data[0] = 2;
  2052  0031F6  0E02               	movlw	2
  2053  0031F8  0101               	movlb	1	; () banked
  2054  0031FA  6F55               	movwf	_data& (0+255),b	;volatile
  2055                           
  2056                           ; BSR set to: 1
  2057                           ;parcheggio.c: 343: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  2058  0031FC  0E0D               	movlw	13
  2059  0031FE  0100               	movlb	0	; () banked
  2060  003200  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2061  003202  0E00               	movlw	0
  2062  003204  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2063  003206  0E00               	movlw	0
  2064  003208  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2065  00320A  0E00               	movlw	0
  2066  00320C  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2067  00320E  0E55               	movlw	low _data
  2068  003210  0100               	movlb	0	; () banked
  2069  003212  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2070  003214  0E01               	movlw	high _data
  2071  003216  0100               	movlb	0	; () banked
  2072  003218  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2073  00321A  0E01               	movlw	1
  2074  00321C  0100               	movlb	0	; () banked
  2075  00321E  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2076  003220  0EBC               	movlw	188
  2077  003222  0100               	movlb	0	; () banked
  2078  003224  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2079  003226  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2080                           
  2081                           ;parcheggio.c: 344: }
  2082                           ;parcheggio.c: 346: while ((start_operation != 1)&&(activation == 1)) {
  2083  00322A  D014               	goto	l6658
  2084  00322C                     l783:
  2085                           
  2086                           ;parcheggio.c: 347: if (first == 0) {
  2087  00322C  B252               	btfsc	_first/(0+8),_first& (0+7),c	;volatile
  2088  00322E  D012               	goto	l6658
  2089                           
  2090                           ;parcheggio.c: 348: set_speed = 0;
  2091  003230  0E00               	movlw	0
  2092  003232  0100               	movlb	0	; () banked
  2093  003234  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2094  003236  0E00               	movlw	0
  2095  003238  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2096                           
  2097                           ;parcheggio.c: 349: data_steering[0] = 90;
  2098  00323A  0E5A               	movlw	90
  2099  00323C  0101               	movlb	1	; () banked
  2100  00323E  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2101                           
  2102                           ;parcheggio.c: 350: data_brake [0] = 0;
  2103  003240  0E00               	movlw	0
  2104  003242  0101               	movlb	1	; () banked
  2105  003244  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2106                           
  2107                           ;parcheggio.c: 351: data_brake [1] = 1;
  2108  003246  0E01               	movlw	1
  2109  003248  0101               	movlb	1	; () banked
  2110  00324A  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2111                           
  2112                           ; BSR set to: 1
  2113                           ;parcheggio.c: 352: can_send();
  2114  00324C  EC46  F02A         	call	_can_send	;wreg free
  2115                           
  2116                           ;parcheggio.c: 353: first = 1;
  2117  003250  8252               	bsf	_first/(0+8),_first& (0+7),c	;volatile
  2118  003252  D000               	goto	l6658
  2119  003254                     l6658:
  2120  003254  AC52               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  2121  003256  A251               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2122  003258  D1F4               	goto	l6772
  2123  00325A  D7E8               	goto	l783
  2124                           
  2125                           ;parcheggio.c: 354: }
  2126                           ;parcheggio.c: 355: }
  2127                           ;parcheggio.c: 357: while ((PORTBbits.RB5 == 1) && (activation == 1)&&(start_operation =
      +                          = 1)) {
  2128  00325C  D1F2               	goto	l6772
  2129  00325E                     l789:
  2130                           
  2131                           ;parcheggio.c: 358: LATBbits.LATB4 = 1;
  2132  00325E  888A               	bsf	3978,4,c	;volatile
  2133                           
  2134                           ;parcheggio.c: 360: bordo = ((sensor_distance[1] + sensor_distance[0]) / 2);
  2135  003260  502A               	movf	_sensor_distance,w,c	;volatile
  2136  003262  242C               	addwf	_sensor_distance+2,w,c	;volatile
  2137  003264  0101               	movlb	1	; () banked
  2138  003266  6FE2               	movwf	??_park_routine& (0+255),b
  2139  003268  502B               	movf	_sensor_distance+1,w,c	;volatile
  2140  00326A  202D               	addwfc	_sensor_distance+3,w,c	;volatile
  2141  00326C  0101               	movlb	1	; () banked
  2142  00326E  6FE3               	movwf	(??_park_routine+1)& (0+255),b
  2143  003270  90D8               	bcf	status,0,c
  2144  003272  0101               	movlb	1	; () banked
  2145  003274  31E3               	rrcf	(??_park_routine+1)& (0+255),w,b
  2146  003276  0101               	movlb	1	; () banked
  2147  003278  6FE4               	movwf	(??_park_routine+2)& (0+255),b
  2148  00327A  0101               	movlb	1	; () banked
  2149  00327C  31E2               	rrcf	??_park_routine& (0+255),w,b
  2150  00327E  0100               	movlb	0	; () banked
  2151  003280  6F81               	movwf	___lwtofl@c& (0+255),b
  2152  003282  C1E4  F082         	movff	??_park_routine+2,___lwtofl@c+1
  2153  003286  ECBD  F02E         	call	___lwtofl	;wreg free
  2154  00328A  C081  F12C         	movff	?___lwtofl,_bordo	;volatile
  2155  00328E  C082  F12D         	movff	?___lwtofl+1,_bordo+1	;volatile
  2156  003292  C083  F12E         	movff	?___lwtofl+2,_bordo+2	;volatile
  2157  003296  C084  F12F         	movff	?___lwtofl+3,_bordo+3	;volatile
  2158                           
  2159                           ;parcheggio.c: 361: matematica();
  2160  00329A  EC60  F013         	call	_matematica	;wreg free
  2161                           
  2162                           ;parcheggio.c: 363: set_speed = 0;
  2163  00329E  0E00               	movlw	0
  2164  0032A0  0100               	movlb	0	; () banked
  2165  0032A2  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2166  0032A4  0E00               	movlw	0
  2167  0032A6  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;parcheggio.c: 364: data_steering[0] = 90;
  2171  0032A8  0E5A               	movlw	90
  2172  0032AA  0101               	movlb	1	; () banked
  2173  0032AC  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2174                           
  2175                           ; BSR set to: 1
  2176                           ;parcheggio.c: 365: data_brake [0] = 0;
  2177  0032AE  0E00               	movlw	0
  2178  0032B0  0101               	movlb	1	; () banked
  2179  0032B2  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2180                           
  2181                           ; BSR set to: 1
  2182                           ;parcheggio.c: 366: data_brake [1] = 1;
  2183  0032B4  0E01               	movlw	1
  2184  0032B6  0101               	movlb	1	; () banked
  2185  0032B8  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2186                           
  2187                           ; BSR set to: 1
  2188                           ;parcheggio.c: 367: can_send();
  2189  0032BA  EC46  F02A         	call	_can_send	;wreg free
  2190                           
  2191                           ;parcheggio.c: 369: delay_s(1);
  2192  0032BE  0E01               	movlw	1
  2193  0032C0  ECD6  F02E         	call	_delay_s
  2194                           
  2195                           ;parcheggio.c: 371: data_brake [0] = 3;
  2196  0032C4  0E03               	movlw	3
  2197  0032C6  0101               	movlb	1	; () banked
  2198  0032C8  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2199                           
  2200                           ; BSR set to: 1
  2201                           ;parcheggio.c: 372: data_brake [1] = 1;
  2202  0032CA  0E01               	movlw	1
  2203  0032CC  0101               	movlb	1	; () banked
  2204  0032CE  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2205                           
  2206                           ; BSR set to: 1
  2207                           ;parcheggio.c: 374: set_speed = 300;
  2208  0032D0  0E01               	movlw	1
  2209  0032D2  0100               	movlb	0	; () banked
  2210  0032D4  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2211  0032D6  0E2C               	movlw	44
  2212  0032D8  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;parcheggio.c: 375: dir = 0;
  2216  0032DA  9851               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;parcheggio.c: 376: data_steering[0] = 90;
  2220  0032DC  0E5A               	movlw	90
  2221  0032DE  0101               	movlb	1	; () banked
  2222  0032E0  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2223                           
  2224                           ; BSR set to: 1
  2225                           ;parcheggio.c: 377: data_test[0] = ((60 + Pmin + 6)-(n + 15));
  2226  0032E2  0E00               	movlw	0
  2227  0032E4  0100               	movlb	0	; () banked
  2228  0032E6  6FA3               	movwf	___fladd@f2& (0+255),b
  2229  0032E8  0E00               	movlw	0
  2230  0032EA  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2231  0032EC  0E70               	movlw	112
  2232  0032EE  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2233  0032F0  0E41               	movlw	65
  2234  0032F2  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2235  0032F4  C130  F09F         	movff	_n,___fladd@f1	;volatile
  2236  0032F8  C131  F0A0         	movff	_n+1,___fladd@f1+1	;volatile
  2237  0032FC  C132  F0A1         	movff	_n+2,___fladd@f1+2	;volatile
  2238  003300  C133  F0A2         	movff	_n+3,___fladd@f1+3	;volatile
  2239  003304  EC1F  F020         	call	___fladd	;wreg free
  2240  003308  C09F  F0AB         	movff	?___fladd,___flneg@f1
  2241  00330C  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  2242  003310  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  2243  003314  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  2244  003318  EC4A  F02E         	call	___flneg	;wreg free
  2245  00331C  C0AB  F1E6         	movff	?___flneg,_park_routine$3666
  2246  003320  C0AC  F1E7         	movff	?___flneg+1,_park_routine$3666+1
  2247  003324  C0AD  F1E8         	movff	?___flneg+2,_park_routine$3666+2
  2248  003328  C0AE  F1E9         	movff	?___flneg+3,_park_routine$3666+3
  2249                           
  2250                           ;parcheggio.c: 377: data_test[0] = ((60 + Pmin + 6)-(n + 15));
  2251  00332C  C120  F0A3         	movff	_Pmin,___fladd@f2	;volatile
  2252  003330  C121  F0A4         	movff	_Pmin+1,___fladd@f2+1	;volatile
  2253  003334  C122  F0A5         	movff	_Pmin+2,___fladd@f2+2	;volatile
  2254  003338  C123  F0A6         	movff	_Pmin+3,___fladd@f2+3	;volatile
  2255  00333C  C1E6  F09F         	movff	_park_routine$3666,___fladd@f1
  2256  003340  C1E7  F0A0         	movff	_park_routine$3666+1,___fladd@f1+1
  2257  003344  C1E8  F0A1         	movff	_park_routine$3666+2,___fladd@f1+2
  2258  003348  C1E9  F0A2         	movff	_park_routine$3666+3,___fladd@f1+3
  2259  00334C  EC1F  F020         	call	___fladd	;wreg free
  2260  003350  C09F  F1EA         	movff	?___fladd,_park_routine$3667
  2261  003354  C0A0  F1EB         	movff	?___fladd+1,_park_routine$3667+1
  2262  003358  C0A1  F1EC         	movff	?___fladd+2,_park_routine$3667+2
  2263  00335C  C0A2  F1ED         	movff	?___fladd+3,_park_routine$3667+3
  2264                           
  2265                           ;parcheggio.c: 377: data_test[0] = ((60 + Pmin + 6)-(n + 15));
  2266  003360  0E00               	movlw	0
  2267  003362  0100               	movlb	0	; () banked
  2268  003364  6FA3               	movwf	___fladd@f2& (0+255),b
  2269  003366  0E00               	movlw	0
  2270  003368  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2271  00336A  0E84               	movlw	132
  2272  00336C  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2273  00336E  0E42               	movlw	66
  2274  003370  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2275  003372  C1EA  F09F         	movff	_park_routine$3667,___fladd@f1
  2276  003376  C1EB  F0A0         	movff	_park_routine$3667+1,___fladd@f1+1
  2277  00337A  C1EC  F0A1         	movff	_park_routine$3667+2,___fladd@f1+2
  2278  00337E  C1ED  F0A2         	movff	_park_routine$3667+3,___fladd@f1+3
  2279  003382  EC1F  F020         	call	___fladd	;wreg free
  2280  003386  C09F  F0AF         	movff	?___fladd,___fltol@f1
  2281  00338A  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  2282  00338E  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  2283  003392  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  2284  003396  EC2C  F029         	call	___fltol	;wreg free
  2285  00339A  0100               	movlb	0	; () banked
  2286  00339C  51AF               	movf	?___fltol& (0+255),w,b
  2287  00339E  0101               	movlb	1	; () banked
  2288  0033A0  6F7D               	movwf	_data_test& (0+255),b	;volatile
  2289                           
  2290                           ; BSR set to: 1
  2291                           ;parcheggio.c: 378: asd = 1;
  2292  0033A2  8451               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2293                           
  2294                           ; BSR set to: 1
  2295                           
  2296                           ;parcheggio.c: 379: while (!CANisTxReady());
  2297  0033A4  D000               	goto	l6696
  2298  0033A6                     l6696:
  2299  0033A6  EC17  F02F         	call	_CANisTxReady	;wreg free
  2300  0033AA  0900               	iorlw	0
  2301  0033AC  B4D8               	btfsc	status,2,c
  2302  0033AE  D7FB               	goto	l6696
  2303                           
  2304                           ;parcheggio.c: 380: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2305  0033B0  0E0F               	movlw	15
  2306  0033B2  0100               	movlb	0	; () banked
  2307  0033B4  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2308  0033B6  0E00               	movlw	0
  2309  0033B8  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2310  0033BA  0E00               	movlw	0
  2311  0033BC  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2312  0033BE  0E00               	movlw	0
  2313  0033C0  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2314  0033C2  0E7D               	movlw	low _data_test
  2315  0033C4  0100               	movlb	0	; () banked
  2316  0033C6  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2317  0033C8  0E01               	movlw	high _data_test
  2318  0033CA  0100               	movlb	0	; () banked
  2319  0033CC  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2320  0033CE  0E08               	movlw	8
  2321  0033D0  0100               	movlb	0	; () banked
  2322  0033D2  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2323  0033D4  0EBC               	movlw	188
  2324  0033D6  0100               	movlb	0	; () banked
  2325  0033D8  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2326  0033DA  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2327                           
  2328                           ;parcheggio.c: 381: can_send();
  2329  0033DE  EC46  F02A         	call	_can_send	;wreg free
  2330                           
  2331                           ;parcheggio.c: 383: while (asd == 1);
  2332  0033E2  D000               	goto	l793
  2333  0033E4                     l793:
  2334  0033E4  B451               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2335  0033E6  D7FE               	goto	l793
  2336                           
  2337                           ;parcheggio.c: 385: set_speed = 0;
  2338  0033E8  0E00               	movlw	0
  2339  0033EA  0100               	movlb	0	; () banked
  2340  0033EC  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2341  0033EE  0E00               	movlw	0
  2342  0033F0  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2343                           
  2344                           ;parcheggio.c: 386: data_steering[0] = 90;
  2345  0033F2  0E5A               	movlw	90
  2346  0033F4  0101               	movlb	1	; () banked
  2347  0033F6  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2348                           
  2349                           ;parcheggio.c: 387: data_brake [0] = 0;
  2350  0033F8  0E00               	movlw	0
  2351  0033FA  0101               	movlb	1	; () banked
  2352  0033FC  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2353                           
  2354                           ;parcheggio.c: 388: data_brake [1] = 1;
  2355  0033FE  0E01               	movlw	1
  2356  003400  0101               	movlb	1	; () banked
  2357  003402  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2358                           
  2359                           ; BSR set to: 1
  2360                           ;parcheggio.c: 389: can_send();
  2361  003404  EC46  F02A         	call	_can_send	;wreg free
  2362                           
  2363                           ;parcheggio.c: 391: delay_s(1);
  2364  003408  0E01               	movlw	1
  2365  00340A  ECD6  F02E         	call	_delay_s
  2366                           
  2367                           ;parcheggio.c: 393: data_brake [0] = 3;
  2368  00340E  0E03               	movlw	3
  2369  003410  0101               	movlb	1	; () banked
  2370  003412  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2371                           
  2372                           ; BSR set to: 1
  2373                           ;parcheggio.c: 394: data_brake [1] = 1;
  2374  003414  0E01               	movlw	1
  2375  003416  0101               	movlb	1	; () banked
  2376  003418  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2377                           
  2378                           ; BSR set to: 1
  2379                           ;parcheggio.c: 395: set_speed = 300;
  2380  00341A  0E01               	movlw	1
  2381  00341C  0100               	movlb	0	; () banked
  2382  00341E  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2383  003420  0E2C               	movlw	44
  2384  003422  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;parcheggio.c: 396: dir = 0;
  2388  003424  9851               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;parcheggio.c: 397: data_steering[0] = 180;
  2392  003426  0EB4               	movlw	180
  2393  003428  0101               	movlb	1	; () banked
  2394  00342A  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2395                           
  2396                           ; BSR set to: 1
  2397                           ;parcheggio.c: 398: data_test[0] = prima_sterzata;
  2398  00342C  C138  F0AF         	movff	_prima_sterzata,___fltol@f1	;volatile
  2399  003430  C139  F0B0         	movff	_prima_sterzata+1,___fltol@f1+1	;volatile
  2400  003434  C13A  F0B1         	movff	_prima_sterzata+2,___fltol@f1+2	;volatile
  2401  003438  C13B  F0B2         	movff	_prima_sterzata+3,___fltol@f1+3	;volatile
  2402  00343C  EC2C  F029         	call	___fltol	;wreg free
  2403  003440  0100               	movlb	0	; () banked
  2404  003442  51AF               	movf	?___fltol& (0+255),w,b
  2405  003444  0101               	movlb	1	; () banked
  2406  003446  6F7D               	movwf	_data_test& (0+255),b	;volatile
  2407                           
  2408                           ; BSR set to: 1
  2409                           ;parcheggio.c: 399: asd = 1;
  2410  003448  8451               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2411                           
  2412                           ; BSR set to: 1
  2413                           
  2414                           ;parcheggio.c: 400: while (!CANisTxReady());
  2415  00344A  D000               	goto	l6720
  2416  00344C                     l6720:
  2417  00344C  EC17  F02F         	call	_CANisTxReady	;wreg free
  2418  003450  0900               	iorlw	0
  2419  003452  B4D8               	btfsc	status,2,c
  2420  003454  D7FB               	goto	l6720
  2421                           
  2422                           ;parcheggio.c: 401: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2423  003456  0E0F               	movlw	15
  2424  003458  0100               	movlb	0	; () banked
  2425  00345A  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2426  00345C  0E00               	movlw	0
  2427  00345E  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2428  003460  0E00               	movlw	0
  2429  003462  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2430  003464  0E00               	movlw	0
  2431  003466  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2432  003468  0E7D               	movlw	low _data_test
  2433  00346A  0100               	movlb	0	; () banked
  2434  00346C  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2435  00346E  0E01               	movlw	high _data_test
  2436  003470  0100               	movlb	0	; () banked
  2437  003472  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2438  003474  0E08               	movlw	8
  2439  003476  0100               	movlb	0	; () banked
  2440  003478  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2441  00347A  0EBC               	movlw	188
  2442  00347C  0100               	movlb	0	; () banked
  2443  00347E  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2444  003480  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2445                           
  2446                           ;parcheggio.c: 402: while (!CANisTxReady());
  2447  003484  D000               	goto	l6724
  2448  003486                     l6724:
  2449  003486  EC17  F02F         	call	_CANisTxReady	;wreg free
  2450  00348A  0900               	iorlw	0
  2451  00348C  B4D8               	btfsc	status,2,c
  2452  00348E  D7FB               	goto	l6724
  2453                           
  2454                           ;parcheggio.c: 403: CANsendMessage(0xAA, data_test, 8, CAN_CONFIG_STD_MSG & CAN_NORMAL_T
      +                          X_FRAME & CAN_TX_PRIORITY_0);
  2455  003490  0EAA               	movlw	170
  2456  003492  0100               	movlb	0	; () banked
  2457  003494  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2458  003496  0E00               	movlw	0
  2459  003498  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2460  00349A  0E00               	movlw	0
  2461  00349C  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2462  00349E  0E00               	movlw	0
  2463  0034A0  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2464  0034A2  0E7D               	movlw	low _data_test
  2465  0034A4  0100               	movlb	0	; () banked
  2466  0034A6  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2467  0034A8  0E01               	movlw	high _data_test
  2468  0034AA  0100               	movlb	0	; () banked
  2469  0034AC  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2470  0034AE  0E08               	movlw	8
  2471  0034B0  0100               	movlb	0	; () banked
  2472  0034B2  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2473  0034B4  0EBC               	movlw	188
  2474  0034B6  0100               	movlb	0	; () banked
  2475  0034B8  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2476  0034BA  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2477                           
  2478                           ;parcheggio.c: 404: can_send();
  2479  0034BE  EC46  F02A         	call	_can_send	;wreg free
  2480                           
  2481                           ;parcheggio.c: 406: while (asd == 1);
  2482  0034C2  D000               	goto	l802
  2483  0034C4                     l802:
  2484  0034C4  B451               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2485  0034C6  D7FE               	goto	l802
  2486                           
  2487                           ;parcheggio.c: 408: set_speed = 300;
  2488  0034C8  0E01               	movlw	1
  2489  0034CA  0100               	movlb	0	; () banked
  2490  0034CC  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2491  0034CE  0E2C               	movlw	44
  2492  0034D0  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2493                           
  2494                           ;parcheggio.c: 409: data_steering[0] = 0;
  2495  0034D2  0E00               	movlw	0
  2496  0034D4  0101               	movlb	1	; () banked
  2497  0034D6  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2498                           
  2499                           ; BSR set to: 1
  2500                           ;parcheggio.c: 410: asd = 1;
  2501  0034D8  8451               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  2502                           
  2503                           ; BSR set to: 1
  2504                           ;parcheggio.c: 411: data_test[0] = prima_sterzata + 10;
  2505  0034DA  0E00               	movlw	0
  2506  0034DC  0100               	movlb	0	; () banked
  2507  0034DE  6FA3               	movwf	___fladd@f2& (0+255),b
  2508  0034E0  0E00               	movlw	0
  2509  0034E2  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2510  0034E4  0E20               	movlw	32
  2511  0034E6  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2512  0034E8  0E41               	movlw	65
  2513  0034EA  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2514  0034EC  C138  F09F         	movff	_prima_sterzata,___fladd@f1	;volatile
  2515  0034F0  C139  F0A0         	movff	_prima_sterzata+1,___fladd@f1+1	;volatile
  2516  0034F4  C13A  F0A1         	movff	_prima_sterzata+2,___fladd@f1+2	;volatile
  2517  0034F8  C13B  F0A2         	movff	_prima_sterzata+3,___fladd@f1+3	;volatile
  2518  0034FC  EC1F  F020         	call	___fladd	;wreg free
  2519  003500  C09F  F0AF         	movff	?___fladd,___fltol@f1
  2520  003504  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  2521  003508  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  2522  00350C  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  2523  003510  EC2C  F029         	call	___fltol	;wreg free
  2524  003514  0100               	movlb	0	; () banked
  2525  003516  51AF               	movf	?___fltol& (0+255),w,b
  2526  003518  0101               	movlb	1	; () banked
  2527  00351A  6F7D               	movwf	_data_test& (0+255),b	;volatile
  2528                           
  2529                           ; BSR set to: 1
  2530                           
  2531                           ;parcheggio.c: 412: while (!CANisTxReady());
  2532  00351C  D000               	goto	l6734
  2533  00351E                     l6734:
  2534  00351E  EC17  F02F         	call	_CANisTxReady	;wreg free
  2535  003522  0900               	iorlw	0
  2536  003524  B4D8               	btfsc	status,2,c
  2537  003526  D7FB               	goto	l6734
  2538                           
  2539                           ;parcheggio.c: 413: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2540  003528  0E0F               	movlw	15
  2541  00352A  0100               	movlb	0	; () banked
  2542  00352C  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2543  00352E  0E00               	movlw	0
  2544  003530  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2545  003532  0E00               	movlw	0
  2546  003534  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2547  003536  0E00               	movlw	0
  2548  003538  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2549  00353A  0E7D               	movlw	low _data_test
  2550  00353C  0100               	movlb	0	; () banked
  2551  00353E  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2552  003540  0E01               	movlw	high _data_test
  2553  003542  0100               	movlb	0	; () banked
  2554  003544  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2555  003546  0E08               	movlw	8
  2556  003548  0100               	movlb	0	; () banked
  2557  00354A  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2558  00354C  0EBC               	movlw	188
  2559  00354E  0100               	movlb	0	; () banked
  2560  003550  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2561  003552  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2562                           
  2563                           ;parcheggio.c: 414: can_send();
  2564  003556  EC46  F02A         	call	_can_send	;wreg free
  2565                           
  2566                           ;parcheggio.c: 416: while (asd == 1);
  2567  00355A  D000               	goto	l808
  2568  00355C                     l808:
  2569  00355C  B451               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2570  00355E  D7FE               	goto	l808
  2571                           
  2572                           ;parcheggio.c: 418: data_brake [0] = 0;
  2573  003560  0E00               	movlw	0
  2574  003562  0101               	movlb	1	; () banked
  2575  003564  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2576                           
  2577                           ;parcheggio.c: 419: data_brake [1] = 1;
  2578  003566  0E01               	movlw	1
  2579  003568  0101               	movlb	1	; () banked
  2580  00356A  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2581                           
  2582                           ;parcheggio.c: 420: set_speed = 0;
  2583  00356C  0E00               	movlw	0
  2584  00356E  0100               	movlb	0	; () banked
  2585  003570  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2586  003572  0E00               	movlw	0
  2587  003574  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2588                           
  2589                           ;parcheggio.c: 421: data_steering[0] = 90;
  2590  003576  0E5A               	movlw	90
  2591  003578  0101               	movlb	1	; () banked
  2592  00357A  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2593                           
  2594                           ; BSR set to: 1
  2595                           ;parcheggio.c: 422: can_send();
  2596  00357C  EC46  F02A         	call	_can_send	;wreg free
  2597                           
  2598                           ;parcheggio.c: 424: delay_s(1);
  2599  003580  0E01               	movlw	1
  2600  003582  ECD6  F02E         	call	_delay_s
  2601                           
  2602                           ;parcheggio.c: 426: avvicinamento = 1;
  2603  003586  8651               	bsf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  2604                           
  2605                           ;parcheggio.c: 427: if (sensor_distance [6] > 20) {
  2606  003588  5037               	movf	_sensor_distance+13,w,c	;volatile
  2607  00358A  E104               	bnz	u8530
  2608  00358C  0E15               	movlw	21
  2609  00358E  5C36               	subwf	_sensor_distance+12,w,c	;volatile
  2610  003590  A0D8               	btfss	status,0,c
  2611  003592  D01A               	goto	l6756
  2612  003594                     u8530:
  2613                           
  2614                           ;parcheggio.c: 428: data_brake [0] = 3;
  2615  003594  0E03               	movlw	3
  2616  003596  0101               	movlb	1	; () banked
  2617  003598  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2618                           
  2619                           ;parcheggio.c: 429: data_brake [1] = 1;
  2620  00359A  0E01               	movlw	1
  2621  00359C  0101               	movlb	1	; () banked
  2622  00359E  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2623                           
  2624                           ;parcheggio.c: 430: set_speed = 300;
  2625  0035A0  0E01               	movlw	1
  2626  0035A2  0100               	movlb	0	; () banked
  2627  0035A4  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2628  0035A6  0E2C               	movlw	44
  2629  0035A8  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2630                           
  2631                           ;parcheggio.c: 431: data_steering[0] = 90;
  2632  0035AA  0E5A               	movlw	90
  2633  0035AC  0101               	movlb	1	; () banked
  2634  0035AE  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2635                           
  2636                           ; BSR set to: 1
  2637                           ;parcheggio.c: 432: dir = 1;
  2638  0035B0  8851               	bsf	_dir/(0+8),_dir& (0+7),c	;volatile
  2639                           
  2640                           ; BSR set to: 1
  2641                           ;parcheggio.c: 433: can_send();
  2642  0035B2  EC46  F02A         	call	_can_send	;wreg free
  2643                           
  2644                           ;parcheggio.c: 434: while (sensor_distance [6] > 20);
  2645  0035B6  D000               	goto	l6754
  2646  0035B8                     l6754:
  2647  0035B8  5037               	movf	_sensor_distance+13,w,c	;volatile
  2648  0035BA  E1FE               	bnz	l6754
  2649  0035BC  0E15               	movlw	21
  2650  0035BE  5C36               	subwf	_sensor_distance+12,w,c	;volatile
  2651  0035C0  A0D8               	btfss	status,0,c
  2652  0035C2  D002               	goto	l6756
  2653  0035C4  D7F9               	goto	l6754
  2654  0035C6  D000               	goto	l6756
  2655  0035C8                     l6756:
  2656                           
  2657                           ;parcheggio.c: 435: }
  2658                           ;parcheggio.c: 436: data_brake [0] = 0;
  2659  0035C8  0E00               	movlw	0
  2660  0035CA  0101               	movlb	1	; () banked
  2661  0035CC  6F5D               	movwf	_data_brake& (0+255),b	;volatile
  2662                           
  2663                           ;parcheggio.c: 437: data_brake [1] = 1;
  2664  0035CE  0E01               	movlw	1
  2665  0035D0  0101               	movlb	1	; () banked
  2666  0035D2  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  2667                           
  2668                           ;parcheggio.c: 438: set_speed = 0;
  2669  0035D4  0E00               	movlw	0
  2670  0035D6  0100               	movlb	0	; () banked
  2671  0035D8  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2672  0035DA  0E00               	movlw	0
  2673  0035DC  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2674                           
  2675                           ;parcheggio.c: 439: data_steering[0] = 90;
  2676  0035DE  0E5A               	movlw	90
  2677  0035E0  0101               	movlb	1	; () banked
  2678  0035E2  6F75               	movwf	_data_steering& (0+255),b	;volatile
  2679                           
  2680                           ; BSR set to: 1
  2681                           ;parcheggio.c: 440: dir = 0;
  2682  0035E4  9851               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  2683                           
  2684                           ; BSR set to: 1
  2685                           ;parcheggio.c: 441: can_send();
  2686  0035E6  EC46  F02A         	call	_can_send	;wreg free
  2687                           
  2688                           ;parcheggio.c: 443: delay_s(1);
  2689  0035EA  0E01               	movlw	1
  2690  0035EC  ECD6  F02E         	call	_delay_s
  2691                           
  2692                           ;parcheggio.c: 445: data[0] = 3;
  2693  0035F0  0E03               	movlw	3
  2694  0035F2  0101               	movlb	1	; () banked
  2695  0035F4  6F55               	movwf	_data& (0+255),b	;volatile
  2696                           
  2697                           ; BSR set to: 1
  2698                           
  2699                           ;parcheggio.c: 446: while (!CANisTxReady());
  2700  0035F6  D000               	goto	l6766
  2701  0035F8                     l6766:
  2702  0035F8  EC17  F02F         	call	_CANisTxReady	;wreg free
  2703  0035FC  0900               	iorlw	0
  2704  0035FE  B4D8               	btfsc	status,2,c
  2705  003600  D7FB               	goto	l6766
  2706                           
  2707                           ;parcheggio.c: 447: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  2708  003602  0E0D               	movlw	13
  2709  003604  0100               	movlb	0	; () banked
  2710  003606  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2711  003608  0E00               	movlw	0
  2712  00360A  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2713  00360C  0E00               	movlw	0
  2714  00360E  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2715  003610  0E00               	movlw	0
  2716  003612  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2717  003614  0E55               	movlw	low _data
  2718  003616  0100               	movlb	0	; () banked
  2719  003618  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2720  00361A  0E01               	movlw	high _data
  2721  00361C  0100               	movlb	0	; () banked
  2722  00361E  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2723  003620  0E08               	movlw	8
  2724  003622  0100               	movlb	0	; () banked
  2725  003624  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2726  003626  0EBC               	movlw	188
  2727  003628  0100               	movlb	0	; () banked
  2728  00362A  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2729  00362C  EC3E  F00C         	call	_CANsendMessage	;wreg free
  2730                           
  2731                           ;parcheggio.c: 448: delay_ms(100);
  2732  003630  0E00               	movlw	0
  2733  003632  0100               	movlb	0	; () banked
  2734  003634  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  2735  003636  0E64               	movlw	100
  2736  003638  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  2737  00363A  EC68  F02E         	call	_delay_ms	;wreg free
  2738  00363E  00FF               	reset		;# 
  2739  003640  D000               	goto	l6772
  2740  003642                     l6772:
  2741  003642  AA81               	btfss	3969,5,c	;volatile
  2742  003644  0012               	return	
  2743  003646  A251               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2744  003648  0012               	return	
  2745  00364A  AC52               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  2746  00364C  0012               	return	
  2747  00364E  D607               	goto	l789
  2748  003650  0012               	return	
  2749  003652  0012               	return		;funcret
  2750  003654                     __end_of_park_routine:
  2751                           	opt stack 0
  2752                           tblptru	equ	0xFF8
  2753                           tblptrh	equ	0xFF7
  2754                           tblptrl	equ	0xFF6
  2755                           tablat	equ	0xFF5
  2756                           postinc0	equ	0xFEE
  2757                           wreg	equ	0xFE8
  2758                           postdec1	equ	0xFE5
  2759                           fsr1l	equ	0xFE1
  2760                           postinc2	equ	0xFDE
  2761                           postdec2	equ	0xFDD
  2762                           status	equ	0xFD8
  2763                           
  2764 ;; *************** function _parallelo *****************
  2765 ;; Defined at:
  2766 ;;		line 476 in file "parcheggio.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;		None
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;		None               void
  2773 ;; Registers used:
  2774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2783 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2784 ;;Total ram usage:        2 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:   10
  2787 ;; This function calls:
  2788 ;;		___awtofl
  2789 ;;		___fladd
  2790 ;;		___fldiv
  2791 ;;		___flge
  2792 ;;		___flmul
  2793 ;;		___fltol
  2794 ;;		_abs
  2795 ;;		_asin
  2796 ;;		_can_send
  2797 ;;		_sqrt
  2798 ;; This function is called by:
  2799 ;;		_park_search
  2800 ;;		_park_routine
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text3
  2805  0042AA                     __ptext3:
  2806                           	opt stack 0
  2807  0042AA                     _parallelo:
  2808                           	opt stack 19
  2809                           
  2810                           ;parcheggio.c: 477: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  2811                           
  2812                           ;incstack = 0
  2813  0042AA  EE20  F02C         	lfsr	2,_sensor_distance+2	;volatile
  2814  0042AE  CFDE F0D5          	movff	postinc2,??_parallelo
  2815  0042B2  CFDD F0D6          	movff	postdec2,??_parallelo+1
  2816  0042B6  0100               	movlb	0	; () banked
  2817  0042B8  1FD5               	comf	??_parallelo& (0+255),f,b
  2818  0042BA  1FD6               	comf	(??_parallelo+1)& (0+255),f,b
  2819  0042BC  4BD5               	infsnz	??_parallelo& (0+255),f,b
  2820  0042BE  2BD6               	incf	(??_parallelo+1)& (0+255),f,b
  2821  0042C0  502A               	movf	_sensor_distance,w,c	;volatile
  2822  0042C2  0100               	movlb	0	; () banked
  2823  0042C4  25D5               	addwf	??_parallelo& (0+255),w,b
  2824  0042C6  0100               	movlb	0	; () banked
  2825  0042C8  6F77               	movwf	abs@a& (0+255),b
  2826  0042CA  502B               	movf	_sensor_distance+1,w,c	;volatile
  2827  0042CC  0100               	movlb	0	; () banked
  2828  0042CE  21D6               	addwfc	(??_parallelo+1)& (0+255),w,b
  2829  0042D0  0100               	movlb	0	; () banked
  2830  0042D2  6F78               	movwf	(abs@a+1)& (0+255),b
  2831  0042D4  ECED  F02E         	call	_abs	;wreg free
  2832  0042D8  C077  F081         	movff	?_abs,___awtofl@c
  2833  0042DC  C078  F082         	movff	?_abs+1,___awtofl@c+1
  2834  0042E0  EC05  F02E         	call	___awtofl	;wreg free
  2835  0042E4  C081  F0D7         	movff	?___awtofl,_alignment_gap	;volatile
  2836  0042E8  C082  F0D8         	movff	?___awtofl+1,_alignment_gap+1	;volatile
  2837  0042EC  C083  F0D9         	movff	?___awtofl+2,_alignment_gap+2	;volatile
  2838  0042F0  C084  F0DA         	movff	?___awtofl+3,_alignment_gap+3	;volatile
  2839                           
  2840                           ;parcheggio.c: 478: if (alignment_gap < 30) {
  2841  0042F4  C0D7  F0B3         	movff	_alignment_gap,___flge@ff1	;volatile
  2842  0042F8  C0D8  F0B4         	movff	_alignment_gap+1,___flge@ff1+1	;volatile
  2843  0042FC  C0D9  F0B5         	movff	_alignment_gap+2,___flge@ff1+2	;volatile
  2844  004300  C0DA  F0B6         	movff	_alignment_gap+3,___flge@ff1+3	;volatile
  2845  004304  0E00               	movlw	0
  2846  004306  0100               	movlb	0	; () banked
  2847  004308  6FB7               	movwf	___flge@ff2& (0+255),b
  2848  00430A  0E00               	movlw	0
  2849  00430C  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  2850  00430E  0EF0               	movlw	240
  2851  004310  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  2852  004312  0E41               	movlw	65
  2853  004314  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  2854  004316  EC4F  F02B         	call	___flge	;wreg free
  2855  00431A  0100               	movlb	0	; () banked
  2856  00431C  B0D8               	btfsc	status,0,c
  2857  00431E  D0EC               	goto	l6518
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;parcheggio.c: 479: if ((sensor_distance[0] < 30) && (sensor_distance[1] < 30)) {
  2861  004320  502B               	movf	_sensor_distance+1,w,c	;volatile
  2862  004322  E103               	bnz	u8161
  2863  004324  0E1E               	movlw	30
  2864  004326  5C2A               	subwf	_sensor_distance,w,c	;volatile
  2865  004328  B0D8               	btfsc	status,0,c
  2866  00432A                     u8161:
  2867  00432A  0012               	return	
  2868                           
  2869                           ; BSR set to: 0
  2870  00432C  502D               	movf	_sensor_distance+3,w,c	;volatile
  2871  00432E  E103               	bnz	u8171
  2872  004330  0E1E               	movlw	30
  2873  004332  5C2C               	subwf	_sensor_distance+2,w,c	;volatile
  2874  004334  B0D8               	btfsc	status,0,c
  2875  004336                     u8171:
  2876  004336  0012               	return	
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;parcheggio.c: 480: x = (((6)*(6)) + ((alignment_gap * alignment_gap)));
  2880  004338  C0D7  F094         	movff	_alignment_gap,___flmul@f2	;volatile
  2881  00433C  C0D8  F095         	movff	_alignment_gap+1,___flmul@f2+1	;volatile
  2882  004340  C0D9  F096         	movff	_alignment_gap+2,___flmul@f2+2	;volatile
  2883  004344  C0DA  F097         	movff	_alignment_gap+3,___flmul@f2+3	;volatile
  2884  004348  C0D7  F090         	movff	_alignment_gap,___flmul@f1	;volatile
  2885  00434C  C0D8  F091         	movff	_alignment_gap+1,___flmul@f1+1	;volatile
  2886  004350  C0D9  F092         	movff	_alignment_gap+2,___flmul@f1+2	;volatile
  2887  004354  C0DA  F093         	movff	_alignment_gap+3,___flmul@f1+3	;volatile
  2888  004358  EC4E  F027         	call	___flmul	;wreg free
  2889  00435C  C090  F09F         	movff	?___flmul,___fladd@f1
  2890  004360  C091  F0A0         	movff	?___flmul+1,___fladd@f1+1
  2891  004364  C092  F0A1         	movff	?___flmul+2,___fladd@f1+2
  2892  004368  C093  F0A2         	movff	?___flmul+3,___fladd@f1+3
  2893  00436C  0E00               	movlw	0
  2894  00436E  0100               	movlb	0	; () banked
  2895  004370  6FA3               	movwf	___fladd@f2& (0+255),b
  2896  004372  0E00               	movlw	0
  2897  004374  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2898  004376  0E10               	movlw	16
  2899  004378  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2900  00437A  0E42               	movlw	66
  2901  00437C  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2902  00437E  EC1F  F020         	call	___fladd	;wreg free
  2903  004382  C09F  F0DB         	movff	?___fladd,_x	;volatile
  2904  004386  C0A0  F0DC         	movff	?___fladd+1,_x+1	;volatile
  2905  00438A  C0A1  F0DD         	movff	?___fladd+2,_x+2	;volatile
  2906  00438E  C0A2  F0DE         	movff	?___fladd+3,_x+3	;volatile
  2907                           
  2908                           ;parcheggio.c: 481: x = sqrt(x);
  2909  004392  C0DB  F0D1         	movff	_x,sqrt@y	;volatile
  2910  004396  C0DC  F0D2         	movff	_x+1,sqrt@y+1	;volatile
  2911  00439A  C0DD  F0D3         	movff	_x+2,sqrt@y+2	;volatile
  2912  00439E  C0DE  F0D4         	movff	_x+3,sqrt@y+3	;volatile
  2913  0043A2  ECAE  F023         	call	_sqrt	;wreg free
  2914  0043A6  C0D1  F0DB         	movff	?_sqrt,_x	;volatile
  2915  0043AA  C0D2  F0DC         	movff	?_sqrt+1,_x+1	;volatile
  2916  0043AE  C0D3  F0DD         	movff	?_sqrt+2,_x+2	;volatile
  2917  0043B2  C0D4  F0DE         	movff	?_sqrt+3,_x+3	;volatile
  2918                           
  2919                           ;parcheggio.c: 482: z = alignment_gap / x;
  2920  0043B6  C0D7  F081         	movff	_alignment_gap,___fldiv@f1	;volatile
  2921  0043BA  C0D8  F082         	movff	_alignment_gap+1,___fldiv@f1+1	;volatile
  2922  0043BE  C0D9  F083         	movff	_alignment_gap+2,___fldiv@f1+2	;volatile
  2923  0043C2  C0DA  F084         	movff	_alignment_gap+3,___fldiv@f1+3	;volatile
  2924  0043C6  C0DB  F085         	movff	_x,___fldiv@f2	;volatile
  2925  0043CA  C0DC  F086         	movff	_x+1,___fldiv@f2+1	;volatile
  2926  0043CE  C0DD  F087         	movff	_x+2,___fldiv@f2+2	;volatile
  2927  0043D2  C0DE  F088         	movff	_x+3,___fldiv@f2+3	;volatile
  2928  0043D6  EC00  F028         	call	___fldiv	;wreg free
  2929  0043DA  C081  F0DF         	movff	?___fldiv,_z	;volatile
  2930  0043DE  C082  F0E0         	movff	?___fldiv+1,_z+1	;volatile
  2931  0043E2  C083  F0E1         	movff	?___fldiv+2,_z+2	;volatile
  2932  0043E6  C084  F0E2         	movff	?___fldiv+3,_z+3	;volatile
  2933                           
  2934                           ;parcheggio.c: 483: z = asin(z);
  2935  0043EA  C0DF  F1A2         	movff	_z,asin@x	;volatile
  2936  0043EE  C0E0  F1A3         	movff	_z+1,asin@x+1	;volatile
  2937  0043F2  C0E1  F1A4         	movff	_z+2,asin@x+2	;volatile
  2938  0043F6  C0E2  F1A5         	movff	_z+3,asin@x+3	;volatile
  2939  0043FA  ECFF  F01C         	call	_asin	;wreg free
  2940  0043FE  C1A2  F0DF         	movff	?_asin,_z	;volatile
  2941  004402  C1A3  F0E0         	movff	?_asin+1,_z+1	;volatile
  2942  004406  C1A4  F0E1         	movff	?_asin+2,_z+2	;volatile
  2943  00440A  C1A5  F0E2         	movff	?_asin+3,_z+3	;volatile
  2944                           
  2945                           ;parcheggio.c: 484: z = z / 3.14159265358979323846 * 180;
  2946  00440E  0EDB               	movlw	219
  2947  004410  0100               	movlb	0	; () banked
  2948  004412  6F85               	movwf	___fldiv@f2& (0+255),b
  2949  004414  0E0F               	movlw	15
  2950  004416  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  2951  004418  0E49               	movlw	73
  2952  00441A  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  2953  00441C  0E40               	movlw	64
  2954  00441E  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  2955  004420  C0DF  F081         	movff	_z,___fldiv@f1	;volatile
  2956  004424  C0E0  F082         	movff	_z+1,___fldiv@f1+1	;volatile
  2957  004428  C0E1  F083         	movff	_z+2,___fldiv@f1+2	;volatile
  2958  00442C  C0E2  F084         	movff	_z+3,___fldiv@f1+3	;volatile
  2959  004430  EC00  F028         	call	___fldiv	;wreg free
  2960  004434  C081  F090         	movff	?___fldiv,___flmul@f1
  2961  004438  C082  F091         	movff	?___fldiv+1,___flmul@f1+1
  2962  00443C  C083  F092         	movff	?___fldiv+2,___flmul@f1+2
  2963  004440  C084  F093         	movff	?___fldiv+3,___flmul@f1+3
  2964  004444  0E00               	movlw	0
  2965  004446  0100               	movlb	0	; () banked
  2966  004448  6F94               	movwf	___flmul@f2& (0+255),b
  2967  00444A  0E00               	movlw	0
  2968  00444C  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  2969  00444E  0E34               	movlw	52
  2970  004450  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  2971  004452  0E43               	movlw	67
  2972  004454  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  2973  004456  EC4E  F027         	call	___flmul	;wreg free
  2974  00445A  C090  F0DF         	movff	?___flmul,_z	;volatile
  2975  00445E  C091  F0E0         	movff	?___flmul+1,_z+1	;volatile
  2976  004462  C092  F0E1         	movff	?___flmul+2,_z+2	;volatile
  2977  004466  C093  F0E2         	movff	?___flmul+3,_z+3	;volatile
  2978                           
  2979                           ;parcheggio.c: 485: data_correction[0] = z;
  2980  00446A  C0DF  F0AF         	movff	_z,___fltol@f1	;volatile
  2981  00446E  C0E0  F0B0         	movff	_z+1,___fltol@f1+1	;volatile
  2982  004472  C0E1  F0B1         	movff	_z+2,___fltol@f1+2	;volatile
  2983  004476  C0E2  F0B2         	movff	_z+3,___fltol@f1+3	;volatile
  2984  00447A  EC2C  F029         	call	___fltol	;wreg free
  2985  00447E  0100               	movlb	0	; () banked
  2986  004480  51AF               	movf	?___fltol& (0+255),w,b
  2987  004482  0101               	movlb	1	; () banked
  2988  004484  6F65               	movwf	_data_correction& (0+255),b	;volatile
  2989                           
  2990                           ; BSR set to: 1
  2991                           ;parcheggio.c: 487: if (sensor_distance[0] < sensor_distance[1]) {
  2992  004486  502C               	movf	_sensor_distance+2,w,c	;volatile
  2993  004488  5C2A               	subwf	_sensor_distance,w,c	;volatile
  2994  00448A  502D               	movf	_sensor_distance+3,w,c	;volatile
  2995  00448C  582B               	subwfb	_sensor_distance+1,w,c	;volatile
  2996  00448E  B0D8               	btfsc	status,0,c
  2997  004490  D002               	goto	l6510
  2998                           
  2999                           ; BSR set to: 1
  3000                           ;parcheggio.c: 488: data_correction[1] = 0;
  3001  004492  0E00               	movlw	0
  3002  004494  D001               	goto	L1
  3003  004496                     l6510:
  3004                           
  3005                           ; BSR set to: 1
  3006                           ;parcheggio.c: 490: data_correction[1] = 1;
  3007  004496  0E01               	movlw	1
  3008  004498                     L1:
  3009  004498  0101               	movlb	1	; () banked
  3010  00449A  6F66               	movwf	(_data_correction+1)& (0+255),b	;volatile
  3011  00449C  D000               	goto	l6512
  3012  00449E                     l6512:
  3013                           
  3014                           ; BSR set to: 1
  3015                           ;parcheggio.c: 491: }
  3016                           ;parcheggio.c: 492: if ((old_alignment_gap != alignment_gap) || (old_dir_correction != d
      +                          ata_correction[1])) {
  3017  00449E  0100               	movlb	0	; () banked
  3018  0044A0  51D7               	movf	_alignment_gap& (0+255),w,b	;volatile
  3019  0044A2  0101               	movlb	1	; () banked
  3020  0044A4  1934               	xorwf	_old_alignment_gap& (0+255),w,b	;volatile
  3021  0044A6  E117               	bnz	l847
  3022  0044A8  0100               	movlb	0	; () banked
  3023  0044AA  51D8               	movf	(_alignment_gap+1)& (0+255),w,b	;volatile
  3024  0044AC  0101               	movlb	1	; () banked
  3025  0044AE  1935               	xorwf	(_old_alignment_gap+1)& (0+255),w,b	;volatile
  3026  0044B0  E112               	bnz	l847
  3027  0044B2  0100               	movlb	0	; () banked
  3028  0044B4  51D9               	movf	(_alignment_gap+2)& (0+255),w,b	;volatile
  3029  0044B6  0101               	movlb	1	; () banked
  3030  0044B8  1936               	xorwf	(_old_alignment_gap+2)& (0+255),w,b	;volatile
  3031  0044BA  E10D               	bnz	l847
  3032  0044BC  0100               	movlb	0	; () banked
  3033  0044BE  51DA               	movf	(_alignment_gap+3)& (0+255),w,b	;volatile
  3034  0044C0  0101               	movlb	1	; () banked
  3035  0044C2  1937               	xorwf	(_old_alignment_gap+3)& (0+255),w,b	;volatile
  3036  0044C4  A4D8               	btfss	status,2,c
  3037  0044C6  D007               	goto	l847
  3038                           
  3039                           ; BSR set to: 1
  3040  0044C8  0E00               	movlw	0
  3041  0044CA  B652               	btfsc	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  3042  0044CC  0E01               	movlw	1
  3043  0044CE  0101               	movlb	1	; () banked
  3044  0044D0  1966               	xorwf	(_data_correction+1)& (0+255),w,b	;volatile
  3045  0044D2  B4D8               	btfsc	status,2,c
  3046  0044D4  0012               	return	
  3047  0044D6                     l847:
  3048                           
  3049                           ; BSR set to: 1
  3050                           ;parcheggio.c: 493: old_alignment_gap = alignment_gap;
  3051  0044D6  C0D7  F134         	movff	_alignment_gap,_old_alignment_gap	;volatile
  3052  0044DA  C0D8  F135         	movff	_alignment_gap+1,_old_alignment_gap+1	;volatile
  3053  0044DE  C0D9  F136         	movff	_alignment_gap+2,_old_alignment_gap+2	;volatile
  3054  0044E2  C0DA  F137         	movff	_alignment_gap+3,_old_alignment_gap+3	;volatile
  3055                           
  3056                           ;parcheggio.c: 494: old_dir_correction = data_correction[1];
  3057  0044E6  0101               	movlb	1	; () banked
  3058  0044E8  B166               	btfsc	(_data_correction+1)& (0+255),0,b	;volatile
  3059  0044EA  D002               	bra	u8215
  3060  0044EC  9652               	bcf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  3061  0044EE  D001               	bra	u8216
  3062  0044F0                     u8215:
  3063  0044F0  8652               	bsf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  3064  0044F2                     u8216:
  3065                           
  3066                           ;parcheggio.c: 495: can_send();
  3067  0044F2  EC46  F02A         	call	_can_send	;wreg free
  3068                           
  3069                           ;parcheggio.c: 496: }
  3070                           ;parcheggio.c: 497: }
  3071                           ;parcheggio.c: 498: } else {
  3072  0044F6  0012               	return	
  3073  0044F8                     l6518:
  3074                           
  3075                           ;parcheggio.c: 499: data_correction[0] = 0;
  3076  0044F8  0E00               	movlw	0
  3077  0044FA  0101               	movlb	1	; () banked
  3078  0044FC  6F65               	movwf	_data_correction& (0+255),b	;volatile
  3079                           
  3080                           ; BSR set to: 1
  3081                           ;parcheggio.c: 500: can_send();
  3082  0044FE  EC46  F02A         	call	_can_send	;wreg free
  3083  004502  0012               	return	
  3084  004504  0012               	return		;funcret
  3085  004506                     __end_of_parallelo:
  3086                           	opt stack 0
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           postinc0	equ	0xFEE
  3092                           wreg	equ	0xFE8
  3093                           postdec1	equ	0xFE5
  3094                           fsr1l	equ	0xFE1
  3095                           postinc2	equ	0xFDE
  3096                           postdec2	equ	0xFDD
  3097                           status	equ	0xFD8
  3098                           
  3099 ;; *************** function _can_send *****************
  3100 ;; Defined at:
  3101 ;;		line 453 in file "parcheggio.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;		None
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;		None
  3106 ;; Return value:  Size  Location     Type
  3107 ;;		None               void
  3108 ;; Registers used:
  3109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3119 ;;Total ram usage:        0 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; Hardware stack levels required when called:    6
  3122 ;; This function calls:
  3123 ;;		_CANisTxReady
  3124 ;;		_CANsendMessage
  3125 ;; This function is called by:
  3126 ;;		_park_routine
  3127 ;;		_parallelo
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text4
  3132  00548C                     __ptext4:
  3133                           	opt stack 0
  3134  00548C                     _can_send:
  3135                           	opt stack 22
  3136                           
  3137                           ;parcheggio.c: 454: if (start_operation == 1) {
  3138                           
  3139                           ;incstack = 0
  3140  00548C  BC52               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  3141  00548E  D002               	goto	l4898
  3142  005490  D067               	goto	l4918
  3143                           
  3144                           ;parcheggio.c: 456: while (CANisTxReady() != 1);
  3145  005492  D000               	goto	l4898
  3146  005494                     l4898:
  3147  005494  EC17  F02F         	call	_CANisTxReady	;wreg free
  3148  005498  06E8               	decf	wreg,f,c
  3149  00549A  A4D8               	btfss	status,2,c
  3150  00549C  D7FB               	goto	l4898
  3151                           
  3152                           ;parcheggio.c: 457: CANsendMessage(0b00000000111, data_steering, 8, CAN_CONFIG_STD_MSG &
      +                           CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3153  00549E  0E07               	movlw	7
  3154  0054A0  0100               	movlb	0	; () banked
  3155  0054A2  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3156  0054A4  0E00               	movlw	0
  3157  0054A6  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3158  0054A8  0E00               	movlw	0
  3159  0054AA  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3160  0054AC  0E00               	movlw	0
  3161  0054AE  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3162  0054B0  0E75               	movlw	low _data_steering
  3163  0054B2  0100               	movlb	0	; () banked
  3164  0054B4  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3165  0054B6  0E01               	movlw	high _data_steering
  3166  0054B8  0100               	movlb	0	; () banked
  3167  0054BA  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3168  0054BC  0E08               	movlw	8
  3169  0054BE  0100               	movlb	0	; () banked
  3170  0054C0  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3171  0054C2  0EBC               	movlw	188
  3172  0054C4  0100               	movlb	0	; () banked
  3173  0054C6  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3174  0054C8  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3175                           
  3176                           ;parcheggio.c: 460: data_speed[0] = set_speed;
  3177  0054CC  C0E5  F16D         	movff	_set_speed,_data_speed	;volatile
  3178                           
  3179                           ;parcheggio.c: 461: data_speed[1] = (set_speed >> 8);
  3180  0054D0  0100               	movlb	0	; () banked
  3181  0054D2  51E6               	movf	(_set_speed+1)& (0+255),w,b	;volatile
  3182  0054D4  0101               	movlb	1	; () banked
  3183  0054D6  6F6E               	movwf	(_data_speed+1)& (0+255),b	;volatile
  3184                           
  3185                           ; BSR set to: 1
  3186                           ;parcheggio.c: 462: data_speed[2] = dir;
  3187  0054D8  0E00               	movlw	0
  3188  0054DA  B851               	btfsc	_dir/(0+8),_dir& (0+7),c	;volatile
  3189  0054DC  0E01               	movlw	1
  3190  0054DE  0101               	movlb	1	; () banked
  3191  0054E0  6F6F               	movwf	(_data_speed+2)& (0+255),b	;volatile
  3192                           
  3193                           ; BSR set to: 1
  3194                           
  3195                           ;parcheggio.c: 463: while (CANisTxReady() != 1);
  3196  0054E2  D000               	goto	l4908
  3197  0054E4                     l4908:
  3198  0054E4  EC17  F02F         	call	_CANisTxReady	;wreg free
  3199  0054E8  06E8               	decf	wreg,f,c
  3200  0054EA  A4D8               	btfss	status,2,c
  3201  0054EC  D7FB               	goto	l4908
  3202                           
  3203                           ;parcheggio.c: 464: CANsendMessage(0b00000000101, data_speed, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3204  0054EE  0E05               	movlw	5
  3205  0054F0  0100               	movlb	0	; () banked
  3206  0054F2  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3207  0054F4  0E00               	movlw	0
  3208  0054F6  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3209  0054F8  0E00               	movlw	0
  3210  0054FA  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3211  0054FC  0E00               	movlw	0
  3212  0054FE  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3213  005500  0E6D               	movlw	low _data_speed
  3214  005502  0100               	movlb	0	; () banked
  3215  005504  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3216  005506  0E01               	movlw	high _data_speed
  3217  005508  0100               	movlb	0	; () banked
  3218  00550A  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3219  00550C  0E08               	movlw	8
  3220  00550E  0100               	movlb	0	; () banked
  3221  005510  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3222  005512  0EBC               	movlw	188
  3223  005514  0100               	movlb	0	; () banked
  3224  005516  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3225  005518  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3226                           
  3227                           ;parcheggio.c: 467: data_brake[1] = 0;
  3228  00551C  0E00               	movlw	0
  3229  00551E  0101               	movlb	1	; () banked
  3230  005520  6F5E               	movwf	(_data_brake+1)& (0+255),b	;volatile
  3231                           
  3232                           ; BSR set to: 1
  3233                           
  3234                           ;parcheggio.c: 468: while (CANisTxReady() != 1);
  3235  005522  D000               	goto	l4914
  3236  005524                     l4914:
  3237  005524  EC17  F02F         	call	_CANisTxReady	;wreg free
  3238  005528  06E8               	decf	wreg,f,c
  3239  00552A  A4D8               	btfss	status,2,c
  3240  00552C  D7FB               	goto	l4914
  3241                           
  3242                           ;parcheggio.c: 469: CANsendMessage(0b00000000110, data_brake, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3243  00552E  0E06               	movlw	6
  3244  005530  0100               	movlb	0	; () banked
  3245  005532  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3246  005534  0E00               	movlw	0
  3247  005536  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3248  005538  0E00               	movlw	0
  3249  00553A  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3250  00553C  0E00               	movlw	0
  3251  00553E  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3252  005540  0E5D               	movlw	low _data_brake
  3253  005542  0100               	movlb	0	; () banked
  3254  005544  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3255  005546  0E01               	movlw	high _data_brake
  3256  005548  0100               	movlb	0	; () banked
  3257  00554A  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3258  00554C  0E08               	movlw	8
  3259  00554E  0100               	movlb	0	; () banked
  3260  005550  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3261  005552  0EBC               	movlw	188
  3262  005554  0100               	movlb	0	; () banked
  3263  005556  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3264  005558  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3265                           
  3266                           ;parcheggio.c: 470: } else {
  3267  00555C  0012               	return	
  3268                           
  3269                           ;parcheggio.c: 471: while (CANisTxReady() != 1);
  3270  00555E  D000               	goto	l4918
  3271  005560                     l4918:
  3272  005560  EC17  F02F         	call	_CANisTxReady	;wreg free
  3273  005564  06E8               	decf	wreg,f,c
  3274  005566  A4D8               	btfss	status,2,c
  3275  005568  D7FB               	goto	l4918
  3276                           
  3277                           ;parcheggio.c: 472: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3278  00556A  0E10               	movlw	16
  3279  00556C  0100               	movlb	0	; () banked
  3280  00556E  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3281  005570  0E00               	movlw	0
  3282  005572  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3283  005574  0E00               	movlw	0
  3284  005576  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3285  005578  0E00               	movlw	0
  3286  00557A  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3287  00557C  0E65               	movlw	low _data_correction
  3288  00557E  0100               	movlb	0	; () banked
  3289  005580  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3290  005582  0E01               	movlw	high _data_correction
  3291  005584  0100               	movlb	0	; () banked
  3292  005586  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3293  005588  0E08               	movlw	8
  3294  00558A  0100               	movlb	0	; () banked
  3295  00558C  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3296  00558E  0EBC               	movlw	188
  3297  005590  0100               	movlb	0	; () banked
  3298  005592  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3299  005594  EC3E  F00C         	call	_CANsendMessage	;wreg free
  3300  005598  0012               	return	
  3301  00559A  0012               	return		;funcret
  3302  00559C                     __end_of_can_send:
  3303                           	opt stack 0
  3304                           tblptru	equ	0xFF8
  3305                           tblptrh	equ	0xFF7
  3306                           tblptrl	equ	0xFF6
  3307                           tablat	equ	0xFF5
  3308                           postinc0	equ	0xFEE
  3309                           wreg	equ	0xFE8
  3310                           postdec1	equ	0xFE5
  3311                           fsr1l	equ	0xFE1
  3312                           postinc2	equ	0xFDE
  3313                           postdec2	equ	0xFDD
  3314                           status	equ	0xFD8
  3315                           
  3316 ;; *************** function _CANsendMessage *****************
  3317 ;; Defined at:
  3318 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  identifier      4   23[BANK0 ] unsigned long 
  3321 ;;  data            2   27[BANK0 ] PTR unsigned char 
  3322 ;;		 -> data_speed(8), data_brake(8), data_steering(8), data_correction(8), 
  3323 ;;		 -> data_test(8), data(8), sensor_distance_short(8), 
  3324 ;;  dataLength      1   29[BANK0 ] unsigned char 
  3325 ;;  flags           1   30[BANK0 ] enum E16376
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;  tamp            4   35[BANK0 ] unsigned long 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;		None               void
  3330 ;; Registers used:
  3331 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3337 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3338 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3339 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3340 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3341 ;;Total ram usage:       16 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    5
  3344 ;; This function calls:
  3345 ;;		Nothing
  3346 ;; This function is called by:
  3347 ;;		_main
  3348 ;;		_park_search
  3349 ;;		_park_routine
  3350 ;;		_can_send
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text5
  3355  00187C                     __ptext5:
  3356                           	opt stack 0
  3357  00187C                     _CANsendMessage:
  3358                           	opt stack 22
  3359                           
  3360                           ;inc\CANlib.h: 296: unsigned long tamp;
  3361                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
  3362                           
  3363                           ;incstack = 0
  3364  00187C  010F               	movlb	15	; () banked
  3365  00187E  B740               	btfsc	64,3,b	;volatile
  3366  001880  D142               	goto	l361
  3367                           
  3368                           ; BSR set to: 15
  3369                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
  3370  001882  C07D  FF45         	movff	CANsendMessage@dataLength,3909	;volatile
  3371                           
  3372                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
  3373  001886  0100               	movlb	0	; () banked
  3374  001888  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  3375  00188A  D003               	goto	l362
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
  3379  00188C  010F               	movlb	15	; () banked
  3380  00188E  8D45               	bsf	69,6,b	;volatile
  3381  001890  D002               	goto	l363
  3382  001892                     l362:
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;inc\CANlib.h: 302: else
  3386                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
  3387  001892  010F               	movlb	15	; () banked
  3388  001894  9D45               	bcf	69,6,b	;volatile
  3389  001896                     l363:
  3390                           
  3391                           ; BSR set to: 15
  3392                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
  3393  001896  0100               	movlb	0	; () banked
  3394  001898  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  3395  00189A  D07A               	goto	l364
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;inc\CANlib.h: 306: {
  3399                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
  3400  00189C  0100               	movlb	0	; () banked
  3401  00189E  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  3402  0018A0  0100               	movlb	0	; () banked
  3403  0018A2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3404  0018A4  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3405  0018A6  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3406  0018A8  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
  3410  0018AA  C083  FF44         	movff	CANsendMessage@tamp,3908	;volatile
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
  3414  0018AE  0E00               	movlw	0
  3415  0018B0  0100               	movlb	0	; () banked
  3416  0018B2  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3417  0018B4  0100               	movlb	0	; () banked
  3418  0018B6  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3419  0018B8  0EFF               	movlw	255
  3420  0018BA  0100               	movlb	0	; () banked
  3421  0018BC  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3422  0018BE  0100               	movlb	0	; () banked
  3423  0018C0  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3424  0018C2  0E00               	movlw	0
  3425  0018C4  0100               	movlb	0	; () banked
  3426  0018C6  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3427  0018C8  0100               	movlb	0	; () banked
  3428  0018CA  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3429  0018CC  0E00               	movlw	0
  3430  0018CE  0100               	movlb	0	; () banked
  3431  0018D0  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3432  0018D2  0100               	movlb	0	; () banked
  3433  0018D4  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
  3437  0018D6  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3438  0018DA  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3439  0018DE  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3440  0018E2  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3441  0018E6  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  3442  0018EA  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  3443  0018EE  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  3444  0018F2  0100               	movlb	0	; () banked
  3445  0018F4  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  3446  0018F6  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3447  0018FA  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3448  0018FE  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3449  001902  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
  3453  001906  C083  FF43         	movff	CANsendMessage@tamp,3907	;volatile
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
  3457  00190A  0E00               	movlw	0
  3458  00190C  010F               	movlb	15	; () banked
  3459  00190E  6F42               	movwf	66,b	;volatile
  3460                           
  3461                           ; BSR set to: 15
  3462                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
  3463  001910  010F               	movlb	15	; () banked
  3464  001912  8742               	bsf	66,3,b	;volatile
  3465                           
  3466                           ; BSR set to: 15
  3467                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
  3468  001914  0100               	movlb	0	; () banked
  3469  001916  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  3470  001918  D002               	goto	l365
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
  3474  00191A  010F               	movlb	15	; () banked
  3475  00191C  8142               	bsf	66,0,b	;volatile
  3476  00191E                     l365:
  3477                           
  3478                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
  3479  00191E  0100               	movlb	0	; () banked
  3480  001920  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  3481  001922  D002               	goto	l366
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
  3485  001924  010F               	movlb	15	; () banked
  3486  001926  8342               	bsf	66,1,b	;volatile
  3487  001928                     l366:
  3488                           
  3489                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
  3490  001928  0100               	movlb	0	; () banked
  3491  00192A  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  3492  00192C  D002               	goto	l367
  3493                           
  3494                           ; BSR set to: 0
  3495                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
  3496  00192E  010F               	movlb	15	; () banked
  3497  001930  8B42               	bsf	66,5,b	;volatile
  3498  001932                     l367:
  3499                           
  3500                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
  3501  001932  0100               	movlb	0	; () banked
  3502  001934  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  3503  001936  D002               	goto	l368
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
  3507  001938  010F               	movlb	15	; () banked
  3508  00193A  8D42               	bsf	66,6,b	;volatile
  3509  00193C                     l368:
  3510                           
  3511                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
  3512  00193C  0100               	movlb	0	; () banked
  3513  00193E  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  3514  001940  D003               	goto	l4162
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
  3518  001942  010F               	movlb	15	; () banked
  3519  001944  8F42               	bsf	66,7,b	;volatile
  3520  001946  D000               	goto	l4162
  3521  001948                     l4162:
  3522                           
  3523                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
  3524  001948  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3525  00194C  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3526  001950  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3527  001954  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3528  001958  0E16               	movlw	22
  3529  00195A  D006               	goto	u4340
  3530  00195C                     u4345:
  3531  00195C  0100               	movlb	0	; () banked
  3532  00195E  90D8               	bcf	status,0,c
  3533  001960  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3534  001962  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3535  001964  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3536  001966  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3537  001968                     u4340:
  3538  001968  2EE8               	decfsz	wreg,f,c
  3539  00196A  D7F8               	goto	u4345
  3540  00196C  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3541  001970  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3542  001974  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3543  001978  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
  3547  00197C  0100               	movlb	0	; () banked
  3548  00197E  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3549  001980  0100               	movlb	0	; () banked
  3550  001982  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3551  001984  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3552  001986  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3553  001988  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
  3557  00198A  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  3558                           
  3559                           ;inc\CANlib.h: 332: }
  3560  00198E  D05A               	goto	l4182
  3561  001990                     l364:
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;inc\CANlib.h: 334: else
  3565                           ;inc\CANlib.h: 336: {
  3566                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
  3567  001990  010F               	movlb	15	; () banked
  3568  001992  9742               	bcf	66,3,b	;volatile
  3569                           
  3570                           ; BSR set to: 15
  3571                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
  3572  001994  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3573  001998  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3574  00199C  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3575  0019A0  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3576  0019A4  0E04               	movlw	4
  3577  0019A6  D006               	goto	u4350
  3578  0019A8                     u4355:
  3579  0019A8  0100               	movlb	0	; () banked
  3580  0019AA  90D8               	bcf	status,0,c
  3581  0019AC  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3582  0019AE  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3583  0019B0  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3584  0019B2  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3585  0019B4                     u4350:
  3586  0019B4  2EE8               	decfsz	wreg,f,c
  3587  0019B6  D7F8               	goto	u4355
  3588  0019B8  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3589  0019BC  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3590  0019C0  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3591  0019C4  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
  3595  0019C8  0100               	movlb	0	; () banked
  3596  0019CA  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3597  0019CC  0100               	movlb	0	; () banked
  3598  0019CE  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3599  0019D0  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3600  0019D2  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3601  0019D4  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
  3605  0019D6  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
  3609  0019DA  0E07               	movlw	7
  3610  0019DC  0100               	movlb	0	; () banked
  3611  0019DE  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3612  0019E0  0100               	movlb	0	; () banked
  3613  0019E2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3614  0019E4  0E00               	movlw	0
  3615  0019E6  0100               	movlb	0	; () banked
  3616  0019E8  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3617  0019EA  0100               	movlb	0	; () banked
  3618  0019EC  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3619  0019EE  0E00               	movlw	0
  3620  0019F0  0100               	movlb	0	; () banked
  3621  0019F2  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3622  0019F4  0100               	movlb	0	; () banked
  3623  0019F6  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3624  0019F8  0E00               	movlw	0
  3625  0019FA  0100               	movlb	0	; () banked
  3626  0019FC  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3627  0019FE  0100               	movlb	0	; () banked
  3628  001A00  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;inc\CANlib.h: 344: tamp = tamp << 5;
  3632  001A02  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3633  001A06  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3634  001A0A  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3635  001A0E  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3636  001A12  0E05               	movlw	5
  3637  001A14                     u4365:
  3638  001A14  90D8               	bcf	status,0,c
  3639  001A16  0100               	movlb	0	; () banked
  3640  001A18  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  3641  001A1A  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  3642  001A1C  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  3643  001A1E  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  3644  001A20  2EE8               	decfsz	wreg,f,c
  3645  001A22  D7F8               	goto	u4365
  3646  001A24  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3647  001A28  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3648  001A2C  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3649  001A30  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
  3653  001A34  010F               	movlb	15	; () banked
  3654  001A36  5142               	movf	66,w,b	;volatile
  3655  001A38  0B1F               	andlw	31
  3656  001A3A  010F               	movlb	15	; () banked
  3657  001A3C  6F42               	movwf	66,b	;volatile
  3658                           
  3659                           ; BSR set to: 15
  3660                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
  3661  001A3E  C083  FF42         	movff	CANsendMessage@tamp,3906	;volatile
  3662  001A42  D000               	goto	l4182
  3663  001A44                     l4182:
  3664                           
  3665                           ;inc\CANlib.h: 347: }
  3666                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
  3667  001A44  0100               	movlb	0	; () banked
  3668  001A46  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  3669  001A48  D003               	goto	l371
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
  3673  001A4A  010F               	movlb	15	; () banked
  3674  001A4C  8140               	bsf	64,0,b	;volatile
  3675  001A4E  D002               	goto	l372
  3676  001A50                     l371:
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;inc\CANlib.h: 351: else
  3680                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
  3681  001A50  010F               	movlb	15	; () banked
  3682  001A52  9140               	bcf	64,0,b	;volatile
  3683  001A54                     l372:
  3684                           
  3685                           ; BSR set to: 15
  3686                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
  3687  001A54  0100               	movlb	0	; () banked
  3688  001A56  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  3689  001A58  D003               	goto	l373
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
  3693  001A5A  010F               	movlb	15	; () banked
  3694  001A5C  8340               	bsf	64,1,b	;volatile
  3695  001A5E  D003               	goto	l4188
  3696  001A60                     l373:
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;inc\CANlib.h: 355: else
  3700                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
  3701  001A60  010F               	movlb	15	; () banked
  3702  001A62  9340               	bcf	64,1,b	;volatile
  3703  001A64  D000               	goto	l4188
  3704  001A66                     l4188:
  3705                           
  3706                           ; BSR set to: 15
  3707                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
  3708  001A66  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  3709  001A6A  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  3710  001A6E  50DF               	movf	indf2,w,c
  3711  001A70  010F               	movlb	15	; () banked
  3712  001A72  6F46               	movwf	70,b	;volatile
  3713                           
  3714                           ; BSR set to: 15
  3715                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
  3716  001A74  0100               	movlb	0	; () banked
  3717  001A76  EE20 F001          	lfsr	2,1
  3718  001A7A  517B               	movf	CANsendMessage@data& (0+255),w,b
  3719  001A7C  26D9               	addwf	fsr2l,f,c
  3720  001A7E  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3721  001A80  22DA               	addwfc	fsr2h,f,c
  3722  001A82  50DF               	movf	indf2,w,c
  3723  001A84  010F               	movlb	15	; () banked
  3724  001A86  6F47               	movwf	71,b	;volatile
  3725                           
  3726                           ; BSR set to: 15
  3727                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
  3728  001A88  0100               	movlb	0	; () banked
  3729  001A8A  EE20 F002          	lfsr	2,2
  3730  001A8E  517B               	movf	CANsendMessage@data& (0+255),w,b
  3731  001A90  26D9               	addwf	fsr2l,f,c
  3732  001A92  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3733  001A94  22DA               	addwfc	fsr2h,f,c
  3734  001A96  50DF               	movf	indf2,w,c
  3735  001A98  010F               	movlb	15	; () banked
  3736  001A9A  6F48               	movwf	72,b	;volatile
  3737                           
  3738                           ; BSR set to: 15
  3739                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
  3740  001A9C  0100               	movlb	0	; () banked
  3741  001A9E  EE20 F003          	lfsr	2,3
  3742  001AA2  517B               	movf	CANsendMessage@data& (0+255),w,b
  3743  001AA4  26D9               	addwf	fsr2l,f,c
  3744  001AA6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3745  001AA8  22DA               	addwfc	fsr2h,f,c
  3746  001AAA  50DF               	movf	indf2,w,c
  3747  001AAC  010F               	movlb	15	; () banked
  3748  001AAE  6F49               	movwf	73,b	;volatile
  3749                           
  3750                           ; BSR set to: 15
  3751                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
  3752  001AB0  0100               	movlb	0	; () banked
  3753  001AB2  EE20 F004          	lfsr	2,4
  3754  001AB6  517B               	movf	CANsendMessage@data& (0+255),w,b
  3755  001AB8  26D9               	addwf	fsr2l,f,c
  3756  001ABA  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3757  001ABC  22DA               	addwfc	fsr2h,f,c
  3758  001ABE  50DF               	movf	indf2,w,c
  3759  001AC0  010F               	movlb	15	; () banked
  3760  001AC2  6F4A               	movwf	74,b	;volatile
  3761                           
  3762                           ; BSR set to: 15
  3763                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
  3764  001AC4  0100               	movlb	0	; () banked
  3765  001AC6  EE20 F005          	lfsr	2,5
  3766  001ACA  517B               	movf	CANsendMessage@data& (0+255),w,b
  3767  001ACC  26D9               	addwf	fsr2l,f,c
  3768  001ACE  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3769  001AD0  22DA               	addwfc	fsr2h,f,c
  3770  001AD2  50DF               	movf	indf2,w,c
  3771  001AD4  010F               	movlb	15	; () banked
  3772  001AD6  6F4B               	movwf	75,b	;volatile
  3773                           
  3774                           ; BSR set to: 15
  3775                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
  3776  001AD8  0100               	movlb	0	; () banked
  3777  001ADA  EE20 F006          	lfsr	2,6
  3778  001ADE  517B               	movf	CANsendMessage@data& (0+255),w,b
  3779  001AE0  26D9               	addwf	fsr2l,f,c
  3780  001AE2  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3781  001AE4  22DA               	addwfc	fsr2h,f,c
  3782  001AE6  50DF               	movf	indf2,w,c
  3783  001AE8  010F               	movlb	15	; () banked
  3784  001AEA  6F4C               	movwf	76,b	;volatile
  3785                           
  3786                           ; BSR set to: 15
  3787                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
  3788  001AEC  0100               	movlb	0	; () banked
  3789  001AEE  EE20 F007          	lfsr	2,7
  3790  001AF2  517B               	movf	CANsendMessage@data& (0+255),w,b
  3791  001AF4  26D9               	addwf	fsr2l,f,c
  3792  001AF6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  3793  001AF8  22DA               	addwfc	fsr2h,f,c
  3794  001AFA  50DF               	movf	indf2,w,c
  3795  001AFC  010F               	movlb	15	; () banked
  3796  001AFE  6F4D               	movwf	77,b	;volatile
  3797                           
  3798                           ; BSR set to: 15
  3799                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
  3800  001B00  010F               	movlb	15	; () banked
  3801  001B02  8740               	bsf	64,3,b	;volatile
  3802                           
  3803                           ; BSR set to: 15
  3804                           ;inc\CANlib.h: 368: return;
  3805  001B04  0012               	return	
  3806  001B06                     l361:
  3807                           
  3808                           ; BSR set to: 15
  3809                           ;inc\CANlib.h: 369: }
  3810                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
  3811  001B06  010F               	movlb	15	; () banked
  3812  001B08  B730               	btfsc	48,3,b	;volatile
  3813  001B0A  D142               	goto	l376
  3814                           
  3815                           ; BSR set to: 15
  3816                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
  3817  001B0C  C07D  FF35         	movff	CANsendMessage@dataLength,3893	;volatile
  3818                           
  3819                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
  3820  001B10  0100               	movlb	0	; () banked
  3821  001B12  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  3822  001B14  D003               	goto	l377
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
  3826  001B16  010F               	movlb	15	; () banked
  3827  001B18  8D35               	bsf	53,6,b	;volatile
  3828  001B1A  D002               	goto	l378
  3829  001B1C                     l377:
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;inc\CANlib.h: 378: else
  3833                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
  3834  001B1C  010F               	movlb	15	; () banked
  3835  001B1E  9D35               	bcf	53,6,b	;volatile
  3836  001B20                     l378:
  3837                           
  3838                           ; BSR set to: 15
  3839                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
  3840  001B20  0100               	movlb	0	; () banked
  3841  001B22  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  3842  001B24  D07A               	goto	l379
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;inc\CANlib.h: 382: {
  3846                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
  3847  001B26  0100               	movlb	0	; () banked
  3848  001B28  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  3849  001B2A  0100               	movlb	0	; () banked
  3850  001B2C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3851  001B2E  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3852  001B30  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  3853  001B32  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
  3857  001B34  C083  FF34         	movff	CANsendMessage@tamp,3892	;volatile
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
  3861  001B38  0E00               	movlw	0
  3862  001B3A  0100               	movlb	0	; () banked
  3863  001B3C  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  3864  001B3E  0100               	movlb	0	; () banked
  3865  001B40  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3866  001B42  0EFF               	movlw	255
  3867  001B44  0100               	movlb	0	; () banked
  3868  001B46  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  3869  001B48  0100               	movlb	0	; () banked
  3870  001B4A  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  3871  001B4C  0E00               	movlw	0
  3872  001B4E  0100               	movlb	0	; () banked
  3873  001B50  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  3874  001B52  0100               	movlb	0	; () banked
  3875  001B54  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  3876  001B56  0E00               	movlw	0
  3877  001B58  0100               	movlb	0	; () banked
  3878  001B5A  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  3879  001B5C  0100               	movlb	0	; () banked
  3880  001B5E  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
  3884  001B60  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  3885  001B64  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  3886  001B68  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  3887  001B6C  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  3888  001B70  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  3889  001B74  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  3890  001B78  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  3891  001B7C  0100               	movlb	0	; () banked
  3892  001B7E  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  3893  001B80  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3894  001B84  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3895  001B88  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3896  001B8C  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
  3900  001B90  C083  FF33         	movff	CANsendMessage@tamp,3891	;volatile
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
  3904  001B94  0E00               	movlw	0
  3905  001B96  010F               	movlb	15	; () banked
  3906  001B98  6F32               	movwf	50,b	;volatile
  3907                           
  3908                           ; BSR set to: 15
  3909                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
  3910  001B9A  010F               	movlb	15	; () banked
  3911  001B9C  8732               	bsf	50,3,b	;volatile
  3912                           
  3913                           ; BSR set to: 15
  3914                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
  3915  001B9E  0100               	movlb	0	; () banked
  3916  001BA0  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  3917  001BA2  D002               	goto	l380
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
  3921  001BA4  010F               	movlb	15	; () banked
  3922  001BA6  8132               	bsf	50,0,b	;volatile
  3923  001BA8                     l380:
  3924                           
  3925                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
  3926  001BA8  0100               	movlb	0	; () banked
  3927  001BAA  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  3928  001BAC  D002               	goto	l381
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
  3932  001BAE  010F               	movlb	15	; () banked
  3933  001BB0  8332               	bsf	50,1,b	;volatile
  3934  001BB2                     l381:
  3935                           
  3936                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
  3937  001BB2  0100               	movlb	0	; () banked
  3938  001BB4  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  3939  001BB6  D002               	goto	l382
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
  3943  001BB8  010F               	movlb	15	; () banked
  3944  001BBA  8B32               	bsf	50,5,b	;volatile
  3945  001BBC                     l382:
  3946                           
  3947                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
  3948  001BBC  0100               	movlb	0	; () banked
  3949  001BBE  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  3950  001BC0  D002               	goto	l383
  3951                           
  3952                           ; BSR set to: 0
  3953                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
  3954  001BC2  010F               	movlb	15	; () banked
  3955  001BC4  8D32               	bsf	50,6,b	;volatile
  3956  001BC6                     l383:
  3957                           
  3958                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
  3959  001BC6  0100               	movlb	0	; () banked
  3960  001BC8  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  3961  001BCA  D003               	goto	l4238
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
  3965  001BCC  010F               	movlb	15	; () banked
  3966  001BCE  8F32               	bsf	50,7,b	;volatile
  3967  001BD0  D000               	goto	l4238
  3968  001BD2                     l4238:
  3969                           
  3970                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
  3971  001BD2  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  3972  001BD6  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  3973  001BDA  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  3974  001BDE  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  3975  001BE2  0E16               	movlw	22
  3976  001BE4  D006               	goto	u4470
  3977  001BE6                     u4475:
  3978  001BE6  0100               	movlb	0	; () banked
  3979  001BE8  90D8               	bcf	status,0,c
  3980  001BEA  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  3981  001BEC  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  3982  001BEE  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  3983  001BF0  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  3984  001BF2                     u4470:
  3985  001BF2  2EE8               	decfsz	wreg,f,c
  3986  001BF4  D7F8               	goto	u4475
  3987  001BF6  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  3988  001BFA  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  3989  001BFE  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  3990  001C02  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
  3994  001C06  0100               	movlb	0	; () banked
  3995  001C08  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  3996  001C0A  0100               	movlb	0	; () banked
  3997  001C0C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  3998  001C0E  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  3999  001C10  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4000  001C12  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
  4004  001C14  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  4005                           
  4006                           ;inc\CANlib.h: 407: }
  4007  001C18  D05A               	goto	l4258
  4008  001C1A                     l379:
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;inc\CANlib.h: 409: else
  4012                           ;inc\CANlib.h: 411: {
  4013                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
  4014  001C1A  010F               	movlb	15	; () banked
  4015  001C1C  9732               	bcf	50,3,b	;volatile
  4016                           
  4017                           ; BSR set to: 15
  4018                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
  4019  001C1E  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4020  001C22  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4021  001C26  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4022  001C2A  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4023  001C2E  0E04               	movlw	4
  4024  001C30  D006               	goto	u4480
  4025  001C32                     u4485:
  4026  001C32  0100               	movlb	0	; () banked
  4027  001C34  90D8               	bcf	status,0,c
  4028  001C36  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4029  001C38  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4030  001C3A  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4031  001C3C  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4032  001C3E                     u4480:
  4033  001C3E  2EE8               	decfsz	wreg,f,c
  4034  001C40  D7F8               	goto	u4485
  4035  001C42  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4036  001C46  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4037  001C4A  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4038  001C4E  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
  4042  001C52  0100               	movlb	0	; () banked
  4043  001C54  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4044  001C56  0100               	movlb	0	; () banked
  4045  001C58  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4046  001C5A  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4047  001C5C  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4048  001C5E  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
  4052  001C60  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
  4056  001C64  0E07               	movlw	7
  4057  001C66  0100               	movlb	0	; () banked
  4058  001C68  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4059  001C6A  0100               	movlb	0	; () banked
  4060  001C6C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4061  001C6E  0E00               	movlw	0
  4062  001C70  0100               	movlb	0	; () banked
  4063  001C72  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4064  001C74  0100               	movlb	0	; () banked
  4065  001C76  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4066  001C78  0E00               	movlw	0
  4067  001C7A  0100               	movlb	0	; () banked
  4068  001C7C  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4069  001C7E  0100               	movlb	0	; () banked
  4070  001C80  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4071  001C82  0E00               	movlw	0
  4072  001C84  0100               	movlb	0	; () banked
  4073  001C86  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4074  001C88  0100               	movlb	0	; () banked
  4075  001C8A  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;inc\CANlib.h: 419: tamp = tamp << 5;
  4079  001C8C  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4080  001C90  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4081  001C94  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4082  001C98  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4083  001C9C  0E05               	movlw	5
  4084  001C9E                     u4495:
  4085  001C9E  90D8               	bcf	status,0,c
  4086  001CA0  0100               	movlb	0	; () banked
  4087  001CA2  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  4088  001CA4  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  4089  001CA6  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  4090  001CA8  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  4091  001CAA  2EE8               	decfsz	wreg,f,c
  4092  001CAC  D7F8               	goto	u4495
  4093  001CAE  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4094  001CB2  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4095  001CB6  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4096  001CBA  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
  4100  001CBE  010F               	movlb	15	; () banked
  4101  001CC0  5132               	movf	50,w,b	;volatile
  4102  001CC2  0B1F               	andlw	31
  4103  001CC4  010F               	movlb	15	; () banked
  4104  001CC6  6F32               	movwf	50,b	;volatile
  4105                           
  4106                           ; BSR set to: 15
  4107                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
  4108  001CC8  C083  FF32         	movff	CANsendMessage@tamp,3890	;volatile
  4109  001CCC  D000               	goto	l4258
  4110  001CCE                     l4258:
  4111                           
  4112                           ;inc\CANlib.h: 422: }
  4113                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
  4114  001CCE  0100               	movlb	0	; () banked
  4115  001CD0  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  4116  001CD2  D003               	goto	l386
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
  4120  001CD4  010F               	movlb	15	; () banked
  4121  001CD6  8130               	bsf	48,0,b	;volatile
  4122  001CD8  D002               	goto	l387
  4123  001CDA                     l386:
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;inc\CANlib.h: 426: else
  4127                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
  4128  001CDA  010F               	movlb	15	; () banked
  4129  001CDC  9130               	bcf	48,0,b	;volatile
  4130  001CDE                     l387:
  4131                           
  4132                           ; BSR set to: 15
  4133                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
  4134  001CDE  0100               	movlb	0	; () banked
  4135  001CE0  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  4136  001CE2  D003               	goto	l388
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
  4140  001CE4  010F               	movlb	15	; () banked
  4141  001CE6  8330               	bsf	48,1,b	;volatile
  4142  001CE8  D003               	goto	l4264
  4143  001CEA                     l388:
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;inc\CANlib.h: 430: else
  4147                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
  4148  001CEA  010F               	movlb	15	; () banked
  4149  001CEC  9330               	bcf	48,1,b	;volatile
  4150  001CEE  D000               	goto	l4264
  4151  001CF0                     l4264:
  4152                           
  4153                           ; BSR set to: 15
  4154                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
  4155  001CF0  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  4156  001CF4  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  4157  001CF8  50DF               	movf	indf2,w,c
  4158  001CFA  010F               	movlb	15	; () banked
  4159  001CFC  6F36               	movwf	54,b	;volatile
  4160                           
  4161                           ; BSR set to: 15
  4162                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
  4163  001CFE  0100               	movlb	0	; () banked
  4164  001D00  EE20 F001          	lfsr	2,1
  4165  001D04  517B               	movf	CANsendMessage@data& (0+255),w,b
  4166  001D06  26D9               	addwf	fsr2l,f,c
  4167  001D08  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4168  001D0A  22DA               	addwfc	fsr2h,f,c
  4169  001D0C  50DF               	movf	indf2,w,c
  4170  001D0E  010F               	movlb	15	; () banked
  4171  001D10  6F37               	movwf	55,b	;volatile
  4172                           
  4173                           ; BSR set to: 15
  4174                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
  4175  001D12  0100               	movlb	0	; () banked
  4176  001D14  EE20 F002          	lfsr	2,2
  4177  001D18  517B               	movf	CANsendMessage@data& (0+255),w,b
  4178  001D1A  26D9               	addwf	fsr2l,f,c
  4179  001D1C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4180  001D1E  22DA               	addwfc	fsr2h,f,c
  4181  001D20  50DF               	movf	indf2,w,c
  4182  001D22  010F               	movlb	15	; () banked
  4183  001D24  6F38               	movwf	56,b	;volatile
  4184                           
  4185                           ; BSR set to: 15
  4186                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
  4187  001D26  0100               	movlb	0	; () banked
  4188  001D28  EE20 F003          	lfsr	2,3
  4189  001D2C  517B               	movf	CANsendMessage@data& (0+255),w,b
  4190  001D2E  26D9               	addwf	fsr2l,f,c
  4191  001D30  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4192  001D32  22DA               	addwfc	fsr2h,f,c
  4193  001D34  50DF               	movf	indf2,w,c
  4194  001D36  010F               	movlb	15	; () banked
  4195  001D38  6F39               	movwf	57,b	;volatile
  4196                           
  4197                           ; BSR set to: 15
  4198                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
  4199  001D3A  0100               	movlb	0	; () banked
  4200  001D3C  EE20 F004          	lfsr	2,4
  4201  001D40  517B               	movf	CANsendMessage@data& (0+255),w,b
  4202  001D42  26D9               	addwf	fsr2l,f,c
  4203  001D44  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4204  001D46  22DA               	addwfc	fsr2h,f,c
  4205  001D48  50DF               	movf	indf2,w,c
  4206  001D4A  010F               	movlb	15	; () banked
  4207  001D4C  6F3A               	movwf	58,b	;volatile
  4208                           
  4209                           ; BSR set to: 15
  4210                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
  4211  001D4E  0100               	movlb	0	; () banked
  4212  001D50  EE20 F005          	lfsr	2,5
  4213  001D54  517B               	movf	CANsendMessage@data& (0+255),w,b
  4214  001D56  26D9               	addwf	fsr2l,f,c
  4215  001D58  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4216  001D5A  22DA               	addwfc	fsr2h,f,c
  4217  001D5C  50DF               	movf	indf2,w,c
  4218  001D5E  010F               	movlb	15	; () banked
  4219  001D60  6F3B               	movwf	59,b	;volatile
  4220                           
  4221                           ; BSR set to: 15
  4222                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
  4223  001D62  0100               	movlb	0	; () banked
  4224  001D64  EE20 F006          	lfsr	2,6
  4225  001D68  517B               	movf	CANsendMessage@data& (0+255),w,b
  4226  001D6A  26D9               	addwf	fsr2l,f,c
  4227  001D6C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4228  001D6E  22DA               	addwfc	fsr2h,f,c
  4229  001D70  50DF               	movf	indf2,w,c
  4230  001D72  010F               	movlb	15	; () banked
  4231  001D74  6F3C               	movwf	60,b	;volatile
  4232                           
  4233                           ; BSR set to: 15
  4234                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
  4235  001D76  0100               	movlb	0	; () banked
  4236  001D78  EE20 F007          	lfsr	2,7
  4237  001D7C  517B               	movf	CANsendMessage@data& (0+255),w,b
  4238  001D7E  26D9               	addwf	fsr2l,f,c
  4239  001D80  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4240  001D82  22DA               	addwfc	fsr2h,f,c
  4241  001D84  50DF               	movf	indf2,w,c
  4242  001D86  010F               	movlb	15	; () banked
  4243  001D88  6F3D               	movwf	61,b	;volatile
  4244                           
  4245                           ; BSR set to: 15
  4246                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
  4247  001D8A  010F               	movlb	15	; () banked
  4248  001D8C  8730               	bsf	48,3,b	;volatile
  4249                           
  4250                           ; BSR set to: 15
  4251                           ;inc\CANlib.h: 444: return;
  4252  001D8E  0012               	return	
  4253  001D90                     l376:
  4254                           
  4255                           ; BSR set to: 15
  4256                           ;inc\CANlib.h: 445: }
  4257                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
  4258  001D90  010F               	movlb	15	; () banked
  4259  001D92  B720               	btfsc	32,3,b	;volatile
  4260  001D94  0012               	return	
  4261                           
  4262                           ; BSR set to: 15
  4263                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
  4264  001D96  C07D  FF25         	movff	CANsendMessage@dataLength,3877	;volatile
  4265                           
  4266                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
  4267  001D9A  0100               	movlb	0	; () banked
  4268  001D9C  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  4269  001D9E  D003               	goto	l391
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
  4273  001DA0  010F               	movlb	15	; () banked
  4274  001DA2  8D25               	bsf	37,6,b	;volatile
  4275  001DA4  D002               	goto	l392
  4276  001DA6                     l391:
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;inc\CANlib.h: 454: else
  4280                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
  4281  001DA6  010F               	movlb	15	; () banked
  4282  001DA8  9D25               	bcf	37,6,b	;volatile
  4283  001DAA                     l392:
  4284                           
  4285                           ; BSR set to: 15
  4286                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
  4287  001DAA  0100               	movlb	0	; () banked
  4288  001DAC  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  4289  001DAE  D07A               	goto	l393
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;inc\CANlib.h: 458: {
  4293                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
  4294  001DB0  0100               	movlb	0	; () banked
  4295  001DB2  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  4296  001DB4  0100               	movlb	0	; () banked
  4297  001DB6  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4298  001DB8  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4299  001DBA  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4300  001DBC  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
  4304  001DBE  C083  FF24         	movff	CANsendMessage@tamp,3876	;volatile
  4305                           
  4306                           ; BSR set to: 0
  4307                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
  4308  001DC2  0E00               	movlw	0
  4309  001DC4  0100               	movlb	0	; () banked
  4310  001DC6  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4311  001DC8  0100               	movlb	0	; () banked
  4312  001DCA  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4313  001DCC  0EFF               	movlw	255
  4314  001DCE  0100               	movlb	0	; () banked
  4315  001DD0  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4316  001DD2  0100               	movlb	0	; () banked
  4317  001DD4  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4318  001DD6  0E00               	movlw	0
  4319  001DD8  0100               	movlb	0	; () banked
  4320  001DDA  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4321  001DDC  0100               	movlb	0	; () banked
  4322  001DDE  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4323  001DE0  0E00               	movlw	0
  4324  001DE2  0100               	movlb	0	; () banked
  4325  001DE4  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4326  001DE6  0100               	movlb	0	; () banked
  4327  001DE8  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
  4331  001DEA  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4332  001DEE  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4333  001DF2  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4334  001DF6  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4335  001DFA  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  4336  001DFE  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  4337  001E02  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  4338  001E06  0100               	movlb	0	; () banked
  4339  001E08  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  4340  001E0A  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4341  001E0E  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4342  001E12  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4343  001E16  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4344                           
  4345                           ; BSR set to: 0
  4346                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
  4347  001E1A  C083  FF23         	movff	CANsendMessage@tamp,3875	;volatile
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
  4351  001E1E  0E00               	movlw	0
  4352  001E20  010F               	movlb	15	; () banked
  4353  001E22  6F22               	movwf	34,b	;volatile
  4354                           
  4355                           ; BSR set to: 15
  4356                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
  4357  001E24  010F               	movlb	15	; () banked
  4358  001E26  8722               	bsf	34,3,b	;volatile
  4359                           
  4360                           ; BSR set to: 15
  4361                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
  4362  001E28  0100               	movlb	0	; () banked
  4363  001E2A  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  4364  001E2C  D002               	goto	l394
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
  4368  001E2E  010F               	movlb	15	; () banked
  4369  001E30  8122               	bsf	34,0,b	;volatile
  4370  001E32                     l394:
  4371                           
  4372                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
  4373  001E32  0100               	movlb	0	; () banked
  4374  001E34  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  4375  001E36  D002               	goto	l395
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
  4379  001E38  010F               	movlb	15	; () banked
  4380  001E3A  8322               	bsf	34,1,b	;volatile
  4381  001E3C                     l395:
  4382                           
  4383                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
  4384  001E3C  0100               	movlb	0	; () banked
  4385  001E3E  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  4386  001E40  D002               	goto	l396
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
  4390  001E42  010F               	movlb	15	; () banked
  4391  001E44  8B22               	bsf	34,5,b	;volatile
  4392  001E46                     l396:
  4393                           
  4394                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
  4395  001E46  0100               	movlb	0	; () banked
  4396  001E48  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  4397  001E4A  D002               	goto	l397
  4398                           
  4399                           ; BSR set to: 0
  4400                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
  4401  001E4C  010F               	movlb	15	; () banked
  4402  001E4E  8D22               	bsf	34,6,b	;volatile
  4403  001E50                     l397:
  4404                           
  4405                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
  4406  001E50  0100               	movlb	0	; () banked
  4407  001E52  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  4408  001E54  D003               	goto	l4314
  4409                           
  4410                           ; BSR set to: 0
  4411                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
  4412  001E56  010F               	movlb	15	; () banked
  4413  001E58  8F22               	bsf	34,7,b	;volatile
  4414  001E5A  D000               	goto	l4314
  4415  001E5C                     l4314:
  4416                           
  4417                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
  4418  001E5C  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4419  001E60  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4420  001E64  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4421  001E68  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4422  001E6C  0E16               	movlw	22
  4423  001E6E  D006               	goto	u4600
  4424  001E70                     u4605:
  4425  001E70  0100               	movlb	0	; () banked
  4426  001E72  90D8               	bcf	status,0,c
  4427  001E74  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4428  001E76  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4429  001E78  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4430  001E7A  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4431  001E7C                     u4600:
  4432  001E7C  2EE8               	decfsz	wreg,f,c
  4433  001E7E  D7F8               	goto	u4605
  4434  001E80  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4435  001E84  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4436  001E88  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4437  001E8C  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
  4441  001E90  0100               	movlb	0	; () banked
  4442  001E92  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4443  001E94  0100               	movlb	0	; () banked
  4444  001E96  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4445  001E98  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4446  001E9A  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4447  001E9C  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
  4451  001E9E  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  4452                           
  4453                           ;inc\CANlib.h: 483: }
  4454  001EA2  D05A               	goto	l4334
  4455  001EA4                     l393:
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;inc\CANlib.h: 485: else
  4459                           ;inc\CANlib.h: 487: {
  4460                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
  4461  001EA4  010F               	movlb	15	; () banked
  4462  001EA6  9722               	bcf	34,3,b	;volatile
  4463                           
  4464                           ; BSR set to: 15
  4465                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
  4466  001EA8  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4467  001EAC  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4468  001EB0  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4469  001EB4  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4470  001EB8  0E04               	movlw	4
  4471  001EBA  D006               	goto	u4610
  4472  001EBC                     u4615:
  4473  001EBC  0100               	movlb	0	; () banked
  4474  001EBE  90D8               	bcf	status,0,c
  4475  001EC0  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4476  001EC2  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4477  001EC4  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4478  001EC6  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4479  001EC8                     u4610:
  4480  001EC8  2EE8               	decfsz	wreg,f,c
  4481  001ECA  D7F8               	goto	u4615
  4482  001ECC  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4483  001ED0  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4484  001ED4  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4485  001ED8  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
  4489  001EDC  0100               	movlb	0	; () banked
  4490  001EDE  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4491  001EE0  0100               	movlb	0	; () banked
  4492  001EE2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4493  001EE4  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4494  001EE6  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4495  001EE8  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
  4499  001EEA  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
  4503  001EEE  0E07               	movlw	7
  4504  001EF0  0100               	movlb	0	; () banked
  4505  001EF2  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4506  001EF4  0100               	movlb	0	; () banked
  4507  001EF6  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4508  001EF8  0E00               	movlw	0
  4509  001EFA  0100               	movlb	0	; () banked
  4510  001EFC  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4511  001EFE  0100               	movlb	0	; () banked
  4512  001F00  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4513  001F02  0E00               	movlw	0
  4514  001F04  0100               	movlb	0	; () banked
  4515  001F06  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4516  001F08  0100               	movlb	0	; () banked
  4517  001F0A  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4518  001F0C  0E00               	movlw	0
  4519  001F0E  0100               	movlb	0	; () banked
  4520  001F10  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4521  001F12  0100               	movlb	0	; () banked
  4522  001F14  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;inc\CANlib.h: 495: tamp = tamp << 5;
  4526  001F16  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4527  001F1A  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4528  001F1E  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4529  001F22  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4530  001F26  0E05               	movlw	5
  4531  001F28                     u4625:
  4532  001F28  90D8               	bcf	status,0,c
  4533  001F2A  0100               	movlb	0	; () banked
  4534  001F2C  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  4535  001F2E  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  4536  001F30  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  4537  001F32  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  4538  001F34  2EE8               	decfsz	wreg,f,c
  4539  001F36  D7F8               	goto	u4625
  4540  001F38  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4541  001F3C  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4542  001F40  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4543  001F44  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
  4547  001F48  010F               	movlb	15	; () banked
  4548  001F4A  5122               	movf	34,w,b	;volatile
  4549  001F4C  0B1F               	andlw	31
  4550  001F4E  010F               	movlb	15	; () banked
  4551  001F50  6F22               	movwf	34,b	;volatile
  4552                           
  4553                           ; BSR set to: 15
  4554                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
  4555  001F52  C083  FF22         	movff	CANsendMessage@tamp,3874	;volatile
  4556  001F56  D000               	goto	l4334
  4557  001F58                     l4334:
  4558                           
  4559                           ;inc\CANlib.h: 498: }
  4560                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
  4561  001F58  0100               	movlb	0	; () banked
  4562  001F5A  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  4563  001F5C  D003               	goto	l400
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
  4567  001F5E  010F               	movlb	15	; () banked
  4568  001F60  8120               	bsf	32,0,b	;volatile
  4569  001F62  D002               	goto	l401
  4570  001F64                     l400:
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;inc\CANlib.h: 502: else
  4574                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
  4575  001F64  010F               	movlb	15	; () banked
  4576  001F66  9120               	bcf	32,0,b	;volatile
  4577  001F68                     l401:
  4578                           
  4579                           ; BSR set to: 15
  4580                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
  4581  001F68  0100               	movlb	0	; () banked
  4582  001F6A  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  4583  001F6C  D003               	goto	l402
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
  4587  001F6E  010F               	movlb	15	; () banked
  4588  001F70  8320               	bsf	32,1,b	;volatile
  4589  001F72  D003               	goto	l4340
  4590  001F74                     l402:
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;inc\CANlib.h: 506: else
  4594                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
  4595  001F74  010F               	movlb	15	; () banked
  4596  001F76  9320               	bcf	32,1,b	;volatile
  4597  001F78  D000               	goto	l4340
  4598  001F7A                     l4340:
  4599                           
  4600                           ; BSR set to: 15
  4601                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
  4602  001F7A  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  4603  001F7E  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  4604  001F82  50DF               	movf	indf2,w,c
  4605  001F84  010F               	movlb	15	; () banked
  4606  001F86  6F26               	movwf	38,b	;volatile
  4607                           
  4608                           ; BSR set to: 15
  4609                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
  4610  001F88  0100               	movlb	0	; () banked
  4611  001F8A  EE20 F001          	lfsr	2,1
  4612  001F8E  517B               	movf	CANsendMessage@data& (0+255),w,b
  4613  001F90  26D9               	addwf	fsr2l,f,c
  4614  001F92  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4615  001F94  22DA               	addwfc	fsr2h,f,c
  4616  001F96  50DF               	movf	indf2,w,c
  4617  001F98  010F               	movlb	15	; () banked
  4618  001F9A  6F27               	movwf	39,b	;volatile
  4619                           
  4620                           ; BSR set to: 15
  4621                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
  4622  001F9C  0100               	movlb	0	; () banked
  4623  001F9E  EE20 F002          	lfsr	2,2
  4624  001FA2  517B               	movf	CANsendMessage@data& (0+255),w,b
  4625  001FA4  26D9               	addwf	fsr2l,f,c
  4626  001FA6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4627  001FA8  22DA               	addwfc	fsr2h,f,c
  4628  001FAA  50DF               	movf	indf2,w,c
  4629  001FAC  010F               	movlb	15	; () banked
  4630  001FAE  6F28               	movwf	40,b	;volatile
  4631                           
  4632                           ; BSR set to: 15
  4633                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
  4634  001FB0  0100               	movlb	0	; () banked
  4635  001FB2  EE20 F003          	lfsr	2,3
  4636  001FB6  517B               	movf	CANsendMessage@data& (0+255),w,b
  4637  001FB8  26D9               	addwf	fsr2l,f,c
  4638  001FBA  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4639  001FBC  22DA               	addwfc	fsr2h,f,c
  4640  001FBE  50DF               	movf	indf2,w,c
  4641  001FC0  010F               	movlb	15	; () banked
  4642  001FC2  6F29               	movwf	41,b	;volatile
  4643                           
  4644                           ; BSR set to: 15
  4645                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
  4646  001FC4  0100               	movlb	0	; () banked
  4647  001FC6  EE20 F004          	lfsr	2,4
  4648  001FCA  517B               	movf	CANsendMessage@data& (0+255),w,b
  4649  001FCC  26D9               	addwf	fsr2l,f,c
  4650  001FCE  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4651  001FD0  22DA               	addwfc	fsr2h,f,c
  4652  001FD2  50DF               	movf	indf2,w,c
  4653  001FD4  010F               	movlb	15	; () banked
  4654  001FD6  6F2A               	movwf	42,b	;volatile
  4655                           
  4656                           ; BSR set to: 15
  4657                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
  4658  001FD8  0100               	movlb	0	; () banked
  4659  001FDA  EE20 F005          	lfsr	2,5
  4660  001FDE  517B               	movf	CANsendMessage@data& (0+255),w,b
  4661  001FE0  26D9               	addwf	fsr2l,f,c
  4662  001FE2  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4663  001FE4  22DA               	addwfc	fsr2h,f,c
  4664  001FE6  50DF               	movf	indf2,w,c
  4665  001FE8  010F               	movlb	15	; () banked
  4666  001FEA  6F2B               	movwf	43,b	;volatile
  4667                           
  4668                           ; BSR set to: 15
  4669                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
  4670  001FEC  0100               	movlb	0	; () banked
  4671  001FEE  EE20 F006          	lfsr	2,6
  4672  001FF2  517B               	movf	CANsendMessage@data& (0+255),w,b
  4673  001FF4  26D9               	addwf	fsr2l,f,c
  4674  001FF6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4675  001FF8  22DA               	addwfc	fsr2h,f,c
  4676  001FFA  50DF               	movf	indf2,w,c
  4677  001FFC  010F               	movlb	15	; () banked
  4678  001FFE  6F2C               	movwf	44,b	;volatile
  4679                           
  4680                           ; BSR set to: 15
  4681                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
  4682  002000  0100               	movlb	0	; () banked
  4683  002002  EE20 F007          	lfsr	2,7
  4684  002006  517B               	movf	CANsendMessage@data& (0+255),w,b
  4685  002008  26D9               	addwf	fsr2l,f,c
  4686  00200A  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4687  00200C  22DA               	addwfc	fsr2h,f,c
  4688  00200E  50DF               	movf	indf2,w,c
  4689  002010  010F               	movlb	15	; () banked
  4690  002012  6F2D               	movwf	45,b	;volatile
  4691                           
  4692                           ; BSR set to: 15
  4693                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
  4694  002014  010F               	movlb	15	; () banked
  4695  002016  8720               	bsf	32,3,b	;volatile
  4696                           
  4697                           ; BSR set to: 15
  4698                           ;inc\CANlib.h: 520: return;
  4699  002018  0012               	return	
  4700                           
  4701                           ; BSR set to: 15
  4702                           
  4703                           ; BSR set to: 15
  4704  00201A  0012               	return		;funcret
  4705  00201C                     __end_of_CANsendMessage:
  4706                           	opt stack 0
  4707                           tblptru	equ	0xFF8
  4708                           tblptrh	equ	0xFF7
  4709                           tblptrl	equ	0xFF6
  4710                           tablat	equ	0xFF5
  4711                           postinc0	equ	0xFEE
  4712                           wreg	equ	0xFE8
  4713                           postdec1	equ	0xFE5
  4714                           fsr1l	equ	0xFE1
  4715                           indf2	equ	0xFDF
  4716                           postinc2	equ	0xFDE
  4717                           postdec2	equ	0xFDD
  4718                           fsr2h	equ	0xFDA
  4719                           fsr2l	equ	0xFD9
  4720                           status	equ	0xFD8
  4721                           
  4722 ;; *************** function _CANisTxReady *****************
  4723 ;; Defined at:
  4724 ;;		line 1154 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;		None
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;		None
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  1    wreg      unsigned char 
  4731 ;; Registers used:
  4732 ;;		wreg, status,2
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4739 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4741 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4742 ;;Total ram usage:        1 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    5
  4745 ;; This function calls:
  4746 ;;		Nothing
  4747 ;; This function is called by:
  4748 ;;		_main
  4749 ;;		_park_search
  4750 ;;		_park_routine
  4751 ;;		_can_send
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           	psect	text6
  4756  005E2E                     __ptext6:
  4757                           	opt stack 0
  4758  005E2E                     _CANisTxReady:
  4759                           	opt stack 22
  4760                           
  4761                           ;inc\CANlib.h: 1156: return (!TXB0CONbits.TXREQ || !TXB1CONbits.TXREQ || !TXB2CONbits.TX
      +                          REQ);
  4762                           
  4763                           ; BSR set to: 15
  4764                           ;incstack = 0
  4765  005E2E  0E01               	movlw	1
  4766  005E30  0100               	movlb	0	; () banked
  4767  005E32  6F77               	movwf	_CANisTxReady$2841& (0+255),b
  4768                           
  4769                           ; BSR set to: 0
  4770  005E34  010F               	movlb	15	; () banked
  4771  005E36  A740               	btfss	64,3,b	;volatile
  4772  005E38  D009               	goto	l554
  4773                           
  4774                           ; BSR set to: 15
  4775  005E3A  010F               	movlb	15	; () banked
  4776  005E3C  A730               	btfss	48,3,b	;volatile
  4777  005E3E  D006               	goto	l554
  4778                           
  4779                           ; BSR set to: 15
  4780  005E40  010F               	movlb	15	; () banked
  4781  005E42  A720               	btfss	32,3,b	;volatile
  4782  005E44  D003               	goto	l554
  4783                           
  4784                           ; BSR set to: 15
  4785  005E46  0E00               	movlw	0
  4786  005E48  0100               	movlb	0	; () banked
  4787  005E4A  6F77               	movwf	_CANisTxReady$2841& (0+255),b
  4788  005E4C                     l554:
  4789  005E4C  0100               	movlb	0	; () banked
  4790  005E4E  5177               	movf	_CANisTxReady$2841& (0+255),w,b
  4791  005E50  0012               	return	
  4792                           
  4793                           ; BSR set to: 0
  4794                           
  4795                           ; BSR set to: 0
  4796  005E52  0012               	return		;funcret
  4797  005E54                     __end_of_CANisTxReady:
  4798                           	opt stack 0
  4799                           tblptru	equ	0xFF8
  4800                           tblptrh	equ	0xFF7
  4801                           tblptrl	equ	0xFF6
  4802                           tablat	equ	0xFF5
  4803                           postinc0	equ	0xFEE
  4804                           wreg	equ	0xFE8
  4805                           postdec1	equ	0xFE5
  4806                           fsr1l	equ	0xFE1
  4807                           indf2	equ	0xFDF
  4808                           postinc2	equ	0xFDE
  4809                           postdec2	equ	0xFDD
  4810                           fsr2h	equ	0xFDA
  4811                           fsr2l	equ	0xFD9
  4812                           status	equ	0xFD8
  4813                           
  4814 ;; *************** function _abs *****************
  4815 ;; Defined at:
  4816 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\abs.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;  a               2   23[BANK0 ] int 
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;		None
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  2   23[BANK0 ] int 
  4823 ;; Registers used:
  4824 ;;		wreg, status,2, status,0
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4830 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4833 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;Total ram usage:        4 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    5
  4837 ;; This function calls:
  4838 ;;		Nothing
  4839 ;; This function is called by:
  4840 ;;		_park_search
  4841 ;;		_parallelo
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           	psect	text7
  4846  005DDA                     __ptext7:
  4847                           	opt stack 0
  4848  005DDA                     _abs:
  4849                           	opt stack 23
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;incstack = 0
  4853  005DDA  0100               	movlb	0	; () banked
  4854  005DDC  AF78               	btfss	(abs@a+1)& (0+255),7,b
  4855  005DDE  D00E               	goto	l905
  4856                           
  4857                           ; BSR set to: 0
  4858  005DE0  C077  F079         	movff	abs@a,??_abs
  4859  005DE4  C078  F07A         	movff	abs@a+1,??_abs+1
  4860  005DE8  0100               	movlb	0	; () banked
  4861  005DEA  1F79               	comf	??_abs& (0+255),f,b
  4862  005DEC  1F7A               	comf	(??_abs+1)& (0+255),f,b
  4863  005DEE  4B79               	infsnz	??_abs& (0+255),f,b
  4864  005DF0  2B7A               	incf	(??_abs+1)& (0+255),f,b
  4865  005DF2  C079  F077         	movff	??_abs,?_abs
  4866  005DF6  C07A  F078         	movff	??_abs+1,?_abs+1
  4867  005DFA  0012               	return	
  4868  005DFC                     l905:
  4869                           
  4870                           ; BSR set to: 0
  4871  005DFC  C077  F077         	movff	abs@a,?_abs
  4872  005E00  C078  F078         	movff	abs@a+1,?_abs+1
  4873                           
  4874                           ; BSR set to: 0
  4875  005E04  0012               	return		;funcret
  4876  005E06                     __end_of_abs:
  4877                           	opt stack 0
  4878                           tblptru	equ	0xFF8
  4879                           tblptrh	equ	0xFF7
  4880                           tblptrl	equ	0xFF6
  4881                           tablat	equ	0xFF5
  4882                           postinc0	equ	0xFEE
  4883                           wreg	equ	0xFE8
  4884                           postdec1	equ	0xFE5
  4885                           fsr1l	equ	0xFE1
  4886                           indf2	equ	0xFDF
  4887                           postinc2	equ	0xFDE
  4888                           postdec2	equ	0xFDD
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function ___awtofl *****************
  4894 ;; Defined at:
  4895 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  c               2   33[BANK0 ] int 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;  f1              4    0        int 
  4900 ;;  sign            1   37[BANK0 ] unsigned char 
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  4   33[BANK0 ] unsigned char 
  4903 ;; Registers used:
  4904 ;;		wreg, status,2, status,0, cstack
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4910 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4913 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4914 ;;Total ram usage:        5 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; Hardware stack levels required when called:    6
  4917 ;; This function calls:
  4918 ;;		___flpack
  4919 ;; This function is called by:
  4920 ;;		_park_search
  4921 ;;		_parallelo
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text8
  4926  005C0A                     __ptext8:
  4927                           	opt stack 0
  4928  005C0A                     ___awtofl:
  4929                           	opt stack 22
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;incstack = 0
  4933  005C0A  0E00               	movlw	0
  4934  005C0C  0100               	movlb	0	; () banked
  4935  005C0E  6F85               	movwf	___awtofl@sign& (0+255),b
  4936                           
  4937                           ; BSR set to: 0
  4938  005C10  0100               	movlb	0	; () banked
  4939  005C12  AF82               	btfss	(___awtofl@c+1)& (0+255),7,b
  4940  005C14  D008               	goto	l6486
  4941                           
  4942                           ; BSR set to: 0
  4943  005C16  0100               	movlb	0	; () banked
  4944  005C18  6D81               	negf	___awtofl@c& (0+255),b
  4945  005C1A  1F82               	comf	(___awtofl@c+1)& (0+255),f,b
  4946  005C1C  B0D8               	btfsc	status,0,c
  4947  005C1E  2B82               	incf	(___awtofl@c+1)& (0+255),f,b
  4948  005C20  0100               	movlb	0	; () banked
  4949  005C22  2B85               	incf	___awtofl@sign& (0+255),f,b
  4950  005C24  D000               	goto	l6486
  4951  005C26                     l6486:
  4952                           
  4953                           ; BSR set to: 0
  4954  005C26  C081  F077         	movff	___awtofl@c,___flpack@arg
  4955  005C2A  C082  F078         	movff	___awtofl@c+1,___flpack@arg+1
  4956  005C2E  0100               	movlb	0	; () banked
  4957  005C30  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  4958  005C32  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  4959  005C34  0E96               	movlw	150
  4960  005C36  0100               	movlb	0	; () banked
  4961  005C38  6F7B               	movwf	___flpack@exp& (0+255),b
  4962  005C3A  C085  F07C         	movff	___awtofl@sign,___flpack@sign
  4963  005C3E  EC8E  F026         	call	___flpack	;wreg free
  4964  005C42  C077  F081         	movff	?___flpack,?___awtofl
  4965  005C46  C078  F082         	movff	?___flpack+1,?___awtofl+1
  4966  005C4A  C079  F083         	movff	?___flpack+2,?___awtofl+2
  4967  005C4E  C07A  F084         	movff	?___flpack+3,?___awtofl+3
  4968  005C52  0012               	return	
  4969  005C54  0012               	return		;funcret
  4970  005C56                     __end_of___awtofl:
  4971                           	opt stack 0
  4972                           tblptru	equ	0xFF8
  4973                           tblptrh	equ	0xFF7
  4974                           tblptrl	equ	0xFF6
  4975                           tablat	equ	0xFF5
  4976                           postinc0	equ	0xFEE
  4977                           wreg	equ	0xFE8
  4978                           postdec1	equ	0xFE5
  4979                           fsr1l	equ	0xFE1
  4980                           indf2	equ	0xFDF
  4981                           postinc2	equ	0xFDE
  4982                           postdec2	equ	0xFDD
  4983                           fsr2h	equ	0xFDA
  4984                           fsr2l	equ	0xFD9
  4985                           status	equ	0xFD8
  4986                           
  4987 ;; *************** function _matematica *****************
  4988 ;; Defined at:
  4989 ;;		line 504 in file "parcheggio.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;		None
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;		None
  4994 ;; Return value:  Size  Location     Type
  4995 ;;		None               void
  4996 ;; Registers used:
  4997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : 0/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5004 ;;      Locals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  5005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5006 ;;      Totals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  5007 ;;Total ram usage:       28 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:   10
  5010 ;; This function calls:
  5011 ;;		___fladd
  5012 ;;		___fldiv
  5013 ;;		___flmul
  5014 ;;		___flneg
  5015 ;;		_asin
  5016 ;;		_cos
  5017 ;; This function is called by:
  5018 ;;		_park_routine
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           	psect	text9
  5023  0026C0                     __ptext9:
  5024                           	opt stack 0
  5025  0026C0                     _matematica:
  5026                           	opt stack 19
  5027                           
  5028                           ;parcheggio.c: 505: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  5029                           
  5030                           ;incstack = 0
  5031  0026C0  C12C  F0A3         	movff	_bordo,___fladd@f2	;volatile
  5032  0026C4  C12D  F0A4         	movff	_bordo+1,___fladd@f2+1	;volatile
  5033  0026C8  C12E  F0A5         	movff	_bordo+2,___fladd@f2+2	;volatile
  5034  0026CC  C12F  F0A6         	movff	_bordo+3,___fladd@f2+3	;volatile
  5035  0026D0  0E00               	movlw	0
  5036  0026D2  0100               	movlb	0	; () banked
  5037  0026D4  6F85               	movwf	___fldiv@f2& (0+255),b
  5038  0026D6  0E00               	movlw	0
  5039  0026D8  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5040  0026DA  0E00               	movlw	0
  5041  0026DC  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5042  0026DE  0E40               	movlw	64
  5043  0026E0  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5044  0026E2  C1F2  F081         	movff	_larghezza,___fldiv@f1	;volatile
  5045  0026E6  C1F3  F082         	movff	_larghezza+1,___fldiv@f1+1	;volatile
  5046  0026EA  C1F4  F083         	movff	_larghezza+2,___fldiv@f1+2	;volatile
  5047  0026EE  C1F5  F084         	movff	_larghezza+3,___fldiv@f1+3	;volatile
  5048  0026F2  EC00  F028         	call	___fldiv	;wreg free
  5049  0026F6  C081  F09F         	movff	?___fldiv,___fladd@f1
  5050  0026FA  C082  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  5051  0026FE  C083  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  5052  002702  C084  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  5053  002706  EC1F  F020         	call	___fladd	;wreg free
  5054  00270A  C09F  F0AB         	movff	?___fladd,___flneg@f1
  5055  00270E  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  5056  002712  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  5057  002716  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  5058  00271A  EC4A  F02E         	call	___flneg	;wreg free
  5059  00271E  C0AB  F1C6         	movff	?___flneg,_matematica$3668
  5060  002722  C0AC  F1C7         	movff	?___flneg+1,_matematica$3668+1
  5061  002726  C0AD  F1C8         	movff	?___flneg+2,_matematica$3668+2
  5062  00272A  C0AE  F1C9         	movff	?___flneg+3,_matematica$3668+3
  5063                           
  5064                           ;parcheggio.c: 505: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  5065  00272E  C1C6  F0A3         	movff	_matematica$3668,___fladd@f2
  5066  002732  C1C7  F0A4         	movff	_matematica$3668+1,___fladd@f2+1
  5067  002736  C1C8  F0A5         	movff	_matematica$3668+2,___fladd@f2+2
  5068  00273A  C1C9  F0A6         	movff	_matematica$3668+3,___fladd@f2+3
  5069  00273E  0E00               	movlw	0
  5070  002740  0100               	movlb	0	; () banked
  5071  002742  6F94               	movwf	___flmul@f2& (0+255),b
  5072  002744  0E00               	movlw	0
  5073  002746  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5074  002748  0E00               	movlw	0
  5075  00274A  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5076  00274C  0E40               	movlw	64
  5077  00274E  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5078  002750  C1F6  F090         	movff	_raggio,___flmul@f1	;volatile
  5079  002754  C1F7  F091         	movff	_raggio+1,___flmul@f1+1	;volatile
  5080  002758  C1F8  F092         	movff	_raggio+2,___flmul@f1+2	;volatile
  5081  00275C  C1F9  F093         	movff	_raggio+3,___flmul@f1+3	;volatile
  5082  002760  EC4E  F027         	call	___flmul	;wreg free
  5083  002764  C090  F09F         	movff	?___flmul,___fladd@f1
  5084  002768  C091  F0A0         	movff	?___flmul+1,___fladd@f1+1
  5085  00276C  C092  F0A1         	movff	?___flmul+2,___fladd@f1+2
  5086  002770  C093  F0A2         	movff	?___flmul+3,___fladd@f1+3
  5087  002774  EC1F  F020         	call	___fladd	;wreg free
  5088  002778  C09F  F1CA         	movff	?___fladd,_matematica$3669
  5089  00277C  C0A0  F1CB         	movff	?___fladd+1,_matematica$3669+1
  5090  002780  C0A1  F1CC         	movff	?___fladd+2,_matematica$3669+2
  5091  002784  C0A2  F1CD         	movff	?___fladd+3,_matematica$3669+3
  5092                           
  5093                           ;parcheggio.c: 505: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  5094  002788  0E00               	movlw	0
  5095  00278A  0100               	movlb	0	; () banked
  5096  00278C  6F85               	movwf	___fldiv@f2& (0+255),b
  5097  00278E  0E00               	movlw	0
  5098  002790  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5099  002792  0E00               	movlw	0
  5100  002794  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5101  002796  0E40               	movlw	64
  5102  002798  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5103  00279A  C1F2  F081         	movff	_larghezza,___fldiv@f1	;volatile
  5104  00279E  C1F3  F082         	movff	_larghezza+1,___fldiv@f1+1	;volatile
  5105  0027A2  C1F4  F083         	movff	_larghezza+2,___fldiv@f1+2	;volatile
  5106  0027A6  C1F5  F084         	movff	_larghezza+3,___fldiv@f1+3	;volatile
  5107  0027AA  EC00  F028         	call	___fldiv	;wreg free
  5108  0027AE  C081  F0AB         	movff	?___fldiv,___flneg@f1
  5109  0027B2  C082  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  5110  0027B6  C083  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  5111  0027BA  C084  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  5112  0027BE  EC4A  F02E         	call	___flneg	;wreg free
  5113  0027C2  C0AB  F0A3         	movff	?___flneg,___fladd@f2
  5114  0027C6  C0AC  F0A4         	movff	?___flneg+1,___fladd@f2+1
  5115  0027CA  C0AD  F0A5         	movff	?___flneg+2,___fladd@f2+2
  5116  0027CE  C0AE  F0A6         	movff	?___flneg+3,___fladd@f2+3
  5117  0027D2  C1CA  F09F         	movff	_matematica$3669,___fladd@f1
  5118  0027D6  C1CB  F0A0         	movff	_matematica$3669+1,___fladd@f1+1
  5119  0027DA  C1CC  F0A1         	movff	_matematica$3669+2,___fladd@f1+2
  5120  0027DE  C1CD  F0A2         	movff	_matematica$3669+3,___fladd@f1+3
  5121  0027E2  EC1F  F020         	call	___fladd	;wreg free
  5122  0027E6  C09F  F1CE         	movff	?___fladd,_matematica$3670
  5123  0027EA  C0A0  F1CF         	movff	?___fladd+1,_matematica$3670+1
  5124  0027EE  C0A1  F1D0         	movff	?___fladd+2,_matematica$3670+2
  5125  0027F2  C0A2  F1D1         	movff	?___fladd+3,_matematica$3670+3
  5126                           
  5127                           ;parcheggio.c: 505: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  5128  0027F6  C1CE  F081         	movff	_matematica$3670,___fldiv@f1
  5129  0027FA  C1CF  F082         	movff	_matematica$3670+1,___fldiv@f1+1
  5130  0027FE  C1D0  F083         	movff	_matematica$3670+2,___fldiv@f1+2
  5131  002802  C1D1  F084         	movff	_matematica$3670+3,___fldiv@f1+3
  5132  002806  0E00               	movlw	0
  5133  002808  0100               	movlb	0	; () banked
  5134  00280A  6F94               	movwf	___flmul@f2& (0+255),b
  5135  00280C  0E00               	movlw	0
  5136  00280E  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5137  002810  0E00               	movlw	0
  5138  002812  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5139  002814  0E40               	movlw	64
  5140  002816  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5141  002818  C1F6  F090         	movff	_raggio,___flmul@f1	;volatile
  5142  00281C  C1F7  F091         	movff	_raggio+1,___flmul@f1+1	;volatile
  5143  002820  C1F8  F092         	movff	_raggio+2,___flmul@f1+2	;volatile
  5144  002824  C1F9  F093         	movff	_raggio+3,___flmul@f1+3	;volatile
  5145  002828  EC4E  F027         	call	___flmul	;wreg free
  5146  00282C  C090  F085         	movff	?___flmul,___fldiv@f2
  5147  002830  C091  F086         	movff	?___flmul+1,___fldiv@f2+1
  5148  002834  C092  F087         	movff	?___flmul+2,___fldiv@f2+2
  5149  002838  C093  F088         	movff	?___flmul+3,___fldiv@f2+3
  5150  00283C  EC00  F028         	call	___fldiv	;wreg free
  5151  002840  C081  F1D2         	movff	?___fldiv,_matematica$3671
  5152  002844  C082  F1D3         	movff	?___fldiv+1,_matematica$3671+1
  5153  002848  C083  F1D4         	movff	?___fldiv+2,_matematica$3671+2
  5154  00284C  C084  F1D5         	movff	?___fldiv+3,_matematica$3671+3
  5155                           
  5156                           ;parcheggio.c: 505: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  5157  002850  C1D2  F1A2         	movff	_matematica$3671,asin@x
  5158  002854  C1D3  F1A3         	movff	_matematica$3671+1,asin@x+1
  5159  002858  C1D4  F1A4         	movff	_matematica$3671+2,asin@x+2
  5160  00285C  C1D5  F1A5         	movff	_matematica$3671+3,asin@x+3
  5161  002860  ECFF  F01C         	call	_asin	;wreg free
  5162  002864  C1A2  F124         	movff	?_asin,_alfa	;volatile
  5163  002868  C1A3  F125         	movff	?_asin+1,_alfa+1	;volatile
  5164  00286C  C1A4  F126         	movff	?_asin+2,_alfa+2	;volatile
  5165  002870  C1A5  F127         	movff	?_asin+3,_alfa+3	;volatile
  5166                           
  5167                           ;parcheggio.c: 506: alfa = alfa / 3.14159265358979323846 * 180;
  5168  002874  0EDB               	movlw	219
  5169  002876  0100               	movlb	0	; () banked
  5170  002878  6F85               	movwf	___fldiv@f2& (0+255),b
  5171  00287A  0E0F               	movlw	15
  5172  00287C  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5173  00287E  0E49               	movlw	73
  5174  002880  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5175  002882  0E40               	movlw	64
  5176  002884  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5177  002886  C124  F081         	movff	_alfa,___fldiv@f1	;volatile
  5178  00288A  C125  F082         	movff	_alfa+1,___fldiv@f1+1	;volatile
  5179  00288E  C126  F083         	movff	_alfa+2,___fldiv@f1+2	;volatile
  5180  002892  C127  F084         	movff	_alfa+3,___fldiv@f1+3	;volatile
  5181  002896  EC00  F028         	call	___fldiv	;wreg free
  5182  00289A  C081  F090         	movff	?___fldiv,___flmul@f1
  5183  00289E  C082  F091         	movff	?___fldiv+1,___flmul@f1+1
  5184  0028A2  C083  F092         	movff	?___fldiv+2,___flmul@f1+2
  5185  0028A6  C084  F093         	movff	?___fldiv+3,___flmul@f1+3
  5186  0028AA  0E00               	movlw	0
  5187  0028AC  0100               	movlb	0	; () banked
  5188  0028AE  6F94               	movwf	___flmul@f2& (0+255),b
  5189  0028B0  0E00               	movlw	0
  5190  0028B2  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5191  0028B4  0E34               	movlw	52
  5192  0028B6  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5193  0028B8  0E43               	movlw	67
  5194  0028BA  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5195  0028BC  EC4E  F027         	call	___flmul	;wreg free
  5196  0028C0  C090  F124         	movff	?___flmul,_alfa	;volatile
  5197  0028C4  C091  F125         	movff	?___flmul+1,_alfa+1	;volatile
  5198  0028C8  C092  F126         	movff	?___flmul+2,_alfa+2	;volatile
  5199  0028CC  C093  F127         	movff	?___flmul+3,_alfa+3	;volatile
  5200                           
  5201                           ;parcheggio.c: 507: beta = 90 - alfa;
  5202  0028D0  C124  F0AB         	movff	_alfa,___flneg@f1	;volatile
  5203  0028D4  C125  F0AC         	movff	_alfa+1,___flneg@f1+1	;volatile
  5204  0028D8  C126  F0AD         	movff	_alfa+2,___flneg@f1+2	;volatile
  5205  0028DC  C127  F0AE         	movff	_alfa+3,___flneg@f1+3	;volatile
  5206  0028E0  EC4A  F02E         	call	___flneg	;wreg free
  5207  0028E4  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5208  0028E8  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5209  0028EC  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5210  0028F0  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5211  0028F4  0E00               	movlw	0
  5212  0028F6  0100               	movlb	0	; () banked
  5213  0028F8  6FA3               	movwf	___fladd@f2& (0+255),b
  5214  0028FA  0E00               	movlw	0
  5215  0028FC  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5216  0028FE  0EB4               	movlw	180
  5217  002900  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5218  002902  0E42               	movlw	66
  5219  002904  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5220  002906  EC1F  F020         	call	___fladd	;wreg free
  5221  00290A  C09F  F128         	movff	?___fladd,_beta	;volatile
  5222  00290E  C0A0  F129         	movff	?___fladd+1,_beta+1	;volatile
  5223  002912  C0A1  F12A         	movff	?___fladd+2,_beta+2	;volatile
  5224  002916  C0A2  F12B         	movff	?___fladd+3,_beta+3	;volatile
  5225                           
  5226                           ;parcheggio.c: 508: alfa = (alfa * 3.14159265358979323846) / 180;
  5227  00291A  0EDB               	movlw	219
  5228  00291C  0100               	movlb	0	; () banked
  5229  00291E  6F94               	movwf	___flmul@f2& (0+255),b
  5230  002920  0E0F               	movlw	15
  5231  002922  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5232  002924  0E49               	movlw	73
  5233  002926  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5234  002928  0E40               	movlw	64
  5235  00292A  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5236  00292C  C124  F090         	movff	_alfa,___flmul@f1	;volatile
  5237  002930  C125  F091         	movff	_alfa+1,___flmul@f1+1	;volatile
  5238  002934  C126  F092         	movff	_alfa+2,___flmul@f1+2	;volatile
  5239  002938  C127  F093         	movff	_alfa+3,___flmul@f1+3	;volatile
  5240  00293C  EC4E  F027         	call	___flmul	;wreg free
  5241  002940  C090  F081         	movff	?___flmul,___fldiv@f1
  5242  002944  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5243  002948  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5244  00294C  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5245  002950  0E00               	movlw	0
  5246  002952  0100               	movlb	0	; () banked
  5247  002954  6F85               	movwf	___fldiv@f2& (0+255),b
  5248  002956  0E00               	movlw	0
  5249  002958  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5250  00295A  0E34               	movlw	52
  5251  00295C  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5252  00295E  0E43               	movlw	67
  5253  002960  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5254  002962  EC00  F028         	call	___fldiv	;wreg free
  5255  002966  C081  F124         	movff	?___fldiv,_alfa	;volatile
  5256  00296A  C082  F125         	movff	?___fldiv+1,_alfa+1	;volatile
  5257  00296E  C083  F126         	movff	?___fldiv+2,_alfa+2	;volatile
  5258  002972  C084  F127         	movff	?___fldiv+3,_alfa+3	;volatile
  5259                           
  5260                           ;parcheggio.c: 509: n = cos(alfa);
  5261  002976  C124  F1BE         	movff	_alfa,cos@f	;volatile
  5262  00297A  C125  F1BF         	movff	_alfa+1,cos@f+1	;volatile
  5263  00297E  C126  F1C0         	movff	_alfa+2,cos@f+2	;volatile
  5264  002982  C127  F1C1         	movff	_alfa+3,cos@f+3	;volatile
  5265  002986  ECCB  F02B         	call	_cos	;wreg free
  5266  00298A  C1BE  F130         	movff	?_cos,_n	;volatile
  5267  00298E  C1BF  F131         	movff	?_cos+1,_n+1	;volatile
  5268  002992  C1C0  F132         	movff	?_cos+2,_n+2	;volatile
  5269  002996  C1C1  F133         	movff	?_cos+3,_n+3	;volatile
  5270                           
  5271                           ;parcheggio.c: 510: n = 2 * raggio *n;
  5272  00299A  C130  F094         	movff	_n,___flmul@f2	;volatile
  5273  00299E  C131  F095         	movff	_n+1,___flmul@f2+1	;volatile
  5274  0029A2  C132  F096         	movff	_n+2,___flmul@f2+2	;volatile
  5275  0029A6  C133  F097         	movff	_n+3,___flmul@f2+3	;volatile
  5276  0029AA  C1F6  F090         	movff	_raggio,___flmul@f1	;volatile
  5277  0029AE  C1F7  F091         	movff	_raggio+1,___flmul@f1+1	;volatile
  5278  0029B2  C1F8  F092         	movff	_raggio+2,___flmul@f1+2	;volatile
  5279  0029B6  C1F9  F093         	movff	_raggio+3,___flmul@f1+3	;volatile
  5280  0029BA  EC4E  F027         	call	___flmul	;wreg free
  5281  0029BE  C090  F1DE         	movff	?___flmul,_matematica$3672
  5282  0029C2  C091  F1DF         	movff	?___flmul+1,_matematica$3672+1
  5283  0029C6  C092  F1E0         	movff	?___flmul+2,_matematica$3672+2
  5284  0029CA  C093  F1E1         	movff	?___flmul+3,_matematica$3672+3
  5285                           
  5286                           ;parcheggio.c: 510: n = 2 * raggio *n;
  5287  0029CE  C1DE  F090         	movff	_matematica$3672,___flmul@f1
  5288  0029D2  C1DF  F091         	movff	_matematica$3672+1,___flmul@f1+1
  5289  0029D6  C1E0  F092         	movff	_matematica$3672+2,___flmul@f1+2
  5290  0029DA  C1E1  F093         	movff	_matematica$3672+3,___flmul@f1+3
  5291  0029DE  0E00               	movlw	0
  5292  0029E0  0100               	movlb	0	; () banked
  5293  0029E2  6F94               	movwf	___flmul@f2& (0+255),b
  5294  0029E4  0E00               	movlw	0
  5295  0029E6  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5296  0029E8  0E00               	movlw	0
  5297  0029EA  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5298  0029EC  0E40               	movlw	64
  5299  0029EE  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5300  0029F0  EC4E  F027         	call	___flmul	;wreg free
  5301  0029F4  C090  F130         	movff	?___flmul,_n	;volatile
  5302  0029F8  C091  F131         	movff	?___flmul+1,_n+1	;volatile
  5303  0029FC  C092  F132         	movff	?___flmul+2,_n+2	;volatile
  5304  002A00  C093  F133         	movff	?___flmul+3,_n+3	;volatile
  5305                           
  5306                           ;parcheggio.c: 511: prima_sterzata = 2 * 3.14159265358979323846 * raggio * beta / 360;
  5307  002A04  C128  F094         	movff	_beta,___flmul@f2	;volatile
  5308  002A08  C129  F095         	movff	_beta+1,___flmul@f2+1	;volatile
  5309  002A0C  C12A  F096         	movff	_beta+2,___flmul@f2+2	;volatile
  5310  002A10  C12B  F097         	movff	_beta+3,___flmul@f2+3	;volatile
  5311  002A14  C1F6  F090         	movff	_raggio,___flmul@f1	;volatile
  5312  002A18  C1F7  F091         	movff	_raggio+1,___flmul@f1+1	;volatile
  5313  002A1C  C1F8  F092         	movff	_raggio+2,___flmul@f1+2	;volatile
  5314  002A20  C1F9  F093         	movff	_raggio+3,___flmul@f1+3	;volatile
  5315  002A24  EC4E  F027         	call	___flmul	;wreg free
  5316  002A28  C090  F1DE         	movff	?___flmul,_matematica$3672
  5317  002A2C  C091  F1DF         	movff	?___flmul+1,_matematica$3672+1
  5318  002A30  C092  F1E0         	movff	?___flmul+2,_matematica$3672+2
  5319  002A34  C093  F1E1         	movff	?___flmul+3,_matematica$3672+3
  5320                           
  5321                           ;parcheggio.c: 511: prima_sterzata = 2 * 3.14159265358979323846 * raggio * beta / 360;
  5322  002A38  0EDB               	movlw	219
  5323  002A3A  0100               	movlb	0	; () banked
  5324  002A3C  6F94               	movwf	___flmul@f2& (0+255),b
  5325  002A3E  0E0F               	movlw	15
  5326  002A40  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5327  002A42  0EC9               	movlw	201
  5328  002A44  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5329  002A46  0E40               	movlw	64
  5330  002A48  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5331  002A4A  C1DE  F090         	movff	_matematica$3672,___flmul@f1
  5332  002A4E  C1DF  F091         	movff	_matematica$3672+1,___flmul@f1+1
  5333  002A52  C1E0  F092         	movff	_matematica$3672+2,___flmul@f1+2
  5334  002A56  C1E1  F093         	movff	_matematica$3672+3,___flmul@f1+3
  5335  002A5A  EC4E  F027         	call	___flmul	;wreg free
  5336  002A5E  C090  F081         	movff	?___flmul,___fldiv@f1
  5337  002A62  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5338  002A66  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5339  002A6A  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5340  002A6E  0E00               	movlw	0
  5341  002A70  0100               	movlb	0	; () banked
  5342  002A72  6F85               	movwf	___fldiv@f2& (0+255),b
  5343  002A74  0E00               	movlw	0
  5344  002A76  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5345  002A78  0EB4               	movlw	180
  5346  002A7A  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5347  002A7C  0E43               	movlw	67
  5348  002A7E  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5349  002A80  EC00  F028         	call	___fldiv	;wreg free
  5350  002A84  C081  F138         	movff	?___fldiv,_prima_sterzata	;volatile
  5351  002A88  C082  F139         	movff	?___fldiv+1,_prima_sterzata+1	;volatile
  5352  002A8C  C083  F13A         	movff	?___fldiv+2,_prima_sterzata+2	;volatile
  5353  002A90  C084  F13B         	movff	?___fldiv+3,_prima_sterzata+3	;volatile
  5354                           
  5355                           ;parcheggio.c: 512: K_var = raggio + (2 * larghezza / 3);
  5356  002A94  0E00               	movlw	0
  5357  002A96  0100               	movlb	0	; () banked
  5358  002A98  6F85               	movwf	___fldiv@f2& (0+255),b
  5359  002A9A  0E00               	movlw	0
  5360  002A9C  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5361  002A9E  0E40               	movlw	64
  5362  002AA0  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5363  002AA2  0E40               	movlw	64
  5364  002AA4  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5365  002AA6  0E00               	movlw	0
  5366  002AA8  0100               	movlb	0	; () banked
  5367  002AAA  6F94               	movwf	___flmul@f2& (0+255),b
  5368  002AAC  0E00               	movlw	0
  5369  002AAE  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5370  002AB0  0E00               	movlw	0
  5371  002AB2  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5372  002AB4  0E40               	movlw	64
  5373  002AB6  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5374  002AB8  C1F2  F090         	movff	_larghezza,___flmul@f1	;volatile
  5375  002ABC  C1F3  F091         	movff	_larghezza+1,___flmul@f1+1	;volatile
  5376  002AC0  C1F4  F092         	movff	_larghezza+2,___flmul@f1+2	;volatile
  5377  002AC4  C1F5  F093         	movff	_larghezza+3,___flmul@f1+3	;volatile
  5378  002AC8  EC4E  F027         	call	___flmul	;wreg free
  5379  002ACC  C090  F081         	movff	?___flmul,___fldiv@f1
  5380  002AD0  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5381  002AD4  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5382  002AD8  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5383  002ADC  EC00  F028         	call	___fldiv	;wreg free
  5384  002AE0  C081  F09F         	movff	?___fldiv,___fladd@f1
  5385  002AE4  C082  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  5386  002AE8  C083  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  5387  002AEC  C084  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  5388  002AF0  C1F6  F0A3         	movff	_raggio,___fladd@f2	;volatile
  5389  002AF4  C1F7  F0A4         	movff	_raggio+1,___fladd@f2+1	;volatile
  5390  002AF8  C1F8  F0A5         	movff	_raggio+2,___fladd@f2+2	;volatile
  5391  002AFC  C1F9  F0A6         	movff	_raggio+3,___fladd@f2+3	;volatile
  5392  002B00  EC1F  F020         	call	___fladd	;wreg free
  5393  002B04  C09F  F11C         	movff	?___fladd,_K_var	;volatile
  5394  002B08  C0A0  F11D         	movff	?___fladd+1,_K_var+1	;volatile
  5395  002B0C  C0A1  F11E         	movff	?___fladd+2,_K_var+2	;volatile
  5396  002B10  C0A2  F11F         	movff	?___fladd+3,_K_var+3	;volatile
  5397                           
  5398                           ;parcheggio.c: 513: J_var = raggio - (2 * larghezza / 3);
  5399  002B14  0E00               	movlw	0
  5400  002B16  0100               	movlb	0	; () banked
  5401  002B18  6F85               	movwf	___fldiv@f2& (0+255),b
  5402  002B1A  0E00               	movlw	0
  5403  002B1C  6F86               	movwf	(___fldiv@f2+1)& (0+255),b
  5404  002B1E  0E40               	movlw	64
  5405  002B20  6F87               	movwf	(___fldiv@f2+2)& (0+255),b
  5406  002B22  0E40               	movlw	64
  5407  002B24  6F88               	movwf	(___fldiv@f2+3)& (0+255),b
  5408  002B26  0E00               	movlw	0
  5409  002B28  0100               	movlb	0	; () banked
  5410  002B2A  6F94               	movwf	___flmul@f2& (0+255),b
  5411  002B2C  0E00               	movlw	0
  5412  002B2E  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5413  002B30  0E00               	movlw	0
  5414  002B32  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5415  002B34  0E40               	movlw	64
  5416  002B36  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5417  002B38  C1F2  F090         	movff	_larghezza,___flmul@f1	;volatile
  5418  002B3C  C1F3  F091         	movff	_larghezza+1,___flmul@f1+1	;volatile
  5419  002B40  C1F4  F092         	movff	_larghezza+2,___flmul@f1+2	;volatile
  5420  002B44  C1F5  F093         	movff	_larghezza+3,___flmul@f1+3	;volatile
  5421  002B48  EC4E  F027         	call	___flmul	;wreg free
  5422  002B4C  C090  F081         	movff	?___flmul,___fldiv@f1
  5423  002B50  C091  F082         	movff	?___flmul+1,___fldiv@f1+1
  5424  002B54  C092  F083         	movff	?___flmul+2,___fldiv@f1+2
  5425  002B58  C093  F084         	movff	?___flmul+3,___fldiv@f1+3
  5426  002B5C  EC00  F028         	call	___fldiv	;wreg free
  5427  002B60  C081  F0AB         	movff	?___fldiv,___flneg@f1
  5428  002B64  C082  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  5429  002B68  C083  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  5430  002B6C  C084  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  5431  002B70  EC4A  F02E         	call	___flneg	;wreg free
  5432  002B74  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5433  002B78  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5434  002B7C  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5435  002B80  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5436  002B84  C1F6  F0A3         	movff	_raggio,___fladd@f2	;volatile
  5437  002B88  C1F7  F0A4         	movff	_raggio+1,___fladd@f2+1	;volatile
  5438  002B8C  C1F8  F0A5         	movff	_raggio+2,___fladd@f2+2	;volatile
  5439  002B90  C1F9  F0A6         	movff	_raggio+3,___fladd@f2+3	;volatile
  5440  002B94  EC1F  F020         	call	___fladd	;wreg free
  5441  002B98  C09F  F118         	movff	?___fladd,_J_var	;volatile
  5442  002B9C  C0A0  F119         	movff	?___fladd+1,_J_var+1	;volatile
  5443  002BA0  C0A1  F11A         	movff	?___fladd+2,_J_var+2	;volatile
  5444  002BA4  C0A2  F11B         	movff	?___fladd+3,_J_var+3	;volatile
  5445                           
  5446                           ;parcheggio.c: 514: Pmin = K_var * cos(asin((J_var / K_var)));
  5447  002BA8  C11C  F085         	movff	_K_var,___fldiv@f2	;volatile
  5448  002BAC  C11D  F086         	movff	_K_var+1,___fldiv@f2+1	;volatile
  5449  002BB0  C11E  F087         	movff	_K_var+2,___fldiv@f2+2	;volatile
  5450  002BB4  C11F  F088         	movff	_K_var+3,___fldiv@f2+3	;volatile
  5451  002BB8  C118  F081         	movff	_J_var,___fldiv@f1	;volatile
  5452  002BBC  C119  F082         	movff	_J_var+1,___fldiv@f1+1	;volatile
  5453  002BC0  C11A  F083         	movff	_J_var+2,___fldiv@f1+2	;volatile
  5454  002BC4  C11B  F084         	movff	_J_var+3,___fldiv@f1+3	;volatile
  5455  002BC8  EC00  F028         	call	___fldiv	;wreg free
  5456  002BCC  C081  F1D6         	movff	?___fldiv,_matematica$3673
  5457  002BD0  C082  F1D7         	movff	?___fldiv+1,_matematica$3673+1
  5458  002BD4  C083  F1D8         	movff	?___fldiv+2,_matematica$3673+2
  5459  002BD8  C084  F1D9         	movff	?___fldiv+3,_matematica$3673+3
  5460                           
  5461                           ;parcheggio.c: 514: Pmin = K_var * cos(asin((J_var / K_var)));
  5462  002BDC  C1D6  F1A2         	movff	_matematica$3673,asin@x
  5463  002BE0  C1D7  F1A3         	movff	_matematica$3673+1,asin@x+1
  5464  002BE4  C1D8  F1A4         	movff	_matematica$3673+2,asin@x+2
  5465  002BE8  C1D9  F1A5         	movff	_matematica$3673+3,asin@x+3
  5466  002BEC  ECFF  F01C         	call	_asin	;wreg free
  5467  002BF0  C1A2  F1BE         	movff	?_asin,cos@f
  5468  002BF4  C1A3  F1BF         	movff	?_asin+1,cos@f+1
  5469  002BF8  C1A4  F1C0         	movff	?_asin+2,cos@f+2
  5470  002BFC  C1A5  F1C1         	movff	?_asin+3,cos@f+3
  5471  002C00  ECCB  F02B         	call	_cos	;wreg free
  5472  002C04  C1BE  F1DA         	movff	?_cos,_matematica$3674
  5473  002C08  C1BF  F1DB         	movff	?_cos+1,_matematica$3674+1
  5474  002C0C  C1C0  F1DC         	movff	?_cos+2,_matematica$3674+2
  5475  002C10  C1C1  F1DD         	movff	?_cos+3,_matematica$3674+3
  5476                           
  5477                           ;parcheggio.c: 514: Pmin = K_var * cos(asin((J_var / K_var)));
  5478  002C14  C1DA  F090         	movff	_matematica$3674,___flmul@f1
  5479  002C18  C1DB  F091         	movff	_matematica$3674+1,___flmul@f1+1
  5480  002C1C  C1DC  F092         	movff	_matematica$3674+2,___flmul@f1+2
  5481  002C20  C1DD  F093         	movff	_matematica$3674+3,___flmul@f1+3
  5482  002C24  C11C  F094         	movff	_K_var,___flmul@f2	;volatile
  5483  002C28  C11D  F095         	movff	_K_var+1,___flmul@f2+1	;volatile
  5484  002C2C  C11E  F096         	movff	_K_var+2,___flmul@f2+2	;volatile
  5485  002C30  C11F  F097         	movff	_K_var+3,___flmul@f2+3	;volatile
  5486  002C34  EC4E  F027         	call	___flmul	;wreg free
  5487  002C38  C090  F120         	movff	?___flmul,_Pmin	;volatile
  5488  002C3C  C091  F121         	movff	?___flmul+1,_Pmin+1	;volatile
  5489  002C40  C092  F122         	movff	?___flmul+2,_Pmin+2	;volatile
  5490  002C44  C093  F123         	movff	?___flmul+3,_Pmin+3	;volatile
  5491  002C48  0012               	return		;funcret
  5492  002C4A                     __end_of_matematica:
  5493                           	opt stack 0
  5494                           tblptru	equ	0xFF8
  5495                           tblptrh	equ	0xFF7
  5496                           tblptrl	equ	0xFF6
  5497                           tablat	equ	0xFF5
  5498                           postinc0	equ	0xFEE
  5499                           wreg	equ	0xFE8
  5500                           postdec1	equ	0xFE5
  5501                           fsr1l	equ	0xFE1
  5502                           indf2	equ	0xFDF
  5503                           postinc2	equ	0xFDE
  5504                           postdec2	equ	0xFDD
  5505                           fsr2h	equ	0xFDA
  5506                           fsr2l	equ	0xFD9
  5507                           status	equ	0xFD8
  5508                           
  5509 ;; *************** function _cos *****************
  5510 ;; Defined at:
  5511 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\cos.c"
  5512 ;; Parameters:    Size  Location     Type
  5513 ;;  f               4   49[BANK1 ] unsigned char 
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;		None
  5516 ;; Return value:  Size  Location     Type
  5517 ;;                  4   49[BANK1 ] unsigned char 
  5518 ;; Registers used:
  5519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5520 ;; Tracked objects:
  5521 ;;		On entry : 0/0
  5522 ;;		On exit  : 0/0
  5523 ;;		Unchanged: 0/0
  5524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5525 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5526 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5528 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5529 ;;Total ram usage:        8 bytes
  5530 ;; Hardware stack levels used:    1
  5531 ;; Hardware stack levels required when called:    9
  5532 ;; This function calls:
  5533 ;;		___fladd
  5534 ;;		___flge
  5535 ;;		_sin
  5536 ;; This function is called by:
  5537 ;;		_matematica
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           	psect	text10
  5542  005796                     __ptext10:
  5543                           	opt stack 0
  5544  005796                     _cos:
  5545                           	opt stack 19
  5546                           
  5547                           ;incstack = 0
  5548  005796  0EDB               	movlw	219
  5549  005798  0100               	movlb	0	; () banked
  5550  00579A  6FB3               	movwf	___flge@ff1& (0+255),b
  5551  00579C  0E0F               	movlw	15
  5552  00579E  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5553  0057A0  0E49               	movlw	73
  5554  0057A2  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5555  0057A4  0E40               	movlw	64
  5556  0057A6  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5557  0057A8  C1BE  F0B7         	movff	cos@f,___flge@ff2
  5558  0057AC  C1BF  F0B8         	movff	cos@f+1,___flge@ff2+1
  5559  0057B0  C1C0  F0B9         	movff	cos@f+2,___flge@ff2+2
  5560  0057B4  C1C1  F0BA         	movff	cos@f+3,___flge@ff2+3
  5561  0057B8  EC4F  F02B         	call	___flge	;wreg free
  5562  0057BC  0100               	movlb	0	; () banked
  5563  0057BE  B0D8               	btfsc	status,0,c
  5564  0057C0  D02E               	goto	l6474
  5565                           
  5566                           ; BSR set to: 0
  5567  0057C2  C1BE  F09F         	movff	cos@f,___fladd@f1
  5568  0057C6  C1BF  F0A0         	movff	cos@f+1,___fladd@f1+1
  5569  0057CA  C1C0  F0A1         	movff	cos@f+2,___fladd@f1+2
  5570  0057CE  C1C1  F0A2         	movff	cos@f+3,___fladd@f1+3
  5571  0057D2  0EE4               	movlw	228
  5572  0057D4  0100               	movlb	0	; () banked
  5573  0057D6  6FA3               	movwf	___fladd@f2& (0+255),b
  5574  0057D8  0ECB               	movlw	203
  5575  0057DA  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5576  0057DC  0E96               	movlw	150
  5577  0057DE  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5578  0057E0  0EC0               	movlw	192
  5579  0057E2  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5580  0057E4  EC1F  F020         	call	___fladd	;wreg free
  5581  0057E8  C09F  F1C2         	movff	?___fladd,_cos$3679
  5582  0057EC  C0A0  F1C3         	movff	?___fladd+1,_cos$3679+1
  5583  0057F0  C0A1  F1C4         	movff	?___fladd+2,_cos$3679+2
  5584  0057F4  C0A2  F1C5         	movff	?___fladd+3,_cos$3679+3
  5585  0057F8  C1C2  F0D1         	movff	_cos$3679,sin@f
  5586  0057FC  C1C3  F0D2         	movff	_cos$3679+1,sin@f+1
  5587  005800  C1C4  F0D3         	movff	_cos$3679+2,sin@f+2
  5588  005804  C1C5  F0D4         	movff	_cos$3679+3,sin@f+3
  5589  005808  EC91  F01E         	call	_sin	;wreg free
  5590  00580C  C0D1  F1BE         	movff	?_sin,?_cos
  5591  005810  C0D2  F1BF         	movff	?_sin+1,?_cos+1
  5592  005814  C0D3  F1C0         	movff	?_sin+2,?_cos+2
  5593  005818  C0D4  F1C1         	movff	?_sin+3,?_cos+3
  5594  00581C  0012               	return	
  5595  00581E                     l6474:
  5596  00581E  C1BE  F09F         	movff	cos@f,___fladd@f1
  5597  005822  C1BF  F0A0         	movff	cos@f+1,___fladd@f1+1
  5598  005826  C1C0  F0A1         	movff	cos@f+2,___fladd@f1+2
  5599  00582A  C1C1  F0A2         	movff	cos@f+3,___fladd@f1+3
  5600  00582E  0EDB               	movlw	219
  5601  005830  0100               	movlb	0	; () banked
  5602  005832  6FA3               	movwf	___fladd@f2& (0+255),b
  5603  005834  0E0F               	movlw	15
  5604  005836  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5605  005838  0EC9               	movlw	201
  5606  00583A  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5607  00583C  0E3F               	movlw	63
  5608  00583E  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5609  005840  EC1F  F020         	call	___fladd	;wreg free
  5610  005844  C09F  F1C2         	movff	?___fladd,_cos$3679
  5611  005848  C0A0  F1C3         	movff	?___fladd+1,_cos$3679+1
  5612  00584C  C0A1  F1C4         	movff	?___fladd+2,_cos$3679+2
  5613  005850  C0A2  F1C5         	movff	?___fladd+3,_cos$3679+3
  5614  005854  C1C2  F0D1         	movff	_cos$3679,sin@f
  5615  005858  C1C3  F0D2         	movff	_cos$3679+1,sin@f+1
  5616  00585C  C1C4  F0D3         	movff	_cos$3679+2,sin@f+2
  5617  005860  C1C5  F0D4         	movff	_cos$3679+3,sin@f+3
  5618  005864  EC91  F01E         	call	_sin	;wreg free
  5619  005868  C0D1  F1BE         	movff	?_sin,?_cos
  5620  00586C  C0D2  F1BF         	movff	?_sin+1,?_cos+1
  5621  005870  C0D3  F1C0         	movff	?_sin+2,?_cos+2
  5622  005874  C0D4  F1C1         	movff	?_sin+3,?_cos+3
  5623  005878  0012               	return	
  5624  00587A  0012               	return		;funcret
  5625  00587C                     __end_of_cos:
  5626                           	opt stack 0
  5627                           tblptru	equ	0xFF8
  5628                           tblptrh	equ	0xFF7
  5629                           tblptrl	equ	0xFF6
  5630                           tablat	equ	0xFF5
  5631                           postinc0	equ	0xFEE
  5632                           wreg	equ	0xFE8
  5633                           postdec1	equ	0xFE5
  5634                           fsr1l	equ	0xFE1
  5635                           indf2	equ	0xFDF
  5636                           postinc2	equ	0xFDE
  5637                           postdec2	equ	0xFDD
  5638                           fsr2h	equ	0xFDA
  5639                           fsr2l	equ	0xFD9
  5640                           status	equ	0xFD8
  5641                           
  5642 ;; *************** function _sin *****************
  5643 ;; Defined at:
  5644 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sin.c"
  5645 ;; Parameters:    Size  Location     Type
  5646 ;;  f               4  113[BANK0 ] unsigned char 
  5647 ;; Auto vars:     Size  Location     Type
  5648 ;;  x2              4    8[BANK1 ] unsigned char 
  5649 ;;  y               4    0[BANK1 ] unsigned char 
  5650 ;;  sgn             1   12[BANK1 ] unsigned char 
  5651 ;; Return value:  Size  Location     Type
  5652 ;;                  4  113[BANK0 ] unsigned char 
  5653 ;; Registers used:
  5654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/0
  5657 ;;		On exit  : 0/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5660 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5663 ;;      Totals:         0       4      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5664 ;;Total ram usage:       17 bytes
  5665 ;; Hardware stack levels used:    1
  5666 ;; Hardware stack levels required when called:    8
  5667 ;; This function calls:
  5668 ;;		___fladd
  5669 ;;		___fldiv
  5670 ;;		___flge
  5671 ;;		___flmul
  5672 ;;		___flneg
  5673 ;;		___flsub
  5674 ;;		_eval_poly
  5675 ;;		_floor
  5676 ;; This function is called by:
  5677 ;;		_cos
  5678 ;; This function uses a non-reentrant model
  5679 ;;
  5680                           
  5681                           	psect	text11
  5682  003D22                     __ptext11:
  5683                           	opt stack 0
  5684  003D22                     _sin:
  5685                           	opt stack 19
  5686                           
  5687                           ;incstack = 0
  5688  003D22  0E00               	movlw	0
  5689  003D24  0101               	movlb	1	; () banked
  5690  003D26  6F99               	movwf	sin@sgn& (0+255),b
  5691                           
  5692                           ; BSR set to: 1
  5693  003D28  0100               	movlb	0	; () banked
  5694  003D2A  AFD4               	btfss	(sin@f+3)& (0+255),7,b
  5695  003D2C  D016               	goto	l6400
  5696                           
  5697                           ; BSR set to: 0
  5698  003D2E  C0D1  F0AB         	movff	sin@f,___flneg@f1
  5699  003D32  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  5700  003D36  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  5701  003D3A  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  5702  003D3E  EC4A  F02E         	call	___flneg	;wreg free
  5703  003D42  C0AB  F0D1         	movff	?___flneg,sin@f
  5704  003D46  C0AC  F0D2         	movff	?___flneg+1,sin@f+1
  5705  003D4A  C0AD  F0D3         	movff	?___flneg+2,sin@f+2
  5706  003D4E  C0AE  F0D4         	movff	?___flneg+3,sin@f+3
  5707  003D52  0E01               	movlw	1
  5708  003D54  0101               	movlb	1	; () banked
  5709  003D56  6F99               	movwf	sin@sgn& (0+255),b
  5710  003D58  D000               	goto	l6400
  5711  003D5A                     l6400:
  5712  003D5A  C0D1  F090         	movff	sin@f,___flmul@f1
  5713  003D5E  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5714  003D62  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5715  003D66  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5716  003D6A  0E83               	movlw	131
  5717  003D6C  0100               	movlb	0	; () banked
  5718  003D6E  6F94               	movwf	___flmul@f2& (0+255),b
  5719  003D70  0EF9               	movlw	249
  5720  003D72  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5721  003D74  0E22               	movlw	34
  5722  003D76  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5723  003D78  0E3E               	movlw	62
  5724  003D7A  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5725  003D7C  EC4E  F027         	call	___flmul	;wreg free
  5726  003D80  C090  F0D1         	movff	?___flmul,sin@f
  5727  003D84  C091  F0D2         	movff	?___flmul+1,sin@f+1
  5728  003D88  C092  F0D3         	movff	?___flmul+2,sin@f+2
  5729  003D8C  C093  F0D4         	movff	?___flmul+3,sin@f+3
  5730  003D90  C0D1  F0C9         	movff	sin@f,___flsub@f1
  5731  003D94  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  5732  003D98  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  5733  003D9C  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  5734  003DA0  C0D1  F0BF         	movff	sin@f,floor@x
  5735  003DA4  C0D2  F0C0         	movff	sin@f+1,floor@x+1
  5736  003DA8  C0D3  F0C1         	movff	sin@f+2,floor@x+2
  5737  003DAC  C0D4  F0C2         	movff	sin@f+3,floor@x+3
  5738  003DB0  EC9B  F028         	call	_floor	;wreg free
  5739  003DB4  C0BF  F0CD         	movff	?_floor,___flsub@f2
  5740  003DB8  C0C0  F0CE         	movff	?_floor+1,___flsub@f2+1
  5741  003DBC  C0C1  F0CF         	movff	?_floor+2,___flsub@f2+2
  5742  003DC0  C0C2  F0D0         	movff	?_floor+3,___flsub@f2+3
  5743  003DC4  ECA9  F02D         	call	___flsub	;wreg free
  5744  003DC8  C0C9  F0D1         	movff	?___flsub,sin@f
  5745  003DCC  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  5746  003DD0  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  5747  003DD4  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  5748  003DD8  C0D1  F090         	movff	sin@f,___flmul@f1
  5749  003DDC  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5750  003DE0  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5751  003DE4  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5752  003DE8  0E00               	movlw	0
  5753  003DEA  0100               	movlb	0	; () banked
  5754  003DEC  6F94               	movwf	___flmul@f2& (0+255),b
  5755  003DEE  0E00               	movlw	0
  5756  003DF0  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  5757  003DF2  0E80               	movlw	128
  5758  003DF4  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  5759  003DF6  0E40               	movlw	64
  5760  003DF8  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  5761  003DFA  EC4E  F027         	call	___flmul	;wreg free
  5762  003DFE  C090  F0D1         	movff	?___flmul,sin@f
  5763  003E02  C091  F0D2         	movff	?___flmul+1,sin@f+1
  5764  003E06  C092  F0D3         	movff	?___flmul+2,sin@f+2
  5765  003E0A  C093  F0D4         	movff	?___flmul+3,sin@f+3
  5766  003E0E  0E00               	movlw	0
  5767  003E10  0100               	movlb	0	; () banked
  5768  003E12  6FB3               	movwf	___flge@ff1& (0+255),b
  5769  003E14  0E00               	movlw	0
  5770  003E16  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5771  003E18  0E00               	movlw	0
  5772  003E1A  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5773  003E1C  0E40               	movlw	64
  5774  003E1E  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5775  003E20  C0D1  F0B7         	movff	sin@f,___flge@ff2
  5776  003E24  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  5777  003E28  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  5778  003E2C  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  5779  003E30  EC4F  F02B         	call	___flge	;wreg free
  5780  003E34  0100               	movlb	0	; () banked
  5781  003E36  B0D8               	btfsc	status,0,c
  5782  003E38  D026               	goto	l6412
  5783                           
  5784                           ; BSR set to: 0
  5785  003E3A  C0D1  F0C9         	movff	sin@f,___flsub@f1
  5786  003E3E  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  5787  003E42  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  5788  003E46  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  5789  003E4A  0E00               	movlw	0
  5790  003E4C  0100               	movlb	0	; () banked
  5791  003E4E  6FCD               	movwf	___flsub@f2& (0+255),b
  5792  003E50  0E00               	movlw	0
  5793  003E52  6FCE               	movwf	(___flsub@f2+1)& (0+255),b
  5794  003E54  0E00               	movlw	0
  5795  003E56  6FCF               	movwf	(___flsub@f2+2)& (0+255),b
  5796  003E58  0E40               	movlw	64
  5797  003E5A  6FD0               	movwf	(___flsub@f2+3)& (0+255),b
  5798  003E5C  ECA9  F02D         	call	___flsub	;wreg free
  5799  003E60  C0C9  F0D1         	movff	?___flsub,sin@f
  5800  003E64  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  5801  003E68  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  5802  003E6C  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  5803  003E70  0101               	movlb	1	; () banked
  5804  003E72  5199               	movf	sin@sgn& (0+255),w,b
  5805  003E74  0101               	movlb	1	; () banked
  5806  003E76  A4D8               	btfss	status,2,c
  5807  003E78  D002               	goto	u8060
  5808  003E7A  0E01               	movlw	1
  5809  003E7C  D001               	goto	u8070
  5810  003E7E                     u8060:
  5811  003E7E  0E00               	movlw	0
  5812  003E80                     u8070:
  5813  003E80  0101               	movlb	1	; () banked
  5814  003E82  6F99               	movwf	sin@sgn& (0+255),b
  5815  003E84  D000               	goto	l6412
  5816  003E86                     l6412:
  5817  003E86  0E00               	movlw	0
  5818  003E88  0100               	movlb	0	; () banked
  5819  003E8A  6FB3               	movwf	___flge@ff1& (0+255),b
  5820  003E8C  0E00               	movlw	0
  5821  003E8E  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5822  003E90  0E80               	movlw	128
  5823  003E92  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5824  003E94  0E3F               	movlw	63
  5825  003E96  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5826  003E98  C0D1  F0B7         	movff	sin@f,___flge@ff2
  5827  003E9C  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  5828  003EA0  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  5829  003EA4  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  5830  003EA8  EC4F  F02B         	call	___flge	;wreg free
  5831  003EAC  0100               	movlb	0	; () banked
  5832  003EAE  B0D8               	btfsc	status,0,c
  5833  003EB0  D025               	goto	l1470
  5834                           
  5835                           ; BSR set to: 0
  5836  003EB2  C0D1  F0AB         	movff	sin@f,___flneg@f1
  5837  003EB6  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  5838  003EBA  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  5839  003EBE  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  5840  003EC2  EC4A  F02E         	call	___flneg	;wreg free
  5841  003EC6  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5842  003ECA  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5843  003ECE  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5844  003ED2  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5845  003ED6  0E00               	movlw	0
  5846  003ED8  0100               	movlb	0	; () banked
  5847  003EDA  6FA3               	movwf	___fladd@f2& (0+255),b
  5848  003EDC  0E00               	movlw	0
  5849  003EDE  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5850  003EE0  0E00               	movlw	0
  5851  003EE2  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5852  003EE4  0E40               	movlw	64
  5853  003EE6  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5854  003EE8  EC1F  F020         	call	___fladd	;wreg free
  5855  003EEC  C09F  F0D1         	movff	?___fladd,sin@f
  5856  003EF0  C0A0  F0D2         	movff	?___fladd+1,sin@f+1
  5857  003EF4  C0A1  F0D3         	movff	?___fladd+2,sin@f+2
  5858  003EF8  C0A2  F0D4         	movff	?___fladd+3,sin@f+3
  5859  003EFC                     l1470:
  5860  003EFC  C0D1  F090         	movff	sin@f,___flmul@f1
  5861  003F00  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5862  003F04  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5863  003F08  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5864  003F0C  C0D1  F094         	movff	sin@f,___flmul@f2
  5865  003F10  C0D2  F095         	movff	sin@f+1,___flmul@f2+1
  5866  003F14  C0D3  F096         	movff	sin@f+2,___flmul@f2+2
  5867  003F18  C0D4  F097         	movff	sin@f+3,___flmul@f2+3
  5868  003F1C  EC4E  F027         	call	___flmul	;wreg free
  5869  003F20  C090  F195         	movff	?___flmul,sin@x2
  5870  003F24  C091  F196         	movff	?___flmul+1,sin@x2+1
  5871  003F28  C092  F197         	movff	?___flmul+2,sin@x2+2
  5872  003F2C  C093  F198         	movff	?___flmul+3,sin@x2+3
  5873  003F30  C195  F0AB         	movff	sin@x2,eval_poly@x
  5874  003F34  C196  F0AC         	movff	sin@x2+1,eval_poly@x+1
  5875  003F38  C197  F0AD         	movff	sin@x2+2,eval_poly@x+2
  5876  003F3C  C198  F0AE         	movff	sin@x2+3,eval_poly@x+3
  5877  003F40  0E41               	movlw	low sin@coeff_b
  5878  003F42  0100               	movlb	0	; () banked
  5879  003F44  6FAF               	movwf	eval_poly@d& (0+255),b
  5880  003F46  0E0D               	movlw	high sin@coeff_b
  5881  003F48  0100               	movlb	0	; () banked
  5882  003F4A  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  5883  003F4C  0E00               	movlw	0
  5884  003F4E  0100               	movlb	0	; () banked
  5885  003F50  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  5886  003F52  0E03               	movlw	3
  5887  003F54  6FB1               	movwf	eval_poly@n& (0+255),b
  5888  003F56  ECB9  F029         	call	_eval_poly	;wreg free
  5889  003F5A  C0AB  F18D         	movff	?_eval_poly,sin@y
  5890  003F5E  C0AC  F18E         	movff	?_eval_poly+1,sin@y+1
  5891  003F62  C0AD  F18F         	movff	?_eval_poly+2,sin@y+2
  5892  003F66  C0AE  F190         	movff	?_eval_poly+3,sin@y+3
  5893  003F6A  C18D  F085         	movff	sin@y,___fldiv@f2
  5894  003F6E  C18E  F086         	movff	sin@y+1,___fldiv@f2+1
  5895  003F72  C18F  F087         	movff	sin@y+2,___fldiv@f2+2
  5896  003F76  C190  F088         	movff	sin@y+3,___fldiv@f2+3
  5897  003F7A  0E00               	movlw	0
  5898  003F7C  0100               	movlb	0	; () banked
  5899  003F7E  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  5900  003F80  0E04               	movlw	4
  5901  003F82  6FB1               	movwf	eval_poly@n& (0+255),b
  5902  003F84  0E2D               	movlw	low sin@coeff_a
  5903  003F86  0100               	movlb	0	; () banked
  5904  003F88  6FAF               	movwf	eval_poly@d& (0+255),b
  5905  003F8A  0E0D               	movlw	high sin@coeff_a
  5906  003F8C  0100               	movlb	0	; () banked
  5907  003F8E  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  5908  003F90  C195  F0AB         	movff	sin@x2,eval_poly@x
  5909  003F94  C196  F0AC         	movff	sin@x2+1,eval_poly@x+1
  5910  003F98  C197  F0AD         	movff	sin@x2+2,eval_poly@x+2
  5911  003F9C  C198  F0AE         	movff	sin@x2+3,eval_poly@x+3
  5912  003FA0  ECB9  F029         	call	_eval_poly	;wreg free
  5913  003FA4  C0AB  F081         	movff	?_eval_poly,___fldiv@f1
  5914  003FA8  C0AC  F082         	movff	?_eval_poly+1,___fldiv@f1+1
  5915  003FAC  C0AD  F083         	movff	?_eval_poly+2,___fldiv@f1+2
  5916  003FB0  C0AE  F084         	movff	?_eval_poly+3,___fldiv@f1+3
  5917  003FB4  EC00  F028         	call	___fldiv	;wreg free
  5918  003FB8  C081  F191         	movff	?___fldiv,_sin$3680
  5919  003FBC  C082  F192         	movff	?___fldiv+1,_sin$3680+1
  5920  003FC0  C083  F193         	movff	?___fldiv+2,_sin$3680+2
  5921  003FC4  C084  F194         	movff	?___fldiv+3,_sin$3680+3
  5922  003FC8  C0D1  F090         	movff	sin@f,___flmul@f1
  5923  003FCC  C0D2  F091         	movff	sin@f+1,___flmul@f1+1
  5924  003FD0  C0D3  F092         	movff	sin@f+2,___flmul@f1+2
  5925  003FD4  C0D4  F093         	movff	sin@f+3,___flmul@f1+3
  5926  003FD8  C191  F094         	movff	_sin$3680,___flmul@f2
  5927  003FDC  C192  F095         	movff	_sin$3680+1,___flmul@f2+1
  5928  003FE0  C193  F096         	movff	_sin$3680+2,___flmul@f2+2
  5929  003FE4  C194  F097         	movff	_sin$3680+3,___flmul@f2+3
  5930  003FE8  EC4E  F027         	call	___flmul	;wreg free
  5931  003FEC  C090  F0D1         	movff	?___flmul,sin@f
  5932  003FF0  C091  F0D2         	movff	?___flmul+1,sin@f+1
  5933  003FF4  C092  F0D3         	movff	?___flmul+2,sin@f+2
  5934  003FF8  C093  F0D4         	movff	?___flmul+3,sin@f+3
  5935  003FFC  0101               	movlb	1	; () banked
  5936  003FFE  5199               	movf	sin@sgn& (0+255),w,b
  5937  004000  0101               	movlb	1	; () banked
  5938  004002  B4D8               	btfsc	status,2,c
  5939  004004  D013               	goto	l1471
  5940                           
  5941                           ; BSR set to: 1
  5942  004006  C0D1  F0AB         	movff	sin@f,___flneg@f1
  5943  00400A  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  5944  00400E  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  5945  004012  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  5946  004016  EC4A  F02E         	call	___flneg	;wreg free
  5947  00401A  C0AB  F0D1         	movff	?___flneg,?_sin
  5948  00401E  C0AC  F0D2         	movff	?___flneg+1,?_sin+1
  5949  004022  C0AD  F0D3         	movff	?___flneg+2,?_sin+2
  5950  004026  C0AE  F0D4         	movff	?___flneg+3,?_sin+3
  5951  00402A  0012               	return	
  5952  00402C                     l1471:
  5953                           
  5954                           ; BSR set to: 1
  5955  00402C  C0D1  F0D1         	movff	sin@f,?_sin
  5956  004030  C0D2  F0D2         	movff	sin@f+1,?_sin+1
  5957  004034  C0D3  F0D3         	movff	sin@f+2,?_sin+2
  5958  004038  C0D4  F0D4         	movff	sin@f+3,?_sin+3
  5959  00403C  0012               	return		;funcret
  5960  00403E                     __end_of_sin:
  5961                           	opt stack 0
  5962                           tblptru	equ	0xFF8
  5963                           tblptrh	equ	0xFF7
  5964                           tblptrl	equ	0xFF6
  5965                           tablat	equ	0xFF5
  5966                           postinc0	equ	0xFEE
  5967                           wreg	equ	0xFE8
  5968                           postdec1	equ	0xFE5
  5969                           fsr1l	equ	0xFE1
  5970                           indf2	equ	0xFDF
  5971                           postinc2	equ	0xFDE
  5972                           postdec2	equ	0xFDD
  5973                           fsr2h	equ	0xFDA
  5974                           fsr2l	equ	0xFD9
  5975                           status	equ	0xFD8
  5976                           
  5977 ;; *************** function _floor *****************
  5978 ;; Defined at:
  5979 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;  x               4   95[BANK0 ] unsigned char 
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  i               4   99[BANK0 ] unsigned char 
  5984 ;;  expon           2  103[BANK0 ] int 
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  4   95[BANK0 ] int 
  5987 ;; Registers used:
  5988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5994 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5995 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;Total ram usage:       10 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    7
  6001 ;; This function calls:
  6002 ;;		___altofl
  6003 ;;		___fladd
  6004 ;;		___flge
  6005 ;;		___fltol
  6006 ;;		_frexp
  6007 ;; This function is called by:
  6008 ;;		_sin
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text12
  6013  005136                     __ptext12:
  6014                           	opt stack 0
  6015  005136                     _floor:
  6016                           	opt stack 19
  6017                           
  6018                           ;incstack = 0
  6019  005136  C0BF  F077         	movff	floor@x,frexp@value
  6020  00513A  C0C0  F078         	movff	floor@x+1,frexp@value+1
  6021  00513E  C0C1  F079         	movff	floor@x+2,frexp@value+2
  6022  005142  C0C2  F07A         	movff	floor@x+3,frexp@value+3
  6023  005146  0EC7               	movlw	low floor@expon
  6024  005148  0100               	movlb	0	; () banked
  6025  00514A  6F7B               	movwf	frexp@eptr& (0+255),b
  6026  00514C  0E00               	movlw	high floor@expon
  6027  00514E  0100               	movlb	0	; () banked
  6028  005150  6F7C               	movwf	(frexp@eptr+1)& (0+255),b
  6029  005152  ECAC  F02C         	call	_frexp	;wreg free
  6030  005156  0100               	movlb	0	; () banked
  6031  005158  AFC8               	btfss	(floor@expon+1)& (0+255),7,b
  6032  00515A  D017               	goto	l6322
  6033                           
  6034                           ; BSR set to: 0
  6035  00515C  0100               	movlb	0	; () banked
  6036  00515E  AFC2               	btfss	(floor@x+3)& (0+255),7,b
  6037  005160  D00A               	goto	l6318
  6038                           
  6039                           ; BSR set to: 0
  6040  005162  0E00               	movlw	0
  6041  005164  0100               	movlb	0	; () banked
  6042  005166  6FBF               	movwf	?_floor& (0+255),b
  6043  005168  0E00               	movlw	0
  6044  00516A  6FC0               	movwf	(?_floor+1)& (0+255),b
  6045  00516C  0E80               	movlw	128
  6046  00516E  6FC1               	movwf	(?_floor+2)& (0+255),b
  6047  005170  0EBF               	movlw	191
  6048  005172  6FC2               	movwf	(?_floor+3)& (0+255),b
  6049                           
  6050                           ; BSR set to: 0
  6051  005174  0012               	return	
  6052  005176                     l6318:
  6053                           
  6054                           ; BSR set to: 0
  6055  005176  0E00               	movlw	0
  6056  005178  0100               	movlb	0	; () banked
  6057  00517A  6FBF               	movwf	?_floor& (0+255),b
  6058  00517C  0E00               	movlw	0
  6059  00517E  6FC0               	movwf	(?_floor+1)& (0+255),b
  6060  005180  0E00               	movlw	0
  6061  005182  6FC1               	movwf	(?_floor+2)& (0+255),b
  6062  005184  0E00               	movlw	0
  6063  005186  6FC2               	movwf	(?_floor+3)& (0+255),b
  6064                           
  6065                           ; BSR set to: 0
  6066  005188  0012               	return	
  6067  00518A                     l6322:
  6068                           
  6069                           ; BSR set to: 0
  6070  00518A  0100               	movlb	0	; () banked
  6071  00518C  51C8               	movf	(floor@expon+1)& (0+255),w,b
  6072  00518E  E105               	bnz	u7940
  6073  005190  0E1D               	movlw	29
  6074  005192  0100               	movlb	0	; () banked
  6075  005194  5DC7               	subwf	floor@expon& (0+255),w,b
  6076  005196  A0D8               	btfss	status,0,c
  6077  005198  D009               	goto	l6326
  6078  00519A                     u7940:
  6079                           
  6080                           ; BSR set to: 0
  6081  00519A  C0BF  F0BF         	movff	floor@x,?_floor
  6082  00519E  C0C0  F0C0         	movff	floor@x+1,?_floor+1
  6083  0051A2  C0C1  F0C1         	movff	floor@x+2,?_floor+2
  6084  0051A6  C0C2  F0C2         	movff	floor@x+3,?_floor+3
  6085  0051AA  0012               	return	
  6086  0051AC                     l6326:
  6087                           
  6088                           ; BSR set to: 0
  6089  0051AC  C0BF  F0AF         	movff	floor@x,___fltol@f1
  6090  0051B0  C0C0  F0B0         	movff	floor@x+1,___fltol@f1+1
  6091  0051B4  C0C1  F0B1         	movff	floor@x+2,___fltol@f1+2
  6092  0051B8  C0C2  F0B2         	movff	floor@x+3,___fltol@f1+3
  6093  0051BC  EC2C  F029         	call	___fltol	;wreg free
  6094  0051C0  C0AF  F0B9         	movff	?___fltol,___altofl@c
  6095  0051C4  C0B0  F0BA         	movff	?___fltol+1,___altofl@c+1
  6096  0051C8  C0B1  F0BB         	movff	?___fltol+2,___altofl@c+2
  6097  0051CC  C0B2  F0BC         	movff	?___fltol+3,___altofl@c+3
  6098  0051D0  ECD9  F02D         	call	___altofl	;wreg free
  6099  0051D4  C0B9  F0C3         	movff	?___altofl,floor@i
  6100  0051D8  C0BA  F0C4         	movff	?___altofl+1,floor@i+1
  6101  0051DC  C0BB  F0C5         	movff	?___altofl+2,floor@i+2
  6102  0051E0  C0BC  F0C6         	movff	?___altofl+3,floor@i+3
  6103  0051E4  C0BF  F0B3         	movff	floor@x,___flge@ff1
  6104  0051E8  C0C0  F0B4         	movff	floor@x+1,___flge@ff1+1
  6105  0051EC  C0C1  F0B5         	movff	floor@x+2,___flge@ff1+2
  6106  0051F0  C0C2  F0B6         	movff	floor@x+3,___flge@ff1+3
  6107  0051F4  C0C3  F0B7         	movff	floor@i,___flge@ff2
  6108  0051F8  C0C4  F0B8         	movff	floor@i+1,___flge@ff2+1
  6109  0051FC  C0C5  F0B9         	movff	floor@i+2,___flge@ff2+2
  6110  005200  C0C6  F0BA         	movff	floor@i+3,___flge@ff2+3
  6111  005204  EC4F  F02B         	call	___flge	;wreg free
  6112  005208  0100               	movlb	0	; () banked
  6113  00520A  B0D8               	btfsc	status,0,c
  6114  00520C  D01C               	goto	l1490
  6115                           
  6116                           ; BSR set to: 0
  6117  00520E  C0C3  F09F         	movff	floor@i,___fladd@f1
  6118  005212  C0C4  F0A0         	movff	floor@i+1,___fladd@f1+1
  6119  005216  C0C5  F0A1         	movff	floor@i+2,___fladd@f1+2
  6120  00521A  C0C6  F0A2         	movff	floor@i+3,___fladd@f1+3
  6121  00521E  0E00               	movlw	0
  6122  005220  0100               	movlb	0	; () banked
  6123  005222  6FA3               	movwf	___fladd@f2& (0+255),b
  6124  005224  0E00               	movlw	0
  6125  005226  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6126  005228  0E80               	movlw	128
  6127  00522A  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6128  00522C  0EBF               	movlw	191
  6129  00522E  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6130  005230  EC1F  F020         	call	___fladd	;wreg free
  6131  005234  C09F  F0BF         	movff	?___fladd,?_floor
  6132  005238  C0A0  F0C0         	movff	?___fladd+1,?_floor+1
  6133  00523C  C0A1  F0C1         	movff	?___fladd+2,?_floor+2
  6134  005240  C0A2  F0C2         	movff	?___fladd+3,?_floor+3
  6135  005244  0012               	return	
  6136  005246                     l1490:
  6137                           
  6138                           ; BSR set to: 0
  6139  005246  C0C3  F0BF         	movff	floor@i,?_floor
  6140  00524A  C0C4  F0C0         	movff	floor@i+1,?_floor+1
  6141  00524E  C0C5  F0C1         	movff	floor@i+2,?_floor+2
  6142  005252  C0C6  F0C2         	movff	floor@i+3,?_floor+3
  6143  005256  0012               	return		;funcret
  6144  005258                     __end_of_floor:
  6145                           	opt stack 0
  6146                           tblptru	equ	0xFF8
  6147                           tblptrh	equ	0xFF7
  6148                           tblptrl	equ	0xFF6
  6149                           tablat	equ	0xFF5
  6150                           postinc0	equ	0xFEE
  6151                           wreg	equ	0xFE8
  6152                           postdec1	equ	0xFE5
  6153                           fsr1l	equ	0xFE1
  6154                           indf2	equ	0xFDF
  6155                           postinc2	equ	0xFDE
  6156                           postdec2	equ	0xFDD
  6157                           fsr2h	equ	0xFDA
  6158                           fsr2l	equ	0xFD9
  6159                           status	equ	0xFD8
  6160                           
  6161 ;; *************** function _frexp *****************
  6162 ;; Defined at:
  6163 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;  value           4   23[BANK0 ] int 
  6166 ;;  eptr            2   27[BANK0 ] PTR int 
  6167 ;;		 -> floor@expon(2), 
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;		None
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  4   23[BANK0 ] PTR int 
  6172 ;; Registers used:
  6173 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6179 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6181 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;Total ram usage:        8 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    5
  6186 ;; This function calls:
  6187 ;;		Nothing
  6188 ;; This function is called by:
  6189 ;;		_floor
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           	psect	text13
  6194  005958                     __ptext13:
  6195                           	opt stack 0
  6196  005958                     _frexp:
  6197                           	opt stack 20
  6198                           
  6199                           ;incstack = 0
  6200  005958  0100               	movlb	0	; () banked
  6201  00595A  5177               	movf	frexp@value& (0+255),w,b
  6202  00595C  0100               	movlb	0	; () banked
  6203  00595E  1178               	iorwf	(frexp@value+1)& (0+255),w,b
  6204  005960  0100               	movlb	0	; () banked
  6205  005962  1179               	iorwf	(frexp@value+2)& (0+255),w,b
  6206  005964  0100               	movlb	0	; () banked
  6207  005966  117A               	iorwf	(frexp@value+3)& (0+255),w,b
  6208  005968  A4D8               	btfss	status,2,c
  6209  00596A  D009               	goto	l6238
  6210                           
  6211                           ; BSR set to: 0
  6212  00596C  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6213  005970  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6214  005974  0E00               	movlw	0
  6215  005976  6EDE               	movwf	postinc2,c
  6216  005978  0E00               	movlw	0
  6217  00597A  6EDD               	movwf	postdec2,c
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;	Return value of _frexp is never used
  6221  00597C  0012               	return	
  6222  00597E                     l6238:
  6223                           
  6224                           ; BSR set to: 0
  6225  00597E  0100               	movlb	0	; () banked
  6226  005980  517A               	movf	(frexp@value+3)& (0+255),w,b
  6227  005982  0B7F               	andlw	127
  6228  005984  0100               	movlb	0	; () banked
  6229  005986  6F7D               	movwf	??_frexp& (0+255),b
  6230  005988  6B7E               	clrf	(??_frexp+1)& (0+255),b
  6231  00598A  90D8               	bcf	status,0,c
  6232  00598C  0100               	movlb	0	; () banked
  6233  00598E  377D               	rlcf	??_frexp& (0+255),f,b
  6234  005990  377E               	rlcf	(??_frexp+1)& (0+255),f,b
  6235  005992  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6236  005996  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6237  00599A  C07D  FFDE         	movff	??_frexp,postinc2
  6238  00599E  C07E  FFDD         	movff	??_frexp+1,postdec2
  6239  0059A2  0100               	movlb	0	; () banked
  6240  0059A4  AF79               	btfss	(frexp@value+2)& (0+255),7,b
  6241  0059A6  D004               	goto	u7850
  6242  0059A8  0100               	movlb	0	; () banked
  6243  0059AA  6B7D               	clrf	??_frexp& (0+255),b
  6244  0059AC  2B7D               	incf	??_frexp& (0+255),f,b
  6245  0059AE  D002               	goto	u7858
  6246  0059B0                     u7850:
  6247  0059B0  0100               	movlb	0	; () banked
  6248  0059B2  6B7D               	clrf	??_frexp& (0+255),b
  6249  0059B4                     u7858:
  6250  0059B4  0100               	movlb	0	; () banked
  6251  0059B6  517D               	movf	??_frexp& (0+255),w,b
  6252  0059B8  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6253  0059BC  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6254  0059C0  12DE               	iorwf	postinc2,f,c
  6255  0059C2  0E00               	movlw	0
  6256  0059C4  12DD               	iorwf	postdec2,f,c
  6257                           
  6258                           ; BSR set to: 0
  6259  0059C6  C07B  FFD9         	movff	frexp@eptr,fsr2l
  6260  0059CA  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  6261  0059CE  0E82               	movlw	130
  6262  0059D0  26DE               	addwf	postinc2,f,c
  6263  0059D2  0EFF               	movlw	255
  6264  0059D4  22DD               	addwfc	postdec2,f,c
  6265                           
  6266                           ; BSR set to: 0
  6267  0059D6  817A               	bsf	(frexp@value+3)& (0+255),0,b
  6268  0059D8  837A               	bsf	(frexp@value+3)& (0+255),1,b
  6269  0059DA  857A               	bsf	(frexp@value+3)& (0+255),2,b
  6270  0059DC  877A               	bsf	(frexp@value+3)& (0+255),3,b
  6271  0059DE  897A               	bsf	(frexp@value+3)& (0+255),4,b
  6272  0059E0  8B7A               	bsf	(frexp@value+3)& (0+255),5,b
  6273  0059E2  9D7A               	bcf	(frexp@value+3)& (0+255),6,b
  6274                           
  6275                           ; BSR set to: 0
  6276  0059E4  0100               	movlb	0	; () banked
  6277  0059E6  9F79               	bcf	(frexp@value+2)& (0+255),7,b
  6278  0059E8  0012               	return	
  6279                           
  6280                           ; BSR set to: 0
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;	Return value of _frexp is never used
  6284  0059EA  0012               	return		;funcret
  6285  0059EC                     __end_of_frexp:
  6286                           	opt stack 0
  6287                           tblptru	equ	0xFF8
  6288                           tblptrh	equ	0xFF7
  6289                           tblptrl	equ	0xFF6
  6290                           tablat	equ	0xFF5
  6291                           postinc0	equ	0xFEE
  6292                           wreg	equ	0xFE8
  6293                           postdec1	equ	0xFE5
  6294                           fsr1l	equ	0xFE1
  6295                           indf2	equ	0xFDF
  6296                           postinc2	equ	0xFDE
  6297                           postdec2	equ	0xFDD
  6298                           fsr2h	equ	0xFDA
  6299                           fsr2l	equ	0xFD9
  6300                           status	equ	0xFD8
  6301                           
  6302 ;; *************** function ___fltol *****************
  6303 ;; Defined at:
  6304 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;  f1              4   79[BANK0 ] PTR int 
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;  exp1            1   88[BANK0 ] unsigned char 
  6309 ;;  sign1           1   87[BANK0 ] unsigned char 
  6310 ;; Return value:  Size  Location     Type
  6311 ;;                  4   79[BANK0 ] long 
  6312 ;; Registers used:
  6313 ;;		wreg, status,2, status,0
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/0
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6319 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6322 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6323 ;;Total ram usage:       10 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; Hardware stack levels required when called:    5
  6326 ;; This function calls:
  6327 ;;		Nothing
  6328 ;; This function is called by:
  6329 ;;		_park_routine
  6330 ;;		_parallelo
  6331 ;;		_floor
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           	psect	text14
  6336  005258                     __ptext14:
  6337                           	opt stack 0
  6338  005258                     ___fltol:
  6339                           	opt stack 23
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;incstack = 0
  6343  005258  0100               	movlb	0	; () banked
  6344  00525A  35B1               	rlcf	(___fltol@f1+2)& (0+255),w,b
  6345  00525C  35B2               	rlcf	(___fltol@f1+3)& (0+255),w,b
  6346  00525E  0100               	movlb	0	; () banked
  6347  005260  6FB8               	movwf	___fltol@exp1& (0+255),b
  6348  005262  0100               	movlb	0	; () banked
  6349  005264  51B8               	movf	___fltol@exp1& (0+255),w,b
  6350  005266  A4D8               	btfss	status,2,c
  6351  005268  D00A               	goto	l6194
  6352                           
  6353                           ; BSR set to: 0
  6354  00526A  0E00               	movlw	0
  6355  00526C  0100               	movlb	0	; () banked
  6356  00526E  6FAF               	movwf	?___fltol& (0+255),b
  6357  005270  0E00               	movlw	0
  6358  005272  6FB0               	movwf	(?___fltol+1)& (0+255),b
  6359  005274  0E00               	movlw	0
  6360  005276  6FB1               	movwf	(?___fltol+2)& (0+255),b
  6361  005278  0E00               	movlw	0
  6362  00527A  6FB2               	movwf	(?___fltol+3)& (0+255),b
  6363                           
  6364                           ; BSR set to: 0
  6365  00527C  0012               	return	
  6366  00527E                     l6194:
  6367                           
  6368                           ; BSR set to: 0
  6369  00527E  C0AF  F0B3         	movff	___fltol@f1,??___fltol
  6370  005282  C0B0  F0B4         	movff	___fltol@f1+1,??___fltol+1
  6371  005286  C0B1  F0B5         	movff	___fltol@f1+2,??___fltol+2
  6372  00528A  C0B2  F0B6         	movff	___fltol@f1+3,??___fltol+3
  6373  00528E  0E20               	movlw	32
  6374  005290  D006               	goto	u7780
  6375  005292                     u7785:
  6376  005292  0100               	movlb	0	; () banked
  6377  005294  90D8               	bcf	status,0,c
  6378  005296  33B6               	rrcf	(??___fltol+3)& (0+255),f,b
  6379  005298  33B5               	rrcf	(??___fltol+2)& (0+255),f,b
  6380  00529A  33B4               	rrcf	(??___fltol+1)& (0+255),f,b
  6381  00529C  33B3               	rrcf	??___fltol& (0+255),f,b
  6382  00529E                     u7780:
  6383  00529E  2EE8               	decfsz	wreg,f,c
  6384  0052A0  D7F8               	goto	u7785
  6385  0052A2  0100               	movlb	0	; () banked
  6386  0052A4  51B3               	movf	??___fltol& (0+255),w,b
  6387  0052A6  0100               	movlb	0	; () banked
  6388  0052A8  6FB7               	movwf	___fltol@sign1& (0+255),b
  6389                           
  6390                           ; BSR set to: 0
  6391  0052AA  0100               	movlb	0	; () banked
  6392  0052AC  8FB1               	bsf	(___fltol@f1+2)& (0+255),7,b
  6393                           
  6394                           ; BSR set to: 0
  6395  0052AE  0EFF               	movlw	255
  6396  0052B0  0100               	movlb	0	; () banked
  6397  0052B2  17AF               	andwf	___fltol@f1& (0+255),f,b
  6398  0052B4  0EFF               	movlw	255
  6399  0052B6  17B0               	andwf	(___fltol@f1+1)& (0+255),f,b
  6400  0052B8  0EFF               	movlw	255
  6401  0052BA  17B1               	andwf	(___fltol@f1+2)& (0+255),f,b
  6402  0052BC  0E00               	movlw	0
  6403  0052BE  17B2               	andwf	(___fltol@f1+3)& (0+255),f,b
  6404                           
  6405                           ; BSR set to: 0
  6406  0052C0  0E96               	movlw	150
  6407  0052C2  0100               	movlb	0	; () banked
  6408  0052C4  5FB8               	subwf	___fltol@exp1& (0+255),f,b
  6409                           
  6410                           ; BSR set to: 0
  6411  0052C6  0100               	movlb	0	; () banked
  6412  0052C8  AFB8               	btfss	___fltol@exp1& (0+255),7,b
  6413  0052CA  D01B               	goto	l6214
  6414                           
  6415                           ; BSR set to: 0
  6416  0052CC  0100               	movlb	0	; () banked
  6417  0052CE  51B8               	movf	___fltol@exp1& (0+255),w,b
  6418  0052D0  0A80               	xorlw	128
  6419  0052D2  0F97               	addlw	151
  6420  0052D4  B0D8               	btfsc	status,0,c
  6421  0052D6  D00B               	goto	l6210
  6422                           
  6423                           ; BSR set to: 0
  6424  0052D8  0E00               	movlw	0
  6425  0052DA  0100               	movlb	0	; () banked
  6426  0052DC  6FAF               	movwf	?___fltol& (0+255),b
  6427  0052DE  0E00               	movlw	0
  6428  0052E0  6FB0               	movwf	(?___fltol+1)& (0+255),b
  6429  0052E2  0E00               	movlw	0
  6430  0052E4  6FB1               	movwf	(?___fltol+2)& (0+255),b
  6431  0052E6  0E00               	movlw	0
  6432  0052E8  6FB2               	movwf	(?___fltol+3)& (0+255),b
  6433                           
  6434                           ; BSR set to: 0
  6435  0052EA  0012               	return	
  6436                           
  6437                           ; BSR set to: 0
  6438  0052EC  D000               	goto	l6210
  6439  0052EE                     l6210:
  6440                           
  6441                           ; BSR set to: 0
  6442  0052EE  0100               	movlb	0	; () banked
  6443  0052F0  90D8               	bcf	status,0,c
  6444  0052F2  33B2               	rrcf	(___fltol@f1+3)& (0+255),f,b
  6445  0052F4  33B1               	rrcf	(___fltol@f1+2)& (0+255),f,b
  6446  0052F6  33B0               	rrcf	(___fltol@f1+1)& (0+255),f,b
  6447  0052F8  33AF               	rrcf	___fltol@f1& (0+255),f,b
  6448                           
  6449                           ; BSR set to: 0
  6450  0052FA  0100               	movlb	0	; () banked
  6451  0052FC  3FB8               	incfsz	___fltol@exp1& (0+255),f,b
  6452  0052FE  D7F7               	goto	l6210
  6453                           
  6454                           ; BSR set to: 0
  6455  005300  D01F               	goto	l6224
  6456  005302                     l6214:
  6457                           
  6458                           ; BSR set to: 0
  6459  005302  0E1F               	movlw	31
  6460  005304  0100               	movlb	0	; () banked
  6461  005306  65B8               	cpfsgt	___fltol@exp1& (0+255),b
  6462  005308  D014               	goto	l6222
  6463                           
  6464                           ; BSR set to: 0
  6465  00530A  0E00               	movlw	0
  6466  00530C  0100               	movlb	0	; () banked
  6467  00530E  6FAF               	movwf	?___fltol& (0+255),b
  6468  005310  0E00               	movlw	0
  6469  005312  6FB0               	movwf	(?___fltol+1)& (0+255),b
  6470  005314  0E00               	movlw	0
  6471  005316  6FB1               	movwf	(?___fltol+2)& (0+255),b
  6472  005318  0E00               	movlw	0
  6473  00531A  6FB2               	movwf	(?___fltol+3)& (0+255),b
  6474                           
  6475                           ; BSR set to: 0
  6476  00531C  0012               	return	
  6477                           
  6478                           ; BSR set to: 0
  6479  00531E  D009               	goto	l6222
  6480  005320                     l6220:
  6481                           
  6482                           ; BSR set to: 0
  6483  005320  0100               	movlb	0	; () banked
  6484  005322  90D8               	bcf	status,0,c
  6485  005324  37AF               	rlcf	___fltol@f1& (0+255),f,b
  6486  005326  37B0               	rlcf	(___fltol@f1+1)& (0+255),f,b
  6487  005328  37B1               	rlcf	(___fltol@f1+2)& (0+255),f,b
  6488  00532A  37B2               	rlcf	(___fltol@f1+3)& (0+255),f,b
  6489  00532C  0100               	movlb	0	; () banked
  6490  00532E  07B8               	decf	___fltol@exp1& (0+255),f,b
  6491  005330  D000               	goto	l6222
  6492  005332                     l6222:
  6493                           
  6494                           ; BSR set to: 0
  6495  005332  0100               	movlb	0	; () banked
  6496  005334  51B8               	movf	___fltol@exp1& (0+255),w,b
  6497  005336  0100               	movlb	0	; () banked
  6498  005338  B4D8               	btfsc	status,2,c
  6499  00533A  D002               	goto	l6224
  6500  00533C  D7F1               	goto	l6220
  6501                           
  6502                           ; BSR set to: 0
  6503  00533E  D000               	goto	l6224
  6504  005340                     l6224:
  6505                           
  6506                           ; BSR set to: 0
  6507  005340  0100               	movlb	0	; () banked
  6508  005342  51B7               	movf	___fltol@sign1& (0+255),w,b
  6509  005344  0100               	movlb	0	; () banked
  6510  005346  B4D8               	btfsc	status,2,c
  6511  005348  D00A               	goto	l6228
  6512                           
  6513                           ; BSR set to: 0
  6514  00534A  0100               	movlb	0	; () banked
  6515  00534C  1FB2               	comf	(___fltol@f1+3)& (0+255),f,b
  6516  00534E  1FB1               	comf	(___fltol@f1+2)& (0+255),f,b
  6517  005350  1FB0               	comf	(___fltol@f1+1)& (0+255),f,b
  6518  005352  6DAF               	negf	___fltol@f1& (0+255),b
  6519  005354  0E00               	movlw	0
  6520  005356  23B0               	addwfc	(___fltol@f1+1)& (0+255),f,b
  6521  005358  23B1               	addwfc	(___fltol@f1+2)& (0+255),f,b
  6522  00535A  23B2               	addwfc	(___fltol@f1+3)& (0+255),f,b
  6523  00535C  D000               	goto	l6228
  6524  00535E                     l6228:
  6525                           
  6526                           ; BSR set to: 0
  6527  00535E  C0AF  F0AF         	movff	___fltol@f1,?___fltol
  6528  005362  C0B0  F0B0         	movff	___fltol@f1+1,?___fltol+1
  6529  005366  C0B1  F0B1         	movff	___fltol@f1+2,?___fltol+2
  6530  00536A  C0B2  F0B2         	movff	___fltol@f1+3,?___fltol+3
  6531  00536E  0012               	return	
  6532                           
  6533                           ; BSR set to: 0
  6534                           
  6535                           ; BSR set to: 0
  6536  005370  0012               	return		;funcret
  6537  005372                     __end_of___fltol:
  6538                           	opt stack 0
  6539                           tblptru	equ	0xFF8
  6540                           tblptrh	equ	0xFF7
  6541                           tblptrl	equ	0xFF6
  6542                           tablat	equ	0xFF5
  6543                           postinc0	equ	0xFEE
  6544                           wreg	equ	0xFE8
  6545                           postdec1	equ	0xFE5
  6546                           fsr1l	equ	0xFE1
  6547                           indf2	equ	0xFDF
  6548                           postinc2	equ	0xFDE
  6549                           postdec2	equ	0xFDD
  6550                           fsr2h	equ	0xFDA
  6551                           fsr2l	equ	0xFD9
  6552                           status	equ	0xFD8
  6553                           
  6554 ;; *************** function ___altofl *****************
  6555 ;; Defined at:
  6556 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;  c               4   89[BANK0 ] long 
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;  sign            1   93[BANK0 ] unsigned char 
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  4   89[BANK0 ] unsigned char 
  6563 ;; Registers used:
  6564 ;;		wreg, status,2, status,0, cstack
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6570 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;Total ram usage:        5 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:    6
  6577 ;; This function calls:
  6578 ;;		___flpack
  6579 ;; This function is called by:
  6580 ;;		_floor
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           	psect	text15
  6585  005BB2                     __ptext15:
  6586                           	opt stack 0
  6587  005BB2                     ___altofl:
  6588                           	opt stack 19
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;incstack = 0
  6592  005BB2  0E00               	movlw	0
  6593  005BB4  0100               	movlb	0	; () banked
  6594  005BB6  6FBD               	movwf	___altofl@sign& (0+255),b
  6595                           
  6596                           ; BSR set to: 0
  6597  005BB8  0100               	movlb	0	; () banked
  6598  005BBA  AFBC               	btfss	(___altofl@c+3)& (0+255),7,b
  6599  005BBC  D00D               	goto	l6044
  6600                           
  6601                           ; BSR set to: 0
  6602  005BBE  0100               	movlb	0	; () banked
  6603  005BC0  1FBC               	comf	(___altofl@c+3)& (0+255),f,b
  6604  005BC2  1FBB               	comf	(___altofl@c+2)& (0+255),f,b
  6605  005BC4  1FBA               	comf	(___altofl@c+1)& (0+255),f,b
  6606  005BC6  6DB9               	negf	___altofl@c& (0+255),b
  6607  005BC8  0E00               	movlw	0
  6608  005BCA  23BA               	addwfc	(___altofl@c+1)& (0+255),f,b
  6609  005BCC  23BB               	addwfc	(___altofl@c+2)& (0+255),f,b
  6610  005BCE  23BC               	addwfc	(___altofl@c+3)& (0+255),f,b
  6611                           
  6612                           ; BSR set to: 0
  6613  005BD0  0E01               	movlw	1
  6614  005BD2  0100               	movlb	0	; () banked
  6615  005BD4  6FBD               	movwf	___altofl@sign& (0+255),b
  6616  005BD6  D000               	goto	l6044
  6617  005BD8                     l6044:
  6618                           
  6619                           ; BSR set to: 0
  6620  005BD8  C0B9  F077         	movff	___altofl@c,___flpack@arg
  6621  005BDC  C0BA  F078         	movff	___altofl@c+1,___flpack@arg+1
  6622  005BE0  C0BB  F079         	movff	___altofl@c+2,___flpack@arg+2
  6623  005BE4  C0BC  F07A         	movff	___altofl@c+3,___flpack@arg+3
  6624  005BE8  0E96               	movlw	150
  6625  005BEA  0100               	movlb	0	; () banked
  6626  005BEC  6F7B               	movwf	___flpack@exp& (0+255),b
  6627  005BEE  C0BD  F07C         	movff	___altofl@sign,___flpack@sign
  6628  005BF2  EC8E  F026         	call	___flpack	;wreg free
  6629  005BF6  C077  F0B9         	movff	?___flpack,?___altofl
  6630  005BFA  C078  F0BA         	movff	?___flpack+1,?___altofl+1
  6631  005BFE  C079  F0BB         	movff	?___flpack+2,?___altofl+2
  6632  005C02  C07A  F0BC         	movff	?___flpack+3,?___altofl+3
  6633  005C06  0012               	return	
  6634  005C08  0012               	return		;funcret
  6635  005C0A                     __end_of___altofl:
  6636                           	opt stack 0
  6637                           tblptru	equ	0xFF8
  6638                           tblptrh	equ	0xFF7
  6639                           tblptrl	equ	0xFF6
  6640                           tablat	equ	0xFF5
  6641                           postinc0	equ	0xFEE
  6642                           wreg	equ	0xFE8
  6643                           postdec1	equ	0xFE5
  6644                           fsr1l	equ	0xFE1
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           postdec2	equ	0xFDD
  6648                           fsr2h	equ	0xFDA
  6649                           fsr2l	equ	0xFD9
  6650                           status	equ	0xFD8
  6651                           
  6652 ;; *************** function _asin *****************
  6653 ;; Defined at:
  6654 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\asin.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;  x               4   21[BANK1 ] unsigned char 
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;  y               4   41[BANK1 ] unsigned char 
  6659 ;;  sgn             4   25[BANK1 ] unsigned char 
  6660 ;; Return value:  Size  Location     Type
  6661 ;;                  4   21[BANK1 ] unsigned char 
  6662 ;; Registers used:
  6663 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6664 ;; Tracked objects:
  6665 ;;		On entry : 0/0
  6666 ;;		On exit  : 0/0
  6667 ;;		Unchanged: 0/0
  6668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6669 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0
  6671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;      Totals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;Total ram usage:       28 bytes
  6674 ;; Hardware stack levels used:    1
  6675 ;; Hardware stack levels required when called:    9
  6676 ;; This function calls:
  6677 ;;		___fladd
  6678 ;;		___fldiv
  6679 ;;		___flge
  6680 ;;		___flmul
  6681 ;;		___flneg
  6682 ;;		_atan
  6683 ;;		_fabs
  6684 ;;		_sqrt
  6685 ;; This function is called by:
  6686 ;;		_parallelo
  6687 ;;		_matematica
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           	psect	text16
  6692  0039FE                     __ptext16:
  6693                           	opt stack 0
  6694  0039FE                     _asin:
  6695                           	opt stack 19
  6696                           
  6697                           ;incstack = 0
  6698  0039FE  0E00               	movlw	0
  6699  003A00  0100               	movlb	0	; () banked
  6700  003A02  6FB3               	movwf	___flge@ff1& (0+255),b
  6701  003A04  0E00               	movlw	0
  6702  003A06  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6703  003A08  0E80               	movlw	128
  6704  003A0A  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6705  003A0C  0E3F               	movlw	63
  6706  003A0E  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6707  003A10  C1A2  F0AF         	movff	asin@x,fabs@d
  6708  003A14  C1A3  F0B0         	movff	asin@x+1,fabs@d+1
  6709  003A18  C1A4  F0B1         	movff	asin@x+2,fabs@d+2
  6710  003A1C  C1A5  F0B2         	movff	asin@x+3,fabs@d+3
  6711  003A20  EC2B  F02E         	call	_fabs	;wreg free
  6712  003A24  C0AF  F0B7         	movff	?_fabs,___flge@ff2
  6713  003A28  C0B0  F0B8         	movff	?_fabs+1,___flge@ff2+1
  6714  003A2C  C0B1  F0B9         	movff	?_fabs+2,___flge@ff2+2
  6715  003A30  C0B2  F0BA         	movff	?_fabs+3,___flge@ff2+3
  6716  003A34  EC4F  F02B         	call	___flge	;wreg free
  6717  003A38  0100               	movlb	0	; () banked
  6718  003A3A  B0D8               	btfsc	status,0,c
  6719  003A3C  D00F               	goto	l6432
  6720                           
  6721                           ; BSR set to: 0
  6722  003A3E  0E00               	movlw	0
  6723  003A40  0101               	movlb	1	; () banked
  6724  003A42  6F41               	movwf	(_errno+1)& (0+255),b
  6725  003A44  0E21               	movlw	33
  6726  003A46  6F40               	movwf	_errno& (0+255),b
  6727  003A48  0E00               	movlw	0
  6728  003A4A  0101               	movlb	1	; () banked
  6729  003A4C  6FA2               	movwf	?_asin& (0+255),b
  6730  003A4E  0E00               	movlw	0
  6731  003A50  6FA3               	movwf	(?_asin+1)& (0+255),b
  6732  003A52  0E00               	movlw	0
  6733  003A54  6FA4               	movwf	(?_asin+2)& (0+255),b
  6734  003A56  0E00               	movlw	0
  6735  003A58  6FA5               	movwf	(?_asin+3)& (0+255),b
  6736                           
  6737                           ; BSR set to: 1
  6738  003A5A  0012               	return	
  6739  003A5C                     l6432:
  6740  003A5C  0E00               	movlw	0
  6741  003A5E  0101               	movlb	1	; () banked
  6742  003A60  6FA6               	movwf	asin@sgn& (0+255),b
  6743  003A62  0E00               	movlw	0
  6744  003A64  6FA7               	movwf	(asin@sgn+1)& (0+255),b
  6745  003A66  0E80               	movlw	128
  6746  003A68  6FA8               	movwf	(asin@sgn+2)& (0+255),b
  6747  003A6A  0E3F               	movlw	63
  6748  003A6C  6FA9               	movwf	(asin@sgn+3)& (0+255),b
  6749                           
  6750                           ; BSR set to: 1
  6751  003A6E  C1A2  F094         	movff	asin@x,___flmul@f2
  6752  003A72  C1A3  F095         	movff	asin@x+1,___flmul@f2+1
  6753  003A76  C1A4  F096         	movff	asin@x+2,___flmul@f2+2
  6754  003A7A  C1A5  F097         	movff	asin@x+3,___flmul@f2+3
  6755  003A7E  C1A2  F090         	movff	asin@x,___flmul@f1
  6756  003A82  C1A3  F091         	movff	asin@x+1,___flmul@f1+1
  6757  003A86  C1A4  F092         	movff	asin@x+2,___flmul@f1+2
  6758  003A8A  C1A5  F093         	movff	asin@x+3,___flmul@f1+3
  6759  003A8E  EC4E  F027         	call	___flmul	;wreg free
  6760  003A92  C090  F0AB         	movff	?___flmul,___flneg@f1
  6761  003A96  C091  F0AC         	movff	?___flmul+1,___flneg@f1+1
  6762  003A9A  C092  F0AD         	movff	?___flmul+2,___flneg@f1+2
  6763  003A9E  C093  F0AE         	movff	?___flmul+3,___flneg@f1+3
  6764  003AA2  EC4A  F02E         	call	___flneg	;wreg free
  6765  003AA6  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6766  003AAA  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6767  003AAE  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6768  003AB2  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6769  003AB6  0E00               	movlw	0
  6770  003AB8  0100               	movlb	0	; () banked
  6771  003ABA  6FA3               	movwf	___fladd@f2& (0+255),b
  6772  003ABC  0E00               	movlw	0
  6773  003ABE  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6774  003AC0  0E80               	movlw	128
  6775  003AC2  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6776  003AC4  0E3F               	movlw	63
  6777  003AC6  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6778  003AC8  EC1F  F020         	call	___fladd	;wreg free
  6779  003ACC  C09F  F1AA         	movff	?___fladd,_asin$3675
  6780  003AD0  C0A0  F1AB         	movff	?___fladd+1,_asin$3675+1
  6781  003AD4  C0A1  F1AC         	movff	?___fladd+2,_asin$3675+2
  6782  003AD8  C0A2  F1AD         	movff	?___fladd+3,_asin$3675+3
  6783  003ADC  C1AA  F0D1         	movff	_asin$3675,sqrt@y
  6784  003AE0  C1AB  F0D2         	movff	_asin$3675+1,sqrt@y+1
  6785  003AE4  C1AC  F0D3         	movff	_asin$3675+2,sqrt@y+2
  6786  003AE8  C1AD  F0D4         	movff	_asin$3675+3,sqrt@y+3
  6787  003AEC  ECAE  F023         	call	_sqrt	;wreg free
  6788  003AF0  C0D1  F1B6         	movff	?_sqrt,asin@y
  6789  003AF4  C0D2  F1B7         	movff	?_sqrt+1,asin@y+1
  6790  003AF8  C0D3  F1B8         	movff	?_sqrt+2,asin@y+2
  6791  003AFC  C0D4  F1B9         	movff	?_sqrt+3,asin@y+3
  6792  003B00  C1A2  F0AF         	movff	asin@x,fabs@d
  6793  003B04  C1A3  F0B0         	movff	asin@x+1,fabs@d+1
  6794  003B08  C1A4  F0B1         	movff	asin@x+2,fabs@d+2
  6795  003B0C  C1A5  F0B2         	movff	asin@x+3,fabs@d+3
  6796  003B10  EC2B  F02E         	call	_fabs	;wreg free
  6797  003B14  C0AF  F0B3         	movff	?_fabs,___flge@ff1
  6798  003B18  C0B0  F0B4         	movff	?_fabs+1,___flge@ff1+1
  6799  003B1C  C0B1  F0B5         	movff	?_fabs+2,___flge@ff1+2
  6800  003B20  C0B2  F0B6         	movff	?_fabs+3,___flge@ff1+3
  6801  003B24  0E8F               	movlw	143
  6802  003B26  0100               	movlb	0	; () banked
  6803  003B28  6FB7               	movwf	___flge@ff2& (0+255),b
  6804  003B2A  0EC2               	movlw	194
  6805  003B2C  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  6806  003B2E  0E35               	movlw	53
  6807  003B30  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  6808  003B32  0E3F               	movlw	63
  6809  003B34  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  6810  003B36  EC4F  F02B         	call	___flge	;wreg free
  6811  003B3A  0100               	movlb	0	; () banked
  6812  003B3C  B0D8               	btfsc	status,0,c
  6813  003B3E  D02D               	goto	l6446
  6814                           
  6815                           ; BSR set to: 0
  6816  003B40  C1A2  F081         	movff	asin@x,___fldiv@f1
  6817  003B44  C1A3  F082         	movff	asin@x+1,___fldiv@f1+1
  6818  003B48  C1A4  F083         	movff	asin@x+2,___fldiv@f1+2
  6819  003B4C  C1A5  F084         	movff	asin@x+3,___fldiv@f1+3
  6820  003B50  C1B6  F085         	movff	asin@y,___fldiv@f2
  6821  003B54  C1B7  F086         	movff	asin@y+1,___fldiv@f2+1
  6822  003B58  C1B8  F087         	movff	asin@y+2,___fldiv@f2+2
  6823  003B5C  C1B9  F088         	movff	asin@y+3,___fldiv@f2+3
  6824  003B60  EC00  F028         	call	___fldiv	;wreg free
  6825  003B64  C081  F1BA         	movff	?___fldiv,_asin$3676
  6826  003B68  C082  F1BB         	movff	?___fldiv+1,_asin$3676+1
  6827  003B6C  C083  F1BC         	movff	?___fldiv+2,_asin$3676+2
  6828  003B70  C084  F1BD         	movff	?___fldiv+3,_asin$3676+3
  6829  003B74  C1BA  F0BF         	movff	_asin$3676,atan@f
  6830  003B78  C1BB  F0C0         	movff	_asin$3676+1,atan@f+1
  6831  003B7C  C1BC  F0C1         	movff	_asin$3676+2,atan@f+2
  6832  003B80  C1BD  F0C2         	movff	_asin$3676+3,atan@f+3
  6833  003B84  EC83  F022         	call	_atan	;wreg free
  6834  003B88  C0BF  F1A2         	movff	?_atan,?_asin
  6835  003B8C  C0C0  F1A3         	movff	?_atan+1,?_asin+1
  6836  003B90  C0C1  F1A4         	movff	?_atan+2,?_asin+2
  6837  003B94  C0C2  F1A5         	movff	?_atan+3,?_asin+3
  6838  003B98  0012               	return	
  6839  003B9A                     l6446:
  6840  003B9A  0101               	movlb	1	; () banked
  6841  003B9C  AFA5               	btfss	(asin@x+3)& (0+255),7,b
  6842  003B9E  D06E               	goto	l6458
  6843                           
  6844                           ; BSR set to: 1
  6845  003BA0  C1A2  F085         	movff	asin@x,___fldiv@f2
  6846  003BA4  C1A3  F086         	movff	asin@x+1,___fldiv@f2+1
  6847  003BA8  C1A4  F087         	movff	asin@x+2,___fldiv@f2+2
  6848  003BAC  C1A5  F088         	movff	asin@x+3,___fldiv@f2+3
  6849  003BB0  C1B6  F0AB         	movff	asin@y,___flneg@f1
  6850  003BB4  C1B7  F0AC         	movff	asin@y+1,___flneg@f1+1
  6851  003BB8  C1B8  F0AD         	movff	asin@y+2,___flneg@f1+2
  6852  003BBC  C1B9  F0AE         	movff	asin@y+3,___flneg@f1+3
  6853  003BC0  EC4A  F02E         	call	___flneg	;wreg free
  6854  003BC4  C0AB  F081         	movff	?___flneg,___fldiv@f1
  6855  003BC8  C0AC  F082         	movff	?___flneg+1,___fldiv@f1+1
  6856  003BCC  C0AD  F083         	movff	?___flneg+2,___fldiv@f1+2
  6857  003BD0  C0AE  F084         	movff	?___flneg+3,___fldiv@f1+3
  6858  003BD4  EC00  F028         	call	___fldiv	;wreg free
  6859  003BD8  C081  F1BA         	movff	?___fldiv,_asin$3676
  6860  003BDC  C082  F1BB         	movff	?___fldiv+1,_asin$3676+1
  6861  003BE0  C083  F1BC         	movff	?___fldiv+2,_asin$3676+2
  6862  003BE4  C084  F1BD         	movff	?___fldiv+3,_asin$3676+3
  6863  003BE8  C1BA  F0BF         	movff	_asin$3676,atan@f
  6864  003BEC  C1BB  F0C0         	movff	_asin$3676+1,atan@f+1
  6865  003BF0  C1BC  F0C1         	movff	_asin$3676+2,atan@f+2
  6866  003BF4  C1BD  F0C2         	movff	_asin$3676+3,atan@f+3
  6867  003BF8  EC83  F022         	call	_atan	;wreg free
  6868  003BFC  C0BF  F1B2         	movff	?_atan,_asin$3677
  6869  003C00  C0C0  F1B3         	movff	?_atan+1,_asin$3677+1
  6870  003C04  C0C1  F1B4         	movff	?_atan+2,_asin$3677+2
  6871  003C08  C0C2  F1B5         	movff	?_atan+3,_asin$3677+3
  6872  003C0C  0EDB               	movlw	219
  6873  003C0E  0100               	movlb	0	; () banked
  6874  003C10  6FA3               	movwf	___fladd@f2& (0+255),b
  6875  003C12  0E0F               	movlw	15
  6876  003C14  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6877  003C16  0EC9               	movlw	201
  6878  003C18  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6879  003C1A  0E3F               	movlw	63
  6880  003C1C  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6881  003C1E  C1B2  F0AB         	movff	_asin$3677,___flneg@f1
  6882  003C22  C1B3  F0AC         	movff	_asin$3677+1,___flneg@f1+1
  6883  003C26  C1B4  F0AD         	movff	_asin$3677+2,___flneg@f1+2
  6884  003C2A  C1B5  F0AE         	movff	_asin$3677+3,___flneg@f1+3
  6885  003C2E  EC4A  F02E         	call	___flneg	;wreg free
  6886  003C32  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6887  003C36  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6888  003C3A  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6889  003C3E  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6890  003C42  EC1F  F020         	call	___fladd	;wreg free
  6891  003C46  C09F  F1AE         	movff	?___fladd,_asin$3678
  6892  003C4A  C0A0  F1AF         	movff	?___fladd+1,_asin$3678+1
  6893  003C4E  C0A1  F1B0         	movff	?___fladd+2,_asin$3678+2
  6894  003C52  C0A2  F1B1         	movff	?___fladd+3,_asin$3678+3
  6895  003C56  C1AE  F0AB         	movff	_asin$3678,___flneg@f1
  6896  003C5A  C1AF  F0AC         	movff	_asin$3678+1,___flneg@f1+1
  6897  003C5E  C1B0  F0AD         	movff	_asin$3678+2,___flneg@f1+2
  6898  003C62  C1B1  F0AE         	movff	_asin$3678+3,___flneg@f1+3
  6899  003C66  EC4A  F02E         	call	___flneg	;wreg free
  6900  003C6A  C0AB  F1A2         	movff	?___flneg,?_asin
  6901  003C6E  C0AC  F1A3         	movff	?___flneg+1,?_asin+1
  6902  003C72  C0AD  F1A4         	movff	?___flneg+2,?_asin+2
  6903  003C76  C0AE  F1A5         	movff	?___flneg+3,?_asin+3
  6904  003C7A  0012               	return	
  6905  003C7C                     l6458:
  6906  003C7C  C1A2  F085         	movff	asin@x,___fldiv@f2
  6907  003C80  C1A3  F086         	movff	asin@x+1,___fldiv@f2+1
  6908  003C84  C1A4  F087         	movff	asin@x+2,___fldiv@f2+2
  6909  003C88  C1A5  F088         	movff	asin@x+3,___fldiv@f2+3
  6910  003C8C  C1B6  F081         	movff	asin@y,___fldiv@f1
  6911  003C90  C1B7  F082         	movff	asin@y+1,___fldiv@f1+1
  6912  003C94  C1B8  F083         	movff	asin@y+2,___fldiv@f1+2
  6913  003C98  C1B9  F084         	movff	asin@y+3,___fldiv@f1+3
  6914  003C9C  EC00  F028         	call	___fldiv	;wreg free
  6915  003CA0  C081  F1BA         	movff	?___fldiv,_asin$3676
  6916  003CA4  C082  F1BB         	movff	?___fldiv+1,_asin$3676+1
  6917  003CA8  C083  F1BC         	movff	?___fldiv+2,_asin$3676+2
  6918  003CAC  C084  F1BD         	movff	?___fldiv+3,_asin$3676+3
  6919  003CB0  C1BA  F0BF         	movff	_asin$3676,atan@f
  6920  003CB4  C1BB  F0C0         	movff	_asin$3676+1,atan@f+1
  6921  003CB8  C1BC  F0C1         	movff	_asin$3676+2,atan@f+2
  6922  003CBC  C1BD  F0C2         	movff	_asin$3676+3,atan@f+3
  6923  003CC0  EC83  F022         	call	_atan	;wreg free
  6924  003CC4  C0BF  F1B2         	movff	?_atan,_asin$3677
  6925  003CC8  C0C0  F1B3         	movff	?_atan+1,_asin$3677+1
  6926  003CCC  C0C1  F1B4         	movff	?_atan+2,_asin$3677+2
  6927  003CD0  C0C2  F1B5         	movff	?_atan+3,_asin$3677+3
  6928  003CD4  C1B2  F0AB         	movff	_asin$3677,___flneg@f1
  6929  003CD8  C1B3  F0AC         	movff	_asin$3677+1,___flneg@f1+1
  6930  003CDC  C1B4  F0AD         	movff	_asin$3677+2,___flneg@f1+2
  6931  003CE0  C1B5  F0AE         	movff	_asin$3677+3,___flneg@f1+3
  6932  003CE4  EC4A  F02E         	call	___flneg	;wreg free
  6933  003CE8  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6934  003CEC  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6935  003CF0  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6936  003CF4  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6937  003CF8  0EDB               	movlw	219
  6938  003CFA  0100               	movlb	0	; () banked
  6939  003CFC  6FA3               	movwf	___fladd@f2& (0+255),b
  6940  003CFE  0E0F               	movlw	15
  6941  003D00  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6942  003D02  0EC9               	movlw	201
  6943  003D04  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6944  003D06  0E3F               	movlw	63
  6945  003D08  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6946  003D0A  EC1F  F020         	call	___fladd	;wreg free
  6947  003D0E  C09F  F1A2         	movff	?___fladd,?_asin
  6948  003D12  C0A0  F1A3         	movff	?___fladd+1,?_asin+1
  6949  003D16  C0A1  F1A4         	movff	?___fladd+2,?_asin+2
  6950  003D1A  C0A2  F1A5         	movff	?___fladd+3,?_asin+3
  6951  003D1E  0012               	return	
  6952  003D20  0012               	return		;funcret
  6953  003D22                     __end_of_asin:
  6954                           	opt stack 0
  6955                           tblptru	equ	0xFF8
  6956                           tblptrh	equ	0xFF7
  6957                           tblptrl	equ	0xFF6
  6958                           tablat	equ	0xFF5
  6959                           postinc0	equ	0xFEE
  6960                           wreg	equ	0xFE8
  6961                           postdec1	equ	0xFE5
  6962                           fsr1l	equ	0xFE1
  6963                           indf2	equ	0xFDF
  6964                           postinc2	equ	0xFDE
  6965                           postdec2	equ	0xFDD
  6966                           fsr2h	equ	0xFDA
  6967                           fsr2l	equ	0xFD9
  6968                           status	equ	0xFD8
  6969                           
  6970 ;; *************** function _sqrt *****************
  6971 ;; Defined at:
  6972 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;  y               4  113[BANK0 ] unsigned char 
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;  x               4   17[BANK1 ] unsigned char 
  6977 ;;  q               4   13[BANK1 ] unsigned char 
  6978 ;;  z               4    8[BANK1 ] unsigned char 
  6979 ;;  og              4    4[BANK1 ] unsigned char 
  6980 ;;  i               1   12[BANK1 ] unsigned char 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;                  4  113[BANK0 ] unsigned char 
  6983 ;; Registers used:
  6984 ;;		wreg, status,2, status,0, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6990 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6991 ;;      Locals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Totals:         0       4      21       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;Total ram usage:       25 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:    8
  6997 ;; This function calls:
  6998 ;;		___flge
  6999 ;;		___flmul
  7000 ;;		___flsub
  7001 ;; This function is called by:
  7002 ;;		_parallelo
  7003 ;;		_asin
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           	psect	text17
  7008  00475C                     __ptext17:
  7009                           	opt stack 0
  7010  00475C                     _sqrt:
  7011                           	opt stack 20
  7012                           
  7013                           ;incstack = 0
  7014  00475C  0E00               	movlw	0
  7015  00475E  0100               	movlb	0	; () banked
  7016  004760  6FB3               	movwf	___flge@ff1& (0+255),b
  7017  004762  0E00               	movlw	0
  7018  004764  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  7019  004766  0E00               	movlw	0
  7020  004768  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  7021  00476A  0E00               	movlw	0
  7022  00476C  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  7023  00476E  C0D1  F0B7         	movff	sqrt@y,___flge@ff2
  7024  004772  C0D2  F0B8         	movff	sqrt@y+1,___flge@ff2+1
  7025  004776  C0D3  F0B9         	movff	sqrt@y+2,___flge@ff2+2
  7026  00477A  C0D4  F0BA         	movff	sqrt@y+3,___flge@ff2+3
  7027  00477E  EC4F  F02B         	call	___flge	;wreg free
  7028  004782  0100               	movlb	0	; () banked
  7029  004784  A0D8               	btfss	status,0,c
  7030  004786  D012               	goto	l1477
  7031                           
  7032                           ; BSR set to: 0
  7033  004788  0100               	movlb	0	; () banked
  7034  00478A  AFD4               	btfss	(sqrt@y+3)& (0+255),7,b
  7035  00478C  D005               	goto	l1478
  7036                           
  7037                           ; BSR set to: 0
  7038  00478E  0E00               	movlw	0
  7039  004790  0101               	movlb	1	; () banked
  7040  004792  6F41               	movwf	(_errno+1)& (0+255),b
  7041  004794  0E21               	movlw	33
  7042  004796  6F40               	movwf	_errno& (0+255),b
  7043  004798                     l1478:
  7044  004798  0E00               	movlw	0
  7045  00479A  0100               	movlb	0	; () banked
  7046  00479C  6FD1               	movwf	?_sqrt& (0+255),b
  7047  00479E  0E00               	movlw	0
  7048  0047A0  6FD2               	movwf	(?_sqrt+1)& (0+255),b
  7049  0047A2  0E00               	movlw	0
  7050  0047A4  6FD3               	movwf	(?_sqrt+2)& (0+255),b
  7051  0047A6  0E00               	movlw	0
  7052  0047A8  6FD4               	movwf	(?_sqrt+3)& (0+255),b
  7053                           
  7054                           ; BSR set to: 0
  7055  0047AA  0012               	return	
  7056  0047AC                     l1477:
  7057                           
  7058                           ; BSR set to: 0
  7059  0047AC  C0D1  F195         	movff	sqrt@y,sqrt@z
  7060  0047B0  C0D2  F196         	movff	sqrt@y+1,sqrt@z+1
  7061  0047B4  C0D3  F197         	movff	sqrt@y+2,sqrt@z+2
  7062  0047B8  C0D4  F198         	movff	sqrt@y+3,sqrt@z+3
  7063                           
  7064                           ; BSR set to: 0
  7065  0047BC  C0D1  F18D         	movff	sqrt@y,??_sqrt
  7066  0047C0  C0D2  F18E         	movff	sqrt@y+1,??_sqrt+1
  7067  0047C4  C0D3  F18F         	movff	sqrt@y+2,??_sqrt+2
  7068  0047C8  C0D4  F190         	movff	sqrt@y+3,??_sqrt+3
  7069  0047CC  0101               	movlb	1	; () banked
  7070  0047CE  1F8D               	comf	??_sqrt& (0+255),f,b
  7071  0047D0  1F8E               	comf	(??_sqrt+1)& (0+255),f,b
  7072  0047D2  1F8F               	comf	(??_sqrt+2)& (0+255),f,b
  7073  0047D4  1F90               	comf	(??_sqrt+3)& (0+255),f,b
  7074  0047D6  2B8D               	incf	??_sqrt& (0+255),f,b
  7075  0047D8  0E00               	movlw	0
  7076  0047DA  238E               	addwfc	(??_sqrt+1)& (0+255),f,b
  7077  0047DC  238F               	addwfc	(??_sqrt+2)& (0+255),f,b
  7078  0047DE  2390               	addwfc	(??_sqrt+3)& (0+255),f,b
  7079  0047E0  0E5E               	movlw	94
  7080  0047E2  0101               	movlb	1	; () banked
  7081  0047E4  258D               	addwf	??_sqrt& (0+255),w,b
  7082  0047E6  0101               	movlb	1	; () banked
  7083  0047E8  6F9E               	movwf	sqrt@x& (0+255),b
  7084  0047EA  0EC8               	movlw	200
  7085  0047EC  0101               	movlb	1	; () banked
  7086  0047EE  218E               	addwfc	(??_sqrt+1)& (0+255),w,b
  7087  0047F0  0101               	movlb	1	; () banked
  7088  0047F2  6F9F               	movwf	(sqrt@x+1)& (0+255),b
  7089  0047F4  0E6E               	movlw	110
  7090  0047F6  0101               	movlb	1	; () banked
  7091  0047F8  218F               	addwfc	(??_sqrt+2)& (0+255),w,b
  7092  0047FA  0101               	movlb	1	; () banked
  7093  0047FC  6FA0               	movwf	(sqrt@x+2)& (0+255),b
  7094  0047FE  0EBE               	movlw	190
  7095  004800  0101               	movlb	1	; () banked
  7096  004802  2190               	addwfc	(??_sqrt+3)& (0+255),w,b
  7097  004804  0101               	movlb	1	; () banked
  7098  004806  6FA1               	movwf	(sqrt@x+3)& (0+255),b
  7099                           
  7100                           ; BSR set to: 1
  7101  004808  0101               	movlb	1	; () banked
  7102  00480A  90D8               	bcf	status,0,c
  7103  00480C  33A1               	rrcf	(sqrt@x+3)& (0+255),f,b
  7104  00480E  33A0               	rrcf	(sqrt@x+2)& (0+255),f,b
  7105  004810  339F               	rrcf	(sqrt@x+1)& (0+255),f,b
  7106  004812  339E               	rrcf	sqrt@x& (0+255),f,b
  7107                           
  7108                           ; BSR set to: 1
  7109  004814  0E00               	movlw	0
  7110  004816  0101               	movlb	1	; () banked
  7111  004818  5F95               	subwf	sqrt@z& (0+255),f,b
  7112  00481A  0E00               	movlw	0
  7113  00481C  5B96               	subwfb	(sqrt@z+1)& (0+255),f,b
  7114  00481E  0E80               	movlw	128
  7115  004820  5B97               	subwfb	(sqrt@z+2)& (0+255),f,b
  7116  004822  0E00               	movlw	0
  7117  004824  5B98               	subwfb	(sqrt@z+3)& (0+255),f,b
  7118                           
  7119                           ; BSR set to: 1
  7120  004826  0E04               	movlw	4
  7121  004828  0101               	movlb	1	; () banked
  7122  00482A  6F99               	movwf	sqrt@i& (0+255),b
  7123  00482C  D000               	goto	l6348
  7124  00482E                     l6348:
  7125                           
  7126                           ; BSR set to: 1
  7127  00482E  C19E  F191         	movff	sqrt@x,sqrt@og
  7128  004832  C19F  F192         	movff	sqrt@x+1,sqrt@og+1
  7129  004836  C1A0  F193         	movff	sqrt@x+2,sqrt@og+2
  7130  00483A  C1A1  F194         	movff	sqrt@x+3,sqrt@og+3
  7131                           
  7132                           ; BSR set to: 1
  7133  00483E  C19E  F090         	movff	sqrt@x,___flmul@f1
  7134  004842  C19F  F091         	movff	sqrt@x+1,___flmul@f1+1
  7135  004846  C1A0  F092         	movff	sqrt@x+2,___flmul@f1+2
  7136  00484A  C1A1  F093         	movff	sqrt@x+3,___flmul@f1+3
  7137  00484E  C195  F094         	movff	sqrt@z,___flmul@f2
  7138  004852  C196  F095         	movff	sqrt@z+1,___flmul@f2+1
  7139  004856  C197  F096         	movff	sqrt@z+2,___flmul@f2+2
  7140  00485A  C198  F097         	movff	sqrt@z+3,___flmul@f2+3
  7141  00485E  EC4E  F027         	call	___flmul	;wreg free
  7142  004862  C090  F19A         	movff	?___flmul,sqrt@q
  7143  004866  C091  F19B         	movff	?___flmul+1,sqrt@q+1
  7144  00486A  C092  F19C         	movff	?___flmul+2,sqrt@q+2
  7145  00486E  C093  F19D         	movff	?___flmul+3,sqrt@q+3
  7146  004872  C19A  F090         	movff	sqrt@q,___flmul@f1
  7147  004876  C19B  F091         	movff	sqrt@q+1,___flmul@f1+1
  7148  00487A  C19C  F092         	movff	sqrt@q+2,___flmul@f1+2
  7149  00487E  C19D  F093         	movff	sqrt@q+3,___flmul@f1+3
  7150  004882  C19E  F094         	movff	sqrt@x,___flmul@f2
  7151  004886  C19F  F095         	movff	sqrt@x+1,___flmul@f2+1
  7152  00488A  C1A0  F096         	movff	sqrt@x+2,___flmul@f2+2
  7153  00488E  C1A1  F097         	movff	sqrt@x+3,___flmul@f2+3
  7154  004892  EC4E  F027         	call	___flmul	;wreg free
  7155  004896  C090  F19A         	movff	?___flmul,sqrt@q
  7156  00489A  C091  F19B         	movff	?___flmul+1,sqrt@q+1
  7157  00489E  C092  F19C         	movff	?___flmul+2,sqrt@q+2
  7158  0048A2  C093  F19D         	movff	?___flmul+3,sqrt@q+3
  7159  0048A6  C19A  F090         	movff	sqrt@q,___flmul@f1
  7160  0048AA  C19B  F091         	movff	sqrt@q+1,___flmul@f1+1
  7161  0048AE  C19C  F092         	movff	sqrt@q+2,___flmul@f1+2
  7162  0048B2  C19D  F093         	movff	sqrt@q+3,___flmul@f1+3
  7163  0048B6  C19E  F094         	movff	sqrt@x,___flmul@f2
  7164  0048BA  C19F  F095         	movff	sqrt@x+1,___flmul@f2+1
  7165  0048BE  C1A0  F096         	movff	sqrt@x+2,___flmul@f2+2
  7166  0048C2  C1A1  F097         	movff	sqrt@x+3,___flmul@f2+3
  7167  0048C6  EC4E  F027         	call	___flmul	;wreg free
  7168  0048CA  C090  F19A         	movff	?___flmul,sqrt@q
  7169  0048CE  C091  F19B         	movff	?___flmul+1,sqrt@q+1
  7170  0048D2  C092  F19C         	movff	?___flmul+2,sqrt@q+2
  7171  0048D6  C093  F19D         	movff	?___flmul+3,sqrt@q+3
  7172  0048DA  C19E  F090         	movff	sqrt@x,___flmul@f1
  7173  0048DE  C19F  F091         	movff	sqrt@x+1,___flmul@f1+1
  7174  0048E2  C1A0  F092         	movff	sqrt@x+2,___flmul@f1+2
  7175  0048E6  C1A1  F093         	movff	sqrt@x+3,___flmul@f1+3
  7176  0048EA  0E00               	movlw	0
  7177  0048EC  0100               	movlb	0	; () banked
  7178  0048EE  6F94               	movwf	___flmul@f2& (0+255),b
  7179  0048F0  0E00               	movlw	0
  7180  0048F2  6F95               	movwf	(___flmul@f2+1)& (0+255),b
  7181  0048F4  0EC0               	movlw	192
  7182  0048F6  6F96               	movwf	(___flmul@f2+2)& (0+255),b
  7183  0048F8  0E3F               	movlw	63
  7184  0048FA  6F97               	movwf	(___flmul@f2+3)& (0+255),b
  7185  0048FC  EC4E  F027         	call	___flmul	;wreg free
  7186  004900  C090  F19E         	movff	?___flmul,sqrt@x
  7187  004904  C091  F19F         	movff	?___flmul+1,sqrt@x+1
  7188  004908  C092  F1A0         	movff	?___flmul+2,sqrt@x+2
  7189  00490C  C093  F1A1         	movff	?___flmul+3,sqrt@x+3
  7190  004910  C19E  F0C9         	movff	sqrt@x,___flsub@f1
  7191  004914  C19F  F0CA         	movff	sqrt@x+1,___flsub@f1+1
  7192  004918  C1A0  F0CB         	movff	sqrt@x+2,___flsub@f1+2
  7193  00491C  C1A1  F0CC         	movff	sqrt@x+3,___flsub@f1+3
  7194  004920  C19A  F0CD         	movff	sqrt@q,___flsub@f2
  7195  004924  C19B  F0CE         	movff	sqrt@q+1,___flsub@f2+1
  7196  004928  C19C  F0CF         	movff	sqrt@q+2,___flsub@f2+2
  7197  00492C  C19D  F0D0         	movff	sqrt@q+3,___flsub@f2+3
  7198  004930  ECA9  F02D         	call	___flsub	;wreg free
  7199  004934  C0C9  F19E         	movff	?___flsub,sqrt@x
  7200  004938  C0CA  F19F         	movff	?___flsub+1,sqrt@x+1
  7201  00493C  C0CB  F1A0         	movff	?___flsub+2,sqrt@x+2
  7202  004940  C0CC  F1A1         	movff	?___flsub+3,sqrt@x+3
  7203  004944  0101               	movlb	1	; () banked
  7204  004946  2F99               	decfsz	sqrt@i& (0+255),f,b
  7205  004948  D772               	goto	l6348
  7206  00494A  D000               	goto	l6362
  7207  00494C                     l6362:
  7208                           
  7209                           ; BSR set to: 1
  7210  00494C  C19E  F090         	movff	sqrt@x,___flmul@f1
  7211  004950  C19F  F091         	movff	sqrt@x+1,___flmul@f1+1
  7212  004954  C1A0  F092         	movff	sqrt@x+2,___flmul@f1+2
  7213  004958  C1A1  F093         	movff	sqrt@x+3,___flmul@f1+3
  7214  00495C  C0D1  F094         	movff	sqrt@y,___flmul@f2
  7215  004960  C0D2  F095         	movff	sqrt@y+1,___flmul@f2+1
  7216  004964  C0D3  F096         	movff	sqrt@y+2,___flmul@f2+2
  7217  004968  C0D4  F097         	movff	sqrt@y+3,___flmul@f2+3
  7218  00496C  EC4E  F027         	call	___flmul	;wreg free
  7219  004970  C090  F0D1         	movff	?___flmul,?_sqrt
  7220  004974  C091  F0D2         	movff	?___flmul+1,?_sqrt+1
  7221  004978  C092  F0D3         	movff	?___flmul+2,?_sqrt+2
  7222  00497C  C093  F0D4         	movff	?___flmul+3,?_sqrt+3
  7223  004980  0012               	return	
  7224  004982  0012               	return		;funcret
  7225  004984                     __end_of_sqrt:
  7226                           	opt stack 0
  7227                           tblptru	equ	0xFF8
  7228                           tblptrh	equ	0xFF7
  7229                           tblptrl	equ	0xFF6
  7230                           tablat	equ	0xFF5
  7231                           postinc0	equ	0xFEE
  7232                           wreg	equ	0xFE8
  7233                           postdec1	equ	0xFE5
  7234                           fsr1l	equ	0xFE1
  7235                           indf2	equ	0xFDF
  7236                           postinc2	equ	0xFDE
  7237                           postdec2	equ	0xFDD
  7238                           fsr2h	equ	0xFDA
  7239                           fsr2l	equ	0xFD9
  7240                           status	equ	0xFD8
  7241                           
  7242 ;; *************** function ___flsub *****************
  7243 ;; Defined at:
  7244 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  7245 ;; Parameters:    Size  Location     Type
  7246 ;;  f1              4  105[BANK0 ] unsigned char 
  7247 ;;  f2              4  109[BANK0 ] unsigned char 
  7248 ;; Auto vars:     Size  Location     Type
  7249 ;;		None
  7250 ;; Return value:  Size  Location     Type
  7251 ;;                  4  105[BANK0 ] unsigned char 
  7252 ;; Registers used:
  7253 ;;		wreg, status,2, status,0, cstack
  7254 ;; Tracked objects:
  7255 ;;		On entry : 0/0
  7256 ;;		On exit  : 0/0
  7257 ;;		Unchanged: 0/0
  7258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7259 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7262 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7263 ;;Total ram usage:        8 bytes
  7264 ;; Hardware stack levels used:    1
  7265 ;; Hardware stack levels required when called:    7
  7266 ;; This function calls:
  7267 ;;		___fladd
  7268 ;; This function is called by:
  7269 ;;		_sin
  7270 ;;		_sqrt
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           	psect	text18
  7275  005B52                     __ptext18:
  7276                           	opt stack 0
  7277  005B52                     ___flsub:
  7278                           	opt stack 20
  7279                           
  7280                           ;incstack = 0
  7281  005B52  0100               	movlb	0	; () banked
  7282  005B54  51CD               	movf	___flsub@f2& (0+255),w,b
  7283  005B56  0100               	movlb	0	; () banked
  7284  005B58  11CE               	iorwf	(___flsub@f2+1)& (0+255),w,b
  7285  005B5A  0100               	movlb	0	; () banked
  7286  005B5C  11CF               	iorwf	(___flsub@f2+2)& (0+255),w,b
  7287  005B5E  0100               	movlb	0	; () banked
  7288  005B60  11D0               	iorwf	(___flsub@f2+3)& (0+255),w,b
  7289  005B62  B4D8               	btfsc	status,2,c
  7290  005B64  D00A               	goto	l6292
  7291                           
  7292                           ; BSR set to: 0
  7293  005B66  0E00               	movlw	0
  7294  005B68  0100               	movlb	0	; () banked
  7295  005B6A  1BCD               	xorwf	___flsub@f2& (0+255),f,b
  7296  005B6C  0E00               	movlw	0
  7297  005B6E  1BCE               	xorwf	(___flsub@f2+1)& (0+255),f,b
  7298  005B70  0E00               	movlw	0
  7299  005B72  1BCF               	xorwf	(___flsub@f2+2)& (0+255),f,b
  7300  005B74  0E80               	movlw	128
  7301  005B76  1BD0               	xorwf	(___flsub@f2+3)& (0+255),f,b
  7302  005B78  D000               	goto	l6292
  7303  005B7A                     l6292:
  7304                           
  7305                           ; BSR set to: 0
  7306  005B7A  C0C9  F09F         	movff	___flsub@f1,___fladd@f1
  7307  005B7E  C0CA  F0A0         	movff	___flsub@f1+1,___fladd@f1+1
  7308  005B82  C0CB  F0A1         	movff	___flsub@f1+2,___fladd@f1+2
  7309  005B86  C0CC  F0A2         	movff	___flsub@f1+3,___fladd@f1+3
  7310  005B8A  C0CD  F0A3         	movff	___flsub@f2,___fladd@f2
  7311  005B8E  C0CE  F0A4         	movff	___flsub@f2+1,___fladd@f2+1
  7312  005B92  C0CF  F0A5         	movff	___flsub@f2+2,___fladd@f2+2
  7313  005B96  C0D0  F0A6         	movff	___flsub@f2+3,___fladd@f2+3
  7314  005B9A  EC1F  F020         	call	___fladd	;wreg free
  7315  005B9E  C09F  F0C9         	movff	?___fladd,?___flsub
  7316  005BA2  C0A0  F0CA         	movff	?___fladd+1,?___flsub+1
  7317  005BA6  C0A1  F0CB         	movff	?___fladd+2,?___flsub+2
  7318  005BAA  C0A2  F0CC         	movff	?___fladd+3,?___flsub+3
  7319  005BAE  0012               	return	
  7320  005BB0  0012               	return		;funcret
  7321  005BB2                     __end_of___flsub:
  7322                           	opt stack 0
  7323                           tblptru	equ	0xFF8
  7324                           tblptrh	equ	0xFF7
  7325                           tblptrl	equ	0xFF6
  7326                           tablat	equ	0xFF5
  7327                           postinc0	equ	0xFEE
  7328                           wreg	equ	0xFE8
  7329                           postdec1	equ	0xFE5
  7330                           fsr1l	equ	0xFE1
  7331                           indf2	equ	0xFDF
  7332                           postinc2	equ	0xFDE
  7333                           postdec2	equ	0xFDD
  7334                           fsr2h	equ	0xFDA
  7335                           fsr2l	equ	0xFD9
  7336                           status	equ	0xFD8
  7337                           
  7338 ;; *************** function _atan *****************
  7339 ;; Defined at:
  7340 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atan.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;  f               4   95[BANK0 ] unsigned char 
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;  val             4  112[BANK0 ] unsigned char 
  7345 ;;  val_squared     4  108[BANK0 ] unsigned char 
  7346 ;;  x               4  103[BANK0 ] unsigned char 
  7347 ;;  y               4   99[BANK0 ] unsigned char 
  7348 ;;  recip           1  107[BANK0 ] unsigned char 
  7349 ;; Return value:  Size  Location     Type
  7350 ;;                  4   95[BANK0 ] unsigned char 
  7351 ;; Registers used:
  7352 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7358 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;Total ram usage:       21 bytes
  7363 ;; Hardware stack levels used:    1
  7364 ;; Hardware stack levels required when called:    8
  7365 ;; This function calls:
  7366 ;;		___fladd
  7367 ;;		___fldiv
  7368 ;;		___flge
  7369 ;;		___flmul
  7370 ;;		___flneg
  7371 ;;		_eval_poly
  7372 ;;		_fabs
  7373 ;; This function is called by:
  7374 ;;		_asin
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           	psect	text19
  7379  004506                     __ptext19:
  7380                           	opt stack 0
  7381  004506                     _atan:
  7382                           	opt stack 19
  7383                           
  7384                           ;incstack = 0
  7385  004506  C0BF  F0AF         	movff	atan@f,fabs@d
  7386  00450A  C0C0  F0B0         	movff	atan@f+1,fabs@d+1
  7387  00450E  C0C1  F0B1         	movff	atan@f+2,fabs@d+2
  7388  004512  C0C2  F0B2         	movff	atan@f+3,fabs@d+3
  7389  004516  EC2B  F02E         	call	_fabs	;wreg free
  7390  00451A  C0AF  F0D0         	movff	?_fabs,atan@val
  7391  00451E  C0B0  F0D1         	movff	?_fabs+1,atan@val+1
  7392  004522  C0B1  F0D2         	movff	?_fabs+2,atan@val+2
  7393  004526  C0B2  F0D3         	movff	?_fabs+3,atan@val+3
  7394  00452A  0100               	movlb	0	; () banked
  7395  00452C  51D0               	movf	atan@val& (0+255),w,b
  7396  00452E  0100               	movlb	0	; () banked
  7397  004530  11D1               	iorwf	(atan@val+1)& (0+255),w,b
  7398  004532  0100               	movlb	0	; () banked
  7399  004534  11D2               	iorwf	(atan@val+2)& (0+255),w,b
  7400  004536  0100               	movlb	0	; () banked
  7401  004538  11D3               	iorwf	(atan@val+3)& (0+255),w,b
  7402  00453A  A4D8               	btfss	status,2,c
  7403  00453C  D00A               	goto	l6372
  7404                           
  7405                           ; BSR set to: 0
  7406  00453E  0E00               	movlw	0
  7407  004540  0100               	movlb	0	; () banked
  7408  004542  6FBF               	movwf	?_atan& (0+255),b
  7409  004544  0E00               	movlw	0
  7410  004546  6FC0               	movwf	(?_atan+1)& (0+255),b
  7411  004548  0E00               	movlw	0
  7412  00454A  6FC1               	movwf	(?_atan+2)& (0+255),b
  7413  00454C  0E00               	movlw	0
  7414  00454E  6FC2               	movwf	(?_atan+3)& (0+255),b
  7415                           
  7416                           ; BSR set to: 0
  7417  004550  0012               	return	
  7418  004552                     l6372:
  7419                           
  7420                           ; BSR set to: 0
  7421  004552  0E00               	movlw	0
  7422  004554  0100               	movlb	0	; () banked
  7423  004556  6FB3               	movwf	___flge@ff1& (0+255),b
  7424  004558  0E00               	movlw	0
  7425  00455A  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  7426  00455C  0E80               	movlw	128
  7427  00455E  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  7428  004560  0E3F               	movlw	63
  7429  004562  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  7430  004564  C0D0  F0B7         	movff	atan@val,___flge@ff2
  7431  004568  C0D1  F0B8         	movff	atan@val+1,___flge@ff2+1
  7432  00456C  C0D2  F0B9         	movff	atan@val+2,___flge@ff2+2
  7433  004570  C0D3  F0BA         	movff	atan@val+3,___flge@ff2+3
  7434  004574  EC4F  F02B         	call	___flge	;wreg free
  7435  004578  0100               	movlb	0	; () banked
  7436  00457A  B0D8               	btfsc	status,0,c
  7437  00457C  D002               	goto	u7990
  7438  00457E  0E01               	movlw	1
  7439  004580  D001               	goto	u8000
  7440  004582                     u7990:
  7441  004582  0E00               	movlw	0
  7442  004584                     u8000:
  7443  004584  0100               	movlb	0	; () banked
  7444  004586  6FCB               	movwf	atan@recip& (0+255),b
  7445  004588  0100               	movlb	0	; () banked
  7446  00458A  51CB               	movf	atan@recip& (0+255),w,b
  7447  00458C  B4D8               	btfsc	status,2,c
  7448  00458E  D01B               	goto	l1031
  7449                           
  7450                           ; BSR set to: 0
  7451  004590  0E00               	movlw	0
  7452  004592  0100               	movlb	0	; () banked
  7453  004594  6F81               	movwf	___fldiv@f1& (0+255),b
  7454  004596  0E00               	movlw	0
  7455  004598  6F82               	movwf	(___fldiv@f1+1)& (0+255),b
  7456  00459A  0E80               	movlw	128
  7457  00459C  6F83               	movwf	(___fldiv@f1+2)& (0+255),b
  7458  00459E  0E3F               	movlw	63
  7459  0045A0  6F84               	movwf	(___fldiv@f1+3)& (0+255),b
  7460  0045A2  C0D0  F085         	movff	atan@val,___fldiv@f2
  7461  0045A6  C0D1  F086         	movff	atan@val+1,___fldiv@f2+1
  7462  0045AA  C0D2  F087         	movff	atan@val+2,___fldiv@f2+2
  7463  0045AE  C0D3  F088         	movff	atan@val+3,___fldiv@f2+3
  7464  0045B2  EC00  F028         	call	___fldiv	;wreg free
  7465  0045B6  C081  F0D0         	movff	?___fldiv,atan@val
  7466  0045BA  C082  F0D1         	movff	?___fldiv+1,atan@val+1
  7467  0045BE  C083  F0D2         	movff	?___fldiv+2,atan@val+2
  7468  0045C2  C084  F0D3         	movff	?___fldiv+3,atan@val+3
  7469  0045C6                     l1031:
  7470  0045C6  C0D0  F090         	movff	atan@val,___flmul@f1
  7471  0045CA  C0D1  F091         	movff	atan@val+1,___flmul@f1+1
  7472  0045CE  C0D2  F092         	movff	atan@val+2,___flmul@f1+2
  7473  0045D2  C0D3  F093         	movff	atan@val+3,___flmul@f1+3
  7474  0045D6  C0D0  F094         	movff	atan@val,___flmul@f2
  7475  0045DA  C0D1  F095         	movff	atan@val+1,___flmul@f2+1
  7476  0045DE  C0D2  F096         	movff	atan@val+2,___flmul@f2+2
  7477  0045E2  C0D3  F097         	movff	atan@val+3,___flmul@f2+3
  7478  0045E6  EC4E  F027         	call	___flmul	;wreg free
  7479  0045EA  C090  F0CC         	movff	?___flmul,atan@val_squared
  7480  0045EE  C091  F0CD         	movff	?___flmul+1,atan@val_squared+1
  7481  0045F2  C092  F0CE         	movff	?___flmul+2,atan@val_squared+2
  7482  0045F6  C093  F0CF         	movff	?___flmul+3,atan@val_squared+3
  7483  0045FA  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  7484  0045FE  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  7485  004602  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  7486  004606  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  7487  00460A  0E19               	movlw	low atan@coeff_b
  7488  00460C  0100               	movlb	0	; () banked
  7489  00460E  6FAF               	movwf	eval_poly@d& (0+255),b
  7490  004610  0E0D               	movlw	high atan@coeff_b
  7491  004612  0100               	movlb	0	; () banked
  7492  004614  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  7493  004616  0E00               	movlw	0
  7494  004618  0100               	movlb	0	; () banked
  7495  00461A  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  7496  00461C  0E04               	movlw	4
  7497  00461E  6FB1               	movwf	eval_poly@n& (0+255),b
  7498  004620  ECB9  F029         	call	_eval_poly	;wreg free
  7499  004624  C0AB  F0C3         	movff	?_eval_poly,atan@y
  7500  004628  C0AC  F0C4         	movff	?_eval_poly+1,atan@y+1
  7501  00462C  C0AD  F0C5         	movff	?_eval_poly+2,atan@y+2
  7502  004630  C0AE  F0C6         	movff	?_eval_poly+3,atan@y+3
  7503  004634  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  7504  004638  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  7505  00463C  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  7506  004640  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  7507  004644  0E01               	movlw	low atan@coeff_a
  7508  004646  0100               	movlb	0	; () banked
  7509  004648  6FAF               	movwf	eval_poly@d& (0+255),b
  7510  00464A  0E0D               	movlw	high atan@coeff_a
  7511  00464C  0100               	movlb	0	; () banked
  7512  00464E  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  7513  004650  0E00               	movlw	0
  7514  004652  0100               	movlb	0	; () banked
  7515  004654  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  7516  004656  0E05               	movlw	5
  7517  004658  6FB1               	movwf	eval_poly@n& (0+255),b
  7518  00465A  ECB9  F029         	call	_eval_poly	;wreg free
  7519  00465E  C0AB  F0C7         	movff	?_eval_poly,atan@x
  7520  004662  C0AC  F0C8         	movff	?_eval_poly+1,atan@x+1
  7521  004666  C0AD  F0C9         	movff	?_eval_poly+2,atan@x+2
  7522  00466A  C0AE  F0CA         	movff	?_eval_poly+3,atan@x+3
  7523  00466E  C0D0  F090         	movff	atan@val,___flmul@f1
  7524  004672  C0D1  F091         	movff	atan@val+1,___flmul@f1+1
  7525  004676  C0D2  F092         	movff	atan@val+2,___flmul@f1+2
  7526  00467A  C0D3  F093         	movff	atan@val+3,___flmul@f1+3
  7527  00467E  C0C3  F085         	movff	atan@y,___fldiv@f2
  7528  004682  C0C4  F086         	movff	atan@y+1,___fldiv@f2+1
  7529  004686  C0C5  F087         	movff	atan@y+2,___fldiv@f2+2
  7530  00468A  C0C6  F088         	movff	atan@y+3,___fldiv@f2+3
  7531  00468E  C0C7  F081         	movff	atan@x,___fldiv@f1
  7532  004692  C0C8  F082         	movff	atan@x+1,___fldiv@f1+1
  7533  004696  C0C9  F083         	movff	atan@x+2,___fldiv@f1+2
  7534  00469A  C0CA  F084         	movff	atan@x+3,___fldiv@f1+3
  7535  00469E  EC00  F028         	call	___fldiv	;wreg free
  7536  0046A2  C081  F094         	movff	?___fldiv,___flmul@f2
  7537  0046A6  C082  F095         	movff	?___fldiv+1,___flmul@f2+1
  7538  0046AA  C083  F096         	movff	?___fldiv+2,___flmul@f2+2
  7539  0046AE  C084  F097         	movff	?___fldiv+3,___flmul@f2+3
  7540  0046B2  EC4E  F027         	call	___flmul	;wreg free
  7541  0046B6  C090  F0D0         	movff	?___flmul,atan@val
  7542  0046BA  C091  F0D1         	movff	?___flmul+1,atan@val+1
  7543  0046BE  C092  F0D2         	movff	?___flmul+2,atan@val+2
  7544  0046C2  C093  F0D3         	movff	?___flmul+3,atan@val+3
  7545  0046C6  0100               	movlb	0	; () banked
  7546  0046C8  51CB               	movf	atan@recip& (0+255),w,b
  7547  0046CA  0100               	movlb	0	; () banked
  7548  0046CC  B4D8               	btfsc	status,2,c
  7549  0046CE  D026               	goto	l6384
  7550                           
  7551                           ; BSR set to: 0
  7552  0046D0  C0D0  F0AB         	movff	atan@val,___flneg@f1
  7553  0046D4  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  7554  0046D8  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  7555  0046DC  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  7556  0046E0  EC4A  F02E         	call	___flneg	;wreg free
  7557  0046E4  C0AB  F09F         	movff	?___flneg,___fladd@f1
  7558  0046E8  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  7559  0046EC  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  7560  0046F0  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  7561  0046F4  0EDB               	movlw	219
  7562  0046F6  0100               	movlb	0	; () banked
  7563  0046F8  6FA3               	movwf	___fladd@f2& (0+255),b
  7564  0046FA  0E0F               	movlw	15
  7565  0046FC  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  7566  0046FE  0EC9               	movlw	201
  7567  004700  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  7568  004702  0E3F               	movlw	63
  7569  004704  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  7570  004706  EC1F  F020         	call	___fladd	;wreg free
  7571  00470A  C09F  F0D0         	movff	?___fladd,atan@val
  7572  00470E  C0A0  F0D1         	movff	?___fladd+1,atan@val+1
  7573  004712  C0A1  F0D2         	movff	?___fladd+2,atan@val+2
  7574  004716  C0A2  F0D3         	movff	?___fladd+3,atan@val+3
  7575  00471A  D000               	goto	l6384
  7576  00471C                     l6384:
  7577  00471C  0100               	movlb	0	; () banked
  7578  00471E  BFC2               	btfsc	(atan@f+3)& (0+255),7,b
  7579  004720  D009               	goto	l6388
  7580                           
  7581                           ; BSR set to: 0
  7582  004722  C0D0  F0BF         	movff	atan@val,?_atan
  7583  004726  C0D1  F0C0         	movff	atan@val+1,?_atan+1
  7584  00472A  C0D2  F0C1         	movff	atan@val+2,?_atan+2
  7585  00472E  C0D3  F0C2         	movff	atan@val+3,?_atan+3
  7586  004732  0012               	return	
  7587  004734                     l6388:
  7588                           
  7589                           ; BSR set to: 0
  7590  004734  C0D0  F0AB         	movff	atan@val,___flneg@f1
  7591  004738  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  7592  00473C  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  7593  004740  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  7594  004744  EC4A  F02E         	call	___flneg	;wreg free
  7595  004748  C0AB  F0BF         	movff	?___flneg,?_atan
  7596  00474C  C0AC  F0C0         	movff	?___flneg+1,?_atan+1
  7597  004750  C0AD  F0C1         	movff	?___flneg+2,?_atan+2
  7598  004754  C0AE  F0C2         	movff	?___flneg+3,?_atan+3
  7599  004758  0012               	return	
  7600  00475A  0012               	return		;funcret
  7601  00475C                     __end_of_atan:
  7602                           	opt stack 0
  7603                           tblptru	equ	0xFF8
  7604                           tblptrh	equ	0xFF7
  7605                           tblptrl	equ	0xFF6
  7606                           tablat	equ	0xFF5
  7607                           postinc0	equ	0xFEE
  7608                           wreg	equ	0xFE8
  7609                           postdec1	equ	0xFE5
  7610                           fsr1l	equ	0xFE1
  7611                           indf2	equ	0xFDF
  7612                           postinc2	equ	0xFDE
  7613                           postdec2	equ	0xFDD
  7614                           fsr2h	equ	0xFDA
  7615                           fsr2l	equ	0xFD9
  7616                           status	equ	0xFD8
  7617                           
  7618 ;; *************** function _fabs *****************
  7619 ;; Defined at:
  7620 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fabs.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;  d               4   79[BANK0 ] unsigned char 
  7623 ;; Auto vars:     Size  Location     Type
  7624 ;;		None
  7625 ;; Return value:  Size  Location     Type
  7626 ;;                  4   79[BANK0 ] unsigned char 
  7627 ;; Registers used:
  7628 ;;		wreg, status,2, status,0, cstack
  7629 ;; Tracked objects:
  7630 ;;		On entry : 0/0
  7631 ;;		On exit  : 0/0
  7632 ;;		Unchanged: 0/0
  7633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7634 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7637 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;Total ram usage:        4 bytes
  7639 ;; Hardware stack levels used:    1
  7640 ;; Hardware stack levels required when called:    6
  7641 ;; This function calls:
  7642 ;;		___flneg
  7643 ;; This function is called by:
  7644 ;;		_asin
  7645 ;;		_atan
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           	psect	text20
  7650  005C56                     __ptext20:
  7651                           	opt stack 0
  7652  005C56                     _fabs:
  7653                           	opt stack 21
  7654                           
  7655                           ;incstack = 0
  7656  005C56  0100               	movlb	0	; () banked
  7657  005C58  AFB2               	btfss	(fabs@d+3)& (0+255),7,b
  7658  005C5A  D013               	goto	l1148
  7659                           
  7660                           ; BSR set to: 0
  7661  005C5C  C0AF  F0AB         	movff	fabs@d,___flneg@f1
  7662  005C60  C0B0  F0AC         	movff	fabs@d+1,___flneg@f1+1
  7663  005C64  C0B1  F0AD         	movff	fabs@d+2,___flneg@f1+2
  7664  005C68  C0B2  F0AE         	movff	fabs@d+3,___flneg@f1+3
  7665  005C6C  EC4A  F02E         	call	___flneg	;wreg free
  7666  005C70  C0AB  F0AF         	movff	?___flneg,?_fabs
  7667  005C74  C0AC  F0B0         	movff	?___flneg+1,?_fabs+1
  7668  005C78  C0AD  F0B1         	movff	?___flneg+2,?_fabs+2
  7669  005C7C  C0AE  F0B2         	movff	?___flneg+3,?_fabs+3
  7670  005C80  0012               	return	
  7671  005C82                     l1148:
  7672                           
  7673                           ; BSR set to: 0
  7674  005C82  C0AF  F0AF         	movff	fabs@d,?_fabs
  7675  005C86  C0B0  F0B0         	movff	fabs@d+1,?_fabs+1
  7676  005C8A  C0B1  F0B1         	movff	fabs@d+2,?_fabs+2
  7677  005C8E  C0B2  F0B2         	movff	fabs@d+3,?_fabs+3
  7678  005C92  0012               	return		;funcret
  7679  005C94                     __end_of_fabs:
  7680                           	opt stack 0
  7681                           tblptru	equ	0xFF8
  7682                           tblptrh	equ	0xFF7
  7683                           tblptrl	equ	0xFF6
  7684                           tablat	equ	0xFF5
  7685                           postinc0	equ	0xFEE
  7686                           wreg	equ	0xFE8
  7687                           postdec1	equ	0xFE5
  7688                           fsr1l	equ	0xFE1
  7689                           indf2	equ	0xFDF
  7690                           postinc2	equ	0xFDE
  7691                           postdec2	equ	0xFDD
  7692                           fsr2h	equ	0xFDA
  7693                           fsr2l	equ	0xFD9
  7694                           status	equ	0xFD8
  7695                           
  7696 ;; *************** function ___flneg *****************
  7697 ;; Defined at:
  7698 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;  f1              4   75[BANK0 ] unsigned char 
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;		None
  7703 ;; Return value:  Size  Location     Type
  7704 ;;                  4   75[BANK0 ] unsigned char 
  7705 ;; Registers used:
  7706 ;;		wreg, status,2, status,0
  7707 ;; Tracked objects:
  7708 ;;		On entry : 0/0
  7709 ;;		On exit  : 0/0
  7710 ;;		Unchanged: 0/0
  7711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7712 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7715 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7716 ;;Total ram usage:        4 bytes
  7717 ;; Hardware stack levels used:    1
  7718 ;; Hardware stack levels required when called:    5
  7719 ;; This function calls:
  7720 ;;		Nothing
  7721 ;; This function is called by:
  7722 ;;		_park_routine
  7723 ;;		_matematica
  7724 ;;		_asin
  7725 ;;		_atan
  7726 ;;		_fabs
  7727 ;;		_sin
  7728 ;; This function uses a non-reentrant model
  7729 ;;
  7730                           
  7731                           	psect	text21
  7732  005C94                     __ptext21:
  7733                           	opt stack 0
  7734  005C94                     ___flneg:
  7735                           	opt stack 21
  7736                           
  7737                           ;incstack = 0
  7738  005C94  0100               	movlb	0	; () banked
  7739  005C96  51AB               	movf	___flneg@f1& (0+255),w,b
  7740  005C98  0100               	movlb	0	; () banked
  7741  005C9A  11AC               	iorwf	(___flneg@f1+1)& (0+255),w,b
  7742  005C9C  0100               	movlb	0	; () banked
  7743  005C9E  11AD               	iorwf	(___flneg@f1+2)& (0+255),w,b
  7744  005CA0  0100               	movlb	0	; () banked
  7745  005CA2  11AE               	iorwf	(___flneg@f1+3)& (0+255),w,b
  7746  005CA4  B4D8               	btfsc	status,2,c
  7747  005CA6  D00A               	goto	l6184
  7748                           
  7749                           ; BSR set to: 0
  7750  005CA8  0E00               	movlw	0
  7751  005CAA  0100               	movlb	0	; () banked
  7752  005CAC  1BAB               	xorwf	___flneg@f1& (0+255),f,b
  7753  005CAE  0E00               	movlw	0
  7754  005CB0  1BAC               	xorwf	(___flneg@f1+1)& (0+255),f,b
  7755  005CB2  0E00               	movlw	0
  7756  005CB4  1BAD               	xorwf	(___flneg@f1+2)& (0+255),f,b
  7757  005CB6  0E80               	movlw	128
  7758  005CB8  1BAE               	xorwf	(___flneg@f1+3)& (0+255),f,b
  7759  005CBA  D000               	goto	l6184
  7760  005CBC                     l6184:
  7761                           
  7762                           ; BSR set to: 0
  7763  005CBC  C0AB  F0AB         	movff	___flneg@f1,?___flneg
  7764  005CC0  C0AC  F0AC         	movff	___flneg@f1+1,?___flneg+1
  7765  005CC4  C0AD  F0AD         	movff	___flneg@f1+2,?___flneg+2
  7766  005CC8  C0AE  F0AE         	movff	___flneg@f1+3,?___flneg+3
  7767  005CCC  0012               	return	
  7768                           
  7769                           ; BSR set to: 0
  7770                           
  7771                           ; BSR set to: 0
  7772  005CCE  0012               	return		;funcret
  7773  005CD0                     __end_of___flneg:
  7774                           	opt stack 0
  7775                           tblptru	equ	0xFF8
  7776                           tblptrh	equ	0xFF7
  7777                           tblptrl	equ	0xFF6
  7778                           tablat	equ	0xFF5
  7779                           postinc0	equ	0xFEE
  7780                           wreg	equ	0xFE8
  7781                           postdec1	equ	0xFE5
  7782                           fsr1l	equ	0xFE1
  7783                           indf2	equ	0xFDF
  7784                           postinc2	equ	0xFDE
  7785                           postdec2	equ	0xFDD
  7786                           fsr2h	equ	0xFDA
  7787                           fsr2l	equ	0xFD9
  7788                           status	equ	0xFD8
  7789                           
  7790 ;; *************** function _eval_poly *****************
  7791 ;; Defined at:
  7792 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  7793 ;; Parameters:    Size  Location     Type
  7794 ;;  x               4   75[BANK0 ] unsigned char 
  7795 ;;  d               2   79[BANK0 ] PTR const 
  7796 ;;		 -> sin@coeff_a(20), sin@coeff_b(16), atan@coeff_a(24), atan@coeff_b(20), 
  7797 ;;  n               2   81[BANK0 ] int 
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;  res             4   87[BANK0 ] int 
  7800 ;; Return value:  Size  Location     Type
  7801 ;;                  4   75[BANK0 ] int 
  7802 ;; Registers used:
  7803 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7809 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7810 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7811 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7812 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7813 ;;Total ram usage:       16 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; Hardware stack levels required when called:    7
  7816 ;; This function calls:
  7817 ;;		___fladd
  7818 ;;		___flmul
  7819 ;; This function is called by:
  7820 ;;		_atan
  7821 ;;		_sin
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           	psect	text22
  7826  005372                     __ptext22:
  7827                           	opt stack 0
  7828  005372                     _eval_poly:
  7829                           	opt stack 19
  7830                           
  7831                           ; BSR set to: 0
  7832                           ;incstack = 0
  7833  005372  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  7834  005376  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  7835  00537A  0100               	movlb	0	; () banked
  7836  00537C  90D8               	bcf	status,0,c
  7837  00537E  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7838  005380  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7839  005382  0100               	movlb	0	; () banked
  7840  005384  90D8               	bcf	status,0,c
  7841  005386  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7842  005388  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7843  00538A  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  7844  00538E  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  7845  005392  0100               	movlb	0	; () banked
  7846  005394  51B3               	movf	??_eval_poly& (0+255),w,b
  7847  005396  0100               	movlb	0	; () banked
  7848  005398  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  7849  00539A  0100               	movlb	0	; () banked
  7850  00539C  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  7851  00539E  0100               	movlb	0	; () banked
  7852  0053A0  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  7853  0053A2  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  7854  0053A6  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  7855  0053AA                     	if	0	;tblptru may be non-zero
  7856  0053AA                     	endif
  7857  0053AA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7858  0053AA  0E00               	movlw	low (__mediumconst shr (0+16))
  7859  0053AC  6EF8               	movwf	tblptru,c
  7860  0053AE                     	endif
  7861  0053AE  0009               	tblrd		*+
  7862  0053B0  CFF5 F0B7          	movff	tablat,eval_poly@res
  7863  0053B4  0009               	tblrd		*+
  7864  0053B6  CFF5 F0B8          	movff	tablat,eval_poly@res+1
  7865  0053BA  0009               	tblrd		*+
  7866  0053BC  CFF5 F0B9          	movff	tablat,eval_poly@res+2
  7867  0053C0  000A               	tblrd		*-
  7868  0053C2  CFF5 F0BA          	movff	tablat,eval_poly@res+3
  7869  0053C6  D053               	goto	l6306
  7870  0053C8                     l6304:
  7871                           
  7872                           ; BSR set to: 0
  7873  0053C8  C0B7  F094         	movff	eval_poly@res,___flmul@f2
  7874  0053CC  C0B8  F095         	movff	eval_poly@res+1,___flmul@f2+1
  7875  0053D0  C0B9  F096         	movff	eval_poly@res+2,___flmul@f2+2
  7876  0053D4  C0BA  F097         	movff	eval_poly@res+3,___flmul@f2+3
  7877  0053D8  C0AB  F090         	movff	eval_poly@x,___flmul@f1
  7878  0053DC  C0AC  F091         	movff	eval_poly@x+1,___flmul@f1+1
  7879  0053E0  C0AD  F092         	movff	eval_poly@x+2,___flmul@f1+2
  7880  0053E4  C0AE  F093         	movff	eval_poly@x+3,___flmul@f1+3
  7881  0053E8  EC4E  F027         	call	___flmul	;wreg free
  7882  0053EC  C090  F09F         	movff	?___flmul,___fladd@f1
  7883  0053F0  C091  F0A0         	movff	?___flmul+1,___fladd@f1+1
  7884  0053F4  C092  F0A1         	movff	?___flmul+2,___fladd@f1+2
  7885  0053F8  C093  F0A2         	movff	?___flmul+3,___fladd@f1+3
  7886  0053FC  0100               	movlb	0	; () banked
  7887  0053FE  07B1               	decf	eval_poly@n& (0+255),f,b
  7888  005400  A0D8               	btfss	status,0,c
  7889  005402  07B2               	decf	(eval_poly@n+1)& (0+255),f,b
  7890  005404  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  7891  005408  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  7892  00540C  0100               	movlb	0	; () banked
  7893  00540E  90D8               	bcf	status,0,c
  7894  005410  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7895  005412  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7896  005414  0100               	movlb	0	; () banked
  7897  005416  90D8               	bcf	status,0,c
  7898  005418  37B3               	rlcf	??_eval_poly& (0+255),f,b
  7899  00541A  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7900  00541C  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  7901  005420  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  7902  005424  0100               	movlb	0	; () banked
  7903  005426  51B3               	movf	??_eval_poly& (0+255),w,b
  7904  005428  0100               	movlb	0	; () banked
  7905  00542A  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  7906  00542C  0100               	movlb	0	; () banked
  7907  00542E  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  7908  005430  0100               	movlb	0	; () banked
  7909  005432  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  7910  005434  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  7911  005438  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  7912  00543C                     	if	0	;tblptru may be non-zero
  7913  00543C                     	endif
  7914  00543C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7915  00543C  0E00               	movlw	low (__mediumconst shr (0+16))
  7916  00543E  6EF8               	movwf	tblptru,c
  7917  005440                     	endif
  7918  005440  0009               	tblrd		*+
  7919  005442  CFF5 F0A3          	movff	tablat,___fladd@f2
  7920  005446  0009               	tblrd		*+
  7921  005448  CFF5 F0A4          	movff	tablat,___fladd@f2+1
  7922  00544C  0009               	tblrd		*+
  7923  00544E  CFF5 F0A5          	movff	tablat,___fladd@f2+2
  7924  005452  000A               	tblrd		*-
  7925  005454  CFF5 F0A6          	movff	tablat,___fladd@f2+3
  7926  005458  EC1F  F020         	call	___fladd	;wreg free
  7927  00545C  C09F  F0B7         	movff	?___fladd,eval_poly@res
  7928  005460  C0A0  F0B8         	movff	?___fladd+1,eval_poly@res+1
  7929  005464  C0A1  F0B9         	movff	?___fladd+2,eval_poly@res+2
  7930  005468  C0A2  F0BA         	movff	?___fladd+3,eval_poly@res+3
  7931  00546C  D000               	goto	l6306
  7932  00546E                     l6306:
  7933  00546E  0100               	movlb	0	; () banked
  7934  005470  51B1               	movf	eval_poly@n& (0+255),w,b
  7935  005472  0100               	movlb	0	; () banked
  7936  005474  11B2               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7937  005476  A4D8               	btfss	status,2,c
  7938  005478  D7A7               	goto	l6304
  7939                           
  7940                           ; BSR set to: 0
  7941  00547A  C0B7  F0AB         	movff	eval_poly@res,?_eval_poly
  7942  00547E  C0B8  F0AC         	movff	eval_poly@res+1,?_eval_poly+1
  7943  005482  C0B9  F0AD         	movff	eval_poly@res+2,?_eval_poly+2
  7944  005486  C0BA  F0AE         	movff	eval_poly@res+3,?_eval_poly+3
  7945                           
  7946                           ; BSR set to: 0
  7947  00548A  0012               	return		;funcret
  7948  00548C                     __end_of_eval_poly:
  7949                           	opt stack 0
  7950                           tblptru	equ	0xFF8
  7951                           tblptrh	equ	0xFF7
  7952                           tblptrl	equ	0xFF6
  7953                           tablat	equ	0xFF5
  7954                           postinc0	equ	0xFEE
  7955                           wreg	equ	0xFE8
  7956                           postdec1	equ	0xFE5
  7957                           fsr1l	equ	0xFE1
  7958                           indf2	equ	0xFDF
  7959                           postinc2	equ	0xFDE
  7960                           postdec2	equ	0xFDD
  7961                           fsr2h	equ	0xFDA
  7962                           fsr2l	equ	0xFD9
  7963                           status	equ	0xFD8
  7964                           
  7965 ;; *************** function ___flmul *****************
  7966 ;; Defined at:
  7967 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  7968 ;; Parameters:    Size  Location     Type
  7969 ;;  f1              4   48[BANK0 ] int 
  7970 ;;  f2              4   52[BANK0 ] int 
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;  f3_as_produc    4   57[BANK0 ] unsigned long 
  7973 ;;  sign            1   62[BANK0 ] unsigned char 
  7974 ;;  cntr            1   61[BANK0 ] unsigned char 
  7975 ;;  exp             1   56[BANK0 ] unsigned char 
  7976 ;; Return value:  Size  Location     Type
  7977 ;;                  4   48[BANK0 ] unsigned char 
  7978 ;; Registers used:
  7979 ;;		wreg, status,2, status,0, cstack
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7985 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7986 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7988 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7989 ;;Total ram usage:       15 bytes
  7990 ;; Hardware stack levels used:    1
  7991 ;; Hardware stack levels required when called:    6
  7992 ;; This function calls:
  7993 ;;		___flpack
  7994 ;; This function is called by:
  7995 ;;		_parallelo
  7996 ;;		_matematica
  7997 ;;		_asin
  7998 ;;		_atan
  7999 ;;		_eval_poly
  8000 ;;		_sin
  8001 ;;		_sqrt
  8002 ;; This function uses a non-reentrant model
  8003 ;;
  8004                           
  8005                           	psect	text23
  8006  004E9C                     __ptext23:
  8007                           	opt stack 0
  8008  004E9C                     ___flmul:
  8009                           	opt stack 21
  8010                           
  8011                           ; BSR set to: 0
  8012                           ;incstack = 0
  8013  004E9C  0100               	movlb	0	; () banked
  8014  004E9E  3592               	rlcf	(___flmul@f1+2)& (0+255),w,b
  8015  004EA0  3593               	rlcf	(___flmul@f1+3)& (0+255),w,b
  8016  004EA2  0100               	movlb	0	; () banked
  8017  004EA4  6F98               	movwf	___flmul@exp& (0+255),b
  8018  004EA6  0100               	movlb	0	; () banked
  8019  004EA8  5198               	movf	___flmul@exp& (0+255),w,b
  8020  004EAA  A4D8               	btfss	status,2,c
  8021  004EAC  D00A               	goto	l6122
  8022                           
  8023                           ; BSR set to: 0
  8024  004EAE  0E00               	movlw	0
  8025  004EB0  0100               	movlb	0	; () banked
  8026  004EB2  6F90               	movwf	?___flmul& (0+255),b
  8027  004EB4  0E00               	movlw	0
  8028  004EB6  6F91               	movwf	(?___flmul+1)& (0+255),b
  8029  004EB8  0E00               	movlw	0
  8030  004EBA  6F92               	movwf	(?___flmul+2)& (0+255),b
  8031  004EBC  0E00               	movlw	0
  8032  004EBE  6F93               	movwf	(?___flmul+3)& (0+255),b
  8033                           
  8034                           ; BSR set to: 0
  8035  004EC0  0012               	return	
  8036  004EC2                     l6122:
  8037                           
  8038                           ; BSR set to: 0
  8039  004EC2  0100               	movlb	0	; () banked
  8040  004EC4  3596               	rlcf	(___flmul@f2+2)& (0+255),w,b
  8041  004EC6  3597               	rlcf	(___flmul@f2+3)& (0+255),w,b
  8042  004EC8  0100               	movlb	0	; () banked
  8043  004ECA  6F9E               	movwf	___flmul@sign& (0+255),b
  8044  004ECC  0100               	movlb	0	; () banked
  8045  004ECE  519E               	movf	___flmul@sign& (0+255),w,b
  8046  004ED0  A4D8               	btfss	status,2,c
  8047  004ED2  D00A               	goto	l6128
  8048                           
  8049                           ; BSR set to: 0
  8050  004ED4  0E00               	movlw	0
  8051  004ED6  0100               	movlb	0	; () banked
  8052  004ED8  6F90               	movwf	?___flmul& (0+255),b
  8053  004EDA  0E00               	movlw	0
  8054  004EDC  6F91               	movwf	(?___flmul+1)& (0+255),b
  8055  004EDE  0E00               	movlw	0
  8056  004EE0  6F92               	movwf	(?___flmul+2)& (0+255),b
  8057  004EE2  0E00               	movlw	0
  8058  004EE4  6F93               	movwf	(?___flmul+3)& (0+255),b
  8059                           
  8060                           ; BSR set to: 0
  8061  004EE6  0012               	return	
  8062  004EE8                     l6128:
  8063                           
  8064                           ; BSR set to: 0
  8065  004EE8  0100               	movlb	0	; () banked
  8066  004EEA  519E               	movf	___flmul@sign& (0+255),w,b
  8067  004EEC  0F7B               	addlw	123
  8068  004EEE  0100               	movlb	0	; () banked
  8069  004EF0  2798               	addwf	___flmul@exp& (0+255),f,b
  8070                           
  8071                           ; BSR set to: 0
  8072  004EF2  C093  F09E         	movff	___flmul@f1+3,___flmul@sign
  8073  004EF6  0100               	movlb	0	; () banked
  8074  004EF8  5197               	movf	(___flmul@f2+3)& (0+255),w,b
  8075  004EFA  0100               	movlb	0	; () banked
  8076  004EFC  1B9E               	xorwf	___flmul@sign& (0+255),f,b
  8077  004EFE  0E80               	movlw	128
  8078  004F00  0100               	movlb	0	; () banked
  8079  004F02  179E               	andwf	___flmul@sign& (0+255),f,b
  8080                           
  8081                           ; BSR set to: 0
  8082  004F04  0100               	movlb	0	; () banked
  8083  004F06  8F92               	bsf	(___flmul@f1+2)& (0+255),7,b
  8084                           
  8085                           ; BSR set to: 0
  8086  004F08  0100               	movlb	0	; () banked
  8087  004F0A  8F96               	bsf	(___flmul@f2+2)& (0+255),7,b
  8088  004F0C  0EFF               	movlw	255
  8089  004F0E  0100               	movlb	0	; () banked
  8090  004F10  1794               	andwf	___flmul@f2& (0+255),f,b
  8091  004F12  0EFF               	movlw	255
  8092  004F14  1795               	andwf	(___flmul@f2+1)& (0+255),f,b
  8093  004F16  0EFF               	movlw	255
  8094  004F18  1796               	andwf	(___flmul@f2+2)& (0+255),f,b
  8095  004F1A  0E00               	movlw	0
  8096  004F1C  1797               	andwf	(___flmul@f2+3)& (0+255),f,b
  8097                           
  8098                           ; BSR set to: 0
  8099  004F1E  0E00               	movlw	0
  8100  004F20  0100               	movlb	0	; () banked
  8101  004F22  6F99               	movwf	___flmul@f3_as_product& (0+255),b
  8102  004F24  0E00               	movlw	0
  8103  004F26  6F9A               	movwf	(___flmul@f3_as_product+1)& (0+255),b
  8104  004F28  0E00               	movlw	0
  8105  004F2A  6F9B               	movwf	(___flmul@f3_as_product+2)& (0+255),b
  8106  004F2C  0E00               	movlw	0
  8107  004F2E  6F9C               	movwf	(___flmul@f3_as_product+3)& (0+255),b
  8108                           
  8109                           ; BSR set to: 0
  8110  004F30  0E07               	movlw	7
  8111  004F32  0100               	movlb	0	; () banked
  8112  004F34  6F9D               	movwf	___flmul@cntr& (0+255),b
  8113  004F36  D000               	goto	l6140
  8114  004F38                     l6140:
  8115                           
  8116                           ; BSR set to: 0
  8117  004F38  0100               	movlb	0	; () banked
  8118  004F3A  A190               	btfss	___flmul@f1& (0+255),0,b
  8119  004F3C  D011               	goto	l6144
  8120                           
  8121                           ; BSR set to: 0
  8122  004F3E  0100               	movlb	0	; () banked
  8123  004F40  5194               	movf	___flmul@f2& (0+255),w,b
  8124  004F42  0100               	movlb	0	; () banked
  8125  004F44  2799               	addwf	___flmul@f3_as_product& (0+255),f,b
  8126  004F46  0100               	movlb	0	; () banked
  8127  004F48  5195               	movf	(___flmul@f2+1)& (0+255),w,b
  8128  004F4A  0100               	movlb	0	; () banked
  8129  004F4C  239A               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8130  004F4E  0100               	movlb	0	; () banked
  8131  004F50  5196               	movf	(___flmul@f2+2)& (0+255),w,b
  8132  004F52  0100               	movlb	0	; () banked
  8133  004F54  239B               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8134  004F56  0100               	movlb	0	; () banked
  8135  004F58  5197               	movf	(___flmul@f2+3)& (0+255),w,b
  8136  004F5A  0100               	movlb	0	; () banked
  8137  004F5C  239C               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8138  004F5E  D000               	goto	l6144
  8139  004F60                     l6144:
  8140                           
  8141                           ; BSR set to: 0
  8142  004F60  0100               	movlb	0	; () banked
  8143  004F62  90D8               	bcf	status,0,c
  8144  004F64  3393               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8145  004F66  3392               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8146  004F68  3391               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8147  004F6A  3390               	rrcf	___flmul@f1& (0+255),f,b
  8148                           
  8149                           ; BSR set to: 0
  8150  004F6C  0100               	movlb	0	; () banked
  8151  004F6E  90D8               	bcf	status,0,c
  8152  004F70  3794               	rlcf	___flmul@f2& (0+255),f,b
  8153  004F72  3795               	rlcf	(___flmul@f2+1)& (0+255),f,b
  8154  004F74  3796               	rlcf	(___flmul@f2+2)& (0+255),f,b
  8155  004F76  3797               	rlcf	(___flmul@f2+3)& (0+255),f,b
  8156                           
  8157                           ; BSR set to: 0
  8158  004F78  0100               	movlb	0	; () banked
  8159  004F7A  2F9D               	decfsz	___flmul@cntr& (0+255),f,b
  8160  004F7C  D7DD               	goto	l6140
  8161  004F7E  D000               	goto	l6150
  8162  004F80                     l6150:
  8163                           
  8164                           ; BSR set to: 0
  8165  004F80  0E11               	movlw	17
  8166  004F82  0100               	movlb	0	; () banked
  8167  004F84  6F9D               	movwf	___flmul@cntr& (0+255),b
  8168  004F86  D000               	goto	l6152
  8169  004F88                     l6152:
  8170                           
  8171                           ; BSR set to: 0
  8172  004F88  0100               	movlb	0	; () banked
  8173  004F8A  A190               	btfss	___flmul@f1& (0+255),0,b
  8174  004F8C  D011               	goto	l6156
  8175                           
  8176                           ; BSR set to: 0
  8177  004F8E  0100               	movlb	0	; () banked
  8178  004F90  5194               	movf	___flmul@f2& (0+255),w,b
  8179  004F92  0100               	movlb	0	; () banked
  8180  004F94  2799               	addwf	___flmul@f3_as_product& (0+255),f,b
  8181  004F96  0100               	movlb	0	; () banked
  8182  004F98  5195               	movf	(___flmul@f2+1)& (0+255),w,b
  8183  004F9A  0100               	movlb	0	; () banked
  8184  004F9C  239A               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8185  004F9E  0100               	movlb	0	; () banked
  8186  004FA0  5196               	movf	(___flmul@f2+2)& (0+255),w,b
  8187  004FA2  0100               	movlb	0	; () banked
  8188  004FA4  239B               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8189  004FA6  0100               	movlb	0	; () banked
  8190  004FA8  5197               	movf	(___flmul@f2+3)& (0+255),w,b
  8191  004FAA  0100               	movlb	0	; () banked
  8192  004FAC  239C               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8193  004FAE  D000               	goto	l6156
  8194  004FB0                     l6156:
  8195                           
  8196                           ; BSR set to: 0
  8197  004FB0  0100               	movlb	0	; () banked
  8198  004FB2  90D8               	bcf	status,0,c
  8199  004FB4  3393               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8200  004FB6  3392               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8201  004FB8  3391               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8202  004FBA  3390               	rrcf	___flmul@f1& (0+255),f,b
  8203                           
  8204                           ; BSR set to: 0
  8205  004FBC  0100               	movlb	0	; () banked
  8206  004FBE  90D8               	bcf	status,0,c
  8207  004FC0  339C               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
  8208  004FC2  339B               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
  8209  004FC4  339A               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
  8210  004FC6  3399               	rrcf	___flmul@f3_as_product& (0+255),f,b
  8211                           
  8212                           ; BSR set to: 0
  8213  004FC8  0100               	movlb	0	; () banked
  8214  004FCA  2F9D               	decfsz	___flmul@cntr& (0+255),f,b
  8215  004FCC  D7DD               	goto	l6152
  8216  004FCE  D000               	goto	l6162
  8217  004FD0                     l6162:
  8218                           
  8219                           ; BSR set to: 0
  8220  004FD0  C099  F077         	movff	___flmul@f3_as_product,___flpack@arg
  8221  004FD4  C09A  F078         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  8222  004FD8  C09B  F079         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  8223  004FDC  C09C  F07A         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  8224  004FE0  C098  F07B         	movff	___flmul@exp,___flpack@exp
  8225  004FE4  C09E  F07C         	movff	___flmul@sign,___flpack@sign
  8226  004FE8  EC8E  F026         	call	___flpack	;wreg free
  8227  004FEC  C077  F090         	movff	?___flpack,?___flmul
  8228  004FF0  C078  F091         	movff	?___flpack+1,?___flmul+1
  8229  004FF4  C079  F092         	movff	?___flpack+2,?___flmul+2
  8230  004FF8  C07A  F093         	movff	?___flpack+3,?___flmul+3
  8231  004FFC  0012               	return	
  8232  004FFE  0012               	return		;funcret
  8233  005000                     __end_of___flmul:
  8234                           	opt stack 0
  8235                           tblptru	equ	0xFF8
  8236                           tblptrh	equ	0xFF7
  8237                           tblptrl	equ	0xFF6
  8238                           tablat	equ	0xFF5
  8239                           postinc0	equ	0xFEE
  8240                           wreg	equ	0xFE8
  8241                           postdec1	equ	0xFE5
  8242                           fsr1l	equ	0xFE1
  8243                           indf2	equ	0xFDF
  8244                           postinc2	equ	0xFDE
  8245                           postdec2	equ	0xFDD
  8246                           fsr2h	equ	0xFDA
  8247                           fsr2l	equ	0xFD9
  8248                           status	equ	0xFD8
  8249                           
  8250 ;; *************** function ___fladd *****************
  8251 ;; Defined at:
  8252 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;  f1              4   63[BANK0 ] unsigned char 
  8255 ;;  f2              4   67[BANK0 ] unsigned char 
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;  exp1            1   74[BANK0 ] unsigned char 
  8258 ;;  exp2            1   73[BANK0 ] unsigned char 
  8259 ;;  sign            1   72[BANK0 ] unsigned char 
  8260 ;; Return value:  Size  Location     Type
  8261 ;;                  4   63[BANK0 ] unsigned char 
  8262 ;; Registers used:
  8263 ;;		wreg, status,2, status,0, cstack
  8264 ;; Tracked objects:
  8265 ;;		On entry : 0/0
  8266 ;;		On exit  : 0/0
  8267 ;;		Unchanged: 0/0
  8268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8269 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8271 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;Total ram usage:       12 bytes
  8274 ;; Hardware stack levels used:    1
  8275 ;; Hardware stack levels required when called:    6
  8276 ;; This function calls:
  8277 ;;		___flpack
  8278 ;; This function is called by:
  8279 ;;		_park_routine
  8280 ;;		_parallelo
  8281 ;;		_matematica
  8282 ;;		_asin
  8283 ;;		_atan
  8284 ;;		_cos
  8285 ;;		_eval_poly
  8286 ;;		___flsub
  8287 ;;		_sin
  8288 ;;		_floor
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           	psect	text24
  8293  00403E                     __ptext24:
  8294                           	opt stack 0
  8295  00403E                     ___fladd:
  8296                           	opt stack 20
  8297                           
  8298                           ;incstack = 0
  8299  00403E  0100               	movlb	0	; () banked
  8300  004040  35A1               	rlcf	(___fladd@f1+2)& (0+255),w,b
  8301  004042  35A2               	rlcf	(___fladd@f1+3)& (0+255),w,b
  8302  004044  0100               	movlb	0	; () banked
  8303  004046  6FAA               	movwf	___fladd@exp1& (0+255),b
  8304  004048  0100               	movlb	0	; () banked
  8305  00404A  35A5               	rlcf	(___fladd@f2+2)& (0+255),w,b
  8306  00404C  35A6               	rlcf	(___fladd@f2+3)& (0+255),w,b
  8307  00404E  0100               	movlb	0	; () banked
  8308  004050  6FA9               	movwf	___fladd@exp2& (0+255),b
  8309  004052  0100               	movlb	0	; () banked
  8310  004054  51AA               	movf	___fladd@exp1& (0+255),w,b
  8311  004056  0100               	movlb	0	; () banked
  8312  004058  B4D8               	btfsc	status,2,c
  8313  00405A  D011               	goto	l1156
  8314                           
  8315                           ; BSR set to: 0
  8316  00405C  0100               	movlb	0	; () banked
  8317  00405E  51A9               	movf	___fladd@exp2& (0+255),w,b
  8318  004060  0100               	movlb	0	; () banked
  8319  004062  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  8320  004064  B0D8               	btfsc	status,0,c
  8321  004066  D014               	goto	l6054
  8322                           
  8323                           ; BSR set to: 0
  8324  004068  0100               	movlb	0	; () banked
  8325  00406A  51AA               	movf	___fladd@exp1& (0+255),w,b
  8326  00406C  0800               	sublw	0
  8327  00406E  0100               	movlb	0	; () banked
  8328  004070  25A9               	addwf	___fladd@exp2& (0+255),w,b
  8329  004072  0100               	movlb	0	; () banked
  8330  004074  6FA7               	movwf	??___fladd& (0+255),b
  8331  004076  0E20               	movlw	32
  8332  004078  0100               	movlb	0	; () banked
  8333  00407A  65A7               	cpfsgt	??___fladd& (0+255),b
  8334  00407C  D009               	goto	l6054
  8335  00407E                     l1156:
  8336                           
  8337                           ; BSR set to: 0
  8338  00407E  C0A3  F09F         	movff	___fladd@f2,?___fladd
  8339  004082  C0A4  F0A0         	movff	___fladd@f2+1,?___fladd+1
  8340  004086  C0A5  F0A1         	movff	___fladd@f2+2,?___fladd+2
  8341  00408A  C0A6  F0A2         	movff	___fladd@f2+3,?___fladd+3
  8342  00408E  0012               	return	
  8343  004090                     l6054:
  8344                           
  8345                           ; BSR set to: 0
  8346  004090  0100               	movlb	0	; () banked
  8347  004092  51A9               	movf	___fladd@exp2& (0+255),w,b
  8348  004094  0100               	movlb	0	; () banked
  8349  004096  B4D8               	btfsc	status,2,c
  8350  004098  D011               	goto	l1160
  8351                           
  8352                           ; BSR set to: 0
  8353  00409A  0100               	movlb	0	; () banked
  8354  00409C  51AA               	movf	___fladd@exp1& (0+255),w,b
  8355  00409E  0100               	movlb	0	; () banked
  8356  0040A0  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  8357  0040A2  B0D8               	btfsc	status,0,c
  8358  0040A4  D014               	goto	l6060
  8359                           
  8360                           ; BSR set to: 0
  8361  0040A6  0100               	movlb	0	; () banked
  8362  0040A8  51A9               	movf	___fladd@exp2& (0+255),w,b
  8363  0040AA  0800               	sublw	0
  8364  0040AC  0100               	movlb	0	; () banked
  8365  0040AE  25AA               	addwf	___fladd@exp1& (0+255),w,b
  8366  0040B0  0100               	movlb	0	; () banked
  8367  0040B2  6FA7               	movwf	??___fladd& (0+255),b
  8368  0040B4  0E20               	movlw	32
  8369  0040B6  0100               	movlb	0	; () banked
  8370  0040B8  65A7               	cpfsgt	??___fladd& (0+255),b
  8371  0040BA  D009               	goto	l6060
  8372  0040BC                     l1160:
  8373                           
  8374                           ; BSR set to: 0
  8375  0040BC  C09F  F09F         	movff	___fladd@f1,?___fladd
  8376  0040C0  C0A0  F0A0         	movff	___fladd@f1+1,?___fladd+1
  8377  0040C4  C0A1  F0A1         	movff	___fladd@f1+2,?___fladd+2
  8378  0040C8  C0A2  F0A2         	movff	___fladd@f1+3,?___fladd+3
  8379  0040CC  0012               	return	
  8380  0040CE                     l6060:
  8381                           
  8382                           ; BSR set to: 0
  8383  0040CE  0E06               	movlw	6
  8384  0040D0  0100               	movlb	0	; () banked
  8385  0040D2  6FA8               	movwf	___fladd@sign& (0+255),b
  8386                           
  8387                           ; BSR set to: 0
  8388  0040D4  0100               	movlb	0	; () banked
  8389  0040D6  AFA2               	btfss	(___fladd@f1+3)& (0+255),7,b
  8390  0040D8  D003               	goto	l6066
  8391                           
  8392                           ; BSR set to: 0
  8393  0040DA  0100               	movlb	0	; () banked
  8394  0040DC  8FA8               	bsf	___fladd@sign& (0+255),7,b
  8395  0040DE  D000               	goto	l6066
  8396  0040E0                     l6066:
  8397                           
  8398                           ; BSR set to: 0
  8399  0040E0  0100               	movlb	0	; () banked
  8400  0040E2  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  8401  0040E4  D002               	goto	l1162
  8402                           
  8403                           ; BSR set to: 0
  8404  0040E6  0100               	movlb	0	; () banked
  8405  0040E8  8DA8               	bsf	___fladd@sign& (0+255),6,b
  8406  0040EA                     l1162:
  8407                           
  8408                           ; BSR set to: 0
  8409  0040EA  0100               	movlb	0	; () banked
  8410  0040EC  8FA1               	bsf	(___fladd@f1+2)& (0+255),7,b
  8411                           
  8412                           ; BSR set to: 0
  8413  0040EE  0EFF               	movlw	255
  8414  0040F0  0100               	movlb	0	; () banked
  8415  0040F2  179F               	andwf	___fladd@f1& (0+255),f,b
  8416  0040F4  0EFF               	movlw	255
  8417  0040F6  17A0               	andwf	(___fladd@f1+1)& (0+255),f,b
  8418  0040F8  0EFF               	movlw	255
  8419  0040FA  17A1               	andwf	(___fladd@f1+2)& (0+255),f,b
  8420  0040FC  0E00               	movlw	0
  8421  0040FE  17A2               	andwf	(___fladd@f1+3)& (0+255),f,b
  8422                           
  8423                           ; BSR set to: 0
  8424  004100  0100               	movlb	0	; () banked
  8425  004102  8FA5               	bsf	(___fladd@f2+2)& (0+255),7,b
  8426  004104  0EFF               	movlw	255
  8427  004106  0100               	movlb	0	; () banked
  8428  004108  17A3               	andwf	___fladd@f2& (0+255),f,b
  8429  00410A  0EFF               	movlw	255
  8430  00410C  17A4               	andwf	(___fladd@f2+1)& (0+255),f,b
  8431  00410E  0EFF               	movlw	255
  8432  004110  17A5               	andwf	(___fladd@f2+2)& (0+255),f,b
  8433  004112  0E00               	movlw	0
  8434  004114  17A6               	andwf	(___fladd@f2+3)& (0+255),f,b
  8435  004116  0100               	movlb	0	; () banked
  8436  004118  51A9               	movf	___fladd@exp2& (0+255),w,b
  8437  00411A  0100               	movlb	0	; () banked
  8438  00411C  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  8439  00411E  B0D8               	btfsc	status,0,c
  8440  004120  D02A               	goto	l6084
  8441  004122                     l6074:
  8442                           
  8443                           ; BSR set to: 0
  8444  004122  0100               	movlb	0	; () banked
  8445  004124  90D8               	bcf	status,0,c
  8446  004126  37A3               	rlcf	___fladd@f2& (0+255),f,b
  8447  004128  37A4               	rlcf	(___fladd@f2+1)& (0+255),f,b
  8448  00412A  37A5               	rlcf	(___fladd@f2+2)& (0+255),f,b
  8449  00412C  37A6               	rlcf	(___fladd@f2+3)& (0+255),f,b
  8450  00412E  0100               	movlb	0	; () banked
  8451  004130  07A9               	decf	___fladd@exp2& (0+255),f,b
  8452                           
  8453                           ; BSR set to: 0
  8454  004132  0100               	movlb	0	; () banked
  8455  004134  51AA               	movf	___fladd@exp1& (0+255),w,b
  8456  004136  0100               	movlb	0	; () banked
  8457  004138  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  8458  00413A  B4D8               	btfsc	status,2,c
  8459  00413C  D014               	goto	l6082
  8460                           
  8461                           ; BSR set to: 0
  8462  00413E  0100               	movlb	0	; () banked
  8463  004140  07A8               	decf	___fladd@sign& (0+255),f,b
  8464  004142  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  8465  004146  0E07               	movlw	7
  8466  004148  0100               	movlb	0	; () banked
  8467  00414A  17A7               	andwf	??___fladd& (0+255),f,b
  8468  00414C  B4D8               	btfsc	status,2,c
  8469  00414E  D00B               	goto	l6082
  8470  004150  D7E8               	goto	l6074
  8471                           
  8472                           ; BSR set to: 0
  8473                           
  8474                           ; BSR set to: 0
  8475  004152  D009               	goto	l6082
  8476  004154                     l6080:
  8477                           
  8478                           ; BSR set to: 0
  8479  004154  0100               	movlb	0	; () banked
  8480  004156  90D8               	bcf	status,0,c
  8481  004158  33A2               	rrcf	(___fladd@f1+3)& (0+255),f,b
  8482  00415A  33A1               	rrcf	(___fladd@f1+2)& (0+255),f,b
  8483  00415C  33A0               	rrcf	(___fladd@f1+1)& (0+255),f,b
  8484  00415E  339F               	rrcf	___fladd@f1& (0+255),f,b
  8485  004160  0100               	movlb	0	; () banked
  8486  004162  2BAA               	incf	___fladd@exp1& (0+255),f,b
  8487  004164  D000               	goto	l6082
  8488  004166                     l6082:
  8489                           
  8490                           ; BSR set to: 0
  8491  004166  0100               	movlb	0	; () banked
  8492  004168  51A9               	movf	___fladd@exp2& (0+255),w,b
  8493  00416A  0100               	movlb	0	; () banked
  8494  00416C  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  8495  00416E  B4D8               	btfsc	status,2,c
  8496  004170  D032               	goto	l1171
  8497  004172  D7F0               	goto	l6080
  8498                           
  8499                           ; BSR set to: 0
  8500  004174  D030               	goto	l1171
  8501  004176                     l6084:
  8502                           
  8503                           ; BSR set to: 0
  8504  004176  0100               	movlb	0	; () banked
  8505  004178  51AA               	movf	___fladd@exp1& (0+255),w,b
  8506  00417A  0100               	movlb	0	; () banked
  8507  00417C  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  8508  00417E  B0D8               	btfsc	status,0,c
  8509  004180  D02A               	goto	l1171
  8510  004182                     l6086:
  8511                           
  8512                           ; BSR set to: 0
  8513  004182  0100               	movlb	0	; () banked
  8514  004184  90D8               	bcf	status,0,c
  8515  004186  379F               	rlcf	___fladd@f1& (0+255),f,b
  8516  004188  37A0               	rlcf	(___fladd@f1+1)& (0+255),f,b
  8517  00418A  37A1               	rlcf	(___fladd@f1+2)& (0+255),f,b
  8518  00418C  37A2               	rlcf	(___fladd@f1+3)& (0+255),f,b
  8519  00418E  0100               	movlb	0	; () banked
  8520  004190  07AA               	decf	___fladd@exp1& (0+255),f,b
  8521                           
  8522                           ; BSR set to: 0
  8523  004192  0100               	movlb	0	; () banked
  8524  004194  51AA               	movf	___fladd@exp1& (0+255),w,b
  8525  004196  0100               	movlb	0	; () banked
  8526  004198  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  8527  00419A  B4D8               	btfsc	status,2,c
  8528  00419C  D014               	goto	l6094
  8529                           
  8530                           ; BSR set to: 0
  8531  00419E  0100               	movlb	0	; () banked
  8532  0041A0  07A8               	decf	___fladd@sign& (0+255),f,b
  8533  0041A2  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  8534  0041A6  0E07               	movlw	7
  8535  0041A8  0100               	movlb	0	; () banked
  8536  0041AA  17A7               	andwf	??___fladd& (0+255),f,b
  8537  0041AC  B4D8               	btfsc	status,2,c
  8538  0041AE  D00B               	goto	l6094
  8539  0041B0  D7E8               	goto	l6086
  8540                           
  8541                           ; BSR set to: 0
  8542                           
  8543                           ; BSR set to: 0
  8544  0041B2  D009               	goto	l6094
  8545  0041B4                     l6092:
  8546                           
  8547                           ; BSR set to: 0
  8548  0041B4  0100               	movlb	0	; () banked
  8549  0041B6  90D8               	bcf	status,0,c
  8550  0041B8  33A6               	rrcf	(___fladd@f2+3)& (0+255),f,b
  8551  0041BA  33A5               	rrcf	(___fladd@f2+2)& (0+255),f,b
  8552  0041BC  33A4               	rrcf	(___fladd@f2+1)& (0+255),f,b
  8553  0041BE  33A3               	rrcf	___fladd@f2& (0+255),f,b
  8554  0041C0  0100               	movlb	0	; () banked
  8555  0041C2  2BA9               	incf	___fladd@exp2& (0+255),f,b
  8556  0041C4  D000               	goto	l6094
  8557  0041C6                     l6094:
  8558                           
  8559                           ; BSR set to: 0
  8560  0041C6  0100               	movlb	0	; () banked
  8561  0041C8  51A9               	movf	___fladd@exp2& (0+255),w,b
  8562  0041CA  0100               	movlb	0	; () banked
  8563  0041CC  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  8564  0041CE  B4D8               	btfsc	status,2,c
  8565  0041D0  D002               	goto	l1171
  8566  0041D2  D7F0               	goto	l6092
  8567                           
  8568                           ; BSR set to: 0
  8569  0041D4  D000               	goto	l1171
  8570  0041D6                     l1171:
  8571                           
  8572                           ; BSR set to: 0
  8573  0041D6  0100               	movlb	0	; () banked
  8574  0041D8  AFA8               	btfss	___fladd@sign& (0+255),7,b
  8575  0041DA  D011               	goto	l6098
  8576                           
  8577                           ; BSR set to: 0
  8578  0041DC  0EFF               	movlw	255
  8579  0041DE  0100               	movlb	0	; () banked
  8580  0041E0  1B9F               	xorwf	___fladd@f1& (0+255),f,b
  8581  0041E2  0EFF               	movlw	255
  8582  0041E4  1BA0               	xorwf	(___fladd@f1+1)& (0+255),f,b
  8583  0041E6  0EFF               	movlw	255
  8584  0041E8  1BA1               	xorwf	(___fladd@f1+2)& (0+255),f,b
  8585  0041EA  0EFF               	movlw	255
  8586  0041EC  1BA2               	xorwf	(___fladd@f1+3)& (0+255),f,b
  8587  0041EE  0E01               	movlw	1
  8588  0041F0  0100               	movlb	0	; () banked
  8589  0041F2  279F               	addwf	___fladd@f1& (0+255),f,b
  8590  0041F4  0E00               	movlw	0
  8591  0041F6  23A0               	addwfc	(___fladd@f1+1)& (0+255),f,b
  8592  0041F8  23A1               	addwfc	(___fladd@f1+2)& (0+255),f,b
  8593  0041FA  23A2               	addwfc	(___fladd@f1+3)& (0+255),f,b
  8594  0041FC  D000               	goto	l6098
  8595  0041FE                     l6098:
  8596                           
  8597                           ; BSR set to: 0
  8598  0041FE  0100               	movlb	0	; () banked
  8599  004200  ADA8               	btfss	___fladd@sign& (0+255),6,b
  8600  004202  D011               	goto	l6102
  8601                           
  8602                           ; BSR set to: 0
  8603  004204  0EFF               	movlw	255
  8604  004206  0100               	movlb	0	; () banked
  8605  004208  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  8606  00420A  0EFF               	movlw	255
  8607  00420C  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  8608  00420E  0EFF               	movlw	255
  8609  004210  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  8610  004212  0EFF               	movlw	255
  8611  004214  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  8612  004216  0E01               	movlw	1
  8613  004218  0100               	movlb	0	; () banked
  8614  00421A  27A3               	addwf	___fladd@f2& (0+255),f,b
  8615  00421C  0E00               	movlw	0
  8616  00421E  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8617  004220  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8618  004222  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8619  004224  D000               	goto	l6102
  8620  004226                     l6102:
  8621                           
  8622                           ; BSR set to: 0
  8623  004226  0E00               	movlw	0
  8624  004228  0100               	movlb	0	; () banked
  8625  00422A  6FA8               	movwf	___fladd@sign& (0+255),b
  8626                           
  8627                           ; BSR set to: 0
  8628  00422C  0100               	movlb	0	; () banked
  8629  00422E  519F               	movf	___fladd@f1& (0+255),w,b
  8630  004230  0100               	movlb	0	; () banked
  8631  004232  27A3               	addwf	___fladd@f2& (0+255),f,b
  8632  004234  0100               	movlb	0	; () banked
  8633  004236  51A0               	movf	(___fladd@f1+1)& (0+255),w,b
  8634  004238  0100               	movlb	0	; () banked
  8635  00423A  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8636  00423C  0100               	movlb	0	; () banked
  8637  00423E  51A1               	movf	(___fladd@f1+2)& (0+255),w,b
  8638  004240  0100               	movlb	0	; () banked
  8639  004242  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8640  004244  0100               	movlb	0	; () banked
  8641  004246  51A2               	movf	(___fladd@f1+3)& (0+255),w,b
  8642  004248  0100               	movlb	0	; () banked
  8643  00424A  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8644                           
  8645                           ; BSR set to: 0
  8646  00424C  0100               	movlb	0	; () banked
  8647  00424E  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  8648  004250  D014               	goto	l6112
  8649                           
  8650                           ; BSR set to: 0
  8651  004252  0EFF               	movlw	255
  8652  004254  0100               	movlb	0	; () banked
  8653  004256  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  8654  004258  0EFF               	movlw	255
  8655  00425A  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  8656  00425C  0EFF               	movlw	255
  8657  00425E  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  8658  004260  0EFF               	movlw	255
  8659  004262  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  8660  004264  0E01               	movlw	1
  8661  004266  0100               	movlb	0	; () banked
  8662  004268  27A3               	addwf	___fladd@f2& (0+255),f,b
  8663  00426A  0E00               	movlw	0
  8664  00426C  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  8665  00426E  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  8666  004270  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  8667                           
  8668                           ; BSR set to: 0
  8669  004272  0E01               	movlw	1
  8670  004274  0100               	movlb	0	; () banked
  8671  004276  6FA8               	movwf	___fladd@sign& (0+255),b
  8672  004278  D000               	goto	l6112
  8673  00427A                     l6112:
  8674                           
  8675                           ; BSR set to: 0
  8676  00427A  C0A3  F077         	movff	___fladd@f2,___flpack@arg
  8677  00427E  C0A4  F078         	movff	___fladd@f2+1,___flpack@arg+1
  8678  004282  C0A5  F079         	movff	___fladd@f2+2,___flpack@arg+2
  8679  004286  C0A6  F07A         	movff	___fladd@f2+3,___flpack@arg+3
  8680  00428A  C0AA  F07B         	movff	___fladd@exp1,___flpack@exp
  8681  00428E  C0A8  F07C         	movff	___fladd@sign,___flpack@sign
  8682  004292  EC8E  F026         	call	___flpack	;wreg free
  8683  004296  C077  F09F         	movff	?___flpack,?___fladd
  8684  00429A  C078  F0A0         	movff	?___flpack+1,?___fladd+1
  8685  00429E  C079  F0A1         	movff	?___flpack+2,?___fladd+2
  8686  0042A2  C07A  F0A2         	movff	?___flpack+3,?___fladd+3
  8687  0042A6  0012               	return	
  8688  0042A8  0012               	return		;funcret
  8689  0042AA                     __end_of___fladd:
  8690                           	opt stack 0
  8691                           tblptru	equ	0xFF8
  8692                           tblptrh	equ	0xFF7
  8693                           tblptrl	equ	0xFF6
  8694                           tablat	equ	0xFF5
  8695                           postinc0	equ	0xFEE
  8696                           wreg	equ	0xFE8
  8697                           postdec1	equ	0xFE5
  8698                           fsr1l	equ	0xFE1
  8699                           indf2	equ	0xFDF
  8700                           postinc2	equ	0xFDE
  8701                           postdec2	equ	0xFDD
  8702                           fsr2h	equ	0xFDA
  8703                           fsr2l	equ	0xFD9
  8704                           status	equ	0xFD8
  8705                           
  8706 ;; *************** function ___flge *****************
  8707 ;; Defined at:
  8708 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;  ff1             4   83[BANK0 ] unsigned char 
  8711 ;;  ff2             4   87[BANK0 ] unsigned char 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;		None
  8714 ;; Return value:  Size  Location     Type
  8715 ;;		None               void
  8716 ;; Registers used:
  8717 ;;		wreg, status,2, status,0
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8723 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;Total ram usage:       12 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    5
  8730 ;; This function calls:
  8731 ;;		Nothing
  8732 ;; This function is called by:
  8733 ;;		_parallelo
  8734 ;;		_asin
  8735 ;;		_atan
  8736 ;;		_cos
  8737 ;;		_sin
  8738 ;;		_sqrt
  8739 ;;		_floor
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           	psect	text25
  8744  00569E                     __ptext25:
  8745                           	opt stack 0
  8746  00569E                     ___flge:
  8747                           	opt stack 22
  8748                           
  8749                           ;incstack = 0
  8750  00569E  0100               	movlb	0	; () banked
  8751  0056A0  AFB6               	btfss	(___flge@ff1+3)& (0+255),7,b
  8752  0056A2  D027               	goto	l6170
  8753                           
  8754                           ; BSR set to: 0
  8755  0056A4  C0B3  F0BB         	movff	___flge@ff1,??___flge
  8756  0056A8  C0B4  F0BC         	movff	___flge@ff1+1,??___flge+1
  8757  0056AC  C0B5  F0BD         	movff	___flge@ff1+2,??___flge+2
  8758  0056B0  C0B6  F0BE         	movff	___flge@ff1+3,??___flge+3
  8759  0056B4  0100               	movlb	0	; () banked
  8760  0056B6  1FBB               	comf	??___flge& (0+255),f,b
  8761  0056B8  1FBC               	comf	(??___flge+1)& (0+255),f,b
  8762  0056BA  1FBD               	comf	(??___flge+2)& (0+255),f,b
  8763  0056BC  1FBE               	comf	(??___flge+3)& (0+255),f,b
  8764  0056BE  2BBB               	incf	??___flge& (0+255),f,b
  8765  0056C0  0E00               	movlw	0
  8766  0056C2  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  8767  0056C4  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  8768  0056C6  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  8769  0056C8  0E00               	movlw	0
  8770  0056CA  0100               	movlb	0	; () banked
  8771  0056CC  25BB               	addwf	??___flge& (0+255),w,b
  8772  0056CE  0100               	movlb	0	; () banked
  8773  0056D0  6FB3               	movwf	___flge@ff1& (0+255),b
  8774  0056D2  0E00               	movlw	0
  8775  0056D4  0100               	movlb	0	; () banked
  8776  0056D6  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  8777  0056D8  0100               	movlb	0	; () banked
  8778  0056DA  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  8779  0056DC  0E00               	movlw	0
  8780  0056DE  0100               	movlb	0	; () banked
  8781  0056E0  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  8782  0056E2  0100               	movlb	0	; () banked
  8783  0056E4  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  8784  0056E6  0E80               	movlw	128
  8785  0056E8  0100               	movlb	0	; () banked
  8786  0056EA  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  8787  0056EC  0100               	movlb	0	; () banked
  8788  0056EE  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  8789  0056F0  D000               	goto	l6170
  8790  0056F2                     l6170:
  8791                           
  8792                           ; BSR set to: 0
  8793  0056F2  0100               	movlb	0	; () banked
  8794  0056F4  AFBA               	btfss	(___flge@ff2+3)& (0+255),7,b
  8795  0056F6  D026               	goto	l1196
  8796                           
  8797                           ; BSR set to: 0
  8798  0056F8  C0B7  F0BB         	movff	___flge@ff2,??___flge
  8799  0056FC  C0B8  F0BC         	movff	___flge@ff2+1,??___flge+1
  8800  005700  C0B9  F0BD         	movff	___flge@ff2+2,??___flge+2
  8801  005704  C0BA  F0BE         	movff	___flge@ff2+3,??___flge+3
  8802  005708  0100               	movlb	0	; () banked
  8803  00570A  1FBB               	comf	??___flge& (0+255),f,b
  8804  00570C  1FBC               	comf	(??___flge+1)& (0+255),f,b
  8805  00570E  1FBD               	comf	(??___flge+2)& (0+255),f,b
  8806  005710  1FBE               	comf	(??___flge+3)& (0+255),f,b
  8807  005712  2BBB               	incf	??___flge& (0+255),f,b
  8808  005714  0E00               	movlw	0
  8809  005716  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  8810  005718  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  8811  00571A  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  8812  00571C  0E00               	movlw	0
  8813  00571E  0100               	movlb	0	; () banked
  8814  005720  25BB               	addwf	??___flge& (0+255),w,b
  8815  005722  0100               	movlb	0	; () banked
  8816  005724  6FB7               	movwf	___flge@ff2& (0+255),b
  8817  005726  0E00               	movlw	0
  8818  005728  0100               	movlb	0	; () banked
  8819  00572A  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  8820  00572C  0100               	movlb	0	; () banked
  8821  00572E  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  8822  005730  0E00               	movlw	0
  8823  005732  0100               	movlb	0	; () banked
  8824  005734  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  8825  005736  0100               	movlb	0	; () banked
  8826  005738  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  8827  00573A  0E80               	movlw	128
  8828  00573C  0100               	movlb	0	; () banked
  8829  00573E  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  8830  005740  0100               	movlb	0	; () banked
  8831  005742  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  8832  005744                     l1196:
  8833                           
  8834                           ; BSR set to: 0
  8835  005744  0E00               	movlw	0
  8836  005746  0100               	movlb	0	; () banked
  8837  005748  1BB3               	xorwf	___flge@ff1& (0+255),f,b
  8838  00574A  0E00               	movlw	0
  8839  00574C  1BB4               	xorwf	(___flge@ff1+1)& (0+255),f,b
  8840  00574E  0E00               	movlw	0
  8841  005750  1BB5               	xorwf	(___flge@ff1+2)& (0+255),f,b
  8842  005752  0E80               	movlw	128
  8843  005754  1BB6               	xorwf	(___flge@ff1+3)& (0+255),f,b
  8844  005756  0E00               	movlw	0
  8845  005758  0100               	movlb	0	; () banked
  8846  00575A  1BB7               	xorwf	___flge@ff2& (0+255),f,b
  8847  00575C  0E00               	movlw	0
  8848  00575E  1BB8               	xorwf	(___flge@ff2+1)& (0+255),f,b
  8849  005760  0E00               	movlw	0
  8850  005762  1BB9               	xorwf	(___flge@ff2+2)& (0+255),f,b
  8851  005764  0E80               	movlw	128
  8852  005766  1BBA               	xorwf	(___flge@ff2+3)& (0+255),f,b
  8853  005768  0100               	movlb	0	; () banked
  8854  00576A  51B7               	movf	___flge@ff2& (0+255),w,b
  8855  00576C  0100               	movlb	0	; () banked
  8856  00576E  5DB3               	subwf	___flge@ff1& (0+255),w,b
  8857  005770  0100               	movlb	0	; () banked
  8858  005772  51B8               	movf	(___flge@ff2+1)& (0+255),w,b
  8859  005774  0100               	movlb	0	; () banked
  8860  005776  59B4               	subwfb	(___flge@ff1+1)& (0+255),w,b
  8861  005778  0100               	movlb	0	; () banked
  8862  00577A  51B9               	movf	(___flge@ff2+2)& (0+255),w,b
  8863  00577C  0100               	movlb	0	; () banked
  8864  00577E  59B5               	subwfb	(___flge@ff1+2)& (0+255),w,b
  8865  005780  0100               	movlb	0	; () banked
  8866  005782  51BA               	movf	(___flge@ff2+3)& (0+255),w,b
  8867  005784  0100               	movlb	0	; () banked
  8868  005786  59B6               	subwfb	(___flge@ff1+3)& (0+255),w,b
  8869  005788  B0D8               	btfsc	status,0,c
  8870  00578A  D002               	goto	l6176
  8871                           
  8872                           ; BSR set to: 0
  8873  00578C  90D8               	bcf	status,0,c
  8874  00578E  0012               	return	
  8875  005790                     l6176:
  8876                           
  8877                           ; BSR set to: 0
  8878  005790  80D8               	bsf	status,0,c
  8879                           
  8880                           ; BSR set to: 0
  8881  005792  0012               	return	
  8882                           
  8883                           ; BSR set to: 0
  8884                           
  8885                           ; BSR set to: 0
  8886  005794  0012               	return		;funcret
  8887  005796                     __end_of___flge:
  8888                           	opt stack 0
  8889                           tblptru	equ	0xFF8
  8890                           tblptrh	equ	0xFF7
  8891                           tblptrl	equ	0xFF6
  8892                           tablat	equ	0xFF5
  8893                           postinc0	equ	0xFEE
  8894                           wreg	equ	0xFE8
  8895                           postdec1	equ	0xFE5
  8896                           fsr1l	equ	0xFE1
  8897                           indf2	equ	0xFDF
  8898                           postinc2	equ	0xFDE
  8899                           postdec2	equ	0xFDD
  8900                           fsr2h	equ	0xFDA
  8901                           fsr2l	equ	0xFD9
  8902                           status	equ	0xFD8
  8903                           
  8904 ;; *************** function ___fldiv *****************
  8905 ;; Defined at:
  8906 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  8907 ;; Parameters:    Size  Location     Type
  8908 ;;  f1              4   33[BANK0 ] unsigned char 
  8909 ;;  f2              4   37[BANK0 ] unsigned char 
  8910 ;; Auto vars:     Size  Location     Type
  8911 ;;  f3              4   41[BANK0 ] unsigned char 
  8912 ;;  sign            1   47[BANK0 ] unsigned char 
  8913 ;;  exp             1   46[BANK0 ] unsigned char 
  8914 ;;  cntr            1   45[BANK0 ] unsigned char 
  8915 ;; Return value:  Size  Location     Type
  8916 ;;                  4   33[BANK0 ] unsigned char 
  8917 ;; Registers used:
  8918 ;;		wreg, status,2, status,0, cstack
  8919 ;; Tracked objects:
  8920 ;;		On entry : 0/0
  8921 ;;		On exit  : 0/0
  8922 ;;		Unchanged: 0/0
  8923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8924 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;Total ram usage:       15 bytes
  8929 ;; Hardware stack levels used:    1
  8930 ;; Hardware stack levels required when called:    6
  8931 ;; This function calls:
  8932 ;;		___flpack
  8933 ;; This function is called by:
  8934 ;;		_parallelo
  8935 ;;		_matematica
  8936 ;;		_asin
  8937 ;;		_atan
  8938 ;;		_sin
  8939 ;; This function uses a non-reentrant model
  8940 ;;
  8941                           
  8942                           	psect	text26
  8943  005000                     __ptext26:
  8944                           	opt stack 0
  8945  005000                     ___fldiv:
  8946                           	opt stack 20
  8947                           
  8948                           ; BSR set to: 0
  8949                           ;incstack = 0
  8950  005000  0100               	movlb	0	; () banked
  8951  005002  3583               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  8952  005004  3584               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  8953  005006  0100               	movlb	0	; () banked
  8954  005008  6F8E               	movwf	___fldiv@exp& (0+255),b
  8955  00500A  0100               	movlb	0	; () banked
  8956  00500C  518E               	movf	___fldiv@exp& (0+255),w,b
  8957  00500E  A4D8               	btfss	status,2,c
  8958  005010  D00A               	goto	l6254
  8959                           
  8960                           ; BSR set to: 0
  8961  005012  0E00               	movlw	0
  8962  005014  0100               	movlb	0	; () banked
  8963  005016  6F81               	movwf	?___fldiv& (0+255),b
  8964  005018  0E00               	movlw	0
  8965  00501A  6F82               	movwf	(?___fldiv+1)& (0+255),b
  8966  00501C  0E00               	movlw	0
  8967  00501E  6F83               	movwf	(?___fldiv+2)& (0+255),b
  8968  005020  0E00               	movlw	0
  8969  005022  6F84               	movwf	(?___fldiv+3)& (0+255),b
  8970                           
  8971                           ; BSR set to: 0
  8972  005024  0012               	return	
  8973  005026                     l6254:
  8974                           
  8975                           ; BSR set to: 0
  8976  005026  0100               	movlb	0	; () banked
  8977  005028  3587               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  8978  00502A  3588               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  8979  00502C  0100               	movlb	0	; () banked
  8980  00502E  6F8F               	movwf	___fldiv@sign& (0+255),b
  8981  005030  0100               	movlb	0	; () banked
  8982  005032  518F               	movf	___fldiv@sign& (0+255),w,b
  8983  005034  A4D8               	btfss	status,2,c
  8984  005036  D00A               	goto	l6260
  8985                           
  8986                           ; BSR set to: 0
  8987  005038  0E00               	movlw	0
  8988  00503A  0100               	movlb	0	; () banked
  8989  00503C  6F81               	movwf	?___fldiv& (0+255),b
  8990  00503E  0E00               	movlw	0
  8991  005040  6F82               	movwf	(?___fldiv+1)& (0+255),b
  8992  005042  0E00               	movlw	0
  8993  005044  6F83               	movwf	(?___fldiv+2)& (0+255),b
  8994  005046  0E00               	movlw	0
  8995  005048  6F84               	movwf	(?___fldiv+3)& (0+255),b
  8996                           
  8997                           ; BSR set to: 0
  8998  00504A  0012               	return	
  8999  00504C                     l6260:
  9000                           
  9001                           ; BSR set to: 0
  9002  00504C  0100               	movlb	0	; () banked
  9003  00504E  518F               	movf	___fldiv@sign& (0+255),w,b
  9004  005050  0F89               	addlw	137
  9005  005052  0100               	movlb	0	; () banked
  9006  005054  5F8E               	subwf	___fldiv@exp& (0+255),f,b
  9007                           
  9008                           ; BSR set to: 0
  9009  005056  C084  F08F         	movff	___fldiv@f1+3,___fldiv@sign
  9010  00505A  0100               	movlb	0	; () banked
  9011  00505C  5188               	movf	(___fldiv@f2+3)& (0+255),w,b
  9012  00505E  0100               	movlb	0	; () banked
  9013  005060  1B8F               	xorwf	___fldiv@sign& (0+255),f,b
  9014  005062  0E80               	movlw	128
  9015  005064  0100               	movlb	0	; () banked
  9016  005066  178F               	andwf	___fldiv@sign& (0+255),f,b
  9017                           
  9018                           ; BSR set to: 0
  9019  005068  0100               	movlb	0	; () banked
  9020  00506A  8F83               	bsf	(___fldiv@f1+2)& (0+255),7,b
  9021                           
  9022                           ; BSR set to: 0
  9023  00506C  0EFF               	movlw	255
  9024  00506E  0100               	movlb	0	; () banked
  9025  005070  1781               	andwf	___fldiv@f1& (0+255),f,b
  9026  005072  0EFF               	movlw	255
  9027  005074  1782               	andwf	(___fldiv@f1+1)& (0+255),f,b
  9028  005076  0EFF               	movlw	255
  9029  005078  1783               	andwf	(___fldiv@f1+2)& (0+255),f,b
  9030  00507A  0E00               	movlw	0
  9031  00507C  1784               	andwf	(___fldiv@f1+3)& (0+255),f,b
  9032  00507E  0100               	movlb	0	; () banked
  9033  005080  8F87               	bsf	(___fldiv@f2+2)& (0+255),7,b
  9034                           
  9035                           ; BSR set to: 0
  9036  005082  0EFF               	movlw	255
  9037  005084  0100               	movlb	0	; () banked
  9038  005086  1785               	andwf	___fldiv@f2& (0+255),f,b
  9039  005088  0EFF               	movlw	255
  9040  00508A  1786               	andwf	(___fldiv@f2+1)& (0+255),f,b
  9041  00508C  0EFF               	movlw	255
  9042  00508E  1787               	andwf	(___fldiv@f2+2)& (0+255),f,b
  9043  005090  0E00               	movlw	0
  9044  005092  1788               	andwf	(___fldiv@f2+3)& (0+255),f,b
  9045                           
  9046                           ; BSR set to: 0
  9047  005094  0E20               	movlw	32
  9048  005096  0100               	movlb	0	; () banked
  9049  005098  6F8D               	movwf	___fldiv@cntr& (0+255),b
  9050  00509A  D000               	goto	l6272
  9051  00509C                     l6272:
  9052                           
  9053                           ; BSR set to: 0
  9054  00509C  0100               	movlb	0	; () banked
  9055  00509E  90D8               	bcf	status,0,c
  9056  0050A0  3789               	rlcf	___fldiv@f3& (0+255),f,b
  9057  0050A2  378A               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  9058  0050A4  378B               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  9059  0050A6  378C               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  9060                           
  9061                           ; BSR set to: 0
  9062  0050A8  0100               	movlb	0	; () banked
  9063  0050AA  5185               	movf	___fldiv@f2& (0+255),w,b
  9064  0050AC  0100               	movlb	0	; () banked
  9065  0050AE  5D81               	subwf	___fldiv@f1& (0+255),w,b
  9066  0050B0  0100               	movlb	0	; () banked
  9067  0050B2  5186               	movf	(___fldiv@f2+1)& (0+255),w,b
  9068  0050B4  0100               	movlb	0	; () banked
  9069  0050B6  5982               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  9070  0050B8  0100               	movlb	0	; () banked
  9071  0050BA  5187               	movf	(___fldiv@f2+2)& (0+255),w,b
  9072  0050BC  0100               	movlb	0	; () banked
  9073  0050BE  5983               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  9074  0050C0  0100               	movlb	0	; () banked
  9075  0050C2  5188               	movf	(___fldiv@f2+3)& (0+255),w,b
  9076  0050C4  0100               	movlb	0	; () banked
  9077  0050C6  5984               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  9078  0050C8  A0D8               	btfss	status,0,c
  9079  0050CA  D013               	goto	l6280
  9080                           
  9081                           ; BSR set to: 0
  9082  0050CC  0100               	movlb	0	; () banked
  9083  0050CE  5185               	movf	___fldiv@f2& (0+255),w,b
  9084  0050D0  0100               	movlb	0	; () banked
  9085  0050D2  5F81               	subwf	___fldiv@f1& (0+255),f,b
  9086  0050D4  0100               	movlb	0	; () banked
  9087  0050D6  5186               	movf	(___fldiv@f2+1)& (0+255),w,b
  9088  0050D8  0100               	movlb	0	; () banked
  9089  0050DA  5B82               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  9090  0050DC  0100               	movlb	0	; () banked
  9091  0050DE  5187               	movf	(___fldiv@f2+2)& (0+255),w,b
  9092  0050E0  0100               	movlb	0	; () banked
  9093  0050E2  5B83               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  9094  0050E4  0100               	movlb	0	; () banked
  9095  0050E6  5188               	movf	(___fldiv@f2+3)& (0+255),w,b
  9096  0050E8  0100               	movlb	0	; () banked
  9097  0050EA  5B84               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  9098                           
  9099                           ; BSR set to: 0
  9100  0050EC  0100               	movlb	0	; () banked
  9101  0050EE  8189               	bsf	___fldiv@f3& (0+255),0,b
  9102  0050F0  D000               	goto	l6280
  9103  0050F2                     l6280:
  9104                           
  9105                           ; BSR set to: 0
  9106  0050F2  0100               	movlb	0	; () banked
  9107  0050F4  90D8               	bcf	status,0,c
  9108  0050F6  3781               	rlcf	___fldiv@f1& (0+255),f,b
  9109  0050F8  3782               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  9110  0050FA  3783               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  9111  0050FC  3784               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  9112                           
  9113                           ; BSR set to: 0
  9114  0050FE  0100               	movlb	0	; () banked
  9115  005100  2F8D               	decfsz	___fldiv@cntr& (0+255),f,b
  9116  005102  D7CC               	goto	l6272
  9117  005104  D000               	goto	l6284
  9118  005106                     l6284:
  9119                           
  9120                           ; BSR set to: 0
  9121  005106  C089  F077         	movff	___fldiv@f3,___flpack@arg
  9122  00510A  C08A  F078         	movff	___fldiv@f3+1,___flpack@arg+1
  9123  00510E  C08B  F079         	movff	___fldiv@f3+2,___flpack@arg+2
  9124  005112  C08C  F07A         	movff	___fldiv@f3+3,___flpack@arg+3
  9125  005116  C08E  F07B         	movff	___fldiv@exp,___flpack@exp
  9126  00511A  C08F  F07C         	movff	___fldiv@sign,___flpack@sign
  9127  00511E  EC8E  F026         	call	___flpack	;wreg free
  9128  005122  C077  F081         	movff	?___flpack,?___fldiv
  9129  005126  C078  F082         	movff	?___flpack+1,?___fldiv+1
  9130  00512A  C079  F083         	movff	?___flpack+2,?___fldiv+2
  9131  00512E  C07A  F084         	movff	?___flpack+3,?___fldiv+3
  9132  005132  0012               	return	
  9133  005134  0012               	return		;funcret
  9134  005136                     __end_of___fldiv:
  9135                           	opt stack 0
  9136                           tblptru	equ	0xFF8
  9137                           tblptrh	equ	0xFF7
  9138                           tblptrl	equ	0xFF6
  9139                           tablat	equ	0xFF5
  9140                           postinc0	equ	0xFEE
  9141                           wreg	equ	0xFE8
  9142                           postdec1	equ	0xFE5
  9143                           fsr1l	equ	0xFE1
  9144                           indf2	equ	0xFDF
  9145                           postinc2	equ	0xFDE
  9146                           postdec2	equ	0xFDD
  9147                           fsr2h	equ	0xFDA
  9148                           fsr2l	equ	0xFD9
  9149                           status	equ	0xFD8
  9150                           
  9151 ;; *************** function _delay_s *****************
  9152 ;; Defined at:
  9153 ;;		line 102 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  9154 ;; Parameters:    Size  Location     Type
  9155 ;;  value_s         1    wreg     unsigned char 
  9156 ;; Auto vars:     Size  Location     Type
  9157 ;;  value_s         1   31[BANK0 ] unsigned char 
  9158 ;;  repeat_loop     1   32[BANK0 ] unsigned char 
  9159 ;; Return value:  Size  Location     Type
  9160 ;;		None               void
  9161 ;; Registers used:
  9162 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9163 ;; Tracked objects:
  9164 ;;		On entry : 0/0
  9165 ;;		On exit  : 0/0
  9166 ;;		Unchanged: 0/0
  9167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;Total ram usage:        2 bytes
  9173 ;; Hardware stack levels used:    1
  9174 ;; Hardware stack levels required when called:    7
  9175 ;; This function calls:
  9176 ;;		_delay_ms
  9177 ;; This function is called by:
  9178 ;;		_park_routine
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           	psect	text27
  9183  005DAC                     __ptext27:
  9184                           	opt stack 0
  9185  005DAC                     _delay_s:
  9186                           	opt stack 22
  9187                           
  9188                           ;incstack = 0
  9189                           ;delay_s@value_s stored from wreg
  9190  005DAC  0100               	movlb	0	; () banked
  9191  005DAE  6F7F               	movwf	delay_s@value_s& (0+255),b
  9192                           
  9193                           ; BSR set to: 0
  9194                           ;src\delay.c: 104: unsigned char repeat_loop;
  9195                           ;src\delay.c: 106: for (repeat_loop = 0; repeat_loop < value_s; repeat_loop++)
  9196  005DB0  0E00               	movlw	0
  9197  005DB2  0100               	movlb	0	; () banked
  9198  005DB4  6F80               	movwf	delay_s@repeat_loop& (0+255),b
  9199  005DB6  D00A               	goto	l5044
  9200  005DB8                     l5040:
  9201                           
  9202                           ; BSR set to: 0
  9203                           ;src\delay.c: 107: delay_ms (1000);
  9204  005DB8  0E03               	movlw	3
  9205  005DBA  0100               	movlb	0	; () banked
  9206  005DBC  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  9207  005DBE  0EE8               	movlw	232
  9208  005DC0  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  9209  005DC2  EC68  F02E         	call	_delay_ms	;wreg free
  9210  005DC6  0100               	movlb	0	; () banked
  9211  005DC8  2B80               	incf	delay_s@repeat_loop& (0+255),f,b
  9212  005DCA  D000               	goto	l5044
  9213  005DCC                     l5044:
  9214                           
  9215                           ; BSR set to: 0
  9216  005DCC  0100               	movlb	0	; () banked
  9217  005DCE  517F               	movf	delay_s@value_s& (0+255),w,b
  9218  005DD0  0100               	movlb	0	; () banked
  9219  005DD2  5D80               	subwf	delay_s@repeat_loop& (0+255),w,b
  9220  005DD4  A0D8               	btfss	status,0,c
  9221  005DD6  D7F0               	goto	l5040
  9222                           
  9223                           ; BSR set to: 0
  9224                           
  9225                           ; BSR set to: 0
  9226  005DD8  0012               	return		;funcret
  9227  005DDA                     __end_of_delay_s:
  9228                           	opt stack 0
  9229                           tblptru	equ	0xFF8
  9230                           tblptrh	equ	0xFF7
  9231                           tblptrl	equ	0xFF6
  9232                           tablat	equ	0xFF5
  9233                           postinc0	equ	0xFEE
  9234                           wreg	equ	0xFE8
  9235                           postdec1	equ	0xFE5
  9236                           fsr1l	equ	0xFE1
  9237                           indf2	equ	0xFDF
  9238                           postinc2	equ	0xFDE
  9239                           postdec2	equ	0xFDD
  9240                           fsr2h	equ	0xFDA
  9241                           fsr2l	equ	0xFD9
  9242                           status	equ	0xFD8
  9243                           
  9244 ;; *************** function _delay_ms *****************
  9245 ;; Defined at:
  9246 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;  value_ms        2   29[BANK0 ] unsigned int 
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;		None
  9251 ;; Return value:  Size  Location     Type
  9252 ;;		None               void
  9253 ;; Registers used:
  9254 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9255 ;; Tracked objects:
  9256 ;;		On entry : 0/0
  9257 ;;		On exit  : 0/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9260 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;Total ram usage:        2 bytes
  9265 ;; Hardware stack levels used:    1
  9266 ;; Hardware stack levels required when called:    6
  9267 ;; This function calls:
  9268 ;;		___wmul
  9269 ;; This function is called by:
  9270 ;;		_delay_s
  9271 ;;		_main
  9272 ;;		_park_routine
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           	psect	text28
  9277  005CD0                     __ptext28:
  9278                           	opt stack 0
  9279  005CD0                     _delay_ms:
  9280                           	opt stack 22
  9281                           
  9282                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
  9283                           
  9284                           ; BSR set to: 0
  9285                           ;incstack = 0
  9286  005CD0  C0E7  F077         	movff	_delay_quartz_frequency_value,___wmul@multiplier	;volatile
  9287  005CD4  0100               	movlb	0	; () banked
  9288  005CD6  6B78               	clrf	(___wmul@multiplier+1)& (0+255),b
  9289  005CD8  C07D  F079         	movff	delay_ms@value_ms,___wmul@multiplicand
  9290  005CDC  C07E  F07A         	movff	delay_ms@value_ms+1,___wmul@multiplicand+1
  9291  005CE0  EC85  F02E         	call	___wmul	;wreg free
  9292  005CE4  C077  F0E3         	movff	?___wmul,_clock_counter_reference	;volatile
  9293  005CE8  C078  F0E4         	movff	?___wmul+1,_clock_counter_reference+1	;volatile
  9294                           
  9295                           ;src\delay.c: 75: while (clock_counter_reference) {
  9296  005CEC  D007               	goto	l567
  9297  005CEE                     l4886:
  9298                           
  9299                           ;src\delay.c: 85: _delay(240);
  9300  005CEE  0E50               	movlw	80
  9301  005CF0                     u8657:
  9302  005CF0  2EE8               	decfsz	wreg,f,c
  9303  005CF2  D7FE               	goto	u8657
  9304                           
  9305                           ;src\delay.c: 88: clock_counter_reference--;
  9306  005CF4  0100               	movlb	0	; () banked
  9307  005CF6  07E3               	decf	_clock_counter_reference& (0+255),f,b	;volatile
  9308  005CF8  A0D8               	btfss	status,0,c
  9309  005CFA  07E4               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
  9310  005CFC                     l567:
  9311  005CFC  0100               	movlb	0	; () banked
  9312  005CFE  51E3               	movf	_clock_counter_reference& (0+255),w,b	;volatile
  9313  005D00  0100               	movlb	0	; () banked
  9314  005D02  11E4               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
  9315  005D04  A4D8               	btfss	status,2,c
  9316  005D06  D7F3               	goto	l4886
  9317                           
  9318                           ; BSR set to: 0
  9319                           
  9320                           ; BSR set to: 0
  9321  005D08  0012               	return		;funcret
  9322  005D0A                     __end_of_delay_ms:
  9323                           	opt stack 0
  9324                           tblptru	equ	0xFF8
  9325                           tblptrh	equ	0xFF7
  9326                           tblptrl	equ	0xFF6
  9327                           tablat	equ	0xFF5
  9328                           postinc0	equ	0xFEE
  9329                           wreg	equ	0xFE8
  9330                           postdec1	equ	0xFE5
  9331                           fsr1l	equ	0xFE1
  9332                           indf2	equ	0xFDF
  9333                           postinc2	equ	0xFDE
  9334                           postdec2	equ	0xFDD
  9335                           fsr2h	equ	0xFDA
  9336                           fsr2l	equ	0xFD9
  9337                           status	equ	0xFD8
  9338                           
  9339 ;; *************** function ___wmul *****************
  9340 ;; Defined at:
  9341 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9342 ;; Parameters:    Size  Location     Type
  9343 ;;  multiplier      2   23[BANK0 ] unsigned int 
  9344 ;;  multiplicand    2   25[BANK0 ] unsigned int 
  9345 ;; Auto vars:     Size  Location     Type
  9346 ;;  product         2   27[BANK0 ] unsigned int 
  9347 ;; Return value:  Size  Location     Type
  9348 ;;                  2   23[BANK0 ] unsigned int 
  9349 ;; Registers used:
  9350 ;;		wreg, status,2, status,0, prodl, prodh
  9351 ;; Tracked objects:
  9352 ;;		On entry : 0/0
  9353 ;;		On exit  : 0/0
  9354 ;;		Unchanged: 0/0
  9355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9356 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;Total ram usage:        6 bytes
  9361 ;; Hardware stack levels used:    1
  9362 ;; Hardware stack levels required when called:    5
  9363 ;; This function calls:
  9364 ;;		Nothing
  9365 ;; This function is called by:
  9366 ;;		_delay_ms
  9367 ;; This function uses a non-reentrant model
  9368 ;;
  9369                           
  9370                           	psect	text29
  9371  005D0A                     __ptext29:
  9372                           	opt stack 0
  9373  005D0A                     ___wmul:
  9374                           	opt stack 22
  9375                           
  9376                           ; BSR set to: 0
  9377                           ;incstack = 0
  9378  005D0A  0100               	movlb	0	; () banked
  9379  005D0C  5177               	movf	___wmul@multiplier& (0+255),w,b
  9380  005D0E  0100               	movlb	0	; () banked
  9381  005D10  0379               	mulwf	___wmul@multiplicand& (0+255),b
  9382  005D12  CFF3 F07B          	movff	prodl,___wmul@product
  9383  005D16  CFF4 F07C          	movff	prodh,___wmul@product+1
  9384  005D1A  0100               	movlb	0	; () banked
  9385  005D1C  5177               	movf	___wmul@multiplier& (0+255),w,b
  9386  005D1E  0100               	movlb	0	; () banked
  9387  005D20  037A               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9388  005D22  50F3               	movf	prodl,w,c
  9389  005D24  0100               	movlb	0	; () banked
  9390  005D26  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  9391  005D28  0100               	movlb	0	; () banked
  9392  005D2A  5178               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9393  005D2C  0100               	movlb	0	; () banked
  9394  005D2E  0379               	mulwf	___wmul@multiplicand& (0+255),b
  9395  005D30  50F3               	movf	prodl,w,c
  9396  005D32  0100               	movlb	0	; () banked
  9397  005D34  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  9398                           
  9399                           ; BSR set to: 0
  9400  005D36  C07B  F077         	movff	___wmul@product,?___wmul
  9401  005D3A  C07C  F078         	movff	___wmul@product+1,?___wmul+1
  9402  005D3E  0012               	return	
  9403                           
  9404                           ; BSR set to: 0
  9405                           
  9406                           ; BSR set to: 0
  9407  005D40  0012               	return		;funcret
  9408  005D42                     __end_of___wmul:
  9409                           	opt stack 0
  9410                           tblptru	equ	0xFF8
  9411                           tblptrh	equ	0xFF7
  9412                           tblptrl	equ	0xFF6
  9413                           tablat	equ	0xFF5
  9414                           prodh	equ	0xFF4
  9415                           prodl	equ	0xFF3
  9416                           postinc0	equ	0xFEE
  9417                           wreg	equ	0xFE8
  9418                           postdec1	equ	0xFE5
  9419                           fsr1l	equ	0xFE1
  9420                           indf2	equ	0xFDF
  9421                           postinc2	equ	0xFDE
  9422                           postdec2	equ	0xFDD
  9423                           fsr2h	equ	0xFDA
  9424                           fsr2l	equ	0xFD9
  9425                           status	equ	0xFD8
  9426                           
  9427 ;; *************** function ___lwtofl *****************
  9428 ;; Defined at:
  9429 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;  c               2   33[BANK0 ] unsigned int 
  9432 ;; Auto vars:     Size  Location     Type
  9433 ;;		None
  9434 ;; Return value:  Size  Location     Type
  9435 ;;                  4   33[BANK0 ] unsigned int 
  9436 ;; Registers used:
  9437 ;;		wreg, status,2, status,0, cstack
  9438 ;; Tracked objects:
  9439 ;;		On entry : 0/0
  9440 ;;		On exit  : 0/0
  9441 ;;		Unchanged: 0/0
  9442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9443 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;Total ram usage:        4 bytes
  9448 ;; Hardware stack levels used:    1
  9449 ;; Hardware stack levels required when called:    6
  9450 ;; This function calls:
  9451 ;;		___flpack
  9452 ;; This function is called by:
  9453 ;;		_park_routine
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           	psect	text30
  9458  005D7A                     __ptext30:
  9459                           	opt stack 0
  9460  005D7A                     ___lwtofl:
  9461                           	opt stack 23
  9462                           
  9463                           ; BSR set to: 0
  9464                           ;incstack = 0
  9465  005D7A  C081  F077         	movff	___lwtofl@c,___flpack@arg
  9466  005D7E  C082  F078         	movff	___lwtofl@c+1,___flpack@arg+1
  9467  005D82  0100               	movlb	0	; () banked
  9468  005D84  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  9469  005D86  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  9470  005D88  0E96               	movlw	150
  9471  005D8A  0100               	movlb	0	; () banked
  9472  005D8C  6F7B               	movwf	___flpack@exp& (0+255),b
  9473  005D8E  0E00               	movlw	0
  9474  005D90  0100               	movlb	0	; () banked
  9475  005D92  6F7C               	movwf	___flpack@sign& (0+255),b
  9476  005D94  EC8E  F026         	call	___flpack	;wreg free
  9477  005D98  C077  F081         	movff	?___flpack,?___lwtofl
  9478  005D9C  C078  F082         	movff	?___flpack+1,?___lwtofl+1
  9479  005DA0  C079  F083         	movff	?___flpack+2,?___lwtofl+2
  9480  005DA4  C07A  F084         	movff	?___flpack+3,?___lwtofl+3
  9481  005DA8  0012               	return	
  9482  005DAA  0012               	return		;funcret
  9483  005DAC                     __end_of___lwtofl:
  9484                           	opt stack 0
  9485                           tblptru	equ	0xFF8
  9486                           tblptrh	equ	0xFF7
  9487                           tblptrl	equ	0xFF6
  9488                           tablat	equ	0xFF5
  9489                           prodh	equ	0xFF4
  9490                           prodl	equ	0xFF3
  9491                           postinc0	equ	0xFEE
  9492                           wreg	equ	0xFE8
  9493                           postdec1	equ	0xFE5
  9494                           fsr1l	equ	0xFE1
  9495                           indf2	equ	0xFDF
  9496                           postinc2	equ	0xFDE
  9497                           postdec2	equ	0xFDD
  9498                           fsr2h	equ	0xFDA
  9499                           fsr2l	equ	0xFD9
  9500                           status	equ	0xFD8
  9501                           
  9502 ;; *************** function ___flpack *****************
  9503 ;; Defined at:
  9504 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;  arg             4   23[BANK0 ] unsigned long 
  9507 ;;  exp             1   27[BANK0 ] unsigned char 
  9508 ;;  sign            1   28[BANK0 ] unsigned char 
  9509 ;; Auto vars:     Size  Location     Type
  9510 ;;		None
  9511 ;; Return value:  Size  Location     Type
  9512 ;;                  4   23[BANK0 ] unsigned char 
  9513 ;; Registers used:
  9514 ;;		wreg, status,2, status,0
  9515 ;; Tracked objects:
  9516 ;;		On entry : 0/0
  9517 ;;		On exit  : 0/0
  9518 ;;		Unchanged: 0/0
  9519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9520 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9524 ;;Total ram usage:       10 bytes
  9525 ;; Hardware stack levels used:    1
  9526 ;; Hardware stack levels required when called:    5
  9527 ;; This function calls:
  9528 ;;		Nothing
  9529 ;; This function is called by:
  9530 ;;		___altofl
  9531 ;;		___awtofl
  9532 ;;		___fladd
  9533 ;;		___fldiv
  9534 ;;		___flmul
  9535 ;;		___lwtofl
  9536 ;; This function uses a non-reentrant model
  9537 ;;
  9538                           
  9539                           	psect	text31
  9540  004D1C                     __ptext31:
  9541                           	opt stack 0
  9542  004D1C                     ___flpack:
  9543                           	opt stack 20
  9544                           
  9545                           ;incstack = 0
  9546  004D1C  0100               	movlb	0	; () banked
  9547  004D1E  517B               	movf	___flpack@exp& (0+255),w,b
  9548  004D20  0100               	movlb	0	; () banked
  9549  004D22  B4D8               	btfsc	status,2,c
  9550  004D24  D00A               	goto	l6006
  9551                           
  9552                           ; BSR set to: 0
  9553  004D26  0100               	movlb	0	; () banked
  9554  004D28  5177               	movf	___flpack@arg& (0+255),w,b
  9555  004D2A  0100               	movlb	0	; () banked
  9556  004D2C  1178               	iorwf	(___flpack@arg+1)& (0+255),w,b
  9557  004D2E  0100               	movlb	0	; () banked
  9558  004D30  1179               	iorwf	(___flpack@arg+2)& (0+255),w,b
  9559  004D32  0100               	movlb	0	; () banked
  9560  004D34  117A               	iorwf	(___flpack@arg+3)& (0+255),w,b
  9561  004D36  A4D8               	btfss	status,2,c
  9562  004D38  D014               	goto	l6012
  9563  004D3A                     l6006:
  9564                           
  9565                           ; BSR set to: 0
  9566  004D3A  0E00               	movlw	0
  9567  004D3C  0100               	movlb	0	; () banked
  9568  004D3E  6F77               	movwf	?___flpack& (0+255),b
  9569  004D40  0E00               	movlw	0
  9570  004D42  6F78               	movwf	(?___flpack+1)& (0+255),b
  9571  004D44  0E00               	movlw	0
  9572  004D46  6F79               	movwf	(?___flpack+2)& (0+255),b
  9573  004D48  0E00               	movlw	0
  9574  004D4A  6F7A               	movwf	(?___flpack+3)& (0+255),b
  9575                           
  9576                           ; BSR set to: 0
  9577  004D4C  0012               	return	
  9578                           
  9579                           ; BSR set to: 0
  9580  004D4E  D009               	goto	l6012
  9581  004D50                     l6010:
  9582                           
  9583                           ; BSR set to: 0
  9584  004D50  0100               	movlb	0	; () banked
  9585  004D52  2B7B               	incf	___flpack@exp& (0+255),f,b
  9586  004D54  0100               	movlb	0	; () banked
  9587  004D56  90D8               	bcf	status,0,c
  9588  004D58  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
  9589  004D5A  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
  9590  004D5C  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
  9591  004D5E  3377               	rrcf	___flpack@arg& (0+255),f,b
  9592  004D60  D000               	goto	l6012
  9593  004D62                     l6012:
  9594                           
  9595                           ; BSR set to: 0
  9596  004D62  0E00               	movlw	0
  9597  004D64  0100               	movlb	0	; () banked
  9598  004D66  1577               	andwf	___flpack@arg& (0+255),w,b
  9599  004D68  0100               	movlb	0	; () banked
  9600  004D6A  6F7D               	movwf	??___flpack& (0+255),b
  9601  004D6C  0E00               	movlw	0
  9602  004D6E  0100               	movlb	0	; () banked
  9603  004D70  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
  9604  004D72  0100               	movlb	0	; () banked
  9605  004D74  6F7E               	movwf	(??___flpack+1)& (0+255),b
  9606  004D76  0E00               	movlw	0
  9607  004D78  0100               	movlb	0	; () banked
  9608  004D7A  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
  9609  004D7C  0100               	movlb	0	; () banked
  9610  004D7E  6F7F               	movwf	(??___flpack+2)& (0+255),b
  9611  004D80  0EFE               	movlw	254
  9612  004D82  0100               	movlb	0	; () banked
  9613  004D84  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
  9614  004D86  0100               	movlb	0	; () banked
  9615  004D88  6F80               	movwf	(??___flpack+3)& (0+255),b
  9616  004D8A  0100               	movlb	0	; () banked
  9617  004D8C  517D               	movf	??___flpack& (0+255),w,b
  9618  004D8E  0100               	movlb	0	; () banked
  9619  004D90  117E               	iorwf	(??___flpack+1)& (0+255),w,b
  9620  004D92  0100               	movlb	0	; () banked
  9621  004D94  117F               	iorwf	(??___flpack+2)& (0+255),w,b
  9622  004D96  0100               	movlb	0	; () banked
  9623  004D98  1180               	iorwf	(??___flpack+3)& (0+255),w,b
  9624  004D9A  B4D8               	btfsc	status,2,c
  9625  004D9C  D011               	goto	l1128
  9626  004D9E  D7D8               	goto	l6010
  9627                           
  9628                           ; BSR set to: 0
  9629  004DA0  D00F               	goto	l1128
  9630  004DA2                     l6014:
  9631                           
  9632                           ; BSR set to: 0
  9633  004DA2  0100               	movlb	0	; () banked
  9634  004DA4  2B7B               	incf	___flpack@exp& (0+255),f,b
  9635                           
  9636                           ; BSR set to: 0
  9637  004DA6  0E01               	movlw	1
  9638  004DA8  0100               	movlb	0	; () banked
  9639  004DAA  2777               	addwf	___flpack@arg& (0+255),f,b
  9640  004DAC  0E00               	movlw	0
  9641  004DAE  2378               	addwfc	(___flpack@arg+1)& (0+255),f,b
  9642  004DB0  2379               	addwfc	(___flpack@arg+2)& (0+255),f,b
  9643  004DB2  237A               	addwfc	(___flpack@arg+3)& (0+255),f,b
  9644                           
  9645                           ; BSR set to: 0
  9646  004DB4  0100               	movlb	0	; () banked
  9647  004DB6  90D8               	bcf	status,0,c
  9648  004DB8  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
  9649  004DBA  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
  9650  004DBC  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
  9651  004DBE  3377               	rrcf	___flpack@arg& (0+255),f,b
  9652  004DC0                     l1128:
  9653                           
  9654                           ; BSR set to: 0
  9655  004DC0  0E00               	movlw	0
  9656  004DC2  0100               	movlb	0	; () banked
  9657  004DC4  1577               	andwf	___flpack@arg& (0+255),w,b
  9658  004DC6  0100               	movlb	0	; () banked
  9659  004DC8  6F7D               	movwf	??___flpack& (0+255),b
  9660  004DCA  0E00               	movlw	0
  9661  004DCC  0100               	movlb	0	; () banked
  9662  004DCE  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
  9663  004DD0  0100               	movlb	0	; () banked
  9664  004DD2  6F7E               	movwf	(??___flpack+1)& (0+255),b
  9665  004DD4  0E00               	movlw	0
  9666  004DD6  0100               	movlb	0	; () banked
  9667  004DD8  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
  9668  004DDA  0100               	movlb	0	; () banked
  9669  004DDC  6F7F               	movwf	(??___flpack+2)& (0+255),b
  9670  004DDE  0EFF               	movlw	255
  9671  004DE0  0100               	movlb	0	; () banked
  9672  004DE2  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
  9673  004DE4  0100               	movlb	0	; () banked
  9674  004DE6  6F80               	movwf	(??___flpack+3)& (0+255),b
  9675  004DE8  0100               	movlb	0	; () banked
  9676  004DEA  517D               	movf	??___flpack& (0+255),w,b
  9677  004DEC  0100               	movlb	0	; () banked
  9678  004DEE  117E               	iorwf	(??___flpack+1)& (0+255),w,b
  9679  004DF0  0100               	movlb	0	; () banked
  9680  004DF2  117F               	iorwf	(??___flpack+2)& (0+255),w,b
  9681  004DF4  0100               	movlb	0	; () banked
  9682  004DF6  1180               	iorwf	(??___flpack+3)& (0+255),w,b
  9683  004DF8  B4D8               	btfsc	status,2,c
  9684  004DFA  D00B               	goto	l6022
  9685  004DFC  D7D2               	goto	l6014
  9686                           
  9687                           ; BSR set to: 0
  9688  004DFE  D009               	goto	l6022
  9689  004E00                     l6020:
  9690                           
  9691                           ; BSR set to: 0
  9692  004E00  0100               	movlb	0	; () banked
  9693  004E02  077B               	decf	___flpack@exp& (0+255),f,b
  9694  004E04  0100               	movlb	0	; () banked
  9695  004E06  90D8               	bcf	status,0,c
  9696  004E08  3777               	rlcf	___flpack@arg& (0+255),f,b
  9697  004E0A  3778               	rlcf	(___flpack@arg+1)& (0+255),f,b
  9698  004E0C  3779               	rlcf	(___flpack@arg+2)& (0+255),f,b
  9699  004E0E  377A               	rlcf	(___flpack@arg+3)& (0+255),f,b
  9700  004E10  D000               	goto	l6022
  9701  004E12                     l6022:
  9702                           
  9703                           ; BSR set to: 0
  9704  004E12  0100               	movlb	0	; () banked
  9705  004E14  BF79               	btfsc	(___flpack@arg+2)& (0+255),7,b
  9706  004E16  D005               	goto	l1135
  9707                           
  9708                           ; BSR set to: 0
  9709  004E18  0E02               	movlw	2
  9710  004E1A  0100               	movlb	0	; () banked
  9711  004E1C  617B               	cpfslt	___flpack@exp& (0+255),b
  9712  004E1E  D7F0               	goto	l6020
  9713  004E20  D000               	goto	l1135
  9714  004E22                     l1135:
  9715                           
  9716                           ; BSR set to: 0
  9717  004E22  0100               	movlb	0	; () banked
  9718  004E24  B17B               	btfsc	___flpack@exp& (0+255),0,b
  9719  004E26  D009               	goto	l1136
  9720                           
  9721                           ; BSR set to: 0
  9722  004E28  0EFF               	movlw	255
  9723  004E2A  0100               	movlb	0	; () banked
  9724  004E2C  1777               	andwf	___flpack@arg& (0+255),f,b
  9725  004E2E  0EFF               	movlw	255
  9726  004E30  1778               	andwf	(___flpack@arg+1)& (0+255),f,b
  9727  004E32  0E7F               	movlw	127
  9728  004E34  1779               	andwf	(___flpack@arg+2)& (0+255),f,b
  9729  004E36  0EFF               	movlw	255
  9730  004E38  177A               	andwf	(___flpack@arg+3)& (0+255),f,b
  9731  004E3A                     l1136:
  9732                           
  9733                           ; BSR set to: 0
  9734  004E3A  0100               	movlb	0	; () banked
  9735  004E3C  90D8               	bcf	status,0,c
  9736  004E3E  337B               	rrcf	___flpack@exp& (0+255),f,b
  9737  004E40  C07B  F07D         	movff	___flpack@exp,??___flpack
  9738  004E44  0100               	movlb	0	; () banked
  9739  004E46  6B7E               	clrf	(??___flpack+1)& (0+255),b
  9740  004E48  6B7F               	clrf	(??___flpack+2)& (0+255),b
  9741  004E4A  6B80               	clrf	(??___flpack+3)& (0+255),b
  9742  004E4C  C07D  F080         	movff	??___flpack,??___flpack+3
  9743  004E50  0100               	movlb	0	; () banked
  9744  004E52  6B7F               	clrf	(??___flpack+2)& (0+255),b
  9745  004E54  6B7E               	clrf	(??___flpack+1)& (0+255),b
  9746  004E56  6B7D               	clrf	??___flpack& (0+255),b
  9747  004E58  0100               	movlb	0	; () banked
  9748  004E5A  517D               	movf	??___flpack& (0+255),w,b
  9749  004E5C  0100               	movlb	0	; () banked
  9750  004E5E  1377               	iorwf	___flpack@arg& (0+255),f,b
  9751  004E60  0100               	movlb	0	; () banked
  9752  004E62  517E               	movf	(??___flpack+1)& (0+255),w,b
  9753  004E64  0100               	movlb	0	; () banked
  9754  004E66  1378               	iorwf	(___flpack@arg+1)& (0+255),f,b
  9755  004E68  0100               	movlb	0	; () banked
  9756  004E6A  517F               	movf	(??___flpack+2)& (0+255),w,b
  9757  004E6C  0100               	movlb	0	; () banked
  9758  004E6E  1379               	iorwf	(___flpack@arg+2)& (0+255),f,b
  9759  004E70  0100               	movlb	0	; () banked
  9760  004E72  5180               	movf	(??___flpack+3)& (0+255),w,b
  9761  004E74  0100               	movlb	0	; () banked
  9762  004E76  137A               	iorwf	(___flpack@arg+3)& (0+255),f,b
  9763                           
  9764                           ; BSR set to: 0
  9765  004E78  0100               	movlb	0	; () banked
  9766  004E7A  517C               	movf	___flpack@sign& (0+255),w,b
  9767  004E7C  0100               	movlb	0	; () banked
  9768  004E7E  B4D8               	btfsc	status,2,c
  9769  004E80  D003               	goto	l6032
  9770                           
  9771                           ; BSR set to: 0
  9772  004E82  0100               	movlb	0	; () banked
  9773  004E84  8F7A               	bsf	(___flpack@arg+3)& (0+255),7,b
  9774  004E86  D000               	goto	l6032
  9775  004E88                     l6032:
  9776                           
  9777                           ; BSR set to: 0
  9778  004E88  C077  F077         	movff	___flpack@arg,?___flpack
  9779  004E8C  C078  F078         	movff	___flpack@arg+1,?___flpack+1
  9780  004E90  C079  F079         	movff	___flpack@arg+2,?___flpack+2
  9781  004E94  C07A  F07A         	movff	___flpack@arg+3,?___flpack+3
  9782  004E98  0012               	return	
  9783                           
  9784                           ; BSR set to: 0
  9785                           
  9786                           ; BSR set to: 0
  9787  004E9A  0012               	return		;funcret
  9788  004E9C                     __end_of___flpack:
  9789                           	opt stack 0
  9790                           tblptru	equ	0xFF8
  9791                           tblptrh	equ	0xFF7
  9792                           tblptrl	equ	0xFF6
  9793                           tablat	equ	0xFF5
  9794                           prodh	equ	0xFF4
  9795                           prodl	equ	0xFF3
  9796                           postinc0	equ	0xFEE
  9797                           wreg	equ	0xFE8
  9798                           postdec1	equ	0xFE5
  9799                           fsr1l	equ	0xFE1
  9800                           indf2	equ	0xFDF
  9801                           postinc2	equ	0xFDE
  9802                           postdec2	equ	0xFDD
  9803                           fsr2h	equ	0xFDA
  9804                           fsr2l	equ	0xFD9
  9805                           status	equ	0xFD8
  9806                           
  9807 ;; *************** function _configurations *****************
  9808 ;; Defined at:
  9809 ;;		line 517 in file "parcheggio.c"
  9810 ;; Parameters:    Size  Location     Type
  9811 ;;		None
  9812 ;; Auto vars:     Size  Location     Type
  9813 ;;		None
  9814 ;; Return value:  Size  Location     Type
  9815 ;;		None               void
  9816 ;; Registers used:
  9817 ;;		wreg, status,2, status,0, cstack
  9818 ;; Tracked objects:
  9819 ;;		On entry : 0/0
  9820 ;;		On exit  : 0/0
  9821 ;;		Unchanged: 0/0
  9822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9827 ;;Total ram usage:        0 bytes
  9828 ;; Hardware stack levels used:    1
  9829 ;; Hardware stack levels required when called:    7
  9830 ;; This function calls:
  9831 ;;		_CANInitialize
  9832 ;; This function is called by:
  9833 ;;		_main
  9834 ;; This function uses a non-reentrant model
  9835 ;;
  9836                           
  9837                           	psect	text32
  9838  005AE6                     __ptext32:
  9839                           	opt stack 0
  9840  005AE6                     _configurations:
  9841                           	opt stack 23
  9842                           
  9843                           ;parcheggio.c: 518: LATA = 0x00;
  9844                           
  9845                           ; BSR set to: 0
  9846                           ;incstack = 0
  9847  005AE6  0E00               	movlw	0
  9848  005AE8  6E89               	movwf	3977,c	;volatile
  9849                           
  9850                           ;parcheggio.c: 519: TRISA = 0b11110000;
  9851  005AEA  0EF0               	movlw	240
  9852  005AEC  6E92               	movwf	3986,c	;volatile
  9853                           
  9854                           ;parcheggio.c: 520: LATB = 0x00;
  9855  005AEE  0E00               	movlw	0
  9856  005AF0  6E8A               	movwf	3978,c	;volatile
  9857                           
  9858                           ;parcheggio.c: 521: TRISB = 0b10001010;
  9859  005AF2  0E8A               	movlw	138
  9860  005AF4  6E93               	movwf	3987,c	;volatile
  9861                           
  9862                           ;parcheggio.c: 522: LATC = 0x00;
  9863  005AF6  0E00               	movlw	0
  9864  005AF8  6E8B               	movwf	3979,c	;volatile
  9865                           
  9866                           ;parcheggio.c: 523: TRISC = 0b11111111;
  9867  005AFA  6894               	setf	3988,c	;volatile
  9868                           
  9869                           ;parcheggio.c: 525: ADCON1 = 0xFF;
  9870  005AFC  68C1               	setf	4033,c	;volatile
  9871                           
  9872                           ;parcheggio.c: 526: CANInitialize(4, 6, 5, 1, 3, CAN_CONFIG_LINE_FILTER_OFF & CAN_CONFIG
      +                          _SAMPLE_ONCE & CAN_CONFIG_ALL_VALID_MSG & CAN_CONFIG_DBL_BUFFER_ON);
  9873  005AFE  0E06               	movlw	6
  9874  005B00  0100               	movlb	0	; () banked
  9875  005B02  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
  9876  005B04  0E05               	movlw	5
  9877  005B06  0100               	movlb	0	; () banked
  9878  005B08  6F86               	movwf	CANInitialize@phaseSeg2& (0+255),b
  9879  005B0A  0E01               	movlw	1
  9880  005B0C  0100               	movlb	0	; () banked
  9881  005B0E  6F87               	movwf	CANInitialize@SJW& (0+255),b
  9882  005B10  0E03               	movlw	3
  9883  005B12  0100               	movlb	0	; () banked
  9884  005B14  6F88               	movwf	CANInitialize@BRP& (0+255),b
  9885  005B16  0E9D               	movlw	157
  9886  005B18  0100               	movlb	0	; () banked
  9887  005B1A  6F89               	movwf	CANInitialize@flags& (0+255),b
  9888  005B1C  0E04               	movlw	4
  9889  005B1E  ECC2  F024         	call	_CANInitialize
  9890                           
  9891                           ;parcheggio.c: 529: RCONbits.IPEN = 1;
  9892  005B22  8ED0               	bsf	4048,7,c	;volatile
  9893                           
  9894                           ;parcheggio.c: 530: IPR3bits.RXB1IP = 0;
  9895  005B24  92A5               	bcf	4005,1,c	;volatile
  9896                           
  9897                           ;parcheggio.c: 531: IPR3bits.RXB0IP = 0;
  9898  005B26  90A5               	bcf	4005,0,c	;volatile
  9899                           
  9900                           ;parcheggio.c: 532: INTCON2bits.TMR0IP = 0;
  9901  005B28  94F1               	bcf	intcon2,2,c	;volatile
  9902                           
  9903                           ;parcheggio.c: 535: PIR3bits.RXB1IF = 0;
  9904  005B2A  92A4               	bcf	4004,1,c	;volatile
  9905                           
  9906                           ;parcheggio.c: 536: PIR3bits.RXB0IF = 0;
  9907  005B2C  90A4               	bcf	4004,0,c	;volatile
  9908                           
  9909                           ;parcheggio.c: 537: INTCONbits.INT0IF = 0;
  9910  005B2E  92F2               	bcf	intcon,1,c	;volatile
  9911                           
  9912                           ;parcheggio.c: 538: INTCONbits.TMR0IF = 0;
  9913  005B30  94F2               	bcf	intcon,2,c	;volatile
  9914                           
  9915                           ;parcheggio.c: 542: PIE3bits.RXB1IE = 1;
  9916  005B32  82A3               	bsf	4003,1,c	;volatile
  9917                           
  9918                           ;parcheggio.c: 543: PIE3bits.RXB0IE = 1;
  9919  005B34  80A3               	bsf	4003,0,c	;volatile
  9920                           
  9921                           ;parcheggio.c: 544: INTCONbits.TMR0IE = 1;
  9922  005B36  8AF2               	bsf	intcon,5,c	;volatile
  9923                           
  9924                           ;parcheggio.c: 545: INTCONbits.INT0IE = 0;
  9925  005B38  98F2               	bcf	intcon,4,c	;volatile
  9926                           
  9927                           ;parcheggio.c: 548: T0CON = 0x80;
  9928  005B3A  0E80               	movlw	128
  9929  005B3C  6ED5               	movwf	4053,c	;volatile
  9930                           
  9931                           ;parcheggio.c: 549: TMR0H = 0x34;
  9932  005B3E  0E34               	movlw	52
  9933  005B40  6ED7               	movwf	4055,c	;volatile
  9934                           
  9935                           ;parcheggio.c: 550: TMR0L = 0xE0;
  9936  005B42  0EE0               	movlw	224
  9937  005B44  6ED6               	movwf	4054,c	;volatile
  9938                           
  9939                           ;parcheggio.c: 551: T3CON = 0x11;
  9940  005B46  0E11               	movlw	17
  9941  005B48  6EB1               	movwf	4017,c	;volatile
  9942                           
  9943                           ;parcheggio.c: 553: INTCON2bits.INTEDG0 = 1;
  9944  005B4A  8CF1               	bsf	intcon2,6,c	;volatile
  9945                           
  9946                           ;parcheggio.c: 554: INTCONbits.GIEL = 1;
  9947  005B4C  8CF2               	bsf	intcon,6,c	;volatile
  9948                           
  9949                           ;parcheggio.c: 555: INTCONbits.GIEH = 1;
  9950  005B4E  8EF2               	bsf	intcon,7,c	;volatile
  9951  005B50  0012               	return		;funcret
  9952  005B52                     __end_of_configurations:
  9953                           	opt stack 0
  9954                           tblptru	equ	0xFF8
  9955                           tblptrh	equ	0xFF7
  9956                           tblptrl	equ	0xFF6
  9957                           tablat	equ	0xFF5
  9958                           prodh	equ	0xFF4
  9959                           prodl	equ	0xFF3
  9960                           intcon	equ	0xFF2
  9961                           intcon2	equ	0xFF1
  9962                           postinc0	equ	0xFEE
  9963                           wreg	equ	0xFE8
  9964                           postdec1	equ	0xFE5
  9965                           fsr1l	equ	0xFE1
  9966                           indf2	equ	0xFDF
  9967                           postinc2	equ	0xFDE
  9968                           postdec2	equ	0xFDD
  9969                           fsr2h	equ	0xFDA
  9970                           fsr2l	equ	0xFD9
  9971                           status	equ	0xFD8
  9972                           
  9973 ;; *************** function _CANInitialize *****************
  9974 ;; Defined at:
  9975 ;;		line 218 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  9976 ;; Parameters:    Size  Location     Type
  9977 ;;  propSeg         1    wreg     unsigned char 
  9978 ;;  phaseSeg1       1   37[BANK0 ] unsigned char 
  9979 ;;  phaseSeg2       1   38[BANK0 ] unsigned char 
  9980 ;;  SJW             1   39[BANK0 ] unsigned char 
  9981 ;;  BRP             1   40[BANK0 ] unsigned char 
  9982 ;;  flags           1   41[BANK0 ] enum E16354
  9983 ;; Auto vars:     Size  Location     Type
  9984 ;;  propSeg         1   46[BANK0 ] unsigned char 
  9985 ;;  FilterConfig    1   48[BANK0 ] unsigned char 
  9986 ;;  FilterConfig    1   47[BANK0 ] unsigned char 
  9987 ;; Return value:  Size  Location     Type
  9988 ;;		None               void
  9989 ;; Registers used:
  9990 ;;		wreg, status,2, status,0, cstack
  9991 ;; Tracked objects:
  9992 ;;		On entry : 0/0
  9993 ;;		On exit  : 0/0
  9994 ;;		Unchanged: 0/0
  9995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9996 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;Total ram usage:       12 bytes
 10001 ;; Hardware stack levels used:    1
 10002 ;; Hardware stack levels required when called:    6
 10003 ;; This function calls:
 10004 ;;		_CANOperationMode
 10005 ;;		_CANSetFilter
 10006 ;;		_CANSetMask
 10007 ;; This function is called by:
 10008 ;;		_configurations
 10009 ;; This function uses a non-reentrant model
 10010 ;;
 10011                           
 10012                           	psect	text33
 10013  004984                     __ptext33:
 10014                           	opt stack 0
 10015  004984                     _CANInitialize:
 10016                           	opt stack 23
 10017                           
 10018                           ;incstack = 0
 10019                           ;CANInitialize@propSeg stored from wreg
 10020  004984  0100               	movlb	0	; () banked
 10021  004986  6F8E               	movwf	CANInitialize@propSeg& (0+255),b
 10022                           
 10023                           ; BSR set to: 0
 10024                           ;inc\CANlib.h: 220: BYTE FilterConfig1;
 10025                           ;inc\CANlib.h: 221: BYTE FilterConfig2;
 10026                           ;inc\CANlib.h: 223: CANOperationMode(CAN_OP_MODE_CONFIG);
 10027  004988  0E80               	movlw	128
 10028  00498A  EC2A  F02F         	call	_CANOperationMode
 10029                           
 10030                           ;inc\CANlib.h: 225: BRGCON1 = 0x00;
 10031  00498E  0E00               	movlw	0
 10032  004990  6E70               	movwf	3952,c	;volatile
 10033                           
 10034                           ;inc\CANlib.h: 226: BRGCON2 = 0x00;
 10035  004992  0E00               	movlw	0
 10036  004994  6E71               	movwf	3953,c	;volatile
 10037                           
 10038                           ;inc\CANlib.h: 227: BRGCON3 = 0x00;
 10039  004996  0E00               	movlw	0
 10040  004998  6E72               	movwf	3954,c	;volatile
 10041                           
 10042                           ;inc\CANlib.h: 229: SJW= SJW << 6;
 10043  00499A  0100               	movlb	0	; () banked
 10044  00499C  4187               	rrncf	CANInitialize@SJW& (0+255),w,b
 10045  00499E  42E8               	rrncf	wreg,f,c
 10046  0049A0  0BC0               	andlw	192
 10047  0049A2  0100               	movlb	0	; () banked
 10048  0049A4  6F87               	movwf	CANInitialize@SJW& (0+255),b
 10049                           
 10050                           ; BSR set to: 0
 10051                           ;inc\CANlib.h: 230: BRGCON1 |= SJW;
 10052  0049A6  0100               	movlb	0	; () banked
 10053  0049A8  5187               	movf	CANInitialize@SJW& (0+255),w,b
 10054  0049AA  1270               	iorwf	3952,f,c	;volatile
 10055                           
 10056                           ; BSR set to: 0
 10057                           ;inc\CANlib.h: 231: BRGCON1 |= BRP;
 10058  0049AC  0100               	movlb	0	; () banked
 10059  0049AE  5188               	movf	CANInitialize@BRP& (0+255),w,b
 10060  0049B0  1270               	iorwf	3952,f,c	;volatile
 10061                           
 10062                           ; BSR set to: 0
 10063                           ;inc\CANlib.h: 233: BRGCON2 |= propSeg;
 10064  0049B2  0100               	movlb	0	; () banked
 10065  0049B4  518E               	movf	CANInitialize@propSeg& (0+255),w,b
 10066  0049B6  1271               	iorwf	3953,f,c	;volatile
 10067                           
 10068                           ; BSR set to: 0
 10069                           ;inc\CANlib.h: 234: phaseSeg1 = phaseSeg1 <<3;
 10070  0049B8  0100               	movlb	0	; () banked
 10071  0049BA  3985               	swapf	CANInitialize@phaseSeg1& (0+255),w,b
 10072  0049BC  42E8               	rrncf	wreg,f,c
 10073  0049BE  0BF8               	andlw	248
 10074  0049C0  0100               	movlb	0	; () banked
 10075  0049C2  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
 10076                           
 10077                           ; BSR set to: 0
 10078                           ;inc\CANlib.h: 235: BRGCON2 |= phaseSeg1;
 10079  0049C4  0100               	movlb	0	; () banked
 10080  0049C6  5185               	movf	CANInitialize@phaseSeg1& (0+255),w,b
 10081  0049C8  1271               	iorwf	3953,f,c	;volatile
 10082                           
 10083                           ; BSR set to: 0
 10084                           ;inc\CANlib.h: 237: if ( !(flags & CAN_CONFIG_SAMPLE_BIT) )
 10085  0049CA  0100               	movlb	0	; () banked
 10086  0049CC  A589               	btfss	CANInitialize@flags& (0+255),2,b
 10087                           
 10088                           ; BSR set to: 0
 10089                           ;inc\CANlib.h: 238: BRGCON2bits.SAM= 1;
 10090  0049CE  8C71               	bsf	3953,6,c	;volatile
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;inc\CANlib.h: 240: if ( flags & CAN_CONFIG_PHSEG2_PRG_BIT )
 10094  0049D0  0100               	movlb	0	; () banked
 10095  0049D2  A189               	btfss	CANInitialize@flags& (0+255),0,b
 10096  0049D4  D002               	goto	l5012
 10097                           
 10098                           ; BSR set to: 0
 10099                           ;inc\CANlib.h: 241: BRGCON2bits.SEG2PHTS = 1;
 10100  0049D6  8E71               	bsf	3953,7,c	;volatile
 10101  0049D8  D000               	goto	l5012
 10102  0049DA                     l5012:
 10103                           
 10104                           ; BSR set to: 0
 10105                           ;inc\CANlib.h: 243: BRGCON3 |= phaseSeg2;
 10106  0049DA  0100               	movlb	0	; () banked
 10107  0049DC  5186               	movf	CANInitialize@phaseSeg2& (0+255),w,b
 10108  0049DE  1272               	iorwf	3954,f,c	;volatile
 10109                           
 10110                           ; BSR set to: 0
 10111                           ;inc\CANlib.h: 245: if ( flags & CAN_CONFIG_LINE_FILTER_BIT )
 10112  0049E0  0100               	movlb	0	; () banked
 10113  0049E2  A389               	btfss	CANInitialize@flags& (0+255),1,b
 10114  0049E4  D002               	goto	l5018
 10115                           
 10116                           ; BSR set to: 0
 10117                           ;inc\CANlib.h: 246: BRGCON3bits.WAKFIL = 1;
 10118  0049E6  8C72               	bsf	3954,6,c	;volatile
 10119  0049E8  D000               	goto	l5018
 10120  0049EA                     l5018:
 10121                           
 10122                           ; BSR set to: 0
 10123                           ;inc\CANlib.h: 251: RXB0CON = flags & CAN_CONFIG_MSG_BITS;
 10124  0049EA  0100               	movlb	0	; () banked
 10125  0049EC  5189               	movf	CANInitialize@flags& (0+255),w,b
 10126  0049EE  0B60               	andlw	96
 10127  0049F0  6E60               	movwf	3936,c	;volatile
 10128                           
 10129                           ;inc\CANlib.h: 252: if ( (flags & CAN_CONFIG_DBL_BUFFER_BIT)== CAN_CONFIG_DBL_BUFFER_ON 
      +                          )
 10130  0049F2  0100               	movlb	0	; () banked
 10131  0049F4  5189               	movf	CANInitialize@flags& (0+255),w,b
 10132  0049F6  0B10               	andlw	16
 10133  0049F8  0AFF               	xorlw	255
 10134  0049FA  B4D8               	btfsc	status,2,c
 10135                           
 10136                           ; BSR set to: 0
 10137                           ;inc\CANlib.h: 253: RXB0CONbits.RXB0DBEN = 1;
 10138  0049FC  8460               	bsf	3936,2,c	;volatile
 10139                           
 10140                           ; BSR set to: 0
 10141                           ;inc\CANlib.h: 255: RXB1CON = RXB0CON;
 10142  0049FE  CF60 FF50          	movff	3936,3920	;volatile
 10143                           
 10144                           ; BSR set to: 0
 10145                           ;inc\CANlib.h: 259: CANSetMask (CAN_MASK_B1, 0x00000000, CAN_CONFIG_XTD_MSG);
 10146  004A02  0E00               	movlw	0
 10147  004A04  0100               	movlb	0	; () banked
 10148  004A06  6F77               	movwf	CANSetMask@mask& (0+255),b
 10149  004A08  0E00               	movlw	0
 10150  004A0A  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10151  004A0C  0E00               	movlw	0
 10152  004A0E  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10153  004A10  0E00               	movlw	0
 10154  004A12  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10155  004A14  0EF7               	movlw	247
 10156  004A16  0100               	movlb	0	; () banked
 10157  004A18  6F7B               	movwf	CANSetMask@type& (0+255),b
 10158  004A1A  0E01               	movlw	1
 10159  004A1C  EC2A  F01B         	call	_CANSetMask
 10160                           
 10161                           ;inc\CANlib.h: 260: CANSetMask (CAN_MASK_B2, 0x00000000, CAN_CONFIG_XTD_MSG);
 10162  004A20  0E00               	movlw	0
 10163  004A22  0100               	movlb	0	; () banked
 10164  004A24  6F77               	movwf	CANSetMask@mask& (0+255),b
 10165  004A26  0E00               	movlw	0
 10166  004A28  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10167  004A2A  0E00               	movlw	0
 10168  004A2C  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10169  004A2E  0E00               	movlw	0
 10170  004A30  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10171  004A32  0EF7               	movlw	247
 10172  004A34  0100               	movlb	0	; () banked
 10173  004A36  6F7B               	movwf	CANSetMask@type& (0+255),b
 10174  004A38  0E02               	movlw	2
 10175  004A3A  EC2A  F01B         	call	_CANSetMask
 10176                           
 10177                           ;inc\CANlib.h: 263: switch( (flags & CAN_CONFIG_MSG_BITS) | ~CAN_CONFIG_MSG_BITS )
 10178  004A3E  D00F               	goto	l5030
 10179  004A40                     l5024:
 10180                           
 10181                           ;inc\CANlib.h: 266: FilterConfig1 = CAN_CONFIG_XTD_MSG;
 10182  004A40  0EF7               	movlw	247
 10183  004A42  0100               	movlb	0	; () banked
 10184  004A44  6F8F               	movwf	CANInitialize@FilterConfig1& (0+255),b
 10185  004A46  D007               	goto	l5026
 10186  004A48                     l356:
 10187                           
 10188                           ; BSR set to: 0
 10189                           ;inc\CANlib.h: 271: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10190  004A48  0100               	movlb	0	; () banked
 10191  004A4A  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10192                           
 10193                           ;inc\CANlib.h: 272: FilterConfig2 = CAN_CONFIG_STD_MSG;
 10194  004A4C  0100               	movlb	0	; () banked
 10195  004A4E  6990               	setf	CANInitialize@FilterConfig2& (0+255),b
 10196                           
 10197                           ;inc\CANlib.h: 273: break;
 10198  004A50  D028               	goto	l5032
 10199  004A52                     l357:
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;inc\CANlib.h: 275: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10203  004A52  0100               	movlb	0	; () banked
 10204  004A54  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10205  004A56                     l5026:
 10206                           
 10207                           ; BSR set to: 0
 10208                           ;inc\CANlib.h: 276: FilterConfig2 = CAN_CONFIG_XTD_MSG;
 10209  004A56  0EF7               	movlw	247
 10210  004A58  0100               	movlb	0	; () banked
 10211  004A5A  6F90               	movwf	CANInitialize@FilterConfig2& (0+255),b
 10212                           
 10213                           ; BSR set to: 0
 10214                           ;inc\CANlib.h: 278: }
 10215                           
 10216                           ;inc\CANlib.h: 277: break;
 10217  004A5C  D022               	goto	l5032
 10218  004A5E                     l5030:
 10219  004A5E  0E9F               	movlw	159
 10220  004A60  0100               	movlb	0	; () banked
 10221  004A62  6F8A               	movwf	??_CANInitialize& (0+255),b
 10222  004A64  0EFF               	movlw	255
 10223  004A66  0100               	movlb	0	; () banked
 10224  004A68  6F8B               	movwf	(??_CANInitialize+1)& (0+255),b
 10225  004A6A  0100               	movlb	0	; () banked
 10226  004A6C  5189               	movf	CANInitialize@flags& (0+255),w,b
 10227  004A6E  0B60               	andlw	96
 10228  004A70  0100               	movlb	0	; () banked
 10229  004A72  6F8C               	movwf	(??_CANInitialize+2)& (0+255),b
 10230  004A74  6B8D               	clrf	(??_CANInitialize+3)& (0+255),b
 10231  004A76  0100               	movlb	0	; () banked
 10232  004A78  518A               	movf	??_CANInitialize& (0+255),w,b
 10233  004A7A  0100               	movlb	0	; () banked
 10234  004A7C  138C               	iorwf	(??_CANInitialize+2)& (0+255),f,b
 10235  004A7E  0100               	movlb	0	; () banked
 10236  004A80  518B               	movf	(??_CANInitialize+1)& (0+255),w,b
 10237  004A82  0100               	movlb	0	; () banked
 10238  004A84  138D               	iorwf	(??_CANInitialize+3)& (0+255),f,b
 10239                           
 10240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10241                           ; Switch size 1, requested type "space"
 10242                           ; Number of cases is 1, Range of values is 0 to 0
 10243                           ; switch strategies available:
 10244                           ; Name         Instructions Cycles
 10245                           ; simple_byte            4     3 (average)
 10246                           ;	Chosen strategy is simple_byte
 10247  004A86  0100               	movlb	0	; () banked
 10248  004A88  518D               	movf	(??_CANInitialize+3)& (0+255),w,b
 10249  004A8A  0A00               	xorlw	0	; case 0
 10250  004A8C  A4D8               	btfss	status,2,c
 10251  004A8E  D7E1               	goto	l357
 10252                           
 10253                           ; BSR set to: 0
 10254                           ; Switch size 1, requested type "space"
 10255                           ; Number of cases is 2, Range of values is 191 to 223
 10256                           ; switch strategies available:
 10257                           ; Name         Instructions Cycles
 10258                           ; simple_byte            7     4 (average)
 10259                           ;	Chosen strategy is simple_byte
 10260  004A90  0100               	movlb	0	; () banked
 10261  004A92  518C               	movf	(??_CANInitialize+2)& (0+255),w,b
 10262  004A94  0ABF               	xorlw	191	; case 191
 10263  004A96  B4D8               	btfsc	status,2,c
 10264  004A98  D7D7               	goto	l356
 10265  004A9A  0A60               	xorlw	96	; case 223
 10266  004A9C  B4D8               	btfsc	status,2,c
 10267  004A9E  D7D0               	goto	l5024
 10268  004AA0  D7D8               	goto	l357
 10269  004AA2                     l5032:
 10270                           
 10271                           ; BSR set to: 0
 10272                           ;inc\CANlib.h: 280: CANSetFilter(CAN_FILTER_B1_F1, 0, FilterConfig1);
 10273  004AA2  0E00               	movlw	0
 10274  004AA4  0100               	movlb	0	; () banked
 10275  004AA6  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10276  004AA8  0E00               	movlw	0
 10277  004AAA  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10278  004AAC  0E00               	movlw	0
 10279  004AAE  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10280  004AB0  0E00               	movlw	0
 10281  004AB2  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10282  004AB4  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10283  004AB8  0E00               	movlw	0
 10284  004ABA  ECA9  F006         	call	_CANSetFilter
 10285                           
 10286                           ;inc\CANlib.h: 281: CANSetFilter(CAN_FILTER_B1_F2, 0, FilterConfig1);
 10287  004ABE  0E00               	movlw	0
 10288  004AC0  0100               	movlb	0	; () banked
 10289  004AC2  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10290  004AC4  0E00               	movlw	0
 10291  004AC6  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10292  004AC8  0E00               	movlw	0
 10293  004ACA  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10294  004ACC  0E00               	movlw	0
 10295  004ACE  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10296  004AD0  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10297  004AD4  0E01               	movlw	1
 10298  004AD6  ECA9  F006         	call	_CANSetFilter
 10299                           
 10300                           ;inc\CANlib.h: 282: CANSetFilter(CAN_FILTER_B2_F1, 0, FilterConfig2);
 10301  004ADA  0E00               	movlw	0
 10302  004ADC  0100               	movlb	0	; () banked
 10303  004ADE  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10304  004AE0  0E00               	movlw	0
 10305  004AE2  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10306  004AE4  0E00               	movlw	0
 10307  004AE6  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10308  004AE8  0E00               	movlw	0
 10309  004AEA  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10310  004AEC  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10311  004AF0  0E02               	movlw	2
 10312  004AF2  ECA9  F006         	call	_CANSetFilter
 10313                           
 10314                           ;inc\CANlib.h: 283: CANSetFilter(CAN_FILTER_B2_F2, 0, FilterConfig2);
 10315  004AF6  0E00               	movlw	0
 10316  004AF8  0100               	movlb	0	; () banked
 10317  004AFA  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10318  004AFC  0E00               	movlw	0
 10319  004AFE  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10320  004B00  0E00               	movlw	0
 10321  004B02  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10322  004B04  0E00               	movlw	0
 10323  004B06  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10324  004B08  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10325  004B0C  0E03               	movlw	3
 10326  004B0E  ECA9  F006         	call	_CANSetFilter
 10327                           
 10328                           ;inc\CANlib.h: 284: CANSetFilter(CAN_FILTER_B2_F3, 0, FilterConfig2);
 10329  004B12  0E00               	movlw	0
 10330  004B14  0100               	movlb	0	; () banked
 10331  004B16  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10332  004B18  0E00               	movlw	0
 10333  004B1A  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10334  004B1C  0E00               	movlw	0
 10335  004B1E  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10336  004B20  0E00               	movlw	0
 10337  004B22  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10338  004B24  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10339  004B28  0E04               	movlw	4
 10340  004B2A  ECA9  F006         	call	_CANSetFilter
 10341                           
 10342                           ;inc\CANlib.h: 285: CANSetFilter(CAN_FILTER_B2_F4, 0, FilterConfig2);
 10343  004B2E  0E00               	movlw	0
 10344  004B30  0100               	movlb	0	; () banked
 10345  004B32  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10346  004B34  0E00               	movlw	0
 10347  004B36  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10348  004B38  0E00               	movlw	0
 10349  004B3A  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10350  004B3C  0E00               	movlw	0
 10351  004B3E  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10352  004B40  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10353  004B44  0E05               	movlw	5
 10354  004B46  ECA9  F006         	call	_CANSetFilter
 10355                           
 10356                           ;inc\CANlib.h: 287: CANOperationMode(CAN_OP_MODE_NORMAL);
 10357  004B4A  0E00               	movlw	0
 10358  004B4C  EC2A  F02F         	call	_CANOperationMode
 10359  004B50  0012               	return		;funcret
 10360  004B52                     __end_of_CANInitialize:
 10361                           	opt stack 0
 10362                           tblptru	equ	0xFF8
 10363                           tblptrh	equ	0xFF7
 10364                           tblptrl	equ	0xFF6
 10365                           tablat	equ	0xFF5
 10366                           prodh	equ	0xFF4
 10367                           prodl	equ	0xFF3
 10368                           intcon	equ	0xFF2
 10369                           intcon2	equ	0xFF1
 10370                           postinc0	equ	0xFEE
 10371                           wreg	equ	0xFE8
 10372                           postdec1	equ	0xFE5
 10373                           fsr1l	equ	0xFE1
 10374                           indf2	equ	0xFDF
 10375                           postinc2	equ	0xFDE
 10376                           postdec2	equ	0xFDD
 10377                           fsr2h	equ	0xFDA
 10378                           fsr2l	equ	0xFD9
 10379                           status	equ	0xFD8
 10380                           
 10381 ;; *************** function _CANSetMask *****************
 10382 ;; Defined at:
 10383 ;;		line 640 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;  numBuffer       1    wreg     enum E16388
 10386 ;;  mask            4   23[BANK0 ] unsigned long 
 10387 ;;  type            1   27[BANK0 ] enum E16354
 10388 ;; Auto vars:     Size  Location     Type
 10389 ;;  numBuffer       1   32[BANK0 ] enum E16388
 10390 ;;  tamp            4   33[BANK0 ] unsigned long 
 10391 ;; Return value:  Size  Location     Type
 10392 ;;		None               void
 10393 ;; Registers used:
 10394 ;;		wreg, status,2, status,0
 10395 ;; Tracked objects:
 10396 ;;		On entry : 0/0
 10397 ;;		On exit  : 0/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10400 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;Total ram usage:       14 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; Hardware stack levels required when called:    5
 10407 ;; This function calls:
 10408 ;;		Nothing
 10409 ;; This function is called by:
 10410 ;;		_CANInitialize
 10411 ;; This function uses a non-reentrant model
 10412 ;;
 10413                           
 10414                           	psect	text34
 10415  003654                     __ptext34:
 10416                           	opt stack 0
 10417  003654                     _CANSetMask:
 10418                           	opt stack 23
 10419                           
 10420                           ;incstack = 0
 10421                           ;CANSetMask@numBuffer stored from wreg
 10422  003654  0100               	movlb	0	; () banked
 10423  003656  6F80               	movwf	CANSetMask@numBuffer& (0+255),b
 10424                           
 10425                           ; BSR set to: 0
 10426                           ;inc\CANlib.h: 643: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_STD_MSG))
 10427  003658  0100               	movlb	0	; () banked
 10428  00365A  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 10429  00365C  A4D8               	btfss	status,2,c
 10430  00365E  D057               	goto	l4492
 10431                           
 10432                           ; BSR set to: 0
 10433  003660  0100               	movlb	0	; () banked
 10434  003662  297B               	incf	CANSetMask@type& (0+255),w,b
 10435  003664  A4D8               	btfss	status,2,c
 10436  003666  D053               	goto	l4492
 10437                           
 10438                           ; BSR set to: 0
 10439                           ;inc\CANlib.h: 644: {
 10440                           ;inc\CANlib.h: 645: tamp = (mask >> 3);
 10441  003668  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10442  00366C  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10443  003670  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10444  003674  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10445  003678  0E04               	movlw	4
 10446  00367A  D006               	goto	u4850
 10447  00367C                     u4855:
 10448  00367C  0100               	movlb	0	; () banked
 10449  00367E  90D8               	bcf	status,0,c
 10450  003680  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10451  003682  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10452  003684  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10453  003686  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10454  003688                     u4850:
 10455  003688  2EE8               	decfsz	wreg,f,c
 10456  00368A  D7F8               	goto	u4855
 10457  00368C  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10458  003690  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10459  003694  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10460  003698  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10461                           
 10462                           ; BSR set to: 0
 10463                           ;inc\CANlib.h: 646: tamp = tamp & 0x000000FF;
 10464  00369C  0100               	movlb	0	; () banked
 10465  00369E  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10466  0036A0  0100               	movlb	0	; () banked
 10467  0036A2  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10468  0036A4  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10469  0036A6  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10470  0036A8  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10471                           
 10472                           ; BSR set to: 0
 10473                           ;inc\CANlib.h: 647: RXM0SIDH = (unsigned char) tamp;
 10474  0036AA  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 10475                           
 10476                           ; BSR set to: 0
 10477                           ;inc\CANlib.h: 649: tamp = mask & 0x00000007;
 10478  0036AE  0E07               	movlw	7
 10479  0036B0  0100               	movlb	0	; () banked
 10480  0036B2  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10481  0036B4  0100               	movlb	0	; () banked
 10482  0036B6  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10483  0036B8  0E00               	movlw	0
 10484  0036BA  0100               	movlb	0	; () banked
 10485  0036BC  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10486  0036BE  0100               	movlb	0	; () banked
 10487  0036C0  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10488  0036C2  0E00               	movlw	0
 10489  0036C4  0100               	movlb	0	; () banked
 10490  0036C6  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10491  0036C8  0100               	movlb	0	; () banked
 10492  0036CA  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10493  0036CC  0E00               	movlw	0
 10494  0036CE  0100               	movlb	0	; () banked
 10495  0036D0  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10496  0036D2  0100               	movlb	0	; () banked
 10497  0036D4  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10498                           
 10499                           ; BSR set to: 0
 10500                           ;inc\CANlib.h: 650: tamp = tamp << 5;
 10501  0036D6  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10502  0036DA  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10503  0036DE  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10504  0036E2  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10505  0036E6  0E05               	movlw	5
 10506  0036E8                     u4865:
 10507  0036E8  90D8               	bcf	status,0,c
 10508  0036EA  0100               	movlb	0	; () banked
 10509  0036EC  377C               	rlcf	??_CANSetMask& (0+255),f,b
 10510  0036EE  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 10511  0036F0  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 10512  0036F2  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 10513  0036F4  2EE8               	decfsz	wreg,f,c
 10514  0036F6  D7F8               	goto	u4865
 10515  0036F8  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10516  0036FC  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10517  003700  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10518  003704  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;inc\CANlib.h: 651: RXM0SIDL = (unsigned char) tamp;
 10522  003708  C081  FF19         	movff	CANSetMask@tamp,3865	;volatile
 10523  00370C  D000               	goto	l4492
 10524  00370E                     l4492:
 10525                           
 10526                           ; BSR set to: 0
 10527                           ;inc\CANlib.h: 652: }
 10528                           ;inc\CANlib.h: 654: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_STD_MSG))
 10529  00370E  0E02               	movlw	2
 10530  003710  0100               	movlb	0	; () banked
 10531  003712  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 10532  003714  A4D8               	btfss	status,2,c
 10533  003716  D057               	goto	l4508
 10534                           
 10535                           ; BSR set to: 0
 10536  003718  0100               	movlb	0	; () banked
 10537  00371A  297B               	incf	CANSetMask@type& (0+255),w,b
 10538  00371C  A4D8               	btfss	status,2,c
 10539  00371E  D053               	goto	l4508
 10540                           
 10541                           ; BSR set to: 0
 10542                           ;inc\CANlib.h: 655: {
 10543                           ;inc\CANlib.h: 656: tamp = (mask >> 3);
 10544  003720  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10545  003724  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10546  003728  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10547  00372C  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10548  003730  0E04               	movlw	4
 10549  003732  D006               	goto	u4890
 10550  003734                     u4895:
 10551  003734  0100               	movlb	0	; () banked
 10552  003736  90D8               	bcf	status,0,c
 10553  003738  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10554  00373A  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10555  00373C  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10556  00373E  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10557  003740                     u4890:
 10558  003740  2EE8               	decfsz	wreg,f,c
 10559  003742  D7F8               	goto	u4895
 10560  003744  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10561  003748  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10562  00374C  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10563  003750  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10564                           
 10565                           ; BSR set to: 0
 10566                           ;inc\CANlib.h: 657: tamp = tamp & 0x000000FF;
 10567  003754  0100               	movlb	0	; () banked
 10568  003756  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10569  003758  0100               	movlb	0	; () banked
 10570  00375A  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10571  00375C  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10572  00375E  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10573  003760  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10574                           
 10575                           ; BSR set to: 0
 10576                           ;inc\CANlib.h: 658: RXM1SIDH = (unsigned char) tamp;
 10577  003762  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 10578                           
 10579                           ; BSR set to: 0
 10580                           ;inc\CANlib.h: 660: tamp = mask & 0x00000007;
 10581  003766  0E07               	movlw	7
 10582  003768  0100               	movlb	0	; () banked
 10583  00376A  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10584  00376C  0100               	movlb	0	; () banked
 10585  00376E  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10586  003770  0E00               	movlw	0
 10587  003772  0100               	movlb	0	; () banked
 10588  003774  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10589  003776  0100               	movlb	0	; () banked
 10590  003778  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10591  00377A  0E00               	movlw	0
 10592  00377C  0100               	movlb	0	; () banked
 10593  00377E  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10594  003780  0100               	movlb	0	; () banked
 10595  003782  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10596  003784  0E00               	movlw	0
 10597  003786  0100               	movlb	0	; () banked
 10598  003788  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10599  00378A  0100               	movlb	0	; () banked
 10600  00378C  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10601                           
 10602                           ; BSR set to: 0
 10603                           ;inc\CANlib.h: 661: tamp = tamp << 5;
 10604  00378E  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10605  003792  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10606  003796  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10607  00379A  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10608  00379E  0E05               	movlw	5
 10609  0037A0                     u4905:
 10610  0037A0  90D8               	bcf	status,0,c
 10611  0037A2  0100               	movlb	0	; () banked
 10612  0037A4  377C               	rlcf	??_CANSetMask& (0+255),f,b
 10613  0037A6  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 10614  0037A8  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 10615  0037AA  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 10616  0037AC  2EE8               	decfsz	wreg,f,c
 10617  0037AE  D7F8               	goto	u4905
 10618  0037B0  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10619  0037B4  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10620  0037B8  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10621  0037BC  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10622                           
 10623                           ; BSR set to: 0
 10624                           ;inc\CANlib.h: 662: RXM1SIDL = (unsigned char) tamp;
 10625  0037C0  C081  FF1D         	movff	CANSetMask@tamp,3869	;volatile
 10626  0037C4  D000               	goto	l4508
 10627  0037C6                     l4508:
 10628                           
 10629                           ; BSR set to: 0
 10630                           ;inc\CANlib.h: 663: }
 10631                           ;inc\CANlib.h: 665: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_XTD_MSG))
 10632  0037C6  0100               	movlb	0	; () banked
 10633  0037C8  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 10634  0037CA  A4D8               	btfss	status,2,c
 10635  0037CC  D089               	goto	l4540
 10636                           
 10637                           ; BSR set to: 0
 10638  0037CE  0EF7               	movlw	247
 10639  0037D0  0100               	movlb	0	; () banked
 10640  0037D2  197B               	xorwf	CANSetMask@type& (0+255),w,b
 10641  0037D4  A4D8               	btfss	status,2,c
 10642  0037D6  D084               	goto	l4540
 10643                           
 10644                           ; BSR set to: 0
 10645                           ;inc\CANlib.h: 666: {
 10646                           ;inc\CANlib.h: 667: tamp = mask & 0x000000FF;
 10647  0037D8  0100               	movlb	0	; () banked
 10648  0037DA  5177               	movf	CANSetMask@mask& (0+255),w,b
 10649  0037DC  0100               	movlb	0	; () banked
 10650  0037DE  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10651  0037E0  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10652  0037E2  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10653  0037E4  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10654                           
 10655                           ; BSR set to: 0
 10656                           ;inc\CANlib.h: 668: RXM0EIDL = (unsigned char) tamp;
 10657  0037E6  C081  FF1B         	movff	CANSetMask@tamp,3867	;volatile
 10658                           
 10659                           ; BSR set to: 0
 10660                           ;inc\CANlib.h: 670: tamp = mask & 0x0000FF00;
 10661  0037EA  0E00               	movlw	0
 10662  0037EC  0100               	movlb	0	; () banked
 10663  0037EE  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10664  0037F0  0100               	movlb	0	; () banked
 10665  0037F2  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10666  0037F4  0EFF               	movlw	255
 10667  0037F6  0100               	movlb	0	; () banked
 10668  0037F8  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10669  0037FA  0100               	movlb	0	; () banked
 10670  0037FC  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10671  0037FE  0E00               	movlw	0
 10672  003800  0100               	movlb	0	; () banked
 10673  003802  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10674  003804  0100               	movlb	0	; () banked
 10675  003806  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10676  003808  0E00               	movlw	0
 10677  00380A  0100               	movlb	0	; () banked
 10678  00380C  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10679  00380E  0100               	movlb	0	; () banked
 10680  003810  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10681                           
 10682                           ; BSR set to: 0
 10683                           ;inc\CANlib.h: 671: tamp = tamp >> 8;
 10684  003812  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10685  003816  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10686  00381A  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10687  00381E  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10688  003822  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 10689  003826  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 10690  00382A  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 10691  00382E  0100               	movlb	0	; () banked
 10692  003830  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 10693  003832  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10694  003836  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10695  00383A  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10696  00383E  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10697                           
 10698                           ; BSR set to: 0
 10699                           ;inc\CANlib.h: 672: RXM0EIDH = (unsigned char) tamp;
 10700  003842  C081  FF1A         	movff	CANSetMask@tamp,3866	;volatile
 10701                           
 10702                           ; BSR set to: 0
 10703                           ;inc\CANlib.h: 674: if (mask & 0x00010000)
 10704  003846  0100               	movlb	0	; () banked
 10705  003848  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 10706  00384A  D003               	goto	l430
 10707                           
 10708                           ; BSR set to: 0
 10709                           ;inc\CANlib.h: 675: RXM0SIDLbits.EID16 = 0x01;
 10710  00384C  010F               	movlb	15	; () banked
 10711  00384E  8119               	bsf	25,0,b	;volatile
 10712  003850  D002               	goto	l431
 10713  003852                     l430:
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;inc\CANlib.h: 676: else
 10717                           ;inc\CANlib.h: 677: RXM0SIDLbits.EID16 = 0x00;
 10718  003852  010F               	movlb	15	; () banked
 10719  003854  9119               	bcf	25,0,b	;volatile
 10720  003856                     l431:
 10721                           
 10722                           ; BSR set to: 15
 10723                           ;inc\CANlib.h: 679: if (mask & 0x00020000)
 10724  003856  0100               	movlb	0	; () banked
 10725  003858  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 10726  00385A  D003               	goto	l432
 10727                           
 10728                           ; BSR set to: 0
 10729                           ;inc\CANlib.h: 680: RXM0SIDLbits.EID17 = 0x01;
 10730  00385C  010F               	movlb	15	; () banked
 10731  00385E  8319               	bsf	25,1,b	;volatile
 10732  003860  D002               	goto	l433
 10733  003862                     l432:
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;inc\CANlib.h: 681: else
 10737                           ;inc\CANlib.h: 682: RXM0SIDLbits.EID17 = 0x00;
 10738  003862  010F               	movlb	15	; () banked
 10739  003864  9319               	bcf	25,1,b	;volatile
 10740  003866                     l433:
 10741                           
 10742                           ; BSR set to: 15
 10743                           ;inc\CANlib.h: 684: if (mask & 0x00040000)
 10744  003866  0100               	movlb	0	; () banked
 10745  003868  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 10746  00386A  D003               	goto	l434
 10747                           
 10748                           ; BSR set to: 0
 10749                           ;inc\CANlib.h: 685: RXM0SIDLbits.SID0 = 0x01;
 10750  00386C  010F               	movlb	15	; () banked
 10751  00386E  8B19               	bsf	25,5,b	;volatile
 10752  003870  D002               	goto	l435
 10753  003872                     l434:
 10754                           
 10755                           ; BSR set to: 0
 10756                           ;inc\CANlib.h: 686: else
 10757                           ;inc\CANlib.h: 687: RXM0SIDLbits.SID0 = 0x00;
 10758  003872  010F               	movlb	15	; () banked
 10759  003874  9B19               	bcf	25,5,b	;volatile
 10760  003876                     l435:
 10761                           
 10762                           ; BSR set to: 15
 10763                           ;inc\CANlib.h: 689: if (mask & 0x00080000)
 10764  003876  0100               	movlb	0	; () banked
 10765  003878  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 10766  00387A  D003               	goto	l436
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;inc\CANlib.h: 690: RXM0SIDLbits.SID1 = 0x01;
 10770  00387C  010F               	movlb	15	; () banked
 10771  00387E  8D19               	bsf	25,6,b	;volatile
 10772  003880  D002               	goto	l437
 10773  003882                     l436:
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;inc\CANlib.h: 691: else
 10777                           ;inc\CANlib.h: 692: RXM0SIDLbits.SID1 = 0x00;
 10778  003882  010F               	movlb	15	; () banked
 10779  003884  9D19               	bcf	25,6,b	;volatile
 10780  003886                     l437:
 10781                           
 10782                           ; BSR set to: 15
 10783                           ;inc\CANlib.h: 694: if (mask & 0x00100000)
 10784  003886  0100               	movlb	0	; () banked
 10785  003888  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 10786  00388A  D003               	goto	l438
 10787                           
 10788                           ; BSR set to: 0
 10789                           ;inc\CANlib.h: 695: RXM0SIDLbits.SID2 = 0x01 ;
 10790  00388C  010F               	movlb	15	; () banked
 10791  00388E  8F19               	bsf	25,7,b	;volatile
 10792  003890  D003               	goto	l4534
 10793  003892                     l438:
 10794                           
 10795                           ; BSR set to: 0
 10796                           ;inc\CANlib.h: 696: else
 10797                           ;inc\CANlib.h: 697: RXM0SIDLbits.SID2 = 0x00 ;
 10798  003892  010F               	movlb	15	; () banked
 10799  003894  9F19               	bcf	25,7,b	;volatile
 10800  003896  D000               	goto	l4534
 10801  003898                     l4534:
 10802                           
 10803                           ; BSR set to: 15
 10804                           ;inc\CANlib.h: 699: tamp = (mask >> 21);
 10805  003898  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10806  00389C  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10807  0038A0  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10808  0038A4  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10809  0038A8  0E16               	movlw	22
 10810  0038AA  D006               	goto	u4980
 10811  0038AC                     u4985:
 10812  0038AC  0100               	movlb	0	; () banked
 10813  0038AE  90D8               	bcf	status,0,c
 10814  0038B0  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10815  0038B2  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10816  0038B4  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10817  0038B6  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10818  0038B8                     u4980:
 10819  0038B8  2EE8               	decfsz	wreg,f,c
 10820  0038BA  D7F8               	goto	u4985
 10821  0038BC  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10822  0038C0  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10823  0038C4  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10824  0038C8  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;inc\CANlib.h: 700: tamp = tamp & 0x000000FF;
 10828  0038CC  0100               	movlb	0	; () banked
 10829  0038CE  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10830  0038D0  0100               	movlb	0	; () banked
 10831  0038D2  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10832  0038D4  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10833  0038D6  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10834  0038D8  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10835                           
 10836                           ; BSR set to: 0
 10837                           ;inc\CANlib.h: 701: RXM0SIDH = (unsigned char) tamp;
 10838  0038DA  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 10839  0038DE  D000               	goto	l4540
 10840  0038E0                     l4540:
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;inc\CANlib.h: 702: }
 10844                           ;inc\CANlib.h: 704: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_XTD_MSG))
 10845  0038E0  0E02               	movlw	2
 10846  0038E2  0100               	movlb	0	; () banked
 10847  0038E4  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 10848  0038E6  A4D8               	btfss	status,2,c
 10849  0038E8  0012               	return	
 10850                           
 10851                           ; BSR set to: 0
 10852  0038EA  0EF7               	movlw	247
 10853  0038EC  0100               	movlb	0	; () banked
 10854  0038EE  197B               	xorwf	CANSetMask@type& (0+255),w,b
 10855  0038F0  A4D8               	btfss	status,2,c
 10856  0038F2  0012               	return	
 10857                           
 10858                           ; BSR set to: 0
 10859                           ;inc\CANlib.h: 705: {
 10860                           ;inc\CANlib.h: 706: tamp = mask & 0x000000FF;
 10861  0038F4  0100               	movlb	0	; () banked
 10862  0038F6  5177               	movf	CANSetMask@mask& (0+255),w,b
 10863  0038F8  0100               	movlb	0	; () banked
 10864  0038FA  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10865  0038FC  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10866  0038FE  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10867  003900  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10868                           
 10869                           ; BSR set to: 0
 10870                           ;inc\CANlib.h: 707: RXM1EIDL = (unsigned char) tamp;
 10871  003902  C081  FF1F         	movff	CANSetMask@tamp,3871	;volatile
 10872                           
 10873                           ; BSR set to: 0
 10874                           ;inc\CANlib.h: 709: tamp = mask & 0x0000FF00;
 10875  003906  0E00               	movlw	0
 10876  003908  0100               	movlb	0	; () banked
 10877  00390A  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10878  00390C  0100               	movlb	0	; () banked
 10879  00390E  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10880  003910  0EFF               	movlw	255
 10881  003912  0100               	movlb	0	; () banked
 10882  003914  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10883  003916  0100               	movlb	0	; () banked
 10884  003918  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10885  00391A  0E00               	movlw	0
 10886  00391C  0100               	movlb	0	; () banked
 10887  00391E  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10888  003920  0100               	movlb	0	; () banked
 10889  003922  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10890  003924  0E00               	movlw	0
 10891  003926  0100               	movlb	0	; () banked
 10892  003928  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10893  00392A  0100               	movlb	0	; () banked
 10894  00392C  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10895                           
 10896                           ; BSR set to: 0
 10897                           ;inc\CANlib.h: 710: tamp = tamp >> 8;
 10898  00392E  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10899  003932  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10900  003936  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10901  00393A  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10902  00393E  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 10903  003942  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 10904  003946  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 10905  00394A  0100               	movlb	0	; () banked
 10906  00394C  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 10907  00394E  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10908  003952  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10909  003956  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10910  00395A  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10911                           
 10912                           ; BSR set to: 0
 10913                           ;inc\CANlib.h: 711: RXM1EIDH = (unsigned char) tamp;
 10914  00395E  C081  FF1E         	movff	CANSetMask@tamp,3870	;volatile
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;inc\CANlib.h: 713: if (mask & 0x00010000)
 10918  003962  0100               	movlb	0	; () banked
 10919  003964  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 10920  003966  D003               	goto	l441
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;inc\CANlib.h: 714: RXM1SIDLbits.EID16 = 0x01;
 10924  003968  010F               	movlb	15	; () banked
 10925  00396A  811D               	bsf	29,0,b	;volatile
 10926  00396C  D002               	goto	l442
 10927  00396E                     l441:
 10928                           
 10929                           ; BSR set to: 0
 10930                           ;inc\CANlib.h: 715: else
 10931                           ;inc\CANlib.h: 716: RXM1SIDLbits.EID16 = 0x00;
 10932  00396E  010F               	movlb	15	; () banked
 10933  003970  911D               	bcf	29,0,b	;volatile
 10934  003972                     l442:
 10935                           
 10936                           ; BSR set to: 15
 10937                           ;inc\CANlib.h: 718: if (mask & 0x00020000)
 10938  003972  0100               	movlb	0	; () banked
 10939  003974  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 10940  003976  D003               	goto	l443
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;inc\CANlib.h: 719: RXM1SIDLbits.EID17 = 0x01;
 10944  003978  010F               	movlb	15	; () banked
 10945  00397A  831D               	bsf	29,1,b	;volatile
 10946  00397C  D002               	goto	l444
 10947  00397E                     l443:
 10948                           
 10949                           ; BSR set to: 0
 10950                           ;inc\CANlib.h: 720: else
 10951                           ;inc\CANlib.h: 721: RXM1SIDLbits.EID17 = 0x00;
 10952  00397E  010F               	movlb	15	; () banked
 10953  003980  931D               	bcf	29,1,b	;volatile
 10954  003982                     l444:
 10955                           
 10956                           ; BSR set to: 15
 10957                           ;inc\CANlib.h: 723: if (mask & 0x00040000)
 10958  003982  0100               	movlb	0	; () banked
 10959  003984  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 10960  003986  D003               	goto	l445
 10961                           
 10962                           ; BSR set to: 0
 10963                           ;inc\CANlib.h: 724: RXM1SIDLbits.SID0 = 0x01;
 10964  003988  010F               	movlb	15	; () banked
 10965  00398A  8B1D               	bsf	29,5,b	;volatile
 10966  00398C  D002               	goto	l446
 10967  00398E                     l445:
 10968                           
 10969                           ; BSR set to: 0
 10970                           ;inc\CANlib.h: 725: else
 10971                           ;inc\CANlib.h: 726: RXM1SIDLbits.SID0 = 0x00;
 10972  00398E  010F               	movlb	15	; () banked
 10973  003990  9B1D               	bcf	29,5,b	;volatile
 10974  003992                     l446:
 10975                           
 10976                           ; BSR set to: 15
 10977                           ;inc\CANlib.h: 728: if (mask & 0x00080000)
 10978  003992  0100               	movlb	0	; () banked
 10979  003994  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 10980  003996  D003               	goto	l447
 10981                           
 10982                           ; BSR set to: 0
 10983                           ;inc\CANlib.h: 729: RXM1SIDLbits.SID1 = 0x01;
 10984  003998  010F               	movlb	15	; () banked
 10985  00399A  8D1D               	bsf	29,6,b	;volatile
 10986  00399C  D002               	goto	l448
 10987  00399E                     l447:
 10988                           
 10989                           ; BSR set to: 0
 10990                           ;inc\CANlib.h: 730: else
 10991                           ;inc\CANlib.h: 731: RXM1SIDLbits.SID1 = 0x00;
 10992  00399E  010F               	movlb	15	; () banked
 10993  0039A0  9D1D               	bcf	29,6,b	;volatile
 10994  0039A2                     l448:
 10995                           
 10996                           ; BSR set to: 15
 10997                           ;inc\CANlib.h: 733: if (mask & 0x00100000)
 10998  0039A2  0100               	movlb	0	; () banked
 10999  0039A4  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 11000  0039A6  D003               	goto	l449
 11001                           
 11002                           ; BSR set to: 0
 11003                           ;inc\CANlib.h: 734: RXM1SIDLbits.SID2 = 0x01 ;
 11004  0039A8  010F               	movlb	15	; () banked
 11005  0039AA  8F1D               	bsf	29,7,b	;volatile
 11006  0039AC  D003               	goto	l4566
 11007  0039AE                     l449:
 11008                           
 11009                           ; BSR set to: 0
 11010                           ;inc\CANlib.h: 735: else
 11011                           ;inc\CANlib.h: 736: RXM1SIDLbits.SID2 = 0x00 ;
 11012  0039AE  010F               	movlb	15	; () banked
 11013  0039B0  9F1D               	bcf	29,7,b	;volatile
 11014  0039B2  D000               	goto	l4566
 11015  0039B4                     l4566:
 11016                           
 11017                           ; BSR set to: 15
 11018                           ;inc\CANlib.h: 738: tamp = (mask >> 21);
 11019  0039B4  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 11020  0039B8  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 11021  0039BC  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 11022  0039C0  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 11023  0039C4  0E16               	movlw	22
 11024  0039C6  D006               	goto	u5060
 11025  0039C8                     u5065:
 11026  0039C8  0100               	movlb	0	; () banked
 11027  0039CA  90D8               	bcf	status,0,c
 11028  0039CC  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 11029  0039CE  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 11030  0039D0  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 11031  0039D2  337C               	rrcf	??_CANSetMask& (0+255),f,b
 11032  0039D4                     u5060:
 11033  0039D4  2EE8               	decfsz	wreg,f,c
 11034  0039D6  D7F8               	goto	u5065
 11035  0039D8  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 11036  0039DC  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 11037  0039E0  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 11038  0039E4  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;inc\CANlib.h: 739: tamp = tamp & 0x000000FF;
 11042  0039E8  0100               	movlb	0	; () banked
 11043  0039EA  5181               	movf	CANSetMask@tamp& (0+255),w,b
 11044  0039EC  0100               	movlb	0	; () banked
 11045  0039EE  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11046  0039F0  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 11047  0039F2  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 11048  0039F4  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 11049                           
 11050                           ; BSR set to: 0
 11051                           ;inc\CANlib.h: 740: RXM1SIDH = (unsigned char) tamp;
 11052  0039F6  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 11053  0039FA  0012               	return	
 11054                           
 11055                           ; BSR set to: 0
 11056                           
 11057                           ; BSR set to: 0
 11058  0039FC  0012               	return		;funcret
 11059  0039FE                     __end_of_CANSetMask:
 11060                           	opt stack 0
 11061                           tblptru	equ	0xFF8
 11062                           tblptrh	equ	0xFF7
 11063                           tblptrl	equ	0xFF6
 11064                           tablat	equ	0xFF5
 11065                           prodh	equ	0xFF4
 11066                           prodl	equ	0xFF3
 11067                           intcon	equ	0xFF2
 11068                           intcon2	equ	0xFF1
 11069                           postinc0	equ	0xFEE
 11070                           wreg	equ	0xFE8
 11071                           postdec1	equ	0xFE5
 11072                           fsr1l	equ	0xFE1
 11073                           indf2	equ	0xFDF
 11074                           postinc2	equ	0xFDE
 11075                           postdec2	equ	0xFDD
 11076                           fsr2h	equ	0xFDA
 11077                           fsr2l	equ	0xFD9
 11078                           status	equ	0xFD8
 11079                           
 11080 ;; *************** function _CANSetFilter *****************
 11081 ;; Defined at:
 11082 ;;		line 748 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 11083 ;; Parameters:    Size  Location     Type
 11084 ;;  numBuffer       1    wreg     enum E16391
 11085 ;;  filter          4   23[BANK0 ] unsigned long 
 11086 ;;  type            1   27[BANK0 ] enum E16354
 11087 ;; Auto vars:     Size  Location     Type
 11088 ;;  numBuffer       1   32[BANK0 ] enum E16391
 11089 ;;  tamp            4   33[BANK0 ] unsigned long 
 11090 ;; Return value:  Size  Location     Type
 11091 ;;		None               void
 11092 ;; Registers used:
 11093 ;;		wreg, status,2, status,0
 11094 ;; Tracked objects:
 11095 ;;		On entry : 0/0
 11096 ;;		On exit  : 0/0
 11097 ;;		Unchanged: 0/0
 11098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11099 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11100 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11101 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11102 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;Total ram usage:       14 bytes
 11104 ;; Hardware stack levels used:    1
 11105 ;; Hardware stack levels required when called:    5
 11106 ;; This function calls:
 11107 ;;		Nothing
 11108 ;; This function is called by:
 11109 ;;		_CANInitialize
 11110 ;; This function uses a non-reentrant model
 11111 ;;
 11112                           
 11113                           	psect	text35
 11114  000D52                     __ptext35:
 11115                           	opt stack 0
 11116  000D52                     _CANSetFilter:
 11117                           	opt stack 23
 11118                           
 11119                           ; BSR set to: 0
 11120                           ;incstack = 0
 11121                           ;CANSetFilter@numBuffer stored from wreg
 11122  000D52  0100               	movlb	0	; () banked
 11123  000D54  6F80               	movwf	CANSetFilter@numBuffer& (0+255),b
 11124                           
 11125                           ; BSR set to: 0
 11126                           ;inc\CANlib.h: 750: unsigned long tamp;
 11127                           ;inc\CANlib.h: 752: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_STD_MSG))
 11128  000D56  0100               	movlb	0	; () banked
 11129  000D58  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 11130  000D5A  0100               	movlb	0	; () banked
 11131  000D5C  A4D8               	btfss	status,2,c
 11132  000D5E  D059               	goto	l4590
 11133                           
 11134                           ; BSR set to: 0
 11135  000D60  0100               	movlb	0	; () banked
 11136  000D62  297B               	incf	CANSetFilter@type& (0+255),w,b
 11137  000D64  A4D8               	btfss	status,2,c
 11138  000D66  D055               	goto	l4590
 11139                           
 11140                           ; BSR set to: 0
 11141                           ;inc\CANlib.h: 753: {
 11142                           ;inc\CANlib.h: 754: RXF0SIDLbits.EXIDEN = 0x00;
 11143  000D68  010F               	movlb	15	; () banked
 11144  000D6A  9701               	bcf	1,3,b	;volatile
 11145                           
 11146                           ; BSR set to: 15
 11147                           ;inc\CANlib.h: 756: tamp = (filter >> 3);
 11148  000D6C  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11149  000D70  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11150  000D74  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11151  000D78  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11152  000D7C  0E04               	movlw	4
 11153  000D7E  D006               	goto	u5090
 11154  000D80                     u5095:
 11155  000D80  0100               	movlb	0	; () banked
 11156  000D82  90D8               	bcf	status,0,c
 11157  000D84  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11158  000D86  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11159  000D88  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11160  000D8A  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11161  000D8C                     u5090:
 11162  000D8C  2EE8               	decfsz	wreg,f,c
 11163  000D8E  D7F8               	goto	u5095
 11164  000D90  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11165  000D94  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11166  000D98  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11167  000D9C  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11168                           
 11169                           ; BSR set to: 0
 11170                           ;inc\CANlib.h: 757: tamp = tamp & 0x000000FF;
 11171  000DA0  0100               	movlb	0	; () banked
 11172  000DA2  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11173  000DA4  0100               	movlb	0	; () banked
 11174  000DA6  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11175  000DA8  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11176  000DAA  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11177  000DAC  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11178                           
 11179                           ; BSR set to: 0
 11180                           ;inc\CANlib.h: 758: RXF0SIDH = (unsigned char) tamp;
 11181  000DAE  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 11182                           
 11183                           ; BSR set to: 0
 11184                           ;inc\CANlib.h: 760: tamp = filter & 0x00000007;
 11185  000DB2  0E07               	movlw	7
 11186  000DB4  0100               	movlb	0	; () banked
 11187  000DB6  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11188  000DB8  0100               	movlb	0	; () banked
 11189  000DBA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11190  000DBC  0E00               	movlw	0
 11191  000DBE  0100               	movlb	0	; () banked
 11192  000DC0  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11193  000DC2  0100               	movlb	0	; () banked
 11194  000DC4  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11195  000DC6  0E00               	movlw	0
 11196  000DC8  0100               	movlb	0	; () banked
 11197  000DCA  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11198  000DCC  0100               	movlb	0	; () banked
 11199  000DCE  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11200  000DD0  0E00               	movlw	0
 11201  000DD2  0100               	movlb	0	; () banked
 11202  000DD4  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11203  000DD6  0100               	movlb	0	; () banked
 11204  000DD8  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11205                           
 11206                           ; BSR set to: 0
 11207                           ;inc\CANlib.h: 761: tamp = tamp << 5;
 11208  000DDA  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11209  000DDE  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11210  000DE2  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11211  000DE6  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11212  000DEA  0E05               	movlw	5
 11213  000DEC                     u5105:
 11214  000DEC  90D8               	bcf	status,0,c
 11215  000DEE  0100               	movlb	0	; () banked
 11216  000DF0  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11217  000DF2  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11218  000DF4  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11219  000DF6  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11220  000DF8  2EE8               	decfsz	wreg,f,c
 11221  000DFA  D7F8               	goto	u5105
 11222  000DFC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11223  000E00  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11224  000E04  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11225  000E08  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11226                           
 11227                           ; BSR set to: 0
 11228                           ;inc\CANlib.h: 762: RXF0SIDL = (unsigned char) tamp;
 11229  000E0C  C081  FF01         	movff	CANSetFilter@tamp,3841	;volatile
 11230  000E10  D000               	goto	l4590
 11231  000E12                     l4590:
 11232                           
 11233                           ; BSR set to: 0
 11234                           ;inc\CANlib.h: 763: }
 11235                           ;inc\CANlib.h: 765: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_STD_MSG))
 11236  000E12  0100               	movlb	0	; () banked
 11237  000E14  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 11238  000E16  A4D8               	btfss	status,2,c
 11239  000E18  D059               	goto	l4608
 11240                           
 11241                           ; BSR set to: 0
 11242  000E1A  0100               	movlb	0	; () banked
 11243  000E1C  297B               	incf	CANSetFilter@type& (0+255),w,b
 11244  000E1E  A4D8               	btfss	status,2,c
 11245  000E20  D055               	goto	l4608
 11246                           
 11247                           ; BSR set to: 0
 11248                           ;inc\CANlib.h: 766: {
 11249                           ;inc\CANlib.h: 767: RXF1SIDLbits.EXIDEN = 0x00;
 11250  000E22  010F               	movlb	15	; () banked
 11251  000E24  9705               	bcf	5,3,b	;volatile
 11252                           
 11253                           ; BSR set to: 15
 11254                           ;inc\CANlib.h: 769: tamp = (filter >> 3);
 11255  000E26  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11256  000E2A  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11257  000E2E  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11258  000E32  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11259  000E36  0E04               	movlw	4
 11260  000E38  D006               	goto	u5130
 11261  000E3A                     u5135:
 11262  000E3A  0100               	movlb	0	; () banked
 11263  000E3C  90D8               	bcf	status,0,c
 11264  000E3E  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11265  000E40  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11266  000E42  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11267  000E44  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11268  000E46                     u5130:
 11269  000E46  2EE8               	decfsz	wreg,f,c
 11270  000E48  D7F8               	goto	u5135
 11271  000E4A  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11272  000E4E  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11273  000E52  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11274  000E56  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;inc\CANlib.h: 770: tamp = tamp & 0x000000FF;
 11278  000E5A  0100               	movlb	0	; () banked
 11279  000E5C  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11280  000E5E  0100               	movlb	0	; () banked
 11281  000E60  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11282  000E62  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11283  000E64  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11284  000E66  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11285                           
 11286                           ; BSR set to: 0
 11287                           ;inc\CANlib.h: 771: RXF1SIDH = (unsigned char) tamp;
 11288  000E68  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 11289                           
 11290                           ; BSR set to: 0
 11291                           ;inc\CANlib.h: 773: tamp = filter & 0x00000007;
 11292  000E6C  0E07               	movlw	7
 11293  000E6E  0100               	movlb	0	; () banked
 11294  000E70  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11295  000E72  0100               	movlb	0	; () banked
 11296  000E74  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11297  000E76  0E00               	movlw	0
 11298  000E78  0100               	movlb	0	; () banked
 11299  000E7A  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11300  000E7C  0100               	movlb	0	; () banked
 11301  000E7E  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11302  000E80  0E00               	movlw	0
 11303  000E82  0100               	movlb	0	; () banked
 11304  000E84  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11305  000E86  0100               	movlb	0	; () banked
 11306  000E88  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11307  000E8A  0E00               	movlw	0
 11308  000E8C  0100               	movlb	0	; () banked
 11309  000E8E  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11310  000E90  0100               	movlb	0	; () banked
 11311  000E92  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11312                           
 11313                           ; BSR set to: 0
 11314                           ;inc\CANlib.h: 774: tamp = tamp << 5;
 11315  000E94  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11316  000E98  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11317  000E9C  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11318  000EA0  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11319  000EA4  0E05               	movlw	5
 11320  000EA6                     u5145:
 11321  000EA6  90D8               	bcf	status,0,c
 11322  000EA8  0100               	movlb	0	; () banked
 11323  000EAA  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11324  000EAC  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11325  000EAE  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11326  000EB0  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11327  000EB2  2EE8               	decfsz	wreg,f,c
 11328  000EB4  D7F8               	goto	u5145
 11329  000EB6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11330  000EBA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11331  000EBE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11332  000EC2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11333                           
 11334                           ; BSR set to: 0
 11335                           ;inc\CANlib.h: 775: RXF1SIDL = (unsigned char) tamp;
 11336  000EC6  C081  FF05         	movff	CANSetFilter@tamp,3845	;volatile
 11337  000ECA  D000               	goto	l4608
 11338  000ECC                     l4608:
 11339                           
 11340                           ; BSR set to: 0
 11341                           ;inc\CANlib.h: 776: }
 11342                           ;inc\CANlib.h: 778: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_STD_MSG))
 11343  000ECC  0E02               	movlw	2
 11344  000ECE  0100               	movlb	0	; () banked
 11345  000ED0  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11346  000ED2  A4D8               	btfss	status,2,c
 11347  000ED4  D059               	goto	l4626
 11348                           
 11349                           ; BSR set to: 0
 11350  000ED6  0100               	movlb	0	; () banked
 11351  000ED8  297B               	incf	CANSetFilter@type& (0+255),w,b
 11352  000EDA  A4D8               	btfss	status,2,c
 11353  000EDC  D055               	goto	l4626
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;inc\CANlib.h: 779: {
 11357                           ;inc\CANlib.h: 780: RXF2SIDLbits.EXIDEN = 0x00;
 11358  000EDE  010F               	movlb	15	; () banked
 11359  000EE0  9709               	bcf	9,3,b	;volatile
 11360                           
 11361                           ; BSR set to: 15
 11362                           ;inc\CANlib.h: 782: tamp = (filter >> 3);
 11363  000EE2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11364  000EE6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11365  000EEA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11366  000EEE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11367  000EF2  0E04               	movlw	4
 11368  000EF4  D006               	goto	u5170
 11369  000EF6                     u5175:
 11370  000EF6  0100               	movlb	0	; () banked
 11371  000EF8  90D8               	bcf	status,0,c
 11372  000EFA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11373  000EFC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11374  000EFE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11375  000F00  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11376  000F02                     u5170:
 11377  000F02  2EE8               	decfsz	wreg,f,c
 11378  000F04  D7F8               	goto	u5175
 11379  000F06  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11380  000F0A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11381  000F0E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11382  000F12  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11383                           
 11384                           ; BSR set to: 0
 11385                           ;inc\CANlib.h: 783: tamp = tamp & 0x000000FF;
 11386  000F16  0100               	movlb	0	; () banked
 11387  000F18  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11388  000F1A  0100               	movlb	0	; () banked
 11389  000F1C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11390  000F1E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11391  000F20  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11392  000F22  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11393                           
 11394                           ; BSR set to: 0
 11395                           ;inc\CANlib.h: 784: RXF2SIDH = (unsigned char) tamp;
 11396  000F24  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;inc\CANlib.h: 786: tamp = filter & 0x00000007;
 11400  000F28  0E07               	movlw	7
 11401  000F2A  0100               	movlb	0	; () banked
 11402  000F2C  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11403  000F2E  0100               	movlb	0	; () banked
 11404  000F30  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11405  000F32  0E00               	movlw	0
 11406  000F34  0100               	movlb	0	; () banked
 11407  000F36  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11408  000F38  0100               	movlb	0	; () banked
 11409  000F3A  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11410  000F3C  0E00               	movlw	0
 11411  000F3E  0100               	movlb	0	; () banked
 11412  000F40  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11413  000F42  0100               	movlb	0	; () banked
 11414  000F44  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11415  000F46  0E00               	movlw	0
 11416  000F48  0100               	movlb	0	; () banked
 11417  000F4A  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11418  000F4C  0100               	movlb	0	; () banked
 11419  000F4E  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11420                           
 11421                           ; BSR set to: 0
 11422                           ;inc\CANlib.h: 787: tamp = tamp << 5;
 11423  000F50  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11424  000F54  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11425  000F58  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11426  000F5C  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11427  000F60  0E05               	movlw	5
 11428  000F62                     u5185:
 11429  000F62  90D8               	bcf	status,0,c
 11430  000F64  0100               	movlb	0	; () banked
 11431  000F66  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11432  000F68  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11433  000F6A  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11434  000F6C  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11435  000F6E  2EE8               	decfsz	wreg,f,c
 11436  000F70  D7F8               	goto	u5185
 11437  000F72  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11438  000F76  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11439  000F7A  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11440  000F7E  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11441                           
 11442                           ; BSR set to: 0
 11443                           ;inc\CANlib.h: 788: RXF2SIDL = (unsigned char) tamp;
 11444  000F82  C081  FF09         	movff	CANSetFilter@tamp,3849	;volatile
 11445  000F86  D000               	goto	l4626
 11446  000F88                     l4626:
 11447                           
 11448                           ; BSR set to: 0
 11449                           ;inc\CANlib.h: 789: }
 11450                           ;inc\CANlib.h: 791: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_STD_MSG))
 11451  000F88  0E03               	movlw	3
 11452  000F8A  0100               	movlb	0	; () banked
 11453  000F8C  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11454  000F8E  A4D8               	btfss	status,2,c
 11455  000F90  D059               	goto	l4644
 11456                           
 11457                           ; BSR set to: 0
 11458  000F92  0100               	movlb	0	; () banked
 11459  000F94  297B               	incf	CANSetFilter@type& (0+255),w,b
 11460  000F96  A4D8               	btfss	status,2,c
 11461  000F98  D055               	goto	l4644
 11462                           
 11463                           ; BSR set to: 0
 11464                           ;inc\CANlib.h: 792: {
 11465                           ;inc\CANlib.h: 793: RXF3SIDLbits.EXIDEN = 0x00;
 11466  000F9A  010F               	movlb	15	; () banked
 11467  000F9C  970D               	bcf	13,3,b	;volatile
 11468                           
 11469                           ; BSR set to: 15
 11470                           ;inc\CANlib.h: 795: tamp = (filter >> 3);
 11471  000F9E  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11472  000FA2  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11473  000FA6  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11474  000FAA  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11475  000FAE  0E04               	movlw	4
 11476  000FB0  D006               	goto	u5210
 11477  000FB2                     u5215:
 11478  000FB2  0100               	movlb	0	; () banked
 11479  000FB4  90D8               	bcf	status,0,c
 11480  000FB6  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11481  000FB8  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11482  000FBA  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11483  000FBC  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11484  000FBE                     u5210:
 11485  000FBE  2EE8               	decfsz	wreg,f,c
 11486  000FC0  D7F8               	goto	u5215
 11487  000FC2  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11488  000FC6  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11489  000FCA  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11490  000FCE  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11491                           
 11492                           ; BSR set to: 0
 11493                           ;inc\CANlib.h: 796: tamp = tamp & 0x000000FF;
 11494  000FD2  0100               	movlb	0	; () banked
 11495  000FD4  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11496  000FD6  0100               	movlb	0	; () banked
 11497  000FD8  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11498  000FDA  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11499  000FDC  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11500  000FDE  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11501                           
 11502                           ; BSR set to: 0
 11503                           ;inc\CANlib.h: 797: RXF3SIDH = (unsigned char) tamp;
 11504  000FE0  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 11505                           
 11506                           ; BSR set to: 0
 11507                           ;inc\CANlib.h: 799: tamp = filter & 0x00000007;
 11508  000FE4  0E07               	movlw	7
 11509  000FE6  0100               	movlb	0	; () banked
 11510  000FE8  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11511  000FEA  0100               	movlb	0	; () banked
 11512  000FEC  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11513  000FEE  0E00               	movlw	0
 11514  000FF0  0100               	movlb	0	; () banked
 11515  000FF2  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11516  000FF4  0100               	movlb	0	; () banked
 11517  000FF6  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11518  000FF8  0E00               	movlw	0
 11519  000FFA  0100               	movlb	0	; () banked
 11520  000FFC  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11521  000FFE  0100               	movlb	0	; () banked
 11522  001000  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11523  001002  0E00               	movlw	0
 11524  001004  0100               	movlb	0	; () banked
 11525  001006  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11526  001008  0100               	movlb	0	; () banked
 11527  00100A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11528                           
 11529                           ; BSR set to: 0
 11530                           ;inc\CANlib.h: 800: tamp = tamp << 5;
 11531  00100C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11532  001010  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11533  001014  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11534  001018  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11535  00101C  0E05               	movlw	5
 11536  00101E                     u5225:
 11537  00101E  90D8               	bcf	status,0,c
 11538  001020  0100               	movlb	0	; () banked
 11539  001022  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11540  001024  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11541  001026  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11542  001028  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11543  00102A  2EE8               	decfsz	wreg,f,c
 11544  00102C  D7F8               	goto	u5225
 11545  00102E  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11546  001032  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11547  001036  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11548  00103A  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11549                           
 11550                           ; BSR set to: 0
 11551                           ;inc\CANlib.h: 801: RXF3SIDL = (unsigned char) tamp;
 11552  00103E  C081  FF0D         	movff	CANSetFilter@tamp,3853	;volatile
 11553  001042  D000               	goto	l4644
 11554  001044                     l4644:
 11555                           
 11556                           ; BSR set to: 0
 11557                           ;inc\CANlib.h: 802: }
 11558                           ;inc\CANlib.h: 804: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_STD_MSG))
 11559  001044  0E04               	movlw	4
 11560  001046  0100               	movlb	0	; () banked
 11561  001048  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11562  00104A  A4D8               	btfss	status,2,c
 11563  00104C  D059               	goto	l4662
 11564                           
 11565                           ; BSR set to: 0
 11566  00104E  0100               	movlb	0	; () banked
 11567  001050  297B               	incf	CANSetFilter@type& (0+255),w,b
 11568  001052  A4D8               	btfss	status,2,c
 11569  001054  D055               	goto	l4662
 11570                           
 11571                           ; BSR set to: 0
 11572                           ;inc\CANlib.h: 805: {
 11573                           ;inc\CANlib.h: 806: RXF4SIDLbits.EXIDEN = 0x00;
 11574  001056  010F               	movlb	15	; () banked
 11575  001058  9711               	bcf	17,3,b	;volatile
 11576                           
 11577                           ; BSR set to: 15
 11578                           ;inc\CANlib.h: 808: tamp = (filter >> 3);
 11579  00105A  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11580  00105E  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11581  001062  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11582  001066  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11583  00106A  0E04               	movlw	4
 11584  00106C  D006               	goto	u5250
 11585  00106E                     u5255:
 11586  00106E  0100               	movlb	0	; () banked
 11587  001070  90D8               	bcf	status,0,c
 11588  001072  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11589  001074  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11590  001076  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11591  001078  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11592  00107A                     u5250:
 11593  00107A  2EE8               	decfsz	wreg,f,c
 11594  00107C  D7F8               	goto	u5255
 11595  00107E  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11596  001082  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11597  001086  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11598  00108A  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11599                           
 11600                           ; BSR set to: 0
 11601                           ;inc\CANlib.h: 809: tamp = tamp & 0x000000FF;
 11602  00108E  0100               	movlb	0	; () banked
 11603  001090  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11604  001092  0100               	movlb	0	; () banked
 11605  001094  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11606  001096  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11607  001098  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11608  00109A  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11609                           
 11610                           ; BSR set to: 0
 11611                           ;inc\CANlib.h: 810: RXF4SIDH = (unsigned char) tamp;
 11612  00109C  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 11613                           
 11614                           ; BSR set to: 0
 11615                           ;inc\CANlib.h: 812: tamp = filter & 0x00000007;
 11616  0010A0  0E07               	movlw	7
 11617  0010A2  0100               	movlb	0	; () banked
 11618  0010A4  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11619  0010A6  0100               	movlb	0	; () banked
 11620  0010A8  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11621  0010AA  0E00               	movlw	0
 11622  0010AC  0100               	movlb	0	; () banked
 11623  0010AE  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11624  0010B0  0100               	movlb	0	; () banked
 11625  0010B2  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11626  0010B4  0E00               	movlw	0
 11627  0010B6  0100               	movlb	0	; () banked
 11628  0010B8  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11629  0010BA  0100               	movlb	0	; () banked
 11630  0010BC  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11631  0010BE  0E00               	movlw	0
 11632  0010C0  0100               	movlb	0	; () banked
 11633  0010C2  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11634  0010C4  0100               	movlb	0	; () banked
 11635  0010C6  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11636                           
 11637                           ; BSR set to: 0
 11638                           ;inc\CANlib.h: 813: tamp = tamp << 5;
 11639  0010C8  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11640  0010CC  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11641  0010D0  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11642  0010D4  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11643  0010D8  0E05               	movlw	5
 11644  0010DA                     u5265:
 11645  0010DA  90D8               	bcf	status,0,c
 11646  0010DC  0100               	movlb	0	; () banked
 11647  0010DE  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11648  0010E0  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11649  0010E2  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11650  0010E4  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11651  0010E6  2EE8               	decfsz	wreg,f,c
 11652  0010E8  D7F8               	goto	u5265
 11653  0010EA  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11654  0010EE  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11655  0010F2  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11656  0010F6  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11657                           
 11658                           ; BSR set to: 0
 11659                           ;inc\CANlib.h: 814: RXF4SIDL = (unsigned char) tamp;
 11660  0010FA  C081  FF11         	movff	CANSetFilter@tamp,3857	;volatile
 11661  0010FE  D000               	goto	l4662
 11662  001100                     l4662:
 11663                           
 11664                           ; BSR set to: 0
 11665                           ;inc\CANlib.h: 815: }
 11666                           ;inc\CANlib.h: 817: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_STD_MSG))
 11667  001100  0E05               	movlw	5
 11668  001102  0100               	movlb	0	; () banked
 11669  001104  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11670  001106  A4D8               	btfss	status,2,c
 11671  001108  D059               	goto	l4680
 11672                           
 11673                           ; BSR set to: 0
 11674  00110A  0100               	movlb	0	; () banked
 11675  00110C  297B               	incf	CANSetFilter@type& (0+255),w,b
 11676  00110E  A4D8               	btfss	status,2,c
 11677  001110  D055               	goto	l4680
 11678                           
 11679                           ; BSR set to: 0
 11680                           ;inc\CANlib.h: 818: {
 11681                           ;inc\CANlib.h: 819: RXF5SIDLbits.EXIDEN = 0x00;
 11682  001112  010F               	movlb	15	; () banked
 11683  001114  9715               	bcf	21,3,b	;volatile
 11684                           
 11685                           ; BSR set to: 15
 11686                           ;inc\CANlib.h: 821: tamp = (filter >> 3);
 11687  001116  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11688  00111A  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11689  00111E  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11690  001122  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11691  001126  0E04               	movlw	4
 11692  001128  D006               	goto	u5290
 11693  00112A                     u5295:
 11694  00112A  0100               	movlb	0	; () banked
 11695  00112C  90D8               	bcf	status,0,c
 11696  00112E  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11697  001130  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11698  001132  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11699  001134  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11700  001136                     u5290:
 11701  001136  2EE8               	decfsz	wreg,f,c
 11702  001138  D7F8               	goto	u5295
 11703  00113A  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11704  00113E  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11705  001142  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11706  001146  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11707                           
 11708                           ; BSR set to: 0
 11709                           ;inc\CANlib.h: 822: tamp = tamp & 0x000000FF;
 11710  00114A  0100               	movlb	0	; () banked
 11711  00114C  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11712  00114E  0100               	movlb	0	; () banked
 11713  001150  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11714  001152  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11715  001154  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11716  001156  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11717                           
 11718                           ; BSR set to: 0
 11719                           ;inc\CANlib.h: 823: RXF5SIDH = (unsigned char) tamp;
 11720  001158  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 11721                           
 11722                           ; BSR set to: 0
 11723                           ;inc\CANlib.h: 825: tamp = filter & 0x00000007;
 11724  00115C  0E07               	movlw	7
 11725  00115E  0100               	movlb	0	; () banked
 11726  001160  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11727  001162  0100               	movlb	0	; () banked
 11728  001164  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11729  001166  0E00               	movlw	0
 11730  001168  0100               	movlb	0	; () banked
 11731  00116A  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11732  00116C  0100               	movlb	0	; () banked
 11733  00116E  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11734  001170  0E00               	movlw	0
 11735  001172  0100               	movlb	0	; () banked
 11736  001174  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11737  001176  0100               	movlb	0	; () banked
 11738  001178  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11739  00117A  0E00               	movlw	0
 11740  00117C  0100               	movlb	0	; () banked
 11741  00117E  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11742  001180  0100               	movlb	0	; () banked
 11743  001182  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11744                           
 11745                           ; BSR set to: 0
 11746                           ;inc\CANlib.h: 826: tamp = tamp << 5;
 11747  001184  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11748  001188  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11749  00118C  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11750  001190  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11751  001194  0E05               	movlw	5
 11752  001196                     u5305:
 11753  001196  90D8               	bcf	status,0,c
 11754  001198  0100               	movlb	0	; () banked
 11755  00119A  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11756  00119C  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11757  00119E  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11758  0011A0  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11759  0011A2  2EE8               	decfsz	wreg,f,c
 11760  0011A4  D7F8               	goto	u5305
 11761  0011A6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11762  0011AA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11763  0011AE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11764  0011B2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;inc\CANlib.h: 827: RXF5SIDL = (unsigned char) tamp;
 11768  0011B6  C081  FF15         	movff	CANSetFilter@tamp,3861	;volatile
 11769  0011BA  D000               	goto	l4680
 11770  0011BC                     l4680:
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;inc\CANlib.h: 828: }
 11774                           ;inc\CANlib.h: 831: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_XTD_MSG))
 11775  0011BC  0100               	movlb	0	; () banked
 11776  0011BE  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 11777  0011C0  0100               	movlb	0	; () banked
 11778  0011C2  A4D8               	btfss	status,2,c
 11779  0011C4  D08B               	goto	l4714
 11780                           
 11781                           ; BSR set to: 0
 11782  0011C6  0EF7               	movlw	247
 11783  0011C8  0100               	movlb	0	; () banked
 11784  0011CA  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 11785  0011CC  A4D8               	btfss	status,2,c
 11786  0011CE  D086               	goto	l4714
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;inc\CANlib.h: 832: {
 11790                           ;inc\CANlib.h: 833: RXF0SIDLbits.EXIDEN = 0x01;
 11791  0011D0  010F               	movlb	15	; () banked
 11792  0011D2  8701               	bsf	1,3,b	;volatile
 11793                           
 11794                           ; BSR set to: 15
 11795                           ;inc\CANlib.h: 835: tamp = filter & 0x000000FF;
 11796  0011D4  0100               	movlb	0	; () banked
 11797  0011D6  5177               	movf	CANSetFilter@filter& (0+255),w,b
 11798  0011D8  0100               	movlb	0	; () banked
 11799  0011DA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11800  0011DC  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11801  0011DE  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11802  0011E0  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11803                           
 11804                           ; BSR set to: 0
 11805                           ;inc\CANlib.h: 836: RXF0EIDL = (unsigned char) tamp;
 11806  0011E2  C081  FF03         	movff	CANSetFilter@tamp,3843	;volatile
 11807                           
 11808                           ; BSR set to: 0
 11809                           ;inc\CANlib.h: 838: tamp = filter & 0x0000FF00;
 11810  0011E6  0E00               	movlw	0
 11811  0011E8  0100               	movlb	0	; () banked
 11812  0011EA  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11813  0011EC  0100               	movlb	0	; () banked
 11814  0011EE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11815  0011F0  0EFF               	movlw	255
 11816  0011F2  0100               	movlb	0	; () banked
 11817  0011F4  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11818  0011F6  0100               	movlb	0	; () banked
 11819  0011F8  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11820  0011FA  0E00               	movlw	0
 11821  0011FC  0100               	movlb	0	; () banked
 11822  0011FE  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11823  001200  0100               	movlb	0	; () banked
 11824  001202  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11825  001204  0E00               	movlw	0
 11826  001206  0100               	movlb	0	; () banked
 11827  001208  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11828  00120A  0100               	movlb	0	; () banked
 11829  00120C  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11830                           
 11831                           ; BSR set to: 0
 11832                           ;inc\CANlib.h: 839: tamp = tamp >> 8;
 11833  00120E  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11834  001212  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11835  001216  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11836  00121A  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11837  00121E  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 11838  001222  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 11839  001226  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 11840  00122A  0100               	movlb	0	; () banked
 11841  00122C  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 11842  00122E  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11843  001232  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11844  001236  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11845  00123A  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11846                           
 11847                           ; BSR set to: 0
 11848                           ;inc\CANlib.h: 840: RXF0EIDH = (unsigned char) tamp;
 11849  00123E  C081  FF02         	movff	CANSetFilter@tamp,3842	;volatile
 11850                           
 11851                           ; BSR set to: 0
 11852                           ;inc\CANlib.h: 842: if (filter & 0x00010000)
 11853  001242  0100               	movlb	0	; () banked
 11854  001244  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 11855  001246  D003               	goto	l461
 11856                           
 11857                           ; BSR set to: 0
 11858                           ;inc\CANlib.h: 843: RXF0SIDLbits.EID16 = 0x01;
 11859  001248  010F               	movlb	15	; () banked
 11860  00124A  8101               	bsf	1,0,b	;volatile
 11861  00124C  D002               	goto	l462
 11862  00124E                     l461:
 11863                           
 11864                           ; BSR set to: 0
 11865                           ;inc\CANlib.h: 844: else
 11866                           ;inc\CANlib.h: 845: RXF0SIDLbits.EID16 = 0x00;
 11867  00124E  010F               	movlb	15	; () banked
 11868  001250  9101               	bcf	1,0,b	;volatile
 11869  001252                     l462:
 11870                           
 11871                           ; BSR set to: 15
 11872                           ;inc\CANlib.h: 847: if (filter & 0x00020000)
 11873  001252  0100               	movlb	0	; () banked
 11874  001254  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 11875  001256  D003               	goto	l463
 11876                           
 11877                           ; BSR set to: 0
 11878                           ;inc\CANlib.h: 848: RXF0SIDLbits.EID17 = 0x01;
 11879  001258  010F               	movlb	15	; () banked
 11880  00125A  8301               	bsf	1,1,b	;volatile
 11881  00125C  D002               	goto	l464
 11882  00125E                     l463:
 11883                           
 11884                           ; BSR set to: 0
 11885                           ;inc\CANlib.h: 849: else
 11886                           ;inc\CANlib.h: 850: RXF0SIDLbits.EID17 = 0x00;
 11887  00125E  010F               	movlb	15	; () banked
 11888  001260  9301               	bcf	1,1,b	;volatile
 11889  001262                     l464:
 11890                           
 11891                           ; BSR set to: 15
 11892                           ;inc\CANlib.h: 852: if (filter & 0x00040000)
 11893  001262  0100               	movlb	0	; () banked
 11894  001264  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 11895  001266  D003               	goto	l465
 11896                           
 11897                           ; BSR set to: 0
 11898                           ;inc\CANlib.h: 853: RXF0SIDLbits.SID0 = 0x01;
 11899  001268  010F               	movlb	15	; () banked
 11900  00126A  8B01               	bsf	1,5,b	;volatile
 11901  00126C  D002               	goto	l466
 11902  00126E                     l465:
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;inc\CANlib.h: 854: else
 11906                           ;inc\CANlib.h: 855: RXF0SIDLbits.SID0 = 0x00;
 11907  00126E  010F               	movlb	15	; () banked
 11908  001270  9B01               	bcf	1,5,b	;volatile
 11909  001272                     l466:
 11910                           
 11911                           ; BSR set to: 15
 11912                           ;inc\CANlib.h: 857: if (filter & 0x00080000)
 11913  001272  0100               	movlb	0	; () banked
 11914  001274  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 11915  001276  D003               	goto	l467
 11916                           
 11917                           ; BSR set to: 0
 11918                           ;inc\CANlib.h: 858: RXF0SIDLbits.SID1 = 0x01;
 11919  001278  010F               	movlb	15	; () banked
 11920  00127A  8D01               	bsf	1,6,b	;volatile
 11921  00127C  D002               	goto	l468
 11922  00127E                     l467:
 11923                           
 11924                           ; BSR set to: 0
 11925                           ;inc\CANlib.h: 859: else
 11926                           ;inc\CANlib.h: 860: RXF0SIDLbits.SID1 = 0x00;
 11927  00127E  010F               	movlb	15	; () banked
 11928  001280  9D01               	bcf	1,6,b	;volatile
 11929  001282                     l468:
 11930                           
 11931                           ; BSR set to: 15
 11932                           ;inc\CANlib.h: 862: if (filter & 0x00100000)
 11933  001282  0100               	movlb	0	; () banked
 11934  001284  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 11935  001286  D003               	goto	l469
 11936                           
 11937                           ; BSR set to: 0
 11938                           ;inc\CANlib.h: 863: RXF0SIDLbits.SID2 = 0x01 ;
 11939  001288  010F               	movlb	15	; () banked
 11940  00128A  8F01               	bsf	1,7,b	;volatile
 11941  00128C  D003               	goto	l4708
 11942  00128E                     l469:
 11943                           
 11944                           ; BSR set to: 0
 11945                           ;inc\CANlib.h: 864: else
 11946                           ;inc\CANlib.h: 865: RXF0SIDLbits.SID2 = 0x00 ;
 11947  00128E  010F               	movlb	15	; () banked
 11948  001290  9F01               	bcf	1,7,b	;volatile
 11949  001292  D000               	goto	l4708
 11950  001294                     l4708:
 11951                           
 11952                           ; BSR set to: 15
 11953                           ;inc\CANlib.h: 867: tamp = (filter >> 21);
 11954  001294  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11955  001298  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11956  00129C  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11957  0012A0  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11958  0012A4  0E16               	movlw	22
 11959  0012A6  D006               	goto	u5380
 11960  0012A8                     u5385:
 11961  0012A8  0100               	movlb	0	; () banked
 11962  0012AA  90D8               	bcf	status,0,c
 11963  0012AC  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11964  0012AE  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11965  0012B0  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11966  0012B2  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11967  0012B4                     u5380:
 11968  0012B4  2EE8               	decfsz	wreg,f,c
 11969  0012B6  D7F8               	goto	u5385
 11970  0012B8  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11971  0012BC  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11972  0012C0  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11973  0012C4  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11974                           
 11975                           ; BSR set to: 0
 11976                           ;inc\CANlib.h: 868: tamp = tamp & 0x000000FF;
 11977  0012C8  0100               	movlb	0	; () banked
 11978  0012CA  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11979  0012CC  0100               	movlb	0	; () banked
 11980  0012CE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11981  0012D0  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11982  0012D2  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11983  0012D4  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11984                           
 11985                           ; BSR set to: 0
 11986                           ;inc\CANlib.h: 869: RXF0SIDH = (unsigned char) tamp;
 11987  0012D6  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 11988  0012DA  D000               	goto	l4714
 11989  0012DC                     l4714:
 11990                           
 11991                           ; BSR set to: 0
 11992                           ;inc\CANlib.h: 870: }
 11993                           ;inc\CANlib.h: 872: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_XTD_MSG))
 11994  0012DC  0100               	movlb	0	; () banked
 11995  0012DE  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 11996  0012E0  A4D8               	btfss	status,2,c
 11997  0012E2  D08B               	goto	l4748
 11998                           
 11999                           ; BSR set to: 0
 12000  0012E4  0EF7               	movlw	247
 12001  0012E6  0100               	movlb	0	; () banked
 12002  0012E8  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12003  0012EA  A4D8               	btfss	status,2,c
 12004  0012EC  D086               	goto	l4748
 12005                           
 12006                           ; BSR set to: 0
 12007                           ;inc\CANlib.h: 873: {
 12008                           ;inc\CANlib.h: 874: RXF1SIDLbits.EXIDEN = 0x01;
 12009  0012EE  010F               	movlb	15	; () banked
 12010  0012F0  8705               	bsf	5,3,b	;volatile
 12011                           
 12012                           ; BSR set to: 15
 12013                           ;inc\CANlib.h: 876: tamp = filter & 0x000000FF;
 12014  0012F2  0100               	movlb	0	; () banked
 12015  0012F4  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12016  0012F6  0100               	movlb	0	; () banked
 12017  0012F8  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12018  0012FA  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12019  0012FC  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12020  0012FE  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12021                           
 12022                           ; BSR set to: 0
 12023                           ;inc\CANlib.h: 877: RXF1EIDL = (unsigned char) tamp;
 12024  001300  C081  FF07         	movff	CANSetFilter@tamp,3847	;volatile
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;inc\CANlib.h: 879: tamp = filter & 0x0000FF00;
 12028  001304  0E00               	movlw	0
 12029  001306  0100               	movlb	0	; () banked
 12030  001308  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12031  00130A  0100               	movlb	0	; () banked
 12032  00130C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12033  00130E  0EFF               	movlw	255
 12034  001310  0100               	movlb	0	; () banked
 12035  001312  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12036  001314  0100               	movlb	0	; () banked
 12037  001316  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12038  001318  0E00               	movlw	0
 12039  00131A  0100               	movlb	0	; () banked
 12040  00131C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12041  00131E  0100               	movlb	0	; () banked
 12042  001320  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12043  001322  0E00               	movlw	0
 12044  001324  0100               	movlb	0	; () banked
 12045  001326  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12046  001328  0100               	movlb	0	; () banked
 12047  00132A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12048                           
 12049                           ; BSR set to: 0
 12050                           ;inc\CANlib.h: 880: tamp = tamp >> 8;
 12051  00132C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12052  001330  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12053  001334  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12054  001338  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12055  00133C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12056  001340  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12057  001344  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12058  001348  0100               	movlb	0	; () banked
 12059  00134A  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12060  00134C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12061  001350  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12062  001354  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12063  001358  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12064                           
 12065                           ; BSR set to: 0
 12066                           ;inc\CANlib.h: 881: RXF1EIDH = (unsigned char) tamp;
 12067  00135C  C081  FF06         	movff	CANSetFilter@tamp,3846	;volatile
 12068                           
 12069                           ; BSR set to: 0
 12070                           ;inc\CANlib.h: 883: if (filter & 0x00010000)
 12071  001360  0100               	movlb	0	; () banked
 12072  001362  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12073  001364  D003               	goto	l472
 12074                           
 12075                           ; BSR set to: 0
 12076                           ;inc\CANlib.h: 884: RXF1SIDLbits.EID16 = 0x01;
 12077  001366  010F               	movlb	15	; () banked
 12078  001368  8105               	bsf	5,0,b	;volatile
 12079  00136A  D002               	goto	l473
 12080  00136C                     l472:
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;inc\CANlib.h: 885: else
 12084                           ;inc\CANlib.h: 886: RXF1SIDLbits.EID16 = 0x00;
 12085  00136C  010F               	movlb	15	; () banked
 12086  00136E  9105               	bcf	5,0,b	;volatile
 12087  001370                     l473:
 12088                           
 12089                           ; BSR set to: 15
 12090                           ;inc\CANlib.h: 888: if (filter & 0x00020000)
 12091  001370  0100               	movlb	0	; () banked
 12092  001372  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12093  001374  D003               	goto	l474
 12094                           
 12095                           ; BSR set to: 0
 12096                           ;inc\CANlib.h: 889: RXF1SIDLbits.EID17 = 0x01;
 12097  001376  010F               	movlb	15	; () banked
 12098  001378  8305               	bsf	5,1,b	;volatile
 12099  00137A  D002               	goto	l475
 12100  00137C                     l474:
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;inc\CANlib.h: 890: else
 12104                           ;inc\CANlib.h: 891: RXF1SIDLbits.EID17 = 0x00;
 12105  00137C  010F               	movlb	15	; () banked
 12106  00137E  9305               	bcf	5,1,b	;volatile
 12107  001380                     l475:
 12108                           
 12109                           ; BSR set to: 15
 12110                           ;inc\CANlib.h: 893: if (filter & 0x00040000)
 12111  001380  0100               	movlb	0	; () banked
 12112  001382  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12113  001384  D003               	goto	l476
 12114                           
 12115                           ; BSR set to: 0
 12116                           ;inc\CANlib.h: 894: RXF1SIDLbits.SID0 = 0x01;
 12117  001386  010F               	movlb	15	; () banked
 12118  001388  8B05               	bsf	5,5,b	;volatile
 12119  00138A  D002               	goto	l477
 12120  00138C                     l476:
 12121                           
 12122                           ; BSR set to: 0
 12123                           ;inc\CANlib.h: 895: else
 12124                           ;inc\CANlib.h: 896: RXF1SIDLbits.SID0 = 0x00;
 12125  00138C  010F               	movlb	15	; () banked
 12126  00138E  9B05               	bcf	5,5,b	;volatile
 12127  001390                     l477:
 12128                           
 12129                           ; BSR set to: 15
 12130                           ;inc\CANlib.h: 898: if (filter & 0x00080000)
 12131  001390  0100               	movlb	0	; () banked
 12132  001392  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12133  001394  D003               	goto	l478
 12134                           
 12135                           ; BSR set to: 0
 12136                           ;inc\CANlib.h: 899: RXF1SIDLbits.SID1 = 0x01;
 12137  001396  010F               	movlb	15	; () banked
 12138  001398  8D05               	bsf	5,6,b	;volatile
 12139  00139A  D002               	goto	l479
 12140  00139C                     l478:
 12141                           
 12142                           ; BSR set to: 0
 12143                           ;inc\CANlib.h: 900: else
 12144                           ;inc\CANlib.h: 901: RXF1SIDLbits.SID1 = 0x00;
 12145  00139C  010F               	movlb	15	; () banked
 12146  00139E  9D05               	bcf	5,6,b	;volatile
 12147  0013A0                     l479:
 12148                           
 12149                           ; BSR set to: 15
 12150                           ;inc\CANlib.h: 903: if (filter & 0x00100000)
 12151  0013A0  0100               	movlb	0	; () banked
 12152  0013A2  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12153  0013A4  D003               	goto	l480
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;inc\CANlib.h: 904: RXF1SIDLbits.SID2 = 0x01 ;
 12157  0013A6  010F               	movlb	15	; () banked
 12158  0013A8  8F05               	bsf	5,7,b	;volatile
 12159  0013AA  D003               	goto	l4742
 12160  0013AC                     l480:
 12161                           
 12162                           ; BSR set to: 0
 12163                           ;inc\CANlib.h: 905: else
 12164                           ;inc\CANlib.h: 906: RXF1SIDLbits.SID2 = 0x00 ;
 12165  0013AC  010F               	movlb	15	; () banked
 12166  0013AE  9F05               	bcf	5,7,b	;volatile
 12167  0013B0  D000               	goto	l4742
 12168  0013B2                     l4742:
 12169                           
 12170                           ; BSR set to: 15
 12171                           ;inc\CANlib.h: 908: tamp = (filter >> 21);
 12172  0013B2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12173  0013B6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12174  0013BA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12175  0013BE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12176  0013C2  0E16               	movlw	22
 12177  0013C4  D006               	goto	u5460
 12178  0013C6                     u5465:
 12179  0013C6  0100               	movlb	0	; () banked
 12180  0013C8  90D8               	bcf	status,0,c
 12181  0013CA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12182  0013CC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12183  0013CE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12184  0013D0  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12185  0013D2                     u5460:
 12186  0013D2  2EE8               	decfsz	wreg,f,c
 12187  0013D4  D7F8               	goto	u5465
 12188  0013D6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12189  0013DA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12190  0013DE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12191  0013E2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12192                           
 12193                           ; BSR set to: 0
 12194                           ;inc\CANlib.h: 909: tamp = tamp & 0x000000FF;
 12195  0013E6  0100               	movlb	0	; () banked
 12196  0013E8  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12197  0013EA  0100               	movlb	0	; () banked
 12198  0013EC  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12199  0013EE  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12200  0013F0  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12201  0013F2  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12202                           
 12203                           ; BSR set to: 0
 12204                           ;inc\CANlib.h: 910: RXF1SIDH = (unsigned char) tamp;
 12205  0013F4  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 12206  0013F8  D000               	goto	l4748
 12207  0013FA                     l4748:
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;inc\CANlib.h: 911: }
 12211                           ;inc\CANlib.h: 914: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_XTD_MSG))
 12212  0013FA  0E02               	movlw	2
 12213  0013FC  0100               	movlb	0	; () banked
 12214  0013FE  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12215  001400  A4D8               	btfss	status,2,c
 12216  001402  D08B               	goto	l4782
 12217                           
 12218                           ; BSR set to: 0
 12219  001404  0EF7               	movlw	247
 12220  001406  0100               	movlb	0	; () banked
 12221  001408  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12222  00140A  A4D8               	btfss	status,2,c
 12223  00140C  D086               	goto	l4782
 12224                           
 12225                           ; BSR set to: 0
 12226                           ;inc\CANlib.h: 915: {
 12227                           ;inc\CANlib.h: 916: RXF2SIDLbits.EXIDEN = 0x01;
 12228  00140E  010F               	movlb	15	; () banked
 12229  001410  8709               	bsf	9,3,b	;volatile
 12230                           
 12231                           ; BSR set to: 15
 12232                           ;inc\CANlib.h: 918: tamp = filter & 0x000000FF;
 12233  001412  0100               	movlb	0	; () banked
 12234  001414  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12235  001416  0100               	movlb	0	; () banked
 12236  001418  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12237  00141A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12238  00141C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12239  00141E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12240                           
 12241                           ; BSR set to: 0
 12242                           ;inc\CANlib.h: 919: RXF2EIDL = (unsigned char) tamp;
 12243  001420  C081  FF0B         	movff	CANSetFilter@tamp,3851	;volatile
 12244                           
 12245                           ; BSR set to: 0
 12246                           ;inc\CANlib.h: 921: tamp = filter & 0x0000FF00;
 12247  001424  0E00               	movlw	0
 12248  001426  0100               	movlb	0	; () banked
 12249  001428  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12250  00142A  0100               	movlb	0	; () banked
 12251  00142C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12252  00142E  0EFF               	movlw	255
 12253  001430  0100               	movlb	0	; () banked
 12254  001432  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12255  001434  0100               	movlb	0	; () banked
 12256  001436  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12257  001438  0E00               	movlw	0
 12258  00143A  0100               	movlb	0	; () banked
 12259  00143C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12260  00143E  0100               	movlb	0	; () banked
 12261  001440  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12262  001442  0E00               	movlw	0
 12263  001444  0100               	movlb	0	; () banked
 12264  001446  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12265  001448  0100               	movlb	0	; () banked
 12266  00144A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12267                           
 12268                           ; BSR set to: 0
 12269                           ;inc\CANlib.h: 922: tamp = tamp >> 8;
 12270  00144C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12271  001450  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12272  001454  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12273  001458  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12274  00145C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12275  001460  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12276  001464  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12277  001468  0100               	movlb	0	; () banked
 12278  00146A  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12279  00146C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12280  001470  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12281  001474  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12282  001478  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12283                           
 12284                           ; BSR set to: 0
 12285                           ;inc\CANlib.h: 923: RXF2EIDH = (unsigned char) tamp;
 12286  00147C  C081  FF0A         	movff	CANSetFilter@tamp,3850	;volatile
 12287                           
 12288                           ; BSR set to: 0
 12289                           ;inc\CANlib.h: 925: if (filter & 0x00010000)
 12290  001480  0100               	movlb	0	; () banked
 12291  001482  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12292  001484  D003               	goto	l483
 12293                           
 12294                           ; BSR set to: 0
 12295                           ;inc\CANlib.h: 926: RXF2SIDLbits.EID16 = 0x01;
 12296  001486  010F               	movlb	15	; () banked
 12297  001488  8109               	bsf	9,0,b	;volatile
 12298  00148A  D002               	goto	l484
 12299  00148C                     l483:
 12300                           
 12301                           ; BSR set to: 0
 12302                           ;inc\CANlib.h: 927: else
 12303                           ;inc\CANlib.h: 928: RXF2SIDLbits.EID16 = 0x00;
 12304  00148C  010F               	movlb	15	; () banked
 12305  00148E  9109               	bcf	9,0,b	;volatile
 12306  001490                     l484:
 12307                           
 12308                           ; BSR set to: 15
 12309                           ;inc\CANlib.h: 930: if (filter & 0x00020000)
 12310  001490  0100               	movlb	0	; () banked
 12311  001492  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12312  001494  D003               	goto	l485
 12313                           
 12314                           ; BSR set to: 0
 12315                           ;inc\CANlib.h: 931: RXF2SIDLbits.EID17 = 0x01;
 12316  001496  010F               	movlb	15	; () banked
 12317  001498  8309               	bsf	9,1,b	;volatile
 12318  00149A  D002               	goto	l486
 12319  00149C                     l485:
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;inc\CANlib.h: 932: else
 12323                           ;inc\CANlib.h: 933: RXF2SIDLbits.EID17 = 0x00;
 12324  00149C  010F               	movlb	15	; () banked
 12325  00149E  9309               	bcf	9,1,b	;volatile
 12326  0014A0                     l486:
 12327                           
 12328                           ; BSR set to: 15
 12329                           ;inc\CANlib.h: 935: if (filter & 0x00040000)
 12330  0014A0  0100               	movlb	0	; () banked
 12331  0014A2  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12332  0014A4  D003               	goto	l487
 12333                           
 12334                           ; BSR set to: 0
 12335                           ;inc\CANlib.h: 936: RXF2SIDLbits.SID0 = 0x01;
 12336  0014A6  010F               	movlb	15	; () banked
 12337  0014A8  8B09               	bsf	9,5,b	;volatile
 12338  0014AA  D002               	goto	l488
 12339  0014AC                     l487:
 12340                           
 12341                           ; BSR set to: 0
 12342                           ;inc\CANlib.h: 937: else
 12343                           ;inc\CANlib.h: 938: RXF2SIDLbits.SID0 = 0x00;
 12344  0014AC  010F               	movlb	15	; () banked
 12345  0014AE  9B09               	bcf	9,5,b	;volatile
 12346  0014B0                     l488:
 12347                           
 12348                           ; BSR set to: 15
 12349                           ;inc\CANlib.h: 940: if (filter & 0x00080000)
 12350  0014B0  0100               	movlb	0	; () banked
 12351  0014B2  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12352  0014B4  D003               	goto	l489
 12353                           
 12354                           ; BSR set to: 0
 12355                           ;inc\CANlib.h: 941: RXF2SIDLbits.SID1 = 0x01;
 12356  0014B6  010F               	movlb	15	; () banked
 12357  0014B8  8D09               	bsf	9,6,b	;volatile
 12358  0014BA  D002               	goto	l490
 12359  0014BC                     l489:
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;inc\CANlib.h: 942: else
 12363                           ;inc\CANlib.h: 943: RXF2SIDLbits.SID1 = 0x00;
 12364  0014BC  010F               	movlb	15	; () banked
 12365  0014BE  9D09               	bcf	9,6,b	;volatile
 12366  0014C0                     l490:
 12367                           
 12368                           ; BSR set to: 15
 12369                           ;inc\CANlib.h: 945: if (filter & 0x00100000)
 12370  0014C0  0100               	movlb	0	; () banked
 12371  0014C2  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12372  0014C4  D003               	goto	l491
 12373                           
 12374                           ; BSR set to: 0
 12375                           ;inc\CANlib.h: 946: RXF2SIDLbits.SID2 = 0x01 ;
 12376  0014C6  010F               	movlb	15	; () banked
 12377  0014C8  8F09               	bsf	9,7,b	;volatile
 12378  0014CA  D003               	goto	l4776
 12379  0014CC                     l491:
 12380                           
 12381                           ; BSR set to: 0
 12382                           ;inc\CANlib.h: 947: else
 12383                           ;inc\CANlib.h: 948: RXF2SIDLbits.SID2 = 0x00 ;
 12384  0014CC  010F               	movlb	15	; () banked
 12385  0014CE  9F09               	bcf	9,7,b	;volatile
 12386  0014D0  D000               	goto	l4776
 12387  0014D2                     l4776:
 12388                           
 12389                           ; BSR set to: 15
 12390                           ;inc\CANlib.h: 950: tamp = (filter >> 21);
 12391  0014D2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12392  0014D6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12393  0014DA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12394  0014DE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12395  0014E2  0E16               	movlw	22
 12396  0014E4  D006               	goto	u5540
 12397  0014E6                     u5545:
 12398  0014E6  0100               	movlb	0	; () banked
 12399  0014E8  90D8               	bcf	status,0,c
 12400  0014EA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12401  0014EC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12402  0014EE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12403  0014F0  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12404  0014F2                     u5540:
 12405  0014F2  2EE8               	decfsz	wreg,f,c
 12406  0014F4  D7F8               	goto	u5545
 12407  0014F6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12408  0014FA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12409  0014FE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12410  001502  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12411                           
 12412                           ; BSR set to: 0
 12413                           ;inc\CANlib.h: 951: tamp = tamp & 0x000000FF;
 12414  001506  0100               	movlb	0	; () banked
 12415  001508  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12416  00150A  0100               	movlb	0	; () banked
 12417  00150C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12418  00150E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12419  001510  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12420  001512  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12421                           
 12422                           ; BSR set to: 0
 12423                           ;inc\CANlib.h: 952: RXF2SIDH = (unsigned char) tamp;
 12424  001514  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 12425  001518  D000               	goto	l4782
 12426  00151A                     l4782:
 12427                           
 12428                           ; BSR set to: 0
 12429                           ;inc\CANlib.h: 953: }
 12430                           ;inc\CANlib.h: 955: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_XTD_MSG))
 12431  00151A  0E03               	movlw	3
 12432  00151C  0100               	movlb	0	; () banked
 12433  00151E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12434  001520  A4D8               	btfss	status,2,c
 12435  001522  D08B               	goto	l4816
 12436                           
 12437                           ; BSR set to: 0
 12438  001524  0EF7               	movlw	247
 12439  001526  0100               	movlb	0	; () banked
 12440  001528  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12441  00152A  A4D8               	btfss	status,2,c
 12442  00152C  D086               	goto	l4816
 12443                           
 12444                           ; BSR set to: 0
 12445                           ;inc\CANlib.h: 956: {
 12446                           ;inc\CANlib.h: 957: RXF3SIDLbits.EXIDEN = 0x01;
 12447  00152E  010F               	movlb	15	; () banked
 12448  001530  870D               	bsf	13,3,b	;volatile
 12449                           
 12450                           ; BSR set to: 15
 12451                           ;inc\CANlib.h: 959: tamp = filter & 0x000000FF;
 12452  001532  0100               	movlb	0	; () banked
 12453  001534  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12454  001536  0100               	movlb	0	; () banked
 12455  001538  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12456  00153A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12457  00153C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12458  00153E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12459                           
 12460                           ; BSR set to: 0
 12461                           ;inc\CANlib.h: 960: RXF3EIDL = (unsigned char) tamp;
 12462  001540  C081  FF0F         	movff	CANSetFilter@tamp,3855	;volatile
 12463                           
 12464                           ; BSR set to: 0
 12465                           ;inc\CANlib.h: 962: tamp = filter & 0x0000FF00;
 12466  001544  0E00               	movlw	0
 12467  001546  0100               	movlb	0	; () banked
 12468  001548  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12469  00154A  0100               	movlb	0	; () banked
 12470  00154C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12471  00154E  0EFF               	movlw	255
 12472  001550  0100               	movlb	0	; () banked
 12473  001552  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12474  001554  0100               	movlb	0	; () banked
 12475  001556  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12476  001558  0E00               	movlw	0
 12477  00155A  0100               	movlb	0	; () banked
 12478  00155C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12479  00155E  0100               	movlb	0	; () banked
 12480  001560  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12481  001562  0E00               	movlw	0
 12482  001564  0100               	movlb	0	; () banked
 12483  001566  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12484  001568  0100               	movlb	0	; () banked
 12485  00156A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12486                           
 12487                           ; BSR set to: 0
 12488                           ;inc\CANlib.h: 963: tamp = tamp >> 8;
 12489  00156C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12490  001570  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12491  001574  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12492  001578  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12493  00157C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12494  001580  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12495  001584  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12496  001588  0100               	movlb	0	; () banked
 12497  00158A  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12498  00158C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12499  001590  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12500  001594  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12501  001598  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12502                           
 12503                           ; BSR set to: 0
 12504                           ;inc\CANlib.h: 964: RXF3EIDH = (unsigned char) tamp;
 12505  00159C  C081  FF0E         	movff	CANSetFilter@tamp,3854	;volatile
 12506                           
 12507                           ; BSR set to: 0
 12508                           ;inc\CANlib.h: 966: if (filter & 0x00010000)
 12509  0015A0  0100               	movlb	0	; () banked
 12510  0015A2  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12511  0015A4  D003               	goto	l494
 12512                           
 12513                           ; BSR set to: 0
 12514                           ;inc\CANlib.h: 967: RXF3SIDLbits.EID16 = 0x01;
 12515  0015A6  010F               	movlb	15	; () banked
 12516  0015A8  810D               	bsf	13,0,b	;volatile
 12517  0015AA  D002               	goto	l495
 12518  0015AC                     l494:
 12519                           
 12520                           ; BSR set to: 0
 12521                           ;inc\CANlib.h: 968: else
 12522                           ;inc\CANlib.h: 969: RXF3SIDLbits.EID16 = 0x00;
 12523  0015AC  010F               	movlb	15	; () banked
 12524  0015AE  910D               	bcf	13,0,b	;volatile
 12525  0015B0                     l495:
 12526                           
 12527                           ; BSR set to: 15
 12528                           ;inc\CANlib.h: 971: if (filter & 0x00020000)
 12529  0015B0  0100               	movlb	0	; () banked
 12530  0015B2  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12531  0015B4  D003               	goto	l496
 12532                           
 12533                           ; BSR set to: 0
 12534                           ;inc\CANlib.h: 972: RXF3SIDLbits.EID17 = 0x01;
 12535  0015B6  010F               	movlb	15	; () banked
 12536  0015B8  830D               	bsf	13,1,b	;volatile
 12537  0015BA  D002               	goto	l497
 12538  0015BC                     l496:
 12539                           
 12540                           ; BSR set to: 0
 12541                           ;inc\CANlib.h: 973: else
 12542                           ;inc\CANlib.h: 974: RXF3SIDLbits.EID17 = 0x00;
 12543  0015BC  010F               	movlb	15	; () banked
 12544  0015BE  930D               	bcf	13,1,b	;volatile
 12545  0015C0                     l497:
 12546                           
 12547                           ; BSR set to: 15
 12548                           ;inc\CANlib.h: 976: if (filter & 0x00040000)
 12549  0015C0  0100               	movlb	0	; () banked
 12550  0015C2  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12551  0015C4  D003               	goto	l498
 12552                           
 12553                           ; BSR set to: 0
 12554                           ;inc\CANlib.h: 977: RXF3SIDLbits.SID0 = 0x01;
 12555  0015C6  010F               	movlb	15	; () banked
 12556  0015C8  8B0D               	bsf	13,5,b	;volatile
 12557  0015CA  D002               	goto	l499
 12558  0015CC                     l498:
 12559                           
 12560                           ; BSR set to: 0
 12561                           ;inc\CANlib.h: 978: else
 12562                           ;inc\CANlib.h: 979: RXF3SIDLbits.SID0 = 0x00;
 12563  0015CC  010F               	movlb	15	; () banked
 12564  0015CE  9B0D               	bcf	13,5,b	;volatile
 12565  0015D0                     l499:
 12566                           
 12567                           ; BSR set to: 15
 12568                           ;inc\CANlib.h: 981: if (filter & 0x00080000)
 12569  0015D0  0100               	movlb	0	; () banked
 12570  0015D2  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12571  0015D4  D003               	goto	l500
 12572                           
 12573                           ; BSR set to: 0
 12574                           ;inc\CANlib.h: 982: RXF3SIDLbits.SID1 = 0x01;
 12575  0015D6  010F               	movlb	15	; () banked
 12576  0015D8  8D0D               	bsf	13,6,b	;volatile
 12577  0015DA  D002               	goto	l501
 12578  0015DC                     l500:
 12579                           
 12580                           ; BSR set to: 0
 12581                           ;inc\CANlib.h: 983: else
 12582                           ;inc\CANlib.h: 984: RXF3SIDLbits.SID1 = 0x00;
 12583  0015DC  010F               	movlb	15	; () banked
 12584  0015DE  9D0D               	bcf	13,6,b	;volatile
 12585  0015E0                     l501:
 12586                           
 12587                           ; BSR set to: 15
 12588                           ;inc\CANlib.h: 986: if (filter & 0x00100000)
 12589  0015E0  0100               	movlb	0	; () banked
 12590  0015E2  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12591  0015E4  D003               	goto	l502
 12592                           
 12593                           ; BSR set to: 0
 12594                           ;inc\CANlib.h: 987: RXF3SIDLbits.SID2 = 0x01 ;
 12595  0015E6  010F               	movlb	15	; () banked
 12596  0015E8  8F0D               	bsf	13,7,b	;volatile
 12597  0015EA  D003               	goto	l4810
 12598  0015EC                     l502:
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;inc\CANlib.h: 988: else
 12602                           ;inc\CANlib.h: 989: RXF3SIDLbits.SID2 = 0x00 ;
 12603  0015EC  010F               	movlb	15	; () banked
 12604  0015EE  9F0D               	bcf	13,7,b	;volatile
 12605  0015F0  D000               	goto	l4810
 12606  0015F2                     l4810:
 12607                           
 12608                           ; BSR set to: 15
 12609                           ;inc\CANlib.h: 991: tamp = (filter >> 21);
 12610  0015F2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12611  0015F6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12612  0015FA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12613  0015FE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12614  001602  0E16               	movlw	22
 12615  001604  D006               	goto	u5620
 12616  001606                     u5625:
 12617  001606  0100               	movlb	0	; () banked
 12618  001608  90D8               	bcf	status,0,c
 12619  00160A  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12620  00160C  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12621  00160E  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12622  001610  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12623  001612                     u5620:
 12624  001612  2EE8               	decfsz	wreg,f,c
 12625  001614  D7F8               	goto	u5625
 12626  001616  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12627  00161A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12628  00161E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12629  001622  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12630                           
 12631                           ; BSR set to: 0
 12632                           ;inc\CANlib.h: 992: tamp = tamp & 0x000000FF;
 12633  001626  0100               	movlb	0	; () banked
 12634  001628  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12635  00162A  0100               	movlb	0	; () banked
 12636  00162C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12637  00162E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12638  001630  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12639  001632  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12640                           
 12641                           ; BSR set to: 0
 12642                           ;inc\CANlib.h: 993: RXF3SIDH = (unsigned char) tamp;
 12643  001634  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 12644  001638  D000               	goto	l4816
 12645  00163A                     l4816:
 12646                           
 12647                           ; BSR set to: 0
 12648                           ;inc\CANlib.h: 994: }
 12649                           ;inc\CANlib.h: 996: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_XTD_MSG))
 12650  00163A  0E04               	movlw	4
 12651  00163C  0100               	movlb	0	; () banked
 12652  00163E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12653  001640  A4D8               	btfss	status,2,c
 12654  001642  D08B               	goto	l4850
 12655                           
 12656                           ; BSR set to: 0
 12657  001644  0EF7               	movlw	247
 12658  001646  0100               	movlb	0	; () banked
 12659  001648  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12660  00164A  A4D8               	btfss	status,2,c
 12661  00164C  D086               	goto	l4850
 12662                           
 12663                           ; BSR set to: 0
 12664                           ;inc\CANlib.h: 997: {
 12665                           ;inc\CANlib.h: 998: RXF4SIDLbits.EXIDEN = 0x01;
 12666  00164E  010F               	movlb	15	; () banked
 12667  001650  8711               	bsf	17,3,b	;volatile
 12668                           
 12669                           ; BSR set to: 15
 12670                           ;inc\CANlib.h: 1000: tamp = filter & 0x000000FF;
 12671  001652  0100               	movlb	0	; () banked
 12672  001654  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12673  001656  0100               	movlb	0	; () banked
 12674  001658  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12675  00165A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12676  00165C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12677  00165E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12678                           
 12679                           ; BSR set to: 0
 12680                           ;inc\CANlib.h: 1001: RXF4EIDL = (unsigned char) tamp;
 12681  001660  C081  FF13         	movff	CANSetFilter@tamp,3859	;volatile
 12682                           
 12683                           ; BSR set to: 0
 12684                           ;inc\CANlib.h: 1003: tamp = filter & 0x0000FF00;
 12685  001664  0E00               	movlw	0
 12686  001666  0100               	movlb	0	; () banked
 12687  001668  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12688  00166A  0100               	movlb	0	; () banked
 12689  00166C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12690  00166E  0EFF               	movlw	255
 12691  001670  0100               	movlb	0	; () banked
 12692  001672  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12693  001674  0100               	movlb	0	; () banked
 12694  001676  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12695  001678  0E00               	movlw	0
 12696  00167A  0100               	movlb	0	; () banked
 12697  00167C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12698  00167E  0100               	movlb	0	; () banked
 12699  001680  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12700  001682  0E00               	movlw	0
 12701  001684  0100               	movlb	0	; () banked
 12702  001686  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12703  001688  0100               	movlb	0	; () banked
 12704  00168A  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12705                           
 12706                           ; BSR set to: 0
 12707                           ;inc\CANlib.h: 1004: tamp = tamp >> 8;
 12708  00168C  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12709  001690  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12710  001694  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12711  001698  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12712  00169C  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12713  0016A0  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12714  0016A4  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12715  0016A8  0100               	movlb	0	; () banked
 12716  0016AA  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12717  0016AC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12718  0016B0  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12719  0016B4  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12720  0016B8  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12721                           
 12722                           ; BSR set to: 0
 12723                           ;inc\CANlib.h: 1005: RXF4EIDH = (unsigned char) tamp;
 12724  0016BC  C081  FF12         	movff	CANSetFilter@tamp,3858	;volatile
 12725                           
 12726                           ; BSR set to: 0
 12727                           ;inc\CANlib.h: 1007: if (filter & 0x00010000)
 12728  0016C0  0100               	movlb	0	; () banked
 12729  0016C2  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12730  0016C4  D003               	goto	l505
 12731                           
 12732                           ; BSR set to: 0
 12733                           ;inc\CANlib.h: 1008: RXF4SIDLbits.EID16 = 0x01;
 12734  0016C6  010F               	movlb	15	; () banked
 12735  0016C8  8111               	bsf	17,0,b	;volatile
 12736  0016CA  D002               	goto	l506
 12737  0016CC                     l505:
 12738                           
 12739                           ; BSR set to: 0
 12740                           ;inc\CANlib.h: 1009: else
 12741                           ;inc\CANlib.h: 1010: RXF4SIDLbits.EID16 = 0x00;
 12742  0016CC  010F               	movlb	15	; () banked
 12743  0016CE  9111               	bcf	17,0,b	;volatile
 12744  0016D0                     l506:
 12745                           
 12746                           ; BSR set to: 15
 12747                           ;inc\CANlib.h: 1012: if (filter & 0x00020000)
 12748  0016D0  0100               	movlb	0	; () banked
 12749  0016D2  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12750  0016D4  D003               	goto	l507
 12751                           
 12752                           ; BSR set to: 0
 12753                           ;inc\CANlib.h: 1013: RXF4SIDLbits.EID17 = 0x01;
 12754  0016D6  010F               	movlb	15	; () banked
 12755  0016D8  8311               	bsf	17,1,b	;volatile
 12756  0016DA  D002               	goto	l508
 12757  0016DC                     l507:
 12758                           
 12759                           ; BSR set to: 0
 12760                           ;inc\CANlib.h: 1014: else
 12761                           ;inc\CANlib.h: 1015: RXF4SIDLbits.EID17 = 0x00;
 12762  0016DC  010F               	movlb	15	; () banked
 12763  0016DE  9311               	bcf	17,1,b	;volatile
 12764  0016E0                     l508:
 12765                           
 12766                           ; BSR set to: 15
 12767                           ;inc\CANlib.h: 1017: if (filter & 0x00040000)
 12768  0016E0  0100               	movlb	0	; () banked
 12769  0016E2  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12770  0016E4  D003               	goto	l509
 12771                           
 12772                           ; BSR set to: 0
 12773                           ;inc\CANlib.h: 1018: RXF4SIDLbits.SID0 = 0x01;
 12774  0016E6  010F               	movlb	15	; () banked
 12775  0016E8  8B11               	bsf	17,5,b	;volatile
 12776  0016EA  D002               	goto	l510
 12777  0016EC                     l509:
 12778                           
 12779                           ; BSR set to: 0
 12780                           ;inc\CANlib.h: 1019: else
 12781                           ;inc\CANlib.h: 1020: RXF4SIDLbits.SID0 = 0x00;
 12782  0016EC  010F               	movlb	15	; () banked
 12783  0016EE  9B11               	bcf	17,5,b	;volatile
 12784  0016F0                     l510:
 12785                           
 12786                           ; BSR set to: 15
 12787                           ;inc\CANlib.h: 1022: if (filter & 0x00080000)
 12788  0016F0  0100               	movlb	0	; () banked
 12789  0016F2  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12790  0016F4  D003               	goto	l511
 12791                           
 12792                           ; BSR set to: 0
 12793                           ;inc\CANlib.h: 1023: RXF4SIDLbits.SID1 = 0x01;
 12794  0016F6  010F               	movlb	15	; () banked
 12795  0016F8  8D11               	bsf	17,6,b	;volatile
 12796  0016FA  D002               	goto	l512
 12797  0016FC                     l511:
 12798                           
 12799                           ; BSR set to: 0
 12800                           ;inc\CANlib.h: 1024: else
 12801                           ;inc\CANlib.h: 1025: RXF4SIDLbits.SID1 = 0x00;
 12802  0016FC  010F               	movlb	15	; () banked
 12803  0016FE  9D11               	bcf	17,6,b	;volatile
 12804  001700                     l512:
 12805                           
 12806                           ; BSR set to: 15
 12807                           ;inc\CANlib.h: 1027: if (filter & 0x00100000)
 12808  001700  0100               	movlb	0	; () banked
 12809  001702  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12810  001704  D003               	goto	l513
 12811                           
 12812                           ; BSR set to: 0
 12813                           ;inc\CANlib.h: 1028: RXF4SIDLbits.SID2 = 0x01 ;
 12814  001706  010F               	movlb	15	; () banked
 12815  001708  8F11               	bsf	17,7,b	;volatile
 12816  00170A  D003               	goto	l4844
 12817  00170C                     l513:
 12818                           
 12819                           ; BSR set to: 0
 12820                           ;inc\CANlib.h: 1029: else
 12821                           ;inc\CANlib.h: 1030: RXF4SIDLbits.SID2 = 0x00 ;
 12822  00170C  010F               	movlb	15	; () banked
 12823  00170E  9F11               	bcf	17,7,b	;volatile
 12824  001710  D000               	goto	l4844
 12825  001712                     l4844:
 12826                           
 12827                           ; BSR set to: 15
 12828                           ;inc\CANlib.h: 1032: tamp = (filter >> 21);
 12829  001712  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12830  001716  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12831  00171A  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12832  00171E  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12833  001722  0E16               	movlw	22
 12834  001724  D006               	goto	u5700
 12835  001726                     u5705:
 12836  001726  0100               	movlb	0	; () banked
 12837  001728  90D8               	bcf	status,0,c
 12838  00172A  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12839  00172C  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12840  00172E  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12841  001730  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12842  001732                     u5700:
 12843  001732  2EE8               	decfsz	wreg,f,c
 12844  001734  D7F8               	goto	u5705
 12845  001736  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12846  00173A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12847  00173E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12848  001742  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12849                           
 12850                           ; BSR set to: 0
 12851                           ;inc\CANlib.h: 1033: tamp = tamp & 0x000000FF;
 12852  001746  0100               	movlb	0	; () banked
 12853  001748  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12854  00174A  0100               	movlb	0	; () banked
 12855  00174C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12856  00174E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12857  001750  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12858  001752  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12859                           
 12860                           ; BSR set to: 0
 12861                           ;inc\CANlib.h: 1034: RXF4SIDH = (unsigned char) tamp;
 12862  001754  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 12863  001758  D000               	goto	l4850
 12864  00175A                     l4850:
 12865                           
 12866                           ; BSR set to: 0
 12867                           ;inc\CANlib.h: 1035: }
 12868                           ;inc\CANlib.h: 1037: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_XTD_MSG))
 12869  00175A  0E05               	movlw	5
 12870  00175C  0100               	movlb	0	; () banked
 12871  00175E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12872  001760  A4D8               	btfss	status,2,c
 12873  001762  0012               	return	
 12874                           
 12875                           ; BSR set to: 0
 12876  001764  0EF7               	movlw	247
 12877  001766  0100               	movlb	0	; () banked
 12878  001768  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12879  00176A  A4D8               	btfss	status,2,c
 12880  00176C  0012               	return	
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;inc\CANlib.h: 1038: {
 12884                           ;inc\CANlib.h: 1039: RXF5SIDLbits.EXIDEN = 0x01;
 12885  00176E  010F               	movlb	15	; () banked
 12886  001770  8715               	bsf	21,3,b	;volatile
 12887                           
 12888                           ; BSR set to: 15
 12889                           ;inc\CANlib.h: 1041: tamp = filter & 0x000000FF;
 12890  001772  0100               	movlb	0	; () banked
 12891  001774  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12892  001776  0100               	movlb	0	; () banked
 12893  001778  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12894  00177A  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12895  00177C  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12896  00177E  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12897                           
 12898                           ; BSR set to: 0
 12899                           ;inc\CANlib.h: 1042: RXF5EIDL = (unsigned char) tamp;
 12900  001780  C081  FF17         	movff	CANSetFilter@tamp,3863	;volatile
 12901                           
 12902                           ; BSR set to: 0
 12903                           ;inc\CANlib.h: 1044: tamp = filter & 0x0000FF00;
 12904  001784  0E00               	movlw	0
 12905  001786  0100               	movlb	0	; () banked
 12906  001788  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12907  00178A  0100               	movlb	0	; () banked
 12908  00178C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12909  00178E  0EFF               	movlw	255
 12910  001790  0100               	movlb	0	; () banked
 12911  001792  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12912  001794  0100               	movlb	0	; () banked
 12913  001796  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12914  001798  0E00               	movlw	0
 12915  00179A  0100               	movlb	0	; () banked
 12916  00179C  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12917  00179E  0100               	movlb	0	; () banked
 12918  0017A0  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12919  0017A2  0E00               	movlw	0
 12920  0017A4  0100               	movlb	0	; () banked
 12921  0017A6  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12922  0017A8  0100               	movlb	0	; () banked
 12923  0017AA  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12924                           
 12925                           ; BSR set to: 0
 12926                           ;inc\CANlib.h: 1045: tamp = tamp >> 8;
 12927  0017AC  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12928  0017B0  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12929  0017B4  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12930  0017B8  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12931  0017BC  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12932  0017C0  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12933  0017C4  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12934  0017C8  0100               	movlb	0	; () banked
 12935  0017CA  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12936  0017CC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12937  0017D0  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12938  0017D4  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12939  0017D8  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;inc\CANlib.h: 1046: RXF5EIDH = (unsigned char) tamp;
 12943  0017DC  C081  FF16         	movff	CANSetFilter@tamp,3862	;volatile
 12944                           
 12945                           ; BSR set to: 0
 12946                           ;inc\CANlib.h: 1048: if (filter & 0x00010000)
 12947  0017E0  0100               	movlb	0	; () banked
 12948  0017E2  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12949  0017E4  D003               	goto	l516
 12950                           
 12951                           ; BSR set to: 0
 12952                           ;inc\CANlib.h: 1049: RXF5SIDLbits.EID16 = 0x01;
 12953  0017E6  010F               	movlb	15	; () banked
 12954  0017E8  8115               	bsf	21,0,b	;volatile
 12955  0017EA  D002               	goto	l517
 12956  0017EC                     l516:
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;inc\CANlib.h: 1050: else
 12960                           ;inc\CANlib.h: 1051: RXF5SIDLbits.EID16 = 0x00;
 12961  0017EC  010F               	movlb	15	; () banked
 12962  0017EE  9115               	bcf	21,0,b	;volatile
 12963  0017F0                     l517:
 12964                           
 12965                           ; BSR set to: 15
 12966                           ;inc\CANlib.h: 1053: if (filter & 0x00020000)
 12967  0017F0  0100               	movlb	0	; () banked
 12968  0017F2  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12969  0017F4  D003               	goto	l518
 12970                           
 12971                           ; BSR set to: 0
 12972                           ;inc\CANlib.h: 1054: RXF5SIDLbits.EID17 = 0x01;
 12973  0017F6  010F               	movlb	15	; () banked
 12974  0017F8  8315               	bsf	21,1,b	;volatile
 12975  0017FA  D002               	goto	l519
 12976  0017FC                     l518:
 12977                           
 12978                           ; BSR set to: 0
 12979                           ;inc\CANlib.h: 1055: else
 12980                           ;inc\CANlib.h: 1056: RXF5SIDLbits.EID17 = 0x00;
 12981  0017FC  010F               	movlb	15	; () banked
 12982  0017FE  9315               	bcf	21,1,b	;volatile
 12983  001800                     l519:
 12984                           
 12985                           ; BSR set to: 15
 12986                           ;inc\CANlib.h: 1058: if (filter & 0x00040000)
 12987  001800  0100               	movlb	0	; () banked
 12988  001802  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12989  001804  D003               	goto	l520
 12990                           
 12991                           ; BSR set to: 0
 12992                           ;inc\CANlib.h: 1059: RXF5SIDLbits.SID0 = 0x01;
 12993  001806  010F               	movlb	15	; () banked
 12994  001808  8B15               	bsf	21,5,b	;volatile
 12995  00180A  D002               	goto	l521
 12996  00180C                     l520:
 12997                           
 12998                           ; BSR set to: 0
 12999                           ;inc\CANlib.h: 1060: else
 13000                           ;inc\CANlib.h: 1061: RXF5SIDLbits.SID0 = 0x00;
 13001  00180C  010F               	movlb	15	; () banked
 13002  00180E  9B15               	bcf	21,5,b	;volatile
 13003  001810                     l521:
 13004                           
 13005                           ; BSR set to: 15
 13006                           ;inc\CANlib.h: 1063: if (filter & 0x00080000)
 13007  001810  0100               	movlb	0	; () banked
 13008  001812  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 13009  001814  D003               	goto	l522
 13010                           
 13011                           ; BSR set to: 0
 13012                           ;inc\CANlib.h: 1064: RXF5SIDLbits.SID1 = 0x01;
 13013  001816  010F               	movlb	15	; () banked
 13014  001818  8D15               	bsf	21,6,b	;volatile
 13015  00181A  D002               	goto	l523
 13016  00181C                     l522:
 13017                           
 13018                           ; BSR set to: 0
 13019                           ;inc\CANlib.h: 1065: else
 13020                           ;inc\CANlib.h: 1066: RXF5SIDLbits.SID1 = 0x00;
 13021  00181C  010F               	movlb	15	; () banked
 13022  00181E  9D15               	bcf	21,6,b	;volatile
 13023  001820                     l523:
 13024                           
 13025                           ; BSR set to: 15
 13026                           ;inc\CANlib.h: 1068: if (filter & 0x00100000)
 13027  001820  0100               	movlb	0	; () banked
 13028  001822  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 13029  001824  D003               	goto	l524
 13030                           
 13031                           ; BSR set to: 0
 13032                           ;inc\CANlib.h: 1069: RXF5SIDLbits.SID2 = 0x01 ;
 13033  001826  010F               	movlb	15	; () banked
 13034  001828  8F15               	bsf	21,7,b	;volatile
 13035  00182A  D003               	goto	l4878
 13036  00182C                     l524:
 13037                           
 13038                           ; BSR set to: 0
 13039                           ;inc\CANlib.h: 1070: else
 13040                           ;inc\CANlib.h: 1071: RXF5SIDLbits.SID2 = 0x00 ;
 13041  00182C  010F               	movlb	15	; () banked
 13042  00182E  9F15               	bcf	21,7,b	;volatile
 13043  001830  D000               	goto	l4878
 13044  001832                     l4878:
 13045                           
 13046                           ; BSR set to: 15
 13047                           ;inc\CANlib.h: 1073: tamp = (filter >> 21);
 13048  001832  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 13049  001836  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 13050  00183A  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 13051  00183E  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 13052  001842  0E16               	movlw	22
 13053  001844  D006               	goto	u5780
 13054  001846                     u5785:
 13055  001846  0100               	movlb	0	; () banked
 13056  001848  90D8               	bcf	status,0,c
 13057  00184A  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 13058  00184C  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 13059  00184E  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 13060  001850  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 13061  001852                     u5780:
 13062  001852  2EE8               	decfsz	wreg,f,c
 13063  001854  D7F8               	goto	u5785
 13064  001856  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 13065  00185A  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 13066  00185E  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 13067  001862  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 13068                           
 13069                           ; BSR set to: 0
 13070                           ;inc\CANlib.h: 1074: tamp = tamp & 0x000000FF;
 13071  001866  0100               	movlb	0	; () banked
 13072  001868  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 13073  00186A  0100               	movlb	0	; () banked
 13074  00186C  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13075  00186E  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 13076  001870  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 13077  001872  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 13078                           
 13079                           ; BSR set to: 0
 13080                           ;inc\CANlib.h: 1075: RXF5SIDH = (unsigned char) tamp;
 13081  001874  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 13082  001878  0012               	return	
 13083                           
 13084                           ; BSR set to: 0
 13085                           
 13086                           ; BSR set to: 0
 13087  00187A  0012               	return		;funcret
 13088  00187C                     __end_of_CANSetFilter:
 13089                           	opt stack 0
 13090                           tblptru	equ	0xFF8
 13091                           tblptrh	equ	0xFF7
 13092                           tblptrl	equ	0xFF6
 13093                           tablat	equ	0xFF5
 13094                           prodh	equ	0xFF4
 13095                           prodl	equ	0xFF3
 13096                           intcon	equ	0xFF2
 13097                           intcon2	equ	0xFF1
 13098                           postinc0	equ	0xFEE
 13099                           wreg	equ	0xFE8
 13100                           postdec1	equ	0xFE5
 13101                           fsr1l	equ	0xFE1
 13102                           indf2	equ	0xFDF
 13103                           postinc2	equ	0xFDE
 13104                           postdec2	equ	0xFDD
 13105                           fsr2h	equ	0xFDA
 13106                           fsr2l	equ	0xFD9
 13107                           status	equ	0xFD8
 13108                           
 13109 ;; *************** function _CANOperationMode *****************
 13110 ;; Defined at:
 13111 ;;		line 206 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 13112 ;; Parameters:    Size  Location     Type
 13113 ;;  mode            1    wreg     enum E16348
 13114 ;; Auto vars:     Size  Location     Type
 13115 ;;  mode            1   23[BANK0 ] enum E16348
 13116 ;; Return value:  Size  Location     Type
 13117 ;;		None               void
 13118 ;; Registers used:
 13119 ;;		wreg, status,2, status,0
 13120 ;; Tracked objects:
 13121 ;;		On entry : 0/0
 13122 ;;		On exit  : 0/0
 13123 ;;		Unchanged: 0/0
 13124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13128 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13129 ;;Total ram usage:        1 bytes
 13130 ;; Hardware stack levels used:    1
 13131 ;; Hardware stack levels required when called:    5
 13132 ;; This function calls:
 13133 ;;		Nothing
 13134 ;; This function is called by:
 13135 ;;		_CANInitialize
 13136 ;; This function uses a non-reentrant model
 13137 ;;
 13138                           
 13139                           	psect	text36
 13140  005E54                     __ptext36:
 13141                           	opt stack 0
 13142  005E54                     _CANOperationMode:
 13143                           	opt stack 23
 13144                           
 13145                           ; BSR set to: 0
 13146                           ;incstack = 0
 13147                           ;CANOperationMode@mode stored from wreg
 13148  005E54  0100               	movlb	0	; () banked
 13149  005E56  6F77               	movwf	CANOperationMode@mode& (0+255),b
 13150                           
 13151                           ; BSR set to: 0
 13152                           ;inc\CANlib.h: 208: CANCON = mode;
 13153  005E58  C077  FF6F         	movff	CANOperationMode@mode,3951	;volatile
 13154                           
 13155                           ; BSR set to: 0
 13156                           
 13157                           ;inc\CANlib.h: 210: while((CANSTAT & 0b11100000) != mode );
 13158  005E5C  D000               	goto	l4474
 13159  005E5E                     l4474:
 13160                           
 13161                           ; BSR set to: 0
 13162  005E5E  506E               	movf	3950,w,c	;volatile
 13163  005E60  0BE0               	andlw	224
 13164  005E62  0100               	movlb	0	; () banked
 13165  005E64  1977               	xorwf	CANOperationMode@mode& (0+255),w,b
 13166  005E66  A4D8               	btfss	status,2,c
 13167  005E68  D7FA               	goto	l4474
 13168                           
 13169                           ; BSR set to: 0
 13170                           
 13171                           ; BSR set to: 0
 13172  005E6A  0012               	return		;funcret
 13173  005E6C                     __end_of_CANOperationMode:
 13174                           	opt stack 0
 13175                           tblptru	equ	0xFF8
 13176                           tblptrh	equ	0xFF7
 13177                           tblptrl	equ	0xFF6
 13178                           tablat	equ	0xFF5
 13179                           prodh	equ	0xFF4
 13180                           prodl	equ	0xFF3
 13181                           intcon	equ	0xFF2
 13182                           intcon2	equ	0xFF1
 13183                           postinc0	equ	0xFEE
 13184                           wreg	equ	0xFE8
 13185                           postdec1	equ	0xFE5
 13186                           fsr1l	equ	0xFE1
 13187                           indf2	equ	0xFDF
 13188                           postinc2	equ	0xFDE
 13189                           postdec2	equ	0xFDD
 13190                           fsr2h	equ	0xFDA
 13191                           fsr2l	equ	0xFD9
 13192                           status	equ	0xFD8
 13193                           
 13194 ;; *************** function _ISR_Bassa *****************
 13195 ;; Defined at:
 13196 ;;		line 125 in file "parcheggio.c"
 13197 ;; Parameters:    Size  Location     Type
 13198 ;;		None
 13199 ;; Auto vars:     Size  Location     Type
 13200 ;;  i               1   40[COMRAM] unsigned char 
 13201 ;;  MUX_index_co    2   37[COMRAM] unsigned char [2]
 13202 ;;  PORTA_temp      1   39[COMRAM] unsigned char 
 13203 ;; Return value:  Size  Location     Type
 13204 ;;		None               void
 13205 ;; Registers used:
 13206 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13207 ;; Tracked objects:
 13208 ;;		On entry : 0/0
 13209 ;;		On exit  : 0/0
 13210 ;;		Unchanged: 0/0
 13211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13213 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13214 ;;      Temps:         21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13215 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13216 ;;Total ram usage:       25 bytes
 13217 ;; Hardware stack levels used:    1
 13218 ;; Hardware stack levels required when called:    4
 13219 ;; This function calls:
 13220 ;;		_CANisRxReady
 13221 ;;		_CANreceiveMessage
 13222 ;;		i1_CANsendMessage
 13223 ;;		i1_delay_ms
 13224 ;; This function is called by:
 13225 ;;		Interrupt level 1
 13226 ;; This function uses a non-reentrant model
 13227 ;;
 13228                           
 13229                           	psect	intcodelo
 13230  000018                     __pintcodelo:
 13231                           	opt stack 0
 13232  000018                     _ISR_Bassa:
 13233                           	opt stack 19
 13234                           
 13235                           ; BSR set to: 0
 13236                           ;incstack = 0
 13237  000018  CFD8 F015          	movff	status,??_ISR_Bassa+4
 13238  00001C  CFE8 F016          	movff	wreg,??_ISR_Bassa+5
 13239  000020  CFE0 F017          	movff	bsr,??_ISR_Bassa+6
 13240  000024  CFFA F018          	movff	pclath,??_ISR_Bassa+7
 13241  000028  CFFB F019          	movff	pclatu,??_ISR_Bassa+8
 13242  00002C  CFE9 F01A          	movff	fsr0l,??_ISR_Bassa+9
 13243  000030  CFEA F01B          	movff	fsr0h,??_ISR_Bassa+10
 13244  000034  CFE1 F01C          	movff	fsr1l,??_ISR_Bassa+11
 13245  000038  CFE2 F01D          	movff	fsr1h,??_ISR_Bassa+12
 13246  00003C  CFD9 F01E          	movff	fsr2l,??_ISR_Bassa+13
 13247  000040  CFDA F01F          	movff	fsr2h,??_ISR_Bassa+14
 13248  000044  CFF3 F020          	movff	prodl,??_ISR_Bassa+15
 13249  000048  CFF4 F021          	movff	prodh,??_ISR_Bassa+16
 13250  00004C  CFF6 F022          	movff	tblptrl,??_ISR_Bassa+17
 13251  000050  CFF7 F023          	movff	tblptrh,??_ISR_Bassa+18
 13252  000054  CFF8 F024          	movff	tblptru,??_ISR_Bassa+19
 13253  000058  CFF5 F025          	movff	tablat,??_ISR_Bassa+20
 13254                           
 13255                           ;parcheggio.c: 128: if (INTCONbits.TMR0IF == 1) {
 13256  00005C  A4F2               	btfss	intcon,2,c	;volatile
 13257  00005E  D0B4               	goto	i1l5888
 13258                           
 13259                           ;parcheggio.c: 129: INTCONbits.INT0IE = 0;
 13260  000060  98F2               	bcf	intcon,4,c	;volatile
 13261                           
 13262                           ;parcheggio.c: 130: T0CONbits.TMR0ON = 0;
 13263  000062  9ED5               	bcf	4053,7,c	;volatile
 13264                           
 13265                           ;parcheggio.c: 131: TMR0H = 0x34;
 13266  000064  0E34               	movlw	52
 13267  000066  6ED7               	movwf	4055,c	;volatile
 13268                           
 13269                           ;parcheggio.c: 132: TMR0L = 0xE0;
 13270  000068  0EE0               	movlw	224
 13271  00006A  6ED6               	movwf	4054,c	;volatile
 13272                           
 13273                           ;parcheggio.c: 133: T0CONbits.TMR0ON = 1;
 13274  00006C  8ED5               	bsf	4053,7,c	;volatile
 13275                           
 13276                           ;parcheggio.c: 135: if (distance_error == 1) {
 13277  00006E  AA51               	btfss	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13278  000070  D00C               	goto	i1l704
 13279                           
 13280                           ;parcheggio.c: 136: sensor_distance[MUX_index] = 5000;
 13281  000072  504C               	movf	_MUX_index,w,c	;volatile
 13282  000074  0D02               	mullw	2
 13283  000076  0E2A               	movlw	low _sensor_distance
 13284  000078  24F3               	addwf	prodl,w,c
 13285  00007A  6ED9               	movwf	fsr2l,c
 13286  00007C  0E00               	movlw	high _sensor_distance
 13287  00007E  20F4               	addwfc	prodh,w,c
 13288  000080  6EDA               	movwf	fsr2h,c
 13289  000082  0E88               	movlw	136
 13290  000084  6EDE               	movwf	postinc2,c
 13291  000086  0E13               	movlw	19
 13292  000088  6EDD               	movwf	postdec2,c
 13293  00008A                     i1l704:
 13294                           
 13295                           ;parcheggio.c: 137: }
 13296                           ;parcheggio.c: 139: if ((sensor_distance[MUX_index] < 250)&&(start_operation == 0)&&((MU
      +                          X_index == 3) || (MUX_index == 6))) {
 13297  00008A  504C               	movf	_MUX_index,w,c	;volatile
 13298  00008C  0D02               	mullw	2
 13299  00008E  0E2A               	movlw	low _sensor_distance
 13300  000090  24F3               	addwf	prodl,w,c
 13301  000092  6ED9               	movwf	fsr2l,c
 13302  000094  0E00               	movlw	high _sensor_distance
 13303  000096  20F4               	addwfc	prodh,w,c
 13304  000098  6EDA               	movwf	fsr2h,c
 13305  00009A  0E01               	movlw	1
 13306  00009C  50DB               	movf	plusw2,w,c
 13307  00009E  E118               	bnz	i1l5832
 13308  0000A0  0EFA               	movlw	250
 13309  0000A2  5CDE               	subwf	postinc2,w,c
 13310  0000A4  B0D8               	btfsc	status,0,c
 13311  0000A6  D014               	goto	i1l5832
 13312  0000A8  BC52               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13313  0000AA  D012               	goto	i1l5832
 13314  0000AC  0E03               	movlw	3
 13315  0000AE  184C               	xorwf	_MUX_index,w,c	;volatile
 13316  0000B0  B4D8               	btfsc	status,2,c
 13317  0000B2  D004               	goto	i1l5828
 13318  0000B4  0E06               	movlw	6
 13319  0000B6  184C               	xorwf	_MUX_index,w,c	;volatile
 13320  0000B8  A4D8               	btfss	status,2,c
 13321  0000BA  D00A               	goto	i1l5832
 13322  0000BC                     i1l5828:
 13323                           
 13324                           ;parcheggio.c: 140: if (MUX_index == 3) {
 13325  0000BC  0E03               	movlw	3
 13326  0000BE  184C               	xorwf	_MUX_index,w,c	;volatile
 13327  0000C0  A4D8               	btfss	status,2,c
 13328  0000C2  D003               	goto	i1l708
 13329                           
 13330                           ;parcheggio.c: 141: sensor_distance_short[1] = sensor_distance[3];
 13331  0000C4  C030  F186         	movff	_sensor_distance+6,_sensor_distance_short+1	;volatile
 13332                           
 13333                           ;parcheggio.c: 142: } else {
 13334  0000C8  D00D               	goto	i1l710
 13335  0000CA                     i1l708:
 13336                           
 13337                           ;parcheggio.c: 143: sensor_distance_short[0] = sensor_distance[6];
 13338  0000CA  C036  F185         	movff	_sensor_distance+12,_sensor_distance_short	;volatile
 13339                           
 13340                           ;parcheggio.c: 144: }
 13341                           ;parcheggio.c: 145: } else {
 13342  0000CE  D00A               	goto	i1l710
 13343  0000D0                     i1l5832:
 13344                           
 13345                           ;parcheggio.c: 146: sensor_distance_short[MUX_index] = 255;
 13346  0000D0  504C               	movf	_MUX_index,w,c	;volatile
 13347  0000D2  0D01               	mullw	1
 13348  0000D4  0E85               	movlw	low _sensor_distance_short
 13349  0000D6  24F3               	addwf	prodl,w,c
 13350  0000D8  6ED9               	movwf	fsr2l,c
 13351  0000DA  0E01               	movlw	high _sensor_distance_short
 13352  0000DC  20F4               	addwfc	prodh,w,c
 13353  0000DE  6EDA               	movwf	fsr2h,c
 13354  0000E0  0EFF               	movlw	255
 13355  0000E2  6EDF               	movwf	indf2,c
 13356  0000E4                     i1l710:
 13357                           
 13358                           ;parcheggio.c: 147: }
 13359                           ;parcheggio.c: 148: if ((sensor_distance[MUX_index] < 10)&&(start_operation == 1)&&(avvi
      +                          cinamento == 0)&&((MUX_index != 0) || (MUX_index != 1))) {
 13360  0000E4  504C               	movf	_MUX_index,w,c	;volatile
 13361  0000E6  0D02               	mullw	2
 13362  0000E8  0E2A               	movlw	low _sensor_distance
 13363  0000EA  24F3               	addwf	prodl,w,c
 13364  0000EC  6ED9               	movwf	fsr2l,c
 13365  0000EE  0E00               	movlw	high _sensor_distance
 13366  0000F0  20F4               	addwfc	prodh,w,c
 13367  0000F2  6EDA               	movwf	fsr2h,c
 13368  0000F4  0E01               	movlw	1
 13369  0000F6  50DB               	movf	plusw2,w,c
 13370  0000F8  E12E               	bnz	i1l5852
 13371  0000FA  0E0A               	movlw	10
 13372  0000FC  5CDE               	subwf	postinc2,w,c
 13373  0000FE  B0D8               	btfsc	status,0,c
 13374  000100  D02A               	goto	i1l5852
 13375  000102  BC52               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13376  000104  B651               	btfsc	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
 13377  000106  D027               	goto	i1l5852
 13378  000108  504C               	movf	_MUX_index,w,c	;volatile
 13379  00010A  A4D8               	btfss	status,2,c
 13380  00010C  D003               	goto	i1l5842
 13381  00010E  044C               	decf	_MUX_index,w,c	;volatile
 13382  000110  B4D8               	btfsc	status,2,c
 13383  000112  D021               	goto	i1l5852
 13384  000114                     i1l5842:
 13385                           
 13386                           ;parcheggio.c: 149: counter++;
 13387  000114  2A4F               	incf	_counter,f,c	;volatile
 13388                           
 13389                           ;parcheggio.c: 150: if (counter > 0) {
 13390  000116  504F               	movf	_counter,w,c	;volatile
 13391  000118  B4D8               	btfsc	status,2,c
 13392  00011A  D01D               	goto	i1l5852
 13393                           
 13394                           ;parcheggio.c: 151: data[0] = 4;
 13395  00011C  0E04               	movlw	4
 13396  00011E  0101               	movlb	1	; () banked
 13397  000120  6F55               	movwf	_data& (0+255),b	;volatile
 13398                           
 13399                           ; BSR set to: 1
 13400                           ;parcheggio.c: 152: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
 13401  000122  0E0D               	movlw	13
 13402  000124  6E01               	movwf	i1CANsendMessage@identifier,c
 13403  000126  0E00               	movlw	0
 13404  000128  6E02               	movwf	i1CANsendMessage@identifier+1,c
 13405  00012A  0E00               	movlw	0
 13406  00012C  6E03               	movwf	i1CANsendMessage@identifier+2,c
 13407  00012E  0E00               	movlw	0
 13408  000130  6E04               	movwf	i1CANsendMessage@identifier+3,c
 13409  000132  0E55               	movlw	low _data
 13410  000134  6E05               	movwf	i1CANsendMessage@data,c
 13411  000136  0E01               	movlw	high _data
 13412  000138  6E06               	movwf	i1CANsendMessage@data+1,c
 13413  00013A  0E08               	movlw	8
 13414  00013C  6E07               	movwf	i1CANsendMessage@dataLength,c
 13415  00013E  0EBC               	movlw	188
 13416  000140  6E08               	movwf	i1CANsendMessage@flags,c
 13417  000142  EC0E  F010         	call	i1_CANsendMessage	;wreg free
 13418                           
 13419                           ;parcheggio.c: 153: delay_ms(20);
 13420  000146  0E00               	movlw	0
 13421  000148  6E08               	movwf	i1delay_ms@value_ms+1,c
 13422  00014A  0E14               	movlw	20
 13423  00014C  6E07               	movwf	i1delay_ms@value_ms,c
 13424  00014E  ECA1  F02E         	call	i1_delay_ms	;wreg free
 13425  000152  00FF               	reset		;# 
 13426  000154  D000               	goto	i1l5852
 13427  000156                     i1l5852:
 13428                           
 13429                           ;parcheggio.c: 155: }
 13430                           ;parcheggio.c: 156: }
 13431                           ;parcheggio.c: 158: MUX_index++;
 13432  000156  2A4C               	incf	_MUX_index,f,c	;volatile
 13433                           
 13434                           ;parcheggio.c: 159: if (activation == 0) {
 13435  000158  B251               	btfsc	_activation/(0+8),_activation& (0+7),c	;volatile
 13436  00015A  D015               	goto	i1l5860
 13437                           
 13438                           ;parcheggio.c: 160: unsigned char MUX_index_collision [] = {3, 6};
 13439  00015C  C053  F026         	movff	ISR_Bassa@F16869,ISR_Bassa@MUX_index_collision
 13440  000160  C054  F027         	movff	ISR_Bassa@F16869+1,ISR_Bassa@MUX_index_collision+1
 13441                           
 13442                           ;parcheggio.c: 161: MUX_toggle = ~MUX_toggle;
 13443  000164  7051               	btg	_MUX_toggle/(0+8),_MUX_toggle& (0+7),c	;volatile
 13444                           
 13445                           ;parcheggio.c: 162: MUX_index = MUX_index_collision[MUX_toggle];
 13446  000166  A051               	btfss	_MUX_toggle/(0+8),_MUX_toggle& (0+7),c	;volatile
 13447  000168  D002               	goto	i1u724_20
 13448  00016A  0E01               	movlw	1
 13449  00016C  D001               	goto	i1u725_20
 13450  00016E                     i1u724_20:
 13451  00016E  0E00               	movlw	0
 13452  000170                     i1u725_20:
 13453  000170  6E11               	movwf	??_ISR_Bassa& (0+255),c
 13454  000172  6A12               	clrf	(??_ISR_Bassa+1)& (0+255),c
 13455  000174  0E26               	movlw	low ISR_Bassa@MUX_index_collision
 13456  000176  2411               	addwf	??_ISR_Bassa,w,c
 13457  000178  6ED9               	movwf	fsr2l,c
 13458  00017A  0E00               	movlw	high ISR_Bassa@MUX_index_collision
 13459  00017C  2012               	addwfc	??_ISR_Bassa+1,w,c
 13460  00017E  6EDA               	movwf	fsr2h,c
 13461  000180  50DF               	movf	indf2,w,c
 13462  000182  6E4C               	movwf	_MUX_index,c	;volatile
 13463  000184  D000               	goto	i1l5860
 13464  000186                     i1l5860:
 13465                           
 13466                           ;parcheggio.c: 163: }
 13467                           ;parcheggio.c: 165: if (MUX_index == 8) {
 13468  000186  0E08               	movlw	8
 13469  000188  184C               	xorwf	_MUX_index,w,c	;volatile
 13470  00018A  A4D8               	btfss	status,2,c
 13471  00018C  D002               	goto	i1l718
 13472                           
 13473                           ;parcheggio.c: 166: MUX_index = 0;
 13474  00018E  0E00               	movlw	0
 13475  000190  6E4C               	movwf	_MUX_index,c	;volatile
 13476  000192                     i1l718:
 13477                           
 13478                           ;parcheggio.c: 167: }
 13479                           ;parcheggio.c: 169: unsigned char PORTA_temp = 0;
 13480  000192  0E00               	movlw	0
 13481  000194  6E28               	movwf	ISR_Bassa@PORTA_temp,c
 13482                           
 13483                           ;parcheggio.c: 170: PORTA_temp = MUX_select[MUX_index];
 13484  000196  504C               	movf	_MUX_index,w,c	;volatile
 13485  000198  0D01               	mullw	1
 13486  00019A  0E3A               	movlw	low _MUX_select
 13487  00019C  24F3               	addwf	prodl,w,c
 13488  00019E  6ED9               	movwf	fsr2l,c
 13489  0001A0  0E00               	movlw	high _MUX_select
 13490  0001A2  20F4               	addwfc	prodh,w,c
 13491  0001A4  6EDA               	movwf	fsr2h,c
 13492  0001A6  50DF               	movf	indf2,w,c
 13493  0001A8  6E28               	movwf	ISR_Bassa@PORTA_temp,c
 13494                           
 13495                           ;parcheggio.c: 171: PORTA = PORTA_temp;
 13496  0001AA  C028  FF80         	movff	ISR_Bassa@PORTA_temp,3968	;volatile
 13497                           
 13498                           ;parcheggio.c: 173: TRISBbits.RB0 = 0;
 13499  0001AE  9093               	bcf	3987,0,c	;volatile
 13500                           
 13501                           ;parcheggio.c: 174: LATBbits.LATB0 = 1;
 13502  0001B0  808A               	bsf	3978,0,c	;volatile
 13503                           
 13504                           ;parcheggio.c: 175: _delay((unsigned long)((15)*(16000000/4000000.0)));
 13505  0001B2  0E14               	movlw	20
 13506  0001B4                     i1u866_27:
 13507  0001B4  2EE8               	decfsz	wreg,f,c
 13508  0001B6  D7FE               	goto	i1u866_27
 13509                           
 13510                           ;parcheggio.c: 176: distance_error = 1;
 13511  0001B8  8A51               	bsf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13512                           
 13513                           ;parcheggio.c: 177: LATBbits.LATB0 = 0;
 13514  0001BA  908A               	bcf	3978,0,c	;volatile
 13515                           
 13516                           ;parcheggio.c: 178: TRISBbits.RB0 = 1;
 13517  0001BC  8093               	bsf	3987,0,c	;volatile
 13518                           
 13519                           ;parcheggio.c: 179: INTCONbits.INT0IF = 0;
 13520  0001BE  92F2               	bcf	intcon,1,c	;volatile
 13521                           
 13522                           ;parcheggio.c: 180: INTCON2bits.INTEDG0 = 1;
 13523  0001C0  8CF1               	bsf	intcon2,6,c	;volatile
 13524                           
 13525                           ;parcheggio.c: 181: INTCONbits.INT0IE = 1;
 13526  0001C2  88F2               	bsf	intcon,4,c	;volatile
 13527                           
 13528                           ;parcheggio.c: 182: INTCONbits.TMR0IF = 0;
 13529  0001C4  94F2               	bcf	intcon,2,c	;volatile
 13530  0001C6  D000               	goto	i1l5888
 13531  0001C8                     i1l5888:
 13532                           
 13533                           ;parcheggio.c: 184: }
 13534                           ;parcheggio.c: 187: if ((PIR3bits.RXB0IF == 1) || (PIR3bits.RXB1IF == 1)) {
 13535  0001C8  B0A4               	btfsc	4004,0,c	;volatile
 13536  0001CA  D002               	goto	i1l5892
 13537  0001CC  A2A4               	btfss	4004,1,c	;volatile
 13538  0001CE  D09E               	goto	i1l732
 13539  0001D0                     i1l5892:
 13540                           
 13541                           ;parcheggio.c: 188: if (CANisRxReady()) {
 13542  0001D0  EC36  F02F         	call	_CANisRxReady	;wreg free
 13543  0001D4  0900               	iorlw	0
 13544  0001D6  B4D8               	btfsc	status,2,c
 13545  0001D8  D099               	goto	i1l732
 13546                           
 13547                           ;parcheggio.c: 189: CANreceiveMessage(&msg);
 13548  0001DA  0E46               	movlw	low _msg
 13549  0001DC  6E01               	movwf	CANreceiveMessage@msg,c
 13550  0001DE  0E01               	movlw	high _msg
 13551  0001E0  6E02               	movwf	CANreceiveMessage@msg+1,c
 13552  0001E2  EC25  F016         	call	_CANreceiveMessage	;wreg free
 13553                           
 13554                           ;parcheggio.c: 191: if (msg.identifier == 0b00000001111) {
 13555  0001E6  0E0F               	movlw	15
 13556  0001E8  0101               	movlb	1	; () banked
 13557  0001EA  1946               	xorwf	_msg& (0+255),w,b
 13558  0001EC  0101               	movlb	1	; () banked
 13559  0001EE  1147               	iorwf	(_msg+1)& (0+255),w,b
 13560  0001F0  0101               	movlb	1	; () banked
 13561  0001F2  1148               	iorwf	(_msg+2)& (0+255),w,b
 13562  0001F4  0101               	movlb	1	; () banked
 13563  0001F6  1149               	iorwf	(_msg+3)& (0+255),w,b
 13564  0001F8  A4D8               	btfss	status,2,c
 13565  0001FA  D002               	goto	i1l5900
 13566                           
 13567                           ; BSR set to: 1
 13568                           ;parcheggio.c: 192: asd = 0;
 13569  0001FC  9451               	bcf	_asd/(0+8),_asd& (0+7),c	;volatile
 13570  0001FE  D000               	goto	i1l5900
 13571  000200                     i1l5900:
 13572                           
 13573                           ; BSR set to: 1
 13574                           ;parcheggio.c: 193: }
 13575                           ;parcheggio.c: 195: if ((msg.identifier == 0b00000001001) && (msg.RTR != 1)) {
 13576  000200  0E09               	movlw	9
 13577  000202  0101               	movlb	1	; () banked
 13578  000204  1946               	xorwf	_msg& (0+255),w,b
 13579  000206  0101               	movlb	1	; () banked
 13580  000208  1147               	iorwf	(_msg+1)& (0+255),w,b
 13581  00020A  0101               	movlb	1	; () banked
 13582  00020C  1148               	iorwf	(_msg+2)& (0+255),w,b
 13583  00020E  0101               	movlb	1	; () banked
 13584  000210  1149               	iorwf	(_msg+3)& (0+255),w,b
 13585  000212  A4D8               	btfss	status,2,c
 13586  000214  D02E               	goto	i1l5916
 13587                           
 13588                           ; BSR set to: 1
 13589  000216  0101               	movlb	1	; () banked
 13590  000218  0554               	decf	(_msg+14)& (0+255),w,b
 13591  00021A  B4D8               	btfsc	status,2,c
 13592  00021C  D02A               	goto	i1l5916
 13593                           
 13594                           ; BSR set to: 1
 13595                           ;parcheggio.c: 196: distance_average = 0;
 13596  00021E  0E00               	movlw	0
 13597  000220  0101               	movlb	1	; () banked
 13598  000222  6F3F               	movwf	(_distance_average+1)& (0+255),b	;volatile
 13599  000224  0E00               	movlw	0
 13600  000226  6F3E               	movwf	_distance_average& (0+255),b	;volatile
 13601                           
 13602                           ; BSR set to: 1
 13603                           ;parcheggio.c: 197: distance_dx = msg.data[1];
 13604  000228  C14B  F044         	movff	_msg+5,_distance_dx	;volatile
 13605  00022C  6A45               	clrf	_distance_dx+1,c	;volatile
 13606                           
 13607                           ;parcheggio.c: 198: distance_dx = ((distance_dx << 8) | msg.data[0]);
 13608  00022E  5044               	movf	_distance_dx,w,c	;volatile
 13609  000230  6E11               	movwf	??_ISR_Bassa& (0+255),c
 13610  000232  0101               	movlb	1	; () banked
 13611  000234  514A               	movf	(_msg+4)& (0+255),w,b
 13612  000236  6E44               	movwf	_distance_dx,c	;volatile
 13613  000238  C011  F045         	movff	??_ISR_Bassa,_distance_dx+1	;volatile
 13614                           
 13615                           ; BSR set to: 1
 13616                           ;parcheggio.c: 199: distance_sx = msg.data[3];
 13617  00023C  C14D  F046         	movff	_msg+7,_distance_sx	;volatile
 13618  000240  6A47               	clrf	_distance_sx+1,c	;volatile
 13619                           
 13620                           ;parcheggio.c: 200: distance_sx = ((distance_sx << 8) | msg.data[2]);
 13621  000242  5046               	movf	_distance_sx,w,c	;volatile
 13622  000244  6E11               	movwf	??_ISR_Bassa& (0+255),c
 13623  000246  0101               	movlb	1	; () banked
 13624  000248  514C               	movf	(_msg+6)& (0+255),w,b
 13625  00024A  6E46               	movwf	_distance_sx,c	;volatile
 13626  00024C  C011  F047         	movff	??_ISR_Bassa,_distance_sx+1	;volatile
 13627                           
 13628                           ; BSR set to: 1
 13629                           ;parcheggio.c: 201: distance_average = (distance_sx + distance_dx) / 2;
 13630  000250  5044               	movf	_distance_dx,w,c	;volatile
 13631  000252  2446               	addwf	_distance_sx,w,c	;volatile
 13632  000254  6E11               	movwf	??_ISR_Bassa& (0+255),c
 13633  000256  5045               	movf	_distance_dx+1,w,c	;volatile
 13634  000258  2047               	addwfc	_distance_sx+1,w,c	;volatile
 13635  00025A  6E12               	movwf	(??_ISR_Bassa+1)& (0+255),c
 13636  00025C  90D8               	bcf	status,0,c
 13637  00025E  3012               	rrcf	??_ISR_Bassa+1,w,c
 13638  000260  6E13               	movwf	(??_ISR_Bassa+2)& (0+255),c
 13639  000262  3011               	rrcf	??_ISR_Bassa,w,c
 13640  000264  0101               	movlb	1	; () banked
 13641  000266  6F3E               	movwf	_distance_average& (0+255),b	;volatile
 13642  000268  C013  F13F         	movff	??_ISR_Bassa+2,_distance_average+1	;volatile
 13643                           
 13644                           ; BSR set to: 1
 13645                           ;parcheggio.c: 202: distance_received = 1;
 13646  00026C  8C51               	bsf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
 13647                           
 13648                           ; BSR set to: 1
 13649                           ;parcheggio.c: 203: distance_received1 = 1;
 13650  00026E  8E51               	bsf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
 13651  000270  D000               	goto	i1l5916
 13652  000272                     i1l5916:
 13653                           
 13654                           ; BSR set to: 1
 13655                           ;parcheggio.c: 204: }
 13656                           ;parcheggio.c: 206: if (msg.identifier == 0b00000001100) {
 13657  000272  0E0C               	movlw	12
 13658  000274  0101               	movlb	1	; () banked
 13659  000276  1946               	xorwf	_msg& (0+255),w,b
 13660  000278  0101               	movlb	1	; () banked
 13661  00027A  1147               	iorwf	(_msg+1)& (0+255),w,b
 13662  00027C  0101               	movlb	1	; () banked
 13663  00027E  1148               	iorwf	(_msg+2)& (0+255),w,b
 13664  000280  0101               	movlb	1	; () banked
 13665  000282  1149               	iorwf	(_msg+3)& (0+255),w,b
 13666  000284  A4D8               	btfss	status,2,c
 13667  000286  D00D               	goto	i1l5922
 13668                           
 13669                           ; BSR set to: 1
 13670                           ;parcheggio.c: 207: if (msg.data[0] == 1) {
 13671  000288  0101               	movlb	1	; () banked
 13672  00028A  054A               	decf	(_msg+4)& (0+255),w,b
 13673  00028C  A4D8               	btfss	status,2,c
 13674  00028E  D003               	goto	i1l726
 13675                           
 13676                           ; BSR set to: 1
 13677                           ;parcheggio.c: 208: activation = 1;
 13678  000290  8251               	bsf	_activation/(0+8),_activation& (0+7),c	;volatile
 13679                           
 13680                           ;parcheggio.c: 209: PORTBbits.RB6 = 1;
 13681  000292  8C81               	bsf	3969,6,c	;volatile
 13682                           
 13683                           ;parcheggio.c: 210: } else {
 13684  000294  D006               	goto	i1l5922
 13685  000296                     i1l726:
 13686                           
 13687                           ; BSR set to: 1
 13688                           ;parcheggio.c: 211: activation = 0;
 13689  000296  9251               	bcf	_activation/(0+8),_activation& (0+7),c	;volatile
 13690                           
 13691                           ;parcheggio.c: 212: PORTBbits.RB4 = 0;
 13692  000298  9881               	bcf	3969,4,c	;volatile
 13693                           
 13694                           ;parcheggio.c: 213: PORTBbits.RB5 = 0;
 13695  00029A  9A81               	bcf	3969,5,c	;volatile
 13696                           
 13697                           ;parcheggio.c: 214: PORTBbits.RB6 = 0;
 13698  00029C  9C81               	bcf	3969,6,c	;volatile
 13699                           
 13700                           ;parcheggio.c: 215: request_sent = 0;
 13701  00029E  9852               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
 13702                           
 13703                           ; BSR set to: 1
 13704  0002A0  D000               	goto	i1l5922
 13705  0002A2                     i1l5922:
 13706                           
 13707                           ; BSR set to: 1
 13708                           ;parcheggio.c: 216: }
 13709                           ;parcheggio.c: 217: }
 13710                           ;parcheggio.c: 219: if (msg.identifier == 0b00000001110) {
 13711  0002A2  0E0E               	movlw	14
 13712  0002A4  0101               	movlb	1	; () banked
 13713  0002A6  1946               	xorwf	_msg& (0+255),w,b
 13714  0002A8  0101               	movlb	1	; () banked
 13715  0002AA  1147               	iorwf	(_msg+1)& (0+255),w,b
 13716  0002AC  0101               	movlb	1	; () banked
 13717  0002AE  1148               	iorwf	(_msg+2)& (0+255),w,b
 13718  0002B0  0101               	movlb	1	; () banked
 13719  0002B2  1149               	iorwf	(_msg+3)& (0+255),w,b
 13720  0002B4  A4D8               	btfss	status,2,c
 13721  0002B6  D002               	goto	i1l5926
 13722                           
 13723                           ; BSR set to: 1
 13724                           ;parcheggio.c: 220: start_operation = 1;
 13725  0002B8  8C52               	bsf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13726  0002BA  D000               	goto	i1l5926
 13727  0002BC                     i1l5926:
 13728                           
 13729                           ; BSR set to: 1
 13730                           ;parcheggio.c: 221: }
 13731                           ;parcheggio.c: 224: if (msg.identifier == 0b00000001000) {
 13732  0002BC  0E08               	movlw	8
 13733  0002BE  0101               	movlb	1	; () banked
 13734  0002C0  1946               	xorwf	_msg& (0+255),w,b
 13735  0002C2  0101               	movlb	1	; () banked
 13736  0002C4  1147               	iorwf	(_msg+1)& (0+255),w,b
 13737  0002C6  0101               	movlb	1	; () banked
 13738  0002C8  1148               	iorwf	(_msg+2)& (0+255),w,b
 13739  0002CA  0101               	movlb	1	; () banked
 13740  0002CC  1149               	iorwf	(_msg+3)& (0+255),w,b
 13741  0002CE  A4D8               	btfss	status,2,c
 13742  0002D0  D01A               	goto	i1l729
 13743                           
 13744                           ; BSR set to: 1
 13745                           ;parcheggio.c: 225: for (unsigned char i = 0; i < 8; i++) {
 13746  0002D2  0E00               	movlw	0
 13747  0002D4  6E29               	movwf	ISR_Bassa@i,c
 13748  0002D6                     i1l5930:
 13749                           
 13750                           ; BSR set to: 1
 13751  0002D6  0E07               	movlw	7
 13752  0002D8  6429               	cpfsgt	ISR_Bassa@i,c
 13753  0002DA  D001               	goto	i1l5934
 13754                           
 13755                           ; BSR set to: 1
 13756  0002DC  D014               	goto	i1l729
 13757  0002DE                     i1l5934:
 13758                           
 13759                           ;parcheggio.c: 226: data_speed_rx[i] = msg.data[i];
 13760  0002DE  5029               	movf	ISR_Bassa@i,w,c
 13761  0002E0  0D01               	mullw	1
 13762  0002E2  0E4A               	movlw	low (_msg+4)
 13763  0002E4  24F3               	addwf	prodl,w,c
 13764  0002E6  6ED9               	movwf	fsr2l,c
 13765  0002E8  0E01               	movlw	high (_msg+4)
 13766  0002EA  20F4               	addwfc	prodh,w,c
 13767  0002EC  6EDA               	movwf	fsr2h,c
 13768  0002EE  5029               	movf	ISR_Bassa@i,w,c
 13769  0002F0  0D01               	mullw	1
 13770  0002F2  0E00               	movlw	low _data_speed_rx
 13771  0002F4  24F3               	addwf	prodl,w,c
 13772  0002F6  6EE1               	movwf	fsr1l,c
 13773  0002F8  0E01               	movlw	high _data_speed_rx
 13774  0002FA  20F4               	addwfc	prodh,w,c
 13775  0002FC  6EE2               	movwf	fsr1h,c
 13776  0002FE  CFDF FFE7          	movff	indf2,indf1
 13777  000302  2A29               	incf	ISR_Bassa@i,f,c
 13778  000304  D7E8               	goto	i1l5930
 13779  000306                     i1l729:
 13780                           
 13781                           ;parcheggio.c: 227: }
 13782                           ;parcheggio.c: 228: }
 13783                           ;parcheggio.c: 231: PIR3bits.RXB0IF = 0;
 13784  000306  90A4               	bcf	4004,0,c	;volatile
 13785                           
 13786                           ;parcheggio.c: 232: PIR3bits.RXB1IF = 0;
 13787  000308  92A4               	bcf	4004,1,c	;volatile
 13788  00030A  D000               	goto	i1l732
 13789  00030C                     i1l732:
 13790  00030C  C025  FFF5         	movff	??_ISR_Bassa+20,tablat
 13791  000310  C024  FFF8         	movff	??_ISR_Bassa+19,tblptru
 13792  000314  C023  FFF7         	movff	??_ISR_Bassa+18,tblptrh
 13793  000318  C022  FFF6         	movff	??_ISR_Bassa+17,tblptrl
 13794  00031C  C021  FFF4         	movff	??_ISR_Bassa+16,prodh
 13795  000320  C020  FFF3         	movff	??_ISR_Bassa+15,prodl
 13796  000324  C01F  FFDA         	movff	??_ISR_Bassa+14,fsr2h
 13797  000328  C01E  FFD9         	movff	??_ISR_Bassa+13,fsr2l
 13798  00032C  C01D  FFE2         	movff	??_ISR_Bassa+12,fsr1h
 13799  000330  C01C  FFE1         	movff	??_ISR_Bassa+11,fsr1l
 13800  000334  C01B  FFEA         	movff	??_ISR_Bassa+10,fsr0h
 13801  000338  C01A  FFE9         	movff	??_ISR_Bassa+9,fsr0l
 13802  00033C  C019  FFFB         	movff	??_ISR_Bassa+8,pclatu
 13803  000340  C018  FFFA         	movff	??_ISR_Bassa+7,pclath
 13804  000344  C017  FFE0         	movff	??_ISR_Bassa+6,bsr
 13805  000348  C016  FFE8         	movff	??_ISR_Bassa+5,wreg
 13806  00034C  C015  FFD8         	movff	??_ISR_Bassa+4,status
 13807  000350  0010               	retfie	
 13808  000352                     __end_of_ISR_Bassa:
 13809                           	opt stack 0
 13810                           pclatu	equ	0xFFB
 13811                           pclath	equ	0xFFA
 13812                           tblptru	equ	0xFF8
 13813                           tblptrh	equ	0xFF7
 13814                           tblptrl	equ	0xFF6
 13815                           tablat	equ	0xFF5
 13816                           prodh	equ	0xFF4
 13817                           prodl	equ	0xFF3
 13818                           intcon	equ	0xFF2
 13819                           intcon2	equ	0xFF1
 13820                           postinc0	equ	0xFEE
 13821                           fsr0h	equ	0xFEA
 13822                           fsr0l	equ	0xFE9
 13823                           wreg	equ	0xFE8
 13824                           indf1	equ	0xFE7
 13825                           postdec1	equ	0xFE5
 13826                           fsr1h	equ	0xFE2
 13827                           fsr1l	equ	0xFE1
 13828                           bsr	equ	0xFE0
 13829                           indf2	equ	0xFDF
 13830                           postinc2	equ	0xFDE
 13831                           postdec2	equ	0xFDD
 13832                           plusw2	equ	0xFDB
 13833                           fsr2h	equ	0xFDA
 13834                           fsr2l	equ	0xFD9
 13835                           status	equ	0xFD8
 13836                           
 13837 ;; *************** function i1_delay_ms *****************
 13838 ;; Defined at:
 13839 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
 13840 ;; Parameters:    Size  Location     Type
 13841 ;;  value_ms        2    6[COMRAM] unsigned int 
 13842 ;; Auto vars:     Size  Location     Type
 13843 ;;		None
 13844 ;; Return value:  Size  Location     Type
 13845 ;;		None               void
 13846 ;; Registers used:
 13847 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13848 ;; Tracked objects:
 13849 ;;		On entry : 0/0
 13850 ;;		On exit  : 0/0
 13851 ;;		Unchanged: 0/0
 13852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13853 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13856 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13857 ;;Total ram usage:        2 bytes
 13858 ;; Hardware stack levels used:    1
 13859 ;; Hardware stack levels required when called:    3
 13860 ;; This function calls:
 13861 ;;		i1___wmul
 13862 ;; This function is called by:
 13863 ;;		_ISR_Bassa
 13864 ;; This function uses a non-reentrant model
 13865 ;;
 13866                           
 13867                           	psect	text38
 13868  005D42                     __ptext38:
 13869                           	opt stack 0
 13870  005D42                     i1_delay_ms:
 13871                           	opt stack 19
 13872                           
 13873                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
 13874                           
 13875                           ;incstack = 0
 13876  005D42  C0E7  F001         	movff	_delay_quartz_frequency_value,i1___wmul@multiplier	;volatile
 13877  005D46  6A02               	clrf	i1___wmul@multiplier+1,c
 13878  005D48  C007  F003         	movff	i1delay_ms@value_ms,i1___wmul@multiplicand
 13879  005D4C  C008  F004         	movff	i1delay_ms@value_ms+1,i1___wmul@multiplicand+1
 13880  005D50  EC03  F02F         	call	i1___wmul	;wreg free
 13881  005D54  C001  F0E3         	movff	?i1___wmul,_clock_counter_reference	;volatile
 13882  005D58  C002  F0E4         	movff	?i1___wmul+1,_clock_counter_reference+1	;volatile
 13883                           
 13884                           ;src\delay.c: 75: while (clock_counter_reference) {
 13885  005D5C  D007               	goto	i1l567
 13886  005D5E                     i1l5786:
 13887                           
 13888                           ;src\delay.c: 85: _delay(240);
 13889  005D5E  0E50               	movlw	80
 13890  005D60                     i1u867_27:
 13891  005D60  2EE8               	decfsz	wreg,f,c
 13892  005D62  D7FE               	goto	i1u867_27
 13893                           
 13894                           ;src\delay.c: 88: clock_counter_reference--;
 13895  005D64  0100               	movlb	0	; () banked
 13896  005D66  07E3               	decf	_clock_counter_reference& (0+255),f,b	;volatile
 13897  005D68  A0D8               	btfss	status,0,c
 13898  005D6A  07E4               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
 13899  005D6C                     i1l567:
 13900  005D6C  0100               	movlb	0	; () banked
 13901  005D6E  51E3               	movf	_clock_counter_reference& (0+255),w,b	;volatile
 13902  005D70  0100               	movlb	0	; () banked
 13903  005D72  11E4               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
 13904  005D74  A4D8               	btfss	status,2,c
 13905  005D76  D7F3               	goto	i1l5786
 13906                           
 13907                           ; BSR set to: 0
 13908                           
 13909                           ; BSR set to: 0
 13910  005D78  0012               	return		;funcret
 13911  005D7A                     __end_ofi1_delay_ms:
 13912                           	opt stack 0
 13913                           pclatu	equ	0xFFB
 13914                           pclath	equ	0xFFA
 13915                           tblptru	equ	0xFF8
 13916                           tblptrh	equ	0xFF7
 13917                           tblptrl	equ	0xFF6
 13918                           tablat	equ	0xFF5
 13919                           prodh	equ	0xFF4
 13920                           prodl	equ	0xFF3
 13921                           intcon	equ	0xFF2
 13922                           intcon2	equ	0xFF1
 13923                           postinc0	equ	0xFEE
 13924                           fsr0h	equ	0xFEA
 13925                           fsr0l	equ	0xFE9
 13926                           wreg	equ	0xFE8
 13927                           indf1	equ	0xFE7
 13928                           postdec1	equ	0xFE5
 13929                           fsr1h	equ	0xFE2
 13930                           fsr1l	equ	0xFE1
 13931                           bsr	equ	0xFE0
 13932                           indf2	equ	0xFDF
 13933                           postinc2	equ	0xFDE
 13934                           postdec2	equ	0xFDD
 13935                           plusw2	equ	0xFDB
 13936                           fsr2h	equ	0xFDA
 13937                           fsr2l	equ	0xFD9
 13938                           status	equ	0xFD8
 13939                           
 13940 ;; *************** function i1___wmul *****************
 13941 ;; Defined at:
 13942 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 13943 ;; Parameters:    Size  Location     Type
 13944 ;;  multiplier      2    0[COMRAM] unsigned int 
 13945 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13946 ;; Auto vars:     Size  Location     Type
 13947 ;;  __wmul          2    4[COMRAM] unsigned int 
 13948 ;; Return value:  Size  Location     Type
 13949 ;;                  2    0[COMRAM] unsigned int 
 13950 ;; Registers used:
 13951 ;;		wreg, status,2, status,0, prodl, prodh
 13952 ;; Tracked objects:
 13953 ;;		On entry : 0/0
 13954 ;;		On exit  : 0/0
 13955 ;;		Unchanged: 0/0
 13956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13957 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13958 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13960 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13961 ;;Total ram usage:        6 bytes
 13962 ;; Hardware stack levels used:    1
 13963 ;; Hardware stack levels required when called:    2
 13964 ;; This function calls:
 13965 ;;		Nothing
 13966 ;; This function is called by:
 13967 ;;		i1_delay_ms
 13968 ;; This function uses a non-reentrant model
 13969 ;;
 13970                           
 13971                           	psect	text39
 13972  005E06                     __ptext39:
 13973                           	opt stack 0
 13974  005E06                     i1___wmul:
 13975                           	opt stack 19
 13976                           
 13977                           ; BSR set to: 0
 13978                           ;incstack = 0
 13979  005E06  5001               	movf	i1___wmul@multiplier,w,c
 13980  005E08  0203               	mulwf	i1___wmul@multiplicand,c
 13981  005E0A  CFF3 F005          	movff	prodl,i1___wmul@product
 13982  005E0E  CFF4 F006          	movff	prodh,i1___wmul@product+1
 13983  005E12  5001               	movf	i1___wmul@multiplier,w,c
 13984  005E14  0204               	mulwf	i1___wmul@multiplicand+1,c
 13985  005E16  50F3               	movf	prodl,w,c
 13986  005E18  2606               	addwf	i1___wmul@product+1,f,c
 13987  005E1A  5002               	movf	i1___wmul@multiplier+1,w,c
 13988  005E1C  0203               	mulwf	i1___wmul@multiplicand,c
 13989  005E1E  50F3               	movf	prodl,w,c
 13990  005E20  2606               	addwf	i1___wmul@product+1,f,c
 13991  005E22  C005  F001         	movff	i1___wmul@product,?i1___wmul
 13992  005E26  C006  F002         	movff	i1___wmul@product+1,?i1___wmul+1
 13993  005E2A  0012               	return	
 13994  005E2C  0012               	return		;funcret
 13995  005E2E                     __end_ofi1___wmul:
 13996                           	opt stack 0
 13997                           pclatu	equ	0xFFB
 13998                           pclath	equ	0xFFA
 13999                           tblptru	equ	0xFF8
 14000                           tblptrh	equ	0xFF7
 14001                           tblptrl	equ	0xFF6
 14002                           tablat	equ	0xFF5
 14003                           prodh	equ	0xFF4
 14004                           prodl	equ	0xFF3
 14005                           intcon	equ	0xFF2
 14006                           intcon2	equ	0xFF1
 14007                           postinc0	equ	0xFEE
 14008                           fsr0h	equ	0xFEA
 14009                           fsr0l	equ	0xFE9
 14010                           wreg	equ	0xFE8
 14011                           indf1	equ	0xFE7
 14012                           postdec1	equ	0xFE5
 14013                           fsr1h	equ	0xFE2
 14014                           fsr1l	equ	0xFE1
 14015                           bsr	equ	0xFE0
 14016                           indf2	equ	0xFDF
 14017                           postinc2	equ	0xFDE
 14018                           postdec2	equ	0xFDD
 14019                           plusw2	equ	0xFDB
 14020                           fsr2h	equ	0xFDA
 14021                           fsr2l	equ	0xFD9
 14022                           status	equ	0xFD8
 14023                           
 14024 ;; *************** function i1_CANsendMessage *****************
 14025 ;; Defined at:
 14026 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 14027 ;; Parameters:    Size  Location     Type
 14028 ;;  identifier      4    0[COMRAM] unsigned long 
 14029 ;;  data            2    4[COMRAM] PTR unsigned char 
 14030 ;;		 -> data_speed(8), data_brake(8), data_steering(8), data_correction(8), 
 14031 ;;		 -> data_test(8), data(8), sensor_distance_short(8), 
 14032 ;;  dataLength      1    6[COMRAM] unsigned char 
 14033 ;;  flags           1    7[COMRAM] enum E16376
 14034 ;; Auto vars:     Size  Location     Type
 14035 ;;  CANsendMessa    4   12[COMRAM] unsigned long 
 14036 ;; Return value:  Size  Location     Type
 14037 ;;		None               void
 14038 ;; Registers used:
 14039 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14040 ;; Tracked objects:
 14041 ;;		On entry : 0/0
 14042 ;;		On exit  : 0/0
 14043 ;;		Unchanged: 0/0
 14044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14045 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14046 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14047 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14048 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14049 ;;Total ram usage:       16 bytes
 14050 ;; Hardware stack levels used:    1
 14051 ;; Hardware stack levels required when called:    2
 14052 ;; This function calls:
 14053 ;;		Nothing
 14054 ;; This function is called by:
 14055 ;;		_ISR_Bassa
 14056 ;; This function uses a non-reentrant model
 14057 ;;
 14058                           
 14059                           	psect	text40
 14060  00201C                     __ptext40:
 14061                           	opt stack 0
 14062  00201C                     i1_CANsendMessage:
 14063                           	opt stack 20
 14064                           
 14065                           ;inc\CANlib.h: 296: unsigned long tamp;
 14066                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
 14067                           
 14068                           ;incstack = 0
 14069  00201C  010F               	movlb	15	; () banked
 14070  00201E  B740               	btfsc	64,3,b	;volatile
 14071  002020  D118               	goto	i1l361
 14072                           
 14073                           ; BSR set to: 15
 14074                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
 14075  002022  C007  FF45         	movff	i1CANsendMessage@dataLength,3909	;volatile
 14076                           
 14077                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
 14078  002026  AC08               	btfss	i1CANsendMessage@flags,6,c
 14079  002028  D003               	goto	i1l362
 14080                           
 14081                           ; BSR set to: 15
 14082                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
 14083  00202A  010F               	movlb	15	; () banked
 14084  00202C  8D45               	bsf	69,6,b	;volatile
 14085  00202E  D002               	goto	i1l363
 14086  002030                     i1l362:
 14087                           
 14088                           ; BSR set to: 15
 14089                           ;inc\CANlib.h: 302: else
 14090                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
 14091  002030  010F               	movlb	15	; () banked
 14092  002032  9D45               	bcf	69,6,b	;volatile
 14093  002034                     i1l363:
 14094                           
 14095                           ; BSR set to: 15
 14096                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
 14097  002034  A608               	btfss	i1CANsendMessage@flags,3,c
 14098  002036  D067               	goto	i1l364
 14099                           
 14100                           ; BSR set to: 15
 14101                           ;inc\CANlib.h: 306: {
 14102                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
 14103  002038  5001               	movf	i1CANsendMessage@identifier,w,c
 14104  00203A  6E0D               	movwf	i1CANsendMessage@tamp,c
 14105  00203C  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14106  00203E  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14107  002040  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14108                           
 14109                           ; BSR set to: 15
 14110                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
 14111  002042  C00D  FF44         	movff	i1CANsendMessage@tamp,3908	;volatile
 14112                           
 14113                           ; BSR set to: 15
 14114                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
 14115  002046  0E00               	movlw	0
 14116  002048  1401               	andwf	i1CANsendMessage@identifier,w,c
 14117  00204A  6E0D               	movwf	i1CANsendMessage@tamp,c
 14118  00204C  0EFF               	movlw	255
 14119  00204E  1402               	andwf	i1CANsendMessage@identifier+1,w,c
 14120  002050  6E0E               	movwf	i1CANsendMessage@tamp+1,c
 14121  002052  0E00               	movlw	0
 14122  002054  1403               	andwf	i1CANsendMessage@identifier+2,w,c
 14123  002056  6E0F               	movwf	i1CANsendMessage@tamp+2,c
 14124  002058  0E00               	movlw	0
 14125  00205A  1404               	andwf	i1CANsendMessage@identifier+3,w,c
 14126  00205C  6E10               	movwf	i1CANsendMessage@tamp+3,c
 14127                           
 14128                           ; BSR set to: 15
 14129                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
 14130  00205E  C00D  F009         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14131  002062  C00E  F00A         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14132  002066  C00F  F00B         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14133  00206A  C010  F00C         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14134  00206E  C00A  F009         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14135  002072  C00B  F00A         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14136  002076  C00C  F00B         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14137  00207A  6A0C               	clrf	??i1_CANsendMessage+3,c
 14138  00207C  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14139  002080  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14140  002084  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14141  002088  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14142                           
 14143                           ; BSR set to: 15
 14144                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
 14145  00208C  C00D  FF43         	movff	i1CANsendMessage@tamp,3907	;volatile
 14146                           
 14147                           ; BSR set to: 15
 14148                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
 14149  002090  0E00               	movlw	0
 14150  002092  010F               	movlb	15	; () banked
 14151  002094  6F42               	movwf	66,b	;volatile
 14152                           
 14153                           ; BSR set to: 15
 14154                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
 14155  002096  010F               	movlb	15	; () banked
 14156  002098  8742               	bsf	66,3,b	;volatile
 14157                           
 14158                           ; BSR set to: 15
 14159                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
 14160  00209A  A003               	btfss	i1CANsendMessage@identifier+2,0,c
 14161  00209C  D002               	goto	i1l365
 14162                           
 14163                           ; BSR set to: 15
 14164                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
 14165  00209E  010F               	movlb	15	; () banked
 14166  0020A0  8142               	bsf	66,0,b	;volatile
 14167  0020A2                     i1l365:
 14168                           
 14169                           ; BSR set to: 15
 14170                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
 14171  0020A2  A203               	btfss	i1CANsendMessage@identifier+2,1,c
 14172  0020A4  D002               	goto	i1l366
 14173                           
 14174                           ; BSR set to: 15
 14175                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
 14176  0020A6  010F               	movlb	15	; () banked
 14177  0020A8  8342               	bsf	66,1,b	;volatile
 14178  0020AA                     i1l366:
 14179                           
 14180                           ; BSR set to: 15
 14181                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
 14182  0020AA  A403               	btfss	i1CANsendMessage@identifier+2,2,c
 14183  0020AC  D002               	goto	i1l367
 14184                           
 14185                           ; BSR set to: 15
 14186                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
 14187  0020AE  010F               	movlb	15	; () banked
 14188  0020B0  8B42               	bsf	66,5,b	;volatile
 14189  0020B2                     i1l367:
 14190                           
 14191                           ; BSR set to: 15
 14192                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
 14193  0020B2  A603               	btfss	i1CANsendMessage@identifier+2,3,c
 14194  0020B4  D002               	goto	i1l368
 14195                           
 14196                           ; BSR set to: 15
 14197                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
 14198  0020B6  010F               	movlb	15	; () banked
 14199  0020B8  8D42               	bsf	66,6,b	;volatile
 14200  0020BA                     i1l368:
 14201                           
 14202                           ; BSR set to: 15
 14203                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
 14204  0020BA  A803               	btfss	i1CANsendMessage@identifier+2,4,c
 14205  0020BC  D003               	goto	i1l5586
 14206                           
 14207                           ; BSR set to: 15
 14208                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
 14209  0020BE  010F               	movlb	15	; () banked
 14210  0020C0  8F42               	bsf	66,7,b	;volatile
 14211  0020C2  D000               	goto	i1l5586
 14212  0020C4                     i1l5586:
 14213                           
 14214                           ; BSR set to: 15
 14215                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
 14216  0020C4  C001  F009         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14217  0020C8  C002  F00A         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14218  0020CC  C003  F00B         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14219  0020D0  C004  F00C         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14220  0020D4  0E16               	movlw	22
 14221  0020D6  D005               	goto	i1u677_20
 14222  0020D8                     i1u677_25:
 14223  0020D8  90D8               	bcf	status,0,c
 14224  0020DA  320C               	rrcf	??i1_CANsendMessage+3,f,c
 14225  0020DC  320B               	rrcf	??i1_CANsendMessage+2,f,c
 14226  0020DE  320A               	rrcf	??i1_CANsendMessage+1,f,c
 14227  0020E0  3209               	rrcf	??i1_CANsendMessage,f,c
 14228  0020E2                     i1u677_20:
 14229  0020E2  2EE8               	decfsz	wreg,f,c
 14230  0020E4  D7F9               	goto	i1u677_25
 14231  0020E6  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14232  0020EA  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14233  0020EE  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14234  0020F2  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14235                           
 14236                           ; BSR set to: 15
 14237                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
 14238  0020F6  500D               	movf	i1CANsendMessage@tamp,w,c
 14239  0020F8  6E0D               	movwf	i1CANsendMessage@tamp,c
 14240  0020FA  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14241  0020FC  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14242  0020FE  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14243                           
 14244                           ; BSR set to: 15
 14245                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
 14246  002100  C00D  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14247                           
 14248                           ;inc\CANlib.h: 332: }
 14249  002104  D04E               	goto	i1l5606
 14250  002106                     i1l364:
 14251                           
 14252                           ; BSR set to: 15
 14253                           ;inc\CANlib.h: 334: else
 14254                           ;inc\CANlib.h: 336: {
 14255                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
 14256  002106  010F               	movlb	15	; () banked
 14257  002108  9742               	bcf	66,3,b	;volatile
 14258                           
 14259                           ; BSR set to: 15
 14260                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
 14261  00210A  C001  F009         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14262  00210E  C002  F00A         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14263  002112  C003  F00B         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14264  002116  C004  F00C         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14265  00211A  0E04               	movlw	4
 14266  00211C  D005               	goto	i1u678_20
 14267  00211E                     i1u678_25:
 14268  00211E  90D8               	bcf	status,0,c
 14269  002120  320C               	rrcf	??i1_CANsendMessage+3,f,c
 14270  002122  320B               	rrcf	??i1_CANsendMessage+2,f,c
 14271  002124  320A               	rrcf	??i1_CANsendMessage+1,f,c
 14272  002126  3209               	rrcf	??i1_CANsendMessage,f,c
 14273  002128                     i1u678_20:
 14274  002128  2EE8               	decfsz	wreg,f,c
 14275  00212A  D7F9               	goto	i1u678_25
 14276  00212C  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14277  002130  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14278  002134  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14279  002138  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14280                           
 14281                           ; BSR set to: 15
 14282                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
 14283  00213C  500D               	movf	i1CANsendMessage@tamp,w,c
 14284  00213E  6E0D               	movwf	i1CANsendMessage@tamp,c
 14285  002140  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14286  002142  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14287  002144  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14288                           
 14289                           ; BSR set to: 15
 14290                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
 14291  002146  C00D  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14292                           
 14293                           ; BSR set to: 15
 14294                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
 14295  00214A  0E07               	movlw	7
 14296  00214C  1401               	andwf	i1CANsendMessage@identifier,w,c
 14297  00214E  6E0D               	movwf	i1CANsendMessage@tamp,c
 14298  002150  0E00               	movlw	0
 14299  002152  1402               	andwf	i1CANsendMessage@identifier+1,w,c
 14300  002154  6E0E               	movwf	i1CANsendMessage@tamp+1,c
 14301  002156  0E00               	movlw	0
 14302  002158  1403               	andwf	i1CANsendMessage@identifier+2,w,c
 14303  00215A  6E0F               	movwf	i1CANsendMessage@tamp+2,c
 14304  00215C  0E00               	movlw	0
 14305  00215E  1404               	andwf	i1CANsendMessage@identifier+3,w,c
 14306  002160  6E10               	movwf	i1CANsendMessage@tamp+3,c
 14307                           
 14308                           ; BSR set to: 15
 14309                           ;inc\CANlib.h: 344: tamp = tamp << 5;
 14310  002162  C00D  F009         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14311  002166  C00E  F00A         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14312  00216A  C00F  F00B         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14313  00216E  C010  F00C         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14314  002172  0E05               	movlw	5
 14315  002174                     i1u679_25:
 14316  002174  90D8               	bcf	status,0,c
 14317  002176  3609               	rlcf	??i1_CANsendMessage,f,c
 14318  002178  360A               	rlcf	??i1_CANsendMessage+1,f,c
 14319  00217A  360B               	rlcf	??i1_CANsendMessage+2,f,c
 14320  00217C  360C               	rlcf	??i1_CANsendMessage+3,f,c
 14321  00217E  2EE8               	decfsz	wreg,f,c
 14322  002180  D7F9               	goto	i1u679_25
 14323  002182  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14324  002186  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14325  00218A  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14326  00218E  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14327                           
 14328                           ; BSR set to: 15
 14329                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
 14330  002192  010F               	movlb	15	; () banked
 14331  002194  5142               	movf	66,w,b	;volatile
 14332  002196  0B1F               	andlw	31
 14333  002198  010F               	movlb	15	; () banked
 14334  00219A  6F42               	movwf	66,b	;volatile
 14335                           
 14336                           ; BSR set to: 15
 14337                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
 14338  00219C  C00D  FF42         	movff	i1CANsendMessage@tamp,3906	;volatile
 14339  0021A0  D000               	goto	i1l5606
 14340  0021A2                     i1l5606:
 14341                           
 14342                           ; BSR set to: 15
 14343                           ;inc\CANlib.h: 347: }
 14344                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
 14345  0021A2  A008               	btfss	i1CANsendMessage@flags,0,c
 14346  0021A4  D003               	goto	i1l371
 14347                           
 14348                           ; BSR set to: 15
 14349                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
 14350  0021A6  010F               	movlb	15	; () banked
 14351  0021A8  8140               	bsf	64,0,b	;volatile
 14352  0021AA  D002               	goto	i1l372
 14353  0021AC                     i1l371:
 14354                           
 14355                           ; BSR set to: 15
 14356                           ;inc\CANlib.h: 351: else
 14357                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
 14358  0021AC  010F               	movlb	15	; () banked
 14359  0021AE  9140               	bcf	64,0,b	;volatile
 14360  0021B0                     i1l372:
 14361                           
 14362                           ; BSR set to: 15
 14363                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
 14364  0021B0  A208               	btfss	i1CANsendMessage@flags,1,c
 14365  0021B2  D003               	goto	i1l373
 14366                           
 14367                           ; BSR set to: 15
 14368                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
 14369  0021B4  010F               	movlb	15	; () banked
 14370  0021B6  8340               	bsf	64,1,b	;volatile
 14371  0021B8  D003               	goto	i1l5612
 14372  0021BA                     i1l373:
 14373                           
 14374                           ; BSR set to: 15
 14375                           ;inc\CANlib.h: 355: else
 14376                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
 14377  0021BA  010F               	movlb	15	; () banked
 14378  0021BC  9340               	bcf	64,1,b	;volatile
 14379  0021BE  D000               	goto	i1l5612
 14380  0021C0                     i1l5612:
 14381                           
 14382                           ; BSR set to: 15
 14383                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
 14384  0021C0  C005  FFD9         	movff	i1CANsendMessage@data,fsr2l
 14385  0021C4  C006  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 14386  0021C8  50DF               	movf	indf2,w,c
 14387  0021CA  010F               	movlb	15	; () banked
 14388  0021CC  6F46               	movwf	70,b	;volatile
 14389                           
 14390                           ; BSR set to: 15
 14391                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
 14392  0021CE  EE20 F001          	lfsr	2,1
 14393  0021D2  5005               	movf	i1CANsendMessage@data,w,c
 14394  0021D4  26D9               	addwf	fsr2l,f,c
 14395  0021D6  5006               	movf	i1CANsendMessage@data+1,w,c
 14396  0021D8  22DA               	addwfc	fsr2h,f,c
 14397  0021DA  50DF               	movf	indf2,w,c
 14398  0021DC  010F               	movlb	15	; () banked
 14399  0021DE  6F47               	movwf	71,b	;volatile
 14400                           
 14401                           ; BSR set to: 15
 14402                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
 14403  0021E0  EE20 F002          	lfsr	2,2
 14404  0021E4  5005               	movf	i1CANsendMessage@data,w,c
 14405  0021E6  26D9               	addwf	fsr2l,f,c
 14406  0021E8  5006               	movf	i1CANsendMessage@data+1,w,c
 14407  0021EA  22DA               	addwfc	fsr2h,f,c
 14408  0021EC  50DF               	movf	indf2,w,c
 14409  0021EE  010F               	movlb	15	; () banked
 14410  0021F0  6F48               	movwf	72,b	;volatile
 14411                           
 14412                           ; BSR set to: 15
 14413                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
 14414  0021F2  EE20 F003          	lfsr	2,3
 14415  0021F6  5005               	movf	i1CANsendMessage@data,w,c
 14416  0021F8  26D9               	addwf	fsr2l,f,c
 14417  0021FA  5006               	movf	i1CANsendMessage@data+1,w,c
 14418  0021FC  22DA               	addwfc	fsr2h,f,c
 14419  0021FE  50DF               	movf	indf2,w,c
 14420  002200  010F               	movlb	15	; () banked
 14421  002202  6F49               	movwf	73,b	;volatile
 14422                           
 14423                           ; BSR set to: 15
 14424                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
 14425  002204  EE20 F004          	lfsr	2,4
 14426  002208  5005               	movf	i1CANsendMessage@data,w,c
 14427  00220A  26D9               	addwf	fsr2l,f,c
 14428  00220C  5006               	movf	i1CANsendMessage@data+1,w,c
 14429  00220E  22DA               	addwfc	fsr2h,f,c
 14430  002210  50DF               	movf	indf2,w,c
 14431  002212  010F               	movlb	15	; () banked
 14432  002214  6F4A               	movwf	74,b	;volatile
 14433                           
 14434                           ; BSR set to: 15
 14435                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
 14436  002216  EE20 F005          	lfsr	2,5
 14437  00221A  5005               	movf	i1CANsendMessage@data,w,c
 14438  00221C  26D9               	addwf	fsr2l,f,c
 14439  00221E  5006               	movf	i1CANsendMessage@data+1,w,c
 14440  002220  22DA               	addwfc	fsr2h,f,c
 14441  002222  50DF               	movf	indf2,w,c
 14442  002224  010F               	movlb	15	; () banked
 14443  002226  6F4B               	movwf	75,b	;volatile
 14444                           
 14445                           ; BSR set to: 15
 14446                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
 14447  002228  EE20 F006          	lfsr	2,6
 14448  00222C  5005               	movf	i1CANsendMessage@data,w,c
 14449  00222E  26D9               	addwf	fsr2l,f,c
 14450  002230  5006               	movf	i1CANsendMessage@data+1,w,c
 14451  002232  22DA               	addwfc	fsr2h,f,c
 14452  002234  50DF               	movf	indf2,w,c
 14453  002236  010F               	movlb	15	; () banked
 14454  002238  6F4C               	movwf	76,b	;volatile
 14455                           
 14456                           ; BSR set to: 15
 14457                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
 14458  00223A  EE20 F007          	lfsr	2,7
 14459  00223E  5005               	movf	i1CANsendMessage@data,w,c
 14460  002240  26D9               	addwf	fsr2l,f,c
 14461  002242  5006               	movf	i1CANsendMessage@data+1,w,c
 14462  002244  22DA               	addwfc	fsr2h,f,c
 14463  002246  50DF               	movf	indf2,w,c
 14464  002248  010F               	movlb	15	; () banked
 14465  00224A  6F4D               	movwf	77,b	;volatile
 14466                           
 14467                           ; BSR set to: 15
 14468                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
 14469  00224C  010F               	movlb	15	; () banked
 14470  00224E  8740               	bsf	64,3,b	;volatile
 14471                           
 14472                           ; BSR set to: 15
 14473                           ;inc\CANlib.h: 368: return;
 14474  002250  0012               	return	
 14475  002252                     i1l361:
 14476                           
 14477                           ; BSR set to: 15
 14478                           ;inc\CANlib.h: 369: }
 14479                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
 14480  002252  010F               	movlb	15	; () banked
 14481  002254  B730               	btfsc	48,3,b	;volatile
 14482  002256  D118               	goto	i1l376
 14483                           
 14484                           ; BSR set to: 15
 14485                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
 14486  002258  C007  FF35         	movff	i1CANsendMessage@dataLength,3893	;volatile
 14487                           
 14488                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
 14489  00225C  AC08               	btfss	i1CANsendMessage@flags,6,c
 14490  00225E  D003               	goto	i1l377
 14491                           
 14492                           ; BSR set to: 15
 14493                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
 14494  002260  010F               	movlb	15	; () banked
 14495  002262  8D35               	bsf	53,6,b	;volatile
 14496  002264  D002               	goto	i1l378
 14497  002266                     i1l377:
 14498                           
 14499                           ; BSR set to: 15
 14500                           ;inc\CANlib.h: 378: else
 14501                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
 14502  002266  010F               	movlb	15	; () banked
 14503  002268  9D35               	bcf	53,6,b	;volatile
 14504  00226A                     i1l378:
 14505                           
 14506                           ; BSR set to: 15
 14507                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
 14508  00226A  A608               	btfss	i1CANsendMessage@flags,3,c
 14509  00226C  D067               	goto	i1l379
 14510                           
 14511                           ; BSR set to: 15
 14512                           ;inc\CANlib.h: 382: {
 14513                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
 14514  00226E  5001               	movf	i1CANsendMessage@identifier,w,c
 14515  002270  6E0D               	movwf	i1CANsendMessage@tamp,c
 14516  002272  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14517  002274  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14518  002276  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14519                           
 14520                           ; BSR set to: 15
 14521                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
 14522  002278  C00D  FF34         	movff	i1CANsendMessage@tamp,3892	;volatile
 14523                           
 14524                           ; BSR set to: 15
 14525                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
 14526  00227C  0E00               	movlw	0
 14527  00227E  1401               	andwf	i1CANsendMessage@identifier,w,c
 14528  002280  6E0D               	movwf	i1CANsendMessage@tamp,c
 14529  002282  0EFF               	movlw	255
 14530  002284  1402               	andwf	i1CANsendMessage@identifier+1,w,c
 14531  002286  6E0E               	movwf	i1CANsendMessage@tamp+1,c
 14532  002288  0E00               	movlw	0
 14533  00228A  1403               	andwf	i1CANsendMessage@identifier+2,w,c
 14534  00228C  6E0F               	movwf	i1CANsendMessage@tamp+2,c
 14535  00228E  0E00               	movlw	0
 14536  002290  1404               	andwf	i1CANsendMessage@identifier+3,w,c
 14537  002292  6E10               	movwf	i1CANsendMessage@tamp+3,c
 14538                           
 14539                           ; BSR set to: 15
 14540                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
 14541  002294  C00D  F009         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14542  002298  C00E  F00A         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14543  00229C  C00F  F00B         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14544  0022A0  C010  F00C         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14545  0022A4  C00A  F009         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14546  0022A8  C00B  F00A         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14547  0022AC  C00C  F00B         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14548  0022B0  6A0C               	clrf	??i1_CANsendMessage+3,c
 14549  0022B2  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14550  0022B6  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14551  0022BA  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14552  0022BE  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14553                           
 14554                           ; BSR set to: 15
 14555                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
 14556  0022C2  C00D  FF33         	movff	i1CANsendMessage@tamp,3891	;volatile
 14557                           
 14558                           ; BSR set to: 15
 14559                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
 14560  0022C6  0E00               	movlw	0
 14561  0022C8  010F               	movlb	15	; () banked
 14562  0022CA  6F32               	movwf	50,b	;volatile
 14563                           
 14564                           ; BSR set to: 15
 14565                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
 14566  0022CC  010F               	movlb	15	; () banked
 14567  0022CE  8732               	bsf	50,3,b	;volatile
 14568                           
 14569                           ; BSR set to: 15
 14570                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
 14571  0022D0  A003               	btfss	i1CANsendMessage@identifier+2,0,c
 14572  0022D2  D002               	goto	i1l380
 14573                           
 14574                           ; BSR set to: 15
 14575                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
 14576  0022D4  010F               	movlb	15	; () banked
 14577  0022D6  8132               	bsf	50,0,b	;volatile
 14578  0022D8                     i1l380:
 14579                           
 14580                           ; BSR set to: 15
 14581                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
 14582  0022D8  A203               	btfss	i1CANsendMessage@identifier+2,1,c
 14583  0022DA  D002               	goto	i1l381
 14584                           
 14585                           ; BSR set to: 15
 14586                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
 14587  0022DC  010F               	movlb	15	; () banked
 14588  0022DE  8332               	bsf	50,1,b	;volatile
 14589  0022E0                     i1l381:
 14590                           
 14591                           ; BSR set to: 15
 14592                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
 14593  0022E0  A403               	btfss	i1CANsendMessage@identifier+2,2,c
 14594  0022E2  D002               	goto	i1l382
 14595                           
 14596                           ; BSR set to: 15
 14597                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
 14598  0022E4  010F               	movlb	15	; () banked
 14599  0022E6  8B32               	bsf	50,5,b	;volatile
 14600  0022E8                     i1l382:
 14601                           
 14602                           ; BSR set to: 15
 14603                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
 14604  0022E8  A603               	btfss	i1CANsendMessage@identifier+2,3,c
 14605  0022EA  D002               	goto	i1l383
 14606                           
 14607                           ; BSR set to: 15
 14608                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
 14609  0022EC  010F               	movlb	15	; () banked
 14610  0022EE  8D32               	bsf	50,6,b	;volatile
 14611  0022F0                     i1l383:
 14612                           
 14613                           ; BSR set to: 15
 14614                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
 14615  0022F0  A803               	btfss	i1CANsendMessage@identifier+2,4,c
 14616  0022F2  D003               	goto	i1l5662
 14617                           
 14618                           ; BSR set to: 15
 14619                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
 14620  0022F4  010F               	movlb	15	; () banked
 14621  0022F6  8F32               	bsf	50,7,b	;volatile
 14622  0022F8  D000               	goto	i1l5662
 14623  0022FA                     i1l5662:
 14624                           
 14625                           ; BSR set to: 15
 14626                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
 14627  0022FA  C001  F009         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14628  0022FE  C002  F00A         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14629  002302  C003  F00B         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14630  002306  C004  F00C         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14631  00230A  0E16               	movlw	22
 14632  00230C  D005               	goto	i1u690_20
 14633  00230E                     i1u690_25:
 14634  00230E  90D8               	bcf	status,0,c
 14635  002310  320C               	rrcf	??i1_CANsendMessage+3,f,c
 14636  002312  320B               	rrcf	??i1_CANsendMessage+2,f,c
 14637  002314  320A               	rrcf	??i1_CANsendMessage+1,f,c
 14638  002316  3209               	rrcf	??i1_CANsendMessage,f,c
 14639  002318                     i1u690_20:
 14640  002318  2EE8               	decfsz	wreg,f,c
 14641  00231A  D7F9               	goto	i1u690_25
 14642  00231C  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14643  002320  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14644  002324  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14645  002328  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14646                           
 14647                           ; BSR set to: 15
 14648                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
 14649  00232C  500D               	movf	i1CANsendMessage@tamp,w,c
 14650  00232E  6E0D               	movwf	i1CANsendMessage@tamp,c
 14651  002330  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14652  002332  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14653  002334  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14654                           
 14655                           ; BSR set to: 15
 14656                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
 14657  002336  C00D  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 14658                           
 14659                           ;inc\CANlib.h: 407: }
 14660  00233A  D04E               	goto	i1l5682
 14661  00233C                     i1l379:
 14662                           
 14663                           ; BSR set to: 15
 14664                           ;inc\CANlib.h: 409: else
 14665                           ;inc\CANlib.h: 411: {
 14666                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
 14667  00233C  010F               	movlb	15	; () banked
 14668  00233E  9732               	bcf	50,3,b	;volatile
 14669                           
 14670                           ; BSR set to: 15
 14671                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
 14672  002340  C001  F009         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14673  002344  C002  F00A         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14674  002348  C003  F00B         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14675  00234C  C004  F00C         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14676  002350  0E04               	movlw	4
 14677  002352  D005               	goto	i1u691_20
 14678  002354                     i1u691_25:
 14679  002354  90D8               	bcf	status,0,c
 14680  002356  320C               	rrcf	??i1_CANsendMessage+3,f,c
 14681  002358  320B               	rrcf	??i1_CANsendMessage+2,f,c
 14682  00235A  320A               	rrcf	??i1_CANsendMessage+1,f,c
 14683  00235C  3209               	rrcf	??i1_CANsendMessage,f,c
 14684  00235E                     i1u691_20:
 14685  00235E  2EE8               	decfsz	wreg,f,c
 14686  002360  D7F9               	goto	i1u691_25
 14687  002362  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14688  002366  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14689  00236A  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14690  00236E  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14691                           
 14692                           ; BSR set to: 15
 14693                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
 14694  002372  500D               	movf	i1CANsendMessage@tamp,w,c
 14695  002374  6E0D               	movwf	i1CANsendMessage@tamp,c
 14696  002376  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14697  002378  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14698  00237A  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14699                           
 14700                           ; BSR set to: 15
 14701                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
 14702  00237C  C00D  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 14703                           
 14704                           ; BSR set to: 15
 14705                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
 14706  002380  0E07               	movlw	7
 14707  002382  1401               	andwf	i1CANsendMessage@identifier,w,c
 14708  002384  6E0D               	movwf	i1CANsendMessage@tamp,c
 14709  002386  0E00               	movlw	0
 14710  002388  1402               	andwf	i1CANsendMessage@identifier+1,w,c
 14711  00238A  6E0E               	movwf	i1CANsendMessage@tamp+1,c
 14712  00238C  0E00               	movlw	0
 14713  00238E  1403               	andwf	i1CANsendMessage@identifier+2,w,c
 14714  002390  6E0F               	movwf	i1CANsendMessage@tamp+2,c
 14715  002392  0E00               	movlw	0
 14716  002394  1404               	andwf	i1CANsendMessage@identifier+3,w,c
 14717  002396  6E10               	movwf	i1CANsendMessage@tamp+3,c
 14718                           
 14719                           ; BSR set to: 15
 14720                           ;inc\CANlib.h: 419: tamp = tamp << 5;
 14721  002398  C00D  F009         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14722  00239C  C00E  F00A         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14723  0023A0  C00F  F00B         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14724  0023A4  C010  F00C         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14725  0023A8  0E05               	movlw	5
 14726  0023AA                     i1u692_25:
 14727  0023AA  90D8               	bcf	status,0,c
 14728  0023AC  3609               	rlcf	??i1_CANsendMessage,f,c
 14729  0023AE  360A               	rlcf	??i1_CANsendMessage+1,f,c
 14730  0023B0  360B               	rlcf	??i1_CANsendMessage+2,f,c
 14731  0023B2  360C               	rlcf	??i1_CANsendMessage+3,f,c
 14732  0023B4  2EE8               	decfsz	wreg,f,c
 14733  0023B6  D7F9               	goto	i1u692_25
 14734  0023B8  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14735  0023BC  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14736  0023C0  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14737  0023C4  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14738                           
 14739                           ; BSR set to: 15
 14740                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
 14741  0023C8  010F               	movlb	15	; () banked
 14742  0023CA  5132               	movf	50,w,b	;volatile
 14743  0023CC  0B1F               	andlw	31
 14744  0023CE  010F               	movlb	15	; () banked
 14745  0023D0  6F32               	movwf	50,b	;volatile
 14746                           
 14747                           ; BSR set to: 15
 14748                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
 14749  0023D2  C00D  FF32         	movff	i1CANsendMessage@tamp,3890	;volatile
 14750  0023D6  D000               	goto	i1l5682
 14751  0023D8                     i1l5682:
 14752                           
 14753                           ; BSR set to: 15
 14754                           ;inc\CANlib.h: 422: }
 14755                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
 14756  0023D8  A008               	btfss	i1CANsendMessage@flags,0,c
 14757  0023DA  D003               	goto	i1l386
 14758                           
 14759                           ; BSR set to: 15
 14760                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
 14761  0023DC  010F               	movlb	15	; () banked
 14762  0023DE  8130               	bsf	48,0,b	;volatile
 14763  0023E0  D002               	goto	i1l387
 14764  0023E2                     i1l386:
 14765                           
 14766                           ; BSR set to: 15
 14767                           ;inc\CANlib.h: 426: else
 14768                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
 14769  0023E2  010F               	movlb	15	; () banked
 14770  0023E4  9130               	bcf	48,0,b	;volatile
 14771  0023E6                     i1l387:
 14772                           
 14773                           ; BSR set to: 15
 14774                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
 14775  0023E6  A208               	btfss	i1CANsendMessage@flags,1,c
 14776  0023E8  D003               	goto	i1l388
 14777                           
 14778                           ; BSR set to: 15
 14779                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
 14780  0023EA  010F               	movlb	15	; () banked
 14781  0023EC  8330               	bsf	48,1,b	;volatile
 14782  0023EE  D003               	goto	i1l5688
 14783  0023F0                     i1l388:
 14784                           
 14785                           ; BSR set to: 15
 14786                           ;inc\CANlib.h: 430: else
 14787                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
 14788  0023F0  010F               	movlb	15	; () banked
 14789  0023F2  9330               	bcf	48,1,b	;volatile
 14790  0023F4  D000               	goto	i1l5688
 14791  0023F6                     i1l5688:
 14792                           
 14793                           ; BSR set to: 15
 14794                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
 14795  0023F6  C005  FFD9         	movff	i1CANsendMessage@data,fsr2l
 14796  0023FA  C006  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 14797  0023FE  50DF               	movf	indf2,w,c
 14798  002400  010F               	movlb	15	; () banked
 14799  002402  6F36               	movwf	54,b	;volatile
 14800                           
 14801                           ; BSR set to: 15
 14802                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
 14803  002404  EE20 F001          	lfsr	2,1
 14804  002408  5005               	movf	i1CANsendMessage@data,w,c
 14805  00240A  26D9               	addwf	fsr2l,f,c
 14806  00240C  5006               	movf	i1CANsendMessage@data+1,w,c
 14807  00240E  22DA               	addwfc	fsr2h,f,c
 14808  002410  50DF               	movf	indf2,w,c
 14809  002412  010F               	movlb	15	; () banked
 14810  002414  6F37               	movwf	55,b	;volatile
 14811                           
 14812                           ; BSR set to: 15
 14813                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
 14814  002416  EE20 F002          	lfsr	2,2
 14815  00241A  5005               	movf	i1CANsendMessage@data,w,c
 14816  00241C  26D9               	addwf	fsr2l,f,c
 14817  00241E  5006               	movf	i1CANsendMessage@data+1,w,c
 14818  002420  22DA               	addwfc	fsr2h,f,c
 14819  002422  50DF               	movf	indf2,w,c
 14820  002424  010F               	movlb	15	; () banked
 14821  002426  6F38               	movwf	56,b	;volatile
 14822                           
 14823                           ; BSR set to: 15
 14824                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
 14825  002428  EE20 F003          	lfsr	2,3
 14826  00242C  5005               	movf	i1CANsendMessage@data,w,c
 14827  00242E  26D9               	addwf	fsr2l,f,c
 14828  002430  5006               	movf	i1CANsendMessage@data+1,w,c
 14829  002432  22DA               	addwfc	fsr2h,f,c
 14830  002434  50DF               	movf	indf2,w,c
 14831  002436  010F               	movlb	15	; () banked
 14832  002438  6F39               	movwf	57,b	;volatile
 14833                           
 14834                           ; BSR set to: 15
 14835                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
 14836  00243A  EE20 F004          	lfsr	2,4
 14837  00243E  5005               	movf	i1CANsendMessage@data,w,c
 14838  002440  26D9               	addwf	fsr2l,f,c
 14839  002442  5006               	movf	i1CANsendMessage@data+1,w,c
 14840  002444  22DA               	addwfc	fsr2h,f,c
 14841  002446  50DF               	movf	indf2,w,c
 14842  002448  010F               	movlb	15	; () banked
 14843  00244A  6F3A               	movwf	58,b	;volatile
 14844                           
 14845                           ; BSR set to: 15
 14846                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
 14847  00244C  EE20 F005          	lfsr	2,5
 14848  002450  5005               	movf	i1CANsendMessage@data,w,c
 14849  002452  26D9               	addwf	fsr2l,f,c
 14850  002454  5006               	movf	i1CANsendMessage@data+1,w,c
 14851  002456  22DA               	addwfc	fsr2h,f,c
 14852  002458  50DF               	movf	indf2,w,c
 14853  00245A  010F               	movlb	15	; () banked
 14854  00245C  6F3B               	movwf	59,b	;volatile
 14855                           
 14856                           ; BSR set to: 15
 14857                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
 14858  00245E  EE20 F006          	lfsr	2,6
 14859  002462  5005               	movf	i1CANsendMessage@data,w,c
 14860  002464  26D9               	addwf	fsr2l,f,c
 14861  002466  5006               	movf	i1CANsendMessage@data+1,w,c
 14862  002468  22DA               	addwfc	fsr2h,f,c
 14863  00246A  50DF               	movf	indf2,w,c
 14864  00246C  010F               	movlb	15	; () banked
 14865  00246E  6F3C               	movwf	60,b	;volatile
 14866                           
 14867                           ; BSR set to: 15
 14868                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
 14869  002470  EE20 F007          	lfsr	2,7
 14870  002474  5005               	movf	i1CANsendMessage@data,w,c
 14871  002476  26D9               	addwf	fsr2l,f,c
 14872  002478  5006               	movf	i1CANsendMessage@data+1,w,c
 14873  00247A  22DA               	addwfc	fsr2h,f,c
 14874  00247C  50DF               	movf	indf2,w,c
 14875  00247E  010F               	movlb	15	; () banked
 14876  002480  6F3D               	movwf	61,b	;volatile
 14877                           
 14878                           ; BSR set to: 15
 14879                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
 14880  002482  010F               	movlb	15	; () banked
 14881  002484  8730               	bsf	48,3,b	;volatile
 14882                           
 14883                           ; BSR set to: 15
 14884                           ;inc\CANlib.h: 444: return;
 14885  002486  0012               	return	
 14886  002488                     i1l376:
 14887                           
 14888                           ; BSR set to: 15
 14889                           ;inc\CANlib.h: 445: }
 14890                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
 14891  002488  010F               	movlb	15	; () banked
 14892  00248A  B720               	btfsc	32,3,b	;volatile
 14893  00248C  0012               	return	
 14894                           
 14895                           ; BSR set to: 15
 14896                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
 14897  00248E  C007  FF25         	movff	i1CANsendMessage@dataLength,3877	;volatile
 14898                           
 14899                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
 14900  002492  AC08               	btfss	i1CANsendMessage@flags,6,c
 14901  002494  D003               	goto	i1l391
 14902                           
 14903                           ; BSR set to: 15
 14904                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
 14905  002496  010F               	movlb	15	; () banked
 14906  002498  8D25               	bsf	37,6,b	;volatile
 14907  00249A  D002               	goto	i1l392
 14908  00249C                     i1l391:
 14909                           
 14910                           ; BSR set to: 15
 14911                           ;inc\CANlib.h: 454: else
 14912                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
 14913  00249C  010F               	movlb	15	; () banked
 14914  00249E  9D25               	bcf	37,6,b	;volatile
 14915  0024A0                     i1l392:
 14916                           
 14917                           ; BSR set to: 15
 14918                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
 14919  0024A0  A608               	btfss	i1CANsendMessage@flags,3,c
 14920  0024A2  D067               	goto	i1l393
 14921                           
 14922                           ; BSR set to: 15
 14923                           ;inc\CANlib.h: 458: {
 14924                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
 14925  0024A4  5001               	movf	i1CANsendMessage@identifier,w,c
 14926  0024A6  6E0D               	movwf	i1CANsendMessage@tamp,c
 14927  0024A8  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 14928  0024AA  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 14929  0024AC  6A10               	clrf	i1CANsendMessage@tamp+3,c
 14930                           
 14931                           ; BSR set to: 15
 14932                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
 14933  0024AE  C00D  FF24         	movff	i1CANsendMessage@tamp,3876	;volatile
 14934                           
 14935                           ; BSR set to: 15
 14936                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
 14937  0024B2  0E00               	movlw	0
 14938  0024B4  1401               	andwf	i1CANsendMessage@identifier,w,c
 14939  0024B6  6E0D               	movwf	i1CANsendMessage@tamp,c
 14940  0024B8  0EFF               	movlw	255
 14941  0024BA  1402               	andwf	i1CANsendMessage@identifier+1,w,c
 14942  0024BC  6E0E               	movwf	i1CANsendMessage@tamp+1,c
 14943  0024BE  0E00               	movlw	0
 14944  0024C0  1403               	andwf	i1CANsendMessage@identifier+2,w,c
 14945  0024C2  6E0F               	movwf	i1CANsendMessage@tamp+2,c
 14946  0024C4  0E00               	movlw	0
 14947  0024C6  1404               	andwf	i1CANsendMessage@identifier+3,w,c
 14948  0024C8  6E10               	movwf	i1CANsendMessage@tamp+3,c
 14949                           
 14950                           ; BSR set to: 15
 14951                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
 14952  0024CA  C00D  F009         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14953  0024CE  C00E  F00A         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14954  0024D2  C00F  F00B         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14955  0024D6  C010  F00C         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14956  0024DA  C00A  F009         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14957  0024DE  C00B  F00A         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14958  0024E2  C00C  F00B         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14959  0024E6  6A0C               	clrf	??i1_CANsendMessage+3,c
 14960  0024E8  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14961  0024EC  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14962  0024F0  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14963  0024F4  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14964                           
 14965                           ; BSR set to: 15
 14966                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
 14967  0024F8  C00D  FF23         	movff	i1CANsendMessage@tamp,3875	;volatile
 14968                           
 14969                           ; BSR set to: 15
 14970                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
 14971  0024FC  0E00               	movlw	0
 14972  0024FE  010F               	movlb	15	; () banked
 14973  002500  6F22               	movwf	34,b	;volatile
 14974                           
 14975                           ; BSR set to: 15
 14976                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
 14977  002502  010F               	movlb	15	; () banked
 14978  002504  8722               	bsf	34,3,b	;volatile
 14979                           
 14980                           ; BSR set to: 15
 14981                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
 14982  002506  A003               	btfss	i1CANsendMessage@identifier+2,0,c
 14983  002508  D002               	goto	i1l394
 14984                           
 14985                           ; BSR set to: 15
 14986                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
 14987  00250A  010F               	movlb	15	; () banked
 14988  00250C  8122               	bsf	34,0,b	;volatile
 14989  00250E                     i1l394:
 14990                           
 14991                           ; BSR set to: 15
 14992                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
 14993  00250E  A203               	btfss	i1CANsendMessage@identifier+2,1,c
 14994  002510  D002               	goto	i1l395
 14995                           
 14996                           ; BSR set to: 15
 14997                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
 14998  002512  010F               	movlb	15	; () banked
 14999  002514  8322               	bsf	34,1,b	;volatile
 15000  002516                     i1l395:
 15001                           
 15002                           ; BSR set to: 15
 15003                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
 15004  002516  A403               	btfss	i1CANsendMessage@identifier+2,2,c
 15005  002518  D002               	goto	i1l396
 15006                           
 15007                           ; BSR set to: 15
 15008                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
 15009  00251A  010F               	movlb	15	; () banked
 15010  00251C  8B22               	bsf	34,5,b	;volatile
 15011  00251E                     i1l396:
 15012                           
 15013                           ; BSR set to: 15
 15014                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
 15015  00251E  A603               	btfss	i1CANsendMessage@identifier+2,3,c
 15016  002520  D002               	goto	i1l397
 15017                           
 15018                           ; BSR set to: 15
 15019                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
 15020  002522  010F               	movlb	15	; () banked
 15021  002524  8D22               	bsf	34,6,b	;volatile
 15022  002526                     i1l397:
 15023                           
 15024                           ; BSR set to: 15
 15025                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
 15026  002526  A803               	btfss	i1CANsendMessage@identifier+2,4,c
 15027  002528  D003               	goto	i1l5738
 15028                           
 15029                           ; BSR set to: 15
 15030                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
 15031  00252A  010F               	movlb	15	; () banked
 15032  00252C  8F22               	bsf	34,7,b	;volatile
 15033  00252E  D000               	goto	i1l5738
 15034  002530                     i1l5738:
 15035                           
 15036                           ; BSR set to: 15
 15037                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
 15038  002530  C001  F009         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15039  002534  C002  F00A         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15040  002538  C003  F00B         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15041  00253C  C004  F00C         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15042  002540  0E16               	movlw	22
 15043  002542  D005               	goto	i1u703_20
 15044  002544                     i1u703_25:
 15045  002544  90D8               	bcf	status,0,c
 15046  002546  320C               	rrcf	??i1_CANsendMessage+3,f,c
 15047  002548  320B               	rrcf	??i1_CANsendMessage+2,f,c
 15048  00254A  320A               	rrcf	??i1_CANsendMessage+1,f,c
 15049  00254C  3209               	rrcf	??i1_CANsendMessage,f,c
 15050  00254E                     i1u703_20:
 15051  00254E  2EE8               	decfsz	wreg,f,c
 15052  002550  D7F9               	goto	i1u703_25
 15053  002552  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15054  002556  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15055  00255A  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15056  00255E  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15057                           
 15058                           ; BSR set to: 15
 15059                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
 15060  002562  500D               	movf	i1CANsendMessage@tamp,w,c
 15061  002564  6E0D               	movwf	i1CANsendMessage@tamp,c
 15062  002566  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 15063  002568  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 15064  00256A  6A10               	clrf	i1CANsendMessage@tamp+3,c
 15065                           
 15066                           ; BSR set to: 15
 15067                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
 15068  00256C  C00D  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15069                           
 15070                           ;inc\CANlib.h: 483: }
 15071  002570  D04E               	goto	i1l5758
 15072  002572                     i1l393:
 15073                           
 15074                           ; BSR set to: 15
 15075                           ;inc\CANlib.h: 485: else
 15076                           ;inc\CANlib.h: 487: {
 15077                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
 15078  002572  010F               	movlb	15	; () banked
 15079  002574  9722               	bcf	34,3,b	;volatile
 15080                           
 15081                           ; BSR set to: 15
 15082                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
 15083  002576  C001  F009         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15084  00257A  C002  F00A         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15085  00257E  C003  F00B         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15086  002582  C004  F00C         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15087  002586  0E04               	movlw	4
 15088  002588  D005               	goto	i1u704_20
 15089  00258A                     i1u704_25:
 15090  00258A  90D8               	bcf	status,0,c
 15091  00258C  320C               	rrcf	??i1_CANsendMessage+3,f,c
 15092  00258E  320B               	rrcf	??i1_CANsendMessage+2,f,c
 15093  002590  320A               	rrcf	??i1_CANsendMessage+1,f,c
 15094  002592  3209               	rrcf	??i1_CANsendMessage,f,c
 15095  002594                     i1u704_20:
 15096  002594  2EE8               	decfsz	wreg,f,c
 15097  002596  D7F9               	goto	i1u704_25
 15098  002598  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15099  00259C  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15100  0025A0  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15101  0025A4  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15102                           
 15103                           ; BSR set to: 15
 15104                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
 15105  0025A8  500D               	movf	i1CANsendMessage@tamp,w,c
 15106  0025AA  6E0D               	movwf	i1CANsendMessage@tamp,c
 15107  0025AC  6A0E               	clrf	i1CANsendMessage@tamp+1,c
 15108  0025AE  6A0F               	clrf	i1CANsendMessage@tamp+2,c
 15109  0025B0  6A10               	clrf	i1CANsendMessage@tamp+3,c
 15110                           
 15111                           ; BSR set to: 15
 15112                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
 15113  0025B2  C00D  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15114                           
 15115                           ; BSR set to: 15
 15116                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
 15117  0025B6  0E07               	movlw	7
 15118  0025B8  1401               	andwf	i1CANsendMessage@identifier,w,c
 15119  0025BA  6E0D               	movwf	i1CANsendMessage@tamp,c
 15120  0025BC  0E00               	movlw	0
 15121  0025BE  1402               	andwf	i1CANsendMessage@identifier+1,w,c
 15122  0025C0  6E0E               	movwf	i1CANsendMessage@tamp+1,c
 15123  0025C2  0E00               	movlw	0
 15124  0025C4  1403               	andwf	i1CANsendMessage@identifier+2,w,c
 15125  0025C6  6E0F               	movwf	i1CANsendMessage@tamp+2,c
 15126  0025C8  0E00               	movlw	0
 15127  0025CA  1404               	andwf	i1CANsendMessage@identifier+3,w,c
 15128  0025CC  6E10               	movwf	i1CANsendMessage@tamp+3,c
 15129                           
 15130                           ; BSR set to: 15
 15131                           ;inc\CANlib.h: 495: tamp = tamp << 5;
 15132  0025CE  C00D  F009         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 15133  0025D2  C00E  F00A         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 15134  0025D6  C00F  F00B         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 15135  0025DA  C010  F00C         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 15136  0025DE  0E05               	movlw	5
 15137  0025E0                     i1u705_25:
 15138  0025E0  90D8               	bcf	status,0,c
 15139  0025E2  3609               	rlcf	??i1_CANsendMessage,f,c
 15140  0025E4  360A               	rlcf	??i1_CANsendMessage+1,f,c
 15141  0025E6  360B               	rlcf	??i1_CANsendMessage+2,f,c
 15142  0025E8  360C               	rlcf	??i1_CANsendMessage+3,f,c
 15143  0025EA  2EE8               	decfsz	wreg,f,c
 15144  0025EC  D7F9               	goto	i1u705_25
 15145  0025EE  C009  F00D         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15146  0025F2  C00A  F00E         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15147  0025F6  C00B  F00F         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15148  0025FA  C00C  F010         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15149                           
 15150                           ; BSR set to: 15
 15151                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
 15152  0025FE  010F               	movlb	15	; () banked
 15153  002600  5122               	movf	34,w,b	;volatile
 15154  002602  0B1F               	andlw	31
 15155  002604  010F               	movlb	15	; () banked
 15156  002606  6F22               	movwf	34,b	;volatile
 15157                           
 15158                           ; BSR set to: 15
 15159                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
 15160  002608  C00D  FF22         	movff	i1CANsendMessage@tamp,3874	;volatile
 15161  00260C  D000               	goto	i1l5758
 15162  00260E                     i1l5758:
 15163                           
 15164                           ; BSR set to: 15
 15165                           ;inc\CANlib.h: 498: }
 15166                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
 15167  00260E  A008               	btfss	i1CANsendMessage@flags,0,c
 15168  002610  D003               	goto	i1l400
 15169                           
 15170                           ; BSR set to: 15
 15171                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
 15172  002612  010F               	movlb	15	; () banked
 15173  002614  8120               	bsf	32,0,b	;volatile
 15174  002616  D002               	goto	i1l401
 15175  002618                     i1l400:
 15176                           
 15177                           ; BSR set to: 15
 15178                           ;inc\CANlib.h: 502: else
 15179                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
 15180  002618  010F               	movlb	15	; () banked
 15181  00261A  9120               	bcf	32,0,b	;volatile
 15182  00261C                     i1l401:
 15183                           
 15184                           ; BSR set to: 15
 15185                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
 15186  00261C  A208               	btfss	i1CANsendMessage@flags,1,c
 15187  00261E  D003               	goto	i1l402
 15188                           
 15189                           ; BSR set to: 15
 15190                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
 15191  002620  010F               	movlb	15	; () banked
 15192  002622  8320               	bsf	32,1,b	;volatile
 15193  002624  D003               	goto	i1l5764
 15194  002626                     i1l402:
 15195                           
 15196                           ; BSR set to: 15
 15197                           ;inc\CANlib.h: 506: else
 15198                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
 15199  002626  010F               	movlb	15	; () banked
 15200  002628  9320               	bcf	32,1,b	;volatile
 15201  00262A  D000               	goto	i1l5764
 15202  00262C                     i1l5764:
 15203                           
 15204                           ; BSR set to: 15
 15205                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
 15206  00262C  C005  FFD9         	movff	i1CANsendMessage@data,fsr2l
 15207  002630  C006  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 15208  002634  50DF               	movf	indf2,w,c
 15209  002636  010F               	movlb	15	; () banked
 15210  002638  6F26               	movwf	38,b	;volatile
 15211                           
 15212                           ; BSR set to: 15
 15213                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
 15214  00263A  EE20 F001          	lfsr	2,1
 15215  00263E  5005               	movf	i1CANsendMessage@data,w,c
 15216  002640  26D9               	addwf	fsr2l,f,c
 15217  002642  5006               	movf	i1CANsendMessage@data+1,w,c
 15218  002644  22DA               	addwfc	fsr2h,f,c
 15219  002646  50DF               	movf	indf2,w,c
 15220  002648  010F               	movlb	15	; () banked
 15221  00264A  6F27               	movwf	39,b	;volatile
 15222                           
 15223                           ; BSR set to: 15
 15224                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
 15225  00264C  EE20 F002          	lfsr	2,2
 15226  002650  5005               	movf	i1CANsendMessage@data,w,c
 15227  002652  26D9               	addwf	fsr2l,f,c
 15228  002654  5006               	movf	i1CANsendMessage@data+1,w,c
 15229  002656  22DA               	addwfc	fsr2h,f,c
 15230  002658  50DF               	movf	indf2,w,c
 15231  00265A  010F               	movlb	15	; () banked
 15232  00265C  6F28               	movwf	40,b	;volatile
 15233                           
 15234                           ; BSR set to: 15
 15235                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
 15236  00265E  EE20 F003          	lfsr	2,3
 15237  002662  5005               	movf	i1CANsendMessage@data,w,c
 15238  002664  26D9               	addwf	fsr2l,f,c
 15239  002666  5006               	movf	i1CANsendMessage@data+1,w,c
 15240  002668  22DA               	addwfc	fsr2h,f,c
 15241  00266A  50DF               	movf	indf2,w,c
 15242  00266C  010F               	movlb	15	; () banked
 15243  00266E  6F29               	movwf	41,b	;volatile
 15244                           
 15245                           ; BSR set to: 15
 15246                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
 15247  002670  EE20 F004          	lfsr	2,4
 15248  002674  5005               	movf	i1CANsendMessage@data,w,c
 15249  002676  26D9               	addwf	fsr2l,f,c
 15250  002678  5006               	movf	i1CANsendMessage@data+1,w,c
 15251  00267A  22DA               	addwfc	fsr2h,f,c
 15252  00267C  50DF               	movf	indf2,w,c
 15253  00267E  010F               	movlb	15	; () banked
 15254  002680  6F2A               	movwf	42,b	;volatile
 15255                           
 15256                           ; BSR set to: 15
 15257                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
 15258  002682  EE20 F005          	lfsr	2,5
 15259  002686  5005               	movf	i1CANsendMessage@data,w,c
 15260  002688  26D9               	addwf	fsr2l,f,c
 15261  00268A  5006               	movf	i1CANsendMessage@data+1,w,c
 15262  00268C  22DA               	addwfc	fsr2h,f,c
 15263  00268E  50DF               	movf	indf2,w,c
 15264  002690  010F               	movlb	15	; () banked
 15265  002692  6F2B               	movwf	43,b	;volatile
 15266                           
 15267                           ; BSR set to: 15
 15268                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
 15269  002694  EE20 F006          	lfsr	2,6
 15270  002698  5005               	movf	i1CANsendMessage@data,w,c
 15271  00269A  26D9               	addwf	fsr2l,f,c
 15272  00269C  5006               	movf	i1CANsendMessage@data+1,w,c
 15273  00269E  22DA               	addwfc	fsr2h,f,c
 15274  0026A0  50DF               	movf	indf2,w,c
 15275  0026A2  010F               	movlb	15	; () banked
 15276  0026A4  6F2C               	movwf	44,b	;volatile
 15277                           
 15278                           ; BSR set to: 15
 15279                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
 15280  0026A6  EE20 F007          	lfsr	2,7
 15281  0026AA  5005               	movf	i1CANsendMessage@data,w,c
 15282  0026AC  26D9               	addwf	fsr2l,f,c
 15283  0026AE  5006               	movf	i1CANsendMessage@data+1,w,c
 15284  0026B0  22DA               	addwfc	fsr2h,f,c
 15285  0026B2  50DF               	movf	indf2,w,c
 15286  0026B4  010F               	movlb	15	; () banked
 15287  0026B6  6F2D               	movwf	45,b	;volatile
 15288                           
 15289                           ; BSR set to: 15
 15290                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
 15291  0026B8  010F               	movlb	15	; () banked
 15292  0026BA  8720               	bsf	32,3,b	;volatile
 15293                           
 15294                           ; BSR set to: 15
 15295                           ;inc\CANlib.h: 520: return;
 15296  0026BC  0012               	return	
 15297                           
 15298                           ; BSR set to: 15
 15299                           
 15300                           ; BSR set to: 15
 15301  0026BE  0012               	return		;funcret
 15302  0026C0                     __end_ofi1_CANsendMessage:
 15303                           	opt stack 0
 15304                           pclatu	equ	0xFFB
 15305                           pclath	equ	0xFFA
 15306                           tblptru	equ	0xFF8
 15307                           tblptrh	equ	0xFF7
 15308                           tblptrl	equ	0xFF6
 15309                           tablat	equ	0xFF5
 15310                           prodh	equ	0xFF4
 15311                           prodl	equ	0xFF3
 15312                           intcon	equ	0xFF2
 15313                           intcon2	equ	0xFF1
 15314                           postinc0	equ	0xFEE
 15315                           fsr0h	equ	0xFEA
 15316                           fsr0l	equ	0xFE9
 15317                           wreg	equ	0xFE8
 15318                           indf1	equ	0xFE7
 15319                           postdec1	equ	0xFE5
 15320                           fsr1h	equ	0xFE2
 15321                           fsr1l	equ	0xFE1
 15322                           bsr	equ	0xFE0
 15323                           indf2	equ	0xFDF
 15324                           postinc2	equ	0xFDE
 15325                           postdec2	equ	0xFDD
 15326                           plusw2	equ	0xFDB
 15327                           fsr2h	equ	0xFDA
 15328                           fsr2l	equ	0xFD9
 15329                           status	equ	0xFD8
 15330                           
 15331 ;; *************** function _CANreceiveMessage *****************
 15332 ;; Defined at:
 15333 ;;		line 528 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 15334 ;; Parameters:    Size  Location     Type
 15335 ;;  msg             2    0[COMRAM] PTR struct .
 15336 ;;		 -> msg(15), 
 15337 ;; Auto vars:     Size  Location     Type
 15338 ;;  tamp            1   11[COMRAM] unsigned char 
 15339 ;;  error           1   10[COMRAM] unsigned char 
 15340 ;; Return value:  Size  Location     Type
 15341 ;;                  1    wreg      unsigned char 
 15342 ;; Registers used:
 15343 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15344 ;; Tracked objects:
 15345 ;;		On entry : 0/0
 15346 ;;		On exit  : 0/0
 15347 ;;		Unchanged: 0/0
 15348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15349 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15350 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15351 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15352 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15353 ;;Total ram usage:       12 bytes
 15354 ;; Hardware stack levels used:    1
 15355 ;; Hardware stack levels required when called:    2
 15356 ;; This function calls:
 15357 ;;		Nothing
 15358 ;; This function is called by:
 15359 ;;		_ISR_Bassa
 15360 ;; This function uses a non-reentrant model
 15361 ;;
 15362                           
 15363                           	psect	text41
 15364  002C4A                     __ptext41:
 15365                           	opt stack 0
 15366  002C4A                     _CANreceiveMessage:
 15367                           	opt stack 20
 15368                           
 15369                           ;inc\CANlib.h: 530: BYTE tamp;
 15370                           ;inc\CANlib.h: 531: BYTE error = 0;
 15371                           
 15372                           ; BSR set to: 15
 15373                           ;incstack = 0
 15374  002C4A  0E00               	movlw	0
 15375  002C4C  6E0B               	movwf	CANreceiveMessage@error,c
 15376                           
 15377                           ;inc\CANlib.h: 533: if (COMSTATbits.RXB0OVFL == 0x01)
 15378  002C4E  AE74               	btfss	3956,7,c	;volatile
 15379  002C50  D002               	goto	i1l5124
 15380                           
 15381                           ;inc\CANlib.h: 534: error |= CAN_RX_BUFFER_1_OVFL;
 15382  002C52  800B               	bsf	CANreceiveMessage@error,0,c
 15383  002C54  D000               	goto	i1l5124
 15384  002C56                     i1l5124:
 15385                           
 15386                           ;inc\CANlib.h: 536: if (COMSTATbits.RXB1OVFL == 0x01)
 15387  002C56  AC74               	btfss	3956,6,c	;volatile
 15388  002C58  D002               	goto	i1l5128
 15389                           
 15390                           ;inc\CANlib.h: 537: error |= CAN_RX_BUFFER_2_OVFL;
 15391  002C5A  820B               	bsf	CANreceiveMessage@error,1,c
 15392  002C5C  D000               	goto	i1l5128
 15393  002C5E                     i1l5128:
 15394                           
 15395                           ;inc\CANlib.h: 540: if (RXB1CONbits.RXFUL ==0x01)
 15396  002C5E  010F               	movlb	15	; () banked
 15397  002C60  AF50               	btfss	80,7,b	;volatile
 15398  002C62  D149               	goto	i1l408
 15399                           
 15400                           ; BSR set to: 15
 15401                           ;inc\CANlib.h: 541: {
 15402                           ;inc\CANlib.h: 542: msg->identifier = 0;
 15403  002C64  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15404  002C68  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15405  002C6C  6ADE               	clrf	postinc2,c
 15406  002C6E  6ADE               	clrf	postinc2,c
 15407  002C70  6ADE               	clrf	postinc2,c
 15408  002C72  6ADD               	clrf	postdec2,c
 15409                           
 15410                           ; BSR set to: 15
 15411                           ;inc\CANlib.h: 543: msg->data[0] =RXB1D0;
 15412  002C74  EE20 F004          	lfsr	2,4
 15413  002C78  5001               	movf	CANreceiveMessage@msg,w,c
 15414  002C7A  26D9               	addwf	fsr2l,f,c
 15415  002C7C  5002               	movf	CANreceiveMessage@msg+1,w,c
 15416  002C7E  22DA               	addwfc	fsr2h,f,c
 15417  002C80  CF56 FFDF          	movff	3926,indf2	;volatile
 15418                           
 15419                           ; BSR set to: 15
 15420                           ;inc\CANlib.h: 544: msg->data[1] =RXB1D1;
 15421  002C84  EE20 F005          	lfsr	2,5
 15422  002C88  5001               	movf	CANreceiveMessage@msg,w,c
 15423  002C8A  26D9               	addwf	fsr2l,f,c
 15424  002C8C  5002               	movf	CANreceiveMessage@msg+1,w,c
 15425  002C8E  22DA               	addwfc	fsr2h,f,c
 15426  002C90  CF57 FFDF          	movff	3927,indf2	;volatile
 15427                           
 15428                           ; BSR set to: 15
 15429                           ;inc\CANlib.h: 545: msg->data[2] =RXB1D2;
 15430  002C94  EE20 F006          	lfsr	2,6
 15431  002C98  5001               	movf	CANreceiveMessage@msg,w,c
 15432  002C9A  26D9               	addwf	fsr2l,f,c
 15433  002C9C  5002               	movf	CANreceiveMessage@msg+1,w,c
 15434  002C9E  22DA               	addwfc	fsr2h,f,c
 15435  002CA0  CF58 FFDF          	movff	3928,indf2	;volatile
 15436                           
 15437                           ; BSR set to: 15
 15438                           ;inc\CANlib.h: 546: msg->data[3] =RXB1D3;
 15439  002CA4  EE20 F007          	lfsr	2,7
 15440  002CA8  5001               	movf	CANreceiveMessage@msg,w,c
 15441  002CAA  26D9               	addwf	fsr2l,f,c
 15442  002CAC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15443  002CAE  22DA               	addwfc	fsr2h,f,c
 15444  002CB0  CF59 FFDF          	movff	3929,indf2	;volatile
 15445                           
 15446                           ; BSR set to: 15
 15447                           ;inc\CANlib.h: 547: msg->data[4] =RXB1D4;
 15448  002CB4  EE20 F008          	lfsr	2,8
 15449  002CB8  5001               	movf	CANreceiveMessage@msg,w,c
 15450  002CBA  26D9               	addwf	fsr2l,f,c
 15451  002CBC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15452  002CBE  22DA               	addwfc	fsr2h,f,c
 15453  002CC0  CF5A FFDF          	movff	3930,indf2	;volatile
 15454                           
 15455                           ; BSR set to: 15
 15456                           ;inc\CANlib.h: 548: msg->data[5] =RXB1D5;
 15457  002CC4  EE20 F009          	lfsr	2,9
 15458  002CC8  5001               	movf	CANreceiveMessage@msg,w,c
 15459  002CCA  26D9               	addwf	fsr2l,f,c
 15460  002CCC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15461  002CCE  22DA               	addwfc	fsr2h,f,c
 15462  002CD0  CF5B FFDF          	movff	3931,indf2	;volatile
 15463                           
 15464                           ; BSR set to: 15
 15465                           ;inc\CANlib.h: 549: msg->data[6] =RXB1D6;
 15466  002CD4  EE20 F00A          	lfsr	2,10
 15467  002CD8  5001               	movf	CANreceiveMessage@msg,w,c
 15468  002CDA  26D9               	addwf	fsr2l,f,c
 15469  002CDC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15470  002CDE  22DA               	addwfc	fsr2h,f,c
 15471  002CE0  CF5C FFDF          	movff	3932,indf2	;volatile
 15472                           
 15473                           ; BSR set to: 15
 15474                           ;inc\CANlib.h: 550: msg->data[7] =RXB1D7;
 15475  002CE4  EE20 F00B          	lfsr	2,11
 15476  002CE8  5001               	movf	CANreceiveMessage@msg,w,c
 15477  002CEA  26D9               	addwf	fsr2l,f,c
 15478  002CEC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15479  002CEE  22DA               	addwfc	fsr2h,f,c
 15480  002CF0  CF5D FFDF          	movff	3933,indf2	;volatile
 15481                           
 15482                           ; BSR set to: 15
 15483                           ;inc\CANlib.h: 552: msg->RTR = RXB1DLCbits.RXRTR;
 15484  002CF4  EE20 F00E          	lfsr	2,14
 15485  002CF8  5001               	movf	CANreceiveMessage@msg,w,c
 15486  002CFA  26D9               	addwf	fsr2l,f,c
 15487  002CFC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15488  002CFE  22DA               	addwfc	fsr2h,f,c
 15489  002D00  010F               	movlb	15	; () banked
 15490  002D02  AD55               	btfss	85,6,b	;volatile
 15491  002D04  D002               	goto	i1u606_20
 15492  002D06  0E01               	movlw	1
 15493  002D08  D001               	goto	i1u606_26
 15494  002D0A                     i1u606_20:
 15495  002D0A  0E00               	movlw	0
 15496  002D0C                     i1u606_26:
 15497  002D0C  6EDF               	movwf	indf2,c
 15498                           
 15499                           ; BSR set to: 15
 15500                           ;inc\CANlib.h: 554: msg->length = RXB1DLC & 0x0F;
 15501  002D0E  EE20 F00D          	lfsr	2,13
 15502  002D12  5001               	movf	CANreceiveMessage@msg,w,c
 15503  002D14  26D9               	addwf	fsr2l,f,c
 15504  002D16  5002               	movf	CANreceiveMessage@msg+1,w,c
 15505  002D18  22DA               	addwfc	fsr2h,f,c
 15506  002D1A  010F               	movlb	15	; () banked
 15507  002D1C  5155               	movf	85,w,b	;volatile
 15508  002D1E  0B0F               	andlw	15
 15509  002D20  6EDF               	movwf	indf2,c
 15510                           
 15511                           ; BSR set to: 15
 15512                           ;inc\CANlib.h: 556: msg->type = RXB1SIDLbits.EXID;
 15513  002D22  EE20 F00C          	lfsr	2,12
 15514  002D26  5001               	movf	CANreceiveMessage@msg,w,c
 15515  002D28  26D9               	addwf	fsr2l,f,c
 15516  002D2A  5002               	movf	CANreceiveMessage@msg+1,w,c
 15517  002D2C  22DA               	addwfc	fsr2h,f,c
 15518  002D2E  010F               	movlb	15	; () banked
 15519  002D30  A752               	btfss	82,3,b	;volatile
 15520  002D32  D002               	goto	i1u607_20
 15521  002D34  0E01               	movlw	1
 15522  002D36  D001               	goto	i1u607_26
 15523  002D38                     i1u607_20:
 15524  002D38  0E00               	movlw	0
 15525  002D3A                     i1u607_26:
 15526  002D3A  6EDF               	movwf	indf2,c
 15527                           
 15528                           ; BSR set to: 15
 15529                           ;inc\CANlib.h: 558: if (RXB1SIDLbits.EXID == 0)
 15530  002D3C  010F               	movlb	15	; () banked
 15531  002D3E  B752               	btfsc	82,3,b	;volatile
 15532  002D40  D044               	goto	i1l5162
 15533                           
 15534                           ; BSR set to: 15
 15535                           ;inc\CANlib.h: 559: {
 15536                           ;inc\CANlib.h: 560: msg->identifier = ((unsigned long)RXB1SIDH)<< 3;
 15537  002D42  CF51 F003          	movff	3921,??_CANreceiveMessage	;volatile
 15538  002D46  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15539  002D48  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15540  002D4A  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15541  002D4C  0E03               	movlw	3
 15542  002D4E                     i1u609_25:
 15543  002D4E  90D8               	bcf	status,0,c
 15544  002D50  3603               	rlcf	??_CANreceiveMessage,f,c
 15545  002D52  3604               	rlcf	??_CANreceiveMessage+1,f,c
 15546  002D54  3605               	rlcf	??_CANreceiveMessage+2,f,c
 15547  002D56  3606               	rlcf	??_CANreceiveMessage+3,f,c
 15548  002D58  2EE8               	decfsz	wreg,f,c
 15549  002D5A  D7F9               	goto	i1u609_25
 15550  002D5C  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15551  002D60  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15552  002D64  C003  FFDE         	movff	??_CANreceiveMessage,postinc2
 15553  002D68  C004  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15554  002D6C  C005  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15555  002D70  C006  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15556                           
 15557                           ; BSR set to: 15
 15558                           ;inc\CANlib.h: 561: tamp = (RXB1SIDL >> 5 ) & 0x07;
 15559  002D74  010F               	movlb	15	; () banked
 15560  002D76  3952               	swapf	82,w,b	;volatile
 15561  002D78  42E8               	rrncf	wreg,f,c
 15562  002D7A  0B07               	andlw	7
 15563  002D7C  0B07               	andlw	7
 15564  002D7E  6E0C               	movwf	CANreceiveMessage@tamp,c
 15565                           
 15566                           ; BSR set to: 15
 15567                           ;inc\CANlib.h: 562: msg->identifier = msg->identifier + tamp;
 15568  002D80  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15569  002D84  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15570  002D88  CFDE F003          	movff	postinc2,??_CANreceiveMessage
 15571  002D8C  CFDE F004          	movff	postinc2,??_CANreceiveMessage+1
 15572  002D90  CFDE F005          	movff	postinc2,??_CANreceiveMessage+2
 15573  002D94  CFDE F006          	movff	postinc2,??_CANreceiveMessage+3
 15574  002D98  500C               	movf	CANreceiveMessage@tamp,w,c
 15575  002D9A  2403               	addwf	??_CANreceiveMessage,w,c
 15576  002D9C  6E07               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 15577  002D9E  0E00               	movlw	0
 15578  002DA0  2004               	addwfc	??_CANreceiveMessage+1,w,c
 15579  002DA2  6E08               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 15580  002DA4  0E00               	movlw	0
 15581  002DA6  2005               	addwfc	??_CANreceiveMessage+2,w,c
 15582  002DA8  6E09               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 15583  002DAA  0E00               	movlw	0
 15584  002DAC  2006               	addwfc	??_CANreceiveMessage+3,w,c
 15585  002DAE  6E0A               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 15586  002DB0  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15587  002DB4  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15588  002DB8  C007  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 15589  002DBC  C008  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 15590  002DC0  C009  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 15591  002DC4  C00A  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 15592                           
 15593                           ;inc\CANlib.h: 563: }
 15594  002DC8  D093               	goto	i1l5188
 15595  002DCA                     i1l5162:
 15596                           
 15597                           ; BSR set to: 15
 15598                           ;inc\CANlib.h: 564: else
 15599                           ;inc\CANlib.h: 565: {
 15600                           ;inc\CANlib.h: 566: msg->identifier = (unsigned long) RXB1EIDL;
 15601  002DCA  CF54 F003          	movff	3924,??_CANreceiveMessage	;volatile
 15602  002DCE  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15603  002DD0  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15604  002DD2  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15605  002DD4  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15606  002DD8  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15607  002DDC  C003  FFDE         	movff	??_CANreceiveMessage,postinc2
 15608  002DE0  C004  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15609  002DE4  C005  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15610  002DE8  C006  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15611                           
 15612                           ; BSR set to: 15
 15613                           ;inc\CANlib.h: 567: msg->identifier += ((unsigned long) RXB1EIDH) << 8;
 15614  002DEC  CF53 F003          	movff	3923,??_CANreceiveMessage	;volatile
 15615  002DF0  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15616  002DF2  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15617  002DF4  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15618  002DF6  C005  F006         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 15619  002DFA  C004  F005         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 15620  002DFE  C003  F004         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 15621  002E02  6A03               	clrf	??_CANreceiveMessage,c
 15622  002E04  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15623  002E08  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15624  002E0C  5003               	movf	??_CANreceiveMessage,w,c
 15625  002E0E  26DE               	addwf	postinc2,f,c
 15626  002E10  5004               	movf	??_CANreceiveMessage+1,w,c
 15627  002E12  22DE               	addwfc	postinc2,f,c
 15628  002E14  5005               	movf	??_CANreceiveMessage+2,w,c
 15629  002E16  22DE               	addwfc	postinc2,f,c
 15630  002E18  5006               	movf	??_CANreceiveMessage+3,w,c
 15631  002E1A  22DE               	addwfc	postinc2,f,c
 15632                           
 15633                           ; BSR set to: 15
 15634                           ;inc\CANlib.h: 569: if (RXB1SIDLbits.EID16)
 15635  002E1C  010F               	movlb	15	; () banked
 15636  002E1E  A152               	btfss	82,0,b	;volatile
 15637  002E20  D00D               	goto	i1l5170
 15638                           
 15639                           ; BSR set to: 15
 15640                           ;inc\CANlib.h: 570: msg->identifier |= 0x00010000;
 15641  002E22  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15642  002E26  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15643  002E2A  0E00               	movlw	0
 15644  002E2C  12DE               	iorwf	postinc2,f,c
 15645  002E2E  0E00               	movlw	0
 15646  002E30  12DE               	iorwf	postinc2,f,c
 15647  002E32  0E01               	movlw	1
 15648  002E34  12DE               	iorwf	postinc2,f,c
 15649  002E36  0E00               	movlw	0
 15650  002E38  12DE               	iorwf	postinc2,f,c
 15651  002E3A  D000               	goto	i1l5170
 15652  002E3C                     i1l5170:
 15653                           
 15654                           ; BSR set to: 15
 15655                           ;inc\CANlib.h: 571: if (RXB1SIDLbits.EID17)
 15656  002E3C  010F               	movlb	15	; () banked
 15657  002E3E  A352               	btfss	82,1,b	;volatile
 15658  002E40  D00D               	goto	i1l5174
 15659                           
 15660                           ; BSR set to: 15
 15661                           ;inc\CANlib.h: 572: msg->identifier |= 0x00020000;
 15662  002E42  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15663  002E46  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15664  002E4A  0E00               	movlw	0
 15665  002E4C  12DE               	iorwf	postinc2,f,c
 15666  002E4E  0E00               	movlw	0
 15667  002E50  12DE               	iorwf	postinc2,f,c
 15668  002E52  0E02               	movlw	2
 15669  002E54  12DE               	iorwf	postinc2,f,c
 15670  002E56  0E00               	movlw	0
 15671  002E58  12DE               	iorwf	postinc2,f,c
 15672  002E5A  D000               	goto	i1l5174
 15673  002E5C                     i1l5174:
 15674                           
 15675                           ; BSR set to: 15
 15676                           ;inc\CANlib.h: 573: if (RXB1SIDLbits.SID0)
 15677  002E5C  010F               	movlb	15	; () banked
 15678  002E5E  AB52               	btfss	82,5,b	;volatile
 15679  002E60  D00D               	goto	i1l5178
 15680                           
 15681                           ; BSR set to: 15
 15682                           ;inc\CANlib.h: 574: msg->identifier |= 0x00040000;
 15683  002E62  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15684  002E66  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15685  002E6A  0E00               	movlw	0
 15686  002E6C  12DE               	iorwf	postinc2,f,c
 15687  002E6E  0E00               	movlw	0
 15688  002E70  12DE               	iorwf	postinc2,f,c
 15689  002E72  0E04               	movlw	4
 15690  002E74  12DE               	iorwf	postinc2,f,c
 15691  002E76  0E00               	movlw	0
 15692  002E78  12DE               	iorwf	postinc2,f,c
 15693  002E7A  D000               	goto	i1l5178
 15694  002E7C                     i1l5178:
 15695                           
 15696                           ; BSR set to: 15
 15697                           ;inc\CANlib.h: 575: if (RXB1SIDLbits.SID1)
 15698  002E7C  010F               	movlb	15	; () banked
 15699  002E7E  AD52               	btfss	82,6,b	;volatile
 15700  002E80  D00D               	goto	i1l5182
 15701                           
 15702                           ; BSR set to: 15
 15703                           ;inc\CANlib.h: 576: msg->identifier |= 0x00080000;
 15704  002E82  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15705  002E86  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15706  002E8A  0E00               	movlw	0
 15707  002E8C  12DE               	iorwf	postinc2,f,c
 15708  002E8E  0E00               	movlw	0
 15709  002E90  12DE               	iorwf	postinc2,f,c
 15710  002E92  0E08               	movlw	8
 15711  002E94  12DE               	iorwf	postinc2,f,c
 15712  002E96  0E00               	movlw	0
 15713  002E98  12DE               	iorwf	postinc2,f,c
 15714  002E9A  D000               	goto	i1l5182
 15715  002E9C                     i1l5182:
 15716                           
 15717                           ; BSR set to: 15
 15718                           ;inc\CANlib.h: 577: if (RXB1SIDLbits.SID2)
 15719  002E9C  010F               	movlb	15	; () banked
 15720  002E9E  AF52               	btfss	82,7,b	;volatile
 15721  002EA0  D00D               	goto	i1l5186
 15722                           
 15723                           ; BSR set to: 15
 15724                           ;inc\CANlib.h: 578: msg->identifier |= 0x00100000;
 15725  002EA2  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15726  002EA6  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15727  002EAA  0E00               	movlw	0
 15728  002EAC  12DE               	iorwf	postinc2,f,c
 15729  002EAE  0E00               	movlw	0
 15730  002EB0  12DE               	iorwf	postinc2,f,c
 15731  002EB2  0E10               	movlw	16
 15732  002EB4  12DE               	iorwf	postinc2,f,c
 15733  002EB6  0E00               	movlw	0
 15734  002EB8  12DE               	iorwf	postinc2,f,c
 15735  002EBA  D000               	goto	i1l5186
 15736  002EBC                     i1l5186:
 15737                           
 15738                           ; BSR set to: 15
 15739                           ;inc\CANlib.h: 580: msg->identifier |= ((unsigned long) RXB1SIDH) << 21;
 15740  002EBC  CF51 F003          	movff	3921,??_CANreceiveMessage	;volatile
 15741  002EC0  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15742  002EC2  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15743  002EC4  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15744  002EC6  0E15               	movlw	21
 15745  002EC8                     i1u615_25:
 15746  002EC8  90D8               	bcf	status,0,c
 15747  002ECA  3603               	rlcf	??_CANreceiveMessage,f,c
 15748  002ECC  3604               	rlcf	??_CANreceiveMessage+1,f,c
 15749  002ECE  3605               	rlcf	??_CANreceiveMessage+2,f,c
 15750  002ED0  3606               	rlcf	??_CANreceiveMessage+3,f,c
 15751  002ED2  2EE8               	decfsz	wreg,f,c
 15752  002ED4  D7F9               	goto	i1u615_25
 15753  002ED6  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15754  002EDA  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15755  002EDE  5003               	movf	??_CANreceiveMessage,w,c
 15756  002EE0  12DE               	iorwf	postinc2,f,c
 15757  002EE2  5004               	movf	??_CANreceiveMessage+1,w,c
 15758  002EE4  12DE               	iorwf	postinc2,f,c
 15759  002EE6  5005               	movf	??_CANreceiveMessage+2,w,c
 15760  002EE8  12DE               	iorwf	postinc2,f,c
 15761  002EEA  5006               	movf	??_CANreceiveMessage+3,w,c
 15762  002EEC  12DE               	iorwf	postinc2,f,c
 15763  002EEE  D000               	goto	i1l5188
 15764  002EF0                     i1l5188:
 15765                           
 15766                           ; BSR set to: 15
 15767                           ;inc\CANlib.h: 581: }
 15768                           ;inc\CANlib.h: 583: RXB1CONbits.RXFUL = 0x00;
 15769  002EF0  010F               	movlb	15	; () banked
 15770  002EF2  9F50               	bcf	80,7,b	;volatile
 15771                           
 15772                           ; BSR set to: 15
 15773                           ;inc\CANlib.h: 584: return (error);
 15774                           ;	Return value of _CANreceiveMessage is never used
 15775  002EF4  0012               	return	
 15776  002EF6                     i1l408:
 15777                           
 15778                           ; BSR set to: 15
 15779                           ;inc\CANlib.h: 585: }
 15780                           ;inc\CANlib.h: 587: if (RXB0CONbits.RXFUL ==0x01)
 15781  002EF6  AE60               	btfss	3936,7,c	;volatile
 15782  002EF8  0012               	return	
 15783                           
 15784                           ; BSR set to: 15
 15785                           ;inc\CANlib.h: 588: {
 15786                           ;inc\CANlib.h: 589: msg->identifier = 0;
 15787  002EFA  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15788  002EFE  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15789  002F02  6ADE               	clrf	postinc2,c
 15790  002F04  6ADE               	clrf	postinc2,c
 15791  002F06  6ADE               	clrf	postinc2,c
 15792  002F08  6ADD               	clrf	postdec2,c
 15793                           
 15794                           ; BSR set to: 15
 15795                           ;inc\CANlib.h: 590: msg->data[0] =RXB0D0;
 15796  002F0A  EE20 F004          	lfsr	2,4
 15797  002F0E  5001               	movf	CANreceiveMessage@msg,w,c
 15798  002F10  26D9               	addwf	fsr2l,f,c
 15799  002F12  5002               	movf	CANreceiveMessage@msg+1,w,c
 15800  002F14  22DA               	addwfc	fsr2h,f,c
 15801  002F16  CF66 FFDF          	movff	3942,indf2	;volatile
 15802                           
 15803                           ; BSR set to: 15
 15804                           ;inc\CANlib.h: 591: msg->data[1] =RXB0D1;
 15805  002F1A  EE20 F005          	lfsr	2,5
 15806  002F1E  5001               	movf	CANreceiveMessage@msg,w,c
 15807  002F20  26D9               	addwf	fsr2l,f,c
 15808  002F22  5002               	movf	CANreceiveMessage@msg+1,w,c
 15809  002F24  22DA               	addwfc	fsr2h,f,c
 15810  002F26  CF67 FFDF          	movff	3943,indf2	;volatile
 15811                           
 15812                           ; BSR set to: 15
 15813                           ;inc\CANlib.h: 592: msg->data[2] =RXB0D2;
 15814  002F2A  EE20 F006          	lfsr	2,6
 15815  002F2E  5001               	movf	CANreceiveMessage@msg,w,c
 15816  002F30  26D9               	addwf	fsr2l,f,c
 15817  002F32  5002               	movf	CANreceiveMessage@msg+1,w,c
 15818  002F34  22DA               	addwfc	fsr2h,f,c
 15819  002F36  CF68 FFDF          	movff	3944,indf2	;volatile
 15820                           
 15821                           ; BSR set to: 15
 15822                           ;inc\CANlib.h: 593: msg->data[3] =RXB0D3;
 15823  002F3A  EE20 F007          	lfsr	2,7
 15824  002F3E  5001               	movf	CANreceiveMessage@msg,w,c
 15825  002F40  26D9               	addwf	fsr2l,f,c
 15826  002F42  5002               	movf	CANreceiveMessage@msg+1,w,c
 15827  002F44  22DA               	addwfc	fsr2h,f,c
 15828  002F46  CF69 FFDF          	movff	3945,indf2	;volatile
 15829                           
 15830                           ; BSR set to: 15
 15831                           ;inc\CANlib.h: 594: msg->data[4] =RXB0D4;
 15832  002F4A  EE20 F008          	lfsr	2,8
 15833  002F4E  5001               	movf	CANreceiveMessage@msg,w,c
 15834  002F50  26D9               	addwf	fsr2l,f,c
 15835  002F52  5002               	movf	CANreceiveMessage@msg+1,w,c
 15836  002F54  22DA               	addwfc	fsr2h,f,c
 15837  002F56  CF6A FFDF          	movff	3946,indf2	;volatile
 15838                           
 15839                           ; BSR set to: 15
 15840                           ;inc\CANlib.h: 595: msg->data[5] =RXB0D5;
 15841  002F5A  EE20 F009          	lfsr	2,9
 15842  002F5E  5001               	movf	CANreceiveMessage@msg,w,c
 15843  002F60  26D9               	addwf	fsr2l,f,c
 15844  002F62  5002               	movf	CANreceiveMessage@msg+1,w,c
 15845  002F64  22DA               	addwfc	fsr2h,f,c
 15846  002F66  CF6B FFDF          	movff	3947,indf2	;volatile
 15847                           
 15848                           ; BSR set to: 15
 15849                           ;inc\CANlib.h: 596: msg->data[6] =RXB0D6;
 15850  002F6A  EE20 F00A          	lfsr	2,10
 15851  002F6E  5001               	movf	CANreceiveMessage@msg,w,c
 15852  002F70  26D9               	addwf	fsr2l,f,c
 15853  002F72  5002               	movf	CANreceiveMessage@msg+1,w,c
 15854  002F74  22DA               	addwfc	fsr2h,f,c
 15855  002F76  CF6C FFDF          	movff	3948,indf2	;volatile
 15856                           
 15857                           ; BSR set to: 15
 15858                           ;inc\CANlib.h: 597: msg->data[7] =RXB0D7;
 15859  002F7A  EE20 F00B          	lfsr	2,11
 15860  002F7E  5001               	movf	CANreceiveMessage@msg,w,c
 15861  002F80  26D9               	addwf	fsr2l,f,c
 15862  002F82  5002               	movf	CANreceiveMessage@msg+1,w,c
 15863  002F84  22DA               	addwfc	fsr2h,f,c
 15864  002F86  CF6D FFDF          	movff	3949,indf2	;volatile
 15865                           
 15866                           ; BSR set to: 15
 15867                           ;inc\CANlib.h: 599: msg->RTR = RXB0DLCbits.RXRTR;
 15868  002F8A  EE20 F00E          	lfsr	2,14
 15869  002F8E  5001               	movf	CANreceiveMessage@msg,w,c
 15870  002F90  26D9               	addwf	fsr2l,f,c
 15871  002F92  5002               	movf	CANreceiveMessage@msg+1,w,c
 15872  002F94  22DA               	addwfc	fsr2h,f,c
 15873  002F96  AC65               	btfss	3941,6,c	;volatile
 15874  002F98  D002               	goto	i1u617_20
 15875  002F9A  0E01               	movlw	1
 15876  002F9C  D001               	goto	i1u617_26
 15877  002F9E                     i1u617_20:
 15878  002F9E  0E00               	movlw	0
 15879  002FA0                     i1u617_26:
 15880  002FA0  6EDF               	movwf	indf2,c
 15881                           
 15882                           ; BSR set to: 15
 15883                           ;inc\CANlib.h: 601: msg->length = RXB0DLC & 0x0F;
 15884  002FA2  EE20 F00D          	lfsr	2,13
 15885  002FA6  5001               	movf	CANreceiveMessage@msg,w,c
 15886  002FA8  26D9               	addwf	fsr2l,f,c
 15887  002FAA  5002               	movf	CANreceiveMessage@msg+1,w,c
 15888  002FAC  22DA               	addwfc	fsr2h,f,c
 15889  002FAE  5065               	movf	3941,w,c	;volatile
 15890  002FB0  0B0F               	andlw	15
 15891  002FB2  6EDF               	movwf	indf2,c
 15892                           
 15893                           ; BSR set to: 15
 15894                           ;inc\CANlib.h: 603: msg->type = RXB0SIDLbits.EXID;
 15895  002FB4  EE20 F00C          	lfsr	2,12
 15896  002FB8  5001               	movf	CANreceiveMessage@msg,w,c
 15897  002FBA  26D9               	addwf	fsr2l,f,c
 15898  002FBC  5002               	movf	CANreceiveMessage@msg+1,w,c
 15899  002FBE  22DA               	addwfc	fsr2h,f,c
 15900  002FC0  A662               	btfss	3938,3,c	;volatile
 15901  002FC2  D002               	goto	i1u618_20
 15902  002FC4  0E01               	movlw	1
 15903  002FC6  D001               	goto	i1u618_26
 15904  002FC8                     i1u618_20:
 15905  002FC8  0E00               	movlw	0
 15906  002FCA                     i1u618_26:
 15907  002FCA  6EDF               	movwf	indf2,c
 15908                           
 15909                           ; BSR set to: 15
 15910                           ;inc\CANlib.h: 605: if (RXB0SIDLbits.EXID == 0)
 15911  002FCC  B662               	btfsc	3938,3,c	;volatile
 15912  002FCE  D043               	goto	i1l5224
 15913                           
 15914                           ; BSR set to: 15
 15915                           ;inc\CANlib.h: 606: {
 15916                           ;inc\CANlib.h: 607: msg->identifier = ((unsigned long)RXB0SIDH)<< 3;
 15917  002FD0  CF61 F003          	movff	3937,??_CANreceiveMessage	;volatile
 15918  002FD4  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15919  002FD6  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15920  002FD8  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15921  002FDA  0E03               	movlw	3
 15922  002FDC                     i1u620_25:
 15923  002FDC  90D8               	bcf	status,0,c
 15924  002FDE  3603               	rlcf	??_CANreceiveMessage,f,c
 15925  002FE0  3604               	rlcf	??_CANreceiveMessage+1,f,c
 15926  002FE2  3605               	rlcf	??_CANreceiveMessage+2,f,c
 15927  002FE4  3606               	rlcf	??_CANreceiveMessage+3,f,c
 15928  002FE6  2EE8               	decfsz	wreg,f,c
 15929  002FE8  D7F9               	goto	i1u620_25
 15930  002FEA  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15931  002FEE  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15932  002FF2  C003  FFDE         	movff	??_CANreceiveMessage,postinc2
 15933  002FF6  C004  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15934  002FFA  C005  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15935  002FFE  C006  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15936                           
 15937                           ; BSR set to: 15
 15938                           ;inc\CANlib.h: 608: tamp = (RXB0SIDL >> 5 ) & 0x07;
 15939  003002  3862               	swapf	3938,w,c	;volatile
 15940  003004  42E8               	rrncf	wreg,f,c
 15941  003006  0B07               	andlw	7
 15942  003008  0B07               	andlw	7
 15943  00300A  6E0C               	movwf	CANreceiveMessage@tamp,c
 15944                           
 15945                           ; BSR set to: 15
 15946                           ;inc\CANlib.h: 609: msg->identifier = msg->identifier + tamp;
 15947  00300C  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15948  003010  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15949  003014  CFDE F003          	movff	postinc2,??_CANreceiveMessage
 15950  003018  CFDE F004          	movff	postinc2,??_CANreceiveMessage+1
 15951  00301C  CFDE F005          	movff	postinc2,??_CANreceiveMessage+2
 15952  003020  CFDE F006          	movff	postinc2,??_CANreceiveMessage+3
 15953  003024  500C               	movf	CANreceiveMessage@tamp,w,c
 15954  003026  2403               	addwf	??_CANreceiveMessage,w,c
 15955  003028  6E07               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 15956  00302A  0E00               	movlw	0
 15957  00302C  2004               	addwfc	??_CANreceiveMessage+1,w,c
 15958  00302E  6E08               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 15959  003030  0E00               	movlw	0
 15960  003032  2005               	addwfc	??_CANreceiveMessage+2,w,c
 15961  003034  6E09               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 15962  003036  0E00               	movlw	0
 15963  003038  2006               	addwfc	??_CANreceiveMessage+3,w,c
 15964  00303A  6E0A               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 15965  00303C  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15966  003040  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15967  003044  C007  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 15968  003048  C008  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 15969  00304C  C009  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 15970  003050  C00A  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 15971                           
 15972                           ;inc\CANlib.h: 610: }
 15973  003054  D08E               	goto	i1l5250
 15974  003056                     i1l5224:
 15975                           
 15976                           ; BSR set to: 15
 15977                           ;inc\CANlib.h: 611: else
 15978                           ;inc\CANlib.h: 612: {
 15979                           ;inc\CANlib.h: 613: msg->identifier = (unsigned long) RXB0EIDL;
 15980  003056  CF64 F003          	movff	3940,??_CANreceiveMessage	;volatile
 15981  00305A  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15982  00305C  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15983  00305E  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15984  003060  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 15985  003064  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 15986  003068  C003  FFDE         	movff	??_CANreceiveMessage,postinc2
 15987  00306C  C004  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 15988  003070  C005  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 15989  003074  C006  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 15990                           
 15991                           ; BSR set to: 15
 15992                           ;inc\CANlib.h: 614: msg->identifier += ((unsigned long) RXB0EIDH) << 8;
 15993  003078  CF63 F003          	movff	3939,??_CANreceiveMessage	;volatile
 15994  00307C  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 15995  00307E  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 15996  003080  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 15997  003082  C005  F006         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 15998  003086  C004  F005         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 15999  00308A  C003  F004         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 16000  00308E  6A03               	clrf	??_CANreceiveMessage,c
 16001  003090  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16002  003094  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16003  003098  5003               	movf	??_CANreceiveMessage,w,c
 16004  00309A  26DE               	addwf	postinc2,f,c
 16005  00309C  5004               	movf	??_CANreceiveMessage+1,w,c
 16006  00309E  22DE               	addwfc	postinc2,f,c
 16007  0030A0  5005               	movf	??_CANreceiveMessage+2,w,c
 16008  0030A2  22DE               	addwfc	postinc2,f,c
 16009  0030A4  5006               	movf	??_CANreceiveMessage+3,w,c
 16010  0030A6  22DE               	addwfc	postinc2,f,c
 16011                           
 16012                           ; BSR set to: 15
 16013                           ;inc\CANlib.h: 616: if (RXB0SIDLbits.EID16)
 16014  0030A8  A062               	btfss	3938,0,c	;volatile
 16015  0030AA  D00D               	goto	i1l5232
 16016                           
 16017                           ; BSR set to: 15
 16018                           ;inc\CANlib.h: 617: msg->identifier |= 0x00010000;
 16019  0030AC  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16020  0030B0  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16021  0030B4  0E00               	movlw	0
 16022  0030B6  12DE               	iorwf	postinc2,f,c
 16023  0030B8  0E00               	movlw	0
 16024  0030BA  12DE               	iorwf	postinc2,f,c
 16025  0030BC  0E01               	movlw	1
 16026  0030BE  12DE               	iorwf	postinc2,f,c
 16027  0030C0  0E00               	movlw	0
 16028  0030C2  12DE               	iorwf	postinc2,f,c
 16029  0030C4  D000               	goto	i1l5232
 16030  0030C6                     i1l5232:
 16031                           
 16032                           ; BSR set to: 15
 16033                           ;inc\CANlib.h: 618: if (RXB0SIDLbits.EID17)
 16034  0030C6  A262               	btfss	3938,1,c	;volatile
 16035  0030C8  D00D               	goto	i1l5236
 16036                           
 16037                           ; BSR set to: 15
 16038                           ;inc\CANlib.h: 619: msg->identifier |= 0x00020000;
 16039  0030CA  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16040  0030CE  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16041  0030D2  0E00               	movlw	0
 16042  0030D4  12DE               	iorwf	postinc2,f,c
 16043  0030D6  0E00               	movlw	0
 16044  0030D8  12DE               	iorwf	postinc2,f,c
 16045  0030DA  0E02               	movlw	2
 16046  0030DC  12DE               	iorwf	postinc2,f,c
 16047  0030DE  0E00               	movlw	0
 16048  0030E0  12DE               	iorwf	postinc2,f,c
 16049  0030E2  D000               	goto	i1l5236
 16050  0030E4                     i1l5236:
 16051                           
 16052                           ; BSR set to: 15
 16053                           ;inc\CANlib.h: 620: if (RXB0SIDLbits.SID0)
 16054  0030E4  AA62               	btfss	3938,5,c	;volatile
 16055  0030E6  D00D               	goto	i1l5240
 16056                           
 16057                           ; BSR set to: 15
 16058                           ;inc\CANlib.h: 621: msg->identifier |= 0x00040000;
 16059  0030E8  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16060  0030EC  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16061  0030F0  0E00               	movlw	0
 16062  0030F2  12DE               	iorwf	postinc2,f,c
 16063  0030F4  0E00               	movlw	0
 16064  0030F6  12DE               	iorwf	postinc2,f,c
 16065  0030F8  0E04               	movlw	4
 16066  0030FA  12DE               	iorwf	postinc2,f,c
 16067  0030FC  0E00               	movlw	0
 16068  0030FE  12DE               	iorwf	postinc2,f,c
 16069  003100  D000               	goto	i1l5240
 16070  003102                     i1l5240:
 16071                           
 16072                           ; BSR set to: 15
 16073                           ;inc\CANlib.h: 622: if (RXB0SIDLbits.SID1)
 16074  003102  AC62               	btfss	3938,6,c	;volatile
 16075  003104  D00D               	goto	i1l5244
 16076                           
 16077                           ; BSR set to: 15
 16078                           ;inc\CANlib.h: 623: msg->identifier |= 0x00080000;
 16079  003106  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16080  00310A  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16081  00310E  0E00               	movlw	0
 16082  003110  12DE               	iorwf	postinc2,f,c
 16083  003112  0E00               	movlw	0
 16084  003114  12DE               	iorwf	postinc2,f,c
 16085  003116  0E08               	movlw	8
 16086  003118  12DE               	iorwf	postinc2,f,c
 16087  00311A  0E00               	movlw	0
 16088  00311C  12DE               	iorwf	postinc2,f,c
 16089  00311E  D000               	goto	i1l5244
 16090  003120                     i1l5244:
 16091                           
 16092                           ; BSR set to: 15
 16093                           ;inc\CANlib.h: 624: if (RXB0SIDLbits.SID2)
 16094  003120  AE62               	btfss	3938,7,c	;volatile
 16095  003122  D00D               	goto	i1l5248
 16096                           
 16097                           ; BSR set to: 15
 16098                           ;inc\CANlib.h: 625: msg->identifier |= 0x00100000;
 16099  003124  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16100  003128  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16101  00312C  0E00               	movlw	0
 16102  00312E  12DE               	iorwf	postinc2,f,c
 16103  003130  0E00               	movlw	0
 16104  003132  12DE               	iorwf	postinc2,f,c
 16105  003134  0E10               	movlw	16
 16106  003136  12DE               	iorwf	postinc2,f,c
 16107  003138  0E00               	movlw	0
 16108  00313A  12DE               	iorwf	postinc2,f,c
 16109  00313C  D000               	goto	i1l5248
 16110  00313E                     i1l5248:
 16111                           
 16112                           ; BSR set to: 15
 16113                           ;inc\CANlib.h: 627: msg->identifier |= ((unsigned long) RXB0SIDH) << 21;
 16114  00313E  CF61 F003          	movff	3937,??_CANreceiveMessage	;volatile
 16115  003142  6A04               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16116  003144  6A05               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16117  003146  6A06               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16118  003148  0E15               	movlw	21
 16119  00314A                     i1u626_25:
 16120  00314A  90D8               	bcf	status,0,c
 16121  00314C  3603               	rlcf	??_CANreceiveMessage,f,c
 16122  00314E  3604               	rlcf	??_CANreceiveMessage+1,f,c
 16123  003150  3605               	rlcf	??_CANreceiveMessage+2,f,c
 16124  003152  3606               	rlcf	??_CANreceiveMessage+3,f,c
 16125  003154  2EE8               	decfsz	wreg,f,c
 16126  003156  D7F9               	goto	i1u626_25
 16127  003158  C001  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16128  00315C  C002  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16129  003160  5003               	movf	??_CANreceiveMessage,w,c
 16130  003162  12DE               	iorwf	postinc2,f,c
 16131  003164  5004               	movf	??_CANreceiveMessage+1,w,c
 16132  003166  12DE               	iorwf	postinc2,f,c
 16133  003168  5005               	movf	??_CANreceiveMessage+2,w,c
 16134  00316A  12DE               	iorwf	postinc2,f,c
 16135  00316C  5006               	movf	??_CANreceiveMessage+3,w,c
 16136  00316E  12DE               	iorwf	postinc2,f,c
 16137  003170  D000               	goto	i1l5250
 16138  003172                     i1l5250:
 16139                           
 16140                           ; BSR set to: 15
 16141                           ;inc\CANlib.h: 629: }
 16142                           ;inc\CANlib.h: 630: RXB0CONbits.RXFUL = 0x00;
 16143  003172  9E60               	bcf	3936,7,c	;volatile
 16144                           
 16145                           ; BSR set to: 15
 16146                           ;inc\CANlib.h: 632: return (error);
 16147                           ;	Return value of _CANreceiveMessage is never used
 16148  003174  0012               	return	
 16149                           
 16150                           ; BSR set to: 15
 16151                           
 16152                           ; BSR set to: 15
 16153  003176  0012               	return		;funcret
 16154  003178                     __end_of_CANreceiveMessage:
 16155                           	opt stack 0
 16156                           pclatu	equ	0xFFB
 16157                           pclath	equ	0xFFA
 16158                           tblptru	equ	0xFF8
 16159                           tblptrh	equ	0xFF7
 16160                           tblptrl	equ	0xFF6
 16161                           tablat	equ	0xFF5
 16162                           prodh	equ	0xFF4
 16163                           prodl	equ	0xFF3
 16164                           intcon	equ	0xFF2
 16165                           intcon2	equ	0xFF1
 16166                           postinc0	equ	0xFEE
 16167                           fsr0h	equ	0xFEA
 16168                           fsr0l	equ	0xFE9
 16169                           wreg	equ	0xFE8
 16170                           indf1	equ	0xFE7
 16171                           postdec1	equ	0xFE5
 16172                           fsr1h	equ	0xFE2
 16173                           fsr1l	equ	0xFE1
 16174                           bsr	equ	0xFE0
 16175                           indf2	equ	0xFDF
 16176                           postinc2	equ	0xFDE
 16177                           postdec2	equ	0xFDD
 16178                           plusw2	equ	0xFDB
 16179                           fsr2h	equ	0xFDA
 16180                           fsr2l	equ	0xFD9
 16181                           status	equ	0xFD8
 16182                           
 16183 ;; *************** function _CANisRxReady *****************
 16184 ;; Defined at:
 16185 ;;		line 1163 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 16186 ;; Parameters:    Size  Location     Type
 16187 ;;		None
 16188 ;; Auto vars:     Size  Location     Type
 16189 ;;		None
 16190 ;; Return value:  Size  Location     Type
 16191 ;;                  1    wreg      unsigned char 
 16192 ;; Registers used:
 16193 ;;		wreg, status,2
 16194 ;; Tracked objects:
 16195 ;;		On entry : 0/0
 16196 ;;		On exit  : 0/0
 16197 ;;		Unchanged: 0/0
 16198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16200 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16202 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16203 ;;Total ram usage:        1 bytes
 16204 ;; Hardware stack levels used:    1
 16205 ;; Hardware stack levels required when called:    2
 16206 ;; This function calls:
 16207 ;;		Nothing
 16208 ;; This function is called by:
 16209 ;;		_ISR_Bassa
 16210 ;; This function uses a non-reentrant model
 16211 ;;
 16212                           
 16213                           	psect	text42
 16214  005E6C                     __ptext42:
 16215                           	opt stack 0
 16216  005E6C                     _CANisRxReady:
 16217                           	opt stack 20
 16218                           
 16219                           ;inc\CANlib.h: 1165: return (RXB0CONbits.RXFUL || RXB1CONbits.RXFUL);
 16220                           
 16221                           ; BSR set to: 15
 16222                           ;incstack = 0
 16223  005E6C  0E01               	movlw	1
 16224  005E6E  6E01               	movwf	_CANisRxReady$2843,c
 16225  005E70  BE60               	btfsc	3936,7,c	;volatile
 16226  005E72  D005               	goto	i1l559
 16227  005E74  010F               	movlb	15	; () banked
 16228  005E76  BF50               	btfsc	80,7,b	;volatile
 16229  005E78  D002               	goto	i1l559
 16230                           
 16231                           ; BSR set to: 15
 16232  005E7A  0E00               	movlw	0
 16233  005E7C  6E01               	movwf	_CANisRxReady$2843,c
 16234  005E7E                     i1l559:
 16235  005E7E  5001               	movf	_CANisRxReady$2843,w,c
 16236  005E80  0012               	return	
 16237  005E82  0012               	return		;funcret
 16238  005E84                     __end_of_CANisRxReady:
 16239                           	opt stack 0
 16240                           pclatu	equ	0xFFB
 16241                           pclath	equ	0xFFA
 16242                           tblptru	equ	0xFF8
 16243                           tblptrh	equ	0xFF7
 16244                           tblptrl	equ	0xFF6
 16245                           tablat	equ	0xFF5
 16246                           prodh	equ	0xFF4
 16247                           prodl	equ	0xFF3
 16248                           intcon	equ	0xFF2
 16249                           intcon2	equ	0xFF1
 16250                           postinc0	equ	0xFEE
 16251                           fsr0h	equ	0xFEA
 16252                           fsr0l	equ	0xFE9
 16253                           wreg	equ	0xFE8
 16254                           indf1	equ	0xFE7
 16255                           postdec1	equ	0xFE5
 16256                           fsr1h	equ	0xFE2
 16257                           fsr1l	equ	0xFE1
 16258                           bsr	equ	0xFE0
 16259                           indf2	equ	0xFDF
 16260                           postinc2	equ	0xFDE
 16261                           postdec2	equ	0xFDD
 16262                           plusw2	equ	0xFDB
 16263                           fsr2h	equ	0xFDA
 16264                           fsr2l	equ	0xFD9
 16265                           status	equ	0xFD8
 16266                           
 16267 ;; *************** function _ISR_Alta *****************
 16268 ;; Defined at:
 16269 ;;		line 107 in file "parcheggio.c"
 16270 ;; Parameters:    Size  Location     Type
 16271 ;;		None
 16272 ;; Auto vars:     Size  Location     Type
 16273 ;;		None
 16274 ;; Return value:  Size  Location     Type
 16275 ;;		None               void
 16276 ;; Registers used:
 16277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16278 ;; Tracked objects:
 16279 ;;		On entry : 0/0
 16280 ;;		On exit  : 0/0
 16281 ;;		Unchanged: 0/0
 16282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16285 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16286 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16287 ;;Total ram usage:       16 bytes
 16288 ;; Hardware stack levels used:    1
 16289 ;; Hardware stack levels required when called:    1
 16290 ;; This function calls:
 16291 ;;		___lwdiv
 16292 ;; This function is called by:
 16293 ;;		Interrupt level 2
 16294 ;; This function uses a non-reentrant model
 16295 ;;
 16296                           
 16297                           	psect	intcode
 16298  000008                     __pintcode:
 16299                           	opt stack 0
 16300  000008                     _ISR_Alta:
 16301                           	opt stack 19
 16302                           
 16303                           ;incstack = 0
 16304  000008  CFFA F069          	movff	pclath,??_ISR_Alta+2
 16305  00000C  CFFB F06A          	movff	pclatu,??_ISR_Alta+3
 16306  000010  CFE9 F06B          	movff	fsr0l,??_ISR_Alta+4
 16307  000014  EF3E  F02C         	goto	int_func
 16308                           pclatu	equ	0xFFB
 16309                           pclath	equ	0xFFA
 16310                           tblptru	equ	0xFF8
 16311                           tblptrh	equ	0xFF7
 16312                           tblptrl	equ	0xFF6
 16313                           tablat	equ	0xFF5
 16314                           prodh	equ	0xFF4
 16315                           prodl	equ	0xFF3
 16316                           intcon	equ	0xFF2
 16317                           intcon2	equ	0xFF1
 16318                           postinc0	equ	0xFEE
 16319                           fsr0h	equ	0xFEA
 16320                           fsr0l	equ	0xFE9
 16321                           wreg	equ	0xFE8
 16322                           indf1	equ	0xFE7
 16323                           postdec1	equ	0xFE5
 16324                           fsr1h	equ	0xFE2
 16325                           fsr1l	equ	0xFE1
 16326                           bsr	equ	0xFE0
 16327                           indf2	equ	0xFDF
 16328                           postinc2	equ	0xFDE
 16329                           postdec2	equ	0xFDD
 16330                           plusw2	equ	0xFDB
 16331                           fsr2h	equ	0xFDA
 16332                           fsr2l	equ	0xFD9
 16333                           status	equ	0xFD8
 16334                           
 16335                           	psect	intcode_body
 16336  00587C                     __pintcode_body:
 16337                           	opt stack 19
 16338  00587C                     int_func:
 16339                           	opt stack 19
 16340  00587C  CFEA F06C          	movff	fsr0h,??_ISR_Alta+5
 16341  005880  CFE1 F06D          	movff	fsr1l,??_ISR_Alta+6
 16342  005884  CFE2 F06E          	movff	fsr1h,??_ISR_Alta+7
 16343  005888  CFD9 F06F          	movff	fsr2l,??_ISR_Alta+8
 16344  00588C  CFDA F070          	movff	fsr2h,??_ISR_Alta+9
 16345  005890  CFF3 F071          	movff	prodl,??_ISR_Alta+10
 16346  005894  CFF4 F072          	movff	prodh,??_ISR_Alta+11
 16347  005898  CFF6 F073          	movff	tblptrl,??_ISR_Alta+12
 16348  00589C  CFF7 F074          	movff	tblptrh,??_ISR_Alta+13
 16349  0058A0  CFF8 F075          	movff	tblptru,??_ISR_Alta+14
 16350  0058A4  CFF5 F076          	movff	tablat,??_ISR_Alta+15
 16351                           
 16352                           ;parcheggio.c: 108: if (INTCON2bits.INTEDG0 == 1) {
 16353  0058A8  ACF1               	btfss	intcon2,6,c	;volatile
 16354  0058AA  D007               	goto	i2l698
 16355                           
 16356                           ;parcheggio.c: 109: INTCON2bits.INTEDG0 = 0;
 16357  0058AC  9CF1               	bcf	intcon2,6,c	;volatile
 16358                           
 16359                           ;parcheggio.c: 110: TMR3H = 0;
 16360  0058AE  0E00               	movlw	0
 16361  0058B0  6EB3               	movwf	4019,c	;volatile
 16362                           
 16363                           ;parcheggio.c: 111: TMR3L = 0;
 16364  0058B2  0E00               	movlw	0
 16365  0058B4  6EB2               	movwf	4018,c	;volatile
 16366                           
 16367                           ;parcheggio.c: 112: distance_error = 0;
 16368  0058B6  9A51               	bcf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 16369                           
 16370                           ;parcheggio.c: 113: } else {
 16371  0058B8  D031               	goto	i2l6816
 16372  0058BA                     i2l698:
 16373                           
 16374                           ;parcheggio.c: 114: TMR3H_temp = TMR3H;
 16375  0058BA  CFB3 F04D          	movff	4019,_TMR3H_temp	;volatile
 16376                           
 16377                           ;parcheggio.c: 115: TMR3L_temp = TMR3L;
 16378  0058BE  CFB2 F04E          	movff	4018,_TMR3L_temp	;volatile
 16379                           
 16380                           ;parcheggio.c: 116: timerValue2 = TMR3H_temp;
 16381  0058C2  C04D  F04A         	movff	_TMR3H_temp,_timerValue2	;volatile
 16382  0058C6  6A4B               	clrf	_timerValue2+1,c	;volatile
 16383                           
 16384                           ;parcheggio.c: 117: timerValue2 = ((timerValue2 << 8) | (TMR3L_temp));
 16385  0058C8  504A               	movf	_timerValue2,w,c	;volatile
 16386  0058CA  0100               	movlb	0	; () banked
 16387  0058CC  6F67               	movwf	??_ISR_Alta& (0+255),b
 16388  0058CE  504E               	movf	_TMR3L_temp,w,c	;volatile
 16389  0058D0  6E4A               	movwf	_timerValue2,c	;volatile
 16390  0058D2  C067  F04B         	movff	??_ISR_Alta,_timerValue2+1	;volatile
 16391                           
 16392                           ; BSR set to: 0
 16393                           ;parcheggio.c: 118: pulse_time = timerValue2 / 2;
 16394  0058D6  90D8               	bcf	status,0,c
 16395  0058D8  304B               	rrcf	_timerValue2+1,w,c	;volatile
 16396  0058DA  0100               	movlb	0	; () banked
 16397  0058DC  6F67               	movwf	??_ISR_Alta& (0+255),b
 16398  0058DE  304A               	rrcf	_timerValue2,w,c	;volatile
 16399  0058E0  6E48               	movwf	_pulse_time,c	;volatile
 16400  0058E2  C067  F049         	movff	??_ISR_Alta,_pulse_time+1	;volatile
 16401                           
 16402                           ; BSR set to: 0
 16403                           ;parcheggio.c: 119: sensor_distance[MUX_index] = pulse_time / 58;
 16404  0058E6  C048  F060         	movff	_pulse_time,___lwdiv@dividend	;volatile
 16405  0058EA  C049  F061         	movff	_pulse_time+1,___lwdiv@dividend+1	;volatile
 16406  0058EE  0E00               	movlw	0
 16407  0058F0  0100               	movlb	0	; () banked
 16408  0058F2  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 16409  0058F4  0E3A               	movlw	58
 16410  0058F6  6F62               	movwf	___lwdiv@divisor& (0+255),b
 16411  0058F8  ECF6  F02C         	call	___lwdiv	;wreg free
 16412  0058FC  504C               	movf	_MUX_index,w,c	;volatile
 16413  0058FE  0D02               	mullw	2
 16414  005900  0E2A               	movlw	low _sensor_distance
 16415  005902  24F3               	addwf	prodl,w,c
 16416  005904  6ED9               	movwf	fsr2l,c
 16417  005906  0E00               	movlw	high _sensor_distance
 16418  005908  20F4               	addwfc	prodh,w,c
 16419  00590A  6EDA               	movwf	fsr2h,c
 16420  00590C  0100               	movlb	0	; () banked
 16421  00590E  C060  FFDE         	movff	?___lwdiv,postinc2
 16422  005912  0100               	movlb	0	; () banked
 16423  005914  C061  FFDD         	movff	?___lwdiv+1,postdec2
 16424                           
 16425                           ; BSR set to: 0
 16426                           ;parcheggio.c: 120: INTCON2bits.INTEDG0 = 1;
 16427  005918  8CF1               	bsf	intcon2,6,c	;volatile
 16428  00591A  D000               	goto	i2l6816
 16429  00591C                     i2l6816:
 16430                           
 16431                           ;parcheggio.c: 121: }
 16432                           ;parcheggio.c: 122: INTCONbits.INT0IF = 0;
 16433  00591C  92F2               	bcf	intcon,1,c	;volatile
 16434  00591E  C076  FFF5         	movff	??_ISR_Alta+15,tablat
 16435  005922  C075  FFF8         	movff	??_ISR_Alta+14,tblptru
 16436  005926  C074  FFF7         	movff	??_ISR_Alta+13,tblptrh
 16437  00592A  C073  FFF6         	movff	??_ISR_Alta+12,tblptrl
 16438  00592E  C072  FFF4         	movff	??_ISR_Alta+11,prodh
 16439  005932  C071  FFF3         	movff	??_ISR_Alta+10,prodl
 16440  005936  C070  FFDA         	movff	??_ISR_Alta+9,fsr2h
 16441  00593A  C06F  FFD9         	movff	??_ISR_Alta+8,fsr2l
 16442  00593E  C06E  FFE2         	movff	??_ISR_Alta+7,fsr1h
 16443  005942  C06D  FFE1         	movff	??_ISR_Alta+6,fsr1l
 16444  005946  C06C  FFEA         	movff	??_ISR_Alta+5,fsr0h
 16445  00594A  C06B  FFE9         	movff	??_ISR_Alta+4,fsr0l
 16446  00594E  C06A  FFFB         	movff	??_ISR_Alta+3,pclatu
 16447  005952  C069  FFFA         	movff	??_ISR_Alta+2,pclath
 16448  005956  0011               	retfie		f
 16449  005958                     __end_of_ISR_Alta:
 16450                           	opt stack 0
 16451                           pclatu	equ	0xFFB
 16452                           pclath	equ	0xFFA
 16453                           tblptru	equ	0xFF8
 16454                           tblptrh	equ	0xFF7
 16455                           tblptrl	equ	0xFF6
 16456                           tablat	equ	0xFF5
 16457                           prodh	equ	0xFF4
 16458                           prodl	equ	0xFF3
 16459                           intcon	equ	0xFF2
 16460                           intcon2	equ	0xFF1
 16461                           postinc0	equ	0xFEE
 16462                           fsr0h	equ	0xFEA
 16463                           fsr0l	equ	0xFE9
 16464                           wreg	equ	0xFE8
 16465                           indf1	equ	0xFE7
 16466                           postdec1	equ	0xFE5
 16467                           fsr1h	equ	0xFE2
 16468                           fsr1l	equ	0xFE1
 16469                           bsr	equ	0xFE0
 16470                           indf2	equ	0xFDF
 16471                           postinc2	equ	0xFDE
 16472                           postdec2	equ	0xFDD
 16473                           plusw2	equ	0xFDB
 16474                           fsr2h	equ	0xFDA
 16475                           fsr2l	equ	0xFD9
 16476                           status	equ	0xFD8
 16477                           
 16478 ;; *************** function ___lwdiv *****************
 16479 ;; Defined at:
 16480 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 16481 ;; Parameters:    Size  Location     Type
 16482 ;;  dividend        2    0[BANK0 ] unsigned int 
 16483 ;;  divisor         2    2[BANK0 ] unsigned int 
 16484 ;; Auto vars:     Size  Location     Type
 16485 ;;  quotient        2    5[BANK0 ] unsigned int 
 16486 ;;  counter         1    4[BANK0 ] unsigned char 
 16487 ;; Return value:  Size  Location     Type
 16488 ;;                  2    0[BANK0 ] unsigned int 
 16489 ;; Registers used:
 16490 ;;		wreg, status,2, status,0
 16491 ;; Tracked objects:
 16492 ;;		On entry : 0/0
 16493 ;;		On exit  : 0/0
 16494 ;;		Unchanged: 0/0
 16495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16496 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16497 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16499 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;Total ram usage:        7 bytes
 16501 ;; Hardware stack levels used:    1
 16502 ;; This function calls:
 16503 ;;		Nothing
 16504 ;; This function is called by:
 16505 ;;		_ISR_Alta
 16506 ;; This function uses a non-reentrant model
 16507 ;;
 16508                           
 16509                           	psect	text44
 16510  0059EC                     __ptext44:
 16511                           	opt stack 0
 16512  0059EC                     ___lwdiv:
 16513                           	opt stack 19
 16514                           
 16515                           ;incstack = 0
 16516  0059EC  0E00               	movlw	0
 16517  0059EE  0100               	movlb	0	; () banked
 16518  0059F0  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16519  0059F2  0E00               	movlw	0
 16520  0059F4  6F65               	movwf	___lwdiv@quotient& (0+255),b
 16521                           
 16522                           ; BSR set to: 0
 16523  0059F6  0100               	movlb	0	; () banked
 16524  0059F8  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16525  0059FA  0100               	movlb	0	; () banked
 16526  0059FC  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16527  0059FE  B4D8               	btfsc	status,2,c
 16528  005A00  D031               	goto	i2l1430
 16529                           
 16530                           ; BSR set to: 0
 16531  005A02  0E01               	movlw	1
 16532  005A04  0100               	movlb	0	; () banked
 16533  005A06  6F64               	movwf	___lwdiv@counter& (0+255),b
 16534  005A08  D007               	goto	i2l6786
 16535  005A0A                     i2l6784:
 16536                           
 16537                           ; BSR set to: 0
 16538  005A0A  0100               	movlb	0	; () banked
 16539  005A0C  90D8               	bcf	status,0,c
 16540  005A0E  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 16541  005A10  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16542  005A12  0100               	movlb	0	; () banked
 16543  005A14  2B64               	incf	___lwdiv@counter& (0+255),f,b
 16544  005A16  D000               	goto	i2l6786
 16545  005A18                     i2l6786:
 16546                           
 16547                           ; BSR set to: 0
 16548  005A18  0100               	movlb	0	; () banked
 16549  005A1A  BF63               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
 16550  005A1C  D002               	goto	i2l6788
 16551  005A1E  D7F5               	goto	i2l6784
 16552                           
 16553                           ; BSR set to: 0
 16554  005A20  D000               	goto	i2l6788
 16555  005A22                     i2l6788:
 16556                           
 16557                           ; BSR set to: 0
 16558  005A22  0100               	movlb	0	; () banked
 16559  005A24  90D8               	bcf	status,0,c
 16560  005A26  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 16561  005A28  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16562                           
 16563                           ; BSR set to: 0
 16564  005A2A  0100               	movlb	0	; () banked
 16565  005A2C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16566  005A2E  0100               	movlb	0	; () banked
 16567  005A30  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 16568  005A32  0100               	movlb	0	; () banked
 16569  005A34  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16570  005A36  0100               	movlb	0	; () banked
 16571  005A38  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16572  005A3A  A0D8               	btfss	status,0,c
 16573  005A3C  D00B               	goto	i2l6796
 16574                           
 16575                           ; BSR set to: 0
 16576  005A3E  0100               	movlb	0	; () banked
 16577  005A40  5162               	movf	___lwdiv@divisor& (0+255),w,b
 16578  005A42  0100               	movlb	0	; () banked
 16579  005A44  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 16580  005A46  0100               	movlb	0	; () banked
 16581  005A48  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16582  005A4A  0100               	movlb	0	; () banked
 16583  005A4C  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16584                           
 16585                           ; BSR set to: 0
 16586  005A4E  0100               	movlb	0	; () banked
 16587  005A50  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 16588  005A52  D000               	goto	i2l6796
 16589  005A54                     i2l6796:
 16590                           
 16591                           ; BSR set to: 0
 16592  005A54  0100               	movlb	0	; () banked
 16593  005A56  90D8               	bcf	status,0,c
 16594  005A58  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16595  005A5A  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 16596                           
 16597                           ; BSR set to: 0
 16598  005A5C  0100               	movlb	0	; () banked
 16599  005A5E  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 16600  005A60  D7E0               	goto	i2l6788
 16601  005A62  D000               	goto	i2l1430
 16602  005A64                     i2l1430:
 16603                           
 16604                           ; BSR set to: 0
 16605  005A64  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 16606  005A68  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16607                           
 16608                           ; BSR set to: 0
 16609  005A6C  0012               	return		;funcret
 16610  005A6E                     __end_of___lwdiv:
 16611                           	opt stack 0
 16612                           pclatu	equ	0xFFB
 16613                           pclath	equ	0xFFA
 16614                           tblptru	equ	0xFF8
 16615                           tblptrh	equ	0xFF7
 16616                           tblptrl	equ	0xFF6
 16617                           tablat	equ	0xFF5
 16618                           prodh	equ	0xFF4
 16619                           prodl	equ	0xFF3
 16620                           intcon	equ	0xFF2
 16621                           intcon2	equ	0xFF1
 16622                           postinc0	equ	0xFEE
 16623                           fsr0h	equ	0xFEA
 16624                           fsr0l	equ	0xFE9
 16625                           wreg	equ	0xFE8
 16626                           indf1	equ	0xFE7
 16627                           postdec1	equ	0xFE5
 16628                           fsr1h	equ	0xFE2
 16629                           fsr1l	equ	0xFE1
 16630                           bsr	equ	0xFE0
 16631                           indf2	equ	0xFDF
 16632                           postinc2	equ	0xFDE
 16633                           postdec2	equ	0xFDD
 16634                           plusw2	equ	0xFDB
 16635                           fsr2h	equ	0xFDA
 16636                           fsr2l	equ	0xFD9
 16637                           status	equ	0xFD8
 16638                           pclatu	equ	0xFFB
 16639                           pclath	equ	0xFFA
 16640                           tblptru	equ	0xFF8
 16641                           tblptrh	equ	0xFF7
 16642                           tblptrl	equ	0xFF6
 16643                           tablat	equ	0xFF5
 16644                           prodh	equ	0xFF4
 16645                           prodl	equ	0xFF3
 16646                           intcon	equ	0xFF2
 16647                           intcon2	equ	0xFF1
 16648                           postinc0	equ	0xFEE
 16649                           fsr0h	equ	0xFEA
 16650                           fsr0l	equ	0xFE9
 16651                           wreg	equ	0xFE8
 16652                           indf1	equ	0xFE7
 16653                           postdec1	equ	0xFE5
 16654                           fsr1h	equ	0xFE2
 16655                           fsr1l	equ	0xFE1
 16656                           bsr	equ	0xFE0
 16657                           indf2	equ	0xFDF
 16658                           postinc2	equ	0xFDE
 16659                           postdec2	equ	0xFDD
 16660                           plusw2	equ	0xFDB
 16661                           fsr2h	equ	0xFDA
 16662                           fsr2l	equ	0xFD9
 16663                           status	equ	0xFD8
 16664                           
 16665                           	psect	param0
 16666  0000                     pclatu	equ	0xFFB
 16667                           pclath	equ	0xFFA
 16668                           tblptru	equ	0xFF8
 16669                           tblptrh	equ	0xFF7
 16670                           tblptrl	equ	0xFF6
 16671                           tablat	equ	0xFF5
 16672                           prodh	equ	0xFF4
 16673                           prodl	equ	0xFF3
 16674                           intcon	equ	0xFF2
 16675                           intcon2	equ	0xFF1
 16676                           postinc0	equ	0xFEE
 16677                           fsr0h	equ	0xFEA
 16678                           fsr0l	equ	0xFE9
 16679                           wreg	equ	0xFE8
 16680                           indf1	equ	0xFE7
 16681                           postdec1	equ	0xFE5
 16682                           fsr1h	equ	0xFE2
 16683                           fsr1l	equ	0xFE1
 16684                           bsr	equ	0xFE0
 16685                           indf2	equ	0xFDF
 16686                           postinc2	equ	0xFDE
 16687                           postdec2	equ	0xFDD
 16688                           plusw2	equ	0xFDB
 16689                           fsr2h	equ	0xFDA
 16690                           fsr2l	equ	0xFD9
 16691                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    80
    Data        11
    BSS         196
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     41      84
    BANK0           160    119     136
    BANK1           256    101     250
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 24
		 -> sin@coeff_a(CODE[20]), sin@coeff_b(CODE[16]), atan@coeff_a(CODE[24]), atan@coeff_b(CODE[20]), 

    CANreceiveMessage@msg	PTR struct . size(2) Largest target is 15
		 -> msg(BANK1[15]), 

    CANsendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data_speed(BANK1[8]), data_brake(BANK1[8]), data_steering(BANK1[8]), data_correction(BANK1[8]), 
		 -> data_test(BANK1[8]), data(BANK1[8]), sensor_distance_short(BANK1[8]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Alta in COMRAM

    None.

Critical Paths under _ISR_Bassa in COMRAM

    _ISR_Bassa->i1_CANsendMessage
    i1_delay_ms->i1___wmul

Critical Paths under _main in BANK0

    _park_search->_parallelo
    _park_routine->_parallelo
    _parallelo->_sqrt
    _can_send->_CANsendMessage
    ___awtofl->___flpack
    _cos->_sin
    _sin->___flsub
    _floor->___flge
    ___fltol->___flneg
    ___altofl->___fltol
    _asin->_sqrt
    _sqrt->___flsub
    ___flsub->_floor
    _atan->___flge
    _fabs->___flneg
    ___flneg->___fladd
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___flge->_fabs
    ___fldiv->___flpack
    _delay_s->_delay_ms
    _delay_ms->___wmul
    ___lwtofl->___flpack
    _configurations->_CANInitialize
    _CANInitialize->_CANSetFilter
    _CANInitialize->_CANSetMask

Critical Paths under _ISR_Alta in BANK0

    _ISR_Alta->___lwdiv

Critical Paths under _ISR_Bassa in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_park_routine
    _park_routine->_matematica
    _parallelo->_asin
    _matematica->_cos
    _cos->_asin
    _asin->_sqrt

Critical Paths under _ISR_Alta in BANK1

    None.

Critical Paths under _ISR_Bassa in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Alta in BANK2

    None.

Critical Paths under _ISR_Bassa in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Alta in BANK3

    None.

Critical Paths under _ISR_Bassa in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Alta in BANK4

    None.

Critical Paths under _ISR_Bassa in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Alta in BANK5

    None.

Critical Paths under _ISR_Bassa in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Alta in BANK6

    None.

Critical Paths under _ISR_Bassa in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Alta in BANK7

    None.

Critical Paths under _ISR_Bassa in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Alta in BANK8

    None.

Critical Paths under _ISR_Bassa in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Alta in BANK9

    None.

Critical Paths under _ISR_Bassa in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Alta in BANK10

    None.

Critical Paths under _ISR_Bassa in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Alta in BANK11

    None.

Critical Paths under _ISR_Bassa in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Alta in BANK12

    None.

Critical Paths under _ISR_Bassa in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  489586
                                             97 BANK1      4     4      0
                       _CANisTxReady
                     _CANsendMessage
                     _configurations
                           _delay_ms
                       _park_routine
                        _park_search
 ---------------------------------------------------------------------------------
 (1) _park_search                                          2     2      0  142469
                                             49 BANK1      2     2      0
                       _CANisTxReady
                     _CANsendMessage
                           ___awtofl
                                _abs
                          _parallelo
 ---------------------------------------------------------------------------------
 (1) _park_routine                                        12    12      0  334103
                                             85 BANK1     12    12      0
                       _CANisTxReady
                     _CANsendMessage
                            ___fladd
                            ___flneg
                            ___fltol
                           ___lwtofl
                           _can_send
                           _delay_ms
                            _delay_s
                         _matematica
                          _parallelo
 ---------------------------------------------------------------------------------
 (2) _parallelo                                            2     2      0  132993
                                            117 BANK0      2     2      0
                           ___awtofl
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___fltol
                                _abs
                               _asin
                           _can_send
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _can_send                                             0     0      0    6411
                       _CANisTxReady
                     _CANsendMessage
 ---------------------------------------------------------------------------------
 (4) _CANsendMessage                                      16     8      8    6387
                                             23 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (4) _CANisTxReady                                         1     1      0      24
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     194
                                             23 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    2871
                                             33 BANK0      5     1      4
                           ___flpack
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (2) _matematica                                          32    32      0  174968
                                             57 BANK1     28    28      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                               _asin
                                _cos
 ---------------------------------------------------------------------------------
 (3) _cos                                                 12     8      4   69437
                                             49 BANK1      8     4      4
                            ___fladd
                             ___flge
                               _asin (ARG)
                                _sin
 ---------------------------------------------------------------------------------
 (4) _sin                                                 17    13      4   60313
                                            113 BANK0      4     0      4
                                              0 BANK1     13    13      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   13154
                                             95 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                8     2      6     452
                                             23 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     722
                                             79 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2794
                                             89 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (3) _asin                                                40    36      4   83814
                                             21 BANK1     28    24      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                               _atan
                               _fabs
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _sqrt                                                25    21      4   17317
                                            113 BANK0      4     0      4
                                              0 BANK1     21    21      0
                             ___flge
                            ___flmul
                            ___flneg (ARG)
                            ___flsub
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    7829
                                            105 BANK0      8     0      8
                            ___fladd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (4) _atan                                                21    17      4   40827
                                             95 BANK0     21    17      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (4) _fabs                                                 4     0      4    1621
                                             79 BANK0      4     0      4
                            ___flneg
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4    1297
                                             75 BANK0      4     0      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   15525
                                             75 BANK0     16     8      8
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             15     7      8    7190
                                             48 BANK0     15     7      8
                            ___fldiv (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             12     4      8    7157
                                             63 BANK0     12     4      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8    1584
                                             83 BANK0     12     4      8
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             15     7      8    5733
                                             33 BANK0     15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0     715
                                             31 BANK0      2     2      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2     669
                                             29 BANK0      2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     289
                                             23 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2692
                                             33 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (6) ___flpack                                            10     4      6    2584
                                             23 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (1) _configurations                                       0     0      0    5934
                      _CANInitialize
 ---------------------------------------------------------------------------------
 (2) _CANInitialize                                       12     7      5    5934
                                             37 BANK0     12     7      5
                   _CANOperationMode
                       _CANSetFilter
                         _CANSetMask
 ---------------------------------------------------------------------------------
 (3) _CANSetMask                                          14     9      5    1286
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANSetFilter                                        14     9      5    3858
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANOperationMode                                     1     1      0      44
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR_Bassa                                           25    25      0    3799
                                             16 COMRAM    25    25      0
                       _CANisRxReady
                  _CANreceiveMessage
                   i1_CANsendMessage
                         i1_delay_ms
 ---------------------------------------------------------------------------------
 (9) i1_delay_ms                                           2     0      2     257
                                              6 COMRAM     2     0      2
                           i1___wmul
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) i1_CANsendMessage                                    16     8      8    2243
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (9) _CANreceiveMessage                                   12    10      2    1137
                                              0 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (9) _CANisRxReady                                         1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Alta                                           16    16      0     395
                                              7 BANK0     16    16      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (12) ___lwdiv                                             7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CANisTxReady
   _CANsendMessage
   _configurations
     _CANInitialize
       _CANOperationMode
       _CANSetFilter
       _CANSetMask
   _delay_ms
     ___wmul
   _park_routine
     _CANisTxReady
     _CANsendMessage
     ___fladd
       ___fldiv (ARG)
         ___flpack
       ___flmul (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___flpack (ARG)
     ___flneg
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flmul (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___flneg (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
     ___lwtofl
       ___flpack
     _can_send
       _CANisTxReady
       _CANsendMessage
     _delay_ms
       ___wmul
     _delay_s
       _delay_ms
         ___wmul
     _matematica
       ___fladd
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv
         ___flpack
       ___flmul
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___flneg
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv
           ___flpack
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
       _cos
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _asin (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _atan
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv
               ___flpack
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___flmul
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
             _eval_poly
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
             _fabs
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
           _sqrt
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___flmul
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flneg (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
             ___flsub (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               _floor (ARG)
                 ___altofl
                   ___flpack
                   ___fltol (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___flneg (ARG)
                       ___fladd (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                         ___flpack (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                 ___fladd
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flge
                   _fabs (ARG)
                     ___flneg
                       ___fladd (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                         ___flpack (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                 _frexp
         _sin (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
             _frexp
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv
         ___flpack
       ___flge
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
       ___flmul
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv
           ___flpack
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
             _frexp
   _park_search
     _CANisTxReady
     _CANsendMessage
     ___awtofl
       ___flpack
       _abs (ARG)
     _abs
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flpack
         ___flmul (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flpack (ARG)
       ___fldiv
         ___flpack
       ___flge
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
       ___flmul
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flpack (ARG)
         ___fldiv
           ___flpack
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv
             ___flpack
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
         _sqrt
           ___flge
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
           ___flmul
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flpack (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
         ___flmul
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flmul (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flpack
             ___flmul (ARG)
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flpack (ARG)
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flpack (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flpack (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flpack (ARG)
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flpack (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
             _frexp

 _ISR_Bassa (ROOT)
   _CANisRxReady
   _CANreceiveMessage
   i1_CANsendMessage
   i1_delay_ms
     i1___wmul

 _ISR_Alta (ROOT)
   ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     65      FA       7       97.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     77      88       5       85.0%
BITCOMRAM           5F      0       2       0        2.1%
COMRAM              5F     29      54       1       88.4%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D6      20        0.0%
DATA                 0      0     1D6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Jun 06 15:34:44 2016

               ___altofl@sign 00BD                             _n 0130                             _x 00DB  
                           _z 00DF                  ___fldiv@cntr 008D          __end_of_CANSetFilter 187C  
                ___fldiv@sign 008F            delay_s@repeat_loop 0080                            bsr 000FE0  
         ___wmul@multiplicand 0079                   __CFG_BORV$3 000000              i1___wmul@product 0005  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000                  ___flpack@arg 0077  
                ___flpack@exp 007B                    _MUX_select 003A                           l400 1F64  
                         l401 1F68                           l402 1F74                           l500 15DC  
                         l501 15E0                           l510 16F0                           l502 15EC  
                         l430 3852                           l511 16FC                           l431 3856  
                         l520 180C                           l512 1700                           l432 3862  
                         l521 1810                           l513 170C                           l505 16CC  
                         l441 396E                           l433 3866                           l361 1B06  
                         l522 181C                           l506 16D0                           l442 3972  
                         l434 3872                           l362 1892                           l523 1820  
                         l507 16DC                           l443 397E                           l435 3876  
                         l371 1A50                           l363 1896                           l524 182C  
                         l516 17EC                           l508 16E0                           l444 3982  
                         l436 3882                           l356 4A48                           l380 1BA8  
                         l372 1A54                           l364 1990                           l517 17F0  
                         l509 16EC                           l461 124E                           l445 398E  
                         l437 3886                           l357 4A52                           l381 1BB2  
                         l373 1A60                           l365 191E                           l518 17FC  
                         l462 1252                           l446 3992                           l438 3892  
                         l382 1BBC                           l366 1928                           l519 1800  
                         l463 125E                           l447 399E                           l391 1DA6  
                         l383 1BC6                           l367 1932                           l480 13AC  
                         l472 136C                           l464 1262                           l448 39A2  
                         l392 1DAA                           l376 1D90                           l368 193C  
                         l473 1370                           l465 126E                           l449 39AE  
                         l393 1EA4                           l377 1B1C                           l490 14C0  
                         l474 137C                           l466 1272                           l554 5E4C  
                         l394 1E32                           l386 1CDA                           l378 1B20  
                         l802 34C4                           l491 14CC                           l483 148C  
                         l475 1380                           l467 127E                           l395 1E3C  
                         l387 1CDE                           l379 1C1A                           l484 1490  
                         l476 138C                           l468 1282                           l396 1E46  
                         l388 1CEA                           l485 149C                           l477 1390  
                         l469 128E                           l397 1E50                           l494 15AC  
                         l486 14A0                           l478 139C                           l495 15B0  
                         l487 14AC                           l479 13A0                           l567 5CFC  
                         l496 15BC                           l488 14B0                           l808 355C  
                         l760 4D08                           l497 15C0                           l489 14BC  
                         l905 5DFC                           l498 15CC                           l499 15D0  
                         l747 4D0E                           l780 31EE                           l749 4BBE  
                         l847 44D6                           l783 322C                           l793 33E4  
                         l789 325E                  __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000  
                  _MUX_toggle 0288                    i1_delay_ms 5D42                           _abs 5DDA  
                         _asd 028A                           _dir 028C                           _cos 5796  
                         _msg 0146                           _sin 3D22                           prod 000FF3  
                         wreg 000FE8               ?_configurations 0001                  ___flmul@cntr 009D  
                ___flmul@sign 009E                  __CFG_LVP$OFF 000000                 ___flpack@sign 007C  
                ___fltol@exp1 00B8                  __CFG_WDT$OFF 000000                          l1031 45C6  
                        ?_abs 0077                          l1135 4E22                          l1136 4E3A  
                        l1128 4DC0                          l1160 40BC                          l1162 40EA  
                        l1171 41D6                          l1156 407E                          l1148 5C82  
                        l1196 5744                          l1470 3EFC                          l1471 402C  
                        l1490 5246                          l5012 49DA                          l1477 47AC  
                        l5030 4A5E                          l1478 4798                          l5032 4AA2  
                        l5024 4A40                          l5040 5DB8                          l5026 4A56  
                        l5018 49EA                          l6010 4D50                          l4314 1E5C  
                        l4162 1948                          l6020 4E00                          l6012 4D62  
                        l5044 5DCC                          l4340 1F7A                          ?_cos 01BE  
                        l6022 4E12                          l6014 4DA2                          l6006 4D3A  
                        l6102 4226                          l4334 1F58                          l4238 1BD2  
                        l4182 1A44                          l6032 4E88                          l6112 427A  
                        l4264 1CF0                          l6122 4EC2                          l6210 52EE  
                        l4258 1CCE                          l4540 38E0                          l4508 37C6  
                        l6060 40CE                          l6140 4F38                          l6044 5BD8  
                        l6220 5320                          l4188 1A66                          l4534 3898  
                        l6054 4090                          l6150 4F80                          l6222 5332  
                        l6214 5302                          l4608 0ECC                          l6080 4154  
                        l6152 4F88                          l6144 4F60                          l6128 4EE8  
                        l6304 53C8                          l6224 5340                          l6400 3D5A  
                        l4474 5E5E                          l4810 15F2                          l4714 12DC  
                        l4626 0F88                          l6170 56F2                          l6082 4166  
                        l6074 4122                          l6066 40E0                          l6162 4FD0  
                        l6306 546E                          l6322 518A                          l4708 1294  
                        l4644 1044                          l4492 370E                          l6260 504C  
                        l6092 41B4                          l6084 4176                          l6156 4FB0  
                        l6228 535E                          l6412 3E86                          l4742 13B2  
                        l4662 1100                          l4590 0E12                          l4566 39B4  
                        l6254 5026                          l6094 41C6                          l6086 4182  
                        l6238 597E                          l6326 51AC                          l6318 5176  
                        l6510 4496                          l4816 163A                          l4680 11BC  
                        l6280 50F2                          l6272 509C                          l6176 5790  
                        l6184 5CBC                          l6432 3A5C                          l6512 449E  
                        l4850 175A                          l6098 41FE                          l6362 494C  
                        l6194 527E                          l4914 5524                          l4844 1712  
                        l4748 13FA                          l6284 5106                          l6372 4552  
                        l6292 5B7A                          l6348 482E                          l4908 54E4  
                        l4782 151A                          l6446 3B9A                          l4918 5560  
                        l6518 44F8                          l4776 14D2                          l6384 471C  
                        l6720 344C                          l6624 3186                          l6608 4CCA  
                        l6458 3C7C                          l6474 581E                          l6634 31AA  
                        l6388 4734                          l6724 3486                          l4878 1832  
                        l4886 5CEE                          l6486 5C26                          l6734 351E  
                        l6638 31E4                          l6590 4C66                          l6566 4B6C  
                        l6574 4BBA                          l6558 4B54                          l6840 5626  
                        l4898 5494                          l6754 35B8                          l6658 3254  
                        l6586 4C2C                          l6578 4C0C                          l6834 55DA  
                        l6756 35C8                          l6772 3642                          l6836 55EA  
                        l6766 35F8                          l6696 33A6                          ?_sin 00D1  
                        _LATA 000F89                          _LATB 000F8A                          _LATC 000F8B  
                        u5105 0DEC                          u5210 0FBE                          u5130 0E46  
                        u5060 39D4                          u4340 1968                          u4350 19B4  
                        u5215 0FB2                          u5135 0E3A                          u4600 1E7C  
                        u5305 1196                          u5225 101E                          u5145 0EA6  
                        u5065 39C8                          u4345 195C                          u5250 107A  
                        u5170 0F02                          u5090 0D8C                          u4610 1EC8  
                        u4355 19A8                          u4605 1E70                          u4365 1A14  
                        u4470 1BF2                          u5255 106E                          u5175 0EF6  
                        u5095 0D80                          u4615 1EBC                          u8000 4584  
                        u4480 1C3E                          u5265 10DA                          u5185 0F62  
                        u4625 1F28                          u5290 1136                          u4475 1BE6  
                        u5700 1732                          u5620 1612                          u5540 14F2  
                        u5460 13D2                          u5380 12B4                          u4485 1C32  
                        u5295 112A                          u4495 1C9E                          u5705 1726  
                        u5625 1606                          u5545 14E6                          u5465 13C6  
                        u5385 12A8                          u4905 37A0                          u4850 3688  
                        u8060 3E7E                          u8300 4C7A                          u8220 4B64  
                        u8070 3E80                          u4855 367C                          u8215 44F0  
                        u8216 44F2                          u4865 36E8                          u8161 432A  
                        u4890 3740                          u8171 4336                          u5780 1852  
                        u4980 38B8                          u4895 3734                          u5785 1846  
                        u4985 38AC                          u8530 3594                          u7850 59B0  
                        u7780 529E                          u7940 519A                          u8657 5CF0  
                        u7785 5292                          u7858 59B4                          u7990 4582  
    __end_ofi1_CANsendMessage 26C0           __size_of_CANSetMask 03AA                          _Pmin 0120  
                        abs@a 0077                          _alfa 0124                          _fabs 5C56  
                        _data 0155                          _beta 0128                          _atan 4506  
                        _asin 39FE                          _main 559C                          cos@f 01BE  
                        fsr0h 000FEA                          fsr1h 000FE2                          fsr0l 000FE9  
                        fsr2h 000FDA                          indf1 000FE7                          fsr1l 000FE1  
                        indf2 000FDF                          fsr2l 000FD9                          _sqrt 475C  
                        pclat 000FFA                          sin@f 00D1                          sin@y 018D  
                        prodh 000FF4                          prodl 000FF3                          start 0352  
               __CFG_IESO$OFF 000000                delay_s@value_s 007F           ISR_Bassa@PORTA_temp 0028  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000              _CANOperationMode 5E54  
                       ??_abs 0079                         ??_cos 00D5                         ??_sin 00D5  
  __size_of_CANreceiveMessage 052E                         ?_fabs 00AF                 ___fltol@sign1 00B7  
                       ?_atan 00BF                         ?_asin 01A2               __end_of___fladd 42AA  
                       ?_main 0001               __end_of___fldiv 5136               __end_of___flneg 5CD0  
             __end_of___flmul 5000               __end_of___flsub 5BB2               __end_of___fltol 5372  
                       ?_sqrt 00D1                         _T0CON 000FD5                         _T3CON 000FB1  
          __size_of_ISR_Bassa 033A               __end_of___lwdiv 5A6E                         i1l400 2618  
                       i1l401 261C                         i1l402 2626                         i1l408 2EF6  
                       i1l361 2252                         i1l362 2030                         i1l371 21AC  
                       i1l363 2034                         i1l380 22D8                         i1l372 21B0  
                       i1l364 2106                         i1l381 22E0                         i1l373 21BA  
                       i1l365 20A2                         i1l382 22E8                         i1l366 20AA  
                       i1l710 00E4                         i1l391 249C                         i1l383 22F0  
                       i1l367 20B2                         i1l392 24A0                         i1l376 2488  
                       i1l368 20BA                         i1l704 008A                         i1l393 2572  
                       i1l377 2266                         i1l394 250E                         i1l386 23E2  
                       i1l378 226A                         i1l395 2516                         i1l387 23E6  
                       i1l379 233C                         i1l396 251E                         i1l388 23F0  
                       i1l732 030C                         i1l708 00CA                         i1l397 2526  
                       i1l726 0296                         i1l718 0192                         i1l559 5E7E  
                       i1l567 5D6C                         i1l729 0306                         i2l698 58BA  
                       _TMR0H 000FD7                         _TMR0L 000FD6                         _TMR3H 000FB3  
                       _TMR3L 000FB2                         _PORTA 000F80                         _TRISA 000F92  
           _CANisRxReady$2843 0001                         _TRISB 000F93                         _TRISC 000F94  
          __end_ofsin@coeff_a 0D41            __end_ofsin@coeff_b 0D51                 __CFG_PWRT$OFF 000000  
            __end_of_ISR_Alta 5958               __end_of_delay_s 5DDA                 __CFG_WRT0$OFF 000000  
                       _J_var 0118                 __CFG_WRT1$OFF 000000                         _K_var 011C  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000            CANInitialize@flags 0089  
              __CFG_EBTR2$OFF 000000                 ___awtofl@sign 0085                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         _bordo 012C                         fabs@d 00AF  
                       _first 0291                         _floor 5136                         _frexp 5958  
                       _errno 0140                         atan@f 00BF                         atan@x 00C7  
                       atan@y 00C3                         asin@x 01A2                         asin@y 01B6  
              __pbitbssCOMRAM 0288          __end_of_CANisRxReady 5E84                         sin@x2 0195  
                       tablat 000FF5          __end_of_CANisTxReady 5E54              __end_ofi1___wmul 5E2E  
                       plusw2 000FDB                         sqrt@i 0199                         sqrt@q 019A  
                       sqrt@x 019E                         sqrt@y 00D1                         sqrt@z 0195  
                       status 000FD8           i1___wmul@multiplier 0001                  ?_park_search 0001  
             __initialization 5A6E                  __end_of_fabs 5C94                  __end_of_atan 475C  
                __end_of_asin 3D22                  __end_of_main 569E                  __end_of_sqrt 4984  
                      ??_fabs 00B3                        ??_atan 00C3                        ??_asin 00D5  
                      ??_main 01EE             _park_routine$3666 01E6             _park_routine$3667 01EA  
                      ??_sqrt 018D                 __activetblptr 000003                   ?i1_delay_ms 0007  
           _CANisTxReady$2841 0077                        _ADCON1 000FC1                        ?_floor 00BF  
                      ?_frexp 0077              __end_of___altofl 5C0A                        _CANCON 000F6F  
            __end_of___flpack 4E9C            _distance_received1 028F              __end_of___awtofl 5C56  
             __CFG_BBSIZ$1024 000000                 _avvicinamento 028B                        i1l5124 2C56  
                      i1l5240 3102                        i1l5232 30C6                        i1l5224 3056  
                      i1l5128 2C5E                        i1l5250 3172                        i1l5170 2E3C  
                      i1l5162 2DCA                        i1l5244 3120                        i1l5236 30E4  
                      i2l1430 5A64                        i1l5182 2E9C                        i1l5174 2E5C  
                      i1l5248 313E                        i1l5186 2EBC                        i1l5178 2E7C  
                      i1l5188 2EF0                        i1l5612 21C0                        i1l5606 21A2  
                      i1l5900 0200                        i1l5662 22FA                        i1l5832 00D0  
                      i1l5738 2530                        i1l5682 23D8                        i1l5586 20C4  
                      i1l5930 02D6                        i1l5922 02A2                        i1l5842 0114  
                      i1l5764 262C                        i1l5916 0272                        i1l5860 0186  
                      i1l5852 0156                        i1l5828 00BC                        i1l5758 260E  
                      i1l5934 02DE                        i1l5926 02BC                        i1l5688 23F6  
                      i1l5786 5D5E                        i1l5892 01D0                        i1l5888 01C8  
                      i2l6816 591C                        i2l6784 5A0A                        i2l6786 5A18  
                      i2l6796 5A54                        i2l6788 5A22              __end_of___lwtofl 5DAC  
                      _RXB0D0 000F66                        _RXB0D1 000F67                        _RXB0D2 000F68  
                      _RXB0D3 000F69                        _RXB0D4 000F6A                        _RXB1D0 000F56  
                      _RXB0D5 000F6B                        _RXB1D1 000F57                        _RXB0D6 000F6C  
                      _RXB1D2 000F58                        _RXB0D7 000F6D                        _RXB1D3 000F59  
                      _RXB1D4 000F5A                        _RXB1D5 000F5B                        _RXB1D6 000F5C  
                      _RXB1D7 000F5D                        _TXB0D0 000F46                        _TXB0D1 000F47  
                      _TXB0D2 000F48                        _TXB0D3 000F49                        _TXB1D0 000F36  
                      _TXB0D4 000F4A                        _TXB1D1 000F37                        _TXB0D5 000F4B  
                      _TXB1D2 000F38                        _TXB0D6 000F4C                        _TXB1D3 000F39  
                      _TXB0D7 000F4D                        _TXB2D0 000F26                        _TXB1D4 000F3A  
                      _TXB2D1 000F27                        _TXB1D5 000F3B                        _TXB2D2 000F28  
                      _TXB1D6 000F3C                        _TXB2D3 000F29                        _TXB1D7 000F3D  
                      _TXB2D4 000F2A                        _TXB2D5 000F2B                        _TXB2D6 000F2C  
                      _TXB2D7 000F2D            CANsendMessage@data 007B              __end_of_can_send 559C  
          CANsendMessage@tamp 0083             __end_of_ISR_Bassa 0352              __end_of_delay_ms 5D0A  
       __size_of_CANSetFilter 0B2A                __CFG_XINST$OFF 000000                        ___flge 569E  
             _data_correction 0165                     ??___fladd 00A7                        ___wmul 5D0A  
                   ??___fldiv 0089                     ??___flneg 00AF                __CFG_STVREN$ON 000000  
                   ??___flmul 0098                     ??___flsub 00D1                     ??___fltol 00B3  
                   ??___lwdiv 0064                  ??_CANSetMask 007C                        _raggio 01F6  
                      clear_0 5A74                        clear_1 5A80                        clear_2 5A90  
                   ??_delay_s 007F                        floor@i 00C3                        floor@x 00BF  
             __CFG_BOREN$BOHW 000000                  __pdataCOMRAM 0053                        sin@sgn 0199  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8               ISR_Bassa@F16869 0053                        sqrt@og 0191  
                _CANSetFilter 0D52                    ___fladd@f1 009F                    ___fladd@f2 00A3  
                  ___flge@ff1 00B3                    ___flge@ff2 00B7                    ___altofl@c 00B9  
                  ___fldiv@f1 0081                    ___fldiv@f2 0085                    ___fldiv@f3 0089  
                  __accesstop 0060       __end_of__initialization 5AE0            __end_of_CANSetMask 39FE  
             __CFG_PBADEN$OFF 000000                    ___flneg@f1 00AB                 ?_park_routine 0001  
                  ___flmul@f1 0090                    ___flmul@f2 0094                  eval_poly@res 00B7  
               ___rparam_used 000000                    ___flsub@f1 00C9                    ___flsub@f2 00CD  
                  ___fltol@f1 00AF                    ___awtofl@c 0081           __size_ofi1_delay_ms 0038  
              __pcstackCOMRAM 0001                     ?_ISR_Alta 0001                  __pidataBANK0 5E8E  
                __pidataBANK1 5E84                 __end_of_floor 5258                 __end_of_frexp 59EC  
            ??_configurations 0091                    ___lwtofl@c 0081                     ?i1___wmul 0001  
       CANSetFilter@numBuffer 0080                  _actual_speed 013C         __size_of_CANisRxReady 0018  
       __size_of_CANisTxReady 0026                       ??_floor 00C3                       ??_frexp 007D  
    __end_of_CANOperationMode 5E6C                    __pbssBANK0 00D7                    __pbssBANK1 0100  
             _sensor_distance 002A            __size_of_eval_poly 011A             ?i1_CANsendMessage 0001  
                  _data_brake 015D                ??_park_routine 01E2       __size_of_CANsendMessage 07A0  
                  _data_speed 016D                    _activation 0289            ??i1_CANsendMessage 0009  
          __size_of_parallelo 025C          __size_of_park_search 01CA             _old_alignment_gap 0134  
                  ??_ISR_Alta 0067                       ?___flge 00B3                       ?___wmul 0077  
                   ?___altofl 00B9                     ?___flpack 0077                  _CANisRxReady 5E6C  
                     _CANSTAT 000F6E                     ?___awtofl 0081                  _CANisTxReady 5E2E  
                     _BRGCON1 000F70                       _BRGCON2 000F71                       _BRGCON3 000F72  
                  ??i1___wmul 0005                     ?___lwtofl 0081                     ?_can_send 0001  
      __size_of_CANInitialize 01CE                     ?_delay_ms 007D                       _RXB0DLC 000F65  
                     _RXB1DLC 000F55                       _RXB0CON 000F60                       _RXB1CON 000F50  
                     _TXB0DLC 000F45                       _TXB1DLC 000F35                       _TXB2DLC 000F25  
         CANsendMessage@flags 007E                       __Hparam 0000                    _left_speed 0142  
                     __Lparam 0000              delay_ms@value_ms 007D               __size_of___flge 00F8  
                  _matematica 26C0                       ___fladd 403E                       ___fldiv 5000  
                     ___flneg 5C94                       ___flmul 4E9C                       ___flsub 5B52  
                     ___fltol 5258               __size_of___wmul 0038                       ___lwdiv 59EC  
                __psmallconst 0D00                    ??___altofl 00BD                    ??___flpack 007D  
        CANInitialize@propSeg 008E                       __pcinit 5A6E                    ??___awtofl 0085  
           __end_of_eval_poly 548C                       _delay_s 5DAC                       __ramtop 0D00  
                     __ptext0 559C                       __ptext1 4B52                       __ptext2 3178  
                     __ptext3 42AA                       __ptext4 548C                       __ptext5 187C  
                     __ptext6 5E2E                       __ptext7 5DDA                       __ptext8 5C0A  
                     __ptext9 26C0                    ??___lwtofl 0085                     _T0CONbits 000FD5  
                ??i1_delay_ms 0009                       _counter 004F                    ??_can_send 0087  
                __size_of_abs 002C                  __size_of_cos 00E6               atan@val_squared 00CC  
                __size_of_sin 031C                       atan@val 00D0             __end_of_parallelo 4506  
                  ??_delay_ms 007F                       asin@sgn 01A6        CANreceiveMessage@error 000B  
             _start_operation 0296                __pintcode_body 587C          end_of_initialization 5AE0  
                     int_func 587C                 _CANInitialize 4984            __end_ofi1_delay_ms 5D7A  
                   _ISR_Bassa 0018                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE         i1___wmul@multiplicand 0003  
     _steering_correction_dir 0297                     _PORTBbits 000F81                CANSetMask@mask 0077  
              CANSetMask@tamp 0081                  _distance_set 0108                CANSetMask@type 007B  
        __end_of_park_routine 3654                     _TRISBbits 000F93                   ___fldiv@exp 008E  
                   _MUX_index 004C                    _pulse_time 0048       _clock_counter_reference 00E3  
                 ___flmul@exp 0098                _CANsendMessage 187C              CANInitialize@BRP 0088  
            CANInitialize@SJW 0087                ?_CANInitialize 0085                    ?_ISR_Bassa 0001  
                 ?_matematica 0001                __end_of___flge 5796             __size_of_ISR_Alta 5950  
              __end_of___wmul 5D42                 __pidataCOMRAM 5E8C                    floor@expon 00C7  
         start_initialization 5A6E             __size_ofi1___wmul 0028                    eval_poly@d 00AF  
                  eval_poly@n 00B1                    eval_poly@x 00AB                   __end_of_abs 5E06  
                 __end_of_cos 587C                   __end_of_sin 403E           CANSetMask@numBuffer 0080  
               _data_speed_rx 0100        __end_of_CANsendMessage 201C             ?_CANOperationMode 0001  
               _data_steering 0175            i1delay_ms@value_ms 0007                    frexp@value 0077  
          ??_CANOperationMode 0077             _distance_received 028E    CANInitialize@FilterConfig1 008F  
  CANInitialize@FilterConfig2 0090           _steering_correction 0050                      ??___flge 00BB  
ISR_Bassa@MUX_index_collision 0026                      ??___wmul 007B                   __pdataBANK0 00E7  
                 __pdataBANK1 01F2              __CFG_LPT1OSC$OFF 000000     __size_ofi1_CANsendMessage 06A4  
           __size_of___altofl 0058             __size_of___flpack 0180        CANInitialize@phaseSeg1 0085  
      CANInitialize@phaseSeg2 0086             __size_of___awtofl 004C                   __pbssCOMRAM 002A  
           __size_of___lwtofl 0032                 __pcstackBANK0 0060                 __pcstackBANK1 018D  
                 _BRGCON2bits 000F71                   _BRGCON3bits 000F72             __size_of_can_send 0110  
           __size_of_delay_ms 003A               ?_CANsendMessage 0077           __size_of_matematica 058A  
             ??_CANInitialize 008A                     _asin$3675 01AA                     _asin$3676 01BA  
                   _asin$3677 01B2                     _asin$3678 01AE                    sin@coeff_a 0D2D  
                  sin@coeff_b 0D41                 ??_park_search 01BE                 _alignment_gap 00D7  
          CANSetFilter@filter 0077                     _data_test 017D              ___lwdiv@dividend 0060  
                  ISR_Bassa@i 0029                   ??_ISR_Bassa 0011                     __pintcode 0008  
                    ?___fladd 009F                      ?___fldiv 0081                      ?___flneg 00AB  
                    ?___flmul 0090                      ?___flsub 00C9                      ?___fltol 00AF  
       __size_of_park_routine 04DC                      ?___lwdiv 0060                   __pintcodelo 0018  
                    ?_delay_s 0001                   __smallconst 0D00                   _COMSTATbits 000F74  
                   _eval_poly 5372                     _larghezza 01F2              ___lwdiv@quotient 0065  
              __size_of_floor 0122                __size_of_frexp 0094       __size_of_configurations 006C  
                   _parallelo 42AA                  _new_distance 0292         CANreceiveMessage@tamp 000C  
              _prima_sterzata 0138                ___wmul@product 007B                      _LATBbits 000F8A  
                   atan@recip 00CB                  _park_routine 3178  _delay_quartz_frequency_value 00E7  
                    _IPR3bits 000FA5                      _PIE3bits 000FA3                      i1u620_25 2FDC  
                    i1u606_20 2D0A                      i1u606_26 2D0C                      i1u607_20 2D38  
                    i1u703_20 254E                      i1u615_25 2EC8                      i1u703_25 2544  
                    i1u607_26 2D3A                      i1u704_20 2594                      i1u704_25 258A  
                    i1u617_20 2F9E                      i1u609_25 2D4E                      i1u705_25 25E0  
                    i1u617_26 2FA0                      i1u618_20 2FC8                      i1u626_25 314A  
                    i1u618_26 2FCA                      i1u724_20 016E                      i1u725_20 0170  
                    i1u690_20 2318                      i1u690_25 230E                      i1u691_20 235E  
                    i1u691_25 2354                      i1u692_25 23AA                      i1u677_20 20E2  
                    i1u677_25 20D8                      _PIR3bits 000FA4                      i1u678_20 2128  
                    i1u678_25 211E                      i1u679_25 2174                      i1u866_27 01B4  
                    i1u867_27 5D60                      _RXB0EIDH 000F63                      _RXB0EIDL 000F64  
                    _RXB1EIDH 000F53                      _RXB1EIDL 000F54                      _ISR_Alta 0008  
                   _set_speed 00E5                      _RCONbits 000FD0              __CFG_WDTPS$32768 000000  
                    _RXB0SIDH 000F61                      _RXB0SIDL 000F62                      _RXF0EIDH 000F02  
                    _RXB1SIDH 000F51                      _RXF0EIDL 000F03                      _RXB1SIDL 000F52  
                    _RXF1EIDH 000F06                      _RXF1EIDL 000F07                      _RXF2EIDH 000F0A  
                    _RXF2EIDL 000F0B                      _RXF3EIDH 000F0E                      _RXF3EIDL 000F0F  
                    _RXF4EIDH 000F12                      _RXF4EIDL 000F13                      _RXF5EIDH 000F16  
                    _RXF5EIDL 000F17                      _RXF0SIDH 000F00                      _RXF0SIDL 000F01  
         __end_of_park_search 4D1C                      _TXB0EIDH 000F43                      _RXF1SIDH 000F04  
                    _TXB0EIDL 000F44                      _RXF1SIDL 000F05                      _TXB1EIDH 000F33  
                    _RXF2SIDH 000F08                      _TXB1EIDL 000F34                      _RXF2SIDL 000F09  
                    _TXB2EIDH 000F23                      _RXF3SIDH 000F0C                      _TXB2EIDL 000F24  
                    _RXF3SIDL 000F0D                      _RXF4SIDH 000F10                      _RXF4SIDL 000F11  
                    _RXF5SIDH 000F14                      _RXF5SIDL 000F15                      _RXM0EIDH 000F1A  
                    _RXM0EIDL 000F1B                      _TXB0SIDH 000F41                      _RXM1EIDH 000F1E  
                    _TXB0SIDL 000F42                      _RXM1EIDL 000F1F                      _TXB1SIDH 000F31  
                    _TXB1SIDL 000F32                      _TXB2SIDH 000F21                      _TXB2SIDL 000F22  
                    _RXM0SIDH 000F18                      _RXM0SIDL 000F19                      _RXM1SIDH 000F1C  
                    _RXM1SIDL 000F1D                   _distance_dx 0044                   _distance_sx 0046  
                    _RXERRCNT 000F75                      _TXERRCNT 000F76             ___wmul@multiplier 0077  
                    i1___wmul 5E06                    ?_eval_poly 00AB           __end_ofatan@coeff_a 0D19  
         __end_ofatan@coeff_b 0D2D                 ?_CANSetFilter 0077                   _INTCON2bits 000FF1  
                   copy_data0 5AAA                    _CANCONbits 000F6F                    ?_parallelo 0001  
            _distance_average 013E                     frexp@eptr 007B                      __Hparam0 0000  
                    __Lparam0 0000                  _RXB0SIDLbits 000F62                  _RXB1SIDLbits 000F52  
                ??_matematica 00D5                 _request_sent1 0295              __size_of___fladd 026C  
                  _CANSetMask 3654              __size_of___fldiv 0136              __size_of___flneg 003C  
            __size_of___flmul 0164              __size_of___flsub 0060              __size_of___fltol 011A  
                    ___altofl 5BB2              i1_CANsendMessage 201C                      ___flpack 4D1C  
                    _cos$3679 01C2              __size_of___lwdiv 0082                      ___awtofl 5C0A  
            __size_of_delay_s 002E                      ___lwtofl 5D7A                      _can_send 548C  
                _RXF0SIDLbits 000F01                      _delay_ms 5CD0               ___lwdiv@divisor 0062  
                _RXF1SIDLbits 000F05               ___lwdiv@counter 0064         i1CANsendMessage@flags 0008  
              ??_CANSetFilter 007C                      __ptext10 5796                      __ptext11 3D22  
                    __ptext20 5C56                      __ptext12 5136                      __ptext21 5C94  
                    __ptext13 5958                      __ptext30 5D7A                      __ptext22 5372  
                    __ptext14 5258                      __ptext31 4D1C                      __ptext23 4E9C  
                    __ptext15 5BB2                      __ptext40 201C                      __ptext32 5AE6  
                    __ptext24 403E                      __ptext16 39FE                      __ptext41 2C4A  
                    __ptext33 4984                      __ptext25 569E                      __ptext17 475C  
                    __ptext42 5E6C                      __ptext34 3654                      __ptext26 5000  
                    __ptext18 5B52                      __ptext35 0D52                      __ptext27 5DAC  
                    __ptext19 4506                      __ptext44 59EC                      __ptext36 5E54  
                    __ptext28 5CD0                      __ptext29 5D0A                      __ptext38 5D42  
                    __ptext39 5E06                  _RXF2SIDLbits 000F09                      _sin$3680 0191  
                _RXF3SIDLbits 000F0D                      _distance 0042            __end_of_matematica 2C4A  
                _RXF4SIDLbits 000F11                  _RXF5SIDLbits 000F15      CANsendMessage@dataLength 007D  
               __size_of_fabs 003E                 __size_of_atan 0256                 __size_of_asin 0324  
               __size_of_main 0102                 __size_of_sqrt 0228                   _park_search 4B52  
        CANreceiveMessage@msg 0001                  _TXB0SIDLbits 000F42                  _TXB1SIDLbits 000F32  
                _TXB2SIDLbits 000F22     __size_of_CANOperationMode 0018                 ?_CANisRxReady 0001  
               ?_CANisTxReady 0001                   atan@coeff_a 0D01                   atan@coeff_b 0D19  
                 _RXB0DLCbits 000F65         ___flmul@f3_as_product 0099                   _RXB1DLCbits 000F55  
                _RXM0SIDLbits 000F19                   _RXB0CONbits 000F60                   _RXB1CONbits 000F50  
           _CANreceiveMessage 2C4A                  _RXM1SIDLbits 000F1D                    _INTCONbits 000FF2  
                 ??_eval_poly 00B3              ??_CANsendMessage 007F    i1CANsendMessage@dataLength 0007  
          ?_CANreceiveMessage 0001                  _request_sent 0294                _configurations 5AE6  
    CANsendMessage@identifier 0077                   ??_parallelo 00D5                      intlevel1 0000  
                    intlevel2 0000              CANSetFilter@tamp 0081              CANSetFilter@type 007B  
         ??_CANreceiveMessage 0003          i1CANsendMessage@data 0005          i1CANsendMessage@tamp 000D  
                 _TXB0DLCbits 000F45                   _right_speed 0144                   _TXB1DLCbits 000F35  
                 _TXB0CONbits 000F40                   _TXB2DLCbits 000F25                   _TXB1CONbits 000F30  
                 _TXB2CONbits 000F20          CANOperationMode@mode 0077                ??_CANisRxReady 0001  
                 ?_CANSetMask 0077                ??_CANisTxReady 0077                _distance_error 028D  
             _matematica$3670 01CE               _matematica$3671 01D2               _matematica$3672 01DE  
             _matematica$3673 01D6               _matematica$3674 01DA               _matematica$3668 01C6  
             _matematica$3669 01CA     __end_of_CANreceiveMessage 3178    i1CANsendMessage@identifier 0001  
                 _timerValue2 004A                    _TMR3H_temp 004D        __end_of_configurations 5B52  
                  _TMR3L_temp 004E                 _distance_wait 0290            _old_dir_correction 0293  
                ___fladd@exp1 00AA                  ___fladd@exp2 00A9                  ___fladd@sign 00A8  
       __end_of_CANInitialize 4B52         _sensor_distance_short 0185           _sensor_distance_old 0110  
