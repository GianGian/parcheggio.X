

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Jun 12 22:16:14 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2685
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	param0,global,class=BANK0,space=1,delta=1
    68  0000                     
    69                           	psect	idataBANK0
    70  0065CE                     __pidataBANK0:
    71                           	opt stack 0
    72                           
    73                           ;initializer for _delay_quartz_frequency_value
    74  0065CE  10                 	db	16
    75                           
    76                           	psect	idataBANK1
    77  0065CC                     __pidataBANK1:
    78                           	opt stack 0
    79                           
    80                           ;initializer for ISR_Bassa@F16865
    81  0065CC  03                 	db	3
    82  0065CD  06                 	db	6
    83                           
    84                           	psect	smallconst
    85  000D00                     __psmallconst:
    86                           	opt stack 0
    87  000D00  00                 	db	0
    88  000D01                     atan@coeff_a:
    89                           	opt stack 0
    90  000D01  3C06               	dw	15366
    91  000D03  4204               	dw	16900
    92  000D05  9F7D               	dw	40829
    93  000D07  426A               	dw	17002
    94  000D09  905C               	dw	36956
    95  000D0B  4201               	dw	16897
    96  000D0D  4D60               	dw	19808
    97  000D0F  40BB               	dw	16571
    98  000D11  EC51               	dw	60497
    99  000D13  3E47               	dw	15943
   100  000D15  8DDE               	dw	36318
   101  000D17  BB1F               	dw	47903
   102  000D19                     __end_ofatan@coeff_a:
   103                           	opt stack 0
   104  000D19                     atan@coeff_b:
   105                           	opt stack 0
   106  000D19  3C06               	dw	15366
   107  000D1B  4204               	dw	16900
   108  000D1D  59C0               	dw	22976
   109  000D1F  428B               	dw	17035
   110  000D21  0474               	dw	1140
   111  000D23  4244               	dw	16964
   112  000D25  9BF9               	dw	39929
   113  000D27  414F               	dw	16719
   114  000D29  0000               	dw	0
   115  000D2B  3F80               	dw	16256
   116  000D2D                     __end_ofatan@coeff_b:
   117                           	opt stack 0
   118  000D2D                     sin@coeff_a:
   119                           	opt stack 0
   120  000D2D  F3EC               	dw	62444
   121  000D2F  484A               	dw	18506
   122  000D31  9535               	dw	38197
   123  000D33  C795               	dw	51093
   124  000D35  C117               	dw	49431
   125  000D37  45DC               	dw	17884
   126  000D39  DBFD               	dw	56317
   127  000D3B  C36D               	dw	50029
   128  000D3D  B372               	dw	45938
   129  000D3F  4033               	dw	16435
   130  000D41                     __end_ofsin@coeff_a:
   131                           	opt stack 0
   132  000D41                     sin@coeff_b:
   133                           	opt stack 0
   134  000D41  342B               	dw	13355
   135  000D43  4801               	dw	18433
   136  000D45  9D7F               	dw	40319
   137  000D47  45B0               	dw	17840
   138  000D49  FFE7               	dw	65511
   139  000D4B  42D9               	dw	17113
   140  000D4D  0000               	dw	0
   141  000D4F  3F80               	dw	16256
   142  000D51                     __end_ofsin@coeff_b:
   143                           	opt stack 0
   144  0000                     _RXB1CON	set	3920
   145  0000                     _RXB1CONbits	set	3920
   146  0000                     _RXB1D0	set	3926
   147  0000                     _RXB1D1	set	3927
   148  0000                     _RXB1D2	set	3928
   149  0000                     _RXB1D3	set	3929
   150  0000                     _RXB1D4	set	3930
   151  0000                     _RXB1D5	set	3931
   152  0000                     _RXB1D6	set	3932
   153  0000                     _RXB1D7	set	3933
   154  0000                     _RXB1DLC	set	3925
   155  0000                     _RXB1DLCbits	set	3925
   156  0000                     _RXB1EIDH	set	3923
   157  0000                     _RXB1EIDL	set	3924
   158  0000                     _RXB1SIDH	set	3921
   159  0000                     _RXB1SIDL	set	3922
   160  0000                     _RXB1SIDLbits	set	3922
   161  0000                     _RXF0EIDH	set	3842
   162  0000                     _RXF0EIDL	set	3843
   163  0000                     _RXF0SIDH	set	3840
   164  0000                     _RXF0SIDL	set	3841
   165  0000                     _RXF0SIDLbits	set	3841
   166  0000                     _RXF1EIDH	set	3846
   167  0000                     _RXF1EIDL	set	3847
   168  0000                     _RXF1SIDH	set	3844
   169  0000                     _RXF1SIDL	set	3845
   170  0000                     _RXF1SIDLbits	set	3845
   171  0000                     _RXF2EIDH	set	3850
   172  0000                     _RXF2EIDL	set	3851
   173  0000                     _RXF2SIDH	set	3848
   174  0000                     _RXF2SIDL	set	3849
   175  0000                     _RXF2SIDLbits	set	3849
   176  0000                     _RXF3EIDH	set	3854
   177  0000                     _RXF3EIDL	set	3855
   178  0000                     _RXF3SIDH	set	3852
   179  0000                     _RXF3SIDL	set	3853
   180  0000                     _RXF3SIDLbits	set	3853
   181  0000                     _RXF4EIDH	set	3858
   182  0000                     _RXF4EIDL	set	3859
   183  0000                     _RXF4SIDH	set	3856
   184  0000                     _RXF4SIDL	set	3857
   185  0000                     _RXF4SIDLbits	set	3857
   186  0000                     _RXF5EIDH	set	3862
   187  0000                     _RXF5EIDL	set	3863
   188  0000                     _RXF5SIDH	set	3860
   189  0000                     _RXF5SIDL	set	3861
   190  0000                     _RXF5SIDLbits	set	3861
   191  0000                     _RXM0EIDH	set	3866
   192  0000                     _RXM0EIDL	set	3867
   193  0000                     _RXM0SIDH	set	3864
   194  0000                     _RXM0SIDL	set	3865
   195  0000                     _RXM0SIDLbits	set	3865
   196  0000                     _RXM1EIDH	set	3870
   197  0000                     _RXM1EIDL	set	3871
   198  0000                     _RXM1SIDH	set	3868
   199  0000                     _RXM1SIDL	set	3869
   200  0000                     _RXM1SIDLbits	set	3869
   201  0000                     _TXB0CONbits	set	3904
   202  0000                     _TXB0D0	set	3910
   203  0000                     _TXB0D1	set	3911
   204  0000                     _TXB0D2	set	3912
   205  0000                     _TXB0D3	set	3913
   206  0000                     _TXB0D4	set	3914
   207  0000                     _TXB0D5	set	3915
   208  0000                     _TXB0D6	set	3916
   209  0000                     _TXB0D7	set	3917
   210  0000                     _TXB0DLC	set	3909
   211  0000                     _TXB0DLCbits	set	3909
   212  0000                     _TXB0EIDH	set	3907
   213  0000                     _TXB0EIDL	set	3908
   214  0000                     _TXB0SIDH	set	3905
   215  0000                     _TXB0SIDL	set	3906
   216  0000                     _TXB0SIDLbits	set	3906
   217  0000                     _TXB1CONbits	set	3888
   218  0000                     _TXB1D0	set	3894
   219  0000                     _TXB1D1	set	3895
   220  0000                     _TXB1D2	set	3896
   221  0000                     _TXB1D3	set	3897
   222  0000                     _TXB1D4	set	3898
   223  0000                     _TXB1D5	set	3899
   224  0000                     _TXB1D6	set	3900
   225  0000                     _TXB1D7	set	3901
   226  0000                     _TXB1DLC	set	3893
   227  0000                     _TXB1DLCbits	set	3893
   228  0000                     _TXB1EIDH	set	3891
   229  0000                     _TXB1EIDL	set	3892
   230  0000                     _TXB1SIDH	set	3889
   231  0000                     _TXB1SIDL	set	3890
   232  0000                     _TXB1SIDLbits	set	3890
   233  0000                     _TXB2CONbits	set	3872
   234  0000                     _TXB2D0	set	3878
   235  0000                     _TXB2D1	set	3879
   236  0000                     _TXB2D2	set	3880
   237  0000                     _TXB2D3	set	3881
   238  0000                     _TXB2D4	set	3882
   239  0000                     _TXB2D5	set	3883
   240  0000                     _TXB2D6	set	3884
   241  0000                     _TXB2D7	set	3885
   242  0000                     _TXB2DLC	set	3877
   243  0000                     _TXB2DLCbits	set	3877
   244  0000                     _TXB2EIDH	set	3875
   245  0000                     _TXB2EIDL	set	3876
   246  0000                     _TXB2SIDH	set	3873
   247  0000                     _TXB2SIDL	set	3874
   248  0000                     _TXB2SIDLbits	set	3874
   249  0000                     _ADCON1	set	4033
   250  0000                     _BRGCON1	set	3952
   251  0000                     _BRGCON2	set	3953
   252  0000                     _BRGCON2bits	set	3953
   253  0000                     _BRGCON3	set	3954
   254  0000                     _BRGCON3bits	set	3954
   255  0000                     _CANCON	set	3951
   256  0000                     _CANCONbits	set	3951
   257  0000                     _CANSTAT	set	3950
   258  0000                     _COMSTATbits	set	3956
   259  0000                     _INTCON2bits	set	4081
   260  0000                     _INTCONbits	set	4082
   261  0000                     _IPR3bits	set	4005
   262  0000                     _LATA	set	3977
   263  0000                     _LATB	set	3978
   264  0000                     _LATBbits	set	3978
   265  0000                     _LATC	set	3979
   266  0000                     _PIE3bits	set	4003
   267  0000                     _PIR3bits	set	4004
   268  0000                     _PORTA	set	3968
   269  0000                     _PORTBbits	set	3969
   270  0000                     _RCONbits	set	4048
   271  0000                     _RXB0CON	set	3936
   272  0000                     _RXB0CONbits	set	3936
   273  0000                     _RXB0D0	set	3942
   274  0000                     _RXB0D1	set	3943
   275  0000                     _RXB0D2	set	3944
   276  0000                     _RXB0D3	set	3945
   277  0000                     _RXB0D4	set	3946
   278  0000                     _RXB0D5	set	3947
   279  0000                     _RXB0D6	set	3948
   280  0000                     _RXB0D7	set	3949
   281  0000                     _RXB0DLC	set	3941
   282  0000                     _RXB0DLCbits	set	3941
   283  0000                     _RXB0EIDH	set	3939
   284  0000                     _RXB0EIDL	set	3940
   285  0000                     _RXB0SIDH	set	3937
   286  0000                     _RXB0SIDL	set	3938
   287  0000                     _RXB0SIDLbits	set	3938
   288  0000                     _RXERRCNT	set	3957
   289  0000                     _T0CON	set	4053
   290  0000                     _T0CONbits	set	4053
   291  0000                     _T3CON	set	4017
   292  0000                     _TMR0H	set	4055
   293  0000                     _TMR0L	set	4054
   294  0000                     _TMR3H	set	4019
   295  0000                     _TMR3L	set	4018
   296  0000                     _TRISA	set	3986
   297  0000                     _TRISB	set	3987
   298  0000                     _TRISBbits	set	3987
   299  0000                     _TRISC	set	3988
   300  0000                     _TXERRCNT	set	3958
   301                           
   302                           ; #config settings
   303  000D51  00                 	db	0	; dummy byte at the end
   304  0000                     
   305                           	psect	cinit
   306  006282                     __pcinit:
   307                           	opt stack 0
   308  006282                     start_initialization:
   309                           	opt stack 0
   310  006282                     __initialization:
   311                           	opt stack 0
   312                           
   313                           ; Clear objects allocated to BANK1 (131 bytes)
   314  006282  EE01  F000         	lfsr	0,__pbssBANK1
   315  006286  0E83               	movlw	131
   316  006288                     clear_0:
   317  006288  6AEE               	clrf	postinc0,c
   318  00628A  06E8               	decf	wreg,f,c
   319  00628C  E1FD               	bnz	clear_0
   320                           
   321                           ; Clear objects allocated to BANK0 (15 bytes)
   322  00628E  EE00  F0D9         	lfsr	0,__pbssBANK0
   323  006292  0E0F               	movlw	15
   324  006294                     clear_1:
   325  006294  6AEE               	clrf	postinc0,c
   326  006296  06E8               	decf	wreg,f,c
   327  006298  E1FD               	bnz	clear_1
   328                           
   329                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   330  00629A  6A57               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   331  00629C  6A56               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   332                           
   333                           ; Clear objects allocated to COMRAM (45 bytes)
   334  00629E  EE00  F001         	lfsr	0,__pbssCOMRAM
   335  0062A2  0E2D               	movlw	45
   336  0062A4                     clear_2:
   337  0062A4  6AEE               	clrf	postinc0,c
   338  0062A6  06E8               	decf	wreg,f,c
   339  0062A8  E1FD               	bnz	clear_2
   340                           
   341                           ; Initialize objects allocated to BANK1 (2 bytes)
   342                           ; load TBLPTR registers with __pidataBANK1
   343  0062AA  0ECC               	movlw	low __pidataBANK1
   344  0062AC  6EF6               	movwf	tblptrl,c
   345  0062AE  0E65               	movlw	high __pidataBANK1
   346  0062B0  6EF7               	movwf	tblptrh,c
   347  0062B2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   348  0062B4  6EF8               	movwf	tblptru,c
   349  0062B6  0009               	tblrd		*+	;fetch initializer
   350  0062B8  CFF5 F1E0          	movff	tablat,__pdataBANK1
   351  0062BC  0009               	tblrd		*+	;fetch initializer
   352  0062BE  CFF5 F1E1          	movff	tablat,__pdataBANK1+1
   353                           
   354                           ; Initialize objects allocated to BANK0 (1 bytes)
   355                           ; load TBLPTR registers with __pidataBANK0
   356  0062C2  0ECE               	movlw	low __pidataBANK0
   357  0062C4  6EF6               	movwf	tblptrl,c
   358  0062C6  0E65               	movlw	high __pidataBANK0
   359  0062C8  6EF7               	movwf	tblptrh,c
   360  0062CA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   361  0062CC  6EF8               	movwf	tblptru,c
   362  0062CE  0009               	tblrd		*+	;fetch initializer
   363  0062D0  CFF5 F0E8          	movff	tablat,__pdataBANK0
   364  0062D4                     end_of_initialization:
   365                           	opt stack 0
   366  0062D4                     __end_of__initialization:
   367                           	opt stack 0
   368  0062D4  0100               	movlb	0
   369  0062D6  EFFA  F02F         	goto	_main	;jump to C main() function
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           postinc0	equ	0xFEE
   375                           wreg	equ	0xFE8
   376                           
   377                           	psect	bitbssCOMRAM
   378  0002B0                     __pbitbssCOMRAM:
   379                           	opt stack 0
   380  0002B0                     _MUX_toggle:
   381                           	opt stack 0
   382  0002B0                     	ds	1
   383  0002B1                     _activation:
   384                           	opt stack 0
   385  0002B1                     	ds	1
   386  0002B2                     _asd:
   387                           	opt stack 0
   388  0002B2                     	ds	1
   389  0002B3                     _avvicinamento:
   390                           	opt stack 0
   391  0002B3                     	ds	1
   392  0002B4                     _dir:
   393                           	opt stack 0
   394  0002B4                     	ds	1
   395  0002B5                     _distance_error:
   396                           	opt stack 0
   397  0002B5                     	ds	1
   398  0002B6                     _distance_received:
   399                           	opt stack 0
   400  0002B6                     	ds	1
   401  0002B7                     _distance_received1:
   402                           	opt stack 0
   403  0002B7                     	ds	1
   404  0002B8                     _distance_wait:
   405                           	opt stack 0
   406  0002B8                     	ds	1
   407  0002B9                     _first:
   408                           	opt stack 0
   409  0002B9                     	ds	1
   410  0002BA                     _new_distance:
   411                           	opt stack 0
   412  0002BA                     	ds	1
   413  0002BB                     _old_dir_correction:
   414                           	opt stack 0
   415  0002BB                     	ds	1
   416  0002BC                     _request_sent:
   417                           	opt stack 0
   418  0002BC                     	ds	1
   419  0002BD                     _request_sent1:
   420                           	opt stack 0
   421  0002BD                     	ds	1
   422  0002BE                     _start_operation:
   423                           	opt stack 0
   424  0002BE                     	ds	1
   425  0002BF                     _steering_correction_dir:
   426                           	opt stack 0
   427  0002BF                     	ds	1
   428                           tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           tblptrl	equ	0xFF6
   431                           tablat	equ	0xFF5
   432                           postinc0	equ	0xFEE
   433                           wreg	equ	0xFE8
   434                           
   435                           	psect	bssCOMRAM
   436  000001                     __pbssCOMRAM:
   437                           	opt stack 0
   438  000001                     _sensor_distance:
   439                           	opt stack 0
   440  000001                     	ds	16
   441  000011                     _old_alignment_gap:
   442                           	opt stack 0
   443  000011                     	ds	4
   444  000015                     _x:
   445                           	opt stack 0
   446  000015                     	ds	4
   447  000019                     _distance_dx:
   448                           	opt stack 0
   449  000019                     	ds	2
   450  00001B                     _distance_sx:
   451                           	opt stack 0
   452  00001B                     	ds	2
   453  00001D                     _pulse_time:
   454                           	opt stack 0
   455  00001D                     	ds	2
   456  00001F                     _timerValue2:
   457                           	opt stack 0
   458  00001F                     	ds	2
   459  000021                     _MUX_index:
   460                           	opt stack 0
   461  000021                     	ds	1
   462  000022                     _TMR3H_temp:
   463                           	opt stack 0
   464  000022                     	ds	1
   465  000023                     _TMR3L_temp:
   466                           	opt stack 0
   467  000023                     	ds	1
   468  000024                     _counter:
   469                           	opt stack 0
   470  000024                     	ds	1
   471  000025                     _steering_correction:
   472                           	opt stack 0
   473  000025                     	ds	1
   474  000026                     _data_brake:
   475                           	opt stack 0
   476  000026                     	ds	8
   477                           tblptru	equ	0xFF8
   478                           tblptrh	equ	0xFF7
   479                           tblptrl	equ	0xFF6
   480                           tablat	equ	0xFF5
   481                           postinc0	equ	0xFEE
   482                           wreg	equ	0xFE8
   483                           
   484                           	psect	bssBANK0
   485  0000D9                     __pbssBANK0:
   486                           	opt stack 0
   487  0000D9                     _alignment_gap:
   488                           	opt stack 0
   489  0000D9                     	ds	4
   490  0000DD                     _z:
   491                           	opt stack 0
   492  0000DD                     	ds	4
   493  0000E1                     _clock_counter_reference:
   494                           	opt stack 0
   495  0000E1                     	ds	2
   496  0000E3                     _distance_average:
   497                           	opt stack 0
   498  0000E3                     	ds	2
   499  0000E5                     _set_speed:
   500                           	opt stack 0
   501  0000E5                     	ds	2
   502  0000E7                     _counter_distance:
   503                           	opt stack 0
   504  0000E7                     	ds	1
   505                           tblptru	equ	0xFF8
   506                           tblptrh	equ	0xFF7
   507                           tblptrl	equ	0xFF6
   508                           tablat	equ	0xFF5
   509                           postinc0	equ	0xFEE
   510                           wreg	equ	0xFE8
   511                           
   512                           	psect	dataBANK0
   513  0000E8                     __pdataBANK0:
   514                           	opt stack 0
   515  0000E8                     _delay_quartz_frequency_value:
   516                           	opt stack 0
   517  0000E8                     	ds	1
   518                           tblptru	equ	0xFF8
   519                           tblptrh	equ	0xFF7
   520                           tblptrl	equ	0xFF6
   521                           tablat	equ	0xFF5
   522                           postinc0	equ	0xFEE
   523                           wreg	equ	0xFE8
   524                           
   525                           	psect	bssBANK1
   526  000100                     __pbssBANK1:
   527                           	opt stack 0
   528  000100                     _MUX_select:
   529                           	opt stack 0
   530  000100                     	ds	8
   531  000108                     _data_speed_rx:
   532                           	opt stack 0
   533  000108                     	ds	8
   534  000110                     _distance_set:
   535                           	opt stack 0
   536  000110                     	ds	8
   537  000118                     _sensor_distance_old:
   538                           	opt stack 0
   539  000118                     	ds	8
   540  000120                     _J_var:
   541                           	opt stack 0
   542  000120                     	ds	4
   543  000124                     _K_var:
   544                           	opt stack 0
   545  000124                     	ds	4
   546  000128                     _Pmin:
   547                           	opt stack 0
   548  000128                     	ds	4
   549  00012C                     _alfa:
   550                           	opt stack 0
   551  00012C                     	ds	4
   552  000130                     _beta:
   553                           	opt stack 0
   554  000130                     	ds	4
   555  000134                     _bordo:
   556                           	opt stack 0
   557  000134                     	ds	4
   558  000138                     _n:
   559                           	opt stack 0
   560  000138                     	ds	4
   561  00013C                     _prima_sterzata:
   562                           	opt stack 0
   563  00013C                     	ds	4
   564  000140                     _distance:
   565                           	opt stack 0
   566  000140                     	ds	2
   567  000142                     _errno:
   568                           	opt stack 0
   569  000142                     	ds	2
   570  000144                     _msg:
   571                           	opt stack 0
   572  000144                     	ds	15
   573  000153                     _data:
   574                           	opt stack 0
   575  000153                     	ds	8
   576  00015B                     _data_correction:
   577                           	opt stack 0
   578  00015B                     	ds	8
   579  000163                     _data_speed:
   580                           	opt stack 0
   581  000163                     	ds	8
   582  00016B                     _data_steering:
   583                           	opt stack 0
   584  00016B                     	ds	8
   585  000173                     _data_test:
   586                           	opt stack 0
   587  000173                     	ds	8
   588  00017B                     _sensor_distance_short:
   589                           	opt stack 0
   590  00017B                     	ds	8
   591                           tblptru	equ	0xFF8
   592                           tblptrh	equ	0xFF7
   593                           tblptrl	equ	0xFF6
   594                           tablat	equ	0xFF5
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           
   598                           	psect	dataBANK1
   599  0001E0                     __pdataBANK1:
   600                           	opt stack 0
   601  0001E0                     ISR_Bassa@F16865:
   602                           	opt stack 0
   603  0001E0                     	ds	2
   604                           tblptru	equ	0xFF8
   605                           tblptrh	equ	0xFF7
   606                           tblptrl	equ	0xFF6
   607                           tablat	equ	0xFF5
   608                           postinc0	equ	0xFEE
   609                           wreg	equ	0xFE8
   610                           
   611                           	psect	cstackBANK1
   612  000183                     __pcstackBANK1:
   613                           	opt stack 0
   614  000183                     sin@y:
   615                           	opt stack 0
   616  000183                     sqrt@og:
   617                           	opt stack 0
   618                           
   619                           ; 4 bytes @ 0x0
   620  000183                     	ds	4
   621  000187                     sqrt@z:
   622                           	opt stack 0
   623  000187                     _sin$3684:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x4
   627  000187                     	ds	4
   628  00018B                     sqrt@i:
   629                           	opt stack 0
   630  00018B                     sin@x2:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x8
   634  00018B                     	ds	1
   635  00018C                     sqrt@q:
   636                           	opt stack 0
   637                           
   638                           ; 4 bytes @ 0x9
   639  00018C                     	ds	3
   640  00018F                     sin@sgn:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0xC
   644  00018F                     	ds	1
   645  000190                     sqrt@x:
   646                           	opt stack 0
   647                           
   648                           ; 4 bytes @ 0xD
   649  000190                     	ds	4
   650  000194                     ?_asin:
   651                           	opt stack 0
   652  000194                     asin@x:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0x11
   656  000194                     	ds	4
   657  000198                     asin@sgn:
   658                           	opt stack 0
   659                           
   660                           ; 4 bytes @ 0x15
   661  000198                     	ds	4
   662  00019C                     _asin$3679:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x19
   666  00019C                     	ds	4
   667  0001A0                     _asin$3682:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x1D
   671  0001A0                     	ds	4
   672  0001A4                     _asin$3681:
   673                           	opt stack 0
   674                           
   675                           ; 4 bytes @ 0x21
   676  0001A4                     	ds	4
   677  0001A8                     asin@y:
   678                           	opt stack 0
   679                           
   680                           ; 4 bytes @ 0x25
   681  0001A8                     	ds	4
   682  0001AC                     _asin$3680:
   683                           	opt stack 0
   684                           
   685                           ; 4 bytes @ 0x29
   686  0001AC                     	ds	4
   687  0001B0                     ??_parallelo:
   688  0001B0                     ?_cos:
   689                           	opt stack 0
   690  0001B0                     cos@f:
   691                           	opt stack 0
   692                           
   693                           ; 4 bytes @ 0x2D
   694  0001B0                     	ds	4
   695  0001B4                     _cos$3683:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x31
   699  0001B4                     	ds	4
   700  0001B8                     ??_park_routine:
   701  0001B8                     _matematica$3672:
   702                           	opt stack 0
   703                           
   704                           ; 4 bytes @ 0x35
   705  0001B8                     	ds	4
   706  0001BC                     _park_routine$3667:
   707                           	opt stack 0
   708  0001BC                     _matematica$3673:
   709                           	opt stack 0
   710                           
   711                           ; 4 bytes @ 0x39
   712  0001BC                     	ds	4
   713  0001C0                     _park_routine$3668:
   714                           	opt stack 0
   715  0001C0                     _matematica$3674:
   716                           	opt stack 0
   717                           
   718                           ; 4 bytes @ 0x3D
   719  0001C0                     	ds	4
   720  0001C4                     _park_routine$3670:
   721                           	opt stack 0
   722  0001C4                     _matematica$3675:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x41
   726  0001C4                     	ds	4
   727  0001C8                     _park_routine$3671:
   728                           	opt stack 0
   729  0001C8                     _matematica$3677:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x45
   733  0001C8                     	ds	4
   734  0001CC                     _park_routine$3665:
   735                           	opt stack 0
   736  0001CC                     _matematica$3678:
   737                           	opt stack 0
   738                           
   739                           ; 4 bytes @ 0x49
   740  0001CC                     	ds	4
   741  0001D0                     _park_routine$3666:
   742                           	opt stack 0
   743  0001D0                     _matematica$3676:
   744                           	opt stack 0
   745                           
   746                           ; 4 bytes @ 0x4D
   747  0001D0                     	ds	4
   748  0001D4                     matematica@larghezza:
   749                           	opt stack 0
   750  0001D4                     _park_routine$3669:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0x51
   754  0001D4                     	ds	4
   755  0001D8                     park_routine@larghezza:
   756                           	opt stack 0
   757  0001D8                     matematica@raggio:
   758                           	opt stack 0
   759                           
   760                           ; 4 bytes @ 0x55
   761  0001D8                     	ds	4
   762  0001DC                     ??_park_search:
   763  0001DC                     park_routine@raggio:
   764                           	opt stack 0
   765                           
   766                           ; 4 bytes @ 0x59
   767  0001DC                     	ds	4
   768                           tblptru	equ	0xFF8
   769                           tblptrh	equ	0xFF7
   770                           tblptrl	equ	0xFF6
   771                           tablat	equ	0xFF5
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           
   775                           	psect	cstackBANK0
   776  000060                     __pcstackBANK0:
   777                           	opt stack 0
   778  000060                     ?___lwdiv:
   779                           	opt stack 0
   780  000060                     ___lwdiv@dividend:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x0
   784  000060                     	ds	2
   785  000062                     ___lwdiv@divisor:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x2
   789  000062                     	ds	2
   790  000064                     ___lwdiv@counter:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x4
   794  000064                     	ds	1
   795  000065                     ___lwdiv@quotient:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x5
   799  000065                     	ds	2
   800  000067                     ??_ISR_Alta:
   801                           
   802                           ; 0 bytes @ 0x7
   803  000067                     	ds	16
   804  000077                     ?_abs:
   805                           	opt stack 0
   806  000077                     ?___wmul:
   807                           	opt stack 0
   808  000077                     ?___flpack:
   809                           	opt stack 0
   810  000077                     CANOperationMode@mode:
   811                           	opt stack 0
   812  000077                     _CANisTxReady$2841:
   813                           	opt stack 0
   814  000077                     ___wmul@multiplier:
   815                           	opt stack 0
   816  000077                     abs@a:
   817                           	opt stack 0
   818  000077                     CANsendMessage@identifier:
   819                           	opt stack 0
   820  000077                     CANSetMask@mask:
   821                           	opt stack 0
   822  000077                     CANSetFilter@filter:
   823                           	opt stack 0
   824  000077                     ___flpack@arg:
   825                           	opt stack 0
   826  000077                     frexp@value:
   827                           	opt stack 0
   828                           
   829                           ; 4 bytes @ 0x17
   830  000077                     	ds	2
   831  000079                     ??_abs:
   832  000079                     ___wmul@multiplicand:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x19
   836  000079                     	ds	2
   837  00007B                     CANSetMask@type:
   838                           	opt stack 0
   839  00007B                     CANSetFilter@type:
   840                           	opt stack 0
   841  00007B                     ___flpack@exp:
   842                           	opt stack 0
   843  00007B                     CANsendMessage@data:
   844                           	opt stack 0
   845  00007B                     ___wmul@product:
   846                           	opt stack 0
   847  00007B                     frexp@eptr:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x1B
   851  00007B                     	ds	1
   852  00007C                     ??_CANSetMask:
   853  00007C                     ??_CANSetFilter:
   854  00007C                     ___flpack@sign:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x1C
   858  00007C                     	ds	1
   859  00007D                     ??___flpack:
   860  00007D                     ??_frexp:
   861  00007D                     CANsendMessage@dataLength:
   862                           	opt stack 0
   863  00007D                     delay_ms@value_ms:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x1D
   867  00007D                     	ds	1
   868  00007E                     CANsendMessage@flags:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x1E
   872  00007E                     	ds	1
   873  00007F                     ??_CANsendMessage:
   874  00007F                     delay_s@value_s:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x1F
   878  00007F                     	ds	1
   879  000080                     CANSetMask@numBuffer:
   880                           	opt stack 0
   881  000080                     CANSetFilter@numBuffer:
   882                           	opt stack 0
   883  000080                     delay_s@repeat_loop:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x20
   887  000080                     	ds	1
   888  000081                     ?___flmul:
   889                           	opt stack 0
   890  000081                     ?___awtofl:
   891                           	opt stack 0
   892  000081                     ?___lwtofl:
   893                           	opt stack 0
   894  000081                     ___awtofl@c:
   895                           	opt stack 0
   896  000081                     ___lwtofl@c:
   897                           	opt stack 0
   898  000081                     CANSetMask@tamp:
   899                           	opt stack 0
   900  000081                     CANSetFilter@tamp:
   901                           	opt stack 0
   902  000081                     ___flmul@f1:
   903                           	opt stack 0
   904                           
   905                           ; 4 bytes @ 0x21
   906  000081                     	ds	2
   907  000083                     CANsendMessage@tamp:
   908                           	opt stack 0
   909                           
   910                           ; 4 bytes @ 0x23
   911  000083                     	ds	2
   912  000085                     CANInitialize@phaseSeg1:
   913                           	opt stack 0
   914  000085                     ___awtofl@sign:
   915                           	opt stack 0
   916  000085                     ___flmul@f2:
   917                           	opt stack 0
   918                           
   919                           ; 4 bytes @ 0x25
   920  000085                     	ds	1
   921  000086                     CANInitialize@phaseSeg2:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x26
   925  000086                     	ds	1
   926  000087                     CANInitialize@SJW:
   927                           	opt stack 0
   928                           
   929                           ; 1 bytes @ 0x27
   930  000087                     	ds	1
   931  000088                     CANInitialize@BRP:
   932                           	opt stack 0
   933                           
   934                           ; 1 bytes @ 0x28
   935  000088                     	ds	1
   936  000089                     CANInitialize@flags:
   937                           	opt stack 0
   938  000089                     ___flmul@exp:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x29
   942  000089                     	ds	1
   943  00008A                     ??_CANInitialize:
   944  00008A                     ___flmul@f3_as_product:
   945                           	opt stack 0
   946                           
   947                           ; 4 bytes @ 0x2A
   948  00008A                     	ds	4
   949  00008E                     CANInitialize@propSeg:
   950                           	opt stack 0
   951  00008E                     ___flmul@cntr:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x2E
   955  00008E                     	ds	1
   956  00008F                     CANInitialize@FilterConfig1:
   957                           	opt stack 0
   958  00008F                     ___flmul@sign:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x2F
   962  00008F                     	ds	1
   963  000090                     ?___fldiv:
   964                           	opt stack 0
   965  000090                     CANInitialize@FilterConfig2:
   966                           	opt stack 0
   967  000090                     ___fldiv@f1:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0x30
   971  000090                     	ds	1
   972  000091                     
   973                           ; 0 bytes @ 0x31
   974  000091                     	ds	3
   975  000094                     ___fldiv@f2:
   976                           	opt stack 0
   977                           
   978                           ; 4 bytes @ 0x34
   979  000094                     	ds	4
   980  000098                     ___fldiv@f3:
   981                           	opt stack 0
   982                           
   983                           ; 4 bytes @ 0x38
   984  000098                     	ds	4
   985  00009C                     ___fldiv@cntr:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x3C
   989  00009C                     	ds	1
   990  00009D                     ___fldiv@exp:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x3D
   994  00009D                     	ds	1
   995  00009E                     ___fldiv@sign:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x3E
   999  00009E                     	ds	1
  1000  00009F                     ?___fladd:
  1001                           	opt stack 0
  1002  00009F                     ___fladd@f1:
  1003                           	opt stack 0
  1004                           
  1005                           ; 4 bytes @ 0x3F
  1006  00009F                     	ds	4
  1007  0000A3                     ___fladd@f2:
  1008                           	opt stack 0
  1009                           
  1010                           ; 4 bytes @ 0x43
  1011  0000A3                     	ds	4
  1012  0000A7                     ??___fladd:
  1013                           
  1014                           ; 0 bytes @ 0x47
  1015  0000A7                     	ds	1
  1016  0000A8                     ___fladd@sign:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x48
  1020  0000A8                     	ds	1
  1021  0000A9                     ___fladd@exp2:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x49
  1025  0000A9                     	ds	1
  1026  0000AA                     ___fladd@exp1:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x4A
  1030  0000AA                     	ds	1
  1031  0000AB                     ?_eval_poly:
  1032                           	opt stack 0
  1033  0000AB                     ?___flneg:
  1034                           	opt stack 0
  1035  0000AB                     eval_poly@x:
  1036                           	opt stack 0
  1037  0000AB                     ___flneg@f1:
  1038                           	opt stack 0
  1039                           
  1040                           ; 4 bytes @ 0x4B
  1041  0000AB                     	ds	4
  1042  0000AF                     ?_fabs:
  1043                           	opt stack 0
  1044  0000AF                     ?___fltol:
  1045                           	opt stack 0
  1046  0000AF                     eval_poly@d:
  1047                           	opt stack 0
  1048  0000AF                     fabs@d:
  1049                           	opt stack 0
  1050  0000AF                     ___fltol@f1:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0x4F
  1054  0000AF                     	ds	2
  1055  0000B1                     eval_poly@n:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x51
  1059  0000B1                     	ds	2
  1060  0000B3                     ??_eval_poly:
  1061  0000B3                     ??___fltol:
  1062  0000B3                     ___flge@ff1:
  1063                           	opt stack 0
  1064                           
  1065                           ; 4 bytes @ 0x53
  1066  0000B3                     	ds	4
  1067  0000B7                     ___fltol@sign1:
  1068                           	opt stack 0
  1069  0000B7                     eval_poly@res:
  1070                           	opt stack 0
  1071  0000B7                     ___flge@ff2:
  1072                           	opt stack 0
  1073                           
  1074                           ; 4 bytes @ 0x57
  1075  0000B7                     	ds	1
  1076  0000B8                     ___fltol@exp1:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x58
  1080  0000B8                     	ds	1
  1081  0000B9                     ?___altofl:
  1082                           	opt stack 0
  1083  0000B9                     ___altofl@c:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x59
  1087  0000B9                     	ds	2
  1088  0000BB                     ??___flge:
  1089                           
  1090                           ; 0 bytes @ 0x5B
  1091  0000BB                     	ds	2
  1092  0000BD                     ___altofl@sign:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x5D
  1096  0000BD                     	ds	2
  1097  0000BF                     ?_atan:
  1098                           	opt stack 0
  1099  0000BF                     ?_floor:
  1100                           	opt stack 0
  1101  0000BF                     atan@f:
  1102                           	opt stack 0
  1103  0000BF                     floor@x:
  1104                           	opt stack 0
  1105                           
  1106                           ; 4 bytes @ 0x5F
  1107  0000BF                     	ds	4
  1108  0000C3                     atan@y:
  1109                           	opt stack 0
  1110  0000C3                     floor@i:
  1111                           	opt stack 0
  1112                           
  1113                           ; 4 bytes @ 0x63
  1114  0000C3                     	ds	4
  1115  0000C7                     floor@expon:
  1116                           	opt stack 0
  1117  0000C7                     atan@x:
  1118                           	opt stack 0
  1119                           
  1120                           ; 4 bytes @ 0x67
  1121  0000C7                     	ds	2
  1122  0000C9                     ?___flsub:
  1123                           	opt stack 0
  1124  0000C9                     ___flsub@f1:
  1125                           	opt stack 0
  1126                           
  1127                           ; 4 bytes @ 0x69
  1128  0000C9                     	ds	2
  1129  0000CB                     atan@recip:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x6B
  1133  0000CB                     	ds	1
  1134  0000CC                     atan@val_squared:
  1135                           	opt stack 0
  1136                           
  1137                           ; 4 bytes @ 0x6C
  1138  0000CC                     	ds	1
  1139  0000CD                     ___flsub@f2:
  1140                           	opt stack 0
  1141                           
  1142                           ; 4 bytes @ 0x6D
  1143  0000CD                     	ds	3
  1144  0000D0                     atan@val:
  1145                           	opt stack 0
  1146                           
  1147                           ; 4 bytes @ 0x70
  1148  0000D0                     	ds	1
  1149  0000D1                     ?_sqrt:
  1150                           	opt stack 0
  1151  0000D1                     ?_sin:
  1152                           	opt stack 0
  1153  0000D1                     sin@f:
  1154                           	opt stack 0
  1155  0000D1                     sqrt@y:
  1156                           	opt stack 0
  1157                           
  1158                           ; 4 bytes @ 0x71
  1159  0000D1                     	ds	4
  1160  0000D5                     ??_sqrt:
  1161  0000D5                     
  1162                           ; 0 bytes @ 0x75
  1163  0000D5                     	ds	4
  1164  0000D9                     tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           postinc0	equ	0xFEE
  1169                           wreg	equ	0xFE8
  1170                           
  1171                           ; 0 bytes @ 0x79
  1172                           
  1173                           	psect	cstackCOMRAM
  1174  00002E                     __pcstackCOMRAM:
  1175                           	opt stack 0
  1176  00002E                     ?i1___wmul:
  1177                           	opt stack 0
  1178  00002E                     _CANisRxReady$2843:
  1179                           	opt stack 0
  1180  00002E                     i1_CANisTxReady$2841:
  1181                           	opt stack 0
  1182  00002E                     CANreceiveMessage@msg:
  1183                           	opt stack 0
  1184  00002E                     i1___wmul@multiplier:
  1185                           	opt stack 0
  1186  00002E                     i1CANsendMessage@identifier:
  1187                           	opt stack 0
  1188                           
  1189                           ; 4 bytes @ 0x0
  1190  00002E                     	ds	2
  1191  000030                     ??_CANreceiveMessage:
  1192  000030                     i1___wmul@multiplicand:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x2
  1196  000030                     	ds	2
  1197  000032                     i1CANsendMessage@data:
  1198                           	opt stack 0
  1199  000032                     i1___wmul@product:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x4
  1203  000032                     	ds	2
  1204  000034                     i1CANsendMessage@dataLength:
  1205                           	opt stack 0
  1206  000034                     i1delay_ms@value_ms:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0x6
  1210  000034                     	ds	1
  1211  000035                     i1CANsendMessage@flags:
  1212                           	opt stack 0
  1213                           
  1214                           ; 1 bytes @ 0x7
  1215  000035                     	ds	1
  1216  000036                     ??i1_CANsendMessage:
  1217  000036                     
  1218                           ; 0 bytes @ 0x8
  1219  000036                     	ds	2
  1220  000038                     CANreceiveMessage@error:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0xA
  1224  000038                     	ds	1
  1225  000039                     CANreceiveMessage@tamp:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0xB
  1229  000039                     	ds	1
  1230  00003A                     i1CANsendMessage@tamp:
  1231                           	opt stack 0
  1232                           
  1233                           ; 4 bytes @ 0xC
  1234  00003A                     	ds	4
  1235  00003E                     ??_ISR_Bassa:
  1236  00003E                     
  1237                           ; 0 bytes @ 0x10
  1238  00003E                     	ds	21
  1239  000053                     ISR_Bassa@MUX_index_collision:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x25
  1243  000053                     	ds	2
  1244  000055                     ISR_Bassa@PORTA_temp:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x27
  1248  000055                     	ds	1
  1249                           tblptru	equ	0xFF8
  1250                           tblptrh	equ	0xFF7
  1251                           tblptrl	equ	0xFF6
  1252                           tablat	equ	0xFF5
  1253                           postinc0	equ	0xFEE
  1254                           wreg	equ	0xFE8
  1255                           
  1256 ;;
  1257 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1258 ;;
  1259 ;; *************** function _main *****************
  1260 ;; Defined at:
  1261 ;;		line 233 in file "parcheggio.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;		None
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;		None
  1266 ;; Return value:  Size  Location     Type
  1267 ;;		None               void
  1268 ;; Registers used:
  1269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1279 ;;Total ram usage:        0 bytes
  1280 ;; Hardware stack levels required when called:   12
  1281 ;; This function calls:
  1282 ;;		_CANisTxReady
  1283 ;;		_CANsendMessage
  1284 ;;		_configurations
  1285 ;;		_delay_ms
  1286 ;;		_park_routine
  1287 ;;		_park_search
  1288 ;; This function is called by:
  1289 ;;		Startup code after reset
  1290 ;; This function uses a non-reentrant model
  1291 ;;
  1292                           
  1293                           	psect	text0
  1294  005FF4                     __ptext0:
  1295                           	opt stack 0
  1296  005FF4                     _main:
  1297                           	opt stack 19
  1298                           
  1299                           ;parcheggio.c: 234: MUX_select[0] = 0b00000000;
  1300                           
  1301                           ;incstack = 0
  1302  005FF4  0E00               	movlw	0
  1303  005FF6  0101               	movlb	1	; () banked
  1304  005FF8  6F00               	movwf	_MUX_select& (0+255),b	;volatile
  1305                           
  1306                           ;parcheggio.c: 235: MUX_select[1] = 0b00000001;
  1307  005FFA  0E01               	movlw	1
  1308  005FFC  0101               	movlb	1	; () banked
  1309  005FFE  6F01               	movwf	(_MUX_select+1)& (0+255),b	;volatile
  1310                           
  1311                           ;parcheggio.c: 236: MUX_select[2] = 0b00000010;
  1312  006000  0E02               	movlw	2
  1313  006002  0101               	movlb	1	; () banked
  1314  006004  6F02               	movwf	(_MUX_select+2)& (0+255),b	;volatile
  1315                           
  1316                           ;parcheggio.c: 237: MUX_select[3] = 0b00000011;
  1317  006006  0E03               	movlw	3
  1318  006008  0101               	movlb	1	; () banked
  1319  00600A  6F03               	movwf	(_MUX_select+3)& (0+255),b	;volatile
  1320                           
  1321                           ;parcheggio.c: 238: MUX_select[4] = 0b00000100;
  1322  00600C  0E04               	movlw	4
  1323  00600E  0101               	movlb	1	; () banked
  1324  006010  6F04               	movwf	(_MUX_select+4)& (0+255),b	;volatile
  1325                           
  1326                           ;parcheggio.c: 239: MUX_select[5] = 0b00000101;
  1327  006012  0E05               	movlw	5
  1328  006014  0101               	movlb	1	; () banked
  1329  006016  6F05               	movwf	(_MUX_select+5)& (0+255),b	;volatile
  1330                           
  1331                           ;parcheggio.c: 240: MUX_select[6] = 0b00000110;
  1332  006018  0E06               	movlw	6
  1333  00601A  0101               	movlb	1	; () banked
  1334  00601C  6F06               	movwf	(_MUX_select+6)& (0+255),b	;volatile
  1335                           
  1336                           ;parcheggio.c: 241: MUX_select[7] = 0b00000111;
  1337  00601E  0E07               	movlw	7
  1338  006020  0101               	movlb	1	; () banked
  1339  006022  6F07               	movwf	(_MUX_select+7)& (0+255),b	;volatile
  1340                           
  1341                           ; BSR set to: 1
  1342                           ;parcheggio.c: 243: configurations();
  1343  006024  ECDB  F030         	call	_configurations	;wreg free
  1344                           
  1345                           ;parcheggio.c: 245: PORTBbits.RB4 = 0;
  1346  006028  9881               	bcf	3969,4,c	;volatile
  1347                           
  1348                           ;parcheggio.c: 246: PORTBbits.RB5 = 0;
  1349  00602A  9A81               	bcf	3969,5,c	;volatile
  1350                           
  1351                           ;parcheggio.c: 247: PORTBbits.RB6 = 0;
  1352  00602C  9C81               	bcf	3969,6,c	;volatile
  1353                           
  1354                           ;parcheggio.c: 249: request_sent = 0;
  1355  00602E  9857               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1356                           
  1357                           ;parcheggio.c: 250: start_operation = 0;
  1358  006030  9C57               	bcf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  1359                           
  1360                           ;parcheggio.c: 251: delay_ms(500);
  1361  006032  0E01               	movlw	1
  1362  006034  0100               	movlb	0	; () banked
  1363  006036  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1364  006038  0EF4               	movlw	244
  1365  00603A  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1366  00603C  ECFC  F031         	call	_delay_ms	;wreg free
  1367                           
  1368                           ;parcheggio.c: 254: while (activation != 1) {
  1369                           
  1370                           ;parcheggio.c: 253: while (1) {
  1371  006040  D026               	goto	l7243
  1372  006042                     l7237:
  1373                           
  1374                           ;parcheggio.c: 255: delay_ms(10);
  1375  006042  0E00               	movlw	0
  1376  006044  0100               	movlb	0	; () banked
  1377  006046  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  1378  006048  0E0A               	movlw	10
  1379  00604A  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  1380  00604C  ECFC  F031         	call	_delay_ms	;wreg free
  1381                           
  1382                           ;parcheggio.c: 256: while (!CANisTxReady());
  1383  006050  D000               	goto	l7239
  1384  006052                     l7239:
  1385  006052  ECAB  F032         	call	_CANisTxReady	;wreg free
  1386  006056  0900               	iorlw	0
  1387  006058  B4D8               	btfsc	status,2,c
  1388  00605A  D7FB               	goto	l7239
  1389                           
  1390                           ;parcheggio.c: 257: PORTBbits.RB4 = ~PORTBbits.RB4;
  1391  00605C  7881               	btg	3969,4,c	;volatile
  1392                           
  1393                           ;parcheggio.c: 258: CANsendMessage(0b00000010001, sensor_distance_short, 2, CAN_CONFIG_S
      +                          TD_MSG & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1394  00605E  0E11               	movlw	17
  1395  006060  0100               	movlb	0	; () banked
  1396  006062  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1397  006064  0E00               	movlw	0
  1398  006066  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1399  006068  0E00               	movlw	0
  1400  00606A  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1401  00606C  0E00               	movlw	0
  1402  00606E  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1403  006070  0E7B               	movlw	low _sensor_distance_short
  1404  006072  0100               	movlb	0	; () banked
  1405  006074  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1406  006076  0E01               	movlw	high _sensor_distance_short
  1407  006078  0100               	movlb	0	; () banked
  1408  00607A  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1409  00607C  0E02               	movlw	2
  1410  00607E  0100               	movlb	0	; () banked
  1411  006080  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1412  006082  0EBC               	movlw	188
  1413  006084  0100               	movlb	0	; () banked
  1414  006086  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1415  006088  ECE9  F011         	call	_CANsendMessage	;wreg free
  1416  00608C  D000               	goto	l7243
  1417  00608E                     l7243:
  1418  00608E  A256               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1419  006090  D7D8               	goto	l7237
  1420                           
  1421                           ;parcheggio.c: 259: }
  1422                           ;parcheggio.c: 261: park_search();
  1423  006092  EC0D  F028         	call	_park_search	;wreg free
  1424                           
  1425                           ;parcheggio.c: 262: park_routine();
  1426  006096  ECA9  F006         	call	_park_routine	;wreg free
  1427  00609A  D7F9               	goto	l7243
  1428  00609C  EF96  F001         	goto	start
  1429  0060A0                     __end_of_main:
  1430                           	opt stack 0
  1431                           tblptru	equ	0xFF8
  1432                           tblptrh	equ	0xFF7
  1433                           tblptrl	equ	0xFF6
  1434                           tablat	equ	0xFF5
  1435                           postinc0	equ	0xFEE
  1436                           wreg	equ	0xFE8
  1437                           status	equ	0xFD8
  1438                           
  1439 ;; *************** function _park_search *****************
  1440 ;; Defined at:
  1441 ;;		line 266 in file "parcheggio.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;		None
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;		None
  1446 ;; Return value:  Size  Location     Type
  1447 ;;		None               void
  1448 ;; Registers used:
  1449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1457 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1458 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1459 ;;Total ram usage:        2 bytes
  1460 ;; Hardware stack levels used:    1
  1461 ;; Hardware stack levels required when called:   11
  1462 ;; This function calls:
  1463 ;;		_CANisTxReady
  1464 ;;		_CANsendMessage
  1465 ;;		___awtofl
  1466 ;;		___flge
  1467 ;;		___lwtofl
  1468 ;;		_abs
  1469 ;;		_matematica
  1470 ;;		_parallelo
  1471 ;; This function is called by:
  1472 ;;		_main
  1473 ;; This function uses a non-reentrant model
  1474 ;;
  1475                           
  1476                           	psect	text1
  1477  00501A                     __ptext1:
  1478                           	opt stack 0
  1479  00501A                     _park_search:
  1480                           	opt stack 19
  1481                           
  1482                           ;parcheggio.c: 267: while ((activation == 1) && (PORTBbits.RB5 == 0)) {
  1483                           
  1484                           ;incstack = 0
  1485  00501A  D0EF               	goto	l739
  1486  00501C                     l6905:
  1487                           
  1488                           ;parcheggio.c: 268: parallelo();
  1489  00501C  ECCF  F025         	call	_parallelo	;wreg free
  1490                           
  1491                           ;parcheggio.c: 269: if (sensor_distance[0] > 50) {
  1492  005020  5002               	movf	_sensor_distance+1,w,c	;volatile
  1493  005022  E104               	bnz	u8530
  1494  005024  0E33               	movlw	51
  1495  005026  5C01               	subwf	_sensor_distance,w,c	;volatile
  1496  005028  A0D8               	btfss	status,0,c
  1497  00502A  D024               	goto	l741
  1498  00502C                     u8530:
  1499                           
  1500                           ;parcheggio.c: 270: if (request_sent == 0) {
  1501  00502C  A857               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1502  00502E  D002               	goto	l6913
  1503  005030  D01F               	goto	l6919
  1504                           
  1505                           ;parcheggio.c: 271: while (!CANisTxReady());
  1506  005032  D000               	goto	l6913
  1507  005034                     l6913:
  1508  005034  ECAB  F032         	call	_CANisTxReady	;wreg free
  1509  005038  0900               	iorlw	0
  1510  00503A  B4D8               	btfsc	status,2,c
  1511  00503C  D7FB               	goto	l6913
  1512                           
  1513                           ;parcheggio.c: 272: CANsendMessage(0b00000001010, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1514  00503E  0E0A               	movlw	10
  1515  005040  0100               	movlb	0	; () banked
  1516  005042  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1517  005044  0E00               	movlw	0
  1518  005046  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1519  005048  0E00               	movlw	0
  1520  00504A  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1521  00504C  0E00               	movlw	0
  1522  00504E  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1523  005050  0E53               	movlw	low _data
  1524  005052  0100               	movlb	0	; () banked
  1525  005054  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1526  005056  0E01               	movlw	high _data
  1527  005058  0100               	movlb	0	; () banked
  1528  00505A  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1529  00505C  0E08               	movlw	8
  1530  00505E  0100               	movlb	0	; () banked
  1531  005060  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1532  005062  0EFC               	movlw	252
  1533  005064  0100               	movlb	0	; () banked
  1534  005066  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1535  005068  ECE9  F011         	call	_CANsendMessage	;wreg free
  1536                           
  1537                           ;parcheggio.c: 273: request_sent = 1;
  1538  00506C  8857               	bsf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1539  00506E  D000               	goto	l6919
  1540  005070                     l6919:
  1541                           
  1542                           ;parcheggio.c: 275: }
  1543                           ;parcheggio.c: 276: LATBbits.LATB4 = 1;
  1544  005070  888A               	bsf	3978,4,c	;volatile
  1545                           
  1546                           ;parcheggio.c: 277: } else {
  1547  005072  D027               	goto	l6923
  1548  005074                     l741:
  1549                           
  1550                           ;parcheggio.c: 278: LATBbits.LATB4 = 0;
  1551  005074  988A               	bcf	3978,4,c	;volatile
  1552                           
  1553                           ;parcheggio.c: 279: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  1554  005076  EE20  F003         	lfsr	2,_sensor_distance+2	;volatile
  1555  00507A  CFDE F1DC          	movff	postinc2,??_park_search
  1556  00507E  CFDD F1DD          	movff	postdec2,??_park_search+1
  1557  005082  0101               	movlb	1	; () banked
  1558  005084  1FDC               	comf	??_park_search& (0+255),f,b
  1559  005086  1FDD               	comf	(??_park_search+1)& (0+255),f,b
  1560  005088  4BDC               	infsnz	??_park_search& (0+255),f,b
  1561  00508A  2BDD               	incf	(??_park_search+1)& (0+255),f,b
  1562  00508C  5001               	movf	_sensor_distance,w,c	;volatile
  1563  00508E  0101               	movlb	1	; () banked
  1564  005090  25DC               	addwf	??_park_search& (0+255),w,b
  1565  005092  0100               	movlb	0	; () banked
  1566  005094  6F77               	movwf	abs@a& (0+255),b
  1567  005096  5002               	movf	_sensor_distance+1,w,c	;volatile
  1568  005098  0101               	movlb	1	; () banked
  1569  00509A  21DD               	addwfc	(??_park_search+1)& (0+255),w,b
  1570  00509C  0100               	movlb	0	; () banked
  1571  00509E  6F78               	movwf	(abs@a+1)& (0+255),b
  1572  0050A0  EC81  F032         	call	_abs	;wreg free
  1573  0050A4  C077  F081         	movff	?_abs,___awtofl@c
  1574  0050A8  C078  F082         	movff	?_abs+1,___awtofl@c+1
  1575  0050AC  EC99  F031         	call	___awtofl	;wreg free
  1576  0050B0  C081  F0D9         	movff	?___awtofl,_alignment_gap	;volatile
  1577  0050B4  C082  F0DA         	movff	?___awtofl+1,_alignment_gap+1	;volatile
  1578  0050B8  C083  F0DB         	movff	?___awtofl+2,_alignment_gap+2	;volatile
  1579  0050BC  C084  F0DC         	movff	?___awtofl+3,_alignment_gap+3	;volatile
  1580  0050C0  D000               	goto	l6923
  1581  0050C2                     l6923:
  1582                           
  1583                           ;parcheggio.c: 280: }
  1584                           ;parcheggio.c: 282: if ((sensor_distance[0] < 50) && (request_sent == 1)&&(sensor_distan
      +                          ce[1] < 50)) {
  1585  0050C2  5002               	movf	_sensor_distance+1,w,c	;volatile
  1586  0050C4  E131               	bnz	l6939
  1587  0050C6  0E32               	movlw	50
  1588  0050C8  5C01               	subwf	_sensor_distance,w,c	;volatile
  1589  0050CA  B0D8               	btfsc	status,0,c
  1590  0050CC  D02D               	goto	l6939
  1591  0050CE  A857               	btfss	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1592  0050D0  D02B               	goto	l6939
  1593  0050D2  5004               	movf	_sensor_distance+3,w,c	;volatile
  1594  0050D4  E129               	bnz	l6939
  1595  0050D6  0E32               	movlw	50
  1596  0050D8  5C03               	subwf	_sensor_distance+2,w,c	;volatile
  1597  0050DA  B0D8               	btfsc	status,0,c
  1598  0050DC  D025               	goto	l6939
  1599                           
  1600                           ;parcheggio.c: 283: counter_distance++;
  1601  0050DE  0100               	movlb	0	; () banked
  1602  0050E0  2BE7               	incf	_counter_distance& (0+255),f,b	;volatile
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;parcheggio.c: 284: if (counter_distance > 1) {
  1606  0050E2  0E01               	movlw	1
  1607  0050E4  0100               	movlb	0	; () banked
  1608  0050E6  65E7               	cpfsgt	_counter_distance& (0+255),b	;volatile
  1609  0050E8  D01F               	goto	l6939
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;parcheggio.c: 285: request_sent = 0;
  1613  0050EA  9857               	bcf	_request_sent/(0+8),_request_sent& (0+7),c	;volatile
  1614                           
  1615                           ; BSR set to: 0
  1616                           
  1617                           ;parcheggio.c: 286: while (!CANisTxReady());
  1618  0050EC  D000               	goto	l6935
  1619  0050EE                     l6935:
  1620  0050EE  ECAB  F032         	call	_CANisTxReady	;wreg free
  1621  0050F2  0900               	iorlw	0
  1622  0050F4  B4D8               	btfsc	status,2,c
  1623  0050F6  D7FB               	goto	l6935
  1624                           
  1625                           ;parcheggio.c: 287: CANsendMessage(0b00000001001, data, 8, CAN_CONFIG_STD_MSG & CAN_REMO
      +                          TE_TX_FRAME & CAN_TX_PRIORITY_0);
  1626  0050F8  0E09               	movlw	9
  1627  0050FA  0100               	movlb	0	; () banked
  1628  0050FC  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1629  0050FE  0E00               	movlw	0
  1630  005100  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1631  005102  0E00               	movlw	0
  1632  005104  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1633  005106  0E00               	movlw	0
  1634  005108  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1635  00510A  0E53               	movlw	low _data
  1636  00510C  0100               	movlb	0	; () banked
  1637  00510E  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1638  005110  0E01               	movlw	high _data
  1639  005112  0100               	movlb	0	; () banked
  1640  005114  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1641  005116  0E08               	movlw	8
  1642  005118  0100               	movlb	0	; () banked
  1643  00511A  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1644  00511C  0EFC               	movlw	252
  1645  00511E  0100               	movlb	0	; () banked
  1646  005120  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1647  005122  ECE9  F011         	call	_CANsendMessage	;wreg free
  1648  005126  D000               	goto	l6939
  1649  005128                     l6939:
  1650                           
  1651                           ;parcheggio.c: 288: }
  1652                           ;parcheggio.c: 289: }
  1653                           ;parcheggio.c: 291: if (distance_received == 1) {
  1654  005128  AC56               	btfss	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1655  00512A  D067               	goto	l739
  1656                           
  1657                           ;parcheggio.c: 292: matematica();
  1658  00512C  EC0B  F019         	call	_matematica	;wreg free
  1659                           
  1660                           ;parcheggio.c: 293: if (distance_average > Pmin) {
  1661  005130  C128  F0B3         	movff	_Pmin,___flge@ff1
  1662  005134  C129  F0B4         	movff	_Pmin+1,___flge@ff1+1
  1663  005138  C12A  F0B5         	movff	_Pmin+2,___flge@ff1+2
  1664  00513C  C12B  F0B6         	movff	_Pmin+3,___flge@ff1+3
  1665  005140  C0E3  F081         	movff	_distance_average,___lwtofl@c	;volatile
  1666  005144  C0E4  F082         	movff	_distance_average+1,___lwtofl@c+1	;volatile
  1667  005148  EC51  F032         	call	___lwtofl	;wreg free
  1668  00514C  C081  F0B7         	movff	?___lwtofl,___flge@ff2
  1669  005150  C082  F0B8         	movff	?___lwtofl+1,___flge@ff2+1
  1670  005154  C083  F0B9         	movff	?___lwtofl+2,___flge@ff2+2
  1671  005158  C084  F0BA         	movff	?___lwtofl+3,___flge@ff2+3
  1672  00515C  EC2A  F02E         	call	___flge	;wreg free
  1673  005160  0100               	movlb	0	; () banked
  1674  005162  B0D8               	btfsc	status,0,c
  1675  005164  D047               	goto	l753
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;parcheggio.c: 294: PORTBbits.RB5 = 1;
  1679  005166  8A81               	bsf	3969,5,c	;volatile
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;parcheggio.c: 295: data[0] = 1;
  1683  005168  0E01               	movlw	1
  1684  00516A  0101               	movlb	1	; () banked
  1685  00516C  6F53               	movwf	_data& (0+255),b	;volatile
  1686                           
  1687                           ; BSR set to: 1
  1688                           ;parcheggio.c: 296: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  1689  00516E  0E0D               	movlw	13
  1690  005170  0100               	movlb	0	; () banked
  1691  005172  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1692  005174  0E00               	movlw	0
  1693  005176  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1694  005178  0E00               	movlw	0
  1695  00517A  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1696  00517C  0E00               	movlw	0
  1697  00517E  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1698  005180  0E53               	movlw	low _data
  1699  005182  0100               	movlb	0	; () banked
  1700  005184  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1701  005186  0E01               	movlw	high _data
  1702  005188  0100               	movlb	0	; () banked
  1703  00518A  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1704  00518C  0E01               	movlw	1
  1705  00518E  0100               	movlb	0	; () banked
  1706  005190  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1707  005192  0EBC               	movlw	188
  1708  005194  0100               	movlb	0	; () banked
  1709  005196  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1710  005198  ECE9  F011         	call	_CANsendMessage	;wreg free
  1711                           
  1712                           ;parcheggio.c: 297: if ((request_sent1 == 0)&&(sensor_distance[0] < 40)) {
  1713  00519C  BA57               	btfsc	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1714  00519E  D02D               	goto	l739
  1715  0051A0  5002               	movf	_sensor_distance+1,w,c	;volatile
  1716  0051A2  E12B               	bnz	l739
  1717  0051A4  0E28               	movlw	40
  1718  0051A6  5C01               	subwf	_sensor_distance,w,c	;volatile
  1719  0051A8  B0D8               	btfsc	status,0,c
  1720  0051AA  D027               	goto	l739
  1721                           
  1722                           ;parcheggio.c: 298: data_test[0] = 50;
  1723  0051AC  0E32               	movlw	50
  1724  0051AE  0101               	movlb	1	; () banked
  1725  0051B0  6F73               	movwf	_data_test& (0+255),b	;volatile
  1726                           
  1727                           ; BSR set to: 1
  1728                           ;parcheggio.c: 299: asd = 1;
  1729  0051B2  8456               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  1730                           
  1731                           ; BSR set to: 1
  1732                           
  1733                           ;parcheggio.c: 300: while (!CANisTxReady());
  1734  0051B4  D000               	goto	l6959
  1735  0051B6                     l6959:
  1736  0051B6  ECAB  F032         	call	_CANisTxReady	;wreg free
  1737  0051BA  0900               	iorlw	0
  1738  0051BC  B4D8               	btfsc	status,2,c
  1739  0051BE  D7FB               	goto	l6959
  1740                           
  1741                           ;parcheggio.c: 301: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  1742  0051C0  0E0F               	movlw	15
  1743  0051C2  0100               	movlb	0	; () banked
  1744  0051C4  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  1745  0051C6  0E00               	movlw	0
  1746  0051C8  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  1747  0051CA  0E00               	movlw	0
  1748  0051CC  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  1749  0051CE  0E00               	movlw	0
  1750  0051D0  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  1751  0051D2  0E73               	movlw	low _data_test
  1752  0051D4  0100               	movlb	0	; () banked
  1753  0051D6  6F7B               	movwf	CANsendMessage@data& (0+255),b
  1754  0051D8  0E01               	movlw	high _data_test
  1755  0051DA  0100               	movlb	0	; () banked
  1756  0051DC  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  1757  0051DE  0E08               	movlw	8
  1758  0051E0  0100               	movlb	0	; () banked
  1759  0051E2  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  1760  0051E4  0EBC               	movlw	188
  1761  0051E6  0100               	movlb	0	; () banked
  1762  0051E8  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  1763  0051EA  ECE9  F011         	call	_CANsendMessage	;wreg free
  1764                           
  1765                           ;parcheggio.c: 303: distance_received1 = 0;
  1766  0051EE  9E56               	bcf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
  1767                           
  1768                           ;parcheggio.c: 304: request_sent1 = 1;
  1769  0051F0  8A57               	bsf	_request_sent1/(0+8),_request_sent1& (0+7),c	;volatile
  1770                           
  1771                           ;parcheggio.c: 305: }
  1772                           ;parcheggio.c: 306: } else {
  1773  0051F2  D003               	goto	l739
  1774  0051F4                     l753:
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;parcheggio.c: 307: distance_received = 0;
  1778  0051F4  9C56               	bcf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
  1779                           
  1780                           ;parcheggio.c: 308: PORTBbits.RB5 = 0;
  1781  0051F6  9A81               	bcf	3969,5,c	;volatile
  1782                           
  1783                           ; BSR set to: 0
  1784  0051F8  D000               	goto	l739
  1785  0051FA                     l739:
  1786  0051FA  A256               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  1787  0051FC  0012               	return	
  1788  0051FE  BA81               	btfsc	3969,5,c	;volatile
  1789  005200  0012               	return	
  1790  005202  D70C               	goto	l6905
  1791  005204  0012               	return	
  1792  005206  0012               	return		;funcret
  1793  005208                     __end_of_park_search:
  1794                           	opt stack 0
  1795                           tblptru	equ	0xFF8
  1796                           tblptrh	equ	0xFF7
  1797                           tblptrl	equ	0xFF6
  1798                           tablat	equ	0xFF5
  1799                           postinc0	equ	0xFEE
  1800                           wreg	equ	0xFE8
  1801                           postinc2	equ	0xFDE
  1802                           postdec2	equ	0xFDD
  1803                           status	equ	0xFD8
  1804                           
  1805 ;; *************** function _matematica *****************
  1806 ;; Defined at:
  1807 ;;		line 513 in file "parcheggio.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;		None
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;  raggio          4   85[BANK1 ] const float 
  1812 ;;  larghezza       4   81[BANK1 ] const float 
  1813 ;; Return value:  Size  Location     Type
  1814 ;;		None               void
  1815 ;; Registers used:
  1816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1823 ;;      Locals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  1824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1825 ;;      Totals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  1826 ;;Total ram usage:       36 bytes
  1827 ;; Hardware stack levels used:    1
  1828 ;; Hardware stack levels required when called:   10
  1829 ;; This function calls:
  1830 ;;		___fladd
  1831 ;;		___fldiv
  1832 ;;		___flmul
  1833 ;;		___flneg
  1834 ;;		_asin
  1835 ;;		_cos
  1836 ;; This function is called by:
  1837 ;;		_park_search
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text2
  1842  003216                     __ptext2:
  1843                           	opt stack 0
  1844  003216                     _matematica:
  1845                           	opt stack 19
  1846                           
  1847                           ;parcheggio.c: 514: const float raggio = 56;
  1848                           
  1849                           ;incstack = 0
  1850  003216  0E00               	movlw	0
  1851  003218  0101               	movlb	1	; () banked
  1852  00321A  6FD8               	movwf	matematica@raggio& (0+255),b
  1853  00321C  0E00               	movlw	0
  1854  00321E  6FD9               	movwf	(matematica@raggio+1)& (0+255),b
  1855  003220  0E60               	movlw	96
  1856  003222  6FDA               	movwf	(matematica@raggio+2)& (0+255),b
  1857  003224  0E42               	movlw	66
  1858  003226  6FDB               	movwf	(matematica@raggio+3)& (0+255),b
  1859                           
  1860                           ;parcheggio.c: 515: const float larghezza = 33;
  1861  003228  0E00               	movlw	0
  1862  00322A  0101               	movlb	1	; () banked
  1863  00322C  6FD4               	movwf	matematica@larghezza& (0+255),b
  1864  00322E  0E00               	movlw	0
  1865  003230  6FD5               	movwf	(matematica@larghezza+1)& (0+255),b
  1866  003232  0E04               	movlw	4
  1867  003234  6FD6               	movwf	(matematica@larghezza+2)& (0+255),b
  1868  003236  0E42               	movlw	66
  1869  003238  6FD7               	movwf	(matematica@larghezza+3)& (0+255),b
  1870                           
  1871                           ; BSR set to: 1
  1872                           ;parcheggio.c: 516: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  1873  00323A  C134  F0A3         	movff	_bordo,___fladd@f2
  1874  00323E  C135  F0A4         	movff	_bordo+1,___fladd@f2+1
  1875  003242  C136  F0A5         	movff	_bordo+2,___fladd@f2+2
  1876  003246  C137  F0A6         	movff	_bordo+3,___fladd@f2+3
  1877  00324A  0E00               	movlw	0
  1878  00324C  0100               	movlb	0	; () banked
  1879  00324E  6F94               	movwf	___fldiv@f2& (0+255),b
  1880  003250  0E00               	movlw	0
  1881  003252  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  1882  003254  0E00               	movlw	0
  1883  003256  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  1884  003258  0E40               	movlw	64
  1885  00325A  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  1886  00325C  C1D4  F090         	movff	matematica@larghezza,___fldiv@f1
  1887  003260  C1D5  F091         	movff	matematica@larghezza+1,___fldiv@f1+1
  1888  003264  C1D6  F092         	movff	matematica@larghezza+2,___fldiv@f1+2
  1889  003268  C1D7  F093         	movff	matematica@larghezza+3,___fldiv@f1+3
  1890  00326C  EC5D  F02B         	call	___fldiv	;wreg free
  1891  003270  C090  F09F         	movff	?___fldiv,___fladd@f1
  1892  003274  C091  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  1893  003278  C092  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  1894  00327C  C093  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  1895  003280  EC6E  F023         	call	___fladd	;wreg free
  1896  003284  C09F  F0AB         	movff	?___fladd,___flneg@f1
  1897  003288  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  1898  00328C  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  1899  003290  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  1900  003294  ECDE  F031         	call	___flneg	;wreg free
  1901  003298  C0AB  F1B8         	movff	?___flneg,_matematica$3672
  1902  00329C  C0AC  F1B9         	movff	?___flneg+1,_matematica$3672+1
  1903  0032A0  C0AD  F1BA         	movff	?___flneg+2,_matematica$3672+2
  1904  0032A4  C0AE  F1BB         	movff	?___flneg+3,_matematica$3672+3
  1905                           
  1906                           ;parcheggio.c: 516: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  1907  0032A8  C1B8  F0A3         	movff	_matematica$3672,___fladd@f2
  1908  0032AC  C1B9  F0A4         	movff	_matematica$3672+1,___fladd@f2+1
  1909  0032B0  C1BA  F0A5         	movff	_matematica$3672+2,___fladd@f2+2
  1910  0032B4  C1BB  F0A6         	movff	_matematica$3672+3,___fladd@f2+3
  1911  0032B8  0E00               	movlw	0
  1912  0032BA  0100               	movlb	0	; () banked
  1913  0032BC  6F85               	movwf	___flmul@f2& (0+255),b
  1914  0032BE  0E00               	movlw	0
  1915  0032C0  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  1916  0032C2  0E00               	movlw	0
  1917  0032C4  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  1918  0032C6  0E40               	movlw	64
  1919  0032C8  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  1920  0032CA  C1D8  F081         	movff	matematica@raggio,___flmul@f1
  1921  0032CE  C1D9  F082         	movff	matematica@raggio+1,___flmul@f1+1
  1922  0032D2  C1DA  F083         	movff	matematica@raggio+2,___flmul@f1+2
  1923  0032D6  C1DB  F084         	movff	matematica@raggio+3,___flmul@f1+3
  1924  0032DA  ECAB  F02A         	call	___flmul	;wreg free
  1925  0032DE  C081  F09F         	movff	?___flmul,___fladd@f1
  1926  0032E2  C082  F0A0         	movff	?___flmul+1,___fladd@f1+1
  1927  0032E6  C083  F0A1         	movff	?___flmul+2,___fladd@f1+2
  1928  0032EA  C084  F0A2         	movff	?___flmul+3,___fladd@f1+3
  1929  0032EE  EC6E  F023         	call	___fladd	;wreg free
  1930  0032F2  C09F  F1BC         	movff	?___fladd,_matematica$3673
  1931  0032F6  C0A0  F1BD         	movff	?___fladd+1,_matematica$3673+1
  1932  0032FA  C0A1  F1BE         	movff	?___fladd+2,_matematica$3673+2
  1933  0032FE  C0A2  F1BF         	movff	?___fladd+3,_matematica$3673+3
  1934                           
  1935                           ;parcheggio.c: 516: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  1936  003302  0E00               	movlw	0
  1937  003304  0100               	movlb	0	; () banked
  1938  003306  6F94               	movwf	___fldiv@f2& (0+255),b
  1939  003308  0E00               	movlw	0
  1940  00330A  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  1941  00330C  0E00               	movlw	0
  1942  00330E  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  1943  003310  0E40               	movlw	64
  1944  003312  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  1945  003314  C1D4  F090         	movff	matematica@larghezza,___fldiv@f1
  1946  003318  C1D5  F091         	movff	matematica@larghezza+1,___fldiv@f1+1
  1947  00331C  C1D6  F092         	movff	matematica@larghezza+2,___fldiv@f1+2
  1948  003320  C1D7  F093         	movff	matematica@larghezza+3,___fldiv@f1+3
  1949  003324  EC5D  F02B         	call	___fldiv	;wreg free
  1950  003328  C090  F0AB         	movff	?___fldiv,___flneg@f1
  1951  00332C  C091  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  1952  003330  C092  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  1953  003334  C093  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  1954  003338  ECDE  F031         	call	___flneg	;wreg free
  1955  00333C  C0AB  F0A3         	movff	?___flneg,___fladd@f2
  1956  003340  C0AC  F0A4         	movff	?___flneg+1,___fladd@f2+1
  1957  003344  C0AD  F0A5         	movff	?___flneg+2,___fladd@f2+2
  1958  003348  C0AE  F0A6         	movff	?___flneg+3,___fladd@f2+3
  1959  00334C  C1BC  F09F         	movff	_matematica$3673,___fladd@f1
  1960  003350  C1BD  F0A0         	movff	_matematica$3673+1,___fladd@f1+1
  1961  003354  C1BE  F0A1         	movff	_matematica$3673+2,___fladd@f1+2
  1962  003358  C1BF  F0A2         	movff	_matematica$3673+3,___fladd@f1+3
  1963  00335C  EC6E  F023         	call	___fladd	;wreg free
  1964  003360  C09F  F1C0         	movff	?___fladd,_matematica$3674
  1965  003364  C0A0  F1C1         	movff	?___fladd+1,_matematica$3674+1
  1966  003368  C0A1  F1C2         	movff	?___fladd+2,_matematica$3674+2
  1967  00336C  C0A2  F1C3         	movff	?___fladd+3,_matematica$3674+3
  1968                           
  1969                           ;parcheggio.c: 516: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  1970  003370  C1C0  F090         	movff	_matematica$3674,___fldiv@f1
  1971  003374  C1C1  F091         	movff	_matematica$3674+1,___fldiv@f1+1
  1972  003378  C1C2  F092         	movff	_matematica$3674+2,___fldiv@f1+2
  1973  00337C  C1C3  F093         	movff	_matematica$3674+3,___fldiv@f1+3
  1974  003380  0E00               	movlw	0
  1975  003382  0100               	movlb	0	; () banked
  1976  003384  6F85               	movwf	___flmul@f2& (0+255),b
  1977  003386  0E00               	movlw	0
  1978  003388  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  1979  00338A  0E00               	movlw	0
  1980  00338C  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  1981  00338E  0E40               	movlw	64
  1982  003390  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  1983  003392  C1D8  F081         	movff	matematica@raggio,___flmul@f1
  1984  003396  C1D9  F082         	movff	matematica@raggio+1,___flmul@f1+1
  1985  00339A  C1DA  F083         	movff	matematica@raggio+2,___flmul@f1+2
  1986  00339E  C1DB  F084         	movff	matematica@raggio+3,___flmul@f1+3
  1987  0033A2  ECAB  F02A         	call	___flmul	;wreg free
  1988  0033A6  C081  F094         	movff	?___flmul,___fldiv@f2
  1989  0033AA  C082  F095         	movff	?___flmul+1,___fldiv@f2+1
  1990  0033AE  C083  F096         	movff	?___flmul+2,___fldiv@f2+2
  1991  0033B2  C084  F097         	movff	?___flmul+3,___fldiv@f2+3
  1992  0033B6  EC5D  F02B         	call	___fldiv	;wreg free
  1993  0033BA  C090  F1C4         	movff	?___fldiv,_matematica$3675
  1994  0033BE  C091  F1C5         	movff	?___fldiv+1,_matematica$3675+1
  1995  0033C2  C092  F1C6         	movff	?___fldiv+2,_matematica$3675+2
  1996  0033C6  C093  F1C7         	movff	?___fldiv+3,_matematica$3675+3
  1997                           
  1998                           ;parcheggio.c: 516: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  1999  0033CA  C1C4  F194         	movff	_matematica$3675,asin@x
  2000  0033CE  C1C5  F195         	movff	_matematica$3675+1,asin@x+1
  2001  0033D2  C1C6  F196         	movff	_matematica$3675+2,asin@x+2
  2002  0033D6  C1C7  F197         	movff	_matematica$3675+3,asin@x+3
  2003  0033DA  EC4E  F020         	call	_asin	;wreg free
  2004  0033DE  C194  F12C         	movff	?_asin,_alfa
  2005  0033E2  C195  F12D         	movff	?_asin+1,_alfa+1
  2006  0033E6  C196  F12E         	movff	?_asin+2,_alfa+2
  2007  0033EA  C197  F12F         	movff	?_asin+3,_alfa+3
  2008                           
  2009                           ;parcheggio.c: 517: alfa = alfa / 3.14159265358979323846 * 180;
  2010  0033EE  0EDB               	movlw	219
  2011  0033F0  0100               	movlb	0	; () banked
  2012  0033F2  6F94               	movwf	___fldiv@f2& (0+255),b
  2013  0033F4  0E0F               	movlw	15
  2014  0033F6  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2015  0033F8  0E49               	movlw	73
  2016  0033FA  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2017  0033FC  0E40               	movlw	64
  2018  0033FE  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2019  003400  C12C  F090         	movff	_alfa,___fldiv@f1
  2020  003404  C12D  F091         	movff	_alfa+1,___fldiv@f1+1
  2021  003408  C12E  F092         	movff	_alfa+2,___fldiv@f1+2
  2022  00340C  C12F  F093         	movff	_alfa+3,___fldiv@f1+3
  2023  003410  EC5D  F02B         	call	___fldiv	;wreg free
  2024  003414  C090  F081         	movff	?___fldiv,___flmul@f1
  2025  003418  C091  F082         	movff	?___fldiv+1,___flmul@f1+1
  2026  00341C  C092  F083         	movff	?___fldiv+2,___flmul@f1+2
  2027  003420  C093  F084         	movff	?___fldiv+3,___flmul@f1+3
  2028  003424  0E00               	movlw	0
  2029  003426  0100               	movlb	0	; () banked
  2030  003428  6F85               	movwf	___flmul@f2& (0+255),b
  2031  00342A  0E00               	movlw	0
  2032  00342C  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2033  00342E  0E34               	movlw	52
  2034  003430  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2035  003432  0E43               	movlw	67
  2036  003434  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2037  003436  ECAB  F02A         	call	___flmul	;wreg free
  2038  00343A  C081  F12C         	movff	?___flmul,_alfa
  2039  00343E  C082  F12D         	movff	?___flmul+1,_alfa+1
  2040  003442  C083  F12E         	movff	?___flmul+2,_alfa+2
  2041  003446  C084  F12F         	movff	?___flmul+3,_alfa+3
  2042                           
  2043                           ;parcheggio.c: 518: beta = 90 - alfa;
  2044  00344A  C12C  F0AB         	movff	_alfa,___flneg@f1
  2045  00344E  C12D  F0AC         	movff	_alfa+1,___flneg@f1+1
  2046  003452  C12E  F0AD         	movff	_alfa+2,___flneg@f1+2
  2047  003456  C12F  F0AE         	movff	_alfa+3,___flneg@f1+3
  2048  00345A  ECDE  F031         	call	___flneg	;wreg free
  2049  00345E  C0AB  F09F         	movff	?___flneg,___fladd@f1
  2050  003462  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  2051  003466  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  2052  00346A  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  2053  00346E  0E00               	movlw	0
  2054  003470  0100               	movlb	0	; () banked
  2055  003472  6FA3               	movwf	___fladd@f2& (0+255),b
  2056  003474  0E00               	movlw	0
  2057  003476  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2058  003478  0EB4               	movlw	180
  2059  00347A  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2060  00347C  0E42               	movlw	66
  2061  00347E  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2062  003480  EC6E  F023         	call	___fladd	;wreg free
  2063  003484  C09F  F130         	movff	?___fladd,_beta
  2064  003488  C0A0  F131         	movff	?___fladd+1,_beta+1
  2065  00348C  C0A1  F132         	movff	?___fladd+2,_beta+2
  2066  003490  C0A2  F133         	movff	?___fladd+3,_beta+3
  2067                           
  2068                           ;parcheggio.c: 519: alfa = (alfa * 3.14159265358979323846) / 180;
  2069  003494  0EDB               	movlw	219
  2070  003496  0100               	movlb	0	; () banked
  2071  003498  6F85               	movwf	___flmul@f2& (0+255),b
  2072  00349A  0E0F               	movlw	15
  2073  00349C  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2074  00349E  0E49               	movlw	73
  2075  0034A0  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2076  0034A2  0E40               	movlw	64
  2077  0034A4  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2078  0034A6  C12C  F081         	movff	_alfa,___flmul@f1
  2079  0034AA  C12D  F082         	movff	_alfa+1,___flmul@f1+1
  2080  0034AE  C12E  F083         	movff	_alfa+2,___flmul@f1+2
  2081  0034B2  C12F  F084         	movff	_alfa+3,___flmul@f1+3
  2082  0034B6  ECAB  F02A         	call	___flmul	;wreg free
  2083  0034BA  C081  F090         	movff	?___flmul,___fldiv@f1
  2084  0034BE  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  2085  0034C2  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  2086  0034C6  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  2087  0034CA  0E00               	movlw	0
  2088  0034CC  0100               	movlb	0	; () banked
  2089  0034CE  6F94               	movwf	___fldiv@f2& (0+255),b
  2090  0034D0  0E00               	movlw	0
  2091  0034D2  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2092  0034D4  0E34               	movlw	52
  2093  0034D6  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2094  0034D8  0E43               	movlw	67
  2095  0034DA  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2096  0034DC  EC5D  F02B         	call	___fldiv	;wreg free
  2097  0034E0  C090  F12C         	movff	?___fldiv,_alfa
  2098  0034E4  C091  F12D         	movff	?___fldiv+1,_alfa+1
  2099  0034E8  C092  F12E         	movff	?___fldiv+2,_alfa+2
  2100  0034EC  C093  F12F         	movff	?___fldiv+3,_alfa+3
  2101                           
  2102                           ;parcheggio.c: 520: n = cos(alfa);
  2103  0034F0  C12C  F1B0         	movff	_alfa,cos@f
  2104  0034F4  C12D  F1B1         	movff	_alfa+1,cos@f+1
  2105  0034F8  C12E  F1B2         	movff	_alfa+2,cos@f+2
  2106  0034FC  C12F  F1B3         	movff	_alfa+3,cos@f+3
  2107  003500  ECA6  F02E         	call	_cos	;wreg free
  2108  003504  C1B0  F138         	movff	?_cos,_n
  2109  003508  C1B1  F139         	movff	?_cos+1,_n+1
  2110  00350C  C1B2  F13A         	movff	?_cos+2,_n+2
  2111  003510  C1B3  F13B         	movff	?_cos+3,_n+3
  2112                           
  2113                           ;parcheggio.c: 521: n = 2 * raggio *n;
  2114  003514  C138  F085         	movff	_n,___flmul@f2
  2115  003518  C139  F086         	movff	_n+1,___flmul@f2+1
  2116  00351C  C13A  F087         	movff	_n+2,___flmul@f2+2
  2117  003520  C13B  F088         	movff	_n+3,___flmul@f2+3
  2118  003524  C1D8  F081         	movff	matematica@raggio,___flmul@f1
  2119  003528  C1D9  F082         	movff	matematica@raggio+1,___flmul@f1+1
  2120  00352C  C1DA  F083         	movff	matematica@raggio+2,___flmul@f1+2
  2121  003530  C1DB  F084         	movff	matematica@raggio+3,___flmul@f1+3
  2122  003534  ECAB  F02A         	call	___flmul	;wreg free
  2123  003538  C081  F1D0         	movff	?___flmul,_matematica$3676
  2124  00353C  C082  F1D1         	movff	?___flmul+1,_matematica$3676+1
  2125  003540  C083  F1D2         	movff	?___flmul+2,_matematica$3676+2
  2126  003544  C084  F1D3         	movff	?___flmul+3,_matematica$3676+3
  2127                           
  2128                           ;parcheggio.c: 521: n = 2 * raggio *n;
  2129  003548  C1D0  F081         	movff	_matematica$3676,___flmul@f1
  2130  00354C  C1D1  F082         	movff	_matematica$3676+1,___flmul@f1+1
  2131  003550  C1D2  F083         	movff	_matematica$3676+2,___flmul@f1+2
  2132  003554  C1D3  F084         	movff	_matematica$3676+3,___flmul@f1+3
  2133  003558  0E00               	movlw	0
  2134  00355A  0100               	movlb	0	; () banked
  2135  00355C  6F85               	movwf	___flmul@f2& (0+255),b
  2136  00355E  0E00               	movlw	0
  2137  003560  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2138  003562  0E00               	movlw	0
  2139  003564  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2140  003566  0E40               	movlw	64
  2141  003568  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2142  00356A  ECAB  F02A         	call	___flmul	;wreg free
  2143  00356E  C081  F138         	movff	?___flmul,_n
  2144  003572  C082  F139         	movff	?___flmul+1,_n+1
  2145  003576  C083  F13A         	movff	?___flmul+2,_n+2
  2146  00357A  C084  F13B         	movff	?___flmul+3,_n+3
  2147                           
  2148                           ;parcheggio.c: 522: prima_sterzata = 2 * 3.14159265358979323846 * raggio * (beta / 360);
  2149  00357E  C1D8  F085         	movff	matematica@raggio,___flmul@f2
  2150  003582  C1D9  F086         	movff	matematica@raggio+1,___flmul@f2+1
  2151  003586  C1DA  F087         	movff	matematica@raggio+2,___flmul@f2+2
  2152  00358A  C1DB  F088         	movff	matematica@raggio+3,___flmul@f2+3
  2153  00358E  0E00               	movlw	0
  2154  003590  0100               	movlb	0	; () banked
  2155  003592  6F94               	movwf	___fldiv@f2& (0+255),b
  2156  003594  0E00               	movlw	0
  2157  003596  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2158  003598  0EB4               	movlw	180
  2159  00359A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2160  00359C  0E43               	movlw	67
  2161  00359E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2162  0035A0  C130  F090         	movff	_beta,___fldiv@f1
  2163  0035A4  C131  F091         	movff	_beta+1,___fldiv@f1+1
  2164  0035A8  C132  F092         	movff	_beta+2,___fldiv@f1+2
  2165  0035AC  C133  F093         	movff	_beta+3,___fldiv@f1+3
  2166  0035B0  EC5D  F02B         	call	___fldiv	;wreg free
  2167  0035B4  C090  F081         	movff	?___fldiv,___flmul@f1
  2168  0035B8  C091  F082         	movff	?___fldiv+1,___flmul@f1+1
  2169  0035BC  C092  F083         	movff	?___fldiv+2,___flmul@f1+2
  2170  0035C0  C093  F084         	movff	?___fldiv+3,___flmul@f1+3
  2171  0035C4  ECAB  F02A         	call	___flmul	;wreg free
  2172  0035C8  C081  F1D0         	movff	?___flmul,_matematica$3676
  2173  0035CC  C082  F1D1         	movff	?___flmul+1,_matematica$3676+1
  2174  0035D0  C083  F1D2         	movff	?___flmul+2,_matematica$3676+2
  2175  0035D4  C084  F1D3         	movff	?___flmul+3,_matematica$3676+3
  2176                           
  2177                           ;parcheggio.c: 522: prima_sterzata = 2 * 3.14159265358979323846 * raggio * (beta / 360);
  2178  0035D8  C1D0  F081         	movff	_matematica$3676,___flmul@f1
  2179  0035DC  C1D1  F082         	movff	_matematica$3676+1,___flmul@f1+1
  2180  0035E0  C1D2  F083         	movff	_matematica$3676+2,___flmul@f1+2
  2181  0035E4  C1D3  F084         	movff	_matematica$3676+3,___flmul@f1+3
  2182  0035E8  0EDB               	movlw	219
  2183  0035EA  0100               	movlb	0	; () banked
  2184  0035EC  6F85               	movwf	___flmul@f2& (0+255),b
  2185  0035EE  0E0F               	movlw	15
  2186  0035F0  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2187  0035F2  0EC9               	movlw	201
  2188  0035F4  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2189  0035F6  0E40               	movlw	64
  2190  0035F8  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2191  0035FA  ECAB  F02A         	call	___flmul	;wreg free
  2192  0035FE  C081  F13C         	movff	?___flmul,_prima_sterzata
  2193  003602  C082  F13D         	movff	?___flmul+1,_prima_sterzata+1
  2194  003606  C083  F13E         	movff	?___flmul+2,_prima_sterzata+2
  2195  00360A  C084  F13F         	movff	?___flmul+3,_prima_sterzata+3
  2196                           
  2197                           ;parcheggio.c: 523: K_var = raggio + (2 * larghezza / 3);
  2198  00360E  0E00               	movlw	0
  2199  003610  0100               	movlb	0	; () banked
  2200  003612  6F94               	movwf	___fldiv@f2& (0+255),b
  2201  003614  0E00               	movlw	0
  2202  003616  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2203  003618  0E40               	movlw	64
  2204  00361A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2205  00361C  0E40               	movlw	64
  2206  00361E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2207  003620  0E00               	movlw	0
  2208  003622  0100               	movlb	0	; () banked
  2209  003624  6F85               	movwf	___flmul@f2& (0+255),b
  2210  003626  0E00               	movlw	0
  2211  003628  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2212  00362A  0E00               	movlw	0
  2213  00362C  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2214  00362E  0E40               	movlw	64
  2215  003630  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2216  003632  C1D4  F081         	movff	matematica@larghezza,___flmul@f1
  2217  003636  C1D5  F082         	movff	matematica@larghezza+1,___flmul@f1+1
  2218  00363A  C1D6  F083         	movff	matematica@larghezza+2,___flmul@f1+2
  2219  00363E  C1D7  F084         	movff	matematica@larghezza+3,___flmul@f1+3
  2220  003642  ECAB  F02A         	call	___flmul	;wreg free
  2221  003646  C081  F090         	movff	?___flmul,___fldiv@f1
  2222  00364A  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  2223  00364E  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  2224  003652  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  2225  003656  EC5D  F02B         	call	___fldiv	;wreg free
  2226  00365A  C090  F09F         	movff	?___fldiv,___fladd@f1
  2227  00365E  C091  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  2228  003662  C092  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  2229  003666  C093  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  2230  00366A  C1D8  F0A3         	movff	matematica@raggio,___fladd@f2
  2231  00366E  C1D9  F0A4         	movff	matematica@raggio+1,___fladd@f2+1
  2232  003672  C1DA  F0A5         	movff	matematica@raggio+2,___fladd@f2+2
  2233  003676  C1DB  F0A6         	movff	matematica@raggio+3,___fladd@f2+3
  2234  00367A  EC6E  F023         	call	___fladd	;wreg free
  2235  00367E  C09F  F124         	movff	?___fladd,_K_var
  2236  003682  C0A0  F125         	movff	?___fladd+1,_K_var+1
  2237  003686  C0A1  F126         	movff	?___fladd+2,_K_var+2
  2238  00368A  C0A2  F127         	movff	?___fladd+3,_K_var+3
  2239                           
  2240                           ;parcheggio.c: 524: J_var = raggio - (2 * larghezza / 3);
  2241  00368E  0E00               	movlw	0
  2242  003690  0100               	movlb	0	; () banked
  2243  003692  6F94               	movwf	___fldiv@f2& (0+255),b
  2244  003694  0E00               	movlw	0
  2245  003696  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2246  003698  0E40               	movlw	64
  2247  00369A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2248  00369C  0E40               	movlw	64
  2249  00369E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2250  0036A0  0E00               	movlw	0
  2251  0036A2  0100               	movlb	0	; () banked
  2252  0036A4  6F85               	movwf	___flmul@f2& (0+255),b
  2253  0036A6  0E00               	movlw	0
  2254  0036A8  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2255  0036AA  0E00               	movlw	0
  2256  0036AC  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2257  0036AE  0E40               	movlw	64
  2258  0036B0  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2259  0036B2  C1D4  F081         	movff	matematica@larghezza,___flmul@f1
  2260  0036B6  C1D5  F082         	movff	matematica@larghezza+1,___flmul@f1+1
  2261  0036BA  C1D6  F083         	movff	matematica@larghezza+2,___flmul@f1+2
  2262  0036BE  C1D7  F084         	movff	matematica@larghezza+3,___flmul@f1+3
  2263  0036C2  ECAB  F02A         	call	___flmul	;wreg free
  2264  0036C6  C081  F090         	movff	?___flmul,___fldiv@f1
  2265  0036CA  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  2266  0036CE  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  2267  0036D2  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  2268  0036D6  EC5D  F02B         	call	___fldiv	;wreg free
  2269  0036DA  C090  F0AB         	movff	?___fldiv,___flneg@f1
  2270  0036DE  C091  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  2271  0036E2  C092  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  2272  0036E6  C093  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  2273  0036EA  ECDE  F031         	call	___flneg	;wreg free
  2274  0036EE  C0AB  F09F         	movff	?___flneg,___fladd@f1
  2275  0036F2  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  2276  0036F6  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  2277  0036FA  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  2278  0036FE  C1D8  F0A3         	movff	matematica@raggio,___fladd@f2
  2279  003702  C1D9  F0A4         	movff	matematica@raggio+1,___fladd@f2+1
  2280  003706  C1DA  F0A5         	movff	matematica@raggio+2,___fladd@f2+2
  2281  00370A  C1DB  F0A6         	movff	matematica@raggio+3,___fladd@f2+3
  2282  00370E  EC6E  F023         	call	___fladd	;wreg free
  2283  003712  C09F  F120         	movff	?___fladd,_J_var
  2284  003716  C0A0  F121         	movff	?___fladd+1,_J_var+1
  2285  00371A  C0A1  F122         	movff	?___fladd+2,_J_var+2
  2286  00371E  C0A2  F123         	movff	?___fladd+3,_J_var+3
  2287                           
  2288                           ;parcheggio.c: 525: Pmin = K_var * cos(asin((J_var / K_var)));
  2289  003722  C124  F094         	movff	_K_var,___fldiv@f2
  2290  003726  C125  F095         	movff	_K_var+1,___fldiv@f2+1
  2291  00372A  C126  F096         	movff	_K_var+2,___fldiv@f2+2
  2292  00372E  C127  F097         	movff	_K_var+3,___fldiv@f2+3
  2293  003732  C120  F090         	movff	_J_var,___fldiv@f1
  2294  003736  C121  F091         	movff	_J_var+1,___fldiv@f1+1
  2295  00373A  C122  F092         	movff	_J_var+2,___fldiv@f1+2
  2296  00373E  C123  F093         	movff	_J_var+3,___fldiv@f1+3
  2297  003742  EC5D  F02B         	call	___fldiv	;wreg free
  2298  003746  C090  F1C8         	movff	?___fldiv,_matematica$3677
  2299  00374A  C091  F1C9         	movff	?___fldiv+1,_matematica$3677+1
  2300  00374E  C092  F1CA         	movff	?___fldiv+2,_matematica$3677+2
  2301  003752  C093  F1CB         	movff	?___fldiv+3,_matematica$3677+3
  2302                           
  2303                           ;parcheggio.c: 525: Pmin = K_var * cos(asin((J_var / K_var)));
  2304  003756  C1C8  F194         	movff	_matematica$3677,asin@x
  2305  00375A  C1C9  F195         	movff	_matematica$3677+1,asin@x+1
  2306  00375E  C1CA  F196         	movff	_matematica$3677+2,asin@x+2
  2307  003762  C1CB  F197         	movff	_matematica$3677+3,asin@x+3
  2308  003766  EC4E  F020         	call	_asin	;wreg free
  2309  00376A  C194  F1B0         	movff	?_asin,cos@f
  2310  00376E  C195  F1B1         	movff	?_asin+1,cos@f+1
  2311  003772  C196  F1B2         	movff	?_asin+2,cos@f+2
  2312  003776  C197  F1B3         	movff	?_asin+3,cos@f+3
  2313  00377A  ECA6  F02E         	call	_cos	;wreg free
  2314  00377E  C1B0  F1CC         	movff	?_cos,_matematica$3678
  2315  003782  C1B1  F1CD         	movff	?_cos+1,_matematica$3678+1
  2316  003786  C1B2  F1CE         	movff	?_cos+2,_matematica$3678+2
  2317  00378A  C1B3  F1CF         	movff	?_cos+3,_matematica$3678+3
  2318                           
  2319                           ;parcheggio.c: 525: Pmin = K_var * cos(asin((J_var / K_var)));
  2320  00378E  C1CC  F081         	movff	_matematica$3678,___flmul@f1
  2321  003792  C1CD  F082         	movff	_matematica$3678+1,___flmul@f1+1
  2322  003796  C1CE  F083         	movff	_matematica$3678+2,___flmul@f1+2
  2323  00379A  C1CF  F084         	movff	_matematica$3678+3,___flmul@f1+3
  2324  00379E  C124  F085         	movff	_K_var,___flmul@f2
  2325  0037A2  C125  F086         	movff	_K_var+1,___flmul@f2+1
  2326  0037A6  C126  F087         	movff	_K_var+2,___flmul@f2+2
  2327  0037AA  C127  F088         	movff	_K_var+3,___flmul@f2+3
  2328  0037AE  ECAB  F02A         	call	___flmul	;wreg free
  2329  0037B2  C081  F128         	movff	?___flmul,_Pmin
  2330  0037B6  C082  F129         	movff	?___flmul+1,_Pmin+1
  2331  0037BA  C083  F12A         	movff	?___flmul+2,_Pmin+2
  2332  0037BE  C084  F12B         	movff	?___flmul+3,_Pmin+3
  2333  0037C2  0012               	return		;funcret
  2334  0037C4                     __end_of_matematica:
  2335                           	opt stack 0
  2336                           tblptru	equ	0xFF8
  2337                           tblptrh	equ	0xFF7
  2338                           tblptrl	equ	0xFF6
  2339                           tablat	equ	0xFF5
  2340                           postinc0	equ	0xFEE
  2341                           wreg	equ	0xFE8
  2342                           postinc2	equ	0xFDE
  2343                           postdec2	equ	0xFDD
  2344                           status	equ	0xFD8
  2345                           
  2346 ;; *************** function _park_routine *****************
  2347 ;; Defined at:
  2348 ;;		line 314 in file "parcheggio.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  raggio          4   89[BANK1 ] const float 
  2353 ;;  larghezza       4   85[BANK1 ] const float 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;		None               void
  2356 ;; Registers used:
  2357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2364 ;;      Locals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  2365 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2366 ;;      Totals:         0       0      40       0       0       0       0       0       0       0       0       0       
      +0       0
  2367 ;;Total ram usage:       40 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:   11
  2370 ;; This function calls:
  2371 ;;		_CANisTxReady
  2372 ;;		_CANsendMessage
  2373 ;;		___fladd
  2374 ;;		___fldiv
  2375 ;;		___flmul
  2376 ;;		___flneg
  2377 ;;		___fltol
  2378 ;;		___lwtofl
  2379 ;;		_asin
  2380 ;;		_can_send
  2381 ;;		_cos
  2382 ;;		_delay_ms
  2383 ;;		_delay_s
  2384 ;;		_parallelo
  2385 ;; This function is called by:
  2386 ;;		_main
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text3
  2391  000D52                     __ptext3:
  2392                           	opt stack 0
  2393  000D52                     _park_routine:
  2394                           	opt stack 19
  2395                           
  2396                           ;parcheggio.c: 315: avvicinamento = 0;
  2397                           
  2398                           ;incstack = 0
  2399  000D52  9656               	bcf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  2400                           
  2401                           ;parcheggio.c: 316: data_correction[0] = 0;
  2402  000D54  0E00               	movlw	0
  2403  000D56  0101               	movlb	1	; () banked
  2404  000D58  6F5B               	movwf	_data_correction& (0+255),b	;volatile
  2405                           
  2406                           ; BSR set to: 1
  2407                           ;parcheggio.c: 318: parallelo();
  2408  000D5A  ECCF  F025         	call	_parallelo	;wreg free
  2409                           
  2410                           ;parcheggio.c: 320: while ((asd == 1)&&(PORTBbits.RB5 == 1) && (activation == 1)) {
  2411  000D5E  D02F               	goto	l6989
  2412  000D60                     l6975:
  2413                           
  2414                           ;parcheggio.c: 321: delay_ms(50);
  2415  000D60  0E00               	movlw	0
  2416  000D62  0100               	movlb	0	; () banked
  2417  000D64  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  2418  000D66  0E32               	movlw	50
  2419  000D68  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  2420  000D6A  ECFC  F031         	call	_delay_ms	;wreg free
  2421                           
  2422                           ;parcheggio.c: 322: PORTBbits.RB6 = ~PORTBbits.RB6;
  2423  000D6E  7C81               	btg	3969,6,c	;volatile
  2424                           
  2425                           ;parcheggio.c: 323: parallelo();
  2426  000D70  ECCF  F025         	call	_parallelo	;wreg free
  2427                           
  2428                           ;parcheggio.c: 324: if (data_correction[0] > 30) {
  2429  000D74  0E1E               	movlw	30
  2430  000D76  0101               	movlb	1	; () banked
  2431  000D78  655B               	cpfsgt	_data_correction& (0+255),b	;volatile
  2432  000D7A  D004               	goto	l6985
  2433                           
  2434                           ; BSR set to: 1
  2435                           ;parcheggio.c: 325: data_correction[0] = 0;
  2436  000D7C  0E00               	movlw	0
  2437  000D7E  0101               	movlb	1	; () banked
  2438  000D80  6F5B               	movwf	_data_correction& (0+255),b	;volatile
  2439                           
  2440                           ; BSR set to: 1
  2441                           
  2442                           ; BSR set to: 1
  2443                           ;parcheggio.c: 326: }
  2444                           ;parcheggio.c: 327: while (!CANisTxReady());
  2445  000D82  D000               	goto	l6985
  2446  000D84                     l6985:
  2447  000D84  ECAB  F032         	call	_CANisTxReady	;wreg free
  2448  000D88  0900               	iorlw	0
  2449  000D8A  B4D8               	btfsc	status,2,c
  2450  000D8C  D7FB               	goto	l6985
  2451                           
  2452                           ;parcheggio.c: 328: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  2453  000D8E  0E10               	movlw	16
  2454  000D90  0100               	movlb	0	; () banked
  2455  000D92  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2456  000D94  0E00               	movlw	0
  2457  000D96  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2458  000D98  0E00               	movlw	0
  2459  000D9A  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2460  000D9C  0E00               	movlw	0
  2461  000D9E  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2462  000DA0  0E5B               	movlw	low _data_correction
  2463  000DA2  0100               	movlb	0	; () banked
  2464  000DA4  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2465  000DA6  0E01               	movlw	high _data_correction
  2466  000DA8  0100               	movlb	0	; () banked
  2467  000DAA  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2468  000DAC  0E08               	movlw	8
  2469  000DAE  0100               	movlb	0	; () banked
  2470  000DB0  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2471  000DB2  0EBC               	movlw	188
  2472  000DB4  0100               	movlb	0	; () banked
  2473  000DB6  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2474  000DB8  ECE9  F011         	call	_CANsendMessage	;wreg free
  2475  000DBC  D000               	goto	l6989
  2476  000DBE                     l6989:
  2477  000DBE  B456               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  2478  000DC0  AA81               	btfss	3969,5,c	;volatile
  2479  000DC2  D002               	goto	l773
  2480  000DC4  B256               	btfsc	_activation/(0+8),_activation& (0+7),c	;volatile
  2481  000DC6  D7CC               	goto	l6975
  2482  000DC8                     l773:
  2483                           
  2484                           ;parcheggio.c: 329: }
  2485                           ;parcheggio.c: 331: if ((PORTBbits.RB5 == 1) && (activation == 1)) {
  2486  000DC8  BA81               	btfsc	3969,5,c	;volatile
  2487  000DCA  A256               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2488  000DCC  D02E               	goto	l7009
  2489                           
  2490                           ;parcheggio.c: 332: PORTBbits.RB6 = 0;
  2491  000DCE  9C81               	bcf	3969,6,c	;volatile
  2492                           
  2493                           ;parcheggio.c: 333: data[0] = 2;
  2494  000DD0  0E02               	movlw	2
  2495  000DD2  0101               	movlb	1	; () banked
  2496  000DD4  6F53               	movwf	_data& (0+255),b	;volatile
  2497                           
  2498                           ; BSR set to: 1
  2499                           ;parcheggio.c: 334: CANsendMessage(0b00000001101, data, 1, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  2500  000DD6  0E0D               	movlw	13
  2501  000DD8  0100               	movlb	0	; () banked
  2502  000DDA  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  2503  000DDC  0E00               	movlw	0
  2504  000DDE  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  2505  000DE0  0E00               	movlw	0
  2506  000DE2  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  2507  000DE4  0E00               	movlw	0
  2508  000DE6  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  2509  000DE8  0E53               	movlw	low _data
  2510  000DEA  0100               	movlb	0	; () banked
  2511  000DEC  6F7B               	movwf	CANsendMessage@data& (0+255),b
  2512  000DEE  0E01               	movlw	high _data
  2513  000DF0  0100               	movlb	0	; () banked
  2514  000DF2  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  2515  000DF4  0E01               	movlw	1
  2516  000DF6  0100               	movlb	0	; () banked
  2517  000DF8  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  2518  000DFA  0EBC               	movlw	188
  2519  000DFC  0100               	movlb	0	; () banked
  2520  000DFE  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  2521  000E00  ECE9  F011         	call	_CANsendMessage	;wreg free
  2522                           
  2523                           ;parcheggio.c: 335: }
  2524                           ;parcheggio.c: 337: while ((start_operation != 1)&&(activation == 1)) {
  2525  000E04  D012               	goto	l7009
  2526  000E06                     l776:
  2527                           
  2528                           ;parcheggio.c: 338: if (first == 0) {
  2529  000E06  B257               	btfsc	_first/(0+8),_first& (0+7),c	;volatile
  2530  000E08  D010               	goto	l7009
  2531                           
  2532                           ;parcheggio.c: 339: set_speed = 0;
  2533  000E0A  0E00               	movlw	0
  2534  000E0C  0100               	movlb	0	; () banked
  2535  000E0E  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  2536  000E10  0E00               	movlw	0
  2537  000E12  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  2538                           
  2539                           ;parcheggio.c: 340: data_steering[0] = 90;
  2540  000E14  0E5A               	movlw	90
  2541  000E16  0101               	movlb	1	; () banked
  2542  000E18  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  2543                           
  2544                           ;parcheggio.c: 341: data_brake [0] = 0;
  2545  000E1A  0E00               	movlw	0
  2546  000E1C  6E26               	movwf	_data_brake,c	;volatile
  2547                           
  2548                           ;parcheggio.c: 342: data_brake [1] = 1;
  2549  000E1E  0E01               	movlw	1
  2550  000E20  6E27               	movwf	_data_brake+1,c	;volatile
  2551                           
  2552                           ; BSR set to: 1
  2553                           ;parcheggio.c: 343: can_send();
  2554  000E22  ECA3  F02D         	call	_can_send	;wreg free
  2555                           
  2556                           ;parcheggio.c: 344: first = 1;
  2557  000E26  8257               	bsf	_first/(0+8),_first& (0+7),c	;volatile
  2558  000E28  D000               	goto	l7009
  2559  000E2A                     l7009:
  2560  000E2A  AC57               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  2561  000E2C  A256               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  2562  000E2E  EF4A  F00C         	goto	l7175
  2563  000E32  D7E9               	goto	l776
  2564                           
  2565                           ;parcheggio.c: 345: }
  2566                           ;parcheggio.c: 346: }
  2567                           ;parcheggio.c: 348: while ((PORTBbits.RB5 == 1) && (activation == 1)&&(start_operation =
      +                          = 1)) {
  2568  000E34  EF4A  F00C         	goto	l7175
  2569  000E38                     l782:
  2570                           
  2571                           ;parcheggio.c: 349: LATBbits.LATB4 = 1;
  2572  000E38  888A               	bsf	3978,4,c	;volatile
  2573                           
  2574                           ;parcheggio.c: 351: bordo = ((sensor_distance[1] + sensor_distance[0]) / 2);
  2575  000E3A  5001               	movf	_sensor_distance,w,c	;volatile
  2576  000E3C  2403               	addwf	_sensor_distance+2,w,c	;volatile
  2577  000E3E  0101               	movlb	1	; () banked
  2578  000E40  6FB8               	movwf	??_park_routine& (0+255),b
  2579  000E42  5002               	movf	_sensor_distance+1,w,c	;volatile
  2580  000E44  2004               	addwfc	_sensor_distance+3,w,c	;volatile
  2581  000E46  0101               	movlb	1	; () banked
  2582  000E48  6FB9               	movwf	(??_park_routine+1)& (0+255),b
  2583  000E4A  90D8               	bcf	status,0,c
  2584  000E4C  0101               	movlb	1	; () banked
  2585  000E4E  31B9               	rrcf	(??_park_routine+1)& (0+255),w,b
  2586  000E50  0101               	movlb	1	; () banked
  2587  000E52  6FBA               	movwf	(??_park_routine+2)& (0+255),b
  2588  000E54  0101               	movlb	1	; () banked
  2589  000E56  31B8               	rrcf	??_park_routine& (0+255),w,b
  2590  000E58  0100               	movlb	0	; () banked
  2591  000E5A  6F81               	movwf	___lwtofl@c& (0+255),b
  2592  000E5C  C1BA  F082         	movff	??_park_routine+2,___lwtofl@c+1
  2593  000E60  EC51  F032         	call	___lwtofl	;wreg free
  2594  000E64  C081  F134         	movff	?___lwtofl,_bordo
  2595  000E68  C082  F135         	movff	?___lwtofl+1,_bordo+1
  2596  000E6C  C083  F136         	movff	?___lwtofl+2,_bordo+2
  2597  000E70  C084  F137         	movff	?___lwtofl+3,_bordo+3
  2598                           
  2599                           ;parcheggio.c: 352: delay_ms(100);
  2600  000E74  0E00               	movlw	0
  2601  000E76  0100               	movlb	0	; () banked
  2602  000E78  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  2603  000E7A  0E64               	movlw	100
  2604  000E7C  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  2605  000E7E  ECFC  F031         	call	_delay_ms	;wreg free
  2606                           
  2607                           ;parcheggio.c: 353: bordo = bordo + ((sensor_distance[1] + sensor_distance[0]) / 2);
  2608  000E82  5001               	movf	_sensor_distance,w,c	;volatile
  2609  000E84  2403               	addwf	_sensor_distance+2,w,c	;volatile
  2610  000E86  0101               	movlb	1	; () banked
  2611  000E88  6FB8               	movwf	??_park_routine& (0+255),b
  2612  000E8A  5002               	movf	_sensor_distance+1,w,c	;volatile
  2613  000E8C  2004               	addwfc	_sensor_distance+3,w,c	;volatile
  2614  000E8E  0101               	movlb	1	; () banked
  2615  000E90  6FB9               	movwf	(??_park_routine+1)& (0+255),b
  2616  000E92  90D8               	bcf	status,0,c
  2617  000E94  0101               	movlb	1	; () banked
  2618  000E96  31B9               	rrcf	(??_park_routine+1)& (0+255),w,b
  2619  000E98  0101               	movlb	1	; () banked
  2620  000E9A  6FBA               	movwf	(??_park_routine+2)& (0+255),b
  2621  000E9C  0101               	movlb	1	; () banked
  2622  000E9E  31B8               	rrcf	??_park_routine& (0+255),w,b
  2623  000EA0  0100               	movlb	0	; () banked
  2624  000EA2  6F81               	movwf	___lwtofl@c& (0+255),b
  2625  000EA4  C1BA  F082         	movff	??_park_routine+2,___lwtofl@c+1
  2626  000EA8  EC51  F032         	call	___lwtofl	;wreg free
  2627  000EAC  C081  F09F         	movff	?___lwtofl,___fladd@f1
  2628  000EB0  C082  F0A0         	movff	?___lwtofl+1,___fladd@f1+1
  2629  000EB4  C083  F0A1         	movff	?___lwtofl+2,___fladd@f1+2
  2630  000EB8  C084  F0A2         	movff	?___lwtofl+3,___fladd@f1+3
  2631  000EBC  C134  F0A3         	movff	_bordo,___fladd@f2
  2632  000EC0  C135  F0A4         	movff	_bordo+1,___fladd@f2+1
  2633  000EC4  C136  F0A5         	movff	_bordo+2,___fladd@f2+2
  2634  000EC8  C137  F0A6         	movff	_bordo+3,___fladd@f2+3
  2635  000ECC  EC6E  F023         	call	___fladd	;wreg free
  2636  000ED0  C09F  F134         	movff	?___fladd,_bordo
  2637  000ED4  C0A0  F135         	movff	?___fladd+1,_bordo+1
  2638  000ED8  C0A1  F136         	movff	?___fladd+2,_bordo+2
  2639  000EDC  C0A2  F137         	movff	?___fladd+3,_bordo+3
  2640                           
  2641                           ;parcheggio.c: 354: bordo = bordo / 2;
  2642  000EE0  C134  F090         	movff	_bordo,___fldiv@f1
  2643  000EE4  C135  F091         	movff	_bordo+1,___fldiv@f1+1
  2644  000EE8  C136  F092         	movff	_bordo+2,___fldiv@f1+2
  2645  000EEC  C137  F093         	movff	_bordo+3,___fldiv@f1+3
  2646  000EF0  0E00               	movlw	0
  2647  000EF2  0100               	movlb	0	; () banked
  2648  000EF4  6F94               	movwf	___fldiv@f2& (0+255),b
  2649  000EF6  0E00               	movlw	0
  2650  000EF8  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2651  000EFA  0E00               	movlw	0
  2652  000EFC  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2653  000EFE  0E40               	movlw	64
  2654  000F00  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2655  000F02  EC5D  F02B         	call	___fldiv	;wreg free
  2656  000F06  C090  F134         	movff	?___fldiv,_bordo
  2657  000F0A  C091  F135         	movff	?___fldiv+1,_bordo+1
  2658  000F0E  C092  F136         	movff	?___fldiv+2,_bordo+2
  2659  000F12  C093  F137         	movff	?___fldiv+3,_bordo+3
  2660                           
  2661                           ;parcheggio.c: 355: const float raggio = 56;
  2662  000F16  0E00               	movlw	0
  2663  000F18  0101               	movlb	1	; () banked
  2664  000F1A  6FDC               	movwf	park_routine@raggio& (0+255),b
  2665  000F1C  0E00               	movlw	0
  2666  000F1E  6FDD               	movwf	(park_routine@raggio+1)& (0+255),b
  2667  000F20  0E60               	movlw	96
  2668  000F22  6FDE               	movwf	(park_routine@raggio+2)& (0+255),b
  2669  000F24  0E42               	movlw	66
  2670  000F26  6FDF               	movwf	(park_routine@raggio+3)& (0+255),b
  2671                           
  2672                           ; BSR set to: 1
  2673                           ;parcheggio.c: 356: const float larghezza = 33;
  2674  000F28  0E00               	movlw	0
  2675  000F2A  0101               	movlb	1	; () banked
  2676  000F2C  6FD8               	movwf	park_routine@larghezza& (0+255),b
  2677  000F2E  0E00               	movlw	0
  2678  000F30  6FD9               	movwf	(park_routine@larghezza+1)& (0+255),b
  2679  000F32  0E04               	movlw	4
  2680  000F34  6FDA               	movwf	(park_routine@larghezza+2)& (0+255),b
  2681  000F36  0E42               	movlw	66
  2682  000F38  6FDB               	movwf	(park_routine@larghezza+3)& (0+255),b
  2683                           
  2684                           ; BSR set to: 1
  2685                           ;parcheggio.c: 357: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2686  000F3A  C134  F0A3         	movff	_bordo,___fladd@f2
  2687  000F3E  C135  F0A4         	movff	_bordo+1,___fladd@f2+1
  2688  000F42  C136  F0A5         	movff	_bordo+2,___fladd@f2+2
  2689  000F46  C137  F0A6         	movff	_bordo+3,___fladd@f2+3
  2690  000F4A  0E00               	movlw	0
  2691  000F4C  0100               	movlb	0	; () banked
  2692  000F4E  6F94               	movwf	___fldiv@f2& (0+255),b
  2693  000F50  0E00               	movlw	0
  2694  000F52  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2695  000F54  0E00               	movlw	0
  2696  000F56  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2697  000F58  0E40               	movlw	64
  2698  000F5A  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2699  000F5C  C1D8  F090         	movff	park_routine@larghezza,___fldiv@f1
  2700  000F60  C1D9  F091         	movff	park_routine@larghezza+1,___fldiv@f1+1
  2701  000F64  C1DA  F092         	movff	park_routine@larghezza+2,___fldiv@f1+2
  2702  000F68  C1DB  F093         	movff	park_routine@larghezza+3,___fldiv@f1+3
  2703  000F6C  EC5D  F02B         	call	___fldiv	;wreg free
  2704  000F70  C090  F09F         	movff	?___fldiv,___fladd@f1
  2705  000F74  C091  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  2706  000F78  C092  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  2707  000F7C  C093  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  2708  000F80  EC6E  F023         	call	___fladd	;wreg free
  2709  000F84  C09F  F0AB         	movff	?___fladd,___flneg@f1
  2710  000F88  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  2711  000F8C  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  2712  000F90  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  2713  000F94  ECDE  F031         	call	___flneg	;wreg free
  2714  000F98  C0AB  F1CC         	movff	?___flneg,_park_routine$3665
  2715  000F9C  C0AC  F1CD         	movff	?___flneg+1,_park_routine$3665+1
  2716  000FA0  C0AD  F1CE         	movff	?___flneg+2,_park_routine$3665+2
  2717  000FA4  C0AE  F1CF         	movff	?___flneg+3,_park_routine$3665+3
  2718                           
  2719                           ;parcheggio.c: 357: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2720  000FA8  C1CC  F0A3         	movff	_park_routine$3665,___fladd@f2
  2721  000FAC  C1CD  F0A4         	movff	_park_routine$3665+1,___fladd@f2+1
  2722  000FB0  C1CE  F0A5         	movff	_park_routine$3665+2,___fladd@f2+2
  2723  000FB4  C1CF  F0A6         	movff	_park_routine$3665+3,___fladd@f2+3
  2724  000FB8  0E00               	movlw	0
  2725  000FBA  0100               	movlb	0	; () banked
  2726  000FBC  6F85               	movwf	___flmul@f2& (0+255),b
  2727  000FBE  0E00               	movlw	0
  2728  000FC0  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2729  000FC2  0E00               	movlw	0
  2730  000FC4  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2731  000FC6  0E40               	movlw	64
  2732  000FC8  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2733  000FCA  C1DC  F081         	movff	park_routine@raggio,___flmul@f1
  2734  000FCE  C1DD  F082         	movff	park_routine@raggio+1,___flmul@f1+1
  2735  000FD2  C1DE  F083         	movff	park_routine@raggio+2,___flmul@f1+2
  2736  000FD6  C1DF  F084         	movff	park_routine@raggio+3,___flmul@f1+3
  2737  000FDA  ECAB  F02A         	call	___flmul	;wreg free
  2738  000FDE  C081  F09F         	movff	?___flmul,___fladd@f1
  2739  000FE2  C082  F0A0         	movff	?___flmul+1,___fladd@f1+1
  2740  000FE6  C083  F0A1         	movff	?___flmul+2,___fladd@f1+2
  2741  000FEA  C084  F0A2         	movff	?___flmul+3,___fladd@f1+3
  2742  000FEE  EC6E  F023         	call	___fladd	;wreg free
  2743  000FF2  C09F  F1D0         	movff	?___fladd,_park_routine$3666
  2744  000FF6  C0A0  F1D1         	movff	?___fladd+1,_park_routine$3666+1
  2745  000FFA  C0A1  F1D2         	movff	?___fladd+2,_park_routine$3666+2
  2746  000FFE  C0A2  F1D3         	movff	?___fladd+3,_park_routine$3666+3
  2747                           
  2748                           ;parcheggio.c: 357: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2749  001002  0E00               	movlw	0
  2750  001004  0100               	movlb	0	; () banked
  2751  001006  6F94               	movwf	___fldiv@f2& (0+255),b
  2752  001008  0E00               	movlw	0
  2753  00100A  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2754  00100C  0E00               	movlw	0
  2755  00100E  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2756  001010  0E40               	movlw	64
  2757  001012  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2758  001014  C1D8  F090         	movff	park_routine@larghezza,___fldiv@f1
  2759  001018  C1D9  F091         	movff	park_routine@larghezza+1,___fldiv@f1+1
  2760  00101C  C1DA  F092         	movff	park_routine@larghezza+2,___fldiv@f1+2
  2761  001020  C1DB  F093         	movff	park_routine@larghezza+3,___fldiv@f1+3
  2762  001024  EC5D  F02B         	call	___fldiv	;wreg free
  2763  001028  C090  F0AB         	movff	?___fldiv,___flneg@f1
  2764  00102C  C091  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  2765  001030  C092  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  2766  001034  C093  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  2767  001038  ECDE  F031         	call	___flneg	;wreg free
  2768  00103C  C0AB  F0A3         	movff	?___flneg,___fladd@f2
  2769  001040  C0AC  F0A4         	movff	?___flneg+1,___fladd@f2+1
  2770  001044  C0AD  F0A5         	movff	?___flneg+2,___fladd@f2+2
  2771  001048  C0AE  F0A6         	movff	?___flneg+3,___fladd@f2+3
  2772  00104C  C1D0  F09F         	movff	_park_routine$3666,___fladd@f1
  2773  001050  C1D1  F0A0         	movff	_park_routine$3666+1,___fladd@f1+1
  2774  001054  C1D2  F0A1         	movff	_park_routine$3666+2,___fladd@f1+2
  2775  001058  C1D3  F0A2         	movff	_park_routine$3666+3,___fladd@f1+3
  2776  00105C  EC6E  F023         	call	___fladd	;wreg free
  2777  001060  C09F  F1BC         	movff	?___fladd,_park_routine$3667
  2778  001064  C0A0  F1BD         	movff	?___fladd+1,_park_routine$3667+1
  2779  001068  C0A1  F1BE         	movff	?___fladd+2,_park_routine$3667+2
  2780  00106C  C0A2  F1BF         	movff	?___fladd+3,_park_routine$3667+3
  2781                           
  2782                           ;parcheggio.c: 357: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2783  001070  C1BC  F090         	movff	_park_routine$3667,___fldiv@f1
  2784  001074  C1BD  F091         	movff	_park_routine$3667+1,___fldiv@f1+1
  2785  001078  C1BE  F092         	movff	_park_routine$3667+2,___fldiv@f1+2
  2786  00107C  C1BF  F093         	movff	_park_routine$3667+3,___fldiv@f1+3
  2787  001080  0E00               	movlw	0
  2788  001082  0100               	movlb	0	; () banked
  2789  001084  6F85               	movwf	___flmul@f2& (0+255),b
  2790  001086  0E00               	movlw	0
  2791  001088  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2792  00108A  0E00               	movlw	0
  2793  00108C  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2794  00108E  0E40               	movlw	64
  2795  001090  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2796  001092  C1DC  F081         	movff	park_routine@raggio,___flmul@f1
  2797  001096  C1DD  F082         	movff	park_routine@raggio+1,___flmul@f1+1
  2798  00109A  C1DE  F083         	movff	park_routine@raggio+2,___flmul@f1+2
  2799  00109E  C1DF  F084         	movff	park_routine@raggio+3,___flmul@f1+3
  2800  0010A2  ECAB  F02A         	call	___flmul	;wreg free
  2801  0010A6  C081  F094         	movff	?___flmul,___fldiv@f2
  2802  0010AA  C082  F095         	movff	?___flmul+1,___fldiv@f2+1
  2803  0010AE  C083  F096         	movff	?___flmul+2,___fldiv@f2+2
  2804  0010B2  C084  F097         	movff	?___flmul+3,___fldiv@f2+3
  2805  0010B6  EC5D  F02B         	call	___fldiv	;wreg free
  2806  0010BA  C090  F1C0         	movff	?___fldiv,_park_routine$3668
  2807  0010BE  C091  F1C1         	movff	?___fldiv+1,_park_routine$3668+1
  2808  0010C2  C092  F1C2         	movff	?___fldiv+2,_park_routine$3668+2
  2809  0010C6  C093  F1C3         	movff	?___fldiv+3,_park_routine$3668+3
  2810                           
  2811                           ;parcheggio.c: 357: alfa = asin(((2 * raggio)-(larghezza / 2) - (bordo + (larghezza / 2)
      +                          )) / (2 * raggio));
  2812  0010CA  C1C0  F194         	movff	_park_routine$3668,asin@x
  2813  0010CE  C1C1  F195         	movff	_park_routine$3668+1,asin@x+1
  2814  0010D2  C1C2  F196         	movff	_park_routine$3668+2,asin@x+2
  2815  0010D6  C1C3  F197         	movff	_park_routine$3668+3,asin@x+3
  2816  0010DA  EC4E  F020         	call	_asin	;wreg free
  2817  0010DE  C194  F12C         	movff	?_asin,_alfa
  2818  0010E2  C195  F12D         	movff	?_asin+1,_alfa+1
  2819  0010E6  C196  F12E         	movff	?_asin+2,_alfa+2
  2820  0010EA  C197  F12F         	movff	?_asin+3,_alfa+3
  2821                           
  2822                           ;parcheggio.c: 358: alfa = alfa / 3.14159265358979323846 * 180;
  2823  0010EE  0EDB               	movlw	219
  2824  0010F0  0100               	movlb	0	; () banked
  2825  0010F2  6F94               	movwf	___fldiv@f2& (0+255),b
  2826  0010F4  0E0F               	movlw	15
  2827  0010F6  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2828  0010F8  0E49               	movlw	73
  2829  0010FA  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2830  0010FC  0E40               	movlw	64
  2831  0010FE  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2832  001100  C12C  F090         	movff	_alfa,___fldiv@f1
  2833  001104  C12D  F091         	movff	_alfa+1,___fldiv@f1+1
  2834  001108  C12E  F092         	movff	_alfa+2,___fldiv@f1+2
  2835  00110C  C12F  F093         	movff	_alfa+3,___fldiv@f1+3
  2836  001110  EC5D  F02B         	call	___fldiv	;wreg free
  2837  001114  C090  F081         	movff	?___fldiv,___flmul@f1
  2838  001118  C091  F082         	movff	?___fldiv+1,___flmul@f1+1
  2839  00111C  C092  F083         	movff	?___fldiv+2,___flmul@f1+2
  2840  001120  C093  F084         	movff	?___fldiv+3,___flmul@f1+3
  2841  001124  0E00               	movlw	0
  2842  001126  0100               	movlb	0	; () banked
  2843  001128  6F85               	movwf	___flmul@f2& (0+255),b
  2844  00112A  0E00               	movlw	0
  2845  00112C  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2846  00112E  0E34               	movlw	52
  2847  001130  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2848  001132  0E43               	movlw	67
  2849  001134  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2850  001136  ECAB  F02A         	call	___flmul	;wreg free
  2851  00113A  C081  F12C         	movff	?___flmul,_alfa
  2852  00113E  C082  F12D         	movff	?___flmul+1,_alfa+1
  2853  001142  C083  F12E         	movff	?___flmul+2,_alfa+2
  2854  001146  C084  F12F         	movff	?___flmul+3,_alfa+3
  2855                           
  2856                           ;parcheggio.c: 359: beta = 90 - alfa;
  2857  00114A  C12C  F0AB         	movff	_alfa,___flneg@f1
  2858  00114E  C12D  F0AC         	movff	_alfa+1,___flneg@f1+1
  2859  001152  C12E  F0AD         	movff	_alfa+2,___flneg@f1+2
  2860  001156  C12F  F0AE         	movff	_alfa+3,___flneg@f1+3
  2861  00115A  ECDE  F031         	call	___flneg	;wreg free
  2862  00115E  C0AB  F09F         	movff	?___flneg,___fladd@f1
  2863  001162  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  2864  001166  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  2865  00116A  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  2866  00116E  0E00               	movlw	0
  2867  001170  0100               	movlb	0	; () banked
  2868  001172  6FA3               	movwf	___fladd@f2& (0+255),b
  2869  001174  0E00               	movlw	0
  2870  001176  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  2871  001178  0EB4               	movlw	180
  2872  00117A  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  2873  00117C  0E42               	movlw	66
  2874  00117E  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  2875  001180  EC6E  F023         	call	___fladd	;wreg free
  2876  001184  C09F  F130         	movff	?___fladd,_beta
  2877  001188  C0A0  F131         	movff	?___fladd+1,_beta+1
  2878  00118C  C0A1  F132         	movff	?___fladd+2,_beta+2
  2879  001190  C0A2  F133         	movff	?___fladd+3,_beta+3
  2880                           
  2881                           ;parcheggio.c: 360: alfa = (alfa * 3.14159265358979323846) / 180;
  2882  001194  0EDB               	movlw	219
  2883  001196  0100               	movlb	0	; () banked
  2884  001198  6F85               	movwf	___flmul@f2& (0+255),b
  2885  00119A  0E0F               	movlw	15
  2886  00119C  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2887  00119E  0E49               	movlw	73
  2888  0011A0  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2889  0011A2  0E40               	movlw	64
  2890  0011A4  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2891  0011A6  C12C  F081         	movff	_alfa,___flmul@f1
  2892  0011AA  C12D  F082         	movff	_alfa+1,___flmul@f1+1
  2893  0011AE  C12E  F083         	movff	_alfa+2,___flmul@f1+2
  2894  0011B2  C12F  F084         	movff	_alfa+3,___flmul@f1+3
  2895  0011B6  ECAB  F02A         	call	___flmul	;wreg free
  2896  0011BA  C081  F090         	movff	?___flmul,___fldiv@f1
  2897  0011BE  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  2898  0011C2  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  2899  0011C6  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  2900  0011CA  0E00               	movlw	0
  2901  0011CC  0100               	movlb	0	; () banked
  2902  0011CE  6F94               	movwf	___fldiv@f2& (0+255),b
  2903  0011D0  0E00               	movlw	0
  2904  0011D2  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2905  0011D4  0E34               	movlw	52
  2906  0011D6  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2907  0011D8  0E43               	movlw	67
  2908  0011DA  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2909  0011DC  EC5D  F02B         	call	___fldiv	;wreg free
  2910  0011E0  C090  F12C         	movff	?___fldiv,_alfa
  2911  0011E4  C091  F12D         	movff	?___fldiv+1,_alfa+1
  2912  0011E8  C092  F12E         	movff	?___fldiv+2,_alfa+2
  2913  0011EC  C093  F12F         	movff	?___fldiv+3,_alfa+3
  2914                           
  2915                           ;parcheggio.c: 361: n = cos(alfa);
  2916  0011F0  C12C  F1B0         	movff	_alfa,cos@f
  2917  0011F4  C12D  F1B1         	movff	_alfa+1,cos@f+1
  2918  0011F8  C12E  F1B2         	movff	_alfa+2,cos@f+2
  2919  0011FC  C12F  F1B3         	movff	_alfa+3,cos@f+3
  2920  001200  ECA6  F02E         	call	_cos	;wreg free
  2921  001204  C1B0  F138         	movff	?_cos,_n
  2922  001208  C1B1  F139         	movff	?_cos+1,_n+1
  2923  00120C  C1B2  F13A         	movff	?_cos+2,_n+2
  2924  001210  C1B3  F13B         	movff	?_cos+3,_n+3
  2925                           
  2926                           ;parcheggio.c: 362: n = 2 * raggio *n;
  2927  001214  C138  F085         	movff	_n,___flmul@f2
  2928  001218  C139  F086         	movff	_n+1,___flmul@f2+1
  2929  00121C  C13A  F087         	movff	_n+2,___flmul@f2+2
  2930  001220  C13B  F088         	movff	_n+3,___flmul@f2+3
  2931  001224  C1DC  F081         	movff	park_routine@raggio,___flmul@f1
  2932  001228  C1DD  F082         	movff	park_routine@raggio+1,___flmul@f1+1
  2933  00122C  C1DE  F083         	movff	park_routine@raggio+2,___flmul@f1+2
  2934  001230  C1DF  F084         	movff	park_routine@raggio+3,___flmul@f1+3
  2935  001234  ECAB  F02A         	call	___flmul	;wreg free
  2936  001238  C081  F1D4         	movff	?___flmul,_park_routine$3669
  2937  00123C  C082  F1D5         	movff	?___flmul+1,_park_routine$3669+1
  2938  001240  C083  F1D6         	movff	?___flmul+2,_park_routine$3669+2
  2939  001244  C084  F1D7         	movff	?___flmul+3,_park_routine$3669+3
  2940                           
  2941                           ;parcheggio.c: 362: n = 2 * raggio *n;
  2942  001248  C1D4  F081         	movff	_park_routine$3669,___flmul@f1
  2943  00124C  C1D5  F082         	movff	_park_routine$3669+1,___flmul@f1+1
  2944  001250  C1D6  F083         	movff	_park_routine$3669+2,___flmul@f1+2
  2945  001254  C1D7  F084         	movff	_park_routine$3669+3,___flmul@f1+3
  2946  001258  0E00               	movlw	0
  2947  00125A  0100               	movlb	0	; () banked
  2948  00125C  6F85               	movwf	___flmul@f2& (0+255),b
  2949  00125E  0E00               	movlw	0
  2950  001260  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  2951  001262  0E00               	movlw	0
  2952  001264  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  2953  001266  0E40               	movlw	64
  2954  001268  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  2955  00126A  ECAB  F02A         	call	___flmul	;wreg free
  2956  00126E  C081  F138         	movff	?___flmul,_n
  2957  001272  C082  F139         	movff	?___flmul+1,_n+1
  2958  001276  C083  F13A         	movff	?___flmul+2,_n+2
  2959  00127A  C084  F13B         	movff	?___flmul+3,_n+3
  2960                           
  2961                           ;parcheggio.c: 363: prima_sterzata = 2 * 3.14159265358979323846 * raggio * (beta / 360);
  2962  00127E  C1DC  F085         	movff	park_routine@raggio,___flmul@f2
  2963  001282  C1DD  F086         	movff	park_routine@raggio+1,___flmul@f2+1
  2964  001286  C1DE  F087         	movff	park_routine@raggio+2,___flmul@f2+2
  2965  00128A  C1DF  F088         	movff	park_routine@raggio+3,___flmul@f2+3
  2966  00128E  0E00               	movlw	0
  2967  001290  0100               	movlb	0	; () banked
  2968  001292  6F94               	movwf	___fldiv@f2& (0+255),b
  2969  001294  0E00               	movlw	0
  2970  001296  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  2971  001298  0EB4               	movlw	180
  2972  00129A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  2973  00129C  0E43               	movlw	67
  2974  00129E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  2975  0012A0  C130  F090         	movff	_beta,___fldiv@f1
  2976  0012A4  C131  F091         	movff	_beta+1,___fldiv@f1+1
  2977  0012A8  C132  F092         	movff	_beta+2,___fldiv@f1+2
  2978  0012AC  C133  F093         	movff	_beta+3,___fldiv@f1+3
  2979  0012B0  EC5D  F02B         	call	___fldiv	;wreg free
  2980  0012B4  C090  F081         	movff	?___fldiv,___flmul@f1
  2981  0012B8  C091  F082         	movff	?___fldiv+1,___flmul@f1+1
  2982  0012BC  C092  F083         	movff	?___fldiv+2,___flmul@f1+2
  2983  0012C0  C093  F084         	movff	?___fldiv+3,___flmul@f1+3
  2984  0012C4  ECAB  F02A         	call	___flmul	;wreg free
  2985  0012C8  C081  F1D4         	movff	?___flmul,_park_routine$3669
  2986  0012CC  C082  F1D5         	movff	?___flmul+1,_park_routine$3669+1
  2987  0012D0  C083  F1D6         	movff	?___flmul+2,_park_routine$3669+2
  2988  0012D4  C084  F1D7         	movff	?___flmul+3,_park_routine$3669+3
  2989                           
  2990                           ;parcheggio.c: 363: prima_sterzata = 2 * 3.14159265358979323846 * raggio * (beta / 360);
  2991  0012D8  C1D4  F081         	movff	_park_routine$3669,___flmul@f1
  2992  0012DC  C1D5  F082         	movff	_park_routine$3669+1,___flmul@f1+1
  2993  0012E0  C1D6  F083         	movff	_park_routine$3669+2,___flmul@f1+2
  2994  0012E4  C1D7  F084         	movff	_park_routine$3669+3,___flmul@f1+3
  2995  0012E8  0EDB               	movlw	219
  2996  0012EA  0100               	movlb	0	; () banked
  2997  0012EC  6F85               	movwf	___flmul@f2& (0+255),b
  2998  0012EE  0E0F               	movlw	15
  2999  0012F0  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  3000  0012F2  0EC9               	movlw	201
  3001  0012F4  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  3002  0012F6  0E40               	movlw	64
  3003  0012F8  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  3004  0012FA  ECAB  F02A         	call	___flmul	;wreg free
  3005  0012FE  C081  F13C         	movff	?___flmul,_prima_sterzata
  3006  001302  C082  F13D         	movff	?___flmul+1,_prima_sterzata+1
  3007  001306  C083  F13E         	movff	?___flmul+2,_prima_sterzata+2
  3008  00130A  C084  F13F         	movff	?___flmul+3,_prima_sterzata+3
  3009                           
  3010                           ;parcheggio.c: 364: K_var = raggio + (2 * larghezza / 3);
  3011  00130E  0E00               	movlw	0
  3012  001310  0100               	movlb	0	; () banked
  3013  001312  6F94               	movwf	___fldiv@f2& (0+255),b
  3014  001314  0E00               	movlw	0
  3015  001316  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  3016  001318  0E40               	movlw	64
  3017  00131A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  3018  00131C  0E40               	movlw	64
  3019  00131E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  3020  001320  0E00               	movlw	0
  3021  001322  0100               	movlb	0	; () banked
  3022  001324  6F85               	movwf	___flmul@f2& (0+255),b
  3023  001326  0E00               	movlw	0
  3024  001328  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  3025  00132A  0E00               	movlw	0
  3026  00132C  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  3027  00132E  0E40               	movlw	64
  3028  001330  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  3029  001332  C1D8  F081         	movff	park_routine@larghezza,___flmul@f1
  3030  001336  C1D9  F082         	movff	park_routine@larghezza+1,___flmul@f1+1
  3031  00133A  C1DA  F083         	movff	park_routine@larghezza+2,___flmul@f1+2
  3032  00133E  C1DB  F084         	movff	park_routine@larghezza+3,___flmul@f1+3
  3033  001342  ECAB  F02A         	call	___flmul	;wreg free
  3034  001346  C081  F090         	movff	?___flmul,___fldiv@f1
  3035  00134A  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  3036  00134E  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  3037  001352  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  3038  001356  EC5D  F02B         	call	___fldiv	;wreg free
  3039  00135A  C090  F09F         	movff	?___fldiv,___fladd@f1
  3040  00135E  C091  F0A0         	movff	?___fldiv+1,___fladd@f1+1
  3041  001362  C092  F0A1         	movff	?___fldiv+2,___fladd@f1+2
  3042  001366  C093  F0A2         	movff	?___fldiv+3,___fladd@f1+3
  3043  00136A  C1DC  F0A3         	movff	park_routine@raggio,___fladd@f2
  3044  00136E  C1DD  F0A4         	movff	park_routine@raggio+1,___fladd@f2+1
  3045  001372  C1DE  F0A5         	movff	park_routine@raggio+2,___fladd@f2+2
  3046  001376  C1DF  F0A6         	movff	park_routine@raggio+3,___fladd@f2+3
  3047  00137A  EC6E  F023         	call	___fladd	;wreg free
  3048  00137E  C09F  F124         	movff	?___fladd,_K_var
  3049  001382  C0A0  F125         	movff	?___fladd+1,_K_var+1
  3050  001386  C0A1  F126         	movff	?___fladd+2,_K_var+2
  3051  00138A  C0A2  F127         	movff	?___fladd+3,_K_var+3
  3052                           
  3053                           ;parcheggio.c: 365: J_var = raggio - (2 * larghezza / 3);
  3054  00138E  0E00               	movlw	0
  3055  001390  0100               	movlb	0	; () banked
  3056  001392  6F94               	movwf	___fldiv@f2& (0+255),b
  3057  001394  0E00               	movlw	0
  3058  001396  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  3059  001398  0E40               	movlw	64
  3060  00139A  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  3061  00139C  0E40               	movlw	64
  3062  00139E  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  3063  0013A0  0E00               	movlw	0
  3064  0013A2  0100               	movlb	0	; () banked
  3065  0013A4  6F85               	movwf	___flmul@f2& (0+255),b
  3066  0013A6  0E00               	movlw	0
  3067  0013A8  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  3068  0013AA  0E00               	movlw	0
  3069  0013AC  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  3070  0013AE  0E40               	movlw	64
  3071  0013B0  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  3072  0013B2  C1D8  F081         	movff	park_routine@larghezza,___flmul@f1
  3073  0013B6  C1D9  F082         	movff	park_routine@larghezza+1,___flmul@f1+1
  3074  0013BA  C1DA  F083         	movff	park_routine@larghezza+2,___flmul@f1+2
  3075  0013BE  C1DB  F084         	movff	park_routine@larghezza+3,___flmul@f1+3
  3076  0013C2  ECAB  F02A         	call	___flmul	;wreg free
  3077  0013C6  C081  F090         	movff	?___flmul,___fldiv@f1
  3078  0013CA  C082  F091         	movff	?___flmul+1,___fldiv@f1+1
  3079  0013CE  C083  F092         	movff	?___flmul+2,___fldiv@f1+2
  3080  0013D2  C084  F093         	movff	?___flmul+3,___fldiv@f1+3
  3081  0013D6  EC5D  F02B         	call	___fldiv	;wreg free
  3082  0013DA  C090  F0AB         	movff	?___fldiv,___flneg@f1
  3083  0013DE  C091  F0AC         	movff	?___fldiv+1,___flneg@f1+1
  3084  0013E2  C092  F0AD         	movff	?___fldiv+2,___flneg@f1+2
  3085  0013E6  C093  F0AE         	movff	?___fldiv+3,___flneg@f1+3
  3086  0013EA  ECDE  F031         	call	___flneg	;wreg free
  3087  0013EE  C0AB  F09F         	movff	?___flneg,___fladd@f1
  3088  0013F2  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  3089  0013F6  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  3090  0013FA  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  3091  0013FE  C1DC  F0A3         	movff	park_routine@raggio,___fladd@f2
  3092  001402  C1DD  F0A4         	movff	park_routine@raggio+1,___fladd@f2+1
  3093  001406  C1DE  F0A5         	movff	park_routine@raggio+2,___fladd@f2+2
  3094  00140A  C1DF  F0A6         	movff	park_routine@raggio+3,___fladd@f2+3
  3095  00140E  EC6E  F023         	call	___fladd	;wreg free
  3096  001412  C09F  F120         	movff	?___fladd,_J_var
  3097  001416  C0A0  F121         	movff	?___fladd+1,_J_var+1
  3098  00141A  C0A1  F122         	movff	?___fladd+2,_J_var+2
  3099  00141E  C0A2  F123         	movff	?___fladd+3,_J_var+3
  3100                           
  3101                           ;parcheggio.c: 366: Pmin = K_var * cos(asin((J_var / K_var)));
  3102  001422  C124  F094         	movff	_K_var,___fldiv@f2
  3103  001426  C125  F095         	movff	_K_var+1,___fldiv@f2+1
  3104  00142A  C126  F096         	movff	_K_var+2,___fldiv@f2+2
  3105  00142E  C127  F097         	movff	_K_var+3,___fldiv@f2+3
  3106  001432  C120  F090         	movff	_J_var,___fldiv@f1
  3107  001436  C121  F091         	movff	_J_var+1,___fldiv@f1+1
  3108  00143A  C122  F092         	movff	_J_var+2,___fldiv@f1+2
  3109  00143E  C123  F093         	movff	_J_var+3,___fldiv@f1+3
  3110  001442  EC5D  F02B         	call	___fldiv	;wreg free
  3111  001446  C090  F1C4         	movff	?___fldiv,_park_routine$3670
  3112  00144A  C091  F1C5         	movff	?___fldiv+1,_park_routine$3670+1
  3113  00144E  C092  F1C6         	movff	?___fldiv+2,_park_routine$3670+2
  3114  001452  C093  F1C7         	movff	?___fldiv+3,_park_routine$3670+3
  3115                           
  3116                           ;parcheggio.c: 366: Pmin = K_var * cos(asin((J_var / K_var)));
  3117  001456  C1C4  F194         	movff	_park_routine$3670,asin@x
  3118  00145A  C1C5  F195         	movff	_park_routine$3670+1,asin@x+1
  3119  00145E  C1C6  F196         	movff	_park_routine$3670+2,asin@x+2
  3120  001462  C1C7  F197         	movff	_park_routine$3670+3,asin@x+3
  3121  001466  EC4E  F020         	call	_asin	;wreg free
  3122  00146A  C194  F1B0         	movff	?_asin,cos@f
  3123  00146E  C195  F1B1         	movff	?_asin+1,cos@f+1
  3124  001472  C196  F1B2         	movff	?_asin+2,cos@f+2
  3125  001476  C197  F1B3         	movff	?_asin+3,cos@f+3
  3126  00147A  ECA6  F02E         	call	_cos	;wreg free
  3127  00147E  C1B0  F1C8         	movff	?_cos,_park_routine$3671
  3128  001482  C1B1  F1C9         	movff	?_cos+1,_park_routine$3671+1
  3129  001486  C1B2  F1CA         	movff	?_cos+2,_park_routine$3671+2
  3130  00148A  C1B3  F1CB         	movff	?_cos+3,_park_routine$3671+3
  3131                           
  3132                           ;parcheggio.c: 366: Pmin = K_var * cos(asin((J_var / K_var)));
  3133  00148E  C1C8  F081         	movff	_park_routine$3671,___flmul@f1
  3134  001492  C1C9  F082         	movff	_park_routine$3671+1,___flmul@f1+1
  3135  001496  C1CA  F083         	movff	_park_routine$3671+2,___flmul@f1+2
  3136  00149A  C1CB  F084         	movff	_park_routine$3671+3,___flmul@f1+3
  3137  00149E  C124  F085         	movff	_K_var,___flmul@f2
  3138  0014A2  C125  F086         	movff	_K_var+1,___flmul@f2+1
  3139  0014A6  C126  F087         	movff	_K_var+2,___flmul@f2+2
  3140  0014AA  C127  F088         	movff	_K_var+3,___flmul@f2+3
  3141  0014AE  ECAB  F02A         	call	___flmul	;wreg free
  3142  0014B2  C081  F128         	movff	?___flmul,_Pmin
  3143  0014B6  C082  F129         	movff	?___flmul+1,_Pmin+1
  3144  0014BA  C083  F12A         	movff	?___flmul+2,_Pmin+2
  3145  0014BE  C084  F12B         	movff	?___flmul+3,_Pmin+3
  3146                           
  3147                           ;parcheggio.c: 368: set_speed = 0;
  3148  0014C2  0E00               	movlw	0
  3149  0014C4  0100               	movlb	0	; () banked
  3150  0014C6  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3151  0014C8  0E00               	movlw	0
  3152  0014CA  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;parcheggio.c: 369: data_steering[0] = 90;
  3156  0014CC  0E5A               	movlw	90
  3157  0014CE  0101               	movlb	1	; () banked
  3158  0014D0  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3159                           
  3160                           ; BSR set to: 1
  3161                           ;parcheggio.c: 370: data_brake [0] = 0;
  3162  0014D2  0E00               	movlw	0
  3163  0014D4  6E26               	movwf	_data_brake,c	;volatile
  3164                           
  3165                           ; BSR set to: 1
  3166                           ;parcheggio.c: 371: data_brake [1] = 1;
  3167  0014D6  0E01               	movlw	1
  3168  0014D8  6E27               	movwf	_data_brake+1,c	;volatile
  3169                           
  3170                           ; BSR set to: 1
  3171                           ;parcheggio.c: 372: can_send();
  3172  0014DA  ECA3  F02D         	call	_can_send	;wreg free
  3173                           
  3174                           ;parcheggio.c: 374: delay_s(1);
  3175  0014DE  0E01               	movlw	1
  3176  0014E0  EC6A  F032         	call	_delay_s
  3177                           
  3178                           ;parcheggio.c: 376: data_brake [0] = 3;
  3179  0014E4  0E03               	movlw	3
  3180  0014E6  6E26               	movwf	_data_brake,c	;volatile
  3181                           
  3182                           ;parcheggio.c: 377: data_brake [1] = 1;
  3183  0014E8  0E01               	movlw	1
  3184  0014EA  6E27               	movwf	_data_brake+1,c	;volatile
  3185                           
  3186                           ;parcheggio.c: 379: set_speed = 300;
  3187  0014EC  0E01               	movlw	1
  3188  0014EE  0100               	movlb	0	; () banked
  3189  0014F0  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3190  0014F2  0E2C               	movlw	44
  3191  0014F4  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;parcheggio.c: 380: dir = 0;
  3195  0014F6  9856               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;parcheggio.c: 381: data_steering[0] = 90;
  3199  0014F8  0E5A               	movlw	90
  3200  0014FA  0101               	movlb	1	; () banked
  3201  0014FC  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3202                           
  3203                           ; BSR set to: 1
  3204                           ;parcheggio.c: 382: data_test[0] = ((60 + Pmin + 6)-(n + 15));
  3205  0014FE  0E00               	movlw	0
  3206  001500  0100               	movlb	0	; () banked
  3207  001502  6FA3               	movwf	___fladd@f2& (0+255),b
  3208  001504  0E00               	movlw	0
  3209  001506  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  3210  001508  0E70               	movlw	112
  3211  00150A  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  3212  00150C  0E41               	movlw	65
  3213  00150E  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  3214  001510  C138  F09F         	movff	_n,___fladd@f1
  3215  001514  C139  F0A0         	movff	_n+1,___fladd@f1+1
  3216  001518  C13A  F0A1         	movff	_n+2,___fladd@f1+2
  3217  00151C  C13B  F0A2         	movff	_n+3,___fladd@f1+3
  3218  001520  EC6E  F023         	call	___fladd	;wreg free
  3219  001524  C09F  F0AB         	movff	?___fladd,___flneg@f1
  3220  001528  C0A0  F0AC         	movff	?___fladd+1,___flneg@f1+1
  3221  00152C  C0A1  F0AD         	movff	?___fladd+2,___flneg@f1+2
  3222  001530  C0A2  F0AE         	movff	?___fladd+3,___flneg@f1+3
  3223  001534  ECDE  F031         	call	___flneg	;wreg free
  3224  001538  C0AB  F1CC         	movff	?___flneg,_park_routine$3665
  3225  00153C  C0AC  F1CD         	movff	?___flneg+1,_park_routine$3665+1
  3226  001540  C0AD  F1CE         	movff	?___flneg+2,_park_routine$3665+2
  3227  001544  C0AE  F1CF         	movff	?___flneg+3,_park_routine$3665+3
  3228                           
  3229                           ;parcheggio.c: 382: data_test[0] = ((60 + Pmin + 6)-(n + 15));
  3230  001548  C128  F0A3         	movff	_Pmin,___fladd@f2
  3231  00154C  C129  F0A4         	movff	_Pmin+1,___fladd@f2+1
  3232  001550  C12A  F0A5         	movff	_Pmin+2,___fladd@f2+2
  3233  001554  C12B  F0A6         	movff	_Pmin+3,___fladd@f2+3
  3234  001558  C1CC  F09F         	movff	_park_routine$3665,___fladd@f1
  3235  00155C  C1CD  F0A0         	movff	_park_routine$3665+1,___fladd@f1+1
  3236  001560  C1CE  F0A1         	movff	_park_routine$3665+2,___fladd@f1+2
  3237  001564  C1CF  F0A2         	movff	_park_routine$3665+3,___fladd@f1+3
  3238  001568  EC6E  F023         	call	___fladd	;wreg free
  3239  00156C  C09F  F1D0         	movff	?___fladd,_park_routine$3666
  3240  001570  C0A0  F1D1         	movff	?___fladd+1,_park_routine$3666+1
  3241  001574  C0A1  F1D2         	movff	?___fladd+2,_park_routine$3666+2
  3242  001578  C0A2  F1D3         	movff	?___fladd+3,_park_routine$3666+3
  3243                           
  3244                           ;parcheggio.c: 382: data_test[0] = ((60 + Pmin + 6)-(n + 15));
  3245  00157C  0E00               	movlw	0
  3246  00157E  0100               	movlb	0	; () banked
  3247  001580  6FA3               	movwf	___fladd@f2& (0+255),b
  3248  001582  0E00               	movlw	0
  3249  001584  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  3250  001586  0E84               	movlw	132
  3251  001588  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  3252  00158A  0E42               	movlw	66
  3253  00158C  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  3254  00158E  C1D0  F09F         	movff	_park_routine$3666,___fladd@f1
  3255  001592  C1D1  F0A0         	movff	_park_routine$3666+1,___fladd@f1+1
  3256  001596  C1D2  F0A1         	movff	_park_routine$3666+2,___fladd@f1+2
  3257  00159A  C1D3  F0A2         	movff	_park_routine$3666+3,___fladd@f1+3
  3258  00159E  EC6E  F023         	call	___fladd	;wreg free
  3259  0015A2  C09F  F0AF         	movff	?___fladd,___fltol@f1
  3260  0015A6  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  3261  0015AA  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  3262  0015AE  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  3263  0015B2  EC89  F02C         	call	___fltol	;wreg free
  3264  0015B6  0100               	movlb	0	; () banked
  3265  0015B8  51AF               	movf	?___fltol& (0+255),w,b
  3266  0015BA  0101               	movlb	1	; () banked
  3267  0015BC  6F73               	movwf	_data_test& (0+255),b	;volatile
  3268                           
  3269                           ; BSR set to: 1
  3270                           ;parcheggio.c: 383: asd = 1;
  3271  0015BE  8456               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  3272                           
  3273                           ; BSR set to: 1
  3274                           
  3275                           ;parcheggio.c: 384: while (!CANisTxReady());
  3276  0015C0  D000               	goto	l7091
  3277  0015C2                     l7091:
  3278  0015C2  ECAB  F032         	call	_CANisTxReady	;wreg free
  3279  0015C6  0900               	iorlw	0
  3280  0015C8  B4D8               	btfsc	status,2,c
  3281  0015CA  D7FB               	goto	l7091
  3282                           
  3283                           ;parcheggio.c: 385: CANsendMessage(0b00000001111, data_test, 8, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3284  0015CC  0E0F               	movlw	15
  3285  0015CE  0100               	movlb	0	; () banked
  3286  0015D0  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3287  0015D2  0E00               	movlw	0
  3288  0015D4  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3289  0015D6  0E00               	movlw	0
  3290  0015D8  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3291  0015DA  0E00               	movlw	0
  3292  0015DC  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3293  0015DE  0E73               	movlw	low _data_test
  3294  0015E0  0100               	movlb	0	; () banked
  3295  0015E2  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3296  0015E4  0E01               	movlw	high _data_test
  3297  0015E6  0100               	movlb	0	; () banked
  3298  0015E8  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3299  0015EA  0E08               	movlw	8
  3300  0015EC  0100               	movlb	0	; () banked
  3301  0015EE  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3302  0015F0  0EBC               	movlw	188
  3303  0015F2  0100               	movlb	0	; () banked
  3304  0015F4  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3305  0015F6  ECE9  F011         	call	_CANsendMessage	;wreg free
  3306                           
  3307                           ;parcheggio.c: 386: can_send();
  3308  0015FA  ECA3  F02D         	call	_can_send	;wreg free
  3309                           
  3310                           ;parcheggio.c: 388: while (asd == 1);
  3311  0015FE  D000               	goto	l786
  3312  001600                     l786:
  3313  001600  B456               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  3314  001602  D7FE               	goto	l786
  3315                           
  3316                           ;parcheggio.c: 390: set_speed = 0;
  3317  001604  0E00               	movlw	0
  3318  001606  0100               	movlb	0	; () banked
  3319  001608  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3320  00160A  0E00               	movlw	0
  3321  00160C  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3322                           
  3323                           ;parcheggio.c: 391: data_steering[0] = 90;
  3324  00160E  0E5A               	movlw	90
  3325  001610  0101               	movlb	1	; () banked
  3326  001612  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3327                           
  3328                           ;parcheggio.c: 392: data_brake [0] = 0;
  3329  001614  0E00               	movlw	0
  3330  001616  6E26               	movwf	_data_brake,c	;volatile
  3331                           
  3332                           ;parcheggio.c: 393: data_brake [1] = 1;
  3333  001618  0E01               	movlw	1
  3334  00161A  6E27               	movwf	_data_brake+1,c	;volatile
  3335                           
  3336                           ; BSR set to: 1
  3337                           ;parcheggio.c: 394: can_send();
  3338  00161C  ECA3  F02D         	call	_can_send	;wreg free
  3339                           
  3340                           ;parcheggio.c: 396: delay_s(1);
  3341  001620  0E01               	movlw	1
  3342  001622  EC6A  F032         	call	_delay_s
  3343                           
  3344                           ;parcheggio.c: 398: data_brake [0] = 3;
  3345  001626  0E03               	movlw	3
  3346  001628  6E26               	movwf	_data_brake,c	;volatile
  3347                           
  3348                           ;parcheggio.c: 399: data_brake [1] = 1;
  3349  00162A  0E01               	movlw	1
  3350  00162C  6E27               	movwf	_data_brake+1,c	;volatile
  3351                           
  3352                           ;parcheggio.c: 400: set_speed = 300;
  3353  00162E  0E01               	movlw	1
  3354  001630  0100               	movlb	0	; () banked
  3355  001632  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3356  001634  0E2C               	movlw	44
  3357  001636  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;parcheggio.c: 401: dir = 0;
  3361  001638  9856               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;parcheggio.c: 402: data_steering[0] = 180;
  3365  00163A  0EB4               	movlw	180
  3366  00163C  0101               	movlb	1	; () banked
  3367  00163E  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3368                           
  3369                           ; BSR set to: 1
  3370                           ;parcheggio.c: 403: data_test[0] = prima_sterzata - 10;
  3371  001640  0E00               	movlw	0
  3372  001642  0100               	movlb	0	; () banked
  3373  001644  6FA3               	movwf	___fladd@f2& (0+255),b
  3374  001646  0E00               	movlw	0
  3375  001648  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  3376  00164A  0E20               	movlw	32
  3377  00164C  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  3378  00164E  0EC1               	movlw	193
  3379  001650  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  3380  001652  C13C  F09F         	movff	_prima_sterzata,___fladd@f1
  3381  001656  C13D  F0A0         	movff	_prima_sterzata+1,___fladd@f1+1
  3382  00165A  C13E  F0A1         	movff	_prima_sterzata+2,___fladd@f1+2
  3383  00165E  C13F  F0A2         	movff	_prima_sterzata+3,___fladd@f1+3
  3384  001662  EC6E  F023         	call	___fladd	;wreg free
  3385  001666  C09F  F0AF         	movff	?___fladd,___fltol@f1
  3386  00166A  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  3387  00166E  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  3388  001672  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  3389  001676  EC89  F02C         	call	___fltol	;wreg free
  3390  00167A  0100               	movlb	0	; () banked
  3391  00167C  51AF               	movf	?___fltol& (0+255),w,b
  3392  00167E  0101               	movlb	1	; () banked
  3393  001680  6F73               	movwf	_data_test& (0+255),b	;volatile
  3394                           
  3395                           ; BSR set to: 1
  3396                           ;parcheggio.c: 404: asd = 1;
  3397  001682  8456               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  3398                           
  3399                           ; BSR set to: 1
  3400                           
  3401                           ;parcheggio.c: 405: while (!CANisTxReady());
  3402  001684  D000               	goto	l7115
  3403  001686                     l7115:
  3404  001686  ECAB  F032         	call	_CANisTxReady	;wreg free
  3405  00168A  0900               	iorlw	0
  3406  00168C  B4D8               	btfsc	status,2,c
  3407  00168E  D7FB               	goto	l7115
  3408                           
  3409                           ;parcheggio.c: 406: CANsendMessage(0b00000001111, data_test, 1, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3410  001690  0E0F               	movlw	15
  3411  001692  0100               	movlb	0	; () banked
  3412  001694  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3413  001696  0E00               	movlw	0
  3414  001698  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3415  00169A  0E00               	movlw	0
  3416  00169C  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3417  00169E  0E00               	movlw	0
  3418  0016A0  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3419  0016A2  0E73               	movlw	low _data_test
  3420  0016A4  0100               	movlb	0	; () banked
  3421  0016A6  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3422  0016A8  0E01               	movlw	high _data_test
  3423  0016AA  0100               	movlb	0	; () banked
  3424  0016AC  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3425  0016AE  0E01               	movlw	1
  3426  0016B0  0100               	movlb	0	; () banked
  3427  0016B2  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3428  0016B4  0EBC               	movlw	188
  3429  0016B6  0100               	movlb	0	; () banked
  3430  0016B8  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3431  0016BA  ECE9  F011         	call	_CANsendMessage	;wreg free
  3432                           
  3433                           ;parcheggio.c: 407: while (!CANisTxReady());
  3434  0016BE  D000               	goto	l7119
  3435  0016C0                     l7119:
  3436  0016C0  ECAB  F032         	call	_CANisTxReady	;wreg free
  3437  0016C4  0900               	iorlw	0
  3438  0016C6  B4D8               	btfsc	status,2,c
  3439  0016C8  D7FB               	goto	l7119
  3440                           
  3441                           ;parcheggio.c: 408: CANsendMessage(0xAA, data_test, 2, CAN_CONFIG_STD_MSG & CAN_NORMAL_T
      +                          X_FRAME & CAN_TX_PRIORITY_0);
  3442  0016CA  0EAA               	movlw	170
  3443  0016CC  0100               	movlb	0	; () banked
  3444  0016CE  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3445  0016D0  0E00               	movlw	0
  3446  0016D2  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3447  0016D4  0E00               	movlw	0
  3448  0016D6  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3449  0016D8  0E00               	movlw	0
  3450  0016DA  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3451  0016DC  0E73               	movlw	low _data_test
  3452  0016DE  0100               	movlb	0	; () banked
  3453  0016E0  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3454  0016E2  0E01               	movlw	high _data_test
  3455  0016E4  0100               	movlb	0	; () banked
  3456  0016E6  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3457  0016E8  0E02               	movlw	2
  3458  0016EA  0100               	movlb	0	; () banked
  3459  0016EC  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3460  0016EE  0EBC               	movlw	188
  3461  0016F0  0100               	movlb	0	; () banked
  3462  0016F2  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3463  0016F4  ECE9  F011         	call	_CANsendMessage	;wreg free
  3464                           
  3465                           ;parcheggio.c: 409: can_send();
  3466  0016F8  ECA3  F02D         	call	_can_send	;wreg free
  3467                           
  3468                           ;parcheggio.c: 411: while (asd == 1);
  3469  0016FC  D000               	goto	l795
  3470  0016FE                     l795:
  3471  0016FE  B456               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  3472  001700  D7FE               	goto	l795
  3473                           
  3474                           ;parcheggio.c: 413: set_speed = 0;
  3475  001702  0E00               	movlw	0
  3476  001704  0100               	movlb	0	; () banked
  3477  001706  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3478  001708  0E00               	movlw	0
  3479  00170A  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3480                           
  3481                           ;parcheggio.c: 414: data_steering[0] = 0;
  3482  00170C  0E00               	movlw	0
  3483  00170E  0101               	movlb	1	; () banked
  3484  001710  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3485                           
  3486                           ;parcheggio.c: 415: data_brake[0] = 1;
  3487  001712  0E01               	movlw	1
  3488  001714  6E26               	movwf	_data_brake,c	;volatile
  3489                           
  3490                           ; BSR set to: 1
  3491                           ;parcheggio.c: 416: asd = 1;
  3492  001716  8456               	bsf	_asd/(0+8),_asd& (0+7),c	;volatile
  3493                           
  3494                           ; BSR set to: 1
  3495                           ;parcheggio.c: 417: data_test[0] = prima_sterzata - 1;
  3496  001718  0E00               	movlw	0
  3497  00171A  0100               	movlb	0	; () banked
  3498  00171C  6FA3               	movwf	___fladd@f2& (0+255),b
  3499  00171E  0E00               	movlw	0
  3500  001720  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  3501  001722  0E80               	movlw	128
  3502  001724  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  3503  001726  0EBF               	movlw	191
  3504  001728  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  3505  00172A  C13C  F09F         	movff	_prima_sterzata,___fladd@f1
  3506  00172E  C13D  F0A0         	movff	_prima_sterzata+1,___fladd@f1+1
  3507  001732  C13E  F0A1         	movff	_prima_sterzata+2,___fladd@f1+2
  3508  001736  C13F  F0A2         	movff	_prima_sterzata+3,___fladd@f1+3
  3509  00173A  EC6E  F023         	call	___fladd	;wreg free
  3510  00173E  C09F  F0AF         	movff	?___fladd,___fltol@f1
  3511  001742  C0A0  F0B0         	movff	?___fladd+1,___fltol@f1+1
  3512  001746  C0A1  F0B1         	movff	?___fladd+2,___fltol@f1+2
  3513  00174A  C0A2  F0B2         	movff	?___fladd+3,___fltol@f1+3
  3514  00174E  EC89  F02C         	call	___fltol	;wreg free
  3515  001752  0100               	movlb	0	; () banked
  3516  001754  51AF               	movf	?___fltol& (0+255),w,b
  3517  001756  0101               	movlb	1	; () banked
  3518  001758  6F73               	movwf	_data_test& (0+255),b	;volatile
  3519                           
  3520                           ; BSR set to: 1
  3521                           
  3522                           ;parcheggio.c: 418: while (!CANisTxReady());
  3523  00175A  D000               	goto	l7129
  3524  00175C                     l7129:
  3525  00175C  ECAB  F032         	call	_CANisTxReady	;wreg free
  3526  001760  0900               	iorlw	0
  3527  001762  B4D8               	btfsc	status,2,c
  3528  001764  D7FB               	goto	l7129
  3529                           
  3530                           ;parcheggio.c: 419: CANsendMessage(0b00000001111, data_test, 1, CAN_CONFIG_STD_MSG & CAN
      +                          _NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  3531  001766  0E0F               	movlw	15
  3532  001768  0100               	movlb	0	; () banked
  3533  00176A  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3534  00176C  0E00               	movlw	0
  3535  00176E  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3536  001770  0E00               	movlw	0
  3537  001772  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3538  001774  0E00               	movlw	0
  3539  001776  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3540  001778  0E73               	movlw	low _data_test
  3541  00177A  0100               	movlb	0	; () banked
  3542  00177C  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3543  00177E  0E01               	movlw	high _data_test
  3544  001780  0100               	movlb	0	; () banked
  3545  001782  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3546  001784  0E01               	movlw	1
  3547  001786  0100               	movlb	0	; () banked
  3548  001788  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3549  00178A  0EBC               	movlw	188
  3550  00178C  0100               	movlb	0	; () banked
  3551  00178E  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3552  001790  ECE9  F011         	call	_CANsendMessage	;wreg free
  3553                           
  3554                           ;parcheggio.c: 420: can_send();
  3555  001794  ECA3  F02D         	call	_can_send	;wreg free
  3556                           
  3557                           ;parcheggio.c: 421: delay_ms(400);
  3558  001798  0E01               	movlw	1
  3559  00179A  0100               	movlb	0	; () banked
  3560  00179C  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  3561  00179E  0E90               	movlw	144
  3562  0017A0  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  3563  0017A2  ECFC  F031         	call	_delay_ms	;wreg free
  3564                           
  3565                           ;parcheggio.c: 422: set_speed = 200;
  3566  0017A6  0E00               	movlw	0
  3567  0017A8  0100               	movlb	0	; () banked
  3568  0017AA  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3569  0017AC  0EC8               	movlw	200
  3570  0017AE  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;parcheggio.c: 423: data_brake[0] = 3;
  3574  0017B0  0E03               	movlw	3
  3575  0017B2  6E26               	movwf	_data_brake,c	;volatile
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;parcheggio.c: 424: can_send();
  3579  0017B4  ECA3  F02D         	call	_can_send	;wreg free
  3580                           
  3581                           ;parcheggio.c: 425: while (asd == 1);
  3582  0017B8  D000               	goto	l801
  3583  0017BA                     l801:
  3584  0017BA  B456               	btfsc	_asd/(0+8),_asd& (0+7),c	;volatile
  3585  0017BC  D7FE               	goto	l801
  3586                           
  3587                           ;parcheggio.c: 427: data_brake [0] = 0;
  3588  0017BE  0E00               	movlw	0
  3589  0017C0  6E26               	movwf	_data_brake,c	;volatile
  3590                           
  3591                           ;parcheggio.c: 428: data_brake [1] = 1;
  3592  0017C2  0E01               	movlw	1
  3593  0017C4  6E27               	movwf	_data_brake+1,c	;volatile
  3594                           
  3595                           ;parcheggio.c: 429: set_speed = 0;
  3596  0017C6  0E00               	movlw	0
  3597  0017C8  0100               	movlb	0	; () banked
  3598  0017CA  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3599  0017CC  0E00               	movlw	0
  3600  0017CE  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3601                           
  3602                           ;parcheggio.c: 430: data_steering[0] = 90;
  3603  0017D0  0E5A               	movlw	90
  3604  0017D2  0101               	movlb	1	; () banked
  3605  0017D4  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3606                           
  3607                           ; BSR set to: 1
  3608                           ;parcheggio.c: 431: can_send();
  3609  0017D6  ECA3  F02D         	call	_can_send	;wreg free
  3610                           
  3611                           ;parcheggio.c: 433: delay_s(1);
  3612  0017DA  0E01               	movlw	1
  3613  0017DC  EC6A  F032         	call	_delay_s
  3614                           
  3615                           ;parcheggio.c: 435: avvicinamento = 1;
  3616  0017E0  8656               	bsf	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
  3617                           
  3618                           ;parcheggio.c: 436: if (sensor_distance [6] > 20) {
  3619  0017E2  500E               	movf	_sensor_distance+13,w,c	;volatile
  3620  0017E4  E104               	bnz	u8850
  3621  0017E6  0E15               	movlw	21
  3622  0017E8  5C0D               	subwf	_sensor_distance+12,w,c	;volatile
  3623  0017EA  A0D8               	btfss	status,0,c
  3624  0017EC  D018               	goto	l7159
  3625  0017EE                     u8850:
  3626                           
  3627                           ;parcheggio.c: 437: data_brake [0] = 3;
  3628  0017EE  0E03               	movlw	3
  3629  0017F0  6E26               	movwf	_data_brake,c	;volatile
  3630                           
  3631                           ;parcheggio.c: 438: data_brake [1] = 1;
  3632  0017F2  0E01               	movlw	1
  3633  0017F4  6E27               	movwf	_data_brake+1,c	;volatile
  3634                           
  3635                           ;parcheggio.c: 439: set_speed = 300;
  3636  0017F6  0E01               	movlw	1
  3637  0017F8  0100               	movlb	0	; () banked
  3638  0017FA  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3639  0017FC  0E2C               	movlw	44
  3640  0017FE  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3641                           
  3642                           ;parcheggio.c: 440: data_steering[0] = 90;
  3643  001800  0E5A               	movlw	90
  3644  001802  0101               	movlb	1	; () banked
  3645  001804  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3646                           
  3647                           ; BSR set to: 1
  3648                           ;parcheggio.c: 441: dir = 1;
  3649  001806  8856               	bsf	_dir/(0+8),_dir& (0+7),c	;volatile
  3650                           
  3651                           ; BSR set to: 1
  3652                           ;parcheggio.c: 442: can_send();
  3653  001808  ECA3  F02D         	call	_can_send	;wreg free
  3654                           
  3655                           ;parcheggio.c: 443: while (sensor_distance [6] > 20);
  3656  00180C  D000               	goto	l7157
  3657  00180E                     l7157:
  3658  00180E  500E               	movf	_sensor_distance+13,w,c	;volatile
  3659  001810  E1FE               	bnz	l7157
  3660  001812  0E15               	movlw	21
  3661  001814  5C0D               	subwf	_sensor_distance+12,w,c	;volatile
  3662  001816  A0D8               	btfss	status,0,c
  3663  001818  D002               	goto	l7159
  3664  00181A  D7F9               	goto	l7157
  3665  00181C  D000               	goto	l7159
  3666  00181E                     l7159:
  3667                           
  3668                           ;parcheggio.c: 444: }
  3669                           ;parcheggio.c: 445: data_brake [0] = 0;
  3670  00181E  0E00               	movlw	0
  3671  001820  6E26               	movwf	_data_brake,c	;volatile
  3672                           
  3673                           ;parcheggio.c: 446: data_brake [1] = 1;
  3674  001822  0E01               	movlw	1
  3675  001824  6E27               	movwf	_data_brake+1,c	;volatile
  3676                           
  3677                           ;parcheggio.c: 447: set_speed = 0;
  3678  001826  0E00               	movlw	0
  3679  001828  0100               	movlb	0	; () banked
  3680  00182A  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
  3681  00182C  0E00               	movlw	0
  3682  00182E  6FE5               	movwf	_set_speed& (0+255),b	;volatile
  3683                           
  3684                           ;parcheggio.c: 448: data_steering[0] = 90;
  3685  001830  0E5A               	movlw	90
  3686  001832  0101               	movlb	1	; () banked
  3687  001834  6F6B               	movwf	_data_steering& (0+255),b	;volatile
  3688                           
  3689                           ; BSR set to: 1
  3690                           ;parcheggio.c: 449: dir = 0;
  3691  001836  9856               	bcf	_dir/(0+8),_dir& (0+7),c	;volatile
  3692                           
  3693                           ; BSR set to: 1
  3694                           ;parcheggio.c: 450: can_send();
  3695  001838  ECA3  F02D         	call	_can_send	;wreg free
  3696                           
  3697                           ;parcheggio.c: 452: delay_s(1);
  3698  00183C  0E01               	movlw	1
  3699  00183E  EC6A  F032         	call	_delay_s
  3700                           
  3701                           ;parcheggio.c: 454: data[0] = 3;
  3702  001842  0E03               	movlw	3
  3703  001844  0101               	movlb	1	; () banked
  3704  001846  6F53               	movwf	_data& (0+255),b	;volatile
  3705                           
  3706                           ; BSR set to: 1
  3707                           
  3708                           ;parcheggio.c: 455: while (!CANisTxReady());
  3709  001848  D000               	goto	l7169
  3710  00184A                     l7169:
  3711  00184A  ECAB  F032         	call	_CANisTxReady	;wreg free
  3712  00184E  0900               	iorlw	0
  3713  001850  B4D8               	btfsc	status,2,c
  3714  001852  D7FB               	goto	l7169
  3715                           
  3716                           ;parcheggio.c: 456: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
  3717  001854  0E0D               	movlw	13
  3718  001856  0100               	movlb	0	; () banked
  3719  001858  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  3720  00185A  0E00               	movlw	0
  3721  00185C  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  3722  00185E  0E00               	movlw	0
  3723  001860  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  3724  001862  0E00               	movlw	0
  3725  001864  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  3726  001866  0E53               	movlw	low _data
  3727  001868  0100               	movlb	0	; () banked
  3728  00186A  6F7B               	movwf	CANsendMessage@data& (0+255),b
  3729  00186C  0E01               	movlw	high _data
  3730  00186E  0100               	movlb	0	; () banked
  3731  001870  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  3732  001872  0E08               	movlw	8
  3733  001874  0100               	movlb	0	; () banked
  3734  001876  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  3735  001878  0EBC               	movlw	188
  3736  00187A  0100               	movlb	0	; () banked
  3737  00187C  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  3738  00187E  ECE9  F011         	call	_CANsendMessage	;wreg free
  3739                           
  3740                           ;parcheggio.c: 457: delay_ms(100);
  3741  001882  0E00               	movlw	0
  3742  001884  0100               	movlb	0	; () banked
  3743  001886  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  3744  001888  0E64               	movlw	100
  3745  00188A  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  3746  00188C  ECFC  F031         	call	_delay_ms	;wreg free
  3747  001890  00FF               	reset		;# 
  3748  001892  D000               	goto	l7175
  3749  001894                     l7175:
  3750  001894  AA81               	btfss	3969,5,c	;volatile
  3751  001896  0012               	return	
  3752  001898  A256               	btfss	_activation/(0+8),_activation& (0+7),c	;volatile
  3753  00189A  0012               	return	
  3754  00189C  AC57               	btfss	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  3755  00189E  0012               	return	
  3756  0018A0  EF1C  F007         	goto	l782
  3757  0018A4  0012               	return	
  3758  0018A6  0012               	return		;funcret
  3759  0018A8                     __end_of_park_routine:
  3760                           	opt stack 0
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           postinc0	equ	0xFEE
  3766                           wreg	equ	0xFE8
  3767                           postinc2	equ	0xFDE
  3768                           postdec2	equ	0xFDD
  3769                           status	equ	0xFD8
  3770                           
  3771 ;; *************** function _parallelo *****************
  3772 ;; Defined at:
  3773 ;;		line 485 in file "parcheggio.c"
  3774 ;; Parameters:    Size  Location     Type
  3775 ;;		None
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;		None
  3778 ;; Return value:  Size  Location     Type
  3779 ;;		None               void
  3780 ;; Registers used:
  3781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3789 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3790 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3791 ;;Total ram usage:        2 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:   10
  3794 ;; This function calls:
  3795 ;;		___awtofl
  3796 ;;		___fladd
  3797 ;;		___fldiv
  3798 ;;		___flge
  3799 ;;		___flmul
  3800 ;;		___fltol
  3801 ;;		_abs
  3802 ;;		_asin
  3803 ;;		_can_send
  3804 ;;		_sqrt
  3805 ;; This function is called by:
  3806 ;;		_park_search
  3807 ;;		_park_routine
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           	psect	text4
  3812  004B9E                     __ptext4:
  3813                           	opt stack 0
  3814  004B9E                     _parallelo:
  3815                           	opt stack 19
  3816                           
  3817                           ;parcheggio.c: 486: alignment_gap = abs(sensor_distance[0] - sensor_distance[1]);
  3818                           
  3819                           ;incstack = 0
  3820  004B9E  EE20  F003         	lfsr	2,_sensor_distance+2	;volatile
  3821  004BA2  CFDE F1B0          	movff	postinc2,??_parallelo
  3822  004BA6  CFDD F1B1          	movff	postdec2,??_parallelo+1
  3823  004BAA  0101               	movlb	1	; () banked
  3824  004BAC  1FB0               	comf	??_parallelo& (0+255),f,b
  3825  004BAE  1FB1               	comf	(??_parallelo+1)& (0+255),f,b
  3826  004BB0  4BB0               	infsnz	??_parallelo& (0+255),f,b
  3827  004BB2  2BB1               	incf	(??_parallelo+1)& (0+255),f,b
  3828  004BB4  5001               	movf	_sensor_distance,w,c	;volatile
  3829  004BB6  0101               	movlb	1	; () banked
  3830  004BB8  25B0               	addwf	??_parallelo& (0+255),w,b
  3831  004BBA  0100               	movlb	0	; () banked
  3832  004BBC  6F77               	movwf	abs@a& (0+255),b
  3833  004BBE  5002               	movf	_sensor_distance+1,w,c	;volatile
  3834  004BC0  0101               	movlb	1	; () banked
  3835  004BC2  21B1               	addwfc	(??_parallelo+1)& (0+255),w,b
  3836  004BC4  0100               	movlb	0	; () banked
  3837  004BC6  6F78               	movwf	(abs@a+1)& (0+255),b
  3838  004BC8  EC81  F032         	call	_abs	;wreg free
  3839  004BCC  C077  F081         	movff	?_abs,___awtofl@c
  3840  004BD0  C078  F082         	movff	?_abs+1,___awtofl@c+1
  3841  004BD4  EC99  F031         	call	___awtofl	;wreg free
  3842  004BD8  C081  F0D9         	movff	?___awtofl,_alignment_gap	;volatile
  3843  004BDC  C082  F0DA         	movff	?___awtofl+1,_alignment_gap+1	;volatile
  3844  004BE0  C083  F0DB         	movff	?___awtofl+2,_alignment_gap+2	;volatile
  3845  004BE4  C084  F0DC         	movff	?___awtofl+3,_alignment_gap+3	;volatile
  3846                           
  3847                           ;parcheggio.c: 487: if (alignment_gap < 30) {
  3848  004BE8  C0D9  F0B3         	movff	_alignment_gap,___flge@ff1	;volatile
  3849  004BEC  C0DA  F0B4         	movff	_alignment_gap+1,___flge@ff1+1	;volatile
  3850  004BF0  C0DB  F0B5         	movff	_alignment_gap+2,___flge@ff1+2	;volatile
  3851  004BF4  C0DC  F0B6         	movff	_alignment_gap+3,___flge@ff1+3	;volatile
  3852  004BF8  0E00               	movlw	0
  3853  004BFA  0100               	movlb	0	; () banked
  3854  004BFC  6FB7               	movwf	___flge@ff2& (0+255),b
  3855  004BFE  0E00               	movlw	0
  3856  004C00  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  3857  004C02  0EF0               	movlw	240
  3858  004C04  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  3859  004C06  0E41               	movlw	65
  3860  004C08  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  3861  004C0A  EC2A  F02E         	call	___flge	;wreg free
  3862  004C0E  0100               	movlb	0	; () banked
  3863  004C10  B0D8               	btfsc	status,0,c
  3864  004C12  D0E8               	goto	l6811
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;parcheggio.c: 488: if ((sensor_distance[0] < 30) && (sensor_distance[1] < 30)) {
  3868  004C14  5002               	movf	_sensor_distance+1,w,c	;volatile
  3869  004C16  E103               	bnz	u8471
  3870  004C18  0E1E               	movlw	30
  3871  004C1A  5C01               	subwf	_sensor_distance,w,c	;volatile
  3872  004C1C  B0D8               	btfsc	status,0,c
  3873  004C1E                     u8471:
  3874  004C1E  0012               	return	
  3875                           
  3876                           ; BSR set to: 0
  3877  004C20  5004               	movf	_sensor_distance+3,w,c	;volatile
  3878  004C22  E103               	bnz	u8481
  3879  004C24  0E1E               	movlw	30
  3880  004C26  5C03               	subwf	_sensor_distance+2,w,c	;volatile
  3881  004C28  B0D8               	btfsc	status,0,c
  3882  004C2A                     u8481:
  3883  004C2A  0012               	return	
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;parcheggio.c: 489: x = (((6)*(6)) + ((alignment_gap * alignment_gap)));
  3887  004C2C  C0D9  F085         	movff	_alignment_gap,___flmul@f2	;volatile
  3888  004C30  C0DA  F086         	movff	_alignment_gap+1,___flmul@f2+1	;volatile
  3889  004C34  C0DB  F087         	movff	_alignment_gap+2,___flmul@f2+2	;volatile
  3890  004C38  C0DC  F088         	movff	_alignment_gap+3,___flmul@f2+3	;volatile
  3891  004C3C  C0D9  F081         	movff	_alignment_gap,___flmul@f1	;volatile
  3892  004C40  C0DA  F082         	movff	_alignment_gap+1,___flmul@f1+1	;volatile
  3893  004C44  C0DB  F083         	movff	_alignment_gap+2,___flmul@f1+2	;volatile
  3894  004C48  C0DC  F084         	movff	_alignment_gap+3,___flmul@f1+3	;volatile
  3895  004C4C  ECAB  F02A         	call	___flmul	;wreg free
  3896  004C50  C081  F09F         	movff	?___flmul,___fladd@f1
  3897  004C54  C082  F0A0         	movff	?___flmul+1,___fladd@f1+1
  3898  004C58  C083  F0A1         	movff	?___flmul+2,___fladd@f1+2
  3899  004C5C  C084  F0A2         	movff	?___flmul+3,___fladd@f1+3
  3900  004C60  0E00               	movlw	0
  3901  004C62  0100               	movlb	0	; () banked
  3902  004C64  6FA3               	movwf	___fladd@f2& (0+255),b
  3903  004C66  0E00               	movlw	0
  3904  004C68  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  3905  004C6A  0E10               	movlw	16
  3906  004C6C  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  3907  004C6E  0E42               	movlw	66
  3908  004C70  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  3909  004C72  EC6E  F023         	call	___fladd	;wreg free
  3910  004C76  C09F  F015         	movff	?___fladd,_x	;volatile
  3911  004C7A  C0A0  F016         	movff	?___fladd+1,_x+1	;volatile
  3912  004C7E  C0A1  F017         	movff	?___fladd+2,_x+2	;volatile
  3913  004C82  C0A2  F018         	movff	?___fladd+3,_x+3	;volatile
  3914                           
  3915                           ;parcheggio.c: 490: x = sqrt(x);
  3916  004C86  C015  F0D1         	movff	_x,sqrt@y	;volatile
  3917  004C8A  C016  F0D2         	movff	_x+1,sqrt@y+1	;volatile
  3918  004C8E  C017  F0D3         	movff	_x+2,sqrt@y+2	;volatile
  3919  004C92  C018  F0D4         	movff	_x+3,sqrt@y+3	;volatile
  3920  004C96  ECF9  F026         	call	_sqrt	;wreg free
  3921  004C9A  C0D1  F015         	movff	?_sqrt,_x	;volatile
  3922  004C9E  C0D2  F016         	movff	?_sqrt+1,_x+1	;volatile
  3923  004CA2  C0D3  F017         	movff	?_sqrt+2,_x+2	;volatile
  3924  004CA6  C0D4  F018         	movff	?_sqrt+3,_x+3	;volatile
  3925                           
  3926                           ;parcheggio.c: 491: z = alignment_gap / x;
  3927  004CAA  C0D9  F090         	movff	_alignment_gap,___fldiv@f1	;volatile
  3928  004CAE  C0DA  F091         	movff	_alignment_gap+1,___fldiv@f1+1	;volatile
  3929  004CB2  C0DB  F092         	movff	_alignment_gap+2,___fldiv@f1+2	;volatile
  3930  004CB6  C0DC  F093         	movff	_alignment_gap+3,___fldiv@f1+3	;volatile
  3931  004CBA  C015  F094         	movff	_x,___fldiv@f2	;volatile
  3932  004CBE  C016  F095         	movff	_x+1,___fldiv@f2+1	;volatile
  3933  004CC2  C017  F096         	movff	_x+2,___fldiv@f2+2	;volatile
  3934  004CC6  C018  F097         	movff	_x+3,___fldiv@f2+3	;volatile
  3935  004CCA  EC5D  F02B         	call	___fldiv	;wreg free
  3936  004CCE  C090  F0DD         	movff	?___fldiv,_z	;volatile
  3937  004CD2  C091  F0DE         	movff	?___fldiv+1,_z+1	;volatile
  3938  004CD6  C092  F0DF         	movff	?___fldiv+2,_z+2	;volatile
  3939  004CDA  C093  F0E0         	movff	?___fldiv+3,_z+3	;volatile
  3940                           
  3941                           ;parcheggio.c: 492: z = asin(z);
  3942  004CDE  C0DD  F194         	movff	_z,asin@x	;volatile
  3943  004CE2  C0DE  F195         	movff	_z+1,asin@x+1	;volatile
  3944  004CE6  C0DF  F196         	movff	_z+2,asin@x+2	;volatile
  3945  004CEA  C0E0  F197         	movff	_z+3,asin@x+3	;volatile
  3946  004CEE  EC4E  F020         	call	_asin	;wreg free
  3947  004CF2  C194  F0DD         	movff	?_asin,_z	;volatile
  3948  004CF6  C195  F0DE         	movff	?_asin+1,_z+1	;volatile
  3949  004CFA  C196  F0DF         	movff	?_asin+2,_z+2	;volatile
  3950  004CFE  C197  F0E0         	movff	?_asin+3,_z+3	;volatile
  3951                           
  3952                           ;parcheggio.c: 493: z = z / 3.14159265358979323846 * 180;
  3953  004D02  0EDB               	movlw	219
  3954  004D04  0100               	movlb	0	; () banked
  3955  004D06  6F94               	movwf	___fldiv@f2& (0+255),b
  3956  004D08  0E0F               	movlw	15
  3957  004D0A  6F95               	movwf	(___fldiv@f2+1)& (0+255),b
  3958  004D0C  0E49               	movlw	73
  3959  004D0E  6F96               	movwf	(___fldiv@f2+2)& (0+255),b
  3960  004D10  0E40               	movlw	64
  3961  004D12  6F97               	movwf	(___fldiv@f2+3)& (0+255),b
  3962  004D14  C0DD  F090         	movff	_z,___fldiv@f1	;volatile
  3963  004D18  C0DE  F091         	movff	_z+1,___fldiv@f1+1	;volatile
  3964  004D1C  C0DF  F092         	movff	_z+2,___fldiv@f1+2	;volatile
  3965  004D20  C0E0  F093         	movff	_z+3,___fldiv@f1+3	;volatile
  3966  004D24  EC5D  F02B         	call	___fldiv	;wreg free
  3967  004D28  C090  F081         	movff	?___fldiv,___flmul@f1
  3968  004D2C  C091  F082         	movff	?___fldiv+1,___flmul@f1+1
  3969  004D30  C092  F083         	movff	?___fldiv+2,___flmul@f1+2
  3970  004D34  C093  F084         	movff	?___fldiv+3,___flmul@f1+3
  3971  004D38  0E00               	movlw	0
  3972  004D3A  0100               	movlb	0	; () banked
  3973  004D3C  6F85               	movwf	___flmul@f2& (0+255),b
  3974  004D3E  0E00               	movlw	0
  3975  004D40  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  3976  004D42  0E34               	movlw	52
  3977  004D44  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  3978  004D46  0E43               	movlw	67
  3979  004D48  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  3980  004D4A  ECAB  F02A         	call	___flmul	;wreg free
  3981  004D4E  C081  F0DD         	movff	?___flmul,_z	;volatile
  3982  004D52  C082  F0DE         	movff	?___flmul+1,_z+1	;volatile
  3983  004D56  C083  F0DF         	movff	?___flmul+2,_z+2	;volatile
  3984  004D5A  C084  F0E0         	movff	?___flmul+3,_z+3	;volatile
  3985                           
  3986                           ;parcheggio.c: 494: data_correction[0] = z;
  3987  004D5E  C0DD  F0AF         	movff	_z,___fltol@f1	;volatile
  3988  004D62  C0DE  F0B0         	movff	_z+1,___fltol@f1+1	;volatile
  3989  004D66  C0DF  F0B1         	movff	_z+2,___fltol@f1+2	;volatile
  3990  004D6A  C0E0  F0B2         	movff	_z+3,___fltol@f1+3	;volatile
  3991  004D6E  EC89  F02C         	call	___fltol	;wreg free
  3992  004D72  0100               	movlb	0	; () banked
  3993  004D74  51AF               	movf	?___fltol& (0+255),w,b
  3994  004D76  0101               	movlb	1	; () banked
  3995  004D78  6F5B               	movwf	_data_correction& (0+255),b	;volatile
  3996                           
  3997                           ; BSR set to: 1
  3998                           ;parcheggio.c: 496: if (sensor_distance[0] < sensor_distance[1]) {
  3999  004D7A  5003               	movf	_sensor_distance+2,w,c	;volatile
  4000  004D7C  5C01               	subwf	_sensor_distance,w,c	;volatile
  4001  004D7E  5004               	movf	_sensor_distance+3,w,c	;volatile
  4002  004D80  5802               	subwfb	_sensor_distance+1,w,c	;volatile
  4003  004D82  B0D8               	btfsc	status,0,c
  4004  004D84  D002               	goto	l6803
  4005                           
  4006                           ; BSR set to: 1
  4007                           ;parcheggio.c: 497: data_correction[1] = 0;
  4008  004D86  0E00               	movlw	0
  4009  004D88  D001               	goto	L1
  4010  004D8A                     l6803:
  4011                           
  4012                           ; BSR set to: 1
  4013                           ;parcheggio.c: 499: data_correction[1] = 1;
  4014  004D8A  0E01               	movlw	1
  4015  004D8C                     L1:
  4016  004D8C  0101               	movlb	1	; () banked
  4017  004D8E  6F5C               	movwf	(_data_correction+1)& (0+255),b	;volatile
  4018  004D90  D000               	goto	l6805
  4019  004D92                     l6805:
  4020                           
  4021                           ; BSR set to: 1
  4022                           ;parcheggio.c: 500: }
  4023                           ;parcheggio.c: 501: if ((old_alignment_gap != alignment_gap) || (old_dir_correction != d
      +                          ata_correction[1])) {
  4024  004D92  0100               	movlb	0	; () banked
  4025  004D94  51D9               	movf	_alignment_gap& (0+255),w,b	;volatile
  4026  004D96  1811               	xorwf	_old_alignment_gap,w,c	;volatile
  4027  004D98  E114               	bnz	l840
  4028  004D9A  0100               	movlb	0	; () banked
  4029  004D9C  51DA               	movf	(_alignment_gap+1)& (0+255),w,b	;volatile
  4030  004D9E  1812               	xorwf	_old_alignment_gap+1,w,c	;volatile
  4031  004DA0  E110               	bnz	l840
  4032  004DA2  0100               	movlb	0	; () banked
  4033  004DA4  51DB               	movf	(_alignment_gap+2)& (0+255),w,b	;volatile
  4034  004DA6  1813               	xorwf	_old_alignment_gap+2,w,c	;volatile
  4035  004DA8  E10C               	bnz	l840
  4036  004DAA  0100               	movlb	0	; () banked
  4037  004DAC  51DC               	movf	(_alignment_gap+3)& (0+255),w,b	;volatile
  4038  004DAE  1814               	xorwf	_old_alignment_gap+3,w,c	;volatile
  4039  004DB0  A4D8               	btfss	status,2,c
  4040  004DB2  D007               	goto	l840
  4041                           
  4042                           ; BSR set to: 0
  4043  004DB4  0E00               	movlw	0
  4044  004DB6  B657               	btfsc	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  4045  004DB8  0E01               	movlw	1
  4046  004DBA  0101               	movlb	1	; () banked
  4047  004DBC  195C               	xorwf	(_data_correction+1)& (0+255),w,b	;volatile
  4048  004DBE  B4D8               	btfsc	status,2,c
  4049  004DC0  0012               	return	
  4050  004DC2                     l840:
  4051                           
  4052                           ;parcheggio.c: 502: old_alignment_gap = alignment_gap;
  4053  004DC2  C0D9  F011         	movff	_alignment_gap,_old_alignment_gap	;volatile
  4054  004DC6  C0DA  F012         	movff	_alignment_gap+1,_old_alignment_gap+1	;volatile
  4055  004DCA  C0DB  F013         	movff	_alignment_gap+2,_old_alignment_gap+2	;volatile
  4056  004DCE  C0DC  F014         	movff	_alignment_gap+3,_old_alignment_gap+3	;volatile
  4057                           
  4058                           ;parcheggio.c: 503: old_dir_correction = data_correction[1];
  4059  004DD2  0101               	movlb	1	; () banked
  4060  004DD4  B15C               	btfsc	(_data_correction+1)& (0+255),0,b	;volatile
  4061  004DD6  D002               	bra	u8525
  4062  004DD8  9657               	bcf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  4063  004DDA  D001               	bra	u8526
  4064  004DDC                     u8525:
  4065  004DDC  8657               	bsf	_old_dir_correction/(0+8),_old_dir_correction& (0+7),c	;volatile
  4066  004DDE                     u8526:
  4067                           
  4068                           ;parcheggio.c: 504: can_send();
  4069  004DDE  ECA3  F02D         	call	_can_send	;wreg free
  4070                           
  4071                           ;parcheggio.c: 505: }
  4072                           ;parcheggio.c: 506: }
  4073                           ;parcheggio.c: 507: } else {
  4074  004DE2  0012               	return	
  4075  004DE4                     l6811:
  4076                           
  4077                           ;parcheggio.c: 508: data_correction[0] = 0;
  4078  004DE4  0E00               	movlw	0
  4079  004DE6  0101               	movlb	1	; () banked
  4080  004DE8  6F5B               	movwf	_data_correction& (0+255),b	;volatile
  4081                           
  4082                           ; BSR set to: 1
  4083                           ;parcheggio.c: 509: can_send();
  4084  004DEA  ECA3  F02D         	call	_can_send	;wreg free
  4085  004DEE  0012               	return	
  4086  004DF0  0012               	return		;funcret
  4087  004DF2                     __end_of_parallelo:
  4088                           	opt stack 0
  4089                           tblptru	equ	0xFF8
  4090                           tblptrh	equ	0xFF7
  4091                           tblptrl	equ	0xFF6
  4092                           tablat	equ	0xFF5
  4093                           postinc0	equ	0xFEE
  4094                           wreg	equ	0xFE8
  4095                           postinc2	equ	0xFDE
  4096                           postdec2	equ	0xFDD
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function _can_send *****************
  4100 ;; Defined at:
  4101 ;;		line 462 in file "parcheggio.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;		None
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;		None
  4106 ;; Return value:  Size  Location     Type
  4107 ;;		None               void
  4108 ;; Registers used:
  4109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4119 ;;Total ram usage:        0 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    6
  4122 ;; This function calls:
  4123 ;;		_CANisTxReady
  4124 ;;		_CANsendMessage
  4125 ;; This function is called by:
  4126 ;;		_park_routine
  4127 ;;		_parallelo
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           	psect	text5
  4132  005B46                     __ptext5:
  4133                           	opt stack 0
  4134  005B46                     _can_send:
  4135                           	opt stack 22
  4136                           
  4137                           ;parcheggio.c: 463: if (start_operation == 1) {
  4138                           
  4139                           ;incstack = 0
  4140  005B46  BC57               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
  4141  005B48  D002               	goto	l6635
  4142  005B4A  D066               	goto	l6655
  4143                           
  4144                           ;parcheggio.c: 465: while (CANisTxReady() != 1);
  4145  005B4C  D000               	goto	l6635
  4146  005B4E                     l6635:
  4147  005B4E  ECAB  F032         	call	_CANisTxReady	;wreg free
  4148  005B52  06E8               	decf	wreg,f,c
  4149  005B54  A4D8               	btfss	status,2,c
  4150  005B56  D7FB               	goto	l6635
  4151                           
  4152                           ;parcheggio.c: 466: CANsendMessage(0b00000000111, data_steering, 8, CAN_CONFIG_STD_MSG &
      +                           CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  4153  005B58  0E07               	movlw	7
  4154  005B5A  0100               	movlb	0	; () banked
  4155  005B5C  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  4156  005B5E  0E00               	movlw	0
  4157  005B60  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  4158  005B62  0E00               	movlw	0
  4159  005B64  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  4160  005B66  0E00               	movlw	0
  4161  005B68  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  4162  005B6A  0E6B               	movlw	low _data_steering
  4163  005B6C  0100               	movlb	0	; () banked
  4164  005B6E  6F7B               	movwf	CANsendMessage@data& (0+255),b
  4165  005B70  0E01               	movlw	high _data_steering
  4166  005B72  0100               	movlb	0	; () banked
  4167  005B74  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  4168  005B76  0E08               	movlw	8
  4169  005B78  0100               	movlb	0	; () banked
  4170  005B7A  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  4171  005B7C  0EBC               	movlw	188
  4172  005B7E  0100               	movlb	0	; () banked
  4173  005B80  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  4174  005B82  ECE9  F011         	call	_CANsendMessage	;wreg free
  4175                           
  4176                           ;parcheggio.c: 469: data_speed[0] = set_speed;
  4177  005B86  C0E5  F163         	movff	_set_speed,_data_speed	;volatile
  4178                           
  4179                           ;parcheggio.c: 470: data_speed[1] = (set_speed >> 8);
  4180  005B8A  0100               	movlb	0	; () banked
  4181  005B8C  51E6               	movf	(_set_speed+1)& (0+255),w,b	;volatile
  4182  005B8E  0101               	movlb	1	; () banked
  4183  005B90  6F64               	movwf	(_data_speed+1)& (0+255),b	;volatile
  4184                           
  4185                           ; BSR set to: 1
  4186                           ;parcheggio.c: 471: data_speed[2] = dir;
  4187  005B92  0E00               	movlw	0
  4188  005B94  B856               	btfsc	_dir/(0+8),_dir& (0+7),c	;volatile
  4189  005B96  0E01               	movlw	1
  4190  005B98  0101               	movlb	1	; () banked
  4191  005B9A  6F65               	movwf	(_data_speed+2)& (0+255),b	;volatile
  4192                           
  4193                           ; BSR set to: 1
  4194                           
  4195                           ;parcheggio.c: 472: while (CANisTxReady() != 1);
  4196  005B9C  D000               	goto	l6645
  4197  005B9E                     l6645:
  4198  005B9E  ECAB  F032         	call	_CANisTxReady	;wreg free
  4199  005BA2  06E8               	decf	wreg,f,c
  4200  005BA4  A4D8               	btfss	status,2,c
  4201  005BA6  D7FB               	goto	l6645
  4202                           
  4203                           ;parcheggio.c: 473: CANsendMessage(0b00000000101, data_speed, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  4204  005BA8  0E05               	movlw	5
  4205  005BAA  0100               	movlb	0	; () banked
  4206  005BAC  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  4207  005BAE  0E00               	movlw	0
  4208  005BB0  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  4209  005BB2  0E00               	movlw	0
  4210  005BB4  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  4211  005BB6  0E00               	movlw	0
  4212  005BB8  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  4213  005BBA  0E63               	movlw	low _data_speed
  4214  005BBC  0100               	movlb	0	; () banked
  4215  005BBE  6F7B               	movwf	CANsendMessage@data& (0+255),b
  4216  005BC0  0E01               	movlw	high _data_speed
  4217  005BC2  0100               	movlb	0	; () banked
  4218  005BC4  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  4219  005BC6  0E08               	movlw	8
  4220  005BC8  0100               	movlb	0	; () banked
  4221  005BCA  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  4222  005BCC  0EBC               	movlw	188
  4223  005BCE  0100               	movlb	0	; () banked
  4224  005BD0  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  4225  005BD2  ECE9  F011         	call	_CANsendMessage	;wreg free
  4226                           
  4227                           ;parcheggio.c: 476: data_brake[1] = 0;
  4228  005BD6  0E00               	movlw	0
  4229  005BD8  6E27               	movwf	_data_brake+1,c	;volatile
  4230                           
  4231                           ;parcheggio.c: 477: while (CANisTxReady() != 1);
  4232  005BDA  D000               	goto	l6651
  4233  005BDC                     l6651:
  4234  005BDC  ECAB  F032         	call	_CANisTxReady	;wreg free
  4235  005BE0  06E8               	decf	wreg,f,c
  4236  005BE2  A4D8               	btfss	status,2,c
  4237  005BE4  D7FB               	goto	l6651
  4238                           
  4239                           ;parcheggio.c: 478: CANsendMessage(0b00000000110, data_brake, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  4240  005BE6  0E06               	movlw	6
  4241  005BE8  0100               	movlb	0	; () banked
  4242  005BEA  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  4243  005BEC  0E00               	movlw	0
  4244  005BEE  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  4245  005BF0  0E00               	movlw	0
  4246  005BF2  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  4247  005BF4  0E00               	movlw	0
  4248  005BF6  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  4249  005BF8  0E26               	movlw	low _data_brake
  4250  005BFA  0100               	movlb	0	; () banked
  4251  005BFC  6F7B               	movwf	CANsendMessage@data& (0+255),b
  4252  005BFE  0E00               	movlw	high _data_brake
  4253  005C00  0100               	movlb	0	; () banked
  4254  005C02  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  4255  005C04  0E08               	movlw	8
  4256  005C06  0100               	movlb	0	; () banked
  4257  005C08  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  4258  005C0A  0EBC               	movlw	188
  4259  005C0C  0100               	movlb	0	; () banked
  4260  005C0E  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  4261  005C10  ECE9  F011         	call	_CANsendMessage	;wreg free
  4262                           
  4263                           ;parcheggio.c: 479: } else {
  4264  005C14  0012               	return	
  4265                           
  4266                           ;parcheggio.c: 480: while (CANisTxReady() != 1);
  4267  005C16  D000               	goto	l6655
  4268  005C18                     l6655:
  4269  005C18  ECAB  F032         	call	_CANisTxReady	;wreg free
  4270  005C1C  06E8               	decf	wreg,f,c
  4271  005C1E  A4D8               	btfss	status,2,c
  4272  005C20  D7FB               	goto	l6655
  4273                           
  4274                           ;parcheggio.c: 481: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
  4275  005C22  0E10               	movlw	16
  4276  005C24  0100               	movlb	0	; () banked
  4277  005C26  6F77               	movwf	CANsendMessage@identifier& (0+255),b
  4278  005C28  0E00               	movlw	0
  4279  005C2A  6F78               	movwf	(CANsendMessage@identifier+1)& (0+255),b
  4280  005C2C  0E00               	movlw	0
  4281  005C2E  6F79               	movwf	(CANsendMessage@identifier+2)& (0+255),b
  4282  005C30  0E00               	movlw	0
  4283  005C32  6F7A               	movwf	(CANsendMessage@identifier+3)& (0+255),b
  4284  005C34  0E5B               	movlw	low _data_correction
  4285  005C36  0100               	movlb	0	; () banked
  4286  005C38  6F7B               	movwf	CANsendMessage@data& (0+255),b
  4287  005C3A  0E01               	movlw	high _data_correction
  4288  005C3C  0100               	movlb	0	; () banked
  4289  005C3E  6F7C               	movwf	(CANsendMessage@data+1)& (0+255),b
  4290  005C40  0E08               	movlw	8
  4291  005C42  0100               	movlb	0	; () banked
  4292  005C44  6F7D               	movwf	CANsendMessage@dataLength& (0+255),b
  4293  005C46  0EBC               	movlw	188
  4294  005C48  0100               	movlb	0	; () banked
  4295  005C4A  6F7E               	movwf	CANsendMessage@flags& (0+255),b
  4296  005C4C  ECE9  F011         	call	_CANsendMessage	;wreg free
  4297  005C50  0012               	return	
  4298  005C52  0012               	return		;funcret
  4299  005C54                     __end_of_can_send:
  4300                           	opt stack 0
  4301                           tblptru	equ	0xFF8
  4302                           tblptrh	equ	0xFF7
  4303                           tblptrl	equ	0xFF6
  4304                           tablat	equ	0xFF5
  4305                           postinc0	equ	0xFEE
  4306                           wreg	equ	0xFE8
  4307                           postinc2	equ	0xFDE
  4308                           postdec2	equ	0xFDD
  4309                           status	equ	0xFD8
  4310                           
  4311 ;; *************** function _CANsendMessage *****************
  4312 ;; Defined at:
  4313 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;  identifier      4   23[BANK0 ] unsigned long 
  4316 ;;  data            2   27[BANK0 ] PTR unsigned char 
  4317 ;;		 -> data_speed(8), data_correction(8), data_test(8), data(8), 
  4318 ;;		 -> data_brake(8), data_steering(8), sensor_distance_short(8), 
  4319 ;;  dataLength      1   29[BANK0 ] unsigned char 
  4320 ;;  flags           1   30[BANK0 ] enum E16376
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  tamp            4   35[BANK0 ] unsigned long 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;		None               void
  4325 ;; Registers used:
  4326 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4332 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4333 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4334 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4335 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;Total ram usage:       16 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    5
  4339 ;; This function calls:
  4340 ;;		Nothing
  4341 ;; This function is called by:
  4342 ;;		_main
  4343 ;;		_park_search
  4344 ;;		_park_routine
  4345 ;;		_can_send
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text6
  4350  0023D2                     __ptext6:
  4351                           	opt stack 0
  4352  0023D2                     _CANsendMessage:
  4353                           	opt stack 22
  4354                           
  4355                           ;inc\CANlib.h: 296: unsigned long tamp;
  4356                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
  4357                           
  4358                           ;incstack = 0
  4359  0023D2  010F               	movlb	15	; () banked
  4360  0023D4  B740               	btfsc	64,3,b	;volatile
  4361  0023D6  D142               	goto	l361
  4362                           
  4363                           ; BSR set to: 15
  4364                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
  4365  0023D8  C07D  FF45         	movff	CANsendMessage@dataLength,3909	;volatile
  4366                           
  4367                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
  4368  0023DC  0100               	movlb	0	; () banked
  4369  0023DE  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  4370  0023E0  D003               	goto	l362
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
  4374  0023E2  010F               	movlb	15	; () banked
  4375  0023E4  8D45               	bsf	69,6,b	;volatile
  4376  0023E6  D002               	goto	l363
  4377  0023E8                     l362:
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;inc\CANlib.h: 302: else
  4381                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
  4382  0023E8  010F               	movlb	15	; () banked
  4383  0023EA  9D45               	bcf	69,6,b	;volatile
  4384  0023EC                     l363:
  4385                           
  4386                           ; BSR set to: 15
  4387                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
  4388  0023EC  0100               	movlb	0	; () banked
  4389  0023EE  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  4390  0023F0  D07A               	goto	l364
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;inc\CANlib.h: 306: {
  4394                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
  4395  0023F2  0100               	movlb	0	; () banked
  4396  0023F4  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  4397  0023F6  0100               	movlb	0	; () banked
  4398  0023F8  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4399  0023FA  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4400  0023FC  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4401  0023FE  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
  4405  002400  C083  FF44         	movff	CANsendMessage@tamp,3908	;volatile
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
  4409  002404  0E00               	movlw	0
  4410  002406  0100               	movlb	0	; () banked
  4411  002408  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4412  00240A  0100               	movlb	0	; () banked
  4413  00240C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4414  00240E  0EFF               	movlw	255
  4415  002410  0100               	movlb	0	; () banked
  4416  002412  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4417  002414  0100               	movlb	0	; () banked
  4418  002416  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4419  002418  0E00               	movlw	0
  4420  00241A  0100               	movlb	0	; () banked
  4421  00241C  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4422  00241E  0100               	movlb	0	; () banked
  4423  002420  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4424  002422  0E00               	movlw	0
  4425  002424  0100               	movlb	0	; () banked
  4426  002426  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4427  002428  0100               	movlb	0	; () banked
  4428  00242A  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
  4432  00242C  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4433  002430  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4434  002434  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4435  002438  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4436  00243C  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  4437  002440  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  4438  002444  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  4439  002448  0100               	movlb	0	; () banked
  4440  00244A  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  4441  00244C  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4442  002450  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4443  002454  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4444  002458  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
  4448  00245C  C083  FF43         	movff	CANsendMessage@tamp,3907	;volatile
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
  4452  002460  0E00               	movlw	0
  4453  002462  010F               	movlb	15	; () banked
  4454  002464  6F42               	movwf	66,b	;volatile
  4455                           
  4456                           ; BSR set to: 15
  4457                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
  4458  002466  010F               	movlb	15	; () banked
  4459  002468  8742               	bsf	66,3,b	;volatile
  4460                           
  4461                           ; BSR set to: 15
  4462                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
  4463  00246A  0100               	movlb	0	; () banked
  4464  00246C  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  4465  00246E  D002               	goto	l365
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
  4469  002470  010F               	movlb	15	; () banked
  4470  002472  8142               	bsf	66,0,b	;volatile
  4471  002474                     l365:
  4472                           
  4473                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
  4474  002474  0100               	movlb	0	; () banked
  4475  002476  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  4476  002478  D002               	goto	l366
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
  4480  00247A  010F               	movlb	15	; () banked
  4481  00247C  8342               	bsf	66,1,b	;volatile
  4482  00247E                     l366:
  4483                           
  4484                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
  4485  00247E  0100               	movlb	0	; () banked
  4486  002480  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  4487  002482  D002               	goto	l367
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
  4491  002484  010F               	movlb	15	; () banked
  4492  002486  8B42               	bsf	66,5,b	;volatile
  4493  002488                     l367:
  4494                           
  4495                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
  4496  002488  0100               	movlb	0	; () banked
  4497  00248A  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  4498  00248C  D002               	goto	l368
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
  4502  00248E  010F               	movlb	15	; () banked
  4503  002490  8D42               	bsf	66,6,b	;volatile
  4504  002492                     l368:
  4505                           
  4506                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
  4507  002492  0100               	movlb	0	; () banked
  4508  002494  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  4509  002496  D003               	goto	l4247
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
  4513  002498  010F               	movlb	15	; () banked
  4514  00249A  8F42               	bsf	66,7,b	;volatile
  4515  00249C  D000               	goto	l4247
  4516  00249E                     l4247:
  4517                           
  4518                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
  4519  00249E  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4520  0024A2  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4521  0024A6  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4522  0024AA  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4523  0024AE  0E16               	movlw	22
  4524  0024B0  D006               	goto	u4420
  4525  0024B2                     u4425:
  4526  0024B2  0100               	movlb	0	; () banked
  4527  0024B4  90D8               	bcf	status,0,c
  4528  0024B6  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4529  0024B8  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4530  0024BA  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4531  0024BC  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4532  0024BE                     u4420:
  4533  0024BE  2EE8               	decfsz	wreg,f,c
  4534  0024C0  D7F8               	goto	u4425
  4535  0024C2  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4536  0024C6  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4537  0024CA  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4538  0024CE  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
  4542  0024D2  0100               	movlb	0	; () banked
  4543  0024D4  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4544  0024D6  0100               	movlb	0	; () banked
  4545  0024D8  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4546  0024DA  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4547  0024DC  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4548  0024DE  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
  4552  0024E0  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  4553                           
  4554                           ;inc\CANlib.h: 332: }
  4555  0024E4  D05A               	goto	l4267
  4556  0024E6                     l364:
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;inc\CANlib.h: 334: else
  4560                           ;inc\CANlib.h: 336: {
  4561                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
  4562  0024E6  010F               	movlb	15	; () banked
  4563  0024E8  9742               	bcf	66,3,b	;volatile
  4564                           
  4565                           ; BSR set to: 15
  4566                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
  4567  0024EA  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4568  0024EE  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4569  0024F2  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4570  0024F6  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4571  0024FA  0E04               	movlw	4
  4572  0024FC  D006               	goto	u4430
  4573  0024FE                     u4435:
  4574  0024FE  0100               	movlb	0	; () banked
  4575  002500  90D8               	bcf	status,0,c
  4576  002502  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4577  002504  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4578  002506  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4579  002508  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4580  00250A                     u4430:
  4581  00250A  2EE8               	decfsz	wreg,f,c
  4582  00250C  D7F8               	goto	u4435
  4583  00250E  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4584  002512  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4585  002516  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4586  00251A  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
  4590  00251E  0100               	movlb	0	; () banked
  4591  002520  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4592  002522  0100               	movlb	0	; () banked
  4593  002524  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4594  002526  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4595  002528  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4596  00252A  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
  4600  00252C  C083  FF41         	movff	CANsendMessage@tamp,3905	;volatile
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
  4604  002530  0E07               	movlw	7
  4605  002532  0100               	movlb	0	; () banked
  4606  002534  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4607  002536  0100               	movlb	0	; () banked
  4608  002538  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4609  00253A  0E00               	movlw	0
  4610  00253C  0100               	movlb	0	; () banked
  4611  00253E  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4612  002540  0100               	movlb	0	; () banked
  4613  002542  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4614  002544  0E00               	movlw	0
  4615  002546  0100               	movlb	0	; () banked
  4616  002548  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4617  00254A  0100               	movlb	0	; () banked
  4618  00254C  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4619  00254E  0E00               	movlw	0
  4620  002550  0100               	movlb	0	; () banked
  4621  002552  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4622  002554  0100               	movlb	0	; () banked
  4623  002556  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;inc\CANlib.h: 344: tamp = tamp << 5;
  4627  002558  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4628  00255C  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4629  002560  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4630  002564  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4631  002568  0E05               	movlw	5
  4632  00256A                     u4445:
  4633  00256A  90D8               	bcf	status,0,c
  4634  00256C  0100               	movlb	0	; () banked
  4635  00256E  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  4636  002570  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  4637  002572  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  4638  002574  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  4639  002576  2EE8               	decfsz	wreg,f,c
  4640  002578  D7F8               	goto	u4445
  4641  00257A  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4642  00257E  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4643  002582  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4644  002586  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
  4648  00258A  010F               	movlb	15	; () banked
  4649  00258C  5142               	movf	66,w,b	;volatile
  4650  00258E  0B1F               	andlw	31
  4651  002590  010F               	movlb	15	; () banked
  4652  002592  6F42               	movwf	66,b	;volatile
  4653                           
  4654                           ; BSR set to: 15
  4655                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
  4656  002594  C083  FF42         	movff	CANsendMessage@tamp,3906	;volatile
  4657  002598  D000               	goto	l4267
  4658  00259A                     l4267:
  4659                           
  4660                           ;inc\CANlib.h: 347: }
  4661                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
  4662  00259A  0100               	movlb	0	; () banked
  4663  00259C  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  4664  00259E  D003               	goto	l371
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
  4668  0025A0  010F               	movlb	15	; () banked
  4669  0025A2  8140               	bsf	64,0,b	;volatile
  4670  0025A4  D002               	goto	l372
  4671  0025A6                     l371:
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;inc\CANlib.h: 351: else
  4675                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
  4676  0025A6  010F               	movlb	15	; () banked
  4677  0025A8  9140               	bcf	64,0,b	;volatile
  4678  0025AA                     l372:
  4679                           
  4680                           ; BSR set to: 15
  4681                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
  4682  0025AA  0100               	movlb	0	; () banked
  4683  0025AC  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  4684  0025AE  D003               	goto	l373
  4685                           
  4686                           ; BSR set to: 0
  4687                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
  4688  0025B0  010F               	movlb	15	; () banked
  4689  0025B2  8340               	bsf	64,1,b	;volatile
  4690  0025B4  D003               	goto	l4273
  4691  0025B6                     l373:
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;inc\CANlib.h: 355: else
  4695                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
  4696  0025B6  010F               	movlb	15	; () banked
  4697  0025B8  9340               	bcf	64,1,b	;volatile
  4698  0025BA  D000               	goto	l4273
  4699  0025BC                     l4273:
  4700                           
  4701                           ; BSR set to: 15
  4702                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
  4703  0025BC  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  4704  0025C0  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  4705  0025C4  50DF               	movf	indf2,w,c
  4706  0025C6  010F               	movlb	15	; () banked
  4707  0025C8  6F46               	movwf	70,b	;volatile
  4708                           
  4709                           ; BSR set to: 15
  4710                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
  4711  0025CA  0100               	movlb	0	; () banked
  4712  0025CC  EE20 F001          	lfsr	2,1
  4713  0025D0  517B               	movf	CANsendMessage@data& (0+255),w,b
  4714  0025D2  26D9               	addwf	fsr2l,f,c
  4715  0025D4  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4716  0025D6  22DA               	addwfc	fsr2h,f,c
  4717  0025D8  50DF               	movf	indf2,w,c
  4718  0025DA  010F               	movlb	15	; () banked
  4719  0025DC  6F47               	movwf	71,b	;volatile
  4720                           
  4721                           ; BSR set to: 15
  4722                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
  4723  0025DE  0100               	movlb	0	; () banked
  4724  0025E0  EE20 F002          	lfsr	2,2
  4725  0025E4  517B               	movf	CANsendMessage@data& (0+255),w,b
  4726  0025E6  26D9               	addwf	fsr2l,f,c
  4727  0025E8  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4728  0025EA  22DA               	addwfc	fsr2h,f,c
  4729  0025EC  50DF               	movf	indf2,w,c
  4730  0025EE  010F               	movlb	15	; () banked
  4731  0025F0  6F48               	movwf	72,b	;volatile
  4732                           
  4733                           ; BSR set to: 15
  4734                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
  4735  0025F2  0100               	movlb	0	; () banked
  4736  0025F4  EE20 F003          	lfsr	2,3
  4737  0025F8  517B               	movf	CANsendMessage@data& (0+255),w,b
  4738  0025FA  26D9               	addwf	fsr2l,f,c
  4739  0025FC  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4740  0025FE  22DA               	addwfc	fsr2h,f,c
  4741  002600  50DF               	movf	indf2,w,c
  4742  002602  010F               	movlb	15	; () banked
  4743  002604  6F49               	movwf	73,b	;volatile
  4744                           
  4745                           ; BSR set to: 15
  4746                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
  4747  002606  0100               	movlb	0	; () banked
  4748  002608  EE20 F004          	lfsr	2,4
  4749  00260C  517B               	movf	CANsendMessage@data& (0+255),w,b
  4750  00260E  26D9               	addwf	fsr2l,f,c
  4751  002610  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4752  002612  22DA               	addwfc	fsr2h,f,c
  4753  002614  50DF               	movf	indf2,w,c
  4754  002616  010F               	movlb	15	; () banked
  4755  002618  6F4A               	movwf	74,b	;volatile
  4756                           
  4757                           ; BSR set to: 15
  4758                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
  4759  00261A  0100               	movlb	0	; () banked
  4760  00261C  EE20 F005          	lfsr	2,5
  4761  002620  517B               	movf	CANsendMessage@data& (0+255),w,b
  4762  002622  26D9               	addwf	fsr2l,f,c
  4763  002624  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4764  002626  22DA               	addwfc	fsr2h,f,c
  4765  002628  50DF               	movf	indf2,w,c
  4766  00262A  010F               	movlb	15	; () banked
  4767  00262C  6F4B               	movwf	75,b	;volatile
  4768                           
  4769                           ; BSR set to: 15
  4770                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
  4771  00262E  0100               	movlb	0	; () banked
  4772  002630  EE20 F006          	lfsr	2,6
  4773  002634  517B               	movf	CANsendMessage@data& (0+255),w,b
  4774  002636  26D9               	addwf	fsr2l,f,c
  4775  002638  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4776  00263A  22DA               	addwfc	fsr2h,f,c
  4777  00263C  50DF               	movf	indf2,w,c
  4778  00263E  010F               	movlb	15	; () banked
  4779  002640  6F4C               	movwf	76,b	;volatile
  4780                           
  4781                           ; BSR set to: 15
  4782                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
  4783  002642  0100               	movlb	0	; () banked
  4784  002644  EE20 F007          	lfsr	2,7
  4785  002648  517B               	movf	CANsendMessage@data& (0+255),w,b
  4786  00264A  26D9               	addwf	fsr2l,f,c
  4787  00264C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  4788  00264E  22DA               	addwfc	fsr2h,f,c
  4789  002650  50DF               	movf	indf2,w,c
  4790  002652  010F               	movlb	15	; () banked
  4791  002654  6F4D               	movwf	77,b	;volatile
  4792                           
  4793                           ; BSR set to: 15
  4794                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
  4795  002656  010F               	movlb	15	; () banked
  4796  002658  8740               	bsf	64,3,b	;volatile
  4797                           
  4798                           ; BSR set to: 15
  4799                           ;inc\CANlib.h: 368: return;
  4800  00265A  0012               	return	
  4801  00265C                     l361:
  4802                           
  4803                           ; BSR set to: 15
  4804                           ;inc\CANlib.h: 369: }
  4805                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
  4806  00265C  010F               	movlb	15	; () banked
  4807  00265E  B730               	btfsc	48,3,b	;volatile
  4808  002660  D142               	goto	l376
  4809                           
  4810                           ; BSR set to: 15
  4811                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
  4812  002662  C07D  FF35         	movff	CANsendMessage@dataLength,3893	;volatile
  4813                           
  4814                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
  4815  002666  0100               	movlb	0	; () banked
  4816  002668  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  4817  00266A  D003               	goto	l377
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
  4821  00266C  010F               	movlb	15	; () banked
  4822  00266E  8D35               	bsf	53,6,b	;volatile
  4823  002670  D002               	goto	l378
  4824  002672                     l377:
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;inc\CANlib.h: 378: else
  4828                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
  4829  002672  010F               	movlb	15	; () banked
  4830  002674  9D35               	bcf	53,6,b	;volatile
  4831  002676                     l378:
  4832                           
  4833                           ; BSR set to: 15
  4834                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
  4835  002676  0100               	movlb	0	; () banked
  4836  002678  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  4837  00267A  D07A               	goto	l379
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;inc\CANlib.h: 382: {
  4841                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
  4842  00267C  0100               	movlb	0	; () banked
  4843  00267E  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  4844  002680  0100               	movlb	0	; () banked
  4845  002682  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4846  002684  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4847  002686  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4848  002688  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
  4852  00268A  C083  FF34         	movff	CANsendMessage@tamp,3892	;volatile
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
  4856  00268E  0E00               	movlw	0
  4857  002690  0100               	movlb	0	; () banked
  4858  002692  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  4859  002694  0100               	movlb	0	; () banked
  4860  002696  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4861  002698  0EFF               	movlw	255
  4862  00269A  0100               	movlb	0	; () banked
  4863  00269C  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  4864  00269E  0100               	movlb	0	; () banked
  4865  0026A0  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  4866  0026A2  0E00               	movlw	0
  4867  0026A4  0100               	movlb	0	; () banked
  4868  0026A6  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  4869  0026A8  0100               	movlb	0	; () banked
  4870  0026AA  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  4871  0026AC  0E00               	movlw	0
  4872  0026AE  0100               	movlb	0	; () banked
  4873  0026B0  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  4874  0026B2  0100               	movlb	0	; () banked
  4875  0026B4  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
  4879  0026B6  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  4880  0026BA  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  4881  0026BE  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  4882  0026C2  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  4883  0026C6  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  4884  0026CA  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  4885  0026CE  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  4886  0026D2  0100               	movlb	0	; () banked
  4887  0026D4  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  4888  0026D6  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4889  0026DA  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4890  0026DE  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4891  0026E2  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
  4895  0026E6  C083  FF33         	movff	CANsendMessage@tamp,3891	;volatile
  4896                           
  4897                           ; BSR set to: 0
  4898                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
  4899  0026EA  0E00               	movlw	0
  4900  0026EC  010F               	movlb	15	; () banked
  4901  0026EE  6F32               	movwf	50,b	;volatile
  4902                           
  4903                           ; BSR set to: 15
  4904                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
  4905  0026F0  010F               	movlb	15	; () banked
  4906  0026F2  8732               	bsf	50,3,b	;volatile
  4907                           
  4908                           ; BSR set to: 15
  4909                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
  4910  0026F4  0100               	movlb	0	; () banked
  4911  0026F6  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  4912  0026F8  D002               	goto	l380
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
  4916  0026FA  010F               	movlb	15	; () banked
  4917  0026FC  8132               	bsf	50,0,b	;volatile
  4918  0026FE                     l380:
  4919                           
  4920                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
  4921  0026FE  0100               	movlb	0	; () banked
  4922  002700  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  4923  002702  D002               	goto	l381
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
  4927  002704  010F               	movlb	15	; () banked
  4928  002706  8332               	bsf	50,1,b	;volatile
  4929  002708                     l381:
  4930                           
  4931                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
  4932  002708  0100               	movlb	0	; () banked
  4933  00270A  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  4934  00270C  D002               	goto	l382
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
  4938  00270E  010F               	movlb	15	; () banked
  4939  002710  8B32               	bsf	50,5,b	;volatile
  4940  002712                     l382:
  4941                           
  4942                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
  4943  002712  0100               	movlb	0	; () banked
  4944  002714  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  4945  002716  D002               	goto	l383
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
  4949  002718  010F               	movlb	15	; () banked
  4950  00271A  8D32               	bsf	50,6,b	;volatile
  4951  00271C                     l383:
  4952                           
  4953                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
  4954  00271C  0100               	movlb	0	; () banked
  4955  00271E  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  4956  002720  D003               	goto	l4323
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
  4960  002722  010F               	movlb	15	; () banked
  4961  002724  8F32               	bsf	50,7,b	;volatile
  4962  002726  D000               	goto	l4323
  4963  002728                     l4323:
  4964                           
  4965                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
  4966  002728  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  4967  00272C  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  4968  002730  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  4969  002734  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  4970  002738  0E16               	movlw	22
  4971  00273A  D006               	goto	u4550
  4972  00273C                     u4555:
  4973  00273C  0100               	movlb	0	; () banked
  4974  00273E  90D8               	bcf	status,0,c
  4975  002740  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  4976  002742  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  4977  002744  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  4978  002746  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  4979  002748                     u4550:
  4980  002748  2EE8               	decfsz	wreg,f,c
  4981  00274A  D7F8               	goto	u4555
  4982  00274C  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  4983  002750  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  4984  002754  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  4985  002758  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
  4989  00275C  0100               	movlb	0	; () banked
  4990  00275E  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  4991  002760  0100               	movlb	0	; () banked
  4992  002762  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  4993  002764  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  4994  002766  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  4995  002768  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
  4999  00276A  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  5000                           
  5001                           ;inc\CANlib.h: 407: }
  5002  00276E  D05A               	goto	l4343
  5003  002770                     l379:
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;inc\CANlib.h: 409: else
  5007                           ;inc\CANlib.h: 411: {
  5008                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
  5009  002770  010F               	movlb	15	; () banked
  5010  002772  9732               	bcf	50,3,b	;volatile
  5011                           
  5012                           ; BSR set to: 15
  5013                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
  5014  002774  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  5015  002778  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  5016  00277C  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  5017  002780  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  5018  002784  0E04               	movlw	4
  5019  002786  D006               	goto	u4560
  5020  002788                     u4565:
  5021  002788  0100               	movlb	0	; () banked
  5022  00278A  90D8               	bcf	status,0,c
  5023  00278C  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  5024  00278E  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  5025  002790  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  5026  002792  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  5027  002794                     u4560:
  5028  002794  2EE8               	decfsz	wreg,f,c
  5029  002796  D7F8               	goto	u4565
  5030  002798  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  5031  00279C  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  5032  0027A0  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  5033  0027A4  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
  5037  0027A8  0100               	movlb	0	; () banked
  5038  0027AA  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  5039  0027AC  0100               	movlb	0	; () banked
  5040  0027AE  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5041  0027B0  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  5042  0027B2  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  5043  0027B4  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
  5047  0027B6  C083  FF31         	movff	CANsendMessage@tamp,3889	;volatile
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
  5051  0027BA  0E07               	movlw	7
  5052  0027BC  0100               	movlb	0	; () banked
  5053  0027BE  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  5054  0027C0  0100               	movlb	0	; () banked
  5055  0027C2  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5056  0027C4  0E00               	movlw	0
  5057  0027C6  0100               	movlb	0	; () banked
  5058  0027C8  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  5059  0027CA  0100               	movlb	0	; () banked
  5060  0027CC  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  5061  0027CE  0E00               	movlw	0
  5062  0027D0  0100               	movlb	0	; () banked
  5063  0027D2  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  5064  0027D4  0100               	movlb	0	; () banked
  5065  0027D6  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  5066  0027D8  0E00               	movlw	0
  5067  0027DA  0100               	movlb	0	; () banked
  5068  0027DC  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  5069  0027DE  0100               	movlb	0	; () banked
  5070  0027E0  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;inc\CANlib.h: 419: tamp = tamp << 5;
  5074  0027E2  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  5075  0027E6  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  5076  0027EA  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  5077  0027EE  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  5078  0027F2  0E05               	movlw	5
  5079  0027F4                     u4575:
  5080  0027F4  90D8               	bcf	status,0,c
  5081  0027F6  0100               	movlb	0	; () banked
  5082  0027F8  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  5083  0027FA  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  5084  0027FC  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  5085  0027FE  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  5086  002800  2EE8               	decfsz	wreg,f,c
  5087  002802  D7F8               	goto	u4575
  5088  002804  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  5089  002808  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  5090  00280C  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  5091  002810  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
  5095  002814  010F               	movlb	15	; () banked
  5096  002816  5132               	movf	50,w,b	;volatile
  5097  002818  0B1F               	andlw	31
  5098  00281A  010F               	movlb	15	; () banked
  5099  00281C  6F32               	movwf	50,b	;volatile
  5100                           
  5101                           ; BSR set to: 15
  5102                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
  5103  00281E  C083  FF32         	movff	CANsendMessage@tamp,3890	;volatile
  5104  002822  D000               	goto	l4343
  5105  002824                     l4343:
  5106                           
  5107                           ;inc\CANlib.h: 422: }
  5108                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
  5109  002824  0100               	movlb	0	; () banked
  5110  002826  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  5111  002828  D003               	goto	l386
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
  5115  00282A  010F               	movlb	15	; () banked
  5116  00282C  8130               	bsf	48,0,b	;volatile
  5117  00282E  D002               	goto	l387
  5118  002830                     l386:
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;inc\CANlib.h: 426: else
  5122                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
  5123  002830  010F               	movlb	15	; () banked
  5124  002832  9130               	bcf	48,0,b	;volatile
  5125  002834                     l387:
  5126                           
  5127                           ; BSR set to: 15
  5128                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
  5129  002834  0100               	movlb	0	; () banked
  5130  002836  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  5131  002838  D003               	goto	l388
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
  5135  00283A  010F               	movlb	15	; () banked
  5136  00283C  8330               	bsf	48,1,b	;volatile
  5137  00283E  D003               	goto	l4349
  5138  002840                     l388:
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;inc\CANlib.h: 430: else
  5142                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
  5143  002840  010F               	movlb	15	; () banked
  5144  002842  9330               	bcf	48,1,b	;volatile
  5145  002844  D000               	goto	l4349
  5146  002846                     l4349:
  5147                           
  5148                           ; BSR set to: 15
  5149                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
  5150  002846  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  5151  00284A  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  5152  00284E  50DF               	movf	indf2,w,c
  5153  002850  010F               	movlb	15	; () banked
  5154  002852  6F36               	movwf	54,b	;volatile
  5155                           
  5156                           ; BSR set to: 15
  5157                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
  5158  002854  0100               	movlb	0	; () banked
  5159  002856  EE20 F001          	lfsr	2,1
  5160  00285A  517B               	movf	CANsendMessage@data& (0+255),w,b
  5161  00285C  26D9               	addwf	fsr2l,f,c
  5162  00285E  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5163  002860  22DA               	addwfc	fsr2h,f,c
  5164  002862  50DF               	movf	indf2,w,c
  5165  002864  010F               	movlb	15	; () banked
  5166  002866  6F37               	movwf	55,b	;volatile
  5167                           
  5168                           ; BSR set to: 15
  5169                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
  5170  002868  0100               	movlb	0	; () banked
  5171  00286A  EE20 F002          	lfsr	2,2
  5172  00286E  517B               	movf	CANsendMessage@data& (0+255),w,b
  5173  002870  26D9               	addwf	fsr2l,f,c
  5174  002872  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5175  002874  22DA               	addwfc	fsr2h,f,c
  5176  002876  50DF               	movf	indf2,w,c
  5177  002878  010F               	movlb	15	; () banked
  5178  00287A  6F38               	movwf	56,b	;volatile
  5179                           
  5180                           ; BSR set to: 15
  5181                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
  5182  00287C  0100               	movlb	0	; () banked
  5183  00287E  EE20 F003          	lfsr	2,3
  5184  002882  517B               	movf	CANsendMessage@data& (0+255),w,b
  5185  002884  26D9               	addwf	fsr2l,f,c
  5186  002886  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5187  002888  22DA               	addwfc	fsr2h,f,c
  5188  00288A  50DF               	movf	indf2,w,c
  5189  00288C  010F               	movlb	15	; () banked
  5190  00288E  6F39               	movwf	57,b	;volatile
  5191                           
  5192                           ; BSR set to: 15
  5193                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
  5194  002890  0100               	movlb	0	; () banked
  5195  002892  EE20 F004          	lfsr	2,4
  5196  002896  517B               	movf	CANsendMessage@data& (0+255),w,b
  5197  002898  26D9               	addwf	fsr2l,f,c
  5198  00289A  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5199  00289C  22DA               	addwfc	fsr2h,f,c
  5200  00289E  50DF               	movf	indf2,w,c
  5201  0028A0  010F               	movlb	15	; () banked
  5202  0028A2  6F3A               	movwf	58,b	;volatile
  5203                           
  5204                           ; BSR set to: 15
  5205                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
  5206  0028A4  0100               	movlb	0	; () banked
  5207  0028A6  EE20 F005          	lfsr	2,5
  5208  0028AA  517B               	movf	CANsendMessage@data& (0+255),w,b
  5209  0028AC  26D9               	addwf	fsr2l,f,c
  5210  0028AE  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5211  0028B0  22DA               	addwfc	fsr2h,f,c
  5212  0028B2  50DF               	movf	indf2,w,c
  5213  0028B4  010F               	movlb	15	; () banked
  5214  0028B6  6F3B               	movwf	59,b	;volatile
  5215                           
  5216                           ; BSR set to: 15
  5217                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
  5218  0028B8  0100               	movlb	0	; () banked
  5219  0028BA  EE20 F006          	lfsr	2,6
  5220  0028BE  517B               	movf	CANsendMessage@data& (0+255),w,b
  5221  0028C0  26D9               	addwf	fsr2l,f,c
  5222  0028C2  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5223  0028C4  22DA               	addwfc	fsr2h,f,c
  5224  0028C6  50DF               	movf	indf2,w,c
  5225  0028C8  010F               	movlb	15	; () banked
  5226  0028CA  6F3C               	movwf	60,b	;volatile
  5227                           
  5228                           ; BSR set to: 15
  5229                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
  5230  0028CC  0100               	movlb	0	; () banked
  5231  0028CE  EE20 F007          	lfsr	2,7
  5232  0028D2  517B               	movf	CANsendMessage@data& (0+255),w,b
  5233  0028D4  26D9               	addwf	fsr2l,f,c
  5234  0028D6  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5235  0028D8  22DA               	addwfc	fsr2h,f,c
  5236  0028DA  50DF               	movf	indf2,w,c
  5237  0028DC  010F               	movlb	15	; () banked
  5238  0028DE  6F3D               	movwf	61,b	;volatile
  5239                           
  5240                           ; BSR set to: 15
  5241                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
  5242  0028E0  010F               	movlb	15	; () banked
  5243  0028E2  8730               	bsf	48,3,b	;volatile
  5244                           
  5245                           ; BSR set to: 15
  5246                           ;inc\CANlib.h: 444: return;
  5247  0028E4  0012               	return	
  5248  0028E6                     l376:
  5249                           
  5250                           ; BSR set to: 15
  5251                           ;inc\CANlib.h: 445: }
  5252                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
  5253  0028E6  010F               	movlb	15	; () banked
  5254  0028E8  B720               	btfsc	32,3,b	;volatile
  5255  0028EA  0012               	return	
  5256                           
  5257                           ; BSR set to: 15
  5258                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
  5259  0028EC  C07D  FF25         	movff	CANsendMessage@dataLength,3877	;volatile
  5260                           
  5261                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
  5262  0028F0  0100               	movlb	0	; () banked
  5263  0028F2  AD7E               	btfss	CANsendMessage@flags& (0+255),6,b
  5264  0028F4  D003               	goto	l391
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
  5268  0028F6  010F               	movlb	15	; () banked
  5269  0028F8  8D25               	bsf	37,6,b	;volatile
  5270  0028FA  D002               	goto	l392
  5271  0028FC                     l391:
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;inc\CANlib.h: 454: else
  5275                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
  5276  0028FC  010F               	movlb	15	; () banked
  5277  0028FE  9D25               	bcf	37,6,b	;volatile
  5278  002900                     l392:
  5279                           
  5280                           ; BSR set to: 15
  5281                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
  5282  002900  0100               	movlb	0	; () banked
  5283  002902  A77E               	btfss	CANsendMessage@flags& (0+255),3,b
  5284  002904  D07A               	goto	l393
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;inc\CANlib.h: 458: {
  5288                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
  5289  002906  0100               	movlb	0	; () banked
  5290  002908  5177               	movf	CANsendMessage@identifier& (0+255),w,b
  5291  00290A  0100               	movlb	0	; () banked
  5292  00290C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5293  00290E  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  5294  002910  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  5295  002912  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
  5299  002914  C083  FF24         	movff	CANsendMessage@tamp,3876	;volatile
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
  5303  002918  0E00               	movlw	0
  5304  00291A  0100               	movlb	0	; () banked
  5305  00291C  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  5306  00291E  0100               	movlb	0	; () banked
  5307  002920  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5308  002922  0EFF               	movlw	255
  5309  002924  0100               	movlb	0	; () banked
  5310  002926  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  5311  002928  0100               	movlb	0	; () banked
  5312  00292A  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  5313  00292C  0E00               	movlw	0
  5314  00292E  0100               	movlb	0	; () banked
  5315  002930  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  5316  002932  0100               	movlb	0	; () banked
  5317  002934  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  5318  002936  0E00               	movlw	0
  5319  002938  0100               	movlb	0	; () banked
  5320  00293A  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  5321  00293C  0100               	movlb	0	; () banked
  5322  00293E  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
  5326  002940  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  5327  002944  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  5328  002948  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  5329  00294C  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  5330  002950  C080  F07F         	movff	??_CANsendMessage+1,??_CANsendMessage
  5331  002954  C081  F080         	movff	??_CANsendMessage+2,??_CANsendMessage+1
  5332  002958  C082  F081         	movff	??_CANsendMessage+3,??_CANsendMessage+2
  5333  00295C  0100               	movlb	0	; () banked
  5334  00295E  6B82               	clrf	(??_CANsendMessage+3)& (0+255),b
  5335  002960  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  5336  002964  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  5337  002968  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  5338  00296C  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
  5342  002970  C083  FF23         	movff	CANsendMessage@tamp,3875	;volatile
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
  5346  002974  0E00               	movlw	0
  5347  002976  010F               	movlb	15	; () banked
  5348  002978  6F22               	movwf	34,b	;volatile
  5349                           
  5350                           ; BSR set to: 15
  5351                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
  5352  00297A  010F               	movlb	15	; () banked
  5353  00297C  8722               	bsf	34,3,b	;volatile
  5354                           
  5355                           ; BSR set to: 15
  5356                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
  5357  00297E  0100               	movlb	0	; () banked
  5358  002980  A179               	btfss	(CANsendMessage@identifier+2)& (0+255),0,b
  5359  002982  D002               	goto	l394
  5360                           
  5361                           ; BSR set to: 0
  5362                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
  5363  002984  010F               	movlb	15	; () banked
  5364  002986  8122               	bsf	34,0,b	;volatile
  5365  002988                     l394:
  5366                           
  5367                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
  5368  002988  0100               	movlb	0	; () banked
  5369  00298A  A379               	btfss	(CANsendMessage@identifier+2)& (0+255),1,b
  5370  00298C  D002               	goto	l395
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
  5374  00298E  010F               	movlb	15	; () banked
  5375  002990  8322               	bsf	34,1,b	;volatile
  5376  002992                     l395:
  5377                           
  5378                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
  5379  002992  0100               	movlb	0	; () banked
  5380  002994  A579               	btfss	(CANsendMessage@identifier+2)& (0+255),2,b
  5381  002996  D002               	goto	l396
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
  5385  002998  010F               	movlb	15	; () banked
  5386  00299A  8B22               	bsf	34,5,b	;volatile
  5387  00299C                     l396:
  5388                           
  5389                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
  5390  00299C  0100               	movlb	0	; () banked
  5391  00299E  A779               	btfss	(CANsendMessage@identifier+2)& (0+255),3,b
  5392  0029A0  D002               	goto	l397
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
  5396  0029A2  010F               	movlb	15	; () banked
  5397  0029A4  8D22               	bsf	34,6,b	;volatile
  5398  0029A6                     l397:
  5399                           
  5400                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
  5401  0029A6  0100               	movlb	0	; () banked
  5402  0029A8  A979               	btfss	(CANsendMessage@identifier+2)& (0+255),4,b
  5403  0029AA  D003               	goto	l4399
  5404                           
  5405                           ; BSR set to: 0
  5406                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
  5407  0029AC  010F               	movlb	15	; () banked
  5408  0029AE  8F22               	bsf	34,7,b	;volatile
  5409  0029B0  D000               	goto	l4399
  5410  0029B2                     l4399:
  5411                           
  5412                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
  5413  0029B2  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  5414  0029B6  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  5415  0029BA  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  5416  0029BE  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  5417  0029C2  0E16               	movlw	22
  5418  0029C4  D006               	goto	u4680
  5419  0029C6                     u4685:
  5420  0029C6  0100               	movlb	0	; () banked
  5421  0029C8  90D8               	bcf	status,0,c
  5422  0029CA  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  5423  0029CC  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  5424  0029CE  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  5425  0029D0  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  5426  0029D2                     u4680:
  5427  0029D2  2EE8               	decfsz	wreg,f,c
  5428  0029D4  D7F8               	goto	u4685
  5429  0029D6  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  5430  0029DA  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  5431  0029DE  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  5432  0029E2  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
  5436  0029E6  0100               	movlb	0	; () banked
  5437  0029E8  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  5438  0029EA  0100               	movlb	0	; () banked
  5439  0029EC  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5440  0029EE  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  5441  0029F0  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  5442  0029F2  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
  5446  0029F4  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  5447                           
  5448                           ;inc\CANlib.h: 483: }
  5449  0029F8  D05A               	goto	l4419
  5450  0029FA                     l393:
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;inc\CANlib.h: 485: else
  5454                           ;inc\CANlib.h: 487: {
  5455                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
  5456  0029FA  010F               	movlb	15	; () banked
  5457  0029FC  9722               	bcf	34,3,b	;volatile
  5458                           
  5459                           ; BSR set to: 15
  5460                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
  5461  0029FE  C077  F07F         	movff	CANsendMessage@identifier,??_CANsendMessage
  5462  002A02  C078  F080         	movff	CANsendMessage@identifier+1,??_CANsendMessage+1
  5463  002A06  C079  F081         	movff	CANsendMessage@identifier+2,??_CANsendMessage+2
  5464  002A0A  C07A  F082         	movff	CANsendMessage@identifier+3,??_CANsendMessage+3
  5465  002A0E  0E04               	movlw	4
  5466  002A10  D006               	goto	u4690
  5467  002A12                     u4695:
  5468  002A12  0100               	movlb	0	; () banked
  5469  002A14  90D8               	bcf	status,0,c
  5470  002A16  3382               	rrcf	(??_CANsendMessage+3)& (0+255),f,b
  5471  002A18  3381               	rrcf	(??_CANsendMessage+2)& (0+255),f,b
  5472  002A1A  3380               	rrcf	(??_CANsendMessage+1)& (0+255),f,b
  5473  002A1C  337F               	rrcf	??_CANsendMessage& (0+255),f,b
  5474  002A1E                     u4690:
  5475  002A1E  2EE8               	decfsz	wreg,f,c
  5476  002A20  D7F8               	goto	u4695
  5477  002A22  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  5478  002A26  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  5479  002A2A  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  5480  002A2E  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
  5484  002A32  0100               	movlb	0	; () banked
  5485  002A34  5183               	movf	CANsendMessage@tamp& (0+255),w,b
  5486  002A36  0100               	movlb	0	; () banked
  5487  002A38  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5488  002A3A  6B84               	clrf	(CANsendMessage@tamp+1)& (0+255),b
  5489  002A3C  6B85               	clrf	(CANsendMessage@tamp+2)& (0+255),b
  5490  002A3E  6B86               	clrf	(CANsendMessage@tamp+3)& (0+255),b
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
  5494  002A40  C083  FF21         	movff	CANsendMessage@tamp,3873	;volatile
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
  5498  002A44  0E07               	movlw	7
  5499  002A46  0100               	movlb	0	; () banked
  5500  002A48  1577               	andwf	CANsendMessage@identifier& (0+255),w,b
  5501  002A4A  0100               	movlb	0	; () banked
  5502  002A4C  6F83               	movwf	CANsendMessage@tamp& (0+255),b
  5503  002A4E  0E00               	movlw	0
  5504  002A50  0100               	movlb	0	; () banked
  5505  002A52  1578               	andwf	(CANsendMessage@identifier+1)& (0+255),w,b
  5506  002A54  0100               	movlb	0	; () banked
  5507  002A56  6F84               	movwf	(CANsendMessage@tamp+1)& (0+255),b
  5508  002A58  0E00               	movlw	0
  5509  002A5A  0100               	movlb	0	; () banked
  5510  002A5C  1579               	andwf	(CANsendMessage@identifier+2)& (0+255),w,b
  5511  002A5E  0100               	movlb	0	; () banked
  5512  002A60  6F85               	movwf	(CANsendMessage@tamp+2)& (0+255),b
  5513  002A62  0E00               	movlw	0
  5514  002A64  0100               	movlb	0	; () banked
  5515  002A66  157A               	andwf	(CANsendMessage@identifier+3)& (0+255),w,b
  5516  002A68  0100               	movlb	0	; () banked
  5517  002A6A  6F86               	movwf	(CANsendMessage@tamp+3)& (0+255),b
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;inc\CANlib.h: 495: tamp = tamp << 5;
  5521  002A6C  C083  F07F         	movff	CANsendMessage@tamp,??_CANsendMessage
  5522  002A70  C084  F080         	movff	CANsendMessage@tamp+1,??_CANsendMessage+1
  5523  002A74  C085  F081         	movff	CANsendMessage@tamp+2,??_CANsendMessage+2
  5524  002A78  C086  F082         	movff	CANsendMessage@tamp+3,??_CANsendMessage+3
  5525  002A7C  0E05               	movlw	5
  5526  002A7E                     u4705:
  5527  002A7E  90D8               	bcf	status,0,c
  5528  002A80  0100               	movlb	0	; () banked
  5529  002A82  377F               	rlcf	??_CANsendMessage& (0+255),f,b
  5530  002A84  3780               	rlcf	(??_CANsendMessage+1)& (0+255),f,b
  5531  002A86  3781               	rlcf	(??_CANsendMessage+2)& (0+255),f,b
  5532  002A88  3782               	rlcf	(??_CANsendMessage+3)& (0+255),f,b
  5533  002A8A  2EE8               	decfsz	wreg,f,c
  5534  002A8C  D7F8               	goto	u4705
  5535  002A8E  C07F  F083         	movff	??_CANsendMessage,CANsendMessage@tamp
  5536  002A92  C080  F084         	movff	??_CANsendMessage+1,CANsendMessage@tamp+1
  5537  002A96  C081  F085         	movff	??_CANsendMessage+2,CANsendMessage@tamp+2
  5538  002A9A  C082  F086         	movff	??_CANsendMessage+3,CANsendMessage@tamp+3
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
  5542  002A9E  010F               	movlb	15	; () banked
  5543  002AA0  5122               	movf	34,w,b	;volatile
  5544  002AA2  0B1F               	andlw	31
  5545  002AA4  010F               	movlb	15	; () banked
  5546  002AA6  6F22               	movwf	34,b	;volatile
  5547                           
  5548                           ; BSR set to: 15
  5549                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
  5550  002AA8  C083  FF22         	movff	CANsendMessage@tamp,3874	;volatile
  5551  002AAC  D000               	goto	l4419
  5552  002AAE                     l4419:
  5553                           
  5554                           ;inc\CANlib.h: 498: }
  5555                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
  5556  002AAE  0100               	movlb	0	; () banked
  5557  002AB0  A17E               	btfss	CANsendMessage@flags& (0+255),0,b
  5558  002AB2  D003               	goto	l400
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
  5562  002AB4  010F               	movlb	15	; () banked
  5563  002AB6  8120               	bsf	32,0,b	;volatile
  5564  002AB8  D002               	goto	l401
  5565  002ABA                     l400:
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;inc\CANlib.h: 502: else
  5569                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
  5570  002ABA  010F               	movlb	15	; () banked
  5571  002ABC  9120               	bcf	32,0,b	;volatile
  5572  002ABE                     l401:
  5573                           
  5574                           ; BSR set to: 15
  5575                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
  5576  002ABE  0100               	movlb	0	; () banked
  5577  002AC0  A37E               	btfss	CANsendMessage@flags& (0+255),1,b
  5578  002AC2  D003               	goto	l402
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
  5582  002AC4  010F               	movlb	15	; () banked
  5583  002AC6  8320               	bsf	32,1,b	;volatile
  5584  002AC8  D003               	goto	l4425
  5585  002ACA                     l402:
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;inc\CANlib.h: 506: else
  5589                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
  5590  002ACA  010F               	movlb	15	; () banked
  5591  002ACC  9320               	bcf	32,1,b	;volatile
  5592  002ACE  D000               	goto	l4425
  5593  002AD0                     l4425:
  5594                           
  5595                           ; BSR set to: 15
  5596                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
  5597  002AD0  C07B  FFD9         	movff	CANsendMessage@data,fsr2l
  5598  002AD4  C07C  FFDA         	movff	CANsendMessage@data+1,fsr2h
  5599  002AD8  50DF               	movf	indf2,w,c
  5600  002ADA  010F               	movlb	15	; () banked
  5601  002ADC  6F26               	movwf	38,b	;volatile
  5602                           
  5603                           ; BSR set to: 15
  5604                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
  5605  002ADE  0100               	movlb	0	; () banked
  5606  002AE0  EE20 F001          	lfsr	2,1
  5607  002AE4  517B               	movf	CANsendMessage@data& (0+255),w,b
  5608  002AE6  26D9               	addwf	fsr2l,f,c
  5609  002AE8  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5610  002AEA  22DA               	addwfc	fsr2h,f,c
  5611  002AEC  50DF               	movf	indf2,w,c
  5612  002AEE  010F               	movlb	15	; () banked
  5613  002AF0  6F27               	movwf	39,b	;volatile
  5614                           
  5615                           ; BSR set to: 15
  5616                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
  5617  002AF2  0100               	movlb	0	; () banked
  5618  002AF4  EE20 F002          	lfsr	2,2
  5619  002AF8  517B               	movf	CANsendMessage@data& (0+255),w,b
  5620  002AFA  26D9               	addwf	fsr2l,f,c
  5621  002AFC  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5622  002AFE  22DA               	addwfc	fsr2h,f,c
  5623  002B00  50DF               	movf	indf2,w,c
  5624  002B02  010F               	movlb	15	; () banked
  5625  002B04  6F28               	movwf	40,b	;volatile
  5626                           
  5627                           ; BSR set to: 15
  5628                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
  5629  002B06  0100               	movlb	0	; () banked
  5630  002B08  EE20 F003          	lfsr	2,3
  5631  002B0C  517B               	movf	CANsendMessage@data& (0+255),w,b
  5632  002B0E  26D9               	addwf	fsr2l,f,c
  5633  002B10  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5634  002B12  22DA               	addwfc	fsr2h,f,c
  5635  002B14  50DF               	movf	indf2,w,c
  5636  002B16  010F               	movlb	15	; () banked
  5637  002B18  6F29               	movwf	41,b	;volatile
  5638                           
  5639                           ; BSR set to: 15
  5640                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
  5641  002B1A  0100               	movlb	0	; () banked
  5642  002B1C  EE20 F004          	lfsr	2,4
  5643  002B20  517B               	movf	CANsendMessage@data& (0+255),w,b
  5644  002B22  26D9               	addwf	fsr2l,f,c
  5645  002B24  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5646  002B26  22DA               	addwfc	fsr2h,f,c
  5647  002B28  50DF               	movf	indf2,w,c
  5648  002B2A  010F               	movlb	15	; () banked
  5649  002B2C  6F2A               	movwf	42,b	;volatile
  5650                           
  5651                           ; BSR set to: 15
  5652                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
  5653  002B2E  0100               	movlb	0	; () banked
  5654  002B30  EE20 F005          	lfsr	2,5
  5655  002B34  517B               	movf	CANsendMessage@data& (0+255),w,b
  5656  002B36  26D9               	addwf	fsr2l,f,c
  5657  002B38  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5658  002B3A  22DA               	addwfc	fsr2h,f,c
  5659  002B3C  50DF               	movf	indf2,w,c
  5660  002B3E  010F               	movlb	15	; () banked
  5661  002B40  6F2B               	movwf	43,b	;volatile
  5662                           
  5663                           ; BSR set to: 15
  5664                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
  5665  002B42  0100               	movlb	0	; () banked
  5666  002B44  EE20 F006          	lfsr	2,6
  5667  002B48  517B               	movf	CANsendMessage@data& (0+255),w,b
  5668  002B4A  26D9               	addwf	fsr2l,f,c
  5669  002B4C  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5670  002B4E  22DA               	addwfc	fsr2h,f,c
  5671  002B50  50DF               	movf	indf2,w,c
  5672  002B52  010F               	movlb	15	; () banked
  5673  002B54  6F2C               	movwf	44,b	;volatile
  5674                           
  5675                           ; BSR set to: 15
  5676                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
  5677  002B56  0100               	movlb	0	; () banked
  5678  002B58  EE20 F007          	lfsr	2,7
  5679  002B5C  517B               	movf	CANsendMessage@data& (0+255),w,b
  5680  002B5E  26D9               	addwf	fsr2l,f,c
  5681  002B60  517C               	movf	(CANsendMessage@data+1)& (0+255),w,b
  5682  002B62  22DA               	addwfc	fsr2h,f,c
  5683  002B64  50DF               	movf	indf2,w,c
  5684  002B66  010F               	movlb	15	; () banked
  5685  002B68  6F2D               	movwf	45,b	;volatile
  5686                           
  5687                           ; BSR set to: 15
  5688                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
  5689  002B6A  010F               	movlb	15	; () banked
  5690  002B6C  8720               	bsf	32,3,b	;volatile
  5691                           
  5692                           ; BSR set to: 15
  5693                           ;inc\CANlib.h: 520: return;
  5694  002B6E  0012               	return	
  5695                           
  5696                           ; BSR set to: 15
  5697                           
  5698                           ; BSR set to: 15
  5699  002B70  0012               	return		;funcret
  5700  002B72                     __end_of_CANsendMessage:
  5701                           	opt stack 0
  5702                           tblptru	equ	0xFF8
  5703                           tblptrh	equ	0xFF7
  5704                           tblptrl	equ	0xFF6
  5705                           tablat	equ	0xFF5
  5706                           postinc0	equ	0xFEE
  5707                           wreg	equ	0xFE8
  5708                           indf2	equ	0xFDF
  5709                           postinc2	equ	0xFDE
  5710                           postdec2	equ	0xFDD
  5711                           fsr2h	equ	0xFDA
  5712                           fsr2l	equ	0xFD9
  5713                           status	equ	0xFD8
  5714                           
  5715 ;; *************** function _CANisTxReady *****************
  5716 ;; Defined at:
  5717 ;;		line 1154 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;		None
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;		None
  5722 ;; Return value:  Size  Location     Type
  5723 ;;                  1    wreg      unsigned char 
  5724 ;; Registers used:
  5725 ;;		wreg, status,2
  5726 ;; Tracked objects:
  5727 ;;		On entry : 0/0
  5728 ;;		On exit  : 0/0
  5729 ;;		Unchanged: 0/0
  5730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5734 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5735 ;;Total ram usage:        1 bytes
  5736 ;; Hardware stack levels used:    1
  5737 ;; Hardware stack levels required when called:    5
  5738 ;; This function calls:
  5739 ;;		Nothing
  5740 ;; This function is called by:
  5741 ;;		_main
  5742 ;;		_park_search
  5743 ;;		_park_routine
  5744 ;;		_can_send
  5745 ;; This function uses a non-reentrant model
  5746 ;;
  5747                           
  5748                           	psect	text7
  5749  006556                     __ptext7:
  5750                           	opt stack 0
  5751  006556                     _CANisTxReady:
  5752                           	opt stack 22
  5753                           
  5754                           ;inc\CANlib.h: 1156: return (!TXB0CONbits.TXREQ || !TXB1CONbits.TXREQ || !TXB2CONbits.TX
      +                          REQ);
  5755                           
  5756                           ; BSR set to: 15
  5757                           ;incstack = 0
  5758  006556  0E01               	movlw	1
  5759  006558  0100               	movlb	0	; () banked
  5760  00655A  6F77               	movwf	_CANisTxReady$2841& (0+255),b
  5761                           
  5762                           ; BSR set to: 0
  5763  00655C  010F               	movlb	15	; () banked
  5764  00655E  A740               	btfss	64,3,b	;volatile
  5765  006560  D009               	goto	l554
  5766                           
  5767                           ; BSR set to: 15
  5768  006562  010F               	movlb	15	; () banked
  5769  006564  A730               	btfss	48,3,b	;volatile
  5770  006566  D006               	goto	l554
  5771                           
  5772                           ; BSR set to: 15
  5773  006568  010F               	movlb	15	; () banked
  5774  00656A  A720               	btfss	32,3,b	;volatile
  5775  00656C  D003               	goto	l554
  5776                           
  5777                           ; BSR set to: 15
  5778  00656E  0E00               	movlw	0
  5779  006570  0100               	movlb	0	; () banked
  5780  006572  6F77               	movwf	_CANisTxReady$2841& (0+255),b
  5781  006574                     l554:
  5782  006574  0100               	movlb	0	; () banked
  5783  006576  5177               	movf	_CANisTxReady$2841& (0+255),w,b
  5784  006578  0012               	return	
  5785                           
  5786                           ; BSR set to: 0
  5787                           
  5788                           ; BSR set to: 0
  5789  00657A  0012               	return		;funcret
  5790  00657C                     __end_of_CANisTxReady:
  5791                           	opt stack 0
  5792                           tblptru	equ	0xFF8
  5793                           tblptrh	equ	0xFF7
  5794                           tblptrl	equ	0xFF6
  5795                           tablat	equ	0xFF5
  5796                           postinc0	equ	0xFEE
  5797                           wreg	equ	0xFE8
  5798                           indf2	equ	0xFDF
  5799                           postinc2	equ	0xFDE
  5800                           postdec2	equ	0xFDD
  5801                           fsr2h	equ	0xFDA
  5802                           fsr2l	equ	0xFD9
  5803                           status	equ	0xFD8
  5804                           
  5805 ;; *************** function _asin *****************
  5806 ;; Defined at:
  5807 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\asin.c"
  5808 ;; Parameters:    Size  Location     Type
  5809 ;;  x               4   17[BANK1 ] unsigned char 
  5810 ;; Auto vars:     Size  Location     Type
  5811 ;;  y               4   37[BANK1 ] unsigned char 
  5812 ;;  sgn             4   21[BANK1 ] unsigned char 
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  4   17[BANK1 ] unsigned char 
  5815 ;; Registers used:
  5816 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : 0/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5822 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5823 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0
  5824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5825 ;;      Totals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  5826 ;;Total ram usage:       28 bytes
  5827 ;; Hardware stack levels used:    1
  5828 ;; Hardware stack levels required when called:    9
  5829 ;; This function calls:
  5830 ;;		___fladd
  5831 ;;		___fldiv
  5832 ;;		___flge
  5833 ;;		___flmul
  5834 ;;		___flneg
  5835 ;;		_atan
  5836 ;;		_fabs
  5837 ;;		_sqrt
  5838 ;; This function is called by:
  5839 ;;		_park_routine
  5840 ;;		_parallelo
  5841 ;;		_matematica
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           	psect	text8
  5846  00409C                     __ptext8:
  5847                           	opt stack 0
  5848  00409C                     _asin:
  5849                           	opt stack 19
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;incstack = 0
  5853  00409C  0E00               	movlw	0
  5854  00409E  0100               	movlb	0	; () banked
  5855  0040A0  6FB3               	movwf	___flge@ff1& (0+255),b
  5856  0040A2  0E00               	movlw	0
  5857  0040A4  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  5858  0040A6  0E80               	movlw	128
  5859  0040A8  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  5860  0040AA  0E3F               	movlw	63
  5861  0040AC  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  5862  0040AE  C194  F0AF         	movff	asin@x,fabs@d
  5863  0040B2  C195  F0B0         	movff	asin@x+1,fabs@d+1
  5864  0040B6  C196  F0B1         	movff	asin@x+2,fabs@d+2
  5865  0040BA  C197  F0B2         	movff	asin@x+3,fabs@d+3
  5866  0040BE  ECBF  F031         	call	_fabs	;wreg free
  5867  0040C2  C0AF  F0B7         	movff	?_fabs,___flge@ff2
  5868  0040C6  C0B0  F0B8         	movff	?_fabs+1,___flge@ff2+1
  5869  0040CA  C0B1  F0B9         	movff	?_fabs+2,___flge@ff2+2
  5870  0040CE  C0B2  F0BA         	movff	?_fabs+3,___flge@ff2+3
  5871  0040D2  EC2A  F02E         	call	___flge	;wreg free
  5872  0040D6  0100               	movlb	0	; () banked
  5873  0040D8  B0D8               	btfsc	status,0,c
  5874  0040DA  D00F               	goto	l6665
  5875                           
  5876                           ; BSR set to: 0
  5877  0040DC  0E00               	movlw	0
  5878  0040DE  0101               	movlb	1	; () banked
  5879  0040E0  6F43               	movwf	(_errno+1)& (0+255),b
  5880  0040E2  0E21               	movlw	33
  5881  0040E4  6F42               	movwf	_errno& (0+255),b
  5882  0040E6  0E00               	movlw	0
  5883  0040E8  0101               	movlb	1	; () banked
  5884  0040EA  6F94               	movwf	?_asin& (0+255),b
  5885  0040EC  0E00               	movlw	0
  5886  0040EE  6F95               	movwf	(?_asin+1)& (0+255),b
  5887  0040F0  0E00               	movlw	0
  5888  0040F2  6F96               	movwf	(?_asin+2)& (0+255),b
  5889  0040F4  0E00               	movlw	0
  5890  0040F6  6F97               	movwf	(?_asin+3)& (0+255),b
  5891                           
  5892                           ; BSR set to: 1
  5893  0040F8  0012               	return	
  5894  0040FA                     l6665:
  5895  0040FA  0E00               	movlw	0
  5896  0040FC  0101               	movlb	1	; () banked
  5897  0040FE  6F98               	movwf	asin@sgn& (0+255),b
  5898  004100  0E00               	movlw	0
  5899  004102  6F99               	movwf	(asin@sgn+1)& (0+255),b
  5900  004104  0E80               	movlw	128
  5901  004106  6F9A               	movwf	(asin@sgn+2)& (0+255),b
  5902  004108  0E3F               	movlw	63
  5903  00410A  6F9B               	movwf	(asin@sgn+3)& (0+255),b
  5904                           
  5905                           ; BSR set to: 1
  5906  00410C  C194  F085         	movff	asin@x,___flmul@f2
  5907  004110  C195  F086         	movff	asin@x+1,___flmul@f2+1
  5908  004114  C196  F087         	movff	asin@x+2,___flmul@f2+2
  5909  004118  C197  F088         	movff	asin@x+3,___flmul@f2+3
  5910  00411C  C194  F081         	movff	asin@x,___flmul@f1
  5911  004120  C195  F082         	movff	asin@x+1,___flmul@f1+1
  5912  004124  C196  F083         	movff	asin@x+2,___flmul@f1+2
  5913  004128  C197  F084         	movff	asin@x+3,___flmul@f1+3
  5914  00412C  ECAB  F02A         	call	___flmul	;wreg free
  5915  004130  C081  F0AB         	movff	?___flmul,___flneg@f1
  5916  004134  C082  F0AC         	movff	?___flmul+1,___flneg@f1+1
  5917  004138  C083  F0AD         	movff	?___flmul+2,___flneg@f1+2
  5918  00413C  C084  F0AE         	movff	?___flmul+3,___flneg@f1+3
  5919  004140  ECDE  F031         	call	___flneg	;wreg free
  5920  004144  C0AB  F09F         	movff	?___flneg,___fladd@f1
  5921  004148  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  5922  00414C  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  5923  004150  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  5924  004154  0E00               	movlw	0
  5925  004156  0100               	movlb	0	; () banked
  5926  004158  6FA3               	movwf	___fladd@f2& (0+255),b
  5927  00415A  0E00               	movlw	0
  5928  00415C  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  5929  00415E  0E80               	movlw	128
  5930  004160  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  5931  004162  0E3F               	movlw	63
  5932  004164  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  5933  004166  EC6E  F023         	call	___fladd	;wreg free
  5934  00416A  C09F  F19C         	movff	?___fladd,_asin$3679
  5935  00416E  C0A0  F19D         	movff	?___fladd+1,_asin$3679+1
  5936  004172  C0A1  F19E         	movff	?___fladd+2,_asin$3679+2
  5937  004176  C0A2  F19F         	movff	?___fladd+3,_asin$3679+3
  5938  00417A  C19C  F0D1         	movff	_asin$3679,sqrt@y
  5939  00417E  C19D  F0D2         	movff	_asin$3679+1,sqrt@y+1
  5940  004182  C19E  F0D3         	movff	_asin$3679+2,sqrt@y+2
  5941  004186  C19F  F0D4         	movff	_asin$3679+3,sqrt@y+3
  5942  00418A  ECF9  F026         	call	_sqrt	;wreg free
  5943  00418E  C0D1  F1A8         	movff	?_sqrt,asin@y
  5944  004192  C0D2  F1A9         	movff	?_sqrt+1,asin@y+1
  5945  004196  C0D3  F1AA         	movff	?_sqrt+2,asin@y+2
  5946  00419A  C0D4  F1AB         	movff	?_sqrt+3,asin@y+3
  5947  00419E  C194  F0AF         	movff	asin@x,fabs@d
  5948  0041A2  C195  F0B0         	movff	asin@x+1,fabs@d+1
  5949  0041A6  C196  F0B1         	movff	asin@x+2,fabs@d+2
  5950  0041AA  C197  F0B2         	movff	asin@x+3,fabs@d+3
  5951  0041AE  ECBF  F031         	call	_fabs	;wreg free
  5952  0041B2  C0AF  F0B3         	movff	?_fabs,___flge@ff1
  5953  0041B6  C0B0  F0B4         	movff	?_fabs+1,___flge@ff1+1
  5954  0041BA  C0B1  F0B5         	movff	?_fabs+2,___flge@ff1+2
  5955  0041BE  C0B2  F0B6         	movff	?_fabs+3,___flge@ff1+3
  5956  0041C2  0E8F               	movlw	143
  5957  0041C4  0100               	movlb	0	; () banked
  5958  0041C6  6FB7               	movwf	___flge@ff2& (0+255),b
  5959  0041C8  0EC2               	movlw	194
  5960  0041CA  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  5961  0041CC  0E35               	movlw	53
  5962  0041CE  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  5963  0041D0  0E3F               	movlw	63
  5964  0041D2  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  5965  0041D4  EC2A  F02E         	call	___flge	;wreg free
  5966  0041D8  0100               	movlb	0	; () banked
  5967  0041DA  B0D8               	btfsc	status,0,c
  5968  0041DC  D02D               	goto	l6679
  5969                           
  5970                           ; BSR set to: 0
  5971  0041DE  C194  F090         	movff	asin@x,___fldiv@f1
  5972  0041E2  C195  F091         	movff	asin@x+1,___fldiv@f1+1
  5973  0041E6  C196  F092         	movff	asin@x+2,___fldiv@f1+2
  5974  0041EA  C197  F093         	movff	asin@x+3,___fldiv@f1+3
  5975  0041EE  C1A8  F094         	movff	asin@y,___fldiv@f2
  5976  0041F2  C1A9  F095         	movff	asin@y+1,___fldiv@f2+1
  5977  0041F6  C1AA  F096         	movff	asin@y+2,___fldiv@f2+2
  5978  0041FA  C1AB  F097         	movff	asin@y+3,___fldiv@f2+3
  5979  0041FE  EC5D  F02B         	call	___fldiv	;wreg free
  5980  004202  C090  F1AC         	movff	?___fldiv,_asin$3680
  5981  004206  C091  F1AD         	movff	?___fldiv+1,_asin$3680+1
  5982  00420A  C092  F1AE         	movff	?___fldiv+2,_asin$3680+2
  5983  00420E  C093  F1AF         	movff	?___fldiv+3,_asin$3680+3
  5984  004212  C1AC  F0BF         	movff	_asin$3680,atan@f
  5985  004216  C1AD  F0C0         	movff	_asin$3680+1,atan@f+1
  5986  00421A  C1AE  F0C1         	movff	_asin$3680+2,atan@f+2
  5987  00421E  C1AF  F0C2         	movff	_asin$3680+3,atan@f+3
  5988  004222  ECA4  F024         	call	_atan	;wreg free
  5989  004226  C0BF  F194         	movff	?_atan,?_asin
  5990  00422A  C0C0  F195         	movff	?_atan+1,?_asin+1
  5991  00422E  C0C1  F196         	movff	?_atan+2,?_asin+2
  5992  004232  C0C2  F197         	movff	?_atan+3,?_asin+3
  5993  004236  0012               	return	
  5994  004238                     l6679:
  5995  004238  0101               	movlb	1	; () banked
  5996  00423A  AF97               	btfss	(asin@x+3)& (0+255),7,b
  5997  00423C  D06E               	goto	l6691
  5998                           
  5999                           ; BSR set to: 1
  6000  00423E  C194  F094         	movff	asin@x,___fldiv@f2
  6001  004242  C195  F095         	movff	asin@x+1,___fldiv@f2+1
  6002  004246  C196  F096         	movff	asin@x+2,___fldiv@f2+2
  6003  00424A  C197  F097         	movff	asin@x+3,___fldiv@f2+3
  6004  00424E  C1A8  F0AB         	movff	asin@y,___flneg@f1
  6005  004252  C1A9  F0AC         	movff	asin@y+1,___flneg@f1+1
  6006  004256  C1AA  F0AD         	movff	asin@y+2,___flneg@f1+2
  6007  00425A  C1AB  F0AE         	movff	asin@y+3,___flneg@f1+3
  6008  00425E  ECDE  F031         	call	___flneg	;wreg free
  6009  004262  C0AB  F090         	movff	?___flneg,___fldiv@f1
  6010  004266  C0AC  F091         	movff	?___flneg+1,___fldiv@f1+1
  6011  00426A  C0AD  F092         	movff	?___flneg+2,___fldiv@f1+2
  6012  00426E  C0AE  F093         	movff	?___flneg+3,___fldiv@f1+3
  6013  004272  EC5D  F02B         	call	___fldiv	;wreg free
  6014  004276  C090  F1AC         	movff	?___fldiv,_asin$3680
  6015  00427A  C091  F1AD         	movff	?___fldiv+1,_asin$3680+1
  6016  00427E  C092  F1AE         	movff	?___fldiv+2,_asin$3680+2
  6017  004282  C093  F1AF         	movff	?___fldiv+3,_asin$3680+3
  6018  004286  C1AC  F0BF         	movff	_asin$3680,atan@f
  6019  00428A  C1AD  F0C0         	movff	_asin$3680+1,atan@f+1
  6020  00428E  C1AE  F0C1         	movff	_asin$3680+2,atan@f+2
  6021  004292  C1AF  F0C2         	movff	_asin$3680+3,atan@f+3
  6022  004296  ECA4  F024         	call	_atan	;wreg free
  6023  00429A  C0BF  F1A4         	movff	?_atan,_asin$3681
  6024  00429E  C0C0  F1A5         	movff	?_atan+1,_asin$3681+1
  6025  0042A2  C0C1  F1A6         	movff	?_atan+2,_asin$3681+2
  6026  0042A6  C0C2  F1A7         	movff	?_atan+3,_asin$3681+3
  6027  0042AA  0EDB               	movlw	219
  6028  0042AC  0100               	movlb	0	; () banked
  6029  0042AE  6FA3               	movwf	___fladd@f2& (0+255),b
  6030  0042B0  0E0F               	movlw	15
  6031  0042B2  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6032  0042B4  0EC9               	movlw	201
  6033  0042B6  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6034  0042B8  0E3F               	movlw	63
  6035  0042BA  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6036  0042BC  C1A4  F0AB         	movff	_asin$3681,___flneg@f1
  6037  0042C0  C1A5  F0AC         	movff	_asin$3681+1,___flneg@f1+1
  6038  0042C4  C1A6  F0AD         	movff	_asin$3681+2,___flneg@f1+2
  6039  0042C8  C1A7  F0AE         	movff	_asin$3681+3,___flneg@f1+3
  6040  0042CC  ECDE  F031         	call	___flneg	;wreg free
  6041  0042D0  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6042  0042D4  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6043  0042D8  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6044  0042DC  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6045  0042E0  EC6E  F023         	call	___fladd	;wreg free
  6046  0042E4  C09F  F1A0         	movff	?___fladd,_asin$3682
  6047  0042E8  C0A0  F1A1         	movff	?___fladd+1,_asin$3682+1
  6048  0042EC  C0A1  F1A2         	movff	?___fladd+2,_asin$3682+2
  6049  0042F0  C0A2  F1A3         	movff	?___fladd+3,_asin$3682+3
  6050  0042F4  C1A0  F0AB         	movff	_asin$3682,___flneg@f1
  6051  0042F8  C1A1  F0AC         	movff	_asin$3682+1,___flneg@f1+1
  6052  0042FC  C1A2  F0AD         	movff	_asin$3682+2,___flneg@f1+2
  6053  004300  C1A3  F0AE         	movff	_asin$3682+3,___flneg@f1+3
  6054  004304  ECDE  F031         	call	___flneg	;wreg free
  6055  004308  C0AB  F194         	movff	?___flneg,?_asin
  6056  00430C  C0AC  F195         	movff	?___flneg+1,?_asin+1
  6057  004310  C0AD  F196         	movff	?___flneg+2,?_asin+2
  6058  004314  C0AE  F197         	movff	?___flneg+3,?_asin+3
  6059  004318  0012               	return	
  6060  00431A                     l6691:
  6061  00431A  C194  F094         	movff	asin@x,___fldiv@f2
  6062  00431E  C195  F095         	movff	asin@x+1,___fldiv@f2+1
  6063  004322  C196  F096         	movff	asin@x+2,___fldiv@f2+2
  6064  004326  C197  F097         	movff	asin@x+3,___fldiv@f2+3
  6065  00432A  C1A8  F090         	movff	asin@y,___fldiv@f1
  6066  00432E  C1A9  F091         	movff	asin@y+1,___fldiv@f1+1
  6067  004332  C1AA  F092         	movff	asin@y+2,___fldiv@f1+2
  6068  004336  C1AB  F093         	movff	asin@y+3,___fldiv@f1+3
  6069  00433A  EC5D  F02B         	call	___fldiv	;wreg free
  6070  00433E  C090  F1AC         	movff	?___fldiv,_asin$3680
  6071  004342  C091  F1AD         	movff	?___fldiv+1,_asin$3680+1
  6072  004346  C092  F1AE         	movff	?___fldiv+2,_asin$3680+2
  6073  00434A  C093  F1AF         	movff	?___fldiv+3,_asin$3680+3
  6074  00434E  C1AC  F0BF         	movff	_asin$3680,atan@f
  6075  004352  C1AD  F0C0         	movff	_asin$3680+1,atan@f+1
  6076  004356  C1AE  F0C1         	movff	_asin$3680+2,atan@f+2
  6077  00435A  C1AF  F0C2         	movff	_asin$3680+3,atan@f+3
  6078  00435E  ECA4  F024         	call	_atan	;wreg free
  6079  004362  C0BF  F1A4         	movff	?_atan,_asin$3681
  6080  004366  C0C0  F1A5         	movff	?_atan+1,_asin$3681+1
  6081  00436A  C0C1  F1A6         	movff	?_atan+2,_asin$3681+2
  6082  00436E  C0C2  F1A7         	movff	?_atan+3,_asin$3681+3
  6083  004372  C1A4  F0AB         	movff	_asin$3681,___flneg@f1
  6084  004376  C1A5  F0AC         	movff	_asin$3681+1,___flneg@f1+1
  6085  00437A  C1A6  F0AD         	movff	_asin$3681+2,___flneg@f1+2
  6086  00437E  C1A7  F0AE         	movff	_asin$3681+3,___flneg@f1+3
  6087  004382  ECDE  F031         	call	___flneg	;wreg free
  6088  004386  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6089  00438A  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6090  00438E  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6091  004392  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6092  004396  0EDB               	movlw	219
  6093  004398  0100               	movlb	0	; () banked
  6094  00439A  6FA3               	movwf	___fladd@f2& (0+255),b
  6095  00439C  0E0F               	movlw	15
  6096  00439E  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6097  0043A0  0EC9               	movlw	201
  6098  0043A2  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6099  0043A4  0E3F               	movlw	63
  6100  0043A6  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6101  0043A8  EC6E  F023         	call	___fladd	;wreg free
  6102  0043AC  C09F  F194         	movff	?___fladd,?_asin
  6103  0043B0  C0A0  F195         	movff	?___fladd+1,?_asin+1
  6104  0043B4  C0A1  F196         	movff	?___fladd+2,?_asin+2
  6105  0043B8  C0A2  F197         	movff	?___fladd+3,?_asin+3
  6106  0043BC  0012               	return	
  6107  0043BE  0012               	return		;funcret
  6108  0043C0                     __end_of_asin:
  6109                           	opt stack 0
  6110                           tblptru	equ	0xFF8
  6111                           tblptrh	equ	0xFF7
  6112                           tblptrl	equ	0xFF6
  6113                           tablat	equ	0xFF5
  6114                           postinc0	equ	0xFEE
  6115                           wreg	equ	0xFE8
  6116                           indf2	equ	0xFDF
  6117                           postinc2	equ	0xFDE
  6118                           postdec2	equ	0xFDD
  6119                           fsr2h	equ	0xFDA
  6120                           fsr2l	equ	0xFD9
  6121                           status	equ	0xFD8
  6122                           
  6123 ;; *************** function _sqrt *****************
  6124 ;; Defined at:
  6125 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;  y               4  113[BANK0 ] unsigned char 
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;  x               4   13[BANK1 ] unsigned char 
  6130 ;;  q               4    9[BANK1 ] unsigned char 
  6131 ;;  z               4    4[BANK1 ] unsigned char 
  6132 ;;  og              4    0[BANK1 ] unsigned char 
  6133 ;;  i               1    8[BANK1 ] unsigned char 
  6134 ;; Return value:  Size  Location     Type
  6135 ;;                  4  113[BANK0 ] unsigned char 
  6136 ;; Registers used:
  6137 ;;		wreg, status,2, status,0, cstack
  6138 ;; Tracked objects:
  6139 ;;		On entry : 0/0
  6140 ;;		On exit  : 0/0
  6141 ;;		Unchanged: 0/0
  6142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6143 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6144 ;;      Locals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;      Totals:         0       8      17       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;Total ram usage:       25 bytes
  6148 ;; Hardware stack levels used:    1
  6149 ;; Hardware stack levels required when called:    8
  6150 ;; This function calls:
  6151 ;;		___flge
  6152 ;;		___flmul
  6153 ;;		___flsub
  6154 ;; This function is called by:
  6155 ;;		_parallelo
  6156 ;;		_asin
  6157 ;; This function uses a non-reentrant model
  6158 ;;
  6159                           
  6160                           	psect	text9
  6161  004DF2                     __ptext9:
  6162                           	opt stack 0
  6163  004DF2                     _sqrt:
  6164                           	opt stack 20
  6165                           
  6166                           ;incstack = 0
  6167  004DF2  0E00               	movlw	0
  6168  004DF4  0100               	movlb	0	; () banked
  6169  004DF6  6FB3               	movwf	___flge@ff1& (0+255),b
  6170  004DF8  0E00               	movlw	0
  6171  004DFA  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6172  004DFC  0E00               	movlw	0
  6173  004DFE  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6174  004E00  0E00               	movlw	0
  6175  004E02  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6176  004E04  C0D1  F0B7         	movff	sqrt@y,___flge@ff2
  6177  004E08  C0D2  F0B8         	movff	sqrt@y+1,___flge@ff2+1
  6178  004E0C  C0D3  F0B9         	movff	sqrt@y+2,___flge@ff2+2
  6179  004E10  C0D4  F0BA         	movff	sqrt@y+3,___flge@ff2+3
  6180  004E14  EC2A  F02E         	call	___flge	;wreg free
  6181  004E18  0100               	movlb	0	; () banked
  6182  004E1A  A0D8               	btfss	status,0,c
  6183  004E1C  D012               	goto	l1470
  6184                           
  6185                           ; BSR set to: 0
  6186  004E1E  0100               	movlb	0	; () banked
  6187  004E20  AFD4               	btfss	(sqrt@y+3)& (0+255),7,b
  6188  004E22  D005               	goto	l1471
  6189                           
  6190                           ; BSR set to: 0
  6191  004E24  0E00               	movlw	0
  6192  004E26  0101               	movlb	1	; () banked
  6193  004E28  6F43               	movwf	(_errno+1)& (0+255),b
  6194  004E2A  0E21               	movlw	33
  6195  004E2C  6F42               	movwf	_errno& (0+255),b
  6196  004E2E                     l1471:
  6197  004E2E  0E00               	movlw	0
  6198  004E30  0100               	movlb	0	; () banked
  6199  004E32  6FD1               	movwf	?_sqrt& (0+255),b
  6200  004E34  0E00               	movlw	0
  6201  004E36  6FD2               	movwf	(?_sqrt+1)& (0+255),b
  6202  004E38  0E00               	movlw	0
  6203  004E3A  6FD3               	movwf	(?_sqrt+2)& (0+255),b
  6204  004E3C  0E00               	movlw	0
  6205  004E3E  6FD4               	movwf	(?_sqrt+3)& (0+255),b
  6206                           
  6207                           ; BSR set to: 0
  6208  004E40  0012               	return	
  6209  004E42                     l1470:
  6210                           
  6211                           ; BSR set to: 0
  6212  004E42  C0D1  F187         	movff	sqrt@y,sqrt@z
  6213  004E46  C0D2  F188         	movff	sqrt@y+1,sqrt@z+1
  6214  004E4A  C0D3  F189         	movff	sqrt@y+2,sqrt@z+2
  6215  004E4E  C0D4  F18A         	movff	sqrt@y+3,sqrt@z+3
  6216                           
  6217                           ; BSR set to: 0
  6218  004E52  C0D1  F0D5         	movff	sqrt@y,??_sqrt
  6219  004E56  C0D2  F0D6         	movff	sqrt@y+1,??_sqrt+1
  6220  004E5A  C0D3  F0D7         	movff	sqrt@y+2,??_sqrt+2
  6221  004E5E  C0D4  F0D8         	movff	sqrt@y+3,??_sqrt+3
  6222  004E62  0100               	movlb	0	; () banked
  6223  004E64  1FD5               	comf	??_sqrt& (0+255),f,b
  6224  004E66  1FD6               	comf	(??_sqrt+1)& (0+255),f,b
  6225  004E68  1FD7               	comf	(??_sqrt+2)& (0+255),f,b
  6226  004E6A  1FD8               	comf	(??_sqrt+3)& (0+255),f,b
  6227  004E6C  2BD5               	incf	??_sqrt& (0+255),f,b
  6228  004E6E  0E00               	movlw	0
  6229  004E70  23D6               	addwfc	(??_sqrt+1)& (0+255),f,b
  6230  004E72  23D7               	addwfc	(??_sqrt+2)& (0+255),f,b
  6231  004E74  23D8               	addwfc	(??_sqrt+3)& (0+255),f,b
  6232  004E76  0E5E               	movlw	94
  6233  004E78  0100               	movlb	0	; () banked
  6234  004E7A  25D5               	addwf	??_sqrt& (0+255),w,b
  6235  004E7C  0101               	movlb	1	; () banked
  6236  004E7E  6F90               	movwf	sqrt@x& (0+255),b
  6237  004E80  0EC8               	movlw	200
  6238  004E82  0100               	movlb	0	; () banked
  6239  004E84  21D6               	addwfc	(??_sqrt+1)& (0+255),w,b
  6240  004E86  0101               	movlb	1	; () banked
  6241  004E88  6F91               	movwf	(sqrt@x+1)& (0+255),b
  6242  004E8A  0E6E               	movlw	110
  6243  004E8C  0100               	movlb	0	; () banked
  6244  004E8E  21D7               	addwfc	(??_sqrt+2)& (0+255),w,b
  6245  004E90  0101               	movlb	1	; () banked
  6246  004E92  6F92               	movwf	(sqrt@x+2)& (0+255),b
  6247  004E94  0EBE               	movlw	190
  6248  004E96  0100               	movlb	0	; () banked
  6249  004E98  21D8               	addwfc	(??_sqrt+3)& (0+255),w,b
  6250  004E9A  0101               	movlb	1	; () banked
  6251  004E9C  6F93               	movwf	(sqrt@x+3)& (0+255),b
  6252                           
  6253                           ; BSR set to: 1
  6254  004E9E  0101               	movlb	1	; () banked
  6255  004EA0  90D8               	bcf	status,0,c
  6256  004EA2  3393               	rrcf	(sqrt@x+3)& (0+255),f,b
  6257  004EA4  3392               	rrcf	(sqrt@x+2)& (0+255),f,b
  6258  004EA6  3391               	rrcf	(sqrt@x+1)& (0+255),f,b
  6259  004EA8  3390               	rrcf	sqrt@x& (0+255),f,b
  6260                           
  6261                           ; BSR set to: 1
  6262  004EAA  0E00               	movlw	0
  6263  004EAC  0101               	movlb	1	; () banked
  6264  004EAE  5F87               	subwf	sqrt@z& (0+255),f,b
  6265  004EB0  0E00               	movlw	0
  6266  004EB2  5B88               	subwfb	(sqrt@z+1)& (0+255),f,b
  6267  004EB4  0E80               	movlw	128
  6268  004EB6  5B89               	subwfb	(sqrt@z+2)& (0+255),f,b
  6269  004EB8  0E00               	movlw	0
  6270  004EBA  5B8A               	subwfb	(sqrt@z+3)& (0+255),f,b
  6271                           
  6272                           ; BSR set to: 1
  6273  004EBC  0E04               	movlw	4
  6274  004EBE  0101               	movlb	1	; () banked
  6275  004EC0  6F8B               	movwf	sqrt@i& (0+255),b
  6276  004EC2  D000               	goto	l6537
  6277  004EC4                     l6537:
  6278                           
  6279                           ; BSR set to: 1
  6280  004EC4  C190  F183         	movff	sqrt@x,sqrt@og
  6281  004EC8  C191  F184         	movff	sqrt@x+1,sqrt@og+1
  6282  004ECC  C192  F185         	movff	sqrt@x+2,sqrt@og+2
  6283  004ED0  C193  F186         	movff	sqrt@x+3,sqrt@og+3
  6284                           
  6285                           ; BSR set to: 1
  6286  004ED4  C190  F081         	movff	sqrt@x,___flmul@f1
  6287  004ED8  C191  F082         	movff	sqrt@x+1,___flmul@f1+1
  6288  004EDC  C192  F083         	movff	sqrt@x+2,___flmul@f1+2
  6289  004EE0  C193  F084         	movff	sqrt@x+3,___flmul@f1+3
  6290  004EE4  C187  F085         	movff	sqrt@z,___flmul@f2
  6291  004EE8  C188  F086         	movff	sqrt@z+1,___flmul@f2+1
  6292  004EEC  C189  F087         	movff	sqrt@z+2,___flmul@f2+2
  6293  004EF0  C18A  F088         	movff	sqrt@z+3,___flmul@f2+3
  6294  004EF4  ECAB  F02A         	call	___flmul	;wreg free
  6295  004EF8  C081  F18C         	movff	?___flmul,sqrt@q
  6296  004EFC  C082  F18D         	movff	?___flmul+1,sqrt@q+1
  6297  004F00  C083  F18E         	movff	?___flmul+2,sqrt@q+2
  6298  004F04  C084  F18F         	movff	?___flmul+3,sqrt@q+3
  6299  004F08  C18C  F081         	movff	sqrt@q,___flmul@f1
  6300  004F0C  C18D  F082         	movff	sqrt@q+1,___flmul@f1+1
  6301  004F10  C18E  F083         	movff	sqrt@q+2,___flmul@f1+2
  6302  004F14  C18F  F084         	movff	sqrt@q+3,___flmul@f1+3
  6303  004F18  C190  F085         	movff	sqrt@x,___flmul@f2
  6304  004F1C  C191  F086         	movff	sqrt@x+1,___flmul@f2+1
  6305  004F20  C192  F087         	movff	sqrt@x+2,___flmul@f2+2
  6306  004F24  C193  F088         	movff	sqrt@x+3,___flmul@f2+3
  6307  004F28  ECAB  F02A         	call	___flmul	;wreg free
  6308  004F2C  C081  F18C         	movff	?___flmul,sqrt@q
  6309  004F30  C082  F18D         	movff	?___flmul+1,sqrt@q+1
  6310  004F34  C083  F18E         	movff	?___flmul+2,sqrt@q+2
  6311  004F38  C084  F18F         	movff	?___flmul+3,sqrt@q+3
  6312  004F3C  C18C  F081         	movff	sqrt@q,___flmul@f1
  6313  004F40  C18D  F082         	movff	sqrt@q+1,___flmul@f1+1
  6314  004F44  C18E  F083         	movff	sqrt@q+2,___flmul@f1+2
  6315  004F48  C18F  F084         	movff	sqrt@q+3,___flmul@f1+3
  6316  004F4C  C190  F085         	movff	sqrt@x,___flmul@f2
  6317  004F50  C191  F086         	movff	sqrt@x+1,___flmul@f2+1
  6318  004F54  C192  F087         	movff	sqrt@x+2,___flmul@f2+2
  6319  004F58  C193  F088         	movff	sqrt@x+3,___flmul@f2+3
  6320  004F5C  ECAB  F02A         	call	___flmul	;wreg free
  6321  004F60  C081  F18C         	movff	?___flmul,sqrt@q
  6322  004F64  C082  F18D         	movff	?___flmul+1,sqrt@q+1
  6323  004F68  C083  F18E         	movff	?___flmul+2,sqrt@q+2
  6324  004F6C  C084  F18F         	movff	?___flmul+3,sqrt@q+3
  6325  004F70  C190  F081         	movff	sqrt@x,___flmul@f1
  6326  004F74  C191  F082         	movff	sqrt@x+1,___flmul@f1+1
  6327  004F78  C192  F083         	movff	sqrt@x+2,___flmul@f1+2
  6328  004F7C  C193  F084         	movff	sqrt@x+3,___flmul@f1+3
  6329  004F80  0E00               	movlw	0
  6330  004F82  0100               	movlb	0	; () banked
  6331  004F84  6F85               	movwf	___flmul@f2& (0+255),b
  6332  004F86  0E00               	movlw	0
  6333  004F88  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  6334  004F8A  0EC0               	movlw	192
  6335  004F8C  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  6336  004F8E  0E3F               	movlw	63
  6337  004F90  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  6338  004F92  ECAB  F02A         	call	___flmul	;wreg free
  6339  004F96  C081  F190         	movff	?___flmul,sqrt@x
  6340  004F9A  C082  F191         	movff	?___flmul+1,sqrt@x+1
  6341  004F9E  C083  F192         	movff	?___flmul+2,sqrt@x+2
  6342  004FA2  C084  F193         	movff	?___flmul+3,sqrt@x+3
  6343  004FA6  C190  F0C9         	movff	sqrt@x,___flsub@f1
  6344  004FAA  C191  F0CA         	movff	sqrt@x+1,___flsub@f1+1
  6345  004FAE  C192  F0CB         	movff	sqrt@x+2,___flsub@f1+2
  6346  004FB2  C193  F0CC         	movff	sqrt@x+3,___flsub@f1+3
  6347  004FB6  C18C  F0CD         	movff	sqrt@q,___flsub@f2
  6348  004FBA  C18D  F0CE         	movff	sqrt@q+1,___flsub@f2+1
  6349  004FBE  C18E  F0CF         	movff	sqrt@q+2,___flsub@f2+2
  6350  004FC2  C18F  F0D0         	movff	sqrt@q+3,___flsub@f2+3
  6351  004FC6  EC11  F031         	call	___flsub	;wreg free
  6352  004FCA  C0C9  F190         	movff	?___flsub,sqrt@x
  6353  004FCE  C0CA  F191         	movff	?___flsub+1,sqrt@x+1
  6354  004FD2  C0CB  F192         	movff	?___flsub+2,sqrt@x+2
  6355  004FD6  C0CC  F193         	movff	?___flsub+3,sqrt@x+3
  6356  004FDA  0101               	movlb	1	; () banked
  6357  004FDC  2F8B               	decfsz	sqrt@i& (0+255),f,b
  6358  004FDE  D772               	goto	l6537
  6359  004FE0  D000               	goto	l6551
  6360  004FE2                     l6551:
  6361                           
  6362                           ; BSR set to: 1
  6363  004FE2  C190  F081         	movff	sqrt@x,___flmul@f1
  6364  004FE6  C191  F082         	movff	sqrt@x+1,___flmul@f1+1
  6365  004FEA  C192  F083         	movff	sqrt@x+2,___flmul@f1+2
  6366  004FEE  C193  F084         	movff	sqrt@x+3,___flmul@f1+3
  6367  004FF2  C0D1  F085         	movff	sqrt@y,___flmul@f2
  6368  004FF6  C0D2  F086         	movff	sqrt@y+1,___flmul@f2+1
  6369  004FFA  C0D3  F087         	movff	sqrt@y+2,___flmul@f2+2
  6370  004FFE  C0D4  F088         	movff	sqrt@y+3,___flmul@f2+3
  6371  005002  ECAB  F02A         	call	___flmul	;wreg free
  6372  005006  C081  F0D1         	movff	?___flmul,?_sqrt
  6373  00500A  C082  F0D2         	movff	?___flmul+1,?_sqrt+1
  6374  00500E  C083  F0D3         	movff	?___flmul+2,?_sqrt+2
  6375  005012  C084  F0D4         	movff	?___flmul+3,?_sqrt+3
  6376  005016  0012               	return	
  6377  005018  0012               	return		;funcret
  6378  00501A                     __end_of_sqrt:
  6379                           	opt stack 0
  6380                           tblptru	equ	0xFF8
  6381                           tblptrh	equ	0xFF7
  6382                           tblptrl	equ	0xFF6
  6383                           tablat	equ	0xFF5
  6384                           postinc0	equ	0xFEE
  6385                           wreg	equ	0xFE8
  6386                           indf2	equ	0xFDF
  6387                           postinc2	equ	0xFDE
  6388                           postdec2	equ	0xFDD
  6389                           fsr2h	equ	0xFDA
  6390                           fsr2l	equ	0xFD9
  6391                           status	equ	0xFD8
  6392                           
  6393 ;; *************** function _atan *****************
  6394 ;; Defined at:
  6395 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atan.c"
  6396 ;; Parameters:    Size  Location     Type
  6397 ;;  f               4   95[BANK0 ] unsigned char 
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;  val             4  112[BANK0 ] unsigned char 
  6400 ;;  val_squared     4  108[BANK0 ] unsigned char 
  6401 ;;  x               4  103[BANK0 ] unsigned char 
  6402 ;;  y               4   99[BANK0 ] unsigned char 
  6403 ;;  recip           1  107[BANK0 ] unsigned char 
  6404 ;; Return value:  Size  Location     Type
  6405 ;;                  4   95[BANK0 ] unsigned char 
  6406 ;; Registers used:
  6407 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : 0/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6413 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6414 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6416 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6417 ;;Total ram usage:       21 bytes
  6418 ;; Hardware stack levels used:    1
  6419 ;; Hardware stack levels required when called:    8
  6420 ;; This function calls:
  6421 ;;		___fladd
  6422 ;;		___fldiv
  6423 ;;		___flge
  6424 ;;		___flmul
  6425 ;;		___flneg
  6426 ;;		_eval_poly
  6427 ;;		_fabs
  6428 ;; This function is called by:
  6429 ;;		_asin
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           	psect	text10
  6434  004948                     __ptext10:
  6435                           	opt stack 0
  6436  004948                     _atan:
  6437                           	opt stack 19
  6438                           
  6439                           ;incstack = 0
  6440  004948  C0BF  F0AF         	movff	atan@f,fabs@d
  6441  00494C  C0C0  F0B0         	movff	atan@f+1,fabs@d+1
  6442  004950  C0C1  F0B1         	movff	atan@f+2,fabs@d+2
  6443  004954  C0C2  F0B2         	movff	atan@f+3,fabs@d+3
  6444  004958  ECBF  F031         	call	_fabs	;wreg free
  6445  00495C  C0AF  F0D0         	movff	?_fabs,atan@val
  6446  004960  C0B0  F0D1         	movff	?_fabs+1,atan@val+1
  6447  004964  C0B1  F0D2         	movff	?_fabs+2,atan@val+2
  6448  004968  C0B2  F0D3         	movff	?_fabs+3,atan@val+3
  6449  00496C  0100               	movlb	0	; () banked
  6450  00496E  51D0               	movf	atan@val& (0+255),w,b
  6451  004970  0100               	movlb	0	; () banked
  6452  004972  11D1               	iorwf	(atan@val+1)& (0+255),w,b
  6453  004974  0100               	movlb	0	; () banked
  6454  004976  11D2               	iorwf	(atan@val+2)& (0+255),w,b
  6455  004978  0100               	movlb	0	; () banked
  6456  00497A  11D3               	iorwf	(atan@val+3)& (0+255),w,b
  6457  00497C  A4D8               	btfss	status,2,c
  6458  00497E  D00A               	goto	l6567
  6459                           
  6460                           ; BSR set to: 0
  6461  004980  0E00               	movlw	0
  6462  004982  0100               	movlb	0	; () banked
  6463  004984  6FBF               	movwf	?_atan& (0+255),b
  6464  004986  0E00               	movlw	0
  6465  004988  6FC0               	movwf	(?_atan+1)& (0+255),b
  6466  00498A  0E00               	movlw	0
  6467  00498C  6FC1               	movwf	(?_atan+2)& (0+255),b
  6468  00498E  0E00               	movlw	0
  6469  004990  6FC2               	movwf	(?_atan+3)& (0+255),b
  6470                           
  6471                           ; BSR set to: 0
  6472  004992  0012               	return	
  6473  004994                     l6567:
  6474                           
  6475                           ; BSR set to: 0
  6476  004994  0E00               	movlw	0
  6477  004996  0100               	movlb	0	; () banked
  6478  004998  6FB3               	movwf	___flge@ff1& (0+255),b
  6479  00499A  0E00               	movlw	0
  6480  00499C  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  6481  00499E  0E80               	movlw	128
  6482  0049A0  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  6483  0049A2  0E3F               	movlw	63
  6484  0049A4  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  6485  0049A6  C0D0  F0B7         	movff	atan@val,___flge@ff2
  6486  0049AA  C0D1  F0B8         	movff	atan@val+1,___flge@ff2+1
  6487  0049AE  C0D2  F0B9         	movff	atan@val+2,___flge@ff2+2
  6488  0049B2  C0D3  F0BA         	movff	atan@val+3,___flge@ff2+3
  6489  0049B6  EC2A  F02E         	call	___flge	;wreg free
  6490  0049BA  0100               	movlb	0	; () banked
  6491  0049BC  B0D8               	btfsc	status,0,c
  6492  0049BE  D002               	goto	u8180
  6493  0049C0  0E01               	movlw	1
  6494  0049C2  D001               	goto	u8190
  6495  0049C4                     u8180:
  6496  0049C4  0E00               	movlw	0
  6497  0049C6                     u8190:
  6498  0049C6  0100               	movlb	0	; () banked
  6499  0049C8  6FCB               	movwf	atan@recip& (0+255),b
  6500  0049CA  0100               	movlb	0	; () banked
  6501  0049CC  51CB               	movf	atan@recip& (0+255),w,b
  6502  0049CE  B4D8               	btfsc	status,2,c
  6503  0049D0  D01B               	goto	l1024
  6504                           
  6505                           ; BSR set to: 0
  6506  0049D2  0E00               	movlw	0
  6507  0049D4  0100               	movlb	0	; () banked
  6508  0049D6  6F90               	movwf	___fldiv@f1& (0+255),b
  6509  0049D8  0E00               	movlw	0
  6510  0049DA  6F91               	movwf	(___fldiv@f1+1)& (0+255),b
  6511  0049DC  0E80               	movlw	128
  6512  0049DE  6F92               	movwf	(___fldiv@f1+2)& (0+255),b
  6513  0049E0  0E3F               	movlw	63
  6514  0049E2  6F93               	movwf	(___fldiv@f1+3)& (0+255),b
  6515  0049E4  C0D0  F094         	movff	atan@val,___fldiv@f2
  6516  0049E8  C0D1  F095         	movff	atan@val+1,___fldiv@f2+1
  6517  0049EC  C0D2  F096         	movff	atan@val+2,___fldiv@f2+2
  6518  0049F0  C0D3  F097         	movff	atan@val+3,___fldiv@f2+3
  6519  0049F4  EC5D  F02B         	call	___fldiv	;wreg free
  6520  0049F8  C090  F0D0         	movff	?___fldiv,atan@val
  6521  0049FC  C091  F0D1         	movff	?___fldiv+1,atan@val+1
  6522  004A00  C092  F0D2         	movff	?___fldiv+2,atan@val+2
  6523  004A04  C093  F0D3         	movff	?___fldiv+3,atan@val+3
  6524  004A08                     l1024:
  6525  004A08  C0D0  F081         	movff	atan@val,___flmul@f1
  6526  004A0C  C0D1  F082         	movff	atan@val+1,___flmul@f1+1
  6527  004A10  C0D2  F083         	movff	atan@val+2,___flmul@f1+2
  6528  004A14  C0D3  F084         	movff	atan@val+3,___flmul@f1+3
  6529  004A18  C0D0  F085         	movff	atan@val,___flmul@f2
  6530  004A1C  C0D1  F086         	movff	atan@val+1,___flmul@f2+1
  6531  004A20  C0D2  F087         	movff	atan@val+2,___flmul@f2+2
  6532  004A24  C0D3  F088         	movff	atan@val+3,___flmul@f2+3
  6533  004A28  ECAB  F02A         	call	___flmul	;wreg free
  6534  004A2C  C081  F0CC         	movff	?___flmul,atan@val_squared
  6535  004A30  C082  F0CD         	movff	?___flmul+1,atan@val_squared+1
  6536  004A34  C083  F0CE         	movff	?___flmul+2,atan@val_squared+2
  6537  004A38  C084  F0CF         	movff	?___flmul+3,atan@val_squared+3
  6538  004A3C  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  6539  004A40  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  6540  004A44  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  6541  004A48  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  6542  004A4C  0E19               	movlw	low atan@coeff_b
  6543  004A4E  0100               	movlb	0	; () banked
  6544  004A50  6FAF               	movwf	eval_poly@d& (0+255),b
  6545  004A52  0E0D               	movlw	high atan@coeff_b
  6546  004A54  0100               	movlb	0	; () banked
  6547  004A56  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  6548  004A58  0E00               	movlw	0
  6549  004A5A  0100               	movlb	0	; () banked
  6550  004A5C  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  6551  004A5E  0E04               	movlw	4
  6552  004A60  6FB1               	movwf	eval_poly@n& (0+255),b
  6553  004A62  EC16  F02D         	call	_eval_poly	;wreg free
  6554  004A66  C0AB  F0C3         	movff	?_eval_poly,atan@y
  6555  004A6A  C0AC  F0C4         	movff	?_eval_poly+1,atan@y+1
  6556  004A6E  C0AD  F0C5         	movff	?_eval_poly+2,atan@y+2
  6557  004A72  C0AE  F0C6         	movff	?_eval_poly+3,atan@y+3
  6558  004A76  C0CC  F0AB         	movff	atan@val_squared,eval_poly@x
  6559  004A7A  C0CD  F0AC         	movff	atan@val_squared+1,eval_poly@x+1
  6560  004A7E  C0CE  F0AD         	movff	atan@val_squared+2,eval_poly@x+2
  6561  004A82  C0CF  F0AE         	movff	atan@val_squared+3,eval_poly@x+3
  6562  004A86  0E01               	movlw	low atan@coeff_a
  6563  004A88  0100               	movlb	0	; () banked
  6564  004A8A  6FAF               	movwf	eval_poly@d& (0+255),b
  6565  004A8C  0E0D               	movlw	high atan@coeff_a
  6566  004A8E  0100               	movlb	0	; () banked
  6567  004A90  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  6568  004A92  0E00               	movlw	0
  6569  004A94  0100               	movlb	0	; () banked
  6570  004A96  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  6571  004A98  0E05               	movlw	5
  6572  004A9A  6FB1               	movwf	eval_poly@n& (0+255),b
  6573  004A9C  EC16  F02D         	call	_eval_poly	;wreg free
  6574  004AA0  C0AB  F0C7         	movff	?_eval_poly,atan@x
  6575  004AA4  C0AC  F0C8         	movff	?_eval_poly+1,atan@x+1
  6576  004AA8  C0AD  F0C9         	movff	?_eval_poly+2,atan@x+2
  6577  004AAC  C0AE  F0CA         	movff	?_eval_poly+3,atan@x+3
  6578  004AB0  C0D0  F081         	movff	atan@val,___flmul@f1
  6579  004AB4  C0D1  F082         	movff	atan@val+1,___flmul@f1+1
  6580  004AB8  C0D2  F083         	movff	atan@val+2,___flmul@f1+2
  6581  004ABC  C0D3  F084         	movff	atan@val+3,___flmul@f1+3
  6582  004AC0  C0C3  F094         	movff	atan@y,___fldiv@f2
  6583  004AC4  C0C4  F095         	movff	atan@y+1,___fldiv@f2+1
  6584  004AC8  C0C5  F096         	movff	atan@y+2,___fldiv@f2+2
  6585  004ACC  C0C6  F097         	movff	atan@y+3,___fldiv@f2+3
  6586  004AD0  C0C7  F090         	movff	atan@x,___fldiv@f1
  6587  004AD4  C0C8  F091         	movff	atan@x+1,___fldiv@f1+1
  6588  004AD8  C0C9  F092         	movff	atan@x+2,___fldiv@f1+2
  6589  004ADC  C0CA  F093         	movff	atan@x+3,___fldiv@f1+3
  6590  004AE0  EC5D  F02B         	call	___fldiv	;wreg free
  6591  004AE4  C090  F085         	movff	?___fldiv,___flmul@f2
  6592  004AE8  C091  F086         	movff	?___fldiv+1,___flmul@f2+1
  6593  004AEC  C092  F087         	movff	?___fldiv+2,___flmul@f2+2
  6594  004AF0  C093  F088         	movff	?___fldiv+3,___flmul@f2+3
  6595  004AF4  ECAB  F02A         	call	___flmul	;wreg free
  6596  004AF8  C081  F0D0         	movff	?___flmul,atan@val
  6597  004AFC  C082  F0D1         	movff	?___flmul+1,atan@val+1
  6598  004B00  C083  F0D2         	movff	?___flmul+2,atan@val+2
  6599  004B04  C084  F0D3         	movff	?___flmul+3,atan@val+3
  6600  004B08  0100               	movlb	0	; () banked
  6601  004B0A  51CB               	movf	atan@recip& (0+255),w,b
  6602  004B0C  0100               	movlb	0	; () banked
  6603  004B0E  B4D8               	btfsc	status,2,c
  6604  004B10  D026               	goto	l6579
  6605                           
  6606                           ; BSR set to: 0
  6607  004B12  C0D0  F0AB         	movff	atan@val,___flneg@f1
  6608  004B16  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  6609  004B1A  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  6610  004B1E  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  6611  004B22  ECDE  F031         	call	___flneg	;wreg free
  6612  004B26  C0AB  F09F         	movff	?___flneg,___fladd@f1
  6613  004B2A  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  6614  004B2E  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  6615  004B32  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  6616  004B36  0EDB               	movlw	219
  6617  004B38  0100               	movlb	0	; () banked
  6618  004B3A  6FA3               	movwf	___fladd@f2& (0+255),b
  6619  004B3C  0E0F               	movlw	15
  6620  004B3E  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  6621  004B40  0EC9               	movlw	201
  6622  004B42  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  6623  004B44  0E3F               	movlw	63
  6624  004B46  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  6625  004B48  EC6E  F023         	call	___fladd	;wreg free
  6626  004B4C  C09F  F0D0         	movff	?___fladd,atan@val
  6627  004B50  C0A0  F0D1         	movff	?___fladd+1,atan@val+1
  6628  004B54  C0A1  F0D2         	movff	?___fladd+2,atan@val+2
  6629  004B58  C0A2  F0D3         	movff	?___fladd+3,atan@val+3
  6630  004B5C  D000               	goto	l6579
  6631  004B5E                     l6579:
  6632  004B5E  0100               	movlb	0	; () banked
  6633  004B60  BFC2               	btfsc	(atan@f+3)& (0+255),7,b
  6634  004B62  D009               	goto	l6583
  6635                           
  6636                           ; BSR set to: 0
  6637  004B64  C0D0  F0BF         	movff	atan@val,?_atan
  6638  004B68  C0D1  F0C0         	movff	atan@val+1,?_atan+1
  6639  004B6C  C0D2  F0C1         	movff	atan@val+2,?_atan+2
  6640  004B70  C0D3  F0C2         	movff	atan@val+3,?_atan+3
  6641  004B74  0012               	return	
  6642  004B76                     l6583:
  6643                           
  6644                           ; BSR set to: 0
  6645  004B76  C0D0  F0AB         	movff	atan@val,___flneg@f1
  6646  004B7A  C0D1  F0AC         	movff	atan@val+1,___flneg@f1+1
  6647  004B7E  C0D2  F0AD         	movff	atan@val+2,___flneg@f1+2
  6648  004B82  C0D3  F0AE         	movff	atan@val+3,___flneg@f1+3
  6649  004B86  ECDE  F031         	call	___flneg	;wreg free
  6650  004B8A  C0AB  F0BF         	movff	?___flneg,?_atan
  6651  004B8E  C0AC  F0C0         	movff	?___flneg+1,?_atan+1
  6652  004B92  C0AD  F0C1         	movff	?___flneg+2,?_atan+2
  6653  004B96  C0AE  F0C2         	movff	?___flneg+3,?_atan+3
  6654  004B9A  0012               	return	
  6655  004B9C  0012               	return		;funcret
  6656  004B9E                     __end_of_atan:
  6657                           	opt stack 0
  6658                           tblptru	equ	0xFF8
  6659                           tblptrh	equ	0xFF7
  6660                           tblptrl	equ	0xFF6
  6661                           tablat	equ	0xFF5
  6662                           postinc0	equ	0xFEE
  6663                           wreg	equ	0xFE8
  6664                           indf2	equ	0xFDF
  6665                           postinc2	equ	0xFDE
  6666                           postdec2	equ	0xFDD
  6667                           fsr2h	equ	0xFDA
  6668                           fsr2l	equ	0xFD9
  6669                           status	equ	0xFD8
  6670                           
  6671 ;; *************** function _fabs *****************
  6672 ;; Defined at:
  6673 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fabs.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;  d               4   79[BANK0 ] unsigned char 
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;		None
  6678 ;; Return value:  Size  Location     Type
  6679 ;;                  4   79[BANK0 ] unsigned char 
  6680 ;; Registers used:
  6681 ;;		wreg, status,2, status,0, cstack
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6687 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;Total ram usage:        4 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    6
  6694 ;; This function calls:
  6695 ;;		___flneg
  6696 ;; This function is called by:
  6697 ;;		_asin
  6698 ;;		_atan
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           	psect	text11
  6703  00637E                     __ptext11:
  6704                           	opt stack 0
  6705  00637E                     _fabs:
  6706                           	opt stack 21
  6707                           
  6708                           ;incstack = 0
  6709  00637E  0100               	movlb	0	; () banked
  6710  006380  AFB2               	btfss	(fabs@d+3)& (0+255),7,b
  6711  006382  D013               	goto	l1141
  6712                           
  6713                           ; BSR set to: 0
  6714  006384  C0AF  F0AB         	movff	fabs@d,___flneg@f1
  6715  006388  C0B0  F0AC         	movff	fabs@d+1,___flneg@f1+1
  6716  00638C  C0B1  F0AD         	movff	fabs@d+2,___flneg@f1+2
  6717  006390  C0B2  F0AE         	movff	fabs@d+3,___flneg@f1+3
  6718  006394  ECDE  F031         	call	___flneg	;wreg free
  6719  006398  C0AB  F0AF         	movff	?___flneg,?_fabs
  6720  00639C  C0AC  F0B0         	movff	?___flneg+1,?_fabs+1
  6721  0063A0  C0AD  F0B1         	movff	?___flneg+2,?_fabs+2
  6722  0063A4  C0AE  F0B2         	movff	?___flneg+3,?_fabs+3
  6723  0063A8  0012               	return	
  6724  0063AA                     l1141:
  6725                           
  6726                           ; BSR set to: 0
  6727  0063AA  C0AF  F0AF         	movff	fabs@d,?_fabs
  6728  0063AE  C0B0  F0B0         	movff	fabs@d+1,?_fabs+1
  6729  0063B2  C0B1  F0B1         	movff	fabs@d+2,?_fabs+2
  6730  0063B6  C0B2  F0B2         	movff	fabs@d+3,?_fabs+3
  6731  0063BA  0012               	return		;funcret
  6732  0063BC                     __end_of_fabs:
  6733                           	opt stack 0
  6734                           tblptru	equ	0xFF8
  6735                           tblptrh	equ	0xFF7
  6736                           tblptrl	equ	0xFF6
  6737                           tablat	equ	0xFF5
  6738                           postinc0	equ	0xFEE
  6739                           wreg	equ	0xFE8
  6740                           indf2	equ	0xFDF
  6741                           postinc2	equ	0xFDE
  6742                           postdec2	equ	0xFDD
  6743                           fsr2h	equ	0xFDA
  6744                           fsr2l	equ	0xFD9
  6745                           status	equ	0xFD8
  6746                           
  6747 ;; *************** function _abs *****************
  6748 ;; Defined at:
  6749 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\abs.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;  a               2   23[BANK0 ] int 
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;		None
  6754 ;; Return value:  Size  Location     Type
  6755 ;;                  2   23[BANK0 ] int 
  6756 ;; Registers used:
  6757 ;;		wreg, status,2, status,0
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6763 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;Total ram usage:        4 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    5
  6770 ;; This function calls:
  6771 ;;		Nothing
  6772 ;; This function is called by:
  6773 ;;		_park_search
  6774 ;;		_parallelo
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           	psect	text12
  6779  006502                     __ptext12:
  6780                           	opt stack 0
  6781  006502                     _abs:
  6782                           	opt stack 23
  6783                           
  6784                           ;incstack = 0
  6785  006502  0100               	movlb	0	; () banked
  6786  006504  AF78               	btfss	(abs@a+1)& (0+255),7,b
  6787  006506  D00E               	goto	l898
  6788                           
  6789                           ; BSR set to: 0
  6790  006508  C077  F079         	movff	abs@a,??_abs
  6791  00650C  C078  F07A         	movff	abs@a+1,??_abs+1
  6792  006510  0100               	movlb	0	; () banked
  6793  006512  1F79               	comf	??_abs& (0+255),f,b
  6794  006514  1F7A               	comf	(??_abs+1)& (0+255),f,b
  6795  006516  4B79               	infsnz	??_abs& (0+255),f,b
  6796  006518  2B7A               	incf	(??_abs+1)& (0+255),f,b
  6797  00651A  C079  F077         	movff	??_abs,?_abs
  6798  00651E  C07A  F078         	movff	??_abs+1,?_abs+1
  6799  006522  0012               	return	
  6800  006524                     l898:
  6801                           
  6802                           ; BSR set to: 0
  6803  006524  C077  F077         	movff	abs@a,?_abs
  6804  006528  C078  F078         	movff	abs@a+1,?_abs+1
  6805                           
  6806                           ; BSR set to: 0
  6807  00652C  0012               	return		;funcret
  6808  00652E                     __end_of_abs:
  6809                           	opt stack 0
  6810                           tblptru	equ	0xFF8
  6811                           tblptrh	equ	0xFF7
  6812                           tblptrl	equ	0xFF6
  6813                           tablat	equ	0xFF5
  6814                           postinc0	equ	0xFEE
  6815                           wreg	equ	0xFE8
  6816                           indf2	equ	0xFDF
  6817                           postinc2	equ	0xFDE
  6818                           postdec2	equ	0xFDD
  6819                           fsr2h	equ	0xFDA
  6820                           fsr2l	equ	0xFD9
  6821                           status	equ	0xFD8
  6822                           
  6823 ;; *************** function ___awtofl *****************
  6824 ;; Defined at:
  6825 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  6826 ;; Parameters:    Size  Location     Type
  6827 ;;  c               2   33[BANK0 ] int 
  6828 ;; Auto vars:     Size  Location     Type
  6829 ;;  f1              4    0        int 
  6830 ;;  sign            1   37[BANK0 ] unsigned char 
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  4   33[BANK0 ] unsigned char 
  6833 ;; Registers used:
  6834 ;;		wreg, status,2, status,0, cstack
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6840 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6843 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6844 ;;Total ram usage:        5 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; Hardware stack levels required when called:    6
  6847 ;; This function calls:
  6848 ;;		___flpack
  6849 ;; This function is called by:
  6850 ;;		_park_search
  6851 ;;		_parallelo
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           	psect	text13
  6856  006332                     __ptext13:
  6857                           	opt stack 0
  6858  006332                     ___awtofl:
  6859                           	opt stack 22
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;incstack = 0
  6863  006332  0E00               	movlw	0
  6864  006334  0100               	movlb	0	; () banked
  6865  006336  6F85               	movwf	___awtofl@sign& (0+255),b
  6866                           
  6867                           ; BSR set to: 0
  6868  006338  0100               	movlb	0	; () banked
  6869  00633A  AF82               	btfss	(___awtofl@c+1)& (0+255),7,b
  6870  00633C  D008               	goto	l6719
  6871                           
  6872                           ; BSR set to: 0
  6873  00633E  0100               	movlb	0	; () banked
  6874  006340  6D81               	negf	___awtofl@c& (0+255),b
  6875  006342  1F82               	comf	(___awtofl@c+1)& (0+255),f,b
  6876  006344  B0D8               	btfsc	status,0,c
  6877  006346  2B82               	incf	(___awtofl@c+1)& (0+255),f,b
  6878  006348  0100               	movlb	0	; () banked
  6879  00634A  2B85               	incf	___awtofl@sign& (0+255),f,b
  6880  00634C  D000               	goto	l6719
  6881  00634E                     l6719:
  6882                           
  6883                           ; BSR set to: 0
  6884  00634E  C081  F077         	movff	___awtofl@c,___flpack@arg
  6885  006352  C082  F078         	movff	___awtofl@c+1,___flpack@arg+1
  6886  006356  0100               	movlb	0	; () banked
  6887  006358  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  6888  00635A  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  6889  00635C  0E96               	movlw	150
  6890  00635E  0100               	movlb	0	; () banked
  6891  006360  6F7B               	movwf	___flpack@exp& (0+255),b
  6892  006362  C085  F07C         	movff	___awtofl@sign,___flpack@sign
  6893  006366  ECEB  F029         	call	___flpack	;wreg free
  6894  00636A  C077  F081         	movff	?___flpack,?___awtofl
  6895  00636E  C078  F082         	movff	?___flpack+1,?___awtofl+1
  6896  006372  C079  F083         	movff	?___flpack+2,?___awtofl+2
  6897  006376  C07A  F084         	movff	?___flpack+3,?___awtofl+3
  6898  00637A  0012               	return	
  6899  00637C  0012               	return		;funcret
  6900  00637E                     __end_of___awtofl:
  6901                           	opt stack 0
  6902                           tblptru	equ	0xFF8
  6903                           tblptrh	equ	0xFF7
  6904                           tblptrl	equ	0xFF6
  6905                           tablat	equ	0xFF5
  6906                           postinc0	equ	0xFEE
  6907                           wreg	equ	0xFE8
  6908                           indf2	equ	0xFDF
  6909                           postinc2	equ	0xFDE
  6910                           postdec2	equ	0xFDD
  6911                           fsr2h	equ	0xFDA
  6912                           fsr2l	equ	0xFD9
  6913                           status	equ	0xFD8
  6914                           
  6915 ;; *************** function _delay_s *****************
  6916 ;; Defined at:
  6917 ;;		line 102 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  6918 ;; Parameters:    Size  Location     Type
  6919 ;;  value_s         1    wreg     unsigned char 
  6920 ;; Auto vars:     Size  Location     Type
  6921 ;;  value_s         1   31[BANK0 ] unsigned char 
  6922 ;;  repeat_loop     1   32[BANK0 ] unsigned char 
  6923 ;; Return value:  Size  Location     Type
  6924 ;;		None               void
  6925 ;; Registers used:
  6926 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6933 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6936 ;;Total ram usage:        2 bytes
  6937 ;; Hardware stack levels used:    1
  6938 ;; Hardware stack levels required when called:    7
  6939 ;; This function calls:
  6940 ;;		_delay_ms
  6941 ;; This function is called by:
  6942 ;;		_park_routine
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           	psect	text14
  6947  0064D4                     __ptext14:
  6948                           	opt stack 0
  6949  0064D4                     _delay_s:
  6950                           	opt stack 22
  6951                           
  6952                           ;incstack = 0
  6953                           ;delay_s@value_s stored from wreg
  6954  0064D4  0100               	movlb	0	; () banked
  6955  0064D6  6F7F               	movwf	delay_s@value_s& (0+255),b
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;src\delay.c: 104: unsigned char repeat_loop;
  6959                           ;src\delay.c: 106: for (repeat_loop = 0; repeat_loop < value_s; repeat_loop++)
  6960  0064D8  0E00               	movlw	0
  6961  0064DA  0100               	movlb	0	; () banked
  6962  0064DC  6F80               	movwf	delay_s@repeat_loop& (0+255),b
  6963  0064DE  D00A               	goto	l6781
  6964  0064E0                     l6777:
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;src\delay.c: 107: delay_ms (1000);
  6968  0064E0  0E03               	movlw	3
  6969  0064E2  0100               	movlb	0	; () banked
  6970  0064E4  6F7E               	movwf	(delay_ms@value_ms+1)& (0+255),b
  6971  0064E6  0EE8               	movlw	232
  6972  0064E8  6F7D               	movwf	delay_ms@value_ms& (0+255),b
  6973  0064EA  ECFC  F031         	call	_delay_ms	;wreg free
  6974  0064EE  0100               	movlb	0	; () banked
  6975  0064F0  2B80               	incf	delay_s@repeat_loop& (0+255),f,b
  6976  0064F2  D000               	goto	l6781
  6977  0064F4                     l6781:
  6978                           
  6979                           ; BSR set to: 0
  6980  0064F4  0100               	movlb	0	; () banked
  6981  0064F6  517F               	movf	delay_s@value_s& (0+255),w,b
  6982  0064F8  0100               	movlb	0	; () banked
  6983  0064FA  5D80               	subwf	delay_s@repeat_loop& (0+255),w,b
  6984  0064FC  A0D8               	btfss	status,0,c
  6985  0064FE  D7F0               	goto	l6777
  6986                           
  6987                           ; BSR set to: 0
  6988                           
  6989                           ; BSR set to: 0
  6990  006500  0012               	return		;funcret
  6991  006502                     __end_of_delay_s:
  6992                           	opt stack 0
  6993                           tblptru	equ	0xFF8
  6994                           tblptrh	equ	0xFF7
  6995                           tblptrl	equ	0xFF6
  6996                           tablat	equ	0xFF5
  6997                           postinc0	equ	0xFEE
  6998                           wreg	equ	0xFE8
  6999                           indf2	equ	0xFDF
  7000                           postinc2	equ	0xFDE
  7001                           postdec2	equ	0xFDD
  7002                           fsr2h	equ	0xFDA
  7003                           fsr2l	equ	0xFD9
  7004                           status	equ	0xFD8
  7005                           
  7006 ;; *************** function _delay_ms *****************
  7007 ;; Defined at:
  7008 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;  value_ms        2   29[BANK0 ] unsigned int 
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;		None
  7013 ;; Return value:  Size  Location     Type
  7014 ;;		None               void
  7015 ;; Registers used:
  7016 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7022 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7025 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7026 ;;Total ram usage:        2 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; Hardware stack levels required when called:    6
  7029 ;; This function calls:
  7030 ;;		___wmul
  7031 ;; This function is called by:
  7032 ;;		_delay_s
  7033 ;;		_main
  7034 ;;		_park_routine
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           	psect	text15
  7039  0063F8                     __ptext15:
  7040                           	opt stack 0
  7041  0063F8                     _delay_ms:
  7042                           	opt stack 22
  7043                           
  7044                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;incstack = 0
  7048  0063F8  C0E8  F077         	movff	_delay_quartz_frequency_value,___wmul@multiplier	;volatile
  7049  0063FC  0100               	movlb	0	; () banked
  7050  0063FE  6B78               	clrf	(___wmul@multiplier+1)& (0+255),b
  7051  006400  C07D  F079         	movff	delay_ms@value_ms,___wmul@multiplicand
  7052  006404  C07E  F07A         	movff	delay_ms@value_ms+1,___wmul@multiplicand+1
  7053  006408  EC19  F032         	call	___wmul	;wreg free
  7054  00640C  C077  F0E1         	movff	?___wmul,_clock_counter_reference	;volatile
  7055  006410  C078  F0E2         	movff	?___wmul+1,_clock_counter_reference+1	;volatile
  7056                           
  7057                           ;src\delay.c: 75: while (clock_counter_reference) {
  7058  006414  D007               	goto	l567
  7059  006416                     l6627:
  7060                           
  7061                           ;src\delay.c: 85: _delay(240);
  7062  006416  0E50               	movlw	80
  7063  006418                     u8977:
  7064  006418  2EE8               	decfsz	wreg,f,c
  7065  00641A  D7FE               	goto	u8977
  7066                           
  7067                           ;src\delay.c: 88: clock_counter_reference--;
  7068  00641C  0100               	movlb	0	; () banked
  7069  00641E  07E1               	decf	_clock_counter_reference& (0+255),f,b	;volatile
  7070  006420  A0D8               	btfss	status,0,c
  7071  006422  07E2               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
  7072  006424                     l567:
  7073  006424  0100               	movlb	0	; () banked
  7074  006426  51E1               	movf	_clock_counter_reference& (0+255),w,b	;volatile
  7075  006428  0100               	movlb	0	; () banked
  7076  00642A  11E2               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
  7077  00642C  A4D8               	btfss	status,2,c
  7078  00642E  D7F3               	goto	l6627
  7079                           
  7080                           ; BSR set to: 0
  7081                           
  7082                           ; BSR set to: 0
  7083  006430  0012               	return		;funcret
  7084  006432                     __end_of_delay_ms:
  7085                           	opt stack 0
  7086                           tblptru	equ	0xFF8
  7087                           tblptrh	equ	0xFF7
  7088                           tblptrl	equ	0xFF6
  7089                           tablat	equ	0xFF5
  7090                           postinc0	equ	0xFEE
  7091                           wreg	equ	0xFE8
  7092                           indf2	equ	0xFDF
  7093                           postinc2	equ	0xFDE
  7094                           postdec2	equ	0xFDD
  7095                           fsr2h	equ	0xFDA
  7096                           fsr2l	equ	0xFD9
  7097                           status	equ	0xFD8
  7098                           
  7099 ;; *************** function ___wmul *****************
  7100 ;; Defined at:
  7101 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  multiplier      2   23[BANK0 ] unsigned int 
  7104 ;;  multiplicand    2   25[BANK0 ] unsigned int 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  product         2   27[BANK0 ] unsigned int 
  7107 ;; Return value:  Size  Location     Type
  7108 ;;                  2   23[BANK0 ] unsigned int 
  7109 ;; Registers used:
  7110 ;;		wreg, status,2, status,0, prodl, prodh
  7111 ;; Tracked objects:
  7112 ;;		On entry : 0/0
  7113 ;;		On exit  : 0/0
  7114 ;;		Unchanged: 0/0
  7115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7116 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7117 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7119 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7120 ;;Total ram usage:        6 bytes
  7121 ;; Hardware stack levels used:    1
  7122 ;; Hardware stack levels required when called:    5
  7123 ;; This function calls:
  7124 ;;		Nothing
  7125 ;; This function is called by:
  7126 ;;		_delay_ms
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           	psect	text16
  7131  006432                     __ptext16:
  7132                           	opt stack 0
  7133  006432                     ___wmul:
  7134                           	opt stack 22
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;incstack = 0
  7138  006432  0100               	movlb	0	; () banked
  7139  006434  5177               	movf	___wmul@multiplier& (0+255),w,b
  7140  006436  0100               	movlb	0	; () banked
  7141  006438  0379               	mulwf	___wmul@multiplicand& (0+255),b
  7142  00643A  CFF3 F07B          	movff	prodl,___wmul@product
  7143  00643E  CFF4 F07C          	movff	prodh,___wmul@product+1
  7144  006442  0100               	movlb	0	; () banked
  7145  006444  5177               	movf	___wmul@multiplier& (0+255),w,b
  7146  006446  0100               	movlb	0	; () banked
  7147  006448  037A               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7148  00644A  50F3               	movf	prodl,w,c
  7149  00644C  0100               	movlb	0	; () banked
  7150  00644E  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  7151  006450  0100               	movlb	0	; () banked
  7152  006452  5178               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7153  006454  0100               	movlb	0	; () banked
  7154  006456  0379               	mulwf	___wmul@multiplicand& (0+255),b
  7155  006458  50F3               	movf	prodl,w,c
  7156  00645A  0100               	movlb	0	; () banked
  7157  00645C  277C               	addwf	(___wmul@product+1)& (0+255),f,b
  7158                           
  7159                           ; BSR set to: 0
  7160  00645E  C07B  F077         	movff	___wmul@product,?___wmul
  7161  006462  C07C  F078         	movff	___wmul@product+1,?___wmul+1
  7162  006466  0012               	return	
  7163                           
  7164                           ; BSR set to: 0
  7165                           
  7166                           ; BSR set to: 0
  7167  006468  0012               	return		;funcret
  7168  00646A                     __end_of___wmul:
  7169                           	opt stack 0
  7170                           tblptru	equ	0xFF8
  7171                           tblptrh	equ	0xFF7
  7172                           tblptrl	equ	0xFF6
  7173                           tablat	equ	0xFF5
  7174                           prodh	equ	0xFF4
  7175                           prodl	equ	0xFF3
  7176                           postinc0	equ	0xFEE
  7177                           wreg	equ	0xFE8
  7178                           indf2	equ	0xFDF
  7179                           postinc2	equ	0xFDE
  7180                           postdec2	equ	0xFDD
  7181                           fsr2h	equ	0xFDA
  7182                           fsr2l	equ	0xFD9
  7183                           status	equ	0xFD8
  7184                           
  7185 ;; *************** function _cos *****************
  7186 ;; Defined at:
  7187 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\cos.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;  f               4   45[BANK1 ] unsigned int 
  7190 ;; Auto vars:     Size  Location     Type
  7191 ;;		None
  7192 ;; Return value:  Size  Location     Type
  7193 ;;                  4   45[BANK1 ] unsigned int 
  7194 ;; Registers used:
  7195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7196 ;; Tracked objects:
  7197 ;;		On entry : 0/0
  7198 ;;		On exit  : 0/0
  7199 ;;		Unchanged: 0/0
  7200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7201 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7202 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7204 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  7205 ;;Total ram usage:        8 bytes
  7206 ;; Hardware stack levels used:    1
  7207 ;; Hardware stack levels required when called:    9
  7208 ;; This function calls:
  7209 ;;		___fladd
  7210 ;;		___flge
  7211 ;;		_sin
  7212 ;; This function is called by:
  7213 ;;		_park_routine
  7214 ;;		_matematica
  7215 ;; This function uses a non-reentrant model
  7216 ;;
  7217                           
  7218                           	psect	text17
  7219  005D4C                     __ptext17:
  7220                           	opt stack 0
  7221  005D4C                     _cos:
  7222                           	opt stack 19
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;incstack = 0
  7226  005D4C  0EDB               	movlw	219
  7227  005D4E  0100               	movlb	0	; () banked
  7228  005D50  6FB3               	movwf	___flge@ff1& (0+255),b
  7229  005D52  0E0F               	movlw	15
  7230  005D54  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  7231  005D56  0E49               	movlw	73
  7232  005D58  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  7233  005D5A  0E40               	movlw	64
  7234  005D5C  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  7235  005D5E  C1B0  F0B7         	movff	cos@f,___flge@ff2
  7236  005D62  C1B1  F0B8         	movff	cos@f+1,___flge@ff2+1
  7237  005D66  C1B2  F0B9         	movff	cos@f+2,___flge@ff2+2
  7238  005D6A  C1B3  F0BA         	movff	cos@f+3,___flge@ff2+3
  7239  005D6E  EC2A  F02E         	call	___flge	;wreg free
  7240  005D72  0100               	movlb	0	; () banked
  7241  005D74  B0D8               	btfsc	status,0,c
  7242  005D76  D02E               	goto	l6707
  7243                           
  7244                           ; BSR set to: 0
  7245  005D78  C1B0  F09F         	movff	cos@f,___fladd@f1
  7246  005D7C  C1B1  F0A0         	movff	cos@f+1,___fladd@f1+1
  7247  005D80  C1B2  F0A1         	movff	cos@f+2,___fladd@f1+2
  7248  005D84  C1B3  F0A2         	movff	cos@f+3,___fladd@f1+3
  7249  005D88  0EE4               	movlw	228
  7250  005D8A  0100               	movlb	0	; () banked
  7251  005D8C  6FA3               	movwf	___fladd@f2& (0+255),b
  7252  005D8E  0ECB               	movlw	203
  7253  005D90  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  7254  005D92  0E96               	movlw	150
  7255  005D94  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  7256  005D96  0EC0               	movlw	192
  7257  005D98  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  7258  005D9A  EC6E  F023         	call	___fladd	;wreg free
  7259  005D9E  C09F  F1B4         	movff	?___fladd,_cos$3683
  7260  005DA2  C0A0  F1B5         	movff	?___fladd+1,_cos$3683+1
  7261  005DA6  C0A1  F1B6         	movff	?___fladd+2,_cos$3683+2
  7262  005DAA  C0A2  F1B7         	movff	?___fladd+3,_cos$3683+3
  7263  005DAE  C1B4  F0D1         	movff	_cos$3683,sin@f
  7264  005DB2  C1B5  F0D2         	movff	_cos$3683+1,sin@f+1
  7265  005DB6  C1B6  F0D3         	movff	_cos$3683+2,sin@f+2
  7266  005DBA  C1B7  F0D4         	movff	_cos$3683+3,sin@f+3
  7267  005DBE  ECE0  F021         	call	_sin	;wreg free
  7268  005DC2  C0D1  F1B0         	movff	?_sin,?_cos
  7269  005DC6  C0D2  F1B1         	movff	?_sin+1,?_cos+1
  7270  005DCA  C0D3  F1B2         	movff	?_sin+2,?_cos+2
  7271  005DCE  C0D4  F1B3         	movff	?_sin+3,?_cos+3
  7272  005DD2  0012               	return	
  7273  005DD4                     l6707:
  7274  005DD4  C1B0  F09F         	movff	cos@f,___fladd@f1
  7275  005DD8  C1B1  F0A0         	movff	cos@f+1,___fladd@f1+1
  7276  005DDC  C1B2  F0A1         	movff	cos@f+2,___fladd@f1+2
  7277  005DE0  C1B3  F0A2         	movff	cos@f+3,___fladd@f1+3
  7278  005DE4  0EDB               	movlw	219
  7279  005DE6  0100               	movlb	0	; () banked
  7280  005DE8  6FA3               	movwf	___fladd@f2& (0+255),b
  7281  005DEA  0E0F               	movlw	15
  7282  005DEC  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  7283  005DEE  0EC9               	movlw	201
  7284  005DF0  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  7285  005DF2  0E3F               	movlw	63
  7286  005DF4  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  7287  005DF6  EC6E  F023         	call	___fladd	;wreg free
  7288  005DFA  C09F  F1B4         	movff	?___fladd,_cos$3683
  7289  005DFE  C0A0  F1B5         	movff	?___fladd+1,_cos$3683+1
  7290  005E02  C0A1  F1B6         	movff	?___fladd+2,_cos$3683+2
  7291  005E06  C0A2  F1B7         	movff	?___fladd+3,_cos$3683+3
  7292  005E0A  C1B4  F0D1         	movff	_cos$3683,sin@f
  7293  005E0E  C1B5  F0D2         	movff	_cos$3683+1,sin@f+1
  7294  005E12  C1B6  F0D3         	movff	_cos$3683+2,sin@f+2
  7295  005E16  C1B7  F0D4         	movff	_cos$3683+3,sin@f+3
  7296  005E1A  ECE0  F021         	call	_sin	;wreg free
  7297  005E1E  C0D1  F1B0         	movff	?_sin,?_cos
  7298  005E22  C0D2  F1B1         	movff	?_sin+1,?_cos+1
  7299  005E26  C0D3  F1B2         	movff	?_sin+2,?_cos+2
  7300  005E2A  C0D4  F1B3         	movff	?_sin+3,?_cos+3
  7301  005E2E  0012               	return	
  7302  005E30  0012               	return		;funcret
  7303  005E32                     __end_of_cos:
  7304                           	opt stack 0
  7305                           tblptru	equ	0xFF8
  7306                           tblptrh	equ	0xFF7
  7307                           tblptrl	equ	0xFF6
  7308                           tablat	equ	0xFF5
  7309                           prodh	equ	0xFF4
  7310                           prodl	equ	0xFF3
  7311                           postinc0	equ	0xFEE
  7312                           wreg	equ	0xFE8
  7313                           indf2	equ	0xFDF
  7314                           postinc2	equ	0xFDE
  7315                           postdec2	equ	0xFDD
  7316                           fsr2h	equ	0xFDA
  7317                           fsr2l	equ	0xFD9
  7318                           status	equ	0xFD8
  7319                           
  7320 ;; *************** function _sin *****************
  7321 ;; Defined at:
  7322 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sin.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;  f               4  113[BANK0 ] unsigned int 
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;  x2              4    8[BANK1 ] unsigned int 
  7327 ;;  y               4    0[BANK1 ] unsigned int 
  7328 ;;  sgn             1   12[BANK1 ] unsigned char 
  7329 ;; Return value:  Size  Location     Type
  7330 ;;                  4  113[BANK0 ] unsigned char 
  7331 ;; Registers used:
  7332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7333 ;; Tracked objects:
  7334 ;;		On entry : 0/0
  7335 ;;		On exit  : 0/0
  7336 ;;		Unchanged: 0/0
  7337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7338 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  7340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7341 ;;      Totals:         0       4      13       0       0       0       0       0       0       0       0       0       
      +0       0
  7342 ;;Total ram usage:       17 bytes
  7343 ;; Hardware stack levels used:    1
  7344 ;; Hardware stack levels required when called:    8
  7345 ;; This function calls:
  7346 ;;		___fladd
  7347 ;;		___fldiv
  7348 ;;		___flge
  7349 ;;		___flmul
  7350 ;;		___flneg
  7351 ;;		___flsub
  7352 ;;		_eval_poly
  7353 ;;		_floor
  7354 ;; This function is called by:
  7355 ;;		_cos
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           	psect	text18
  7360  0043C0                     __ptext18:
  7361                           	opt stack 0
  7362  0043C0                     _sin:
  7363                           	opt stack 19
  7364                           
  7365                           ;incstack = 0
  7366  0043C0  0E00               	movlw	0
  7367  0043C2  0101               	movlb	1	; () banked
  7368  0043C4  6F8F               	movwf	sin@sgn& (0+255),b
  7369                           
  7370                           ; BSR set to: 1
  7371  0043C6  0100               	movlb	0	; () banked
  7372  0043C8  AFD4               	btfss	(sin@f+3)& (0+255),7,b
  7373  0043CA  D016               	goto	l6595
  7374                           
  7375                           ; BSR set to: 0
  7376  0043CC  C0D1  F0AB         	movff	sin@f,___flneg@f1
  7377  0043D0  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  7378  0043D4  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  7379  0043D8  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  7380  0043DC  ECDE  F031         	call	___flneg	;wreg free
  7381  0043E0  C0AB  F0D1         	movff	?___flneg,sin@f
  7382  0043E4  C0AC  F0D2         	movff	?___flneg+1,sin@f+1
  7383  0043E8  C0AD  F0D3         	movff	?___flneg+2,sin@f+2
  7384  0043EC  C0AE  F0D4         	movff	?___flneg+3,sin@f+3
  7385  0043F0  0E01               	movlw	1
  7386  0043F2  0101               	movlb	1	; () banked
  7387  0043F4  6F8F               	movwf	sin@sgn& (0+255),b
  7388  0043F6  D000               	goto	l6595
  7389  0043F8                     l6595:
  7390  0043F8  C0D1  F081         	movff	sin@f,___flmul@f1
  7391  0043FC  C0D2  F082         	movff	sin@f+1,___flmul@f1+1
  7392  004400  C0D3  F083         	movff	sin@f+2,___flmul@f1+2
  7393  004404  C0D4  F084         	movff	sin@f+3,___flmul@f1+3
  7394  004408  0E83               	movlw	131
  7395  00440A  0100               	movlb	0	; () banked
  7396  00440C  6F85               	movwf	___flmul@f2& (0+255),b
  7397  00440E  0EF9               	movlw	249
  7398  004410  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  7399  004412  0E22               	movlw	34
  7400  004414  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  7401  004416  0E3E               	movlw	62
  7402  004418  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  7403  00441A  ECAB  F02A         	call	___flmul	;wreg free
  7404  00441E  C081  F0D1         	movff	?___flmul,sin@f
  7405  004422  C082  F0D2         	movff	?___flmul+1,sin@f+1
  7406  004426  C083  F0D3         	movff	?___flmul+2,sin@f+2
  7407  00442A  C084  F0D4         	movff	?___flmul+3,sin@f+3
  7408  00442E  C0D1  F0C9         	movff	sin@f,___flsub@f1
  7409  004432  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  7410  004436  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  7411  00443A  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  7412  00443E  C0D1  F0BF         	movff	sin@f,floor@x
  7413  004442  C0D2  F0C0         	movff	sin@f+1,floor@x+1
  7414  004446  C0D3  F0C1         	movff	sin@f+2,floor@x+2
  7415  00444A  C0D4  F0C2         	movff	sin@f+3,floor@x+3
  7416  00444E  ECF8  F02B         	call	_floor	;wreg free
  7417  004452  C0BF  F0CD         	movff	?_floor,___flsub@f2
  7418  004456  C0C0  F0CE         	movff	?_floor+1,___flsub@f2+1
  7419  00445A  C0C1  F0CF         	movff	?_floor+2,___flsub@f2+2
  7420  00445E  C0C2  F0D0         	movff	?_floor+3,___flsub@f2+3
  7421  004462  EC11  F031         	call	___flsub	;wreg free
  7422  004466  C0C9  F0D1         	movff	?___flsub,sin@f
  7423  00446A  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  7424  00446E  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  7425  004472  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  7426  004476  C0D1  F081         	movff	sin@f,___flmul@f1
  7427  00447A  C0D2  F082         	movff	sin@f+1,___flmul@f1+1
  7428  00447E  C0D3  F083         	movff	sin@f+2,___flmul@f1+2
  7429  004482  C0D4  F084         	movff	sin@f+3,___flmul@f1+3
  7430  004486  0E00               	movlw	0
  7431  004488  0100               	movlb	0	; () banked
  7432  00448A  6F85               	movwf	___flmul@f2& (0+255),b
  7433  00448C  0E00               	movlw	0
  7434  00448E  6F86               	movwf	(___flmul@f2+1)& (0+255),b
  7435  004490  0E80               	movlw	128
  7436  004492  6F87               	movwf	(___flmul@f2+2)& (0+255),b
  7437  004494  0E40               	movlw	64
  7438  004496  6F88               	movwf	(___flmul@f2+3)& (0+255),b
  7439  004498  ECAB  F02A         	call	___flmul	;wreg free
  7440  00449C  C081  F0D1         	movff	?___flmul,sin@f
  7441  0044A0  C082  F0D2         	movff	?___flmul+1,sin@f+1
  7442  0044A4  C083  F0D3         	movff	?___flmul+2,sin@f+2
  7443  0044A8  C084  F0D4         	movff	?___flmul+3,sin@f+3
  7444  0044AC  0E00               	movlw	0
  7445  0044AE  0100               	movlb	0	; () banked
  7446  0044B0  6FB3               	movwf	___flge@ff1& (0+255),b
  7447  0044B2  0E00               	movlw	0
  7448  0044B4  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  7449  0044B6  0E00               	movlw	0
  7450  0044B8  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  7451  0044BA  0E40               	movlw	64
  7452  0044BC  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  7453  0044BE  C0D1  F0B7         	movff	sin@f,___flge@ff2
  7454  0044C2  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  7455  0044C6  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  7456  0044CA  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  7457  0044CE  EC2A  F02E         	call	___flge	;wreg free
  7458  0044D2  0100               	movlb	0	; () banked
  7459  0044D4  B0D8               	btfsc	status,0,c
  7460  0044D6  D026               	goto	l6607
  7461                           
  7462                           ; BSR set to: 0
  7463  0044D8  C0D1  F0C9         	movff	sin@f,___flsub@f1
  7464  0044DC  C0D2  F0CA         	movff	sin@f+1,___flsub@f1+1
  7465  0044E0  C0D3  F0CB         	movff	sin@f+2,___flsub@f1+2
  7466  0044E4  C0D4  F0CC         	movff	sin@f+3,___flsub@f1+3
  7467  0044E8  0E00               	movlw	0
  7468  0044EA  0100               	movlb	0	; () banked
  7469  0044EC  6FCD               	movwf	___flsub@f2& (0+255),b
  7470  0044EE  0E00               	movlw	0
  7471  0044F0  6FCE               	movwf	(___flsub@f2+1)& (0+255),b
  7472  0044F2  0E00               	movlw	0
  7473  0044F4  6FCF               	movwf	(___flsub@f2+2)& (0+255),b
  7474  0044F6  0E40               	movlw	64
  7475  0044F8  6FD0               	movwf	(___flsub@f2+3)& (0+255),b
  7476  0044FA  EC11  F031         	call	___flsub	;wreg free
  7477  0044FE  C0C9  F0D1         	movff	?___flsub,sin@f
  7478  004502  C0CA  F0D2         	movff	?___flsub+1,sin@f+1
  7479  004506  C0CB  F0D3         	movff	?___flsub+2,sin@f+2
  7480  00450A  C0CC  F0D4         	movff	?___flsub+3,sin@f+3
  7481  00450E  0101               	movlb	1	; () banked
  7482  004510  518F               	movf	sin@sgn& (0+255),w,b
  7483  004512  0101               	movlb	1	; () banked
  7484  004514  A4D8               	btfss	status,2,c
  7485  004516  D002               	goto	u8250
  7486  004518  0E01               	movlw	1
  7487  00451A  D001               	goto	u8260
  7488  00451C                     u8250:
  7489  00451C  0E00               	movlw	0
  7490  00451E                     u8260:
  7491  00451E  0101               	movlb	1	; () banked
  7492  004520  6F8F               	movwf	sin@sgn& (0+255),b
  7493  004522  D000               	goto	l6607
  7494  004524                     l6607:
  7495  004524  0E00               	movlw	0
  7496  004526  0100               	movlb	0	; () banked
  7497  004528  6FB3               	movwf	___flge@ff1& (0+255),b
  7498  00452A  0E00               	movlw	0
  7499  00452C  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  7500  00452E  0E80               	movlw	128
  7501  004530  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  7502  004532  0E3F               	movlw	63
  7503  004534  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  7504  004536  C0D1  F0B7         	movff	sin@f,___flge@ff2
  7505  00453A  C0D2  F0B8         	movff	sin@f+1,___flge@ff2+1
  7506  00453E  C0D3  F0B9         	movff	sin@f+2,___flge@ff2+2
  7507  004542  C0D4  F0BA         	movff	sin@f+3,___flge@ff2+3
  7508  004546  EC2A  F02E         	call	___flge	;wreg free
  7509  00454A  0100               	movlb	0	; () banked
  7510  00454C  B0D8               	btfsc	status,0,c
  7511  00454E  D025               	goto	l1463
  7512                           
  7513                           ; BSR set to: 0
  7514  004550  C0D1  F0AB         	movff	sin@f,___flneg@f1
  7515  004554  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  7516  004558  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  7517  00455C  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  7518  004560  ECDE  F031         	call	___flneg	;wreg free
  7519  004564  C0AB  F09F         	movff	?___flneg,___fladd@f1
  7520  004568  C0AC  F0A0         	movff	?___flneg+1,___fladd@f1+1
  7521  00456C  C0AD  F0A1         	movff	?___flneg+2,___fladd@f1+2
  7522  004570  C0AE  F0A2         	movff	?___flneg+3,___fladd@f1+3
  7523  004574  0E00               	movlw	0
  7524  004576  0100               	movlb	0	; () banked
  7525  004578  6FA3               	movwf	___fladd@f2& (0+255),b
  7526  00457A  0E00               	movlw	0
  7527  00457C  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  7528  00457E  0E00               	movlw	0
  7529  004580  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  7530  004582  0E40               	movlw	64
  7531  004584  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  7532  004586  EC6E  F023         	call	___fladd	;wreg free
  7533  00458A  C09F  F0D1         	movff	?___fladd,sin@f
  7534  00458E  C0A0  F0D2         	movff	?___fladd+1,sin@f+1
  7535  004592  C0A1  F0D3         	movff	?___fladd+2,sin@f+2
  7536  004596  C0A2  F0D4         	movff	?___fladd+3,sin@f+3
  7537  00459A                     l1463:
  7538  00459A  C0D1  F081         	movff	sin@f,___flmul@f1
  7539  00459E  C0D2  F082         	movff	sin@f+1,___flmul@f1+1
  7540  0045A2  C0D3  F083         	movff	sin@f+2,___flmul@f1+2
  7541  0045A6  C0D4  F084         	movff	sin@f+3,___flmul@f1+3
  7542  0045AA  C0D1  F085         	movff	sin@f,___flmul@f2
  7543  0045AE  C0D2  F086         	movff	sin@f+1,___flmul@f2+1
  7544  0045B2  C0D3  F087         	movff	sin@f+2,___flmul@f2+2
  7545  0045B6  C0D4  F088         	movff	sin@f+3,___flmul@f2+3
  7546  0045BA  ECAB  F02A         	call	___flmul	;wreg free
  7547  0045BE  C081  F18B         	movff	?___flmul,sin@x2
  7548  0045C2  C082  F18C         	movff	?___flmul+1,sin@x2+1
  7549  0045C6  C083  F18D         	movff	?___flmul+2,sin@x2+2
  7550  0045CA  C084  F18E         	movff	?___flmul+3,sin@x2+3
  7551  0045CE  C18B  F0AB         	movff	sin@x2,eval_poly@x
  7552  0045D2  C18C  F0AC         	movff	sin@x2+1,eval_poly@x+1
  7553  0045D6  C18D  F0AD         	movff	sin@x2+2,eval_poly@x+2
  7554  0045DA  C18E  F0AE         	movff	sin@x2+3,eval_poly@x+3
  7555  0045DE  0E41               	movlw	low sin@coeff_b
  7556  0045E0  0100               	movlb	0	; () banked
  7557  0045E2  6FAF               	movwf	eval_poly@d& (0+255),b
  7558  0045E4  0E0D               	movlw	high sin@coeff_b
  7559  0045E6  0100               	movlb	0	; () banked
  7560  0045E8  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  7561  0045EA  0E00               	movlw	0
  7562  0045EC  0100               	movlb	0	; () banked
  7563  0045EE  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  7564  0045F0  0E03               	movlw	3
  7565  0045F2  6FB1               	movwf	eval_poly@n& (0+255),b
  7566  0045F4  EC16  F02D         	call	_eval_poly	;wreg free
  7567  0045F8  C0AB  F183         	movff	?_eval_poly,sin@y
  7568  0045FC  C0AC  F184         	movff	?_eval_poly+1,sin@y+1
  7569  004600  C0AD  F185         	movff	?_eval_poly+2,sin@y+2
  7570  004604  C0AE  F186         	movff	?_eval_poly+3,sin@y+3
  7571  004608  C183  F094         	movff	sin@y,___fldiv@f2
  7572  00460C  C184  F095         	movff	sin@y+1,___fldiv@f2+1
  7573  004610  C185  F096         	movff	sin@y+2,___fldiv@f2+2
  7574  004614  C186  F097         	movff	sin@y+3,___fldiv@f2+3
  7575  004618  0E00               	movlw	0
  7576  00461A  0100               	movlb	0	; () banked
  7577  00461C  6FB2               	movwf	(eval_poly@n+1)& (0+255),b
  7578  00461E  0E04               	movlw	4
  7579  004620  6FB1               	movwf	eval_poly@n& (0+255),b
  7580  004622  0E2D               	movlw	low sin@coeff_a
  7581  004624  0100               	movlb	0	; () banked
  7582  004626  6FAF               	movwf	eval_poly@d& (0+255),b
  7583  004628  0E0D               	movlw	high sin@coeff_a
  7584  00462A  0100               	movlb	0	; () banked
  7585  00462C  6FB0               	movwf	(eval_poly@d+1)& (0+255),b
  7586  00462E  C18B  F0AB         	movff	sin@x2,eval_poly@x
  7587  004632  C18C  F0AC         	movff	sin@x2+1,eval_poly@x+1
  7588  004636  C18D  F0AD         	movff	sin@x2+2,eval_poly@x+2
  7589  00463A  C18E  F0AE         	movff	sin@x2+3,eval_poly@x+3
  7590  00463E  EC16  F02D         	call	_eval_poly	;wreg free
  7591  004642  C0AB  F090         	movff	?_eval_poly,___fldiv@f1
  7592  004646  C0AC  F091         	movff	?_eval_poly+1,___fldiv@f1+1
  7593  00464A  C0AD  F092         	movff	?_eval_poly+2,___fldiv@f1+2
  7594  00464E  C0AE  F093         	movff	?_eval_poly+3,___fldiv@f1+3
  7595  004652  EC5D  F02B         	call	___fldiv	;wreg free
  7596  004656  C090  F187         	movff	?___fldiv,_sin$3684
  7597  00465A  C091  F188         	movff	?___fldiv+1,_sin$3684+1
  7598  00465E  C092  F189         	movff	?___fldiv+2,_sin$3684+2
  7599  004662  C093  F18A         	movff	?___fldiv+3,_sin$3684+3
  7600  004666  C0D1  F081         	movff	sin@f,___flmul@f1
  7601  00466A  C0D2  F082         	movff	sin@f+1,___flmul@f1+1
  7602  00466E  C0D3  F083         	movff	sin@f+2,___flmul@f1+2
  7603  004672  C0D4  F084         	movff	sin@f+3,___flmul@f1+3
  7604  004676  C187  F085         	movff	_sin$3684,___flmul@f2
  7605  00467A  C188  F086         	movff	_sin$3684+1,___flmul@f2+1
  7606  00467E  C189  F087         	movff	_sin$3684+2,___flmul@f2+2
  7607  004682  C18A  F088         	movff	_sin$3684+3,___flmul@f2+3
  7608  004686  ECAB  F02A         	call	___flmul	;wreg free
  7609  00468A  C081  F0D1         	movff	?___flmul,sin@f
  7610  00468E  C082  F0D2         	movff	?___flmul+1,sin@f+1
  7611  004692  C083  F0D3         	movff	?___flmul+2,sin@f+2
  7612  004696  C084  F0D4         	movff	?___flmul+3,sin@f+3
  7613  00469A  0101               	movlb	1	; () banked
  7614  00469C  518F               	movf	sin@sgn& (0+255),w,b
  7615  00469E  0101               	movlb	1	; () banked
  7616  0046A0  B4D8               	btfsc	status,2,c
  7617  0046A2  D013               	goto	l1464
  7618                           
  7619                           ; BSR set to: 1
  7620  0046A4  C0D1  F0AB         	movff	sin@f,___flneg@f1
  7621  0046A8  C0D2  F0AC         	movff	sin@f+1,___flneg@f1+1
  7622  0046AC  C0D3  F0AD         	movff	sin@f+2,___flneg@f1+2
  7623  0046B0  C0D4  F0AE         	movff	sin@f+3,___flneg@f1+3
  7624  0046B4  ECDE  F031         	call	___flneg	;wreg free
  7625  0046B8  C0AB  F0D1         	movff	?___flneg,?_sin
  7626  0046BC  C0AC  F0D2         	movff	?___flneg+1,?_sin+1
  7627  0046C0  C0AD  F0D3         	movff	?___flneg+2,?_sin+2
  7628  0046C4  C0AE  F0D4         	movff	?___flneg+3,?_sin+3
  7629  0046C8  0012               	return	
  7630  0046CA                     l1464:
  7631                           
  7632                           ; BSR set to: 1
  7633  0046CA  C0D1  F0D1         	movff	sin@f,?_sin
  7634  0046CE  C0D2  F0D2         	movff	sin@f+1,?_sin+1
  7635  0046D2  C0D3  F0D3         	movff	sin@f+2,?_sin+2
  7636  0046D6  C0D4  F0D4         	movff	sin@f+3,?_sin+3
  7637  0046DA  0012               	return		;funcret
  7638  0046DC                     __end_of_sin:
  7639                           	opt stack 0
  7640                           tblptru	equ	0xFF8
  7641                           tblptrh	equ	0xFF7
  7642                           tblptrl	equ	0xFF6
  7643                           tablat	equ	0xFF5
  7644                           prodh	equ	0xFF4
  7645                           prodl	equ	0xFF3
  7646                           postinc0	equ	0xFEE
  7647                           wreg	equ	0xFE8
  7648                           indf2	equ	0xFDF
  7649                           postinc2	equ	0xFDE
  7650                           postdec2	equ	0xFDD
  7651                           fsr2h	equ	0xFDA
  7652                           fsr2l	equ	0xFD9
  7653                           status	equ	0xFD8
  7654                           
  7655 ;; *************** function _floor *****************
  7656 ;; Defined at:
  7657 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;  x               4   95[BANK0 ] unsigned char 
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;  i               4   99[BANK0 ] unsigned char 
  7662 ;;  expon           2  103[BANK0 ] int 
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  4   95[BANK0 ] int 
  7665 ;; Registers used:
  7666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7672 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7673 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7675 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7676 ;;Total ram usage:       10 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; Hardware stack levels required when called:    7
  7679 ;; This function calls:
  7680 ;;		___altofl
  7681 ;;		___fladd
  7682 ;;		___flge
  7683 ;;		___fltol
  7684 ;;		_frexp
  7685 ;; This function is called by:
  7686 ;;		_sin
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text19
  7691  0057F0                     __ptext19:
  7692                           	opt stack 0
  7693  0057F0                     _floor:
  7694                           	opt stack 19
  7695                           
  7696                           ;incstack = 0
  7697  0057F0  C0BF  F077         	movff	floor@x,frexp@value
  7698  0057F4  C0C0  F078         	movff	floor@x+1,frexp@value+1
  7699  0057F8  C0C1  F079         	movff	floor@x+2,frexp@value+2
  7700  0057FC  C0C2  F07A         	movff	floor@x+3,frexp@value+3
  7701  005800  0EC7               	movlw	low floor@expon
  7702  005802  0100               	movlb	0	; () banked
  7703  005804  6F7B               	movwf	frexp@eptr& (0+255),b
  7704  005806  0E00               	movlw	high floor@expon
  7705  005808  0100               	movlb	0	; () banked
  7706  00580A  6F7C               	movwf	(frexp@eptr+1)& (0+255),b
  7707  00580C  EC50  F030         	call	_frexp	;wreg free
  7708  005810  0100               	movlb	0	; () banked
  7709  005812  AFC8               	btfss	(floor@expon+1)& (0+255),7,b
  7710  005814  D017               	goto	l6499
  7711                           
  7712                           ; BSR set to: 0
  7713  005816  0100               	movlb	0	; () banked
  7714  005818  AFC2               	btfss	(floor@x+3)& (0+255),7,b
  7715  00581A  D00A               	goto	l6495
  7716                           
  7717                           ; BSR set to: 0
  7718  00581C  0E00               	movlw	0
  7719  00581E  0100               	movlb	0	; () banked
  7720  005820  6FBF               	movwf	?_floor& (0+255),b
  7721  005822  0E00               	movlw	0
  7722  005824  6FC0               	movwf	(?_floor+1)& (0+255),b
  7723  005826  0E80               	movlw	128
  7724  005828  6FC1               	movwf	(?_floor+2)& (0+255),b
  7725  00582A  0EBF               	movlw	191
  7726  00582C  6FC2               	movwf	(?_floor+3)& (0+255),b
  7727                           
  7728                           ; BSR set to: 0
  7729  00582E  0012               	return	
  7730  005830                     l6495:
  7731                           
  7732                           ; BSR set to: 0
  7733  005830  0E00               	movlw	0
  7734  005832  0100               	movlb	0	; () banked
  7735  005834  6FBF               	movwf	?_floor& (0+255),b
  7736  005836  0E00               	movlw	0
  7737  005838  6FC0               	movwf	(?_floor+1)& (0+255),b
  7738  00583A  0E00               	movlw	0
  7739  00583C  6FC1               	movwf	(?_floor+2)& (0+255),b
  7740  00583E  0E00               	movlw	0
  7741  005840  6FC2               	movwf	(?_floor+3)& (0+255),b
  7742                           
  7743                           ; BSR set to: 0
  7744  005842  0012               	return	
  7745  005844                     l6499:
  7746                           
  7747                           ; BSR set to: 0
  7748  005844  0100               	movlb	0	; () banked
  7749  005846  51C8               	movf	(floor@expon+1)& (0+255),w,b
  7750  005848  E105               	bnz	u8100
  7751  00584A  0E1D               	movlw	29
  7752  00584C  0100               	movlb	0	; () banked
  7753  00584E  5DC7               	subwf	floor@expon& (0+255),w,b
  7754  005850  A0D8               	btfss	status,0,c
  7755  005852  D009               	goto	l6503
  7756  005854                     u8100:
  7757                           
  7758                           ; BSR set to: 0
  7759  005854  C0BF  F0BF         	movff	floor@x,?_floor
  7760  005858  C0C0  F0C0         	movff	floor@x+1,?_floor+1
  7761  00585C  C0C1  F0C1         	movff	floor@x+2,?_floor+2
  7762  005860  C0C2  F0C2         	movff	floor@x+3,?_floor+3
  7763  005864  0012               	return	
  7764  005866                     l6503:
  7765                           
  7766                           ; BSR set to: 0
  7767  005866  C0BF  F0AF         	movff	floor@x,___fltol@f1
  7768  00586A  C0C0  F0B0         	movff	floor@x+1,___fltol@f1+1
  7769  00586E  C0C1  F0B1         	movff	floor@x+2,___fltol@f1+2
  7770  005872  C0C2  F0B2         	movff	floor@x+3,___fltol@f1+3
  7771  005876  EC89  F02C         	call	___fltol	;wreg free
  7772  00587A  C0AF  F0B9         	movff	?___fltol,___altofl@c
  7773  00587E  C0B0  F0BA         	movff	?___fltol+1,___altofl@c+1
  7774  005882  C0B1  F0BB         	movff	?___fltol+2,___altofl@c+2
  7775  005886  C0B2  F0BC         	movff	?___fltol+3,___altofl@c+3
  7776  00588A  EC6D  F031         	call	___altofl	;wreg free
  7777  00588E  C0B9  F0C3         	movff	?___altofl,floor@i
  7778  005892  C0BA  F0C4         	movff	?___altofl+1,floor@i+1
  7779  005896  C0BB  F0C5         	movff	?___altofl+2,floor@i+2
  7780  00589A  C0BC  F0C6         	movff	?___altofl+3,floor@i+3
  7781  00589E  C0BF  F0B3         	movff	floor@x,___flge@ff1
  7782  0058A2  C0C0  F0B4         	movff	floor@x+1,___flge@ff1+1
  7783  0058A6  C0C1  F0B5         	movff	floor@x+2,___flge@ff1+2
  7784  0058AA  C0C2  F0B6         	movff	floor@x+3,___flge@ff1+3
  7785  0058AE  C0C3  F0B7         	movff	floor@i,___flge@ff2
  7786  0058B2  C0C4  F0B8         	movff	floor@i+1,___flge@ff2+1
  7787  0058B6  C0C5  F0B9         	movff	floor@i+2,___flge@ff2+2
  7788  0058BA  C0C6  F0BA         	movff	floor@i+3,___flge@ff2+3
  7789  0058BE  EC2A  F02E         	call	___flge	;wreg free
  7790  0058C2  0100               	movlb	0	; () banked
  7791  0058C4  B0D8               	btfsc	status,0,c
  7792  0058C6  D01C               	goto	l1483
  7793                           
  7794                           ; BSR set to: 0
  7795  0058C8  C0C3  F09F         	movff	floor@i,___fladd@f1
  7796  0058CC  C0C4  F0A0         	movff	floor@i+1,___fladd@f1+1
  7797  0058D0  C0C5  F0A1         	movff	floor@i+2,___fladd@f1+2
  7798  0058D4  C0C6  F0A2         	movff	floor@i+3,___fladd@f1+3
  7799  0058D8  0E00               	movlw	0
  7800  0058DA  0100               	movlb	0	; () banked
  7801  0058DC  6FA3               	movwf	___fladd@f2& (0+255),b
  7802  0058DE  0E00               	movlw	0
  7803  0058E0  6FA4               	movwf	(___fladd@f2+1)& (0+255),b
  7804  0058E2  0E80               	movlw	128
  7805  0058E4  6FA5               	movwf	(___fladd@f2+2)& (0+255),b
  7806  0058E6  0EBF               	movlw	191
  7807  0058E8  6FA6               	movwf	(___fladd@f2+3)& (0+255),b
  7808  0058EA  EC6E  F023         	call	___fladd	;wreg free
  7809  0058EE  C09F  F0BF         	movff	?___fladd,?_floor
  7810  0058F2  C0A0  F0C0         	movff	?___fladd+1,?_floor+1
  7811  0058F6  C0A1  F0C1         	movff	?___fladd+2,?_floor+2
  7812  0058FA  C0A2  F0C2         	movff	?___fladd+3,?_floor+3
  7813  0058FE  0012               	return	
  7814  005900                     l1483:
  7815                           
  7816                           ; BSR set to: 0
  7817  005900  C0C3  F0BF         	movff	floor@i,?_floor
  7818  005904  C0C4  F0C0         	movff	floor@i+1,?_floor+1
  7819  005908  C0C5  F0C1         	movff	floor@i+2,?_floor+2
  7820  00590C  C0C6  F0C2         	movff	floor@i+3,?_floor+3
  7821  005910  0012               	return		;funcret
  7822  005912                     __end_of_floor:
  7823                           	opt stack 0
  7824                           tblptru	equ	0xFF8
  7825                           tblptrh	equ	0xFF7
  7826                           tblptrl	equ	0xFF6
  7827                           tablat	equ	0xFF5
  7828                           prodh	equ	0xFF4
  7829                           prodl	equ	0xFF3
  7830                           postinc0	equ	0xFEE
  7831                           wreg	equ	0xFE8
  7832                           indf2	equ	0xFDF
  7833                           postinc2	equ	0xFDE
  7834                           postdec2	equ	0xFDD
  7835                           fsr2h	equ	0xFDA
  7836                           fsr2l	equ	0xFD9
  7837                           status	equ	0xFD8
  7838                           
  7839 ;; *************** function _frexp *****************
  7840 ;; Defined at:
  7841 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;  value           4   23[BANK0 ] int 
  7844 ;;  eptr            2   27[BANK0 ] PTR int 
  7845 ;;		 -> floor@expon(2), 
  7846 ;; Auto vars:     Size  Location     Type
  7847 ;;		None
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  4   23[BANK0 ] PTR int 
  7850 ;; Registers used:
  7851 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7852 ;; Tracked objects:
  7853 ;;		On entry : 0/0
  7854 ;;		On exit  : 0/0
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7857 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7859 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7860 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;Total ram usage:        8 bytes
  7862 ;; Hardware stack levels used:    1
  7863 ;; Hardware stack levels required when called:    5
  7864 ;; This function calls:
  7865 ;;		Nothing
  7866 ;; This function is called by:
  7867 ;;		_floor
  7868 ;; This function uses a non-reentrant model
  7869 ;;
  7870                           
  7871                           	psect	text20
  7872  0060A0                     __ptext20:
  7873                           	opt stack 0
  7874  0060A0                     _frexp:
  7875                           	opt stack 20
  7876                           
  7877                           ;incstack = 0
  7878  0060A0  0100               	movlb	0	; () banked
  7879  0060A2  5177               	movf	frexp@value& (0+255),w,b
  7880  0060A4  0100               	movlb	0	; () banked
  7881  0060A6  1178               	iorwf	(frexp@value+1)& (0+255),w,b
  7882  0060A8  0100               	movlb	0	; () banked
  7883  0060AA  1179               	iorwf	(frexp@value+2)& (0+255),w,b
  7884  0060AC  0100               	movlb	0	; () banked
  7885  0060AE  117A               	iorwf	(frexp@value+3)& (0+255),w,b
  7886  0060B0  A4D8               	btfss	status,2,c
  7887  0060B2  D009               	goto	l6415
  7888                           
  7889                           ; BSR set to: 0
  7890  0060B4  C07B  FFD9         	movff	frexp@eptr,fsr2l
  7891  0060B8  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  7892  0060BC  0E00               	movlw	0
  7893  0060BE  6EDE               	movwf	postinc2,c
  7894  0060C0  0E00               	movlw	0
  7895  0060C2  6EDD               	movwf	postdec2,c
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;	Return value of _frexp is never used
  7899  0060C4  0012               	return	
  7900  0060C6                     l6415:
  7901                           
  7902                           ; BSR set to: 0
  7903  0060C6  0100               	movlb	0	; () banked
  7904  0060C8  517A               	movf	(frexp@value+3)& (0+255),w,b
  7905  0060CA  0B7F               	andlw	127
  7906  0060CC  0100               	movlb	0	; () banked
  7907  0060CE  6F7D               	movwf	??_frexp& (0+255),b
  7908  0060D0  6B7E               	clrf	(??_frexp+1)& (0+255),b
  7909  0060D2  90D8               	bcf	status,0,c
  7910  0060D4  0100               	movlb	0	; () banked
  7911  0060D6  377D               	rlcf	??_frexp& (0+255),f,b
  7912  0060D8  377E               	rlcf	(??_frexp+1)& (0+255),f,b
  7913  0060DA  C07B  FFD9         	movff	frexp@eptr,fsr2l
  7914  0060DE  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  7915  0060E2  C07D  FFDE         	movff	??_frexp,postinc2
  7916  0060E6  C07E  FFDD         	movff	??_frexp+1,postdec2
  7917  0060EA  0100               	movlb	0	; () banked
  7918  0060EC  AF79               	btfss	(frexp@value+2)& (0+255),7,b
  7919  0060EE  D004               	goto	u8010
  7920  0060F0  0100               	movlb	0	; () banked
  7921  0060F2  6B7D               	clrf	??_frexp& (0+255),b
  7922  0060F4  2B7D               	incf	??_frexp& (0+255),f,b
  7923  0060F6  D002               	goto	u8018
  7924  0060F8                     u8010:
  7925  0060F8  0100               	movlb	0	; () banked
  7926  0060FA  6B7D               	clrf	??_frexp& (0+255),b
  7927  0060FC                     u8018:
  7928  0060FC  0100               	movlb	0	; () banked
  7929  0060FE  517D               	movf	??_frexp& (0+255),w,b
  7930  006100  C07B  FFD9         	movff	frexp@eptr,fsr2l
  7931  006104  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  7932  006108  12DE               	iorwf	postinc2,f,c
  7933  00610A  0E00               	movlw	0
  7934  00610C  12DD               	iorwf	postdec2,f,c
  7935                           
  7936                           ; BSR set to: 0
  7937  00610E  C07B  FFD9         	movff	frexp@eptr,fsr2l
  7938  006112  C07C  FFDA         	movff	frexp@eptr+1,fsr2h
  7939  006116  0E82               	movlw	130
  7940  006118  26DE               	addwf	postinc2,f,c
  7941  00611A  0EFF               	movlw	255
  7942  00611C  22DD               	addwfc	postdec2,f,c
  7943                           
  7944                           ; BSR set to: 0
  7945  00611E  817A               	bsf	(frexp@value+3)& (0+255),0,b
  7946  006120  837A               	bsf	(frexp@value+3)& (0+255),1,b
  7947  006122  857A               	bsf	(frexp@value+3)& (0+255),2,b
  7948  006124  877A               	bsf	(frexp@value+3)& (0+255),3,b
  7949  006126  897A               	bsf	(frexp@value+3)& (0+255),4,b
  7950  006128  8B7A               	bsf	(frexp@value+3)& (0+255),5,b
  7951  00612A  9D7A               	bcf	(frexp@value+3)& (0+255),6,b
  7952                           
  7953                           ; BSR set to: 0
  7954  00612C  0100               	movlb	0	; () banked
  7955  00612E  9F79               	bcf	(frexp@value+2)& (0+255),7,b
  7956  006130  0012               	return	
  7957                           
  7958                           ; BSR set to: 0
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;	Return value of _frexp is never used
  7962  006132  0012               	return		;funcret
  7963  006134                     __end_of_frexp:
  7964                           	opt stack 0
  7965                           tblptru	equ	0xFF8
  7966                           tblptrh	equ	0xFF7
  7967                           tblptrl	equ	0xFF6
  7968                           tablat	equ	0xFF5
  7969                           prodh	equ	0xFF4
  7970                           prodl	equ	0xFF3
  7971                           postinc0	equ	0xFEE
  7972                           wreg	equ	0xFE8
  7973                           indf2	equ	0xFDF
  7974                           postinc2	equ	0xFDE
  7975                           postdec2	equ	0xFDD
  7976                           fsr2h	equ	0xFDA
  7977                           fsr2l	equ	0xFD9
  7978                           status	equ	0xFD8
  7979                           
  7980 ;; *************** function ___fltol *****************
  7981 ;; Defined at:
  7982 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  7983 ;; Parameters:    Size  Location     Type
  7984 ;;  f1              4   79[BANK0 ] PTR int 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  exp1            1   88[BANK0 ] unsigned char 
  7987 ;;  sign1           1   87[BANK0 ] unsigned char 
  7988 ;; Return value:  Size  Location     Type
  7989 ;;                  4   79[BANK0 ] long 
  7990 ;; Registers used:
  7991 ;;		wreg, status,2, status,0
  7992 ;; Tracked objects:
  7993 ;;		On entry : 0/0
  7994 ;;		On exit  : 0/0
  7995 ;;		Unchanged: 0/0
  7996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7997 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8000 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;Total ram usage:       10 bytes
  8002 ;; Hardware stack levels used:    1
  8003 ;; Hardware stack levels required when called:    5
  8004 ;; This function calls:
  8005 ;;		Nothing
  8006 ;; This function is called by:
  8007 ;;		_park_routine
  8008 ;;		_parallelo
  8009 ;;		_floor
  8010 ;; This function uses a non-reentrant model
  8011 ;;
  8012                           
  8013                           	psect	text21
  8014  005912                     __ptext21:
  8015                           	opt stack 0
  8016  005912                     ___fltol:
  8017                           	opt stack 23
  8018                           
  8019                           ; BSR set to: 0
  8020                           ;incstack = 0
  8021  005912  0100               	movlb	0	; () banked
  8022  005914  35B1               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8023  005916  35B2               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8024  005918  0100               	movlb	0	; () banked
  8025  00591A  6FB8               	movwf	___fltol@exp1& (0+255),b
  8026  00591C  0100               	movlb	0	; () banked
  8027  00591E  51B8               	movf	___fltol@exp1& (0+255),w,b
  8028  005920  A4D8               	btfss	status,2,c
  8029  005922  D00A               	goto	l6371
  8030                           
  8031                           ; BSR set to: 0
  8032  005924  0E00               	movlw	0
  8033  005926  0100               	movlb	0	; () banked
  8034  005928  6FAF               	movwf	?___fltol& (0+255),b
  8035  00592A  0E00               	movlw	0
  8036  00592C  6FB0               	movwf	(?___fltol+1)& (0+255),b
  8037  00592E  0E00               	movlw	0
  8038  005930  6FB1               	movwf	(?___fltol+2)& (0+255),b
  8039  005932  0E00               	movlw	0
  8040  005934  6FB2               	movwf	(?___fltol+3)& (0+255),b
  8041                           
  8042                           ; BSR set to: 0
  8043  005936  0012               	return	
  8044  005938                     l6371:
  8045                           
  8046                           ; BSR set to: 0
  8047  005938  C0AF  F0B3         	movff	___fltol@f1,??___fltol
  8048  00593C  C0B0  F0B4         	movff	___fltol@f1+1,??___fltol+1
  8049  005940  C0B1  F0B5         	movff	___fltol@f1+2,??___fltol+2
  8050  005944  C0B2  F0B6         	movff	___fltol@f1+3,??___fltol+3
  8051  005948  0E20               	movlw	32
  8052  00594A  D006               	goto	u7940
  8053  00594C                     u7945:
  8054  00594C  0100               	movlb	0	; () banked
  8055  00594E  90D8               	bcf	status,0,c
  8056  005950  33B6               	rrcf	(??___fltol+3)& (0+255),f,b
  8057  005952  33B5               	rrcf	(??___fltol+2)& (0+255),f,b
  8058  005954  33B4               	rrcf	(??___fltol+1)& (0+255),f,b
  8059  005956  33B3               	rrcf	??___fltol& (0+255),f,b
  8060  005958                     u7940:
  8061  005958  2EE8               	decfsz	wreg,f,c
  8062  00595A  D7F8               	goto	u7945
  8063  00595C  0100               	movlb	0	; () banked
  8064  00595E  51B3               	movf	??___fltol& (0+255),w,b
  8065  005960  0100               	movlb	0	; () banked
  8066  005962  6FB7               	movwf	___fltol@sign1& (0+255),b
  8067                           
  8068                           ; BSR set to: 0
  8069  005964  0100               	movlb	0	; () banked
  8070  005966  8FB1               	bsf	(___fltol@f1+2)& (0+255),7,b
  8071                           
  8072                           ; BSR set to: 0
  8073  005968  0EFF               	movlw	255
  8074  00596A  0100               	movlb	0	; () banked
  8075  00596C  17AF               	andwf	___fltol@f1& (0+255),f,b
  8076  00596E  0EFF               	movlw	255
  8077  005970  17B0               	andwf	(___fltol@f1+1)& (0+255),f,b
  8078  005972  0EFF               	movlw	255
  8079  005974  17B1               	andwf	(___fltol@f1+2)& (0+255),f,b
  8080  005976  0E00               	movlw	0
  8081  005978  17B2               	andwf	(___fltol@f1+3)& (0+255),f,b
  8082                           
  8083                           ; BSR set to: 0
  8084  00597A  0E96               	movlw	150
  8085  00597C  0100               	movlb	0	; () banked
  8086  00597E  5FB8               	subwf	___fltol@exp1& (0+255),f,b
  8087                           
  8088                           ; BSR set to: 0
  8089  005980  0100               	movlb	0	; () banked
  8090  005982  AFB8               	btfss	___fltol@exp1& (0+255),7,b
  8091  005984  D01B               	goto	l6391
  8092                           
  8093                           ; BSR set to: 0
  8094  005986  0100               	movlb	0	; () banked
  8095  005988  51B8               	movf	___fltol@exp1& (0+255),w,b
  8096  00598A  0A80               	xorlw	128
  8097  00598C  0F97               	addlw	151
  8098  00598E  B0D8               	btfsc	status,0,c
  8099  005990  D00B               	goto	l6387
  8100                           
  8101                           ; BSR set to: 0
  8102  005992  0E00               	movlw	0
  8103  005994  0100               	movlb	0	; () banked
  8104  005996  6FAF               	movwf	?___fltol& (0+255),b
  8105  005998  0E00               	movlw	0
  8106  00599A  6FB0               	movwf	(?___fltol+1)& (0+255),b
  8107  00599C  0E00               	movlw	0
  8108  00599E  6FB1               	movwf	(?___fltol+2)& (0+255),b
  8109  0059A0  0E00               	movlw	0
  8110  0059A2  6FB2               	movwf	(?___fltol+3)& (0+255),b
  8111                           
  8112                           ; BSR set to: 0
  8113  0059A4  0012               	return	
  8114                           
  8115                           ; BSR set to: 0
  8116  0059A6  D000               	goto	l6387
  8117  0059A8                     l6387:
  8118                           
  8119                           ; BSR set to: 0
  8120  0059A8  0100               	movlb	0	; () banked
  8121  0059AA  90D8               	bcf	status,0,c
  8122  0059AC  33B2               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8123  0059AE  33B1               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8124  0059B0  33B0               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8125  0059B2  33AF               	rrcf	___fltol@f1& (0+255),f,b
  8126                           
  8127                           ; BSR set to: 0
  8128  0059B4  0100               	movlb	0	; () banked
  8129  0059B6  3FB8               	incfsz	___fltol@exp1& (0+255),f,b
  8130  0059B8  D7F7               	goto	l6387
  8131                           
  8132                           ; BSR set to: 0
  8133  0059BA  D01F               	goto	l6401
  8134  0059BC                     l6391:
  8135                           
  8136                           ; BSR set to: 0
  8137  0059BC  0E1F               	movlw	31
  8138  0059BE  0100               	movlb	0	; () banked
  8139  0059C0  65B8               	cpfsgt	___fltol@exp1& (0+255),b
  8140  0059C2  D014               	goto	l6399
  8141                           
  8142                           ; BSR set to: 0
  8143  0059C4  0E00               	movlw	0
  8144  0059C6  0100               	movlb	0	; () banked
  8145  0059C8  6FAF               	movwf	?___fltol& (0+255),b
  8146  0059CA  0E00               	movlw	0
  8147  0059CC  6FB0               	movwf	(?___fltol+1)& (0+255),b
  8148  0059CE  0E00               	movlw	0
  8149  0059D0  6FB1               	movwf	(?___fltol+2)& (0+255),b
  8150  0059D2  0E00               	movlw	0
  8151  0059D4  6FB2               	movwf	(?___fltol+3)& (0+255),b
  8152                           
  8153                           ; BSR set to: 0
  8154  0059D6  0012               	return	
  8155                           
  8156                           ; BSR set to: 0
  8157  0059D8  D009               	goto	l6399
  8158  0059DA                     l6397:
  8159                           
  8160                           ; BSR set to: 0
  8161  0059DA  0100               	movlb	0	; () banked
  8162  0059DC  90D8               	bcf	status,0,c
  8163  0059DE  37AF               	rlcf	___fltol@f1& (0+255),f,b
  8164  0059E0  37B0               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8165  0059E2  37B1               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8166  0059E4  37B2               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8167  0059E6  0100               	movlb	0	; () banked
  8168  0059E8  07B8               	decf	___fltol@exp1& (0+255),f,b
  8169  0059EA  D000               	goto	l6399
  8170  0059EC                     l6399:
  8171                           
  8172                           ; BSR set to: 0
  8173  0059EC  0100               	movlb	0	; () banked
  8174  0059EE  51B8               	movf	___fltol@exp1& (0+255),w,b
  8175  0059F0  0100               	movlb	0	; () banked
  8176  0059F2  B4D8               	btfsc	status,2,c
  8177  0059F4  D002               	goto	l6401
  8178  0059F6  D7F1               	goto	l6397
  8179                           
  8180                           ; BSR set to: 0
  8181  0059F8  D000               	goto	l6401
  8182  0059FA                     l6401:
  8183                           
  8184                           ; BSR set to: 0
  8185  0059FA  0100               	movlb	0	; () banked
  8186  0059FC  51B7               	movf	___fltol@sign1& (0+255),w,b
  8187  0059FE  0100               	movlb	0	; () banked
  8188  005A00  B4D8               	btfsc	status,2,c
  8189  005A02  D00A               	goto	l6405
  8190                           
  8191                           ; BSR set to: 0
  8192  005A04  0100               	movlb	0	; () banked
  8193  005A06  1FB2               	comf	(___fltol@f1+3)& (0+255),f,b
  8194  005A08  1FB1               	comf	(___fltol@f1+2)& (0+255),f,b
  8195  005A0A  1FB0               	comf	(___fltol@f1+1)& (0+255),f,b
  8196  005A0C  6DAF               	negf	___fltol@f1& (0+255),b
  8197  005A0E  0E00               	movlw	0
  8198  005A10  23B0               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8199  005A12  23B1               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8200  005A14  23B2               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8201  005A16  D000               	goto	l6405
  8202  005A18                     l6405:
  8203                           
  8204                           ; BSR set to: 0
  8205  005A18  C0AF  F0AF         	movff	___fltol@f1,?___fltol
  8206  005A1C  C0B0  F0B0         	movff	___fltol@f1+1,?___fltol+1
  8207  005A20  C0B1  F0B1         	movff	___fltol@f1+2,?___fltol+2
  8208  005A24  C0B2  F0B2         	movff	___fltol@f1+3,?___fltol+3
  8209  005A28  0012               	return	
  8210                           
  8211                           ; BSR set to: 0
  8212                           
  8213                           ; BSR set to: 0
  8214  005A2A  0012               	return		;funcret
  8215  005A2C                     __end_of___fltol:
  8216                           	opt stack 0
  8217                           tblptru	equ	0xFF8
  8218                           tblptrh	equ	0xFF7
  8219                           tblptrl	equ	0xFF6
  8220                           tablat	equ	0xFF5
  8221                           prodh	equ	0xFF4
  8222                           prodl	equ	0xFF3
  8223                           postinc0	equ	0xFEE
  8224                           wreg	equ	0xFE8
  8225                           indf2	equ	0xFDF
  8226                           postinc2	equ	0xFDE
  8227                           postdec2	equ	0xFDD
  8228                           fsr2h	equ	0xFDA
  8229                           fsr2l	equ	0xFD9
  8230                           status	equ	0xFD8
  8231                           
  8232 ;; *************** function ___flge *****************
  8233 ;; Defined at:
  8234 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;  ff1             4   83[BANK0 ] long 
  8237 ;;  ff2             4   87[BANK0 ] long 
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;		None
  8240 ;; Return value:  Size  Location     Type
  8241 ;;		None               void
  8242 ;; Registers used:
  8243 ;;		wreg, status,2, status,0
  8244 ;; Tracked objects:
  8245 ;;		On entry : 0/0
  8246 ;;		On exit  : 0/0
  8247 ;;		Unchanged: 0/0
  8248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8249 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;Total ram usage:       12 bytes
  8254 ;; Hardware stack levels used:    1
  8255 ;; Hardware stack levels required when called:    5
  8256 ;; This function calls:
  8257 ;;		Nothing
  8258 ;; This function is called by:
  8259 ;;		_park_search
  8260 ;;		_parallelo
  8261 ;;		_asin
  8262 ;;		_atan
  8263 ;;		_cos
  8264 ;;		_sin
  8265 ;;		_sqrt
  8266 ;;		_floor
  8267 ;; This function uses a non-reentrant model
  8268 ;;
  8269                           
  8270                           	psect	text22
  8271  005C54                     __ptext22:
  8272                           	opt stack 0
  8273  005C54                     ___flge:
  8274                           	opt stack 22
  8275                           
  8276                           ; BSR set to: 0
  8277                           ;incstack = 0
  8278  005C54  0100               	movlb	0	; () banked
  8279  005C56  AFB6               	btfss	(___flge@ff1+3)& (0+255),7,b
  8280  005C58  D027               	goto	l6347
  8281                           
  8282                           ; BSR set to: 0
  8283  005C5A  C0B3  F0BB         	movff	___flge@ff1,??___flge
  8284  005C5E  C0B4  F0BC         	movff	___flge@ff1+1,??___flge+1
  8285  005C62  C0B5  F0BD         	movff	___flge@ff1+2,??___flge+2
  8286  005C66  C0B6  F0BE         	movff	___flge@ff1+3,??___flge+3
  8287  005C6A  0100               	movlb	0	; () banked
  8288  005C6C  1FBB               	comf	??___flge& (0+255),f,b
  8289  005C6E  1FBC               	comf	(??___flge+1)& (0+255),f,b
  8290  005C70  1FBD               	comf	(??___flge+2)& (0+255),f,b
  8291  005C72  1FBE               	comf	(??___flge+3)& (0+255),f,b
  8292  005C74  2BBB               	incf	??___flge& (0+255),f,b
  8293  005C76  0E00               	movlw	0
  8294  005C78  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  8295  005C7A  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  8296  005C7C  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  8297  005C7E  0E00               	movlw	0
  8298  005C80  0100               	movlb	0	; () banked
  8299  005C82  25BB               	addwf	??___flge& (0+255),w,b
  8300  005C84  0100               	movlb	0	; () banked
  8301  005C86  6FB3               	movwf	___flge@ff1& (0+255),b
  8302  005C88  0E00               	movlw	0
  8303  005C8A  0100               	movlb	0	; () banked
  8304  005C8C  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  8305  005C8E  0100               	movlb	0	; () banked
  8306  005C90  6FB4               	movwf	(___flge@ff1+1)& (0+255),b
  8307  005C92  0E00               	movlw	0
  8308  005C94  0100               	movlb	0	; () banked
  8309  005C96  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  8310  005C98  0100               	movlb	0	; () banked
  8311  005C9A  6FB5               	movwf	(___flge@ff1+2)& (0+255),b
  8312  005C9C  0E80               	movlw	128
  8313  005C9E  0100               	movlb	0	; () banked
  8314  005CA0  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  8315  005CA2  0100               	movlb	0	; () banked
  8316  005CA4  6FB6               	movwf	(___flge@ff1+3)& (0+255),b
  8317  005CA6  D000               	goto	l6347
  8318  005CA8                     l6347:
  8319                           
  8320                           ; BSR set to: 0
  8321  005CA8  0100               	movlb	0	; () banked
  8322  005CAA  AFBA               	btfss	(___flge@ff2+3)& (0+255),7,b
  8323  005CAC  D026               	goto	l1189
  8324                           
  8325                           ; BSR set to: 0
  8326  005CAE  C0B7  F0BB         	movff	___flge@ff2,??___flge
  8327  005CB2  C0B8  F0BC         	movff	___flge@ff2+1,??___flge+1
  8328  005CB6  C0B9  F0BD         	movff	___flge@ff2+2,??___flge+2
  8329  005CBA  C0BA  F0BE         	movff	___flge@ff2+3,??___flge+3
  8330  005CBE  0100               	movlb	0	; () banked
  8331  005CC0  1FBB               	comf	??___flge& (0+255),f,b
  8332  005CC2  1FBC               	comf	(??___flge+1)& (0+255),f,b
  8333  005CC4  1FBD               	comf	(??___flge+2)& (0+255),f,b
  8334  005CC6  1FBE               	comf	(??___flge+3)& (0+255),f,b
  8335  005CC8  2BBB               	incf	??___flge& (0+255),f,b
  8336  005CCA  0E00               	movlw	0
  8337  005CCC  23BC               	addwfc	(??___flge+1)& (0+255),f,b
  8338  005CCE  23BD               	addwfc	(??___flge+2)& (0+255),f,b
  8339  005CD0  23BE               	addwfc	(??___flge+3)& (0+255),f,b
  8340  005CD2  0E00               	movlw	0
  8341  005CD4  0100               	movlb	0	; () banked
  8342  005CD6  25BB               	addwf	??___flge& (0+255),w,b
  8343  005CD8  0100               	movlb	0	; () banked
  8344  005CDA  6FB7               	movwf	___flge@ff2& (0+255),b
  8345  005CDC  0E00               	movlw	0
  8346  005CDE  0100               	movlb	0	; () banked
  8347  005CE0  21BC               	addwfc	(??___flge+1)& (0+255),w,b
  8348  005CE2  0100               	movlb	0	; () banked
  8349  005CE4  6FB8               	movwf	(___flge@ff2+1)& (0+255),b
  8350  005CE6  0E00               	movlw	0
  8351  005CE8  0100               	movlb	0	; () banked
  8352  005CEA  21BD               	addwfc	(??___flge+2)& (0+255),w,b
  8353  005CEC  0100               	movlb	0	; () banked
  8354  005CEE  6FB9               	movwf	(___flge@ff2+2)& (0+255),b
  8355  005CF0  0E80               	movlw	128
  8356  005CF2  0100               	movlb	0	; () banked
  8357  005CF4  21BE               	addwfc	(??___flge+3)& (0+255),w,b
  8358  005CF6  0100               	movlb	0	; () banked
  8359  005CF8  6FBA               	movwf	(___flge@ff2+3)& (0+255),b
  8360  005CFA                     l1189:
  8361                           
  8362                           ; BSR set to: 0
  8363  005CFA  0E00               	movlw	0
  8364  005CFC  0100               	movlb	0	; () banked
  8365  005CFE  1BB3               	xorwf	___flge@ff1& (0+255),f,b
  8366  005D00  0E00               	movlw	0
  8367  005D02  1BB4               	xorwf	(___flge@ff1+1)& (0+255),f,b
  8368  005D04  0E00               	movlw	0
  8369  005D06  1BB5               	xorwf	(___flge@ff1+2)& (0+255),f,b
  8370  005D08  0E80               	movlw	128
  8371  005D0A  1BB6               	xorwf	(___flge@ff1+3)& (0+255),f,b
  8372  005D0C  0E00               	movlw	0
  8373  005D0E  0100               	movlb	0	; () banked
  8374  005D10  1BB7               	xorwf	___flge@ff2& (0+255),f,b
  8375  005D12  0E00               	movlw	0
  8376  005D14  1BB8               	xorwf	(___flge@ff2+1)& (0+255),f,b
  8377  005D16  0E00               	movlw	0
  8378  005D18  1BB9               	xorwf	(___flge@ff2+2)& (0+255),f,b
  8379  005D1A  0E80               	movlw	128
  8380  005D1C  1BBA               	xorwf	(___flge@ff2+3)& (0+255),f,b
  8381  005D1E  0100               	movlb	0	; () banked
  8382  005D20  51B7               	movf	___flge@ff2& (0+255),w,b
  8383  005D22  0100               	movlb	0	; () banked
  8384  005D24  5DB3               	subwf	___flge@ff1& (0+255),w,b
  8385  005D26  0100               	movlb	0	; () banked
  8386  005D28  51B8               	movf	(___flge@ff2+1)& (0+255),w,b
  8387  005D2A  0100               	movlb	0	; () banked
  8388  005D2C  59B4               	subwfb	(___flge@ff1+1)& (0+255),w,b
  8389  005D2E  0100               	movlb	0	; () banked
  8390  005D30  51B9               	movf	(___flge@ff2+2)& (0+255),w,b
  8391  005D32  0100               	movlb	0	; () banked
  8392  005D34  59B5               	subwfb	(___flge@ff1+2)& (0+255),w,b
  8393  005D36  0100               	movlb	0	; () banked
  8394  005D38  51BA               	movf	(___flge@ff2+3)& (0+255),w,b
  8395  005D3A  0100               	movlb	0	; () banked
  8396  005D3C  59B6               	subwfb	(___flge@ff1+3)& (0+255),w,b
  8397  005D3E  B0D8               	btfsc	status,0,c
  8398  005D40  D002               	goto	l6353
  8399                           
  8400                           ; BSR set to: 0
  8401  005D42  90D8               	bcf	status,0,c
  8402  005D44  0012               	return	
  8403  005D46                     l6353:
  8404                           
  8405                           ; BSR set to: 0
  8406  005D46  80D8               	bsf	status,0,c
  8407                           
  8408                           ; BSR set to: 0
  8409  005D48  0012               	return	
  8410                           
  8411                           ; BSR set to: 0
  8412                           
  8413                           ; BSR set to: 0
  8414  005D4A  0012               	return		;funcret
  8415  005D4C                     __end_of___flge:
  8416                           	opt stack 0
  8417                           tblptru	equ	0xFF8
  8418                           tblptrh	equ	0xFF7
  8419                           tblptrl	equ	0xFF6
  8420                           tablat	equ	0xFF5
  8421                           prodh	equ	0xFF4
  8422                           prodl	equ	0xFF3
  8423                           postinc0	equ	0xFEE
  8424                           wreg	equ	0xFE8
  8425                           indf2	equ	0xFDF
  8426                           postinc2	equ	0xFDE
  8427                           postdec2	equ	0xFDD
  8428                           fsr2h	equ	0xFDA
  8429                           fsr2l	equ	0xFD9
  8430                           status	equ	0xFD8
  8431                           
  8432 ;; *************** function ___altofl *****************
  8433 ;; Defined at:
  8434 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  8435 ;; Parameters:    Size  Location     Type
  8436 ;;  c               4   89[BANK0 ] long 
  8437 ;; Auto vars:     Size  Location     Type
  8438 ;;  sign            1   93[BANK0 ] unsigned char 
  8439 ;; Return value:  Size  Location     Type
  8440 ;;                  4   89[BANK0 ] unsigned char 
  8441 ;; Registers used:
  8442 ;;		wreg, status,2, status,0, cstack
  8443 ;; Tracked objects:
  8444 ;;		On entry : 0/0
  8445 ;;		On exit  : 0/0
  8446 ;;		Unchanged: 0/0
  8447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8448 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8449 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8451 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8452 ;;Total ram usage:        5 bytes
  8453 ;; Hardware stack levels used:    1
  8454 ;; Hardware stack levels required when called:    6
  8455 ;; This function calls:
  8456 ;;		___flpack
  8457 ;; This function is called by:
  8458 ;;		_floor
  8459 ;; This function uses a non-reentrant model
  8460 ;;
  8461                           
  8462                           	psect	text23
  8463  0062DA                     __ptext23:
  8464                           	opt stack 0
  8465  0062DA                     ___altofl:
  8466                           	opt stack 19
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;incstack = 0
  8470  0062DA  0E00               	movlw	0
  8471  0062DC  0100               	movlb	0	; () banked
  8472  0062DE  6FBD               	movwf	___altofl@sign& (0+255),b
  8473                           
  8474                           ; BSR set to: 0
  8475  0062E0  0100               	movlb	0	; () banked
  8476  0062E2  AFBC               	btfss	(___altofl@c+3)& (0+255),7,b
  8477  0062E4  D00D               	goto	l6221
  8478                           
  8479                           ; BSR set to: 0
  8480  0062E6  0100               	movlb	0	; () banked
  8481  0062E8  1FBC               	comf	(___altofl@c+3)& (0+255),f,b
  8482  0062EA  1FBB               	comf	(___altofl@c+2)& (0+255),f,b
  8483  0062EC  1FBA               	comf	(___altofl@c+1)& (0+255),f,b
  8484  0062EE  6DB9               	negf	___altofl@c& (0+255),b
  8485  0062F0  0E00               	movlw	0
  8486  0062F2  23BA               	addwfc	(___altofl@c+1)& (0+255),f,b
  8487  0062F4  23BB               	addwfc	(___altofl@c+2)& (0+255),f,b
  8488  0062F6  23BC               	addwfc	(___altofl@c+3)& (0+255),f,b
  8489                           
  8490                           ; BSR set to: 0
  8491  0062F8  0E01               	movlw	1
  8492  0062FA  0100               	movlb	0	; () banked
  8493  0062FC  6FBD               	movwf	___altofl@sign& (0+255),b
  8494  0062FE  D000               	goto	l6221
  8495  006300                     l6221:
  8496                           
  8497                           ; BSR set to: 0
  8498  006300  C0B9  F077         	movff	___altofl@c,___flpack@arg
  8499  006304  C0BA  F078         	movff	___altofl@c+1,___flpack@arg+1
  8500  006308  C0BB  F079         	movff	___altofl@c+2,___flpack@arg+2
  8501  00630C  C0BC  F07A         	movff	___altofl@c+3,___flpack@arg+3
  8502  006310  0E96               	movlw	150
  8503  006312  0100               	movlb	0	; () banked
  8504  006314  6F7B               	movwf	___flpack@exp& (0+255),b
  8505  006316  C0BD  F07C         	movff	___altofl@sign,___flpack@sign
  8506  00631A  ECEB  F029         	call	___flpack	;wreg free
  8507  00631E  C077  F0B9         	movff	?___flpack,?___altofl
  8508  006322  C078  F0BA         	movff	?___flpack+1,?___altofl+1
  8509  006326  C079  F0BB         	movff	?___flpack+2,?___altofl+2
  8510  00632A  C07A  F0BC         	movff	?___flpack+3,?___altofl+3
  8511  00632E  0012               	return	
  8512  006330  0012               	return		;funcret
  8513  006332                     __end_of___altofl:
  8514                           	opt stack 0
  8515                           tblptru	equ	0xFF8
  8516                           tblptrh	equ	0xFF7
  8517                           tblptrl	equ	0xFF6
  8518                           tablat	equ	0xFF5
  8519                           prodh	equ	0xFF4
  8520                           prodl	equ	0xFF3
  8521                           postinc0	equ	0xFEE
  8522                           wreg	equ	0xFE8
  8523                           indf2	equ	0xFDF
  8524                           postinc2	equ	0xFDE
  8525                           postdec2	equ	0xFDD
  8526                           fsr2h	equ	0xFDA
  8527                           fsr2l	equ	0xFD9
  8528                           status	equ	0xFD8
  8529                           
  8530 ;; *************** function _eval_poly *****************
  8531 ;; Defined at:
  8532 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;  x               4   75[BANK0 ] unsigned char 
  8535 ;;  d               2   79[BANK0 ] PTR const 
  8536 ;;		 -> sin@coeff_a(20), sin@coeff_b(16), atan@coeff_a(24), atan@coeff_b(20), 
  8537 ;;  n               2   81[BANK0 ] int 
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;  res             4   87[BANK0 ] int 
  8540 ;; Return value:  Size  Location     Type
  8541 ;;                  4   75[BANK0 ] int 
  8542 ;; Registers used:
  8543 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8544 ;; Tracked objects:
  8545 ;;		On entry : 0/0
  8546 ;;		On exit  : 0/0
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8549 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;Total ram usage:       16 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; Hardware stack levels required when called:    7
  8556 ;; This function calls:
  8557 ;;		___fladd
  8558 ;;		___flmul
  8559 ;; This function is called by:
  8560 ;;		_atan
  8561 ;;		_sin
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           	psect	text24
  8566  005A2C                     __ptext24:
  8567                           	opt stack 0
  8568  005A2C                     _eval_poly:
  8569                           	opt stack 19
  8570                           
  8571                           ;incstack = 0
  8572  005A2C  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  8573  005A30  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  8574  005A34  0100               	movlb	0	; () banked
  8575  005A36  90D8               	bcf	status,0,c
  8576  005A38  37B3               	rlcf	??_eval_poly& (0+255),f,b
  8577  005A3A  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  8578  005A3C  0100               	movlb	0	; () banked
  8579  005A3E  90D8               	bcf	status,0,c
  8580  005A40  37B3               	rlcf	??_eval_poly& (0+255),f,b
  8581  005A42  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  8582  005A44  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  8583  005A48  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  8584  005A4C  0100               	movlb	0	; () banked
  8585  005A4E  51B3               	movf	??_eval_poly& (0+255),w,b
  8586  005A50  0100               	movlb	0	; () banked
  8587  005A52  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  8588  005A54  0100               	movlb	0	; () banked
  8589  005A56  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  8590  005A58  0100               	movlb	0	; () banked
  8591  005A5A  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  8592  005A5C  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  8593  005A60  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  8594  005A64                     	if	0	;tblptru may be non-zero
  8595  005A64                     	endif
  8596  005A64                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8597  005A64  0E00               	movlw	low (__mediumconst shr (0+16))
  8598  005A66  6EF8               	movwf	tblptru,c
  8599  005A68                     	endif
  8600  005A68  0009               	tblrd		*+
  8601  005A6A  CFF5 F0B7          	movff	tablat,eval_poly@res
  8602  005A6E  0009               	tblrd		*+
  8603  005A70  CFF5 F0B8          	movff	tablat,eval_poly@res+1
  8604  005A74  0009               	tblrd		*+
  8605  005A76  CFF5 F0B9          	movff	tablat,eval_poly@res+2
  8606  005A7A  000A               	tblrd		*-
  8607  005A7C  CFF5 F0BA          	movff	tablat,eval_poly@res+3
  8608  005A80  D053               	goto	l6483
  8609  005A82                     l6481:
  8610                           
  8611                           ; BSR set to: 0
  8612  005A82  C0B7  F085         	movff	eval_poly@res,___flmul@f2
  8613  005A86  C0B8  F086         	movff	eval_poly@res+1,___flmul@f2+1
  8614  005A8A  C0B9  F087         	movff	eval_poly@res+2,___flmul@f2+2
  8615  005A8E  C0BA  F088         	movff	eval_poly@res+3,___flmul@f2+3
  8616  005A92  C0AB  F081         	movff	eval_poly@x,___flmul@f1
  8617  005A96  C0AC  F082         	movff	eval_poly@x+1,___flmul@f1+1
  8618  005A9A  C0AD  F083         	movff	eval_poly@x+2,___flmul@f1+2
  8619  005A9E  C0AE  F084         	movff	eval_poly@x+3,___flmul@f1+3
  8620  005AA2  ECAB  F02A         	call	___flmul	;wreg free
  8621  005AA6  C081  F09F         	movff	?___flmul,___fladd@f1
  8622  005AAA  C082  F0A0         	movff	?___flmul+1,___fladd@f1+1
  8623  005AAE  C083  F0A1         	movff	?___flmul+2,___fladd@f1+2
  8624  005AB2  C084  F0A2         	movff	?___flmul+3,___fladd@f1+3
  8625  005AB6  0100               	movlb	0	; () banked
  8626  005AB8  07B1               	decf	eval_poly@n& (0+255),f,b
  8627  005ABA  A0D8               	btfss	status,0,c
  8628  005ABC  07B2               	decf	(eval_poly@n+1)& (0+255),f,b
  8629  005ABE  C0B1  F0B3         	movff	eval_poly@n,??_eval_poly
  8630  005AC2  C0B2  F0B4         	movff	eval_poly@n+1,??_eval_poly+1
  8631  005AC6  0100               	movlb	0	; () banked
  8632  005AC8  90D8               	bcf	status,0,c
  8633  005ACA  37B3               	rlcf	??_eval_poly& (0+255),f,b
  8634  005ACC  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  8635  005ACE  0100               	movlb	0	; () banked
  8636  005AD0  90D8               	bcf	status,0,c
  8637  005AD2  37B3               	rlcf	??_eval_poly& (0+255),f,b
  8638  005AD4  37B4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  8639  005AD6  C0AF  F0B5         	movff	eval_poly@d,??_eval_poly+2
  8640  005ADA  C0B0  F0B6         	movff	eval_poly@d+1,??_eval_poly+3
  8641  005ADE  0100               	movlb	0	; () banked
  8642  005AE0  51B3               	movf	??_eval_poly& (0+255),w,b
  8643  005AE2  0100               	movlb	0	; () banked
  8644  005AE4  27B5               	addwf	(??_eval_poly+2)& (0+255),f,b
  8645  005AE6  0100               	movlb	0	; () banked
  8646  005AE8  51B4               	movf	(??_eval_poly+1)& (0+255),w,b
  8647  005AEA  0100               	movlb	0	; () banked
  8648  005AEC  23B6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  8649  005AEE  C0B5  FFF6         	movff	??_eval_poly+2,tblptrl
  8650  005AF2  C0B6  FFF7         	movff	??_eval_poly+3,tblptrh
  8651  005AF6                     	if	0	;tblptru may be non-zero
  8652  005AF6                     	endif
  8653  005AF6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8654  005AF6  0E00               	movlw	low (__mediumconst shr (0+16))
  8655  005AF8  6EF8               	movwf	tblptru,c
  8656  005AFA                     	endif
  8657  005AFA  0009               	tblrd		*+
  8658  005AFC  CFF5 F0A3          	movff	tablat,___fladd@f2
  8659  005B00  0009               	tblrd		*+
  8660  005B02  CFF5 F0A4          	movff	tablat,___fladd@f2+1
  8661  005B06  0009               	tblrd		*+
  8662  005B08  CFF5 F0A5          	movff	tablat,___fladd@f2+2
  8663  005B0C  000A               	tblrd		*-
  8664  005B0E  CFF5 F0A6          	movff	tablat,___fladd@f2+3
  8665  005B12  EC6E  F023         	call	___fladd	;wreg free
  8666  005B16  C09F  F0B7         	movff	?___fladd,eval_poly@res
  8667  005B1A  C0A0  F0B8         	movff	?___fladd+1,eval_poly@res+1
  8668  005B1E  C0A1  F0B9         	movff	?___fladd+2,eval_poly@res+2
  8669  005B22  C0A2  F0BA         	movff	?___fladd+3,eval_poly@res+3
  8670  005B26  D000               	goto	l6483
  8671  005B28                     l6483:
  8672  005B28  0100               	movlb	0	; () banked
  8673  005B2A  51B1               	movf	eval_poly@n& (0+255),w,b
  8674  005B2C  0100               	movlb	0	; () banked
  8675  005B2E  11B2               	iorwf	(eval_poly@n+1)& (0+255),w,b
  8676  005B30  A4D8               	btfss	status,2,c
  8677  005B32  D7A7               	goto	l6481
  8678                           
  8679                           ; BSR set to: 0
  8680  005B34  C0B7  F0AB         	movff	eval_poly@res,?_eval_poly
  8681  005B38  C0B8  F0AC         	movff	eval_poly@res+1,?_eval_poly+1
  8682  005B3C  C0B9  F0AD         	movff	eval_poly@res+2,?_eval_poly+2
  8683  005B40  C0BA  F0AE         	movff	eval_poly@res+3,?_eval_poly+3
  8684                           
  8685                           ; BSR set to: 0
  8686  005B44  0012               	return		;funcret
  8687  005B46                     __end_of_eval_poly:
  8688                           	opt stack 0
  8689                           tblptru	equ	0xFF8
  8690                           tblptrh	equ	0xFF7
  8691                           tblptrl	equ	0xFF6
  8692                           tablat	equ	0xFF5
  8693                           prodh	equ	0xFF4
  8694                           prodl	equ	0xFF3
  8695                           postinc0	equ	0xFEE
  8696                           wreg	equ	0xFE8
  8697                           indf2	equ	0xFDF
  8698                           postinc2	equ	0xFDE
  8699                           postdec2	equ	0xFDD
  8700                           fsr2h	equ	0xFDA
  8701                           fsr2l	equ	0xFD9
  8702                           status	equ	0xFD8
  8703                           
  8704 ;; *************** function ___flmul *****************
  8705 ;; Defined at:
  8706 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;  f1              4   33[BANK0 ] int 
  8709 ;;  f2              4   37[BANK0 ] int 
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;  f3_as_produc    4   42[BANK0 ] unsigned long 
  8712 ;;  sign            1   47[BANK0 ] unsigned char 
  8713 ;;  cntr            1   46[BANK0 ] unsigned char 
  8714 ;;  exp             1   41[BANK0 ] unsigned char 
  8715 ;; Return value:  Size  Location     Type
  8716 ;;                  4   33[BANK0 ] unsigned char 
  8717 ;; Registers used:
  8718 ;;		wreg, status,2, status,0, cstack
  8719 ;; Tracked objects:
  8720 ;;		On entry : 0/0
  8721 ;;		On exit  : 0/0
  8722 ;;		Unchanged: 0/0
  8723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8724 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8728 ;;Total ram usage:       15 bytes
  8729 ;; Hardware stack levels used:    1
  8730 ;; Hardware stack levels required when called:    6
  8731 ;; This function calls:
  8732 ;;		___flpack
  8733 ;; This function is called by:
  8734 ;;		_park_routine
  8735 ;;		_parallelo
  8736 ;;		_matematica
  8737 ;;		_asin
  8738 ;;		_atan
  8739 ;;		_eval_poly
  8740 ;;		_sin
  8741 ;;		_sqrt
  8742 ;; This function uses a non-reentrant model
  8743 ;;
  8744                           
  8745                           	psect	text25
  8746  005556                     __ptext25:
  8747                           	opt stack 0
  8748  005556                     ___flmul:
  8749                           	opt stack 21
  8750                           
  8751                           ; BSR set to: 0
  8752                           ;incstack = 0
  8753  005556  0100               	movlb	0	; () banked
  8754  005558  3583               	rlcf	(___flmul@f1+2)& (0+255),w,b
  8755  00555A  3584               	rlcf	(___flmul@f1+3)& (0+255),w,b
  8756  00555C  0100               	movlb	0	; () banked
  8757  00555E  6F89               	movwf	___flmul@exp& (0+255),b
  8758  005560  0100               	movlb	0	; () banked
  8759  005562  5189               	movf	___flmul@exp& (0+255),w,b
  8760  005564  A4D8               	btfss	status,2,c
  8761  005566  D00A               	goto	l6299
  8762                           
  8763                           ; BSR set to: 0
  8764  005568  0E00               	movlw	0
  8765  00556A  0100               	movlb	0	; () banked
  8766  00556C  6F81               	movwf	?___flmul& (0+255),b
  8767  00556E  0E00               	movlw	0
  8768  005570  6F82               	movwf	(?___flmul+1)& (0+255),b
  8769  005572  0E00               	movlw	0
  8770  005574  6F83               	movwf	(?___flmul+2)& (0+255),b
  8771  005576  0E00               	movlw	0
  8772  005578  6F84               	movwf	(?___flmul+3)& (0+255),b
  8773                           
  8774                           ; BSR set to: 0
  8775  00557A  0012               	return	
  8776  00557C                     l6299:
  8777                           
  8778                           ; BSR set to: 0
  8779  00557C  0100               	movlb	0	; () banked
  8780  00557E  3587               	rlcf	(___flmul@f2+2)& (0+255),w,b
  8781  005580  3588               	rlcf	(___flmul@f2+3)& (0+255),w,b
  8782  005582  0100               	movlb	0	; () banked
  8783  005584  6F8F               	movwf	___flmul@sign& (0+255),b
  8784  005586  0100               	movlb	0	; () banked
  8785  005588  518F               	movf	___flmul@sign& (0+255),w,b
  8786  00558A  A4D8               	btfss	status,2,c
  8787  00558C  D00A               	goto	l6305
  8788                           
  8789                           ; BSR set to: 0
  8790  00558E  0E00               	movlw	0
  8791  005590  0100               	movlb	0	; () banked
  8792  005592  6F81               	movwf	?___flmul& (0+255),b
  8793  005594  0E00               	movlw	0
  8794  005596  6F82               	movwf	(?___flmul+1)& (0+255),b
  8795  005598  0E00               	movlw	0
  8796  00559A  6F83               	movwf	(?___flmul+2)& (0+255),b
  8797  00559C  0E00               	movlw	0
  8798  00559E  6F84               	movwf	(?___flmul+3)& (0+255),b
  8799                           
  8800                           ; BSR set to: 0
  8801  0055A0  0012               	return	
  8802  0055A2                     l6305:
  8803                           
  8804                           ; BSR set to: 0
  8805  0055A2  0100               	movlb	0	; () banked
  8806  0055A4  518F               	movf	___flmul@sign& (0+255),w,b
  8807  0055A6  0F7B               	addlw	123
  8808  0055A8  0100               	movlb	0	; () banked
  8809  0055AA  2789               	addwf	___flmul@exp& (0+255),f,b
  8810                           
  8811                           ; BSR set to: 0
  8812  0055AC  C084  F08F         	movff	___flmul@f1+3,___flmul@sign
  8813  0055B0  0100               	movlb	0	; () banked
  8814  0055B2  5188               	movf	(___flmul@f2+3)& (0+255),w,b
  8815  0055B4  0100               	movlb	0	; () banked
  8816  0055B6  1B8F               	xorwf	___flmul@sign& (0+255),f,b
  8817  0055B8  0E80               	movlw	128
  8818  0055BA  0100               	movlb	0	; () banked
  8819  0055BC  178F               	andwf	___flmul@sign& (0+255),f,b
  8820                           
  8821                           ; BSR set to: 0
  8822  0055BE  0100               	movlb	0	; () banked
  8823  0055C0  8F83               	bsf	(___flmul@f1+2)& (0+255),7,b
  8824                           
  8825                           ; BSR set to: 0
  8826  0055C2  0100               	movlb	0	; () banked
  8827  0055C4  8F87               	bsf	(___flmul@f2+2)& (0+255),7,b
  8828  0055C6  0EFF               	movlw	255
  8829  0055C8  0100               	movlb	0	; () banked
  8830  0055CA  1785               	andwf	___flmul@f2& (0+255),f,b
  8831  0055CC  0EFF               	movlw	255
  8832  0055CE  1786               	andwf	(___flmul@f2+1)& (0+255),f,b
  8833  0055D0  0EFF               	movlw	255
  8834  0055D2  1787               	andwf	(___flmul@f2+2)& (0+255),f,b
  8835  0055D4  0E00               	movlw	0
  8836  0055D6  1788               	andwf	(___flmul@f2+3)& (0+255),f,b
  8837                           
  8838                           ; BSR set to: 0
  8839  0055D8  0E00               	movlw	0
  8840  0055DA  0100               	movlb	0	; () banked
  8841  0055DC  6F8A               	movwf	___flmul@f3_as_product& (0+255),b
  8842  0055DE  0E00               	movlw	0
  8843  0055E0  6F8B               	movwf	(___flmul@f3_as_product+1)& (0+255),b
  8844  0055E2  0E00               	movlw	0
  8845  0055E4  6F8C               	movwf	(___flmul@f3_as_product+2)& (0+255),b
  8846  0055E6  0E00               	movlw	0
  8847  0055E8  6F8D               	movwf	(___flmul@f3_as_product+3)& (0+255),b
  8848                           
  8849                           ; BSR set to: 0
  8850  0055EA  0E07               	movlw	7
  8851  0055EC  0100               	movlb	0	; () banked
  8852  0055EE  6F8E               	movwf	___flmul@cntr& (0+255),b
  8853  0055F0  D000               	goto	l6317
  8854  0055F2                     l6317:
  8855                           
  8856                           ; BSR set to: 0
  8857  0055F2  0100               	movlb	0	; () banked
  8858  0055F4  A181               	btfss	___flmul@f1& (0+255),0,b
  8859  0055F6  D011               	goto	l6321
  8860                           
  8861                           ; BSR set to: 0
  8862  0055F8  0100               	movlb	0	; () banked
  8863  0055FA  5185               	movf	___flmul@f2& (0+255),w,b
  8864  0055FC  0100               	movlb	0	; () banked
  8865  0055FE  278A               	addwf	___flmul@f3_as_product& (0+255),f,b
  8866  005600  0100               	movlb	0	; () banked
  8867  005602  5186               	movf	(___flmul@f2+1)& (0+255),w,b
  8868  005604  0100               	movlb	0	; () banked
  8869  005606  238B               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8870  005608  0100               	movlb	0	; () banked
  8871  00560A  5187               	movf	(___flmul@f2+2)& (0+255),w,b
  8872  00560C  0100               	movlb	0	; () banked
  8873  00560E  238C               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8874  005610  0100               	movlb	0	; () banked
  8875  005612  5188               	movf	(___flmul@f2+3)& (0+255),w,b
  8876  005614  0100               	movlb	0	; () banked
  8877  005616  238D               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8878  005618  D000               	goto	l6321
  8879  00561A                     l6321:
  8880                           
  8881                           ; BSR set to: 0
  8882  00561A  0100               	movlb	0	; () banked
  8883  00561C  90D8               	bcf	status,0,c
  8884  00561E  3384               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8885  005620  3383               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8886  005622  3382               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8887  005624  3381               	rrcf	___flmul@f1& (0+255),f,b
  8888                           
  8889                           ; BSR set to: 0
  8890  005626  0100               	movlb	0	; () banked
  8891  005628  90D8               	bcf	status,0,c
  8892  00562A  3785               	rlcf	___flmul@f2& (0+255),f,b
  8893  00562C  3786               	rlcf	(___flmul@f2+1)& (0+255),f,b
  8894  00562E  3787               	rlcf	(___flmul@f2+2)& (0+255),f,b
  8895  005630  3788               	rlcf	(___flmul@f2+3)& (0+255),f,b
  8896                           
  8897                           ; BSR set to: 0
  8898  005632  0100               	movlb	0	; () banked
  8899  005634  2F8E               	decfsz	___flmul@cntr& (0+255),f,b
  8900  005636  D7DD               	goto	l6317
  8901  005638  D000               	goto	l6327
  8902  00563A                     l6327:
  8903                           
  8904                           ; BSR set to: 0
  8905  00563A  0E11               	movlw	17
  8906  00563C  0100               	movlb	0	; () banked
  8907  00563E  6F8E               	movwf	___flmul@cntr& (0+255),b
  8908  005640  D000               	goto	l6329
  8909  005642                     l6329:
  8910                           
  8911                           ; BSR set to: 0
  8912  005642  0100               	movlb	0	; () banked
  8913  005644  A181               	btfss	___flmul@f1& (0+255),0,b
  8914  005646  D011               	goto	l6333
  8915                           
  8916                           ; BSR set to: 0
  8917  005648  0100               	movlb	0	; () banked
  8918  00564A  5185               	movf	___flmul@f2& (0+255),w,b
  8919  00564C  0100               	movlb	0	; () banked
  8920  00564E  278A               	addwf	___flmul@f3_as_product& (0+255),f,b
  8921  005650  0100               	movlb	0	; () banked
  8922  005652  5186               	movf	(___flmul@f2+1)& (0+255),w,b
  8923  005654  0100               	movlb	0	; () banked
  8924  005656  238B               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  8925  005658  0100               	movlb	0	; () banked
  8926  00565A  5187               	movf	(___flmul@f2+2)& (0+255),w,b
  8927  00565C  0100               	movlb	0	; () banked
  8928  00565E  238C               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  8929  005660  0100               	movlb	0	; () banked
  8930  005662  5188               	movf	(___flmul@f2+3)& (0+255),w,b
  8931  005664  0100               	movlb	0	; () banked
  8932  005666  238D               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  8933  005668  D000               	goto	l6333
  8934  00566A                     l6333:
  8935                           
  8936                           ; BSR set to: 0
  8937  00566A  0100               	movlb	0	; () banked
  8938  00566C  90D8               	bcf	status,0,c
  8939  00566E  3384               	rrcf	(___flmul@f1+3)& (0+255),f,b
  8940  005670  3383               	rrcf	(___flmul@f1+2)& (0+255),f,b
  8941  005672  3382               	rrcf	(___flmul@f1+1)& (0+255),f,b
  8942  005674  3381               	rrcf	___flmul@f1& (0+255),f,b
  8943                           
  8944                           ; BSR set to: 0
  8945  005676  0100               	movlb	0	; () banked
  8946  005678  90D8               	bcf	status,0,c
  8947  00567A  338D               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
  8948  00567C  338C               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
  8949  00567E  338B               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
  8950  005680  338A               	rrcf	___flmul@f3_as_product& (0+255),f,b
  8951                           
  8952                           ; BSR set to: 0
  8953  005682  0100               	movlb	0	; () banked
  8954  005684  2F8E               	decfsz	___flmul@cntr& (0+255),f,b
  8955  005686  D7DD               	goto	l6329
  8956  005688  D000               	goto	l6339
  8957  00568A                     l6339:
  8958                           
  8959                           ; BSR set to: 0
  8960  00568A  C08A  F077         	movff	___flmul@f3_as_product,___flpack@arg
  8961  00568E  C08B  F078         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  8962  005692  C08C  F079         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  8963  005696  C08D  F07A         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  8964  00569A  C089  F07B         	movff	___flmul@exp,___flpack@exp
  8965  00569E  C08F  F07C         	movff	___flmul@sign,___flpack@sign
  8966  0056A2  ECEB  F029         	call	___flpack	;wreg free
  8967  0056A6  C077  F081         	movff	?___flpack,?___flmul
  8968  0056AA  C078  F082         	movff	?___flpack+1,?___flmul+1
  8969  0056AE  C079  F083         	movff	?___flpack+2,?___flmul+2
  8970  0056B2  C07A  F084         	movff	?___flpack+3,?___flmul+3
  8971  0056B6  0012               	return	
  8972  0056B8  0012               	return		;funcret
  8973  0056BA                     __end_of___flmul:
  8974                           	opt stack 0
  8975                           tblptru	equ	0xFF8
  8976                           tblptrh	equ	0xFF7
  8977                           tblptrl	equ	0xFF6
  8978                           tablat	equ	0xFF5
  8979                           prodh	equ	0xFF4
  8980                           prodl	equ	0xFF3
  8981                           postinc0	equ	0xFEE
  8982                           wreg	equ	0xFE8
  8983                           indf2	equ	0xFDF
  8984                           postinc2	equ	0xFDE
  8985                           postdec2	equ	0xFDD
  8986                           fsr2h	equ	0xFDA
  8987                           fsr2l	equ	0xFD9
  8988                           status	equ	0xFD8
  8989                           
  8990 ;; *************** function ___flsub *****************
  8991 ;; Defined at:
  8992 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  8993 ;; Parameters:    Size  Location     Type
  8994 ;;  f1              4  105[BANK0 ] unsigned char 
  8995 ;;  f2              4  109[BANK0 ] unsigned char 
  8996 ;; Auto vars:     Size  Location     Type
  8997 ;;		None
  8998 ;; Return value:  Size  Location     Type
  8999 ;;                  4  105[BANK0 ] unsigned char 
  9000 ;; Registers used:
  9001 ;;		wreg, status,2, status,0, cstack
  9002 ;; Tracked objects:
  9003 ;;		On entry : 0/0
  9004 ;;		On exit  : 0/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9007 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;Total ram usage:        8 bytes
  9012 ;; Hardware stack levels used:    1
  9013 ;; Hardware stack levels required when called:    7
  9014 ;; This function calls:
  9015 ;;		___fladd
  9016 ;; This function is called by:
  9017 ;;		_sin
  9018 ;;		_sqrt
  9019 ;; This function uses a non-reentrant model
  9020 ;;
  9021                           
  9022                           	psect	text26
  9023  006222                     __ptext26:
  9024                           	opt stack 0
  9025  006222                     ___flsub:
  9026                           	opt stack 20
  9027                           
  9028                           ;incstack = 0
  9029  006222  0100               	movlb	0	; () banked
  9030  006224  51CD               	movf	___flsub@f2& (0+255),w,b
  9031  006226  0100               	movlb	0	; () banked
  9032  006228  11CE               	iorwf	(___flsub@f2+1)& (0+255),w,b
  9033  00622A  0100               	movlb	0	; () banked
  9034  00622C  11CF               	iorwf	(___flsub@f2+2)& (0+255),w,b
  9035  00622E  0100               	movlb	0	; () banked
  9036  006230  11D0               	iorwf	(___flsub@f2+3)& (0+255),w,b
  9037  006232  B4D8               	btfsc	status,2,c
  9038  006234  D00A               	goto	l6469
  9039                           
  9040                           ; BSR set to: 0
  9041  006236  0E00               	movlw	0
  9042  006238  0100               	movlb	0	; () banked
  9043  00623A  1BCD               	xorwf	___flsub@f2& (0+255),f,b
  9044  00623C  0E00               	movlw	0
  9045  00623E  1BCE               	xorwf	(___flsub@f2+1)& (0+255),f,b
  9046  006240  0E00               	movlw	0
  9047  006242  1BCF               	xorwf	(___flsub@f2+2)& (0+255),f,b
  9048  006244  0E80               	movlw	128
  9049  006246  1BD0               	xorwf	(___flsub@f2+3)& (0+255),f,b
  9050  006248  D000               	goto	l6469
  9051  00624A                     l6469:
  9052                           
  9053                           ; BSR set to: 0
  9054  00624A  C0C9  F09F         	movff	___flsub@f1,___fladd@f1
  9055  00624E  C0CA  F0A0         	movff	___flsub@f1+1,___fladd@f1+1
  9056  006252  C0CB  F0A1         	movff	___flsub@f1+2,___fladd@f1+2
  9057  006256  C0CC  F0A2         	movff	___flsub@f1+3,___fladd@f1+3
  9058  00625A  C0CD  F0A3         	movff	___flsub@f2,___fladd@f2
  9059  00625E  C0CE  F0A4         	movff	___flsub@f2+1,___fladd@f2+1
  9060  006262  C0CF  F0A5         	movff	___flsub@f2+2,___fladd@f2+2
  9061  006266  C0D0  F0A6         	movff	___flsub@f2+3,___fladd@f2+3
  9062  00626A  EC6E  F023         	call	___fladd	;wreg free
  9063  00626E  C09F  F0C9         	movff	?___fladd,?___flsub
  9064  006272  C0A0  F0CA         	movff	?___fladd+1,?___flsub+1
  9065  006276  C0A1  F0CB         	movff	?___fladd+2,?___flsub+2
  9066  00627A  C0A2  F0CC         	movff	?___fladd+3,?___flsub+3
  9067  00627E  0012               	return	
  9068  006280  0012               	return		;funcret
  9069  006282                     __end_of___flsub:
  9070                           	opt stack 0
  9071                           tblptru	equ	0xFF8
  9072                           tblptrh	equ	0xFF7
  9073                           tblptrl	equ	0xFF6
  9074                           tablat	equ	0xFF5
  9075                           prodh	equ	0xFF4
  9076                           prodl	equ	0xFF3
  9077                           postinc0	equ	0xFEE
  9078                           wreg	equ	0xFE8
  9079                           indf2	equ	0xFDF
  9080                           postinc2	equ	0xFDE
  9081                           postdec2	equ	0xFDD
  9082                           fsr2h	equ	0xFDA
  9083                           fsr2l	equ	0xFD9
  9084                           status	equ	0xFD8
  9085                           
  9086 ;; *************** function ___fladd *****************
  9087 ;; Defined at:
  9088 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;  f1              4   63[BANK0 ] unsigned char 
  9091 ;;  f2              4   67[BANK0 ] unsigned char 
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;  exp1            1   74[BANK0 ] unsigned char 
  9094 ;;  exp2            1   73[BANK0 ] unsigned char 
  9095 ;;  sign            1   72[BANK0 ] unsigned char 
  9096 ;; Return value:  Size  Location     Type
  9097 ;;                  4   63[BANK0 ] unsigned char 
  9098 ;; Registers used:
  9099 ;;		wreg, status,2, status,0, cstack
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9105 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;Total ram usage:       12 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    6
  9112 ;; This function calls:
  9113 ;;		___flpack
  9114 ;; This function is called by:
  9115 ;;		_park_routine
  9116 ;;		_parallelo
  9117 ;;		_matematica
  9118 ;;		_asin
  9119 ;;		_atan
  9120 ;;		_cos
  9121 ;;		_eval_poly
  9122 ;;		___flsub
  9123 ;;		_sin
  9124 ;;		_floor
  9125 ;; This function uses a non-reentrant model
  9126 ;;
  9127                           
  9128                           	psect	text27
  9129  0046DC                     __ptext27:
  9130                           	opt stack 0
  9131  0046DC                     ___fladd:
  9132                           	opt stack 20
  9133                           
  9134                           ;incstack = 0
  9135  0046DC  0100               	movlb	0	; () banked
  9136  0046DE  35A1               	rlcf	(___fladd@f1+2)& (0+255),w,b
  9137  0046E0  35A2               	rlcf	(___fladd@f1+3)& (0+255),w,b
  9138  0046E2  0100               	movlb	0	; () banked
  9139  0046E4  6FAA               	movwf	___fladd@exp1& (0+255),b
  9140  0046E6  0100               	movlb	0	; () banked
  9141  0046E8  35A5               	rlcf	(___fladd@f2+2)& (0+255),w,b
  9142  0046EA  35A6               	rlcf	(___fladd@f2+3)& (0+255),w,b
  9143  0046EC  0100               	movlb	0	; () banked
  9144  0046EE  6FA9               	movwf	___fladd@exp2& (0+255),b
  9145  0046F0  0100               	movlb	0	; () banked
  9146  0046F2  51AA               	movf	___fladd@exp1& (0+255),w,b
  9147  0046F4  0100               	movlb	0	; () banked
  9148  0046F6  B4D8               	btfsc	status,2,c
  9149  0046F8  D011               	goto	l1149
  9150                           
  9151                           ; BSR set to: 0
  9152  0046FA  0100               	movlb	0	; () banked
  9153  0046FC  51A9               	movf	___fladd@exp2& (0+255),w,b
  9154  0046FE  0100               	movlb	0	; () banked
  9155  004700  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  9156  004702  B0D8               	btfsc	status,0,c
  9157  004704  D014               	goto	l6231
  9158                           
  9159                           ; BSR set to: 0
  9160  004706  0100               	movlb	0	; () banked
  9161  004708  51AA               	movf	___fladd@exp1& (0+255),w,b
  9162  00470A  0800               	sublw	0
  9163  00470C  0100               	movlb	0	; () banked
  9164  00470E  25A9               	addwf	___fladd@exp2& (0+255),w,b
  9165  004710  0100               	movlb	0	; () banked
  9166  004712  6FA7               	movwf	??___fladd& (0+255),b
  9167  004714  0E20               	movlw	32
  9168  004716  0100               	movlb	0	; () banked
  9169  004718  65A7               	cpfsgt	??___fladd& (0+255),b
  9170  00471A  D009               	goto	l6231
  9171  00471C                     l1149:
  9172                           
  9173                           ; BSR set to: 0
  9174  00471C  C0A3  F09F         	movff	___fladd@f2,?___fladd
  9175  004720  C0A4  F0A0         	movff	___fladd@f2+1,?___fladd+1
  9176  004724  C0A5  F0A1         	movff	___fladd@f2+2,?___fladd+2
  9177  004728  C0A6  F0A2         	movff	___fladd@f2+3,?___fladd+3
  9178  00472C  0012               	return	
  9179  00472E                     l6231:
  9180                           
  9181                           ; BSR set to: 0
  9182  00472E  0100               	movlb	0	; () banked
  9183  004730  51A9               	movf	___fladd@exp2& (0+255),w,b
  9184  004732  0100               	movlb	0	; () banked
  9185  004734  B4D8               	btfsc	status,2,c
  9186  004736  D011               	goto	l1153
  9187                           
  9188                           ; BSR set to: 0
  9189  004738  0100               	movlb	0	; () banked
  9190  00473A  51AA               	movf	___fladd@exp1& (0+255),w,b
  9191  00473C  0100               	movlb	0	; () banked
  9192  00473E  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  9193  004740  B0D8               	btfsc	status,0,c
  9194  004742  D014               	goto	l6237
  9195                           
  9196                           ; BSR set to: 0
  9197  004744  0100               	movlb	0	; () banked
  9198  004746  51A9               	movf	___fladd@exp2& (0+255),w,b
  9199  004748  0800               	sublw	0
  9200  00474A  0100               	movlb	0	; () banked
  9201  00474C  25AA               	addwf	___fladd@exp1& (0+255),w,b
  9202  00474E  0100               	movlb	0	; () banked
  9203  004750  6FA7               	movwf	??___fladd& (0+255),b
  9204  004752  0E20               	movlw	32
  9205  004754  0100               	movlb	0	; () banked
  9206  004756  65A7               	cpfsgt	??___fladd& (0+255),b
  9207  004758  D009               	goto	l6237
  9208  00475A                     l1153:
  9209                           
  9210                           ; BSR set to: 0
  9211  00475A  C09F  F09F         	movff	___fladd@f1,?___fladd
  9212  00475E  C0A0  F0A0         	movff	___fladd@f1+1,?___fladd+1
  9213  004762  C0A1  F0A1         	movff	___fladd@f1+2,?___fladd+2
  9214  004766  C0A2  F0A2         	movff	___fladd@f1+3,?___fladd+3
  9215  00476A  0012               	return	
  9216  00476C                     l6237:
  9217                           
  9218                           ; BSR set to: 0
  9219  00476C  0E06               	movlw	6
  9220  00476E  0100               	movlb	0	; () banked
  9221  004770  6FA8               	movwf	___fladd@sign& (0+255),b
  9222                           
  9223                           ; BSR set to: 0
  9224  004772  0100               	movlb	0	; () banked
  9225  004774  AFA2               	btfss	(___fladd@f1+3)& (0+255),7,b
  9226  004776  D003               	goto	l6243
  9227                           
  9228                           ; BSR set to: 0
  9229  004778  0100               	movlb	0	; () banked
  9230  00477A  8FA8               	bsf	___fladd@sign& (0+255),7,b
  9231  00477C  D000               	goto	l6243
  9232  00477E                     l6243:
  9233                           
  9234                           ; BSR set to: 0
  9235  00477E  0100               	movlb	0	; () banked
  9236  004780  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  9237  004782  D002               	goto	l1155
  9238                           
  9239                           ; BSR set to: 0
  9240  004784  0100               	movlb	0	; () banked
  9241  004786  8DA8               	bsf	___fladd@sign& (0+255),6,b
  9242  004788                     l1155:
  9243                           
  9244                           ; BSR set to: 0
  9245  004788  0100               	movlb	0	; () banked
  9246  00478A  8FA1               	bsf	(___fladd@f1+2)& (0+255),7,b
  9247                           
  9248                           ; BSR set to: 0
  9249  00478C  0EFF               	movlw	255
  9250  00478E  0100               	movlb	0	; () banked
  9251  004790  179F               	andwf	___fladd@f1& (0+255),f,b
  9252  004792  0EFF               	movlw	255
  9253  004794  17A0               	andwf	(___fladd@f1+1)& (0+255),f,b
  9254  004796  0EFF               	movlw	255
  9255  004798  17A1               	andwf	(___fladd@f1+2)& (0+255),f,b
  9256  00479A  0E00               	movlw	0
  9257  00479C  17A2               	andwf	(___fladd@f1+3)& (0+255),f,b
  9258                           
  9259                           ; BSR set to: 0
  9260  00479E  0100               	movlb	0	; () banked
  9261  0047A0  8FA5               	bsf	(___fladd@f2+2)& (0+255),7,b
  9262  0047A2  0EFF               	movlw	255
  9263  0047A4  0100               	movlb	0	; () banked
  9264  0047A6  17A3               	andwf	___fladd@f2& (0+255),f,b
  9265  0047A8  0EFF               	movlw	255
  9266  0047AA  17A4               	andwf	(___fladd@f2+1)& (0+255),f,b
  9267  0047AC  0EFF               	movlw	255
  9268  0047AE  17A5               	andwf	(___fladd@f2+2)& (0+255),f,b
  9269  0047B0  0E00               	movlw	0
  9270  0047B2  17A6               	andwf	(___fladd@f2+3)& (0+255),f,b
  9271  0047B4  0100               	movlb	0	; () banked
  9272  0047B6  51A9               	movf	___fladd@exp2& (0+255),w,b
  9273  0047B8  0100               	movlb	0	; () banked
  9274  0047BA  5DAA               	subwf	___fladd@exp1& (0+255),w,b
  9275  0047BC  B0D8               	btfsc	status,0,c
  9276  0047BE  D02A               	goto	l6261
  9277  0047C0                     l6251:
  9278                           
  9279                           ; BSR set to: 0
  9280  0047C0  0100               	movlb	0	; () banked
  9281  0047C2  90D8               	bcf	status,0,c
  9282  0047C4  37A3               	rlcf	___fladd@f2& (0+255),f,b
  9283  0047C6  37A4               	rlcf	(___fladd@f2+1)& (0+255),f,b
  9284  0047C8  37A5               	rlcf	(___fladd@f2+2)& (0+255),f,b
  9285  0047CA  37A6               	rlcf	(___fladd@f2+3)& (0+255),f,b
  9286  0047CC  0100               	movlb	0	; () banked
  9287  0047CE  07A9               	decf	___fladd@exp2& (0+255),f,b
  9288                           
  9289                           ; BSR set to: 0
  9290  0047D0  0100               	movlb	0	; () banked
  9291  0047D2  51AA               	movf	___fladd@exp1& (0+255),w,b
  9292  0047D4  0100               	movlb	0	; () banked
  9293  0047D6  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  9294  0047D8  B4D8               	btfsc	status,2,c
  9295  0047DA  D014               	goto	l6259
  9296                           
  9297                           ; BSR set to: 0
  9298  0047DC  0100               	movlb	0	; () banked
  9299  0047DE  07A8               	decf	___fladd@sign& (0+255),f,b
  9300  0047E0  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  9301  0047E4  0E07               	movlw	7
  9302  0047E6  0100               	movlb	0	; () banked
  9303  0047E8  17A7               	andwf	??___fladd& (0+255),f,b
  9304  0047EA  B4D8               	btfsc	status,2,c
  9305  0047EC  D00B               	goto	l6259
  9306  0047EE  D7E8               	goto	l6251
  9307                           
  9308                           ; BSR set to: 0
  9309                           
  9310                           ; BSR set to: 0
  9311  0047F0  D009               	goto	l6259
  9312  0047F2                     l6257:
  9313                           
  9314                           ; BSR set to: 0
  9315  0047F2  0100               	movlb	0	; () banked
  9316  0047F4  90D8               	bcf	status,0,c
  9317  0047F6  33A2               	rrcf	(___fladd@f1+3)& (0+255),f,b
  9318  0047F8  33A1               	rrcf	(___fladd@f1+2)& (0+255),f,b
  9319  0047FA  33A0               	rrcf	(___fladd@f1+1)& (0+255),f,b
  9320  0047FC  339F               	rrcf	___fladd@f1& (0+255),f,b
  9321  0047FE  0100               	movlb	0	; () banked
  9322  004800  2BAA               	incf	___fladd@exp1& (0+255),f,b
  9323  004802  D000               	goto	l6259
  9324  004804                     l6259:
  9325                           
  9326                           ; BSR set to: 0
  9327  004804  0100               	movlb	0	; () banked
  9328  004806  51A9               	movf	___fladd@exp2& (0+255),w,b
  9329  004808  0100               	movlb	0	; () banked
  9330  00480A  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  9331  00480C  B4D8               	btfsc	status,2,c
  9332  00480E  D032               	goto	l1164
  9333  004810  D7F0               	goto	l6257
  9334                           
  9335                           ; BSR set to: 0
  9336  004812  D030               	goto	l1164
  9337  004814                     l6261:
  9338                           
  9339                           ; BSR set to: 0
  9340  004814  0100               	movlb	0	; () banked
  9341  004816  51AA               	movf	___fladd@exp1& (0+255),w,b
  9342  004818  0100               	movlb	0	; () banked
  9343  00481A  5DA9               	subwf	___fladd@exp2& (0+255),w,b
  9344  00481C  B0D8               	btfsc	status,0,c
  9345  00481E  D02A               	goto	l1164
  9346  004820                     l6263:
  9347                           
  9348                           ; BSR set to: 0
  9349  004820  0100               	movlb	0	; () banked
  9350  004822  90D8               	bcf	status,0,c
  9351  004824  379F               	rlcf	___fladd@f1& (0+255),f,b
  9352  004826  37A0               	rlcf	(___fladd@f1+1)& (0+255),f,b
  9353  004828  37A1               	rlcf	(___fladd@f1+2)& (0+255),f,b
  9354  00482A  37A2               	rlcf	(___fladd@f1+3)& (0+255),f,b
  9355  00482C  0100               	movlb	0	; () banked
  9356  00482E  07AA               	decf	___fladd@exp1& (0+255),f,b
  9357                           
  9358                           ; BSR set to: 0
  9359  004830  0100               	movlb	0	; () banked
  9360  004832  51AA               	movf	___fladd@exp1& (0+255),w,b
  9361  004834  0100               	movlb	0	; () banked
  9362  004836  19A9               	xorwf	___fladd@exp2& (0+255),w,b
  9363  004838  B4D8               	btfsc	status,2,c
  9364  00483A  D014               	goto	l6271
  9365                           
  9366                           ; BSR set to: 0
  9367  00483C  0100               	movlb	0	; () banked
  9368  00483E  07A8               	decf	___fladd@sign& (0+255),f,b
  9369  004840  C0A8  F0A7         	movff	___fladd@sign,??___fladd
  9370  004844  0E07               	movlw	7
  9371  004846  0100               	movlb	0	; () banked
  9372  004848  17A7               	andwf	??___fladd& (0+255),f,b
  9373  00484A  B4D8               	btfsc	status,2,c
  9374  00484C  D00B               	goto	l6271
  9375  00484E  D7E8               	goto	l6263
  9376                           
  9377                           ; BSR set to: 0
  9378                           
  9379                           ; BSR set to: 0
  9380  004850  D009               	goto	l6271
  9381  004852                     l6269:
  9382                           
  9383                           ; BSR set to: 0
  9384  004852  0100               	movlb	0	; () banked
  9385  004854  90D8               	bcf	status,0,c
  9386  004856  33A6               	rrcf	(___fladd@f2+3)& (0+255),f,b
  9387  004858  33A5               	rrcf	(___fladd@f2+2)& (0+255),f,b
  9388  00485A  33A4               	rrcf	(___fladd@f2+1)& (0+255),f,b
  9389  00485C  33A3               	rrcf	___fladd@f2& (0+255),f,b
  9390  00485E  0100               	movlb	0	; () banked
  9391  004860  2BA9               	incf	___fladd@exp2& (0+255),f,b
  9392  004862  D000               	goto	l6271
  9393  004864                     l6271:
  9394                           
  9395                           ; BSR set to: 0
  9396  004864  0100               	movlb	0	; () banked
  9397  004866  51A9               	movf	___fladd@exp2& (0+255),w,b
  9398  004868  0100               	movlb	0	; () banked
  9399  00486A  19AA               	xorwf	___fladd@exp1& (0+255),w,b
  9400  00486C  B4D8               	btfsc	status,2,c
  9401  00486E  D002               	goto	l1164
  9402  004870  D7F0               	goto	l6269
  9403                           
  9404                           ; BSR set to: 0
  9405  004872  D000               	goto	l1164
  9406  004874                     l1164:
  9407                           
  9408                           ; BSR set to: 0
  9409  004874  0100               	movlb	0	; () banked
  9410  004876  AFA8               	btfss	___fladd@sign& (0+255),7,b
  9411  004878  D011               	goto	l6275
  9412                           
  9413                           ; BSR set to: 0
  9414  00487A  0EFF               	movlw	255
  9415  00487C  0100               	movlb	0	; () banked
  9416  00487E  1B9F               	xorwf	___fladd@f1& (0+255),f,b
  9417  004880  0EFF               	movlw	255
  9418  004882  1BA0               	xorwf	(___fladd@f1+1)& (0+255),f,b
  9419  004884  0EFF               	movlw	255
  9420  004886  1BA1               	xorwf	(___fladd@f1+2)& (0+255),f,b
  9421  004888  0EFF               	movlw	255
  9422  00488A  1BA2               	xorwf	(___fladd@f1+3)& (0+255),f,b
  9423  00488C  0E01               	movlw	1
  9424  00488E  0100               	movlb	0	; () banked
  9425  004890  279F               	addwf	___fladd@f1& (0+255),f,b
  9426  004892  0E00               	movlw	0
  9427  004894  23A0               	addwfc	(___fladd@f1+1)& (0+255),f,b
  9428  004896  23A1               	addwfc	(___fladd@f1+2)& (0+255),f,b
  9429  004898  23A2               	addwfc	(___fladd@f1+3)& (0+255),f,b
  9430  00489A  D000               	goto	l6275
  9431  00489C                     l6275:
  9432                           
  9433                           ; BSR set to: 0
  9434  00489C  0100               	movlb	0	; () banked
  9435  00489E  ADA8               	btfss	___fladd@sign& (0+255),6,b
  9436  0048A0  D011               	goto	l6279
  9437                           
  9438                           ; BSR set to: 0
  9439  0048A2  0EFF               	movlw	255
  9440  0048A4  0100               	movlb	0	; () banked
  9441  0048A6  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  9442  0048A8  0EFF               	movlw	255
  9443  0048AA  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  9444  0048AC  0EFF               	movlw	255
  9445  0048AE  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  9446  0048B0  0EFF               	movlw	255
  9447  0048B2  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  9448  0048B4  0E01               	movlw	1
  9449  0048B6  0100               	movlb	0	; () banked
  9450  0048B8  27A3               	addwf	___fladd@f2& (0+255),f,b
  9451  0048BA  0E00               	movlw	0
  9452  0048BC  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  9453  0048BE  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  9454  0048C0  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  9455  0048C2  D000               	goto	l6279
  9456  0048C4                     l6279:
  9457                           
  9458                           ; BSR set to: 0
  9459  0048C4  0E00               	movlw	0
  9460  0048C6  0100               	movlb	0	; () banked
  9461  0048C8  6FA8               	movwf	___fladd@sign& (0+255),b
  9462                           
  9463                           ; BSR set to: 0
  9464  0048CA  0100               	movlb	0	; () banked
  9465  0048CC  519F               	movf	___fladd@f1& (0+255),w,b
  9466  0048CE  0100               	movlb	0	; () banked
  9467  0048D0  27A3               	addwf	___fladd@f2& (0+255),f,b
  9468  0048D2  0100               	movlb	0	; () banked
  9469  0048D4  51A0               	movf	(___fladd@f1+1)& (0+255),w,b
  9470  0048D6  0100               	movlb	0	; () banked
  9471  0048D8  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  9472  0048DA  0100               	movlb	0	; () banked
  9473  0048DC  51A1               	movf	(___fladd@f1+2)& (0+255),w,b
  9474  0048DE  0100               	movlb	0	; () banked
  9475  0048E0  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  9476  0048E2  0100               	movlb	0	; () banked
  9477  0048E4  51A2               	movf	(___fladd@f1+3)& (0+255),w,b
  9478  0048E6  0100               	movlb	0	; () banked
  9479  0048E8  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  9480                           
  9481                           ; BSR set to: 0
  9482  0048EA  0100               	movlb	0	; () banked
  9483  0048EC  AFA6               	btfss	(___fladd@f2+3)& (0+255),7,b
  9484  0048EE  D014               	goto	l6289
  9485                           
  9486                           ; BSR set to: 0
  9487  0048F0  0EFF               	movlw	255
  9488  0048F2  0100               	movlb	0	; () banked
  9489  0048F4  1BA3               	xorwf	___fladd@f2& (0+255),f,b
  9490  0048F6  0EFF               	movlw	255
  9491  0048F8  1BA4               	xorwf	(___fladd@f2+1)& (0+255),f,b
  9492  0048FA  0EFF               	movlw	255
  9493  0048FC  1BA5               	xorwf	(___fladd@f2+2)& (0+255),f,b
  9494  0048FE  0EFF               	movlw	255
  9495  004900  1BA6               	xorwf	(___fladd@f2+3)& (0+255),f,b
  9496  004902  0E01               	movlw	1
  9497  004904  0100               	movlb	0	; () banked
  9498  004906  27A3               	addwf	___fladd@f2& (0+255),f,b
  9499  004908  0E00               	movlw	0
  9500  00490A  23A4               	addwfc	(___fladd@f2+1)& (0+255),f,b
  9501  00490C  23A5               	addwfc	(___fladd@f2+2)& (0+255),f,b
  9502  00490E  23A6               	addwfc	(___fladd@f2+3)& (0+255),f,b
  9503                           
  9504                           ; BSR set to: 0
  9505  004910  0E01               	movlw	1
  9506  004912  0100               	movlb	0	; () banked
  9507  004914  6FA8               	movwf	___fladd@sign& (0+255),b
  9508  004916  D000               	goto	l6289
  9509  004918                     l6289:
  9510                           
  9511                           ; BSR set to: 0
  9512  004918  C0A3  F077         	movff	___fladd@f2,___flpack@arg
  9513  00491C  C0A4  F078         	movff	___fladd@f2+1,___flpack@arg+1
  9514  004920  C0A5  F079         	movff	___fladd@f2+2,___flpack@arg+2
  9515  004924  C0A6  F07A         	movff	___fladd@f2+3,___flpack@arg+3
  9516  004928  C0AA  F07B         	movff	___fladd@exp1,___flpack@exp
  9517  00492C  C0A8  F07C         	movff	___fladd@sign,___flpack@sign
  9518  004930  ECEB  F029         	call	___flpack	;wreg free
  9519  004934  C077  F09F         	movff	?___flpack,?___fladd
  9520  004938  C078  F0A0         	movff	?___flpack+1,?___fladd+1
  9521  00493C  C079  F0A1         	movff	?___flpack+2,?___fladd+2
  9522  004940  C07A  F0A2         	movff	?___flpack+3,?___fladd+3
  9523  004944  0012               	return	
  9524  004946  0012               	return		;funcret
  9525  004948                     __end_of___fladd:
  9526                           	opt stack 0
  9527                           tblptru	equ	0xFF8
  9528                           tblptrh	equ	0xFF7
  9529                           tblptrl	equ	0xFF6
  9530                           tablat	equ	0xFF5
  9531                           prodh	equ	0xFF4
  9532                           prodl	equ	0xFF3
  9533                           postinc0	equ	0xFEE
  9534                           wreg	equ	0xFE8
  9535                           indf2	equ	0xFDF
  9536                           postinc2	equ	0xFDE
  9537                           postdec2	equ	0xFDD
  9538                           fsr2h	equ	0xFDA
  9539                           fsr2l	equ	0xFD9
  9540                           status	equ	0xFD8
  9541                           
  9542 ;; *************** function ___flneg *****************
  9543 ;; Defined at:
  9544 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  9545 ;; Parameters:    Size  Location     Type
  9546 ;;  f1              4   75[BANK0 ] unsigned char 
  9547 ;; Auto vars:     Size  Location     Type
  9548 ;;		None
  9549 ;; Return value:  Size  Location     Type
  9550 ;;                  4   75[BANK0 ] unsigned char 
  9551 ;; Registers used:
  9552 ;;		wreg, status,2, status,0
  9553 ;; Tracked objects:
  9554 ;;		On entry : 0/0
  9555 ;;		On exit  : 0/0
  9556 ;;		Unchanged: 0/0
  9557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9558 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9561 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9562 ;;Total ram usage:        4 bytes
  9563 ;; Hardware stack levels used:    1
  9564 ;; Hardware stack levels required when called:    5
  9565 ;; This function calls:
  9566 ;;		Nothing
  9567 ;; This function is called by:
  9568 ;;		_park_routine
  9569 ;;		_matematica
  9570 ;;		_asin
  9571 ;;		_atan
  9572 ;;		_fabs
  9573 ;;		_sin
  9574 ;; This function uses a non-reentrant model
  9575 ;;
  9576                           
  9577                           	psect	text28
  9578  0063BC                     __ptext28:
  9579                           	opt stack 0
  9580  0063BC                     ___flneg:
  9581                           	opt stack 21
  9582                           
  9583                           ;incstack = 0
  9584  0063BC  0100               	movlb	0	; () banked
  9585  0063BE  51AB               	movf	___flneg@f1& (0+255),w,b
  9586  0063C0  0100               	movlb	0	; () banked
  9587  0063C2  11AC               	iorwf	(___flneg@f1+1)& (0+255),w,b
  9588  0063C4  0100               	movlb	0	; () banked
  9589  0063C6  11AD               	iorwf	(___flneg@f1+2)& (0+255),w,b
  9590  0063C8  0100               	movlb	0	; () banked
  9591  0063CA  11AE               	iorwf	(___flneg@f1+3)& (0+255),w,b
  9592  0063CC  B4D8               	btfsc	status,2,c
  9593  0063CE  D00A               	goto	l6361
  9594                           
  9595                           ; BSR set to: 0
  9596  0063D0  0E00               	movlw	0
  9597  0063D2  0100               	movlb	0	; () banked
  9598  0063D4  1BAB               	xorwf	___flneg@f1& (0+255),f,b
  9599  0063D6  0E00               	movlw	0
  9600  0063D8  1BAC               	xorwf	(___flneg@f1+1)& (0+255),f,b
  9601  0063DA  0E00               	movlw	0
  9602  0063DC  1BAD               	xorwf	(___flneg@f1+2)& (0+255),f,b
  9603  0063DE  0E80               	movlw	128
  9604  0063E0  1BAE               	xorwf	(___flneg@f1+3)& (0+255),f,b
  9605  0063E2  D000               	goto	l6361
  9606  0063E4                     l6361:
  9607                           
  9608                           ; BSR set to: 0
  9609  0063E4  C0AB  F0AB         	movff	___flneg@f1,?___flneg
  9610  0063E8  C0AC  F0AC         	movff	___flneg@f1+1,?___flneg+1
  9611  0063EC  C0AD  F0AD         	movff	___flneg@f1+2,?___flneg+2
  9612  0063F0  C0AE  F0AE         	movff	___flneg@f1+3,?___flneg+3
  9613  0063F4  0012               	return	
  9614                           
  9615                           ; BSR set to: 0
  9616                           
  9617                           ; BSR set to: 0
  9618  0063F6  0012               	return		;funcret
  9619  0063F8                     __end_of___flneg:
  9620                           	opt stack 0
  9621                           tblptru	equ	0xFF8
  9622                           tblptrh	equ	0xFF7
  9623                           tblptrl	equ	0xFF6
  9624                           tablat	equ	0xFF5
  9625                           prodh	equ	0xFF4
  9626                           prodl	equ	0xFF3
  9627                           postinc0	equ	0xFEE
  9628                           wreg	equ	0xFE8
  9629                           indf2	equ	0xFDF
  9630                           postinc2	equ	0xFDE
  9631                           postdec2	equ	0xFDD
  9632                           fsr2h	equ	0xFDA
  9633                           fsr2l	equ	0xFD9
  9634                           status	equ	0xFD8
  9635                           
  9636 ;; *************** function ___fldiv *****************
  9637 ;; Defined at:
  9638 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  9639 ;; Parameters:    Size  Location     Type
  9640 ;;  f1              4   48[BANK0 ] unsigned char 
  9641 ;;  f2              4   52[BANK0 ] unsigned char 
  9642 ;; Auto vars:     Size  Location     Type
  9643 ;;  f3              4   56[BANK0 ] unsigned char 
  9644 ;;  sign            1   62[BANK0 ] unsigned char 
  9645 ;;  exp             1   61[BANK0 ] unsigned char 
  9646 ;;  cntr            1   60[BANK0 ] unsigned char 
  9647 ;; Return value:  Size  Location     Type
  9648 ;;                  4   48[BANK0 ] unsigned char 
  9649 ;; Registers used:
  9650 ;;		wreg, status,2, status,0, cstack
  9651 ;; Tracked objects:
  9652 ;;		On entry : 0/0
  9653 ;;		On exit  : 0/0
  9654 ;;		Unchanged: 0/0
  9655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9656 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;Total ram usage:       15 bytes
  9661 ;; Hardware stack levels used:    1
  9662 ;; Hardware stack levels required when called:    6
  9663 ;; This function calls:
  9664 ;;		___flpack
  9665 ;; This function is called by:
  9666 ;;		_park_routine
  9667 ;;		_parallelo
  9668 ;;		_matematica
  9669 ;;		_asin
  9670 ;;		_atan
  9671 ;;		_sin
  9672 ;; This function uses a non-reentrant model
  9673 ;;
  9674                           
  9675                           	psect	text29
  9676  0056BA                     __ptext29:
  9677                           	opt stack 0
  9678  0056BA                     ___fldiv:
  9679                           	opt stack 20
  9680                           
  9681                           ; BSR set to: 0
  9682                           ;incstack = 0
  9683  0056BA  0100               	movlb	0	; () banked
  9684  0056BC  3592               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  9685  0056BE  3593               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  9686  0056C0  0100               	movlb	0	; () banked
  9687  0056C2  6F9D               	movwf	___fldiv@exp& (0+255),b
  9688  0056C4  0100               	movlb	0	; () banked
  9689  0056C6  519D               	movf	___fldiv@exp& (0+255),w,b
  9690  0056C8  A4D8               	btfss	status,2,c
  9691  0056CA  D00A               	goto	l6431
  9692                           
  9693                           ; BSR set to: 0
  9694  0056CC  0E00               	movlw	0
  9695  0056CE  0100               	movlb	0	; () banked
  9696  0056D0  6F90               	movwf	?___fldiv& (0+255),b
  9697  0056D2  0E00               	movlw	0
  9698  0056D4  6F91               	movwf	(?___fldiv+1)& (0+255),b
  9699  0056D6  0E00               	movlw	0
  9700  0056D8  6F92               	movwf	(?___fldiv+2)& (0+255),b
  9701  0056DA  0E00               	movlw	0
  9702  0056DC  6F93               	movwf	(?___fldiv+3)& (0+255),b
  9703                           
  9704                           ; BSR set to: 0
  9705  0056DE  0012               	return	
  9706  0056E0                     l6431:
  9707                           
  9708                           ; BSR set to: 0
  9709  0056E0  0100               	movlb	0	; () banked
  9710  0056E2  3596               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  9711  0056E4  3597               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  9712  0056E6  0100               	movlb	0	; () banked
  9713  0056E8  6F9E               	movwf	___fldiv@sign& (0+255),b
  9714  0056EA  0100               	movlb	0	; () banked
  9715  0056EC  519E               	movf	___fldiv@sign& (0+255),w,b
  9716  0056EE  A4D8               	btfss	status,2,c
  9717  0056F0  D00A               	goto	l6437
  9718                           
  9719                           ; BSR set to: 0
  9720  0056F2  0E00               	movlw	0
  9721  0056F4  0100               	movlb	0	; () banked
  9722  0056F6  6F90               	movwf	?___fldiv& (0+255),b
  9723  0056F8  0E00               	movlw	0
  9724  0056FA  6F91               	movwf	(?___fldiv+1)& (0+255),b
  9725  0056FC  0E00               	movlw	0
  9726  0056FE  6F92               	movwf	(?___fldiv+2)& (0+255),b
  9727  005700  0E00               	movlw	0
  9728  005702  6F93               	movwf	(?___fldiv+3)& (0+255),b
  9729                           
  9730                           ; BSR set to: 0
  9731  005704  0012               	return	
  9732  005706                     l6437:
  9733                           
  9734                           ; BSR set to: 0
  9735  005706  0100               	movlb	0	; () banked
  9736  005708  519E               	movf	___fldiv@sign& (0+255),w,b
  9737  00570A  0F89               	addlw	137
  9738  00570C  0100               	movlb	0	; () banked
  9739  00570E  5F9D               	subwf	___fldiv@exp& (0+255),f,b
  9740                           
  9741                           ; BSR set to: 0
  9742  005710  C093  F09E         	movff	___fldiv@f1+3,___fldiv@sign
  9743  005714  0100               	movlb	0	; () banked
  9744  005716  5197               	movf	(___fldiv@f2+3)& (0+255),w,b
  9745  005718  0100               	movlb	0	; () banked
  9746  00571A  1B9E               	xorwf	___fldiv@sign& (0+255),f,b
  9747  00571C  0E80               	movlw	128
  9748  00571E  0100               	movlb	0	; () banked
  9749  005720  179E               	andwf	___fldiv@sign& (0+255),f,b
  9750                           
  9751                           ; BSR set to: 0
  9752  005722  0100               	movlb	0	; () banked
  9753  005724  8F92               	bsf	(___fldiv@f1+2)& (0+255),7,b
  9754                           
  9755                           ; BSR set to: 0
  9756  005726  0EFF               	movlw	255
  9757  005728  0100               	movlb	0	; () banked
  9758  00572A  1790               	andwf	___fldiv@f1& (0+255),f,b
  9759  00572C  0EFF               	movlw	255
  9760  00572E  1791               	andwf	(___fldiv@f1+1)& (0+255),f,b
  9761  005730  0EFF               	movlw	255
  9762  005732  1792               	andwf	(___fldiv@f1+2)& (0+255),f,b
  9763  005734  0E00               	movlw	0
  9764  005736  1793               	andwf	(___fldiv@f1+3)& (0+255),f,b
  9765  005738  0100               	movlb	0	; () banked
  9766  00573A  8F96               	bsf	(___fldiv@f2+2)& (0+255),7,b
  9767                           
  9768                           ; BSR set to: 0
  9769  00573C  0EFF               	movlw	255
  9770  00573E  0100               	movlb	0	; () banked
  9771  005740  1794               	andwf	___fldiv@f2& (0+255),f,b
  9772  005742  0EFF               	movlw	255
  9773  005744  1795               	andwf	(___fldiv@f2+1)& (0+255),f,b
  9774  005746  0EFF               	movlw	255
  9775  005748  1796               	andwf	(___fldiv@f2+2)& (0+255),f,b
  9776  00574A  0E00               	movlw	0
  9777  00574C  1797               	andwf	(___fldiv@f2+3)& (0+255),f,b
  9778                           
  9779                           ; BSR set to: 0
  9780  00574E  0E20               	movlw	32
  9781  005750  0100               	movlb	0	; () banked
  9782  005752  6F9C               	movwf	___fldiv@cntr& (0+255),b
  9783  005754  D000               	goto	l6449
  9784  005756                     l6449:
  9785                           
  9786                           ; BSR set to: 0
  9787  005756  0100               	movlb	0	; () banked
  9788  005758  90D8               	bcf	status,0,c
  9789  00575A  3798               	rlcf	___fldiv@f3& (0+255),f,b
  9790  00575C  3799               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  9791  00575E  379A               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  9792  005760  379B               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  9793                           
  9794                           ; BSR set to: 0
  9795  005762  0100               	movlb	0	; () banked
  9796  005764  5194               	movf	___fldiv@f2& (0+255),w,b
  9797  005766  0100               	movlb	0	; () banked
  9798  005768  5D90               	subwf	___fldiv@f1& (0+255),w,b
  9799  00576A  0100               	movlb	0	; () banked
  9800  00576C  5195               	movf	(___fldiv@f2+1)& (0+255),w,b
  9801  00576E  0100               	movlb	0	; () banked
  9802  005770  5991               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  9803  005772  0100               	movlb	0	; () banked
  9804  005774  5196               	movf	(___fldiv@f2+2)& (0+255),w,b
  9805  005776  0100               	movlb	0	; () banked
  9806  005778  5992               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  9807  00577A  0100               	movlb	0	; () banked
  9808  00577C  5197               	movf	(___fldiv@f2+3)& (0+255),w,b
  9809  00577E  0100               	movlb	0	; () banked
  9810  005780  5993               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  9811  005782  A0D8               	btfss	status,0,c
  9812  005784  D013               	goto	l6457
  9813                           
  9814                           ; BSR set to: 0
  9815  005786  0100               	movlb	0	; () banked
  9816  005788  5194               	movf	___fldiv@f2& (0+255),w,b
  9817  00578A  0100               	movlb	0	; () banked
  9818  00578C  5F90               	subwf	___fldiv@f1& (0+255),f,b
  9819  00578E  0100               	movlb	0	; () banked
  9820  005790  5195               	movf	(___fldiv@f2+1)& (0+255),w,b
  9821  005792  0100               	movlb	0	; () banked
  9822  005794  5B91               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  9823  005796  0100               	movlb	0	; () banked
  9824  005798  5196               	movf	(___fldiv@f2+2)& (0+255),w,b
  9825  00579A  0100               	movlb	0	; () banked
  9826  00579C  5B92               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  9827  00579E  0100               	movlb	0	; () banked
  9828  0057A0  5197               	movf	(___fldiv@f2+3)& (0+255),w,b
  9829  0057A2  0100               	movlb	0	; () banked
  9830  0057A4  5B93               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  9831                           
  9832                           ; BSR set to: 0
  9833  0057A6  0100               	movlb	0	; () banked
  9834  0057A8  8198               	bsf	___fldiv@f3& (0+255),0,b
  9835  0057AA  D000               	goto	l6457
  9836  0057AC                     l6457:
  9837                           
  9838                           ; BSR set to: 0
  9839  0057AC  0100               	movlb	0	; () banked
  9840  0057AE  90D8               	bcf	status,0,c
  9841  0057B0  3790               	rlcf	___fldiv@f1& (0+255),f,b
  9842  0057B2  3791               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  9843  0057B4  3792               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  9844  0057B6  3793               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  9845                           
  9846                           ; BSR set to: 0
  9847  0057B8  0100               	movlb	0	; () banked
  9848  0057BA  2F9C               	decfsz	___fldiv@cntr& (0+255),f,b
  9849  0057BC  D7CC               	goto	l6449
  9850  0057BE  D000               	goto	l6461
  9851  0057C0                     l6461:
  9852                           
  9853                           ; BSR set to: 0
  9854  0057C0  C098  F077         	movff	___fldiv@f3,___flpack@arg
  9855  0057C4  C099  F078         	movff	___fldiv@f3+1,___flpack@arg+1
  9856  0057C8  C09A  F079         	movff	___fldiv@f3+2,___flpack@arg+2
  9857  0057CC  C09B  F07A         	movff	___fldiv@f3+3,___flpack@arg+3
  9858  0057D0  C09D  F07B         	movff	___fldiv@exp,___flpack@exp
  9859  0057D4  C09E  F07C         	movff	___fldiv@sign,___flpack@sign
  9860  0057D8  ECEB  F029         	call	___flpack	;wreg free
  9861  0057DC  C077  F090         	movff	?___flpack,?___fldiv
  9862  0057E0  C078  F091         	movff	?___flpack+1,?___fldiv+1
  9863  0057E4  C079  F092         	movff	?___flpack+2,?___fldiv+2
  9864  0057E8  C07A  F093         	movff	?___flpack+3,?___fldiv+3
  9865  0057EC  0012               	return	
  9866  0057EE  0012               	return		;funcret
  9867  0057F0                     __end_of___fldiv:
  9868                           	opt stack 0
  9869                           tblptru	equ	0xFF8
  9870                           tblptrh	equ	0xFF7
  9871                           tblptrl	equ	0xFF6
  9872                           tablat	equ	0xFF5
  9873                           prodh	equ	0xFF4
  9874                           prodl	equ	0xFF3
  9875                           postinc0	equ	0xFEE
  9876                           wreg	equ	0xFE8
  9877                           indf2	equ	0xFDF
  9878                           postinc2	equ	0xFDE
  9879                           postdec2	equ	0xFDD
  9880                           fsr2h	equ	0xFDA
  9881                           fsr2l	equ	0xFD9
  9882                           status	equ	0xFD8
  9883                           
  9884 ;; *************** function ___lwtofl *****************
  9885 ;; Defined at:
  9886 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;  c               2   33[BANK0 ] unsigned int 
  9889 ;; Auto vars:     Size  Location     Type
  9890 ;;		None
  9891 ;; Return value:  Size  Location     Type
  9892 ;;                  4   33[BANK0 ] unsigned int 
  9893 ;; Registers used:
  9894 ;;		wreg, status,2, status,0, cstack
  9895 ;; Tracked objects:
  9896 ;;		On entry : 0/0
  9897 ;;		On exit  : 0/0
  9898 ;;		Unchanged: 0/0
  9899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9900 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;Total ram usage:        4 bytes
  9905 ;; Hardware stack levels used:    1
  9906 ;; Hardware stack levels required when called:    6
  9907 ;; This function calls:
  9908 ;;		___flpack
  9909 ;; This function is called by:
  9910 ;;		_park_search
  9911 ;;		_park_routine
  9912 ;; This function uses a non-reentrant model
  9913 ;;
  9914                           
  9915                           	psect	text30
  9916  0064A2                     __ptext30:
  9917                           	opt stack 0
  9918  0064A2                     ___lwtofl:
  9919                           	opt stack 23
  9920                           
  9921                           ;incstack = 0
  9922  0064A2  C081  F077         	movff	___lwtofl@c,___flpack@arg
  9923  0064A6  C082  F078         	movff	___lwtofl@c+1,___flpack@arg+1
  9924  0064AA  0100               	movlb	0	; () banked
  9925  0064AC  6B79               	clrf	(___flpack@arg+2)& (0+255),b
  9926  0064AE  6B7A               	clrf	(___flpack@arg+3)& (0+255),b
  9927  0064B0  0E96               	movlw	150
  9928  0064B2  0100               	movlb	0	; () banked
  9929  0064B4  6F7B               	movwf	___flpack@exp& (0+255),b
  9930  0064B6  0E00               	movlw	0
  9931  0064B8  0100               	movlb	0	; () banked
  9932  0064BA  6F7C               	movwf	___flpack@sign& (0+255),b
  9933  0064BC  ECEB  F029         	call	___flpack	;wreg free
  9934  0064C0  C077  F081         	movff	?___flpack,?___lwtofl
  9935  0064C4  C078  F082         	movff	?___flpack+1,?___lwtofl+1
  9936  0064C8  C079  F083         	movff	?___flpack+2,?___lwtofl+2
  9937  0064CC  C07A  F084         	movff	?___flpack+3,?___lwtofl+3
  9938  0064D0  0012               	return	
  9939  0064D2  0012               	return		;funcret
  9940  0064D4                     __end_of___lwtofl:
  9941                           	opt stack 0
  9942                           tblptru	equ	0xFF8
  9943                           tblptrh	equ	0xFF7
  9944                           tblptrl	equ	0xFF6
  9945                           tablat	equ	0xFF5
  9946                           prodh	equ	0xFF4
  9947                           prodl	equ	0xFF3
  9948                           postinc0	equ	0xFEE
  9949                           wreg	equ	0xFE8
  9950                           indf2	equ	0xFDF
  9951                           postinc2	equ	0xFDE
  9952                           postdec2	equ	0xFDD
  9953                           fsr2h	equ	0xFDA
  9954                           fsr2l	equ	0xFD9
  9955                           status	equ	0xFD8
  9956                           
  9957 ;; *************** function ___flpack *****************
  9958 ;; Defined at:
  9959 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  9960 ;; Parameters:    Size  Location     Type
  9961 ;;  arg             4   23[BANK0 ] unsigned long 
  9962 ;;  exp             1   27[BANK0 ] unsigned char 
  9963 ;;  sign            1   28[BANK0 ] unsigned char 
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;		None
  9966 ;; Return value:  Size  Location     Type
  9967 ;;                  4   23[BANK0 ] unsigned char 
  9968 ;; Registers used:
  9969 ;;		wreg, status,2, status,0
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9975 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;Total ram usage:       10 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; Hardware stack levels required when called:    5
  9982 ;; This function calls:
  9983 ;;		Nothing
  9984 ;; This function is called by:
  9985 ;;		___altofl
  9986 ;;		___awtofl
  9987 ;;		___fladd
  9988 ;;		___fldiv
  9989 ;;		___flmul
  9990 ;;		___lwtofl
  9991 ;; This function uses a non-reentrant model
  9992 ;;
  9993                           
  9994                           	psect	text31
  9995  0053D6                     __ptext31:
  9996                           	opt stack 0
  9997  0053D6                     ___flpack:
  9998                           	opt stack 20
  9999                           
 10000                           ;incstack = 0
 10001  0053D6  0100               	movlb	0	; () banked
 10002  0053D8  517B               	movf	___flpack@exp& (0+255),w,b
 10003  0053DA  0100               	movlb	0	; () banked
 10004  0053DC  B4D8               	btfsc	status,2,c
 10005  0053DE  D00A               	goto	l6183
 10006                           
 10007                           ; BSR set to: 0
 10008  0053E0  0100               	movlb	0	; () banked
 10009  0053E2  5177               	movf	___flpack@arg& (0+255),w,b
 10010  0053E4  0100               	movlb	0	; () banked
 10011  0053E6  1178               	iorwf	(___flpack@arg+1)& (0+255),w,b
 10012  0053E8  0100               	movlb	0	; () banked
 10013  0053EA  1179               	iorwf	(___flpack@arg+2)& (0+255),w,b
 10014  0053EC  0100               	movlb	0	; () banked
 10015  0053EE  117A               	iorwf	(___flpack@arg+3)& (0+255),w,b
 10016  0053F0  A4D8               	btfss	status,2,c
 10017  0053F2  D014               	goto	l6189
 10018  0053F4                     l6183:
 10019                           
 10020                           ; BSR set to: 0
 10021  0053F4  0E00               	movlw	0
 10022  0053F6  0100               	movlb	0	; () banked
 10023  0053F8  6F77               	movwf	?___flpack& (0+255),b
 10024  0053FA  0E00               	movlw	0
 10025  0053FC  6F78               	movwf	(?___flpack+1)& (0+255),b
 10026  0053FE  0E00               	movlw	0
 10027  005400  6F79               	movwf	(?___flpack+2)& (0+255),b
 10028  005402  0E00               	movlw	0
 10029  005404  6F7A               	movwf	(?___flpack+3)& (0+255),b
 10030                           
 10031                           ; BSR set to: 0
 10032  005406  0012               	return	
 10033                           
 10034                           ; BSR set to: 0
 10035  005408  D009               	goto	l6189
 10036  00540A                     l6187:
 10037                           
 10038                           ; BSR set to: 0
 10039  00540A  0100               	movlb	0	; () banked
 10040  00540C  2B7B               	incf	___flpack@exp& (0+255),f,b
 10041  00540E  0100               	movlb	0	; () banked
 10042  005410  90D8               	bcf	status,0,c
 10043  005412  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
 10044  005414  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
 10045  005416  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
 10046  005418  3377               	rrcf	___flpack@arg& (0+255),f,b
 10047  00541A  D000               	goto	l6189
 10048  00541C                     l6189:
 10049                           
 10050                           ; BSR set to: 0
 10051  00541C  0E00               	movlw	0
 10052  00541E  0100               	movlb	0	; () banked
 10053  005420  1577               	andwf	___flpack@arg& (0+255),w,b
 10054  005422  0100               	movlb	0	; () banked
 10055  005424  6F7D               	movwf	??___flpack& (0+255),b
 10056  005426  0E00               	movlw	0
 10057  005428  0100               	movlb	0	; () banked
 10058  00542A  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
 10059  00542C  0100               	movlb	0	; () banked
 10060  00542E  6F7E               	movwf	(??___flpack+1)& (0+255),b
 10061  005430  0E00               	movlw	0
 10062  005432  0100               	movlb	0	; () banked
 10063  005434  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
 10064  005436  0100               	movlb	0	; () banked
 10065  005438  6F7F               	movwf	(??___flpack+2)& (0+255),b
 10066  00543A  0EFE               	movlw	254
 10067  00543C  0100               	movlb	0	; () banked
 10068  00543E  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
 10069  005440  0100               	movlb	0	; () banked
 10070  005442  6F80               	movwf	(??___flpack+3)& (0+255),b
 10071  005444  0100               	movlb	0	; () banked
 10072  005446  517D               	movf	??___flpack& (0+255),w,b
 10073  005448  0100               	movlb	0	; () banked
 10074  00544A  117E               	iorwf	(??___flpack+1)& (0+255),w,b
 10075  00544C  0100               	movlb	0	; () banked
 10076  00544E  117F               	iorwf	(??___flpack+2)& (0+255),w,b
 10077  005450  0100               	movlb	0	; () banked
 10078  005452  1180               	iorwf	(??___flpack+3)& (0+255),w,b
 10079  005454  B4D8               	btfsc	status,2,c
 10080  005456  D011               	goto	l1121
 10081  005458  D7D8               	goto	l6187
 10082                           
 10083                           ; BSR set to: 0
 10084  00545A  D00F               	goto	l1121
 10085  00545C                     l6191:
 10086                           
 10087                           ; BSR set to: 0
 10088  00545C  0100               	movlb	0	; () banked
 10089  00545E  2B7B               	incf	___flpack@exp& (0+255),f,b
 10090                           
 10091                           ; BSR set to: 0
 10092  005460  0E01               	movlw	1
 10093  005462  0100               	movlb	0	; () banked
 10094  005464  2777               	addwf	___flpack@arg& (0+255),f,b
 10095  005466  0E00               	movlw	0
 10096  005468  2378               	addwfc	(___flpack@arg+1)& (0+255),f,b
 10097  00546A  2379               	addwfc	(___flpack@arg+2)& (0+255),f,b
 10098  00546C  237A               	addwfc	(___flpack@arg+3)& (0+255),f,b
 10099                           
 10100                           ; BSR set to: 0
 10101  00546E  0100               	movlb	0	; () banked
 10102  005470  90D8               	bcf	status,0,c
 10103  005472  337A               	rrcf	(___flpack@arg+3)& (0+255),f,b
 10104  005474  3379               	rrcf	(___flpack@arg+2)& (0+255),f,b
 10105  005476  3378               	rrcf	(___flpack@arg+1)& (0+255),f,b
 10106  005478  3377               	rrcf	___flpack@arg& (0+255),f,b
 10107  00547A                     l1121:
 10108                           
 10109                           ; BSR set to: 0
 10110  00547A  0E00               	movlw	0
 10111  00547C  0100               	movlb	0	; () banked
 10112  00547E  1577               	andwf	___flpack@arg& (0+255),w,b
 10113  005480  0100               	movlb	0	; () banked
 10114  005482  6F7D               	movwf	??___flpack& (0+255),b
 10115  005484  0E00               	movlw	0
 10116  005486  0100               	movlb	0	; () banked
 10117  005488  1578               	andwf	(___flpack@arg+1)& (0+255),w,b
 10118  00548A  0100               	movlb	0	; () banked
 10119  00548C  6F7E               	movwf	(??___flpack+1)& (0+255),b
 10120  00548E  0E00               	movlw	0
 10121  005490  0100               	movlb	0	; () banked
 10122  005492  1579               	andwf	(___flpack@arg+2)& (0+255),w,b
 10123  005494  0100               	movlb	0	; () banked
 10124  005496  6F7F               	movwf	(??___flpack+2)& (0+255),b
 10125  005498  0EFF               	movlw	255
 10126  00549A  0100               	movlb	0	; () banked
 10127  00549C  157A               	andwf	(___flpack@arg+3)& (0+255),w,b
 10128  00549E  0100               	movlb	0	; () banked
 10129  0054A0  6F80               	movwf	(??___flpack+3)& (0+255),b
 10130  0054A2  0100               	movlb	0	; () banked
 10131  0054A4  517D               	movf	??___flpack& (0+255),w,b
 10132  0054A6  0100               	movlb	0	; () banked
 10133  0054A8  117E               	iorwf	(??___flpack+1)& (0+255),w,b
 10134  0054AA  0100               	movlb	0	; () banked
 10135  0054AC  117F               	iorwf	(??___flpack+2)& (0+255),w,b
 10136  0054AE  0100               	movlb	0	; () banked
 10137  0054B0  1180               	iorwf	(??___flpack+3)& (0+255),w,b
 10138  0054B2  B4D8               	btfsc	status,2,c
 10139  0054B4  D00B               	goto	l6199
 10140  0054B6  D7D2               	goto	l6191
 10141                           
 10142                           ; BSR set to: 0
 10143  0054B8  D009               	goto	l6199
 10144  0054BA                     l6197:
 10145                           
 10146                           ; BSR set to: 0
 10147  0054BA  0100               	movlb	0	; () banked
 10148  0054BC  077B               	decf	___flpack@exp& (0+255),f,b
 10149  0054BE  0100               	movlb	0	; () banked
 10150  0054C0  90D8               	bcf	status,0,c
 10151  0054C2  3777               	rlcf	___flpack@arg& (0+255),f,b
 10152  0054C4  3778               	rlcf	(___flpack@arg+1)& (0+255),f,b
 10153  0054C6  3779               	rlcf	(___flpack@arg+2)& (0+255),f,b
 10154  0054C8  377A               	rlcf	(___flpack@arg+3)& (0+255),f,b
 10155  0054CA  D000               	goto	l6199
 10156  0054CC                     l6199:
 10157                           
 10158                           ; BSR set to: 0
 10159  0054CC  0100               	movlb	0	; () banked
 10160  0054CE  BF79               	btfsc	(___flpack@arg+2)& (0+255),7,b
 10161  0054D0  D005               	goto	l1128
 10162                           
 10163                           ; BSR set to: 0
 10164  0054D2  0E02               	movlw	2
 10165  0054D4  0100               	movlb	0	; () banked
 10166  0054D6  617B               	cpfslt	___flpack@exp& (0+255),b
 10167  0054D8  D7F0               	goto	l6197
 10168  0054DA  D000               	goto	l1128
 10169  0054DC                     l1128:
 10170                           
 10171                           ; BSR set to: 0
 10172  0054DC  0100               	movlb	0	; () banked
 10173  0054DE  B17B               	btfsc	___flpack@exp& (0+255),0,b
 10174  0054E0  D009               	goto	l1129
 10175                           
 10176                           ; BSR set to: 0
 10177  0054E2  0EFF               	movlw	255
 10178  0054E4  0100               	movlb	0	; () banked
 10179  0054E6  1777               	andwf	___flpack@arg& (0+255),f,b
 10180  0054E8  0EFF               	movlw	255
 10181  0054EA  1778               	andwf	(___flpack@arg+1)& (0+255),f,b
 10182  0054EC  0E7F               	movlw	127
 10183  0054EE  1779               	andwf	(___flpack@arg+2)& (0+255),f,b
 10184  0054F0  0EFF               	movlw	255
 10185  0054F2  177A               	andwf	(___flpack@arg+3)& (0+255),f,b
 10186  0054F4                     l1129:
 10187                           
 10188                           ; BSR set to: 0
 10189  0054F4  0100               	movlb	0	; () banked
 10190  0054F6  90D8               	bcf	status,0,c
 10191  0054F8  337B               	rrcf	___flpack@exp& (0+255),f,b
 10192  0054FA  C07B  F07D         	movff	___flpack@exp,??___flpack
 10193  0054FE  0100               	movlb	0	; () banked
 10194  005500  6B7E               	clrf	(??___flpack+1)& (0+255),b
 10195  005502  6B7F               	clrf	(??___flpack+2)& (0+255),b
 10196  005504  6B80               	clrf	(??___flpack+3)& (0+255),b
 10197  005506  C07D  F080         	movff	??___flpack,??___flpack+3
 10198  00550A  0100               	movlb	0	; () banked
 10199  00550C  6B7F               	clrf	(??___flpack+2)& (0+255),b
 10200  00550E  6B7E               	clrf	(??___flpack+1)& (0+255),b
 10201  005510  6B7D               	clrf	??___flpack& (0+255),b
 10202  005512  0100               	movlb	0	; () banked
 10203  005514  517D               	movf	??___flpack& (0+255),w,b
 10204  005516  0100               	movlb	0	; () banked
 10205  005518  1377               	iorwf	___flpack@arg& (0+255),f,b
 10206  00551A  0100               	movlb	0	; () banked
 10207  00551C  517E               	movf	(??___flpack+1)& (0+255),w,b
 10208  00551E  0100               	movlb	0	; () banked
 10209  005520  1378               	iorwf	(___flpack@arg+1)& (0+255),f,b
 10210  005522  0100               	movlb	0	; () banked
 10211  005524  517F               	movf	(??___flpack+2)& (0+255),w,b
 10212  005526  0100               	movlb	0	; () banked
 10213  005528  1379               	iorwf	(___flpack@arg+2)& (0+255),f,b
 10214  00552A  0100               	movlb	0	; () banked
 10215  00552C  5180               	movf	(??___flpack+3)& (0+255),w,b
 10216  00552E  0100               	movlb	0	; () banked
 10217  005530  137A               	iorwf	(___flpack@arg+3)& (0+255),f,b
 10218                           
 10219                           ; BSR set to: 0
 10220  005532  0100               	movlb	0	; () banked
 10221  005534  517C               	movf	___flpack@sign& (0+255),w,b
 10222  005536  0100               	movlb	0	; () banked
 10223  005538  B4D8               	btfsc	status,2,c
 10224  00553A  D003               	goto	l6209
 10225                           
 10226                           ; BSR set to: 0
 10227  00553C  0100               	movlb	0	; () banked
 10228  00553E  8F7A               	bsf	(___flpack@arg+3)& (0+255),7,b
 10229  005540  D000               	goto	l6209
 10230  005542                     l6209:
 10231                           
 10232                           ; BSR set to: 0
 10233  005542  C077  F077         	movff	___flpack@arg,?___flpack
 10234  005546  C078  F078         	movff	___flpack@arg+1,?___flpack+1
 10235  00554A  C079  F079         	movff	___flpack@arg+2,?___flpack+2
 10236  00554E  C07A  F07A         	movff	___flpack@arg+3,?___flpack+3
 10237  005552  0012               	return	
 10238                           
 10239                           ; BSR set to: 0
 10240                           
 10241                           ; BSR set to: 0
 10242  005554  0012               	return		;funcret
 10243  005556                     __end_of___flpack:
 10244                           	opt stack 0
 10245                           tblptru	equ	0xFF8
 10246                           tblptrh	equ	0xFF7
 10247                           tblptrl	equ	0xFF6
 10248                           tablat	equ	0xFF5
 10249                           prodh	equ	0xFF4
 10250                           prodl	equ	0xFF3
 10251                           postinc0	equ	0xFEE
 10252                           wreg	equ	0xFE8
 10253                           indf2	equ	0xFDF
 10254                           postinc2	equ	0xFDE
 10255                           postdec2	equ	0xFDD
 10256                           fsr2h	equ	0xFDA
 10257                           fsr2l	equ	0xFD9
 10258                           status	equ	0xFD8
 10259                           
 10260 ;; *************** function _configurations *****************
 10261 ;; Defined at:
 10262 ;;		line 528 in file "parcheggio.c"
 10263 ;; Parameters:    Size  Location     Type
 10264 ;;		None
 10265 ;; Auto vars:     Size  Location     Type
 10266 ;;		None
 10267 ;; Return value:  Size  Location     Type
 10268 ;;		None               void
 10269 ;; Registers used:
 10270 ;;		wreg, status,2, status,0, cstack
 10271 ;; Tracked objects:
 10272 ;;		On entry : 0/0
 10273 ;;		On exit  : 0/0
 10274 ;;		Unchanged: 0/0
 10275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10280 ;;Total ram usage:        0 bytes
 10281 ;; Hardware stack levels used:    1
 10282 ;; Hardware stack levels required when called:    7
 10283 ;; This function calls:
 10284 ;;		_CANInitialize
 10285 ;; This function is called by:
 10286 ;;		_main
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290                           	psect	text32
 10291  0061B6                     __ptext32:
 10292                           	opt stack 0
 10293  0061B6                     _configurations:
 10294                           	opt stack 23
 10295                           
 10296                           ;parcheggio.c: 529: LATA = 0x00;
 10297                           
 10298                           ; BSR set to: 0
 10299                           ;incstack = 0
 10300  0061B6  0E00               	movlw	0
 10301  0061B8  6E89               	movwf	3977,c	;volatile
 10302                           
 10303                           ;parcheggio.c: 530: TRISA = 0b11110000;
 10304  0061BA  0EF0               	movlw	240
 10305  0061BC  6E92               	movwf	3986,c	;volatile
 10306                           
 10307                           ;parcheggio.c: 531: LATB = 0x00;
 10308  0061BE  0E00               	movlw	0
 10309  0061C0  6E8A               	movwf	3978,c	;volatile
 10310                           
 10311                           ;parcheggio.c: 532: TRISB = 0b10001010;
 10312  0061C2  0E8A               	movlw	138
 10313  0061C4  6E93               	movwf	3987,c	;volatile
 10314                           
 10315                           ;parcheggio.c: 533: LATC = 0x00;
 10316  0061C6  0E00               	movlw	0
 10317  0061C8  6E8B               	movwf	3979,c	;volatile
 10318                           
 10319                           ;parcheggio.c: 534: TRISC = 0b11111111;
 10320  0061CA  6894               	setf	3988,c	;volatile
 10321                           
 10322                           ;parcheggio.c: 536: ADCON1 = 0xFF;
 10323  0061CC  68C1               	setf	4033,c	;volatile
 10324                           
 10325                           ;parcheggio.c: 537: CANInitialize(4, 6, 5, 1, 3, CAN_CONFIG_LINE_FILTER_OFF & CAN_CONFIG
      +                          _SAMPLE_ONCE & CAN_CONFIG_ALL_VALID_MSG & CAN_CONFIG_DBL_BUFFER_ON);
 10326  0061CE  0E06               	movlw	6
 10327  0061D0  0100               	movlb	0	; () banked
 10328  0061D2  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
 10329  0061D4  0E05               	movlw	5
 10330  0061D6  0100               	movlb	0	; () banked
 10331  0061D8  6F86               	movwf	CANInitialize@phaseSeg2& (0+255),b
 10332  0061DA  0E01               	movlw	1
 10333  0061DC  0100               	movlb	0	; () banked
 10334  0061DE  6F87               	movwf	CANInitialize@SJW& (0+255),b
 10335  0061E0  0E03               	movlw	3
 10336  0061E2  0100               	movlb	0	; () banked
 10337  0061E4  6F88               	movwf	CANInitialize@BRP& (0+255),b
 10338  0061E6  0E9D               	movlw	157
 10339  0061E8  0100               	movlb	0	; () banked
 10340  0061EA  6F89               	movwf	CANInitialize@flags& (0+255),b
 10341  0061EC  0E04               	movlw	4
 10342  0061EE  EC04  F029         	call	_CANInitialize
 10343                           
 10344                           ;parcheggio.c: 540: RCONbits.IPEN = 1;
 10345  0061F2  8ED0               	bsf	4048,7,c	;volatile
 10346                           
 10347                           ;parcheggio.c: 541: IPR3bits.RXB1IP = 0;
 10348  0061F4  92A5               	bcf	4005,1,c	;volatile
 10349                           
 10350                           ;parcheggio.c: 542: IPR3bits.RXB0IP = 0;
 10351  0061F6  90A5               	bcf	4005,0,c	;volatile
 10352                           
 10353                           ;parcheggio.c: 543: INTCON2bits.TMR0IP = 0;
 10354  0061F8  94F1               	bcf	intcon2,2,c	;volatile
 10355                           
 10356                           ;parcheggio.c: 546: PIR3bits.RXB1IF = 0;
 10357  0061FA  92A4               	bcf	4004,1,c	;volatile
 10358                           
 10359                           ;parcheggio.c: 547: PIR3bits.RXB0IF = 0;
 10360  0061FC  90A4               	bcf	4004,0,c	;volatile
 10361                           
 10362                           ;parcheggio.c: 548: INTCONbits.INT0IF = 0;
 10363  0061FE  92F2               	bcf	intcon,1,c	;volatile
 10364                           
 10365                           ;parcheggio.c: 549: INTCONbits.TMR0IF = 0;
 10366  006200  94F2               	bcf	intcon,2,c	;volatile
 10367                           
 10368                           ;parcheggio.c: 553: PIE3bits.RXB1IE = 1;
 10369  006202  82A3               	bsf	4003,1,c	;volatile
 10370                           
 10371                           ;parcheggio.c: 554: PIE3bits.RXB0IE = 1;
 10372  006204  80A3               	bsf	4003,0,c	;volatile
 10373                           
 10374                           ;parcheggio.c: 555: INTCONbits.TMR0IE = 1;
 10375  006206  8AF2               	bsf	intcon,5,c	;volatile
 10376                           
 10377                           ;parcheggio.c: 556: INTCONbits.INT0IE = 0;
 10378  006208  98F2               	bcf	intcon,4,c	;volatile
 10379                           
 10380                           ;parcheggio.c: 559: T0CON = 0x80;
 10381  00620A  0E80               	movlw	128
 10382  00620C  6ED5               	movwf	4053,c	;volatile
 10383                           
 10384                           ;parcheggio.c: 560: TMR0H = 0x34;
 10385  00620E  0E34               	movlw	52
 10386  006210  6ED7               	movwf	4055,c	;volatile
 10387                           
 10388                           ;parcheggio.c: 561: TMR0L = 0xE0;
 10389  006212  0EE0               	movlw	224
 10390  006214  6ED6               	movwf	4054,c	;volatile
 10391                           
 10392                           ;parcheggio.c: 562: T3CON = 0x11;
 10393  006216  0E11               	movlw	17
 10394  006218  6EB1               	movwf	4017,c	;volatile
 10395                           
 10396                           ;parcheggio.c: 564: INTCON2bits.INTEDG0 = 1;
 10397  00621A  8CF1               	bsf	intcon2,6,c	;volatile
 10398                           
 10399                           ;parcheggio.c: 565: INTCONbits.GIEL = 1;
 10400  00621C  8CF2               	bsf	intcon,6,c	;volatile
 10401                           
 10402                           ;parcheggio.c: 566: INTCONbits.GIEH = 1;
 10403  00621E  8EF2               	bsf	intcon,7,c	;volatile
 10404  006220  0012               	return		;funcret
 10405  006222                     __end_of_configurations:
 10406                           	opt stack 0
 10407                           tblptru	equ	0xFF8
 10408                           tblptrh	equ	0xFF7
 10409                           tblptrl	equ	0xFF6
 10410                           tablat	equ	0xFF5
 10411                           prodh	equ	0xFF4
 10412                           prodl	equ	0xFF3
 10413                           intcon	equ	0xFF2
 10414                           intcon2	equ	0xFF1
 10415                           postinc0	equ	0xFEE
 10416                           wreg	equ	0xFE8
 10417                           indf2	equ	0xFDF
 10418                           postinc2	equ	0xFDE
 10419                           postdec2	equ	0xFDD
 10420                           fsr2h	equ	0xFDA
 10421                           fsr2l	equ	0xFD9
 10422                           status	equ	0xFD8
 10423                           
 10424 ;; *************** function _CANInitialize *****************
 10425 ;; Defined at:
 10426 ;;		line 218 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 10427 ;; Parameters:    Size  Location     Type
 10428 ;;  propSeg         1    wreg     unsigned char 
 10429 ;;  phaseSeg1       1   37[BANK0 ] unsigned char 
 10430 ;;  phaseSeg2       1   38[BANK0 ] unsigned char 
 10431 ;;  SJW             1   39[BANK0 ] unsigned char 
 10432 ;;  BRP             1   40[BANK0 ] unsigned char 
 10433 ;;  flags           1   41[BANK0 ] enum E16354
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;  propSeg         1   46[BANK0 ] unsigned char 
 10436 ;;  FilterConfig    1   48[BANK0 ] unsigned char 
 10437 ;;  FilterConfig    1   47[BANK0 ] unsigned char 
 10438 ;; Return value:  Size  Location     Type
 10439 ;;		None               void
 10440 ;; Registers used:
 10441 ;;		wreg, status,2, status,0, cstack
 10442 ;; Tracked objects:
 10443 ;;		On entry : 0/0
 10444 ;;		On exit  : 0/0
 10445 ;;		Unchanged: 0/0
 10446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10447 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10448 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10449 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10451 ;;Total ram usage:       12 bytes
 10452 ;; Hardware stack levels used:    1
 10453 ;; Hardware stack levels required when called:    6
 10454 ;; This function calls:
 10455 ;;		_CANOperationMode
 10456 ;;		_CANSetFilter
 10457 ;;		_CANSetMask
 10458 ;; This function is called by:
 10459 ;;		_configurations
 10460 ;; This function uses a non-reentrant model
 10461 ;;
 10462                           
 10463                           	psect	text33
 10464  005208                     __ptext33:
 10465                           	opt stack 0
 10466  005208                     _CANInitialize:
 10467                           	opt stack 23
 10468                           
 10469                           ;incstack = 0
 10470                           ;CANInitialize@propSeg stored from wreg
 10471  005208  0100               	movlb	0	; () banked
 10472  00520A  6F8E               	movwf	CANInitialize@propSeg& (0+255),b
 10473                           
 10474                           ; BSR set to: 0
 10475                           ;inc\CANlib.h: 220: BYTE FilterConfig1;
 10476                           ;inc\CANlib.h: 221: BYTE FilterConfig2;
 10477                           ;inc\CANlib.h: 223: CANOperationMode(CAN_OP_MODE_CONFIG);
 10478  00520C  0E80               	movlw	128
 10479  00520E  ECCE  F032         	call	_CANOperationMode
 10480                           
 10481                           ;inc\CANlib.h: 225: BRGCON1 = 0x00;
 10482  005212  0E00               	movlw	0
 10483  005214  6E70               	movwf	3952,c	;volatile
 10484                           
 10485                           ;inc\CANlib.h: 226: BRGCON2 = 0x00;
 10486  005216  0E00               	movlw	0
 10487  005218  6E71               	movwf	3953,c	;volatile
 10488                           
 10489                           ;inc\CANlib.h: 227: BRGCON3 = 0x00;
 10490  00521A  0E00               	movlw	0
 10491  00521C  6E72               	movwf	3954,c	;volatile
 10492                           
 10493                           ;inc\CANlib.h: 229: SJW= SJW << 6;
 10494  00521E  0100               	movlb	0	; () banked
 10495  005220  4187               	rrncf	CANInitialize@SJW& (0+255),w,b
 10496  005222  42E8               	rrncf	wreg,f,c
 10497  005224  0BC0               	andlw	192
 10498  005226  0100               	movlb	0	; () banked
 10499  005228  6F87               	movwf	CANInitialize@SJW& (0+255),b
 10500                           
 10501                           ; BSR set to: 0
 10502                           ;inc\CANlib.h: 230: BRGCON1 |= SJW;
 10503  00522A  0100               	movlb	0	; () banked
 10504  00522C  5187               	movf	CANInitialize@SJW& (0+255),w,b
 10505  00522E  1270               	iorwf	3952,f,c	;volatile
 10506                           
 10507                           ; BSR set to: 0
 10508                           ;inc\CANlib.h: 231: BRGCON1 |= BRP;
 10509  005230  0100               	movlb	0	; () banked
 10510  005232  5188               	movf	CANInitialize@BRP& (0+255),w,b
 10511  005234  1270               	iorwf	3952,f,c	;volatile
 10512                           
 10513                           ; BSR set to: 0
 10514                           ;inc\CANlib.h: 233: BRGCON2 |= propSeg;
 10515  005236  0100               	movlb	0	; () banked
 10516  005238  518E               	movf	CANInitialize@propSeg& (0+255),w,b
 10517  00523A  1271               	iorwf	3953,f,c	;volatile
 10518                           
 10519                           ; BSR set to: 0
 10520                           ;inc\CANlib.h: 234: phaseSeg1 = phaseSeg1 <<3;
 10521  00523C  0100               	movlb	0	; () banked
 10522  00523E  3985               	swapf	CANInitialize@phaseSeg1& (0+255),w,b
 10523  005240  42E8               	rrncf	wreg,f,c
 10524  005242  0BF8               	andlw	248
 10525  005244  0100               	movlb	0	; () banked
 10526  005246  6F85               	movwf	CANInitialize@phaseSeg1& (0+255),b
 10527                           
 10528                           ; BSR set to: 0
 10529                           ;inc\CANlib.h: 235: BRGCON2 |= phaseSeg1;
 10530  005248  0100               	movlb	0	; () banked
 10531  00524A  5185               	movf	CANInitialize@phaseSeg1& (0+255),w,b
 10532  00524C  1271               	iorwf	3953,f,c	;volatile
 10533                           
 10534                           ; BSR set to: 0
 10535                           ;inc\CANlib.h: 237: if ( !(flags & CAN_CONFIG_SAMPLE_BIT) )
 10536  00524E  0100               	movlb	0	; () banked
 10537  005250  A589               	btfss	CANInitialize@flags& (0+255),2,b
 10538                           
 10539                           ; BSR set to: 0
 10540                           ;inc\CANlib.h: 238: BRGCON2bits.SAM= 1;
 10541  005252  8C71               	bsf	3953,6,c	;volatile
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;inc\CANlib.h: 240: if ( flags & CAN_CONFIG_PHSEG2_PRG_BIT )
 10545  005254  0100               	movlb	0	; () banked
 10546  005256  A189               	btfss	CANInitialize@flags& (0+255),0,b
 10547  005258  D002               	goto	l6749
 10548                           
 10549                           ; BSR set to: 0
 10550                           ;inc\CANlib.h: 241: BRGCON2bits.SEG2PHTS = 1;
 10551  00525A  8E71               	bsf	3953,7,c	;volatile
 10552  00525C  D000               	goto	l6749
 10553  00525E                     l6749:
 10554                           
 10555                           ; BSR set to: 0
 10556                           ;inc\CANlib.h: 243: BRGCON3 |= phaseSeg2;
 10557  00525E  0100               	movlb	0	; () banked
 10558  005260  5186               	movf	CANInitialize@phaseSeg2& (0+255),w,b
 10559  005262  1272               	iorwf	3954,f,c	;volatile
 10560                           
 10561                           ; BSR set to: 0
 10562                           ;inc\CANlib.h: 245: if ( flags & CAN_CONFIG_LINE_FILTER_BIT )
 10563  005264  0100               	movlb	0	; () banked
 10564  005266  A389               	btfss	CANInitialize@flags& (0+255),1,b
 10565  005268  D002               	goto	l6755
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;inc\CANlib.h: 246: BRGCON3bits.WAKFIL = 1;
 10569  00526A  8C72               	bsf	3954,6,c	;volatile
 10570  00526C  D000               	goto	l6755
 10571  00526E                     l6755:
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;inc\CANlib.h: 251: RXB0CON = flags & CAN_CONFIG_MSG_BITS;
 10575  00526E  0100               	movlb	0	; () banked
 10576  005270  5189               	movf	CANInitialize@flags& (0+255),w,b
 10577  005272  0B60               	andlw	96
 10578  005274  6E60               	movwf	3936,c	;volatile
 10579                           
 10580                           ;inc\CANlib.h: 252: if ( (flags & CAN_CONFIG_DBL_BUFFER_BIT)== CAN_CONFIG_DBL_BUFFER_ON 
      +                          )
 10581  005276  0100               	movlb	0	; () banked
 10582  005278  5189               	movf	CANInitialize@flags& (0+255),w,b
 10583  00527A  0B10               	andlw	16
 10584  00527C  0AFF               	xorlw	255
 10585  00527E  B4D8               	btfsc	status,2,c
 10586                           
 10587                           ; BSR set to: 0
 10588                           ;inc\CANlib.h: 253: RXB0CONbits.RXB0DBEN = 1;
 10589  005280  8460               	bsf	3936,2,c	;volatile
 10590                           
 10591                           ; BSR set to: 0
 10592                           ;inc\CANlib.h: 255: RXB1CON = RXB0CON;
 10593  005282  CF60 FF50          	movff	3936,3920	;volatile
 10594                           
 10595                           ; BSR set to: 0
 10596                           ;inc\CANlib.h: 259: CANSetMask (CAN_MASK_B1, 0x00000000, CAN_CONFIG_XTD_MSG);
 10597  005286  0E00               	movlw	0
 10598  005288  0100               	movlb	0	; () banked
 10599  00528A  6F77               	movwf	CANSetMask@mask& (0+255),b
 10600  00528C  0E00               	movlw	0
 10601  00528E  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10602  005290  0E00               	movlw	0
 10603  005292  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10604  005294  0E00               	movlw	0
 10605  005296  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10606  005298  0EF7               	movlw	247
 10607  00529A  0100               	movlb	0	; () banked
 10608  00529C  6F7B               	movwf	CANSetMask@type& (0+255),b
 10609  00529E  0E01               	movlw	1
 10610  0052A0  EC79  F01E         	call	_CANSetMask
 10611                           
 10612                           ;inc\CANlib.h: 260: CANSetMask (CAN_MASK_B2, 0x00000000, CAN_CONFIG_XTD_MSG);
 10613  0052A4  0E00               	movlw	0
 10614  0052A6  0100               	movlb	0	; () banked
 10615  0052A8  6F77               	movwf	CANSetMask@mask& (0+255),b
 10616  0052AA  0E00               	movlw	0
 10617  0052AC  6F78               	movwf	(CANSetMask@mask+1)& (0+255),b
 10618  0052AE  0E00               	movlw	0
 10619  0052B0  6F79               	movwf	(CANSetMask@mask+2)& (0+255),b
 10620  0052B2  0E00               	movlw	0
 10621  0052B4  6F7A               	movwf	(CANSetMask@mask+3)& (0+255),b
 10622  0052B6  0EF7               	movlw	247
 10623  0052B8  0100               	movlb	0	; () banked
 10624  0052BA  6F7B               	movwf	CANSetMask@type& (0+255),b
 10625  0052BC  0E02               	movlw	2
 10626  0052BE  EC79  F01E         	call	_CANSetMask
 10627                           
 10628                           ;inc\CANlib.h: 263: switch( (flags & CAN_CONFIG_MSG_BITS) | ~CAN_CONFIG_MSG_BITS )
 10629  0052C2  D00F               	goto	l6767
 10630  0052C4                     l6761:
 10631                           
 10632                           ;inc\CANlib.h: 266: FilterConfig1 = CAN_CONFIG_XTD_MSG;
 10633  0052C4  0EF7               	movlw	247
 10634  0052C6  0100               	movlb	0	; () banked
 10635  0052C8  6F8F               	movwf	CANInitialize@FilterConfig1& (0+255),b
 10636  0052CA  D007               	goto	l6763
 10637  0052CC                     l356:
 10638                           
 10639                           ; BSR set to: 0
 10640                           ;inc\CANlib.h: 271: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10641  0052CC  0100               	movlb	0	; () banked
 10642  0052CE  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10643                           
 10644                           ;inc\CANlib.h: 272: FilterConfig2 = CAN_CONFIG_STD_MSG;
 10645  0052D0  0100               	movlb	0	; () banked
 10646  0052D2  6990               	setf	CANInitialize@FilterConfig2& (0+255),b
 10647                           
 10648                           ;inc\CANlib.h: 273: break;
 10649  0052D4  D028               	goto	l6769
 10650  0052D6                     l357:
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;inc\CANlib.h: 275: FilterConfig1 = CAN_CONFIG_STD_MSG;
 10654  0052D6  0100               	movlb	0	; () banked
 10655  0052D8  698F               	setf	CANInitialize@FilterConfig1& (0+255),b
 10656  0052DA                     l6763:
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;inc\CANlib.h: 276: FilterConfig2 = CAN_CONFIG_XTD_MSG;
 10660  0052DA  0EF7               	movlw	247
 10661  0052DC  0100               	movlb	0	; () banked
 10662  0052DE  6F90               	movwf	CANInitialize@FilterConfig2& (0+255),b
 10663                           
 10664                           ; BSR set to: 0
 10665                           ;inc\CANlib.h: 278: }
 10666                           
 10667                           ;inc\CANlib.h: 277: break;
 10668  0052E0  D022               	goto	l6769
 10669  0052E2                     l6767:
 10670  0052E2  0E9F               	movlw	159
 10671  0052E4  0100               	movlb	0	; () banked
 10672  0052E6  6F8A               	movwf	??_CANInitialize& (0+255),b
 10673  0052E8  0EFF               	movlw	255
 10674  0052EA  0100               	movlb	0	; () banked
 10675  0052EC  6F8B               	movwf	(??_CANInitialize+1)& (0+255),b
 10676  0052EE  0100               	movlb	0	; () banked
 10677  0052F0  5189               	movf	CANInitialize@flags& (0+255),w,b
 10678  0052F2  0B60               	andlw	96
 10679  0052F4  0100               	movlb	0	; () banked
 10680  0052F6  6F8C               	movwf	(??_CANInitialize+2)& (0+255),b
 10681  0052F8  6B8D               	clrf	(??_CANInitialize+3)& (0+255),b
 10682  0052FA  0100               	movlb	0	; () banked
 10683  0052FC  518A               	movf	??_CANInitialize& (0+255),w,b
 10684  0052FE  0100               	movlb	0	; () banked
 10685  005300  138C               	iorwf	(??_CANInitialize+2)& (0+255),f,b
 10686  005302  0100               	movlb	0	; () banked
 10687  005304  518B               	movf	(??_CANInitialize+1)& (0+255),w,b
 10688  005306  0100               	movlb	0	; () banked
 10689  005308  138D               	iorwf	(??_CANInitialize+3)& (0+255),f,b
 10690                           
 10691                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10692                           ; Switch size 1, requested type "space"
 10693                           ; Number of cases is 1, Range of values is 0 to 0
 10694                           ; switch strategies available:
 10695                           ; Name         Instructions Cycles
 10696                           ; simple_byte            4     3 (average)
 10697                           ;	Chosen strategy is simple_byte
 10698  00530A  0100               	movlb	0	; () banked
 10699  00530C  518D               	movf	(??_CANInitialize+3)& (0+255),w,b
 10700  00530E  0A00               	xorlw	0	; case 0
 10701  005310  A4D8               	btfss	status,2,c
 10702  005312  D7E1               	goto	l357
 10703                           
 10704                           ; BSR set to: 0
 10705                           ; Switch size 1, requested type "space"
 10706                           ; Number of cases is 2, Range of values is 191 to 223
 10707                           ; switch strategies available:
 10708                           ; Name         Instructions Cycles
 10709                           ; simple_byte            7     4 (average)
 10710                           ;	Chosen strategy is simple_byte
 10711  005314  0100               	movlb	0	; () banked
 10712  005316  518C               	movf	(??_CANInitialize+2)& (0+255),w,b
 10713  005318  0ABF               	xorlw	191	; case 191
 10714  00531A  B4D8               	btfsc	status,2,c
 10715  00531C  D7D7               	goto	l356
 10716  00531E  0A60               	xorlw	96	; case 223
 10717  005320  B4D8               	btfsc	status,2,c
 10718  005322  D7D0               	goto	l6761
 10719  005324  D7D8               	goto	l357
 10720  005326                     l6769:
 10721                           
 10722                           ; BSR set to: 0
 10723                           ;inc\CANlib.h: 280: CANSetFilter(CAN_FILTER_B1_F1, 0, FilterConfig1);
 10724  005326  0E00               	movlw	0
 10725  005328  0100               	movlb	0	; () banked
 10726  00532A  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10727  00532C  0E00               	movlw	0
 10728  00532E  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10729  005330  0E00               	movlw	0
 10730  005332  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10731  005334  0E00               	movlw	0
 10732  005336  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10733  005338  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10734  00533C  0E00               	movlw	0
 10735  00533E  EC54  F00C         	call	_CANSetFilter
 10736                           
 10737                           ;inc\CANlib.h: 281: CANSetFilter(CAN_FILTER_B1_F2, 0, FilterConfig1);
 10738  005342  0E00               	movlw	0
 10739  005344  0100               	movlb	0	; () banked
 10740  005346  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10741  005348  0E00               	movlw	0
 10742  00534A  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10743  00534C  0E00               	movlw	0
 10744  00534E  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10745  005350  0E00               	movlw	0
 10746  005352  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10747  005354  C08F  F07B         	movff	CANInitialize@FilterConfig1,CANSetFilter@type
 10748  005358  0E01               	movlw	1
 10749  00535A  EC54  F00C         	call	_CANSetFilter
 10750                           
 10751                           ;inc\CANlib.h: 282: CANSetFilter(CAN_FILTER_B2_F1, 0, FilterConfig2);
 10752  00535E  0E00               	movlw	0
 10753  005360  0100               	movlb	0	; () banked
 10754  005362  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10755  005364  0E00               	movlw	0
 10756  005366  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10757  005368  0E00               	movlw	0
 10758  00536A  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10759  00536C  0E00               	movlw	0
 10760  00536E  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10761  005370  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10762  005374  0E02               	movlw	2
 10763  005376  EC54  F00C         	call	_CANSetFilter
 10764                           
 10765                           ;inc\CANlib.h: 283: CANSetFilter(CAN_FILTER_B2_F2, 0, FilterConfig2);
 10766  00537A  0E00               	movlw	0
 10767  00537C  0100               	movlb	0	; () banked
 10768  00537E  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10769  005380  0E00               	movlw	0
 10770  005382  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10771  005384  0E00               	movlw	0
 10772  005386  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10773  005388  0E00               	movlw	0
 10774  00538A  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10775  00538C  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10776  005390  0E03               	movlw	3
 10777  005392  EC54  F00C         	call	_CANSetFilter
 10778                           
 10779                           ;inc\CANlib.h: 284: CANSetFilter(CAN_FILTER_B2_F3, 0, FilterConfig2);
 10780  005396  0E00               	movlw	0
 10781  005398  0100               	movlb	0	; () banked
 10782  00539A  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10783  00539C  0E00               	movlw	0
 10784  00539E  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10785  0053A0  0E00               	movlw	0
 10786  0053A2  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10787  0053A4  0E00               	movlw	0
 10788  0053A6  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10789  0053A8  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10790  0053AC  0E04               	movlw	4
 10791  0053AE  EC54  F00C         	call	_CANSetFilter
 10792                           
 10793                           ;inc\CANlib.h: 285: CANSetFilter(CAN_FILTER_B2_F4, 0, FilterConfig2);
 10794  0053B2  0E00               	movlw	0
 10795  0053B4  0100               	movlb	0	; () banked
 10796  0053B6  6F77               	movwf	CANSetFilter@filter& (0+255),b
 10797  0053B8  0E00               	movlw	0
 10798  0053BA  6F78               	movwf	(CANSetFilter@filter+1)& (0+255),b
 10799  0053BC  0E00               	movlw	0
 10800  0053BE  6F79               	movwf	(CANSetFilter@filter+2)& (0+255),b
 10801  0053C0  0E00               	movlw	0
 10802  0053C2  6F7A               	movwf	(CANSetFilter@filter+3)& (0+255),b
 10803  0053C4  C090  F07B         	movff	CANInitialize@FilterConfig2,CANSetFilter@type
 10804  0053C8  0E05               	movlw	5
 10805  0053CA  EC54  F00C         	call	_CANSetFilter
 10806                           
 10807                           ;inc\CANlib.h: 287: CANOperationMode(CAN_OP_MODE_NORMAL);
 10808  0053CE  0E00               	movlw	0
 10809  0053D0  ECCE  F032         	call	_CANOperationMode
 10810  0053D4  0012               	return		;funcret
 10811  0053D6                     __end_of_CANInitialize:
 10812                           	opt stack 0
 10813                           tblptru	equ	0xFF8
 10814                           tblptrh	equ	0xFF7
 10815                           tblptrl	equ	0xFF6
 10816                           tablat	equ	0xFF5
 10817                           prodh	equ	0xFF4
 10818                           prodl	equ	0xFF3
 10819                           intcon	equ	0xFF2
 10820                           intcon2	equ	0xFF1
 10821                           postinc0	equ	0xFEE
 10822                           wreg	equ	0xFE8
 10823                           indf2	equ	0xFDF
 10824                           postinc2	equ	0xFDE
 10825                           postdec2	equ	0xFDD
 10826                           fsr2h	equ	0xFDA
 10827                           fsr2l	equ	0xFD9
 10828                           status	equ	0xFD8
 10829                           
 10830 ;; *************** function _CANSetMask *****************
 10831 ;; Defined at:
 10832 ;;		line 640 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 10833 ;; Parameters:    Size  Location     Type
 10834 ;;  numBuffer       1    wreg     enum E16388
 10835 ;;  mask            4   23[BANK0 ] unsigned long 
 10836 ;;  type            1   27[BANK0 ] enum E16354
 10837 ;; Auto vars:     Size  Location     Type
 10838 ;;  numBuffer       1   32[BANK0 ] enum E16388
 10839 ;;  tamp            4   33[BANK0 ] unsigned long 
 10840 ;; Return value:  Size  Location     Type
 10841 ;;		None               void
 10842 ;; Registers used:
 10843 ;;		wreg, status,2, status,0
 10844 ;; Tracked objects:
 10845 ;;		On entry : 0/0
 10846 ;;		On exit  : 0/0
 10847 ;;		Unchanged: 0/0
 10848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10849 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;Total ram usage:       14 bytes
 10854 ;; Hardware stack levels used:    1
 10855 ;; Hardware stack levels required when called:    5
 10856 ;; This function calls:
 10857 ;;		Nothing
 10858 ;; This function is called by:
 10859 ;;		_CANInitialize
 10860 ;; This function uses a non-reentrant model
 10861 ;;
 10862                           
 10863                           	psect	text34
 10864  003CF2                     __ptext34:
 10865                           	opt stack 0
 10866  003CF2                     _CANSetMask:
 10867                           	opt stack 23
 10868                           
 10869                           ;incstack = 0
 10870                           ;CANSetMask@numBuffer stored from wreg
 10871  003CF2  0100               	movlb	0	; () banked
 10872  003CF4  6F80               	movwf	CANSetMask@numBuffer& (0+255),b
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;inc\CANlib.h: 643: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_STD_MSG))
 10876  003CF6  0100               	movlb	0	; () banked
 10877  003CF8  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 10878  003CFA  A4D8               	btfss	status,2,c
 10879  003CFC  D057               	goto	l4577
 10880                           
 10881                           ; BSR set to: 0
 10882  003CFE  0100               	movlb	0	; () banked
 10883  003D00  297B               	incf	CANSetMask@type& (0+255),w,b
 10884  003D02  A4D8               	btfss	status,2,c
 10885  003D04  D053               	goto	l4577
 10886                           
 10887                           ; BSR set to: 0
 10888                           ;inc\CANlib.h: 644: {
 10889                           ;inc\CANlib.h: 645: tamp = (mask >> 3);
 10890  003D06  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10891  003D0A  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10892  003D0E  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10893  003D12  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10894  003D16  0E04               	movlw	4
 10895  003D18  D006               	goto	u4930
 10896  003D1A                     u4935:
 10897  003D1A  0100               	movlb	0	; () banked
 10898  003D1C  90D8               	bcf	status,0,c
 10899  003D1E  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 10900  003D20  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 10901  003D22  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 10902  003D24  337C               	rrcf	??_CANSetMask& (0+255),f,b
 10903  003D26                     u4930:
 10904  003D26  2EE8               	decfsz	wreg,f,c
 10905  003D28  D7F8               	goto	u4935
 10906  003D2A  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10907  003D2E  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10908  003D32  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10909  003D36  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10910                           
 10911                           ; BSR set to: 0
 10912                           ;inc\CANlib.h: 646: tamp = tamp & 0x000000FF;
 10913  003D3A  0100               	movlb	0	; () banked
 10914  003D3C  5181               	movf	CANSetMask@tamp& (0+255),w,b
 10915  003D3E  0100               	movlb	0	; () banked
 10916  003D40  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10917  003D42  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 10918  003D44  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 10919  003D46  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;inc\CANlib.h: 647: RXM0SIDH = (unsigned char) tamp;
 10923  003D48  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;inc\CANlib.h: 649: tamp = mask & 0x00000007;
 10927  003D4C  0E07               	movlw	7
 10928  003D4E  0100               	movlb	0	; () banked
 10929  003D50  1577               	andwf	CANSetMask@mask& (0+255),w,b
 10930  003D52  0100               	movlb	0	; () banked
 10931  003D54  6F81               	movwf	CANSetMask@tamp& (0+255),b
 10932  003D56  0E00               	movlw	0
 10933  003D58  0100               	movlb	0	; () banked
 10934  003D5A  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 10935  003D5C  0100               	movlb	0	; () banked
 10936  003D5E  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 10937  003D60  0E00               	movlw	0
 10938  003D62  0100               	movlb	0	; () banked
 10939  003D64  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 10940  003D66  0100               	movlb	0	; () banked
 10941  003D68  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 10942  003D6A  0E00               	movlw	0
 10943  003D6C  0100               	movlb	0	; () banked
 10944  003D6E  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 10945  003D70  0100               	movlb	0	; () banked
 10946  003D72  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 10947                           
 10948                           ; BSR set to: 0
 10949                           ;inc\CANlib.h: 650: tamp = tamp << 5;
 10950  003D74  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 10951  003D78  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 10952  003D7C  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 10953  003D80  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 10954  003D84  0E05               	movlw	5
 10955  003D86                     u4945:
 10956  003D86  90D8               	bcf	status,0,c
 10957  003D88  0100               	movlb	0	; () banked
 10958  003D8A  377C               	rlcf	??_CANSetMask& (0+255),f,b
 10959  003D8C  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 10960  003D8E  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 10961  003D90  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 10962  003D92  2EE8               	decfsz	wreg,f,c
 10963  003D94  D7F8               	goto	u4945
 10964  003D96  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 10965  003D9A  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 10966  003D9E  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 10967  003DA2  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 10968                           
 10969                           ; BSR set to: 0
 10970                           ;inc\CANlib.h: 651: RXM0SIDL = (unsigned char) tamp;
 10971  003DA6  C081  FF19         	movff	CANSetMask@tamp,3865	;volatile
 10972  003DAA  D000               	goto	l4577
 10973  003DAC                     l4577:
 10974                           
 10975                           ; BSR set to: 0
 10976                           ;inc\CANlib.h: 652: }
 10977                           ;inc\CANlib.h: 654: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_STD_MSG))
 10978  003DAC  0E02               	movlw	2
 10979  003DAE  0100               	movlb	0	; () banked
 10980  003DB0  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 10981  003DB2  A4D8               	btfss	status,2,c
 10982  003DB4  D057               	goto	l4593
 10983                           
 10984                           ; BSR set to: 0
 10985  003DB6  0100               	movlb	0	; () banked
 10986  003DB8  297B               	incf	CANSetMask@type& (0+255),w,b
 10987  003DBA  A4D8               	btfss	status,2,c
 10988  003DBC  D053               	goto	l4593
 10989                           
 10990                           ; BSR set to: 0
 10991                           ;inc\CANlib.h: 655: {
 10992                           ;inc\CANlib.h: 656: tamp = (mask >> 3);
 10993  003DBE  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 10994  003DC2  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 10995  003DC6  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 10996  003DCA  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 10997  003DCE  0E04               	movlw	4
 10998  003DD0  D006               	goto	u4970
 10999  003DD2                     u4975:
 11000  003DD2  0100               	movlb	0	; () banked
 11001  003DD4  90D8               	bcf	status,0,c
 11002  003DD6  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 11003  003DD8  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 11004  003DDA  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 11005  003DDC  337C               	rrcf	??_CANSetMask& (0+255),f,b
 11006  003DDE                     u4970:
 11007  003DDE  2EE8               	decfsz	wreg,f,c
 11008  003DE0  D7F8               	goto	u4975
 11009  003DE2  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 11010  003DE6  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 11011  003DEA  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 11012  003DEE  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 11013                           
 11014                           ; BSR set to: 0
 11015                           ;inc\CANlib.h: 657: tamp = tamp & 0x000000FF;
 11016  003DF2  0100               	movlb	0	; () banked
 11017  003DF4  5181               	movf	CANSetMask@tamp& (0+255),w,b
 11018  003DF6  0100               	movlb	0	; () banked
 11019  003DF8  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11020  003DFA  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 11021  003DFC  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 11022  003DFE  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 11023                           
 11024                           ; BSR set to: 0
 11025                           ;inc\CANlib.h: 658: RXM1SIDH = (unsigned char) tamp;
 11026  003E00  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 11027                           
 11028                           ; BSR set to: 0
 11029                           ;inc\CANlib.h: 660: tamp = mask & 0x00000007;
 11030  003E04  0E07               	movlw	7
 11031  003E06  0100               	movlb	0	; () banked
 11032  003E08  1577               	andwf	CANSetMask@mask& (0+255),w,b
 11033  003E0A  0100               	movlb	0	; () banked
 11034  003E0C  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11035  003E0E  0E00               	movlw	0
 11036  003E10  0100               	movlb	0	; () banked
 11037  003E12  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 11038  003E14  0100               	movlb	0	; () banked
 11039  003E16  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 11040  003E18  0E00               	movlw	0
 11041  003E1A  0100               	movlb	0	; () banked
 11042  003E1C  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 11043  003E1E  0100               	movlb	0	; () banked
 11044  003E20  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 11045  003E22  0E00               	movlw	0
 11046  003E24  0100               	movlb	0	; () banked
 11047  003E26  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 11048  003E28  0100               	movlb	0	; () banked
 11049  003E2A  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 11050                           
 11051                           ; BSR set to: 0
 11052                           ;inc\CANlib.h: 661: tamp = tamp << 5;
 11053  003E2C  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 11054  003E30  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 11055  003E34  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 11056  003E38  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 11057  003E3C  0E05               	movlw	5
 11058  003E3E                     u4985:
 11059  003E3E  90D8               	bcf	status,0,c
 11060  003E40  0100               	movlb	0	; () banked
 11061  003E42  377C               	rlcf	??_CANSetMask& (0+255),f,b
 11062  003E44  377D               	rlcf	(??_CANSetMask+1)& (0+255),f,b
 11063  003E46  377E               	rlcf	(??_CANSetMask+2)& (0+255),f,b
 11064  003E48  377F               	rlcf	(??_CANSetMask+3)& (0+255),f,b
 11065  003E4A  2EE8               	decfsz	wreg,f,c
 11066  003E4C  D7F8               	goto	u4985
 11067  003E4E  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 11068  003E52  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 11069  003E56  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 11070  003E5A  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 11071                           
 11072                           ; BSR set to: 0
 11073                           ;inc\CANlib.h: 662: RXM1SIDL = (unsigned char) tamp;
 11074  003E5E  C081  FF1D         	movff	CANSetMask@tamp,3869	;volatile
 11075  003E62  D000               	goto	l4593
 11076  003E64                     l4593:
 11077                           
 11078                           ; BSR set to: 0
 11079                           ;inc\CANlib.h: 663: }
 11080                           ;inc\CANlib.h: 665: if ((numBuffer ==CAN_MASK_B1) && (type == CAN_CONFIG_XTD_MSG))
 11081  003E64  0100               	movlb	0	; () banked
 11082  003E66  0580               	decf	CANSetMask@numBuffer& (0+255),w,b
 11083  003E68  A4D8               	btfss	status,2,c
 11084  003E6A  D089               	goto	l4625
 11085                           
 11086                           ; BSR set to: 0
 11087  003E6C  0EF7               	movlw	247
 11088  003E6E  0100               	movlb	0	; () banked
 11089  003E70  197B               	xorwf	CANSetMask@type& (0+255),w,b
 11090  003E72  A4D8               	btfss	status,2,c
 11091  003E74  D084               	goto	l4625
 11092                           
 11093                           ; BSR set to: 0
 11094                           ;inc\CANlib.h: 666: {
 11095                           ;inc\CANlib.h: 667: tamp = mask & 0x000000FF;
 11096  003E76  0100               	movlb	0	; () banked
 11097  003E78  5177               	movf	CANSetMask@mask& (0+255),w,b
 11098  003E7A  0100               	movlb	0	; () banked
 11099  003E7C  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11100  003E7E  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 11101  003E80  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 11102  003E82  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 11103                           
 11104                           ; BSR set to: 0
 11105                           ;inc\CANlib.h: 668: RXM0EIDL = (unsigned char) tamp;
 11106  003E84  C081  FF1B         	movff	CANSetMask@tamp,3867	;volatile
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;inc\CANlib.h: 670: tamp = mask & 0x0000FF00;
 11110  003E88  0E00               	movlw	0
 11111  003E8A  0100               	movlb	0	; () banked
 11112  003E8C  1577               	andwf	CANSetMask@mask& (0+255),w,b
 11113  003E8E  0100               	movlb	0	; () banked
 11114  003E90  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11115  003E92  0EFF               	movlw	255
 11116  003E94  0100               	movlb	0	; () banked
 11117  003E96  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 11118  003E98  0100               	movlb	0	; () banked
 11119  003E9A  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 11120  003E9C  0E00               	movlw	0
 11121  003E9E  0100               	movlb	0	; () banked
 11122  003EA0  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 11123  003EA2  0100               	movlb	0	; () banked
 11124  003EA4  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 11125  003EA6  0E00               	movlw	0
 11126  003EA8  0100               	movlb	0	; () banked
 11127  003EAA  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 11128  003EAC  0100               	movlb	0	; () banked
 11129  003EAE  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 11130                           
 11131                           ; BSR set to: 0
 11132                           ;inc\CANlib.h: 671: tamp = tamp >> 8;
 11133  003EB0  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 11134  003EB4  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 11135  003EB8  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 11136  003EBC  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 11137  003EC0  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 11138  003EC4  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 11139  003EC8  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 11140  003ECC  0100               	movlb	0	; () banked
 11141  003ECE  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 11142  003ED0  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 11143  003ED4  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 11144  003ED8  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 11145  003EDC  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 11146                           
 11147                           ; BSR set to: 0
 11148                           ;inc\CANlib.h: 672: RXM0EIDH = (unsigned char) tamp;
 11149  003EE0  C081  FF1A         	movff	CANSetMask@tamp,3866	;volatile
 11150                           
 11151                           ; BSR set to: 0
 11152                           ;inc\CANlib.h: 674: if (mask & 0x00010000)
 11153  003EE4  0100               	movlb	0	; () banked
 11154  003EE6  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 11155  003EE8  D003               	goto	l430
 11156                           
 11157                           ; BSR set to: 0
 11158                           ;inc\CANlib.h: 675: RXM0SIDLbits.EID16 = 0x01;
 11159  003EEA  010F               	movlb	15	; () banked
 11160  003EEC  8119               	bsf	25,0,b	;volatile
 11161  003EEE  D002               	goto	l431
 11162  003EF0                     l430:
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;inc\CANlib.h: 676: else
 11166                           ;inc\CANlib.h: 677: RXM0SIDLbits.EID16 = 0x00;
 11167  003EF0  010F               	movlb	15	; () banked
 11168  003EF2  9119               	bcf	25,0,b	;volatile
 11169  003EF4                     l431:
 11170                           
 11171                           ; BSR set to: 15
 11172                           ;inc\CANlib.h: 679: if (mask & 0x00020000)
 11173  003EF4  0100               	movlb	0	; () banked
 11174  003EF6  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 11175  003EF8  D003               	goto	l432
 11176                           
 11177                           ; BSR set to: 0
 11178                           ;inc\CANlib.h: 680: RXM0SIDLbits.EID17 = 0x01;
 11179  003EFA  010F               	movlb	15	; () banked
 11180  003EFC  8319               	bsf	25,1,b	;volatile
 11181  003EFE  D002               	goto	l433
 11182  003F00                     l432:
 11183                           
 11184                           ; BSR set to: 0
 11185                           ;inc\CANlib.h: 681: else
 11186                           ;inc\CANlib.h: 682: RXM0SIDLbits.EID17 = 0x00;
 11187  003F00  010F               	movlb	15	; () banked
 11188  003F02  9319               	bcf	25,1,b	;volatile
 11189  003F04                     l433:
 11190                           
 11191                           ; BSR set to: 15
 11192                           ;inc\CANlib.h: 684: if (mask & 0x00040000)
 11193  003F04  0100               	movlb	0	; () banked
 11194  003F06  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 11195  003F08  D003               	goto	l434
 11196                           
 11197                           ; BSR set to: 0
 11198                           ;inc\CANlib.h: 685: RXM0SIDLbits.SID0 = 0x01;
 11199  003F0A  010F               	movlb	15	; () banked
 11200  003F0C  8B19               	bsf	25,5,b	;volatile
 11201  003F0E  D002               	goto	l435
 11202  003F10                     l434:
 11203                           
 11204                           ; BSR set to: 0
 11205                           ;inc\CANlib.h: 686: else
 11206                           ;inc\CANlib.h: 687: RXM0SIDLbits.SID0 = 0x00;
 11207  003F10  010F               	movlb	15	; () banked
 11208  003F12  9B19               	bcf	25,5,b	;volatile
 11209  003F14                     l435:
 11210                           
 11211                           ; BSR set to: 15
 11212                           ;inc\CANlib.h: 689: if (mask & 0x00080000)
 11213  003F14  0100               	movlb	0	; () banked
 11214  003F16  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 11215  003F18  D003               	goto	l436
 11216                           
 11217                           ; BSR set to: 0
 11218                           ;inc\CANlib.h: 690: RXM0SIDLbits.SID1 = 0x01;
 11219  003F1A  010F               	movlb	15	; () banked
 11220  003F1C  8D19               	bsf	25,6,b	;volatile
 11221  003F1E  D002               	goto	l437
 11222  003F20                     l436:
 11223                           
 11224                           ; BSR set to: 0
 11225                           ;inc\CANlib.h: 691: else
 11226                           ;inc\CANlib.h: 692: RXM0SIDLbits.SID1 = 0x00;
 11227  003F20  010F               	movlb	15	; () banked
 11228  003F22  9D19               	bcf	25,6,b	;volatile
 11229  003F24                     l437:
 11230                           
 11231                           ; BSR set to: 15
 11232                           ;inc\CANlib.h: 694: if (mask & 0x00100000)
 11233  003F24  0100               	movlb	0	; () banked
 11234  003F26  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 11235  003F28  D003               	goto	l438
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;inc\CANlib.h: 695: RXM0SIDLbits.SID2 = 0x01 ;
 11239  003F2A  010F               	movlb	15	; () banked
 11240  003F2C  8F19               	bsf	25,7,b	;volatile
 11241  003F2E  D003               	goto	l4619
 11242  003F30                     l438:
 11243                           
 11244                           ; BSR set to: 0
 11245                           ;inc\CANlib.h: 696: else
 11246                           ;inc\CANlib.h: 697: RXM0SIDLbits.SID2 = 0x00 ;
 11247  003F30  010F               	movlb	15	; () banked
 11248  003F32  9F19               	bcf	25,7,b	;volatile
 11249  003F34  D000               	goto	l4619
 11250  003F36                     l4619:
 11251                           
 11252                           ; BSR set to: 15
 11253                           ;inc\CANlib.h: 699: tamp = (mask >> 21);
 11254  003F36  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 11255  003F3A  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 11256  003F3E  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 11257  003F42  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 11258  003F46  0E16               	movlw	22
 11259  003F48  D006               	goto	u5060
 11260  003F4A                     u5065:
 11261  003F4A  0100               	movlb	0	; () banked
 11262  003F4C  90D8               	bcf	status,0,c
 11263  003F4E  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 11264  003F50  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 11265  003F52  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 11266  003F54  337C               	rrcf	??_CANSetMask& (0+255),f,b
 11267  003F56                     u5060:
 11268  003F56  2EE8               	decfsz	wreg,f,c
 11269  003F58  D7F8               	goto	u5065
 11270  003F5A  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 11271  003F5E  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 11272  003F62  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 11273  003F66  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 11274                           
 11275                           ; BSR set to: 0
 11276                           ;inc\CANlib.h: 700: tamp = tamp & 0x000000FF;
 11277  003F6A  0100               	movlb	0	; () banked
 11278  003F6C  5181               	movf	CANSetMask@tamp& (0+255),w,b
 11279  003F6E  0100               	movlb	0	; () banked
 11280  003F70  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11281  003F72  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 11282  003F74  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 11283  003F76  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 11284                           
 11285                           ; BSR set to: 0
 11286                           ;inc\CANlib.h: 701: RXM0SIDH = (unsigned char) tamp;
 11287  003F78  C081  FF18         	movff	CANSetMask@tamp,3864	;volatile
 11288  003F7C  D000               	goto	l4625
 11289  003F7E                     l4625:
 11290                           
 11291                           ; BSR set to: 0
 11292                           ;inc\CANlib.h: 702: }
 11293                           ;inc\CANlib.h: 704: if ((numBuffer ==CAN_MASK_B2) && (type == CAN_CONFIG_XTD_MSG))
 11294  003F7E  0E02               	movlw	2
 11295  003F80  0100               	movlb	0	; () banked
 11296  003F82  1980               	xorwf	CANSetMask@numBuffer& (0+255),w,b
 11297  003F84  A4D8               	btfss	status,2,c
 11298  003F86  0012               	return	
 11299                           
 11300                           ; BSR set to: 0
 11301  003F88  0EF7               	movlw	247
 11302  003F8A  0100               	movlb	0	; () banked
 11303  003F8C  197B               	xorwf	CANSetMask@type& (0+255),w,b
 11304  003F8E  A4D8               	btfss	status,2,c
 11305  003F90  0012               	return	
 11306                           
 11307                           ; BSR set to: 0
 11308                           ;inc\CANlib.h: 705: {
 11309                           ;inc\CANlib.h: 706: tamp = mask & 0x000000FF;
 11310  003F92  0100               	movlb	0	; () banked
 11311  003F94  5177               	movf	CANSetMask@mask& (0+255),w,b
 11312  003F96  0100               	movlb	0	; () banked
 11313  003F98  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11314  003F9A  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 11315  003F9C  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 11316  003F9E  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 11317                           
 11318                           ; BSR set to: 0
 11319                           ;inc\CANlib.h: 707: RXM1EIDL = (unsigned char) tamp;
 11320  003FA0  C081  FF1F         	movff	CANSetMask@tamp,3871	;volatile
 11321                           
 11322                           ; BSR set to: 0
 11323                           ;inc\CANlib.h: 709: tamp = mask & 0x0000FF00;
 11324  003FA4  0E00               	movlw	0
 11325  003FA6  0100               	movlb	0	; () banked
 11326  003FA8  1577               	andwf	CANSetMask@mask& (0+255),w,b
 11327  003FAA  0100               	movlb	0	; () banked
 11328  003FAC  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11329  003FAE  0EFF               	movlw	255
 11330  003FB0  0100               	movlb	0	; () banked
 11331  003FB2  1578               	andwf	(CANSetMask@mask+1)& (0+255),w,b
 11332  003FB4  0100               	movlb	0	; () banked
 11333  003FB6  6F82               	movwf	(CANSetMask@tamp+1)& (0+255),b
 11334  003FB8  0E00               	movlw	0
 11335  003FBA  0100               	movlb	0	; () banked
 11336  003FBC  1579               	andwf	(CANSetMask@mask+2)& (0+255),w,b
 11337  003FBE  0100               	movlb	0	; () banked
 11338  003FC0  6F83               	movwf	(CANSetMask@tamp+2)& (0+255),b
 11339  003FC2  0E00               	movlw	0
 11340  003FC4  0100               	movlb	0	; () banked
 11341  003FC6  157A               	andwf	(CANSetMask@mask+3)& (0+255),w,b
 11342  003FC8  0100               	movlb	0	; () banked
 11343  003FCA  6F84               	movwf	(CANSetMask@tamp+3)& (0+255),b
 11344                           
 11345                           ; BSR set to: 0
 11346                           ;inc\CANlib.h: 710: tamp = tamp >> 8;
 11347  003FCC  C081  F07C         	movff	CANSetMask@tamp,??_CANSetMask
 11348  003FD0  C082  F07D         	movff	CANSetMask@tamp+1,??_CANSetMask+1
 11349  003FD4  C083  F07E         	movff	CANSetMask@tamp+2,??_CANSetMask+2
 11350  003FD8  C084  F07F         	movff	CANSetMask@tamp+3,??_CANSetMask+3
 11351  003FDC  C07D  F07C         	movff	??_CANSetMask+1,??_CANSetMask
 11352  003FE0  C07E  F07D         	movff	??_CANSetMask+2,??_CANSetMask+1
 11353  003FE4  C07F  F07E         	movff	??_CANSetMask+3,??_CANSetMask+2
 11354  003FE8  0100               	movlb	0	; () banked
 11355  003FEA  6B7F               	clrf	(??_CANSetMask+3)& (0+255),b
 11356  003FEC  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 11357  003FF0  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 11358  003FF4  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 11359  003FF8  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 11360                           
 11361                           ; BSR set to: 0
 11362                           ;inc\CANlib.h: 711: RXM1EIDH = (unsigned char) tamp;
 11363  003FFC  C081  FF1E         	movff	CANSetMask@tamp,3870	;volatile
 11364                           
 11365                           ; BSR set to: 0
 11366                           ;inc\CANlib.h: 713: if (mask & 0x00010000)
 11367  004000  0100               	movlb	0	; () banked
 11368  004002  A179               	btfss	(CANSetMask@mask+2)& (0+255),0,b
 11369  004004  D003               	goto	l441
 11370                           
 11371                           ; BSR set to: 0
 11372                           ;inc\CANlib.h: 714: RXM1SIDLbits.EID16 = 0x01;
 11373  004006  010F               	movlb	15	; () banked
 11374  004008  811D               	bsf	29,0,b	;volatile
 11375  00400A  D002               	goto	l442
 11376  00400C                     l441:
 11377                           
 11378                           ; BSR set to: 0
 11379                           ;inc\CANlib.h: 715: else
 11380                           ;inc\CANlib.h: 716: RXM1SIDLbits.EID16 = 0x00;
 11381  00400C  010F               	movlb	15	; () banked
 11382  00400E  911D               	bcf	29,0,b	;volatile
 11383  004010                     l442:
 11384                           
 11385                           ; BSR set to: 15
 11386                           ;inc\CANlib.h: 718: if (mask & 0x00020000)
 11387  004010  0100               	movlb	0	; () banked
 11388  004012  A379               	btfss	(CANSetMask@mask+2)& (0+255),1,b
 11389  004014  D003               	goto	l443
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;inc\CANlib.h: 719: RXM1SIDLbits.EID17 = 0x01;
 11393  004016  010F               	movlb	15	; () banked
 11394  004018  831D               	bsf	29,1,b	;volatile
 11395  00401A  D002               	goto	l444
 11396  00401C                     l443:
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;inc\CANlib.h: 720: else
 11400                           ;inc\CANlib.h: 721: RXM1SIDLbits.EID17 = 0x00;
 11401  00401C  010F               	movlb	15	; () banked
 11402  00401E  931D               	bcf	29,1,b	;volatile
 11403  004020                     l444:
 11404                           
 11405                           ; BSR set to: 15
 11406                           ;inc\CANlib.h: 723: if (mask & 0x00040000)
 11407  004020  0100               	movlb	0	; () banked
 11408  004022  A579               	btfss	(CANSetMask@mask+2)& (0+255),2,b
 11409  004024  D003               	goto	l445
 11410                           
 11411                           ; BSR set to: 0
 11412                           ;inc\CANlib.h: 724: RXM1SIDLbits.SID0 = 0x01;
 11413  004026  010F               	movlb	15	; () banked
 11414  004028  8B1D               	bsf	29,5,b	;volatile
 11415  00402A  D002               	goto	l446
 11416  00402C                     l445:
 11417                           
 11418                           ; BSR set to: 0
 11419                           ;inc\CANlib.h: 725: else
 11420                           ;inc\CANlib.h: 726: RXM1SIDLbits.SID0 = 0x00;
 11421  00402C  010F               	movlb	15	; () banked
 11422  00402E  9B1D               	bcf	29,5,b	;volatile
 11423  004030                     l446:
 11424                           
 11425                           ; BSR set to: 15
 11426                           ;inc\CANlib.h: 728: if (mask & 0x00080000)
 11427  004030  0100               	movlb	0	; () banked
 11428  004032  A779               	btfss	(CANSetMask@mask+2)& (0+255),3,b
 11429  004034  D003               	goto	l447
 11430                           
 11431                           ; BSR set to: 0
 11432                           ;inc\CANlib.h: 729: RXM1SIDLbits.SID1 = 0x01;
 11433  004036  010F               	movlb	15	; () banked
 11434  004038  8D1D               	bsf	29,6,b	;volatile
 11435  00403A  D002               	goto	l448
 11436  00403C                     l447:
 11437                           
 11438                           ; BSR set to: 0
 11439                           ;inc\CANlib.h: 730: else
 11440                           ;inc\CANlib.h: 731: RXM1SIDLbits.SID1 = 0x00;
 11441  00403C  010F               	movlb	15	; () banked
 11442  00403E  9D1D               	bcf	29,6,b	;volatile
 11443  004040                     l448:
 11444                           
 11445                           ; BSR set to: 15
 11446                           ;inc\CANlib.h: 733: if (mask & 0x00100000)
 11447  004040  0100               	movlb	0	; () banked
 11448  004042  A979               	btfss	(CANSetMask@mask+2)& (0+255),4,b
 11449  004044  D003               	goto	l449
 11450                           
 11451                           ; BSR set to: 0
 11452                           ;inc\CANlib.h: 734: RXM1SIDLbits.SID2 = 0x01 ;
 11453  004046  010F               	movlb	15	; () banked
 11454  004048  8F1D               	bsf	29,7,b	;volatile
 11455  00404A  D003               	goto	l4651
 11456  00404C                     l449:
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;inc\CANlib.h: 735: else
 11460                           ;inc\CANlib.h: 736: RXM1SIDLbits.SID2 = 0x00 ;
 11461  00404C  010F               	movlb	15	; () banked
 11462  00404E  9F1D               	bcf	29,7,b	;volatile
 11463  004050  D000               	goto	l4651
 11464  004052                     l4651:
 11465                           
 11466                           ; BSR set to: 15
 11467                           ;inc\CANlib.h: 738: tamp = (mask >> 21);
 11468  004052  C077  F07C         	movff	CANSetMask@mask,??_CANSetMask
 11469  004056  C078  F07D         	movff	CANSetMask@mask+1,??_CANSetMask+1
 11470  00405A  C079  F07E         	movff	CANSetMask@mask+2,??_CANSetMask+2
 11471  00405E  C07A  F07F         	movff	CANSetMask@mask+3,??_CANSetMask+3
 11472  004062  0E16               	movlw	22
 11473  004064  D006               	goto	u5140
 11474  004066                     u5145:
 11475  004066  0100               	movlb	0	; () banked
 11476  004068  90D8               	bcf	status,0,c
 11477  00406A  337F               	rrcf	(??_CANSetMask+3)& (0+255),f,b
 11478  00406C  337E               	rrcf	(??_CANSetMask+2)& (0+255),f,b
 11479  00406E  337D               	rrcf	(??_CANSetMask+1)& (0+255),f,b
 11480  004070  337C               	rrcf	??_CANSetMask& (0+255),f,b
 11481  004072                     u5140:
 11482  004072  2EE8               	decfsz	wreg,f,c
 11483  004074  D7F8               	goto	u5145
 11484  004076  C07C  F081         	movff	??_CANSetMask,CANSetMask@tamp
 11485  00407A  C07D  F082         	movff	??_CANSetMask+1,CANSetMask@tamp+1
 11486  00407E  C07E  F083         	movff	??_CANSetMask+2,CANSetMask@tamp+2
 11487  004082  C07F  F084         	movff	??_CANSetMask+3,CANSetMask@tamp+3
 11488                           
 11489                           ; BSR set to: 0
 11490                           ;inc\CANlib.h: 739: tamp = tamp & 0x000000FF;
 11491  004086  0100               	movlb	0	; () banked
 11492  004088  5181               	movf	CANSetMask@tamp& (0+255),w,b
 11493  00408A  0100               	movlb	0	; () banked
 11494  00408C  6F81               	movwf	CANSetMask@tamp& (0+255),b
 11495  00408E  6B82               	clrf	(CANSetMask@tamp+1)& (0+255),b
 11496  004090  6B83               	clrf	(CANSetMask@tamp+2)& (0+255),b
 11497  004092  6B84               	clrf	(CANSetMask@tamp+3)& (0+255),b
 11498                           
 11499                           ; BSR set to: 0
 11500                           ;inc\CANlib.h: 740: RXM1SIDH = (unsigned char) tamp;
 11501  004094  C081  FF1C         	movff	CANSetMask@tamp,3868	;volatile
 11502  004098  0012               	return	
 11503                           
 11504                           ; BSR set to: 0
 11505                           
 11506                           ; BSR set to: 0
 11507  00409A  0012               	return		;funcret
 11508  00409C                     __end_of_CANSetMask:
 11509                           	opt stack 0
 11510                           tblptru	equ	0xFF8
 11511                           tblptrh	equ	0xFF7
 11512                           tblptrl	equ	0xFF6
 11513                           tablat	equ	0xFF5
 11514                           prodh	equ	0xFF4
 11515                           prodl	equ	0xFF3
 11516                           intcon	equ	0xFF2
 11517                           intcon2	equ	0xFF1
 11518                           postinc0	equ	0xFEE
 11519                           wreg	equ	0xFE8
 11520                           indf2	equ	0xFDF
 11521                           postinc2	equ	0xFDE
 11522                           postdec2	equ	0xFDD
 11523                           fsr2h	equ	0xFDA
 11524                           fsr2l	equ	0xFD9
 11525                           status	equ	0xFD8
 11526                           
 11527 ;; *************** function _CANSetFilter *****************
 11528 ;; Defined at:
 11529 ;;		line 748 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 11530 ;; Parameters:    Size  Location     Type
 11531 ;;  numBuffer       1    wreg     enum E16391
 11532 ;;  filter          4   23[BANK0 ] unsigned long 
 11533 ;;  type            1   27[BANK0 ] enum E16354
 11534 ;; Auto vars:     Size  Location     Type
 11535 ;;  numBuffer       1   32[BANK0 ] enum E16391
 11536 ;;  tamp            4   33[BANK0 ] unsigned long 
 11537 ;; Return value:  Size  Location     Type
 11538 ;;		None               void
 11539 ;; Registers used:
 11540 ;;		wreg, status,2, status,0
 11541 ;; Tracked objects:
 11542 ;;		On entry : 0/0
 11543 ;;		On exit  : 0/0
 11544 ;;		Unchanged: 0/0
 11545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11546 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11550 ;;Total ram usage:       14 bytes
 11551 ;; Hardware stack levels used:    1
 11552 ;; Hardware stack levels required when called:    5
 11553 ;; This function calls:
 11554 ;;		Nothing
 11555 ;; This function is called by:
 11556 ;;		_CANInitialize
 11557 ;; This function uses a non-reentrant model
 11558 ;;
 11559                           
 11560                           	psect	text35
 11561  0018A8                     __ptext35:
 11562                           	opt stack 0
 11563  0018A8                     _CANSetFilter:
 11564                           	opt stack 23
 11565                           
 11566                           ; BSR set to: 0
 11567                           ;incstack = 0
 11568                           ;CANSetFilter@numBuffer stored from wreg
 11569  0018A8  0100               	movlb	0	; () banked
 11570  0018AA  6F80               	movwf	CANSetFilter@numBuffer& (0+255),b
 11571                           
 11572                           ; BSR set to: 0
 11573                           ;inc\CANlib.h: 750: unsigned long tamp;
 11574                           ;inc\CANlib.h: 752: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_STD_MSG))
 11575  0018AC  0100               	movlb	0	; () banked
 11576  0018AE  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 11577  0018B0  0100               	movlb	0	; () banked
 11578  0018B2  A4D8               	btfss	status,2,c
 11579  0018B4  D059               	goto	l4675
 11580                           
 11581                           ; BSR set to: 0
 11582  0018B6  0100               	movlb	0	; () banked
 11583  0018B8  297B               	incf	CANSetFilter@type& (0+255),w,b
 11584  0018BA  A4D8               	btfss	status,2,c
 11585  0018BC  D055               	goto	l4675
 11586                           
 11587                           ; BSR set to: 0
 11588                           ;inc\CANlib.h: 753: {
 11589                           ;inc\CANlib.h: 754: RXF0SIDLbits.EXIDEN = 0x00;
 11590  0018BE  010F               	movlb	15	; () banked
 11591  0018C0  9701               	bcf	1,3,b	;volatile
 11592                           
 11593                           ; BSR set to: 15
 11594                           ;inc\CANlib.h: 756: tamp = (filter >> 3);
 11595  0018C2  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11596  0018C6  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11597  0018CA  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11598  0018CE  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11599  0018D2  0E04               	movlw	4
 11600  0018D4  D006               	goto	u5170
 11601  0018D6                     u5175:
 11602  0018D6  0100               	movlb	0	; () banked
 11603  0018D8  90D8               	bcf	status,0,c
 11604  0018DA  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11605  0018DC  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11606  0018DE  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11607  0018E0  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11608  0018E2                     u5170:
 11609  0018E2  2EE8               	decfsz	wreg,f,c
 11610  0018E4  D7F8               	goto	u5175
 11611  0018E6  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11612  0018EA  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11613  0018EE  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11614  0018F2  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11615                           
 11616                           ; BSR set to: 0
 11617                           ;inc\CANlib.h: 757: tamp = tamp & 0x000000FF;
 11618  0018F6  0100               	movlb	0	; () banked
 11619  0018F8  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11620  0018FA  0100               	movlb	0	; () banked
 11621  0018FC  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11622  0018FE  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11623  001900  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11624  001902  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11625                           
 11626                           ; BSR set to: 0
 11627                           ;inc\CANlib.h: 758: RXF0SIDH = (unsigned char) tamp;
 11628  001904  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 11629                           
 11630                           ; BSR set to: 0
 11631                           ;inc\CANlib.h: 760: tamp = filter & 0x00000007;
 11632  001908  0E07               	movlw	7
 11633  00190A  0100               	movlb	0	; () banked
 11634  00190C  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11635  00190E  0100               	movlb	0	; () banked
 11636  001910  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11637  001912  0E00               	movlw	0
 11638  001914  0100               	movlb	0	; () banked
 11639  001916  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11640  001918  0100               	movlb	0	; () banked
 11641  00191A  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11642  00191C  0E00               	movlw	0
 11643  00191E  0100               	movlb	0	; () banked
 11644  001920  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11645  001922  0100               	movlb	0	; () banked
 11646  001924  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11647  001926  0E00               	movlw	0
 11648  001928  0100               	movlb	0	; () banked
 11649  00192A  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11650  00192C  0100               	movlb	0	; () banked
 11651  00192E  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11652                           
 11653                           ; BSR set to: 0
 11654                           ;inc\CANlib.h: 761: tamp = tamp << 5;
 11655  001930  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11656  001934  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11657  001938  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11658  00193C  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11659  001940  0E05               	movlw	5
 11660  001942                     u5185:
 11661  001942  90D8               	bcf	status,0,c
 11662  001944  0100               	movlb	0	; () banked
 11663  001946  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11664  001948  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11665  00194A  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11666  00194C  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11667  00194E  2EE8               	decfsz	wreg,f,c
 11668  001950  D7F8               	goto	u5185
 11669  001952  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11670  001956  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11671  00195A  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11672  00195E  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;inc\CANlib.h: 762: RXF0SIDL = (unsigned char) tamp;
 11676  001962  C081  FF01         	movff	CANSetFilter@tamp,3841	;volatile
 11677  001966  D000               	goto	l4675
 11678  001968                     l4675:
 11679                           
 11680                           ; BSR set to: 0
 11681                           ;inc\CANlib.h: 763: }
 11682                           ;inc\CANlib.h: 765: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_STD_MSG))
 11683  001968  0100               	movlb	0	; () banked
 11684  00196A  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 11685  00196C  A4D8               	btfss	status,2,c
 11686  00196E  D059               	goto	l4693
 11687                           
 11688                           ; BSR set to: 0
 11689  001970  0100               	movlb	0	; () banked
 11690  001972  297B               	incf	CANSetFilter@type& (0+255),w,b
 11691  001974  A4D8               	btfss	status,2,c
 11692  001976  D055               	goto	l4693
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;inc\CANlib.h: 766: {
 11696                           ;inc\CANlib.h: 767: RXF1SIDLbits.EXIDEN = 0x00;
 11697  001978  010F               	movlb	15	; () banked
 11698  00197A  9705               	bcf	5,3,b	;volatile
 11699                           
 11700                           ; BSR set to: 15
 11701                           ;inc\CANlib.h: 769: tamp = (filter >> 3);
 11702  00197C  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11703  001980  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11704  001984  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11705  001988  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11706  00198C  0E04               	movlw	4
 11707  00198E  D006               	goto	u5210
 11708  001990                     u5215:
 11709  001990  0100               	movlb	0	; () banked
 11710  001992  90D8               	bcf	status,0,c
 11711  001994  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11712  001996  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11713  001998  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11714  00199A  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11715  00199C                     u5210:
 11716  00199C  2EE8               	decfsz	wreg,f,c
 11717  00199E  D7F8               	goto	u5215
 11718  0019A0  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11719  0019A4  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11720  0019A8  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11721  0019AC  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;inc\CANlib.h: 770: tamp = tamp & 0x000000FF;
 11725  0019B0  0100               	movlb	0	; () banked
 11726  0019B2  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11727  0019B4  0100               	movlb	0	; () banked
 11728  0019B6  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11729  0019B8  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11730  0019BA  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11731  0019BC  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11732                           
 11733                           ; BSR set to: 0
 11734                           ;inc\CANlib.h: 771: RXF1SIDH = (unsigned char) tamp;
 11735  0019BE  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 11736                           
 11737                           ; BSR set to: 0
 11738                           ;inc\CANlib.h: 773: tamp = filter & 0x00000007;
 11739  0019C2  0E07               	movlw	7
 11740  0019C4  0100               	movlb	0	; () banked
 11741  0019C6  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11742  0019C8  0100               	movlb	0	; () banked
 11743  0019CA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11744  0019CC  0E00               	movlw	0
 11745  0019CE  0100               	movlb	0	; () banked
 11746  0019D0  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11747  0019D2  0100               	movlb	0	; () banked
 11748  0019D4  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11749  0019D6  0E00               	movlw	0
 11750  0019D8  0100               	movlb	0	; () banked
 11751  0019DA  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11752  0019DC  0100               	movlb	0	; () banked
 11753  0019DE  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11754  0019E0  0E00               	movlw	0
 11755  0019E2  0100               	movlb	0	; () banked
 11756  0019E4  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11757  0019E6  0100               	movlb	0	; () banked
 11758  0019E8  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;inc\CANlib.h: 774: tamp = tamp << 5;
 11762  0019EA  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11763  0019EE  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11764  0019F2  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11765  0019F6  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11766  0019FA  0E05               	movlw	5
 11767  0019FC                     u5225:
 11768  0019FC  90D8               	bcf	status,0,c
 11769  0019FE  0100               	movlb	0	; () banked
 11770  001A00  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11771  001A02  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11772  001A04  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11773  001A06  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11774  001A08  2EE8               	decfsz	wreg,f,c
 11775  001A0A  D7F8               	goto	u5225
 11776  001A0C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11777  001A10  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11778  001A14  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11779  001A18  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;inc\CANlib.h: 775: RXF1SIDL = (unsigned char) tamp;
 11783  001A1C  C081  FF05         	movff	CANSetFilter@tamp,3845	;volatile
 11784  001A20  D000               	goto	l4693
 11785  001A22                     l4693:
 11786                           
 11787                           ; BSR set to: 0
 11788                           ;inc\CANlib.h: 776: }
 11789                           ;inc\CANlib.h: 778: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_STD_MSG))
 11790  001A22  0E02               	movlw	2
 11791  001A24  0100               	movlb	0	; () banked
 11792  001A26  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11793  001A28  A4D8               	btfss	status,2,c
 11794  001A2A  D059               	goto	l4711
 11795                           
 11796                           ; BSR set to: 0
 11797  001A2C  0100               	movlb	0	; () banked
 11798  001A2E  297B               	incf	CANSetFilter@type& (0+255),w,b
 11799  001A30  A4D8               	btfss	status,2,c
 11800  001A32  D055               	goto	l4711
 11801                           
 11802                           ; BSR set to: 0
 11803                           ;inc\CANlib.h: 779: {
 11804                           ;inc\CANlib.h: 780: RXF2SIDLbits.EXIDEN = 0x00;
 11805  001A34  010F               	movlb	15	; () banked
 11806  001A36  9709               	bcf	9,3,b	;volatile
 11807                           
 11808                           ; BSR set to: 15
 11809                           ;inc\CANlib.h: 782: tamp = (filter >> 3);
 11810  001A38  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11811  001A3C  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11812  001A40  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11813  001A44  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11814  001A48  0E04               	movlw	4
 11815  001A4A  D006               	goto	u5250
 11816  001A4C                     u5255:
 11817  001A4C  0100               	movlb	0	; () banked
 11818  001A4E  90D8               	bcf	status,0,c
 11819  001A50  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11820  001A52  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11821  001A54  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11822  001A56  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11823  001A58                     u5250:
 11824  001A58  2EE8               	decfsz	wreg,f,c
 11825  001A5A  D7F8               	goto	u5255
 11826  001A5C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11827  001A60  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11828  001A64  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11829  001A68  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11830                           
 11831                           ; BSR set to: 0
 11832                           ;inc\CANlib.h: 783: tamp = tamp & 0x000000FF;
 11833  001A6C  0100               	movlb	0	; () banked
 11834  001A6E  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11835  001A70  0100               	movlb	0	; () banked
 11836  001A72  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11837  001A74  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11838  001A76  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11839  001A78  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11840                           
 11841                           ; BSR set to: 0
 11842                           ;inc\CANlib.h: 784: RXF2SIDH = (unsigned char) tamp;
 11843  001A7A  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;inc\CANlib.h: 786: tamp = filter & 0x00000007;
 11847  001A7E  0E07               	movlw	7
 11848  001A80  0100               	movlb	0	; () banked
 11849  001A82  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11850  001A84  0100               	movlb	0	; () banked
 11851  001A86  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11852  001A88  0E00               	movlw	0
 11853  001A8A  0100               	movlb	0	; () banked
 11854  001A8C  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11855  001A8E  0100               	movlb	0	; () banked
 11856  001A90  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11857  001A92  0E00               	movlw	0
 11858  001A94  0100               	movlb	0	; () banked
 11859  001A96  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11860  001A98  0100               	movlb	0	; () banked
 11861  001A9A  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11862  001A9C  0E00               	movlw	0
 11863  001A9E  0100               	movlb	0	; () banked
 11864  001AA0  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11865  001AA2  0100               	movlb	0	; () banked
 11866  001AA4  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;inc\CANlib.h: 787: tamp = tamp << 5;
 11870  001AA6  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11871  001AAA  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11872  001AAE  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11873  001AB2  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11874  001AB6  0E05               	movlw	5
 11875  001AB8                     u5265:
 11876  001AB8  90D8               	bcf	status,0,c
 11877  001ABA  0100               	movlb	0	; () banked
 11878  001ABC  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11879  001ABE  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11880  001AC0  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11881  001AC2  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11882  001AC4  2EE8               	decfsz	wreg,f,c
 11883  001AC6  D7F8               	goto	u5265
 11884  001AC8  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11885  001ACC  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11886  001AD0  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11887  001AD4  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11888                           
 11889                           ; BSR set to: 0
 11890                           ;inc\CANlib.h: 788: RXF2SIDL = (unsigned char) tamp;
 11891  001AD8  C081  FF09         	movff	CANSetFilter@tamp,3849	;volatile
 11892  001ADC  D000               	goto	l4711
 11893  001ADE                     l4711:
 11894                           
 11895                           ; BSR set to: 0
 11896                           ;inc\CANlib.h: 789: }
 11897                           ;inc\CANlib.h: 791: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_STD_MSG))
 11898  001ADE  0E03               	movlw	3
 11899  001AE0  0100               	movlb	0	; () banked
 11900  001AE2  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 11901  001AE4  A4D8               	btfss	status,2,c
 11902  001AE6  D059               	goto	l4729
 11903                           
 11904                           ; BSR set to: 0
 11905  001AE8  0100               	movlb	0	; () banked
 11906  001AEA  297B               	incf	CANSetFilter@type& (0+255),w,b
 11907  001AEC  A4D8               	btfss	status,2,c
 11908  001AEE  D055               	goto	l4729
 11909                           
 11910                           ; BSR set to: 0
 11911                           ;inc\CANlib.h: 792: {
 11912                           ;inc\CANlib.h: 793: RXF3SIDLbits.EXIDEN = 0x00;
 11913  001AF0  010F               	movlb	15	; () banked
 11914  001AF2  970D               	bcf	13,3,b	;volatile
 11915                           
 11916                           ; BSR set to: 15
 11917                           ;inc\CANlib.h: 795: tamp = (filter >> 3);
 11918  001AF4  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 11919  001AF8  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 11920  001AFC  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 11921  001B00  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 11922  001B04  0E04               	movlw	4
 11923  001B06  D006               	goto	u5290
 11924  001B08                     u5295:
 11925  001B08  0100               	movlb	0	; () banked
 11926  001B0A  90D8               	bcf	status,0,c
 11927  001B0C  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 11928  001B0E  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 11929  001B10  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 11930  001B12  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 11931  001B14                     u5290:
 11932  001B14  2EE8               	decfsz	wreg,f,c
 11933  001B16  D7F8               	goto	u5295
 11934  001B18  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11935  001B1C  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11936  001B20  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11937  001B24  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11938                           
 11939                           ; BSR set to: 0
 11940                           ;inc\CANlib.h: 796: tamp = tamp & 0x000000FF;
 11941  001B28  0100               	movlb	0	; () banked
 11942  001B2A  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 11943  001B2C  0100               	movlb	0	; () banked
 11944  001B2E  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11945  001B30  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 11946  001B32  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 11947  001B34  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 11948                           
 11949                           ; BSR set to: 0
 11950                           ;inc\CANlib.h: 797: RXF3SIDH = (unsigned char) tamp;
 11951  001B36  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;inc\CANlib.h: 799: tamp = filter & 0x00000007;
 11955  001B3A  0E07               	movlw	7
 11956  001B3C  0100               	movlb	0	; () banked
 11957  001B3E  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 11958  001B40  0100               	movlb	0	; () banked
 11959  001B42  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 11960  001B44  0E00               	movlw	0
 11961  001B46  0100               	movlb	0	; () banked
 11962  001B48  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 11963  001B4A  0100               	movlb	0	; () banked
 11964  001B4C  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 11965  001B4E  0E00               	movlw	0
 11966  001B50  0100               	movlb	0	; () banked
 11967  001B52  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 11968  001B54  0100               	movlb	0	; () banked
 11969  001B56  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 11970  001B58  0E00               	movlw	0
 11971  001B5A  0100               	movlb	0	; () banked
 11972  001B5C  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 11973  001B5E  0100               	movlb	0	; () banked
 11974  001B60  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 11975                           
 11976                           ; BSR set to: 0
 11977                           ;inc\CANlib.h: 800: tamp = tamp << 5;
 11978  001B62  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 11979  001B66  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 11980  001B6A  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 11981  001B6E  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 11982  001B72  0E05               	movlw	5
 11983  001B74                     u5305:
 11984  001B74  90D8               	bcf	status,0,c
 11985  001B76  0100               	movlb	0	; () banked
 11986  001B78  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 11987  001B7A  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 11988  001B7C  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 11989  001B7E  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 11990  001B80  2EE8               	decfsz	wreg,f,c
 11991  001B82  D7F8               	goto	u5305
 11992  001B84  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 11993  001B88  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 11994  001B8C  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 11995  001B90  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;inc\CANlib.h: 801: RXF3SIDL = (unsigned char) tamp;
 11999  001B94  C081  FF0D         	movff	CANSetFilter@tamp,3853	;volatile
 12000  001B98  D000               	goto	l4729
 12001  001B9A                     l4729:
 12002                           
 12003                           ; BSR set to: 0
 12004                           ;inc\CANlib.h: 802: }
 12005                           ;inc\CANlib.h: 804: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_STD_MSG))
 12006  001B9A  0E04               	movlw	4
 12007  001B9C  0100               	movlb	0	; () banked
 12008  001B9E  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12009  001BA0  A4D8               	btfss	status,2,c
 12010  001BA2  D059               	goto	l4747
 12011                           
 12012                           ; BSR set to: 0
 12013  001BA4  0100               	movlb	0	; () banked
 12014  001BA6  297B               	incf	CANSetFilter@type& (0+255),w,b
 12015  001BA8  A4D8               	btfss	status,2,c
 12016  001BAA  D055               	goto	l4747
 12017                           
 12018                           ; BSR set to: 0
 12019                           ;inc\CANlib.h: 805: {
 12020                           ;inc\CANlib.h: 806: RXF4SIDLbits.EXIDEN = 0x00;
 12021  001BAC  010F               	movlb	15	; () banked
 12022  001BAE  9711               	bcf	17,3,b	;volatile
 12023                           
 12024                           ; BSR set to: 15
 12025                           ;inc\CANlib.h: 808: tamp = (filter >> 3);
 12026  001BB0  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12027  001BB4  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12028  001BB8  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12029  001BBC  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12030  001BC0  0E04               	movlw	4
 12031  001BC2  D006               	goto	u5330
 12032  001BC4                     u5335:
 12033  001BC4  0100               	movlb	0	; () banked
 12034  001BC6  90D8               	bcf	status,0,c
 12035  001BC8  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12036  001BCA  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12037  001BCC  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12038  001BCE  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12039  001BD0                     u5330:
 12040  001BD0  2EE8               	decfsz	wreg,f,c
 12041  001BD2  D7F8               	goto	u5335
 12042  001BD4  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12043  001BD8  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12044  001BDC  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12045  001BE0  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12046                           
 12047                           ; BSR set to: 0
 12048                           ;inc\CANlib.h: 809: tamp = tamp & 0x000000FF;
 12049  001BE4  0100               	movlb	0	; () banked
 12050  001BE6  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12051  001BE8  0100               	movlb	0	; () banked
 12052  001BEA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12053  001BEC  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12054  001BEE  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12055  001BF0  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12056                           
 12057                           ; BSR set to: 0
 12058                           ;inc\CANlib.h: 810: RXF4SIDH = (unsigned char) tamp;
 12059  001BF2  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 12060                           
 12061                           ; BSR set to: 0
 12062                           ;inc\CANlib.h: 812: tamp = filter & 0x00000007;
 12063  001BF6  0E07               	movlw	7
 12064  001BF8  0100               	movlb	0	; () banked
 12065  001BFA  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12066  001BFC  0100               	movlb	0	; () banked
 12067  001BFE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12068  001C00  0E00               	movlw	0
 12069  001C02  0100               	movlb	0	; () banked
 12070  001C04  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12071  001C06  0100               	movlb	0	; () banked
 12072  001C08  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12073  001C0A  0E00               	movlw	0
 12074  001C0C  0100               	movlb	0	; () banked
 12075  001C0E  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12076  001C10  0100               	movlb	0	; () banked
 12077  001C12  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12078  001C14  0E00               	movlw	0
 12079  001C16  0100               	movlb	0	; () banked
 12080  001C18  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12081  001C1A  0100               	movlb	0	; () banked
 12082  001C1C  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12083                           
 12084                           ; BSR set to: 0
 12085                           ;inc\CANlib.h: 813: tamp = tamp << 5;
 12086  001C1E  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12087  001C22  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12088  001C26  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12089  001C2A  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12090  001C2E  0E05               	movlw	5
 12091  001C30                     u5345:
 12092  001C30  90D8               	bcf	status,0,c
 12093  001C32  0100               	movlb	0	; () banked
 12094  001C34  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 12095  001C36  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 12096  001C38  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 12097  001C3A  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 12098  001C3C  2EE8               	decfsz	wreg,f,c
 12099  001C3E  D7F8               	goto	u5345
 12100  001C40  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12101  001C44  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12102  001C48  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12103  001C4C  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;inc\CANlib.h: 814: RXF4SIDL = (unsigned char) tamp;
 12107  001C50  C081  FF11         	movff	CANSetFilter@tamp,3857	;volatile
 12108  001C54  D000               	goto	l4747
 12109  001C56                     l4747:
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;inc\CANlib.h: 815: }
 12113                           ;inc\CANlib.h: 817: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_STD_MSG))
 12114  001C56  0E05               	movlw	5
 12115  001C58  0100               	movlb	0	; () banked
 12116  001C5A  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12117  001C5C  A4D8               	btfss	status,2,c
 12118  001C5E  D059               	goto	l4765
 12119                           
 12120                           ; BSR set to: 0
 12121  001C60  0100               	movlb	0	; () banked
 12122  001C62  297B               	incf	CANSetFilter@type& (0+255),w,b
 12123  001C64  A4D8               	btfss	status,2,c
 12124  001C66  D055               	goto	l4765
 12125                           
 12126                           ; BSR set to: 0
 12127                           ;inc\CANlib.h: 818: {
 12128                           ;inc\CANlib.h: 819: RXF5SIDLbits.EXIDEN = 0x00;
 12129  001C68  010F               	movlb	15	; () banked
 12130  001C6A  9715               	bcf	21,3,b	;volatile
 12131                           
 12132                           ; BSR set to: 15
 12133                           ;inc\CANlib.h: 821: tamp = (filter >> 3);
 12134  001C6C  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12135  001C70  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12136  001C74  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12137  001C78  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12138  001C7C  0E04               	movlw	4
 12139  001C7E  D006               	goto	u5370
 12140  001C80                     u5375:
 12141  001C80  0100               	movlb	0	; () banked
 12142  001C82  90D8               	bcf	status,0,c
 12143  001C84  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12144  001C86  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12145  001C88  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12146  001C8A  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12147  001C8C                     u5370:
 12148  001C8C  2EE8               	decfsz	wreg,f,c
 12149  001C8E  D7F8               	goto	u5375
 12150  001C90  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12151  001C94  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12152  001C98  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12153  001C9C  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;inc\CANlib.h: 822: tamp = tamp & 0x000000FF;
 12157  001CA0  0100               	movlb	0	; () banked
 12158  001CA2  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12159  001CA4  0100               	movlb	0	; () banked
 12160  001CA6  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12161  001CA8  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12162  001CAA  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12163  001CAC  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12164                           
 12165                           ; BSR set to: 0
 12166                           ;inc\CANlib.h: 823: RXF5SIDH = (unsigned char) tamp;
 12167  001CAE  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 12168                           
 12169                           ; BSR set to: 0
 12170                           ;inc\CANlib.h: 825: tamp = filter & 0x00000007;
 12171  001CB2  0E07               	movlw	7
 12172  001CB4  0100               	movlb	0	; () banked
 12173  001CB6  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12174  001CB8  0100               	movlb	0	; () banked
 12175  001CBA  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12176  001CBC  0E00               	movlw	0
 12177  001CBE  0100               	movlb	0	; () banked
 12178  001CC0  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12179  001CC2  0100               	movlb	0	; () banked
 12180  001CC4  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12181  001CC6  0E00               	movlw	0
 12182  001CC8  0100               	movlb	0	; () banked
 12183  001CCA  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12184  001CCC  0100               	movlb	0	; () banked
 12185  001CCE  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12186  001CD0  0E00               	movlw	0
 12187  001CD2  0100               	movlb	0	; () banked
 12188  001CD4  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12189  001CD6  0100               	movlb	0	; () banked
 12190  001CD8  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12191                           
 12192                           ; BSR set to: 0
 12193                           ;inc\CANlib.h: 826: tamp = tamp << 5;
 12194  001CDA  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12195  001CDE  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12196  001CE2  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12197  001CE6  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12198  001CEA  0E05               	movlw	5
 12199  001CEC                     u5385:
 12200  001CEC  90D8               	bcf	status,0,c
 12201  001CEE  0100               	movlb	0	; () banked
 12202  001CF0  377C               	rlcf	??_CANSetFilter& (0+255),f,b
 12203  001CF2  377D               	rlcf	(??_CANSetFilter+1)& (0+255),f,b
 12204  001CF4  377E               	rlcf	(??_CANSetFilter+2)& (0+255),f,b
 12205  001CF6  377F               	rlcf	(??_CANSetFilter+3)& (0+255),f,b
 12206  001CF8  2EE8               	decfsz	wreg,f,c
 12207  001CFA  D7F8               	goto	u5385
 12208  001CFC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12209  001D00  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12210  001D04  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12211  001D08  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;inc\CANlib.h: 827: RXF5SIDL = (unsigned char) tamp;
 12215  001D0C  C081  FF15         	movff	CANSetFilter@tamp,3861	;volatile
 12216  001D10  D000               	goto	l4765
 12217  001D12                     l4765:
 12218                           
 12219                           ; BSR set to: 0
 12220                           ;inc\CANlib.h: 828: }
 12221                           ;inc\CANlib.h: 831: if ((numBuffer ==CAN_FILTER_B1_F1) && (type == CAN_CONFIG_XTD_MSG))
 12222  001D12  0100               	movlb	0	; () banked
 12223  001D14  5180               	movf	CANSetFilter@numBuffer& (0+255),w,b
 12224  001D16  0100               	movlb	0	; () banked
 12225  001D18  A4D8               	btfss	status,2,c
 12226  001D1A  D08B               	goto	l4799
 12227                           
 12228                           ; BSR set to: 0
 12229  001D1C  0EF7               	movlw	247
 12230  001D1E  0100               	movlb	0	; () banked
 12231  001D20  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12232  001D22  A4D8               	btfss	status,2,c
 12233  001D24  D086               	goto	l4799
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;inc\CANlib.h: 832: {
 12237                           ;inc\CANlib.h: 833: RXF0SIDLbits.EXIDEN = 0x01;
 12238  001D26  010F               	movlb	15	; () banked
 12239  001D28  8701               	bsf	1,3,b	;volatile
 12240                           
 12241                           ; BSR set to: 15
 12242                           ;inc\CANlib.h: 835: tamp = filter & 0x000000FF;
 12243  001D2A  0100               	movlb	0	; () banked
 12244  001D2C  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12245  001D2E  0100               	movlb	0	; () banked
 12246  001D30  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12247  001D32  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12248  001D34  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12249  001D36  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12250                           
 12251                           ; BSR set to: 0
 12252                           ;inc\CANlib.h: 836: RXF0EIDL = (unsigned char) tamp;
 12253  001D38  C081  FF03         	movff	CANSetFilter@tamp,3843	;volatile
 12254                           
 12255                           ; BSR set to: 0
 12256                           ;inc\CANlib.h: 838: tamp = filter & 0x0000FF00;
 12257  001D3C  0E00               	movlw	0
 12258  001D3E  0100               	movlb	0	; () banked
 12259  001D40  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12260  001D42  0100               	movlb	0	; () banked
 12261  001D44  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12262  001D46  0EFF               	movlw	255
 12263  001D48  0100               	movlb	0	; () banked
 12264  001D4A  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12265  001D4C  0100               	movlb	0	; () banked
 12266  001D4E  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12267  001D50  0E00               	movlw	0
 12268  001D52  0100               	movlb	0	; () banked
 12269  001D54  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12270  001D56  0100               	movlb	0	; () banked
 12271  001D58  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12272  001D5A  0E00               	movlw	0
 12273  001D5C  0100               	movlb	0	; () banked
 12274  001D5E  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12275  001D60  0100               	movlb	0	; () banked
 12276  001D62  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12277                           
 12278                           ; BSR set to: 0
 12279                           ;inc\CANlib.h: 839: tamp = tamp >> 8;
 12280  001D64  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12281  001D68  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12282  001D6C  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12283  001D70  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12284  001D74  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12285  001D78  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12286  001D7C  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12287  001D80  0100               	movlb	0	; () banked
 12288  001D82  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12289  001D84  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12290  001D88  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12291  001D8C  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12292  001D90  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12293                           
 12294                           ; BSR set to: 0
 12295                           ;inc\CANlib.h: 840: RXF0EIDH = (unsigned char) tamp;
 12296  001D94  C081  FF02         	movff	CANSetFilter@tamp,3842	;volatile
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;inc\CANlib.h: 842: if (filter & 0x00010000)
 12300  001D98  0100               	movlb	0	; () banked
 12301  001D9A  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12302  001D9C  D003               	goto	l461
 12303                           
 12304                           ; BSR set to: 0
 12305                           ;inc\CANlib.h: 843: RXF0SIDLbits.EID16 = 0x01;
 12306  001D9E  010F               	movlb	15	; () banked
 12307  001DA0  8101               	bsf	1,0,b	;volatile
 12308  001DA2  D002               	goto	l462
 12309  001DA4                     l461:
 12310                           
 12311                           ; BSR set to: 0
 12312                           ;inc\CANlib.h: 844: else
 12313                           ;inc\CANlib.h: 845: RXF0SIDLbits.EID16 = 0x00;
 12314  001DA4  010F               	movlb	15	; () banked
 12315  001DA6  9101               	bcf	1,0,b	;volatile
 12316  001DA8                     l462:
 12317                           
 12318                           ; BSR set to: 15
 12319                           ;inc\CANlib.h: 847: if (filter & 0x00020000)
 12320  001DA8  0100               	movlb	0	; () banked
 12321  001DAA  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12322  001DAC  D003               	goto	l463
 12323                           
 12324                           ; BSR set to: 0
 12325                           ;inc\CANlib.h: 848: RXF0SIDLbits.EID17 = 0x01;
 12326  001DAE  010F               	movlb	15	; () banked
 12327  001DB0  8301               	bsf	1,1,b	;volatile
 12328  001DB2  D002               	goto	l464
 12329  001DB4                     l463:
 12330                           
 12331                           ; BSR set to: 0
 12332                           ;inc\CANlib.h: 849: else
 12333                           ;inc\CANlib.h: 850: RXF0SIDLbits.EID17 = 0x00;
 12334  001DB4  010F               	movlb	15	; () banked
 12335  001DB6  9301               	bcf	1,1,b	;volatile
 12336  001DB8                     l464:
 12337                           
 12338                           ; BSR set to: 15
 12339                           ;inc\CANlib.h: 852: if (filter & 0x00040000)
 12340  001DB8  0100               	movlb	0	; () banked
 12341  001DBA  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12342  001DBC  D003               	goto	l465
 12343                           
 12344                           ; BSR set to: 0
 12345                           ;inc\CANlib.h: 853: RXF0SIDLbits.SID0 = 0x01;
 12346  001DBE  010F               	movlb	15	; () banked
 12347  001DC0  8B01               	bsf	1,5,b	;volatile
 12348  001DC2  D002               	goto	l466
 12349  001DC4                     l465:
 12350                           
 12351                           ; BSR set to: 0
 12352                           ;inc\CANlib.h: 854: else
 12353                           ;inc\CANlib.h: 855: RXF0SIDLbits.SID0 = 0x00;
 12354  001DC4  010F               	movlb	15	; () banked
 12355  001DC6  9B01               	bcf	1,5,b	;volatile
 12356  001DC8                     l466:
 12357                           
 12358                           ; BSR set to: 15
 12359                           ;inc\CANlib.h: 857: if (filter & 0x00080000)
 12360  001DC8  0100               	movlb	0	; () banked
 12361  001DCA  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12362  001DCC  D003               	goto	l467
 12363                           
 12364                           ; BSR set to: 0
 12365                           ;inc\CANlib.h: 858: RXF0SIDLbits.SID1 = 0x01;
 12366  001DCE  010F               	movlb	15	; () banked
 12367  001DD0  8D01               	bsf	1,6,b	;volatile
 12368  001DD2  D002               	goto	l468
 12369  001DD4                     l467:
 12370                           
 12371                           ; BSR set to: 0
 12372                           ;inc\CANlib.h: 859: else
 12373                           ;inc\CANlib.h: 860: RXF0SIDLbits.SID1 = 0x00;
 12374  001DD4  010F               	movlb	15	; () banked
 12375  001DD6  9D01               	bcf	1,6,b	;volatile
 12376  001DD8                     l468:
 12377                           
 12378                           ; BSR set to: 15
 12379                           ;inc\CANlib.h: 862: if (filter & 0x00100000)
 12380  001DD8  0100               	movlb	0	; () banked
 12381  001DDA  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12382  001DDC  D003               	goto	l469
 12383                           
 12384                           ; BSR set to: 0
 12385                           ;inc\CANlib.h: 863: RXF0SIDLbits.SID2 = 0x01 ;
 12386  001DDE  010F               	movlb	15	; () banked
 12387  001DE0  8F01               	bsf	1,7,b	;volatile
 12388  001DE2  D003               	goto	l4793
 12389  001DE4                     l469:
 12390                           
 12391                           ; BSR set to: 0
 12392                           ;inc\CANlib.h: 864: else
 12393                           ;inc\CANlib.h: 865: RXF0SIDLbits.SID2 = 0x00 ;
 12394  001DE4  010F               	movlb	15	; () banked
 12395  001DE6  9F01               	bcf	1,7,b	;volatile
 12396  001DE8  D000               	goto	l4793
 12397  001DEA                     l4793:
 12398                           
 12399                           ; BSR set to: 15
 12400                           ;inc\CANlib.h: 867: tamp = (filter >> 21);
 12401  001DEA  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12402  001DEE  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12403  001DF2  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12404  001DF6  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12405  001DFA  0E16               	movlw	22
 12406  001DFC  D006               	goto	u5460
 12407  001DFE                     u5465:
 12408  001DFE  0100               	movlb	0	; () banked
 12409  001E00  90D8               	bcf	status,0,c
 12410  001E02  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12411  001E04  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12412  001E06  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12413  001E08  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12414  001E0A                     u5460:
 12415  001E0A  2EE8               	decfsz	wreg,f,c
 12416  001E0C  D7F8               	goto	u5465
 12417  001E0E  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12418  001E12  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12419  001E16  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12420  001E1A  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12421                           
 12422                           ; BSR set to: 0
 12423                           ;inc\CANlib.h: 868: tamp = tamp & 0x000000FF;
 12424  001E1E  0100               	movlb	0	; () banked
 12425  001E20  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12426  001E22  0100               	movlb	0	; () banked
 12427  001E24  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12428  001E26  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12429  001E28  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12430  001E2A  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12431                           
 12432                           ; BSR set to: 0
 12433                           ;inc\CANlib.h: 869: RXF0SIDH = (unsigned char) tamp;
 12434  001E2C  C081  FF00         	movff	CANSetFilter@tamp,3840	;volatile
 12435  001E30  D000               	goto	l4799
 12436  001E32                     l4799:
 12437                           
 12438                           ; BSR set to: 0
 12439                           ;inc\CANlib.h: 870: }
 12440                           ;inc\CANlib.h: 872: if ((numBuffer ==CAN_FILTER_B1_F2) && (type == CAN_CONFIG_XTD_MSG))
 12441  001E32  0100               	movlb	0	; () banked
 12442  001E34  0580               	decf	CANSetFilter@numBuffer& (0+255),w,b
 12443  001E36  A4D8               	btfss	status,2,c
 12444  001E38  D08B               	goto	l4833
 12445                           
 12446                           ; BSR set to: 0
 12447  001E3A  0EF7               	movlw	247
 12448  001E3C  0100               	movlb	0	; () banked
 12449  001E3E  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12450  001E40  A4D8               	btfss	status,2,c
 12451  001E42  D086               	goto	l4833
 12452                           
 12453                           ; BSR set to: 0
 12454                           ;inc\CANlib.h: 873: {
 12455                           ;inc\CANlib.h: 874: RXF1SIDLbits.EXIDEN = 0x01;
 12456  001E44  010F               	movlb	15	; () banked
 12457  001E46  8705               	bsf	5,3,b	;volatile
 12458                           
 12459                           ; BSR set to: 15
 12460                           ;inc\CANlib.h: 876: tamp = filter & 0x000000FF;
 12461  001E48  0100               	movlb	0	; () banked
 12462  001E4A  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12463  001E4C  0100               	movlb	0	; () banked
 12464  001E4E  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12465  001E50  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12466  001E52  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12467  001E54  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12468                           
 12469                           ; BSR set to: 0
 12470                           ;inc\CANlib.h: 877: RXF1EIDL = (unsigned char) tamp;
 12471  001E56  C081  FF07         	movff	CANSetFilter@tamp,3847	;volatile
 12472                           
 12473                           ; BSR set to: 0
 12474                           ;inc\CANlib.h: 879: tamp = filter & 0x0000FF00;
 12475  001E5A  0E00               	movlw	0
 12476  001E5C  0100               	movlb	0	; () banked
 12477  001E5E  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12478  001E60  0100               	movlb	0	; () banked
 12479  001E62  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12480  001E64  0EFF               	movlw	255
 12481  001E66  0100               	movlb	0	; () banked
 12482  001E68  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12483  001E6A  0100               	movlb	0	; () banked
 12484  001E6C  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12485  001E6E  0E00               	movlw	0
 12486  001E70  0100               	movlb	0	; () banked
 12487  001E72  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12488  001E74  0100               	movlb	0	; () banked
 12489  001E76  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12490  001E78  0E00               	movlw	0
 12491  001E7A  0100               	movlb	0	; () banked
 12492  001E7C  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12493  001E7E  0100               	movlb	0	; () banked
 12494  001E80  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12495                           
 12496                           ; BSR set to: 0
 12497                           ;inc\CANlib.h: 880: tamp = tamp >> 8;
 12498  001E82  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12499  001E86  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12500  001E8A  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12501  001E8E  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12502  001E92  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12503  001E96  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12504  001E9A  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12505  001E9E  0100               	movlb	0	; () banked
 12506  001EA0  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12507  001EA2  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12508  001EA6  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12509  001EAA  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12510  001EAE  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12511                           
 12512                           ; BSR set to: 0
 12513                           ;inc\CANlib.h: 881: RXF1EIDH = (unsigned char) tamp;
 12514  001EB2  C081  FF06         	movff	CANSetFilter@tamp,3846	;volatile
 12515                           
 12516                           ; BSR set to: 0
 12517                           ;inc\CANlib.h: 883: if (filter & 0x00010000)
 12518  001EB6  0100               	movlb	0	; () banked
 12519  001EB8  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12520  001EBA  D003               	goto	l472
 12521                           
 12522                           ; BSR set to: 0
 12523                           ;inc\CANlib.h: 884: RXF1SIDLbits.EID16 = 0x01;
 12524  001EBC  010F               	movlb	15	; () banked
 12525  001EBE  8105               	bsf	5,0,b	;volatile
 12526  001EC0  D002               	goto	l473
 12527  001EC2                     l472:
 12528                           
 12529                           ; BSR set to: 0
 12530                           ;inc\CANlib.h: 885: else
 12531                           ;inc\CANlib.h: 886: RXF1SIDLbits.EID16 = 0x00;
 12532  001EC2  010F               	movlb	15	; () banked
 12533  001EC4  9105               	bcf	5,0,b	;volatile
 12534  001EC6                     l473:
 12535                           
 12536                           ; BSR set to: 15
 12537                           ;inc\CANlib.h: 888: if (filter & 0x00020000)
 12538  001EC6  0100               	movlb	0	; () banked
 12539  001EC8  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12540  001ECA  D003               	goto	l474
 12541                           
 12542                           ; BSR set to: 0
 12543                           ;inc\CANlib.h: 889: RXF1SIDLbits.EID17 = 0x01;
 12544  001ECC  010F               	movlb	15	; () banked
 12545  001ECE  8305               	bsf	5,1,b	;volatile
 12546  001ED0  D002               	goto	l475
 12547  001ED2                     l474:
 12548                           
 12549                           ; BSR set to: 0
 12550                           ;inc\CANlib.h: 890: else
 12551                           ;inc\CANlib.h: 891: RXF1SIDLbits.EID17 = 0x00;
 12552  001ED2  010F               	movlb	15	; () banked
 12553  001ED4  9305               	bcf	5,1,b	;volatile
 12554  001ED6                     l475:
 12555                           
 12556                           ; BSR set to: 15
 12557                           ;inc\CANlib.h: 893: if (filter & 0x00040000)
 12558  001ED6  0100               	movlb	0	; () banked
 12559  001ED8  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12560  001EDA  D003               	goto	l476
 12561                           
 12562                           ; BSR set to: 0
 12563                           ;inc\CANlib.h: 894: RXF1SIDLbits.SID0 = 0x01;
 12564  001EDC  010F               	movlb	15	; () banked
 12565  001EDE  8B05               	bsf	5,5,b	;volatile
 12566  001EE0  D002               	goto	l477
 12567  001EE2                     l476:
 12568                           
 12569                           ; BSR set to: 0
 12570                           ;inc\CANlib.h: 895: else
 12571                           ;inc\CANlib.h: 896: RXF1SIDLbits.SID0 = 0x00;
 12572  001EE2  010F               	movlb	15	; () banked
 12573  001EE4  9B05               	bcf	5,5,b	;volatile
 12574  001EE6                     l477:
 12575                           
 12576                           ; BSR set to: 15
 12577                           ;inc\CANlib.h: 898: if (filter & 0x00080000)
 12578  001EE6  0100               	movlb	0	; () banked
 12579  001EE8  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12580  001EEA  D003               	goto	l478
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;inc\CANlib.h: 899: RXF1SIDLbits.SID1 = 0x01;
 12584  001EEC  010F               	movlb	15	; () banked
 12585  001EEE  8D05               	bsf	5,6,b	;volatile
 12586  001EF0  D002               	goto	l479
 12587  001EF2                     l478:
 12588                           
 12589                           ; BSR set to: 0
 12590                           ;inc\CANlib.h: 900: else
 12591                           ;inc\CANlib.h: 901: RXF1SIDLbits.SID1 = 0x00;
 12592  001EF2  010F               	movlb	15	; () banked
 12593  001EF4  9D05               	bcf	5,6,b	;volatile
 12594  001EF6                     l479:
 12595                           
 12596                           ; BSR set to: 15
 12597                           ;inc\CANlib.h: 903: if (filter & 0x00100000)
 12598  001EF6  0100               	movlb	0	; () banked
 12599  001EF8  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12600  001EFA  D003               	goto	l480
 12601                           
 12602                           ; BSR set to: 0
 12603                           ;inc\CANlib.h: 904: RXF1SIDLbits.SID2 = 0x01 ;
 12604  001EFC  010F               	movlb	15	; () banked
 12605  001EFE  8F05               	bsf	5,7,b	;volatile
 12606  001F00  D003               	goto	l4827
 12607  001F02                     l480:
 12608                           
 12609                           ; BSR set to: 0
 12610                           ;inc\CANlib.h: 905: else
 12611                           ;inc\CANlib.h: 906: RXF1SIDLbits.SID2 = 0x00 ;
 12612  001F02  010F               	movlb	15	; () banked
 12613  001F04  9F05               	bcf	5,7,b	;volatile
 12614  001F06  D000               	goto	l4827
 12615  001F08                     l4827:
 12616                           
 12617                           ; BSR set to: 15
 12618                           ;inc\CANlib.h: 908: tamp = (filter >> 21);
 12619  001F08  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12620  001F0C  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12621  001F10  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12622  001F14  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12623  001F18  0E16               	movlw	22
 12624  001F1A  D006               	goto	u5540
 12625  001F1C                     u5545:
 12626  001F1C  0100               	movlb	0	; () banked
 12627  001F1E  90D8               	bcf	status,0,c
 12628  001F20  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12629  001F22  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12630  001F24  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12631  001F26  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12632  001F28                     u5540:
 12633  001F28  2EE8               	decfsz	wreg,f,c
 12634  001F2A  D7F8               	goto	u5545
 12635  001F2C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12636  001F30  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12637  001F34  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12638  001F38  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12639                           
 12640                           ; BSR set to: 0
 12641                           ;inc\CANlib.h: 909: tamp = tamp & 0x000000FF;
 12642  001F3C  0100               	movlb	0	; () banked
 12643  001F3E  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12644  001F40  0100               	movlb	0	; () banked
 12645  001F42  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12646  001F44  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12647  001F46  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12648  001F48  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12649                           
 12650                           ; BSR set to: 0
 12651                           ;inc\CANlib.h: 910: RXF1SIDH = (unsigned char) tamp;
 12652  001F4A  C081  FF04         	movff	CANSetFilter@tamp,3844	;volatile
 12653  001F4E  D000               	goto	l4833
 12654  001F50                     l4833:
 12655                           
 12656                           ; BSR set to: 0
 12657                           ;inc\CANlib.h: 911: }
 12658                           ;inc\CANlib.h: 914: if ((numBuffer ==CAN_FILTER_B2_F1) && (type == CAN_CONFIG_XTD_MSG))
 12659  001F50  0E02               	movlw	2
 12660  001F52  0100               	movlb	0	; () banked
 12661  001F54  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12662  001F56  A4D8               	btfss	status,2,c
 12663  001F58  D08B               	goto	l4867
 12664                           
 12665                           ; BSR set to: 0
 12666  001F5A  0EF7               	movlw	247
 12667  001F5C  0100               	movlb	0	; () banked
 12668  001F5E  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12669  001F60  A4D8               	btfss	status,2,c
 12670  001F62  D086               	goto	l4867
 12671                           
 12672                           ; BSR set to: 0
 12673                           ;inc\CANlib.h: 915: {
 12674                           ;inc\CANlib.h: 916: RXF2SIDLbits.EXIDEN = 0x01;
 12675  001F64  010F               	movlb	15	; () banked
 12676  001F66  8709               	bsf	9,3,b	;volatile
 12677                           
 12678                           ; BSR set to: 15
 12679                           ;inc\CANlib.h: 918: tamp = filter & 0x000000FF;
 12680  001F68  0100               	movlb	0	; () banked
 12681  001F6A  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12682  001F6C  0100               	movlb	0	; () banked
 12683  001F6E  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12684  001F70  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12685  001F72  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12686  001F74  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12687                           
 12688                           ; BSR set to: 0
 12689                           ;inc\CANlib.h: 919: RXF2EIDL = (unsigned char) tamp;
 12690  001F76  C081  FF0B         	movff	CANSetFilter@tamp,3851	;volatile
 12691                           
 12692                           ; BSR set to: 0
 12693                           ;inc\CANlib.h: 921: tamp = filter & 0x0000FF00;
 12694  001F7A  0E00               	movlw	0
 12695  001F7C  0100               	movlb	0	; () banked
 12696  001F7E  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12697  001F80  0100               	movlb	0	; () banked
 12698  001F82  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12699  001F84  0EFF               	movlw	255
 12700  001F86  0100               	movlb	0	; () banked
 12701  001F88  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12702  001F8A  0100               	movlb	0	; () banked
 12703  001F8C  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12704  001F8E  0E00               	movlw	0
 12705  001F90  0100               	movlb	0	; () banked
 12706  001F92  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12707  001F94  0100               	movlb	0	; () banked
 12708  001F96  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12709  001F98  0E00               	movlw	0
 12710  001F9A  0100               	movlb	0	; () banked
 12711  001F9C  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12712  001F9E  0100               	movlb	0	; () banked
 12713  001FA0  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12714                           
 12715                           ; BSR set to: 0
 12716                           ;inc\CANlib.h: 922: tamp = tamp >> 8;
 12717  001FA2  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12718  001FA6  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12719  001FAA  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12720  001FAE  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12721  001FB2  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12722  001FB6  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12723  001FBA  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12724  001FBE  0100               	movlb	0	; () banked
 12725  001FC0  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12726  001FC2  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12727  001FC6  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12728  001FCA  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12729  001FCE  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12730                           
 12731                           ; BSR set to: 0
 12732                           ;inc\CANlib.h: 923: RXF2EIDH = (unsigned char) tamp;
 12733  001FD2  C081  FF0A         	movff	CANSetFilter@tamp,3850	;volatile
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;inc\CANlib.h: 925: if (filter & 0x00010000)
 12737  001FD6  0100               	movlb	0	; () banked
 12738  001FD8  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12739  001FDA  D003               	goto	l483
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;inc\CANlib.h: 926: RXF2SIDLbits.EID16 = 0x01;
 12743  001FDC  010F               	movlb	15	; () banked
 12744  001FDE  8109               	bsf	9,0,b	;volatile
 12745  001FE0  D002               	goto	l484
 12746  001FE2                     l483:
 12747                           
 12748                           ; BSR set to: 0
 12749                           ;inc\CANlib.h: 927: else
 12750                           ;inc\CANlib.h: 928: RXF2SIDLbits.EID16 = 0x00;
 12751  001FE2  010F               	movlb	15	; () banked
 12752  001FE4  9109               	bcf	9,0,b	;volatile
 12753  001FE6                     l484:
 12754                           
 12755                           ; BSR set to: 15
 12756                           ;inc\CANlib.h: 930: if (filter & 0x00020000)
 12757  001FE6  0100               	movlb	0	; () banked
 12758  001FE8  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12759  001FEA  D003               	goto	l485
 12760                           
 12761                           ; BSR set to: 0
 12762                           ;inc\CANlib.h: 931: RXF2SIDLbits.EID17 = 0x01;
 12763  001FEC  010F               	movlb	15	; () banked
 12764  001FEE  8309               	bsf	9,1,b	;volatile
 12765  001FF0  D002               	goto	l486
 12766  001FF2                     l485:
 12767                           
 12768                           ; BSR set to: 0
 12769                           ;inc\CANlib.h: 932: else
 12770                           ;inc\CANlib.h: 933: RXF2SIDLbits.EID17 = 0x00;
 12771  001FF2  010F               	movlb	15	; () banked
 12772  001FF4  9309               	bcf	9,1,b	;volatile
 12773  001FF6                     l486:
 12774                           
 12775                           ; BSR set to: 15
 12776                           ;inc\CANlib.h: 935: if (filter & 0x00040000)
 12777  001FF6  0100               	movlb	0	; () banked
 12778  001FF8  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12779  001FFA  D003               	goto	l487
 12780                           
 12781                           ; BSR set to: 0
 12782                           ;inc\CANlib.h: 936: RXF2SIDLbits.SID0 = 0x01;
 12783  001FFC  010F               	movlb	15	; () banked
 12784  001FFE  8B09               	bsf	9,5,b	;volatile
 12785  002000  D002               	goto	l488
 12786  002002                     l487:
 12787                           
 12788                           ; BSR set to: 0
 12789                           ;inc\CANlib.h: 937: else
 12790                           ;inc\CANlib.h: 938: RXF2SIDLbits.SID0 = 0x00;
 12791  002002  010F               	movlb	15	; () banked
 12792  002004  9B09               	bcf	9,5,b	;volatile
 12793  002006                     l488:
 12794                           
 12795                           ; BSR set to: 15
 12796                           ;inc\CANlib.h: 940: if (filter & 0x00080000)
 12797  002006  0100               	movlb	0	; () banked
 12798  002008  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 12799  00200A  D003               	goto	l489
 12800                           
 12801                           ; BSR set to: 0
 12802                           ;inc\CANlib.h: 941: RXF2SIDLbits.SID1 = 0x01;
 12803  00200C  010F               	movlb	15	; () banked
 12804  00200E  8D09               	bsf	9,6,b	;volatile
 12805  002010  D002               	goto	l490
 12806  002012                     l489:
 12807                           
 12808                           ; BSR set to: 0
 12809                           ;inc\CANlib.h: 942: else
 12810                           ;inc\CANlib.h: 943: RXF2SIDLbits.SID1 = 0x00;
 12811  002012  010F               	movlb	15	; () banked
 12812  002014  9D09               	bcf	9,6,b	;volatile
 12813  002016                     l490:
 12814                           
 12815                           ; BSR set to: 15
 12816                           ;inc\CANlib.h: 945: if (filter & 0x00100000)
 12817  002016  0100               	movlb	0	; () banked
 12818  002018  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 12819  00201A  D003               	goto	l491
 12820                           
 12821                           ; BSR set to: 0
 12822                           ;inc\CANlib.h: 946: RXF2SIDLbits.SID2 = 0x01 ;
 12823  00201C  010F               	movlb	15	; () banked
 12824  00201E  8F09               	bsf	9,7,b	;volatile
 12825  002020  D003               	goto	l4861
 12826  002022                     l491:
 12827                           
 12828                           ; BSR set to: 0
 12829                           ;inc\CANlib.h: 947: else
 12830                           ;inc\CANlib.h: 948: RXF2SIDLbits.SID2 = 0x00 ;
 12831  002022  010F               	movlb	15	; () banked
 12832  002024  9F09               	bcf	9,7,b	;volatile
 12833  002026  D000               	goto	l4861
 12834  002028                     l4861:
 12835                           
 12836                           ; BSR set to: 15
 12837                           ;inc\CANlib.h: 950: tamp = (filter >> 21);
 12838  002028  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 12839  00202C  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 12840  002030  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 12841  002034  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 12842  002038  0E16               	movlw	22
 12843  00203A  D006               	goto	u5620
 12844  00203C                     u5625:
 12845  00203C  0100               	movlb	0	; () banked
 12846  00203E  90D8               	bcf	status,0,c
 12847  002040  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 12848  002042  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 12849  002044  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 12850  002046  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 12851  002048                     u5620:
 12852  002048  2EE8               	decfsz	wreg,f,c
 12853  00204A  D7F8               	goto	u5625
 12854  00204C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12855  002050  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12856  002054  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12857  002058  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12858                           
 12859                           ; BSR set to: 0
 12860                           ;inc\CANlib.h: 951: tamp = tamp & 0x000000FF;
 12861  00205C  0100               	movlb	0	; () banked
 12862  00205E  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 12863  002060  0100               	movlb	0	; () banked
 12864  002062  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12865  002064  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12866  002066  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12867  002068  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;inc\CANlib.h: 952: RXF2SIDH = (unsigned char) tamp;
 12871  00206A  C081  FF08         	movff	CANSetFilter@tamp,3848	;volatile
 12872  00206E  D000               	goto	l4867
 12873  002070                     l4867:
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;inc\CANlib.h: 953: }
 12877                           ;inc\CANlib.h: 955: if ((numBuffer ==CAN_FILTER_B2_F2) && (type == CAN_CONFIG_XTD_MSG))
 12878  002070  0E03               	movlw	3
 12879  002072  0100               	movlb	0	; () banked
 12880  002074  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 12881  002076  A4D8               	btfss	status,2,c
 12882  002078  D08B               	goto	l4901
 12883                           
 12884                           ; BSR set to: 0
 12885  00207A  0EF7               	movlw	247
 12886  00207C  0100               	movlb	0	; () banked
 12887  00207E  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 12888  002080  A4D8               	btfss	status,2,c
 12889  002082  D086               	goto	l4901
 12890                           
 12891                           ; BSR set to: 0
 12892                           ;inc\CANlib.h: 956: {
 12893                           ;inc\CANlib.h: 957: RXF3SIDLbits.EXIDEN = 0x01;
 12894  002084  010F               	movlb	15	; () banked
 12895  002086  870D               	bsf	13,3,b	;volatile
 12896                           
 12897                           ; BSR set to: 15
 12898                           ;inc\CANlib.h: 959: tamp = filter & 0x000000FF;
 12899  002088  0100               	movlb	0	; () banked
 12900  00208A  5177               	movf	CANSetFilter@filter& (0+255),w,b
 12901  00208C  0100               	movlb	0	; () banked
 12902  00208E  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12903  002090  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 12904  002092  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 12905  002094  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 12906                           
 12907                           ; BSR set to: 0
 12908                           ;inc\CANlib.h: 960: RXF3EIDL = (unsigned char) tamp;
 12909  002096  C081  FF0F         	movff	CANSetFilter@tamp,3855	;volatile
 12910                           
 12911                           ; BSR set to: 0
 12912                           ;inc\CANlib.h: 962: tamp = filter & 0x0000FF00;
 12913  00209A  0E00               	movlw	0
 12914  00209C  0100               	movlb	0	; () banked
 12915  00209E  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 12916  0020A0  0100               	movlb	0	; () banked
 12917  0020A2  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 12918  0020A4  0EFF               	movlw	255
 12919  0020A6  0100               	movlb	0	; () banked
 12920  0020A8  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 12921  0020AA  0100               	movlb	0	; () banked
 12922  0020AC  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 12923  0020AE  0E00               	movlw	0
 12924  0020B0  0100               	movlb	0	; () banked
 12925  0020B2  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 12926  0020B4  0100               	movlb	0	; () banked
 12927  0020B6  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 12928  0020B8  0E00               	movlw	0
 12929  0020BA  0100               	movlb	0	; () banked
 12930  0020BC  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 12931  0020BE  0100               	movlb	0	; () banked
 12932  0020C0  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 12933                           
 12934                           ; BSR set to: 0
 12935                           ;inc\CANlib.h: 963: tamp = tamp >> 8;
 12936  0020C2  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 12937  0020C6  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 12938  0020CA  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 12939  0020CE  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 12940  0020D2  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 12941  0020D6  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 12942  0020DA  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 12943  0020DE  0100               	movlb	0	; () banked
 12944  0020E0  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 12945  0020E2  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 12946  0020E6  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 12947  0020EA  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 12948  0020EE  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 12949                           
 12950                           ; BSR set to: 0
 12951                           ;inc\CANlib.h: 964: RXF3EIDH = (unsigned char) tamp;
 12952  0020F2  C081  FF0E         	movff	CANSetFilter@tamp,3854	;volatile
 12953                           
 12954                           ; BSR set to: 0
 12955                           ;inc\CANlib.h: 966: if (filter & 0x00010000)
 12956  0020F6  0100               	movlb	0	; () banked
 12957  0020F8  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 12958  0020FA  D003               	goto	l494
 12959                           
 12960                           ; BSR set to: 0
 12961                           ;inc\CANlib.h: 967: RXF3SIDLbits.EID16 = 0x01;
 12962  0020FC  010F               	movlb	15	; () banked
 12963  0020FE  810D               	bsf	13,0,b	;volatile
 12964  002100  D002               	goto	l495
 12965  002102                     l494:
 12966                           
 12967                           ; BSR set to: 0
 12968                           ;inc\CANlib.h: 968: else
 12969                           ;inc\CANlib.h: 969: RXF3SIDLbits.EID16 = 0x00;
 12970  002102  010F               	movlb	15	; () banked
 12971  002104  910D               	bcf	13,0,b	;volatile
 12972  002106                     l495:
 12973                           
 12974                           ; BSR set to: 15
 12975                           ;inc\CANlib.h: 971: if (filter & 0x00020000)
 12976  002106  0100               	movlb	0	; () banked
 12977  002108  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 12978  00210A  D003               	goto	l496
 12979                           
 12980                           ; BSR set to: 0
 12981                           ;inc\CANlib.h: 972: RXF3SIDLbits.EID17 = 0x01;
 12982  00210C  010F               	movlb	15	; () banked
 12983  00210E  830D               	bsf	13,1,b	;volatile
 12984  002110  D002               	goto	l497
 12985  002112                     l496:
 12986                           
 12987                           ; BSR set to: 0
 12988                           ;inc\CANlib.h: 973: else
 12989                           ;inc\CANlib.h: 974: RXF3SIDLbits.EID17 = 0x00;
 12990  002112  010F               	movlb	15	; () banked
 12991  002114  930D               	bcf	13,1,b	;volatile
 12992  002116                     l497:
 12993                           
 12994                           ; BSR set to: 15
 12995                           ;inc\CANlib.h: 976: if (filter & 0x00040000)
 12996  002116  0100               	movlb	0	; () banked
 12997  002118  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 12998  00211A  D003               	goto	l498
 12999                           
 13000                           ; BSR set to: 0
 13001                           ;inc\CANlib.h: 977: RXF3SIDLbits.SID0 = 0x01;
 13002  00211C  010F               	movlb	15	; () banked
 13003  00211E  8B0D               	bsf	13,5,b	;volatile
 13004  002120  D002               	goto	l499
 13005  002122                     l498:
 13006                           
 13007                           ; BSR set to: 0
 13008                           ;inc\CANlib.h: 978: else
 13009                           ;inc\CANlib.h: 979: RXF3SIDLbits.SID0 = 0x00;
 13010  002122  010F               	movlb	15	; () banked
 13011  002124  9B0D               	bcf	13,5,b	;volatile
 13012  002126                     l499:
 13013                           
 13014                           ; BSR set to: 15
 13015                           ;inc\CANlib.h: 981: if (filter & 0x00080000)
 13016  002126  0100               	movlb	0	; () banked
 13017  002128  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 13018  00212A  D003               	goto	l500
 13019                           
 13020                           ; BSR set to: 0
 13021                           ;inc\CANlib.h: 982: RXF3SIDLbits.SID1 = 0x01;
 13022  00212C  010F               	movlb	15	; () banked
 13023  00212E  8D0D               	bsf	13,6,b	;volatile
 13024  002130  D002               	goto	l501
 13025  002132                     l500:
 13026                           
 13027                           ; BSR set to: 0
 13028                           ;inc\CANlib.h: 983: else
 13029                           ;inc\CANlib.h: 984: RXF3SIDLbits.SID1 = 0x00;
 13030  002132  010F               	movlb	15	; () banked
 13031  002134  9D0D               	bcf	13,6,b	;volatile
 13032  002136                     l501:
 13033                           
 13034                           ; BSR set to: 15
 13035                           ;inc\CANlib.h: 986: if (filter & 0x00100000)
 13036  002136  0100               	movlb	0	; () banked
 13037  002138  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 13038  00213A  D003               	goto	l502
 13039                           
 13040                           ; BSR set to: 0
 13041                           ;inc\CANlib.h: 987: RXF3SIDLbits.SID2 = 0x01 ;
 13042  00213C  010F               	movlb	15	; () banked
 13043  00213E  8F0D               	bsf	13,7,b	;volatile
 13044  002140  D003               	goto	l4895
 13045  002142                     l502:
 13046                           
 13047                           ; BSR set to: 0
 13048                           ;inc\CANlib.h: 988: else
 13049                           ;inc\CANlib.h: 989: RXF3SIDLbits.SID2 = 0x00 ;
 13050  002142  010F               	movlb	15	; () banked
 13051  002144  9F0D               	bcf	13,7,b	;volatile
 13052  002146  D000               	goto	l4895
 13053  002148                     l4895:
 13054                           
 13055                           ; BSR set to: 15
 13056                           ;inc\CANlib.h: 991: tamp = (filter >> 21);
 13057  002148  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 13058  00214C  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 13059  002150  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 13060  002154  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 13061  002158  0E16               	movlw	22
 13062  00215A  D006               	goto	u5700
 13063  00215C                     u5705:
 13064  00215C  0100               	movlb	0	; () banked
 13065  00215E  90D8               	bcf	status,0,c
 13066  002160  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 13067  002162  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 13068  002164  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 13069  002166  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 13070  002168                     u5700:
 13071  002168  2EE8               	decfsz	wreg,f,c
 13072  00216A  D7F8               	goto	u5705
 13073  00216C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 13074  002170  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 13075  002174  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 13076  002178  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 13077                           
 13078                           ; BSR set to: 0
 13079                           ;inc\CANlib.h: 992: tamp = tamp & 0x000000FF;
 13080  00217C  0100               	movlb	0	; () banked
 13081  00217E  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 13082  002180  0100               	movlb	0	; () banked
 13083  002182  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13084  002184  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 13085  002186  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 13086  002188  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 13087                           
 13088                           ; BSR set to: 0
 13089                           ;inc\CANlib.h: 993: RXF3SIDH = (unsigned char) tamp;
 13090  00218A  C081  FF0C         	movff	CANSetFilter@tamp,3852	;volatile
 13091  00218E  D000               	goto	l4901
 13092  002190                     l4901:
 13093                           
 13094                           ; BSR set to: 0
 13095                           ;inc\CANlib.h: 994: }
 13096                           ;inc\CANlib.h: 996: if ((numBuffer ==CAN_FILTER_B2_F3) && (type == CAN_CONFIG_XTD_MSG))
 13097  002190  0E04               	movlw	4
 13098  002192  0100               	movlb	0	; () banked
 13099  002194  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 13100  002196  A4D8               	btfss	status,2,c
 13101  002198  D08B               	goto	l4935
 13102                           
 13103                           ; BSR set to: 0
 13104  00219A  0EF7               	movlw	247
 13105  00219C  0100               	movlb	0	; () banked
 13106  00219E  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 13107  0021A0  A4D8               	btfss	status,2,c
 13108  0021A2  D086               	goto	l4935
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;inc\CANlib.h: 997: {
 13112                           ;inc\CANlib.h: 998: RXF4SIDLbits.EXIDEN = 0x01;
 13113  0021A4  010F               	movlb	15	; () banked
 13114  0021A6  8711               	bsf	17,3,b	;volatile
 13115                           
 13116                           ; BSR set to: 15
 13117                           ;inc\CANlib.h: 1000: tamp = filter & 0x000000FF;
 13118  0021A8  0100               	movlb	0	; () banked
 13119  0021AA  5177               	movf	CANSetFilter@filter& (0+255),w,b
 13120  0021AC  0100               	movlb	0	; () banked
 13121  0021AE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13122  0021B0  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 13123  0021B2  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 13124  0021B4  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 13125                           
 13126                           ; BSR set to: 0
 13127                           ;inc\CANlib.h: 1001: RXF4EIDL = (unsigned char) tamp;
 13128  0021B6  C081  FF13         	movff	CANSetFilter@tamp,3859	;volatile
 13129                           
 13130                           ; BSR set to: 0
 13131                           ;inc\CANlib.h: 1003: tamp = filter & 0x0000FF00;
 13132  0021BA  0E00               	movlw	0
 13133  0021BC  0100               	movlb	0	; () banked
 13134  0021BE  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 13135  0021C0  0100               	movlb	0	; () banked
 13136  0021C2  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13137  0021C4  0EFF               	movlw	255
 13138  0021C6  0100               	movlb	0	; () banked
 13139  0021C8  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 13140  0021CA  0100               	movlb	0	; () banked
 13141  0021CC  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 13142  0021CE  0E00               	movlw	0
 13143  0021D0  0100               	movlb	0	; () banked
 13144  0021D2  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 13145  0021D4  0100               	movlb	0	; () banked
 13146  0021D6  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 13147  0021D8  0E00               	movlw	0
 13148  0021DA  0100               	movlb	0	; () banked
 13149  0021DC  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 13150  0021DE  0100               	movlb	0	; () banked
 13151  0021E0  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 13152                           
 13153                           ; BSR set to: 0
 13154                           ;inc\CANlib.h: 1004: tamp = tamp >> 8;
 13155  0021E2  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 13156  0021E6  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 13157  0021EA  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 13158  0021EE  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 13159  0021F2  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 13160  0021F6  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 13161  0021FA  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 13162  0021FE  0100               	movlb	0	; () banked
 13163  002200  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 13164  002202  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 13165  002206  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 13166  00220A  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 13167  00220E  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 13168                           
 13169                           ; BSR set to: 0
 13170                           ;inc\CANlib.h: 1005: RXF4EIDH = (unsigned char) tamp;
 13171  002212  C081  FF12         	movff	CANSetFilter@tamp,3858	;volatile
 13172                           
 13173                           ; BSR set to: 0
 13174                           ;inc\CANlib.h: 1007: if (filter & 0x00010000)
 13175  002216  0100               	movlb	0	; () banked
 13176  002218  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 13177  00221A  D003               	goto	l505
 13178                           
 13179                           ; BSR set to: 0
 13180                           ;inc\CANlib.h: 1008: RXF4SIDLbits.EID16 = 0x01;
 13181  00221C  010F               	movlb	15	; () banked
 13182  00221E  8111               	bsf	17,0,b	;volatile
 13183  002220  D002               	goto	l506
 13184  002222                     l505:
 13185                           
 13186                           ; BSR set to: 0
 13187                           ;inc\CANlib.h: 1009: else
 13188                           ;inc\CANlib.h: 1010: RXF4SIDLbits.EID16 = 0x00;
 13189  002222  010F               	movlb	15	; () banked
 13190  002224  9111               	bcf	17,0,b	;volatile
 13191  002226                     l506:
 13192                           
 13193                           ; BSR set to: 15
 13194                           ;inc\CANlib.h: 1012: if (filter & 0x00020000)
 13195  002226  0100               	movlb	0	; () banked
 13196  002228  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 13197  00222A  D003               	goto	l507
 13198                           
 13199                           ; BSR set to: 0
 13200                           ;inc\CANlib.h: 1013: RXF4SIDLbits.EID17 = 0x01;
 13201  00222C  010F               	movlb	15	; () banked
 13202  00222E  8311               	bsf	17,1,b	;volatile
 13203  002230  D002               	goto	l508
 13204  002232                     l507:
 13205                           
 13206                           ; BSR set to: 0
 13207                           ;inc\CANlib.h: 1014: else
 13208                           ;inc\CANlib.h: 1015: RXF4SIDLbits.EID17 = 0x00;
 13209  002232  010F               	movlb	15	; () banked
 13210  002234  9311               	bcf	17,1,b	;volatile
 13211  002236                     l508:
 13212                           
 13213                           ; BSR set to: 15
 13214                           ;inc\CANlib.h: 1017: if (filter & 0x00040000)
 13215  002236  0100               	movlb	0	; () banked
 13216  002238  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 13217  00223A  D003               	goto	l509
 13218                           
 13219                           ; BSR set to: 0
 13220                           ;inc\CANlib.h: 1018: RXF4SIDLbits.SID0 = 0x01;
 13221  00223C  010F               	movlb	15	; () banked
 13222  00223E  8B11               	bsf	17,5,b	;volatile
 13223  002240  D002               	goto	l510
 13224  002242                     l509:
 13225                           
 13226                           ; BSR set to: 0
 13227                           ;inc\CANlib.h: 1019: else
 13228                           ;inc\CANlib.h: 1020: RXF4SIDLbits.SID0 = 0x00;
 13229  002242  010F               	movlb	15	; () banked
 13230  002244  9B11               	bcf	17,5,b	;volatile
 13231  002246                     l510:
 13232                           
 13233                           ; BSR set to: 15
 13234                           ;inc\CANlib.h: 1022: if (filter & 0x00080000)
 13235  002246  0100               	movlb	0	; () banked
 13236  002248  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 13237  00224A  D003               	goto	l511
 13238                           
 13239                           ; BSR set to: 0
 13240                           ;inc\CANlib.h: 1023: RXF4SIDLbits.SID1 = 0x01;
 13241  00224C  010F               	movlb	15	; () banked
 13242  00224E  8D11               	bsf	17,6,b	;volatile
 13243  002250  D002               	goto	l512
 13244  002252                     l511:
 13245                           
 13246                           ; BSR set to: 0
 13247                           ;inc\CANlib.h: 1024: else
 13248                           ;inc\CANlib.h: 1025: RXF4SIDLbits.SID1 = 0x00;
 13249  002252  010F               	movlb	15	; () banked
 13250  002254  9D11               	bcf	17,6,b	;volatile
 13251  002256                     l512:
 13252                           
 13253                           ; BSR set to: 15
 13254                           ;inc\CANlib.h: 1027: if (filter & 0x00100000)
 13255  002256  0100               	movlb	0	; () banked
 13256  002258  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 13257  00225A  D003               	goto	l513
 13258                           
 13259                           ; BSR set to: 0
 13260                           ;inc\CANlib.h: 1028: RXF4SIDLbits.SID2 = 0x01 ;
 13261  00225C  010F               	movlb	15	; () banked
 13262  00225E  8F11               	bsf	17,7,b	;volatile
 13263  002260  D003               	goto	l4929
 13264  002262                     l513:
 13265                           
 13266                           ; BSR set to: 0
 13267                           ;inc\CANlib.h: 1029: else
 13268                           ;inc\CANlib.h: 1030: RXF4SIDLbits.SID2 = 0x00 ;
 13269  002262  010F               	movlb	15	; () banked
 13270  002264  9F11               	bcf	17,7,b	;volatile
 13271  002266  D000               	goto	l4929
 13272  002268                     l4929:
 13273                           
 13274                           ; BSR set to: 15
 13275                           ;inc\CANlib.h: 1032: tamp = (filter >> 21);
 13276  002268  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 13277  00226C  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 13278  002270  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 13279  002274  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 13280  002278  0E16               	movlw	22
 13281  00227A  D006               	goto	u5780
 13282  00227C                     u5785:
 13283  00227C  0100               	movlb	0	; () banked
 13284  00227E  90D8               	bcf	status,0,c
 13285  002280  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 13286  002282  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 13287  002284  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 13288  002286  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 13289  002288                     u5780:
 13290  002288  2EE8               	decfsz	wreg,f,c
 13291  00228A  D7F8               	goto	u5785
 13292  00228C  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 13293  002290  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 13294  002294  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 13295  002298  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 13296                           
 13297                           ; BSR set to: 0
 13298                           ;inc\CANlib.h: 1033: tamp = tamp & 0x000000FF;
 13299  00229C  0100               	movlb	0	; () banked
 13300  00229E  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 13301  0022A0  0100               	movlb	0	; () banked
 13302  0022A2  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13303  0022A4  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 13304  0022A6  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 13305  0022A8  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 13306                           
 13307                           ; BSR set to: 0
 13308                           ;inc\CANlib.h: 1034: RXF4SIDH = (unsigned char) tamp;
 13309  0022AA  C081  FF10         	movff	CANSetFilter@tamp,3856	;volatile
 13310  0022AE  D000               	goto	l4935
 13311  0022B0                     l4935:
 13312                           
 13313                           ; BSR set to: 0
 13314                           ;inc\CANlib.h: 1035: }
 13315                           ;inc\CANlib.h: 1037: if ((numBuffer ==CAN_FILTER_B2_F4) && (type == CAN_CONFIG_XTD_MSG))
 13316  0022B0  0E05               	movlw	5
 13317  0022B2  0100               	movlb	0	; () banked
 13318  0022B4  1980               	xorwf	CANSetFilter@numBuffer& (0+255),w,b
 13319  0022B6  A4D8               	btfss	status,2,c
 13320  0022B8  0012               	return	
 13321                           
 13322                           ; BSR set to: 0
 13323  0022BA  0EF7               	movlw	247
 13324  0022BC  0100               	movlb	0	; () banked
 13325  0022BE  197B               	xorwf	CANSetFilter@type& (0+255),w,b
 13326  0022C0  A4D8               	btfss	status,2,c
 13327  0022C2  0012               	return	
 13328                           
 13329                           ; BSR set to: 0
 13330                           ;inc\CANlib.h: 1038: {
 13331                           ;inc\CANlib.h: 1039: RXF5SIDLbits.EXIDEN = 0x01;
 13332  0022C4  010F               	movlb	15	; () banked
 13333  0022C6  8715               	bsf	21,3,b	;volatile
 13334                           
 13335                           ; BSR set to: 15
 13336                           ;inc\CANlib.h: 1041: tamp = filter & 0x000000FF;
 13337  0022C8  0100               	movlb	0	; () banked
 13338  0022CA  5177               	movf	CANSetFilter@filter& (0+255),w,b
 13339  0022CC  0100               	movlb	0	; () banked
 13340  0022CE  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13341  0022D0  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 13342  0022D2  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 13343  0022D4  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 13344                           
 13345                           ; BSR set to: 0
 13346                           ;inc\CANlib.h: 1042: RXF5EIDL = (unsigned char) tamp;
 13347  0022D6  C081  FF17         	movff	CANSetFilter@tamp,3863	;volatile
 13348                           
 13349                           ; BSR set to: 0
 13350                           ;inc\CANlib.h: 1044: tamp = filter & 0x0000FF00;
 13351  0022DA  0E00               	movlw	0
 13352  0022DC  0100               	movlb	0	; () banked
 13353  0022DE  1577               	andwf	CANSetFilter@filter& (0+255),w,b
 13354  0022E0  0100               	movlb	0	; () banked
 13355  0022E2  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13356  0022E4  0EFF               	movlw	255
 13357  0022E6  0100               	movlb	0	; () banked
 13358  0022E8  1578               	andwf	(CANSetFilter@filter+1)& (0+255),w,b
 13359  0022EA  0100               	movlb	0	; () banked
 13360  0022EC  6F82               	movwf	(CANSetFilter@tamp+1)& (0+255),b
 13361  0022EE  0E00               	movlw	0
 13362  0022F0  0100               	movlb	0	; () banked
 13363  0022F2  1579               	andwf	(CANSetFilter@filter+2)& (0+255),w,b
 13364  0022F4  0100               	movlb	0	; () banked
 13365  0022F6  6F83               	movwf	(CANSetFilter@tamp+2)& (0+255),b
 13366  0022F8  0E00               	movlw	0
 13367  0022FA  0100               	movlb	0	; () banked
 13368  0022FC  157A               	andwf	(CANSetFilter@filter+3)& (0+255),w,b
 13369  0022FE  0100               	movlb	0	; () banked
 13370  002300  6F84               	movwf	(CANSetFilter@tamp+3)& (0+255),b
 13371                           
 13372                           ; BSR set to: 0
 13373                           ;inc\CANlib.h: 1045: tamp = tamp >> 8;
 13374  002302  C081  F07C         	movff	CANSetFilter@tamp,??_CANSetFilter
 13375  002306  C082  F07D         	movff	CANSetFilter@tamp+1,??_CANSetFilter+1
 13376  00230A  C083  F07E         	movff	CANSetFilter@tamp+2,??_CANSetFilter+2
 13377  00230E  C084  F07F         	movff	CANSetFilter@tamp+3,??_CANSetFilter+3
 13378  002312  C07D  F07C         	movff	??_CANSetFilter+1,??_CANSetFilter
 13379  002316  C07E  F07D         	movff	??_CANSetFilter+2,??_CANSetFilter+1
 13380  00231A  C07F  F07E         	movff	??_CANSetFilter+3,??_CANSetFilter+2
 13381  00231E  0100               	movlb	0	; () banked
 13382  002320  6B7F               	clrf	(??_CANSetFilter+3)& (0+255),b
 13383  002322  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 13384  002326  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 13385  00232A  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 13386  00232E  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 13387                           
 13388                           ; BSR set to: 0
 13389                           ;inc\CANlib.h: 1046: RXF5EIDH = (unsigned char) tamp;
 13390  002332  C081  FF16         	movff	CANSetFilter@tamp,3862	;volatile
 13391                           
 13392                           ; BSR set to: 0
 13393                           ;inc\CANlib.h: 1048: if (filter & 0x00010000)
 13394  002336  0100               	movlb	0	; () banked
 13395  002338  A179               	btfss	(CANSetFilter@filter+2)& (0+255),0,b
 13396  00233A  D003               	goto	l516
 13397                           
 13398                           ; BSR set to: 0
 13399                           ;inc\CANlib.h: 1049: RXF5SIDLbits.EID16 = 0x01;
 13400  00233C  010F               	movlb	15	; () banked
 13401  00233E  8115               	bsf	21,0,b	;volatile
 13402  002340  D002               	goto	l517
 13403  002342                     l516:
 13404                           
 13405                           ; BSR set to: 0
 13406                           ;inc\CANlib.h: 1050: else
 13407                           ;inc\CANlib.h: 1051: RXF5SIDLbits.EID16 = 0x00;
 13408  002342  010F               	movlb	15	; () banked
 13409  002344  9115               	bcf	21,0,b	;volatile
 13410  002346                     l517:
 13411                           
 13412                           ; BSR set to: 15
 13413                           ;inc\CANlib.h: 1053: if (filter & 0x00020000)
 13414  002346  0100               	movlb	0	; () banked
 13415  002348  A379               	btfss	(CANSetFilter@filter+2)& (0+255),1,b
 13416  00234A  D003               	goto	l518
 13417                           
 13418                           ; BSR set to: 0
 13419                           ;inc\CANlib.h: 1054: RXF5SIDLbits.EID17 = 0x01;
 13420  00234C  010F               	movlb	15	; () banked
 13421  00234E  8315               	bsf	21,1,b	;volatile
 13422  002350  D002               	goto	l519
 13423  002352                     l518:
 13424                           
 13425                           ; BSR set to: 0
 13426                           ;inc\CANlib.h: 1055: else
 13427                           ;inc\CANlib.h: 1056: RXF5SIDLbits.EID17 = 0x00;
 13428  002352  010F               	movlb	15	; () banked
 13429  002354  9315               	bcf	21,1,b	;volatile
 13430  002356                     l519:
 13431                           
 13432                           ; BSR set to: 15
 13433                           ;inc\CANlib.h: 1058: if (filter & 0x00040000)
 13434  002356  0100               	movlb	0	; () banked
 13435  002358  A579               	btfss	(CANSetFilter@filter+2)& (0+255),2,b
 13436  00235A  D003               	goto	l520
 13437                           
 13438                           ; BSR set to: 0
 13439                           ;inc\CANlib.h: 1059: RXF5SIDLbits.SID0 = 0x01;
 13440  00235C  010F               	movlb	15	; () banked
 13441  00235E  8B15               	bsf	21,5,b	;volatile
 13442  002360  D002               	goto	l521
 13443  002362                     l520:
 13444                           
 13445                           ; BSR set to: 0
 13446                           ;inc\CANlib.h: 1060: else
 13447                           ;inc\CANlib.h: 1061: RXF5SIDLbits.SID0 = 0x00;
 13448  002362  010F               	movlb	15	; () banked
 13449  002364  9B15               	bcf	21,5,b	;volatile
 13450  002366                     l521:
 13451                           
 13452                           ; BSR set to: 15
 13453                           ;inc\CANlib.h: 1063: if (filter & 0x00080000)
 13454  002366  0100               	movlb	0	; () banked
 13455  002368  A779               	btfss	(CANSetFilter@filter+2)& (0+255),3,b
 13456  00236A  D003               	goto	l522
 13457                           
 13458                           ; BSR set to: 0
 13459                           ;inc\CANlib.h: 1064: RXF5SIDLbits.SID1 = 0x01;
 13460  00236C  010F               	movlb	15	; () banked
 13461  00236E  8D15               	bsf	21,6,b	;volatile
 13462  002370  D002               	goto	l523
 13463  002372                     l522:
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;inc\CANlib.h: 1065: else
 13467                           ;inc\CANlib.h: 1066: RXF5SIDLbits.SID1 = 0x00;
 13468  002372  010F               	movlb	15	; () banked
 13469  002374  9D15               	bcf	21,6,b	;volatile
 13470  002376                     l523:
 13471                           
 13472                           ; BSR set to: 15
 13473                           ;inc\CANlib.h: 1068: if (filter & 0x00100000)
 13474  002376  0100               	movlb	0	; () banked
 13475  002378  A979               	btfss	(CANSetFilter@filter+2)& (0+255),4,b
 13476  00237A  D003               	goto	l524
 13477                           
 13478                           ; BSR set to: 0
 13479                           ;inc\CANlib.h: 1069: RXF5SIDLbits.SID2 = 0x01 ;
 13480  00237C  010F               	movlb	15	; () banked
 13481  00237E  8F15               	bsf	21,7,b	;volatile
 13482  002380  D003               	goto	l4963
 13483  002382                     l524:
 13484                           
 13485                           ; BSR set to: 0
 13486                           ;inc\CANlib.h: 1070: else
 13487                           ;inc\CANlib.h: 1071: RXF5SIDLbits.SID2 = 0x00 ;
 13488  002382  010F               	movlb	15	; () banked
 13489  002384  9F15               	bcf	21,7,b	;volatile
 13490  002386  D000               	goto	l4963
 13491  002388                     l4963:
 13492                           
 13493                           ; BSR set to: 15
 13494                           ;inc\CANlib.h: 1073: tamp = (filter >> 21);
 13495  002388  C077  F07C         	movff	CANSetFilter@filter,??_CANSetFilter
 13496  00238C  C078  F07D         	movff	CANSetFilter@filter+1,??_CANSetFilter+1
 13497  002390  C079  F07E         	movff	CANSetFilter@filter+2,??_CANSetFilter+2
 13498  002394  C07A  F07F         	movff	CANSetFilter@filter+3,??_CANSetFilter+3
 13499  002398  0E16               	movlw	22
 13500  00239A  D006               	goto	u5860
 13501  00239C                     u5865:
 13502  00239C  0100               	movlb	0	; () banked
 13503  00239E  90D8               	bcf	status,0,c
 13504  0023A0  337F               	rrcf	(??_CANSetFilter+3)& (0+255),f,b
 13505  0023A2  337E               	rrcf	(??_CANSetFilter+2)& (0+255),f,b
 13506  0023A4  337D               	rrcf	(??_CANSetFilter+1)& (0+255),f,b
 13507  0023A6  337C               	rrcf	??_CANSetFilter& (0+255),f,b
 13508  0023A8                     u5860:
 13509  0023A8  2EE8               	decfsz	wreg,f,c
 13510  0023AA  D7F8               	goto	u5865
 13511  0023AC  C07C  F081         	movff	??_CANSetFilter,CANSetFilter@tamp
 13512  0023B0  C07D  F082         	movff	??_CANSetFilter+1,CANSetFilter@tamp+1
 13513  0023B4  C07E  F083         	movff	??_CANSetFilter+2,CANSetFilter@tamp+2
 13514  0023B8  C07F  F084         	movff	??_CANSetFilter+3,CANSetFilter@tamp+3
 13515                           
 13516                           ; BSR set to: 0
 13517                           ;inc\CANlib.h: 1074: tamp = tamp & 0x000000FF;
 13518  0023BC  0100               	movlb	0	; () banked
 13519  0023BE  5181               	movf	CANSetFilter@tamp& (0+255),w,b
 13520  0023C0  0100               	movlb	0	; () banked
 13521  0023C2  6F81               	movwf	CANSetFilter@tamp& (0+255),b
 13522  0023C4  6B82               	clrf	(CANSetFilter@tamp+1)& (0+255),b
 13523  0023C6  6B83               	clrf	(CANSetFilter@tamp+2)& (0+255),b
 13524  0023C8  6B84               	clrf	(CANSetFilter@tamp+3)& (0+255),b
 13525                           
 13526                           ; BSR set to: 0
 13527                           ;inc\CANlib.h: 1075: RXF5SIDH = (unsigned char) tamp;
 13528  0023CA  C081  FF14         	movff	CANSetFilter@tamp,3860	;volatile
 13529  0023CE  0012               	return	
 13530                           
 13531                           ; BSR set to: 0
 13532                           
 13533                           ; BSR set to: 0
 13534  0023D0  0012               	return		;funcret
 13535  0023D2                     __end_of_CANSetFilter:
 13536                           	opt stack 0
 13537                           tblptru	equ	0xFF8
 13538                           tblptrh	equ	0xFF7
 13539                           tblptrl	equ	0xFF6
 13540                           tablat	equ	0xFF5
 13541                           prodh	equ	0xFF4
 13542                           prodl	equ	0xFF3
 13543                           intcon	equ	0xFF2
 13544                           intcon2	equ	0xFF1
 13545                           postinc0	equ	0xFEE
 13546                           wreg	equ	0xFE8
 13547                           indf2	equ	0xFDF
 13548                           postinc2	equ	0xFDE
 13549                           postdec2	equ	0xFDD
 13550                           fsr2h	equ	0xFDA
 13551                           fsr2l	equ	0xFD9
 13552                           status	equ	0xFD8
 13553                           
 13554 ;; *************** function _CANOperationMode *****************
 13555 ;; Defined at:
 13556 ;;		line 206 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 13557 ;; Parameters:    Size  Location     Type
 13558 ;;  mode            1    wreg     enum E16348
 13559 ;; Auto vars:     Size  Location     Type
 13560 ;;  mode            1   23[BANK0 ] enum E16348
 13561 ;; Return value:  Size  Location     Type
 13562 ;;		None               void
 13563 ;; Registers used:
 13564 ;;		wreg, status,2, status,0
 13565 ;; Tracked objects:
 13566 ;;		On entry : 0/0
 13567 ;;		On exit  : 0/0
 13568 ;;		Unchanged: 0/0
 13569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13571 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13573 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13574 ;;Total ram usage:        1 bytes
 13575 ;; Hardware stack levels used:    1
 13576 ;; Hardware stack levels required when called:    5
 13577 ;; This function calls:
 13578 ;;		Nothing
 13579 ;; This function is called by:
 13580 ;;		_CANInitialize
 13581 ;; This function uses a non-reentrant model
 13582 ;;
 13583                           
 13584                           	psect	text36
 13585  00659C                     __ptext36:
 13586                           	opt stack 0
 13587  00659C                     _CANOperationMode:
 13588                           	opt stack 23
 13589                           
 13590                           ; BSR set to: 0
 13591                           ;incstack = 0
 13592                           ;CANOperationMode@mode stored from wreg
 13593  00659C  0100               	movlb	0	; () banked
 13594  00659E  6F77               	movwf	CANOperationMode@mode& (0+255),b
 13595                           
 13596                           ; BSR set to: 0
 13597                           ;inc\CANlib.h: 208: CANCON = mode;
 13598  0065A0  C077  FF6F         	movff	CANOperationMode@mode,3951	;volatile
 13599                           
 13600                           ; BSR set to: 0
 13601                           
 13602                           ;inc\CANlib.h: 210: while((CANSTAT & 0b11100000) != mode );
 13603  0065A4  D000               	goto	l6623
 13604  0065A6                     l6623:
 13605                           
 13606                           ; BSR set to: 0
 13607  0065A6  506E               	movf	3950,w,c	;volatile
 13608  0065A8  0BE0               	andlw	224
 13609  0065AA  0100               	movlb	0	; () banked
 13610  0065AC  1977               	xorwf	CANOperationMode@mode& (0+255),w,b
 13611  0065AE  A4D8               	btfss	status,2,c
 13612  0065B0  D7FA               	goto	l6623
 13613                           
 13614                           ; BSR set to: 0
 13615                           
 13616                           ; BSR set to: 0
 13617  0065B2  0012               	return		;funcret
 13618  0065B4                     __end_of_CANOperationMode:
 13619                           	opt stack 0
 13620                           tblptru	equ	0xFF8
 13621                           tblptrh	equ	0xFF7
 13622                           tblptrl	equ	0xFF6
 13623                           tablat	equ	0xFF5
 13624                           prodh	equ	0xFF4
 13625                           prodl	equ	0xFF3
 13626                           intcon	equ	0xFF2
 13627                           intcon2	equ	0xFF1
 13628                           postinc0	equ	0xFEE
 13629                           wreg	equ	0xFE8
 13630                           indf2	equ	0xFDF
 13631                           postinc2	equ	0xFDE
 13632                           postdec2	equ	0xFDD
 13633                           fsr2h	equ	0xFDA
 13634                           fsr2l	equ	0xFD9
 13635                           status	equ	0xFD8
 13636                           
 13637 ;; *************** function _ISR_Bassa *****************
 13638 ;; Defined at:
 13639 ;;		line 121 in file "parcheggio.c"
 13640 ;; Parameters:    Size  Location     Type
 13641 ;;		None
 13642 ;; Auto vars:     Size  Location     Type
 13643 ;;  MUX_index_co    2   37[COMRAM] unsigned char [2]
 13644 ;;  PORTA_temp      1   39[COMRAM] unsigned char 
 13645 ;; Return value:  Size  Location     Type
 13646 ;;		None               void
 13647 ;; Registers used:
 13648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13649 ;; Tracked objects:
 13650 ;;		On entry : 0/0
 13651 ;;		On exit  : 0/0
 13652 ;;		Unchanged: 0/0
 13653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13655 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13656 ;;      Temps:         21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13657 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13658 ;;Total ram usage:       24 bytes
 13659 ;; Hardware stack levels used:    1
 13660 ;; Hardware stack levels required when called:    4
 13661 ;; This function calls:
 13662 ;;		_CANisRxReady
 13663 ;;		_CANreceiveMessage
 13664 ;;		i1_CANsendMessage
 13665 ;;		i1_can_send
 13666 ;;		i1_delay_ms
 13667 ;; This function is called by:
 13668 ;;		Interrupt level 1
 13669 ;; This function uses a non-reentrant model
 13670 ;;
 13671                           
 13672                           	psect	intcodelo
 13673  000018                     __pintcodelo:
 13674                           	opt stack 0
 13675  000018                     _ISR_Bassa:
 13676                           	opt stack 19
 13677                           
 13678                           ; BSR set to: 0
 13679                           ;incstack = 0
 13680  000018  CFD8 F042          	movff	status,??_ISR_Bassa+4
 13681  00001C  CFE8 F043          	movff	wreg,??_ISR_Bassa+5
 13682  000020  CFE0 F044          	movff	bsr,??_ISR_Bassa+6
 13683  000024  CFFA F045          	movff	pclath,??_ISR_Bassa+7
 13684  000028  CFFB F046          	movff	pclatu,??_ISR_Bassa+8
 13685  00002C  CFE9 F047          	movff	fsr0l,??_ISR_Bassa+9
 13686  000030  CFEA F048          	movff	fsr0h,??_ISR_Bassa+10
 13687  000034  CFE1 F049          	movff	fsr1l,??_ISR_Bassa+11
 13688  000038  CFE2 F04A          	movff	fsr1h,??_ISR_Bassa+12
 13689  00003C  CFD9 F04B          	movff	fsr2l,??_ISR_Bassa+13
 13690  000040  CFDA F04C          	movff	fsr2h,??_ISR_Bassa+14
 13691  000044  CFF3 F04D          	movff	prodl,??_ISR_Bassa+15
 13692  000048  CFF4 F04E          	movff	prodh,??_ISR_Bassa+16
 13693  00004C  CFF6 F04F          	movff	tblptrl,??_ISR_Bassa+17
 13694  000050  CFF7 F050          	movff	tblptrh,??_ISR_Bassa+18
 13695  000054  CFF8 F051          	movff	tblptru,??_ISR_Bassa+19
 13696  000058  CFF5 F052          	movff	tablat,??_ISR_Bassa+20
 13697                           
 13698                           ;parcheggio.c: 124: if (INTCONbits.TMR0IF == 1) {
 13699  00005C  A4F2               	btfss	intcon,2,c	;volatile
 13700  00005E  D0CC               	goto	i1l6089
 13701                           
 13702                           ;parcheggio.c: 125: INTCONbits.INT0IE = 0;
 13703  000060  98F2               	bcf	intcon,4,c	;volatile
 13704                           
 13705                           ;parcheggio.c: 126: T0CONbits.TMR0ON = 0;
 13706  000062  9ED5               	bcf	4053,7,c	;volatile
 13707                           
 13708                           ;parcheggio.c: 127: TMR0H = 0x34;
 13709  000064  0E34               	movlw	52
 13710  000066  6ED7               	movwf	4055,c	;volatile
 13711                           
 13712                           ;parcheggio.c: 128: TMR0L = 0xE0;
 13713  000068  0EE0               	movlw	224
 13714  00006A  6ED6               	movwf	4054,c	;volatile
 13715                           
 13716                           ;parcheggio.c: 129: T0CONbits.TMR0ON = 1;
 13717  00006C  8ED5               	bsf	4053,7,c	;volatile
 13718                           
 13719                           ;parcheggio.c: 131: if (distance_error == 1) {
 13720  00006E  AA56               	btfss	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13721  000070  D00C               	goto	i1l696
 13722                           
 13723                           ;parcheggio.c: 132: sensor_distance[MUX_index] = 3000;
 13724  000072  5021               	movf	_MUX_index,w,c	;volatile
 13725  000074  0D02               	mullw	2
 13726  000076  0E01               	movlw	low _sensor_distance
 13727  000078  24F3               	addwf	prodl,w,c
 13728  00007A  6ED9               	movwf	fsr2l,c
 13729  00007C  0E00               	movlw	high _sensor_distance
 13730  00007E  20F4               	addwfc	prodh,w,c
 13731  000080  6EDA               	movwf	fsr2h,c
 13732  000082  0EB8               	movlw	184
 13733  000084  6EDE               	movwf	postinc2,c
 13734  000086  0E0B               	movlw	11
 13735  000088  6EDD               	movwf	postdec2,c
 13736  00008A                     i1l696:
 13737                           
 13738                           ;parcheggio.c: 133: }
 13739                           ;parcheggio.c: 135: if ((sensor_distance[MUX_index] < 250)&&(start_operation == 0)&&((MU
      +                          X_index == 3) || (MUX_index == 6))) {
 13740  00008A  5021               	movf	_MUX_index,w,c	;volatile
 13741  00008C  0D02               	mullw	2
 13742  00008E  0E01               	movlw	low _sensor_distance
 13743  000090  24F3               	addwf	prodl,w,c
 13744  000092  6ED9               	movwf	fsr2l,c
 13745  000094  0E00               	movlw	high _sensor_distance
 13746  000096  20F4               	addwfc	prodh,w,c
 13747  000098  6EDA               	movwf	fsr2h,c
 13748  00009A  0E01               	movlw	1
 13749  00009C  50DB               	movf	plusw2,w,c
 13750  00009E  E118               	bnz	i1l6021
 13751  0000A0  0EFA               	movlw	250
 13752  0000A2  5CDE               	subwf	postinc2,w,c
 13753  0000A4  B0D8               	btfsc	status,0,c
 13754  0000A6  D014               	goto	i1l6021
 13755  0000A8  BC57               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13756  0000AA  D012               	goto	i1l6021
 13757  0000AC  0E03               	movlw	3
 13758  0000AE  1821               	xorwf	_MUX_index,w,c	;volatile
 13759  0000B0  B4D8               	btfsc	status,2,c
 13760  0000B2  D004               	goto	i1l6017
 13761  0000B4  0E06               	movlw	6
 13762  0000B6  1821               	xorwf	_MUX_index,w,c	;volatile
 13763  0000B8  A4D8               	btfss	status,2,c
 13764  0000BA  D00A               	goto	i1l6021
 13765  0000BC                     i1l6017:
 13766                           
 13767                           ;parcheggio.c: 136: if (MUX_index == 3) {
 13768  0000BC  0E03               	movlw	3
 13769  0000BE  1821               	xorwf	_MUX_index,w,c	;volatile
 13770  0000C0  A4D8               	btfss	status,2,c
 13771  0000C2  D003               	goto	i1l700
 13772                           
 13773                           ;parcheggio.c: 137: sensor_distance_short[1] = sensor_distance[3];
 13774  0000C4  C007  F17C         	movff	_sensor_distance+6,_sensor_distance_short+1	;volatile
 13775                           
 13776                           ;parcheggio.c: 138: } else {
 13777  0000C8  D011               	goto	i1l6029
 13778  0000CA                     i1l700:
 13779                           
 13780                           ;parcheggio.c: 139: sensor_distance_short[0] = sensor_distance[6];
 13781  0000CA  C00D  F17B         	movff	_sensor_distance+12,_sensor_distance_short	;volatile
 13782                           
 13783                           ;parcheggio.c: 140: }
 13784                           ;parcheggio.c: 141: } else if (MUX_index == 3) {
 13785  0000CE  D00E               	goto	i1l6029
 13786  0000D0                     i1l6021:
 13787  0000D0  0E03               	movlw	3
 13788  0000D2  1821               	xorwf	_MUX_index,w,c	;volatile
 13789  0000D4  A4D8               	btfss	status,2,c
 13790  0000D6  D003               	goto	i1l6025
 13791                           
 13792                           ;parcheggio.c: 142: sensor_distance_short[3] = 255;
 13793  0000D8  0101               	movlb	1	; () banked
 13794  0000DA  697E               	setf	(_sensor_distance_short+3)& (0+255),b	;volatile
 13795                           
 13796                           ;parcheggio.c: 143: } else if (MUX_index == 6) {
 13797  0000DC  D007               	goto	i1l6029
 13798  0000DE                     i1l6025:
 13799  0000DE  0E06               	movlw	6
 13800  0000E0  1821               	xorwf	_MUX_index,w,c	;volatile
 13801  0000E2  A4D8               	btfss	status,2,c
 13802  0000E4  D003               	goto	i1l6029
 13803                           
 13804                           ;parcheggio.c: 144: sensor_distance_short[6] = 255;
 13805  0000E6  0101               	movlb	1	; () banked
 13806  0000E8  6981               	setf	(_sensor_distance_short+6)& (0+255),b	;volatile
 13807                           
 13808                           ; BSR set to: 1
 13809                           
 13810                           ; BSR set to: 1
 13811  0000EA  D000               	goto	i1l6029
 13812  0000EC                     i1l6029:
 13813                           
 13814                           ;parcheggio.c: 145: }
 13815                           ;parcheggio.c: 146: if ((sensor_distance[MUX_index] < 5)&&(start_operation == 1)&&(avvic
      +                          inamento == 0)&&((MUX_index != 0) || (MUX_index != 1))) {
 13816  0000EC  5021               	movf	_MUX_index,w,c	;volatile
 13817  0000EE  0D02               	mullw	2
 13818  0000F0  0E01               	movlw	low _sensor_distance
 13819  0000F2  24F3               	addwf	prodl,w,c
 13820  0000F4  6ED9               	movwf	fsr2l,c
 13821  0000F6  0E00               	movlw	high _sensor_distance
 13822  0000F8  20F4               	addwfc	prodh,w,c
 13823  0000FA  6EDA               	movwf	fsr2h,c
 13824  0000FC  0E01               	movlw	1
 13825  0000FE  50DB               	movf	plusw2,w,c
 13826  000100  E142               	bnz	i1l6053
 13827  000102  0E05               	movlw	5
 13828  000104  5CDE               	subwf	postinc2,w,c
 13829  000106  B0D8               	btfsc	status,0,c
 13830  000108  D03E               	goto	i1l6053
 13831  00010A  BC57               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 13832  00010C  B656               	btfsc	_avvicinamento/(0+8),_avvicinamento& (0+7),c	;volatile
 13833  00010E  D03B               	goto	i1l6053
 13834  000110  5021               	movf	_MUX_index,w,c	;volatile
 13835  000112  A4D8               	btfss	status,2,c
 13836  000114  D003               	goto	i1l6039
 13837  000116  0421               	decf	_MUX_index,w,c	;volatile
 13838  000118  B4D8               	btfsc	status,2,c
 13839  00011A  D035               	goto	i1l6053
 13840  00011C                     i1l6039:
 13841                           
 13842                           ;parcheggio.c: 147: counter++;
 13843  00011C  2A24               	incf	_counter,f,c	;volatile
 13844                           
 13845                           ;parcheggio.c: 148: if (counter > 0) {
 13846  00011E  5024               	movf	_counter,w,c	;volatile
 13847  000120  B4D8               	btfsc	status,2,c
 13848  000122  D031               	goto	i1l6053
 13849                           
 13850                           ;parcheggio.c: 149: set_speed = 0;
 13851  000124  0E00               	movlw	0
 13852  000126  0100               	movlb	0	; () banked
 13853  000128  6FE6               	movwf	(_set_speed+1)& (0+255),b	;volatile
 13854  00012A  0E00               	movlw	0
 13855  00012C  6FE5               	movwf	_set_speed& (0+255),b	;volatile
 13856                           
 13857                           ;parcheggio.c: 150: data_steering[0] = 90;
 13858  00012E  0E5A               	movlw	90
 13859  000130  0101               	movlb	1	; () banked
 13860  000132  6F6B               	movwf	_data_steering& (0+255),b	;volatile
 13861                           
 13862                           ;parcheggio.c: 151: data_brake [0] = 0;
 13863  000134  0E00               	movlw	0
 13864  000136  6E26               	movwf	_data_brake,c	;volatile
 13865                           
 13866                           ;parcheggio.c: 152: data_brake [1] = 1;
 13867  000138  0E01               	movlw	1
 13868  00013A  6E27               	movwf	_data_brake+1,c	;volatile
 13869                           
 13870                           ; BSR set to: 1
 13871                           ;parcheggio.c: 153: can_send();
 13872  00013C  EC19  F02F         	call	i1_can_send	;wreg free
 13873                           
 13874                           ;parcheggio.c: 154: delay_ms(100);
 13875  000140  0E00               	movlw	0
 13876  000142  6E35               	movwf	i1delay_ms@value_ms+1,c
 13877  000144  0E64               	movlw	100
 13878  000146  6E34               	movwf	i1delay_ms@value_ms,c
 13879  000148  EC35  F032         	call	i1_delay_ms	;wreg free
 13880                           
 13881                           ;parcheggio.c: 155: data[0] = 4;
 13882  00014C  0E04               	movlw	4
 13883  00014E  0101               	movlb	1	; () banked
 13884  000150  6F53               	movwf	_data& (0+255),b	;volatile
 13885                           
 13886                           ; BSR set to: 1
 13887                           ;parcheggio.c: 156: CANsendMessage(0b00000001101, data, 8, CAN_CONFIG_STD_MSG & CAN_NORM
      +                          AL_TX_FRAME & CAN_TX_PRIORITY_0);
 13888  000152  0E0D               	movlw	13
 13889  000154  6E2E               	movwf	i1CANsendMessage@identifier,c
 13890  000156  0E00               	movlw	0
 13891  000158  6E2F               	movwf	i1CANsendMessage@identifier+1,c
 13892  00015A  0E00               	movlw	0
 13893  00015C  6E30               	movwf	i1CANsendMessage@identifier+2,c
 13894  00015E  0E00               	movlw	0
 13895  000160  6E31               	movwf	i1CANsendMessage@identifier+3,c
 13896  000162  0E53               	movlw	low _data
 13897  000164  6E32               	movwf	i1CANsendMessage@data,c
 13898  000166  0E01               	movlw	high _data
 13899  000168  6E33               	movwf	i1CANsendMessage@data+1,c
 13900  00016A  0E08               	movlw	8
 13901  00016C  6E34               	movwf	i1CANsendMessage@dataLength,c
 13902  00016E  0EBC               	movlw	188
 13903  000170  6E35               	movwf	i1CANsendMessage@flags,c
 13904  000172  ECB9  F015         	call	i1_CANsendMessage	;wreg free
 13905                           
 13906                           ;parcheggio.c: 157: delay_ms(30);
 13907  000176  0E00               	movlw	0
 13908  000178  6E35               	movwf	i1delay_ms@value_ms+1,c
 13909  00017A  0E1E               	movlw	30
 13910  00017C  6E34               	movwf	i1delay_ms@value_ms,c
 13911  00017E  EC35  F032         	call	i1_delay_ms	;wreg free
 13912  000182  00FF               	reset		;# 
 13913  000184  D000               	goto	i1l6053
 13914  000186                     i1l6053:
 13915                           
 13916                           ;parcheggio.c: 159: }
 13917                           ;parcheggio.c: 160: }
 13918                           ;parcheggio.c: 162: MUX_index++;
 13919  000186  2A21               	incf	_MUX_index,f,c	;volatile
 13920                           
 13921                           ;parcheggio.c: 163: if (activation == 0) {
 13922  000188  B256               	btfsc	_activation/(0+8),_activation& (0+7),c	;volatile
 13923  00018A  D015               	goto	i1l6061
 13924                           
 13925                           ;parcheggio.c: 164: unsigned char MUX_index_collision [] = {3, 6};
 13926  00018C  C1E0  F053         	movff	ISR_Bassa@F16865,ISR_Bassa@MUX_index_collision
 13927  000190  C1E1  F054         	movff	ISR_Bassa@F16865+1,ISR_Bassa@MUX_index_collision+1
 13928                           
 13929                           ;parcheggio.c: 165: MUX_toggle = ~MUX_toggle;
 13930  000194  7056               	btg	_MUX_toggle/(0+8),_MUX_toggle& (0+7),c	;volatile
 13931                           
 13932                           ;parcheggio.c: 166: MUX_index = MUX_index_collision[MUX_toggle];
 13933  000196  A056               	btfss	_MUX_toggle/(0+8),_MUX_toggle& (0+7),c	;volatile
 13934  000198  D002               	goto	i1u743_20
 13935  00019A  0E01               	movlw	1
 13936  00019C  D001               	goto	i1u744_20
 13937  00019E                     i1u743_20:
 13938  00019E  0E00               	movlw	0
 13939  0001A0                     i1u744_20:
 13940  0001A0  6E3E               	movwf	??_ISR_Bassa& (0+255),c
 13941  0001A2  6A3F               	clrf	(??_ISR_Bassa+1)& (0+255),c
 13942  0001A4  0E53               	movlw	low ISR_Bassa@MUX_index_collision
 13943  0001A6  243E               	addwf	??_ISR_Bassa,w,c
 13944  0001A8  6ED9               	movwf	fsr2l,c
 13945  0001AA  0E00               	movlw	high ISR_Bassa@MUX_index_collision
 13946  0001AC  203F               	addwfc	??_ISR_Bassa+1,w,c
 13947  0001AE  6EDA               	movwf	fsr2h,c
 13948  0001B0  50DF               	movf	indf2,w,c
 13949  0001B2  6E21               	movwf	_MUX_index,c	;volatile
 13950  0001B4  D000               	goto	i1l6061
 13951  0001B6                     i1l6061:
 13952                           
 13953                           ;parcheggio.c: 167: }
 13954                           ;parcheggio.c: 169: if (MUX_index == 8) {
 13955  0001B6  0E08               	movlw	8
 13956  0001B8  1821               	xorwf	_MUX_index,w,c	;volatile
 13957  0001BA  A4D8               	btfss	status,2,c
 13958  0001BC  D002               	goto	i1l713
 13959                           
 13960                           ;parcheggio.c: 170: MUX_index = 0;
 13961  0001BE  0E00               	movlw	0
 13962  0001C0  6E21               	movwf	_MUX_index,c	;volatile
 13963  0001C2                     i1l713:
 13964                           
 13965                           ;parcheggio.c: 171: }
 13966                           ;parcheggio.c: 173: unsigned char PORTA_temp = 0;
 13967  0001C2  0E00               	movlw	0
 13968  0001C4  6E55               	movwf	ISR_Bassa@PORTA_temp,c
 13969                           
 13970                           ;parcheggio.c: 174: PORTA_temp = MUX_select[MUX_index];
 13971  0001C6  5021               	movf	_MUX_index,w,c	;volatile
 13972  0001C8  0D01               	mullw	1
 13973  0001CA  0E00               	movlw	low _MUX_select
 13974  0001CC  24F3               	addwf	prodl,w,c
 13975  0001CE  6ED9               	movwf	fsr2l,c
 13976  0001D0  0E01               	movlw	high _MUX_select
 13977  0001D2  20F4               	addwfc	prodh,w,c
 13978  0001D4  6EDA               	movwf	fsr2h,c
 13979  0001D6  50DF               	movf	indf2,w,c
 13980  0001D8  6E55               	movwf	ISR_Bassa@PORTA_temp,c
 13981                           
 13982                           ;parcheggio.c: 175: PORTA = PORTA_temp;
 13983  0001DA  C055  FF80         	movff	ISR_Bassa@PORTA_temp,3968	;volatile
 13984                           
 13985                           ;parcheggio.c: 177: TRISBbits.RB0 = 0;
 13986  0001DE  9093               	bcf	3987,0,c	;volatile
 13987                           
 13988                           ;parcheggio.c: 178: LATBbits.LATB0 = 1;
 13989  0001E0  808A               	bsf	3978,0,c	;volatile
 13990                           
 13991                           ;parcheggio.c: 179: _delay((unsigned long)((15)*(16000000/4000000.0)));
 13992  0001E2  0E14               	movlw	20
 13993  0001E4                     i1u898_27:
 13994  0001E4  2EE8               	decfsz	wreg,f,c
 13995  0001E6  D7FE               	goto	i1u898_27
 13996                           
 13997                           ;parcheggio.c: 180: distance_error = 1;
 13998  0001E8  8A56               	bsf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 13999                           
 14000                           ;parcheggio.c: 181: LATBbits.LATB0 = 0;
 14001  0001EA  908A               	bcf	3978,0,c	;volatile
 14002                           
 14003                           ;parcheggio.c: 182: TRISBbits.RB0 = 1;
 14004  0001EC  8093               	bsf	3987,0,c	;volatile
 14005                           
 14006                           ;parcheggio.c: 183: INTCONbits.INT0IF = 0;
 14007  0001EE  92F2               	bcf	intcon,1,c	;volatile
 14008                           
 14009                           ;parcheggio.c: 184: INTCON2bits.INTEDG0 = 1;
 14010  0001F0  8CF1               	bsf	intcon2,6,c	;volatile
 14011                           
 14012                           ;parcheggio.c: 185: INTCONbits.INT0IE = 1;
 14013  0001F2  88F2               	bsf	intcon,4,c	;volatile
 14014                           
 14015                           ;parcheggio.c: 186: INTCONbits.TMR0IF = 0;
 14016  0001F4  94F2               	bcf	intcon,2,c	;volatile
 14017  0001F6  D000               	goto	i1l6089
 14018  0001F8                     i1l6089:
 14019                           
 14020                           ;parcheggio.c: 188: }
 14021                           ;parcheggio.c: 191: if ((PIR3bits.RXB0IF == 1) || (PIR3bits.RXB1IF == 1)) {
 14022  0001F8  B0A4               	btfsc	4004,0,c	;volatile
 14023  0001FA  D002               	goto	i1l6093
 14024  0001FC  A2A4               	btfss	4004,1,c	;volatile
 14025  0001FE  D073               	goto	i1l724
 14026  000200                     i1l6093:
 14027                           
 14028                           ;parcheggio.c: 192: if (CANisRxReady() == 1) {
 14029  000200  ECDA  F032         	call	_CANisRxReady	;wreg free
 14030  000204  06E8               	decf	wreg,f,c
 14031  000206  A4D8               	btfss	status,2,c
 14032  000208  D06E               	goto	i1l724
 14033                           
 14034                           ;parcheggio.c: 193: CANreceiveMessage(&msg);
 14035  00020A  0E44               	movlw	low _msg
 14036  00020C  6E2E               	movwf	CANreceiveMessage@msg,c
 14037  00020E  0E01               	movlw	high _msg
 14038  000210  6E2F               	movwf	CANreceiveMessage@msg+1,c
 14039  000212  ECE2  F01B         	call	_CANreceiveMessage	;wreg free
 14040                           
 14041                           ;parcheggio.c: 195: if (msg.identifier == 0b00000001111) {
 14042  000216  0E0F               	movlw	15
 14043  000218  0101               	movlb	1	; () banked
 14044  00021A  1944               	xorwf	_msg& (0+255),w,b
 14045  00021C  0101               	movlb	1	; () banked
 14046  00021E  1145               	iorwf	(_msg+1)& (0+255),w,b
 14047  000220  0101               	movlb	1	; () banked
 14048  000222  1146               	iorwf	(_msg+2)& (0+255),w,b
 14049  000224  0101               	movlb	1	; () banked
 14050  000226  1147               	iorwf	(_msg+3)& (0+255),w,b
 14051  000228  A4D8               	btfss	status,2,c
 14052  00022A  D002               	goto	i1l6101
 14053                           
 14054                           ; BSR set to: 1
 14055                           ;parcheggio.c: 196: asd = 0;
 14056  00022C  9456               	bcf	_asd/(0+8),_asd& (0+7),c	;volatile
 14057  00022E  D000               	goto	i1l6101
 14058  000230                     i1l6101:
 14059                           
 14060                           ; BSR set to: 1
 14061                           ;parcheggio.c: 197: }
 14062                           ;parcheggio.c: 199: if ((msg.identifier == 0b00000001001) && (msg.RTR != 1)) {
 14063  000230  0E09               	movlw	9
 14064  000232  0101               	movlb	1	; () banked
 14065  000234  1944               	xorwf	_msg& (0+255),w,b
 14066  000236  0101               	movlb	1	; () banked
 14067  000238  1145               	iorwf	(_msg+1)& (0+255),w,b
 14068  00023A  0101               	movlb	1	; () banked
 14069  00023C  1146               	iorwf	(_msg+2)& (0+255),w,b
 14070  00023E  0101               	movlb	1	; () banked
 14071  000240  1147               	iorwf	(_msg+3)& (0+255),w,b
 14072  000242  A4D8               	btfss	status,2,c
 14073  000244  D02E               	goto	i1l6117
 14074                           
 14075                           ; BSR set to: 1
 14076  000246  0101               	movlb	1	; () banked
 14077  000248  0552               	decf	(_msg+14)& (0+255),w,b
 14078  00024A  B4D8               	btfsc	status,2,c
 14079  00024C  D02A               	goto	i1l6117
 14080                           
 14081                           ; BSR set to: 1
 14082                           ;parcheggio.c: 200: distance_average = 0;
 14083  00024E  0E00               	movlw	0
 14084  000250  0100               	movlb	0	; () banked
 14085  000252  6FE4               	movwf	(_distance_average+1)& (0+255),b	;volatile
 14086  000254  0E00               	movlw	0
 14087  000256  6FE3               	movwf	_distance_average& (0+255),b	;volatile
 14088                           
 14089                           ; BSR set to: 0
 14090                           ;parcheggio.c: 201: distance_dx = msg.data[1];
 14091  000258  C149  F019         	movff	_msg+5,_distance_dx	;volatile
 14092  00025C  6A1A               	clrf	_distance_dx+1,c	;volatile
 14093                           
 14094                           ;parcheggio.c: 202: distance_dx = ((distance_dx << 8) | msg.data[0]);
 14095  00025E  5019               	movf	_distance_dx,w,c	;volatile
 14096  000260  6E3E               	movwf	??_ISR_Bassa& (0+255),c
 14097  000262  0101               	movlb	1	; () banked
 14098  000264  5148               	movf	(_msg+4)& (0+255),w,b
 14099  000266  6E19               	movwf	_distance_dx,c	;volatile
 14100  000268  C03E  F01A         	movff	??_ISR_Bassa,_distance_dx+1	;volatile
 14101                           
 14102                           ; BSR set to: 1
 14103                           ;parcheggio.c: 203: distance_sx = msg.data[3];
 14104  00026C  C14B  F01B         	movff	_msg+7,_distance_sx	;volatile
 14105  000270  6A1C               	clrf	_distance_sx+1,c	;volatile
 14106                           
 14107                           ;parcheggio.c: 204: distance_sx = ((distance_sx << 8) | msg.data[2]);
 14108  000272  501B               	movf	_distance_sx,w,c	;volatile
 14109  000274  6E3E               	movwf	??_ISR_Bassa& (0+255),c
 14110  000276  0101               	movlb	1	; () banked
 14111  000278  514A               	movf	(_msg+6)& (0+255),w,b
 14112  00027A  6E1B               	movwf	_distance_sx,c	;volatile
 14113  00027C  C03E  F01C         	movff	??_ISR_Bassa,_distance_sx+1	;volatile
 14114                           
 14115                           ; BSR set to: 1
 14116                           ;parcheggio.c: 205: distance_average = (distance_sx + distance_dx) / 2;
 14117  000280  5019               	movf	_distance_dx,w,c	;volatile
 14118  000282  241B               	addwf	_distance_sx,w,c	;volatile
 14119  000284  6E3E               	movwf	??_ISR_Bassa& (0+255),c
 14120  000286  501A               	movf	_distance_dx+1,w,c	;volatile
 14121  000288  201C               	addwfc	_distance_sx+1,w,c	;volatile
 14122  00028A  6E3F               	movwf	(??_ISR_Bassa+1)& (0+255),c
 14123  00028C  90D8               	bcf	status,0,c
 14124  00028E  303F               	rrcf	??_ISR_Bassa+1,w,c
 14125  000290  6E40               	movwf	(??_ISR_Bassa+2)& (0+255),c
 14126  000292  303E               	rrcf	??_ISR_Bassa,w,c
 14127  000294  0100               	movlb	0	; () banked
 14128  000296  6FE3               	movwf	_distance_average& (0+255),b	;volatile
 14129  000298  C040  F0E4         	movff	??_ISR_Bassa+2,_distance_average+1	;volatile
 14130                           
 14131                           ; BSR set to: 0
 14132                           ;parcheggio.c: 206: distance_received = 1;
 14133  00029C  8C56               	bsf	_distance_received/(0+8),_distance_received& (0+7),c	;volatile
 14134                           
 14135                           ; BSR set to: 0
 14136                           ;parcheggio.c: 207: distance_received1 = 1;
 14137  00029E  8E56               	bsf	_distance_received1/(0+8),_distance_received1& (0+7),c	;volatile
 14138  0002A0  D000               	goto	i1l6117
 14139  0002A2                     i1l6117:
 14140                           
 14141                           ;parcheggio.c: 208: }
 14142                           ;parcheggio.c: 210: if (msg.identifier == 0b00000001100) {
 14143  0002A2  0E0C               	movlw	12
 14144  0002A4  0101               	movlb	1	; () banked
 14145  0002A6  1944               	xorwf	_msg& (0+255),w,b
 14146  0002A8  0101               	movlb	1	; () banked
 14147  0002AA  1145               	iorwf	(_msg+1)& (0+255),w,b
 14148  0002AC  0101               	movlb	1	; () banked
 14149  0002AE  1146               	iorwf	(_msg+2)& (0+255),w,b
 14150  0002B0  0101               	movlb	1	; () banked
 14151  0002B2  1147               	iorwf	(_msg+3)& (0+255),w,b
 14152  0002B4  A4D8               	btfss	status,2,c
 14153  0002B6  D009               	goto	i1l6123
 14154                           
 14155                           ; BSR set to: 1
 14156                           ;parcheggio.c: 211: if (msg.data[0] == 1) {
 14157  0002B8  0101               	movlb	1	; () banked
 14158  0002BA  0548               	decf	(_msg+4)& (0+255),w,b
 14159  0002BC  A4D8               	btfss	status,2,c
 14160  0002BE  D003               	goto	i1l721
 14161                           
 14162                           ; BSR set to: 1
 14163                           ;parcheggio.c: 212: activation = 1;
 14164  0002C0  8256               	bsf	_activation/(0+8),_activation& (0+7),c	;volatile
 14165                           
 14166                           ;parcheggio.c: 213: PORTBbits.RB6 = 1;
 14167  0002C2  8C81               	bsf	3969,6,c	;volatile
 14168                           
 14169                           ;parcheggio.c: 214: } else {
 14170  0002C4  D002               	goto	i1l6123
 14171  0002C6                     i1l721:
 14172                           
 14173                           ; BSR set to: 1
 14174  0002C6  00FF               	reset		;# 
 14175  0002C8  D000               	goto	i1l6123
 14176  0002CA                     i1l6123:
 14177                           
 14178                           ;parcheggio.c: 216: }
 14179                           ;parcheggio.c: 217: }
 14180                           ;parcheggio.c: 219: if (msg.identifier == 0b00000001110) {
 14181  0002CA  0E0E               	movlw	14
 14182  0002CC  0101               	movlb	1	; () banked
 14183  0002CE  1944               	xorwf	_msg& (0+255),w,b
 14184  0002D0  0101               	movlb	1	; () banked
 14185  0002D2  1145               	iorwf	(_msg+1)& (0+255),w,b
 14186  0002D4  0101               	movlb	1	; () banked
 14187  0002D6  1146               	iorwf	(_msg+2)& (0+255),w,b
 14188  0002D8  0101               	movlb	1	; () banked
 14189  0002DA  1147               	iorwf	(_msg+3)& (0+255),w,b
 14190  0002DC  B4D8               	btfsc	status,2,c
 14191                           
 14192                           ; BSR set to: 1
 14193                           ;parcheggio.c: 220: start_operation = 1;
 14194  0002DE  8C57               	bsf	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 14195                           
 14196                           ; BSR set to: 1
 14197                           ;parcheggio.c: 221: }
 14198                           ;parcheggio.c: 227: PIR3bits.RXB0IF = 0;
 14199  0002E0  90A4               	bcf	4004,0,c	;volatile
 14200                           
 14201                           ;parcheggio.c: 228: PIR3bits.RXB1IF = 0;
 14202  0002E2  92A4               	bcf	4004,1,c	;volatile
 14203                           
 14204                           ; BSR set to: 1
 14205  0002E4  D000               	goto	i1l724
 14206  0002E6                     i1l724:
 14207  0002E6  C052  FFF5         	movff	??_ISR_Bassa+20,tablat
 14208  0002EA  C051  FFF8         	movff	??_ISR_Bassa+19,tblptru
 14209  0002EE  C050  FFF7         	movff	??_ISR_Bassa+18,tblptrh
 14210  0002F2  C04F  FFF6         	movff	??_ISR_Bassa+17,tblptrl
 14211  0002F6  C04E  FFF4         	movff	??_ISR_Bassa+16,prodh
 14212  0002FA  C04D  FFF3         	movff	??_ISR_Bassa+15,prodl
 14213  0002FE  C04C  FFDA         	movff	??_ISR_Bassa+14,fsr2h
 14214  000302  C04B  FFD9         	movff	??_ISR_Bassa+13,fsr2l
 14215  000306  C04A  FFE2         	movff	??_ISR_Bassa+12,fsr1h
 14216  00030A  C049  FFE1         	movff	??_ISR_Bassa+11,fsr1l
 14217  00030E  C048  FFEA         	movff	??_ISR_Bassa+10,fsr0h
 14218  000312  C047  FFE9         	movff	??_ISR_Bassa+9,fsr0l
 14219  000316  C046  FFFB         	movff	??_ISR_Bassa+8,pclatu
 14220  00031A  C045  FFFA         	movff	??_ISR_Bassa+7,pclath
 14221  00031E  C044  FFE0         	movff	??_ISR_Bassa+6,bsr
 14222  000322  C043  FFE8         	movff	??_ISR_Bassa+5,wreg
 14223  000326  C042  FFD8         	movff	??_ISR_Bassa+4,status
 14224  00032A  0010               	retfie	
 14225  00032C                     __end_of_ISR_Bassa:
 14226                           	opt stack 0
 14227                           pclatu	equ	0xFFB
 14228                           pclath	equ	0xFFA
 14229                           tblptru	equ	0xFF8
 14230                           tblptrh	equ	0xFF7
 14231                           tblptrl	equ	0xFF6
 14232                           tablat	equ	0xFF5
 14233                           prodh	equ	0xFF4
 14234                           prodl	equ	0xFF3
 14235                           intcon	equ	0xFF2
 14236                           intcon2	equ	0xFF1
 14237                           postinc0	equ	0xFEE
 14238                           fsr0h	equ	0xFEA
 14239                           fsr0l	equ	0xFE9
 14240                           wreg	equ	0xFE8
 14241                           fsr1h	equ	0xFE2
 14242                           fsr1l	equ	0xFE1
 14243                           bsr	equ	0xFE0
 14244                           indf2	equ	0xFDF
 14245                           postinc2	equ	0xFDE
 14246                           postdec2	equ	0xFDD
 14247                           plusw2	equ	0xFDB
 14248                           fsr2h	equ	0xFDA
 14249                           fsr2l	equ	0xFD9
 14250                           status	equ	0xFD8
 14251                           
 14252 ;; *************** function i1_delay_ms *****************
 14253 ;; Defined at:
 14254 ;;		line 61 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/src\delay.c"
 14255 ;; Parameters:    Size  Location     Type
 14256 ;;  value_ms        2    6[COMRAM] unsigned int 
 14257 ;; Auto vars:     Size  Location     Type
 14258 ;;		None
 14259 ;; Return value:  Size  Location     Type
 14260 ;;		None               void
 14261 ;; Registers used:
 14262 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14263 ;; Tracked objects:
 14264 ;;		On entry : 0/0
 14265 ;;		On exit  : 0/0
 14266 ;;		Unchanged: 0/0
 14267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14268 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;Total ram usage:        2 bytes
 14273 ;; Hardware stack levels used:    1
 14274 ;; Hardware stack levels required when called:    3
 14275 ;; This function calls:
 14276 ;;		i1___wmul
 14277 ;; This function is called by:
 14278 ;;		_ISR_Bassa
 14279 ;; This function uses a non-reentrant model
 14280 ;;
 14281                           
 14282                           	psect	text38
 14283  00646A                     __ptext38:
 14284                           	opt stack 0
 14285  00646A                     i1_delay_ms:
 14286                           	opt stack 19
 14287                           
 14288                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
 14289                           
 14290                           ;incstack = 0
 14291  00646A  C0E8  F02E         	movff	_delay_quartz_frequency_value,i1___wmul@multiplier	;volatile
 14292  00646E  6A2F               	clrf	i1___wmul@multiplier+1,c
 14293  006470  C034  F030         	movff	i1delay_ms@value_ms,i1___wmul@multiplicand
 14294  006474  C035  F031         	movff	i1delay_ms@value_ms+1,i1___wmul@multiplicand+1
 14295  006478  EC97  F032         	call	i1___wmul	;wreg free
 14296  00647C  C02E  F0E1         	movff	?i1___wmul,_clock_counter_reference	;volatile
 14297  006480  C02F  F0E2         	movff	?i1___wmul+1,_clock_counter_reference+1	;volatile
 14298                           
 14299                           ;src\delay.c: 75: while (clock_counter_reference) {
 14300  006484  D007               	goto	i1l567
 14301  006486                     i1l5947:
 14302                           
 14303                           ;src\delay.c: 85: _delay(240);
 14304  006486  0E50               	movlw	80
 14305  006488                     i1u899_27:
 14306  006488  2EE8               	decfsz	wreg,f,c
 14307  00648A  D7FE               	goto	i1u899_27
 14308                           
 14309                           ;src\delay.c: 88: clock_counter_reference--;
 14310  00648C  0100               	movlb	0	; () banked
 14311  00648E  07E1               	decf	_clock_counter_reference& (0+255),f,b	;volatile
 14312  006490  A0D8               	btfss	status,0,c
 14313  006492  07E2               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
 14314  006494                     i1l567:
 14315  006494  0100               	movlb	0	; () banked
 14316  006496  51E1               	movf	_clock_counter_reference& (0+255),w,b	;volatile
 14317  006498  0100               	movlb	0	; () banked
 14318  00649A  11E2               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
 14319  00649C  A4D8               	btfss	status,2,c
 14320  00649E  D7F3               	goto	i1l5947
 14321                           
 14322                           ; BSR set to: 0
 14323                           
 14324                           ; BSR set to: 0
 14325  0064A0  0012               	return		;funcret
 14326  0064A2                     __end_ofi1_delay_ms:
 14327                           	opt stack 0
 14328                           pclatu	equ	0xFFB
 14329                           pclath	equ	0xFFA
 14330                           tblptru	equ	0xFF8
 14331                           tblptrh	equ	0xFF7
 14332                           tblptrl	equ	0xFF6
 14333                           tablat	equ	0xFF5
 14334                           prodh	equ	0xFF4
 14335                           prodl	equ	0xFF3
 14336                           intcon	equ	0xFF2
 14337                           intcon2	equ	0xFF1
 14338                           postinc0	equ	0xFEE
 14339                           fsr0h	equ	0xFEA
 14340                           fsr0l	equ	0xFE9
 14341                           wreg	equ	0xFE8
 14342                           fsr1h	equ	0xFE2
 14343                           fsr1l	equ	0xFE1
 14344                           bsr	equ	0xFE0
 14345                           indf2	equ	0xFDF
 14346                           postinc2	equ	0xFDE
 14347                           postdec2	equ	0xFDD
 14348                           plusw2	equ	0xFDB
 14349                           fsr2h	equ	0xFDA
 14350                           fsr2l	equ	0xFD9
 14351                           status	equ	0xFD8
 14352                           
 14353 ;; *************** function i1___wmul *****************
 14354 ;; Defined at:
 14355 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 14356 ;; Parameters:    Size  Location     Type
 14357 ;;  multiplier      2    0[COMRAM] unsigned int 
 14358 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14359 ;; Auto vars:     Size  Location     Type
 14360 ;;  __wmul          2    4[COMRAM] unsigned int 
 14361 ;; Return value:  Size  Location     Type
 14362 ;;                  2    0[COMRAM] unsigned int 
 14363 ;; Registers used:
 14364 ;;		wreg, status,2, status,0, prodl, prodh
 14365 ;; Tracked objects:
 14366 ;;		On entry : 0/0
 14367 ;;		On exit  : 0/0
 14368 ;;		Unchanged: 0/0
 14369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14370 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14373 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14374 ;;Total ram usage:        6 bytes
 14375 ;; Hardware stack levels used:    1
 14376 ;; Hardware stack levels required when called:    2
 14377 ;; This function calls:
 14378 ;;		Nothing
 14379 ;; This function is called by:
 14380 ;;		i1_delay_ms
 14381 ;; This function uses a non-reentrant model
 14382 ;;
 14383                           
 14384                           	psect	text39
 14385  00652E                     __ptext39:
 14386                           	opt stack 0
 14387  00652E                     i1___wmul:
 14388                           	opt stack 19
 14389                           
 14390                           ; BSR set to: 0
 14391                           ;incstack = 0
 14392  00652E  502E               	movf	i1___wmul@multiplier,w,c
 14393  006530  0230               	mulwf	i1___wmul@multiplicand,c
 14394  006532  CFF3 F032          	movff	prodl,i1___wmul@product
 14395  006536  CFF4 F033          	movff	prodh,i1___wmul@product+1
 14396  00653A  502E               	movf	i1___wmul@multiplier,w,c
 14397  00653C  0231               	mulwf	i1___wmul@multiplicand+1,c
 14398  00653E  50F3               	movf	prodl,w,c
 14399  006540  2633               	addwf	i1___wmul@product+1,f,c
 14400  006542  502F               	movf	i1___wmul@multiplier+1,w,c
 14401  006544  0230               	mulwf	i1___wmul@multiplicand,c
 14402  006546  50F3               	movf	prodl,w,c
 14403  006548  2633               	addwf	i1___wmul@product+1,f,c
 14404  00654A  C032  F02E         	movff	i1___wmul@product,?i1___wmul
 14405  00654E  C033  F02F         	movff	i1___wmul@product+1,?i1___wmul+1
 14406  006552  0012               	return	
 14407  006554  0012               	return		;funcret
 14408  006556                     __end_ofi1___wmul:
 14409                           	opt stack 0
 14410                           pclatu	equ	0xFFB
 14411                           pclath	equ	0xFFA
 14412                           tblptru	equ	0xFF8
 14413                           tblptrh	equ	0xFF7
 14414                           tblptrl	equ	0xFF6
 14415                           tablat	equ	0xFF5
 14416                           prodh	equ	0xFF4
 14417                           prodl	equ	0xFF3
 14418                           intcon	equ	0xFF2
 14419                           intcon2	equ	0xFF1
 14420                           postinc0	equ	0xFEE
 14421                           fsr0h	equ	0xFEA
 14422                           fsr0l	equ	0xFE9
 14423                           wreg	equ	0xFE8
 14424                           fsr1h	equ	0xFE2
 14425                           fsr1l	equ	0xFE1
 14426                           bsr	equ	0xFE0
 14427                           indf2	equ	0xFDF
 14428                           postinc2	equ	0xFDE
 14429                           postdec2	equ	0xFDD
 14430                           plusw2	equ	0xFDB
 14431                           fsr2h	equ	0xFDA
 14432                           fsr2l	equ	0xFD9
 14433                           status	equ	0xFD8
 14434                           
 14435 ;; *************** function i1_can_send *****************
 14436 ;; Defined at:
 14437 ;;		line 462 in file "parcheggio.c"
 14438 ;; Parameters:    Size  Location     Type
 14439 ;;		None
 14440 ;; Auto vars:     Size  Location     Type
 14441 ;;		None
 14442 ;; Return value:  Size  Location     Type
 14443 ;;		None               void
 14444 ;; Registers used:
 14445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14446 ;; Tracked objects:
 14447 ;;		On entry : 0/0
 14448 ;;		On exit  : 0/0
 14449 ;;		Unchanged: 0/0
 14450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14455 ;;Total ram usage:        0 bytes
 14456 ;; Hardware stack levels used:    1
 14457 ;; Hardware stack levels required when called:    3
 14458 ;; This function calls:
 14459 ;;		i1_CANisTxReady
 14460 ;;		i1_CANsendMessage
 14461 ;; This function is called by:
 14462 ;;		_ISR_Bassa
 14463 ;; This function uses a non-reentrant model
 14464 ;;
 14465                           
 14466                           	psect	text40
 14467  005E32                     __ptext40:
 14468                           	opt stack 0
 14469  005E32                     i1_can_send:
 14470                           	opt stack 19
 14471                           
 14472                           ;parcheggio.c: 463: if (start_operation == 1) {
 14473                           
 14474                           ;incstack = 0
 14475  005E32  BC57               	btfsc	_start_operation/(0+8),_start_operation& (0+7),c	;volatile
 14476  005E34  D002               	goto	i1l5955
 14477  005E36  D057               	goto	i1l5975
 14478                           
 14479                           ;parcheggio.c: 465: while (CANisTxReady() != 1);
 14480  005E38  D000               	goto	i1l5955
 14481  005E3A                     i1l5955:
 14482  005E3A  ECBE  F032         	call	i1_CANisTxReady	;wreg free
 14483  005E3E  06E8               	decf	wreg,f,c
 14484  005E40  A4D8               	btfss	status,2,c
 14485  005E42  D7FB               	goto	i1l5955
 14486                           
 14487                           ;parcheggio.c: 466: CANsendMessage(0b00000000111, data_steering, 8, CAN_CONFIG_STD_MSG &
      +                           CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
 14488  005E44  0E07               	movlw	7
 14489  005E46  6E2E               	movwf	i1CANsendMessage@identifier,c
 14490  005E48  0E00               	movlw	0
 14491  005E4A  6E2F               	movwf	i1CANsendMessage@identifier+1,c
 14492  005E4C  0E00               	movlw	0
 14493  005E4E  6E30               	movwf	i1CANsendMessage@identifier+2,c
 14494  005E50  0E00               	movlw	0
 14495  005E52  6E31               	movwf	i1CANsendMessage@identifier+3,c
 14496  005E54  0E6B               	movlw	low _data_steering
 14497  005E56  6E32               	movwf	i1CANsendMessage@data,c
 14498  005E58  0E01               	movlw	high _data_steering
 14499  005E5A  6E33               	movwf	i1CANsendMessage@data+1,c
 14500  005E5C  0E08               	movlw	8
 14501  005E5E  6E34               	movwf	i1CANsendMessage@dataLength,c
 14502  005E60  0EBC               	movlw	188
 14503  005E62  6E35               	movwf	i1CANsendMessage@flags,c
 14504  005E64  ECB9  F015         	call	i1_CANsendMessage	;wreg free
 14505                           
 14506                           ;parcheggio.c: 469: data_speed[0] = set_speed;
 14507  005E68  C0E5  F163         	movff	_set_speed,_data_speed	;volatile
 14508                           
 14509                           ;parcheggio.c: 470: data_speed[1] = (set_speed >> 8);
 14510  005E6C  0100               	movlb	0	; () banked
 14511  005E6E  51E6               	movf	(_set_speed+1)& (0+255),w,b	;volatile
 14512  005E70  0101               	movlb	1	; () banked
 14513  005E72  6F64               	movwf	(_data_speed+1)& (0+255),b	;volatile
 14514                           
 14515                           ; BSR set to: 1
 14516                           ;parcheggio.c: 471: data_speed[2] = dir;
 14517  005E74  0E00               	movlw	0
 14518  005E76  B856               	btfsc	_dir/(0+8),_dir& (0+7),c	;volatile
 14519  005E78  0E01               	movlw	1
 14520  005E7A  0101               	movlb	1	; () banked
 14521  005E7C  6F65               	movwf	(_data_speed+2)& (0+255),b	;volatile
 14522                           
 14523                           ; BSR set to: 1
 14524                           
 14525                           ;parcheggio.c: 472: while (CANisTxReady() != 1);
 14526  005E7E  D000               	goto	i1l5965
 14527  005E80                     i1l5965:
 14528  005E80  ECBE  F032         	call	i1_CANisTxReady	;wreg free
 14529  005E84  06E8               	decf	wreg,f,c
 14530  005E86  A4D8               	btfss	status,2,c
 14531  005E88  D7FB               	goto	i1l5965
 14532                           
 14533                           ;parcheggio.c: 473: CANsendMessage(0b00000000101, data_speed, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
 14534  005E8A  0E05               	movlw	5
 14535  005E8C  6E2E               	movwf	i1CANsendMessage@identifier,c
 14536  005E8E  0E00               	movlw	0
 14537  005E90  6E2F               	movwf	i1CANsendMessage@identifier+1,c
 14538  005E92  0E00               	movlw	0
 14539  005E94  6E30               	movwf	i1CANsendMessage@identifier+2,c
 14540  005E96  0E00               	movlw	0
 14541  005E98  6E31               	movwf	i1CANsendMessage@identifier+3,c
 14542  005E9A  0E63               	movlw	low _data_speed
 14543  005E9C  6E32               	movwf	i1CANsendMessage@data,c
 14544  005E9E  0E01               	movlw	high _data_speed
 14545  005EA0  6E33               	movwf	i1CANsendMessage@data+1,c
 14546  005EA2  0E08               	movlw	8
 14547  005EA4  6E34               	movwf	i1CANsendMessage@dataLength,c
 14548  005EA6  0EBC               	movlw	188
 14549  005EA8  6E35               	movwf	i1CANsendMessage@flags,c
 14550  005EAA  ECB9  F015         	call	i1_CANsendMessage	;wreg free
 14551                           
 14552                           ;parcheggio.c: 476: data_brake[1] = 0;
 14553  005EAE  0E00               	movlw	0
 14554  005EB0  6E27               	movwf	_data_brake+1,c	;volatile
 14555                           
 14556                           ;parcheggio.c: 477: while (CANisTxReady() != 1);
 14557  005EB2  D000               	goto	i1l5971
 14558  005EB4                     i1l5971:
 14559  005EB4  ECBE  F032         	call	i1_CANisTxReady	;wreg free
 14560  005EB8  06E8               	decf	wreg,f,c
 14561  005EBA  A4D8               	btfss	status,2,c
 14562  005EBC  D7FB               	goto	i1l5971
 14563                           
 14564                           ;parcheggio.c: 478: CANsendMessage(0b00000000110, data_brake, 8, CAN_CONFIG_STD_MSG & CA
      +                          N_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
 14565  005EBE  0E06               	movlw	6
 14566  005EC0  6E2E               	movwf	i1CANsendMessage@identifier,c
 14567  005EC2  0E00               	movlw	0
 14568  005EC4  6E2F               	movwf	i1CANsendMessage@identifier+1,c
 14569  005EC6  0E00               	movlw	0
 14570  005EC8  6E30               	movwf	i1CANsendMessage@identifier+2,c
 14571  005ECA  0E00               	movlw	0
 14572  005ECC  6E31               	movwf	i1CANsendMessage@identifier+3,c
 14573  005ECE  0E26               	movlw	low _data_brake
 14574  005ED0  6E32               	movwf	i1CANsendMessage@data,c
 14575  005ED2  0E00               	movlw	high _data_brake
 14576  005ED4  6E33               	movwf	i1CANsendMessage@data+1,c
 14577  005ED6  0E08               	movlw	8
 14578  005ED8  6E34               	movwf	i1CANsendMessage@dataLength,c
 14579  005EDA  0EBC               	movlw	188
 14580  005EDC  6E35               	movwf	i1CANsendMessage@flags,c
 14581  005EDE  ECB9  F015         	call	i1_CANsendMessage	;wreg free
 14582                           
 14583                           ;parcheggio.c: 479: } else {
 14584  005EE2  0012               	return	
 14585                           
 14586                           ;parcheggio.c: 480: while (CANisTxReady() != 1);
 14587  005EE4  D000               	goto	i1l5975
 14588  005EE6                     i1l5975:
 14589  005EE6  ECBE  F032         	call	i1_CANisTxReady	;wreg free
 14590  005EEA  06E8               	decf	wreg,f,c
 14591  005EEC  A4D8               	btfss	status,2,c
 14592  005EEE  D7FB               	goto	i1l5975
 14593                           
 14594                           ;parcheggio.c: 481: CANsendMessage(0b00000010000, data_correction, 8, CAN_CONFIG_STD_MSG
      +                           & CAN_NORMAL_TX_FRAME & CAN_TX_PRIORITY_0);
 14595  005EF0  0E10               	movlw	16
 14596  005EF2  6E2E               	movwf	i1CANsendMessage@identifier,c
 14597  005EF4  0E00               	movlw	0
 14598  005EF6  6E2F               	movwf	i1CANsendMessage@identifier+1,c
 14599  005EF8  0E00               	movlw	0
 14600  005EFA  6E30               	movwf	i1CANsendMessage@identifier+2,c
 14601  005EFC  0E00               	movlw	0
 14602  005EFE  6E31               	movwf	i1CANsendMessage@identifier+3,c
 14603  005F00  0E5B               	movlw	low _data_correction
 14604  005F02  6E32               	movwf	i1CANsendMessage@data,c
 14605  005F04  0E01               	movlw	high _data_correction
 14606  005F06  6E33               	movwf	i1CANsendMessage@data+1,c
 14607  005F08  0E08               	movlw	8
 14608  005F0A  6E34               	movwf	i1CANsendMessage@dataLength,c
 14609  005F0C  0EBC               	movlw	188
 14610  005F0E  6E35               	movwf	i1CANsendMessage@flags,c
 14611  005F10  ECB9  F015         	call	i1_CANsendMessage	;wreg free
 14612  005F14  0012               	return	
 14613  005F16  0012               	return		;funcret
 14614  005F18                     __end_ofi1_can_send:
 14615                           	opt stack 0
 14616                           pclatu	equ	0xFFB
 14617                           pclath	equ	0xFFA
 14618                           tblptru	equ	0xFF8
 14619                           tblptrh	equ	0xFF7
 14620                           tblptrl	equ	0xFF6
 14621                           tablat	equ	0xFF5
 14622                           prodh	equ	0xFF4
 14623                           prodl	equ	0xFF3
 14624                           intcon	equ	0xFF2
 14625                           intcon2	equ	0xFF1
 14626                           postinc0	equ	0xFEE
 14627                           fsr0h	equ	0xFEA
 14628                           fsr0l	equ	0xFE9
 14629                           wreg	equ	0xFE8
 14630                           fsr1h	equ	0xFE2
 14631                           fsr1l	equ	0xFE1
 14632                           bsr	equ	0xFE0
 14633                           indf2	equ	0xFDF
 14634                           postinc2	equ	0xFDE
 14635                           postdec2	equ	0xFDD
 14636                           plusw2	equ	0xFDB
 14637                           fsr2h	equ	0xFDA
 14638                           fsr2l	equ	0xFD9
 14639                           status	equ	0xFD8
 14640                           
 14641 ;; *************** function i1_CANsendMessage *****************
 14642 ;; Defined at:
 14643 ;;		line 294 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 14644 ;; Parameters:    Size  Location     Type
 14645 ;;  identifier      4    0[COMRAM] unsigned long 
 14646 ;;  data            2    4[COMRAM] PTR unsigned char 
 14647 ;;		 -> data_speed(8), data_correction(8), data_test(8), data(8), 
 14648 ;;		 -> data_brake(8), data_steering(8), sensor_distance_short(8), 
 14649 ;;  dataLength      1    6[COMRAM] unsigned char 
 14650 ;;  flags           1    7[COMRAM] enum E16376
 14651 ;; Auto vars:     Size  Location     Type
 14652 ;;  CANsendMessa    4   12[COMRAM] unsigned long 
 14653 ;; Return value:  Size  Location     Type
 14654 ;;		None               void
 14655 ;; Registers used:
 14656 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14657 ;; Tracked objects:
 14658 ;;		On entry : 0/0
 14659 ;;		On exit  : 0/0
 14660 ;;		Unchanged: 0/0
 14661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14662 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14663 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14664 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14665 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;Total ram usage:       16 bytes
 14667 ;; Hardware stack levels used:    1
 14668 ;; Hardware stack levels required when called:    2
 14669 ;; This function calls:
 14670 ;;		Nothing
 14671 ;; This function is called by:
 14672 ;;		_ISR_Bassa
 14673 ;;		i1_can_send
 14674 ;; This function uses a non-reentrant model
 14675 ;;
 14676                           
 14677                           	psect	text41
 14678  002B72                     __ptext41:
 14679                           	opt stack 0
 14680  002B72                     i1_CANsendMessage:
 14681                           	opt stack 19
 14682                           
 14683                           ;inc\CANlib.h: 296: unsigned long tamp;
 14684                           ;inc\CANlib.h: 298: if (TXB0CONbits.TXREQ == 0)
 14685                           
 14686                           ;incstack = 0
 14687  002B72  010F               	movlb	15	; () banked
 14688  002B74  B740               	btfsc	64,3,b	;volatile
 14689  002B76  D118               	goto	i1l361
 14690                           
 14691                           ; BSR set to: 15
 14692                           ;inc\CANlib.h: 299: { TXB0DLC = dataLength;
 14693  002B78  C034  FF45         	movff	i1CANsendMessage@dataLength,3909	;volatile
 14694                           
 14695                           ;inc\CANlib.h: 300: if (0b01000000 & flags)
 14696  002B7C  AC35               	btfss	i1CANsendMessage@flags,6,c
 14697  002B7E  D003               	goto	i1l362
 14698                           
 14699                           ; BSR set to: 15
 14700                           ;inc\CANlib.h: 301: TXB0DLCbits.TXRTR = 0x01;
 14701  002B80  010F               	movlb	15	; () banked
 14702  002B82  8D45               	bsf	69,6,b	;volatile
 14703  002B84  D002               	goto	i1l363
 14704  002B86                     i1l362:
 14705                           
 14706                           ; BSR set to: 15
 14707                           ;inc\CANlib.h: 302: else
 14708                           ;inc\CANlib.h: 303: TXB0DLCbits.TXRTR = 0x00;
 14709  002B86  010F               	movlb	15	; () banked
 14710  002B88  9D45               	bcf	69,6,b	;volatile
 14711  002B8A                     i1l363:
 14712                           
 14713                           ; BSR set to: 15
 14714                           ;inc\CANlib.h: 305: if (CAN_TX_FRAME_MASK & flags)
 14715  002B8A  A635               	btfss	i1CANsendMessage@flags,3,c
 14716  002B8C  D067               	goto	i1l364
 14717                           
 14718                           ; BSR set to: 15
 14719                           ;inc\CANlib.h: 306: {
 14720                           ;inc\CANlib.h: 308: tamp = identifier & 0x000000FF;
 14721  002B8E  502E               	movf	i1CANsendMessage@identifier,w,c
 14722  002B90  6E3A               	movwf	i1CANsendMessage@tamp,c
 14723  002B92  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 14724  002B94  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 14725  002B96  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 14726                           
 14727                           ; BSR set to: 15
 14728                           ;inc\CANlib.h: 309: TXB0EIDL = (unsigned char) tamp;
 14729  002B98  C03A  FF44         	movff	i1CANsendMessage@tamp,3908	;volatile
 14730                           
 14731                           ; BSR set to: 15
 14732                           ;inc\CANlib.h: 311: tamp = identifier & 0x0000FF00;
 14733  002B9C  0E00               	movlw	0
 14734  002B9E  142E               	andwf	i1CANsendMessage@identifier,w,c
 14735  002BA0  6E3A               	movwf	i1CANsendMessage@tamp,c
 14736  002BA2  0EFF               	movlw	255
 14737  002BA4  142F               	andwf	i1CANsendMessage@identifier+1,w,c
 14738  002BA6  6E3B               	movwf	i1CANsendMessage@tamp+1,c
 14739  002BA8  0E00               	movlw	0
 14740  002BAA  1430               	andwf	i1CANsendMessage@identifier+2,w,c
 14741  002BAC  6E3C               	movwf	i1CANsendMessage@tamp+2,c
 14742  002BAE  0E00               	movlw	0
 14743  002BB0  1431               	andwf	i1CANsendMessage@identifier+3,w,c
 14744  002BB2  6E3D               	movwf	i1CANsendMessage@tamp+3,c
 14745                           
 14746                           ; BSR set to: 15
 14747                           ;inc\CANlib.h: 312: tamp = tamp >> 8;
 14748  002BB4  C03A  F036         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14749  002BB8  C03B  F037         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14750  002BBC  C03C  F038         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14751  002BC0  C03D  F039         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14752  002BC4  C037  F036         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 14753  002BC8  C038  F037         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 14754  002BCC  C039  F038         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 14755  002BD0  6A39               	clrf	??i1_CANsendMessage+3,c
 14756  002BD2  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14757  002BD6  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14758  002BDA  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14759  002BDE  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14760                           
 14761                           ; BSR set to: 15
 14762                           ;inc\CANlib.h: 313: TXB0EIDH = (unsigned char) tamp;
 14763  002BE2  C03A  FF43         	movff	i1CANsendMessage@tamp,3907	;volatile
 14764                           
 14765                           ; BSR set to: 15
 14766                           ;inc\CANlib.h: 315: TXB0SIDL = 0x00;
 14767  002BE6  0E00               	movlw	0
 14768  002BE8  010F               	movlb	15	; () banked
 14769  002BEA  6F42               	movwf	66,b	;volatile
 14770                           
 14771                           ; BSR set to: 15
 14772                           ;inc\CANlib.h: 316: TXB0SIDLbits.EXIDE = 0x01;
 14773  002BEC  010F               	movlb	15	; () banked
 14774  002BEE  8742               	bsf	66,3,b	;volatile
 14775                           
 14776                           ; BSR set to: 15
 14777                           ;inc\CANlib.h: 318: if (identifier & 0x00010000)
 14778  002BF0  A030               	btfss	i1CANsendMessage@identifier+2,0,c
 14779  002BF2  D002               	goto	i1l365
 14780                           
 14781                           ; BSR set to: 15
 14782                           ;inc\CANlib.h: 319: TXB0SIDLbits.EID16 = 0x01;
 14783  002BF4  010F               	movlb	15	; () banked
 14784  002BF6  8142               	bsf	66,0,b	;volatile
 14785  002BF8                     i1l365:
 14786                           
 14787                           ; BSR set to: 15
 14788                           ;inc\CANlib.h: 320: if (identifier & 0x00020000)
 14789  002BF8  A230               	btfss	i1CANsendMessage@identifier+2,1,c
 14790  002BFA  D002               	goto	i1l366
 14791                           
 14792                           ; BSR set to: 15
 14793                           ;inc\CANlib.h: 321: TXB0SIDLbits.EID17 = 0x01;
 14794  002BFC  010F               	movlb	15	; () banked
 14795  002BFE  8342               	bsf	66,1,b	;volatile
 14796  002C00                     i1l366:
 14797                           
 14798                           ; BSR set to: 15
 14799                           ;inc\CANlib.h: 322: if (identifier & 0x00040000)
 14800  002C00  A430               	btfss	i1CANsendMessage@identifier+2,2,c
 14801  002C02  D002               	goto	i1l367
 14802                           
 14803                           ; BSR set to: 15
 14804                           ;inc\CANlib.h: 323: TXB0SIDLbits.SID0 = 0x01;
 14805  002C04  010F               	movlb	15	; () banked
 14806  002C06  8B42               	bsf	66,5,b	;volatile
 14807  002C08                     i1l367:
 14808                           
 14809                           ; BSR set to: 15
 14810                           ;inc\CANlib.h: 324: if (identifier & 0x00080000)
 14811  002C08  A630               	btfss	i1CANsendMessage@identifier+2,3,c
 14812  002C0A  D002               	goto	i1l368
 14813                           
 14814                           ; BSR set to: 15
 14815                           ;inc\CANlib.h: 325: TXB0SIDLbits.SID1 = 0x01;
 14816  002C0C  010F               	movlb	15	; () banked
 14817  002C0E  8D42               	bsf	66,6,b	;volatile
 14818  002C10                     i1l368:
 14819                           
 14820                           ; BSR set to: 15
 14821                           ;inc\CANlib.h: 326: if (identifier & 0x00100000)
 14822  002C10  A830               	btfss	i1CANsendMessage@identifier+2,4,c
 14823  002C12  D003               	goto	i1l5237
 14824                           
 14825                           ; BSR set to: 15
 14826                           ;inc\CANlib.h: 327: TXB0SIDLbits.SID2 = 0x01;
 14827  002C14  010F               	movlb	15	; () banked
 14828  002C16  8F42               	bsf	66,7,b	;volatile
 14829  002C18  D000               	goto	i1l5237
 14830  002C1A                     i1l5237:
 14831                           
 14832                           ; BSR set to: 15
 14833                           ;inc\CANlib.h: 329: tamp = (identifier >> 21);
 14834  002C1A  C02E  F036         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14835  002C1E  C02F  F037         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14836  002C22  C030  F038         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14837  002C26  C031  F039         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14838  002C2A  0E16               	movlw	22
 14839  002C2C  D005               	goto	i1u619_20
 14840  002C2E                     i1u619_25:
 14841  002C2E  90D8               	bcf	status,0,c
 14842  002C30  3239               	rrcf	??i1_CANsendMessage+3,f,c
 14843  002C32  3238               	rrcf	??i1_CANsendMessage+2,f,c
 14844  002C34  3237               	rrcf	??i1_CANsendMessage+1,f,c
 14845  002C36  3236               	rrcf	??i1_CANsendMessage,f,c
 14846  002C38                     i1u619_20:
 14847  002C38  2EE8               	decfsz	wreg,f,c
 14848  002C3A  D7F9               	goto	i1u619_25
 14849  002C3C  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14850  002C40  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14851  002C44  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14852  002C48  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14853                           
 14854                           ; BSR set to: 15
 14855                           ;inc\CANlib.h: 330: tamp = tamp & 0x000000FF;
 14856  002C4C  503A               	movf	i1CANsendMessage@tamp,w,c
 14857  002C4E  6E3A               	movwf	i1CANsendMessage@tamp,c
 14858  002C50  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 14859  002C52  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 14860  002C54  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 14861                           
 14862                           ; BSR set to: 15
 14863                           ;inc\CANlib.h: 331: TXB0SIDH = (unsigned char) tamp;
 14864  002C56  C03A  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14865                           
 14866                           ;inc\CANlib.h: 332: }
 14867  002C5A  D04E               	goto	i1l5257
 14868  002C5C                     i1l364:
 14869                           
 14870                           ; BSR set to: 15
 14871                           ;inc\CANlib.h: 334: else
 14872                           ;inc\CANlib.h: 336: {
 14873                           ;inc\CANlib.h: 337: TXB0SIDLbits.EXIDE = 0x00;
 14874  002C5C  010F               	movlb	15	; () banked
 14875  002C5E  9742               	bcf	66,3,b	;volatile
 14876                           
 14877                           ; BSR set to: 15
 14878                           ;inc\CANlib.h: 339: tamp = (identifier >> 3);
 14879  002C60  C02E  F036         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 14880  002C64  C02F  F037         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 14881  002C68  C030  F038         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 14882  002C6C  C031  F039         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 14883  002C70  0E04               	movlw	4
 14884  002C72  D005               	goto	i1u620_20
 14885  002C74                     i1u620_25:
 14886  002C74  90D8               	bcf	status,0,c
 14887  002C76  3239               	rrcf	??i1_CANsendMessage+3,f,c
 14888  002C78  3238               	rrcf	??i1_CANsendMessage+2,f,c
 14889  002C7A  3237               	rrcf	??i1_CANsendMessage+1,f,c
 14890  002C7C  3236               	rrcf	??i1_CANsendMessage,f,c
 14891  002C7E                     i1u620_20:
 14892  002C7E  2EE8               	decfsz	wreg,f,c
 14893  002C80  D7F9               	goto	i1u620_25
 14894  002C82  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14895  002C86  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14896  002C8A  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14897  002C8E  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14898                           
 14899                           ; BSR set to: 15
 14900                           ;inc\CANlib.h: 340: tamp = tamp & 0x000000FF;
 14901  002C92  503A               	movf	i1CANsendMessage@tamp,w,c
 14902  002C94  6E3A               	movwf	i1CANsendMessage@tamp,c
 14903  002C96  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 14904  002C98  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 14905  002C9A  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 14906                           
 14907                           ; BSR set to: 15
 14908                           ;inc\CANlib.h: 341: TXB0SIDH = (unsigned char) tamp;
 14909  002C9C  C03A  FF41         	movff	i1CANsendMessage@tamp,3905	;volatile
 14910                           
 14911                           ; BSR set to: 15
 14912                           ;inc\CANlib.h: 343: tamp = identifier & 0x00000007;
 14913  002CA0  0E07               	movlw	7
 14914  002CA2  142E               	andwf	i1CANsendMessage@identifier,w,c
 14915  002CA4  6E3A               	movwf	i1CANsendMessage@tamp,c
 14916  002CA6  0E00               	movlw	0
 14917  002CA8  142F               	andwf	i1CANsendMessage@identifier+1,w,c
 14918  002CAA  6E3B               	movwf	i1CANsendMessage@tamp+1,c
 14919  002CAC  0E00               	movlw	0
 14920  002CAE  1430               	andwf	i1CANsendMessage@identifier+2,w,c
 14921  002CB0  6E3C               	movwf	i1CANsendMessage@tamp+2,c
 14922  002CB2  0E00               	movlw	0
 14923  002CB4  1431               	andwf	i1CANsendMessage@identifier+3,w,c
 14924  002CB6  6E3D               	movwf	i1CANsendMessage@tamp+3,c
 14925                           
 14926                           ; BSR set to: 15
 14927                           ;inc\CANlib.h: 344: tamp = tamp << 5;
 14928  002CB8  C03A  F036         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 14929  002CBC  C03B  F037         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 14930  002CC0  C03C  F038         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 14931  002CC4  C03D  F039         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 14932  002CC8  0E05               	movlw	5
 14933  002CCA                     i1u621_25:
 14934  002CCA  90D8               	bcf	status,0,c
 14935  002CCC  3636               	rlcf	??i1_CANsendMessage,f,c
 14936  002CCE  3637               	rlcf	??i1_CANsendMessage+1,f,c
 14937  002CD0  3638               	rlcf	??i1_CANsendMessage+2,f,c
 14938  002CD2  3639               	rlcf	??i1_CANsendMessage+3,f,c
 14939  002CD4  2EE8               	decfsz	wreg,f,c
 14940  002CD6  D7F9               	goto	i1u621_25
 14941  002CD8  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 14942  002CDC  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 14943  002CE0  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 14944  002CE4  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 14945                           
 14946                           ; BSR set to: 15
 14947                           ;inc\CANlib.h: 345: TXB0SIDL = TXB0SIDL & 0b00011111;
 14948  002CE8  010F               	movlb	15	; () banked
 14949  002CEA  5142               	movf	66,w,b	;volatile
 14950  002CEC  0B1F               	andlw	31
 14951  002CEE  010F               	movlb	15	; () banked
 14952  002CF0  6F42               	movwf	66,b	;volatile
 14953                           
 14954                           ; BSR set to: 15
 14955                           ;inc\CANlib.h: 346: TXB0SIDL = (unsigned char) tamp;
 14956  002CF2  C03A  FF42         	movff	i1CANsendMessage@tamp,3906	;volatile
 14957  002CF6  D000               	goto	i1l5257
 14958  002CF8                     i1l5257:
 14959                           
 14960                           ; BSR set to: 15
 14961                           ;inc\CANlib.h: 347: }
 14962                           ;inc\CANlib.h: 349: if (0b00000001 & flags)
 14963  002CF8  A035               	btfss	i1CANsendMessage@flags,0,c
 14964  002CFA  D003               	goto	i1l371
 14965                           
 14966                           ; BSR set to: 15
 14967                           ;inc\CANlib.h: 350: TXB0CONbits.TXPRI0 = 0x01;
 14968  002CFC  010F               	movlb	15	; () banked
 14969  002CFE  8140               	bsf	64,0,b	;volatile
 14970  002D00  D002               	goto	i1l372
 14971  002D02                     i1l371:
 14972                           
 14973                           ; BSR set to: 15
 14974                           ;inc\CANlib.h: 351: else
 14975                           ;inc\CANlib.h: 352: TXB0CONbits.TXPRI0 = 0x00;
 14976  002D02  010F               	movlb	15	; () banked
 14977  002D04  9140               	bcf	64,0,b	;volatile
 14978  002D06                     i1l372:
 14979                           
 14980                           ; BSR set to: 15
 14981                           ;inc\CANlib.h: 353: if (0b00000010 & flags)
 14982  002D06  A235               	btfss	i1CANsendMessage@flags,1,c
 14983  002D08  D003               	goto	i1l373
 14984                           
 14985                           ; BSR set to: 15
 14986                           ;inc\CANlib.h: 354: TXB0CONbits.TXPRI1 = 0x01;
 14987  002D0A  010F               	movlb	15	; () banked
 14988  002D0C  8340               	bsf	64,1,b	;volatile
 14989  002D0E  D003               	goto	i1l5263
 14990  002D10                     i1l373:
 14991                           
 14992                           ; BSR set to: 15
 14993                           ;inc\CANlib.h: 355: else
 14994                           ;inc\CANlib.h: 356: TXB0CONbits.TXPRI1 = 0x00;
 14995  002D10  010F               	movlb	15	; () banked
 14996  002D12  9340               	bcf	64,1,b	;volatile
 14997  002D14  D000               	goto	i1l5263
 14998  002D16                     i1l5263:
 14999                           
 15000                           ; BSR set to: 15
 15001                           ;inc\CANlib.h: 358: TXB0D0 = data[0];
 15002  002D16  C032  FFD9         	movff	i1CANsendMessage@data,fsr2l
 15003  002D1A  C033  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 15004  002D1E  50DF               	movf	indf2,w,c
 15005  002D20  010F               	movlb	15	; () banked
 15006  002D22  6F46               	movwf	70,b	;volatile
 15007                           
 15008                           ; BSR set to: 15
 15009                           ;inc\CANlib.h: 359: TXB0D1 = data[1];
 15010  002D24  EE20 F001          	lfsr	2,1
 15011  002D28  5032               	movf	i1CANsendMessage@data,w,c
 15012  002D2A  26D9               	addwf	fsr2l,f,c
 15013  002D2C  5033               	movf	i1CANsendMessage@data+1,w,c
 15014  002D2E  22DA               	addwfc	fsr2h,f,c
 15015  002D30  50DF               	movf	indf2,w,c
 15016  002D32  010F               	movlb	15	; () banked
 15017  002D34  6F47               	movwf	71,b	;volatile
 15018                           
 15019                           ; BSR set to: 15
 15020                           ;inc\CANlib.h: 360: TXB0D2 = data[2];
 15021  002D36  EE20 F002          	lfsr	2,2
 15022  002D3A  5032               	movf	i1CANsendMessage@data,w,c
 15023  002D3C  26D9               	addwf	fsr2l,f,c
 15024  002D3E  5033               	movf	i1CANsendMessage@data+1,w,c
 15025  002D40  22DA               	addwfc	fsr2h,f,c
 15026  002D42  50DF               	movf	indf2,w,c
 15027  002D44  010F               	movlb	15	; () banked
 15028  002D46  6F48               	movwf	72,b	;volatile
 15029                           
 15030                           ; BSR set to: 15
 15031                           ;inc\CANlib.h: 361: TXB0D3 = data[3];
 15032  002D48  EE20 F003          	lfsr	2,3
 15033  002D4C  5032               	movf	i1CANsendMessage@data,w,c
 15034  002D4E  26D9               	addwf	fsr2l,f,c
 15035  002D50  5033               	movf	i1CANsendMessage@data+1,w,c
 15036  002D52  22DA               	addwfc	fsr2h,f,c
 15037  002D54  50DF               	movf	indf2,w,c
 15038  002D56  010F               	movlb	15	; () banked
 15039  002D58  6F49               	movwf	73,b	;volatile
 15040                           
 15041                           ; BSR set to: 15
 15042                           ;inc\CANlib.h: 362: TXB0D4 = data[4];
 15043  002D5A  EE20 F004          	lfsr	2,4
 15044  002D5E  5032               	movf	i1CANsendMessage@data,w,c
 15045  002D60  26D9               	addwf	fsr2l,f,c
 15046  002D62  5033               	movf	i1CANsendMessage@data+1,w,c
 15047  002D64  22DA               	addwfc	fsr2h,f,c
 15048  002D66  50DF               	movf	indf2,w,c
 15049  002D68  010F               	movlb	15	; () banked
 15050  002D6A  6F4A               	movwf	74,b	;volatile
 15051                           
 15052                           ; BSR set to: 15
 15053                           ;inc\CANlib.h: 363: TXB0D5 = data[5];
 15054  002D6C  EE20 F005          	lfsr	2,5
 15055  002D70  5032               	movf	i1CANsendMessage@data,w,c
 15056  002D72  26D9               	addwf	fsr2l,f,c
 15057  002D74  5033               	movf	i1CANsendMessage@data+1,w,c
 15058  002D76  22DA               	addwfc	fsr2h,f,c
 15059  002D78  50DF               	movf	indf2,w,c
 15060  002D7A  010F               	movlb	15	; () banked
 15061  002D7C  6F4B               	movwf	75,b	;volatile
 15062                           
 15063                           ; BSR set to: 15
 15064                           ;inc\CANlib.h: 364: TXB0D6 = data[6];
 15065  002D7E  EE20 F006          	lfsr	2,6
 15066  002D82  5032               	movf	i1CANsendMessage@data,w,c
 15067  002D84  26D9               	addwf	fsr2l,f,c
 15068  002D86  5033               	movf	i1CANsendMessage@data+1,w,c
 15069  002D88  22DA               	addwfc	fsr2h,f,c
 15070  002D8A  50DF               	movf	indf2,w,c
 15071  002D8C  010F               	movlb	15	; () banked
 15072  002D8E  6F4C               	movwf	76,b	;volatile
 15073                           
 15074                           ; BSR set to: 15
 15075                           ;inc\CANlib.h: 365: TXB0D7 = data[7];
 15076  002D90  EE20 F007          	lfsr	2,7
 15077  002D94  5032               	movf	i1CANsendMessage@data,w,c
 15078  002D96  26D9               	addwf	fsr2l,f,c
 15079  002D98  5033               	movf	i1CANsendMessage@data+1,w,c
 15080  002D9A  22DA               	addwfc	fsr2h,f,c
 15081  002D9C  50DF               	movf	indf2,w,c
 15082  002D9E  010F               	movlb	15	; () banked
 15083  002DA0  6F4D               	movwf	77,b	;volatile
 15084                           
 15085                           ; BSR set to: 15
 15086                           ;inc\CANlib.h: 367: TXB0CONbits.TXREQ = 0x01;
 15087  002DA2  010F               	movlb	15	; () banked
 15088  002DA4  8740               	bsf	64,3,b	;volatile
 15089                           
 15090                           ; BSR set to: 15
 15091                           ;inc\CANlib.h: 368: return;
 15092  002DA6  0012               	return	
 15093  002DA8                     i1l361:
 15094                           
 15095                           ; BSR set to: 15
 15096                           ;inc\CANlib.h: 369: }
 15097                           ;inc\CANlib.h: 373: if (TXB1CONbits.TXREQ == 0)
 15098  002DA8  010F               	movlb	15	; () banked
 15099  002DAA  B730               	btfsc	48,3,b	;volatile
 15100  002DAC  D118               	goto	i1l376
 15101                           
 15102                           ; BSR set to: 15
 15103                           ;inc\CANlib.h: 374: { TXB1DLC = dataLength;
 15104  002DAE  C034  FF35         	movff	i1CANsendMessage@dataLength,3893	;volatile
 15105                           
 15106                           ;inc\CANlib.h: 376: if (0b01000000 & flags)
 15107  002DB2  AC35               	btfss	i1CANsendMessage@flags,6,c
 15108  002DB4  D003               	goto	i1l377
 15109                           
 15110                           ; BSR set to: 15
 15111                           ;inc\CANlib.h: 377: TXB1DLCbits.TXRTR = 0x01;
 15112  002DB6  010F               	movlb	15	; () banked
 15113  002DB8  8D35               	bsf	53,6,b	;volatile
 15114  002DBA  D002               	goto	i1l378
 15115  002DBC                     i1l377:
 15116                           
 15117                           ; BSR set to: 15
 15118                           ;inc\CANlib.h: 378: else
 15119                           ;inc\CANlib.h: 379: TXB1DLCbits.TXRTR = 0x00;
 15120  002DBC  010F               	movlb	15	; () banked
 15121  002DBE  9D35               	bcf	53,6,b	;volatile
 15122  002DC0                     i1l378:
 15123                           
 15124                           ; BSR set to: 15
 15125                           ;inc\CANlib.h: 381: if (CAN_TX_FRAME_MASK & flags)
 15126  002DC0  A635               	btfss	i1CANsendMessage@flags,3,c
 15127  002DC2  D067               	goto	i1l379
 15128                           
 15129                           ; BSR set to: 15
 15130                           ;inc\CANlib.h: 382: {
 15131                           ;inc\CANlib.h: 383: tamp = identifier & 0x000000FF;
 15132  002DC4  502E               	movf	i1CANsendMessage@identifier,w,c
 15133  002DC6  6E3A               	movwf	i1CANsendMessage@tamp,c
 15134  002DC8  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 15135  002DCA  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 15136  002DCC  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 15137                           
 15138                           ; BSR set to: 15
 15139                           ;inc\CANlib.h: 384: TXB1EIDL = (unsigned char) tamp;
 15140  002DCE  C03A  FF34         	movff	i1CANsendMessage@tamp,3892	;volatile
 15141                           
 15142                           ; BSR set to: 15
 15143                           ;inc\CANlib.h: 386: tamp = identifier & 0x0000FF00;
 15144  002DD2  0E00               	movlw	0
 15145  002DD4  142E               	andwf	i1CANsendMessage@identifier,w,c
 15146  002DD6  6E3A               	movwf	i1CANsendMessage@tamp,c
 15147  002DD8  0EFF               	movlw	255
 15148  002DDA  142F               	andwf	i1CANsendMessage@identifier+1,w,c
 15149  002DDC  6E3B               	movwf	i1CANsendMessage@tamp+1,c
 15150  002DDE  0E00               	movlw	0
 15151  002DE0  1430               	andwf	i1CANsendMessage@identifier+2,w,c
 15152  002DE2  6E3C               	movwf	i1CANsendMessage@tamp+2,c
 15153  002DE4  0E00               	movlw	0
 15154  002DE6  1431               	andwf	i1CANsendMessage@identifier+3,w,c
 15155  002DE8  6E3D               	movwf	i1CANsendMessage@tamp+3,c
 15156                           
 15157                           ; BSR set to: 15
 15158                           ;inc\CANlib.h: 387: tamp = tamp >> 8;
 15159  002DEA  C03A  F036         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 15160  002DEE  C03B  F037         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 15161  002DF2  C03C  F038         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 15162  002DF6  C03D  F039         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 15163  002DFA  C037  F036         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 15164  002DFE  C038  F037         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 15165  002E02  C039  F038         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 15166  002E06  6A39               	clrf	??i1_CANsendMessage+3,c
 15167  002E08  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15168  002E0C  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15169  002E10  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15170  002E14  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15171                           
 15172                           ; BSR set to: 15
 15173                           ;inc\CANlib.h: 388: TXB1EIDH = (unsigned char) tamp;
 15174  002E18  C03A  FF33         	movff	i1CANsendMessage@tamp,3891	;volatile
 15175                           
 15176                           ; BSR set to: 15
 15177                           ;inc\CANlib.h: 390: TXB1SIDL = 0x00;
 15178  002E1C  0E00               	movlw	0
 15179  002E1E  010F               	movlb	15	; () banked
 15180  002E20  6F32               	movwf	50,b	;volatile
 15181                           
 15182                           ; BSR set to: 15
 15183                           ;inc\CANlib.h: 391: TXB1SIDLbits.EXIDE = 0x01;
 15184  002E22  010F               	movlb	15	; () banked
 15185  002E24  8732               	bsf	50,3,b	;volatile
 15186                           
 15187                           ; BSR set to: 15
 15188                           ;inc\CANlib.h: 393: if (identifier & 0x00010000)
 15189  002E26  A030               	btfss	i1CANsendMessage@identifier+2,0,c
 15190  002E28  D002               	goto	i1l380
 15191                           
 15192                           ; BSR set to: 15
 15193                           ;inc\CANlib.h: 394: TXB1SIDLbits.EID16 = 0x01;
 15194  002E2A  010F               	movlb	15	; () banked
 15195  002E2C  8132               	bsf	50,0,b	;volatile
 15196  002E2E                     i1l380:
 15197                           
 15198                           ; BSR set to: 15
 15199                           ;inc\CANlib.h: 395: if (identifier & 0x00020000)
 15200  002E2E  A230               	btfss	i1CANsendMessage@identifier+2,1,c
 15201  002E30  D002               	goto	i1l381
 15202                           
 15203                           ; BSR set to: 15
 15204                           ;inc\CANlib.h: 396: TXB1SIDLbits.EID17 = 0x01;
 15205  002E32  010F               	movlb	15	; () banked
 15206  002E34  8332               	bsf	50,1,b	;volatile
 15207  002E36                     i1l381:
 15208                           
 15209                           ; BSR set to: 15
 15210                           ;inc\CANlib.h: 397: if (identifier & 0x00040000)
 15211  002E36  A430               	btfss	i1CANsendMessage@identifier+2,2,c
 15212  002E38  D002               	goto	i1l382
 15213                           
 15214                           ; BSR set to: 15
 15215                           ;inc\CANlib.h: 398: TXB1SIDLbits.SID0 = 0x01;
 15216  002E3A  010F               	movlb	15	; () banked
 15217  002E3C  8B32               	bsf	50,5,b	;volatile
 15218  002E3E                     i1l382:
 15219                           
 15220                           ; BSR set to: 15
 15221                           ;inc\CANlib.h: 399: if (identifier & 0x00080000)
 15222  002E3E  A630               	btfss	i1CANsendMessage@identifier+2,3,c
 15223  002E40  D002               	goto	i1l383
 15224                           
 15225                           ; BSR set to: 15
 15226                           ;inc\CANlib.h: 400: TXB1SIDLbits.SID1 = 0x01;
 15227  002E42  010F               	movlb	15	; () banked
 15228  002E44  8D32               	bsf	50,6,b	;volatile
 15229  002E46                     i1l383:
 15230                           
 15231                           ; BSR set to: 15
 15232                           ;inc\CANlib.h: 401: if (identifier & 0x00100000)
 15233  002E46  A830               	btfss	i1CANsendMessage@identifier+2,4,c
 15234  002E48  D003               	goto	i1l5313
 15235                           
 15236                           ; BSR set to: 15
 15237                           ;inc\CANlib.h: 402: TXB1SIDLbits.SID2 = 0x01;
 15238  002E4A  010F               	movlb	15	; () banked
 15239  002E4C  8F32               	bsf	50,7,b	;volatile
 15240  002E4E  D000               	goto	i1l5313
 15241  002E50                     i1l5313:
 15242                           
 15243                           ; BSR set to: 15
 15244                           ;inc\CANlib.h: 404: tamp = (identifier >> 21);
 15245  002E50  C02E  F036         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15246  002E54  C02F  F037         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15247  002E58  C030  F038         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15248  002E5C  C031  F039         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15249  002E60  0E16               	movlw	22
 15250  002E62  D005               	goto	i1u632_20
 15251  002E64                     i1u632_25:
 15252  002E64  90D8               	bcf	status,0,c
 15253  002E66  3239               	rrcf	??i1_CANsendMessage+3,f,c
 15254  002E68  3238               	rrcf	??i1_CANsendMessage+2,f,c
 15255  002E6A  3237               	rrcf	??i1_CANsendMessage+1,f,c
 15256  002E6C  3236               	rrcf	??i1_CANsendMessage,f,c
 15257  002E6E                     i1u632_20:
 15258  002E6E  2EE8               	decfsz	wreg,f,c
 15259  002E70  D7F9               	goto	i1u632_25
 15260  002E72  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15261  002E76  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15262  002E7A  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15263  002E7E  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15264                           
 15265                           ; BSR set to: 15
 15266                           ;inc\CANlib.h: 405: tamp = tamp & 0x000000FF;
 15267  002E82  503A               	movf	i1CANsendMessage@tamp,w,c
 15268  002E84  6E3A               	movwf	i1CANsendMessage@tamp,c
 15269  002E86  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 15270  002E88  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 15271  002E8A  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 15272                           
 15273                           ; BSR set to: 15
 15274                           ;inc\CANlib.h: 406: TXB1SIDH = (unsigned char) tamp;
 15275  002E8C  C03A  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 15276                           
 15277                           ;inc\CANlib.h: 407: }
 15278  002E90  D04E               	goto	i1l5333
 15279  002E92                     i1l379:
 15280                           
 15281                           ; BSR set to: 15
 15282                           ;inc\CANlib.h: 409: else
 15283                           ;inc\CANlib.h: 411: {
 15284                           ;inc\CANlib.h: 412: TXB1SIDLbits.EXIDE = 0x00;
 15285  002E92  010F               	movlb	15	; () banked
 15286  002E94  9732               	bcf	50,3,b	;volatile
 15287                           
 15288                           ; BSR set to: 15
 15289                           ;inc\CANlib.h: 414: tamp = (identifier >> 3);
 15290  002E96  C02E  F036         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15291  002E9A  C02F  F037         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15292  002E9E  C030  F038         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15293  002EA2  C031  F039         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15294  002EA6  0E04               	movlw	4
 15295  002EA8  D005               	goto	i1u633_20
 15296  002EAA                     i1u633_25:
 15297  002EAA  90D8               	bcf	status,0,c
 15298  002EAC  3239               	rrcf	??i1_CANsendMessage+3,f,c
 15299  002EAE  3238               	rrcf	??i1_CANsendMessage+2,f,c
 15300  002EB0  3237               	rrcf	??i1_CANsendMessage+1,f,c
 15301  002EB2  3236               	rrcf	??i1_CANsendMessage,f,c
 15302  002EB4                     i1u633_20:
 15303  002EB4  2EE8               	decfsz	wreg,f,c
 15304  002EB6  D7F9               	goto	i1u633_25
 15305  002EB8  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15306  002EBC  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15307  002EC0  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15308  002EC4  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15309                           
 15310                           ; BSR set to: 15
 15311                           ;inc\CANlib.h: 415: tamp = tamp & 0x000000FF;
 15312  002EC8  503A               	movf	i1CANsendMessage@tamp,w,c
 15313  002ECA  6E3A               	movwf	i1CANsendMessage@tamp,c
 15314  002ECC  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 15315  002ECE  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 15316  002ED0  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 15317                           
 15318                           ; BSR set to: 15
 15319                           ;inc\CANlib.h: 416: TXB1SIDH = (unsigned char) tamp;
 15320  002ED2  C03A  FF31         	movff	i1CANsendMessage@tamp,3889	;volatile
 15321                           
 15322                           ; BSR set to: 15
 15323                           ;inc\CANlib.h: 418: tamp = identifier & 0x00000007;
 15324  002ED6  0E07               	movlw	7
 15325  002ED8  142E               	andwf	i1CANsendMessage@identifier,w,c
 15326  002EDA  6E3A               	movwf	i1CANsendMessage@tamp,c
 15327  002EDC  0E00               	movlw	0
 15328  002EDE  142F               	andwf	i1CANsendMessage@identifier+1,w,c
 15329  002EE0  6E3B               	movwf	i1CANsendMessage@tamp+1,c
 15330  002EE2  0E00               	movlw	0
 15331  002EE4  1430               	andwf	i1CANsendMessage@identifier+2,w,c
 15332  002EE6  6E3C               	movwf	i1CANsendMessage@tamp+2,c
 15333  002EE8  0E00               	movlw	0
 15334  002EEA  1431               	andwf	i1CANsendMessage@identifier+3,w,c
 15335  002EEC  6E3D               	movwf	i1CANsendMessage@tamp+3,c
 15336                           
 15337                           ; BSR set to: 15
 15338                           ;inc\CANlib.h: 419: tamp = tamp << 5;
 15339  002EEE  C03A  F036         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 15340  002EF2  C03B  F037         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 15341  002EF6  C03C  F038         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 15342  002EFA  C03D  F039         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 15343  002EFE  0E05               	movlw	5
 15344  002F00                     i1u634_25:
 15345  002F00  90D8               	bcf	status,0,c
 15346  002F02  3636               	rlcf	??i1_CANsendMessage,f,c
 15347  002F04  3637               	rlcf	??i1_CANsendMessage+1,f,c
 15348  002F06  3638               	rlcf	??i1_CANsendMessage+2,f,c
 15349  002F08  3639               	rlcf	??i1_CANsendMessage+3,f,c
 15350  002F0A  2EE8               	decfsz	wreg,f,c
 15351  002F0C  D7F9               	goto	i1u634_25
 15352  002F0E  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15353  002F12  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15354  002F16  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15355  002F1A  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15356                           
 15357                           ; BSR set to: 15
 15358                           ;inc\CANlib.h: 420: TXB1SIDL = TXB1SIDL & 0b00011111;
 15359  002F1E  010F               	movlb	15	; () banked
 15360  002F20  5132               	movf	50,w,b	;volatile
 15361  002F22  0B1F               	andlw	31
 15362  002F24  010F               	movlb	15	; () banked
 15363  002F26  6F32               	movwf	50,b	;volatile
 15364                           
 15365                           ; BSR set to: 15
 15366                           ;inc\CANlib.h: 421: TXB1SIDL = (unsigned char) tamp;
 15367  002F28  C03A  FF32         	movff	i1CANsendMessage@tamp,3890	;volatile
 15368  002F2C  D000               	goto	i1l5333
 15369  002F2E                     i1l5333:
 15370                           
 15371                           ; BSR set to: 15
 15372                           ;inc\CANlib.h: 422: }
 15373                           ;inc\CANlib.h: 424: if (0b00000001 & flags)
 15374  002F2E  A035               	btfss	i1CANsendMessage@flags,0,c
 15375  002F30  D003               	goto	i1l386
 15376                           
 15377                           ; BSR set to: 15
 15378                           ;inc\CANlib.h: 425: TXB1CONbits.TXPRI0 = 0x01;
 15379  002F32  010F               	movlb	15	; () banked
 15380  002F34  8130               	bsf	48,0,b	;volatile
 15381  002F36  D002               	goto	i1l387
 15382  002F38                     i1l386:
 15383                           
 15384                           ; BSR set to: 15
 15385                           ;inc\CANlib.h: 426: else
 15386                           ;inc\CANlib.h: 427: TXB1CONbits.TXPRI0 = 0x00;
 15387  002F38  010F               	movlb	15	; () banked
 15388  002F3A  9130               	bcf	48,0,b	;volatile
 15389  002F3C                     i1l387:
 15390                           
 15391                           ; BSR set to: 15
 15392                           ;inc\CANlib.h: 428: if (0b00000010 & flags)
 15393  002F3C  A235               	btfss	i1CANsendMessage@flags,1,c
 15394  002F3E  D003               	goto	i1l388
 15395                           
 15396                           ; BSR set to: 15
 15397                           ;inc\CANlib.h: 429: TXB1CONbits.TXPRI1 = 0x01;
 15398  002F40  010F               	movlb	15	; () banked
 15399  002F42  8330               	bsf	48,1,b	;volatile
 15400  002F44  D003               	goto	i1l5339
 15401  002F46                     i1l388:
 15402                           
 15403                           ; BSR set to: 15
 15404                           ;inc\CANlib.h: 430: else
 15405                           ;inc\CANlib.h: 431: TXB1CONbits.TXPRI1 = 0x00;
 15406  002F46  010F               	movlb	15	; () banked
 15407  002F48  9330               	bcf	48,1,b	;volatile
 15408  002F4A  D000               	goto	i1l5339
 15409  002F4C                     i1l5339:
 15410                           
 15411                           ; BSR set to: 15
 15412                           ;inc\CANlib.h: 433: TXB1D0 = data[0];
 15413  002F4C  C032  FFD9         	movff	i1CANsendMessage@data,fsr2l
 15414  002F50  C033  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 15415  002F54  50DF               	movf	indf2,w,c
 15416  002F56  010F               	movlb	15	; () banked
 15417  002F58  6F36               	movwf	54,b	;volatile
 15418                           
 15419                           ; BSR set to: 15
 15420                           ;inc\CANlib.h: 434: TXB1D1 = data[1];
 15421  002F5A  EE20 F001          	lfsr	2,1
 15422  002F5E  5032               	movf	i1CANsendMessage@data,w,c
 15423  002F60  26D9               	addwf	fsr2l,f,c
 15424  002F62  5033               	movf	i1CANsendMessage@data+1,w,c
 15425  002F64  22DA               	addwfc	fsr2h,f,c
 15426  002F66  50DF               	movf	indf2,w,c
 15427  002F68  010F               	movlb	15	; () banked
 15428  002F6A  6F37               	movwf	55,b	;volatile
 15429                           
 15430                           ; BSR set to: 15
 15431                           ;inc\CANlib.h: 435: TXB1D2 = data[2];
 15432  002F6C  EE20 F002          	lfsr	2,2
 15433  002F70  5032               	movf	i1CANsendMessage@data,w,c
 15434  002F72  26D9               	addwf	fsr2l,f,c
 15435  002F74  5033               	movf	i1CANsendMessage@data+1,w,c
 15436  002F76  22DA               	addwfc	fsr2h,f,c
 15437  002F78  50DF               	movf	indf2,w,c
 15438  002F7A  010F               	movlb	15	; () banked
 15439  002F7C  6F38               	movwf	56,b	;volatile
 15440                           
 15441                           ; BSR set to: 15
 15442                           ;inc\CANlib.h: 436: TXB1D3 = data[3];
 15443  002F7E  EE20 F003          	lfsr	2,3
 15444  002F82  5032               	movf	i1CANsendMessage@data,w,c
 15445  002F84  26D9               	addwf	fsr2l,f,c
 15446  002F86  5033               	movf	i1CANsendMessage@data+1,w,c
 15447  002F88  22DA               	addwfc	fsr2h,f,c
 15448  002F8A  50DF               	movf	indf2,w,c
 15449  002F8C  010F               	movlb	15	; () banked
 15450  002F8E  6F39               	movwf	57,b	;volatile
 15451                           
 15452                           ; BSR set to: 15
 15453                           ;inc\CANlib.h: 437: TXB1D4 = data[4];
 15454  002F90  EE20 F004          	lfsr	2,4
 15455  002F94  5032               	movf	i1CANsendMessage@data,w,c
 15456  002F96  26D9               	addwf	fsr2l,f,c
 15457  002F98  5033               	movf	i1CANsendMessage@data+1,w,c
 15458  002F9A  22DA               	addwfc	fsr2h,f,c
 15459  002F9C  50DF               	movf	indf2,w,c
 15460  002F9E  010F               	movlb	15	; () banked
 15461  002FA0  6F3A               	movwf	58,b	;volatile
 15462                           
 15463                           ; BSR set to: 15
 15464                           ;inc\CANlib.h: 438: TXB1D5 = data[5];
 15465  002FA2  EE20 F005          	lfsr	2,5
 15466  002FA6  5032               	movf	i1CANsendMessage@data,w,c
 15467  002FA8  26D9               	addwf	fsr2l,f,c
 15468  002FAA  5033               	movf	i1CANsendMessage@data+1,w,c
 15469  002FAC  22DA               	addwfc	fsr2h,f,c
 15470  002FAE  50DF               	movf	indf2,w,c
 15471  002FB0  010F               	movlb	15	; () banked
 15472  002FB2  6F3B               	movwf	59,b	;volatile
 15473                           
 15474                           ; BSR set to: 15
 15475                           ;inc\CANlib.h: 439: TXB1D6 = data[6];
 15476  002FB4  EE20 F006          	lfsr	2,6
 15477  002FB8  5032               	movf	i1CANsendMessage@data,w,c
 15478  002FBA  26D9               	addwf	fsr2l,f,c
 15479  002FBC  5033               	movf	i1CANsendMessage@data+1,w,c
 15480  002FBE  22DA               	addwfc	fsr2h,f,c
 15481  002FC0  50DF               	movf	indf2,w,c
 15482  002FC2  010F               	movlb	15	; () banked
 15483  002FC4  6F3C               	movwf	60,b	;volatile
 15484                           
 15485                           ; BSR set to: 15
 15486                           ;inc\CANlib.h: 440: TXB1D7 = data[7];
 15487  002FC6  EE20 F007          	lfsr	2,7
 15488  002FCA  5032               	movf	i1CANsendMessage@data,w,c
 15489  002FCC  26D9               	addwf	fsr2l,f,c
 15490  002FCE  5033               	movf	i1CANsendMessage@data+1,w,c
 15491  002FD0  22DA               	addwfc	fsr2h,f,c
 15492  002FD2  50DF               	movf	indf2,w,c
 15493  002FD4  010F               	movlb	15	; () banked
 15494  002FD6  6F3D               	movwf	61,b	;volatile
 15495                           
 15496                           ; BSR set to: 15
 15497                           ;inc\CANlib.h: 442: TXB1CONbits.TXREQ = 0x01;
 15498  002FD8  010F               	movlb	15	; () banked
 15499  002FDA  8730               	bsf	48,3,b	;volatile
 15500                           
 15501                           ; BSR set to: 15
 15502                           ;inc\CANlib.h: 444: return;
 15503  002FDC  0012               	return	
 15504  002FDE                     i1l376:
 15505                           
 15506                           ; BSR set to: 15
 15507                           ;inc\CANlib.h: 445: }
 15508                           ;inc\CANlib.h: 449: if (TXB2CONbits.TXREQ == 0)
 15509  002FDE  010F               	movlb	15	; () banked
 15510  002FE0  B720               	btfsc	32,3,b	;volatile
 15511  002FE2  0012               	return	
 15512                           
 15513                           ; BSR set to: 15
 15514                           ;inc\CANlib.h: 450: { TXB2DLC = dataLength;
 15515  002FE4  C034  FF25         	movff	i1CANsendMessage@dataLength,3877	;volatile
 15516                           
 15517                           ;inc\CANlib.h: 452: if (0b01000000 & flags)
 15518  002FE8  AC35               	btfss	i1CANsendMessage@flags,6,c
 15519  002FEA  D003               	goto	i1l391
 15520                           
 15521                           ; BSR set to: 15
 15522                           ;inc\CANlib.h: 453: TXB2DLCbits.TXRTR = 0x01;
 15523  002FEC  010F               	movlb	15	; () banked
 15524  002FEE  8D25               	bsf	37,6,b	;volatile
 15525  002FF0  D002               	goto	i1l392
 15526  002FF2                     i1l391:
 15527                           
 15528                           ; BSR set to: 15
 15529                           ;inc\CANlib.h: 454: else
 15530                           ;inc\CANlib.h: 455: TXB2DLCbits.TXRTR = 0x00;
 15531  002FF2  010F               	movlb	15	; () banked
 15532  002FF4  9D25               	bcf	37,6,b	;volatile
 15533  002FF6                     i1l392:
 15534                           
 15535                           ; BSR set to: 15
 15536                           ;inc\CANlib.h: 457: if (CAN_TX_FRAME_MASK & flags)
 15537  002FF6  A635               	btfss	i1CANsendMessage@flags,3,c
 15538  002FF8  D067               	goto	i1l393
 15539                           
 15540                           ; BSR set to: 15
 15541                           ;inc\CANlib.h: 458: {
 15542                           ;inc\CANlib.h: 459: tamp = identifier & 0x000000FF;
 15543  002FFA  502E               	movf	i1CANsendMessage@identifier,w,c
 15544  002FFC  6E3A               	movwf	i1CANsendMessage@tamp,c
 15545  002FFE  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 15546  003000  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 15547  003002  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 15548                           
 15549                           ; BSR set to: 15
 15550                           ;inc\CANlib.h: 460: TXB2EIDL = (unsigned char) tamp;
 15551  003004  C03A  FF24         	movff	i1CANsendMessage@tamp,3876	;volatile
 15552                           
 15553                           ; BSR set to: 15
 15554                           ;inc\CANlib.h: 462: tamp = identifier & 0x0000FF00;
 15555  003008  0E00               	movlw	0
 15556  00300A  142E               	andwf	i1CANsendMessage@identifier,w,c
 15557  00300C  6E3A               	movwf	i1CANsendMessage@tamp,c
 15558  00300E  0EFF               	movlw	255
 15559  003010  142F               	andwf	i1CANsendMessage@identifier+1,w,c
 15560  003012  6E3B               	movwf	i1CANsendMessage@tamp+1,c
 15561  003014  0E00               	movlw	0
 15562  003016  1430               	andwf	i1CANsendMessage@identifier+2,w,c
 15563  003018  6E3C               	movwf	i1CANsendMessage@tamp+2,c
 15564  00301A  0E00               	movlw	0
 15565  00301C  1431               	andwf	i1CANsendMessage@identifier+3,w,c
 15566  00301E  6E3D               	movwf	i1CANsendMessage@tamp+3,c
 15567                           
 15568                           ; BSR set to: 15
 15569                           ;inc\CANlib.h: 463: tamp = tamp >> 8;
 15570  003020  C03A  F036         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 15571  003024  C03B  F037         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 15572  003028  C03C  F038         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 15573  00302C  C03D  F039         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 15574  003030  C037  F036         	movff	??i1_CANsendMessage+1,??i1_CANsendMessage
 15575  003034  C038  F037         	movff	??i1_CANsendMessage+2,??i1_CANsendMessage+1
 15576  003038  C039  F038         	movff	??i1_CANsendMessage+3,??i1_CANsendMessage+2
 15577  00303C  6A39               	clrf	??i1_CANsendMessage+3,c
 15578  00303E  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15579  003042  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15580  003046  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15581  00304A  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15582                           
 15583                           ; BSR set to: 15
 15584                           ;inc\CANlib.h: 464: TXB2EIDH = (unsigned char) tamp;
 15585  00304E  C03A  FF23         	movff	i1CANsendMessage@tamp,3875	;volatile
 15586                           
 15587                           ; BSR set to: 15
 15588                           ;inc\CANlib.h: 466: TXB2SIDL = 0x00;
 15589  003052  0E00               	movlw	0
 15590  003054  010F               	movlb	15	; () banked
 15591  003056  6F22               	movwf	34,b	;volatile
 15592                           
 15593                           ; BSR set to: 15
 15594                           ;inc\CANlib.h: 467: TXB2SIDLbits.EXIDE = 0x01;
 15595  003058  010F               	movlb	15	; () banked
 15596  00305A  8722               	bsf	34,3,b	;volatile
 15597                           
 15598                           ; BSR set to: 15
 15599                           ;inc\CANlib.h: 469: if (identifier & 0x00010000)
 15600  00305C  A030               	btfss	i1CANsendMessage@identifier+2,0,c
 15601  00305E  D002               	goto	i1l394
 15602                           
 15603                           ; BSR set to: 15
 15604                           ;inc\CANlib.h: 470: TXB2SIDLbits.EID16 = 0x01;
 15605  003060  010F               	movlb	15	; () banked
 15606  003062  8122               	bsf	34,0,b	;volatile
 15607  003064                     i1l394:
 15608                           
 15609                           ; BSR set to: 15
 15610                           ;inc\CANlib.h: 471: if (identifier & 0x00020000)
 15611  003064  A230               	btfss	i1CANsendMessage@identifier+2,1,c
 15612  003066  D002               	goto	i1l395
 15613                           
 15614                           ; BSR set to: 15
 15615                           ;inc\CANlib.h: 472: TXB2SIDLbits.EID17 = 0x01;
 15616  003068  010F               	movlb	15	; () banked
 15617  00306A  8322               	bsf	34,1,b	;volatile
 15618  00306C                     i1l395:
 15619                           
 15620                           ; BSR set to: 15
 15621                           ;inc\CANlib.h: 473: if (identifier & 0x00040000)
 15622  00306C  A430               	btfss	i1CANsendMessage@identifier+2,2,c
 15623  00306E  D002               	goto	i1l396
 15624                           
 15625                           ; BSR set to: 15
 15626                           ;inc\CANlib.h: 474: TXB2SIDLbits.SID0 = 0x01;
 15627  003070  010F               	movlb	15	; () banked
 15628  003072  8B22               	bsf	34,5,b	;volatile
 15629  003074                     i1l396:
 15630                           
 15631                           ; BSR set to: 15
 15632                           ;inc\CANlib.h: 475: if (identifier & 0x00080000)
 15633  003074  A630               	btfss	i1CANsendMessage@identifier+2,3,c
 15634  003076  D002               	goto	i1l397
 15635                           
 15636                           ; BSR set to: 15
 15637                           ;inc\CANlib.h: 476: TXB2SIDLbits.SID1 = 0x01;
 15638  003078  010F               	movlb	15	; () banked
 15639  00307A  8D22               	bsf	34,6,b	;volatile
 15640  00307C                     i1l397:
 15641                           
 15642                           ; BSR set to: 15
 15643                           ;inc\CANlib.h: 477: if (identifier & 0x00100000)
 15644  00307C  A830               	btfss	i1CANsendMessage@identifier+2,4,c
 15645  00307E  D003               	goto	i1l5389
 15646                           
 15647                           ; BSR set to: 15
 15648                           ;inc\CANlib.h: 478: TXB2SIDLbits.SID2 = 0x01;
 15649  003080  010F               	movlb	15	; () banked
 15650  003082  8F22               	bsf	34,7,b	;volatile
 15651  003084  D000               	goto	i1l5389
 15652  003086                     i1l5389:
 15653                           
 15654                           ; BSR set to: 15
 15655                           ;inc\CANlib.h: 480: tamp = (identifier >> 21);
 15656  003086  C02E  F036         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15657  00308A  C02F  F037         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15658  00308E  C030  F038         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15659  003092  C031  F039         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15660  003096  0E16               	movlw	22
 15661  003098  D005               	goto	i1u645_20
 15662  00309A                     i1u645_25:
 15663  00309A  90D8               	bcf	status,0,c
 15664  00309C  3239               	rrcf	??i1_CANsendMessage+3,f,c
 15665  00309E  3238               	rrcf	??i1_CANsendMessage+2,f,c
 15666  0030A0  3237               	rrcf	??i1_CANsendMessage+1,f,c
 15667  0030A2  3236               	rrcf	??i1_CANsendMessage,f,c
 15668  0030A4                     i1u645_20:
 15669  0030A4  2EE8               	decfsz	wreg,f,c
 15670  0030A6  D7F9               	goto	i1u645_25
 15671  0030A8  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15672  0030AC  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15673  0030B0  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15674  0030B4  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15675                           
 15676                           ; BSR set to: 15
 15677                           ;inc\CANlib.h: 481: tamp = tamp & 0x000000FF;
 15678  0030B8  503A               	movf	i1CANsendMessage@tamp,w,c
 15679  0030BA  6E3A               	movwf	i1CANsendMessage@tamp,c
 15680  0030BC  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 15681  0030BE  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 15682  0030C0  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 15683                           
 15684                           ; BSR set to: 15
 15685                           ;inc\CANlib.h: 482: TXB2SIDH = (unsigned char) tamp;
 15686  0030C2  C03A  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15687                           
 15688                           ;inc\CANlib.h: 483: }
 15689  0030C6  D04E               	goto	i1l5409
 15690  0030C8                     i1l393:
 15691                           
 15692                           ; BSR set to: 15
 15693                           ;inc\CANlib.h: 485: else
 15694                           ;inc\CANlib.h: 487: {
 15695                           ;inc\CANlib.h: 488: TXB2SIDLbits.EXIDE = 0x00;
 15696  0030C8  010F               	movlb	15	; () banked
 15697  0030CA  9722               	bcf	34,3,b	;volatile
 15698                           
 15699                           ; BSR set to: 15
 15700                           ;inc\CANlib.h: 490: tamp = (identifier >> 3);
 15701  0030CC  C02E  F036         	movff	i1CANsendMessage@identifier,??i1_CANsendMessage
 15702  0030D0  C02F  F037         	movff	i1CANsendMessage@identifier+1,??i1_CANsendMessage+1
 15703  0030D4  C030  F038         	movff	i1CANsendMessage@identifier+2,??i1_CANsendMessage+2
 15704  0030D8  C031  F039         	movff	i1CANsendMessage@identifier+3,??i1_CANsendMessage+3
 15705  0030DC  0E04               	movlw	4
 15706  0030DE  D005               	goto	i1u646_20
 15707  0030E0                     i1u646_25:
 15708  0030E0  90D8               	bcf	status,0,c
 15709  0030E2  3239               	rrcf	??i1_CANsendMessage+3,f,c
 15710  0030E4  3238               	rrcf	??i1_CANsendMessage+2,f,c
 15711  0030E6  3237               	rrcf	??i1_CANsendMessage+1,f,c
 15712  0030E8  3236               	rrcf	??i1_CANsendMessage,f,c
 15713  0030EA                     i1u646_20:
 15714  0030EA  2EE8               	decfsz	wreg,f,c
 15715  0030EC  D7F9               	goto	i1u646_25
 15716  0030EE  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15717  0030F2  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15718  0030F6  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15719  0030FA  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15720                           
 15721                           ; BSR set to: 15
 15722                           ;inc\CANlib.h: 491: tamp = tamp & 0x000000FF;
 15723  0030FE  503A               	movf	i1CANsendMessage@tamp,w,c
 15724  003100  6E3A               	movwf	i1CANsendMessage@tamp,c
 15725  003102  6A3B               	clrf	i1CANsendMessage@tamp+1,c
 15726  003104  6A3C               	clrf	i1CANsendMessage@tamp+2,c
 15727  003106  6A3D               	clrf	i1CANsendMessage@tamp+3,c
 15728                           
 15729                           ; BSR set to: 15
 15730                           ;inc\CANlib.h: 492: TXB2SIDH = (unsigned char) tamp;
 15731  003108  C03A  FF21         	movff	i1CANsendMessage@tamp,3873	;volatile
 15732                           
 15733                           ; BSR set to: 15
 15734                           ;inc\CANlib.h: 494: tamp = identifier & 0x00000007;
 15735  00310C  0E07               	movlw	7
 15736  00310E  142E               	andwf	i1CANsendMessage@identifier,w,c
 15737  003110  6E3A               	movwf	i1CANsendMessage@tamp,c
 15738  003112  0E00               	movlw	0
 15739  003114  142F               	andwf	i1CANsendMessage@identifier+1,w,c
 15740  003116  6E3B               	movwf	i1CANsendMessage@tamp+1,c
 15741  003118  0E00               	movlw	0
 15742  00311A  1430               	andwf	i1CANsendMessage@identifier+2,w,c
 15743  00311C  6E3C               	movwf	i1CANsendMessage@tamp+2,c
 15744  00311E  0E00               	movlw	0
 15745  003120  1431               	andwf	i1CANsendMessage@identifier+3,w,c
 15746  003122  6E3D               	movwf	i1CANsendMessage@tamp+3,c
 15747                           
 15748                           ; BSR set to: 15
 15749                           ;inc\CANlib.h: 495: tamp = tamp << 5;
 15750  003124  C03A  F036         	movff	i1CANsendMessage@tamp,??i1_CANsendMessage
 15751  003128  C03B  F037         	movff	i1CANsendMessage@tamp+1,??i1_CANsendMessage+1
 15752  00312C  C03C  F038         	movff	i1CANsendMessage@tamp+2,??i1_CANsendMessage+2
 15753  003130  C03D  F039         	movff	i1CANsendMessage@tamp+3,??i1_CANsendMessage+3
 15754  003134  0E05               	movlw	5
 15755  003136                     i1u647_25:
 15756  003136  90D8               	bcf	status,0,c
 15757  003138  3636               	rlcf	??i1_CANsendMessage,f,c
 15758  00313A  3637               	rlcf	??i1_CANsendMessage+1,f,c
 15759  00313C  3638               	rlcf	??i1_CANsendMessage+2,f,c
 15760  00313E  3639               	rlcf	??i1_CANsendMessage+3,f,c
 15761  003140  2EE8               	decfsz	wreg,f,c
 15762  003142  D7F9               	goto	i1u647_25
 15763  003144  C036  F03A         	movff	??i1_CANsendMessage,i1CANsendMessage@tamp
 15764  003148  C037  F03B         	movff	??i1_CANsendMessage+1,i1CANsendMessage@tamp+1
 15765  00314C  C038  F03C         	movff	??i1_CANsendMessage+2,i1CANsendMessage@tamp+2
 15766  003150  C039  F03D         	movff	??i1_CANsendMessage+3,i1CANsendMessage@tamp+3
 15767                           
 15768                           ; BSR set to: 15
 15769                           ;inc\CANlib.h: 496: TXB2SIDL = TXB2SIDL & 0b00011111;
 15770  003154  010F               	movlb	15	; () banked
 15771  003156  5122               	movf	34,w,b	;volatile
 15772  003158  0B1F               	andlw	31
 15773  00315A  010F               	movlb	15	; () banked
 15774  00315C  6F22               	movwf	34,b	;volatile
 15775                           
 15776                           ; BSR set to: 15
 15777                           ;inc\CANlib.h: 497: TXB2SIDL = (unsigned char) tamp;
 15778  00315E  C03A  FF22         	movff	i1CANsendMessage@tamp,3874	;volatile
 15779  003162  D000               	goto	i1l5409
 15780  003164                     i1l5409:
 15781                           
 15782                           ; BSR set to: 15
 15783                           ;inc\CANlib.h: 498: }
 15784                           ;inc\CANlib.h: 500: if (0b00000001 & flags)
 15785  003164  A035               	btfss	i1CANsendMessage@flags,0,c
 15786  003166  D003               	goto	i1l400
 15787                           
 15788                           ; BSR set to: 15
 15789                           ;inc\CANlib.h: 501: TXB2CONbits.TXPRI0 = 0x01;
 15790  003168  010F               	movlb	15	; () banked
 15791  00316A  8120               	bsf	32,0,b	;volatile
 15792  00316C  D002               	goto	i1l401
 15793  00316E                     i1l400:
 15794                           
 15795                           ; BSR set to: 15
 15796                           ;inc\CANlib.h: 502: else
 15797                           ;inc\CANlib.h: 503: TXB2CONbits.TXPRI0 = 0x00;
 15798  00316E  010F               	movlb	15	; () banked
 15799  003170  9120               	bcf	32,0,b	;volatile
 15800  003172                     i1l401:
 15801                           
 15802                           ; BSR set to: 15
 15803                           ;inc\CANlib.h: 504: if (0b00000010 & flags)
 15804  003172  A235               	btfss	i1CANsendMessage@flags,1,c
 15805  003174  D003               	goto	i1l402
 15806                           
 15807                           ; BSR set to: 15
 15808                           ;inc\CANlib.h: 505: TXB2CONbits.TXPRI1 = 0x01;
 15809  003176  010F               	movlb	15	; () banked
 15810  003178  8320               	bsf	32,1,b	;volatile
 15811  00317A  D003               	goto	i1l5415
 15812  00317C                     i1l402:
 15813                           
 15814                           ; BSR set to: 15
 15815                           ;inc\CANlib.h: 506: else
 15816                           ;inc\CANlib.h: 507: TXB2CONbits.TXPRI1 = 0x00;
 15817  00317C  010F               	movlb	15	; () banked
 15818  00317E  9320               	bcf	32,1,b	;volatile
 15819  003180  D000               	goto	i1l5415
 15820  003182                     i1l5415:
 15821                           
 15822                           ; BSR set to: 15
 15823                           ;inc\CANlib.h: 509: TXB2D0 = data[0];
 15824  003182  C032  FFD9         	movff	i1CANsendMessage@data,fsr2l
 15825  003186  C033  FFDA         	movff	i1CANsendMessage@data+1,fsr2h
 15826  00318A  50DF               	movf	indf2,w,c
 15827  00318C  010F               	movlb	15	; () banked
 15828  00318E  6F26               	movwf	38,b	;volatile
 15829                           
 15830                           ; BSR set to: 15
 15831                           ;inc\CANlib.h: 510: TXB2D1 = data[1];
 15832  003190  EE20 F001          	lfsr	2,1
 15833  003194  5032               	movf	i1CANsendMessage@data,w,c
 15834  003196  26D9               	addwf	fsr2l,f,c
 15835  003198  5033               	movf	i1CANsendMessage@data+1,w,c
 15836  00319A  22DA               	addwfc	fsr2h,f,c
 15837  00319C  50DF               	movf	indf2,w,c
 15838  00319E  010F               	movlb	15	; () banked
 15839  0031A0  6F27               	movwf	39,b	;volatile
 15840                           
 15841                           ; BSR set to: 15
 15842                           ;inc\CANlib.h: 511: TXB2D2 = data[2];
 15843  0031A2  EE20 F002          	lfsr	2,2
 15844  0031A6  5032               	movf	i1CANsendMessage@data,w,c
 15845  0031A8  26D9               	addwf	fsr2l,f,c
 15846  0031AA  5033               	movf	i1CANsendMessage@data+1,w,c
 15847  0031AC  22DA               	addwfc	fsr2h,f,c
 15848  0031AE  50DF               	movf	indf2,w,c
 15849  0031B0  010F               	movlb	15	; () banked
 15850  0031B2  6F28               	movwf	40,b	;volatile
 15851                           
 15852                           ; BSR set to: 15
 15853                           ;inc\CANlib.h: 512: TXB2D3 = data[3];
 15854  0031B4  EE20 F003          	lfsr	2,3
 15855  0031B8  5032               	movf	i1CANsendMessage@data,w,c
 15856  0031BA  26D9               	addwf	fsr2l,f,c
 15857  0031BC  5033               	movf	i1CANsendMessage@data+1,w,c
 15858  0031BE  22DA               	addwfc	fsr2h,f,c
 15859  0031C0  50DF               	movf	indf2,w,c
 15860  0031C2  010F               	movlb	15	; () banked
 15861  0031C4  6F29               	movwf	41,b	;volatile
 15862                           
 15863                           ; BSR set to: 15
 15864                           ;inc\CANlib.h: 513: TXB2D4 = data[4];
 15865  0031C6  EE20 F004          	lfsr	2,4
 15866  0031CA  5032               	movf	i1CANsendMessage@data,w,c
 15867  0031CC  26D9               	addwf	fsr2l,f,c
 15868  0031CE  5033               	movf	i1CANsendMessage@data+1,w,c
 15869  0031D0  22DA               	addwfc	fsr2h,f,c
 15870  0031D2  50DF               	movf	indf2,w,c
 15871  0031D4  010F               	movlb	15	; () banked
 15872  0031D6  6F2A               	movwf	42,b	;volatile
 15873                           
 15874                           ; BSR set to: 15
 15875                           ;inc\CANlib.h: 514: TXB2D5 = data[5];
 15876  0031D8  EE20 F005          	lfsr	2,5
 15877  0031DC  5032               	movf	i1CANsendMessage@data,w,c
 15878  0031DE  26D9               	addwf	fsr2l,f,c
 15879  0031E0  5033               	movf	i1CANsendMessage@data+1,w,c
 15880  0031E2  22DA               	addwfc	fsr2h,f,c
 15881  0031E4  50DF               	movf	indf2,w,c
 15882  0031E6  010F               	movlb	15	; () banked
 15883  0031E8  6F2B               	movwf	43,b	;volatile
 15884                           
 15885                           ; BSR set to: 15
 15886                           ;inc\CANlib.h: 515: TXB2D6 = data[6];
 15887  0031EA  EE20 F006          	lfsr	2,6
 15888  0031EE  5032               	movf	i1CANsendMessage@data,w,c
 15889  0031F0  26D9               	addwf	fsr2l,f,c
 15890  0031F2  5033               	movf	i1CANsendMessage@data+1,w,c
 15891  0031F4  22DA               	addwfc	fsr2h,f,c
 15892  0031F6  50DF               	movf	indf2,w,c
 15893  0031F8  010F               	movlb	15	; () banked
 15894  0031FA  6F2C               	movwf	44,b	;volatile
 15895                           
 15896                           ; BSR set to: 15
 15897                           ;inc\CANlib.h: 516: TXB2D7 = data[7];
 15898  0031FC  EE20 F007          	lfsr	2,7
 15899  003200  5032               	movf	i1CANsendMessage@data,w,c
 15900  003202  26D9               	addwf	fsr2l,f,c
 15901  003204  5033               	movf	i1CANsendMessage@data+1,w,c
 15902  003206  22DA               	addwfc	fsr2h,f,c
 15903  003208  50DF               	movf	indf2,w,c
 15904  00320A  010F               	movlb	15	; () banked
 15905  00320C  6F2D               	movwf	45,b	;volatile
 15906                           
 15907                           ; BSR set to: 15
 15908                           ;inc\CANlib.h: 518: TXB2CONbits.TXREQ = 0x01;
 15909  00320E  010F               	movlb	15	; () banked
 15910  003210  8720               	bsf	32,3,b	;volatile
 15911                           
 15912                           ; BSR set to: 15
 15913                           ;inc\CANlib.h: 520: return;
 15914  003212  0012               	return	
 15915                           
 15916                           ; BSR set to: 15
 15917                           
 15918                           ; BSR set to: 15
 15919  003214  0012               	return		;funcret
 15920  003216                     __end_ofi1_CANsendMessage:
 15921                           	opt stack 0
 15922                           pclatu	equ	0xFFB
 15923                           pclath	equ	0xFFA
 15924                           tblptru	equ	0xFF8
 15925                           tblptrh	equ	0xFF7
 15926                           tblptrl	equ	0xFF6
 15927                           tablat	equ	0xFF5
 15928                           prodh	equ	0xFF4
 15929                           prodl	equ	0xFF3
 15930                           intcon	equ	0xFF2
 15931                           intcon2	equ	0xFF1
 15932                           postinc0	equ	0xFEE
 15933                           fsr0h	equ	0xFEA
 15934                           fsr0l	equ	0xFE9
 15935                           wreg	equ	0xFE8
 15936                           fsr1h	equ	0xFE2
 15937                           fsr1l	equ	0xFE1
 15938                           bsr	equ	0xFE0
 15939                           indf2	equ	0xFDF
 15940                           postinc2	equ	0xFDE
 15941                           postdec2	equ	0xFDD
 15942                           plusw2	equ	0xFDB
 15943                           fsr2h	equ	0xFDA
 15944                           fsr2l	equ	0xFD9
 15945                           status	equ	0xFD8
 15946                           
 15947 ;; *************** function i1_CANisTxReady *****************
 15948 ;; Defined at:
 15949 ;;		line 1154 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 15950 ;; Parameters:    Size  Location     Type
 15951 ;;		None
 15952 ;; Auto vars:     Size  Location     Type
 15953 ;;		None
 15954 ;; Return value:  Size  Location     Type
 15955 ;;                  1    wreg      unsigned char 
 15956 ;; Registers used:
 15957 ;;		wreg, status,2
 15958 ;; Tracked objects:
 15959 ;;		On entry : 0/0
 15960 ;;		On exit  : 0/0
 15961 ;;		Unchanged: 0/0
 15962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15964 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15966 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15967 ;;Total ram usage:        1 bytes
 15968 ;; Hardware stack levels used:    1
 15969 ;; Hardware stack levels required when called:    2
 15970 ;; This function calls:
 15971 ;;		Nothing
 15972 ;; This function is called by:
 15973 ;;		i1_can_send
 15974 ;; This function uses a non-reentrant model
 15975 ;;
 15976                           
 15977                           	psect	text42
 15978  00657C                     __ptext42:
 15979                           	opt stack 0
 15980  00657C                     i1_CANisTxReady:
 15981                           	opt stack 19
 15982                           
 15983                           ;inc\CANlib.h: 1156: return (!TXB0CONbits.TXREQ || !TXB1CONbits.TXREQ || !TXB2CONbits.TX
      +                          REQ);
 15984                           
 15985                           ; BSR set to: 15
 15986                           ;incstack = 0
 15987  00657C  0E01               	movlw	1
 15988  00657E  6E2E               	movwf	i1_CANisTxReady$2841,c
 15989  006580  010F               	movlb	15	; () banked
 15990  006582  A740               	btfss	64,3,b	;volatile
 15991  006584  D008               	goto	i1l554
 15992                           
 15993                           ; BSR set to: 15
 15994  006586  010F               	movlb	15	; () banked
 15995  006588  A730               	btfss	48,3,b	;volatile
 15996  00658A  D005               	goto	i1l554
 15997                           
 15998                           ; BSR set to: 15
 15999  00658C  010F               	movlb	15	; () banked
 16000  00658E  A720               	btfss	32,3,b	;volatile
 16001  006590  D002               	goto	i1l554
 16002                           
 16003                           ; BSR set to: 15
 16004  006592  0E00               	movlw	0
 16005  006594  6E2E               	movwf	i1_CANisTxReady$2841,c
 16006  006596                     i1l554:
 16007                           
 16008                           ; BSR set to: 15
 16009  006596  502E               	movf	i1_CANisTxReady$2841,w,c
 16010  006598  0012               	return	
 16011                           
 16012                           ; BSR set to: 15
 16013                           
 16014                           ; BSR set to: 15
 16015  00659A  0012               	return		;funcret
 16016  00659C                     __end_ofi1_CANisTxReady:
 16017                           	opt stack 0
 16018                           pclatu	equ	0xFFB
 16019                           pclath	equ	0xFFA
 16020                           tblptru	equ	0xFF8
 16021                           tblptrh	equ	0xFF7
 16022                           tblptrl	equ	0xFF6
 16023                           tablat	equ	0xFF5
 16024                           prodh	equ	0xFF4
 16025                           prodl	equ	0xFF3
 16026                           intcon	equ	0xFF2
 16027                           intcon2	equ	0xFF1
 16028                           postinc0	equ	0xFEE
 16029                           fsr0h	equ	0xFEA
 16030                           fsr0l	equ	0xFE9
 16031                           wreg	equ	0xFE8
 16032                           fsr1h	equ	0xFE2
 16033                           fsr1l	equ	0xFE1
 16034                           bsr	equ	0xFE0
 16035                           indf2	equ	0xFDF
 16036                           postinc2	equ	0xFDE
 16037                           postdec2	equ	0xFDD
 16038                           plusw2	equ	0xFDB
 16039                           fsr2h	equ	0xFDA
 16040                           fsr2l	equ	0xFD9
 16041                           status	equ	0xFD8
 16042                           
 16043 ;; *************** function _CANreceiveMessage *****************
 16044 ;; Defined at:
 16045 ;;		line 528 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 16046 ;; Parameters:    Size  Location     Type
 16047 ;;  msg             2    0[COMRAM] PTR struct .
 16048 ;;		 -> msg(15), 
 16049 ;; Auto vars:     Size  Location     Type
 16050 ;;  tamp            1   11[COMRAM] unsigned char 
 16051 ;;  error           1   10[COMRAM] unsigned char 
 16052 ;; Return value:  Size  Location     Type
 16053 ;;                  1    wreg      unsigned char 
 16054 ;; Registers used:
 16055 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16056 ;; Tracked objects:
 16057 ;;		On entry : 0/0
 16058 ;;		On exit  : 0/0
 16059 ;;		Unchanged: 0/0
 16060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16061 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16062 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16063 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16064 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16065 ;;Total ram usage:       12 bytes
 16066 ;; Hardware stack levels used:    1
 16067 ;; Hardware stack levels required when called:    2
 16068 ;; This function calls:
 16069 ;;		Nothing
 16070 ;; This function is called by:
 16071 ;;		_ISR_Bassa
 16072 ;; This function uses a non-reentrant model
 16073 ;;
 16074                           
 16075                           	psect	text43
 16076  0037C4                     __ptext43:
 16077                           	opt stack 0
 16078  0037C4                     _CANreceiveMessage:
 16079                           	opt stack 20
 16080                           
 16081                           ;inc\CANlib.h: 530: BYTE tamp;
 16082                           ;inc\CANlib.h: 531: BYTE error = 0;
 16083                           
 16084                           ; BSR set to: 15
 16085                           ;incstack = 0
 16086  0037C4  0E00               	movlw	0
 16087  0037C6  6E38               	movwf	CANreceiveMessage@error,c
 16088                           
 16089                           ;inc\CANlib.h: 533: if (COMSTATbits.RXB0OVFL == 0x01)
 16090  0037C8  AE74               	btfss	3956,7,c	;volatile
 16091  0037CA  D002               	goto	i1l5459
 16092                           
 16093                           ;inc\CANlib.h: 534: error |= CAN_RX_BUFFER_1_OVFL;
 16094  0037CC  8038               	bsf	CANreceiveMessage@error,0,c
 16095  0037CE  D000               	goto	i1l5459
 16096  0037D0                     i1l5459:
 16097                           
 16098                           ;inc\CANlib.h: 536: if (COMSTATbits.RXB1OVFL == 0x01)
 16099  0037D0  AC74               	btfss	3956,6,c	;volatile
 16100  0037D2  D002               	goto	i1l5463
 16101                           
 16102                           ;inc\CANlib.h: 537: error |= CAN_RX_BUFFER_2_OVFL;
 16103  0037D4  8238               	bsf	CANreceiveMessage@error,1,c
 16104  0037D6  D000               	goto	i1l5463
 16105  0037D8                     i1l5463:
 16106                           
 16107                           ;inc\CANlib.h: 540: if (RXB1CONbits.RXFUL ==0x01)
 16108  0037D8  010F               	movlb	15	; () banked
 16109  0037DA  AF50               	btfss	80,7,b	;volatile
 16110  0037DC  D149               	goto	i1l408
 16111                           
 16112                           ; BSR set to: 15
 16113                           ;inc\CANlib.h: 541: {
 16114                           ;inc\CANlib.h: 542: msg->identifier = 0;
 16115  0037DE  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16116  0037E2  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16117  0037E6  6ADE               	clrf	postinc2,c
 16118  0037E8  6ADE               	clrf	postinc2,c
 16119  0037EA  6ADE               	clrf	postinc2,c
 16120  0037EC  6ADD               	clrf	postdec2,c
 16121                           
 16122                           ; BSR set to: 15
 16123                           ;inc\CANlib.h: 543: msg->data[0] =RXB1D0;
 16124  0037EE  EE20 F004          	lfsr	2,4
 16125  0037F2  502E               	movf	CANreceiveMessage@msg,w,c
 16126  0037F4  26D9               	addwf	fsr2l,f,c
 16127  0037F6  502F               	movf	CANreceiveMessage@msg+1,w,c
 16128  0037F8  22DA               	addwfc	fsr2h,f,c
 16129  0037FA  CF56 FFDF          	movff	3926,indf2	;volatile
 16130                           
 16131                           ; BSR set to: 15
 16132                           ;inc\CANlib.h: 544: msg->data[1] =RXB1D1;
 16133  0037FE  EE20 F005          	lfsr	2,5
 16134  003802  502E               	movf	CANreceiveMessage@msg,w,c
 16135  003804  26D9               	addwf	fsr2l,f,c
 16136  003806  502F               	movf	CANreceiveMessage@msg+1,w,c
 16137  003808  22DA               	addwfc	fsr2h,f,c
 16138  00380A  CF57 FFDF          	movff	3927,indf2	;volatile
 16139                           
 16140                           ; BSR set to: 15
 16141                           ;inc\CANlib.h: 545: msg->data[2] =RXB1D2;
 16142  00380E  EE20 F006          	lfsr	2,6
 16143  003812  502E               	movf	CANreceiveMessage@msg,w,c
 16144  003814  26D9               	addwf	fsr2l,f,c
 16145  003816  502F               	movf	CANreceiveMessage@msg+1,w,c
 16146  003818  22DA               	addwfc	fsr2h,f,c
 16147  00381A  CF58 FFDF          	movff	3928,indf2	;volatile
 16148                           
 16149                           ; BSR set to: 15
 16150                           ;inc\CANlib.h: 546: msg->data[3] =RXB1D3;
 16151  00381E  EE20 F007          	lfsr	2,7
 16152  003822  502E               	movf	CANreceiveMessage@msg,w,c
 16153  003824  26D9               	addwf	fsr2l,f,c
 16154  003826  502F               	movf	CANreceiveMessage@msg+1,w,c
 16155  003828  22DA               	addwfc	fsr2h,f,c
 16156  00382A  CF59 FFDF          	movff	3929,indf2	;volatile
 16157                           
 16158                           ; BSR set to: 15
 16159                           ;inc\CANlib.h: 547: msg->data[4] =RXB1D4;
 16160  00382E  EE20 F008          	lfsr	2,8
 16161  003832  502E               	movf	CANreceiveMessage@msg,w,c
 16162  003834  26D9               	addwf	fsr2l,f,c
 16163  003836  502F               	movf	CANreceiveMessage@msg+1,w,c
 16164  003838  22DA               	addwfc	fsr2h,f,c
 16165  00383A  CF5A FFDF          	movff	3930,indf2	;volatile
 16166                           
 16167                           ; BSR set to: 15
 16168                           ;inc\CANlib.h: 548: msg->data[5] =RXB1D5;
 16169  00383E  EE20 F009          	lfsr	2,9
 16170  003842  502E               	movf	CANreceiveMessage@msg,w,c
 16171  003844  26D9               	addwf	fsr2l,f,c
 16172  003846  502F               	movf	CANreceiveMessage@msg+1,w,c
 16173  003848  22DA               	addwfc	fsr2h,f,c
 16174  00384A  CF5B FFDF          	movff	3931,indf2	;volatile
 16175                           
 16176                           ; BSR set to: 15
 16177                           ;inc\CANlib.h: 549: msg->data[6] =RXB1D6;
 16178  00384E  EE20 F00A          	lfsr	2,10
 16179  003852  502E               	movf	CANreceiveMessage@msg,w,c
 16180  003854  26D9               	addwf	fsr2l,f,c
 16181  003856  502F               	movf	CANreceiveMessage@msg+1,w,c
 16182  003858  22DA               	addwfc	fsr2h,f,c
 16183  00385A  CF5C FFDF          	movff	3932,indf2	;volatile
 16184                           
 16185                           ; BSR set to: 15
 16186                           ;inc\CANlib.h: 550: msg->data[7] =RXB1D7;
 16187  00385E  EE20 F00B          	lfsr	2,11
 16188  003862  502E               	movf	CANreceiveMessage@msg,w,c
 16189  003864  26D9               	addwf	fsr2l,f,c
 16190  003866  502F               	movf	CANreceiveMessage@msg+1,w,c
 16191  003868  22DA               	addwfc	fsr2h,f,c
 16192  00386A  CF5D FFDF          	movff	3933,indf2	;volatile
 16193                           
 16194                           ; BSR set to: 15
 16195                           ;inc\CANlib.h: 552: msg->RTR = RXB1DLCbits.RXRTR;
 16196  00386E  EE20 F00E          	lfsr	2,14
 16197  003872  502E               	movf	CANreceiveMessage@msg,w,c
 16198  003874  26D9               	addwf	fsr2l,f,c
 16199  003876  502F               	movf	CANreceiveMessage@msg+1,w,c
 16200  003878  22DA               	addwfc	fsr2h,f,c
 16201  00387A  010F               	movlb	15	; () banked
 16202  00387C  AD55               	btfss	85,6,b	;volatile
 16203  00387E  D002               	goto	i1u656_20
 16204  003880  0E01               	movlw	1
 16205  003882  D001               	goto	i1u656_26
 16206  003884                     i1u656_20:
 16207  003884  0E00               	movlw	0
 16208  003886                     i1u656_26:
 16209  003886  6EDF               	movwf	indf2,c
 16210                           
 16211                           ; BSR set to: 15
 16212                           ;inc\CANlib.h: 554: msg->length = RXB1DLC & 0x0F;
 16213  003888  EE20 F00D          	lfsr	2,13
 16214  00388C  502E               	movf	CANreceiveMessage@msg,w,c
 16215  00388E  26D9               	addwf	fsr2l,f,c
 16216  003890  502F               	movf	CANreceiveMessage@msg+1,w,c
 16217  003892  22DA               	addwfc	fsr2h,f,c
 16218  003894  010F               	movlb	15	; () banked
 16219  003896  5155               	movf	85,w,b	;volatile
 16220  003898  0B0F               	andlw	15
 16221  00389A  6EDF               	movwf	indf2,c
 16222                           
 16223                           ; BSR set to: 15
 16224                           ;inc\CANlib.h: 556: msg->type = RXB1SIDLbits.EXID;
 16225  00389C  EE20 F00C          	lfsr	2,12
 16226  0038A0  502E               	movf	CANreceiveMessage@msg,w,c
 16227  0038A2  26D9               	addwf	fsr2l,f,c
 16228  0038A4  502F               	movf	CANreceiveMessage@msg+1,w,c
 16229  0038A6  22DA               	addwfc	fsr2h,f,c
 16230  0038A8  010F               	movlb	15	; () banked
 16231  0038AA  A752               	btfss	82,3,b	;volatile
 16232  0038AC  D002               	goto	i1u657_20
 16233  0038AE  0E01               	movlw	1
 16234  0038B0  D001               	goto	i1u657_26
 16235  0038B2                     i1u657_20:
 16236  0038B2  0E00               	movlw	0
 16237  0038B4                     i1u657_26:
 16238  0038B4  6EDF               	movwf	indf2,c
 16239                           
 16240                           ; BSR set to: 15
 16241                           ;inc\CANlib.h: 558: if (RXB1SIDLbits.EXID == 0)
 16242  0038B6  010F               	movlb	15	; () banked
 16243  0038B8  B752               	btfsc	82,3,b	;volatile
 16244  0038BA  D044               	goto	i1l5497
 16245                           
 16246                           ; BSR set to: 15
 16247                           ;inc\CANlib.h: 559: {
 16248                           ;inc\CANlib.h: 560: msg->identifier = ((unsigned long)RXB1SIDH)<< 3;
 16249  0038BC  CF51 F030          	movff	3921,??_CANreceiveMessage	;volatile
 16250  0038C0  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16251  0038C2  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16252  0038C4  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16253  0038C6  0E03               	movlw	3
 16254  0038C8                     i1u659_25:
 16255  0038C8  90D8               	bcf	status,0,c
 16256  0038CA  3630               	rlcf	??_CANreceiveMessage,f,c
 16257  0038CC  3631               	rlcf	??_CANreceiveMessage+1,f,c
 16258  0038CE  3632               	rlcf	??_CANreceiveMessage+2,f,c
 16259  0038D0  3633               	rlcf	??_CANreceiveMessage+3,f,c
 16260  0038D2  2EE8               	decfsz	wreg,f,c
 16261  0038D4  D7F9               	goto	i1u659_25
 16262  0038D6  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16263  0038DA  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16264  0038DE  C030  FFDE         	movff	??_CANreceiveMessage,postinc2
 16265  0038E2  C031  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 16266  0038E6  C032  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 16267  0038EA  C033  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 16268                           
 16269                           ; BSR set to: 15
 16270                           ;inc\CANlib.h: 561: tamp = (RXB1SIDL >> 5 ) & 0x07;
 16271  0038EE  010F               	movlb	15	; () banked
 16272  0038F0  3952               	swapf	82,w,b	;volatile
 16273  0038F2  42E8               	rrncf	wreg,f,c
 16274  0038F4  0B07               	andlw	7
 16275  0038F6  0B07               	andlw	7
 16276  0038F8  6E39               	movwf	CANreceiveMessage@tamp,c
 16277                           
 16278                           ; BSR set to: 15
 16279                           ;inc\CANlib.h: 562: msg->identifier = msg->identifier + tamp;
 16280  0038FA  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16281  0038FE  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16282  003902  CFDE F030          	movff	postinc2,??_CANreceiveMessage
 16283  003906  CFDE F031          	movff	postinc2,??_CANreceiveMessage+1
 16284  00390A  CFDE F032          	movff	postinc2,??_CANreceiveMessage+2
 16285  00390E  CFDE F033          	movff	postinc2,??_CANreceiveMessage+3
 16286  003912  5039               	movf	CANreceiveMessage@tamp,w,c
 16287  003914  2430               	addwf	??_CANreceiveMessage,w,c
 16288  003916  6E34               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 16289  003918  0E00               	movlw	0
 16290  00391A  2031               	addwfc	??_CANreceiveMessage+1,w,c
 16291  00391C  6E35               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 16292  00391E  0E00               	movlw	0
 16293  003920  2032               	addwfc	??_CANreceiveMessage+2,w,c
 16294  003922  6E36               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 16295  003924  0E00               	movlw	0
 16296  003926  2033               	addwfc	??_CANreceiveMessage+3,w,c
 16297  003928  6E37               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 16298  00392A  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16299  00392E  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16300  003932  C034  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 16301  003936  C035  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 16302  00393A  C036  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 16303  00393E  C037  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 16304                           
 16305                           ;inc\CANlib.h: 563: }
 16306  003942  D093               	goto	i1l5523
 16307  003944                     i1l5497:
 16308                           
 16309                           ; BSR set to: 15
 16310                           ;inc\CANlib.h: 564: else
 16311                           ;inc\CANlib.h: 565: {
 16312                           ;inc\CANlib.h: 566: msg->identifier = (unsigned long) RXB1EIDL;
 16313  003944  CF54 F030          	movff	3924,??_CANreceiveMessage	;volatile
 16314  003948  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16315  00394A  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16316  00394C  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16317  00394E  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16318  003952  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16319  003956  C030  FFDE         	movff	??_CANreceiveMessage,postinc2
 16320  00395A  C031  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 16321  00395E  C032  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 16322  003962  C033  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 16323                           
 16324                           ; BSR set to: 15
 16325                           ;inc\CANlib.h: 567: msg->identifier += ((unsigned long) RXB1EIDH) << 8;
 16326  003966  CF53 F030          	movff	3923,??_CANreceiveMessage	;volatile
 16327  00396A  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16328  00396C  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16329  00396E  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16330  003970  C032  F033         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 16331  003974  C031  F032         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 16332  003978  C030  F031         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 16333  00397C  6A30               	clrf	??_CANreceiveMessage,c
 16334  00397E  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16335  003982  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16336  003986  5030               	movf	??_CANreceiveMessage,w,c
 16337  003988  26DE               	addwf	postinc2,f,c
 16338  00398A  5031               	movf	??_CANreceiveMessage+1,w,c
 16339  00398C  22DE               	addwfc	postinc2,f,c
 16340  00398E  5032               	movf	??_CANreceiveMessage+2,w,c
 16341  003990  22DE               	addwfc	postinc2,f,c
 16342  003992  5033               	movf	??_CANreceiveMessage+3,w,c
 16343  003994  22DE               	addwfc	postinc2,f,c
 16344                           
 16345                           ; BSR set to: 15
 16346                           ;inc\CANlib.h: 569: if (RXB1SIDLbits.EID16)
 16347  003996  010F               	movlb	15	; () banked
 16348  003998  A152               	btfss	82,0,b	;volatile
 16349  00399A  D00D               	goto	i1l5505
 16350                           
 16351                           ; BSR set to: 15
 16352                           ;inc\CANlib.h: 570: msg->identifier |= 0x00010000;
 16353  00399C  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16354  0039A0  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16355  0039A4  0E00               	movlw	0
 16356  0039A6  12DE               	iorwf	postinc2,f,c
 16357  0039A8  0E00               	movlw	0
 16358  0039AA  12DE               	iorwf	postinc2,f,c
 16359  0039AC  0E01               	movlw	1
 16360  0039AE  12DE               	iorwf	postinc2,f,c
 16361  0039B0  0E00               	movlw	0
 16362  0039B2  12DE               	iorwf	postinc2,f,c
 16363  0039B4  D000               	goto	i1l5505
 16364  0039B6                     i1l5505:
 16365                           
 16366                           ; BSR set to: 15
 16367                           ;inc\CANlib.h: 571: if (RXB1SIDLbits.EID17)
 16368  0039B6  010F               	movlb	15	; () banked
 16369  0039B8  A352               	btfss	82,1,b	;volatile
 16370  0039BA  D00D               	goto	i1l5509
 16371                           
 16372                           ; BSR set to: 15
 16373                           ;inc\CANlib.h: 572: msg->identifier |= 0x00020000;
 16374  0039BC  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16375  0039C0  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16376  0039C4  0E00               	movlw	0
 16377  0039C6  12DE               	iorwf	postinc2,f,c
 16378  0039C8  0E00               	movlw	0
 16379  0039CA  12DE               	iorwf	postinc2,f,c
 16380  0039CC  0E02               	movlw	2
 16381  0039CE  12DE               	iorwf	postinc2,f,c
 16382  0039D0  0E00               	movlw	0
 16383  0039D2  12DE               	iorwf	postinc2,f,c
 16384  0039D4  D000               	goto	i1l5509
 16385  0039D6                     i1l5509:
 16386                           
 16387                           ; BSR set to: 15
 16388                           ;inc\CANlib.h: 573: if (RXB1SIDLbits.SID0)
 16389  0039D6  010F               	movlb	15	; () banked
 16390  0039D8  AB52               	btfss	82,5,b	;volatile
 16391  0039DA  D00D               	goto	i1l5513
 16392                           
 16393                           ; BSR set to: 15
 16394                           ;inc\CANlib.h: 574: msg->identifier |= 0x00040000;
 16395  0039DC  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16396  0039E0  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16397  0039E4  0E00               	movlw	0
 16398  0039E6  12DE               	iorwf	postinc2,f,c
 16399  0039E8  0E00               	movlw	0
 16400  0039EA  12DE               	iorwf	postinc2,f,c
 16401  0039EC  0E04               	movlw	4
 16402  0039EE  12DE               	iorwf	postinc2,f,c
 16403  0039F0  0E00               	movlw	0
 16404  0039F2  12DE               	iorwf	postinc2,f,c
 16405  0039F4  D000               	goto	i1l5513
 16406  0039F6                     i1l5513:
 16407                           
 16408                           ; BSR set to: 15
 16409                           ;inc\CANlib.h: 575: if (RXB1SIDLbits.SID1)
 16410  0039F6  010F               	movlb	15	; () banked
 16411  0039F8  AD52               	btfss	82,6,b	;volatile
 16412  0039FA  D00D               	goto	i1l5517
 16413                           
 16414                           ; BSR set to: 15
 16415                           ;inc\CANlib.h: 576: msg->identifier |= 0x00080000;
 16416  0039FC  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16417  003A00  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16418  003A04  0E00               	movlw	0
 16419  003A06  12DE               	iorwf	postinc2,f,c
 16420  003A08  0E00               	movlw	0
 16421  003A0A  12DE               	iorwf	postinc2,f,c
 16422  003A0C  0E08               	movlw	8
 16423  003A0E  12DE               	iorwf	postinc2,f,c
 16424  003A10  0E00               	movlw	0
 16425  003A12  12DE               	iorwf	postinc2,f,c
 16426  003A14  D000               	goto	i1l5517
 16427  003A16                     i1l5517:
 16428                           
 16429                           ; BSR set to: 15
 16430                           ;inc\CANlib.h: 577: if (RXB1SIDLbits.SID2)
 16431  003A16  010F               	movlb	15	; () banked
 16432  003A18  AF52               	btfss	82,7,b	;volatile
 16433  003A1A  D00D               	goto	i1l5521
 16434                           
 16435                           ; BSR set to: 15
 16436                           ;inc\CANlib.h: 578: msg->identifier |= 0x00100000;
 16437  003A1C  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16438  003A20  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16439  003A24  0E00               	movlw	0
 16440  003A26  12DE               	iorwf	postinc2,f,c
 16441  003A28  0E00               	movlw	0
 16442  003A2A  12DE               	iorwf	postinc2,f,c
 16443  003A2C  0E10               	movlw	16
 16444  003A2E  12DE               	iorwf	postinc2,f,c
 16445  003A30  0E00               	movlw	0
 16446  003A32  12DE               	iorwf	postinc2,f,c
 16447  003A34  D000               	goto	i1l5521
 16448  003A36                     i1l5521:
 16449                           
 16450                           ; BSR set to: 15
 16451                           ;inc\CANlib.h: 580: msg->identifier |= ((unsigned long) RXB1SIDH) << 21;
 16452  003A36  CF51 F030          	movff	3921,??_CANreceiveMessage	;volatile
 16453  003A3A  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16454  003A3C  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16455  003A3E  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16456  003A40  0E15               	movlw	21
 16457  003A42                     i1u665_25:
 16458  003A42  90D8               	bcf	status,0,c
 16459  003A44  3630               	rlcf	??_CANreceiveMessage,f,c
 16460  003A46  3631               	rlcf	??_CANreceiveMessage+1,f,c
 16461  003A48  3632               	rlcf	??_CANreceiveMessage+2,f,c
 16462  003A4A  3633               	rlcf	??_CANreceiveMessage+3,f,c
 16463  003A4C  2EE8               	decfsz	wreg,f,c
 16464  003A4E  D7F9               	goto	i1u665_25
 16465  003A50  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16466  003A54  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16467  003A58  5030               	movf	??_CANreceiveMessage,w,c
 16468  003A5A  12DE               	iorwf	postinc2,f,c
 16469  003A5C  5031               	movf	??_CANreceiveMessage+1,w,c
 16470  003A5E  12DE               	iorwf	postinc2,f,c
 16471  003A60  5032               	movf	??_CANreceiveMessage+2,w,c
 16472  003A62  12DE               	iorwf	postinc2,f,c
 16473  003A64  5033               	movf	??_CANreceiveMessage+3,w,c
 16474  003A66  12DE               	iorwf	postinc2,f,c
 16475  003A68  D000               	goto	i1l5523
 16476  003A6A                     i1l5523:
 16477                           
 16478                           ; BSR set to: 15
 16479                           ;inc\CANlib.h: 581: }
 16480                           ;inc\CANlib.h: 583: RXB1CONbits.RXFUL = 0x00;
 16481  003A6A  010F               	movlb	15	; () banked
 16482  003A6C  9F50               	bcf	80,7,b	;volatile
 16483                           
 16484                           ; BSR set to: 15
 16485                           ;inc\CANlib.h: 584: return (error);
 16486                           ;	Return value of _CANreceiveMessage is never used
 16487  003A6E  0012               	return	
 16488  003A70                     i1l408:
 16489                           
 16490                           ; BSR set to: 15
 16491                           ;inc\CANlib.h: 585: }
 16492                           ;inc\CANlib.h: 587: if (RXB0CONbits.RXFUL ==0x01)
 16493  003A70  AE60               	btfss	3936,7,c	;volatile
 16494  003A72  0012               	return	
 16495                           
 16496                           ; BSR set to: 15
 16497                           ;inc\CANlib.h: 588: {
 16498                           ;inc\CANlib.h: 589: msg->identifier = 0;
 16499  003A74  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16500  003A78  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16501  003A7C  6ADE               	clrf	postinc2,c
 16502  003A7E  6ADE               	clrf	postinc2,c
 16503  003A80  6ADE               	clrf	postinc2,c
 16504  003A82  6ADD               	clrf	postdec2,c
 16505                           
 16506                           ; BSR set to: 15
 16507                           ;inc\CANlib.h: 590: msg->data[0] =RXB0D0;
 16508  003A84  EE20 F004          	lfsr	2,4
 16509  003A88  502E               	movf	CANreceiveMessage@msg,w,c
 16510  003A8A  26D9               	addwf	fsr2l,f,c
 16511  003A8C  502F               	movf	CANreceiveMessage@msg+1,w,c
 16512  003A8E  22DA               	addwfc	fsr2h,f,c
 16513  003A90  CF66 FFDF          	movff	3942,indf2	;volatile
 16514                           
 16515                           ; BSR set to: 15
 16516                           ;inc\CANlib.h: 591: msg->data[1] =RXB0D1;
 16517  003A94  EE20 F005          	lfsr	2,5
 16518  003A98  502E               	movf	CANreceiveMessage@msg,w,c
 16519  003A9A  26D9               	addwf	fsr2l,f,c
 16520  003A9C  502F               	movf	CANreceiveMessage@msg+1,w,c
 16521  003A9E  22DA               	addwfc	fsr2h,f,c
 16522  003AA0  CF67 FFDF          	movff	3943,indf2	;volatile
 16523                           
 16524                           ; BSR set to: 15
 16525                           ;inc\CANlib.h: 592: msg->data[2] =RXB0D2;
 16526  003AA4  EE20 F006          	lfsr	2,6
 16527  003AA8  502E               	movf	CANreceiveMessage@msg,w,c
 16528  003AAA  26D9               	addwf	fsr2l,f,c
 16529  003AAC  502F               	movf	CANreceiveMessage@msg+1,w,c
 16530  003AAE  22DA               	addwfc	fsr2h,f,c
 16531  003AB0  CF68 FFDF          	movff	3944,indf2	;volatile
 16532                           
 16533                           ; BSR set to: 15
 16534                           ;inc\CANlib.h: 593: msg->data[3] =RXB0D3;
 16535  003AB4  EE20 F007          	lfsr	2,7
 16536  003AB8  502E               	movf	CANreceiveMessage@msg,w,c
 16537  003ABA  26D9               	addwf	fsr2l,f,c
 16538  003ABC  502F               	movf	CANreceiveMessage@msg+1,w,c
 16539  003ABE  22DA               	addwfc	fsr2h,f,c
 16540  003AC0  CF69 FFDF          	movff	3945,indf2	;volatile
 16541                           
 16542                           ; BSR set to: 15
 16543                           ;inc\CANlib.h: 594: msg->data[4] =RXB0D4;
 16544  003AC4  EE20 F008          	lfsr	2,8
 16545  003AC8  502E               	movf	CANreceiveMessage@msg,w,c
 16546  003ACA  26D9               	addwf	fsr2l,f,c
 16547  003ACC  502F               	movf	CANreceiveMessage@msg+1,w,c
 16548  003ACE  22DA               	addwfc	fsr2h,f,c
 16549  003AD0  CF6A FFDF          	movff	3946,indf2	;volatile
 16550                           
 16551                           ; BSR set to: 15
 16552                           ;inc\CANlib.h: 595: msg->data[5] =RXB0D5;
 16553  003AD4  EE20 F009          	lfsr	2,9
 16554  003AD8  502E               	movf	CANreceiveMessage@msg,w,c
 16555  003ADA  26D9               	addwf	fsr2l,f,c
 16556  003ADC  502F               	movf	CANreceiveMessage@msg+1,w,c
 16557  003ADE  22DA               	addwfc	fsr2h,f,c
 16558  003AE0  CF6B FFDF          	movff	3947,indf2	;volatile
 16559                           
 16560                           ; BSR set to: 15
 16561                           ;inc\CANlib.h: 596: msg->data[6] =RXB0D6;
 16562  003AE4  EE20 F00A          	lfsr	2,10
 16563  003AE8  502E               	movf	CANreceiveMessage@msg,w,c
 16564  003AEA  26D9               	addwf	fsr2l,f,c
 16565  003AEC  502F               	movf	CANreceiveMessage@msg+1,w,c
 16566  003AEE  22DA               	addwfc	fsr2h,f,c
 16567  003AF0  CF6C FFDF          	movff	3948,indf2	;volatile
 16568                           
 16569                           ; BSR set to: 15
 16570                           ;inc\CANlib.h: 597: msg->data[7] =RXB0D7;
 16571  003AF4  EE20 F00B          	lfsr	2,11
 16572  003AF8  502E               	movf	CANreceiveMessage@msg,w,c
 16573  003AFA  26D9               	addwf	fsr2l,f,c
 16574  003AFC  502F               	movf	CANreceiveMessage@msg+1,w,c
 16575  003AFE  22DA               	addwfc	fsr2h,f,c
 16576  003B00  CF6D FFDF          	movff	3949,indf2	;volatile
 16577                           
 16578                           ; BSR set to: 15
 16579                           ;inc\CANlib.h: 599: msg->RTR = RXB0DLCbits.RXRTR;
 16580  003B04  EE20 F00E          	lfsr	2,14
 16581  003B08  502E               	movf	CANreceiveMessage@msg,w,c
 16582  003B0A  26D9               	addwf	fsr2l,f,c
 16583  003B0C  502F               	movf	CANreceiveMessage@msg+1,w,c
 16584  003B0E  22DA               	addwfc	fsr2h,f,c
 16585  003B10  AC65               	btfss	3941,6,c	;volatile
 16586  003B12  D002               	goto	i1u667_20
 16587  003B14  0E01               	movlw	1
 16588  003B16  D001               	goto	i1u667_26
 16589  003B18                     i1u667_20:
 16590  003B18  0E00               	movlw	0
 16591  003B1A                     i1u667_26:
 16592  003B1A  6EDF               	movwf	indf2,c
 16593                           
 16594                           ; BSR set to: 15
 16595                           ;inc\CANlib.h: 601: msg->length = RXB0DLC & 0x0F;
 16596  003B1C  EE20 F00D          	lfsr	2,13
 16597  003B20  502E               	movf	CANreceiveMessage@msg,w,c
 16598  003B22  26D9               	addwf	fsr2l,f,c
 16599  003B24  502F               	movf	CANreceiveMessage@msg+1,w,c
 16600  003B26  22DA               	addwfc	fsr2h,f,c
 16601  003B28  5065               	movf	3941,w,c	;volatile
 16602  003B2A  0B0F               	andlw	15
 16603  003B2C  6EDF               	movwf	indf2,c
 16604                           
 16605                           ; BSR set to: 15
 16606                           ;inc\CANlib.h: 603: msg->type = RXB0SIDLbits.EXID;
 16607  003B2E  EE20 F00C          	lfsr	2,12
 16608  003B32  502E               	movf	CANreceiveMessage@msg,w,c
 16609  003B34  26D9               	addwf	fsr2l,f,c
 16610  003B36  502F               	movf	CANreceiveMessage@msg+1,w,c
 16611  003B38  22DA               	addwfc	fsr2h,f,c
 16612  003B3A  A662               	btfss	3938,3,c	;volatile
 16613  003B3C  D002               	goto	i1u668_20
 16614  003B3E  0E01               	movlw	1
 16615  003B40  D001               	goto	i1u668_26
 16616  003B42                     i1u668_20:
 16617  003B42  0E00               	movlw	0
 16618  003B44                     i1u668_26:
 16619  003B44  6EDF               	movwf	indf2,c
 16620                           
 16621                           ; BSR set to: 15
 16622                           ;inc\CANlib.h: 605: if (RXB0SIDLbits.EXID == 0)
 16623  003B46  B662               	btfsc	3938,3,c	;volatile
 16624  003B48  D043               	goto	i1l5559
 16625                           
 16626                           ; BSR set to: 15
 16627                           ;inc\CANlib.h: 606: {
 16628                           ;inc\CANlib.h: 607: msg->identifier = ((unsigned long)RXB0SIDH)<< 3;
 16629  003B4A  CF61 F030          	movff	3937,??_CANreceiveMessage	;volatile
 16630  003B4E  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16631  003B50  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16632  003B52  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16633  003B54  0E03               	movlw	3
 16634  003B56                     i1u670_25:
 16635  003B56  90D8               	bcf	status,0,c
 16636  003B58  3630               	rlcf	??_CANreceiveMessage,f,c
 16637  003B5A  3631               	rlcf	??_CANreceiveMessage+1,f,c
 16638  003B5C  3632               	rlcf	??_CANreceiveMessage+2,f,c
 16639  003B5E  3633               	rlcf	??_CANreceiveMessage+3,f,c
 16640  003B60  2EE8               	decfsz	wreg,f,c
 16641  003B62  D7F9               	goto	i1u670_25
 16642  003B64  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16643  003B68  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16644  003B6C  C030  FFDE         	movff	??_CANreceiveMessage,postinc2
 16645  003B70  C031  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 16646  003B74  C032  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 16647  003B78  C033  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 16648                           
 16649                           ; BSR set to: 15
 16650                           ;inc\CANlib.h: 608: tamp = (RXB0SIDL >> 5 ) & 0x07;
 16651  003B7C  3862               	swapf	3938,w,c	;volatile
 16652  003B7E  42E8               	rrncf	wreg,f,c
 16653  003B80  0B07               	andlw	7
 16654  003B82  0B07               	andlw	7
 16655  003B84  6E39               	movwf	CANreceiveMessage@tamp,c
 16656                           
 16657                           ; BSR set to: 15
 16658                           ;inc\CANlib.h: 609: msg->identifier = msg->identifier + tamp;
 16659  003B86  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16660  003B8A  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16661  003B8E  CFDE F030          	movff	postinc2,??_CANreceiveMessage
 16662  003B92  CFDE F031          	movff	postinc2,??_CANreceiveMessage+1
 16663  003B96  CFDE F032          	movff	postinc2,??_CANreceiveMessage+2
 16664  003B9A  CFDE F033          	movff	postinc2,??_CANreceiveMessage+3
 16665  003B9E  5039               	movf	CANreceiveMessage@tamp,w,c
 16666  003BA0  2430               	addwf	??_CANreceiveMessage,w,c
 16667  003BA2  6E34               	movwf	(??_CANreceiveMessage+4)& (0+255),c
 16668  003BA4  0E00               	movlw	0
 16669  003BA6  2031               	addwfc	??_CANreceiveMessage+1,w,c
 16670  003BA8  6E35               	movwf	(??_CANreceiveMessage+5)& (0+255),c
 16671  003BAA  0E00               	movlw	0
 16672  003BAC  2032               	addwfc	??_CANreceiveMessage+2,w,c
 16673  003BAE  6E36               	movwf	(??_CANreceiveMessage+6)& (0+255),c
 16674  003BB0  0E00               	movlw	0
 16675  003BB2  2033               	addwfc	??_CANreceiveMessage+3,w,c
 16676  003BB4  6E37               	movwf	(??_CANreceiveMessage+7)& (0+255),c
 16677  003BB6  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16678  003BBA  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16679  003BBE  C034  FFDE         	movff	??_CANreceiveMessage+4,postinc2
 16680  003BC2  C035  FFDE         	movff	??_CANreceiveMessage+5,postinc2
 16681  003BC6  C036  FFDE         	movff	??_CANreceiveMessage+6,postinc2
 16682  003BCA  C037  FFDE         	movff	??_CANreceiveMessage+7,postinc2
 16683                           
 16684                           ;inc\CANlib.h: 610: }
 16685  003BCE  D08E               	goto	i1l5585
 16686  003BD0                     i1l5559:
 16687                           
 16688                           ; BSR set to: 15
 16689                           ;inc\CANlib.h: 611: else
 16690                           ;inc\CANlib.h: 612: {
 16691                           ;inc\CANlib.h: 613: msg->identifier = (unsigned long) RXB0EIDL;
 16692  003BD0  CF64 F030          	movff	3940,??_CANreceiveMessage	;volatile
 16693  003BD4  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16694  003BD6  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16695  003BD8  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16696  003BDA  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16697  003BDE  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16698  003BE2  C030  FFDE         	movff	??_CANreceiveMessage,postinc2
 16699  003BE6  C031  FFDE         	movff	??_CANreceiveMessage+1,postinc2
 16700  003BEA  C032  FFDE         	movff	??_CANreceiveMessage+2,postinc2
 16701  003BEE  C033  FFDE         	movff	??_CANreceiveMessage+3,postinc2
 16702                           
 16703                           ; BSR set to: 15
 16704                           ;inc\CANlib.h: 614: msg->identifier += ((unsigned long) RXB0EIDH) << 8;
 16705  003BF2  CF63 F030          	movff	3939,??_CANreceiveMessage	;volatile
 16706  003BF6  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16707  003BF8  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16708  003BFA  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16709  003BFC  C032  F033         	movff	??_CANreceiveMessage+2,??_CANreceiveMessage+3
 16710  003C00  C031  F032         	movff	??_CANreceiveMessage+1,??_CANreceiveMessage+2
 16711  003C04  C030  F031         	movff	??_CANreceiveMessage,??_CANreceiveMessage+1
 16712  003C08  6A30               	clrf	??_CANreceiveMessage,c
 16713  003C0A  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16714  003C0E  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16715  003C12  5030               	movf	??_CANreceiveMessage,w,c
 16716  003C14  26DE               	addwf	postinc2,f,c
 16717  003C16  5031               	movf	??_CANreceiveMessage+1,w,c
 16718  003C18  22DE               	addwfc	postinc2,f,c
 16719  003C1A  5032               	movf	??_CANreceiveMessage+2,w,c
 16720  003C1C  22DE               	addwfc	postinc2,f,c
 16721  003C1E  5033               	movf	??_CANreceiveMessage+3,w,c
 16722  003C20  22DE               	addwfc	postinc2,f,c
 16723                           
 16724                           ; BSR set to: 15
 16725                           ;inc\CANlib.h: 616: if (RXB0SIDLbits.EID16)
 16726  003C22  A062               	btfss	3938,0,c	;volatile
 16727  003C24  D00D               	goto	i1l5567
 16728                           
 16729                           ; BSR set to: 15
 16730                           ;inc\CANlib.h: 617: msg->identifier |= 0x00010000;
 16731  003C26  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16732  003C2A  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16733  003C2E  0E00               	movlw	0
 16734  003C30  12DE               	iorwf	postinc2,f,c
 16735  003C32  0E00               	movlw	0
 16736  003C34  12DE               	iorwf	postinc2,f,c
 16737  003C36  0E01               	movlw	1
 16738  003C38  12DE               	iorwf	postinc2,f,c
 16739  003C3A  0E00               	movlw	0
 16740  003C3C  12DE               	iorwf	postinc2,f,c
 16741  003C3E  D000               	goto	i1l5567
 16742  003C40                     i1l5567:
 16743                           
 16744                           ; BSR set to: 15
 16745                           ;inc\CANlib.h: 618: if (RXB0SIDLbits.EID17)
 16746  003C40  A262               	btfss	3938,1,c	;volatile
 16747  003C42  D00D               	goto	i1l5571
 16748                           
 16749                           ; BSR set to: 15
 16750                           ;inc\CANlib.h: 619: msg->identifier |= 0x00020000;
 16751  003C44  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16752  003C48  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16753  003C4C  0E00               	movlw	0
 16754  003C4E  12DE               	iorwf	postinc2,f,c
 16755  003C50  0E00               	movlw	0
 16756  003C52  12DE               	iorwf	postinc2,f,c
 16757  003C54  0E02               	movlw	2
 16758  003C56  12DE               	iorwf	postinc2,f,c
 16759  003C58  0E00               	movlw	0
 16760  003C5A  12DE               	iorwf	postinc2,f,c
 16761  003C5C  D000               	goto	i1l5571
 16762  003C5E                     i1l5571:
 16763                           
 16764                           ; BSR set to: 15
 16765                           ;inc\CANlib.h: 620: if (RXB0SIDLbits.SID0)
 16766  003C5E  AA62               	btfss	3938,5,c	;volatile
 16767  003C60  D00D               	goto	i1l5575
 16768                           
 16769                           ; BSR set to: 15
 16770                           ;inc\CANlib.h: 621: msg->identifier |= 0x00040000;
 16771  003C62  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16772  003C66  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16773  003C6A  0E00               	movlw	0
 16774  003C6C  12DE               	iorwf	postinc2,f,c
 16775  003C6E  0E00               	movlw	0
 16776  003C70  12DE               	iorwf	postinc2,f,c
 16777  003C72  0E04               	movlw	4
 16778  003C74  12DE               	iorwf	postinc2,f,c
 16779  003C76  0E00               	movlw	0
 16780  003C78  12DE               	iorwf	postinc2,f,c
 16781  003C7A  D000               	goto	i1l5575
 16782  003C7C                     i1l5575:
 16783                           
 16784                           ; BSR set to: 15
 16785                           ;inc\CANlib.h: 622: if (RXB0SIDLbits.SID1)
 16786  003C7C  AC62               	btfss	3938,6,c	;volatile
 16787  003C7E  D00D               	goto	i1l5579
 16788                           
 16789                           ; BSR set to: 15
 16790                           ;inc\CANlib.h: 623: msg->identifier |= 0x00080000;
 16791  003C80  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16792  003C84  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16793  003C88  0E00               	movlw	0
 16794  003C8A  12DE               	iorwf	postinc2,f,c
 16795  003C8C  0E00               	movlw	0
 16796  003C8E  12DE               	iorwf	postinc2,f,c
 16797  003C90  0E08               	movlw	8
 16798  003C92  12DE               	iorwf	postinc2,f,c
 16799  003C94  0E00               	movlw	0
 16800  003C96  12DE               	iorwf	postinc2,f,c
 16801  003C98  D000               	goto	i1l5579
 16802  003C9A                     i1l5579:
 16803                           
 16804                           ; BSR set to: 15
 16805                           ;inc\CANlib.h: 624: if (RXB0SIDLbits.SID2)
 16806  003C9A  AE62               	btfss	3938,7,c	;volatile
 16807  003C9C  D00D               	goto	i1l5583
 16808                           
 16809                           ; BSR set to: 15
 16810                           ;inc\CANlib.h: 625: msg->identifier |= 0x00100000;
 16811  003C9E  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16812  003CA2  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16813  003CA6  0E00               	movlw	0
 16814  003CA8  12DE               	iorwf	postinc2,f,c
 16815  003CAA  0E00               	movlw	0
 16816  003CAC  12DE               	iorwf	postinc2,f,c
 16817  003CAE  0E10               	movlw	16
 16818  003CB0  12DE               	iorwf	postinc2,f,c
 16819  003CB2  0E00               	movlw	0
 16820  003CB4  12DE               	iorwf	postinc2,f,c
 16821  003CB6  D000               	goto	i1l5583
 16822  003CB8                     i1l5583:
 16823                           
 16824                           ; BSR set to: 15
 16825                           ;inc\CANlib.h: 627: msg->identifier |= ((unsigned long) RXB0SIDH) << 21;
 16826  003CB8  CF61 F030          	movff	3937,??_CANreceiveMessage	;volatile
 16827  003CBC  6A31               	clrf	(??_CANreceiveMessage+1)& (0+255),c
 16828  003CBE  6A32               	clrf	(??_CANreceiveMessage+2)& (0+255),c
 16829  003CC0  6A33               	clrf	(??_CANreceiveMessage+3)& (0+255),c
 16830  003CC2  0E15               	movlw	21
 16831  003CC4                     i1u676_25:
 16832  003CC4  90D8               	bcf	status,0,c
 16833  003CC6  3630               	rlcf	??_CANreceiveMessage,f,c
 16834  003CC8  3631               	rlcf	??_CANreceiveMessage+1,f,c
 16835  003CCA  3632               	rlcf	??_CANreceiveMessage+2,f,c
 16836  003CCC  3633               	rlcf	??_CANreceiveMessage+3,f,c
 16837  003CCE  2EE8               	decfsz	wreg,f,c
 16838  003CD0  D7F9               	goto	i1u676_25
 16839  003CD2  C02E  FFD9         	movff	CANreceiveMessage@msg,fsr2l
 16840  003CD6  C02F  FFDA         	movff	CANreceiveMessage@msg+1,fsr2h
 16841  003CDA  5030               	movf	??_CANreceiveMessage,w,c
 16842  003CDC  12DE               	iorwf	postinc2,f,c
 16843  003CDE  5031               	movf	??_CANreceiveMessage+1,w,c
 16844  003CE0  12DE               	iorwf	postinc2,f,c
 16845  003CE2  5032               	movf	??_CANreceiveMessage+2,w,c
 16846  003CE4  12DE               	iorwf	postinc2,f,c
 16847  003CE6  5033               	movf	??_CANreceiveMessage+3,w,c
 16848  003CE8  12DE               	iorwf	postinc2,f,c
 16849  003CEA  D000               	goto	i1l5585
 16850  003CEC                     i1l5585:
 16851                           
 16852                           ; BSR set to: 15
 16853                           ;inc\CANlib.h: 629: }
 16854                           ;inc\CANlib.h: 630: RXB0CONbits.RXFUL = 0x00;
 16855  003CEC  9E60               	bcf	3936,7,c	;volatile
 16856                           
 16857                           ; BSR set to: 15
 16858                           ;inc\CANlib.h: 632: return (error);
 16859                           ;	Return value of _CANreceiveMessage is never used
 16860  003CEE  0012               	return	
 16861                           
 16862                           ; BSR set to: 15
 16863                           
 16864                           ; BSR set to: 15
 16865  003CF0  0012               	return		;funcret
 16866  003CF2                     __end_of_CANreceiveMessage:
 16867                           	opt stack 0
 16868                           pclatu	equ	0xFFB
 16869                           pclath	equ	0xFFA
 16870                           tblptru	equ	0xFF8
 16871                           tblptrh	equ	0xFF7
 16872                           tblptrl	equ	0xFF6
 16873                           tablat	equ	0xFF5
 16874                           prodh	equ	0xFF4
 16875                           prodl	equ	0xFF3
 16876                           intcon	equ	0xFF2
 16877                           intcon2	equ	0xFF1
 16878                           postinc0	equ	0xFEE
 16879                           fsr0h	equ	0xFEA
 16880                           fsr0l	equ	0xFE9
 16881                           wreg	equ	0xFE8
 16882                           fsr1h	equ	0xFE2
 16883                           fsr1l	equ	0xFE1
 16884                           bsr	equ	0xFE0
 16885                           indf2	equ	0xFDF
 16886                           postinc2	equ	0xFDE
 16887                           postdec2	equ	0xFDD
 16888                           plusw2	equ	0xFDB
 16889                           fsr2h	equ	0xFDA
 16890                           fsr2l	equ	0xFD9
 16891                           status	equ	0xFD8
 16892                           
 16893 ;; *************** function _CANisRxReady *****************
 16894 ;; Defined at:
 16895 ;;		line 1163 in file "../../../Desktop/LaurTec_PIC_libraries_v_3.3.1/inc\CANlib.h"
 16896 ;; Parameters:    Size  Location     Type
 16897 ;;		None
 16898 ;; Auto vars:     Size  Location     Type
 16899 ;;		None
 16900 ;; Return value:  Size  Location     Type
 16901 ;;                  1    wreg      unsigned char 
 16902 ;; Registers used:
 16903 ;;		wreg, status,2
 16904 ;; Tracked objects:
 16905 ;;		On entry : 0/0
 16906 ;;		On exit  : 0/0
 16907 ;;		Unchanged: 0/0
 16908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16912 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16913 ;;Total ram usage:        1 bytes
 16914 ;; Hardware stack levels used:    1
 16915 ;; Hardware stack levels required when called:    2
 16916 ;; This function calls:
 16917 ;;		Nothing
 16918 ;; This function is called by:
 16919 ;;		_ISR_Bassa
 16920 ;; This function uses a non-reentrant model
 16921 ;;
 16922                           
 16923                           	psect	text44
 16924  0065B4                     __ptext44:
 16925                           	opt stack 0
 16926  0065B4                     _CANisRxReady:
 16927                           	opt stack 20
 16928                           
 16929                           ;inc\CANlib.h: 1165: return (RXB0CONbits.RXFUL || RXB1CONbits.RXFUL);
 16930                           
 16931                           ; BSR set to: 15
 16932                           ;incstack = 0
 16933  0065B4  0E01               	movlw	1
 16934  0065B6  6E2E               	movwf	_CANisRxReady$2843,c
 16935  0065B8  BE60               	btfsc	3936,7,c	;volatile
 16936  0065BA  D005               	goto	i1l559
 16937  0065BC  010F               	movlb	15	; () banked
 16938  0065BE  BF50               	btfsc	80,7,b	;volatile
 16939  0065C0  D002               	goto	i1l559
 16940                           
 16941                           ; BSR set to: 15
 16942  0065C2  0E00               	movlw	0
 16943  0065C4  6E2E               	movwf	_CANisRxReady$2843,c
 16944  0065C6                     i1l559:
 16945  0065C6  502E               	movf	_CANisRxReady$2843,w,c
 16946  0065C8  0012               	return	
 16947  0065CA  0012               	return		;funcret
 16948  0065CC                     __end_of_CANisRxReady:
 16949                           	opt stack 0
 16950                           pclatu	equ	0xFFB
 16951                           pclath	equ	0xFFA
 16952                           tblptru	equ	0xFF8
 16953                           tblptrh	equ	0xFF7
 16954                           tblptrl	equ	0xFF6
 16955                           tablat	equ	0xFF5
 16956                           prodh	equ	0xFF4
 16957                           prodl	equ	0xFF3
 16958                           intcon	equ	0xFF2
 16959                           intcon2	equ	0xFF1
 16960                           postinc0	equ	0xFEE
 16961                           fsr0h	equ	0xFEA
 16962                           fsr0l	equ	0xFE9
 16963                           wreg	equ	0xFE8
 16964                           fsr1h	equ	0xFE2
 16965                           fsr1l	equ	0xFE1
 16966                           bsr	equ	0xFE0
 16967                           indf2	equ	0xFDF
 16968                           postinc2	equ	0xFDE
 16969                           postdec2	equ	0xFDD
 16970                           plusw2	equ	0xFDB
 16971                           fsr2h	equ	0xFDA
 16972                           fsr2l	equ	0xFD9
 16973                           status	equ	0xFD8
 16974                           
 16975 ;; *************** function _ISR_Alta *****************
 16976 ;; Defined at:
 16977 ;;		line 103 in file "parcheggio.c"
 16978 ;; Parameters:    Size  Location     Type
 16979 ;;		None
 16980 ;; Auto vars:     Size  Location     Type
 16981 ;;		None
 16982 ;; Return value:  Size  Location     Type
 16983 ;;		None               void
 16984 ;; Registers used:
 16985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16986 ;; Tracked objects:
 16987 ;;		On entry : 0/0
 16988 ;;		On exit  : 0/0
 16989 ;;		Unchanged: 0/0
 16990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16993 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16994 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16995 ;;Total ram usage:       16 bytes
 16996 ;; Hardware stack levels used:    1
 16997 ;; Hardware stack levels required when called:    1
 16998 ;; This function calls:
 16999 ;;		___lwdiv
 17000 ;; This function is called by:
 17001 ;;		Interrupt level 2
 17002 ;; This function uses a non-reentrant model
 17003 ;;
 17004                           
 17005                           	psect	intcode
 17006  000008                     __pintcode:
 17007                           	opt stack 0
 17008  000008                     _ISR_Alta:
 17009                           	opt stack 19
 17010                           
 17011                           ;incstack = 0
 17012  000008  CFFA F069          	movff	pclath,??_ISR_Alta+2
 17013  00000C  CFFB F06A          	movff	pclatu,??_ISR_Alta+3
 17014  000010  CFE9 F06B          	movff	fsr0l,??_ISR_Alta+4
 17015  000014  EF8C  F02F         	goto	int_func
 17016                           pclatu	equ	0xFFB
 17017                           pclath	equ	0xFFA
 17018                           tblptru	equ	0xFF8
 17019                           tblptrh	equ	0xFF7
 17020                           tblptrl	equ	0xFF6
 17021                           tablat	equ	0xFF5
 17022                           prodh	equ	0xFF4
 17023                           prodl	equ	0xFF3
 17024                           intcon	equ	0xFF2
 17025                           intcon2	equ	0xFF1
 17026                           postinc0	equ	0xFEE
 17027                           fsr0h	equ	0xFEA
 17028                           fsr0l	equ	0xFE9
 17029                           wreg	equ	0xFE8
 17030                           fsr1h	equ	0xFE2
 17031                           fsr1l	equ	0xFE1
 17032                           bsr	equ	0xFE0
 17033                           indf2	equ	0xFDF
 17034                           postinc2	equ	0xFDE
 17035                           postdec2	equ	0xFDD
 17036                           plusw2	equ	0xFDB
 17037                           fsr2h	equ	0xFDA
 17038                           fsr2l	equ	0xFD9
 17039                           status	equ	0xFD8
 17040                           
 17041                           	psect	intcode_body
 17042  005F18                     __pintcode_body:
 17043                           	opt stack 19
 17044  005F18                     int_func:
 17045                           	opt stack 19
 17046  005F18  CFEA F06C          	movff	fsr0h,??_ISR_Alta+5
 17047  005F1C  CFE1 F06D          	movff	fsr1l,??_ISR_Alta+6
 17048  005F20  CFE2 F06E          	movff	fsr1h,??_ISR_Alta+7
 17049  005F24  CFD9 F06F          	movff	fsr2l,??_ISR_Alta+8
 17050  005F28  CFDA F070          	movff	fsr2h,??_ISR_Alta+9
 17051  005F2C  CFF3 F071          	movff	prodl,??_ISR_Alta+10
 17052  005F30  CFF4 F072          	movff	prodh,??_ISR_Alta+11
 17053  005F34  CFF6 F073          	movff	tblptrl,??_ISR_Alta+12
 17054  005F38  CFF7 F074          	movff	tblptrh,??_ISR_Alta+13
 17055  005F3C  CFF8 F075          	movff	tblptru,??_ISR_Alta+14
 17056  005F40  CFF5 F076          	movff	tablat,??_ISR_Alta+15
 17057                           
 17058                           ;parcheggio.c: 104: if (INTCON2bits.INTEDG0 == 1) {
 17059  005F44  ACF1               	btfss	intcon2,6,c	;volatile
 17060  005F46  D007               	goto	i2l690
 17061                           
 17062                           ;parcheggio.c: 105: INTCON2bits.INTEDG0 = 0;
 17063  005F48  9CF1               	bcf	intcon2,6,c	;volatile
 17064                           
 17065                           ;parcheggio.c: 106: TMR3H = 0;
 17066  005F4A  0E00               	movlw	0
 17067  005F4C  6EB3               	movwf	4019,c	;volatile
 17068                           
 17069                           ;parcheggio.c: 107: TMR3L = 0;
 17070  005F4E  0E00               	movlw	0
 17071  005F50  6EB2               	movwf	4018,c	;volatile
 17072                           
 17073                           ;parcheggio.c: 108: distance_error = 0;
 17074  005F52  9A56               	bcf	_distance_error/(0+8),_distance_error& (0+7),c	;volatile
 17075                           
 17076                           ;parcheggio.c: 109: } else {
 17077  005F54  D031               	goto	i2l7219
 17078  005F56                     i2l690:
 17079                           
 17080                           ;parcheggio.c: 110: TMR3H_temp = TMR3H;
 17081  005F56  CFB3 F022          	movff	4019,_TMR3H_temp	;volatile
 17082                           
 17083                           ;parcheggio.c: 111: TMR3L_temp = TMR3L;
 17084  005F5A  CFB2 F023          	movff	4018,_TMR3L_temp	;volatile
 17085                           
 17086                           ;parcheggio.c: 112: timerValue2 = TMR3H_temp;
 17087  005F5E  C022  F01F         	movff	_TMR3H_temp,_timerValue2	;volatile
 17088  005F62  6A20               	clrf	_timerValue2+1,c	;volatile
 17089                           
 17090                           ;parcheggio.c: 113: timerValue2 = ((timerValue2 << 8) | (TMR3L_temp));
 17091  005F64  501F               	movf	_timerValue2,w,c	;volatile
 17092  005F66  0100               	movlb	0	; () banked
 17093  005F68  6F67               	movwf	??_ISR_Alta& (0+255),b
 17094  005F6A  5023               	movf	_TMR3L_temp,w,c	;volatile
 17095  005F6C  6E1F               	movwf	_timerValue2,c	;volatile
 17096  005F6E  C067  F020         	movff	??_ISR_Alta,_timerValue2+1	;volatile
 17097                           
 17098                           ; BSR set to: 0
 17099                           ;parcheggio.c: 114: pulse_time = timerValue2 / 2;
 17100  005F72  90D8               	bcf	status,0,c
 17101  005F74  3020               	rrcf	_timerValue2+1,w,c	;volatile
 17102  005F76  0100               	movlb	0	; () banked
 17103  005F78  6F67               	movwf	??_ISR_Alta& (0+255),b
 17104  005F7A  301F               	rrcf	_timerValue2,w,c	;volatile
 17105  005F7C  6E1D               	movwf	_pulse_time,c	;volatile
 17106  005F7E  C067  F01E         	movff	??_ISR_Alta,_pulse_time+1	;volatile
 17107                           
 17108                           ; BSR set to: 0
 17109                           ;parcheggio.c: 115: sensor_distance[MUX_index] = pulse_time / 58;
 17110  005F82  C01D  F060         	movff	_pulse_time,___lwdiv@dividend	;volatile
 17111  005F86  C01E  F061         	movff	_pulse_time+1,___lwdiv@dividend+1	;volatile
 17112  005F8A  0E00               	movlw	0
 17113  005F8C  0100               	movlb	0	; () banked
 17114  005F8E  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 17115  005F90  0E3A               	movlw	58
 17116  005F92  6F62               	movwf	___lwdiv@divisor& (0+255),b
 17117  005F94  EC9A  F030         	call	___lwdiv	;wreg free
 17118  005F98  5021               	movf	_MUX_index,w,c	;volatile
 17119  005F9A  0D02               	mullw	2
 17120  005F9C  0E01               	movlw	low _sensor_distance
 17121  005F9E  24F3               	addwf	prodl,w,c
 17122  005FA0  6ED9               	movwf	fsr2l,c
 17123  005FA2  0E00               	movlw	high _sensor_distance
 17124  005FA4  20F4               	addwfc	prodh,w,c
 17125  005FA6  6EDA               	movwf	fsr2h,c
 17126  005FA8  0100               	movlb	0	; () banked
 17127  005FAA  C060  FFDE         	movff	?___lwdiv,postinc2
 17128  005FAE  0100               	movlb	0	; () banked
 17129  005FB0  C061  FFDD         	movff	?___lwdiv+1,postdec2
 17130                           
 17131                           ; BSR set to: 0
 17132                           ;parcheggio.c: 116: INTCON2bits.INTEDG0 = 1;
 17133  005FB4  8CF1               	bsf	intcon2,6,c	;volatile
 17134  005FB6  D000               	goto	i2l7219
 17135  005FB8                     i2l7219:
 17136                           
 17137                           ;parcheggio.c: 117: }
 17138                           ;parcheggio.c: 118: INTCONbits.INT0IF = 0;
 17139  005FB8  92F2               	bcf	intcon,1,c	;volatile
 17140  005FBA  C076  FFF5         	movff	??_ISR_Alta+15,tablat
 17141  005FBE  C075  FFF8         	movff	??_ISR_Alta+14,tblptru
 17142  005FC2  C074  FFF7         	movff	??_ISR_Alta+13,tblptrh
 17143  005FC6  C073  FFF6         	movff	??_ISR_Alta+12,tblptrl
 17144  005FCA  C072  FFF4         	movff	??_ISR_Alta+11,prodh
 17145  005FCE  C071  FFF3         	movff	??_ISR_Alta+10,prodl
 17146  005FD2  C070  FFDA         	movff	??_ISR_Alta+9,fsr2h
 17147  005FD6  C06F  FFD9         	movff	??_ISR_Alta+8,fsr2l
 17148  005FDA  C06E  FFE2         	movff	??_ISR_Alta+7,fsr1h
 17149  005FDE  C06D  FFE1         	movff	??_ISR_Alta+6,fsr1l
 17150  005FE2  C06C  FFEA         	movff	??_ISR_Alta+5,fsr0h
 17151  005FE6  C06B  FFE9         	movff	??_ISR_Alta+4,fsr0l
 17152  005FEA  C06A  FFFB         	movff	??_ISR_Alta+3,pclatu
 17153  005FEE  C069  FFFA         	movff	??_ISR_Alta+2,pclath
 17154  005FF2  0011               	retfie		f
 17155  005FF4                     __end_of_ISR_Alta:
 17156                           	opt stack 0
 17157                           pclatu	equ	0xFFB
 17158                           pclath	equ	0xFFA
 17159                           tblptru	equ	0xFF8
 17160                           tblptrh	equ	0xFF7
 17161                           tblptrl	equ	0xFF6
 17162                           tablat	equ	0xFF5
 17163                           prodh	equ	0xFF4
 17164                           prodl	equ	0xFF3
 17165                           intcon	equ	0xFF2
 17166                           intcon2	equ	0xFF1
 17167                           postinc0	equ	0xFEE
 17168                           fsr0h	equ	0xFEA
 17169                           fsr0l	equ	0xFE9
 17170                           wreg	equ	0xFE8
 17171                           fsr1h	equ	0xFE2
 17172                           fsr1l	equ	0xFE1
 17173                           bsr	equ	0xFE0
 17174                           indf2	equ	0xFDF
 17175                           postinc2	equ	0xFDE
 17176                           postdec2	equ	0xFDD
 17177                           plusw2	equ	0xFDB
 17178                           fsr2h	equ	0xFDA
 17179                           fsr2l	equ	0xFD9
 17180                           status	equ	0xFD8
 17181                           
 17182 ;; *************** function ___lwdiv *****************
 17183 ;; Defined at:
 17184 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 17185 ;; Parameters:    Size  Location     Type
 17186 ;;  dividend        2    0[BANK0 ] unsigned int 
 17187 ;;  divisor         2    2[BANK0 ] unsigned int 
 17188 ;; Auto vars:     Size  Location     Type
 17189 ;;  quotient        2    5[BANK0 ] unsigned int 
 17190 ;;  counter         1    4[BANK0 ] unsigned char 
 17191 ;; Return value:  Size  Location     Type
 17192 ;;                  2    0[BANK0 ] unsigned int 
 17193 ;; Registers used:
 17194 ;;		wreg, status,2, status,0
 17195 ;; Tracked objects:
 17196 ;;		On entry : 0/0
 17197 ;;		On exit  : 0/0
 17198 ;;		Unchanged: 0/0
 17199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17200 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17201 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17203 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17204 ;;Total ram usage:        7 bytes
 17205 ;; Hardware stack levels used:    1
 17206 ;; This function calls:
 17207 ;;		Nothing
 17208 ;; This function is called by:
 17209 ;;		_ISR_Alta
 17210 ;; This function uses a non-reentrant model
 17211 ;;
 17212                           
 17213                           	psect	text46
 17214  006134                     __ptext46:
 17215                           	opt stack 0
 17216  006134                     ___lwdiv:
 17217                           	opt stack 19
 17218                           
 17219                           ;incstack = 0
 17220  006134  0E00               	movlw	0
 17221  006136  0100               	movlb	0	; () banked
 17222  006138  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17223  00613A  0E00               	movlw	0
 17224  00613C  6F65               	movwf	___lwdiv@quotient& (0+255),b
 17225                           
 17226                           ; BSR set to: 0
 17227  00613E  0100               	movlb	0	; () banked
 17228  006140  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17229  006142  0100               	movlb	0	; () banked
 17230  006144  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17231  006146  B4D8               	btfsc	status,2,c
 17232  006148  D031               	goto	i2l1423
 17233                           
 17234                           ; BSR set to: 0
 17235  00614A  0E01               	movlw	1
 17236  00614C  0100               	movlb	0	; () banked
 17237  00614E  6F64               	movwf	___lwdiv@counter& (0+255),b
 17238  006150  D007               	goto	i2l7189
 17239  006152                     i2l7187:
 17240                           
 17241                           ; BSR set to: 0
 17242  006152  0100               	movlb	0	; () banked
 17243  006154  90D8               	bcf	status,0,c
 17244  006156  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 17245  006158  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17246  00615A  0100               	movlb	0	; () banked
 17247  00615C  2B64               	incf	___lwdiv@counter& (0+255),f,b
 17248  00615E  D000               	goto	i2l7189
 17249  006160                     i2l7189:
 17250                           
 17251                           ; BSR set to: 0
 17252  006160  0100               	movlb	0	; () banked
 17253  006162  BF63               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
 17254  006164  D002               	goto	i2l7191
 17255  006166  D7F5               	goto	i2l7187
 17256                           
 17257                           ; BSR set to: 0
 17258  006168  D000               	goto	i2l7191
 17259  00616A                     i2l7191:
 17260                           
 17261                           ; BSR set to: 0
 17262  00616A  0100               	movlb	0	; () banked
 17263  00616C  90D8               	bcf	status,0,c
 17264  00616E  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 17265  006170  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17266                           
 17267                           ; BSR set to: 0
 17268  006172  0100               	movlb	0	; () banked
 17269  006174  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17270  006176  0100               	movlb	0	; () banked
 17271  006178  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 17272  00617A  0100               	movlb	0	; () banked
 17273  00617C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17274  00617E  0100               	movlb	0	; () banked
 17275  006180  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17276  006182  A0D8               	btfss	status,0,c
 17277  006184  D00B               	goto	i2l7199
 17278                           
 17279                           ; BSR set to: 0
 17280  006186  0100               	movlb	0	; () banked
 17281  006188  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17282  00618A  0100               	movlb	0	; () banked
 17283  00618C  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 17284  00618E  0100               	movlb	0	; () banked
 17285  006190  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17286  006192  0100               	movlb	0	; () banked
 17287  006194  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17288                           
 17289                           ; BSR set to: 0
 17290  006196  0100               	movlb	0	; () banked
 17291  006198  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 17292  00619A  D000               	goto	i2l7199
 17293  00619C                     i2l7199:
 17294                           
 17295                           ; BSR set to: 0
 17296  00619C  0100               	movlb	0	; () banked
 17297  00619E  90D8               	bcf	status,0,c
 17298  0061A0  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17299  0061A2  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 17300                           
 17301                           ; BSR set to: 0
 17302  0061A4  0100               	movlb	0	; () banked
 17303  0061A6  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 17304  0061A8  D7E0               	goto	i2l7191
 17305  0061AA  D000               	goto	i2l1423
 17306  0061AC                     i2l1423:
 17307                           
 17308                           ; BSR set to: 0
 17309  0061AC  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 17310  0061B0  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17311                           
 17312                           ; BSR set to: 0
 17313  0061B4  0012               	return		;funcret
 17314  0061B6                     __end_of___lwdiv:
 17315                           	opt stack 0
 17316                           pclatu	equ	0xFFB
 17317                           pclath	equ	0xFFA
 17318                           tblptru	equ	0xFF8
 17319                           tblptrh	equ	0xFF7
 17320                           tblptrl	equ	0xFF6
 17321                           tablat	equ	0xFF5
 17322                           prodh	equ	0xFF4
 17323                           prodl	equ	0xFF3
 17324                           intcon	equ	0xFF2
 17325                           intcon2	equ	0xFF1
 17326                           postinc0	equ	0xFEE
 17327                           fsr0h	equ	0xFEA
 17328                           fsr0l	equ	0xFE9
 17329                           wreg	equ	0xFE8
 17330                           fsr1h	equ	0xFE2
 17331                           fsr1l	equ	0xFE1
 17332                           bsr	equ	0xFE0
 17333                           indf2	equ	0xFDF
 17334                           postinc2	equ	0xFDE
 17335                           postdec2	equ	0xFDD
 17336                           plusw2	equ	0xFDB
 17337                           fsr2h	equ	0xFDA
 17338                           fsr2l	equ	0xFD9
 17339                           status	equ	0xFD8
 17340                           pclatu	equ	0xFFB
 17341                           pclath	equ	0xFFA
 17342                           tblptru	equ	0xFF8
 17343                           tblptrh	equ	0xFF7
 17344                           tblptrl	equ	0xFF6
 17345                           tablat	equ	0xFF5
 17346                           prodh	equ	0xFF4
 17347                           prodl	equ	0xFF3
 17348                           intcon	equ	0xFF2
 17349                           intcon2	equ	0xFF1
 17350                           postinc0	equ	0xFEE
 17351                           fsr0h	equ	0xFEA
 17352                           fsr0l	equ	0xFE9
 17353                           wreg	equ	0xFE8
 17354                           fsr1h	equ	0xFE2
 17355                           fsr1l	equ	0xFE1
 17356                           bsr	equ	0xFE0
 17357                           indf2	equ	0xFDF
 17358                           postinc2	equ	0xFDE
 17359                           postdec2	equ	0xFDD
 17360                           plusw2	equ	0xFDB
 17361                           fsr2h	equ	0xFDA
 17362                           fsr2l	equ	0xFD9
 17363                           status	equ	0xFD8
 17364                           
 17365                           	psect	param0
 17366  0000                     pclatu	equ	0xFFB
 17367                           pclath	equ	0xFFA
 17368                           tblptru	equ	0xFF8
 17369                           tblptrh	equ	0xFF7
 17370                           tblptrl	equ	0xFF6
 17371                           tablat	equ	0xFF5
 17372                           prodh	equ	0xFF4
 17373                           prodl	equ	0xFF3
 17374                           intcon	equ	0xFF2
 17375                           intcon2	equ	0xFF1
 17376                           postinc0	equ	0xFEE
 17377                           fsr0h	equ	0xFEA
 17378                           fsr0l	equ	0xFE9
 17379                           wreg	equ	0xFE8
 17380                           fsr1h	equ	0xFE2
 17381                           fsr1l	equ	0xFE1
 17382                           bsr	equ	0xFE0
 17383                           indf2	equ	0xFDF
 17384                           postinc2	equ	0xFDE
 17385                           postdec2	equ	0xFDD
 17386                           plusw2	equ	0xFDB
 17387                           fsr2h	equ	0xFDA
 17388                           fsr2l	equ	0xFD9
 17389                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    80
    Data        3
    BSS         191
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     40      87
    BANK0           160    121     137
    BANK1           256     93     226
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 24
		 -> sin@coeff_a(CODE[20]), sin@coeff_b(CODE[16]), atan@coeff_a(CODE[24]), atan@coeff_b(CODE[20]), 

    CANreceiveMessage@msg	PTR struct . size(2) Largest target is 15
		 -> msg(BANK1[15]), 

    CANsendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data_speed(BANK1[8]), data_correction(BANK1[8]), data_test(BANK1[8]), data(BANK1[8]), 
		 -> data_brake(COMRAM[8]), data_steering(BANK1[8]), sensor_distance_short(BANK1[8]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Alta in COMRAM

    None.

Critical Paths under _ISR_Bassa in COMRAM

    _ISR_Bassa->i1_CANsendMessage
    i1_delay_ms->i1___wmul
    i1_can_send->i1_CANsendMessage

Critical Paths under _main in BANK0

    _parallelo->_sqrt
    _can_send->_CANsendMessage
    _asin->_sqrt
    _sqrt->___flsub
    _atan->___flge
    _fabs->___flneg
    ___awtofl->___flpack
    _delay_s->_delay_ms
    _delay_ms->___wmul
    _sin->___flsub
    _floor->___flge
    ___fltol->___flneg
    ___flge->_fabs
    ___altofl->___fltol
    _eval_poly->___fladd
    ___flmul->___flpack
    ___flsub->_floor
    ___fladd->___fldiv
    ___flneg->___fladd
    ___fldiv->___flmul
    ___lwtofl->___flpack
    _configurations->_CANInitialize
    _CANInitialize->_CANSetFilter
    _CANInitialize->_CANSetMask

Critical Paths under _ISR_Alta in BANK0

    _ISR_Alta->___lwdiv

Critical Paths under _ISR_Bassa in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_park_routine
    _park_search->_matematica
    _matematica->_cos
    _park_routine->_cos
    _parallelo->_asin
    _asin->_sqrt
    _cos->_asin

Critical Paths under _ISR_Alta in BANK1

    None.

Critical Paths under _ISR_Bassa in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Alta in BANK2

    None.

Critical Paths under _ISR_Bassa in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Alta in BANK3

    None.

Critical Paths under _ISR_Bassa in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Alta in BANK4

    None.

Critical Paths under _ISR_Bassa in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Alta in BANK5

    None.

Critical Paths under _ISR_Bassa in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Alta in BANK6

    None.

Critical Paths under _ISR_Bassa in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Alta in BANK7

    None.

Critical Paths under _ISR_Bassa in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Alta in BANK8

    None.

Critical Paths under _ISR_Bassa in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Alta in BANK9

    None.

Critical Paths under _ISR_Bassa in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Alta in BANK10

    None.

Critical Paths under _ISR_Bassa in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Alta in BANK11

    None.

Critical Paths under _ISR_Bassa in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Alta in BANK12

    None.

Critical Paths under _ISR_Bassa in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  778607
                       _CANisTxReady
                     _CANsendMessage
                     _configurations
                           _delay_ms
                       _park_routine
                        _park_search
 ---------------------------------------------------------------------------------
 (1) _park_search                                          2     2      0  380113
                                             89 BANK1      2     2      0
                       _CANisTxReady
                     _CANsendMessage
                           ___awtofl
                             ___flge
                           ___lwtofl
                                _abs
                         _matematica
                          _parallelo
 ---------------------------------------------------------------------------------
 (2) _matematica                                          40    40      0  208702
                                             53 BANK1     36    36      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                               _asin
                                _cos
 ---------------------------------------------------------------------------------
 (1) _park_routine                                        52    52      0  384820
                                             53 BANK1     40    40      0
                       _CANisTxReady
                     _CANsendMessage
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lwtofl
                               _asin
                           _can_send
                                _cos
                           _delay_ms
                            _delay_s
                          _parallelo
 ---------------------------------------------------------------------------------
 (2) _parallelo                                            2     2      0  157338
                                             45 BANK1      2     2      0
                           ___awtofl
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___fltol
                                _abs
                               _asin
                           _can_send
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _can_send                                             0     0      0    6424
                       _CANisTxReady
                     _CANsendMessage
 ---------------------------------------------------------------------------------
 (4) _CANsendMessage                                      16     8      8    6387
                                             23 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (4) _CANisTxReady                                         1     1      0      37
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _asin                                                40    36      4  100446
                                             17 BANK1     28    24      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                               _atan
                               _fabs
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _sqrt                                                25    21      4   20397
                                            113 BANK0      8     4      4
                                              0 BANK1     17    17      0
                             ___flge
                            ___flmul
                            ___flneg (ARG)
                            ___flsub
 ---------------------------------------------------------------------------------
 (4) _atan                                                21    17      4   48989
                                             95 BANK0     21    17      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (4) _fabs                                                 4     0      4    1929
                                             79 BANK0      4     0      4
                            ___flneg
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     194
                                             23 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    2871
                                             33 BANK0      5     1      4
                           ___flpack
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0    1114
                                             31 BANK0      2     2      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2    1046
                                             29 BANK0      2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     392
                                             23 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _cos                                                 12     8      4   81449
                                             45 BANK1      8     4      4
                            ___fladd
                             ___flge
                               _asin (ARG)
                                _sin
 ---------------------------------------------------------------------------------
 (4) _sin                                                 17    13      4   70785
                                            113 BANK0      4     0      4
                                              0 BANK1     13    13      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   14540
                                             95 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                8     2      6     452
                                             23 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     722
                                             79 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8    1738
                                             83 BANK0     12     4      8
                           ___lwtofl (ARG)
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2794
                                             89 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   18451
                                             75 BANK0     16     8      8
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             15     7      8    8884
                                             33 BANK0     15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    9061
                                            105 BANK0      8     0      8
                            ___fladd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             12     4      8    8389
                                             63 BANK0     12     4      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4    1605
                                             75 BANK0      4     0      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             15     7      8    7273
                                             48 BANK0     15     7      8
                            ___flmul (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2846
                                             33 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (6) ___flpack                                            10     4      6    2584
                                             23 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (1) _configurations                                       0     0      0    6204
                      _CANInitialize
 ---------------------------------------------------------------------------------
 (2) _CANInitialize                                       12     7      5    6204
                                             37 BANK0     12     7      5
                   _CANOperationMode
                       _CANSetFilter
                         _CANSetMask
 ---------------------------------------------------------------------------------
 (3) _CANSetMask                                          14     9      5    1286
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANSetFilter                                        14     9      5    3858
                                             23 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _CANOperationMode                                     1     1      0      62
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR_Bassa                                           24    24      0    6834
                                             16 COMRAM    24    24      0
                       _CANisRxReady
                  _CANreceiveMessage
                   i1_CANsendMessage
                         i1_can_send
                         i1_delay_ms
 ---------------------------------------------------------------------------------
 (9) i1_delay_ms                                           2     0      2     283
                                              6 COMRAM     2     0      2
                           i1___wmul
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) i1_can_send                                           0     0      0    2683
                     i1_CANisTxReady
                   i1_CANsendMessage
 ---------------------------------------------------------------------------------
 (10) i1_CANsendMessage                                   16     8      8    2659
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (10) i1_CANisTxReady                                      1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _CANreceiveMessage                                   12    10      2    1137
                                              0 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (9) _CANisRxReady                                         1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Alta                                           16    16      0     395
                                              7 BANK0     16    16      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (12) ___lwdiv                                             7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CANisTxReady
   _CANsendMessage
   _configurations
     _CANInitialize
       _CANOperationMode
       _CANSetFilter
       _CANSetMask
   _delay_ms
     ___wmul
   _park_routine
     _CANisTxReady
     _CANsendMessage
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
       ___flpack (ARG)
       ___lwtofl (ARG)
         ___flpack
     ___fldiv
       ___flmul (ARG)
         ___flpack
       ___flpack (ARG)
     ___flmul
       ___flpack
     ___flneg
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___flneg (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
     ___lwtofl
       ___flpack
     _asin
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flge
         ___lwtofl (ARG)
           ___flpack
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       ___flmul
         ___flpack
       ___flneg
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
       _atan
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _eval_poly
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       _fabs
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
       _sqrt
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp
     _can_send
       _CANisTxReady
       _CANsendMessage
     _cos
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___flge
         ___lwtofl (ARG)
           ___flpack
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       _asin (ARG)
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
         _sqrt
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flge
                 ___lwtofl (ARG)
                   ___flpack
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
               _frexp
       _sin (ARG)
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         ___flsub
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp
         _eval_poly
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___fltol
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flneg (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
           _frexp
     _delay_ms
       ___wmul
     _delay_s
       _delay_ms
         ___wmul
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flge
         ___lwtofl (ARG)
           ___flpack
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       ___flmul
         ___flpack
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
         _sqrt
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flge
                 ___lwtofl (ARG)
                   ___flpack
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp
   _park_search
     _CANisTxReady
     _CANsendMessage
     ___awtofl
       ___flpack
       _abs (ARG)
     ___flge
       ___lwtofl (ARG)
         ___flpack
       _fabs (ARG)
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
     ___lwtofl
       ___flpack
     _abs
     _matematica
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flmul
         ___flpack
       ___flneg
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
         _sqrt
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flge
                 ___lwtofl (ARG)
                   ___flpack
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
               _frexp
       _cos
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         _asin (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _atan
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___flmul
               ___flpack
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
             _eval_poly
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
             _fabs
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
           _sqrt
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___flmul
               ___flpack
             ___flneg (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
             ___flsub (ARG)
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               _floor (ARG)
                 ___altofl
                   ___flpack
                   ___fltol (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___flneg (ARG)
                       ___fladd (ARG)
                         ___fldiv (ARG)
                           ___flmul (ARG)
                             ___flpack
                           ___flpack (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                         ___lwtofl (ARG)
                           ___flpack
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flge
                   ___lwtofl (ARG)
                     ___flpack
                   _fabs (ARG)
                     ___flneg
                       ___fladd (ARG)
                         ___fldiv (ARG)
                           ___flmul (ARG)
                             ___flpack
                           ___flpack (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                         ___lwtofl (ARG)
                           ___flpack
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                 _frexp
         _sin (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           ___flsub
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flge
                 ___lwtofl (ARG)
                   ___flpack
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
               _frexp
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp
     _parallelo
       ___awtofl
         ___flpack
         _abs (ARG)
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
         ___lwtofl (ARG)
           ___flpack
       ___fldiv
         ___flmul (ARG)
           ___flpack
         ___flpack (ARG)
       ___flge
         ___lwtofl (ARG)
           ___flpack
         _fabs (ARG)
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
       ___flmul
         ___flpack
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
       _abs
       _asin
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
           ___lwtofl (ARG)
             ___flpack
         ___fldiv
           ___flmul (ARG)
             ___flpack
           ___flpack (ARG)
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         _atan
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _eval_poly
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           _fabs
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         _fabs
           ___flneg
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
         _sqrt
           ___flge
             ___lwtofl (ARG)
               ___flpack
             _fabs (ARG)
               ___flneg
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
           ___flmul
             ___flpack
           ___flneg (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
           ___flsub (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             _floor (ARG)
               ___altofl
                 ___flpack
                 ___fltol (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___flneg (ARG)
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flge
                 ___lwtofl (ARG)
                   ___flpack
                 _fabs (ARG)
                   ___flneg
                     ___fladd (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___flpack
                         ___flpack (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                       ___lwtofl (ARG)
                         ___flpack
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
               _frexp
       _can_send
         _CANisTxReady
         _CANsendMessage
       _sqrt
         ___flge
           ___lwtofl (ARG)
             ___flpack
           _fabs (ARG)
             ___flneg
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
         ___flmul
           ___flpack
         ___flneg (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           ___fldiv (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
           ___flmul (ARG)
             ___flpack
         ___flsub (ARG)
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
             ___flmul (ARG)
               ___flpack
             ___flpack (ARG)
             ___lwtofl (ARG)
               ___flpack
           _floor (ARG)
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___flneg (ARG)
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
               ___flmul (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lwtofl (ARG)
                 ___flpack
             ___flge
               ___lwtofl (ARG)
                 ___flpack
               _fabs (ARG)
                 ___flneg
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___flpack
                       ___flpack (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                     ___lwtofl (ARG)
                       ___flpack
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
                 ___flpack (ARG)
                 ___lwtofl (ARG)
                   ___flpack
               ___flneg (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___flpack
                     ___flpack (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                   ___lwtofl (ARG)
                     ___flpack
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___flpack
                   ___flpack (ARG)
                 ___flmul (ARG)
                   ___flpack
             _frexp

 _ISR_Bassa (ROOT)
   _CANisRxReady
   _CANreceiveMessage
   i1_CANsendMessage
   i1_can_send
     i1_CANisTxReady
     i1_CANsendMessage
   i1_delay_ms
     i1___wmul

 _ISR_Alta (ROOT)
   ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     5D      E2       7       88.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     79      89       5       85.6%
BITCOMRAM           5F      0       2       0        2.1%
COMRAM              5F     28      57       1       91.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C2      20        0.0%
DATA                 0      0     1C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Jun 12 22:16:14 2016

               ___altofl@sign 00BD                             _n 0138                             _x 0015  
                           _z 00DD                  ___fldiv@cntr 009C          __end_of_CANSetFilter 23D2  
                ___fldiv@sign 009E            delay_s@repeat_loop 0080                            bsr 000FE0  
         ___wmul@multiplicand 0079                   __CFG_BORV$3 000000              i1___wmul@product 0032  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                  i1_can_send 5E32                  __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000  
                ___flpack@arg 0077                  ___flpack@exp 007B                    _MUX_select 0100  
                         l400 2ABA                           l401 2ABE                           l402 2ACA  
                         l500 2132                           l501 2136                           l510 2246  
                         l502 2142                           l430 3EF0                           l511 2252  
                         l431 3EF4                           l520 2362                           l512 2256  
                         l432 3F00                           l521 2366                           l513 2262  
                         l505 2222                           l441 400C                           l433 3F04  
                         l361 265C                           l522 2372                           l506 2226  
                         l442 4010                           l434 3F10                           l362 23E8  
                         l523 2376                           l507 2232                           l443 401C  
                         l435 3F14                           l371 25A6                           l363 23EC  
                         l524 2382                           l516 2342                           l508 2236  
                         l444 4020                           l436 3F20                           l356 52CC  
                         l380 26FE                           l372 25AA                           l364 24E6  
                         l517 2346                           l509 2242                           l461 1DA4  
                         l445 402C                           l437 3F24                           l357 52D6  
                         l381 2708                           l373 25B6                           l365 2474  
                         l518 2352                           l462 1DA8                           l446 4030  
                         l438 3F30                           l382 2712                           l366 247E  
                         l519 2356                           l463 1DB4                           l447 403C  
                         l391 28FC                           l383 271C                           l367 2488  
                         l480 1F02                           l472 1EC2                           l464 1DB8  
                         l448 4040                           l392 2900                           l376 28E6  
                         l368 2492                           l473 1EC6                           l465 1DC4  
                         l449 404C                           l393 29FA                           l377 2672  
                         l801 17BA                           l490 2016                           l474 1ED2  
                         l466 1DC8                           l554 6574                           l394 2988  
                         l386 2830                           l378 2676                           l491 2022  
                         l483 1FE2                           l475 1ED6                           l467 1DD4  
                         l395 2992                           l387 2834                           l379 2770  
                         l484 1FE6                           l476 1EE2                           l468 1DD8  
                         l396 299C                           l388 2840                           l485 1FF2  
                         l477 1EE6                           l469 1DE4                           l397 29A6  
                         l741 5074                           l494 2102                           l486 1FF6  
                         l478 1EF2                           l495 2106                           l487 2002  
                         l479 1EF6                           l567 6424                           l496 2112  
                         l488 2006                           l840 4DC2                           l497 2116  
                         l489 2012                           l753 51F4                           l498 2122  
                         l499 2126                           l739 51FA                           l773 0DC8  
                         l782 0E38                           l776 0E06                           l786 1600  
                         l795 16FE                           l898 6524                  __CFG_CPB$OFF 000000  
                __CFG_CPD$OFF 000000                    _MUX_toggle 02B0                    i1_delay_ms 646A  
                         _abs 6502                           _asd 02B2                           _dir 02B4  
                         _cos 5D4C                           _msg 0144                           _sin 43C0  
                         prod 000FF3                           wreg 000FE8               ?_configurations 002E  
                ___flmul@cntr 008E                  ___flmul@sign 008F                  __CFG_LVP$OFF 000000  
               ___flpack@sign 007C                  ___fltol@exp1 00B8                  __CFG_WDT$OFF 000000  
                        l1024 4A08                          l1121 547A                          ?_abs 0077  
                        l1141 63AA                          l1128 54DC                          l1129 54F4  
                        l1153 475A                          l1155 4788                          l1164 4874  
                        l1149 471C                          l1189 5CFA                          l1470 4E42  
                        l1463 459A                          l1471 4E2E                          l1464 46CA  
                        l1483 5900                          l4323 2728                          ?_cos 01B0  
                        l4343 2824                          l4247 249E                          l4425 2AD0  
                        l4273 25BC                          l4419 2AAE                          l4267 259A  
                        l6221 6300                          l4349 2846                          l4711 1ADE  
                        l6231 472E                          l4625 3F7E                          l6209 5542  
                        l6321 561A                          l6305 55A2                          l6401 59FA  
                        l7009 0E2A                          l4651 4052                          l4619 3F36  
                        l6251 47C0                          l6243 477E                          l7115 1686  
                        l4901 2190                          l6261 4814                          l6237 476C  
                        l6333 566A                          l6317 55F2                          l6405 5A18  
                        l6191 545C                          l6183 53F4                          l6431 56E0  
                        l6271 4864                          l6263 4820                          l6327 563A  
                        l6415 60C6                          l6503 5866                          l4399 29B2  
                        l7119 16C0                          l4833 1F50                          l4729 1B9A  
                        l4593 3E64                          l4577 3DAC                          l6361 63E4  
                        l6257 47F2                          l6329 5642                          l6353 5D46  
                        l7129 175C                          l4827 1F08                          l4747 1C56  
                        l4675 1968                          l6187 540A                          l6275 489C  
                        l6259 4804                          l6339 568A                          l6347 5CA8  
                        l6371 5938                          l7091 15C2                          l7243 608E  
                        l4861 2028                          l4765 1D12                          l4693 1A22  
                        l6197 54BA                          l6189 541C                          l6461 57C0  
                        l6437 5706                          l6269 4852                          l7157 180E  
                        l7237 6042                          l6623 65A6                          l4935 22B0  
                        l6199 54CC                          l6279 48C4                          l6391 59BC  
                        l6607 4524                          l6551 4FE2                          l7159 181E  
                        l7175 1894                          l7239 6052                          l4929 2268  
                        l4793 1DEA                          l6457 57AC                          l6449 5756  
                        l6289 4918                          l6481 5A82                          l6537 4EC4  
                        l7169 184A                          l4963 2388                          l4867 2070  
                        l6299 557C                          l6483 5B28                          l6387 59A8  
                        l6707 5DD4                          l6627 6416                          l6651 5BDC  
                        l6635 5B4E                          l6803 4D8A                          l6811 4DE4  
                        l6469 624A                          l6397 59DA                          l6645 5B9E  
                        l6805 4D92                          l4895 2148                          l4799 1E32  
                        l6399 59EC                          l6495 5830                          l6719 634E  
                        l6583 4B76                          l6567 4994                          l6655 5C18  
                        l6761 52C4                          l6665 40FA                          l6913 5034  
                        l6905 501C                          l6763 52DA                          l6755 526E  
                        l6499 5844                          l6595 43F8                          l6579 4B5E  
                        l6691 431A                          l6923 50C2                          l6749 525E  
                        l6781 64F4                          l6767 52E2                          l6679 4238  
                        l6935 50EE                          l6919 5070                          l6769 5326  
                        l6777 64E0                          l6939 5128                          ?_sin 00D1  
                        l6975 0D60                          l6959 51B6                          l6985 0D84  
                        l6989 0DBE                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          u5210 199C                          u5140 4072  
                        u5060 3F56                          u4420 24BE                          u4430 250A  
                        u5215 1990                          u5305 1B74                          u5225 19FC  
                        u5145 4066                          u5065 3F4A                          u4425 24B2  
                        u5330 1BD0                          u5250 1A58                          u5170 18E2  
                        u4435 24FE                          u4445 256A                          u4550 2748  
                        u5335 1BC4                          u5255 1A4C                          u5175 18D6  
                        u4560 2794                          u5345 1C30                          u5265 1AB8  
                        u5185 1942                          u4705 2A7E                          u5370 1C8C  
                        u5290 1B14                          u8010 60F8                          u4555 273C  
                        u5700 2168                          u5620 2048                          u5540 1F28  
                        u5460 1E0A                          u8100 5854                          u4565 2788  
                        u5375 1C80                          u5295 1B08                          u4575 27F4  
                        u4680 29D2                          u5705 215C                          u5625 203C  
                        u5545 1F1C                          u5465 1DFE                          u5385 1CEC  
                        u4930 3D26                          u8018 60FC                          u4690 2A1E  
                        u4685 29C6                          u4935 3D1A                          u4695 2A12  
                        u4945 3D86                          u4970 3DDE                          u8250 451C  
                        u5860 23A8                          u5780 2288                          u8260 451E  
                        u8180 49C4                          u8190 49C6                          u4975 3DD2  
                        u5865 239C                          u5785 227C                          u4985 3E3E  
                        u8530 502C                          u8525 4DDC                          u8526 4DDE  
                        u8471 4C1E                          u8481 4C2A                          u7940 5958  
                        u7945 594C                          u8850 17EE                          u8977 6418  
            matematica@raggio 01D8      __end_ofi1_CANsendMessage 3216           __size_of_CANSetMask 03AA  
                        _Pmin 0128                          abs@a 0077                          _alfa 012C  
                        _fabs 637E                          _data 0153                          _beta 0130  
                        _atan 4948                          _asin 409C                          _main 5FF4  
                        cos@f 01B0                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr0l 000FE9                          fsr2h 000FDA                          fsr1l 000FE1  
                        indf2 000FDF                          fsr2l 000FD9                          _sqrt 4DF2  
                        pclat 000FFA                          sin@f 00D1                          sin@y 0183  
                        prodh 000FF4                          prodl 000FF3                          start 032C  
               __CFG_IESO$OFF 000000                delay_s@value_s 007F           ISR_Bassa@PORTA_temp 0055  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000              _CANOperationMode 659C  
                       ??_abs 0079                         ??_cos 00D9                         ??_sin 00D5  
  __size_of_CANreceiveMessage 052E                         ?_fabs 00AF                 ___fltol@sign1 00B7  
                       ?_atan 00BF                         ?_asin 0194               __end_of___fladd 4948  
                       ?_main 002E               __end_of___fldiv 57F0               __end_of___flneg 63F8  
             __end_of___flmul 56BA               __end_of___flsub 6282               __end_of___fltol 5A2C  
                       ?_sqrt 00D1                         _T0CON 000FD5                         _T3CON 000FB1  
          __size_of_ISR_Bassa 0314               __end_of___lwdiv 61B6                         i1l400 316E  
                       i1l401 3172                         i1l402 317C                         i1l408 3A70  
                       i1l361 2DA8                         i1l362 2B86                         i1l371 2D02  
                       i1l363 2B8A                         i1l380 2E2E                         i1l372 2D06  
                       i1l364 2C5C                         i1l700 00CA                         i1l381 2E36  
                       i1l373 2D10                         i1l365 2BF8                         i1l382 2E3E  
                       i1l366 2C00                         i1l391 2FF2                         i1l383 2E46  
                       i1l367 2C08                         i1l392 2FF6                         i1l376 2FDE  
                       i1l368 2C10                         i1l393 30C8                         i1l377 2DBC  
                       i1l721 02C6                         i1l713 01C2                         i1l554 6596  
                       i1l394 3064                         i1l386 2F38                         i1l378 2DC0  
                       i1l395 306C                         i1l387 2F3C                         i1l379 2E92  
                       i1l396 3074                         i1l388 2F46                         i1l724 02E6  
                       i1l397 307C                         i1l559 65C6                         i1l567 6494  
                       i1l696 008A                         i2l690 5F56                         _TMR0H 000FD7  
                       _TMR0L 000FD6                         _TMR3H 000FB3                         _TMR3L 000FB2  
                       _PORTA 000F80                         _TRISA 000F92             _CANisRxReady$2843 002E  
                       _TRISB 000F93                         _TRISC 000F94            __end_ofsin@coeff_a 0D41  
          __end_ofsin@coeff_b 0D51                 __CFG_PWRT$OFF 000000              __end_of_ISR_Alta 5FF4  
             __end_of_delay_s 6502                 __CFG_WRT0$OFF 000000                         _J_var 0120  
               __CFG_WRT1$OFF 000000                         _K_var 0124                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000            CANInitialize@flags 0089                __CFG_EBTR2$OFF 000000  
               ___awtofl@sign 0085                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
                       _bordo 0134                         fabs@d 00AF                         _first 02B9  
                       _floor 57F0                         _frexp 60A0                         _errno 0142  
                       atan@f 00BF                         atan@x 00C7                         atan@y 00C3  
                       asin@x 0194                         asin@y 01A8                __pbitbssCOMRAM 02B0  
        __end_of_CANisRxReady 65CC                         sin@x2 018B                         tablat 000FF5  
        __end_of_CANisTxReady 657C              __end_ofi1___wmul 6556                         plusw2 000FDB  
                       sqrt@i 018B                         sqrt@q 018C                         sqrt@x 0190  
                       sqrt@y 00D1                         sqrt@z 0187                         status 000FD8  
         i1___wmul@multiplier 002E                  ?_park_search 002E               __initialization 6282  
                __end_of_fabs 63BC                  __end_of_atan 4B9E                  __end_of_asin 43C0  
                __end_of_main 60A0                  __end_of_sqrt 501A                   ?i1_can_send 002E  
                      ??_fabs 00B3                        ??_atan 00C3                        ??_asin 00D9  
                      ??_main 00D9             _park_routine$3670 01C4             _park_routine$3671 01C8  
           _park_routine$3665 01CC             _park_routine$3666 01D0             _park_routine$3667 01BC  
           _park_routine$3668 01C0             _park_routine$3669 01D4                        ??_sqrt 00D5  
               __activetblptr 000003                   ?i1_delay_ms 0034             _CANisTxReady$2841 0077  
                      _ADCON1 000FC1                        ?_floor 00BF                        ?_frexp 0077  
            __end_of___altofl 6332                        _CANCON 000F6F              __end_of___flpack 5556  
          _distance_received1 02B7              __end_of___awtofl 637E               __CFG_BBSIZ$1024 000000  
               _avvicinamento 02B3                        i1l6101 0230                        i1l6021 00D0  
                      i1l5313 2E50                        i1l6025 00DE                        i1l6017 00BC  
                      i1l6123 02CA                        i1l5333 2F2E                        i1l5237 2C1A  
                      i1l6117 02A2                        i1l6061 01B6                        i1l6053 0186  
                      i1l6029 00EC                        i2l1423 61AC                        i1l5415 3182  
                      i1l5263 2D16                        i1l6039 011C                        i1l5521 3A36  
                      i1l5513 39F6                        i1l5505 39B6                        i1l5409 3164  
                      i1l5257 2CF8                        i1l5523 3A6A                        i1l5339 2F4C  
                      i1l5517 3A16                        i1l5509 39D6                        i1l6093 0200  
                      i1l5463 37D8                        i1l6089 01F8                        i1l5571 3C5E  
                      i1l5459 37D0                        i1l5389 3086                        i1l5583 3CB8  
                      i1l5575 3C7C                        i1l5567 3C40                        i1l5559 3BD0  
                      i1l5585 3CEC                        i1l5497 3944                        i1l5579 3C9A  
                      i1l5971 5EB4                        i1l5955 5E3A                        i1l5947 6486  
                      i1l5965 5E80                        i1l5975 5EE6                        i2l7219 5FB8  
                      i2l7191 616A                        i2l7187 6152                        i2l7189 6160  
                      i2l7199 619C              __end_of___lwtofl 64D4                        _RXB0D0 000F66  
                      _RXB0D1 000F67                        _RXB0D2 000F68                        _RXB0D3 000F69  
                      _RXB0D4 000F6A                        _RXB1D0 000F56                        _RXB0D5 000F6B  
                      _RXB1D1 000F57                        _RXB0D6 000F6C                        _RXB1D2 000F58  
                      _RXB0D7 000F6D                        _RXB1D3 000F59                        _RXB1D4 000F5A  
                      _RXB1D5 000F5B                        _RXB1D6 000F5C                        _RXB1D7 000F5D  
                      _TXB0D0 000F46                        _TXB0D1 000F47                        _TXB0D2 000F48  
                      _TXB0D3 000F49                        _TXB1D0 000F36                        _TXB0D4 000F4A  
                      _TXB1D1 000F37                        _TXB0D5 000F4B                        _TXB1D2 000F38  
                      _TXB0D6 000F4C                        _TXB1D3 000F39                        _TXB0D7 000F4D  
                      _TXB2D0 000F26                        _TXB1D4 000F3A                        _TXB2D1 000F27  
                      _TXB1D5 000F3B                        _TXB2D2 000F28                        _TXB1D6 000F3C  
                      _TXB2D3 000F29                        _TXB1D7 000F3D                        _TXB2D4 000F2A  
                      _TXB2D5 000F2B                        _TXB2D6 000F2C                        _TXB2D7 000F2D  
          CANsendMessage@data 007B              __end_of_can_send 5C54            CANsendMessage@tamp 0083  
           __end_of_ISR_Bassa 032C              __end_of_delay_ms 6432         __size_of_CANSetFilter 0B2A  
              __CFG_XINST$OFF 000000                        ___flge 5C54               _data_correction 015B  
                   ??___fladd 00A7                        ___wmul 6432                     ??___fldiv 0098  
                   ??___flneg 00AF                __CFG_STVREN$ON 000000                     ??___flmul 0089  
                   ??___flsub 00D1                     ??___fltol 00B3                     ??___lwdiv 0064  
                ??_CANSetMask 007C                        clear_0 6288                        clear_1 6294  
                      clear_2 62A4                     ??_delay_s 007F                        floor@i 00C3  
                      floor@x 00BF               __CFG_BOREN$BOHW 000000       __size_ofi1_CANisTxReady 0020  
                      sin@sgn 018F                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8               ISR_Bassa@F16865 01E0  
                      sqrt@og 0183                  _CANSetFilter 18A8                    ___fladd@f1 009F  
                  ___fladd@f2 00A3                    ___flge@ff1 00B3                    ___flge@ff2 00B7  
                  ___altofl@c 00B9                    ___fldiv@f1 0090                    ___fldiv@f2 0094  
                  ___fldiv@f3 0098                    __accesstop 0060       __end_of__initialization 62D4  
          __end_of_CANSetMask 409C               __CFG_PBADEN$OFF 000000                    ___flneg@f1 00AB  
               ?_park_routine 002E           __size_ofi1_can_send 00E6                    ___flmul@f1 0081  
                  ___flmul@f2 0085                  eval_poly@res 00B7                 ___rparam_used 000000  
                  ___flsub@f1 00C9                    ___flsub@f2 00CD                    ___fltol@f1 00AF  
                  ___awtofl@c 0081           __size_ofi1_delay_ms 0038                __pcstackCOMRAM 002E  
                   ?_ISR_Alta 002E                  __pidataBANK0 65CE                  __pidataBANK1 65CC  
               __end_of_floor 5912                 __end_of_frexp 6134              ??_configurations 0091  
                  ___lwtofl@c 0081                     ?i1___wmul 002E         CANSetFilter@numBuffer 0080  
       __size_of_CANisRxReady 0018         __size_of_CANisTxReady 0026                       ??_floor 00C3  
                     ??_frexp 007D      __end_of_CANOperationMode 65B4                    __pbssBANK0 00D9  
                  __pbssBANK1 0100               _sensor_distance 0001            __size_of_eval_poly 011A  
           ?i1_CANsendMessage 002E                    _data_brake 0026                ??_park_routine 01B8  
     __size_of_CANsendMessage 07A0                    _data_speed 0163                    _activation 02B1  
          ??i1_CANsendMessage 0036            __size_of_parallelo 0254          __size_of_park_search 01EE  
           _old_alignment_gap 0011                    ??_ISR_Alta 0067                       ?___flge 00B3  
                     ?___wmul 0077            park_routine@raggio 01DC                     ?___altofl 00B9  
            _counter_distance 00E7                     ?___flpack 0077                  _CANisRxReady 65B4  
                     _CANSTAT 000F6E                     ?___awtofl 0081                  _CANisTxReady 6556  
                     _BRGCON1 000F70                       _BRGCON2 000F71                       _BRGCON3 000F72  
                  ??i1___wmul 0032                     ?___lwtofl 0081                     ?_can_send 002E  
      __size_of_CANInitialize 01CE           matematica@larghezza 01D4                     ?_delay_ms 007D  
                     _RXB0DLC 000F65                       _RXB1DLC 000F55                       _RXB0CON 000F60  
                     _RXB1CON 000F50                       _TXB0DLC 000F45                       _TXB1DLC 000F35  
                     _TXB2DLC 000F25           CANsendMessage@flags 007E                       __Hparam 0000  
                     __Lparam 0000              delay_ms@value_ms 007D               __size_of___flge 00F8  
                  _matematica 3216                       ___fladd 46DC                       ___fldiv 56BA  
                     ___flneg 63BC                       ___flmul 5556                       ___flsub 6222  
                     ___fltol 5912               __size_of___wmul 0038                       ___lwdiv 6134  
                __psmallconst 0D00                    ??___altofl 00BD                    ??___flpack 007D  
        CANInitialize@propSeg 008E                       __pcinit 6282                    ??___awtofl 0085  
           __end_of_eval_poly 5B46                       _delay_s 64D4                       __ramtop 0D00  
                ??i1_can_send 003E                       __ptext0 5FF4                       __ptext1 501A  
                     __ptext2 3216                       __ptext3 0D52                       __ptext4 4B9E  
                     __ptext5 5B46                       __ptext6 23D2                       __ptext7 6556  
                     __ptext8 409C                       __ptext9 4DF2                    ??___lwtofl 0085  
                   _T0CONbits 000FD5                  ??i1_delay_ms 0036                i1_CANisTxReady 657C  
                     _counter 0024                    ??_can_send 0087                  __size_of_abs 002C  
                __size_of_cos 00E6               atan@val_squared 00CC                  __size_of_sin 031C  
                     atan@val 00D0             __end_of_parallelo 4DF2                    ??_delay_ms 007F  
                     asin@sgn 0198        CANreceiveMessage@error 0038               _start_operation 02BE  
              __pintcode_body 5F18          end_of_initialization 62D4                       int_func 5F18  
          __end_ofi1_can_send 5F18                 _CANInitialize 5208            __end_ofi1_delay_ms 64A2  
                   _ISR_Bassa 0018                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE         i1___wmul@multiplicand 0030        __end_ofi1_CANisTxReady 659C  
     _steering_correction_dir 02BF                     _PORTBbits 000F81                CANSetMask@mask 0077  
              CANSetMask@tamp 0081                  _distance_set 0110                CANSetMask@type 007B  
        __end_of_park_routine 18A8                     _TRISBbits 000F93                   ___fldiv@exp 009D  
                   _MUX_index 0021                    _pulse_time 001D       _clock_counter_reference 00E1  
                 ___flmul@exp 0089                _CANsendMessage 23D2              CANInitialize@BRP 0088  
            CANInitialize@SJW 0087                ?_CANInitialize 0085           i1_CANisTxReady$2841 002E  
                  ?_ISR_Bassa 002E                   ?_matematica 002E                __end_of___flge 5D4C  
           __size_of_ISR_Alta 5FEC                __end_of___wmul 646A               ?i1_CANisTxReady 002E  
                  floor@expon 00C7           start_initialization 6282             __size_ofi1___wmul 0028  
                  eval_poly@d 00AF                    eval_poly@n 00B1                    eval_poly@x 00AB  
                 __end_of_abs 652E                   __end_of_cos 5E32                   __end_of_sin 46DC  
         CANSetMask@numBuffer 0080                 _data_speed_rx 0108        __end_of_CANsendMessage 2B72  
           ?_CANOperationMode 002E                 _data_steering 016B            i1delay_ms@value_ms 0034  
                  frexp@value 0077            ??_CANOperationMode 0077             _distance_received 02B6  
  CANInitialize@FilterConfig1 008F    CANInitialize@FilterConfig2 0090           _steering_correction 0025  
                    ??___flge 00BB  ISR_Bassa@MUX_index_collision 0053                      ??___wmul 007B  
                 __pdataBANK0 00E8                   __pdataBANK1 01E0              __CFG_LPT1OSC$OFF 000000  
   __size_ofi1_CANsendMessage 06A4             __size_of___altofl 0058             __size_of___flpack 0180  
      CANInitialize@phaseSeg1 0085        CANInitialize@phaseSeg2 0086             __size_of___awtofl 004C  
                 __pbssCOMRAM 0001             __size_of___lwtofl 0032                 __pcstackBANK0 0060  
               __pcstackBANK1 0183                   _BRGCON2bits 000F71                   _BRGCON3bits 000F72  
           __size_of_can_send 010E             __size_of_delay_ms 003A               ?_CANsendMessage 0077  
         __size_of_matematica 05AE               ??_CANInitialize 008A                     _asin$3680 01AC  
                   _asin$3681 01A4                     _asin$3682 01A0                     _asin$3679 019C  
                  sin@coeff_a 0D2D                    sin@coeff_b 0D41                 ??_park_search 01DC  
               _alignment_gap 00D9            CANSetFilter@filter 0077                     _data_test 0173  
            ___lwdiv@dividend 0060                   ??_ISR_Bassa 003E                     __pintcode 0008  
                    ?___fladd 009F                      ?___fldiv 0090                      ?___flneg 00AB  
                    ?___flmul 0081                      ?___flsub 00C9                      ?___fltol 00AF  
       __size_of_park_routine 0B56                      ?___lwdiv 0060                   __pintcodelo 0018  
                    ?_delay_s 002E                   __smallconst 0D00                   _COMSTATbits 000F74  
                   _eval_poly 5A2C              ___lwdiv@quotient 0065                __size_of_floor 0122  
              __size_of_frexp 0094       __size_of_configurations 006C                     _parallelo 4B9E  
                _new_distance 02BA         park_routine@larghezza 01D8         CANreceiveMessage@tamp 0039  
              _prima_sterzata 013C                ___wmul@product 007B                      _LATBbits 000F8A  
                   atan@recip 00CB                  _park_routine 0D52  _delay_quartz_frequency_value 00E8  
                    _IPR3bits 000FA5                      _PIE3bits 000FA3                      i1u620_20 2C7E  
                    i1u620_25 2C74                      i1u621_25 2CCA                      i1u632_20 2E6E  
                    i1u632_25 2E64                      i1u633_20 2EB4                      i1u633_25 2EAA  
                    i1u634_25 2F00                      i1u619_20 2C38                      i1u619_25 2C2E  
                    i1u645_20 30A4                      i1u645_25 309A                      i1u646_20 30EA  
                    i1u670_25 3B56                      i1u646_25 30E0                      i1u743_20 019E  
                    i1u647_25 3136                      i1u656_20 3884                      i1u744_20 01A0  
                    i1u656_26 3886                      i1u657_20 38B2                      i1u665_25 3A42  
                    i1u657_26 38B4                      i1u667_20 3B18                      i1u659_25 38C8  
                    i1u667_26 3B1A                      i1u668_20 3B42                      i1u676_25 3CC4  
                    i1u668_26 3B44                      _PIR3bits 000FA4                      i1u898_27 01E4  
                    i1u899_27 6488                      _RXB0EIDH 000F63                      _RXB0EIDL 000F64  
                    _RXB1EIDH 000F53                      _RXB1EIDL 000F54                      _ISR_Alta 0008  
                   _set_speed 00E5                      _RCONbits 000FD0              __CFG_WDTPS$32768 000000  
                    _RXB0SIDH 000F61                      _RXB0SIDL 000F62                      _RXF0EIDH 000F02  
                    _RXB1SIDH 000F51                      _RXF0EIDL 000F03                      _RXB1SIDL 000F52  
                    _RXF1EIDH 000F06                      _RXF1EIDL 000F07                      _RXF2EIDH 000F0A  
                    _RXF2EIDL 000F0B                      _RXF3EIDH 000F0E                      _RXF3EIDL 000F0F  
                    _RXF4EIDH 000F12                      _RXF4EIDL 000F13                      _RXF5EIDH 000F16  
                    _RXF5EIDL 000F17                      _RXF0SIDH 000F00                      _RXF0SIDL 000F01  
         __end_of_park_search 5208                      _TXB0EIDH 000F43                      _RXF1SIDH 000F04  
                    _TXB0EIDL 000F44                      _RXF1SIDL 000F05                      _TXB1EIDH 000F33  
                    _RXF2SIDH 000F08                      _TXB1EIDL 000F34                      _RXF2SIDL 000F09  
                    _TXB2EIDH 000F23                      _RXF3SIDH 000F0C                      _TXB2EIDL 000F24  
                    _RXF3SIDL 000F0D                      _RXF4SIDH 000F10                      _RXF4SIDL 000F11  
                    _RXF5SIDH 000F14                      _RXF5SIDL 000F15                      _RXM0EIDH 000F1A  
                    _RXM0EIDL 000F1B                      _TXB0SIDH 000F41                      _RXM1EIDH 000F1E  
                    _TXB0SIDL 000F42                      _RXM1EIDL 000F1F                      _TXB1SIDH 000F31  
                    _TXB1SIDL 000F32                      _TXB2SIDH 000F21                      _TXB2SIDL 000F22  
                    _RXM0SIDH 000F18                      _RXM0SIDL 000F19                      _RXM1SIDH 000F1C  
                    _RXM1SIDL 000F1D                   _distance_dx 0019                   _distance_sx 001B  
                    _RXERRCNT 000F75                      _TXERRCNT 000F76             ___wmul@multiplier 0077  
                    i1___wmul 652E                    ?_eval_poly 00AB           __end_ofatan@coeff_a 0D19  
         __end_ofatan@coeff_b 0D2D                 ?_CANSetFilter 0077                   _INTCON2bits 000FF1  
                  _CANCONbits 000F6F                    ?_parallelo 002E              _distance_average 00E3  
                   frexp@eptr 007B                      __Hparam0 0000                      __Lparam0 0000  
                _RXB0SIDLbits 000F62                  _RXB1SIDLbits 000F52              ??i1_CANisTxReady 002E  
                ??_matematica 00D9                 _request_sent1 02BD              __size_of___fladd 026C  
                  _CANSetMask 3CF2              __size_of___fldiv 0136              __size_of___flneg 003C  
            __size_of___flmul 0164              __size_of___flsub 0060              __size_of___fltol 011A  
                    ___altofl 62DA              i1_CANsendMessage 2B72                      _cos$3683 01B4  
                    ___flpack 53D6              __size_of___lwdiv 0082                      ___awtofl 6332  
            __size_of_delay_s 002E                      ___lwtofl 64A2                      _can_send 5B46  
                _RXF0SIDLbits 000F01                      _delay_ms 63F8               ___lwdiv@divisor 0062  
                _RXF1SIDLbits 000F05               ___lwdiv@counter 0064         i1CANsendMessage@flags 0035  
              ??_CANSetFilter 007C                      __ptext10 4948                      __ptext11 637E  
                    __ptext20 60A0                      __ptext12 6502                      __ptext21 5912  
                    __ptext13 6332                      __ptext30 64A2                      __ptext22 5C54  
                    __ptext14 64D4                      __ptext31 53D6                      __ptext23 62DA  
                    __ptext15 63F8                      __ptext40 5E32                      __ptext32 61B6  
                    __ptext24 5A2C                      __ptext16 6432                      __ptext41 2B72  
                    __ptext33 5208                      __ptext25 5556                      __ptext17 5D4C  
                    __ptext42 657C                      __ptext34 3CF2                      __ptext26 6222  
                    __ptext18 43C0                      __ptext43 37C4                      __ptext35 18A8  
                    __ptext27 46DC                      __ptext19 57F0                      __ptext44 65B4  
                    __ptext36 659C                      __ptext28 63BC                      __ptext29 56BA  
                    __ptext46 6134                      __ptext38 646A                      __ptext39 652E  
                _RXF2SIDLbits 000F09                      _sin$3684 0187                  _RXF3SIDLbits 000F0D  
                    _distance 0140            __end_of_matematica 37C4                  _RXF4SIDLbits 000F11  
                _RXF5SIDLbits 000F15      CANsendMessage@dataLength 007D                 __size_of_fabs 003E  
               __size_of_atan 0256                 __size_of_asin 0324                 __size_of_main 00AC  
               __size_of_sqrt 0228                   _park_search 501A          CANreceiveMessage@msg 002E  
                _TXB0SIDLbits 000F42                  _TXB1SIDLbits 000F32                  _TXB2SIDLbits 000F22  
   __size_of_CANOperationMode 0018                 ?_CANisRxReady 002E                 ?_CANisTxReady 002E  
                 atan@coeff_a 0D01                   atan@coeff_b 0D19                   _RXB0DLCbits 000F65  
       ___flmul@f3_as_product 008A                   _RXB1DLCbits 000F55                  _RXM0SIDLbits 000F19  
                 _RXB0CONbits 000F60                   _RXB1CONbits 000F50             _CANreceiveMessage 37C4  
                _RXM1SIDLbits 000F1D                    _INTCONbits 000FF2                   ??_eval_poly 00B3  
            ??_CANsendMessage 007F    i1CANsendMessage@dataLength 0034            ?_CANreceiveMessage 002E  
                _request_sent 02BC                _configurations 61B6      CANsendMessage@identifier 0077  
                 ??_parallelo 01B0                      intlevel1 0000                      intlevel2 0000  
            CANSetFilter@tamp 0081              CANSetFilter@type 007B           ??_CANreceiveMessage 0030  
        i1CANsendMessage@data 0032          i1CANsendMessage@tamp 003A                   _TXB0DLCbits 000F45  
                 _TXB1DLCbits 000F35                   _TXB0CONbits 000F40                   _TXB2DLCbits 000F25  
                 _TXB1CONbits 000F30                   _TXB2CONbits 000F20          CANOperationMode@mode 0077  
              ??_CANisRxReady 002E                   ?_CANSetMask 0077                ??_CANisTxReady 0077  
              _distance_error 02B5               _matematica$3672 01B8               _matematica$3673 01BC  
             _matematica$3674 01C0               _matematica$3675 01C4               _matematica$3676 01D0  
             _matematica$3677 01C8               _matematica$3678 01CC     __end_of_CANreceiveMessage 3CF2  
  i1CANsendMessage@identifier 002E                   _timerValue2 001F                    _TMR3H_temp 0022  
      __end_of_configurations 6222                    _TMR3L_temp 0023                 _distance_wait 02B8  
          _old_dir_correction 02BB                  ___fladd@exp1 00AA                  ___fladd@exp2 00A9  
                ___fladd@sign 00A8         __end_of_CANInitialize 53D6         _sensor_distance_short 017B  
         _sensor_distance_old 0118  
